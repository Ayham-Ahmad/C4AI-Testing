======== RAG FUSION LOG ========
Question:
give me a full tutrail on asimblee lang

-------- query GENERATED --------
Query 1: Assembly language tutorial guide
Query 2: Learn Assembly language programming
Query 3: Assembly lang basics and examples
Query 4: Introduction to Assembly language coding

-------- CONTEXT RETRIEVED --------
int main() {
struct myStructure s1;
return 0;
}// Create a structure called myStructure
struct myStructure {
int myNum;
char myLetter;
};

int main() {
// Create a structure variable of myStructure called s1
struct myStructure s1;

// Assign values to members of s1
s1.myNum = 13;
s1.myLetter = 'B';

// Print values
printf("My number: %d\n", s1.myNum);
printf("My letter: %c\n", s1.myLetter);

return 0;
}// Create different struct variables
struct myStructure s1;
struct myStructure s2;

// Assign values to different struct variables
s1.myNum = 13;
s1.myLetter = 'B';

s2.myNum = 20;
s2.myLetter = 'C';struct myStructure {
int myNum;
char myLetter;
char myString[30];  // String
};

int main() {
struct myStructure s1;

// Trying to assign a value to the string
s1.myString = "Some text";

// Trying to print the value
printf("My string: %s", s1.myString);

return 0;
}struct myStructure {
int myNum;
char myLetter;
char myString[30]; // String
};

int main() {
struct myStructure s1;

// Assign a value to the string using the strcpy function
strcpy(s1.myString, "Some text");

printf("Hello %s", fullName);

// Type your full name: John Doe
// Hello John Doeint myAge = 43;
printf("%p", &myAge); // Outputs 0x7ffe5367e044int myAge = 43; // an int variable

printf("%d", myAge);  // Outputs the value of myAge (43)
printf("%p", &myAge); // Outputs the memory address of myAge (0x7ffe5367e044)int myAge = 43;     // An int variable
int* ptr = &myAge;  // A pointer variable, with the name ptr, that stores the address of myAge

// Output the value of myAge (43)
printf("%d\n", myAge);

// Output the memory address of myAge (0x7ffe5367e044)
printf("%p\n", &myAge);

// Output the memory address of myAge with the pointer (0x7ffe5367e044)
printf("%p\n", ptr);int myAge = 43;     // Variable declaration
int* ptr = &myAge;  // Pointer declaration

// Reference: Output the memory address of myAge with the pointer (0x7ffe5367e044)
printf("%p\n", ptr);

// Dereference: Output the value of myAge with the pointer (43)
printf("%d\n", *ptr);int* myNum;
int *myNum;int myNumbers[4] = {25, 50, 75, 100};int myNumbers[4] = {25, 50, 75, 100};
int i;

int main() {
printf("Hello World!");
return 0;
}#include <stdio.h>

int main() {
printf("Hello World!");
return 0;
}#include <stdio.h>

int main() {
printf("Hello World!");
return 0;
}printf("Hello World!");printf("Hello World!")printf("Hello World!");
printf("Have a good day!");
return 0;#include <stdio.h>

int main() {
printf("Hello World!");
return 0;
}printf("This sentence will work!");printf(This sentence will produce an error.);#include <stdio.h>

int main() {
printf("Hello World!");
printf("I am learning C.");
printf("And it is awesome!");
return 0;
}#include <stdio.h>

int main() {
printf("Hello World!\n");
printf("I am learning C.");
return 0;
}#include <stdio.h>

int main() {
printf("Hello World!\nI am learning C.\nAnd it is awesome!");
return 0;
}#include <stdio.h>

int main() {
printf("Hello World!\n\n");
printf("I am learning C.");
return 0;
}// This is a comment
printf("Hello World!");/* The code below will print the words Hello World!
to the screen, and it is amazing */
printf("Hello World!");type variableName = value;int myNum = 15;// Declare a variable
int myNum;

// Write to the memory
*ptr = 2;
ptr[1] = 4;
ptr[2] = 6;

// Read from the memory
printf("%d\n", *ptr);
printf("%d %d %d", ptr[1], ptr[2], ptr[3]);int *ptr1 = malloc(4);
char *ptr2 = (char*) ptr1;
ptr1[0] = 1684234849;
printf("%d is %c %c %c %c", *ptr1, ptr2[0], ptr2[1], ptr2[2], ptr2[3]);int *ptr2 = realloc(ptr1, size);int *ptr1, *ptr2, size;

// Allocate memory for four integers
size = 4 * sizeof(*ptr1);
ptr1 = malloc(size);

printf("%d bytes allocated at address %p \n", size, ptr1);

// Resize the memory to hold six integers
size = 6 * sizeof(*ptr1);
ptr2 = realloc(ptr1, size);

printf("%d bytes reallocated at address %p \n", size, ptr2);int *ptr1, *ptr2;

// Allocate memory
ptr1 = malloc(4);

// Attempt to resize the memory
ptr2 = realloc(ptr1, 8);

included for W3Schools Premium users. Include a call to action.Create a LinkedIn post that asks tech influencers and teachers to discuss "W3Schools Spaces". Include a link to the product.Create a Facebook post that announces "W3Schools Spaces" and its key features for people learning to build websitesCreate a Facebook post about how "300+ AWS training videos" are now included for W3Schools Premium users. Include a call to action.Create a Facebook post that asks tech influencers and teachers to discuss "W3Schools Spaces". Include a link to the product.Which programming language should I use to create a countdown to the next Saturday for a web page?<!DOCTYPE html>

</body>
</html>For i=2 To 10 Step 2
some code
NextFor i=10 To 2 Step -2
some code
NextFor i=1 To 10
If i=5 Then Exit For
some code
Next<html>
<body>

<%
Dim cars(2)
cars(0)="Volvo"
cars(1)="Saab"
cars(2)="BMW"

For Each x In cars
response.write(x & "<br />")
Next
%>

int *data; // Points to the memory where the list items are stored
int numItems; // Indicates how many items are currently in the list
int size; // Indicates how many items fit in the allocated memory
};

// Outputs: Old enough to vote!if (condition) {
// block of code to be executed if the condition is true
}if (20 > 18) {
cout << "20 is greater than 18";
}int x = 20;
int y = 18;
if (x > y) {
cout << "x is greater than y";
}if (condition) {
// block of code to be executed if the condition is true
} else {
// block of code to be executed if the condition is false
}int time = 20;
if (time < 18) {
cout << "Good day.";
} else {
cout << "Good evening.";
}
// Outputs "Good evening."if (condition1) {
// block of code to be executed if condition1 is true
} else if (condition2) {
// block of code to be executed if the condition1 is false and condition2 is true
} else {
// block of code to be executed if the condition1 is false and condition2 is false
}int time = 22;
if (time < 10) {
cout << "Good morning.";
} else if (time < 20) {
cout << "Good day.";
} else {
cout << "Good evening.";
}
// Outputs "Good evening."variable = (condition) ? expressionTrue : expressionFalse;int time = 20;
if (time < 18) {
cout << "Good day.";
} else {
cout << "Good evening.";
}int time = 20;
string result = (time < 18) ? "Good day." : "Good evening.";

f1 = 35e3F; double d1 = 12E4D; Console.WriteLine(f1); Console.WriteLine(d1);bool isCSharpFun = true; bool isFishTasty = false; Console.WriteLine(isCSharpFun); // Outputs True Console.WriteLine(isFishTasty); // Outputs Falsechar myGrade = 'B'; Console.WriteLine(myGrade);string greeting = "Hello World"; Console.WriteLine(greeting);int myInt = 9; double myDouble = myInt; // Automatic casting: int to double Console.WriteLine(myInt); // Outputs 9 Console.WriteLine(myDouble); // Outputs 9double myDouble = 9.78; int myInt = (int) myDouble; // Manual casting: double to int Console.WriteLine(myDouble); // Outputs 9.78 Console.WriteLine(myInt); // Outputs 9int myInt = 10; double myDouble = 5.25; bool myBool = true; Console.WriteLine(Convert.ToString(myInt)); // convert int to string Console.WriteLine(Convert.ToDouble(myInt)); // convert int to double Console.WriteLine(Convert.ToInt32(myDouble)); // convert double to int Console.WriteLine(Convert.ToString(myBool)); // convert bool to string// Type your username and press enter Console.WriteLine("Enter username:"); // Create a string variable and get user input from the keyboard and store it in the variable string userName = Console.ReadLine(); // Print the value of the variable (userName), which will display the input value Console.WriteLine("Username is: " + userName);Console.WriteLine("Enter your

// Ask the user to type a number AND a character
printf("Type a number AND a character and press enter: \n");

// Get and save the number AND character the user types
scanf("%d %c", &myNum, &myChar);

// Print the number
printf("Your number is: %d\n", myNum);

// Print the character
printf("Your character is: %c\n", myChar);// Create a string
char firstName[30];

// Ask the user to input some text
printf("Enter your first name: \n");

// Get and save the text
scanf("%s", firstName);

// Output the text
printf("Hello %s", firstName);char fullName[30];

printf("Type your full name: \n");
scanf("%s", &fullName);

printf("Hello %s", fullName);

// Type your full name: John Doe
// Hello Johnchar fullName[30];

printf("Type your full name: \n");
fgets(fullName, sizeof(fullName), stdin);

printf("Hello %s", fullName);

// Type your full name: John Doe
// Hello John Doeint myAge = 43;
printf("%p", &myAge); // Outputs 0x7ffe5367e044int myAge = 43; // an int variable

while (countdown > 0) {
cout << countdown << "\n";
countdown--;
}

cout << "Happy New Year!!\n";do {
// code block to be executed
}
while (condition);int i = 0;
do {
cout << i << "\n";
i++;
}
while (i < 5);int i = 10;
do {
cout << "i is " << i << "\n";
i++;
} while (i < 5);int number;
do {
cout << "Enter a positive number: ";
cin >> number;
} while (number > 0);int countdown = 3;

while (countdown > 0) {
cout << countdown << "\n";
countdown--;
}

cout << "Happy New Year!!\n";int i = 0;

while (i <= 10) {
cout << i << "\n";
i += 2;
}// A variable with some specific numbers
int numbers = 12345;

// A variable to store the reversed number
int revNumbers = 0;

// Reverse and reorder the numbers
while (numbers) {
// Get the last number of 'numbers' and add it to 'revNumbers'
revNumbers = revNumbers * 10 + numbers % 10;
// Remove the last number of 'numbers'
numbers /= 10;
}

cout << "Reversed numbers: " << revNumbers << "\n";int dice = 1;

<script src="/lib/w3color.js"></script>using System; namespace HelloWorld { class Program { static void Main(string[] args) { Console.WriteLine("Hello World!"); } } }using System; namespace HelloWorld { class Program { static void Main(string[] args) { Console.WriteLine("Hello World!"); } } }using System; namespace HelloWorld { class Program { static void Main(string[] args) { Console.WriteLine("Hello World!"); } } }Console.WriteLine("Hello World!");Console.WriteLine("Hello World!"); Console.WriteLine("I am Learning C#"); Console.WriteLine("It is awesome!");Console.WriteLine(3 + 3);Console.Write("Hello World! "); Console.Write("I will print on the same line.");// This is a comment Console.WriteLine("Hello World!");Console.WriteLine("Hello World!"); // This is a comment/* The code below will print the words Hello World to the screen, and it is amazing */ Console.WriteLine("Hello World!");type variableName = value;string name = "John"; Console.WriteLine(name);int myNum = 15; Console.WriteLine(myNum);int myNum; myNum = 15; Console.WriteLine(myNum);int myNum = 15; myNum = 20; // myNum is now 20 Console.WriteLine(myNum);int myNum = 5; double myDoubleNum = 5.99D; char myLetter = 'D'; bool myBool = true; string myText = "Hello";const int myNum = 15; myNum = 20; // errorstring name = "John"; Console.WriteLine("Hello " + name);string firstName = "John ";

-------- INSTRUCTIONS / PROMPT --------
You are a professional **Coding Tutorial Chatbot** running inside a **Streamlit app**.  
                Your job is to create tutorials, exercises, and explanations strictly from the  
                provided **context** (vectorstore documents).  

                ✅ Instructions:  
                - Use **only the context** to generate answers.  
                - Do **not** rely on your own knowledge, external sources, or assumptions.  
                - If the user asks about a programming language, library, or topic  
                that is not covered in the context, you must reply with this message **exactly and only**:  
                ❌ Sorry, this topic is not supported yet. Please wait for an update.  
                - Do not add extra words, symbols, emojis, or formatting to the unsupported message.  
                - If the context does not contain enough information to fully answer, reply with exactly:  
                I don’t have enough information in my training material to answer that.  
                - Always format supported responses clearly using **Markdown** (headings, lists, code blocks).  
                - Prefer **examples and exercises** over theory whenever possible.  
                - If exercises are requested, generate them step by step (e.g., 5 exercises with solutions).  
                - If a tutorial is requested, break it into **sections** (e.g., Introduction, Examples, Practice).  
                - Keep responses **concise**, designed to fit inside a Streamlit chat window.  

                🚨 Compliance Rule:  
                If you are about to output the unsupported or insufficient-info message,  
                you must output it **verbatim** with no modifications.  

                🎯 Goal:  
                Be a friendly coding tutor who teaches only from the provided material, ensuring  
                all answers are grounded in the available context.

======== END OF LOG ========
