{
  "course_name": "C",
  "description": "C is a general-purpose programming language that has been widely used for over 50 years. C is very powerful; it has been used to develop operating systems, databases, applications, etc. Tip: Sign in to track your progress - it's free. Our \"Try it Yourself\" editor makes it easy to learn C. You can edit code and view the result in your browser: Click on the \"Try it Yourself\" button to see how it works. We recommend reading this tutorial, in the sequence listed in the left menu. Many chapters in this tutorial end with an exercise where you can check your level of knowledge. See all C Exercises REMOVE ADS Learn by taking a quiz! The quiz will give you a signal of how much you know about C. Start C Quiz Learn by examples! This tutorial supplements all explanations with clarifying examples. See All C Examples Sign Up for Free Note: This is an optional feature. You can study at W3Schools without creating an account.",
  "course_summary": [
    {
      "title": "C Introduction",
      "summary": "What is C?\nC is a general-purpose programming language created by Dennis Ritchie at the Bell Laboratories in 1972.\nIt is a very popular language, despite being old. The main reason for its popularity is because it is a fundamental language in the field of computer science.\nC is strongly associated with UNIX, as it was developed to write the UNIX operating system.\nWhy Learn C?\nIt is one of the most popular programming languages in the world\nIf you know C, you will have no problem learning other popular programming languages such as Java, Python, C++, C#, etc, as the syntax is similar\nIf you know C, you will understand how computer memory works\nC is very fast, compared to other programming languages, like Java and Python\nC is very versatile; it can be used in both applications and technologies\nDifference between C and C++\nC++ was developed as an extension of C, and both languages have almost the same syntax\nThe main difference between C and C++ is that C++ supports classes and objects, while C does not.\nGet Started\nThis tutorial will teach you the basics of C.\nWhen you are finished with this tutorial, you will be able to write C programs and create real-life examples.\nIt is not necessary to have any prior programming experience.",
      "examples": []
    },
    {
      "title": "C Get Started",
      "summary": "Get Started With C\nAt W3Schools, you can try C without installing anything.\nOur Online C Editor runs directly in your browser, and shows both the code and the result:\nCode:\nResult:\nThis editor will be used in the entire tutorial to demonstrate the different aspects of C.\nInstall C\nIf you want to run C on your own computer, you need two things:\nA text editor, like Notepad, to write C code\nA compiler, like GCC, to translate the C code into a language that the computer will understand\nThere are many text editors and compilers to choose from. In the next steps, we will show you how to use an IDE that includes both.\nInstall IDE\nAn IDE (Integrated Development Environment) is used to edit AND compile the code.\nPopular IDE's include Code::Blocks, Eclipse, and Visual Studio. These are all free, and they can be used to both edit and debug C code.\nNote: Web-based IDE's can work as well, but functionality is limited.\nWe will use Code::Blocks in our tutorial, which we believe is a good place to start.\nYou can find the latest version of Codeblocks at http://www.codeblocks.org/. Download the mingw-setup.exe file, which will install the text editor with a compiler.\nC Quickstart\nLet's create our first C file.\nOpen Codeblocks and go to File > New > Empty File.\nWrite the following C code and save the file as myfirstprogram.c (File > Save File as):\nDon't worry if you don't understand the code above - we will discuss it in detail in later chapters. For now, focus on how to run the code.\nIn Codeblocks, it should look like this:\nThen, go to Build > Build and Run to run (execute) the program. The result will look something to this:\nCongratulations! You have now written and executed your first C program.",
      "examples": [
        "#include <stdio.h>\n\nint main() {\nprintf(\"Hello World!\");\nreturn 0;\n}",
        "Hello World!",
        "mingw-setup.exe",
        "myfirstprogram.c",
        "Hello World!\nProcess returned 0 (0x0) execution time : 0.011 s\nPress any key to continue."
      ]
    }
  ],
  "glossary": [
    "arithmetic operators",
    "array size",
    "assignment operators",
    "backend",
    "c arrays",
    "c booleans",
    "c comments",
    "c compiler",
    "c constants",
    "c ctype.h",
    "c date",
    "c debugging",
    "c enums",
    "c errors",
    "c exercises",
    "c files",
    "c functions",
    "c home",
    "c if...else",
    "c intro",
    "c keywords",
    "c macros",
    "c math.h",
    "c memory",
    "c more",
    "c null",
    "c operators",
    "c output",
    "c pointers",
    "c projects",
    "c quiz",
    "c recursion",
    "c reference",
    "c scope",
    "c statements",
    "c stdio.h",
    "c stdlib.h",
    "c string.h",
    "c strings",
    "c structures",
    "c switch",
    "c syllabus",
    "c syntax",
    "c time.h",
    "c unions",
    "c variables",
    "change values",
    "characters",
    "comparison operators",
    "decimal precision",
    "else",
    "else if",
    "exercises",
    "format specifiers",
    "free",
    "javascript",
    "logical operators",
    "memory size",
    "multidimensional arrays",
    "multiple variables",
    "nested loops",
    "new lines",
    "note",
    "numbers",
    "operator precedence",
    "pointers arrays",
    "programs",
    "report error",
    "special characters",
    "string functions",
    "type conversion",
    "variable names",
    "w3.css",
    "w3schools spaces"
  ]
}