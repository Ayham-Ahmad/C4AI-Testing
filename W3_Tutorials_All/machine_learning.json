{
  "course_name": "Machine Learning",
  "description": "Python is a popular programming language. Python can be used on a server to create web applications. Tip: Sign in to track your progress - it's free. With our \"Try it Yourself\" editor, you can edit Python code and view the result. Click on the \"Try it Yourself\" button to see how it works. In our File Handling section you will learn how to open, read, write, and delete files. Python File Handling In our database section you will learn how to access and work with MySQL and MongoDB databases: Python MySQL Tutorial Python MongoDB Tutorial Many chapters in this tutorial end with an exercise where you can check your level of knowledge. See all Python Exercises REMOVE ADS Learn by examples! This tutorial supplements all explanations with clarifying examples. See All Python Examples Test your Python skills with a quiz. Python Quiz Sign Up for Free Note: This is an optional feature. You can study at W3Schools without creating an account.",
  "course_summary": [
    {
      "title": "Python Introduction",
      "summary": "What is Python?\nPython is a popular programming language. It was created by Guido van Rossum, and released in 1991.\nIt is used for:\nweb development (server-side),\nsoftware development,\nmathematics,\nsystem scripting.\nWhat can Python do?\nPython can be used on a server to create web applications.\nPython can be used alongside software to create workflows.\nPython can connect to database systems. It can also read and modify files.\nPython can be used to handle big data and perform complex mathematics.\nPython can be used for rapid prototyping, or for production-ready software development.\nWhy Python?\nPython works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).\nPython has a simple syntax similar to the English language.\nPython has syntax that allows developers to write programs with fewer lines than some other programming languages.\nPython runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.\nPython can be treated in a procedural way, an object-oriented way or a functional way.\nGood to know\nThe most recent major version of Python is Python 3, which we shall be using in this tutorial.\nIn this tutorial Python will be written in a text editor. It is possible to write Python in an Integrated Development Environment, such as Thonny, Pycharm, Netbeans or Eclipse which are particularly useful when managing larger collections of Python files.\nPython Syntax compared to other programming languages\nPython was designed for readability, and has some similarities to the English language with influence from mathematics.\nPython uses new lines to complete a command, as opposed to other programming languages which often use semicolons or parentheses.\nPython relies on indentation, using whitespace, to define scope; such as the scope of loops, functions and classes. Other programming languages often use curly-brackets for this purpose.\nExampleGet your own Python Server\nVideo: Python Introduction",
      "examples": [
        "print(\"Hello, World!\")"
      ]
    },
    {
      "title": "Python Getting Started",
      "summary": "Python Install\nMany PCs and Macs will have python already installed.\nTo check if you have python installed on a Windows PC, search in the start bar for Python or run the following on the Command Line (cmd.exe):\nTo check if you have python installed on a Linux or Mac, then on linux open the command line or on Mac open the Terminal and type:\nIf you find that you do not have Python installed on your computer, then you can download it for free from the following website: https://www.python.org/\nPython Quickstart\nPython is an interpreted programming language, this means that as a developer you write Python (.py) files in a text editor and then put those files into the python interpreter to be executed.\nLet's write our first Python file, called hello.py, which can be done in any text editor:\nhello.py:\nSimple as that. Save your file. Open your command line, navigate to the directory where you saved your file, and run:\nThe output should be:\nCongratulations, you have written and executed your first Python program.\nREMOVE ADS\nW3Schools' Python Editor\nWe have an online Python editor where you can execute your own Python code and see the result:\nExampleGet your own Python Server\nTry our online Python editor:\nThis editor will be used in the entire tutorial to demonstrate the different aspects of Python.\nPython Version\nTo check the Python version of the editor, you can find it by importing the sys module:\nExample\nCheck the Python version of the editor:\nYou will learn more about importing modules in our Python Modules chapter.\nThe Python Command Line\nTo test a short amount of code in python sometimes it is quickest and easiest not to write the code in a file. This is made possible because Python can be run as a command line itself.\nType the following on the Windows, Mac or Linux command line:\nFrom there you can write any python code, including our hello world example from earlier in the tutorial:\nWhich will write \"Hello, World!\" in the command line:\nWhenever you are done in the python command line, you can simply type the following to quit the python command line interface:\nVideo: Python Get Started",
      "examples": [
        "print(\"Hello, World!\")",
        "C:\\Users\\Your Name>python --version",
        "python --version",
        "C:\\Users\\Your Name>python hello.py",
        "Hello, World!",
        "import sys\n\nprint(sys.version)",
        "C:\\Users\\Your Name>python",
        "C:\\Users\\Your Name>py",
        "C:\\Users\\Your Name>python\nPython 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC v.1900 32 bit (Intel)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> print(\"Hello, World!\")",
        "C:\\Users\\Your Name>python\nPython 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC v.1900 32 bit (Intel)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> print(\"Hello, World!\")\nHello, World!",
        "exit()",
        "hello.py",
        "sys"
      ]
    },
    {
      "title": "Python Syntax",
      "summary": "Execute Python Syntax\nAs we learned in the previous page, Python syntax can be executed by writing directly in the Command Line:\nOr by creating a python file on the server, using the .py file extension, and running it in the Command Line:\nPython Indentation\nIndentation refers to the spaces at the beginning of a code line.\nWhere in other programming languages the indentation in code is for readability only, the indentation in Python is very important.\nPython uses indentation to indicate a block of code.\nExampleGet your own Python Server\nPython will give you an error if you skip the indentation:\nExample\nSyntax Error:\nThe number of spaces is up to you as a programmer, the most common use is four, but it has to be at least one.\nExample\nYou have to use the same number of spaces in the same block of code, otherwise Python will give you an error:\nExample\nSyntax Error:\nREMOVE ADS\nPython Variables\nIn Python, variables are created when you assign a value to it:\nExample\nVariables in Python:\nPython has no command for declaring a variable.\nYou will learn more about variables in the Python Variables chapter.\nComments\nPython has commenting capability for the purpose of in-code documentation.\nComments start with a #, and Python will render the rest of the line as a comment:\nExample\nComments in Python:\nVideo: Python Syntax",
      "examples": [
        ">>> print(\"Hello, World!\")\nHello, World!",
        "C:\\Users\\Your Name>python myfile.py",
        "if 5 > 2:\nprint(\"Five is greater than two!\")",
        "if 5 > 2:\nprint(\"Five is greater than two!\")\nif 5 > 2:\nprint(\"Five is greater than two!\")",
        "if 5 > 2:\nprint(\"Five is greater than two!\")\nprint(\"Five is greater than two!\")",
        "x = 5\ny = \"Hello, World!\"",
        "#This is a comment.\nprint(\"Hello, World!\")",
        "#"
      ]
    },
    {
      "title": "Python Comments",
      "summary": "Comments can be used to explain Python code.\nComments can be used to make the code more readable.\nComments can be used to prevent execution when testing code.\nCreating a Comment\nComments starts with a #, and Python will ignore them:\nExampleGet your own Python Server\nComments can be placed at the end of a line, and Python will ignore the rest of the line:\nExample\nA comment does not have to be text that explains the code, it can also be used to prevent Python from executing code:\nExample\nREMOVE ADS\nMultiline Comments\nPython does not really have a syntax for multiline comments.\nTo add a multiline comment you could insert a # for each line:\nExample\nOr, not quite as intended, you can use a multiline string.\nSince Python will ignore string literals that are not assigned to a variable, you can add a multiline string (triple quotes) in your code, and place your comment inside it:\nExample\nAs long as the string is not assigned to a variable, Python will read the code, but then ignore it, and you have made a multiline comment.\nVideo: Python Comments",
      "examples": [
        "#This is a comment\nprint(\"Hello, World!\")",
        "print(\"Hello, World!\") #This is a comment",
        "#print(\"Hello, World!\")\nprint(\"Cheers, Mate!\")",
        "#This is a comment\n#written in\n#more than just one line\nprint(\"Hello, World!\")",
        "\"\"\"\nThis is a comment\nwritten in\nmore than just one line\n\"\"\"\nprint(\"Hello, World!\")",
        "#"
      ]
    },
    {
      "title": "Python Variables",
      "summary": "Variables\nVariables are containers for storing data values.\nCreating Variables\nPython has no command for declaring a variable.\nA variable is created the moment you first assign a value to it.\nExampleGet your own Python Server\nVariables do not need to be declared with any particular type, and can even change type after they have been set.\nExample\nCasting\nIf you want to specify the data type of a variable, this can be done with casting.\nExample\nREMOVE ADS\nGet the Type\nYou can get the data type of a variable with the type() function.\nExample\nSingle or Double Quotes?\nString variables can be declared either by using single or double quotes:\nExample\nCase-Sensitive\nVariable names are case-sensitive.\nExample\nThis will create two variables:\nVideo: Python Variables",
      "examples": [
        "x = 5\ny = \"John\"\nprint(x)\nprint(y)",
        "x = 4       # x is of type int\nx = \"Sally\" # x is now of type str\nprint(x)",
        "x = str(3)    # x will be '3'\ny = int(3)    # y will be 3\nz = float(3)  # z will be 3.0",
        "x = 5\ny = \"John\"\nprint(type(x))\nprint(type(y))",
        "x = \"John\"\n# is the same as\nx = 'John'",
        "a = 4\nA = \"Sally\"\n#A will not overwrite a",
        "type()"
      ]
    },
    {
      "title": "Python - Variable Names",
      "summary": "Variable Names\nA variable can have a short name (like x and y) or a more descriptive name (age, carname, total_volume).\nRules for Python variables:\nA variable name must start with a letter or the underscore character\nA variable name cannot start with a number\nA variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )\nVariable names are case-sensitive (age, Age and AGE are three different variables)\nA variable name cannot be any of the Python keywords.\nExampleGet your own Python Server\nLegal variable names:\nExample\nIllegal variable names:\nRemember that variable names are case-sensitive\nREMOVE ADS\nMulti Words Variable Names\nVariable names with more than one word can be difficult to read.\nThere are several techniques you can use to make them more readable:\nCamel Case\nEach word, except the first, starts with a capital letter:\nPascal Case\nEach word starts with a capital letter:\nSnake Case\nEach word is separated by an underscore character:\nVideo: Python Variable Names",
      "examples": [
        "myvar = \"John\"\nmy_var = \"John\"\n_my_var = \"John\"\nmyVar = \"John\"\nMYVAR = \"John\"\nmyvar2 = \"John\"",
        "2myvar = \"John\"\nmy-var = \"John\"\nmy var = \"John\""
      ]
    },
    {
      "title": "Python Variables - Assign Multiple Values",
      "summary": "Many Values to Multiple Variables\nPython allows you to assign values to multiple variables in one line:\nExampleGet your own Python Server\nNote: Make sure the number of variables matches the number of values, or else you will get an error.\nOne Value to Multiple Variables\nAnd you can assign the same value to multiple variables in one line:\nExample\nUnpack a Collection\nIf you have a collection of values in a list, tuple etc. Python allows you to extract the values into variables. This is called unpacking.\nExample\nUnpack a list:\nLearn more about unpacking in our Unpack Tuples Chapter.\nVideo: Python Variable Names",
      "examples": [
        "x, y, z = \"Orange\", \"Banana\", \"Cherry\"\nprint(x)\nprint(y)\nprint(z)",
        "x = y = z = \"Orange\"\nprint(x)\nprint(y)\nprint(z)",
        "fruits = [\"apple\", \"banana\", \"cherry\"]\nx, y, z = fruits\nprint(x)\nprint(y)\nprint(z)",
        "list",
        "tuple"
      ]
    },
    {
      "title": "Python - Output Variables",
      "summary": "Output Variables\nThe Python print() function is often used to output variables.\nExampleGet your own Python Server\nIn the print() function, you output multiple variables, separated by a comma:\nExample\nYou can also use the + operator to output multiple variables:\nExample\nNotice the space character after \"Python \" and \"is \", without them the result would be \"Pythonisawesome\".\nFor numbers, the + character works as a mathematical operator:\nExample\nIn the print() function, when you try to combine a string and a number with the + operator, Python will give you an error:\nExample\nThe best way to output multiple variables in the print() function is to separate them with commas, which even support different data types:\nExample\nVideo: Python Output Variables",
      "examples": [
        "x = \"Python is awesome\"\nprint(x)",
        "x = \"Python\"\ny = \"is\"\nz = \"awesome\"\nprint(x, y, z)",
        "x = \"Python \"\ny = \"is \"\nz = \"awesome\"\nprint(x + y + z)",
        "x = 5\ny = 10\nprint(x + y)",
        "x = 5\ny = \"John\"\nprint(x + y)",
        "x = 5\ny = \"John\"\nprint(x, y)",
        "print()",
        "+",
        "\"Python \"",
        "\"is \""
      ]
    },
    {
      "title": "Python - Global Variables",
      "summary": "Global Variables\nVariables that are created outside of a function (as in all of the examples in the previous pages) are known as global variables.\nGlobal variables can be used by everyone, both inside of functions and outside.\nExampleGet your own Python Server\nCreate a variable outside of a function, and use it inside the function\nIf you create a variable with the same name inside a function, this variable will be local, and can only be used inside the function. The global variable with the same name will remain as it was, global and with the original value.\nExample\nCreate a variable inside a function, with the same name as the global variable\nREMOVE ADS\nThe global Keyword\nNormally, when you create a variable inside a function, that variable is local, and can only be used inside that function.\nTo create a global variable inside a function, you can use the global keyword.\nExample\nIf you use the global keyword, the variable belongs to the global scope:\nAlso, use the global keyword if you want to change a global variable inside a function.\nExample\nTo change the value of a global variable inside a function, refer to the variable by using the global keyword:\nVideo: Python Global Variables",
      "examples": [
        "x = \"awesome\"\n\ndef myfunc():\nprint(\"Python is \" + x)\n\nmyfunc()",
        "x = \"awesome\"\n\ndef myfunc():\nx = \"fantastic\"\nprint(\"Python is \" + x)\n\nmyfunc()\n\nprint(\"Python is \" + x)",
        "def myfunc():\nglobal x\nx = \"fantastic\"\n\nmyfunc()\n\nprint(\"Python is \" + x)",
        "x = \"awesome\"\n\ndef myfunc():\nglobal x\nx = \"fantastic\"\n\nmyfunc()\n\nprint(\"Python is \" + x)",
        "global"
      ]
    },
    {
      "title": "Python - Variable Exercises",
      "summary": "Test Yourself With Exercises\nNow you have learned a lot about variables, and how to use them in Python.\nAre you ready for a test?\nExercises\nTest your Python Variables skills with exercises from all categories:\nVariables\nVariable Names\nMultiple Variable Values\nOutput Variable\nGlobal Variable\nMore Python Exercises:\nPython Exercises",
      "examples": []
    },
    {
      "title": "Python Data Types",
      "summary": "Built-in Data Types\nIn programming, data type is an important concept.\nVariables can store data of different types, and different types can do different things.\nPython has the following data types built-in by default, in these categories:\nGetting the Data Type\nYou can get the data type of any object by using the type() function:\nExampleGet your own Python Server\nPrint the data type of the variable x:\nSetting the Data Type\nIn Python, the data type is set when you assign a value to a variable:\nREMOVE ADS\nSetting the Specific Data Type\nIf you want to specify the data type, you can use the following constructor functions:",
      "examples": [
        "x = 5\nprint(type(x))",
        "str",
        "int",
        "float",
        "complex",
        "list",
        "tuple",
        "range",
        "dict",
        "set",
        "frozenset",
        "bool",
        "bytes",
        "bytearray",
        "memoryview",
        "NoneType",
        "type()"
      ]
    },
    {
      "title": "Python Numbers",
      "summary": "Python Numbers\nThere are three numeric types in Python:\nint\nfloat\ncomplex\nVariables of numeric types are created when you assign a value to them:\nExampleGet your own Python Server\nTo verify the type of any object in Python, use the type() function:\nExample\nInt\nInt, or integer, is a whole number, positive or negative, without decimals, of unlimited length.\nExample\nIntegers:\nFloat\nFloat, or \"floating point number\" is a number, positive or negative, containing one or more decimals.\nExample\nFloats:\nFloat can also be scientific numbers with an \"e\" to indicate the power of 10.\nExample\nFloats:\nREMOVE ADS\nComplex\nComplex numbers are written with a \"j\" as the imaginary part:\nExample\nComplex:\nType Conversion\nYou can convert from one type to another with the int(), float(), and complex() methods:\nExample\nConvert from one type to another:\nNote: You cannot convert complex numbers into another number type.\nRandom Number\nPython does not have a random() function to make a random number, but Python has a built-in module called random that can be used to make random numbers:\nExample\nImport the random module, and display a random number from 1 to 9:\nIn our Random Module Reference you will learn more about the Random module.",
      "examples": [
        "x = 1    # int\ny = 2.8  # float\nz = 1j   # complex",
        "print(type(x))\nprint(type(y))\nprint(type(z))",
        "x = 1\ny = 35656222554887711\nz = -3255522\n\nprint(type(x))\nprint(type(y))\nprint(type(z))",
        "x = 1.10\ny = 1.0\nz = -35.59\n\nprint(type(x))\nprint(type(y))\nprint(type(z))",
        "x = 35e3\ny = 12E4\nz = -87.7e100\n\nprint(type(x))\nprint(type(y))\nprint(type(z))",
        "x = 3+5j\ny = 5j\nz = -5j\n\nprint(type(x))\nprint(type(y))\nprint(type(z))",
        "x = 1    # int\ny = 2.8  # float\nz = 1j   # complex\n\n#convert from int to float:\na = float(x)\n\n#convert from float to int:\nb = int(y)\n\n#convert from int to complex:\nc = complex(x)\n\nprint(a)\nprint(b)\nprint(c)\n\nprint(type(a))\nprint(type(b))\nprint(type(c))",
        "import random\n\nprint(random.randrange(1, 10))",
        "int",
        "float",
        "complex",
        "type()",
        "int()",
        "float()",
        "complex()",
        "random()",
        "random"
      ]
    },
    {
      "title": "Python Casting",
      "summary": "Specify a Variable Type\nThere may be times when you want to specify a type on to a variable. This can be done with casting. Python is an object-orientated language, and as such it uses classes to define data types, including its primitive types.\nCasting in python is therefore done using constructor functions:\nint() - constructs an integer number from an integer literal, a float literal (by removing all decimals), or a string literal (providing the string represents a whole number)\nfloat() - constructs a float number from an integer literal, a float literal or a string literal (providing the string represents a float or an integer)\nstr() - constructs a string from a wide variety of data types, including strings, integer literals and float literals\nExampleGet your own Python Server\nIntegers:\nExample\nFloats:\nExample\nStrings:",
      "examples": [
        "x = int(1)   # x will be 1\ny = int(2.8) # y will be 2\nz = int(\"3\") # z will be 3",
        "x = float(1)     # x will be 1.0\ny = float(2.8)   # y will be 2.8\nz = float(\"3\")   # z will be 3.0\nw = float(\"4.2\") # w will be 4.2",
        "x = str(\"s1\") # x will be 's1'\ny = str(2)    # y will be '2'\nz = str(3.0)  # z will be '3.0'"
      ]
    },
    {
      "title": "Python Strings",
      "summary": "Strings\nStrings in python are surrounded by either single quotation marks, or double quotation marks.\n'hello' is the same as \"hello\".\nYou can display a string literal with the print() function:\nExampleGet your own Python Server\nQuotes Inside Quotes\nYou can use quotes inside a string, as long as they don't match the quotes surrounding the string:\nExample\nAssign String to a Variable\nAssigning a string to a variable is done with the variable name followed by an equal sign and the string:\nExample\nMultiline Strings\nYou can assign a multiline string to a variable by using three quotes:\nExample\nYou can use three double quotes:\nOr three single quotes:\nExample\nNote: in the result, the line breaks are inserted at the same position as in the code.\nREMOVE ADS\nStrings are Arrays\nLike many other popular programming languages, strings in Python are arrays of unicode characters.\nHowever, Python does not have a character data type, a single character is simply a string with a length of 1.\nSquare brackets can be used to access elements of the string.\nExample\nGet the character at position 1 (remember that the first character has the position 0):\nLooping Through a String\nSince strings are arrays, we can loop through the characters in a string, with a for loop.\nExample\nLoop through the letters in the word \"banana\":\nLearn more about For Loops in our Python For Loops chapter.\nString Length\nTo get the length of a string, use the len() function.\nExample\nThe len() function returns the length of a string:\nCheck String\nTo check if a certain phrase or character is present in a string, we can use the keyword in.\nExample\nCheck if \"free\" is present in the following text:\nUse it in an if statement:\nExample\nPrint only if \"free\" is present:\nLearn more about If statements in our Python If...Else chapter.\nCheck if NOT\nTo check if a certain phrase or character is NOT present in a string, we can use the keyword not in.\nExample\nCheck if \"expensive\" is NOT present in the following text:\nUse it in an if statement:\nExample\nprint only if \"expensive\" is NOT present:",
      "examples": [
        "print(\"Hello\")\nprint('Hello')",
        "print(\"It's alright\")\nprint(\"He is called 'Johnny'\")\nprint('He is called \"Johnny\"')",
        "a = \"Hello\"\nprint(a)",
        "a = \"\"\"Lorem ipsum dolor sit amet,\nconsectetur adipiscing elit,\nsed do eiusmod tempor incididunt\nut labore et dolore magna aliqua.\"\"\"\nprint(a)",
        "a = '''Lorem ipsum dolor sit amet,\nconsectetur adipiscing elit,\nsed do eiusmod tempor incididunt\nut labore et dolore magna aliqua.'''\nprint(a)",
        "a = \"Hello, World!\"\nprint(a[1])",
        "for x in \"banana\":\nprint(x)",
        "a = \"Hello, World!\"\nprint(len(a))",
        "txt = \"The best things in life are free!\"\nprint(\"free\" in txt)",
        "txt = \"The best things in life are free!\"\nif \"free\" in txt:\nprint(\"Yes, 'free' is present.\")",
        "txt = \"The best things in life are free!\"\nprint(\"expensive\" not in txt)",
        "txt = \"The best things in life are free!\"\nif \"expensive\" not in txt:\nprint(\"No, 'expensive' is NOT present.\")",
        "print()",
        "for",
        "len()",
        "in",
        "if",
        "not in"
      ]
    },
    {
      "title": "Python - Slicing Strings",
      "summary": "Slicing\nYou can return a range of characters by using the slice syntax.\nSpecify the start index and the end index, separated by a colon, to return a part of the string.\nExampleGet your own Python Server\nGet the characters from position 2 to position 5 (not included):\nNote: The first character has index 0.\nSlice From the Start\nBy leaving out the start index, the range will start at the first character:\nExample\nGet the characters from the start to position 5 (not included):\nREMOVE ADS\nSlice To the End\nBy leaving out the end index, the range will go to the end:\nExample\nGet the characters from position 2, and all the way to the end:\nNegative Indexing\nExample\nGet the characters:\nFrom: \"o\" in \"World!\" (position -5)\nTo, but not included: \"d\" in \"World!\" (position -2):",
      "examples": [
        "b = \"Hello, World!\"\nprint(b[2:5])",
        "b = \"Hello, World!\"\nprint(b[:5])",
        "b = \"Hello, World!\"\nprint(b[2:])",
        "b = \"Hello, World!\"\nprint(b[-5:-2])"
      ]
    },
    {
      "title": "Python - Modify Strings",
      "summary": "Python has a set of built-in methods that you can use on strings.\nUpper Case\nExampleGet your own Python Server\nThe upper() method returns the string in upper case:\nLower Case\nExample\nThe lower() method returns the string in lower case:\nRemove Whitespace\nWhitespace is the space before and/or after the actual text, and very often you want to remove this space.\nExample\nThe strip() method removes any whitespace from the beginning or the end:\nREMOVE ADS\nReplace String\nExample\nThe replace() method replaces a string with another string:\nSplit String\nThe split() method returns a list where the text between the specified separator becomes the list items.\nExample\nThe split() method splits the string into substrings if it finds instances of the separator:\nLearn more about Lists in our Python Lists chapter.\nString Methods\nLearn more about String Methods with our String Methods Reference",
      "examples": [
        "a = \"Hello, World!\"\nprint(a.upper())",
        "a = \"Hello, World!\"\nprint(a.lower())",
        "a = \" Hello, World! \"\nprint(a.strip()) # returns \"Hello, World!\"",
        "a = \"Hello, World!\"\nprint(a.replace(\"H\", \"J\"))",
        "a = \"Hello, World!\"\nprint(a.split(\",\")) # returns ['Hello', ' World!']",
        "upper()",
        "lower()",
        "strip()",
        "replace()",
        "split()"
      ]
    },
    {
      "title": "Python - String Concatenation",
      "summary": "String Concatenation\nTo concatenate, or combine, two strings you can use the + operator.\nExampleGet your own Python Server\nMerge variable a with variable b into variable c:\nExample\nTo add a space between them, add a \" \":",
      "examples": [
        "a = \"Hello\"\nb = \"World\"\nc = a + b\nprint(c)",
        "a = \"Hello\"\nb = \"World\"\nc = a + \" \" + b\nprint(c)",
        "a",
        "b",
        "c",
        "\" \""
      ]
    },
    {
      "title": "Python - Format - Strings",
      "summary": "String Format\nAs we learned in the Python Variables chapter, we cannot combine strings and numbers like this:\nExampleGet your own Python Server\nBut we can combine strings and numbers by using f-strings or the format() method!\nF-Strings\nF-String was introduced in Python 3.6, and is now the preferred way of formatting strings.\nTo specify a string as an f-string, simply put an f in front of the string literal, and add curly brackets {} as placeholders for variables and other operations.\nExample\nCreate an f-string:\nPlaceholders and Modifiers\nA placeholder can contain variables, operations, functions, and modifiers to format the value.\nExample\nAdd a placeholder for the price variable:\nA placeholder can include a modifier to format the value.\nA modifier is included by adding a colon : followed by a legal formatting type, like .2f which means fixed point number with 2 decimals:\nExample\nDisplay the price with 2 decimals:\nA placeholder can contain Python code, like math operations:\nExample\nPerform a math operation in the placeholder, and return the result:\nLearn more about String Formatting in our String Formatting chapter.",
      "examples": [
        "age = 36\n#This will produce an error:\ntxt = \"My name is John, I am \" + age\nprint(txt)",
        "age = 36\ntxt = f\"My name is John, I am {age}\"\nprint(txt)",
        "price = 59\ntxt = f\"The price is {price} dollars\"\nprint(txt)",
        "price = 59\ntxt = f\"The price is {price:.2f} dollars\"\nprint(txt)",
        "txt = f\"The price is {20 * 59} dollars\"\nprint(txt)",
        "format()",
        "f",
        "{}",
        "price",
        ":",
        ".2f"
      ]
    },
    {
      "title": "Python - Escape Characters",
      "summary": "Escape Character\nTo insert characters that are illegal in a string, use an escape character.\nAn escape character is a backslash \\ followed by the character you want to insert.\nAn example of an illegal character is a double quote inside a string that is surrounded by double quotes:\nExampleGet your own Python Server\nYou will get an error if you use double quotes inside a string that is surrounded by double quotes:\nTo fix this problem, use the escape character \\\":\nExample\nThe escape character allows you to use double quotes when you normally would not be allowed:\nEscape Characters\nOther escape characters used in Python:",
      "examples": [
        "txt = \"We are the so-called \"Vikings\" from the north.\"",
        "txt = \"We are the so-called \\\"Vikings\\\" from the north.\"",
        "\\",
        "\\\""
      ]
    },
    {
      "title": "Python - String Methods",
      "summary": "String Methods\nPython has a set of built-in methods that you can use on strings.\nNote: All string methods return new values. They do not change the original string.",
      "examples": []
    },
    {
      "title": "Python - String Exercises",
      "summary": "Test Yourself With Exercises\nNow you have learned a lot about Strings, and how to use them in Python.\nAre you ready for a test?\nExercises\nTest your Python String skills with exercises from all categories:\nStrings\nSlicing Strings\nModify Strings\nConcatenate Strings\nFormat Strings\nMore Python Exercises:\nPython Exercises",
      "examples": []
    },
    {
      "title": "Python Booleans",
      "summary": "Booleans represent one of two values: True or False.\nBoolean Values\nIn programming you often need to know if an expression is True or False.\nYou can evaluate any expression in Python, and get one of two answers, True or False.\nWhen you compare two values, the expression is evaluated and Python returns the Boolean answer:\nExampleGet your own Python Server\nWhen you run a condition in an if statement, Python returns True or False:\nExample\nPrint a message based on whether the condition is True or False:\nEvaluate Values and Variables\nThe bool() function allows you to evaluate any value, and give you True or False in return,\nExample\nEvaluate a string and a number:\nExample\nEvaluate two variables:\nREMOVE ADS\nMost Values are True\nAlmost any value is evaluated to True if it has some sort of content.\nAny string is True, except empty strings.\nAny number is True, except 0.\nAny list, tuple, set, and dictionary are True, except empty ones.\nExample\nThe following will return True:\nSome Values are False\nIn fact, there are not many values that evaluate to False, except empty values, such as (), [], {}, \"\", the number 0, and the value None. And of course the value False evaluates to False.\nExample\nThe following will return False:\nOne more value, or object in this case, evaluates to False, and that is if you have an object that is made from a class with a __len__ function that returns 0 or False:\nExample\nFunctions can Return a Boolean\nYou can create functions that returns a Boolean Value:\nExample\nPrint the answer of a function:\nYou can execute code based on the Boolean answer of a function:\nExample\nPrint \"YES!\" if the function returns True, otherwise print \"NO!\":\nPython also has many built-in functions that return a boolean value, like the isinstance() function, which can be used to determine if an object is of a certain data type:\nExample\nCheck if an object is an integer or not:",
      "examples": [
        "print(10 > 9)\nprint(10 == 9)\nprint(10 < 9)",
        "a = 200\nb = 33\n\nif b > a:\nprint(\"b is greater than a\")\nelse:\nprint(\"b is not greater than a\")",
        "print(bool(\"Hello\"))\nprint(bool(15))",
        "x = \"Hello\"\ny = 15\n\nprint(bool(x))\nprint(bool(y))",
        "bool(\"abc\")\nbool(123)\nbool([\"apple\", \"cherry\", \"banana\"])",
        "bool(False)\nbool(None)\nbool(0)\nbool(\"\")\nbool(())\nbool([])\nbool({})",
        "class myclass():\ndef __len__(self):\nreturn 0\n\nmyobj = myclass()\nprint(bool(myobj))",
        "def myFunction() :\nreturn True\n\nprint(myFunction())",
        "def myFunction() :\nreturn True\n\nif myFunction():\nprint(\"YES!\")\nelse:\nprint(\"NO!\")",
        "x = 200\nprint(isinstance(x, int))",
        "True",
        "False",
        "bool()",
        "0",
        "()",
        "[]",
        "{}",
        "\"\"",
        "None",
        "__len__",
        "isinstance()"
      ]
    },
    {
      "title": "Python Operators",
      "summary": "Python Operators\nOperators are used to perform operations on variables and values.\nIn the example below, we use the + operator to add together two values:\nExampleGet your own Python Server\nPython divides the operators in the following groups:\nArithmetic operators\nAssignment operators\nComparison operators\nLogical operators\nIdentity operators\nMembership operators\nBitwise operators\nPython Arithmetic Operators\nArithmetic operators are used with numeric values to perform common mathematical operations:\nPython Assignment Operators\nAssignment operators are used to assign values to variables:\nREMOVE ADS\nPython Comparison Operators\nComparison operators are used to compare two values:\nPython Logical Operators\nLogical operators are used to combine conditional statements:\nPython Identity Operators\nIdentity operators are used to compare the objects, not if they are equal, but if they are actually the same object, with the same memory location:\nPython Membership Operators\nMembership operators are used to test if a sequence is presented in an object:\nPython Bitwise Operators\nBitwise operators are used to compare (binary) numbers:\nOperator Precedence\nOperator precedence describes the order in which operations are performed.\nExample\nParentheses has the highest precedence, meaning that expressions inside parentheses must be evaluated first:\nExample\nMultiplication * has higher precedence than addition +, and therefore multiplications are evaluated before additions:\nThe precedence order is described in the table below, starting with the highest precedence at the top:\nIf two operators have the same precedence, the expression is evaluated from left to right.\nExample\nAddition + and subtraction - has the same precedence, and therefore we evaluate the expression from left to right:",
      "examples": [
        "print(10 + 5)",
        "print((6 + 3) - (6 + 3))",
        "print(100 + 5 * 3)",
        "print(5 + 4 - 7 + 3)",
        "+",
        "*",
        "()",
        "**",
        "+x",
        "-x",
        "~x",
        "/",
        "//",
        "%",
        "-",
        "<<",
        ">>",
        "&",
        "^",
        "|",
        "==",
        "!=",
        ">",
        ">=",
        "<",
        "<=",
        "is",
        "is not",
        "in",
        "not in",
        "not",
        "and",
        "or"
      ]
    },
    {
      "title": "Python Lists",
      "summary": "List\nLists are used to store multiple items in a single variable.\nLists are one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage.\nLists are created using square brackets:\nExampleGet your own Python Server\nCreate a List:\nList Items\nList items are ordered, changeable, and allow duplicate values.\nList items are indexed, the first item has index [0], the second item has index [1] etc.\nOrdered\nWhen we say that lists are ordered, it means that the items have a defined order, and that order will not change.\nIf you add new items to a list, the new items will be placed at the end of the list.\nNote: There are some list methods that will change the order, but in general: the order of the items will not change.\nChangeable\nThe list is changeable, meaning that we can change, add, and remove items in a list after it has been created.\nAllow Duplicates\nSince lists are indexed, lists can have items with the same value:\nExample\nLists allow duplicate values:\nREMOVE ADS\nList Length\nTo determine how many items a list has, use the len() function:\nExample\nPrint the number of items in the list:\nList Items - Data Types\nList items can be of any data type:\nExample\nString, int and boolean data types:\nA list can contain different data types:\nExample\nA list with strings, integers and boolean values:\ntype()\nFrom Python's perspective, lists are defined as objects with the data type 'list':\nExample\nWhat is the data type of a list?\nThe list() Constructor\nIt is also possible to use the list() constructor when creating a new list.\nExample\nUsing the list() constructor to make a List:\nPython Collections (Arrays)\nThere are four collection data types in the Python programming language:\nList is a collection which is ordered and changeable. Allows duplicate members.\nTuple is a collection which is ordered and unchangeable. Allows duplicate members.\nSet is a collection which is unordered, unchangeable*, and unindexed. No duplicate members.\nDictionary is a collection which is ordered** and changeable. No duplicate members.\n*Set items are unchangeable, but you can remove and/or add items whenever you like.\n**As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered.\nWhen choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security.",
      "examples": [
        "thislist = [\"apple\", \"banana\", \"cherry\"]\nprint(thislist)",
        "thislist = [\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\"]\nprint(thislist)",
        "thislist = [\"apple\", \"banana\", \"cherry\"]\nprint(len(thislist))",
        "list1 = [\"apple\", \"banana\", \"cherry\"]\nlist2 = [1, 5, 7, 9, 3]\nlist3 = [True, False, False]",
        "list1 = [\"abc\", 34, True, 40, \"male\"]",
        "mylist = [\"apple\", \"banana\", \"cherry\"]\nprint(type(mylist))",
        "thislist = list((\"apple\", \"banana\", \"cherry\")) # note the double round-brackets\nprint(thislist)",
        "[0]",
        "[1]",
        "len()",
        "list()"
      ]
    },
    {
      "title": "Python - Access List Items",
      "summary": "Access Items\nList items are indexed and you can access them by referring to the index number:\nExampleGet your own Python Server\nPrint the second item of the list:\nNote: The first item has index 0.\nNegative Indexing\nNegative indexing means start from the end\n-1 refers to the last item, -2 refers to the second last item etc.\nExample\nPrint the last item of the list:\nRange of Indexes\nYou can specify a range of indexes by specifying where to start and where to end the range.\nWhen specifying a range, the return value will be a new list with the specified items.\nExample\nReturn the third, fourth, and fifth item:\nNote: The search will start at index 2 (included) and end at index 5 (not included).\nRemember that the first item has index 0.\nBy leaving out the start value, the range will start at the first item:\nExample\nThis example returns the items from the beginning to, but NOT including, \"kiwi\":\nBy leaving out the end value, the range will go on to the end of the list:\nExample\nThis example returns the items from \"cherry\" to the end:\nREMOVE ADS\nRange of Negative Indexes\nSpecify negative indexes if you want to start the search from the end of the list:\nExample\nThis example returns the items from \"orange\" (-4) to, but NOT including \"mango\" (-1):\nCheck if Item Exists\nTo determine if a specified item is present in a list use the in keyword:\nExample\nCheck if \"apple\" is present in the list:",
      "examples": [
        "thislist = [\"apple\", \"banana\", \"cherry\"]\nprint(thislist[1])",
        "thislist = [\"apple\", \"banana\", \"cherry\"]\nprint(thislist[-1])",
        "thislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\"]\nprint(thislist[2:5])",
        "thislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\"]\nprint(thislist[:4])",
        "thislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\"]\nprint(thislist[-4:-1])",
        "thislist = [\"apple\", \"banana\", \"cherry\"]\nif \"apple\" in thislist:\nprint(\"Yes, 'apple' is in the fruits list\")",
        "-1",
        "-2",
        "in"
      ]
    },
    {
      "title": "Python - Change List Items",
      "summary": "Change Item Value\nTo change the value of a specific item, refer to the index number:\nExampleGet your own Python Server\nChange the second item:\nChange a Range of Item Values\nTo change the value of items within a specific range, define a list with the new values, and refer to the range of index numbers where you want to insert the new values:\nExample\nChange the values \"banana\" and \"cherry\" with the values \"blackcurrant\" and \"watermelon\":\nIf you insert more items than you replace, the new items will be inserted where you specified, and the remaining items will move accordingly:\nExample\nChange the second value by replacing it with two new values:\nNote: The length of the list will change when the number of items inserted does not match the number of items replaced.\nIf you insert less items than you replace, the new items will be inserted where you specified, and the remaining items will move accordingly:\nExample\nChange the second and third value by replacing it with one value:\nREMOVE ADS\nInsert Items\nTo insert a new list item, without replacing any of the existing values, we can use the insert() method.\nThe insert() method inserts an item at the specified index:\nExample\nInsert \"watermelon\" as the third item:\nNote: As a result of the example above, the list will now contain 4 items.",
      "examples": [
        "thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist[1] = \"blackcurrant\"\nprint(thislist)",
        "thislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"mango\"]\nthislist[1:3] = [\"blackcurrant\", \"watermelon\"]\nprint(thislist)",
        "thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist[1:2] = [\"blackcurrant\", \"watermelon\"]\nprint(thislist)",
        "thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist[1:3] = [\"watermelon\"]\nprint(thislist)",
        "thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.insert(2, \"watermelon\")\nprint(thislist)",
        "insert()"
      ]
    },
    {
      "title": "Python - Add List Items",
      "summary": "Append Items\nTo add an item to the end of the list, use the append() method:\nExampleGet your own Python Server\nUsing the append() method to append an item:\nInsert Items\nTo insert a list item at a specified index, use the insert() method.\nThe insert() method inserts an item at the specified index:\nExample\nInsert an item as the second position:\nNote: As a result of the examples above, the lists will now contain 4 items.\nREMOVE ADS\nExtend List\nTo append elements from another list to the current list, use the extend() method.\nExample\nAdd the elements of tropical to thislist:\nThe elements will be added to the end of the list.\nAdd Any Iterable\nThe extend() method does not have to append lists, you can add any iterable object (tuples, sets, dictionaries etc.).\nExample\nAdd elements of a tuple to a list:",
      "examples": [
        "thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.append(\"orange\")\nprint(thislist)",
        "thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.insert(1, \"orange\")\nprint(thislist)",
        "thislist = [\"apple\", \"banana\", \"cherry\"]\ntropical = [\"mango\", \"pineapple\", \"papaya\"]\nthislist.extend(tropical)\nprint(thislist)",
        "thislist = [\"apple\", \"banana\", \"cherry\"]\nthistuple = (\"kiwi\", \"orange\")\nthislist.extend(thistuple)\nprint(thislist)",
        "append()",
        "insert()",
        "extend()",
        "tropical",
        "thislist"
      ]
    },
    {
      "title": "Python - Remove List Items",
      "summary": "Remove Specified Item\nThe remove() method removes the specified item.\nExampleGet your own Python Server\nRemove \"banana\":\nIf there are more than one item with the specified value, the remove() method removes the first occurrence:\nExample\nRemove the first occurrence of \"banana\":\nRemove Specified Index\nThe pop() method removes the specified index.\nExample\nRemove the second item:\nIf you do not specify the index, the pop() method removes the last item.\nExample\nRemove the last item:\nThe del keyword also removes the specified index:\nExample\nRemove the first item:\nThe del keyword can also delete the list completely.\nExample\nDelete the entire list:\nClear the List\nThe clear() method empties the list.\nThe list still remains, but it has no content.\nExample\nClear the list content:",
      "examples": [
        "thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.remove(\"banana\")\nprint(thislist)",
        "thislist = [\"apple\", \"banana\", \"cherry\", \"banana\", \"kiwi\"]\nthislist.remove(\"banana\")\nprint(thislist)",
        "thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.pop(1)\nprint(thislist)",
        "thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.pop()\nprint(thislist)",
        "thislist = [\"apple\", \"banana\", \"cherry\"]\ndel thislist[0]\nprint(thislist)",
        "thislist = [\"apple\", \"banana\", \"cherry\"]\ndel thislist",
        "thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.clear()\nprint(thislist)",
        "remove()",
        "pop()",
        "del",
        "clear()"
      ]
    },
    {
      "title": "Python - Loop Lists",
      "summary": "Loop Through a List\nYou can loop through the list items by using a for loop:\nExampleGet your own Python Server\nPrint all items in the list, one by one:\nLearn more about for loops in our Python For Loops Chapter.\nLoop Through the Index Numbers\nYou can also loop through the list items by referring to their index number.\nUse the range() and len() functions to create a suitable iterable.\nExample\nPrint all items by referring to their index number:\nThe iterable created in the example above is [0, 1, 2].\nREMOVE ADS\nUsing a While Loop\nYou can loop through the list items by using a while loop.\nUse the len() function to determine the length of the list, then start at 0 and loop your way through the list items by referring to their indexes.\nRemember to increase the index by 1 after each iteration.\nExample\nPrint all items, using a while loop to go through all the index numbers\nLearn more about while loops in our Python While Loops Chapter.\nLooping Using List Comprehension\nList Comprehension offers the shortest syntax for looping through lists:\nExample\nA short hand for loop that will print all items in a list:\nLearn more about list comprehension in the next chapter: List Comprehension.",
      "examples": [
        "thislist = [\"apple\", \"banana\", \"cherry\"]\nfor x in thislist:\nprint(x)",
        "thislist = [\"apple\", \"banana\", \"cherry\"]\nfor i in range(len(thislist)):\nprint(thislist[i])",
        "thislist = [\"apple\", \"banana\", \"cherry\"]\ni = 0\nwhile i < len(thislist):\nprint(thislist[i])\ni = i + 1",
        "thislist = [\"apple\", \"banana\", \"cherry\"]\n[print(x) for x in thislist]",
        "for",
        "range()",
        "len()",
        "[0, 1, 2]",
        "while"
      ]
    },
    {
      "title": "Python - List Comprehension",
      "summary": "List Comprehension\nList comprehension offers a shorter syntax when you want to create a new list based on the values of an existing list.\nExample:\nBased on a list of fruits, you want a new list, containing only the fruits with the letter \"a\" in the name.\nWithout list comprehension you will have to write a for statement with a conditional test inside:\nExampleGet your own Python Server\nWith list comprehension you can do all that with only one line of code:\nExample\nREMOVE ADS\nThe Syntax\nThe return value is a new list, leaving the old list unchanged.\nCondition\nThe condition is like a filter that only accepts the items that evaluate to True.\nExample\nOnly accept items that are not \"apple\":\nThe condition if x != \"apple\"  will return True for all elements other than \"apple\", making the new list contain all fruits except \"apple\".\nThe condition is optional and can be omitted:\nExample\nWith no if statement:\nIterable\nThe iterable can be any iterable object, like a list, tuple, set etc.\nExample\nYou can use the range() function to create an iterable:\nSame example, but with a condition:\nExample\nAccept only numbers lower than 5:\nExpression\nThe expression is the current item in the iteration, but it is also the outcome, which you can manipulate before it ends up like a list item in the new list:\nExample\nSet the values in the new list to upper case:\nYou can set the outcome to whatever you like:\nExample\nSet all values in the new list to 'hello':\nThe expression can also contain conditions, not like a filter, but as a way to manipulate the outcome:\nExample\nReturn \"orange\" instead of \"banana\":\nThe expression in the example above says:\n\"Return the item if it is not banana, if it is banana return orange\".",
      "examples": [
        "fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\nnewlist = []\n\nfor x in fruits:\nif \"a\" in x:\nnewlist.append(x)\n\nprint(newlist)",
        "fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\n\nnewlist = [x for x in fruits if \"a\" in x]\n\nprint(newlist)",
        "newlist = [x for x in fruits if x != \"apple\"]",
        "newlist = [x for x in fruits]",
        "newlist = [x for x in range(10)]",
        "newlist = [x for x in range(10) if x < 5]",
        "newlist = [x.upper() for x in fruits]",
        "newlist = ['hello' for x in fruits]",
        "newlist = [x if x != \"banana\" else \"orange\" for x in fruits]",
        "for",
        "True",
        "if",
        "range()"
      ]
    },
    {
      "title": "Python - Sort Lists",
      "summary": "Sort List Alphanumerically\nList objects have a sort() method that will sort the list alphanumerically, ascending, by default:\nExampleGet your own Python Server\nSort the list alphabetically:\nExample\nSort the list numerically:\nSort Descending\nTo sort descending, use the keyword argument reverse = True:\nExample\nSort the list descending:\nExample\nSort the list descending:\nREMOVE ADS\nCustomize Sort Function\nYou can also customize your own function by using the keyword argument key = function.\nThe function will return a number that will be used to sort the list (the lowest number first):\nExample\nSort the list based on how close the number is to 50:\nCase Insensitive Sort\nBy default the sort() method is case sensitive, resulting in all capital letters being sorted before lower case letters:\nExample\nCase sensitive sorting can give an unexpected result:\nLuckily we can use built-in functions as key functions when sorting a list.\nSo if you want a case-insensitive sort function, use str.lower as a key function:\nExample\nPerform a case-insensitive sort of the list:\nReverse Order\nWhat if you want to reverse the order of a list, regardless of the alphabet?\nThe reverse() method reverses the current sorting order of the elements.\nExample\nReverse the order of the list items:",
      "examples": [
        "thislist = [\"orange\", \"mango\", \"kiwi\", \"pineapple\", \"banana\"]\nthislist.sort()\nprint(thislist)",
        "thislist = [100, 50, 65, 82, 23]\nthislist.sort()\nprint(thislist)",
        "thislist = [\"orange\", \"mango\", \"kiwi\", \"pineapple\", \"banana\"]\nthislist.sort(reverse = True)\nprint(thislist)",
        "thislist = [100, 50, 65, 82, 23]\nthislist.sort(reverse = True)\nprint(thislist)",
        "def myfunc(n):\nreturn abs(n - 50)\n\nthislist = [100, 50, 65, 82, 23]\nthislist.sort(key = myfunc)\nprint(thislist)",
        "thislist = [\"banana\", \"Orange\", \"Kiwi\", \"cherry\"]\nthislist.sort()\nprint(thislist)",
        "thislist = [\"banana\", \"Orange\", \"Kiwi\", \"cherry\"]\nthislist.sort(key = str.lower)\nprint(thislist)",
        "thislist = [\"banana\", \"Orange\", \"Kiwi\", \"cherry\"]\nthislist.reverse()\nprint(thislist)",
        "sort()",
        "reverse = True",
        "key = function",
        "reverse()"
      ]
    },
    {
      "title": "Python - Copy Lists",
      "summary": "Copy a List\nYou cannot copy a list simply by typing list2 = list1, because: list2 will only be a reference to list1, and changes made in list1 will automatically also be made in list2.\nUse the copy() method\nYou can use the built-in List method copy() to copy a list.\nExampleGet your own Python Server\nMake a copy of a list with the copy() method:\nUse the list() method\nAnother way to make a copy is to use the built-in method list().\nExample\nMake a copy of a list with the list() method:\nUse the slice Operator\nYou can also make a copy of a list by using the : (slice) operator.\nExample\nMake a copy of a list with the : operator:",
      "examples": [
        "thislist = [\"apple\", \"banana\", \"cherry\"]\nmylist = thislist.copy()\nprint(mylist)",
        "thislist = [\"apple\", \"banana\", \"cherry\"]\nmylist = list(thislist)\nprint(mylist)",
        "thislist = [\"apple\", \"banana\", \"cherry\"]\nmylist = thislist[:]\nprint(mylist)",
        "list2 = list1",
        "list2",
        "list1",
        "copy()",
        "list()",
        ":"
      ]
    },
    {
      "title": "Python - Join Lists",
      "summary": "Join Two Lists\nThere are several ways to join, or concatenate, two or more lists in Python.\nOne of the easiest ways are by using the + operator.\nExampleGet your own Python Server\nJoin two list:\nAnother way to join two lists is by appending all the items from list2 into list1, one by one:\nExample\nAppend list2 into list1:\nOr you can use the extend() method, where the purpose is to add elements from one list to another list:\nExample\nUse the extend() method to add list2 at the end of list1:",
      "examples": [
        "list1 = [\"a\", \"b\", \"c\"]\nlist2 = [1, 2, 3]\n\nlist3 = list1 + list2\nprint(list3)",
        "list1 = [\"a\", \"b\" , \"c\"]\nlist2 = [1, 2, 3]\n\nfor x in list2:\nlist1.append(x)\n\nprint(list1)",
        "list1 = [\"a\", \"b\" , \"c\"]\nlist2 = [1, 2, 3]\n\nlist1.extend(list2)\nprint(list1)",
        "+",
        "extend()"
      ]
    },
    {
      "title": "Python - List Methods",
      "summary": "List Methods\nPython has a set of built-in methods that you can use on lists.",
      "examples": []
    },
    {
      "title": "Python List Exercises",
      "summary": "Test Yourself With Exercises\nNow you have learned a lot about lists, and how to use them in Python.\nAre you ready for a test?\nExercises\nTest your Python List skills with exercises from all categories:\nLists\nAccess Lists\nChange Lists\nAdd Lists\nRemove Lists\nLoop Lists\nList Comprehension\nSort Lists\nCopy Lists\nJoin Lists\nMore Python Exercises:\nPython Exercises",
      "examples": []
    },
    {
      "title": "Python Tuples",
      "summary": "Tuple\nTuples are used to store multiple items in a single variable.\nTuple is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Set, and Dictionary, all with different qualities and usage.\nA tuple is a collection which is ordered and unchangeable.\nTuples are written with round brackets.\nExampleGet your own Python Server\nCreate a Tuple:\nTuple Items\nTuple items are ordered, unchangeable, and allow duplicate values.\nTuple items are indexed, the first item has index [0], the second item has index [1] etc.\nOrdered\nWhen we say that tuples are ordered, it means that the items have a defined order, and that order will not change.\nUnchangeable\nTuples are unchangeable, meaning that we cannot change, add or remove items after the tuple has been created.\nAllow Duplicates\nSince tuples are indexed, they can have items with the same value:\nExample\nTuples allow duplicate values:\nREMOVE ADS\nTuple Length\nTo determine how many items a tuple has, use the len() function:\nExample\nPrint the number of items in the tuple:\nCreate Tuple With One Item\nTo create a tuple with only one item, you have to add a comma after the item, otherwise Python will not recognize it as a tuple.\nExample\nOne item tuple, remember the comma:\nTuple Items - Data Types\nTuple items can be of any data type:\nExample\nString, int and boolean data types:\nA tuple can contain different data types:\nExample\nA tuple with strings, integers and boolean values:\ntype()\nFrom Python's perspective, tuples are defined as objects with the data type 'tuple':\nExample\nWhat is the data type of a tuple?\nThe tuple() Constructor\nIt is also possible to use the tuple() constructor to make a tuple.\nExample\nUsing the tuple() method to make a tuple:\nPython Collections (Arrays)\nThere are four collection data types in the Python programming language:\nList is a collection which is ordered and changeable. Allows duplicate members.\nTuple is a collection which is ordered and unchangeable. Allows duplicate members.\nSet is a collection which is unordered, unchangeable*, and unindexed. No duplicate members.\nDictionary is a collection which is ordered** and changeable. No duplicate members.\n*Set items are unchangeable, but you can remove and/or add items whenever you like.\n**As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered.\nWhen choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security.",
      "examples": [
        "thistuple = (\"apple\", \"banana\", \"cherry\")\nprint(thistuple)",
        "thistuple = (\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\")\nprint(thistuple)",
        "thistuple = (\"apple\", \"banana\", \"cherry\")\nprint(len(thistuple))",
        "thistuple = (\"apple\",)\nprint(type(thistuple))\n\n#NOT a tuple\nthistuple = (\"apple\")\nprint(type(thistuple))",
        "tuple1 = (\"apple\", \"banana\", \"cherry\")\ntuple2 = (1, 5, 7, 9, 3)\ntuple3 = (True, False, False)",
        "tuple1 = (\"abc\", 34, True, 40, \"male\")",
        "mytuple = (\"apple\", \"banana\", \"cherry\")\nprint(type(mytuple))",
        "thistuple = tuple((\"apple\", \"banana\", \"cherry\")) # note the double round-brackets\nprint(thistuple)",
        "[0]",
        "[1]",
        "len()"
      ]
    },
    {
      "title": "Python - Access Tuple Items",
      "summary": "Access Tuple Items\nYou can access tuple items by referring to the index number, inside square brackets:\nExampleGet your own Python Server\nPrint the second item in the tuple:\nNote: The first item has index 0.\nNegative Indexing\nNegative indexing means start from the end.\n-1 refers to the last item, -2 refers to the second last item etc.\nExample\nPrint the last item of the tuple:\nRange of Indexes\nYou can specify a range of indexes by specifying where to start and where to end the range.\nWhen specifying a range, the return value will be a new tuple with the specified items.\nExample\nReturn the third, fourth, and fifth item:\nNote: The search will start at index 2 (included) and end at index 5 (not included).\nRemember that the first item has index 0.\nBy leaving out the start value, the range will start at the first item:\nExample\nThis example returns the items from the beginning to, but NOT included, \"kiwi\":\nBy leaving out the end value, the range will go on to the end of the tuple:\nExample\nThis example returns the items from \"cherry\" and to the end:\nREMOVE ADS\nRange of Negative Indexes\nSpecify negative indexes if you want to start the search from the end of the tuple:\nExample\nThis example returns the items from index -4 (included) to index -1 (excluded)\nCheck if Item Exists\nTo determine if a specified item is present in a tuple use the in keyword:\nExample\nCheck if \"apple\" is present in the tuple:",
      "examples": [
        "thistuple = (\"apple\", \"banana\", \"cherry\")\nprint(thistuple[1])",
        "thistuple = (\"apple\", \"banana\", \"cherry\")\nprint(thistuple[-1])",
        "thistuple = (\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\")\nprint(thistuple[2:5])",
        "thistuple = (\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\")\nprint(thistuple[:4])",
        "thistuple = (\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\")\nprint(thistuple[-4:-1])",
        "thistuple = (\"apple\", \"banana\", \"cherry\")\nif \"apple\" in thistuple:\nprint(\"Yes, 'apple' is in the fruits tuple\")",
        "-1",
        "-2",
        "in"
      ]
    },
    {
      "title": "Python - Update Tuples",
      "summary": "Tuples are unchangeable, meaning that you cannot change, add, or remove items once the tuple is created.\nBut there are some workarounds.\nChange Tuple Values\nOnce a tuple is created, you cannot change its values. Tuples are unchangeable, or immutable as it also is called.\nBut there is a workaround. You can convert the tuple into a list, change the list, and convert the list back into a tuple.\nExampleGet your own Python Server\nConvert the tuple into a list to be able to change it:\nAdd Items\nSince tuples are immutable, they do not have a built-in append() method, but there are other ways to add items to a tuple.\n1. Convert into a list: Just like the workaround for changing a tuple, you can convert it into a list, add your item(s), and convert it back into a tuple.\nExample\nConvert the tuple into a list, add \"orange\", and convert it back into a tuple:\n2. Add tuple to a tuple. You are allowed to add tuples to tuples, so if you want to add one item, (or many), create a new tuple with the item(s), and add it to the existing tuple:\nExample\nCreate a new tuple with the value \"orange\", and add that tuple:\nNote: When creating a tuple with only one item, remember to include a comma after the item, otherwise it will not be identified as a tuple.\nREMOVE ADS\nRemove Items\nNote: You cannot remove items in a tuple.\nTuples are unchangeable, so you cannot remove items from it, but you can use the same workaround as we used for changing and adding tuple items:\nExample\nConvert the tuple into a list, remove \"apple\", and convert it back into a tuple:\nOr you can delete the tuple completely:\nExample\nThe del keyword can delete the tuple completely:",
      "examples": [
        "x = (\"apple\", \"banana\", \"cherry\")\ny = list(x)\ny[1] = \"kiwi\"\nx = tuple(y)\n\nprint(x)",
        "thistuple = (\"apple\", \"banana\", \"cherry\")\ny = list(thistuple)\ny.append(\"orange\")\nthistuple = tuple(y)",
        "thistuple = (\"apple\", \"banana\", \"cherry\")\ny = (\"orange\",)\nthistuple += y\n\nprint(thistuple)",
        "thistuple = (\"apple\", \"banana\", \"cherry\")\ny = list(thistuple)\ny.remove(\"apple\")\nthistuple = tuple(y)",
        "thistuple = (\"apple\", \"banana\", \"cherry\")\ndel thistuple\nprint(thistuple) #this will raise an error because the tuple no longer exists",
        "append()",
        "del"
      ]
    },
    {
      "title": "Python - Unpack Tuples",
      "summary": "Unpacking a Tuple\nWhen we create a tuple, we normally assign values to it. This is called \"packing\" a tuple:\nExampleGet your own Python Server\nPacking a tuple:\nBut, in Python, we are also allowed to extract the values back into variables. This is called \"unpacking\":\nExample\nUnpacking a tuple:\nNote: The number of variables must match the number of values in the tuple, if not, you must use an asterisk to collect the remaining values as a list.\nREMOVE ADS\nUsing Asterisk*\nIf the number of variables is less than the number of values, you can add an * to the variable name and the values will be assigned to the variable as a list:\nExample\nAssign the rest of the values as a list called \"red\":\nIf the asterisk is added to another variable name than the last, Python will assign values to the variable until the number of values left matches the number of variables left.\nExample\nAdd a list of values the \"tropic\" variable:",
      "examples": [
        "fruits = (\"apple\", \"banana\", \"cherry\")",
        "fruits = (\"apple\", \"banana\", \"cherry\")\n\n(green, yellow, red) = fruits\n\nprint(green)\nprint(yellow)\nprint(red)",
        "fruits = (\"apple\", \"banana\", \"cherry\", \"strawberry\", \"raspberry\")\n\n(green, yellow, *red) = fruits\n\nprint(green)\nprint(yellow)\nprint(red)",
        "fruits = (\"apple\", \"mango\", \"papaya\", \"pineapple\", \"cherry\")\n\n(green, *tropic, red) = fruits\n\nprint(green)\nprint(tropic)\nprint(red)",
        "*"
      ]
    },
    {
      "title": "Python - Loop Tuples",
      "summary": "Loop Through a Tuple\nYou can loop through the tuple items by using a for loop.\nExampleGet your own Python Server\nIterate through the items and print the values:\nLearn more about for loops in our Python For Loops Chapter.\nLoop Through the Index Numbers\nYou can also loop through the tuple items by referring to their index number.\nUse the range() and len() functions to create a suitable iterable.\nExample\nPrint all items by referring to their index number:\nREMOVE ADS\nUsing a While Loop\nYou can loop through the tuple items by using a while loop.\nUse the len() function to determine the length of the tuple, then start at 0 and loop your way through the tuple items by referring to their indexes.\nRemember to increase the index by 1 after each iteration.\nExample\nPrint all items, using a while loop to go through all the index numbers:\nLearn more about while loops in our Python While Loops Chapter.",
      "examples": [
        "thistuple = (\"apple\", \"banana\", \"cherry\")\nfor x in thistuple:\nprint(x)",
        "thistuple = (\"apple\", \"banana\", \"cherry\")\nfor i in range(len(thistuple)):\nprint(thistuple[i])",
        "thistuple = (\"apple\", \"banana\", \"cherry\")\ni = 0\nwhile i < len(thistuple):\nprint(thistuple[i])\ni = i + 1",
        "for",
        "range()",
        "len()",
        "while"
      ]
    },
    {
      "title": "Python - Join Tuples",
      "summary": "Join Two Tuples\nTo join two or more tuples you can use the + operator:\nExampleGet your own Python Server\nJoin two tuples:\nMultiply Tuples\nIf you want to multiply the content of a tuple a given number of times, you can use the * operator:\nExample\nMultiply the fruits tuple by 2:",
      "examples": [
        "tuple1 = (\"a\", \"b\" , \"c\")\ntuple2 = (1, 2, 3)\n\ntuple3 = tuple1 + tuple2\nprint(tuple3)",
        "fruits = (\"apple\", \"banana\", \"cherry\")\nmytuple = fruits * 2\n\nprint(mytuple)",
        "+",
        "*"
      ]
    },
    {
      "title": "Python - Tuple Methods",
      "summary": "Tuple Methods\nPython has two built-in methods that you can use on tuples.",
      "examples": []
    },
    {
      "title": "Python - Tuple Exercises",
      "summary": "Test Yourself With Exercises\nNow you have learned a lot about tuples, and how to use them in Python.\nAre you ready for a test?\nExercises\nTest your Python Tuple skills with exercises from all categories:\nTuples\nAccess Tuples\nUpdate Tuples\nUnpack Tuples\nLoop Tuples\nJoin Tuples\nMore Python Exercises:\nPython Exercises",
      "examples": []
    },
    {
      "title": "Python Sets",
      "summary": "Set\nSets are used to store multiple items in a single variable.\nSet is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Tuple, and Dictionary, all with different qualities and usage.\nA set is a collection which is unordered, unchangeable*, and unindexed.\n* Note: Set items are unchangeable, but you can remove items and add new items.\nSets are written with curly brackets.\nExampleGet your own Python Server\nCreate a Set:\nNote: Sets are unordered, so you cannot be sure in which order the items will appear.\nSet Items\nSet items are unordered, unchangeable, and do not allow duplicate values.\nUnordered\nUnordered means that the items in a set do not have a defined order.\nSet items can appear in a different order every time you use them, and cannot be referred to by index or key.\nUnchangeable\nSet items are unchangeable, meaning that we cannot change the items after the set has been created.\nOnce a set is created, you cannot change its items, but you can remove items and add new items.\nDuplicates Not Allowed\nSets cannot have two items with the same value.\nExample\nDuplicate values will be ignored:\nNote: The values True and 1 are considered the same value in sets, and are treated as duplicates:\nExample\nTrue and 1 is considered the same value:\nNote: The values False and 0 are considered the same value in sets, and are treated as duplicates:\nExample\nFalse and 0 is considered the same value:\nREMOVE ADS\nGet the Length of a Set\nTo determine how many items a set has, use the len() function.\nExample\nGet the number of items in a set:\nSet Items - Data Types\nSet items can be of any data type:\nExample\nString, int and boolean data types:\nA set can contain different data types:\nExample\nA set with strings, integers and boolean values:\ntype()\nFrom Python's perspective, sets are defined as objects with the data type 'set':\nExample\nWhat is the data type of a set?\nThe set() Constructor\nIt is also possible to use the set() constructor to make a set.\nExample\nUsing the set() constructor to make a set:\nPython Collections (Arrays)\nThere are four collection data types in the Python programming language:\nList is a collection which is ordered and changeable. Allows duplicate members.\nTuple is a collection which is ordered and unchangeable. Allows duplicate members.\nSet is a collection which is unordered, unchangeable*, and unindexed. No duplicate members.\nDictionary is a collection which is ordered** and changeable. No duplicate members.\n*Set items are unchangeable, but you can remove items and add new items.\n**As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered.\nWhen choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security.",
      "examples": [
        "thisset = {\"apple\", \"banana\", \"cherry\"}\nprint(thisset)",
        "thisset = {\"apple\", \"banana\", \"cherry\", \"apple\"}\n\nprint(thisset)",
        "thisset = {\"apple\", \"banana\", \"cherry\", True, 1, 2}\n\nprint(thisset)",
        "thisset = {\"apple\", \"banana\", \"cherry\", False, True, 0}\n\nprint(thisset)",
        "thisset = {\"apple\", \"banana\", \"cherry\"}\n\nprint(len(thisset))",
        "set1 = {\"apple\", \"banana\", \"cherry\"}\nset2 = {1, 5, 7, 9, 3}\nset3 = {True, False, False}",
        "set1 = {\"abc\", 34, True, 40, \"male\"}",
        "myset = {\"apple\", \"banana\", \"cherry\"}\nprint(type(myset))",
        "thisset = set((\"apple\", \"banana\", \"cherry\")) # note the double round-brackets\nprint(thisset)",
        "True",
        "1",
        "False",
        "0",
        "len()"
      ]
    },
    {
      "title": "Python - Access Set Items",
      "summary": "Access Items\nYou cannot access items in a set by referring to an index or a key.\nBut you can loop through the set items using a for loop, or ask if a specified value is present in a set, by using the in keyword.\nExampleGet your own Python Server\nLoop through the set, and print the values:\nExample\nCheck if \"banana\" is present in the set:\nExample\nCheck if \"banana\" is NOT present in the set:\nChange Items\nOnce a set is created, you cannot change its items, but you can add new items.",
      "examples": [
        "thisset = {\"apple\", \"banana\", \"cherry\"}\n\nfor x in thisset:\nprint(x)",
        "thisset = {\"apple\", \"banana\", \"cherry\"}\n\nprint(\"banana\" in thisset)",
        "thisset = {\"apple\", \"banana\", \"cherry\"}\n\nprint(\"banana\" not in thisset)",
        "for",
        "in"
      ]
    },
    {
      "title": "Python - Add Set Items",
      "summary": "Add Items\nOnce a set is created, you cannot change its items, but you can add new items.\nTo add one item to a set use the add() method.\nExampleGet your own Python Server\nAdd an item to a set, using the add() method:\nAdd Sets\nTo add items from another set into the current set, use the update() method.\nExample\nAdd elements from tropical into thisset:\nAdd Any Iterable\nThe object in the update() method does not have to be a set, it can be any iterable object (tuples, lists, dictionaries etc.).\nExample\nAdd elements of a list to at set:",
      "examples": [
        "thisset = {\"apple\", \"banana\", \"cherry\"}\n\nthisset.add(\"orange\")\n\nprint(thisset)",
        "thisset = {\"apple\", \"banana\", \"cherry\"}\ntropical = {\"pineapple\", \"mango\", \"papaya\"}\n\nthisset.update(tropical)\n\nprint(thisset)",
        "thisset = {\"apple\", \"banana\", \"cherry\"}\nmylist = [\"kiwi\", \"orange\"]\n\nthisset.update(mylist)\n\nprint(thisset)",
        "add()",
        "update()",
        "tropical",
        "thisset"
      ]
    },
    {
      "title": "Python - Remove Set Items",
      "summary": "Remove Item\nTo remove an item in a set, use the remove(), or the discard() method.\nExampleGet your own Python Server\nRemove \"banana\" by using the remove() method:\nNote: If the item to remove does not exist, remove() will raise an error.\nExample\nRemove \"banana\" by using the discard() method:\nNote: If the item to remove does not exist, discard() will NOT raise an error.\nYou can also use the pop() method to remove an item, but this method will remove a random item, so you cannot be sure what item that gets removed.\nThe return value of the pop() method is the removed item.\nExample\nRemove a random item by using the pop() method:\nNote: Sets are unordered, so when using the pop() method, you do not know which item that gets removed.\nExample\nThe clear() method empties the set:\nExample\nThe del keyword will delete the set completely:",
      "examples": [
        "thisset = {\"apple\", \"banana\", \"cherry\"}\n\nthisset.remove(\"banana\")\n\nprint(thisset)",
        "thisset = {\"apple\", \"banana\", \"cherry\"}\n\nthisset.discard(\"banana\")\n\nprint(thisset)",
        "thisset = {\"apple\", \"banana\", \"cherry\"}\n\nx = thisset.pop()\n\nprint(x)\n\nprint(thisset)",
        "thisset = {\"apple\", \"banana\", \"cherry\"}\n\nthisset.clear()\n\nprint(thisset)",
        "thisset = {\"apple\", \"banana\", \"cherry\"}\n\ndel thisset\n\nprint(thisset)",
        "remove()",
        "discard()",
        "pop()",
        "clear()",
        "del"
      ]
    },
    {
      "title": "Python - Loop Sets",
      "summary": "Loop Items\nYou can loop through the set items by using a for loop:\nExampleGet your own Python Server\nLoop through the set, and print the values:",
      "examples": [
        "thisset = {\"apple\", \"banana\", \"cherry\"}\n\nfor x in thisset:\nprint(x)",
        "for"
      ]
    },
    {
      "title": "Python - Join Sets",
      "summary": "Join Sets\nThere are several ways to join two or more sets in Python.\nThe union() and update() methods joins all items from both sets.\nThe intersection() method keeps ONLY the duplicates.\nThe difference() method keeps the items from the first set that are not in the other set(s).\nThe symmetric_difference() method keeps all items EXCEPT the duplicates.\nUnion\nThe union() method returns a new set with all items from both sets.\nExampleGet your own Python Server\nJoin set1 and set2 into a new set:\nYou can use the | operator instead of the union() method, and you will get the same result.\nExample\nUse | to join two sets:\nJoin Multiple Sets\nAll the joining methods and operators can be used to join multiple sets.\nWhen using a method, just add more sets in the parentheses, separated by commas:\nExample\nJoin multiple sets with the union() method:\nWhen using the | operator, separate the sets with more | operators:\nExample\nUse | to join two sets:\nJoin a Set and a Tuple\nThe union() method allows you to join a set with other data types, like lists or tuples.\nThe result will be a set.\nExample\nJoin a set with a tuple:\nNote: The  | operator only allows you to join sets with sets, and not with other data types like you can with the  union() method.\nUpdate\nThe update() method inserts all items from one set into another.\nThe update() changes the original set, and does not return a new set.\nExample\nThe update() method inserts the items in set2 into set1:\nNote: Both union() and update() will exclude any duplicate items.\nREMOVE ADS\nIntersection\nKeep ONLY the duplicates\nThe intersection() method will return a new set, that only contains the items that are present in both sets.\nExample\nJoin set1 and set2, but keep only the duplicates:\nYou can use the & operator instead of the intersection() method, and you will get the same result.\nExample\nUse & to join two sets:\nNote: The & operator only allows you to join sets with sets, and not with other data types like you can with the intersection() method.\nThe intersection_update() method will also keep ONLY the duplicates, but it will change the original set instead of returning a new set.\nExample\nKeep the items that exist in both set1, and set2:\nThe values True and 1 are considered the same value. The same goes for False and 0.\nExample\nJoin sets that contains the values True, False, 1, and 0, and see what is considered as duplicates:\nDifference\nThe difference() method will return a new set that will contain only the items from the first set that are not present in the other set.\nExample\nKeep all items from set1 that are not in set2:\nYou can use the - operator instead of the difference() method, and you will get the same result.\nExample\nUse - to join two sets:\nNote: The - operator only allows you to join sets with sets, and not with other data types like you can with the difference() method.\nThe difference_update() method will also keep the items from the first set that are not in the other set, but it will change the original set instead of returning a new set.\nExample\nUse the difference_update() method to keep the items that are not present in both sets:\nSymmetric Differences\nThe symmetric_difference() method will keep only the elements that are NOT present in both sets.\nExample\nKeep the items that are not present in both sets:\nYou can use the ^ operator instead of the symmetric_difference() method, and you will get the same result.\nExample\nUse ^ to join two sets:\nNote: The ^ operator only allows you to join sets with sets, and not with other data types like you can with the symmetric_difference() method.\nThe symmetric_difference_update() method will also keep all but the duplicates, but it will change the original set instead of returning a new set.\nExample\nUse the symmetric_difference_update() method to keep the items that are not present in both sets:",
      "examples": [
        "set1 = {\"a\", \"b\", \"c\"}\nset2 = {1, 2, 3}\n\nset3 = set1.union(set2)\nprint(set3)",
        "set1 = {\"a\", \"b\", \"c\"}\nset2 = {1, 2, 3}\n\nset3 = set1 | set2\nprint(set3)",
        "set1 = {\"a\", \"b\", \"c\"}\nset2 = {1, 2, 3}\nset3 = {\"John\", \"Elena\"}\nset4 = {\"apple\", \"bananas\", \"cherry\"}\n\nmyset = set1.union(set2, set3, set4)\nprint(myset)",
        "set1 = {\"a\", \"b\", \"c\"}\nset2 = {1, 2, 3}\nset3 = {\"John\", \"Elena\"}\nset4 = {\"apple\", \"bananas\", \"cherry\"}\n\nmyset = set1 | set2 | set3 |set4\nprint(myset)",
        "x = {\"a\", \"b\", \"c\"}\ny = (1, 2, 3)\n\nz = x.union(y)\nprint(z)",
        "set1 = {\"a\", \"b\" , \"c\"}\nset2 = {1, 2, 3}\n\nset1.update(set2)\nprint(set1)",
        "set1 = {\"apple\", \"banana\", \"cherry\"}\nset2 = {\"google\", \"microsoft\", \"apple\"}\n\nset3 = set1.intersection(set2)\nprint(set3)",
        "set1 = {\"apple\", \"banana\", \"cherry\"}\nset2 = {\"google\", \"microsoft\", \"apple\"}\n\nset3 = set1 & set2\nprint(set3)",
        "set1 = {\"apple\", \"banana\", \"cherry\"}\nset2 = {\"google\", \"microsoft\", \"apple\"}\n\nset1.intersection_update(set2)\n\nprint(set1)",
        "set1 = {\"apple\", 1,  \"banana\", 0, \"cherry\"}\nset2 = {False, \"google\", 1, \"apple\", 2, True}\n\nset3 = set1.intersection(set2)\n\nprint(set3)",
        "set1 = {\"apple\", \"banana\", \"cherry\"}\nset2 = {\"google\", \"microsoft\", \"apple\"}\n\nset3 = set1.difference(set2)\n\nprint(set3)",
        "set1 = {\"apple\", \"banana\", \"cherry\"}\nset2 = {\"google\", \"microsoft\", \"apple\"}\n\nset3 = set1.symmetric_difference(set2)\n\nprint(set3)",
        "union()",
        "update()",
        "intersection()",
        "difference()",
        "symmetric_difference()",
        "|",
        "&",
        "intersection_update()",
        "set1",
        "set2",
        "True",
        "1",
        "False",
        "0",
        "-",
        "difference_update()",
        "^",
        "symmetric_difference_update()"
      ]
    },
    {
      "title": "Python - Set Methods",
      "summary": "Set Methods\nPython has a set of built-in methods that you can use on sets.",
      "examples": [
        "-",
        "-=",
        "&",
        "&=",
        "<=",
        "<",
        ">=",
        ">",
        "^",
        "^=",
        "|",
        "|="
      ]
    },
    {
      "title": "Python - Set Exercises",
      "summary": "Test Yourself With Exercises\nNow you have learned a lot about sets, and how to use them in Python.\nAre you ready for a test?\nExercises\nTest your Python Set skills with exercises from all categories:\nSets\nAccess Sets\nAdd Set Items\nRemove Set Items\nLoop Sets\nJoin Sets\nMore Python Exercises:\nPython Exercises",
      "examples": []
    },
    {
      "title": "Python Dictionaries",
      "summary": "Dictionary\nDictionaries are used to store data values in key:value pairs.\nA dictionary is a collection which is ordered*, changeable and do not allow duplicates.\nAs of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered.\nDictionaries are written with curly brackets, and have keys and values:\nExampleGet your own Python Server\nCreate and print a dictionary:\nDictionary Items\nDictionary items are ordered, changeable, and do not allow duplicates.\nDictionary items are presented in key:value pairs, and can be referred to by using the key name.\nExample\nPrint the \"brand\" value of the dictionary:\nOrdered or Unordered?\nAs of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered.\nWhen we say that dictionaries are ordered, it means that the items have a defined order, and that order will not change.\nUnordered means that the items do not have a defined order, you cannot refer to an item by using an index.\nChangeable\nDictionaries are changeable, meaning that we can change, add or remove items after the dictionary has been created.\nDuplicates Not Allowed\nDictionaries cannot have two items with the same key:\nExample\nDuplicate values will overwrite existing values:\nREMOVE ADS\nDictionary Length\nTo determine how many items a dictionary has, use the len() function:\nExample\nPrint the number of items in the dictionary:\nDictionary Items - Data Types\nThe values in dictionary items can be of any data type:\nExample\nString, int, boolean, and list data types:\ntype()\nFrom Python's perspective, dictionaries are defined as objects with the data type 'dict':\nExample\nPrint the data type of a dictionary:\nThe dict() Constructor\nIt is also possible to use the dict() constructor to make a dictionary.\nExample\nUsing the dict() method to make a dictionary:\nPython Collections (Arrays)\nThere are four collection data types in the Python programming language:\nList is a collection which is ordered and changeable. Allows duplicate members.\nTuple is a collection which is ordered and unchangeable. Allows duplicate members.\nSet is a collection which is unordered, unchangeable*, and unindexed. No duplicate members.\nDictionary is a collection which is ordered** and changeable. No duplicate members.\n*Set items are unchangeable, but you can remove and/or add items whenever you like.\n**As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered.\nWhen choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security.",
      "examples": [
        "thisdict = {\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\nprint(thisdict)",
        "thisdict = {\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\nprint(thisdict[\"brand\"])",
        "thisdict = {\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964,\n\"year\": 2020\n}\nprint(thisdict)",
        "print(len(thisdict))",
        "thisdict = {\n\"brand\": \"Ford\",\n\"electric\": False,\n\"year\": 1964,\n\"colors\": [\"red\", \"white\", \"blue\"]\n}",
        "thisdict = {\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\nprint(type(thisdict))",
        "thisdict = dict(name = \"John\", age = 36, country = \"Norway\")\nprint(thisdict)",
        "len()"
      ]
    },
    {
      "title": "Python - Access Dictionary Items",
      "summary": "Accessing Items\nYou can access the items of a dictionary by referring to its key name, inside square brackets:\nExampleGet your own Python Server\nGet the value of the \"model\" key:\nThere is also a method called get() that will give you the same result:\nExample\nGet the value of the \"model\" key:\nGet Keys\nThe keys() method will return a list of all the keys in the dictionary.\nExample\nGet a list of the keys:\nThe list of the keys is a view of the dictionary, meaning that any changes done to the dictionary will be reflected in the keys list.\nExample\nAdd a new item to the original dictionary, and see that the keys list gets updated as well:\nREMOVE ADS\nGet Values\nThe values() method will return a list of all the values in the dictionary.\nExample\nGet a list of the values:\nThe list of the values is a view of the dictionary, meaning that any changes done to the dictionary will be reflected in the values list.\nExample\nMake a change in the original dictionary, and see that the values list gets updated as well:\nExample\nAdd a new item to the original dictionary, and see that the values list gets updated as well:\nGet Items\nThe items() method will return each item in a dictionary, as tuples in a list.\nExample\nGet a list of the key:value pairs\nThe returned list is a view of the items of the dictionary, meaning that any changes done to the dictionary will be reflected in the items list.\nExample\nMake a change in the original dictionary, and see that the items list gets updated as well:\nExample\nAdd a new item to the original dictionary, and see that the items list gets updated as well:\nCheck if Key Exists\nTo determine if a specified key is present in a dictionary use the in keyword:\nExample\nCheck if \"model\" is present in the dictionary:",
      "examples": [
        "thisdict = {\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\nx = thisdict[\"model\"]",
        "x = thisdict.get(\"model\")",
        "x = thisdict.keys()",
        "car = {\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\n\nx = car.keys()\n\nprint(x) #before the change\n\ncar[\"color\"] = \"white\"\n\nprint(x) #after the change",
        "x = thisdict.values()",
        "car = {\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\n\nx = car.values()\n\nprint(x) #before the change\n\ncar[\"year\"] = 2020\n\nprint(x) #after the change",
        "car = {\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\n\nx = car.values()\n\nprint(x) #before the change\n\ncar[\"color\"] = \"red\"\n\nprint(x) #after the change",
        "x = thisdict.items()",
        "car = {\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\n\nx = car.items()\n\nprint(x) #before the change\n\ncar[\"year\"] = 2020\n\nprint(x) #after the change",
        "car = {\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\n\nx = car.items()\n\nprint(x) #before the change\n\ncar[\"color\"] = \"red\"\n\nprint(x) #after the change",
        "thisdict = {\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\nif \"model\" in thisdict:\nprint(\"Yes, 'model' is one of the keys in the thisdict dictionary\")",
        "get()",
        "keys()",
        "values()",
        "items()",
        "in"
      ]
    },
    {
      "title": "Python - Change Dictionary Items",
      "summary": "Change Values\nYou can change the value of a specific item by referring to its key name:\nExampleGet your own Python Server\nChange the \"year\" to 2018:\nUpdate Dictionary\nThe update() method will update the dictionary with the items from the given argument.\nThe argument must be a dictionary, or an iterable object with key:value pairs.\nExample\nUpdate the \"year\" of the car by using the update() method:",
      "examples": [
        "thisdict = {\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\nthisdict[\"year\"] = 2018",
        "thisdict = {\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\nthisdict.update({\"year\": 2020})",
        "update()"
      ]
    },
    {
      "title": "Python - Add Dictionary Items",
      "summary": "Adding Items\nAdding an item to the dictionary is done by using a new index key and assigning a value to it:\nExampleGet your own Python Server\nUpdate Dictionary\nThe update() method will update the dictionary with the items from a given argument. If the item does not exist, the item will be added.\nThe argument must be a dictionary, or an iterable object with key:value pairs.\nExample\nAdd a color item to the dictionary by using the update() method:",
      "examples": [
        "thisdict = {\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\nthisdict[\"color\"] = \"red\"\nprint(thisdict)",
        "thisdict = {\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\nthisdict.update({\"color\": \"red\"})",
        "update()"
      ]
    },
    {
      "title": "Python - Remove Dictionary Items",
      "summary": "Removing Items\nThere are several methods to remove items from a dictionary:\nExampleGet your own Python Server\nThe pop() method removes the item with the specified key name:\nExample\nThe popitem() method removes the last inserted item (in versions before 3.7, a random item is removed instead):\nExample\nThe del keyword removes the item with the specified key name:\nExample\nThe del keyword can also delete the dictionary completely:\nExample\nThe clear() method empties the dictionary:",
      "examples": [
        "thisdict = {\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\nthisdict.pop(\"model\")\nprint(thisdict)",
        "thisdict = {\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\nthisdict.popitem()\nprint(thisdict)",
        "thisdict = {\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\ndel thisdict[\"model\"]\nprint(thisdict)",
        "thisdict = {\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\ndel thisdict\nprint(thisdict) #this will cause an error because \"thisdict\" no longer exists.",
        "thisdict = {\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\nthisdict.clear()\nprint(thisdict)",
        "pop()",
        "popitem()",
        "del",
        "clear()"
      ]
    },
    {
      "title": "Python - Loop Dictionaries",
      "summary": "Loop Through a Dictionary\nYou can loop through a dictionary by using a for loop.\nWhen looping through a dictionary, the return value are the keys of the dictionary, but there are methods to return the values as well.\nExampleGet your own Python Server\nPrint all key names in the dictionary, one by one:\nExample\nPrint all values in the dictionary, one by one:\nExample\nYou can also use the values() method to return values of a dictionary:\nExample\nYou can use the keys() method to return the keys of a dictionary:\nExample\nLoop through both keys and values, by using the items() method:",
      "examples": [
        "for x in thisdict:\nprint(x)",
        "for x in thisdict:\nprint(thisdict[x])",
        "for x in thisdict.values():\nprint(x)",
        "for x in thisdict.keys():\nprint(x)",
        "for x, y in thisdict.items():\nprint(x, y)",
        "for",
        "values()",
        "keys()",
        "items()"
      ]
    },
    {
      "title": "Python - Copy Dictionaries",
      "summary": "Copy a Dictionary\nYou cannot copy a dictionary simply by typing dict2 = dict1, because: dict2 will only be a reference to dict1, and changes made in dict1 will automatically also be made in dict2.\nThere are ways to make a copy, one way is to use the built-in Dictionary method copy().\nExampleGet your own Python Server\nMake a copy of a dictionary with the copy() method:\nAnother way to make a copy is to use the built-in function dict().\nExample\nMake a copy of a dictionary with the dict() function:",
      "examples": [
        "thisdict = {\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\nmydict = thisdict.copy()\nprint(mydict)",
        "thisdict = {\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\nmydict = dict(thisdict)\nprint(mydict)",
        "dict2 = dict1",
        "dict2",
        "dict1",
        "copy()",
        "dict()"
      ]
    },
    {
      "title": "Python - Nested Dictionaries",
      "summary": "Nested Dictionaries\nA dictionary can contain dictionaries, this is called nested dictionaries.\nExampleGet your own Python Server\nCreate a dictionary that contain three dictionaries:\nOr, if you want to add three dictionaries into a new dictionary:\nExample\nCreate three dictionaries, then create one dictionary that will contain the other three dictionaries:\nAccess Items in Nested Dictionaries\nTo access items from a nested dictionary, you use the name of the dictionaries, starting with the outer dictionary:\nExample\nPrint the name of child 2:\nLoop Through Nested Dictionaries\nYou can loop through a dictionary by using the items() method like this:\nExample\nLoop through the keys and values of all nested dictionaries:",
      "examples": [
        "myfamily = {\n\"child1\" : {\n\"name\" : \"Emil\",\n\"year\" : 2004\n},\n\"child2\" : {\n\"name\" : \"Tobias\",\n\"year\" : 2007\n},\n\"child3\" : {\n\"name\" : \"Linus\",\n\"year\" : 2011\n}\n}",
        "child1 = {\n\"name\" : \"Emil\",\n\"year\" : 2004\n}\nchild2 = {\n\"name\" : \"Tobias\",\n\"year\" : 2007\n}\nchild3 = {\n\"name\" : \"Linus\",\n\"year\" : 2011\n}\n\nmyfamily = {\n\"child1\" : child1,\n\"child2\" : child2,\n\"child3\" : child3\n}",
        "print(myfamily[\"child2\"][\"name\"])",
        "for x, obj in myfamily.items():\nprint(x)\n\nfor y in obj:\nprint(y + ':', obj[y])",
        "items()"
      ]
    },
    {
      "title": "Python Dictionary Methods",
      "summary": "Dictionary Methods\nPython has a set of built-in methods that you can use on dictionaries.",
      "examples": []
    },
    {
      "title": "Python Dictionary Exercises",
      "summary": "Test Yourself With Exercises\nNow you have learned a lot about dictionaries, and how to use them in Python.\nAre you ready for a test?\nExercises\nTest your Python Dictionary skills with exercises from all categories:\nDictionaries\nAccess Dictionaries\nChange Dictionaries\nAdd Dictionary Items\nRemove Dictionary Items\nLoop Dictionaries\nCopy Dictionaries\nNested Dictionaries\nMore Python Exercises:\nPython Exercises",
      "examples": []
    },
    {
      "title": "Python If ... Else",
      "summary": "Python Conditions and If statements\nPython supports the usual logical conditions from mathematics:\nEquals: a == b\nNot Equals: a != b\nLess than: a < b\nLess than or equal to: a <= b\nGreater than: a > b\nGreater than or equal to: a >= b\nThese conditions can be used in several ways, most commonly in \"if statements\" and loops.\nAn \"if statement\" is written by using the if keyword.\nExampleGet your own Python Server\nIf statement:\nIn this example we use two variables, a and b, which are used as part of the if statement to test whether b is greater than a. As a is 33, and b is 200, we know that 200 is greater than 33, and so we print to screen that \"b is greater than a\".\nIndentation\nPython relies on indentation (whitespace at the beginning of a line) to define scope in the code. Other programming languages often use curly-brackets for this purpose.\nExample\nIf statement, without indentation (will raise an error):\nREMOVE ADS\nElif\nThe elif keyword is Python's way of saying \"if the previous conditions were not true, then try this condition\".\nExample\nIn this example a is equal to b, so the first condition is not true, but the elif condition is true, so we print to screen that \"a and b are equal\".\nElse\nThe else keyword catches anything which isn't caught by the preceding conditions.\nExample\nIn this example a is greater than b, so the first condition is not true, also the elif condition is not true, so we go to the else condition and print to screen that \"a is greater than b\".\nYou can also have an else without the elif:\nExample\nShort Hand If\nIf you have only one statement to execute, you can put it on the same line as the if statement.\nExample\nOne line if statement:\nShort Hand If ... Else\nIf you have only one statement to execute, one for if, and one for else, you can put it all on the same line:\nExample\nOne line if else statement:\nThis technique is known as Ternary Operators, or Conditional Expressions.\nYou can also have multiple else statements on the same line:\nExample\nOne line if else statement, with 3 conditions:\nAnd\nThe and keyword is a logical operator, and is used to combine conditional statements:\nExample\nTest if a is greater than b, AND if c is greater than a:\nOr\nThe or keyword is a logical operator, and is used to combine conditional statements:\nExample\nTest if a is greater than b, OR if a is greater than c:\nNot\nThe not keyword is a logical operator, and is used to reverse the result of the conditional statement:\nExample\nTest if a is NOT greater than b:\nNested If\nYou can have if statements inside if statements, this is called nested if statements.\nExample\nThe pass Statement\nif statements cannot be empty, but if you for some reason have an if statement with no content, put in the pass statement to avoid getting an error.\nExample",
      "examples": [
        "a = 33\nb = 200\nif b > a:\nprint(\"b is greater than a\")",
        "a = 33\nb = 200\nif b > a:\nprint(\"b is greater than a\") # you will get an error",
        "a = 33\nb = 33\nif b > a:\nprint(\"b is greater than a\")\nelif a == b:\nprint(\"a and b are equal\")",
        "a = 200\nb = 33\nif b > a:\nprint(\"b is greater than a\")\nelif a == b:\nprint(\"a and b are equal\")\nelse:\nprint(\"a is greater than b\")",
        "a = 200\nb = 33\nif b > a:\nprint(\"b is greater than a\")\nelse:\nprint(\"b is not greater than a\")",
        "if a > b: print(\"a is greater than b\")",
        "a = 2\nb = 330\nprint(\"A\") if a > b else print(\"B\")",
        "a = 330\nb = 330\nprint(\"A\") if a > b else print(\"=\") if a == b else print(\"B\")",
        "a = 200\nb = 33\nc = 500\nif a > b and c > a:\nprint(\"Both conditions are True\")",
        "a = 200\nb = 33\nc = 500\nif a > b or a > c:\nprint(\"At least one of the conditions is True\")",
        "a = 33\nb = 200\nif not a > b:\nprint(\"a is NOT greater than b\")",
        "x = 41\n\nif x > 10:\nprint(\"Above ten,\")\nif x > 20:\nprint(\"and also above 20!\")\nelse:\nprint(\"but not above 20.\")",
        "a = 33\nb = 200\n\nif b > a:\npass",
        "else",
        "elif",
        "and",
        "a",
        "b",
        "c",
        "or",
        "not",
        "if",
        "pass"
      ]
    },
    {
      "title": "Python Match",
      "summary": "The match statement is used to perform different actions based on different conditions.\nThe Python Match Statement\nInstead of writing many if..else statements, you can use the match statement.\nThe match statement selects one of many code blocks to be executed.\nSyntaxGet your own Python Server\nThis is how it works:\nThe match expression is evaluated once.\nThe value of the expression is compared with the values of each case.\nIf there is a match, the associated block of code is executed.\nThe example below uses the weekday number to print the weekday name:\nExample\nREMOVE ADS\nDefault Value\nUse the underscore character _ as the last case value if you want a code block to execute when there are not other matches:\nExample\nThe value _ will always match, so it is important to place it as the last case to make it behave as a default case.\nCombine Values\nUse the pipe character | as an or operator in the case evaluation to check for more than one value match in one case:\nExample\nIf Statements as Guards\nYou can add if statements in the case evaluation as an extra condition-check:\nExample",
      "examples": [
        "match expression:\ncase x:\ncode block\ncase y:\ncode block\ncase z:\ncode block",
        "day = 4\nmatch day:\ncase 1:\nprint(\"Monday\")\ncase 2:\nprint(\"Tuesday\")\ncase 3:\nprint(\"Wednesday\")\ncase 4:\nprint(\"Thursday\")\ncase 5:\nprint(\"Friday\")\ncase 6:\nprint(\"Saturday\")\ncase 7:\nprint(\"Sunday\")",
        "day = 4\nmatch day:\ncase 6:\nprint(\"Today is Saturday\")\ncase 7:\nprint(\"Today is Sunday\")\ncase _:\nprint(\"Looking forward to the Weekend\")",
        "day = 4\nmatch day:\ncase 1 | 2 | 3 | 4 | 5:\nprint(\"Today is a weekday\")\ncase 6 | 7:\nprint(\"I love weekends!\")",
        "month = 5\nday = 4\nmatch day:\ncase 1 | 2 | 3 | 4 | 5 if month == 4:\nprint(\"A weekday in April\")\ncase 1 | 2 | 3 | 4 | 5 if month == 5:\nprint(\"A weekday in May\")\ncase _:\nprint(\"No match\")",
        "match",
        "if..else",
        "case",
        "if"
      ]
    },
    {
      "title": "Python While Loops",
      "summary": "Python Loops\nPython has two primitive loop commands:\nwhile loops\nfor loops\nThe while Loop\nWith the while loop we can execute a set of statements as long as a condition is true.\nExampleGet your own Python Server\nPrint i as long as i is less than 6:\nNote: remember to increment i, or else the loop will continue forever.\nThe while loop requires relevant variables to be ready, in this example we need to define an indexing variable, i, which we set to 1.\nThe break Statement\nWith the break statement we can stop the loop even if the while condition is true:\nExample\nExit the loop when i is 3:\nREMOVE ADS\nThe continue Statement\nWith the continue statement we can stop the current iteration, and continue with the next:\nExample\nContinue to the next iteration if i is 3:\nThe else Statement\nWith the else statement we can run a block of code once when the condition no longer is true:\nExample\nPrint a message once the condition is false:",
      "examples": [
        "i = 1\nwhile i < 6:\nprint(i)\ni += 1",
        "i = 1\nwhile i < 6:\nprint(i)\nif i == 3:\nbreak\ni += 1",
        "i = 0\nwhile i < 6:\ni += 1\nif i == 3:\ncontinue\nprint(i)",
        "i = 1\nwhile i < 6:\nprint(i)\ni += 1\nelse:\nprint(\"i is no longer less than 6\")"
      ]
    },
    {
      "title": "Python For Loops",
      "summary": "Python For Loops\nA for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).\nThis is less like the for keyword in other programming languages, and works more like an iterator method as found in other object-orientated programming languages.\nWith the for loop we can execute a set of statements, once for each item in a list, tuple, set etc.\nExampleGet your own Python Server\nPrint each fruit in a fruit list:\nThe for loop does not require an indexing variable to set beforehand.\nLooping Through a String\nEven strings are iterable objects, they contain a sequence of characters:\nExample\nLoop through the letters in the word \"banana\":\nThe break Statement\nWith the break statement we can stop the loop before it has looped through all the items:\nExample\nExit the loop when x is \"banana\":\nExample\nExit the loop when x is \"banana\", but this time the break comes before the print:\nREMOVE ADS\nThe continue Statement\nWith the continue statement we can stop the current iteration of the loop, and continue with the next:\nExample\nDo not print banana:\nThe range() Function\nTo loop through a set of code a specified number of times, we can use the range() function,\nThe range() function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and ends at a specified number.\nExample\nUsing the range() function:\nNote that range(6) is not the values of 0 to 6, but the values 0 to 5.\nThe range() function defaults to 0 as a starting value, however it is possible to specify the starting value by adding a parameter: range(2, 6), which means values from 2 to 6 (but not including 6):\nExample\nUsing the start parameter:\nThe range() function defaults to increment the sequence by 1, however it is possible to specify the increment value by adding a third parameter: range(2, 30, 3):\nExample\nIncrement the sequence with 3 (default is 1):\nElse in For Loop\nThe else keyword in a for loop specifies a block of code to be executed when the loop is finished:\nExample\nPrint all numbers from 0 to 5, and print a message when the loop has ended:\nNote: The else block will NOT be executed if the loop is stopped by a break statement.\nExample\nBreak the loop when x is 3, and see what happens with the else block:\nNested Loops\nA nested loop is a loop inside a loop.\nThe \"inner loop\" will be executed one time for each iteration of the \"outer loop\":\nExample\nPrint each adjective for every fruit:\nThe pass Statement\nfor loops cannot be empty, but if you for some reason have a for loop with no content, put in the pass statement to avoid getting an error.\nExample",
      "examples": [
        "fruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\nprint(x)",
        "for x in \"banana\":\nprint(x)",
        "fruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\nprint(x)\nif x == \"banana\":\nbreak",
        "fruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\nif x == \"banana\":\nbreak\nprint(x)",
        "fruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\nif x == \"banana\":\ncontinue\nprint(x)",
        "for x in range(6):\nprint(x)",
        "for x in range(2, 6):\nprint(x)",
        "for x in range(2, 30, 3):\nprint(x)",
        "for x in range(6):\nprint(x)\nelse:\nprint(\"Finally finished!\")",
        "for x in range(6):\nif x == 3: break\nprint(x)\nelse:\nprint(\"Finally finished!\")",
        "adj = [\"red\", \"big\", \"tasty\"]\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\nfor x in adj:\nfor y in fruits:\nprint(x, y)",
        "for x in [0, 1, 2]:\npass",
        "x",
        "range()",
        "range(6)",
        "range(2, 6)",
        "range(2, 30, 3)",
        "else",
        "for",
        "break",
        "pass"
      ]
    },
    {
      "title": "Python Functions",
      "summary": "A function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\nCreating a Function\nIn Python a function is defined using the def keyword:\nExampleGet your own Python Server\nCalling a Function\nTo call a function, use the function name followed by parenthesis:\nExample\nArguments\nInformation can be passed into functions as arguments.\nArguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma.\nThe following example has a function with one argument (fname). When the function is called, we pass along a first name, which is used inside the function to print the full name:\nExample\nArguments are often shortened to args in Python documentations.\nREMOVE ADS\nParameters or Arguments?\nThe terms parameter and argument can be used for the same thing: information that are passed into a function.\nFrom a function's perspective:\nA parameter is the variable listed inside the parentheses in the function definition.\nAn argument is the value that is sent to the function when it is called.\nNumber of Arguments\nBy default, a function must be called with the correct number of arguments. Meaning that if your function expects 2 arguments, you have to call the function with 2 arguments, not more, and not less.\nExample\nThis function expects 2 arguments, and gets 2 arguments:\nExample\nThis function expects 2 arguments, but gets only 1:\nArbitrary Arguments, *args\nIf you do not know how many arguments that will be passed into your function, add a * before the parameter name in the function definition.\nThis way the function will receive a tuple of arguments, and can access the items accordingly:\nExample\nIf the number of arguments is unknown, add a * before the parameter name:\nArbitrary Arguments are often shortened to *args in Python documentations.\nKeyword Arguments\nYou can also send arguments with the key = value syntax.\nThis way the order of the arguments does not matter.\nExample\nThe phrase Keyword Arguments are often shortened to kwargs in Python documentations.\nArbitrary Keyword Arguments, **kwargs\nIf you do not know how many keyword arguments that will be passed into your function, add two asterisk: ** before the parameter name in the function definition.\nThis way the function will receive a dictionary of arguments, and can access the items accordingly:\nExample\nIf the number of keyword arguments is unknown, add a double ** before the parameter name:\nArbitrary Kword Arguments are often shortened to **kwargs in Python documentations.\nDefault Parameter Value\nThe following example shows how to use a default parameter value.\nIf we call the function without argument, it uses the default value:\nExample\nPassing a List as an Argument\nYou can send any data types of argument to a function (string, number, list, dictionary etc.), and it will be treated as the same data type inside the function.\nE.g. if you send a List as an argument, it will still be a List when it reaches the function:\nExample\nReturn Values\nTo let a function return a value, use the return statement:\nExample\nThe pass Statement\nFunction definitions cannot be empty, but if you for some reason have a function definition with no content, put in the pass statement to avoid getting an error.\nExample\nPositional-Only Arguments\nYou can specify that a function can have ONLY positional arguments, or ONLY keyword arguments.\nTo specify that a function can have only positional arguments, add , / after the arguments:\nExample\nWithout the , / you are actually allowed to use keyword arguments even if the function expects positional arguments:\nExample\nBut when adding the , / you will get an error if you try to send a keyword argument:\nExample\nKeyword-Only Arguments\nTo specify that a function can have only keyword arguments, add *, before the arguments:\nExample\nWithout the *, you are allowed to use positional arguments even if the function expects keyword arguments:\nExample\nBut with the *, you will get an error if you try to send a positional argument:\nExample\nCombine Positional-Only and Keyword-Only\nYou can combine the two argument types in the same function.\nAny argument before the / , are positional-only, and any argument after the *, are keyword-only.\nExample\nRecursion\nPython also accepts function recursion, which means a defined function can call itself.\nRecursion is a common mathematical and programming concept. It means that a function calls itself. This has the benefit of meaning that you can loop through data to reach a result.\nThe developer should be very careful with recursion as it can be quite easy to slip into writing a function which never terminates, or one that uses excess amounts of memory or processor power. However, when written correctly recursion can be a very efficient and mathematically-elegant approach to programming.\nIn this example, tri_recursion() is a function that we have defined to call itself (\"recurse\"). We use the k variable as the data, which decrements (-1) every time we recurse. The recursion ends when the condition is not greater than 0 (i.e. when it is 0).\nTo a new developer it can take some time to work out how exactly this works, best way to find out is by testing and modifying it.\nExample\nRecursion Example",
      "examples": [
        "def my_function():\nprint(\"Hello from a function\")",
        "def my_function():\nprint(\"Hello from a function\")\n\nmy_function()",
        "def my_function(fname):\nprint(fname + \" Refsnes\")\n\nmy_function(\"Emil\")\nmy_function(\"Tobias\")\nmy_function(\"Linus\")",
        "def my_function(fname, lname):\nprint(fname + \" \" + lname)\n\nmy_function(\"Emil\", \"Refsnes\")",
        "def my_function(fname, lname):\nprint(fname + \" \" + lname)\n\nmy_function(\"Emil\")",
        "def my_function(*kids):\nprint(\"The youngest child is \" + kids[2])\n\nmy_function(\"Emil\", \"Tobias\", \"Linus\")",
        "def my_function(child3, child2, child1):\nprint(\"The youngest child is \" + child3)\n\nmy_function(child1 = \"Emil\", child2 = \"Tobias\", child3 = \"Linus\")",
        "def my_function(**kid):\nprint(\"His last name is \" + kid[\"lname\"])\n\nmy_function(fname = \"Tobias\", lname = \"Refsnes\")",
        "def my_function(country = \"Norway\"):\nprint(\"I am from \" + country)\n\nmy_function(\"Sweden\")\nmy_function(\"India\")\nmy_function()\nmy_function(\"Brazil\")",
        "def my_function(food):\nfor x in food:\nprint(x)\n\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\nmy_function(fruits)",
        "def my_function(x):\nreturn 5 * x\n\nprint(my_function(3))\nprint(my_function(5))\nprint(my_function(9))",
        "def myfunction():\npass",
        "def my_function(x, /):\nprint(x)\n\nmy_function(3)",
        "def my_function(x):\nprint(x)\n\nmy_function(x = 3)",
        "def my_function(x, /):\nprint(x)\n\nmy_function(x = 3)",
        "def my_function(*, x):\nprint(x)\n\nmy_function(x = 3)",
        "def my_function(x):\nprint(x)\n\nmy_function(3)",
        "def my_function(*, x):\nprint(x)\n\nmy_function(3)",
        "def my_function(a, b, /, *, c, d):\nprint(a + b + c + d)\n\nmy_function(5, 6, c = 7, d = 8)",
        "def tri_recursion(k):\nif(k > 0):\nresult = k + tri_recursion(k - 1)\nprint(result)\nelse:\nresult = 0\nreturn result\n\nprint(\"Recursion Example Results:\")\ntri_recursion(6)",
        "def",
        "*",
        "**",
        "return",
        "pass",
        ", /",
        "*,",
        "/ ,"
      ]
    },
    {
      "title": "Python Decorators",
      "summary": "Decorators let you add extra behavior to a function, without changing the function's code.\nA decorator is a function that takes another function as input and returns a new function.\nBasic Decorator\nDefine the decorator first, then apply it with @decorator_name above the function.\nExampleGet your own Python Server\nA basic decorator that uppercases the return value of the decorated function.\nBy placing @changecase directly above the function definition, the function myfunction is being \"decorated\" with the changecase function.\nThe function changecase is the decorator.\nThe function myfunction is the function that gets decorated.\nMultiple Decorator Calls\nA decorator can be called multiple times. Just place the decorator above the function you want to decorate.\nExample\nUsing the @changecase decorator on two functions:\nArguments in the Decorated Function\nFunctions that requires arguments can also be decorated, just make sure you pass the arguments to the wrapper function:\nExample\nFunctions with arguments can also be decorated:\n*args and **kwargs\nSometimes the decorator function has no control over the arguments passed from decorated function, to solve this problem, add (*args, **kwargs) to the wrapper function, this way the wrapper function can accept any number, and any type of arguments, and pass them to the decorated function.\nExample\nSecure the function with *args and **kwargs arguments:\nDecorator With Arguments\nDecorators can accept their own arguments by adding another wrapper level.\nExample\nA decorator factory that takes an argument and transforms the casing based on the argument value.\nMultiple Decorators\nYou can use multiple decorators on one function.\nThis is done by placing the decorator calls on top of each other.\nThe decorators are called in the order they are specified.\nExample\nOne decorator for upper case, and one for adding a greeting:\nPreserving Function Metadata\nFunctions in Python has metadata that can be accessed using the __name__ and __doc__ attributes.\nExample\nNormally, a function's name can be returned with the __name__ attribute:\nBut, when a function is decorated, the metadata of the original function is lost.\nExample\nTry returning the name from a decorated function and you will not get the same result:\nTo fix this, Python has a built-in function called functools.wraps that can be used to preserve the original function's name and docstring.\nExample\nImport functools.wraps to preserve the original function name and docstring.",
      "examples": [
        "def changecase(func):\ndef myinner():\nreturn func().upper()\nreturn myinner\n\n@changecase\ndef myfunction():\nreturn \"Hello Sally\"\n\nprint(myfunction())",
        "def changecase(func):\ndef myinner():\nreturn func().upper()\nreturn myinner\n\n@changecase\ndef myfunction():\nreturn \"Hello Sally\"\n\n@changecase\ndef otherfunction():\nreturn \"I am speed!\"\n\nprint(myfunction())\nprint(otherfunction())",
        "def changecase(func):\ndef myinner(x):\nreturn func(x).upper()\nreturn myinner\n\n@changecase\ndef myfunction(nam):\nreturn \"Hello \" + nam\n\nprint(myfunction(\"John\"))",
        "def changecase(func):\ndef myinner(*args, **kwargs):\nreturn func(*args, **kwargs).upper()\nreturn myinner\n\n@changecase\ndef myfunction(nam):\nreturn \"Hello \" + nam\n\nprint(myfunction(\"John\"))",
        "def changecase(n):\ndef changecase(func):\ndef myinner():\nif n == 1:\na = func().lower()\nelse:\na = func().upper()\nreturn a\nreturn myinner\nreturn changecase\n\n@changecase(1)\ndef myfunction():\nreturn \"Hello Linus\"\n\nprint(myfunction())",
        "def changecase(func):\ndef myinner():\nreturn func().upper()\nreturn myinner\n\ndef addgreeting(func):\ndef myinner():\nreturn \"Hello \" + func() + \" Have a good day!\"\nreturn myinner\n\n@changecase\n@addgreeting\ndef myfunction():\nreturn \"Tobias\"\n\nprint(myfunction())",
        "def myfunction():\nreturn \"Have a great day!\"\n\nprint(myfunction.__name__)",
        "def changecase(func):\ndef myinner():\nreturn func().upper()\nreturn myinner\n\n@changecase\ndef myfunction():\nreturn \"Have a great day!\"\n\nprint(myfunction.__name__)",
        "import functools\n\ndef changecase(func):\n@functools.wraps(func)\ndef myinner():\nreturn func().upper()\nreturn myinner\n\n@changecase\ndef myfunction():\nreturn \"Have a great day!\"\n\nprint(myfunction.__name__)",
        "@decorator_name",
        "@changecase",
        "myfunction",
        "changecase",
        "(*args, **kwargs)",
        "*args",
        "**kwargs",
        "__name__",
        "__doc__",
        "functools.wraps"
      ]
    },
    {
      "title": "Python Lambda",
      "summary": "A lambda function is a small anonymous function.\nA lambda function can take any number of arguments, but can only have one expression.\nSyntax\nThe expression is executed and the result is returned:\nExampleGet your own Python Server\nAdd 10 to argument a, and return the result:\nLambda functions can take any number of arguments:\nExample\nMultiply argument a with argument b and return the result:\nExample\nSummarize argument a, b, and c and return the result:\nREMOVE ADS\nWhy Use Lambda Functions?\nThe power of lambda is better shown when you use them as an anonymous function inside another function.\nSay you have a function definition that takes one argument, and that argument will be multiplied with an unknown number:\nUse that function definition to make a function that always doubles the number you send in:\nExample\nOr, use the same function definition to make a function that always triples the number you send in:\nExample\nOr, use the same function definition to make both functions, in the same program:\nExample\nUse lambda functions when an anonymous function is required for a short period of time.",
      "examples": [
        "lambda arguments : expression",
        "x = lambda a : a + 10\nprint(x(5))",
        "x = lambda a, b : a * b\nprint(x(5, 6))",
        "x = lambda a, b, c : a + b + c\nprint(x(5, 6, 2))",
        "def myfunc(n):\nreturn lambda a : a * n",
        "def myfunc(n):\nreturn lambda a : a * n\n\nmydoubler = myfunc(2)\n\nprint(mydoubler(11))",
        "def myfunc(n):\nreturn lambda a : a * n\n\nmytripler = myfunc(3)\n\nprint(mytripler(11))",
        "def myfunc(n):\nreturn lambda a : a * n\n\nmydoubler = myfunc(2)\nmytripler = myfunc(3)\n\nprint(mydoubler(11))\nprint(mytripler(11))",
        "a",
        "b",
        "c"
      ]
    },
    {
      "title": "Python Arrays",
      "summary": "Note: Python does not have built-in support for Arrays, but Python Lists can be used instead.\nArrays\nNote: This page shows you how to use LISTS as ARRAYS, however, to work with arrays in Python you will have to import a library, like the NumPy library.\nArrays are used to store multiple values in one single variable:\nExampleGet your own Python Server\nCreate an array containing car names:\nWhat is an Array?\nAn array is a special variable, which can hold more than one value at a time.\nIf you have a list of items (a list of car names, for example), storing the cars in single variables could look like this:\nHowever, what if you want to loop through the cars and find a specific one? And what if you had not 3 cars, but 300?\nThe solution is an array!\nAn array can hold many values under a single name, and you can access the values by referring to an index number.\nAccess the Elements of an Array\nYou refer to an array element by referring to the index number.\nExample\nGet the value of the first array item:\nExample\nModify the value of the first array item:\nThe Length of an Array\nUse the len() method to return the length of an array (the number of elements in an array).\nExample\nReturn the number of elements in the cars array:\nNote: The length of an array is always one more than the highest array index.\nREMOVE ADS\nLooping Array Elements\nYou can use the for in loop to loop through all the elements of an array.\nExample\nPrint each item in the cars array:\nAdding Array Elements\nYou can use the append() method to add an element to an array.\nExample\nAdd one more element to the cars array:\nRemoving Array Elements\nYou can use the pop() method to remove an element from the array.\nExample\nDelete the second element of the cars array:\nYou can also use the remove() method to remove an element from the array.\nExample\nDelete the element that has the value \"Volvo\":\nNote: The list's remove() method only removes the first occurrence of the specified value.\nArray Methods\nPython has a set of built-in methods that you can use on lists/arrays.\nNote: Python does not have built-in support for Arrays, but Python Lists can be used instead.",
      "examples": [
        "cars = [\"Ford\", \"Volvo\", \"BMW\"]",
        "car1 = \"Ford\"\ncar2 = \"Volvo\"\ncar3 = \"BMW\"",
        "x = cars[0]",
        "cars[0] = \"Toyota\"",
        "x = len(cars)",
        "for x in cars:\nprint(x)",
        "cars.append(\"Honda\")",
        "cars.pop(1)",
        "cars.remove(\"Volvo\")",
        "len()",
        "cars",
        "for in",
        "append()",
        "pop()",
        "remove()"
      ]
    },
    {
      "title": "Python OOP",
      "summary": "What is OOP?\nOOP stands for Object-Oriented Programming.\nPython is an object-oriented language, allowing you to structure your code using classes and objects for better organization and reusability.\nAdvantages of OOP\nProvides a clear structure to programs\nMakes code easier to maintain, reuse, and debug\nHelps keep your code DRY (Don't Repeat Yourself)\nAllows you to build reusable applications with less code\nTip: The DRY principle means you should avoid writing the same code more than once. Move repeated code into functions or classes and reuse it.\nWhat are Classes and Objects?\nClasses and objects are the two core concepts in object-oriented programming.\nA class defines what an object should look like, and an object is created based on that class. For example:\nWhen you create an object from a class, it inherits all the variables and functions defined inside that class.\nIn the next chapters, you will learn how to:\nCreate a class\nCreate objects\nAccess class members\nAnd much more",
      "examples": []
    },
    {
      "title": "Python Classes and Objects",
      "summary": "Python Classes/Objects\nPython is an object oriented programming language.\nAlmost everything in Python is an object, with its properties and methods.\nA Class is like an object constructor, or a \"blueprint\" for creating objects.\nCreate a Class\nTo create a class, use the keyword class:\nExampleGet your own Python Server\nCreate a class named MyClass, with a property named x:\nCreate Object\nNow we can use the class named MyClass to create objects:\nExample\nCreate an object named p1, and print the value of x:\nThe __init__() Method\nThe examples above are classes and objects in their simplest form, and are not really useful in real life applications.\nTo understand the meaning of classes we have to understand the built-in __init__() method.\nAll classes have a method called __init__(), which is always executed when the class is being initiated.\nUse the __init__() method to assign values to object properties, or other operations that are necessary to do when the object is being created:\nExample\nCreate a class named Person, use the __init__() method to assign values for name and age:\nNote: The __init__() method is called automatically every time the class is being used to create a new object.\nREMOVE ADS\nThe __str__() Method\nThe __str__() method controls what should be returned when the class object is represented as a string.\nIf the __str__() method is not set, the string representation of the object is returned:\nExample\nThe string representation of an object WITHOUT the __str__() method:\nExample\nThe string representation of an object WITH the __str__() method:\nCreate Methods\nYou can create your own methods inside objects. Methods in objects are functions that belong to the object.\nLet us create a method in the Person class:\nExample\nInsert a function that prints a greeting, and execute it on the p1 object:\nNote: The self parameter is a reference to the current instance of the class, and is used to access variables that belong to the class.\nThe self Parameter\nThe self parameter is a reference to the current instance of the class, and is used to access variables that belong to the class.\nIt does not have to be named self, you can call it whatever you like, but it has to be the first parameter of any function in the class:\nExample\nUse the words mysillyobject and abc instead of self:\nModify Object Properties\nYou can modify properties on objects like this:\nExample\nSet the age of p1 to 40:\nDelete Object Properties\nYou can delete properties on objects by using the del keyword:\nExample\nDelete the age property from the p1 object:\nDelete Objects\nYou can delete objects by using the del keyword:\nExample\nDelete the p1 object:\nThe pass Statement\nclass definitions cannot be empty, but if you for some reason have a class definition with no content, put in the pass statement to avoid getting an error.\nExample",
      "examples": [
        "class MyClass:\nx = 5",
        "p1 = MyClass()\nprint(p1.x)",
        "class Person:\ndef __init__(self, name, age):\nself.name = name\nself.age = age\n\np1 = Person(\"John\", 36)\n\nprint(p1.name)\nprint(p1.age)",
        "class Person:\ndef __init__(self, name, age):\nself.name = name\nself.age = age\n\np1 = Person(\"John\", 36)\n\nprint(p1)",
        "class Person:\ndef __init__(self, name, age):\nself.name = name\nself.age = age\n\ndef __str__(self):\nreturn f\"{self.name}({self.age})\"\n\np1 = Person(\"John\", 36)\n\nprint(p1)",
        "class Person:\ndef __init__(self, name, age):\nself.name = name\nself.age = age\n\ndef myfunc(self):\nprint(\"Hello my name is \" + self.name)\n\np1 = Person(\"John\", 36)\np1.myfunc()",
        "class Person:\ndef __init__(mysillyobject, name, age):\nmysillyobject.name = name\nmysillyobject.age = age\n\ndef myfunc(abc):\nprint(\"Hello my name is \" + abc.name)\n\np1 = Person(\"John\", 36)\np1.myfunc()",
        "p1.age = 40",
        "del p1.age",
        "del p1",
        "class Person:\npass",
        "class",
        "__init__()",
        "__str__()",
        "self",
        "del",
        "pass"
      ]
    },
    {
      "title": "Python Inheritance",
      "summary": "Python Inheritance\nInheritance allows us to define a class that inherits all the methods and properties from another class.\nParent class is the class being inherited from, also called base class.\nChild class is the class that inherits from another class, also called derived class.\nCreate a Parent Class\nAny class can be a parent class, so the syntax is the same as creating any other class:\nExampleGet your own Python Server\nCreate a class named Person, with firstname and lastname properties, and a printname method:\nCreate a Child Class\nTo create a class that inherits the functionality from another class, send the parent class as a parameter when creating the child class:\nExample\nCreate a class named Student, which will inherit the properties and methods from the Person class:\nNote: Use the pass keyword when you do not want to add any other properties or methods to the class.\nNow the Student class has the same properties and methods as the Person class.\nExample\nUse the Student class to create an object, and then execute the printname method:\nREMOVE ADS\nAdd the __init__() Function\nSo far we have created a child class that inherits the properties and methods from its parent.\nWe want to add the __init__() function to the child class (instead of the pass keyword).\nNote: The __init__() function is called automatically every time the class is being used to create a new object.\nExample\nAdd the __init__() function to the Student class:\nWhen you add the __init__() function, the child class will no longer inherit the parent's __init__() function.\nNote: The child's __init__() function overrides the inheritance of the parent's __init__() function.\nTo keep the inheritance of the parent's __init__() function, add a call to the parent's __init__() function:\nExample\nNow we have successfully added the __init__() function, and kept the inheritance of the parent class, and we are ready to add functionality in the __init__() function.\nUse the super() Function\nPython also has a super() function that will make the child class inherit all the methods and properties from its parent:\nExample\nBy using the super() function, you do not have to use the name of the parent element, it will automatically inherit the methods and properties from its parent.\nAdd Properties\nExample\nAdd a property called graduationyear to the Student class:\nIn the example below, the year 2019 should be a variable, and passed into the Student class when creating student objects. To do so, add another parameter in the __init__() function:\nExample\nAdd a year parameter, and pass the correct year when creating objects:\nAdd Methods\nExample\nAdd a method called welcome to the Student class:\nIf you add a method in the child class with the same name as a function in the parent class, the inheritance of the parent method will be overridden.",
      "examples": [
        "class Person:\ndef __init__(self, fname, lname):\nself.firstname = fname\nself.lastname = lname\n\ndef printname(self):\nprint(self.firstname, self.lastname)\n\n#Use the Person class to create an object, and then execute the printname method:\n\nx = Person(\"John\", \"Doe\")\nx.printname()",
        "class Student(Person):\npass",
        "x = Student(\"Mike\", \"Olsen\")\nx.printname()",
        "class Student(Person):\ndef __init__(self, fname, lname):\n#add properties etc.",
        "class Student(Person):\ndef __init__(self, fname, lname):\nPerson.__init__(self, fname, lname)",
        "class Student(Person):\ndef __init__(self, fname, lname):\nsuper().__init__(fname, lname)",
        "class Student(Person):\ndef __init__(self, fname, lname):\nsuper().__init__(fname, lname)\nself.graduationyear = 2019",
        "class Student(Person):\ndef __init__(self, fname, lname, year):\nsuper().__init__(fname, lname)\nself.graduationyear = year\n\nx = Student(\"Mike\", \"Olsen\", 2019)",
        "class Student(Person):\ndef __init__(self, fname, lname, year):\nsuper().__init__(fname, lname)\nself.graduationyear = year\n\ndef welcome(self):\nprint(\"Welcome\", self.firstname, self.lastname, \"to the class of\", self.graduationyear)",
        "Person",
        "firstname",
        "lastname",
        "printname",
        "Student",
        "pass",
        "__init__()",
        "super()",
        "graduationyear",
        "2019",
        "year",
        "welcome"
      ]
    },
    {
      "title": "Python Iterators",
      "summary": "Python Iterators\nAn iterator is an object that contains a countable number of values.\nAn iterator is an object that can be iterated upon, meaning that you can traverse through all the values.\nTechnically, in Python, an iterator is an object which implements the iterator protocol, which consist of the methods __iter__() and __next__().\nIterator vs Iterable\nLists, tuples, dictionaries, and sets are all iterable objects. They are iterable containers which you can get an iterator from.\nAll these objects have a iter() method which is used to get an iterator:\nExampleGet your own Python Server\nReturn an iterator from a tuple, and print each value:\nEven strings are iterable objects, and can return an iterator:\nExample\nStrings are also iterable objects, containing a sequence of characters:\nLooping Through an Iterator\nWe can also use a for loop to iterate through an iterable object:\nExample\nIterate the values of a tuple:\nExample\nIterate the characters of a string:\nThe for loop actually creates an iterator object and executes the next() method for each loop.\nREMOVE ADS\nCreate an Iterator\nTo create an object/class as an iterator you have to implement the methods __iter__() and __next__() to your object.\nAs you have learned in the Python Classes/Objects chapter, all classes have a function called __init__(), which allows you to do some initializing when the object is being created.\nThe __iter__() method acts similar, you can do operations (initializing etc.), but must always return the iterator object itself.\nThe __next__() method also allows you to do operations, and must return the next item in the sequence.\nExample\nCreate an iterator that returns numbers, starting with 1, and each sequence will increase by one (returning 1,2,3,4,5 etc.):\nStopIteration\nThe example above would continue forever if you had enough next() statements, or if it was used in a for loop.\nTo prevent the iteration from going on forever, we can use the StopIteration statement.\nIn the __next__() method, we can add a terminating condition to raise an error if the iteration is done a specified number of times:\nExample\nStop after 20 iterations:",
      "examples": [
        "mytuple = (\"apple\", \"banana\", \"cherry\")\nmyit = iter(mytuple)\n\nprint(next(myit))\nprint(next(myit))\nprint(next(myit))",
        "mystr = \"banana\"\nmyit = iter(mystr)\n\nprint(next(myit))\nprint(next(myit))\nprint(next(myit))\nprint(next(myit))\nprint(next(myit))\nprint(next(myit))",
        "mytuple = (\"apple\", \"banana\", \"cherry\")\n\nfor x in mytuple:\nprint(x)",
        "mystr = \"banana\"\n\nfor x in mystr:\nprint(x)",
        "class MyNumbers:\ndef __iter__(self):\nself.a = 1\nreturn self\n\ndef __next__(self):\nx = self.a\nself.a += 1\nreturn x\n\nmyclass = MyNumbers()\nmyiter = iter(myclass)\n\nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))",
        "class MyNumbers:\ndef __iter__(self):\nself.a = 1\nreturn self\n\ndef __next__(self):\nif self.a <= 20:\nx = self.a\nself.a += 1\nreturn x\nelse:\nraise StopIteration\n\nmyclass = MyNumbers()\nmyiter = iter(myclass)\n\nfor x in myiter:\nprint(x)",
        "__iter__()",
        "__next__()",
        "iter()",
        "for",
        "next()",
        "__init__()",
        "StopIteration"
      ]
    },
    {
      "title": "Python Polymorphism",
      "summary": "The word \"polymorphism\" means \"many forms\", and in programming it refers to methods/functions/operators with the same name that can be executed on many objects or classes.\nFunction Polymorphism\nAn example of a Python function that can be used on different objects is the len() function.\nString\nFor strings len() returns the number of characters:\nExampleGet your own Python Server\nTuple\nFor tuples len() returns the number of items in the tuple:\nExample\nDictionary\nFor dictionaries len() returns the number of key/value pairs in the dictionary:\nExample\nREMOVE ADS\nClass Polymorphism\nPolymorphism is often used in Class methods, where we can have multiple classes with the same method name.\nFor example, say we have three classes: Car, Boat, and Plane, and they all have a method called move():\nExample\nDifferent classes with the same method:\nLook at the for loop at the end. Because of polymorphism we can execute the same method for all three classes.\nInheritance Class Polymorphism\nWhat about classes with child classes with the same name? Can we use polymorphism there?\nYes. If we use the example above and make a parent class called Vehicle, and make Car, Boat, Plane child classes of Vehicle, the child classes inherits the Vehicle methods, but can override them:\nExample\nCreate a class called Vehicle and make Car, Boat, Plane child classes of Vehicle:\nChild classes inherits the properties and methods from the parent class.\nIn the example above you can see that the Car class is empty, but it inherits brand, model, and move() from Vehicle.\nThe Boat and Plane classes also inherit brand, model, and move() from Vehicle, but they both override the move() method.\nBecause of polymorphism we can execute the same method for all classes.",
      "examples": [
        "x = \"Hello World!\"\n\nprint(len(x))",
        "mytuple = (\"apple\", \"banana\", \"cherry\")\n\nprint(len(mytuple))",
        "thisdict = {\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\n\nprint(len(thisdict))",
        "class Car:\ndef __init__(self, brand, model):\nself.brand = brand\nself.model = model\n\ndef move(self):\nprint(\"Drive!\")\n\nclass Boat:\ndef __init__(self, brand, model):\nself.brand = brand\nself.model = model\n\ndef move(self):\nprint(\"Sail!\")\n\nclass Plane:\ndef __init__(self, brand, model):\nself.brand = brand\nself.model = model\n\ndef move(self):\nprint(\"Fly!\")\n\ncar1 = Car(\"Ford\", \"Mustang\")       #Create a Car object\nboat1 = Boat(\"Ibiza\", \"Touring 20\") #Create a Boat object\nplane1 = Plane(\"Boeing\", \"747\")     #Create a Plane object\n\nfor x in (car1, boat1, plane1):\nx.move()",
        "class Vehicle:\ndef __init__(self, brand, model):\nself.brand = brand\nself.model = model\n\ndef move(self):\nprint(\"Move!\")\n\nclass Car(Vehicle):\npass\n\nclass Boat(Vehicle):\ndef move(self):\nprint(\"Sail!\")\n\nclass Plane(Vehicle):\ndef move(self):\nprint(\"Fly!\")\n\ncar1 = Car(\"Ford\", \"Mustang\")       #Create a Car object\nboat1 = Boat(\"Ibiza\", \"Touring 20\") #Create a Boat object\nplane1 = Plane(\"Boeing\", \"747\")     #Create a Plane object\n\nfor x in (car1, boat1, plane1):\nprint(x.brand)\nprint(x.model)\nx.move()",
        "len()",
        "Car",
        "Boat",
        "Plane",
        "move()",
        "Vehicle",
        "brand",
        "model"
      ]
    },
    {
      "title": "Python Scope",
      "summary": "A variable is only available from inside the region it is created. This is called scope.\nLocal Scope\nA variable created inside a function belongs to the local scope of that function, and can only be used inside that function.\nExampleGet your own Python Server\nA variable created inside a function is available inside that function:\nFunction Inside Function\nAs explained in the example above, the variable x is not available outside the function, but it is available for any function inside the function:\nExample\nThe local variable can be accessed from a function within the function:\nREMOVE ADS\nGlobal Scope\nA variable created in the main body of the Python code is a global variable and belongs to the global scope.\nGlobal variables are available from within any scope, global and local.\nExample\nA variable created outside of a function is global and can be used by anyone:\nNaming Variables\nIf you operate with the same variable name inside and outside of a function, Python will treat them as two separate variables, one available in the global scope (outside the function) and one available in the local scope (inside the function):\nExample\nThe function will print the local x, and then the code will print the global x:\nGlobal Keyword\nIf you need to create a global variable, but are stuck in the local scope, you can use the global keyword.\nThe global keyword makes the variable global.\nExample\nIf you use the global keyword, the variable belongs to the global scope:\nAlso, use the global keyword if you want to make a change to a global variable inside a function.\nExample\nTo change the value of a global variable inside a function, refer to the variable by using the global keyword:\nNonlocal Keyword\nThe nonlocal keyword is used to work with variables inside nested functions.\nThe nonlocal keyword makes the variable belong to the outer function.\nExample\nIf you use the nonlocal keyword, the variable will belong to the outer function:",
      "examples": [
        "def myfunc():\nx = 300\nprint(x)\n\nmyfunc()",
        "def myfunc():\nx = 300\ndef myinnerfunc():\nprint(x)\nmyinnerfunc()\n\nmyfunc()",
        "x = 300\n\ndef myfunc():\nprint(x)\n\nmyfunc()\n\nprint(x)",
        "x = 300\n\ndef myfunc():\nx = 200\nprint(x)\n\nmyfunc()\n\nprint(x)",
        "def myfunc():\nglobal x\nx = 300\n\nmyfunc()\n\nprint(x)",
        "x = 300\n\ndef myfunc():\nglobal x\nx = 200\n\nmyfunc()\n\nprint(x)",
        "def myfunc1():\nx = \"Jane\"\ndef myfunc2():\nnonlocal x\nx = \"hello\"\nmyfunc2()\nreturn x\n\nprint(myfunc1())",
        "x",
        "global",
        "nonlocal"
      ]
    },
    {
      "title": "Python Modules",
      "summary": "What is a Module?\nConsider a module to be the same as a code library.\nA file containing a set of functions you want to include in your application.\nCreate a Module\nTo create a module just save the code you want in a file with the file extension .py:\nExampleGet your own Python Server\nSave this code in a file named mymodule.py\nUse a Module\nNow we can use the module we just created, by using the import statement:\nExample\nImport the module named mymodule, and call the greeting function:\nNote: When using a function from a module, use the syntax: module_name.function_name.\nVariables in Module\nThe module can contain functions, as already described, but also variables of all types (arrays, dictionaries, objects etc):\nExample\nSave this code in the file mymodule.py\nExample\nImport the module named mymodule, and access the person1 dictionary:\nREMOVE ADS\nNaming a Module\nYou can name the module file whatever you like, but it must have the file extension .py\nRe-naming a Module\nYou can create an alias when you import a module, by using the as keyword:\nExample\nCreate an alias for mymodule called mx:\nBuilt-in Modules\nThere are several built-in modules in Python, which you can import whenever you like.\nExample\nImport and use the platform module:\nUsing the dir() Function\nThere is a built-in function to list all the function names (or variable names) in a module. The dir() function:\nExample\nList all the defined names belonging to the platform module:\nNote: The dir() function can be used on all modules, also the ones you create yourself.\nImport From Module\nYou can choose to import only parts from a module, by using the from keyword.\nExample\nThe module named mymodule has one function and one dictionary:\nExample\nImport only the person1 dictionary from the module:\nNote: When importing using the from keyword, do not use the module name when referring to elements in the module. Example: person1[\"age\"], not\nmymodule.person1[\"age\"]",
      "examples": [
        "def greeting(name):\nprint(\"Hello, \" + name)",
        "import mymodule\n\nmymodule.greeting(\"Jonathan\")",
        "person1 = {\n\"name\": \"John\",\n\"age\": 36,\n\"country\": \"Norway\"\n}",
        "import mymodule\n\na = mymodule.person1[\"age\"]\nprint(a)",
        "import mymodule as mx\n\na = mx.person1[\"age\"]\nprint(a)",
        "import platform\n\nx = platform.system()\nprint(x)",
        "import platform\n\nx = dir(platform)\nprint(x)",
        "def greeting(name):\nprint(\"Hello, \" + name)\n\nperson1 = {\n\"name\": \"John\",\n\"age\": 36,\n\"country\": \"Norway\"\n}",
        "from mymodule import person1\n\nprint (person1[\"age\"])",
        ".py",
        "mymodule.py",
        "import",
        "as",
        "mymodule",
        "mx",
        "platform",
        "dir()",
        "from",
        "person1[\"age\"]",
        "mymodule.person1[\"age\"]"
      ]
    },
    {
      "title": "Python Datetime",
      "summary": "Python Dates\nA date in Python is not a data type of its own, but we can import a module named datetime to work with dates as date objects.\nExampleGet your own Python Server\nImport the datetime module and display the current date:\nDate Output\nWhen we execute the code from the example above the result will be:\nThe date contains year, month, day, hour, minute, second, and microsecond.\nThe datetime module has many methods to return information about the date object.\nHere are a few examples, you will learn more about them later in this chapter:\nExample\nReturn the year and name of weekday:\nCreating Date Objects\nTo create a date, we can use the datetime() class (constructor) of the datetime module.\nThe datetime() class requires three parameters to create a date: year, month, day.\nExample\nCreate a date object:\nThe datetime() class also takes parameters for time and timezone (hour, minute, second, microsecond, tzone), but they are optional, and has a default value of 0, (None for timezone).\nREMOVE ADS\nThe strftime() Method\nThe datetime object has a method for formatting date objects into readable strings.\nThe method is called strftime(), and takes one parameter, format, to specify the format of the returned string:\nExample\nDisplay the name of the month:\nA reference of all the legal format codes:",
      "examples": [
        "import datetime\n\nx = datetime.datetime.now()\nprint(x)",
        "import datetime\n\nx = datetime.datetime.now()\n\nprint(x.year)\nprint(x.strftime(\"%A\"))",
        "import datetime\n\nx = datetime.datetime(2020, 5, 17)\n\nprint(x)",
        "import datetime\n\nx = datetime.datetime(2018, 6, 1)\n\nprint(x.strftime(\"%B\"))",
        "datetime",
        "cc = \"2018/05/06 09:30:20\" var d = new Date(); var m = d.getMonth() + 1; if (m < 10) m = \"0\" + m var day = d.getDate(); if (day < 10) day = \"0\" + day; var h = d.getHours(); if (h < 10) h = \"0\" + h; var n = d.getMinutes(); if (n < 10) n = \"0\" + n; var s = d.getSeconds(); if (s < 10) s = \"0\" + s; var ms = d.getMilliseconds(); while (ms.toString().length < 3) { ms = \"0\" + ms; } var ex = Math.floor(Math.random() * 999); while (ex.toString().length < 3) { ex = \"0\" + ex; } var x = d.getFullYear() + \"-\" + m + \"-\" + day + \" \" + h + \":\" + n + \":\" + s + \".\" + ms + ex document.write(x); 2025-09-21 11:00:03.555155",
        "datetime()",
        "0",
        "None",
        "strftime()",
        "format"
      ]
    },
    {
      "title": "Python Math",
      "summary": "Python has a set of built-in math functions, including an extensive math module, that allows you to perform mathematical tasks on numbers.\nBuilt-in Math Functions\nThe min() and max() functions can be used to find the lowest or highest value in an iterable:\nExampleGet your own Python Server\nThe abs() function returns the absolute (positive) value of the specified number:\nExample\nThe pow(x, y) function returns the value of x to the power of y (xy).\nExample\nReturn the value of 4 to the power of 3 (same as 4 * 4 * 4):\nREMOVE ADS\nThe Math Module\nPython has also a built-in module called math, which extends the list of mathematical functions.\nTo use it, you must import the math module:\nWhen you have imported the math module, you can start using methods and constants of the module.\nThe math.sqrt() method for example, returns the square root of a number:\nExample\nThe math.ceil() method rounds a number upwards to its nearest integer, and the math.floor() method rounds a number downwards to its nearest integer, and returns the result:\nExample\nThe math.pi constant, returns the value of PI (3.14...):\nExample\nComplete Math Module Reference\nIn our Math Module Reference you will find a complete reference of all methods and constants that belongs to the Math module.",
      "examples": [
        "x = min(5, 10, 25)\ny = max(5, 10, 25)\n\nprint(x)\nprint(y)",
        "x = abs(-7.25)\n\nprint(x)",
        "x = pow(4, 3)\n\nprint(x)",
        "import math",
        "import math\n\nx = math.sqrt(64)\n\nprint(x)",
        "import math\n\nx = math.ceil(1.4)\ny = math.floor(1.4)\n\nprint(x) # returns 2\nprint(y) # returns 1",
        "import math\n\nx = math.pi\n\nprint(x)",
        "min()",
        "max()",
        "abs()",
        "pow(x, y)",
        "math",
        "math.sqrt()",
        "math.ceil()",
        "math.floor()",
        "math.pi"
      ]
    },
    {
      "title": "Python JSON",
      "summary": "JSON is a syntax for storing and exchanging data.\nJSON is text, written with JavaScript object notation.\nJSON in Python\nPython has a built-in package called json, which can be used to work with JSON data.\nExampleGet your own Python Server\nImport the json module:\nParse JSON - Convert from JSON to Python\nIf you have a JSON string, you can parse it by using the json.loads() method.\nThe result will be a Python dictionary.\nExample\nConvert from JSON to Python:\nConvert from Python to JSON\nIf you have a Python object, you can convert it into a JSON string by using the json.dumps() method.\nExample\nConvert from Python to JSON:\nREMOVE ADS\nYou can convert Python objects of the following types, into JSON strings:\ndict\nlist\ntuple\nstring\nint\nfloat\nTrue\nFalse\nNone\nExample\nConvert Python objects into JSON strings, and print the values:\nWhen you convert from Python to JSON, Python objects are converted into the JSON (JavaScript) equivalent:\nExample\nConvert a Python object containing all the legal data types:\nFormat the Result\nThe example above prints a JSON string, but it is not very easy to read, with no indentations and line breaks.\nThe json.dumps() method has parameters to make it easier to read the result:\nExample\nUse the indent parameter to define the numbers of indents:\nYou can also define the separators, default value is (\", \", \": \"), which means using a comma and a space to separate each object, and a colon and a space to separate keys from values:\nExample\nUse the separators parameter to change the default separator:\nOrder the Result\nThe json.dumps() method has parameters to order the keys in the result:\nExample\nUse the sort_keys parameter to specify if the result should be sorted or not:",
      "examples": [
        "import json",
        "import json\n\n# some JSON:\nx =  '{ \"name\":\"John\", \"age\":30, \"city\":\"New York\"}'\n\n# parse x:\ny = json.loads(x)\n\n# the result is a Python dictionary:\nprint(y[\"age\"])",
        "import json\n\n# a Python object (dict):\nx = {\n\"name\": \"John\",\n\"age\": 30,\n\"city\": \"New York\"\n}\n\n# convert into JSON:\ny = json.dumps(x)\n\n# the result is a JSON string:\nprint(y)",
        "import json\n\nprint(json.dumps({\"name\": \"John\", \"age\": 30}))\nprint(json.dumps([\"apple\", \"bananas\"]))\nprint(json.dumps((\"apple\", \"bananas\")))\nprint(json.dumps(\"hello\"))\nprint(json.dumps(42))\nprint(json.dumps(31.76))\nprint(json.dumps(True))\nprint(json.dumps(False))\nprint(json.dumps(None))",
        "import json\n\nx = {\n\"name\": \"John\",\n\"age\": 30,\n\"married\": True,\n\"divorced\": False,\n\"children\": (\"Ann\",\"Billy\"),\n\"pets\": None,\n\"cars\": [\n{\"model\": \"BMW 230\", \"mpg\": 27.5},\n{\"model\": \"Ford Edge\", \"mpg\": 24.1}\n]\n}\n\nprint(json.dumps(x))",
        "json.dumps(x, indent=4)",
        "json.dumps(x, indent=4, separators=(\". \", \" = \"))",
        "json.dumps(x, indent=4, sort_keys=True)",
        "json",
        "json.loads()",
        "json.dumps()",
        "indent",
        "separators",
        "sort_keys"
      ]
    },
    {
      "title": "Python RegEx",
      "summary": "A RegEx, or Regular Expression, is a sequence of characters that forms a search pattern.\nRegEx can be used to check if a string contains the specified search pattern.\nRegEx Module\nPython has a built-in package called re, which can be used to work with Regular Expressions.\nImport the re module:\nRegEx in Python\nWhen you have imported the re module, you can start using regular expressions:\nExampleGet your own Python Server\nSearch the string to see if it starts with \"The\" and ends with \"Spain\":\nRegEx Functions\nThe re module offers a set of functions that allows us to search a string for a match:\nREMOVE ADS\nMetacharacters\nMetacharacters are characters with a special meaning:\nFlags\nYou can add flags to the pattern when using regular expressions.\nSpecial Sequences\nA special sequence is a \\ followed by one of the characters in the list below, and has a special meaning:\nSets\nA set is a set of characters inside a pair of square brackets [] with a special meaning:\nThe findall() Function\nThe findall() function returns a list containing all matches.\nExample\nPrint a list of all matches:\nThe list contains the matches in the order they are found.\nIf no matches are found, an empty list is returned:\nExample\nReturn an empty list if no match was found:\nThe search() Function\nThe search() function searches the string for a match, and returns a Match object if there is a match.\nIf there is more than one match, only the first occurrence of the match will be returned:\nExample\nSearch for the first white-space character in the string:\nIf no matches are found, the value None is returned:\nExample\nMake a search that returns no match:\nThe split() Function\nThe split() function returns a list where the string has been split at each match:\nExample\nSplit at each white-space character:\nYou can control the number of occurrences by specifying the maxsplit parameter:\nExample\nSplit the string only at the first occurrence:\nThe sub() Function\nThe sub() function replaces the matches with the text of your choice:\nExample\nReplace every white-space character with the number 9:\nYou can control the number of replacements by specifying the count parameter:\nExample\nReplace the first 2 occurrences:\nMatch Object\nA Match Object is an object containing information about the search and the result.\nNote: If there is no match, the value None will be returned, instead of the Match Object.\nExample\nDo a search that will return a Match Object:\nThe Match object has properties and methods used to retrieve information about the search, and the result:\n.span() returns a tuple containing the start-, and end positions of the match.\n.string returns the string passed into the function\n.group() returns the part of the string where there was a match\nExample\nPrint the position (start- and end-position) of the first match occurrence.\nThe regular expression looks for any words that starts with an upper case \"S\":\nExample\nPrint the string passed into the function:\nExample\nPrint the part of the string where there was a match.\nThe regular expression looks for any words that starts with an upper case \"S\":\nNote: If there is no match, the value None will be returned, instead of the Match Object.",
      "examples": [
        "import re",
        "import re\n\ntxt = \"The rain in Spain\"\nx = re.search(\"^The.*Spain$\", txt)",
        "import re\n\ntxt = \"The rain in Spain\"\nx = re.findall(\"ai\", txt)\nprint(x)",
        "import re\n\ntxt = \"The rain in Spain\"\nx = re.findall(\"Portugal\", txt)\nprint(x)",
        "import re\n\ntxt = \"The rain in Spain\"\nx = re.search(\"\\s\", txt)\n\nprint(\"The first white-space character is located in position:\", x.start())",
        "import re\n\ntxt = \"The rain in Spain\"\nx = re.search(\"Portugal\", txt)\nprint(x)",
        "import re\n\ntxt = \"The rain in Spain\"\nx = re.split(\"\\s\", txt)\nprint(x)",
        "import re\n\ntxt = \"The rain in Spain\"\nx = re.split(\"\\s\", txt, 1)\nprint(x)",
        "import re\n\ntxt = \"The rain in Spain\"\nx = re.sub(\"\\s\", \"9\", txt)\nprint(x)",
        "import re\n\ntxt = \"The rain in Spain\"\nx = re.sub(\"\\s\", \"9\", txt, 2)\nprint(x)",
        "import re\n\ntxt = \"The rain in Spain\"\nx = re.search(\"ai\", txt)\nprint(x) #this will print an object",
        "import re\n\ntxt = \"The rain in Spain\"\nx = re.search(r\"\\bS\\w+\", txt)\nprint(x.span())",
        "import re\n\ntxt = \"The rain in Spain\"\nx = re.search(r\"\\bS\\w+\", txt)\nprint(x.string)",
        "import re\n\ntxt = \"The rain in Spain\"\nx = re.search(r\"\\bS\\w+\", txt)\nprint(x.group())",
        "re",
        "\\",
        "[]",
        "a",
        "r",
        "n",
        "0",
        "1",
        "2",
        "3",
        "9",
        "00",
        "59",
        "z",
        "+",
        "*",
        ".",
        "|",
        "()",
        "$",
        "{}",
        "[+]",
        "findall()",
        "search()",
        "None",
        "split()",
        "maxsplit",
        "sub()",
        "count",
        ".span()",
        ".string",
        ".group()"
      ]
    },
    {
      "title": "Python PIP",
      "summary": "What is PIP?\nPIP is a package manager for Python packages, or modules if you like.\nNote: If you have Python version 3.4 or later, PIP is included by default.\nWhat is a Package?\nA package contains all the files you need for a module.\nModules are Python code libraries you can include in your project.\nCheck if PIP is Installed\nNavigate your command line to the location of Python's script directory, and type the following:\nExampleGet your own Python Server\nCheck PIP version:\nInstall PIP\nIf you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/\nDownload a Package\nDownloading a package is very easy.\nOpen the command line interface and tell PIP to download the package you want.\nNavigate your command line to the location of Python's script directory, and type the following:\nExample\nDownload a package named \"camelcase\":\nNow you have downloaded and installed your first package!\nREMOVE ADS\nUsing a Package\nOnce the package is installed, it is ready to use.\nImport the \"camelcase\" package into your project.\nExample\nImport and use \"camelcase\":\nFind Packages\nFind more packages at https://pypi.org/.\nRemove a Package\nUse the uninstall command to remove a package:\nExample\nUninstall the package named \"camelcase\":\nThe PIP Package Manager will ask you to confirm that you want to remove the camelcase package:\nPress y and the package will be removed.\nList Packages\nUse the list command to list all the packages installed on your system:\nExample\nList installed packages:\nResult:",
      "examples": [
        "C:\\Users\\Your Name\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts>pip --version",
        "C:\\Users\\Your Name\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts>pip install camelcase",
        "import camelcase\n\nc = camelcase.CamelCase()\n\ntxt = \"hello world\"\n\nprint(c.hump(txt))",
        "C:\\Users\\Your Name\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts>pip uninstall camelcase",
        "Uninstalling camelcase-02.1:\nWould remove:\nc:\\users\\Your Name\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\camelcase-0.2-py3.6.egg-info\nc:\\users\\Your Name\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\camelcase\\*\nProceed (y/n)?",
        "C:\\Users\\Your Name\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts>pip list",
        "Package         Version\n-----------------------\ncamelcase       0.2\nmysql-connector 2.1.6\npip             18.1\npymongo         3.6.1\nsetuptools      39.0.1",
        "uninstall",
        "y",
        "list"
      ]
    },
    {
      "title": "Python Try Except",
      "summary": "The try block lets you test a block of code for errors.\nThe except block lets you handle the error.\nThe else block lets you execute code when there is no error.\nThe finally block lets you execute code, regardless of the result of the try- and except blocks.\nException Handling\nWhen an error occurs, or exception as we call it, Python will normally stop and generate an error message.\nThese exceptions can be handled using the try statement:\nExampleGet your own Python Server\nThe try block will generate an exception, because x is not defined:\nSince the try block raises an error, the except block will be executed.\nWithout the try block, the program will crash and raise an error:\nExample\nThis statement will raise an error, because x is not defined:\nMany Exceptions\nYou can define as many exception blocks as you want, e.g. if you want to execute a special block of code for a special kind of error:\nExample\nPrint one message if the try block raises a NameError and another for other errors:\nSee more Error types in our Python Built-in Exceptions Reference.\nREMOVE ADS\nElse\nYou can use the else keyword to define a block of code to be executed if no errors were raised:\nExample\nIn this example, the try block does not generate any error:\nFinally\nThe finally block, if specified, will be executed regardless if the try block raises an error or not.\nExample\nThis can be useful to close objects and clean up resources:\nExample\nTry to open and write to a file that is not writable:\nThe program can continue, without leaving the file object open.\nRaise an exception\nAs a Python developer you can choose to throw an exception if a condition occurs.\nTo throw (or raise) an exception, use the raise keyword.\nExample\nRaise an error and stop the program if x is lower than 0:\nThe raise keyword is used to raise an exception.\nYou can define what kind of error to raise, and the text to print to the user.\nExample\nRaise a TypeError if x is not an integer:",
      "examples": [
        "try:\nprint(x)\nexcept:\nprint(\"An exception occurred\")",
        "print(x)",
        "try:\nprint(x)\nexcept NameError:\nprint(\"Variable x is not defined\")\nexcept:\nprint(\"Something else went wrong\")",
        "try:\nprint(\"Hello\")\nexcept:\nprint(\"Something went wrong\")\nelse:\nprint(\"Nothing went wrong\")",
        "try:\nprint(x)\nexcept:\nprint(\"Something went wrong\")\nfinally:\nprint(\"The 'try except' is finished\")",
        "try:\nf = open(\"demofile.txt\")\ntry:\nf.write(\"Lorum Ipsum\")\nexcept:\nprint(\"Something went wrong when writing to the file\")\nfinally:\nf.close()\nexcept:\nprint(\"Something went wrong when opening the file\")",
        "x = -1\n\nif x < 0:\nraise Exception(\"Sorry, no numbers below zero\")",
        "x = \"hello\"\n\nif not type(x) is int:\nraise TypeError(\"Only integers are allowed\")",
        "try",
        "except",
        "else",
        "finally",
        "x",
        "NameError",
        "raise"
      ]
    },
    {
      "title": "Python String Formatting",
      "summary": "F-String was introduced in Python 3.6, and is now the preferred way of formatting strings.\nBefore Python 3.6 we had to use the format() method.\nF-Strings\nF-string allows you to format selected parts of a string.\nTo specify a string as an f-string, simply put an f in front of the string literal, like this:\nExampleGet your own Python Server\nCreate an f-string:\nPlaceholders and Modifiers\nTo format values in an f-string, add placeholders {}, a placeholder can contain variables, operations, functions, and modifiers to format the value.\nExample\nAdd a placeholder for the price variable:\nA placeholder can also include a modifier to format the value.\nA modifier is included by adding a colon : followed by a legal formatting type, like .2f which means fixed point number with 2 decimals:\nExample\nDisplay the price with 2 decimals:\nYou can also format a value directly without keeping it in a variable:\nExample\nDisplay the value 95 with 2 decimals:\nREMOVE ADS\nPerform Operations in F-Strings\nYou can perform Python operations inside the placeholders.\nYou can do math operations:\nExample\nPerform a math operation in the placeholder, and return the result:\nYou can perform math operations on variables:\nExample\nAdd taxes before displaying the price:\nYou can perform if...else statements inside the placeholders:\nExample\nReturn \"Expensive\" if the price is over 50, otherwise return \"Cheap\":\nExecute Functions in F-Strings\nYou can execute functions inside the placeholder:\nExample\nUse the string method upper()to convert a value into upper case letters:\nThe function does not have to be a built-in Python method, you can create your own functions and use them:\nExample\nCreate a function that converts feet into meters:\nMore Modifiers\nAt the beginning of this chapter we explained how to use the .2f modifier to format a number into a fixed point number with 2 decimals.\nThere are several other modifiers that can be used to format values:\nExample\nUse a comma as a thousand separator:\nHere is a list of all the formatting types.\nString format()\nBefore Python 3.6 we used the format() method to format strings.\nThe format() method can still be used, but f-strings are faster and the preferred way to format strings.\nThe next examples in this page demonstrates how to format strings with the format() method.\nThe format() method also uses curly brackets as placeholders {}, but the syntax is slightly different:\nExample\nAdd a placeholder where you want to display the price:\nYou can add parameters inside the curly brackets to specify how to convert the value:\nExample\nFormat the price to be displayed as a number with two decimals:\nCheck out all formatting types in our String format() Reference.\nMultiple Values\nIf you want to use more values, just add more values to the format() method:\nAnd add more placeholders:\nExample\nIndex Numbers\nYou can use index numbers (a number inside the curly brackets {0}) to be sure the values are placed in the correct placeholders:\nExample\nAlso, if you want to refer to the same value more than once, use the index number:\nExample\nNamed Indexes\nYou can also use named indexes by entering a name inside the curly brackets {carname}, but then you must use names when you pass the parameter values txt.format(carname = \"Ford\"):\nExample",
      "examples": [
        "txt = f\"The price is 49 dollars\"\nprint(txt)",
        "price = 59\ntxt = f\"The price is {price} dollars\"\nprint(txt)",
        "price = 59\ntxt = f\"The price is {price:.2f} dollars\"\nprint(txt)",
        "txt = f\"The price is {95:.2f} dollars\"\nprint(txt)",
        "txt = f\"The price is {20 * 59} dollars\"\nprint(txt)",
        "price = 59\ntax = 0.25\ntxt = f\"The price is {price + (price * tax)} dollars\"\nprint(txt)",
        "price = 49\ntxt = f\"It is very {'Expensive' if price>50 else 'Cheap'}\"\n\nprint(txt)",
        "fruit = \"apples\"\ntxt = f\"I love {fruit.upper()}\"\nprint(txt)",
        "def myconverter(x):\nreturn x * 0.3048\n\ntxt = f\"The plane is flying at a {myconverter(30000)} meter altitude\"\nprint(txt)",
        "price = 59000\ntxt = f\"The price is {price:,} dollars\"\nprint(txt)",
        "price = 49\ntxt = \"The price is {} dollars\"\nprint(txt.format(price))",
        "txt = \"The price is {:.2f} dollars\"",
        "print(txt.format(price, itemno, count))",
        "quantity = 3\nitemno = 567\nprice = 49\nmyorder = \"I want {} pieces of item number {} for {:.2f} dollars.\"\nprint(myorder.format(quantity, itemno, price))",
        "quantity = 3\nitemno = 567\nprice = 49\nmyorder = \"I want {0} pieces of item number {1} for {2:.2f} dollars.\"\nprint(myorder.format(quantity, itemno, price))",
        "age = 36\nname = \"John\"\ntxt = \"His name is {1}. {1} is {0} years old.\"\nprint(txt.format(age, name))",
        "myorder = \"I have a {carname}, it is a {model}.\"\nprint(myorder.format(carname = \"Ford\", model = \"Mustang\"))",
        "format()",
        "f",
        "{}",
        "price",
        ":",
        ".2f",
        "95",
        "if...else",
        "upper()",
        ":<",
        ":>",
        ":^",
        ":=",
        ":+",
        ":-",
        ":,",
        ":_",
        ":b",
        ":c",
        ":d",
        ":e",
        ":E",
        ":f",
        ":F",
        "inf",
        "nan",
        "INF",
        "NAN",
        ":g",
        ":G",
        ":o",
        ":x",
        ":X",
        ":n",
        ":%",
        "{0}",
        "{carname}",
        "txt.format(carname = \"Ford\")"
      ]
    },
    {
      "title": "Python User Input",
      "summary": "User Input\nPython allows for user input.\nThat means we are able to ask the user for input.\nThe following example asks for your name, and when you enter a name, it gets printed on the screen:\nExampleGet your own Python Server\nAsk for user input:\nPython stops executing when it comes to the input() function, and continues when the user has given some input.\nUsing prompt\nIn the example above, the user had to input their name on a new line. The Python input() function has a prompt parameter, which acts as a message you can put in front of the user input, on the same line:\nExample\nAdd a message in front of the user input:\nMultiple Inputs\nYou can add as many inputs as you want, Python will stop executing at each of them, waiting for user input:\nExample\nMultiple inputs:\nREMOVE ADS\nInput Number\nThe input from the user is treated as a string. Even if, in the example above, you can input a number, the Python interpreter will still treat it as a string.\nYou can convert the input into a number with the float() function:\nExample\nTo find the square root, the input has to be converted into a number:\nValidate Input\nIt is a good practice to validate any input from the user. In the example above, an error will occur if the user inputs something other than a number.\nTo avoid getting an error, we can test the input, and if it is not a number, the user could get a message like \"Wrong input, please try again\", and allowed to make a new input:\nExample\nKeep asking until you get a number:",
      "examples": [
        "print(\"Enter your name:\")\nname = input()\nprint(f\"Hello {name}\")",
        "name = input(\"Enter your name:\")\nprint(f\"Hello {name}\")",
        "name = input(\"Enter your name:\")\nprint(f\"Hello {name}\")\nfav1 = input(\"What is your favorite animal:\")\nfav2 = input(\"What is your favorite color:\")\nfav3 = input(\"What is your favorite number:\")\nprint(f\"Do you want a {fav2} {fav1} with {fav3} legs?\")",
        "x = input(\"Enter a number:\")\n\n#find the square root of the number:\ny = math.sqrt(float(x))\n\nprint(f\"The square root of {x} is {y}\")",
        "y = True\nwhile y == True:\nx = input(\"Enter a number:\")\ntry:\nx = float(x);\ny = False\nexcept:\nprint(\"Wrong input, please try again.\")\n\nprint(\"Thank you!\")",
        "input()",
        "prompt",
        "float()"
      ]
    },
    {
      "title": "Python Virtual Environment",
      "summary": "What is a Virtual Environment?\nA virtual environment in Python is an isolated environment on your computer, where you can run and test your Python projects.\nIt allows you to manage project-specific dependencies without interfering with other projects or the original Python installation.\nThink of a virtual environment as a separate container for each Python project. Each container:\nHas its own Python interpreter\nHas its own set of installed packages\nIs isolated from other virtual environments\nCan have different versions of the same package\nUsing virtual environments is important because:\nIt prevents package version conflicts between projects\nMakes projects more portable and reproducible\nKeeps your system Python installation clean\nAllows testing with different Python versions\nCreating a Virtual Environment\nPython has the built-in venv module for creating virtual environments.\nTo create a virtual environment on your computer, open the command prompt, and navigate to the folder where you want to create your project, then type this command:\nExampleGet your own Python Server\nRun this command to create a virtual environment named myfirstproject:\nThis will set up a virtual environment, and create a folder named \"myfirstproject\" with subfolders and files, like this:\nResult\nThe file/folder structure will look like this:\nActivate Virtual Environment\nTo use the virtual environment, you have to activate it with this command:\nExample\nActivate the virtual environment:\nAfter activation, your prompt will change to show that you are now working in the active environment:\nResult\nThe command line will look like this when the virtual environment is active:\nREMOVE ADS\nInstall Packages\nOnce your virtual environment is activated, you can install packages in it, using pip.\nWe will install a package called 'cowsay':\nExample\nInstall 'cowsay' in the virtual environment:\nResult\n'cowsay' is installed only in the virtual environment:\nUsing Package\nNow that the 'cowsay' module is installed in your virtual environment, lets use it to display a talking cow.\nCreate a file called test.py on your computer. You can place it wherever you want, but I will place it in the same location as the myfirstproject folder -not in the folder, but in the same location.\nOpen the file and insert these three lines in it:\nExample\nInsert two lines in test.py:\nThen, try to execute the file while you are in the virtual environment:\nExample\nExecute test.py in the virtual environment:\nAs a result a cow will appear in you terminal:\nResult\nThe purpose of the 'cowsay' module is to draw a cow that says whatever input you give it:\nDeactivate Virtual Environment\nTo deactivate the virtual environment use this command:\nExample\nDeactivate the virtual environment:\nAs a result, you are now back in the normal command line interface:\nResult\nNormal command line interface:\nIf you try to execute the test.py file outside of the virtual environment, you will get an error because 'cowsay' is missing. It was only installed in the virtual environment:\nExample\nExecute test.py outside of the virtual environment:\nResult\nError because 'cowsay' is missing:\nNote: The virtual environment myfirstproject still exists, it is just not activated. If you activate the virtual environment again, you can execute the test.py file, and the diagram will be displayed.\nDelete Virtual Environment\nAnother nice thing about working with a virtual environment is that when you, for some reason want to delete it, there are no other projects depend on it, and only the modules and files in the specified virtual environment are deleted.\nTo delete a virtual environment, you can simply delete its folder with all its content. Either directly in the file system, or use the command line interface like this:\nExample\nDelete myfirstproject from the command line interface:",
      "examples": [
        "_________________ | Good Mooooorning! | ================= \\ \\ ^__^ (oo)\\_______ (__)\\ )\\/\\ ||----w | || ||",
        "C:\\Users\\Your Name> python -m venv myfirstproject",
        "$ python -m venv myfirstproject",
        "myfirstproject\nInclude\nLib\nScripts\n.gitignore\npyvenv.cfg",
        "C:\\Users\\Your Name> myfirstproject\\Scripts\\activate",
        "$ source myfirstproject/bin/activate",
        "(myfirstproject) C:\\Users\\Your Name>",
        "(myfirstproject) ... $",
        "(myfirstproject) C:\\Users\\Your Name> pip install cowsay",
        "(myfirstproject) ... $ pip install cowsay",
        "Collecting cowsay\nDownloading cowsay-6.1-py3-none-any.whl.metadata (5.6 kB)\nDownloading cowsay-6.1-py3-none-any.whl (25 kB)\nInstalling collected packages: cowsay\nSuccessfully installed cowsay-6.1\n\n[notice] A new release of pip is available: 25.0.1 -> 25.1.1\n[notice] To update, run: python.exe -m pip install --upgrade pip",
        "import cowsay\n\ncowsay.cow(\"Good Mooooorning!\")",
        "(myfirstproject) C:\\Users\\Your Name> python test.py",
        "(myfirstproject) ... $ python test.py",
        "(myfirstproject) C:\\Users\\Your Name> deactivate",
        "(myfirstproject) ... $ deactivate",
        "C:\\Users\\Your Name>",
        "$",
        "C:\\Users\\Your Name> python test.py",
        "$ python test.py",
        "Traceback (most recent call last):\nFile \"C:\\Users\\Your Name\\test.py\", line 1, in <module>\nimport cowsay\nModuleNotFoundError: No module named 'cowsay'",
        "C:\\Users\\Your Name> rmdir /s /q myfirstproject",
        "$ rm -rf myfirstproject",
        "venv",
        "myfirstproject",
        "pip",
        "test.py"
      ]
    },
    {
      "title": "Python File Open",
      "summary": "File handling is an important part of any web application.\nPython has several functions for creating, reading, updating, and deleting files.\nFile Handling\nThe key function for working with files in Python is the open() function.\nThe open() function takes two parameters; filename, and mode.\nThere are four different methods (modes) for opening a file:\n\"r\" - Read - Default value. Opens a file for reading, error if the file does not exist\n\"a\" - Append - Opens a file for appending, creates the file if it does not exist\n\"w\" - Write - Opens a file for writing, creates the file if it does not exist\n\"x\" - Create - Creates the specified file, returns an error if the file exists\nIn addition you can specify if the file should be handled as binary or text mode\n\"t\" - Text - Default value. Text mode\n\"b\" - Binary - Binary mode (e.g. images)\nSyntax\nTo open a file for reading it is enough to specify the name of the file:\nThe code above is the same as:\nBecause \"r\" for read, and \"t\" for text are the default values, you do not need to specify them.\nNote: Make sure the file exists, or else you will get an error.",
      "examples": [
        "f = open(\"demofile.txt\")",
        "f = open(\"demofile.txt\", \"rt\")",
        "open()",
        "\"r\"",
        "\"a\"",
        "\"w\"",
        "\"x\"",
        "\"t\"",
        "\"b\""
      ]
    },
    {
      "title": "Python File Open",
      "summary": "Open a File on the Server\nAssume we have the following file, located in the same folder as Python:\ndemofile.txt\nTo open the file, use the built-in open() function.\nThe open() function returns a file object, which has a read() method for reading the content of the file:\nExampleGet your own Python Server\nIf the file is located in a different location, you will have to specify the file path, like this:\nExample\nOpen a file on a different location:\nUsing the with statement\nYou can also use the with statement when opening a file:\nExample\nUsing the with keyword:\nThen you do not have to worry about closing your files, the with statement takes care of that.\nClose Files\nIt is a good practice to always close the file when you are done with it.\nIf you are not using the with statement, you must write a close statement in order to close the file:\nExample\nClose the file when you are finished with it:\nNote: You should always close your files. In some cases, due to buffering, changes made to a file may not show until you close the file.\nRead Only Parts of the File\nBy default the read() method returns the whole text, but you can also specify how many characters you want to return:\nExample\nReturn the 5 first characters of the file:\nREMOVE ADS\nRead Lines\nYou can return one line by using the readline() method:\nExample\nRead one line of the file:\nBy calling readline() two times, you can read the two first lines:\nExample\nRead two lines of the file:\nBy looping through the lines of the file, you can read the whole file, line by line:\nExample\nLoop through the file line by line:",
      "examples": [
        "Hello! Welcome to demofile.txt\nThis file is for testing purposes.\nGood Luck!",
        "f = open(\"demofile.txt\")\nprint(f.read())",
        "f = open(\"D:\\\\myfiles\\welcome.txt\")\nprint(f.read())",
        "with open(\"demofile.txt\") as f:\nprint(f.read())",
        "f = open(\"demofile.txt\")\nprint(f.readline())\nf.close()",
        "with open(\"demofile.txt\") as f:\nprint(f.read(5))",
        "with open(\"demofile.txt\") as f:\nprint(f.readline())",
        "with open(\"demofile.txt\") as f:\nprint(f.readline())\nprint(f.readline())",
        "with open(\"demofile.txt\") as f:\nfor x in f:\nprint(x)",
        "open()",
        "read()",
        "with",
        "readline()"
      ]
    },
    {
      "title": "Python File Write",
      "summary": "Write to an Existing File\nTo write to an existing file, you must add a parameter to the open() function:\n\"a\" - Append - will append to the end of the file\n\"w\" - Write - will overwrite any existing content\nExampleGet your own Python Server\nOpen the file \"demofile.txt\" and append content to the file:\nOverwrite Existing Content\nTo overwrite the existing content to the file, use the w parameter:\nExample\nOpen the file \"demofile.txt\" and overwrite the content:\nNote: the \"w\" method will overwrite the entire file.\nCreate a New File\nTo create a new file in Python, use the open() method, with one of the following parameters:\n\"x\" - Create - will create a file, returns an error if the file exists\n\"a\" - Append - will create a file if the specified file does not exists\n\"w\" - Write - will create a file if the specified file does not exists\nExample\nCreate a new file called \"myfile.txt\":\nResult: a new empty file is created.\nNote: If the file already exist, an error will be raised.",
      "examples": [
        "with open(\"demofile.txt\", \"a\") as f:\nf.write(\"Now the file has more content!\")\n\n#open and read the file after the appending:\nwith open(\"demofile.txt\") as f:\nprint(f.read())",
        "with open(\"demofile.txt\", \"w\") as f:\nf.write(\"Woops! I have deleted the content!\")\n\n#open and read the file after the overwriting:\nwith open(\"demofile.txt\") as f:\nprint(f.read())",
        "f = open(\"myfile.txt\", \"x\")",
        "open()",
        "\"a\"",
        "\"w\"",
        "w",
        "\"x\""
      ]
    },
    {
      "title": "Python Delete File",
      "summary": "Delete a File\nTo delete a file, you must import the OS module, and run its os.remove() function:\nExampleGet your own Python Server\nRemove the file \"demofile.txt\":\nCheck if File exist:\nTo avoid getting an error, you might want to check if the file exists before you try to delete it:\nExample\nCheck if file exists, then delete it:\nDelete Folder\nTo delete an entire folder, use the os.rmdir() method:\nExample\nRemove the folder \"myfolder\":\nNote: You can only remove empty folders.",
      "examples": [
        "import os\nos.remove(\"demofile.txt\")",
        "import os\nif os.path.exists(\"demofile.txt\"):\nos.remove(\"demofile.txt\")\nelse:\nprint(\"The file does not exist\")",
        "import os\nos.rmdir(\"myfolder\")",
        "os.remove()",
        "os.rmdir()"
      ]
    },
    {
      "title": "NumPy Tutorial",
      "summary": "Learn NumPy\nNumPy is a Python library.\nNumPy is used for working with arrays.\nNumPy is short for \"Numerical Python\".\nLearning by Reading\nWe have created 43 tutorial pages for you to learn more about NumPy.\nStarting with a basic introduction and ends up with creating and plotting random data sets, and working with NumPy functions:\nBasic\nRandom\nufunc\nREMOVE ADS\nLearning by Examples\nIn our \"Try it Yourself\" editor, you can use the NumPy module, and modify the code to see the result.\nExampleGet your own Python Server\nCreate a NumPy array:\nClick on the \"Try it Yourself\" button to see how it works.\nLearning by Exercises\nMany chapters in this tutorial end with an exercise where you can check your level of knowledge.\nSee all NumPy Exercises\nLearning by Quiz Test\nTest your NumPy skills with a quiz test.\nStart NumPy Quiz",
      "examples": [
        "import numpy as np\n\narr = np.array([1, 2, 3, 4, 5])\n\nprint(arr)\n\nprint(type(arr))"
      ]
    },
    {
      "title": "Pandas Tutorial",
      "summary": "Learn Pandas\nPandas is a Python library.\nPandas is used to analyze data.\nLearning by Reading\nWe have created 14 tutorial pages for you to learn more about Pandas.\nStarting with a basic introduction and ends up with cleaning and plotting data:\nBasic\nCleaning Data\nAdvanced\nLearning by Examples\nIn our \"Try it Yourself\" editor, you can use the Pandas module, and modify the code to see the result.\nExampleGet your own Python Server\nLoad a CSV file into a Pandas DataFrame:\nClick on the \"Try it Yourself\" button to see how it works.\nLearning by Exercises\nMost chapters in this tutorial end with an exercise where you can check your level of knowledge.\nSee all Pandas Exercises\nLearning by Quiz Test\nTest your Pandas skills with a quiz test.\nStart Pandas Quiz",
      "examples": [
        "import pandas as pd\n\ndf = pd.read_csv('data.csv')\n\nprint(df.to_string())"
      ]
    },
    {
      "title": "SciPy Tutorial",
      "summary": "Learn SciPy\nSciPy is a scientific computation library that uses NumPy underneath.\nSciPy stands for Scientific Python.\nLearning by Reading\nWe have created 10 tutorial pages for you to learn the fundamentals of SciPy:\nBasic SciPy\nLearning by Examples\nIn our \"Try it Yourself\" editor, you can use the SciPy module, and modify the code to see the result.\nExampleGet your own Python Server\nHow many cubic meters are in one liter:\nClick on the \"Try it Yourself\" button to see how it works.\nLearning by Exercises\nMany chapters in this tutorial end with an exercise where you can check your level of knowledge.\nSee all SciPy Exercises\nLearning by Quiz Test\nTest your SciPy skills with a quiz test.\nStart SciPy Quiz",
      "examples": [
        "from scipy import constants\n\nprint(constants.liter)"
      ]
    },
    {
      "title": "Django Tutorial",
      "summary": "Learn Django\nDjango is a back-end server side web framework.\nDjango is free, open source and written in Python.\nDjango makes it easier to build web pages using Python.\nLearning by Doing\nIn this tutorial you get a step by step guide on how to install and create a Django project. You will learn how to create a project where you can add, read, update or delete data.\nYou will learn how to make HTML Templates and use Django Template Tags to insert data within a HTML document.\nYou will learn how to work with QuerySets to extract, filter, and sort data from the database.\nYou will also learn how to set up a PostgreSQL database and how to deploy your Django project to the world.\nDjango\nDisplay\nAdmin\nSyntax\nQuerySets\nStatic Files\nPostgreSQL\nDeploy\nLearning by Examples\nIn the tutorial we will use examples to better explain the various concepts.\nExampleGet your own Django Server\nLearning by Exercises\nMany chapters in this tutorial end with an exercise where you can check your level of knowledge.\nSee all Django Exercises\nDjango Quiz\nLearn by taking a quiz! The quiz will give you a signal of how much you know about Django.\nStart Django Quiz\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\nLearning by References\nYou will also find references over the most common Django features:",
      "examples": [
        "<ul> {% for x in mymembers %} <li>{{ x.firstname }}</li> {% endfor %} </ul>"
      ]
    },
    {
      "title": "Matplotlib Tutorial",
      "summary": "What is Matplotlib?\nMatplotlib is a low level graph plotting library in python that serves as a visualization utility.\nMatplotlib was created by John D. Hunter.\nMatplotlib is open source and we can use it freely.\nMatplotlib is mostly written in python, a few segments are written in C, Objective-C and Javascript for Platform compatibility.\nWhere is the Matplotlib Codebase?\nThe source code for Matplotlib is located at this github repository https://github.com/matplotlib/matplotlib",
      "examples": []
    },
    {
      "title": "Matplotlib Getting Started",
      "summary": "Installation of Matplotlib\nIf you have Python and PIP already installed on a system, then installation of Matplotlib is very easy.\nInstall it using this command:\nIf this command fails, then use a python distribution that already has Matplotlib installed,  like Anaconda, Spyder etc.\nImport Matplotlib\nOnce Matplotlib is installed, import it in your applications by adding the import module statement:\nNow Matplotlib is imported and ready to use:\nChecking Matplotlib Version\nThe version string is stored under __version__ attribute.\nExampleGet your own Python Server\nNote: two underscore characters are used in __version__.",
      "examples": [
        "C:\\Users\\Your Name>pip install matplotlib",
        "import matplotlib",
        "import matplotlib\n\nprint(matplotlib.__version__)",
        "import module",
        "__version__"
      ]
    },
    {
      "title": "Matplotlib Pyplot",
      "summary": "Pyplot\nMost of the Matplotlib utilities lies under the pyplot submodule, and are usually imported under the plt alias:\nNow the Pyplot package can be referred to as plt.\nExampleGet your own Python Server\nDraw a line in a diagram from position (0,0) to position (6,250):\nResult:\nYou will learn more about drawing (plotting) in the next chapters.",
      "examples": [
        "import matplotlib.pyplot as plt",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\nxpoints = np.array([0, 6])\nypoints = np.array([0, 250])\n\nplt.plot(xpoints, ypoints)\nplt.show()",
        "pyplot",
        "plt"
      ]
    },
    {
      "title": "Matplotlib Plotting",
      "summary": "Plotting x and y points\nThe plot() function is used to draw points (markers) in a diagram.\nBy default, the plot() function draws a line from point to point.\nThe function takes parameters for specifying points in the diagram.\nParameter 1 is an array containing the points on the x-axis.\nParameter 2 is an array containing the points on the y-axis.\nIf we need to plot a line from (1, 3) to (8, 10), we have to pass two arrays [1, 8] and [3, 10] to the plot function.\nExampleGet your own Python Server\nDraw a line in a diagram from position (1, 3) to position (8, 10):\nResult:\nThe x-axis is the horizontal axis.\nThe y-axis is the vertical axis.\nREMOVE ADS\nPlotting Without Line\nTo plot only the markers, you can use shortcut string notation parameter 'o', which means 'rings'.\nExample\nDraw two points in the diagram, one at position (1, 3) and one in position (8, 10):\nResult:\nYou will learn more about markers in the next chapter.\nMultiple Points\nYou can plot as many points as you like, just make sure you have the same number of points in both axis.\nExample\nDraw a line in a diagram from position (1, 3) to (2, 8) then to (6, 1) and finally to position (8, 10):\nResult:\nDefault X-Points\nIf we do not specify the points on the x-axis, they will get the default values 0, 1, 2, 3 etc., depending on the length of the y-points.\nSo, if we take the same example as above, and leave out the x-points, the diagram will look like this:\nExample\nPlotting without x-points:\nResult:\nThe x-points in the example above are [0, 1, 2, 3, 4, 5].",
      "examples": [
        "import matplotlib.pyplot as plt\nimport numpy as np\n\nxpoints = np.array([1, 8])\nypoints = np.array([3, 10])\n\nplt.plot(xpoints, ypoints)\nplt.show()",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\nxpoints = np.array([1, 8])\nypoints = np.array([3, 10])\n\nplt.plot(xpoints, ypoints, 'o')\nplt.show()",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\nxpoints = np.array([1, 2, 6, 8])\nypoints = np.array([3, 8, 1, 10])\n\nplt.plot(xpoints, ypoints)\nplt.show()",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\nypoints = np.array([3, 8, 1, 10, 5, 7])\n\nplt.plot(ypoints)\nplt.show()",
        "plot()"
      ]
    },
    {
      "title": "Matplotlib Markers",
      "summary": "Markers\nYou can use the keyword argument marker to emphasize each point with a specified marker:\nExampleGet your own Python Server\nMark each point with a circle:\nResult:\nExample\nMark each point with a star:\nResult:\nREMOVE ADS\nMarker Reference\nYou can choose any of these markers:\nFormat Strings fmt\nYou can also use the shortcut string notation parameter to specify the marker.\nThis parameter is also called fmt, and is written with this syntax:\nExample\nMark each point with a circle:\nResult:\nThe marker value can be anything from the Marker Reference above.\nThe line value can be one of the following:\nLine Reference\nNote: If you leave out the line value in the fmt parameter, no line will be plotted.\nThe short color value can be one of the following:\nColor Reference\nMarker Size\nYou can use the keyword argument markersize or the shorter version, ms to set the size of the markers:\nExample\nSet the size of the markers to 20:\nResult:\nMarker Color\nYou can use the keyword argument markeredgecolor or the shorter mec to set the color of the edge of the markers:\nExample\nSet the EDGE color to red:\nResult:\nYou can use the keyword argument markerfacecolor or the shorter mfc to set the color inside the edge of the markers:\nExample\nSet the FACE color to red:\nResult:\nUse both the mec and mfc arguments to color the entire marker:\nExample\nSet the color of both the edge and the face to red:\nResult:\nYou can also use Hexadecimal color values:\nExample\nMark each point with a beautiful green color:\nResult:\nOr any of the 140 supported color names.\nExample\nMark each point with the color named \"hotpink\":\nResult:",
      "examples": [
        "import matplotlib.pyplot as plt\nimport numpy as np\n\nypoints = np.array([3, 8, 1, 10])\n\nplt.plot(ypoints, marker = 'o')\nplt.show()",
        "...\nplt.plot(ypoints, marker = '*')\n...",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\nypoints = np.array([3, 8, 1, 10])\n\nplt.plot(ypoints, 'o:r')\nplt.show()",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\nypoints = np.array([3, 8, 1, 10])\n\nplt.plot(ypoints, marker = 'o', ms = 20)\nplt.show()",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\nypoints = np.array([3, 8, 1, 10])\n\nplt.plot(ypoints, marker = 'o', ms = 20, mec = 'r')\nplt.show()",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\nypoints = np.array([3, 8, 1, 10])\n\nplt.plot(ypoints, marker = 'o', ms = 20, mec = 'r', mfc = 'r')\nplt.show()",
        "...\nplt.plot(ypoints, marker = 'o', ms = 20, mec = '#4CAF50', mfc = '#4CAF50')\n...",
        "...\nplt.plot(ypoints, marker = 'o', ms = 20, mec = 'hotpink', mfc = 'hotpink')\n...",
        "marker",
        "fmt",
        "marker|line|color",
        "markersize",
        "ms",
        "markeredgecolor",
        "mec",
        "markerfacecolor",
        "mfc"
      ]
    },
    {
      "title": "Matplotlib Line",
      "summary": "Linestyle\nYou can use the keyword argument linestyle, or shorter ls, to change the style of the plotted line:\nExampleGet your own Python Server\nUse a dotted line:\nResult:\nExample\nUse a dashed line:\nResult:\nREMOVE ADS\nShorter Syntax\nThe line style can be written in a shorter syntax:\nlinestyle can be written as ls.\ndotted can be written as :.\ndashed can be written as --.\nExample\nShorter syntax:\nResult:\nLine Styles\nYou can choose any of these styles:\nLine Color\nYou can use the keyword argument color or the shorter c to set the color of the line:\nExample\nSet the line color to red:\nResult:\nYou can also use Hexadecimal color values:\nExample\nPlot with a beautiful green line:\nResult:\nOr any of the 140 supported color names.\nExample\nPlot with the color named \"hotpink\":\nResult:\nLine Width\nYou can use the keyword argument linewidth or the shorter lw to change the width of the line.\nThe value is a floating number, in points:\nExample\nPlot with a 20.5pt wide line:\nResult:\nMultiple Lines\nYou can plot as many lines as you like by simply adding more plt.plot() functions:\nExample\nDraw two lines by specifying a plt.plot() function for each line:\nResult:\nYou can also plot many lines by adding the points for the x- and y-axis for each line in the same plt.plot() function.\n(In the examples above we only specified the points on the y-axis, meaning that the points on the x-axis got the the default values (0, 1, 2, 3).)\nThe x- and y- values come in pairs:\nExample\nDraw two lines by specifiyng the x- and y-point values for both lines:\nResult:",
      "examples": [
        "import matplotlib.pyplot as plt\nimport numpy as np\n\nypoints = np.array([3, 8, 1, 10])\n\nplt.plot(ypoints, linestyle = 'dotted')\nplt.show()",
        "plt.plot(ypoints, linestyle = 'dashed')",
        "plt.plot(ypoints, ls = ':')",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\nypoints = np.array([3, 8, 1, 10])\n\nplt.plot(ypoints, color = 'r')\nplt.show()",
        "...\nplt.plot(ypoints, c = '#4CAF50')\n...",
        "...\nplt.plot(ypoints, c = 'hotpink')\n...",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\nypoints = np.array([3, 8, 1, 10])\n\nplt.plot(ypoints, linewidth = '20.5')\nplt.show()",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\ny1 = np.array([3, 8, 1, 10])\ny2 = np.array([6, 2, 7, 11])\n\nplt.plot(y1)\nplt.plot(y2)\n\nplt.show()",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\nx1 = np.array([0, 1, 2, 3])\ny1 = np.array([3, 8, 1, 10])\nx2 = np.array([0, 1, 2, 3])\ny2 = np.array([6, 2, 7, 11])\n\nplt.plot(x1, y1, x2, y2)\nplt.show()",
        "linestyle",
        "ls",
        "dotted",
        ":",
        "dashed",
        "--",
        "color",
        "c",
        "linewidth",
        "lw",
        "plt.plot()"
      ]
    },
    {
      "title": "Matplotlib Labels and Title",
      "summary": "Create Labels for a Plot\nWith Pyplot, you can use the xlabel() and ylabel() functions to set a label for the x- and y-axis.\nExampleGet your own Python Server\nAdd labels to the x- and y-axis:\nResult:\nCreate a Title for a Plot\nWith Pyplot, you can use the title() function to set a title for the plot.\nExample\nAdd a plot title and labels for the x- and y-axis:\nResult:\nREMOVE ADS\nSet Font Properties for Title and Labels\nYou can use the fontdict parameter in xlabel(), ylabel(), and title() to set font properties for the title and labels.\nExample\nSet font properties for the title and labels:\nResult:\nPosition the Title\nYou can use the loc parameter in title() to position the title.\nLegal values are: 'left', 'right', and 'center'. Default value is 'center'.\nExample\nPosition the title to the left:\nResult:",
      "examples": [
        "import numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])\ny = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])\n\nplt.plot(x, y)\n\nplt.xlabel(\"Average Pulse\")\nplt.ylabel(\"Calorie Burnage\")\n\nplt.show()",
        "import numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])\ny = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])\n\nplt.plot(x, y)\n\nplt.title(\"Sports Watch Data\")\nplt.xlabel(\"Average Pulse\")\nplt.ylabel(\"Calorie Burnage\")\n\nplt.show()",
        "import numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])\ny = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])\n\nfont1 = {'family':'serif','color':'blue','size':20}\nfont2 = {'family':'serif','color':'darkred','size':15}\n\nplt.title(\"Sports Watch Data\", fontdict = font1)\nplt.xlabel(\"Average Pulse\", fontdict = font2)\nplt.ylabel(\"Calorie Burnage\", fontdict = font2)\n\nplt.plot(x, y)\nplt.show()",
        "import numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])\ny = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])\n\nplt.title(\"Sports Watch Data\", loc = 'left')\nplt.xlabel(\"Average Pulse\")\nplt.ylabel(\"Calorie Burnage\")\n\nplt.plot(x, y)\nplt.show()",
        "xlabel()",
        "ylabel()",
        "title()",
        "fontdict",
        "loc"
      ]
    },
    {
      "title": "Matplotlib Adding Grid Lines",
      "summary": "Add Grid Lines to a Plot\nWith Pyplot, you can use the grid() function to add grid lines to the plot.\nExampleGet your own Python Server\nAdd grid lines to the plot:\nResult:\nREMOVE ADS\nSpecify Which Grid Lines to Display\nYou can use the axis parameter in the grid() function to specify which grid lines to display.\nLegal values are: 'x', 'y', and 'both'. Default value is 'both'.\nExample\nDisplay only grid lines for the x-axis:\nResult:\nExample\nDisplay only grid lines for the y-axis:\nResult:\nSet Line Properties for the Grid\nYou can also set the line properties of the grid, like this: grid(color = 'color', linestyle = 'linestyle', linewidth = number).\nExample\nSet the line properties of the grid:\nResult:",
      "examples": [
        "import numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])\ny = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])\n\nplt.title(\"Sports Watch Data\")\nplt.xlabel(\"Average Pulse\")\nplt.ylabel(\"Calorie Burnage\")\n\nplt.plot(x, y)\n\nplt.grid()\n\nplt.show()",
        "import numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])\ny = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])\n\nplt.title(\"Sports Watch Data\")\nplt.xlabel(\"Average Pulse\")\nplt.ylabel(\"Calorie Burnage\")\n\nplt.plot(x, y)\n\nplt.grid(axis = 'x')\n\nplt.show()",
        "import numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])\ny = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])\n\nplt.title(\"Sports Watch Data\")\nplt.xlabel(\"Average Pulse\")\nplt.ylabel(\"Calorie Burnage\")\n\nplt.plot(x, y)\n\nplt.grid(color = 'green', linestyle = '--', linewidth = 0.5)\n\nplt.show()",
        "grid()",
        "axis"
      ]
    },
    {
      "title": "Matplotlib Subplot",
      "summary": "Display Multiple Plots\nWith the subplot() function you can draw multiple plots in one figure:\nExampleGet your own Python Server\nDraw 2 plots:\nResult:\nThe subplot() Function\nThe subplot() function takes three arguments that describes the layout of the figure.\nThe layout is organized in rows and columns, which are represented by the first and second argument.\nThe third argument represents the index of the current plot.\nSo, if we want a figure with 2 rows an 1 column (meaning that the two plots will be displayed on top of each other instead of side-by-side), we can write the syntax like this:\nExample\nDraw 2 plots on top of each other:\nResult:\nYou can draw as many plots you like on one figure, just descibe the number of rows, columns, and the index of the plot.\nExample\nDraw 6 plots:\nResult:\nREMOVE ADS\nTitle\nYou can add a title to each plot with the title() function:\nExample\n2 plots, with titles:\nResult:\nSuper Title\nYou can add a title to the entire figure with the suptitle() function:\nExample\nAdd a title for the entire figure:\nResult:",
      "examples": [
        "import matplotlib.pyplot as plt\nimport numpy as np\n\n#plot 1:\nx = np.array([0, 1, 2, 3])\ny = np.array([3, 8, 1, 10])\n\nplt.subplot(1, 2, 1)\nplt.plot(x,y)\n\n#plot 2:\nx = np.array([0, 1, 2, 3])\ny = np.array([10, 20, 30, 40])\n\nplt.subplot(1, 2, 2)\nplt.plot(x,y)\n\nplt.show()",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([0, 1, 2, 3])\ny = np.array([3, 8, 1, 10])\n\nplt.subplot(2, 3, 1)\nplt.plot(x,y)\n\nx = np.array([0, 1, 2, 3])\ny = np.array([10, 20, 30, 40])\n\nplt.subplot(2, 3, 2)\nplt.plot(x,y)\n\nx = np.array([0, 1, 2, 3])\ny = np.array([3, 8, 1, 10])\n\nplt.subplot(2, 3, 3)\nplt.plot(x,y)\n\nx = np.array([0, 1, 2, 3])\ny = np.array([10, 20, 30, 40])\n\nplt.subplot(2, 3, 4)\nplt.plot(x,y)\n\nx = np.array([0, 1, 2, 3])\ny = np.array([3, 8, 1, 10])\n\nplt.subplot(2, 3, 5)\nplt.plot(x,y)\n\nx = np.array([0, 1, 2, 3])\ny = np.array([10, 20, 30, 40])\n\nplt.subplot(2, 3, 6)\nplt.plot(x,y)\n\nplt.show()",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\n#plot 1:\nx = np.array([0, 1, 2, 3])\ny = np.array([3, 8, 1, 10])\n\nplt.subplot(1, 2, 1)\nplt.plot(x,y)\nplt.title(\"SALES\")\n\n#plot 2:\nx = np.array([0, 1, 2, 3])\ny = np.array([10, 20, 30, 40])\n\nplt.subplot(1, 2, 2)\nplt.plot(x,y)\nplt.title(\"INCOME\")\n\nplt.show()",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\n#plot 1:\nx = np.array([0, 1, 2, 3])\ny = np.array([3, 8, 1, 10])\n\nplt.subplot(1, 2, 1)\nplt.plot(x,y)\nplt.title(\"SALES\")\n\n#plot 2:\nx = np.array([0, 1, 2, 3])\ny = np.array([10, 20, 30, 40])\n\nplt.subplot(1, 2, 2)\nplt.plot(x,y)\nplt.title(\"INCOME\")\n\nplt.suptitle(\"MY SHOP\")\nplt.show()",
        "subplot()",
        "title()",
        "suptitle()"
      ]
    },
    {
      "title": "Matplotlib Scatter",
      "summary": "Creating Scatter Plots\nWith Pyplot, you can use the scatter() function to draw a scatter plot.\nThe scatter() function plots one dot for each observation. It needs two arrays of the same length, one for the values of the x-axis, and one for values on the y-axis:\nExampleGet your own Python Server\nA simple scatter plot:\nResult:\nThe observation in the example above is the result of 13 cars passing by.\nThe X-axis shows how old the car is.\nThe Y-axis shows the speed of the car when it passes.\nAre there any relationships between the observations?\nIt seems that the newer the car, the faster it drives, but that could be a coincidence, after all we only registered 13 cars.\nCompare Plots\nIn the example above, there seems to be a relationship between speed and age, but what if we plot the observations from another day as well? Will the scatter plot tell us something else?\nExample\nDraw two plots on the same figure:\nResult:\nNote: The two plots are plotted with two different colors, by default blue and orange, you will learn how to change colors later in this chapter.\nBy comparing the two plots, I think it is safe to say that they both gives us the same conclusion: the newer the car, the faster it drives.\nREMOVE ADS\nColors\nYou can set your own color for each scatter plot with the color or the c argument:\nExample\nSet your own color of the markers:\nResult:\nColor Each Dot\nYou can even set a specific color for each dot by using an array of colors as value for the c argument:\nNote: You cannot use the color argument for this, only the c argument.\nExample\nSet your own color of the markers:\nResult:\nColorMap\nThe Matplotlib module has a number of available colormaps.\nA colormap is like a list of colors, where each color has a value that ranges from 0 to 100.\nHere is an example of a colormap:\nThis colormap is called 'viridis' and as you can see it ranges from 0, which is a purple color, up to 100, which is a yellow color.\nHow to Use the ColorMap\nYou can specify the colormap with the keyword argument cmap with the value of the colormap, in this case 'viridis' which is one of the built-in colormaps available in Matplotlib.\nIn addition you have to create an array with values (from 0 to 100), one value for each point in the scatter plot:\nExample\nCreate a color array, and specify a colormap in the scatter plot:\nResult:\nYou can include the colormap in the drawing by including the plt.colorbar() statement:\nExample\nInclude the actual colormap:\nResult:\nAvailable ColorMaps\nYou can choose any of the built-in colormaps:\nSize\nYou can change the size of the dots with the s argument.\nJust like colors, make sure the array for sizes has the same length as the arrays for the x- and y-axis:\nExample\nSet your own size for the markers:\nResult:\nAlpha\nYou can adjust the transparency of the dots with the alpha argument.\nJust like colors, make sure the array for sizes has the same length as the arrays for the x- and y-axis:\nExample\nSet your own size for the markers:\nResult:\nCombine Color Size and Alpha\nYou can combine a colormap with different sizes of the dots. This is best visualized if the dots are transparent:\nExample\nCreate random arrays with 100 values for x-points, y-points, colors and sizes:\nResult:",
      "examples": [
        "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])\ny = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])\n\nplt.scatter(x, y)\nplt.show()",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\n#day one, the age and speed of 13 cars:\nx = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])\ny = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])\nplt.scatter(x, y)\n\n#day two, the age and speed of 15 cars:\nx = np.array([2,2,8,1,15,8,12,9,7,3,11,4,7,14,12])\ny = np.array([100,105,84,105,90,99,90,95,94,100,79,112,91,80,85])\nplt.scatter(x, y)\n\nplt.show()",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])\ny = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])\nplt.scatter(x, y, color = 'hotpink')\n\nx = np.array([2,2,8,1,15,8,12,9,7,3,11,4,7,14,12])\ny = np.array([100,105,84,105,90,99,90,95,94,100,79,112,91,80,85])\nplt.scatter(x, y, color = '#88c999')\n\nplt.show()",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])\ny = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])\ncolors = np.array([\"red\",\"green\",\"blue\",\"yellow\",\"pink\",\"black\",\"orange\",\"purple\",\"beige\",\"brown\",\"gray\",\"cyan\",\"magenta\"])\n\nplt.scatter(x, y, c=colors)\n\nplt.show()",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])\ny = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])\ncolors = np.array([0, 10, 20, 30, 40, 45, 50, 55, 60, 70, 80, 90, 100])\n\nplt.scatter(x, y, c=colors, cmap='viridis')\n\nplt.show()",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])\ny = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])\ncolors = np.array([0, 10, 20, 30, 40, 45, 50, 55, 60, 70, 80, 90, 100])\n\nplt.scatter(x, y, c=colors, cmap='viridis')\n\nplt.colorbar()\n\nplt.show()",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])\ny = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])\nsizes = np.array([20,50,100,200,500,1000,60,90,10,300,600,800,75])\n\nplt.scatter(x, y, s=sizes)\n\nplt.show()",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])\ny = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])\nsizes = np.array([20,50,100,200,500,1000,60,90,10,300,600,800,75])\n\nplt.scatter(x, y, s=sizes, alpha=0.5)\n\nplt.show()",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.random.randint(100, size=(100))\ny = np.random.randint(100, size=(100))\ncolors = np.random.randint(100, size=(100))\nsizes = 10 * np.random.randint(100, size=(100))\n\nplt.scatter(x, y, c=colors, s=sizes, alpha=0.5, cmap='nipy_spectral')\n\nplt.colorbar()\n\nplt.show()",
        "scatter()",
        "color",
        "c",
        "cmap",
        "'viridis'",
        "plt.colorbar()",
        "s",
        "alpha"
      ]
    },
    {
      "title": "Matplotlib Bars",
      "summary": "Creating Bars\nWith Pyplot, you can use the bar() function to draw bar graphs:\nExampleGet your own Python Server\nDraw 4 bars:\nResult:\nThe bar() function takes arguments that describes the layout of the bars.\nThe categories and their values represented by the first and second argument as arrays.\nExample\nTry it Yourself »\nREMOVE ADS\nHorizontal Bars\nIf you want the bars to be displayed horizontally instead of vertically, use the barh() function:\nExample\nDraw 4 horizontal bars:\nResult:\nBar Color\nThe bar() and barh() take the keyword argument color to set the color of the bars:\nExample\nDraw 4 red bars:\nResult:\nColor Names\nYou can use any of the 140 supported color names.\nExample\nDraw 4 \"hot pink\" bars:\nResult:\nColor Hex\nOr you can use Hexadecimal color values:\nExample\nDraw 4 bars with a beautiful green color:\nResult:\nBar Width\nThe bar() takes the keyword argument width to set the width of the bars:\nExample\nDraw 4 very thin bars:\nResult:\nThe default width value is 0.8\nNote: For horizontal bars, use height instead of width.\nBar Height\nThe barh() takes the keyword argument height to set the height of the bars:\nExample\nDraw 4 very thin bars:\nResult:\nThe default height value is 0.8",
      "examples": [
        "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([\"A\", \"B\", \"C\", \"D\"])\ny = np.array([3, 8, 1, 10])\n\nplt.bar(x,y)\nplt.show()",
        "x = [\"APPLES\", \"BANANAS\"]\ny = [400, 350]\nplt.bar(x, y)",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([\"A\", \"B\", \"C\", \"D\"])\ny = np.array([3, 8, 1, 10])\n\nplt.barh(x, y)\nplt.show()",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([\"A\", \"B\", \"C\", \"D\"])\ny = np.array([3, 8, 1, 10])\n\nplt.bar(x, y, color = \"red\")\nplt.show()",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([\"A\", \"B\", \"C\", \"D\"])\ny = np.array([3, 8, 1, 10])\n\nplt.bar(x, y, color = \"hotpink\")\nplt.show()",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([\"A\", \"B\", \"C\", \"D\"])\ny = np.array([3, 8, 1, 10])\n\nplt.bar(x, y, width = 0.1)\nplt.show()",
        "bar()",
        "barh()",
        "color",
        "width",
        "height"
      ]
    },
    {
      "title": "Matplotlib Histograms",
      "summary": "Histogram\nA histogram is a graph showing frequency distributions.\nIt is a graph showing the number of observations within each given interval.\nExample: Say you ask for the height of 250 people, you might end up with a histogram like this:\nYou can read from the histogram that there are approximately:\n2 people from 140 to 145cm\n5 people from 145 to 150cm\n15 people from 151 to 156cm\n31 people from 157 to 162cm\n46 people from 163 to 168cm\n53 people from 168 to 173cm\n45 people from 173 to 178cm\n28 people from 179 to 184cm\n21 people from 185 to 190cm\n4 people from 190 to 195cm\nCreate Histogram\nIn Matplotlib, we use the hist() function to create histograms.\nThe hist() function will use an array of numbers to create a histogram, the array is sent into the function as an argument.\nFor simplicity we use NumPy to randomly generate an array with 250 values, where the values will concentrate around 170, and the standard deviation is 10. Learn more about Normal Data Distribution in our Machine Learning Tutorial.\nExampleGet your own Python Server\nA Normal Data Distribution by NumPy:\nResult:\nThis will generate a random result, and could look like this:\nTry it Yourself »\nThe hist() function will read the array and produce a histogram:\nExample\nA simple histogram:\nResult:",
      "examples": [
        "[167.62255766 175.32495609 152.84661337 165.50264047 163.17457988 162.29867872 172.83638413 168.67303667 164.57361342 180.81120541 170.57782187 167.53075749 176.15356275 176.95378312 158.4125473 187.8842668 159.03730075 166.69284332 160.73882029 152.22378865 164.01255164 163.95288674 176.58146832 173.19849526 169.40206527 166.88861903 149.90348576 148.39039643 177.90349066 166.72462233 177.44776004 170.93335636 173.26312881 174.76534435 162.28791953 166.77301551 160.53785202 170.67972019 159.11594186 165.36992993 178.38979253 171.52158489 173.32636678 159.63894401 151.95735707 175.71274153 165.00458544 164.80607211 177.50988211 149.28106703 179.43586267 181.98365273 170.98196794 179.1093176 176.91855744 168.32092784 162.33939782 165.18364866 160.52300507 174.14316386 163.01947601 172.01767945 173.33491959 169.75842718 198.04834503 192.82490521 164.54557943 206.36247244 165.47748898 195.26377975 164.37569092 156.15175531 162.15564208 179.34100362 167.22138242 147.23667125 162.86940215 167.84986671 172.99302505 166.77279814 196.6137667 159.79012341 166.5840824 170.68645637 165.62204521 174.5559345 165.0079216 187.92545129 166.86186393 179.78383824 161.0973573 167.44890343 157.38075812 151.35412246 171.3107829 162.57149341 182.49985133 163.24700057 168.72639903 169.05309467 167.19232875 161.06405208 176.87667712 165.48750185 179.68799986 158.7913483 170.22465411 182.66432721 173.5675715 176.85646836 157.31299754 174.88959677 183.78323508 174.36814558 182.55474697 180.03359793 180.53094948 161.09560099 172.29179934 161.22665588 171.88382477 159.04626132 169.43886536 163.75793589 157.73710983 174.68921523 176.19843414 167.39315397 181.17128255 174.2674597 186.05053154 177.06516302 171.78523683 166.14875436 163.31607668 174.01429569 194.98819875 169.75129209 164.25748789 180.25773528 170.44784934 157.81966006 171.33315907 174.71390637 160.55423274 163.92896899 177.29159542 168.30674234 165.42853878 176.46256226 162.61719142 166.60810831 165.83648812 184.83238352 188.99833856 161.3054697 175.30396693 175.28109026 171.54765201 162.08762813 164.53011089 189.86213299 170.83784593 163.25869004 198.68079225 166.95154328 152.03381334 152.25444225 149.75522816 161.79200594 162.13535052 183.37298831 165.40405341 155.59224806 172.68678385 179.35359654 174.19668349 163.46176882 168.26621173 162.97527574 192.80170974 151.29673582 178.65251432 163.17266558 165.11172588 183.11107905 169.69556831 166.35149789 178.74419135 166.28562032 169.96465166 178.24368042 175.3035525 170.16496554 158.80682882 187.10006553 178.90542991 171.65790645 183.19289193 168.17446717 155.84544031 177.96091745 186.28887898 187.89867406 163.26716924 169.71242393 152.9410412 158.68101969 171.12655559 178.1482624 187.45272185 173.02872935 163.8047623 169.95676819 179.36887054 157.01955088 185.58143864 170.19037101 157.221245 168.90639755 178.7045601 168.64074373 172.37416382 165.61890535 163.40873027 168.98683006 149.48186389 172.20815568 172.82947206 173.71584064 189.42642762 172.79575803 177.00005573 169.24498561 171.55576698 161.36400372 176.47928342 163.02642822 165.09656415 186.70951892 153.27990317 165.59289527 180.34566865 189.19506385 183.10723435 173.48070474 170.28701875 157.24642079 157.9096498 176.4248199 ]",
        "import numpy as np\n\nx = np.random.normal(170, 10, 250)\n\nprint(x)",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.random.normal(170, 10, 250)\n\nplt.hist(x)\nplt.show()",
        "hist()"
      ]
    },
    {
      "title": "Matplotlib Pie Charts",
      "summary": "Creating Pie Charts\nWith Pyplot, you can use the pie() function to draw pie charts:\nExampleGet your own Python Server\nA simple pie chart:\nResult:\nAs you can see the pie chart draws one piece (called a wedge) for each value in the array (in this case [35, 25, 25, 15]).\nBy default the plotting of the first wedge starts from the x-axis and moves counterclockwise:\nNote: The size of each wedge is determined by comparing the value with all the other values, by using this formula:\nThe value divided by the sum of all values: x/sum(x)\nREMOVE ADS\nLabels\nAdd labels to the pie chart with the labels parameter.\nThe labels parameter must be an array with one label for each wedge:\nExample\nA simple pie chart:\nResult:\nStart Angle\nAs mentioned the default start angle is at the x-axis, but you can change the start angle by specifying a startangle parameter.\nThe startangle parameter is defined with an angle in degrees, default angle is 0:\nExample\nStart the first wedge at 90 degrees:\nResult:\nExplode\nMaybe you want one of the wedges to stand out? The explode parameter allows you to do that.\nThe explode parameter, if specified, and not None, must be an array with one value for each wedge.\nEach value represents how far from the center each wedge is displayed:\nExample\nPull the \"Apples\" wedge 0.2 from the center of the pie:\nResult:\nShadow\nAdd a shadow to the pie chart by setting the shadows parameter to True:\nExample\nAdd a shadow:\nResult:\nColors\nYou can set the color of each wedge with the colors parameter.\nThe colors parameter, if specified, must be an array with one value for each wedge:\nExample\nSpecify a new color for each wedge:\nResult:\nYou can use Hexadecimal color values, any of the 140 supported color names, or one of these shortcuts:\n'r' - Red\n'g' - Green\n'b' - Blue\n'c' - Cyan\n'm' - Magenta\n'y' - Yellow\n'k' - Black\n'w' - White\nLegend\nTo add a list of explanation for each wedge, use the legend() function:\nExample\nAdd a legend:\nResult:\nLegend With Header\nTo add a header to the legend, add the title parameter to the legend function.\nExample\nAdd a legend with a header:\nResult:",
      "examples": [
        "import matplotlib.pyplot as plt\nimport numpy as np\n\ny = np.array([35, 25, 25, 15])\n\nplt.pie(y)\nplt.show()",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\ny = np.array([35, 25, 25, 15])\nmylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\n\nplt.pie(y, labels = mylabels)\nplt.show()",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\ny = np.array([35, 25, 25, 15])\nmylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\n\nplt.pie(y, labels = mylabels, startangle = 90)\nplt.show()",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\ny = np.array([35, 25, 25, 15])\nmylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\nmyexplode = [0.2, 0, 0, 0]\n\nplt.pie(y, labels = mylabels, explode = myexplode)\nplt.show()",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\ny = np.array([35, 25, 25, 15])\nmylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\nmyexplode = [0.2, 0, 0, 0]\n\nplt.pie(y, labels = mylabels, explode = myexplode, shadow = True)\nplt.show()",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\ny = np.array([35, 25, 25, 15])\nmylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\nmycolors = [\"black\", \"hotpink\", \"b\", \"#4CAF50\"]\n\nplt.pie(y, labels = mylabels, colors = mycolors)\nplt.show()",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\ny = np.array([35, 25, 25, 15])\nmylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\n\nplt.pie(y, labels = mylabels)\nplt.legend()\nplt.show()",
        "import matplotlib.pyplot as plt\nimport numpy as np\n\ny = np.array([35, 25, 25, 15])\nmylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\n\nplt.pie(y, labels = mylabels)\nplt.legend(title = \"Four Fruits:\")\nplt.show()",
        "pie()",
        "x/sum(x)",
        "labels",
        "startangle",
        "explode",
        "None",
        "shadows",
        "True",
        "colors",
        "'r'",
        "'g'",
        "'b'",
        "'c'",
        "'m'",
        "'y'",
        "'k'",
        "'w'",
        "legend()",
        "title",
        "legend"
      ]
    },
    {
      "title": "Machine Learning",
      "summary": "Machine Learning is making the computer learn from studying data and statistics.\nMachine Learning is a step into the direction of artificial intelligence (AI).\nMachine Learning is a program that analyses data and learns to predict the outcome.\nWhere To Start?\nIn this tutorial we will go back to mathematics and study statistics, and how to calculate important numbers based on data sets.\nWe will also learn how to use various Python modules to get the answers we need.\nAnd we will learn how to make functions that are able to predict the outcome based on what we have learned.\nData Set\nIn the mind of a computer, a data set is any collection of data. It can be anything from an array to a complete database.\nExample of an array:\n[99,86,87,88,111,86,103,87,94,78,77,85,86]\nExample of a database:\nBy looking at the array, we can guess that the average value is probably around 80 or 90, and we are also able to determine the highest value and the lowest value, but what else can we do?\nAnd by looking at the database we can see that the most popular color is white, and the oldest car is 17 years, but what if we could predict if a car had an AutoPass, just by looking at the other values?\nThat is what Machine Learning is for! Analyzing data and predicting the outcome!\nIn Machine Learning it is common to work with very large data sets. In this tutorial we will try to make it as easy as possible to understand the different concepts of machine learning, and we will work with small easy-to-understand data sets.\nREMOVE ADS\nData Types\nTo analyze data, it is important to know what type of data we are dealing with.\nWe can split the data types into three main categories:\nNumerical\nCategorical\nOrdinal\nNumerical data are numbers, and can be split into two numerical categories:\nDiscrete Data\n- counted data that are limited to integers. Example: The number of cars passing by.\nContinuous Data\n- measured data that can be any number. Example: The price of an item, or the size of an item\nCategorical data are values that cannot be measured up against each other. Example: a color value, or any yes/no values.\nOrdinal data are like categorical data, but can be measured up against each other. Example: school grades where A is better than B and so on.\nBy knowing the data type of your data source, you will be able to know what technique to use when analyzing them.\nYou will learn more about statistics and analyzing data in the next chapters.",
      "examples": [
        "[99,86,87,88,111,86,103,87,94,78,77,85,86]"
      ]
    },
    {
      "title": "Machine Learning - Mean Median Mode",
      "summary": "Mean, Median, and Mode\nWhat can we learn from looking at a group of numbers?\nIn Machine Learning (and in mathematics) there are often three values that interests us:\nMean - The average value\nMedian - The mid point value\nMode - The most common value\nExample: We have registered the speed of 13 cars:\nspeed = [99,86,87,88,111,86,103,87,94,78,77,85,86]\nWhat is the average, the middle, or the most common speed value?\nMean\nThe mean value is the average value.\nTo calculate the mean, find the sum of all values, and divide the sum by the number of values:\n(99+86+87+88+111+86+103+87+94+78+77+85+86) / 13 = 89.77\nThe NumPy module has a method for this. Learn about the NumPy module in our NumPy Tutorial.\nExampleGet your own Python Server\nUse the NumPy mean() method to find the average speed:\nREMOVE ADS\nMedian\nThe median value is the value in the middle, after you have sorted all the values:\n77, 78, 85, 86, 86, 86, 87, 87, 88, 94, 99, 103, 111\nIt is important that the numbers are sorted before you can find the median.\nThe NumPy module has a method for this:\nExample\nUse the NumPy median() method to find the middle value:\nIf there are two numbers in the middle, divide the sum of those numbers by two.\n77, 78, 85, 86, 86, 86, 87, 87, 94, 98, 99, 103\n\n(86 + 87) / 2 = 86.5\nExample\nUsing the NumPy module:\nMode\nThe Mode value is the value that appears the most number of times:\n99, 86, 87, 88, 111, 86, 103, 87, 94, 78, 77, 85, 86 = 86\nThe SciPy module has a method for this. Learn about the SciPy module in our SciPy Tutorial.\nExample\nUse the SciPy mode() method to find the number that appears the most:\nChapter Summary\nThe Mean, Median, and Mode are techniques that are often used in Machine Learning, so it is important to understand the concept behind them.",
      "examples": [
        "import numpy\n\nspeed = [99,86,87,88,111,86,103,87,94,78,77,85,86]\n\nx = numpy.mean(speed)\n\nprint(x)",
        "import numpy\n\nspeed = [99,86,87,88,111,86,103,87,94,78,77,85,86]\n\nx = numpy.median(speed)\n\nprint(x)",
        "import numpy\n\nspeed = [99,86,87,88,86,103,87,94,78,77,85,86]\n\nx = numpy.median(speed)\n\nprint(x)",
        "from scipy import stats\n\nspeed = [99,86,87,88,111,86,103,87,94,78,77,85,86]\n\nx = stats.mode(speed)\n\nprint(x)",
        "speed = [99,86,87,88,111,86,103,87,94,78,77,85,86]",
        "(99+86+87+88+111+86+103+87+94+78+77+85+86) / 13 = 89.77",
        "mean()",
        "77, 78, 85, 86, 86, 86,",
        "87",
        ", 87, 88, 94, 99, 103, 111",
        "median()",
        "77, 78, 85, 86, 86,",
        "86, 87",
        ", 87, 94, 98, 99, 103\n\n(86 + 87) / 2 =",
        "86.5",
        "99,",
        "86",
        ", 87, 88, 111,",
        ", 103, 87, 94, 78, 77, 85,",
        "= 86",
        "mode()"
      ]
    },
    {
      "title": "Machine Learning - Standard Deviation",
      "summary": "What is Standard Deviation?\nStandard deviation is a number that describes how spread out the values are.\nA low standard deviation means that most of the numbers are close to the mean (average) value.\nA high standard deviation means that the values are spread out over a wider range.\nExample: This time we have registered the speed of 7 cars:\nspeed = [86,87,88,86,87,85,86]\nThe standard deviation is:\n0.9\nMeaning that most of the values are within the range of 0.9 from the mean value, which is 86.4.\nLet us do the same with a selection of numbers with a wider range:\nspeed = [32,111,138,28,59,77,97]\nThe standard deviation is:\n37.85\nMeaning that most of the values are within the range of 37.85 from the mean value, which is 77.4.\nAs you can see, a higher standard deviation indicates that the values are spread out over a wider range.\nThe NumPy module has a method to calculate the standard deviation:\nExampleGet your own Python Server\nUse the NumPy std() method to find the standard deviation:\nExample\nLearn to Filter Data in Python Like a Data Analyst\nTry a hands-on training sessions with step-by-step guidance from an expert. Try the guided project made in collaboration with Coursera now!\nVariance\nVariance is another number that indicates how spread out the values are.\nIn fact, if you take the square root of the variance, you get the standard deviation!\nOr the other way around, if you multiply the standard deviation by itself, you get the variance!\nTo calculate the variance you have to do as follows:\n1. Find the mean:\n(32+111+138+28+59+77+97) / 7 = 77.4\n2. For each value: find the difference from the mean:\n32 - 77.4 = -45.4\n111 - 77.4 =  33.6\n138 - 77.4 =  60.6\n28 - 77.4 = -49.4\n59 - 77.4 = -18.4\n77 - 77.4 = - 0.4\n97 - 77.4 =  19.6\n3. For each difference: find the square value:\n(-45.4)2 = 2061.16\n(33.6)2 = 1128.96\n(60.6)2 = 3672.36\n(-49.4)2 = 2440.36\n(-18.4)2 =  338.56\n(- 0.4)2 =    0.16\n(19.6)2 =  384.16\n4. The variance is the average number of these squared differences:\n(2061.16+1128.96+3672.36+2440.36+338.56+0.16+384.16) / 7 = 1432.2\nLuckily, NumPy has a method to calculate the variance:\nExample\nUse the NumPy var() method to find the variance:\nStandard Deviation\nAs we have learned, the formula to find the standard deviation is the square root of the variance:\n√1432.25 = 37.85\nOr, as in the example from before, use the NumPy to calculate the standard deviation:\nExample\nUse the NumPy std() method to find the standard deviation:\nSymbols\nStandard Deviation is often represented by the symbol Sigma: σ\nVariance is often represented by the symbol Sigma Squared: σ2\nChapter Summary\nThe Standard Deviation and Variance are terms that are often used in Machine Learning, so it is important to understand how to get them, and the concept behind them.",
      "examples": [
        "import numpy\n\nspeed = [86,87,88,86,87,85,86]\n\nx = numpy.std(speed)\n\nprint(x)",
        "import numpy\n\nspeed = [32,111,138,28,59,77,97]\n\nx = numpy.std(speed)\n\nprint(x)",
        "import numpy\n\nspeed = [32,111,138,28,59,77,97]\n\nx = numpy.var(speed)\n\nprint(x)",
        "speed = [86,87,88,86,87,85,86]",
        "0.9",
        "speed = [32,111,138,28,59,77,97]",
        "37.85",
        "std()",
        "(32+111+138+28+59+77+97) / 7 = 77.4",
        "32 - 77.4 = -45.4\n111 - 77.4 =  33.6\n138 - 77.4 =  60.6\n28 - 77.4 = -49.4\n59 - 77.4 = -18.4\n77 - 77.4 = - 0.4\n97 - 77.4 =  19.6",
        "(-45.4)2 = 2061.16",
        "(33.6)2 = 1128.96",
        "(60.6)2 = 3672.36",
        "(-49.4)2 = 2440.36",
        "(-18.4)2 =  338.56",
        "(- 0.4)2 =    0.16",
        "(19.6)2 =  384.16",
        "(2061.16+1128.96+3672.36+2440.36+338.56+0.16+384.16) / 7 = 1432.2",
        "var()",
        "1432.25 = 37.85"
      ]
    },
    {
      "title": "Machine Learning - Percentiles",
      "summary": "What are Percentiles?\nPercentiles are used in statistics to give you a number that describes the value that a given percent of the values are lower than.\nExample: Let's say we have an array that contains the ages of every person living on a street.\nages = [5,31,43,48,50,41,7,11,15,39,80,82,32,2,8,6,25,36,27,61,31]\nWhat is the 75. percentile? The answer is 43, meaning that 75% of the people are 43 or younger.\nThe NumPy module has a method for finding the specified percentile:\nExampleGet your own Python Server\nUse the NumPy percentile() method to find the percentiles:\nExample\nWhat is the age that 90% of the people are younger than?",
      "examples": [
        "import numpy\n\nages = [5,31,43,48,50,41,7,11,15,39,80,82,32,2,8,6,25,36,27,61,31]\n\nx = numpy.percentile(ages, 75)\n\nprint(x)",
        "ages = [5,31,43,48,50,41,7,11,15,39,80,82,32,2,8,6,25,36,27,61,31]",
        "percentile()"
      ]
    },
    {
      "title": "Machine Learning - Data Distribution",
      "summary": "Data Distribution\nEarlier in this tutorial we have worked with very small amounts of data in our examples, just to understand the different concepts.\nIn the real world, the data sets are much bigger, but it can be difficult to gather real world data, at least at an early stage of a project.\nHow Can we Get Big Data Sets?\nTo create big data sets for testing, we use the Python module NumPy, which comes with a number of methods to create random data sets, of any size.\nExampleGet your own Python Server\nCreate an array containing 250 random floats between 0 and 5:\nHistogram\nTo visualize the data set we can draw a histogram with the data we collected.\nWe will use the Python module Matplotlib to draw a histogram.\nLearn about the Matplotlib module in our Matplotlib Tutorial.\nExample\nDraw a histogram:\nResult:\nHistogram Explained\nWe use the array from the example above to draw a histogram with 5 bars.\nThe first bar represents how many values in the array are between 0 and 1.\nThe second bar represents how many values are between 1 and 2.\nEtc.\nWhich gives us this result:\n52 values are between 0 and 1\n48 values are between 1 and 2\n49 values are between 2 and 3\n51 values are between 3 and 4\n50 values are between 4 and 5\nNote: The array values are random numbers and will not show the exact same result on your computer.\nBig Data Distributions\nAn array containing 250 values is not considered very big, but now you know how to create a random set of values, and by changing the parameters, you can create the data set as big as you want.\nExample\nCreate an array with 100000 random numbers, and display them using a histogram with 100 bars:",
      "examples": [
        "import numpy\n\nx = numpy.random.uniform(0.0, 5.0, 250)\n\nprint(x)",
        "import numpy\nimport matplotlib.pyplot as plt\n\nx = numpy.random.uniform(0.0, 5.0, 250)\n\nplt.hist(x, 5)\nplt.show()",
        "import numpy\nimport matplotlib.pyplot as plt\n\nx = numpy.random.uniform(0.0, 5.0, 100000)\n\nplt.hist(x, 100)\nplt.show()"
      ]
    },
    {
      "title": "Machine Learning - Normal Data Distribution",
      "summary": "Normal Data Distribution\nIn the previous chapter we learned how to create a completely random array, of a given size, and between two given values.\nIn this chapter we will learn how to create an array where the values are concentrated around a given value.\nIn probability theory this kind of data distribution is known as the normal data distribution, or the Gaussian data distribution, after the mathematician Carl Friedrich Gauss who came up with the formula of this data distribution.\nExampleGet your own Python Server\nA typical normal data distribution:\nResult:\nNote: A normal distribution graph is also known as the bell curve because of it's characteristic shape of a bell.\nHistogram Explained\nWe use the array from the numpy.random.normal() method, with 100000 values,  to draw a histogram with 100 bars.\nWe specify that the mean value is 5.0, and the standard deviation is 1.0.\nMeaning that the values should be concentrated around 5.0, and rarely further away than 1.0 from the mean.\nAnd as you can see from the histogram, most values are between 4.0 and 6.0, with a top at approximately 5.0.",
      "examples": [
        "import numpy\nimport matplotlib.pyplot as plt\n\nx = numpy.random.normal(5.0, 1.0, 100000)\n\nplt.hist(x, 100)\nplt.show()",
        "numpy.random.normal()"
      ]
    },
    {
      "title": "Machine Learning - Scatter Plot",
      "summary": "Scatter Plot\nA scatter plot is a diagram where each value in the data set is represented by a dot.\nThe Matplotlib module has a method for drawing scatter plots, it needs two arrays of the same length, one for the values of the x-axis, and one for the values of the y-axis:\nx = [5,7,8,7,2,17,2,9,4,11,12,9,6]\ny = [99,86,87,88,111,86,103,87,94,78,77,85,86]\nThe x array represents the age of each car.\nThe y array represents the speed of each car.\nExampleGet your own Python Server\nUse the scatter() method to draw a scatter plot diagram:\nResult:\nScatter Plot Explained\nThe x-axis represents ages, and the y-axis represents speeds.\nWhat we can read from the diagram is that the two fastest cars were both 2 years old, and the slowest car was 12 years old.\nNote: It seems that the newer the car, the faster it drives, but that could be a coincidence, after all we only registered 13 cars.\nREMOVE ADS\nRandom Data Distributions\nIn Machine Learning the data sets can contain thousands-, or even millions, of values.\nYou might not have real world data when you are testing an algorithm, you might have to use randomly generated values.\nAs we have learned in the previous chapter, the NumPy module can help us with that!\nLet us create two arrays that are both filled with 1000 random numbers from a normal data distribution.\nThe first array will have the mean set to 5.0 with a standard deviation of 1.0.\nThe second array will have the mean set to 10.0 with a standard deviation of 2.0:\nExample\nA scatter plot with 1000 dots:\nResult:\nScatter Plot Explained\nWe can see that the dots are concentrated around the value 5 on the x-axis, and 10 on the y-axis.\nWe can also see that the spread is wider on the y-axis than on the x-axis.",
      "examples": [
        "import matplotlib.pyplot as plt\n\nx = [5,7,8,7,2,17,2,9,4,11,12,9,6]\ny = [99,86,87,88,111,86,103,87,94,78,77,85,86]\n\nplt.scatter(x, y)\nplt.show()",
        "import numpy\nimport matplotlib.pyplot as plt\n\nx = numpy.random.normal(5.0, 1.0, 1000)\ny = numpy.random.normal(10.0, 2.0, 1000)\n\nplt.scatter(x, y)\nplt.show()",
        "x = [5,7,8,7,2,17,2,9,4,11,12,9,6]",
        "y = [99,86,87,88,111,86,103,87,94,78,77,85,86]",
        "x",
        "y",
        "scatter()"
      ]
    },
    {
      "title": "Machine Learning - Linear Regression",
      "summary": "Regression\nThe term regression is used when you try to find the relationship between variables.\nIn Machine Learning, and in statistical modeling, that relationship is used to predict the outcome of future events.\nLinear Regression\nLinear regression uses the relationship between the data-points to draw a straight line through all them.\nThis line can be used to predict future values.\nIn Machine Learning, predicting the future is very important.\nHow Does it Work?\nPython has methods for finding a relationship between data-points and to draw a line of linear regression. We will show you how to use these methods instead of going through the mathematic formula.\nIn the example below, the x-axis represents age, and the y-axis represents speed. We have registered the age and speed of 13 cars as they were passing a tollbooth. Let us see if the data we collected could be used in a linear regression:\nExampleGet your own Python Server\nStart by drawing a scatter plot:\nResult:\nExample\nImport scipy and draw the line of Linear Regression:\nResult:\nExample Explained\nImport the modules you need.\nYou can learn about the Matplotlib module in our Matplotlib Tutorial.\nYou can learn about the SciPy module in our SciPy Tutorial.\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nCreate the arrays that represent the values of the x and y axis:\nx = [5,7,8,7,2,17,2,9,4,11,12,9,6]\ny = [99,86,87,88,111,86,103,87,94,78,77,85,86]\nExecute a method that returns some important key values of Linear Regression:\nslope, intercept, r, p, std_err = stats.linregress(x, y)\nCreate a function that uses the slope and intercept values to return a new value. This new value represents where on the y-axis the corresponding x value will be placed:\ndef myfunc(x):\nreturn slope * x + intercept\nRun each value of the x array through the function. This will result in a new array with new values for the y-axis:\nmymodel = list(map(myfunc, x))\nDraw the original scatter plot:\nplt.scatter(x, y)\nDraw the line of linear regression:\nplt.plot(x, mymodel)\nDisplay the diagram:\nplt.show()\nREMOVE ADS\nR for Relationship\nIt is important to know how the relationship between the values of the x-axis and the values of the y-axis is, if there are no relationship the linear regression can not be used to predict anything.\nThis relationship - the coefficient of correlation - is called r.\nThe r value ranges from -1 to 1, where 0 means no relationship, and 1 (and -1) means 100% related.\nPython and the Scipy module will compute this value for you, all you have to do is feed it with the x and y values.\nExample\nHow well does my data fit in a linear regression?\nNote: The result -0.76 shows that there is a relationship, not perfect, but it indicates that we could use linear regression in future predictions.\nPredict Future Values\nNow we can use the information we have gathered to predict future values.\nExample: Let us try to predict the speed of a 10 years old car.\nTo do so, we need the same myfunc() function from the example above:\ndef myfunc(x):\nreturn slope * x + intercept\nExample\nPredict the speed of a 10 years old car:\nThe example predicted a speed at 85.6, which we also could read from the diagram:\nBad Fit?\nLet us create an example where linear regression would not be the best method to predict future values.\nExample\nThese values for the x- and y-axis should result in a very bad fit for linear regression:\nResult:\nAnd the r for relationship?\nExample\nYou should get a very low r value.\nThe result: 0.013 indicates a very bad relationship, and tells us that this data set is not suitable for linear regression.",
      "examples": [
        "import matplotlib.pyplot as plt\n\nx = [5,7,8,7,2,17,2,9,4,11,12,9,6]\ny = [99,86,87,88,111,86,103,87,94,78,77,85,86]\n\nplt.scatter(x, y)\nplt.show()",
        "import matplotlib.pyplot as plt\nfrom scipy import stats\n\nx = [5,7,8,7,2,17,2,9,4,11,12,9,6]\ny = [99,86,87,88,111,86,103,87,94,78,77,85,86]\n\nslope, intercept, r, p, std_err = stats.linregress(x, y)\n\ndef myfunc(x):\nreturn slope * x + intercept\n\nmymodel = list(map(myfunc, x))\n\nplt.scatter(x, y)\nplt.plot(x, mymodel)\nplt.show()",
        "from scipy import stats\n\nx = [5,7,8,7,2,17,2,9,4,11,12,9,6]\ny = [99,86,87,88,111,86,103,87,94,78,77,85,86]\n\nslope, intercept, r, p, std_err = stats.linregress(x, y)\n\nprint(r)",
        "from scipy import stats\n\nx = [5,7,8,7,2,17,2,9,4,11,12,9,6]\ny = [99,86,87,88,111,86,103,87,94,78,77,85,86]\n\nslope, intercept, r, p, std_err = stats.linregress(x, y)\n\ndef myfunc(x):\nreturn slope * x + intercept\n\nspeed = myfunc(10)\n\nprint(speed)",
        "import matplotlib.pyplot as plt\nfrom scipy import stats\n\nx = [89,43,36,36,95,10,66,34,38,20,26,29,48,64,6,5,36,66,72,40]\ny = [21,46,3,35,67,95,53,72,58,10,26,34,90,33,38,20,56,2,47,15]\n\nslope, intercept, r, p, std_err = stats.linregress(x, y)\n\ndef myfunc(x):\nreturn slope * x + intercept\n\nmymodel = list(map(myfunc, x))\n\nplt.scatter(x, y)\nplt.plot(x, mymodel)\nplt.show()",
        "import numpy\nfrom scipy import stats\n\nx = [89,43,36,36,95,10,66,34,38,20,26,29,48,64,6,5,36,66,72,40]\ny = [21,46,3,35,67,95,53,72,58,10,26,34,90,33,38,20,56,2,47,15]\n\nslope, intercept, r, p, std_err = stats.linregress(x, y)\n\nprint(r)",
        "scipy",
        "import matplotlib.pyplot as plt\nfrom scipy import stats",
        "x = [5,7,8,7,2,17,2,9,4,11,12,9,6]\ny = [99,86,87,88,111,86,103,87,94,78,77,85,86]",
        "slope, intercept, r, p, std_err = stats.linregress(x, y)",
        "slope",
        "intercept",
        "def myfunc(x):\nreturn slope * x + intercept",
        "mymodel = list(map(myfunc, x))",
        "plt.scatter(x, y)",
        "plt.plot(x, mymodel)",
        "plt.show()",
        "r",
        "myfunc()"
      ]
    },
    {
      "title": "Machine Learning - Polynomial Regression",
      "summary": "Polynomial Regression\nIf your data points clearly will not fit a linear regression (a straight line through all data points), it might be ideal for polynomial regression.\nPolynomial regression, like linear regression, uses the relationship between the variables x and y to find the best way to draw a line through the data points.\nHow Does it Work?\nPython has methods for finding a relationship between data-points and to draw a line of polynomial regression. We will show you how to use these methods instead of going through the mathematic formula.\nIn the example below, we have registered 18 cars as they were passing a certain tollbooth.\nWe have registered the car's speed, and the time of day (hour) the passing occurred.\nThe x-axis represents the hours of the day and the y-axis represents the speed:\nExampleGet your own Python Server\nStart by drawing a scatter plot:\nResult:\nExample\nImport numpy and matplotlib then draw the line of Polynomial Regression:\nResult:\nExample Explained\nImport the modules you need.\nYou can learn about the NumPy module in our NumPy Tutorial.\nYou can learn about the SciPy module in our SciPy Tutorial.\nimport numpy\nimport matplotlib.pyplot as plt\nCreate the arrays that represent the values of the x and y axis:\nx = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]\ny = [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]\nNumPy has a method that lets us make a polynomial model:\nmymodel = numpy.poly1d(numpy.polyfit(x, y, 3))\nThen specify how the line will display, we start at position 1, and end at position 22:\nmyline = numpy.linspace(1, 22, 100)\nDraw the original scatter plot:\nplt.scatter(x, y)\nDraw the line of polynomial regression:\nplt.plot(myline, mymodel(myline))\nDisplay the diagram:\nplt.show()\nREMOVE ADS\nR-Squared\nIt is important to know how well the relationship between the values of the x- and y-axis is, if there are no relationship the polynomial regression can not be used to predict anything.\nThe relationship is measured with a value called the r-squared.\nThe r-squared value ranges from 0 to 1, where 0 means no relationship, and 1 means 100% related.\nPython and the Sklearn module will compute this value for you, all you have to do is feed it with the x and y arrays:\nExample\nHow well does my data fit in a polynomial regression?\nNote: The result 0.94 shows that there is a very good relationship, and we can use polynomial regression in future predictions.\nPredict Future Values\nNow we can use the information we have gathered to predict future values.\nExample: Let us try to predict the speed of a car that passes the tollbooth at around the time 17:00:\nTo do so, we need the same mymodel array from the example above:\nmymodel = numpy.poly1d(numpy.polyfit(x, y, 3))\nExample\nPredict the speed of a car passing at 17:00:\nThe example predicted a speed to be 88.87, which we also could read from the diagram:\nBad Fit?\nLet us create an example where polynomial regression would not be the best method to predict future values.\nExample\nThese values for the x- and y-axis should result in a very bad fit for polynomial regression:\nResult:\nAnd the r-squared value?\nExample\nYou should get a very low r-squared value.\nThe result: 0.00995 indicates a very bad relationship, and tells us that this data set is not suitable for polynomial regression.",
      "examples": [
        "import matplotlib.pyplot as plt\n\nx = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]\ny = [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]\n\nplt.scatter(x, y)\nplt.show()",
        "import numpy\nimport matplotlib.pyplot as plt\n\nx = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]\ny = [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]\n\nmymodel = numpy.poly1d(numpy.polyfit(x, y, 3))\n\nmyline = numpy.linspace(1, 22, 100)\n\nplt.scatter(x, y)\nplt.plot(myline, mymodel(myline))\nplt.show()",
        "import numpy\nfrom sklearn.metrics import r2_score\n\nx = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]\ny = [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]\n\nmymodel = numpy.poly1d(numpy.polyfit(x, y, 3))\n\nprint(r2_score(y, mymodel(x)))",
        "import numpy\nfrom sklearn.metrics import r2_score\n\nx = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]\ny = [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]\n\nmymodel = numpy.poly1d(numpy.polyfit(x, y, 3))\n\nspeed = mymodel(17)\nprint(speed)",
        "import numpy\nimport matplotlib.pyplot as plt\n\nx = [89,43,36,36,95,10,66,34,38,20,26,29,48,64,6,5,36,66,72,40]\ny = [21,46,3,35,67,95,53,72,58,10,26,34,90,33,38,20,56,2,47,15]\n\nmymodel = numpy.poly1d(numpy.polyfit(x, y, 3))\n\nmyline = numpy.linspace(2, 95, 100)\n\nplt.scatter(x, y)\nplt.plot(myline, mymodel(myline))\nplt.show()",
        "import numpy\nfrom sklearn.metrics import r2_score\n\nx = [89,43,36,36,95,10,66,34,38,20,26,29,48,64,6,5,36,66,72,40]\ny = [21,46,3,35,67,95,53,72,58,10,26,34,90,33,38,20,56,2,47,15]\n\nmymodel = numpy.poly1d(numpy.polyfit(x, y, 3))\n\nprint(r2_score(y, mymodel(x)))",
        "numpy",
        "matplotlib",
        "import numpy\nimport matplotlib.pyplot as plt",
        "x = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]\ny = [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]",
        "mymodel = numpy.poly1d(numpy.polyfit(x, y, 3))",
        "myline = numpy.linspace(1, 22, 100)",
        "plt.scatter(x, y)",
        "plt.plot(myline, mymodel(myline))",
        "plt.show()",
        "mymodel"
      ]
    },
    {
      "title": "Machine Learning - Multiple Regression",
      "summary": "Multiple Regression\nMultiple regression is like linear regression, but with more than one independent value, meaning that we try to predict a value based on two or more variables.\nTake a look at the data set below, it contains some information about cars.\nWe can predict the CO2 emission of a car based on the size of the engine, but with multiple regression we can throw in more variables, like the weight of the car, to make the prediction more accurate.\nHow Does it Work?\nIn Python we have modules that will do the work for us. Start by importing the Pandas module.\nimport pandas\nLearn about the Pandas module in our Pandas Tutorial.\nThe Pandas module allows us to read csv files and return a DataFrame object.\nThe file is meant for testing purposes only, you can download it here: data.csv\ndf = pandas.read_csv(\"data.csv\")\nThen make a list of the independent values and call this variable X.\nPut the dependent values in a variable called y.\nX = df[['Weight', 'Volume']]\ny = df['CO2']\nTip: It is common to name the list of independent values with a upper case X, and the list of dependent values with a lower case y.\nWe will use some methods from the sklearn module, so we will have to import that module as well:\nfrom sklearn import linear_model\nFrom the sklearn module we will use the LinearRegression() method to create a linear regression object.\nThis object has a method called fit() that takes the independent and dependent values as parameters and fills the regression object with data that describes the relationship:\nregr = linear_model.LinearRegression()\nregr.fit(X, y)\nNow we have a regression object that are ready to predict CO2 values based on a car's weight and volume:\n#predict the CO2 emission of a car where the weight is 2300kg, and the volume is 1300cm3:\npredictedCO2 = regr.predict([[2300, 1300]])\nExampleGet your own Python Server\nSee the whole example in action:\nResult:\nRun example »\nWe have predicted that a car with 1.3 liter engine, and a weight of 2300 kg, will release approximately 107 grams of CO2 for every kilometer it drives.\nREMOVE ADS\nCoefficient\nThe coefficient is a factor that describes the relationship with an unknown variable.\nExample: if x is a variable, then 2x is x two times. x is the unknown variable, and the number 2 is the coefficient.\nIn this case, we can ask for the coefficient value of weight against CO2, and for volume against CO2. The answer(s) we get tells us what would happen if we increase, or decrease, one of the independent values.\nExample\nPrint the coefficient values of the regression object:\nResult:\nRun example »\nResult Explained\nThe result array represents the coefficient values of weight and volume.\nWeight: 0.00755095\nVolume: 0.00780526\nThese values tell us that if the weight increase by 1kg, the CO2 emission increases by 0.00755095g.\nAnd if the engine size (Volume) increases by 1cm3, the CO2 emission increases by 0.00780526g.\nI think that is a fair guess, but let test it!\nWe have already predicted that if a car with a 1300cm3 engine weighs 2300kg, the CO2 emission will be approximately 107g.\nWhat if we increase the weight with 1000kg?\nExample\nCopy the example from before, but change the weight from 2300 to 3300:\nResult:\nRun example »\nWe have predicted that a car with 1.3 liter engine, and a weight of 3300 kg, will release approximately 115 grams of CO2 for every kilometer it drives.\nWhich shows that the coefficient of 0.00755095 is correct:\n107.2087328 + (1000 * 0.00755095) = 114.75968",
      "examples": [
        "[107.2087328]",
        "[0.00755095 0.00780526]",
        "[114.75968007]",
        "import pandas\nfrom sklearn import linear_model\n\ndf = pandas.read_csv(\"data.csv\")\n\nX = df[['Weight', 'Volume']]\ny = df['CO2']\n\nregr = linear_model.LinearRegression()\nregr.fit(X, y)\n\n#predict the CO2 emission of a car where the weight is 2300kg, and the volume is 1300cm3:\npredictedCO2 = regr.predict([[2300, 1300]])\n\nprint(predictedCO2)",
        "import pandas\nfrom sklearn import linear_model\n\ndf = pandas.read_csv(\"data.csv\")\n\nX = df[['Weight', 'Volume']]\ny = df['CO2']\n\nregr = linear_model.LinearRegression()\nregr.fit(X, y)\n\nprint(regr.coef_)",
        "import pandas\nfrom sklearn import linear_model\n\ndf = pandas.read_csv(\"data.csv\")\n\nX = df[['Weight', 'Volume']]\ny = df['CO2']\n\nregr = linear_model.LinearRegression()\nregr.fit(X, y)\n\npredictedCO2 = regr.predict([[3300, 1300]])\n\nprint(predictedCO2)",
        "import pandas",
        "df = pandas.read_csv(\"data.csv\")",
        "X",
        "y",
        "X = df[['Weight', 'Volume']]\ny = df['CO2']",
        "from sklearn import linear_model",
        "LinearRegression()",
        "fit()",
        "regr = linear_model.LinearRegression()\nregr.fit(X, y)",
        "#predict the CO2 emission of a car where the weight is 2300kg, and the volume is 1300cm3:\npredictedCO2 = regr.predict([[2300, 1300]])",
        "x",
        "2x",
        "2"
      ]
    },
    {
      "title": "Machine Learning - Scale",
      "summary": "Scale Features\nWhen your data has different values, and even different measurement units, it can be difficult to compare them. What is kilograms compared to meters? Or altitude compared to time?\nThe answer to this problem is scaling. We can scale data into new values that are easier to compare.\nTake a look at the table below, it is the same data set that we used in the multiple regression chapter, but this time the volume column contains values in liters instead of cm3 (1.0 instead of 1000).\nIt can be difficult to compare the volume 1.0 with the weight 790, but if we scale them both into comparable values, we can easily see how much one value is compared to the other.\nThere are different methods for scaling data, in this tutorial we will use a method called standardization.\nThe standardization method uses this formula:\nz = (x - u) / s\nWhere z is the new value, x is the original value, u is the mean and s is the standard deviation.\nIf you take the weight column from the data set above, the first value is 790, and the scaled value will be:\nIf you take the volume column from the data set above, the first value is 1.0, and the scaled value will be:\n(1.0 - 1.61) / 0.38 = -1.59\nNow you can compare -2.1 with -1.59 instead of comparing 790 with 1.0.\nYou do not have to do this manually, the Python sklearn module has a method called StandardScaler() which returns a Scaler object with methods for transforming data sets.\nExampleGet your own Python Server\nScale all values in the Weight and Volume columns:\nResult:\nNote that the first two values are -2.1 and -1.59, which corresponds to our calculations:\nRun example »\nREMOVE ADS\nPredict CO2 Values\nThe task in the Multiple Regression chapter was to predict the CO2 emission from a car when you only knew its weight and volume.\nWhen the data set is scaled, you will have to use the scale when you predict values:\nExample\nPredict the CO2 emission from a 1.3 liter car that weighs 2300 kilograms:\nResult:\nRun example »",
      "examples": [
        "[[-2.10389253 -1.59336644] [-0.55407235 -1.07190106] [-1.52166278 -1.59336644] [-1.78973979 -1.85409913] [-0.63784641 -0.28970299] [-1.52166278 -1.59336644] [-0.76769621 -0.55043568] [ 0.3046118 -0.28970299] [-0.7551301 -0.28970299] [-0.59595938 -0.0289703 ] [-1.30803892 -1.33263375] [-1.26615189 -0.81116837] [-0.7551301 -1.59336644] [-0.16871166 -0.0289703 ] [ 0.14125238 -0.0289703 ] [ 0.15800719 -0.0289703 ] [ 0.3046118 -0.0289703 ] [-0.05142797 1.53542584] [-0.72580918 -0.0289703 ] [ 0.14962979 1.01396046] [ 1.2219378 -0.0289703 ] [ 0.5685001 1.01396046] [ 0.3046118 1.27469315] [ 0.51404696 -0.0289703 ] [ 0.51404696 1.01396046] [ 0.72348212 -0.28970299] [ 0.8281997 1.01396046] [ 1.81254495 1.01396046] [ 0.96642691 -0.0289703 ] [ 1.72877089 1.01396046] [ 1.30990057 1.27469315] [ 1.90050772 1.01396046] [-0.23991961 -0.0289703 ] [ 0.40932938 -0.0289703 ] [ 0.47215993 -0.0289703 ] [ 0.4302729 2.31762392]]",
        "[107.2087328]",
        "import pandas\nfrom sklearn import linear_model\nfrom sklearn.preprocessing import StandardScaler\nscale = StandardScaler()\n\ndf = pandas.read_csv(\"data.csv\")\n\nX = df[['Weight', 'Volume']]\n\nscaledX = scale.fit_transform(X)\n\nprint(scaledX)",
        "import pandas\nfrom sklearn import linear_model\nfrom sklearn.preprocessing import StandardScaler\nscale = StandardScaler()\n\ndf = pandas.read_csv(\"data.csv\")\n\nX = df[['Weight', 'Volume']]\ny = df['CO2']\n\nscaledX = scale.fit_transform(X)\n\nregr = linear_model.LinearRegression()\nregr.fit(scaledX, y)\n\nscaled = scale.transform([[2300, 1.3]])\n\npredictedCO2 = regr.predict([scaled[0]])\nprint(predictedCO2)",
        "z = (x - u) / s",
        "z",
        "x",
        "u",
        "s",
        "(790 - 1292.23) / 238.74 = -2.1",
        "(1.0 - 1.61) / 0.38 = -1.59",
        "StandardScaler()"
      ]
    },
    {
      "title": "Machine Learning - Train/Test",
      "summary": "Evaluate Your Model\nIn Machine Learning we create models to predict the outcome of certain events, like in the previous chapter where we predicted the CO2 emission of a car when we knew the weight and engine size.\nTo measure if the model is good enough, we can use a method called Train/Test.\nWhat is Train/Test\nTrain/Test is a method to measure the accuracy of your model.\nIt is called Train/Test because you split the data set into two sets: a training set and a testing set.\n80% for training, and 20% for testing.\nYou train the model using the training set.\nYou test the model using the testing set.\nTrain the model means create the model.\nTest the model means test the accuracy of the model.\nStart With a Data Set\nStart with a data set you want to test.\nOur data set illustrates 100 customers in a shop, and their shopping habits.\nExampleGet your own Python Server\nResult:\nThe x axis represents the number of minutes before making a purchase.\nThe y axis represents the amount of money spent on the purchase.\nRun example »\nREMOVE ADS\nSplit Into Train/Test\nThe training set should be a random selection of 80% of the original data.\nThe testing set should be the remaining 20%.\ntrain_x = x[:80]\ntrain_y = y[:80]\n\ntest_x = x[80:]\ntest_y = y[80:]\nDisplay the Training Set\nDisplay the same scatter plot with the training set:\nExample\nResult:\nIt looks like the original data set, so it seems to be a fair selection:\nRun example »\nDisplay the Testing Set\nTo make sure the testing set is not completely different, we will take a look at the testing set as well.\nExample\nResult:\nThe testing set also looks like the original data set:\nRun example »\nFit the Data Set\nWhat does the data set look like? In my opinion I think the best fit would be a polynomial regression, so let us draw a line of polynomial regression.\nTo draw a line through the data points, we use the plot() method of the matplotlib module:\nExample\nDraw a polynomial regression line through the data points:\nResult:\nRun example »\nThe result can back my suggestion of the data set fitting a polynomial regression, even though it would give us some weird results if we try to predict values outside of the data set. Example: the line indicates that a customer spending 6 minutes in the shop would make a purchase worth 200. That is probably a sign of overfitting.\nBut what about the R-squared score? The R-squared score is a good indicator of how well my data set is fitting the model.\nR2\nRemember R2, also known as R-squared?\nIt measures the relationship between the x axis and the y axis, and the value ranges from 0 to 1, where 0 means no relationship, and 1 means totally related.\nThe sklearn module has a method called r2_score() that will help us find this relationship.\nIn this case we would like to measure the relationship between the minutes a customer stays in the shop and how much money they spend.\nExample\nHow well does my training data fit in a polynomial regression?\nNote: The result 0.799 shows that there is a OK relationship.\nBring in the Testing Set\nNow we have made a model that is OK, at least when it comes to training data.\nNow we want to test the model with the testing data as well, to see if gives us the same result.\nExample\nLet us find the R2 score when using testing data:\nNote: The result 0.809 shows that the model fits the testing set as well, and we are confident that we can use the model to predict future values.\nPredict Values\nNow that we have established that our model is OK, we can start predicting new values.\nExample\nHow much money will a buying customer spend, if she or he stays in the shop for 5 minutes?\nThe example predicted the customer to spend 22.88 dollars, as seems to correspond to the diagram:",
      "examples": [
        "import numpy\nimport matplotlib.pyplot as plt\nnumpy.random.seed(2)\n\nx = numpy.random.normal(3, 1, 100)\ny = numpy.random.normal(150, 40, 100) / x\n\nplt.scatter(x, y)\nplt.show()",
        "plt.scatter(train_x, train_y)\nplt.show()",
        "plt.scatter(test_x, test_y)\nplt.show()",
        "import numpy\nimport matplotlib.pyplot as plt\nnumpy.random.seed(2)\n\nx = numpy.random.normal(3, 1, 100)\ny = numpy.random.normal(150, 40, 100) / x\n\ntrain_x = x[:80]\ntrain_y = y[:80]\n\ntest_x = x[80:]\ntest_y = y[80:]\n\nmymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, 4))\n\nmyline = numpy.linspace(0, 6, 100)\n\nplt.scatter(train_x, train_y)\nplt.plot(myline, mymodel(myline))\nplt.show()",
        "import numpy\nfrom sklearn.metrics import r2_score\nnumpy.random.seed(2)\n\nx = numpy.random.normal(3, 1, 100)\ny = numpy.random.normal(150, 40, 100) / x\n\ntrain_x = x[:80]\ntrain_y = y[:80]\n\ntest_x = x[80:]\ntest_y = y[80:]\n\nmymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, 4))\n\nr2 = r2_score(train_y, mymodel(train_x))\n\nprint(r2)",
        "import numpy\nfrom sklearn.metrics import r2_score\nnumpy.random.seed(2)\n\nx = numpy.random.normal(3, 1, 100)\ny = numpy.random.normal(150, 40, 100) / x\n\ntrain_x = x[:80]\ntrain_y = y[:80]\n\ntest_x = x[80:]\ntest_y = y[80:]\n\nmymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, 4))\n\nr2 = r2_score(test_y, mymodel(test_x))\n\nprint(r2)",
        "print(mymodel(5))",
        "train_x = x[:80]\ntrain_y = y[:80]\n\ntest_x = x[80:]\ntest_y = y[80:]",
        "plot()",
        "r2_score()"
      ]
    },
    {
      "title": "Machine Learning - Decision Tree",
      "summary": "Decision Tree\nIn this chapter we will show you how to make a \"Decision Tree\". A Decision Tree is a Flow Chart, and can help you make decisions based on previous experience.\nIn the example, a person will try to decide if he/she should go to a comedy show or not.\nLuckily our example person has registered every time there was a comedy show in town, and registered some information about the comedian, and also registered if he/she went or not.\nNow, based on this data set, Python can create a decision tree that can be used to decide if any new shows are worth attending to.\nREMOVE ADS\nHow Does it Work?\nFirst, read the dataset with pandas:\nExampleGet your own Python Server\nRead and print the data set:\nRun example »\nTo make a decision tree, all data has to be numerical.\nWe have to convert the non numerical columns 'Nationality' and 'Go' into numerical values.\nPandas has a map() method that takes a dictionary with information on how to convert the values.\n{'UK': 0, 'USA': 1, 'N': 2}\nMeans convert the values 'UK' to 0, 'USA' to 1, and 'N' to 2.\nExample\nChange string values into numerical values:\nRun example »\nThen we have to separate the feature columns from the target column.\nThe feature columns are the columns that we try to predict from, and the target column is the column with the values we try to predict.\nExample\nX is the feature columns, y is the target column:\nRun example »\nNow we can create the actual decision tree, fit it with our details. Start by importing the modules we need:\nExample\nCreate and display a Decision Tree:\nRun example »\nResult Explained\nThe decision tree uses your earlier decisions to calculate the odds for you to wanting to go see a comedian or not.\nLet us read the different aspects of the decision tree:\nRank\nRank <= 6.5 means that every comedian with a rank of 6.5 or lower will follow the True arrow (to the left), and the rest will follow the False arrow (to the right).\ngini = 0.497 refers to the quality of the split, and is always a number between 0.0 and 0.5, where 0.0 would mean all of the samples got the same result, and 0.5 would mean that the split is done exactly in the middle.\nsamples = 13 means that there are 13 comedians left at this point in the decision, which is all of them since this is the first step.\nvalue = [6, 7] means that of these 13 comedians, 6 will get a \"NO\", and 7 will get a \"GO\".\nGini\nThere are many ways to split the samples, we use the GINI method in this tutorial.\nThe Gini method uses this formula:\nGini = 1 - (x/n)2 - (y/n)2\nWhere x is the number of positive answers(\"GO\"), n is the number of samples, and y is the number of negative answers (\"NO\"), which gives us this calculation:\n1 - (7 / 13)2 - (6 / 13)2 = 0.497\nThe next step contains two boxes, one box for the comedians with a 'Rank' of 6.5 or lower, and one box with the rest.\nTrue - 5 Comedians End Here:\ngini = 0.0 means all of the samples got the same result.\nsamples = 5 means that there are 5 comedians left in this branch (5 comedian with a Rank of 6.5 or lower).\nvalue = [5, 0] means that 5 will get a \"NO\" and 0 will get a \"GO\".\nFalse - 8 Comedians Continue:\nNationality\nNationality <= 0.5 means that the comedians with a nationality value of less than 0.5 will follow the arrow to the left (which means everyone from the UK, ), and the rest will follow the arrow to the right.\ngini = 0.219 means that about 22% of the samples would go in one direction.\nsamples = 8 means that there are 8 comedians left in this branch (8 comedian with a Rank higher than 6.5).\nvalue = [1, 7] means that of these 8 comedians, 1 will get a \"NO\" and 7 will get a \"GO\".\nTrue - 4 Comedians Continue:\nAge\nAge <= 35.5 means that comedians at the age of 35.5 or younger will follow the arrow to the left, and the rest will follow the arrow to the right.\ngini = 0.375 means that about 37,5% of the samples would go in one direction.\nsamples = 4 means that there are 4 comedians left in this branch (4 comedians from the UK).\nvalue = [1, 3] means that of these 4 comedians, 1 will get a \"NO\" and 3 will get a \"GO\".\nFalse - 4 Comedians End Here:\ngini = 0.0 means all of the samples got the same result.\nsamples = 4 means that there are 4 comedians left in this branch (4 comedians not from the UK).\nvalue = [0, 4] means that of these 4 comedians, 0 will get a \"NO\" and 4 will get a \"GO\".\nTrue - 2 Comedians End Here:\ngini = 0.0 means all of the samples got the same result.\nsamples = 2 means that there are 2 comedians left in this branch (2 comedians at the age 35.5 or younger).\nvalue = [0, 2] means that of these 2 comedians, 0 will get a \"NO\" and 2 will get a \"GO\".\nFalse - 2 Comedians Continue:\nExperience\nExperience <= 9.5 means that comedians with 9.5 years of experience, or less, will follow the arrow to the left, and the rest will follow the arrow to the right.\ngini = 0.5 means that 50% of the samples would go in one direction.\nsamples = 2 means that there are 2 comedians left in this branch (2 comedians older than 35.5).\nvalue = [1, 1] means that of these 2 comedians, 1 will get a \"NO\" and 1 will get a \"GO\".\nTrue - 1 Comedian Ends Here:\ngini = 0.0 means all of the samples got the same result.\nsamples = 1 means that there is 1 comedian left in this branch (1 comedian with 9.5 years of experience or less).\nvalue = [0, 1] means that 0 will get a \"NO\" and 1 will get a \"GO\".\nFalse - 1 Comedian Ends Here:\ngini = 0.0 means all of the samples got the same result.\nsamples = 1 means that there is 1 comedians left in this branch (1 comedian with more than 9.5 years of experience).\nvalue = [1, 0] means that 1 will get a \"NO\" and 0 will get a \"GO\".\nPredict Values\nWe can use the Decision Tree to predict new values.\nExample: Should I go see a show starring a 40 years old American comedian, with 10 years of experience, and a comedy ranking of 7?\nExample\nUse predict() method to predict new values:\nRun example »\nExample\nWhat would the answer be if the comedy rank was 6?\nRun example »\nDifferent Results\nYou will see that the Decision Tree gives you different results if you run it enough times, even if you feed it with the same data.\nThat is because the Decision Tree does not give us a 100% certain answer. It is based on the probability of an outcome, and the answer will vary.",
      "examples": [
        "import pandas\n\ndf = pandas.read_csv(\"data.csv\")\n\nprint(df)",
        "d = {'UK': 0, 'USA': 1, 'N': 2}\ndf['Nationality'] = df['Nationality'].map(d)\nd = {'YES': 1, 'NO': 0}\ndf['Go'] = df['Go'].map(d)\n\nprint(df)",
        "features = ['Age', 'Experience', 'Rank', 'Nationality']\n\nX = df[features]\ny = df['Go']\n\nprint(X)\nprint(y)",
        "import pandas\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier\nimport matplotlib.pyplot as plt\n\ndf = pandas.read_csv(\"data.csv\")\n\nd = {'UK': 0, 'USA': 1, 'N': 2}\ndf['Nationality'] = df['Nationality'].map(d)\nd = {'YES': 1, 'NO': 0}\ndf['Go'] = df['Go'].map(d)\n\nfeatures = ['Age', 'Experience', 'Rank', 'Nationality']\n\nX = df[features]\ny = df['Go']\n\ndtree = DecisionTreeClassifier()\ndtree = dtree.fit(X, y)\n\ntree.plot_tree(dtree, feature_names=features)",
        "print(dtree.predict([[40, 10, 7, 1]]))",
        "print(dtree.predict([[40, 10, 6, 1]]))",
        "map()",
        "{'UK': 0, 'USA': 1, 'N': 2}",
        "X",
        "y",
        "Rank <= 6.5",
        "True",
        "False",
        "gini = 0.497",
        "samples = 13",
        "value = [6, 7]",
        "Gini = 1 - (x/n)2 - (y/n)2",
        "x",
        "n",
        "1 - (7 / 13)2 - (6 / 13)2 = 0.497",
        "gini = 0.0",
        "samples = 5",
        "value = [5, 0]",
        "Nationality <= 0.5",
        "gini = 0.219",
        "samples = 8",
        "value = [1, 7]",
        "Age <= 35.5",
        "gini = 0.375",
        "samples = 4",
        "value = [1, 3]",
        "value = [0, 4]",
        "samples = 2",
        "value = [0, 2]",
        "Experience <= 9.5",
        "gini = 0.5",
        "value = [1, 1]",
        "samples = 1",
        "value = [0, 1]",
        "value = [1, 0]"
      ]
    },
    {
      "title": "Machine Learning - Confusion Matrix",
      "summary": "What is a confusion matrix?\nIt is a table that is used in classification problems to assess where errors in the model were made.\nThe rows represent the actual classes the outcomes should have been. While the columns represent the predictions we have made. Using this table it is easy to see which predictions are wrong.\nCreating a Confusion Matrix\nConfusion matrixes can be created by predictions made from a logistic regression.\nFor now we will generate actual and predicted values by utilizing NumPy:\nimport numpy\nNext we will need to generate the numbers for \"actual\" and \"predicted\" values.\nactual = numpy.random.binomial(1, 0.9, size = 1000)\npredicted = numpy.random.binomial(1, 0.9, size = 1000)\nIn order to create the confusion matrix we need to import metrics from the sklearn module.\nfrom sklearn import metrics\nOnce metrics is imported we can use the confusion matrix function on our actual and predicted values.\nconfusion_matrix = metrics.confusion_matrix(actual, predicted)\nTo create a more interpretable visual display we need to convert the table into a confusion matrix display.\ncm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, display_labels = [0, 1])\nVizualizing the display requires that we import pyplot from matplotlib.\nimport matplotlib.pyplot as plt\nFinally to display the plot we can use the functions plot() and show() from pyplot.\ncm_display.plot()\nplt.show()\nSee the whole example in action:\nExampleGet your own Python Server\nResult\nResults Explained\nThe Confusion Matrix created has four different quadrants:\nTrue Negative (Top-Left Quadrant)\nFalse Positive (Top-Right Quadrant)\nFalse Negative (Bottom-Left Quadrant)\nTrue Positive (Bottom-Right Quadrant)\nTrue means that the values were accurately predicted, False means that there was an error or wrong prediction.\nNow that we have made a Confusion Matrix, we can calculate different measures to quantify the quality of the model. First, lets look at Accuracy.\nREMOVE ADS\nCreated Metrics\nThe matrix provides us with many useful metrics that help us to evaluate our classification model.\nThe different measures include: Accuracy, Precision, Sensitivity (Recall), Specificity, and the F-score, explained below.\nAccuracy\nAccuracy measures how often the model is correct.\nHow to Calculate\n(True Positive + True Negative) / Total Predictions\nExample\nPrecision\nOf the positives predicted, what percentage is truly positive?\nHow to Calculate\nTrue Positive / (True Positive + False Positive)\nPrecision does not evaluate the correctly predicted negative cases:\nExample\nSensitivity (Recall)\nOf all the positive cases, what percentage are predicted positive?\nSensitivity (sometimes called Recall) measures how good the model is at predicting positives.\nThis means it looks at true positives and false negatives (which are positives that have been incorrectly predicted as negative).\nHow to Calculate\nTrue Positive / (True Positive + False Negative)\nSensitivity is good at understanding how well the model predicts something is positive:\nExample\nSpecificity\nHow well the model is at prediciting negative results?\nSpecificity is similar to sensitivity, but looks at it from the persepctive of negative results.\nHow to Calculate\nTrue Negative / (True Negative + False Positive)\nSince it is just the opposite of Recall, we use the recall_score function, taking the opposite position label:\nExample\nF-score\nF-score is the \"harmonic mean\" of precision and sensitivity.\nIt considers both false positive and false negative cases and is good for imbalanced datasets.\nHow to Calculate\n2 * ((Precision * Sensitivity) / (Precision + Sensitivity))\nThis score does not take into consideration the True Negative values:\nExample\nAll calulations in one:\nExample",
      "examples": [
        "import matplotlib.pyplot as plt\nimport numpy\nfrom sklearn import metrics\n\nactual = numpy.random.binomial(1,.9,size = 1000)\npredicted = numpy.random.binomial(1,.9,size = 1000)\n\nconfusion_matrix = metrics.confusion_matrix(actual, predicted)\n\ncm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, display_labels = [0, 1])\n\ncm_display.plot()\nplt.show()",
        "Accuracy = metrics.accuracy_score(actual, predicted)",
        "Precision = metrics.precision_score(actual, predicted)",
        "Sensitivity_recall = metrics.recall_score(actual, predicted)",
        "Specificity = metrics.recall_score(actual, predicted, pos_label=0)",
        "F1_score = metrics.f1_score(actual, predicted)",
        "#metrics\nprint({\"Accuracy\":Accuracy,\"Precision\":Precision,\"Sensitivity_recall\":Sensitivity_recall,\"Specificity\":Specificity,\"F1_score\":F1_score})",
        "import numpy",
        "actual = numpy.random.binomial(1, 0.9, size = 1000)\npredicted = numpy.random.binomial(1, 0.9, size = 1000)",
        "from sklearn import metrics",
        "confusion_matrix = metrics.confusion_matrix(actual, predicted)",
        "cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, display_labels = [0, 1])",
        "import matplotlib.pyplot as plt",
        "cm_display.plot()\nplt.show()"
      ]
    },
    {
      "title": "Machine Learning - Hierarchical Clustering",
      "summary": "Hierarchical Clustering\nHierarchical clustering is an unsupervised learning method for clustering data points. The algorithm builds clusters by measuring the dissimilarities between data. Unsupervised learning means that a model does not have to be trained, and we do not need a \"target\" variable. This method can be used on any data to visualize and interpret the relationship between individual data points.\nHere we will use hierarchical clustering to group data points and visualize the clusters using both a dendrogram and scatter plot.\nHow does it work?\nWe will use Agglomerative Clustering, a type of hierarchical clustering that follows a bottom up approach. We begin by treating each data point as its own cluster. Then, we join clusters together that have the shortest distance between them to create larger clusters. This step is repeated until one large cluster is formed containing all of the data points.\nHierarchical clustering requires us to decide on both a distance and linkage method. We will use euclidean distance and the Ward linkage method, which attempts to minimize the variance between clusters.\nExampleGet your own Python Server\nStart by visualizing some data points:\nResult\nNow we compute the ward linkage using euclidean distance, and visualize it using a dendrogram:\nExample\nResult\nExample\nResult\nExample Explained\nImport the modules you need.\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.cluster.hierarchy import dendrogram, linkage\nfrom sklearn.cluster import AgglomerativeClustering\nYou can learn about the Matplotlib module in our \"Matplotlib Tutorial.\nYou can learn about the SciPy module in our SciPy Tutorial.\nNumPy is a library for working with arrays and matricies in Python, you can learn about the NumPy module in our NumPy Tutorial.\nscikit-learn is a popular library for machine learning.\nCreate arrays that resemble two variables in a dataset. Note that while we only use two variables here, this method will work with any number of variables:\nx = [4, 5, 10, 4, 3, 11, 14 , 6, 10, 12]\ny = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]\nTurn the data into a set of points:\ndata = list(zip(x, y))\nprint(data)\nResult:\n[(4, 21), (5, 19), (10, 24), (4, 17), (3, 16), (11, 25), (14, 24), (6, 22), (10, 21), (12, 21)]\nCompute the linkage between all of the different points. Here we use a simple euclidean distance measure and Ward's linkage, which seeks to minimize the variance between clusters.\nlinkage_data = linkage(data, method='ward', metric='euclidean')\nFinally, plot the results in a dendrogram. This plot will show us the hierarchy of clusters from the bottom (individual points) to the top (a single cluster consisting of all data points).\nplt.show() lets us visualize the dendrogram instead of just the raw linkage data.\ndendrogram(linkage_data)\nplt.show()\nResult:\nThe scikit-learn library allows us to use hierarchichal clustering in a different manner. First, we initialize the AgglomerativeClustering class with 2 clusters and the Ward linkage.\nhierarchical_cluster = AgglomerativeClustering(n_clusters=2, linkage='ward')\nThe .fit_predict method can be called on our data to compute the clusters using the defined parameters across our chosen number of clusters.\nlabels = hierarchical_cluster.fit_predict(data) print(labels)\nResult:\n[0 0 1 0 0 1 1 0 1 1]\nFinally, if we plot the same data and color the points using the labels assigned to each index by the hierarchical clustering method, we can see the cluster each point was assigned to:\nplt.scatter(x, y, c=labels)\nplt.show()\nResult:",
      "examples": [
        "import numpy as np\nimport matplotlib.pyplot as plt\n\nx = [4, 5, 10, 4, 3, 11, 14 , 6, 10, 12]\ny = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]\n\nplt.scatter(x, y)\nplt.show()",
        "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.cluster.hierarchy import dendrogram, linkage\n\nx = [4, 5, 10, 4, 3, 11, 14 , 6, 10, 12]\ny = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]\n\ndata = list(zip(x, y))\n\nlinkage_data = linkage(data, method='ward', metric='euclidean')\ndendrogram(linkage_data)\n\nplt.show()",
        "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import AgglomerativeClustering\n\nx = [4, 5, 10, 4, 3, 11, 14 , 6, 10, 12]\ny = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]\n\ndata = list(zip(x, y))\n\nhierarchical_cluster = AgglomerativeClustering(n_clusters=2, linkage='ward')\nlabels = hierarchical_cluster.fit_predict(data)\n\nplt.scatter(x, y, c=labels)\nplt.show()",
        "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.cluster.hierarchy import dendrogram, linkage\nfrom sklearn.cluster import AgglomerativeClustering",
        "x = [4, 5, 10, 4, 3, 11, 14 , 6, 10, 12]\ny = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]",
        "data = list(zip(x, y))\nprint(data)",
        "[(4, 21), (5, 19), (10, 24), (4, 17), (3, 16), (11, 25), (14, 24), (6, 22), (10, 21), (12, 21)]",
        "linkage_data = linkage(data, method='ward', metric='euclidean')",
        "plt.show()",
        "dendrogram(linkage_data)\nplt.show()",
        "AgglomerativeClustering",
        "hierarchical_cluster = AgglomerativeClustering(n_clusters=2, linkage='ward')",
        ".fit_predict",
        "labels = hierarchical_cluster.fit_predict(data) print(labels)",
        "[0 0 1 0 0 1 1 0 1 1]",
        "plt.scatter(x, y, c=labels)\nplt.show()"
      ]
    },
    {
      "title": "Machine Learning - Logistic Regression",
      "summary": "Logistic Regression\nLogistic regression aims to solve classification problems. It does this by predicting categorical outcomes, unlike linear regression that predicts a continuous outcome.\nIn the simplest case there are two outcomes, which is called binomial, an example of which is predicting if a tumor is malignant or benign. Other cases have more than two outcomes to classify, in this case it is called multinomial. A common example for multinomial logistic regression would be predicting the class of an iris flower between 3 different species.\nHere we will be using basic logistic regression to predict a binomial variable. This means it has only two possible outcomes.\nHow does it work?\nIn Python we have modules that will do the work for us. Start by importing the NumPy module.\nimport numpy\nStore the independent variables in X.\nStore the dependent variable in y.\nBelow is a sample dataset:\n#X represents the size of a tumor in centimeters.\nX = numpy.array([3.78, 2.44, 2.09, 0.14, 1.72, 1.65, 4.92, 4.37, 4.96, 4.52, 3.69, 5.88]).reshape(-1,1)\n\n#Note: X has to be reshaped into a column from a row for the LogisticRegression() function to work.\n#y represents whether or not the tumor is cancerous (0 for \"No\", 1 for \"Yes\").\ny = numpy.array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1])\nWe will use a method from the sklearn module, so we will have to import that module as well:\nfrom sklearn import linear_model\nFrom the sklearn module we will use the LogisticRegression() method to create a logistic regression object.\nThis object has a method called fit() that takes the independent and dependent values as parameters and fills the regression object with data that describes the relationship:\nlogr = linear_model.LogisticRegression()\nlogr.fit(X,y)\nNow we have a logistic regression object that is ready to whether a tumor is cancerous based on the tumor size:\n#predict if tumor is cancerous where the size is 3.46mm:\npredicted = logr.predict(numpy.array([3.46]).reshape(-1,1))\nExampleGet your own Python Server\nSee the whole example in action:\nResult\nWe have predicted that a tumor with a size of 3.46mm will not be cancerous.\nREMOVE ADS\nCoefficient\nIn logistic regression the coefficient is the expected change in log-odds of having the outcome per unit change in X.\nThis does not have the most intuitive understanding so let's use it to create something that makes more sense, odds.\nExample\nSee the whole example in action:\nResult\nThis tells us that as the size of a tumor increases by 1mm the odds of it being a cancerous tumor increases by 4x.\nProbability\nThe coefficient and intercept values can be used to find the probability that each tumor is cancerous.\nCreate a function that uses the model's coefficient and intercept values to return a new value. This new value represents probability that the given observation is a tumor:\ndef logit2prob(logr,x):\nlog_odds = logr.coef_ * x + logr.intercept_\nodds = numpy.exp(log_odds)\nprobability = odds / (1 + odds)\nreturn(probability)\nFunction Explained\nTo find the log-odds for each observation, we must first create a formula that looks similar to the one from linear regression, extracting the coefficient and the intercept.\nlog_odds = logr.coef_ * x + logr.intercept_\nTo then convert the log-odds to odds we must exponentiate the log-odds.\nodds = numpy.exp(log_odds)\nNow that we have the odds, we can convert it to probability by dividing it by 1 plus the odds.\nprobability = odds / (1 + odds)\nLet us now use the function with what we have learned to find out the probability that each tumor is cancerous.\nExample\nSee the whole example in action:\nResult\nResults Explained\n3.78 0.61 The probability that a tumor with the size 3.78cm is cancerous is 61%.\n2.44 0.19 The probability that a tumor with the size 2.44cm is cancerous is 19%.\n2.09 0.13 The probability that a tumor with the size 2.09cm is cancerous is 13%.",
      "examples": [
        "[0]",
        "[4.03541657]",
        "[[0.60749955] [0.19268876] [0.12775886] [0.00955221] [0.08038616] [0.07345637] [0.88362743] [0.77901378] [0.88924409] [0.81293497] [0.57719129] [0.96664243]]",
        "import numpy\nfrom sklearn import linear_model\n\n#Reshaped for Logistic function.\nX = numpy.array([3.78, 2.44, 2.09, 0.14, 1.72, 1.65, 4.92, 4.37, 4.96, 4.52, 3.69, 5.88]).reshape(-1,1)\ny = numpy.array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1])\n\nlogr = linear_model.LogisticRegression()\nlogr.fit(X,y)\n\n#predict if tumor is cancerous where the size is 3.46mm:\npredicted = logr.predict(numpy.array([3.46]).reshape(-1,1))\nprint(predicted)",
        "import numpy\nfrom sklearn import linear_model\n\n#Reshaped for Logistic function.\nX = numpy.array([3.78, 2.44, 2.09, 0.14, 1.72, 1.65, 4.92, 4.37, 4.96, 4.52, 3.69, 5.88]).reshape(-1,1)\ny = numpy.array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1])\n\nlogr = linear_model.LogisticRegression()\nlogr.fit(X,y)\n\nlog_odds = logr.coef_\nodds = numpy.exp(log_odds)\n\nprint(odds)",
        "import numpy\nfrom sklearn import linear_model\n\nX = numpy.array([3.78, 2.44, 2.09, 0.14, 1.72, 1.65, 4.92, 4.37, 4.96, 4.52, 3.69, 5.88]).reshape(-1,1)\ny = numpy.array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1])\n\nlogr = linear_model.LogisticRegression()\nlogr.fit(X,y)\n\ndef logit2prob(logr, X):\nlog_odds = logr.coef_ * X + logr.intercept_\nodds = numpy.exp(log_odds)\nprobability = odds / (1 + odds)\nreturn(probability)\n\nprint(logit2prob(logr, X))",
        "import numpy",
        "#X represents the size of a tumor in centimeters.\nX = numpy.array([3.78, 2.44, 2.09, 0.14, 1.72, 1.65, 4.92, 4.37, 4.96, 4.52, 3.69, 5.88]).reshape(-1,1)\n\n#Note: X has to be reshaped into a column from a row for the LogisticRegression() function to work.\n#y represents whether or not the tumor is cancerous (0 for \"No\", 1 for \"Yes\").\ny = numpy.array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1])",
        "from sklearn import linear_model",
        "fit()",
        "logr = linear_model.LogisticRegression()\nlogr.fit(X,y)",
        "#predict if tumor is cancerous where the size is 3.46mm:\npredicted = logr.predict(numpy.array([3.46]).reshape(-1,1))",
        "def logit2prob(logr,x):\nlog_odds = logr.coef_ * x + logr.intercept_\nodds = numpy.exp(log_odds)\nprobability = odds / (1 + odds)\nreturn(probability)",
        "log_odds = logr.coef_ * x + logr.intercept_",
        "odds = numpy.exp(log_odds)",
        "probability = odds / (1 + odds)"
      ]
    },
    {
      "title": "Machine Learning - Grid Search",
      "summary": "Grid Search\nThe majority of machine learning models contain parameters that can be adjusted to vary how the model learns. For example, the logistic regression model, from sklearn, has a parameter C that controls regularization,which affects the complexity of the model.\nHow do we pick the best value for C? The best value is dependent on the data used to train the model.\nHow does it work?\nOne method is to try out different values and then pick the value that gives the best score. This technique is known as a grid search. If we had to select the values for two or more parameters, we would evaluate all combinations of the sets of values thus forming a grid of values.\nBefore we get into the example it is good to know what the parameter we are changing does. Higher values of C tell the model, the training data resembles real world information, place a greater weight on the training data. While lower values of C do the opposite.\nUsing Default Parameters\nFirst let's see what kind of results we can generate without a grid search using only the base parameters.\nTo get started we must first load in the dataset we will be working with.\nfrom sklearn import datasets\niris = datasets.load_iris()\nNext in order to create the model we must have a set of independent variables X and a dependant variable y.\nX = iris['data']\ny = iris['target']\nNow we will load the logistic model for classifying the iris flowers.\nfrom sklearn.linear_model import LogisticRegression\nCreating the model, setting max_iter to a higher value to ensure that the model finds a result.\nKeep in mind the default value for C in a logistic regression model is 1, we will compare this later.\nIn the example below, we look at the iris data set and try to train a model with varying values for C in logistic regression.\nlogit = LogisticRegression(max_iter = 10000)\nAfter we create the model, we must fit the model to the data.\nprint(logit.fit(X,y))\nTo evaluate the model we run the score method.\nprint(logit.score(X,y))\nExampleGet your own Python Server\nWith the default setting of C = 1, we achieved a score of 0.973.\nLet's see if we can do any better by implementing a grid search with difference values of 0.973.\nREMOVE ADS\nImplementing Grid Search\nWe will follow the same steps of before except this time we will set a range of values for C.\nKnowing which values to set for the searched parameters will take a combination of domain knowledge and practice.\nSince the default value for C is 1, we will set a range of values surrounding it.\nC = [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2]\nNext we will create a for loop to change out the values of C and evaluate the model with each change.\nFirst we will create an empty list to store the score within.\nscores = []\nTo change the values of C we must loop over the range of values and update the parameter each time.\nfor choice in C:\nlogit.set_params(C=choice)\nlogit.fit(X, y)\nscores.append(logit.score(X, y))\nWith the scores stored in a list, we can evaluate what the best choice of C is.\nprint(scores)\nExample\nResults Explained\nWe can see that the lower values of C performed worse than the base parameter of 1. However, as we increased the value of C to 1.75 the model experienced increased accuracy.\nIt seems that increasing C beyond this amount does not help increase model accuracy.\nNote on Best Practices\nWe scored our logistic regression model by using the same data that was used to train it. If the model corresponds too closely to that data, it may not be great at predicting unseen data. This statistical error is known as over fitting.\nTo avoid being misled by the scores on the training data, we can put aside a portion of our data and use it specifically for the purpose of testing the model. Refer to the lecture on train/test splitting to avoid being misled and overfitting.",
      "examples": [
        "from sklearn import datasets\nfrom sklearn.linear_model import LogisticRegression\n\niris = datasets.load_iris()\n\nX = iris['data']\ny = iris['target']\n\nlogit = LogisticRegression(max_iter = 10000)\n\nprint(logit.fit(X,y))\n\nprint(logit.score(X,y))",
        "from sklearn import datasets\nfrom sklearn.linear_model import LogisticRegression\n\niris = datasets.load_iris()\n\nX = iris['data']\ny = iris['target']\n\nlogit = LogisticRegression(max_iter = 10000)\n\nC = [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2]\n\nscores = []\n\nfor choice in C:\nlogit.set_params(C=choice)\nlogit.fit(X, y)\nscores.append(logit.score(X, y))\n\nprint(scores)",
        "sklearn",
        "C",
        "from sklearn import datasets\niris = datasets.load_iris()",
        "X = iris['data']\ny = iris['target']",
        "from sklearn.linear_model import LogisticRegression",
        "1",
        "logit = LogisticRegression(max_iter = 10000)",
        "print(logit.fit(X,y))",
        "print(logit.score(X,y))",
        "C = 1",
        "0.973",
        "C = [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2]",
        "scores = []",
        "for choice in C:\nlogit.set_params(C=choice)\nlogit.fit(X, y)\nscores.append(logit.score(X, y))",
        "print(scores)",
        "1.75"
      ]
    },
    {
      "title": "Preprocessing - Categorical Data",
      "summary": "Categorical Data\nWhen your data has categories represented by strings, it will be difficult to use them to train machine learning models which often only accepts numeric data.\nInstead of ignoring the categorical data and excluding the information from our model, you can tranform the data so it can be used in your models.\nTake a look at the table below, it is the same data set that we used in the multiple regression chapter.\nExampleGet your own Python Server\nResult\nIn the multiple regression chapter, we tried to predict the CO2 emitted based on the volume of the engine and the weight of the car but we excluded information about the car brand and model.\nThe information about the car brand or the car model might help us make a better prediction of the CO2 emitted.\nOne Hot Encoding\nWe cannot make use of the Car or Model column in our data since they are not numeric. A linear relationship between a categorical variable, Car or Model, and a numeric variable, CO2, cannot be determined.\nTo fix this issue, we must have a numeric representation of the categorical variable. One way to do this is to have a column representing each group in the category.\nFor each column, the values will be 1 or 0 where 1 represents the inclusion of the group and 0 represents the exclusion. This transformation is called one hot encoding.\nYou do not have to do this manually, the Python Pandas module has a function that called get_dummies() which does one hot encoding.\nLearn about the Pandas module in our Pandas Tutorial.\nExample\nOne Hot Encode the Car column:\nResult\nResults\nA column was created for every car brand in the Car column.\nREMOVE ADS\nPredict CO2\nWe can use this additional information alongside the volume and weight to predict CO2\nTo combine the information, we can use the concat() function from pandas.\nFirst we will need to import a couple modules.\nWe will start with importing the Pandas.\nimport pandas\nThe pandas module allows us to read csv files and manipulate DataFrame objects:\ncars = pandas.read_csv(\"data.csv\")\nIt also allows us to create the dummy variables:\nohe_cars = pandas.get_dummies(cars[['Car']])\nThen we must select the independent variables (X) and add the dummy variables columnwise.\nAlso store the dependent variable in y.\nX = pandas.concat([cars[['Volume', 'Weight']], ohe_cars], axis=1)\ny = cars['CO2']\nWe also need to import a method from sklearn to create a linear model\nLearn about linear regression.\nfrom sklearn import linear_model\nNow we can fit the data to a linear regression:\nregr = linear_model.LinearRegression()\nregr.fit(X,y)\nFinally we can predict the CO2 emissions based on the car's weight, volume, and manufacturer.\n##predict the CO2 emission of a VW where the weight is 2300kg, and the volume is 1300cm3:\npredictedCO2 = regr.predict([[2300, 1300,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0]])\nExample\nResult\nWe now have a coefficient for the volume, the weight, and each car brand in the data set\nDummifying\nIt is not necessary to create one column for each group in your category. The information can be retained using 1 column less than the number of groups you have.\nFor example, you have a column representing colors and in that column, you have two colors, red and blue.\nExample\nResult\nYou can create 1 column called red where 1 represents red and 0 represents not red, which means it is blue.\nTo do this, we can use the same function that we used for one hot encoding, get_dummies, and then drop one of the columns. There is an argument, drop_first, which allows us to exclude the first column from the resulting table.\nExample\nResult\nWhat if you have more than 2 groups? How can the multiple groups be represented by 1 less column?\nLet's say we have three colors this time, red, blue and green. When we get_dummies while dropping the first column, we get the following table.\nExample\nResult",
      "examples": [
        "Car Model Volume Weight CO2 0 Toyoty Aygo 1000 790 99 1 Mitsubishi Space Star 1200 1160 95 2 Skoda Citigo 1000 929 95 3 Fiat 500 900 865 90 4 Mini Cooper 1500 1140 105 5 VW Up! 1000 929 105 6 Skoda Fabia 1400 1109 90 7 Mercedes A-Class 1500 1365 92 8 Ford Fiesta 1500 1112 98 9 Audi A1 1600 1150 99 10 Hyundai I20 1100 980 99 11 Suzuki Swift 1300 990 101 12 Ford Fiesta 1000 1112 99 13 Honda Civic 1600 1252 94 14 Hundai I30 1600 1326 97 15 Opel Astra 1600 1330 97 16 BMW 1 1600 1365 99 17 Mazda 3 2200 1280 104 18 Skoda Rapid 1600 1119 104 19 Ford Focus 2000 1328 105 20 Ford Mondeo 1600 1584 94 21 Opel Insignia 2000 1428 99 22 Mercedes C-Class 2100 1365 99 23 Skoda Octavia 1600 1415 99 24 Volvo S60 2000 1415 99 25 Mercedes CLA 1500 1465 102 26 Audi A4 2000 1490 104 27 Audi A6 2000 1725 114 28 Volvo V70 1600 1523 109 29 BMW 5 2000 1705 114 30 Mercedes E-Class 2100 1605 115 31 Volvo XC70 2000 1746 117 32 Ford B-Max 1600 1235 104 33 BMW 216 1600 1390 108 34 Opel Zafira 1600 1405 109 35 Mercedes SLK 2500 1395 120",
        "Car_Audi Car_BMW Car_Fiat Car_Ford Car_Honda Car_Hundai Car_Hyundai Car_Mazda Car_Mercedes Car_Mini Car_Mitsubishi Car_Opel Car_Skoda Car_Suzuki Car_Toyoty Car_VW Car_Volvo 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 3 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 6 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 7 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 8 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 9 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 11 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 12 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 13 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 14 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 16 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 17 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 18 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 19 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 20 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 21 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 22 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 23 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 24 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 25 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 26 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 27 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 28 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 29 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 30 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 31 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 32 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 33 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 34 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 35 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0",
        "[122.45153299]",
        "color 0 blue 1 red",
        "color_red 0 0 1 1",
        "color_green color_red color 0 0 0 blue 1 0 1 red 2 1 0 green",
        "import pandas as pd\n\ncars = pd.read_csv('data.csv')\nprint(cars.to_string())",
        "import pandas as pd\n\ncars = pd.read_csv('data.csv')\nohe_cars = pd.get_dummies(cars[['Car']])\n\nprint(ohe_cars.to_string())",
        "import pandas\nfrom sklearn import linear_model\n\ncars = pandas.read_csv(\"data.csv\")\nohe_cars = pandas.get_dummies(cars[['Car']])\n\nX = pandas.concat([cars[['Volume', 'Weight']], ohe_cars], axis=1)\ny = cars['CO2']\n\nregr = linear_model.LinearRegression()\nregr.fit(X,y)\n\n##predict the CO2 emission of a VW where the weight is 2300kg, and the volume is 1300cm3:\npredictedCO2 = regr.predict([[2300, 1300,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0]])\n\nprint(predictedCO2)",
        "import pandas as pd\n\ncolors = pd.DataFrame({'color': ['blue', 'red']})\n\nprint(colors)",
        "import pandas as pd\n\ncolors = pd.DataFrame({'color': ['blue', 'red']})\ndummies = pd.get_dummies(colors, drop_first=True)\n\nprint(dummies)",
        "import pandas as pd\n\ncolors = pd.DataFrame({'color': ['blue', 'red', 'green']})\ndummies = pd.get_dummies(colors, drop_first=True)\ndummies['color'] = colors['color']\n\nprint(dummies)",
        "get_dummies()",
        "concat()",
        "import pandas",
        "cars = pandas.read_csv(\"data.csv\")",
        "ohe_cars = pandas.get_dummies(cars[['Car']])",
        "X = pandas.concat([cars[['Volume', 'Weight']], ohe_cars], axis=1)\ny = cars['CO2']",
        "from sklearn import linear_model",
        "regr = linear_model.LinearRegression()\nregr.fit(X,y)",
        "##predict the CO2 emission of a VW where the weight is 2300kg, and the volume is 1300cm3:\npredictedCO2 = regr.predict([[2300, 1300,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0]])"
      ]
    },
    {
      "title": "Machine Learning - K-means",
      "summary": "K-means\nK-means is an unsupervised learning method for clustering data points. The algorithm iteratively divides data points into K clusters by minimizing the variance in each cluster.\nHere, we will show you how to estimate the best value for K using the elbow method, then use K-means clustering to group the data points into clusters.\nHow does it work?\nFirst, each data point is randomly assigned to one of the K clusters. Then, we compute the centroid (functionally the center) of each cluster, and reassign each data point to the cluster with the closest centroid. We repeat this process until the cluster assignments for each data point are no longer changing.\nK-means clustering requires us to select K, the number of clusters we want to group the data into. The elbow method lets us graph the inertia (a distance-based metric) and visualize the point at which it starts decreasing linearly. This point is referred to as the \"elbow\" and is a good estimate for the best value for K based on our data.\nExampleGet your own Python Server\nStart by visualizing some data points:\nResult\nNow we utilize the elbow method to visualize the intertia for different values of K:\nExample\nResult\nThe elbow method shows that 2 is a good value for K, so we retrain and visualize the result:\nExample\nResult\nExample Explained\nImport the modules you need.\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nYou can learn about the Matplotlib module in our \"Matplotlib Tutorial.\nscikit-learn is a popular library for machine learning.\nCreate arrays that resemble two variables in a dataset. Note that while we only use two variables here, this method will work with any number of variables:\nx = [4, 5, 10, 4, 3, 11, 14 , 6, 10, 12]\ny = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]\nTurn the data into a set of points:\ndata = list(zip(x, y))\nprint(data)\nResult:\n[(4, 21), (5, 19), (10, 24), (4, 17), (3, 16), (11, 25), (14, 24), (6, 22), (10, 21), (12, 21)]\nIn order to find the best value for K, we need to run K-means across our data for a range of possible values. We only have 10 data points, so the maximum number of clusters is 10. So for each value K in range(1,11), we train a K-means model and plot the intertia at that number of clusters:\ninertias = []\n\nfor i in range(1,11):\nkmeans = KMeans(n_clusters=i)\nkmeans.fit(data)\ninertias.append(kmeans.inertia_)\n\nplt.plot(range(1,11), inertias, marker='o')\nplt.title('Elbow method')\nplt.xlabel('Number of clusters')\nplt.ylabel('Inertia')\nplt.show()\nResult:\nWe can see that the \"elbow\" on the graph above (where the interia becomes more linear) is at K=2. We can then fit our K-means algorithm one more time and plot the different clusters assigned to the data:\nkmeans = KMeans(n_clusters=2)\nkmeans.fit(data)\n\nplt.scatter(x, y, c=kmeans.labels_)\nplt.show()\nResult:",
      "examples": [
        "import matplotlib.pyplot as plt\n\nx = [4, 5, 10, 4, 3, 11, 14 , 6, 10, 12]\ny = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]\n\nplt.scatter(x, y)\nplt.show()",
        "from sklearn.cluster import KMeans\n\ndata = list(zip(x, y))\ninertias = []\n\nfor i in range(1,11):\nkmeans = KMeans(n_clusters=i)\nkmeans.fit(data)\ninertias.append(kmeans.inertia_)\n\nplt.plot(range(1,11), inertias, marker='o')\nplt.title('Elbow method')\nplt.xlabel('Number of clusters')\nplt.ylabel('Inertia')\nplt.show()",
        "kmeans = KMeans(n_clusters=2)\nkmeans.fit(data)\n\nplt.scatter(x, y, c=kmeans.labels_)\nplt.show()",
        "import matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans",
        "x = [4, 5, 10, 4, 3, 11, 14 , 6, 10, 12]\ny = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]",
        "data = list(zip(x, y))\nprint(data)",
        "[(4, 21), (5, 19), (10, 24), (4, 17), (3, 16), (11, 25), (14, 24), (6, 22), (10, 21), (12, 21)]",
        "inertias = []\n\nfor i in range(1,11):\nkmeans = KMeans(n_clusters=i)\nkmeans.fit(data)\ninertias.append(kmeans.inertia_)\n\nplt.plot(range(1,11), inertias, marker='o')\nplt.title('Elbow method')\nplt.xlabel('Number of clusters')\nplt.ylabel('Inertia')\nplt.show()"
      ]
    },
    {
      "title": "Machine Learning - Bootstrap Aggregation (Bagging)",
      "summary": "Bagging\nMethods such as Decision Trees, can be prone to overfitting on the training set which can lead to wrong predictions on new data.\nBootstrap Aggregation (bagging) is a ensembling method that attempts to resolve overfitting for classification or regression problems. Bagging aims to improve the accuracy and performance of machine learning algorithms. It does this by taking random subsets of an original dataset, with replacement, and fits either a classifier (for classification) or regressor (for regression) to each subset. The predictions for each subset are then aggregated through majority vote for classification or averaging for regression, increasing prediction accuracy.\nEvaluating a Base Classifier\nTo see how bagging can improve model performance, we must start by evaluating how the base classifier performs on the dataset. If you do not know what decision trees are review the lesson on decision trees before moving forward, as bagging is a continuation of the concept.\nWe will be looking to identify different classes of wines found in Sklearn's wine dataset.\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier\nNext we need to load in the data and store it into X (input features) and y (target). The parameter as_frame is set equal to True so we do not lose the feature names when loading the data. (sklearn version older than 0.23 must skip the as_frame argument as it is not supported)\ndata = datasets.load_wine(as_frame = True)\n\nX = data.data\ny = data.target\nIn order to properly evaluate our model on unseen data, we need to split X and y into train and test sets. For information on splitting data, see the Train/Test lesson.\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 22)\nWith our data prepared, we can now instantiate a base classifier and fit it to the training data.\ndtree = DecisionTreeClassifier(random_state = 22)\ndtree.fit(X_train,y_train)\nResult:\nDecisionTreeClassifier(random_state=22)\nWe can now predict the class of wine the unseen test set and evaluate the model performance.\ny_pred = dtree.predict(X_test)\n\nprint(\"Train data accuracy:\",accuracy_score(y_true = y_train, y_pred = dtree.predict(X_train)))\nprint(\"Test data accuracy:\",accuracy_score(y_true = y_test, y_pred = y_pred))\nResult:\nTrain data accuracy: 1.0\nTest data accuracy: 0.8222222222222222\nExampleGet your own Python Server\nImport the necessary data and evaluate base classifier performance.\nThe base classifier performs reasonably well on the dataset achieving 82% accuracy on the test dataset with the current parameters (Different results may occur if you do not have the random_state parameter set).\nNow that we have a baseline accuracy for the test dataset, we can see how the Bagging Classifier out performs a single Decision Tree Classifier.\nREMOVE ADS\nCreating a Bagging Classifier\nFor bagging we need to set the parameter n_estimators, this is the number of base classifiers that our model is going to aggregate together.\nFor this sample dataset the number of estimators is relatively low, it is often the case that much larger ranges are explored. Hyperparameter tuning is usually done with a grid search, but for now we will use a select set of values for the number of estimators.\nWe start by importing the necessary model.\nfrom sklearn.ensemble import BaggingClassifier\nNow lets create a range of values that represent the number of estimators we want to use in each ensemble.\nestimator_range = [2,4,6,8,10,12,14,16]\nTo see how the Bagging Classifier performs with differing values of n_estimators we need a way to iterate over the range of values and store the results from each ensemble. To do this we will create a for loop, storing the models and scores in separate lists for later visualizations.\nNote: The default parameter for the base classifier in BaggingClassifier is the DecisionTreeClassifier therefore we do not need to set it when instantiating the bagging model.\nmodels = []\nscores = []\n\nfor n_estimators in estimator_range:\n\n# Create bagging classifier\nclf = BaggingClassifier(n_estimators = n_estimators, random_state = 22)\n\n# Fit the model\nclf.fit(X_train, y_train)\n\n# Append the model and score to their respective list\nmodels.append(clf)\nscores.append(accuracy_score(y_true = y_test, y_pred = clf.predict(X_test)))\nWith the models and scores stored, we can now visualize the improvement in model performance.\nimport matplotlib.pyplot as plt\n\n# Generate the plot of scores against number of estimators\nplt.figure(figsize=(9,6))\nplt.plot(estimator_range, scores)\n\n# Adjust labels and font (to make visable)\nplt.xlabel(\"n_estimators\", fontsize = 18)\nplt.ylabel(\"score\", fontsize = 18)\nplt.tick_params(labelsize = 16)\n\n# Visualize plot\nplt.show()\nExample\nImport the necessary data and evaluate the BaggingClassifier performance.\nResult\nResults Explained\nBy iterating through different values for the number of estimators we can see an increase in model performance from 82.2% to 95.5%. After 14 estimators the accuracy begins to drop, again if you set a different random_state the values you see will vary. That is why it is best practice to use cross validation to ensure stable results.\nIn this case, we see a 13.3% increase in accuracy when it comes to identifying the type of the wine.\nAnother Form of Evaluation\nAs bootstrapping chooses random subsets of observations to create classifiers, there are observations that are left out in the selection process. These \"out-of-bag\" observations can then be used to evaluate the model, similarly to that of a test set. Keep in mind, that out-of-bag estimation can overestimate error in binary classification problems and should only be used as a compliment to other metrics.\nWe saw in the last exercise that 12 estimators yielded the highest accuracy, so we will use that to create our model. This time setting the parameter oob_score to true to evaluate the model with out-of-bag score.\nExample\nCreate a model with out-of-bag metric.\nSince the samples used in OOB and the test set are different, and the dataset is relatively small, there is a difference in the accuracy. It is rare that they would be exactly the same, again OOB should be used quick means for estimating error, but is not the only evaluation metric.\nGenerating Decision Trees from Bagging Classifier\nAs was seen in the Decision Tree lesson, it is possible to graph the decision tree the model created. It is also possible to see the individual decision trees that went into the aggregated classifier. This helps us to gain a more intuitive understanding on how the bagging model arrives at its predictions.\nNote: This is only functional with smaller datasets, where the trees are relatively shallow and narrow making them easy to visualize.\nWe will need to import plot_tree function from sklearn.tree. The different trees can be graphed by changing the estimator you wish to visualize.\nExample\nGenerate Decision Trees from Bagging Classifier\nResult\nHere we can see just the first decision tree that was used to vote on the final prediction. Again, by changing the index of the classifier you can see each of the trees that have been aggregated.",
      "examples": [
        "from sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier\n\ndata = datasets.load_wine(as_frame = True)\n\nX = data.data\ny = data.target\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 22)\n\ndtree = DecisionTreeClassifier(random_state = 22)\ndtree.fit(X_train,y_train)\n\ny_pred = dtree.predict(X_test)\n\nprint(\"Train data accuracy:\",accuracy_score(y_true = y_train, y_pred = dtree.predict(X_train)))\nprint(\"Test data accuracy:\",accuracy_score(y_true = y_test, y_pred = y_pred))",
        "import matplotlib.pyplot as plt\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import BaggingClassifier\n\ndata = datasets.load_wine(as_frame = True)\n\nX = data.data\ny = data.target\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 22)\n\nestimator_range = [2,4,6,8,10,12,14,16]\n\nmodels = []\nscores = []\n\nfor n_estimators in estimator_range:\n\n# Create bagging classifier\nclf = BaggingClassifier(n_estimators = n_estimators, random_state = 22)\n\n# Fit the model\nclf.fit(X_train, y_train)\n\n# Append the model and score to their respective list\nmodels.append(clf)\nscores.append(accuracy_score(y_true = y_test, y_pred = clf.predict(X_test)))\n\n# Generate the plot of scores against number of estimators\nplt.figure(figsize=(9,6))\nplt.plot(estimator_range, scores)\n\n# Adjust labels and font (to make visable)\nplt.xlabel(\"n_estimators\", fontsize = 18)\nplt.ylabel(\"score\", fontsize = 18)\nplt.tick_params(labelsize = 16)\n\n# Visualize plot\nplt.show()",
        "from sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import BaggingClassifier\n\ndata = datasets.load_wine(as_frame = True)\n\nX = data.data\ny = data.target\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 22)\n\noob_model = BaggingClassifier(n_estimators = 12, oob_score = True,random_state = 22)\n\noob_model.fit(X_train, y_train)\n\nprint(oob_model.oob_score_)",
        "from sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.tree import plot_tree\n\nX = data.data\ny = data.target\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 22)\n\nclf = BaggingClassifier(n_estimators = 12, oob_score = True,random_state = 22)\n\nclf.fit(X_train, y_train)\n\nplt.figure(figsize=(30, 20))\n\nplot_tree(clf.estimators_[0], feature_names = X.columns)",
        "from sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier",
        "sklearn",
        "as_frame",
        "data = datasets.load_wine(as_frame = True)\n\nX = data.data\ny = data.target",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 22)",
        "dtree = DecisionTreeClassifier(random_state = 22)\ndtree.fit(X_train,y_train)",
        "DecisionTreeClassifier(random_state=22)",
        "y_pred = dtree.predict(X_test)\n\nprint(\"Train data accuracy:\",accuracy_score(y_true = y_train, y_pred = dtree.predict(X_train)))\nprint(\"Test data accuracy:\",accuracy_score(y_true = y_test, y_pred = y_pred))",
        "Train data accuracy: 1.0\nTest data accuracy: 0.8222222222222222",
        "random_state",
        "from sklearn.ensemble import BaggingClassifier",
        "estimator_range = [2,4,6,8,10,12,14,16]",
        "BaggingClassifier",
        "DecisionTreeClassifier",
        "models = []\nscores = []\n\nfor n_estimators in estimator_range:\n\n# Create bagging classifier\nclf = BaggingClassifier(n_estimators = n_estimators, random_state = 22)\n\n# Fit the model\nclf.fit(X_train, y_train)\n\n# Append the model and score to their respective list\nmodels.append(clf)\nscores.append(accuracy_score(y_true = y_test, y_pred = clf.predict(X_test)))",
        "import matplotlib.pyplot as plt\n\n# Generate the plot of scores against number of estimators\nplt.figure(figsize=(9,6))\nplt.plot(estimator_range, scores)\n\n# Adjust labels and font (to make visable)\nplt.xlabel(\"n_estimators\", fontsize = 18)\nplt.ylabel(\"score\", fontsize = 18)\nplt.tick_params(labelsize = 16)\n\n# Visualize plot\nplt.show()",
        "oob_score",
        "plot_tree",
        "sklearn.tree"
      ]
    },
    {
      "title": "Machine Learning - Cross Validation",
      "summary": "Cross Validation\nWhen adjusting models we are aiming to increase overall model performance on unseen data. Hyperparameter tuning can lead to much better performance on test sets. However, optimizing parameters to the test set can lead information leakage causing the model to preform worse on unseen data. To correct for this we can perform cross validation.\nTo better understand CV, we will be performing different methods on the iris dataset. Let us first load in and separate the data.\nfrom sklearn import datasets\n\nX, y = datasets.load_iris(return_X_y=True)\nThere are many methods to cross validation, we will start by looking at k-fold cross validation.\nK-Fold\nThe training data used in the model is split, into k number of smaller sets, to be used to validate the model. The model is then trained on k-1 folds of training set. The remaining fold is then used as a validation set to evaluate the model.\nAs we will be trying to classify different species of iris flowers we will need to import a classifier model, for this exercise we will be using a DecisionTreeClassifier. We will also need to import CV modules from sklearn.\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import KFold, cross_val_score\nWith the data loaded we can now create and fit a model for evaluation.\nclf = DecisionTreeClassifier(random_state=42)\nNow let's evaluate our model and see how it performs on each k-fold.\nk_folds = KFold(n_splits = 5)\n\nscores = cross_val_score(clf, X, y, cv = k_folds)\nIt is also good pratice to see how CV performed overall by averaging the scores for all folds.\nExampleGet your own Python Server\nRun k-fold CV:\nREMOVE ADS\nStratified K-Fold\nIn cases where classes are imbalanced we need a way to account for the imbalance in both the train and validation sets. To do so we can stratify the target classes, meaning that both sets will have an equal proportion of all classes.\nExample\nWhile the number of folds is the same, the average CV increases from the basic k-fold when making sure there is stratified classes.\nLeave-One-Out (LOO)\nInstead of selecting the number of splits in the training data set like k-fold LeaveOneOut, utilize 1 observation to validate and n-1 observations to train. This method is an exaustive technique.\nExample\nRun LOO CV:\nWe can observe that the number of cross validation scores performed is equal to the number of observations in the dataset. In this case there are 150 observations in the iris dataset.\nThe average CV score is 94%.\nLeave-P-Out (LPO)\nLeave-P-Out is simply a nuanced diffence to the Leave-One-Out idea, in that we can select the number of p to use in our validation set.\nExample\nRun LPO CV:\nAs we can see this is an exhaustive method we many more scores being calculated than Leave-One-Out, even with a p = 2, yet it achieves roughly the same average CV score.\nShuffle Split\nUnlike KFold, ShuffleSplit leaves out a percentage of the data, not to be used in the train or validation sets. To do so we must decide what the train and test sizes are, as well as the number of splits.\nExample\nRun Shuffle Split CV:\nEnding Notes\nThese are just a few of the CV methods that can be applied to models. There are many more cross validation classes, with most models having their own class. Check out sklearns cross validation for more CV options.",
      "examples": [
        "from sklearn import datasets\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import KFold, cross_val_score\n\nX, y = datasets.load_iris(return_X_y=True)\n\nclf = DecisionTreeClassifier(random_state=42)\n\nk_folds = KFold(n_splits = 5)\n\nscores = cross_val_score(clf, X, y, cv = k_folds)\n\nprint(\"Cross Validation Scores: \", scores)\nprint(\"Average CV Score: \", scores.mean())\nprint(\"Number of CV Scores used in Average: \", len(scores))",
        "from sklearn import datasets\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import StratifiedKFold, cross_val_score\n\nX, y = datasets.load_iris(return_X_y=True)\n\nclf = DecisionTreeClassifier(random_state=42)\n\nsk_folds = StratifiedKFold(n_splits = 5)\n\nscores = cross_val_score(clf, X, y, cv = sk_folds)\n\nprint(\"Cross Validation Scores: \", scores)\nprint(\"Average CV Score: \", scores.mean())\nprint(\"Number of CV Scores used in Average: \", len(scores))",
        "from sklearn import datasets\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import LeaveOneOut, cross_val_score\n\nX, y = datasets.load_iris(return_X_y=True)\n\nclf = DecisionTreeClassifier(random_state=42)\n\nloo = LeaveOneOut()\n\nscores = cross_val_score(clf, X, y, cv = loo)\n\nprint(\"Cross Validation Scores: \", scores)\nprint(\"Average CV Score: \", scores.mean())\nprint(\"Number of CV Scores used in Average: \", len(scores))",
        "from sklearn import datasets\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import LeavePOut, cross_val_score\n\nX, y = datasets.load_iris(return_X_y=True)\n\nclf = DecisionTreeClassifier(random_state=42)\n\nlpo = LeavePOut(p=2)\n\nscores = cross_val_score(clf, X, y, cv = lpo)\n\nprint(\"Cross Validation Scores: \", scores)\nprint(\"Average CV Score: \", scores.mean())\nprint(\"Number of CV Scores used in Average: \", len(scores))",
        "from sklearn import datasets\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import ShuffleSplit, cross_val_score\n\nX, y = datasets.load_iris(return_X_y=True)\n\nclf = DecisionTreeClassifier(random_state=42)\n\nss = ShuffleSplit(train_size=0.6, test_size=0.3, n_splits = 5)\n\nscores = cross_val_score(clf, X, y, cv = ss)\n\nprint(\"Cross Validation Scores: \", scores)\nprint(\"Average CV Score: \", scores.mean())\nprint(\"Number of CV Scores used in Average: \", len(scores))",
        "from sklearn import datasets\n\nX, y = datasets.load_iris(return_X_y=True)",
        "DecisionTreeClassifier",
        "sklearn",
        "from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import KFold, cross_val_score",
        "clf = DecisionTreeClassifier(random_state=42)",
        "k_folds = KFold(n_splits = 5)\n\nscores = cross_val_score(clf, X, y, cv = k_folds)",
        "KFold",
        "ShuffleSplit"
      ]
    },
    {
      "title": "Machine Learning - AUC - ROC Curve",
      "summary": "AUC - ROC Curve\nIn classification, there are many different evaluation metrics. The most popular is accuracy, which measures how often the model is correct. This is a great metric because it is easy to understand and getting the most correct guesses is often desired. There are some cases where you might consider using another evaluation metric.\nAnother common metric is AUC, area under the receiver operating characteristic (ROC) curve. The Reciever operating characteristic curve plots the true positive (TP) rate versus the false positive (FP) rate at different classification thresholds. The thresholds are different probability cutoffs that separate the two classes in binary classification. It uses probability to tell us how well a model separates the classes.\nImbalanced Data\nSuppose we have an imbalanced data set where the majority of our data is of one value. We can obtain high accuracy for the model by predicting the majority class.\nExampleGet your own Python Server\nAlthough we obtain a very high accuracy, the model provided no information about the data so it's not useful. We accurately predict class 1 100% of the time while inaccurately predict class 0 0% of the time. At the expense of accuracy, it might be better to have a model that can somewhat separate the two classes.\nExample\nFor the second set of predictions, we do not have as high of an accuracy score as the first but the accuracy for each class is more balanced. Using accuracy as an evaluation metric we would rate the first model higher than the second even though it doesn't tell us anything about the data.\nIn cases like this, using another evaluation metric like AUC would be preferred.\nimport matplotlib.pyplot as plt\n\ndef plot_roc_curve(true_y, y_prob):\n\"\"\"\nplots the roc curve based of the probabilities\n\"\"\"\n\nfpr, tpr, thresholds = roc_curve(true_y, y_prob)\nplt.plot(fpr, tpr)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nExample\nModel 1:\nResult\nmodel 1 AUC score: 0.5\nExample\nModel 2:\nResult\nmodel 2 AUC score: 0.8270551578947367\nAn AUC score of around .5 would mean that the model is unable to make a distinction between the two classes and the curve would look like a line with a slope of 1. An AUC score closer to 1 means that the model has the ability to separate the two classes and the curve would come closer to the top left corner of the graph.\nREMOVE ADS\nProbabilities\nBecause AUC is a metric that utilizes probabilities of the class predictions, we can be more confident in a model that has a higher AUC score than one with a lower score even if they have similar accuracies.\nIn the data below, we have two sets of probabilites from hypothetical models. The first has probabilities that are not as \"confident\" when predicting the two classes (the probabilities are close to .5). The second has probabilities that are more \"confident\" when predicting the two classes (the probabilities are close to the extremes of 0 or 1).\nExample\nExample\nPlot model 1:\nResult\nExample\nPlot model 2:\nResult\nEven though the accuracies for the two models are similar, the model with the higher AUC score will be more reliable because it takes into account the predicted probability. It is more likely to give you higher accuracy when predicting future data.",
      "examples": [
        "import numpy as np\nfrom sklearn.metrics import accuracy_score, confusion_matrix, roc_auc_score, roc_curve\n\nn = 10000\nratio = .95\nn_0 = int((1-ratio) * n)\nn_1 = int(ratio * n)\n\ny = np.array([0] * n_0 + [1] * n_1)\n# below are the probabilities obtained from a hypothetical model that always predicts the majority class\n# probability of predicting class 1 is going to be 100%\ny_proba = np.array([1]*n)\ny_pred = y_proba > .5\n\nprint(f'accuracy score: {accuracy_score(y, y_pred)}')\ncf_mat = confusion_matrix(y, y_pred)\nprint('Confusion matrix')\nprint(cf_mat)\nprint(f'class 0 accuracy: {cf_mat[0][0]/n_0}')\nprint(f'class 1 accuracy: {cf_mat[1][1]/n_1}')",
        "# below are the probabilities obtained from a hypothetical model that doesn't always predict the mode\ny_proba_2 = np.array(\nnp.random.uniform(0, .7, n_0).tolist() +\nnp.random.uniform(.3, 1, n_1).tolist()\n)\ny_pred_2 = y_proba_2 > .5\n\nprint(f'accuracy score: {accuracy_score(y, y_pred_2)}')\ncf_mat = confusion_matrix(y, y_pred_2)\nprint('Confusion matrix')\nprint(cf_mat)\nprint(f'class 0 accuracy: {cf_mat[0][0]/n_0}')\nprint(f'class 1 accuracy: {cf_mat[1][1]/n_1}')",
        "plot_roc_curve(y, y_proba)\nprint(f'model 1 AUC score: {roc_auc_score(y, y_proba)}')",
        "plot_roc_curve(y, y_proba_2)\nprint(f'model 2 AUC score: {roc_auc_score(y, y_proba_2)}')",
        "import numpy as np\n\nn = 10000\ny = np.array([0] * n + [1] * n)\n#\ny_prob_1 = np.array(\nnp.random.uniform(.25, .5, n//2).tolist() +\nnp.random.uniform(.3, .7, n).tolist() +\nnp.random.uniform(.5, .75, n//2).tolist()\n)\ny_prob_2 = np.array(\nnp.random.uniform(0, .4, n//2).tolist() +\nnp.random.uniform(.3, .7, n).tolist() +\nnp.random.uniform(.6, 1, n//2).tolist()\n)\n\nprint(f'model 1 accuracy score: {accuracy_score(y, y_prob_1>.5)}')\nprint(f'model 2 accuracy score: {accuracy_score(y, y_prob_2>.5)}')\n\nprint(f'model 1 AUC score: {roc_auc_score(y, y_prob_1)}')\nprint(f'model 2 AUC score: {roc_auc_score(y, y_prob_2)}')",
        "plot_roc_curve(y, y_prob_1)",
        "fpr, tpr, thresholds = roc_curve(y, y_prob_2)\nplt.plot(fpr, tpr)",
        "import matplotlib.pyplot as plt\n\ndef plot_roc_curve(true_y, y_prob):\n\"\"\"\nplots the roc curve based of the probabilities\n\"\"\"\n\nfpr, tpr, thresholds = roc_curve(true_y, y_prob)\nplt.plot(fpr, tpr)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')"
      ]
    },
    {
      "title": "Machine Learning - K-nearest neighbors (KNN)",
      "summary": "KNN\nKNN is a simple, supervised machine learning (ML) algorithm that can be used for classification or regression tasks - and is also frequently used in missing value imputation. It is based on the idea that the observations closest to a given data point are the most \"similar\" observations in a data set, and we can therefore classify unforeseen points based on the values of the closest existing points. By choosing K, the user can select the number of nearby observations to use in the algorithm.\nHere, we will show you how to implement the KNN algorithm for classification, and show how different values of K affect the results.\nHow does it work?\nK is the number of nearest neighbors to use. For classification, a majority vote is used to determined which class a new observation should fall into. Larger values of K are often more robust to outliers and produce more stable decision boundaries than very small values (K=3 would be better than K=1, which might produce undesirable results.\nExampleGet your own Python Server\nStart by visualizing some data points:\nResult\nNow we fit the KNN algorithm with K=1:\nfrom sklearn.neighbors import KNeighborsClassifier\n\ndata = list(zip(x, y))\nknn = KNeighborsClassifier(n_neighbors=1)\n\nknn.fit(data, classes)\nAnd use it to classify a new data point:\nExample\nResult\nNow we do the same thing, but with a higher K value which changes the prediction:\nExample\nResult\nExample Explained\nImport the modules you need.\nYou can learn about the Matplotlib module in our \"Matplotlib Tutorial.\nscikit-learn is a popular library for machine learning in Python.\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nCreate arrays that resemble variables in a dataset. We have two input features (x and y) and then a target class (class). The input features that are pre-labeled with our target class will be used to predict the class of new data. Note that while we only use two input features here, this method will work with any number of variables:\nx = [4, 5, 10, 4, 3, 11, 14 , 8, 10, 12]\ny = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]\nclasses = [0, 0, 1, 0, 0, 1, 1, 0, 1, 1]\nTurn the input features into a set of points:\ndata = list(zip(x, y))\nprint(data)\nResult:\n[(4, 21), (5, 19), (10, 24), (4, 17), (3, 16), (11, 25), (14, 24), (8, 22), (10, 21), (12, 21)]\nUsing the input features and target class, we fit a KNN model on the model using 1 nearest neighbor:\nknn = KNeighborsClassifier(n_neighbors=1)\nknn.fit(data, classes)\nThen, we can use the same KNN object to predict the class of new, unforeseen data points. First we create new x and y features, and then call knn.predict() on the new data point to get a class of 0 or 1:\nnew_x = 8\nnew_y = 21\nnew_point = [(new_x, new_y)]\nprediction = knn.predict(new_point)\nprint(prediction)\nResult:\n[0]\nWhen we plot all the data along with the new point and class, we can see it's been labeled blue with the 1 class. The text annotation is just to highlight the location of the new point:\nplt.scatter(x + [new_x], y + [new_y], c=classes + [prediction[0]])\nplt.text(x=new_x-1.7, y=new_y-0.7, s=f\"new point, class: {prediction[0]}\")\nplt.show()\nResult:\nHowever, when we changes the number of neighbors to 5, the number of points used to classify our new point changes. As a result, so does the classification of the new point:\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(data, classes)\nprediction = knn.predict(new_point)\nprint(prediction)\nResult:\n[1]\nWhen we plot the class of the new point along with the older points, we note that the color has changed based on the associated class label:\nplt.scatter(x + [new_x], y + [new_y], c=classes + [prediction[0]])\nplt.text(x=new_x-1.7, y=new_y-0.7, s=f\"new point, class: {prediction[0]}\")\nplt.show()\nResult:",
      "examples": [
        "import matplotlib.pyplot as plt\n\nx = [4, 5, 10, 4, 3, 11, 14 , 8, 10, 12]\ny = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]\nclasses = [0, 0, 1, 0, 0, 1, 1, 0, 1, 1]\n\nplt.scatter(x, y, c=classes)\nplt.show()",
        "new_x = 8\nnew_y = 21\nnew_point = [(new_x, new_y)]\n\nprediction = knn.predict(new_point)\n\nplt.scatter(x + [new_x], y + [new_y], c=classes + [prediction[0]])\nplt.text(x=new_x-1.7, y=new_y-0.7, s=f\"new point, class: {prediction[0]}\")\nplt.show()",
        "knn = KNeighborsClassifier(n_neighbors=5)\n\nknn.fit(data, classes)\n\nprediction = knn.predict(new_point)\n\nplt.scatter(x + [new_x], y + [new_y], c=classes + [prediction[0]])\nplt.text(x=new_x-1.7, y=new_y-0.7, s=f\"new point, class: {prediction[0]}\")\nplt.show()",
        "from sklearn.neighbors import KNeighborsClassifier\n\ndata = list(zip(x, y))\nknn = KNeighborsClassifier(n_neighbors=1)\n\nknn.fit(data, classes)",
        "import matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier",
        "x",
        "y",
        "class",
        "x = [4, 5, 10, 4, 3, 11, 14 , 8, 10, 12]\ny = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]\nclasses = [0, 0, 1, 0, 0, 1, 1, 0, 1, 1]",
        "data = list(zip(x, y))\nprint(data)",
        "[(4, 21), (5, 19), (10, 24), (4, 17), (3, 16), (11, 25), (14, 24), (8, 22), (10, 21), (12, 21)]",
        "knn = KNeighborsClassifier(n_neighbors=1)\nknn.fit(data, classes)",
        "knn.predict()",
        "new_x = 8\nnew_y = 21\nnew_point = [(new_x, new_y)]\nprediction = knn.predict(new_point)\nprint(prediction)",
        "[0]",
        "1",
        "plt.scatter(x + [new_x], y + [new_y], c=classes + [prediction[0]])\nplt.text(x=new_x-1.7, y=new_y-0.7, s=f\"new point, class: {prediction[0]}\")\nplt.show()",
        "knn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(data, classes)\nprediction = knn.predict(new_point)\nprint(prediction)",
        "[1]"
      ]
    },
    {
      "title": "DSA with Python",
      "summary": "Data Structures is about how data can be stored in different structures.\nAlgorithms is about how to solve different problems, often by searching through and manipulating data structures.\nUnderstanding DSA helps you to find the best combination of Data Structures and Algorithms to create more efficient code.\nData Structures\nData Structures are a way of storing and organizing data in a computer.\nPython has built-in support for several data structures, such as lists, dictionaries, and sets.\nOther data structures can be implemented using Python classes and objects, such as linked lists, stacks, queues, trees, and graphs.\nIn this tutorial we will concentrate on these Data Structures:\nLists and Arrays\nStacks\nQueues\nLinked Lists\nHash Tables\nTrees\nBinary Trees\nBinary Search Trees\nAVL Trees\nBinary Trees\nBinary Search Trees\nAVL Trees\nGraphs\nAlgorithms\nAlgorithms are a way of working with data in a computer and solving problems like sorting, searching, etc.\nIn this tutorial we will concentrate on these search and sort Algorithms:\nLinear Search\nBinary Search\nBubble Sort\nSelection Sort\nInsertion Sort\nQuick Sort\nCounting Sort\nRadix Sort\nMerge Sort\nWhy Learn DSA with Python\nPython has a clean readable syntax\nDSA allows you to improve problem-solving skills\nDSA and Python helps you write more efficient code\nDSA gives you a better understanding of memory storage\nDSA helps you handle complex programming challenges\nPython is widely used in Data Science and Machine Learning",
      "examples": []
    },
    {
      "title": "Python Lists and Arrays",
      "summary": "In Python, lists are the built-in data structure that serves as a dynamic array.\nLists are ordered, mutable, and can contain elements of different types.\nLists\nA list is a built-in data structure in Python, used to store multiple elements.\nLists are used by many algorithms.\nCreating Lists\nLists are created using square brackets []:\nExampleGet your own Python Server\nList Methods\nPython lists come with several built-in algorithms (called methods), to perform common operations like appending, sorting, and more.\nExample\nAppend one element to the list, and sort the list ascending:\nCreate Algorithms\nSometimes we want to perform actions that are not built into Python.\nThen we can create our own algorithms.\nFor example, an algorithm can be used to find the lowest value in a list, like in the example below:\nExample\nCreate an algorithm to find the lowest value in a list:\nThe algorithm above is very simple, and fast enough for small data sets, but if the data is big enough, any algorithm will take time to run.\nThis is where optimization comes in.\nOptimization is an important part of algorithm development, and of course, an important part of DSA programming.\nTime Complexity\nWhen exploring algorithms, we often look at how much time an algorithm takes to run relative to the size of the data set.\nIn the example above, the time the algorithm needs to run is proportional, or linear, to the size of the data set. This is because the algorithm must visit every array element one time to find the lowest value. The loop must run 5 times since there are 5 values in the array. And if the array had 1000 values, the loop would have to run 1000 times.\nTry the simulation below to see this relationship between the number of compare operations needed to find the lowest value, and the size of the array.\nSee this page for a more thorough explanation of what time complexity is.\nEach algorithm in this tutorial will be presented together with its time complexity.",
      "examples": [
        "# Empty list\nx = []\n\n# List with initial values\ny = [1, 2, 3, 4, 5]\n\n# List with mixed types\nz = [1, \"hello\", 3.14, True]",
        "x = [9, 12, 7, 4, 11]\n\n# Add element:\nx.append(8)\n\n# Sort list ascending:\nx.sort()",
        "my_array = [7, 12, 9, 4, 11, 8]\nminVal = my_array[0]\n\nfor i in my_array:\nif i < minVal:\nminVal = i\n\nprint('Lowest value:', minVal)",
        "[]"
      ]
    },
    {
      "title": "Stacks with Python",
      "summary": "A stack is a linear data structure that follows the Last-In-First-Out (LIFO) principle.\nThink of it like a stack of pancakes - you can only add or remove pancakes from the top.\nStacks\nA stack is a data structure that can hold many elements, and the last element added is the first one to be removed.\nLike a pile of pancakes, the pancakes are both added and removed from the top. So when removing a pancake, it will always be the last pancake you added. This way of organizing elements is called LIFO: Last In First Out.\nBasic operations we can do on a stack are:\nPush: Adds a new element on the stack.\nPop: Removes and returns the top element from the stack.\nPeek: Returns the top (last) element on the stack.\nisEmpty: Checks if the stack is empty.\nSize: Finds the number of elements in the stack.\nStacks can be implemented by using arrays or linked lists.\nStacks can be used to implement undo mechanisms, to revert to previous states, to create algorithms for depth-first search in graphs, or for backtracking.\nStacks are often mentioned together with Queues, which is a similar data structure described on the next page.\nStack Implementation using Python Lists\nFor Python lists (and arrays), a stack can look and behave like this:\nSince Python lists has good support for functionality needed to implement stacks, we start with creating a stack and do stack operations with just a few lines like this:\nExampleGet your own Python Server\nUsing a Python list as a stack:\nWhile Python lists can be used as stacks, creating a dedicated Stack class provides better encapsulation and additional functionality:\nExample\nCreating a stack using class:\nReasons to implement stacks using lists/arrays:\nMemory Efficient: Array elements do not hold the next elements address like linked list nodes do.\nEasier to implement and understand: Using arrays to implement stacks require less code than using linked lists, and for this reason it is typically easier to understand as well.\nA reason for not using arrays to implement stacks:\nFixed size: An array occupies a fixed part of the memory. This means that it could take up more memory than needed, or if the array fills up, it cannot hold more elements.\nStack Implementation using Linked Lists\nA linked list consists of nodes with some sort of data, and a pointer to the next node.\nA big benefit with using linked lists is that nodes are stored wherever there is free space in memory, the nodes do not have to be stored contiguously right after each other like elements are stored in arrays. Another nice thing with linked lists is that when adding or removing nodes, the rest of the nodes in the list do not have to be shifted.\nTo better understand the benefits with using arrays or linked lists to implement stacks, you should check out this page that explains how arrays and linked lists are stored in memory.\nThis is how a stack can be implemented using a linked list.\nExample\nCreating a Stack using a Linked List:\nA reason for using linked lists to implement stacks:\nDynamic size: The stack can grow and shrink dynamically, unlike with arrays.\nReasons for not using linked lists to implement stacks:\nExtra memory: Each stack element must contain the address to the next element (the next linked list node).\nReadability: The code might be harder to read and write for some because it is longer and more complex.\nCommon Stack Applications\nStacks are used in many real-world scenarios:\nUndo/Redo operations in text editors\nBrowser history (back/forward)\nFunction call stack in programming\nExpression evaluation",
      "examples": [
        "stack = []\n\n# Push\nstack.append('A')\nstack.append('B')\nstack.append('C')\nprint(\"Stack: \", stack)\n\n# Peek\ntopElement = stack[-1]\nprint(\"Peek: \", topElement)\n\n# Pop\npoppedElement = stack.pop()\nprint(\"Pop: \", poppedElement)\n\n# Stack after Pop\nprint(\"Stack after Pop: \", stack)\n\n# isEmpty\nisEmpty = not bool(stack)\nprint(\"isEmpty: \", isEmpty)\n\n# Size\nprint(\"Size: \",len(stack))",
        "class Stack:\ndef __init__(self):\nself.stack = []\n\ndef push(self, element):\nself.stack.append(element)\n\ndef pop(self):\nif self.isEmpty():\nreturn \"Stack is empty\"\nreturn self.stack.pop()\n\ndef peek(self):\nif self.isEmpty():\nreturn \"Stack is empty\"\nreturn self.stack[-1]\n\ndef isEmpty(self):\nreturn len(self.stack) == 0\n\ndef size(self):\nreturn len(self.stack)\n\n# Create a stack\nmyStack = Stack()\n\nmyStack.push('A')\nmyStack.push('B')\nmyStack.push('C')\n\nprint(\"Stack: \", myStack.stack)\nprint(\"Pop: \", myStack.pop())\nprint(\"Stack after Pop: \", myStack.stack)\nprint(\"Peek: \", myStack.peek())\nprint(\"isEmpty: \", myStack.isEmpty())\nprint(\"Size: \", myStack.size())",
        "class Node:\ndef __init__(self, value):\nself.value = value\nself.next = None\n\nclass Stack:\ndef __init__(self):\nself.head = None\nself.size = 0\n\ndef push(self, value):\nnew_node = Node(value)\nif self.head:\nnew_node.next = self.head\nself.head = new_node\nself.size += 1\n\ndef pop(self):\nif self.isEmpty():\nreturn \"Stack is empty\"\npopped_node = self.head\nself.head = self.head.next\nself.size -= 1\nreturn popped_node.value\n\ndef peek(self):\nif self.isEmpty():\nreturn \"Stack is empty\"\nreturn self.head.value\n\ndef isEmpty(self):\nreturn self.size == 0\n\ndef stackSize(self):\nreturn self.size\n\ndef traverseAndPrint(self):\ncurrentNode = self.head\nwhile currentNode:\nprint(currentNode.value, end=\" -> \")\ncurrentNode = currentNode.next\nprint()\n\nmyStack = Stack()\nmyStack.push('A')\nmyStack.push('B')\nmyStack.push('C')\n\nprint(\"LinkedList: \", end=\"\")\nmyStack.traverseAndPrint()\nprint(\"Peek: \", myStack.peek())\nprint(\"Pop: \", myStack.pop())\nprint(\"LinkedList after Pop: \", end=\"\")\nmyStack.traverseAndPrint()\nprint(\"isEmpty: \", myStack.isEmpty())\nprint(\"Size: \", myStack.stackSize())"
      ]
    },
    {
      "title": "Queues with Python",
      "summary": "A queue is a linear data structure that follows the First-In-First-Out (FIFO) principle.\nQueues\nThink of a queue as people standing in line in a supermarket.\nThe first person to stand in line is also the first who can pay and leave the supermarket.\nBasic operations we can do on a queue are:\nEnqueue: Adds a new element to the queue.\nDequeue: Removes and returns the first (front) element from the queue.\nPeek: Returns the first element in the queue.\nisEmpty: Checks if the queue is empty.\nSize: Finds the number of elements in the queue.\nQueues can be implemented by using arrays or linked lists.\nQueues can be used to implement job scheduling for an office printer, order processing for e-tickets, or to create algorithms for breadth-first search in graphs.\nQueues are often mentioned together with Stacks, which is a similar data structure described on the previous page.\nQueue Implementation using Python Lists\nFor Python lists (and arrays), a Queue can look and behave like this:\nSince Python lists has good support for functionality needed to implement queues, we start with creating a queue and do queue operations with just a few lines:\nExampleGet your own Python Server\nUsing a Python list as a queue:\nNote: While using a list is simple, removing elements from the beginning (dequeue operation) requires shifting all remaining elements, making it less efficient for large queues.\nImplementing a Queue Class\nHere's a complete implementation of a Queue class:\nExample\nUsing a Python class as a queue:\nQueue Implementation using Linked Lists\nA linked list consists of nodes with some sort of data, and a pointer to the next node.\nA big benefit with using linked lists is that nodes are stored wherever there is free space in memory, the nodes do not have to be stored contiguously right after each other like elements are stored in arrays. Another nice thing with linked lists is that when adding or removing nodes, the rest of the nodes in the list do not have to be shifted.\nTo better understand the benefits with using arrays or linked lists to implement queues, you should check out this page that explains how arrays and linked lists are stored in memory.\nThis is how a queue can be implemented using a linked list.\nExample\nCreating a Queue using a Linked List:\nReasons for using linked lists to implement queues:\nDynamic size: The queue can grow and shrink dynamically, unlike with arrays.\nNo shifting: The front element of the queue can be removed (enqueue) without having to shift other elements in the memory.\nReasons for not using linked lists to implement queues:\nExtra memory: Each queue element must contain the address to the next element (the next linked list node).\nReadability: The code might be harder to read and write for some because it is longer and more complex.\nCommon Queue Applications\nQueues are used in many real-world scenarios:\nTask scheduling in operating systems\nBreadth-first search in graphs\nMessage queues in distributed systems",
      "examples": [
        "queue = []\n\n# Enqueue\nqueue.append('A')\nqueue.append('B')\nqueue.append('C')\nprint(\"Queue: \", queue)\n\n# Peek\nfrontElement = queue[0]\nprint(\"Peek: \", frontElement)\n\n# Dequeue\npoppedElement = queue.pop(0)\nprint(\"Dequeue: \", poppedElement)\n\nprint(\"Queue after Dequeue: \", queue)\n\n# isEmpty\nisEmpty = not bool(queue)\nprint(\"isEmpty: \", isEmpty)\n\n# Size\nprint(\"Size: \", len(queue))",
        "class Queue:\ndef __init__(self):\nself.queue = []\n\ndef enqueue(self, element):\nself.queue.append(element)\n\ndef dequeue(self):\nif self.isEmpty():\nreturn \"Queue is empty\"\nreturn self.queue.pop(0)\n\ndef peek(self):\nif self.isEmpty():\nreturn \"Queue is empty\"\nreturn self.queue[0]\n\ndef isEmpty(self):\nreturn len(self.queue) == 0\n\ndef size(self):\nreturn len(self.queue)\n\n# Create a queue\nmyQueue = Queue()\n\nmyQueue.enqueue('A')\nmyQueue.enqueue('B')\nmyQueue.enqueue('C')\n\nprint(\"Queue: \", myQueue.queue)\nprint(\"Peek: \", myQueue.peek())\nprint(\"Dequeue: \", myQueue.dequeue())\nprint(\"Queue after Dequeue: \", myQueue.queue)\nprint(\"isEmpty: \", myQueue.isEmpty())\nprint(\"Size: \", myQueue.size())",
        "class Node:\ndef __init__(self, data):\nself.data = data\nself.next = None\n\nclass Queue:\ndef __init__(self):\nself.front = None\nself.rear = None\nself.length = 0\n\ndef enqueue(self, element):\nnew_node = Node(element)\nif self.rear is None:\nself.front = self.rear = new_node\nself.length += 1\nreturn\nself.rear.next = new_node\nself.rear = new_node\nself.length += 1\n\ndef dequeue(self):\nif self.isEmpty():\nreturn \"Queue is empty\"\ntemp = self.front\nself.front = temp.next\nself.length -= 1\nif self.front is None:\nself.rear = None\nreturn temp.data\n\ndef peek(self):\nif self.isEmpty():\nreturn \"Queue is empty\"\nreturn self.front.data\n\ndef isEmpty(self):\nreturn self.length == 0\n\ndef size(self):\nreturn self.length\n\ndef printQueue(self):\ntemp = self.front\nwhile temp:\nprint(temp.data, end=\" -> \")\ntemp = temp.next\nprint()\n\n# Create a queue\nmyQueue = Queue()\n\nmyQueue.enqueue('A')\nmyQueue.enqueue('B')\nmyQueue.enqueue('C')\n\nprint(\"Queue: \", end=\"\")\nmyQueue.printQueue()\nprint(\"Peek: \", myQueue.peek())\nprint(\"Dequeue: \", myQueue.dequeue())\nprint(\"Queue after Dequeue: \", end=\"\")\nmyQueue.printQueue()\nprint(\"isEmpty: \", myQueue.isEmpty())\nprint(\"Size: \", myQueue.size())"
      ]
    },
    {
      "title": "Linked Lists with Python",
      "summary": "A Linked List is, as the word implies, a list where the nodes are linked together. Each node contains data and a pointer. The way they are linked together is that each node points to where in the memory the next node is placed.\nLinked Lists\nA linked list consists of nodes with some sort of data, and a pointer, or link, to the next node.\nLinked Lists vs Arrays\nThe easiest way to understand linked lists is perhaps by comparing linked lists with arrays.\nLinked lists consist of nodes, and is a linear data structure we make ourselves, unlike arrays which is an existing data structure in the programming language that we can use.\nNodes in a linked list store links to other nodes, but array elements do not need to store links to other elements.\nNote: How linked lists and arrays are stored in memory is explained in detail on the page Linked Lists in Memory.\nThe table below compares linked lists with arrays to give a better understanding of what linked lists are.\nThese are some key linked list properties, compared to arrays:\nLinked lists are not allocated to a fixed size in memory like arrays are, so linked lists do not require to move the whole list into a larger memory space when the fixed memory space fills up, like arrays must.\nLinked list nodes are not laid out one right after the other in memory (contiguously), so linked list nodes do not have to be shifted up or down in memory when nodes are inserted or deleted.\nLinked list nodes require more memory to store one or more links to other nodes. Array elements do not require that much memory, because array elements do not contain links to other elements.\nLinked list operations are usually harder to program and require more lines than similar array operations, because programming languages have better built in support for arrays.\nWe must traverse a linked list to find a node at a specific position, but with arrays we can access an element directly by writing myArray[5].\nTypes of Linked Lists\nThere are three basic forms of linked lists:\nSingly linked lists\nDoubly linked lists\nCircular linked lists\nA singly linked list is the simplest kind of linked lists. It takes up less space in memory because each node has only one address to the next node, like in the image below.\nA doubly linked list has nodes with addresses to both the previous and the next node, like in the image below, and therefore takes up more memory. But doubly linked lists are good if you want to be able to move both up and down in the list.\nA circular linked list is like a singly or doubly linked list with the first node, the \"head\", and the last node, the \"tail\", connected.\nIn singly or doubly linked lists, we can find the start and end of a list by just checking if the links are null. But for circular linked lists, more complex code is needed to explicitly check for start and end nodes in certain applications.\nCircular linked lists are good for lists you need to cycle through continuously.\nThe image below is an example of a singly circular linked list:\nThe image below is an example of a doubly circular linked list:\nNote: What kind of linked list you need depends on the problem you are trying to solve.\nLinked List Operations\nBasic things we can do with linked lists are:\nTraversal\nRemove a node\nInsert a node\nSort\nFor simplicity, singly linked lists will be used to explain these operations below.\nTraversal of a Linked List\nTraversing a linked list means to go through the linked list by following the links from one node to the next.\nTraversal of linked lists is typically done to search for a specific node, and read or modify the node's content, remove the node, or insert a node right before or after that node.\nTo traverse a singly linked list, we start with the first node in the list, the head node, and follow that node's next link, and the next node's next link and so on, until the next address is null.\nThe code below prints out the node values as it traverses along the linked list, in the same way as the animation above.\nExampleGet your own Python Server\nTraversal of a singly linked list in Python:\nFind The Lowest Value in a Linked List\nLet's find the lowest value in a singly linked list by traversing it and checking each value.\nFinding the lowest value in a linked list is very similar to how we found the lowest value in an array, except that we need to follow the next link to get to the next node.\nTo find the lowest value we need to traverse the list like in the previous code. But in addition to traversing the list, we must also update the current lowest value when we find a node with a lower value.\nIn the code below, the algorithm to find the lowest value is moved into a function called findLowestValue.\nExample\nFinding the lowest value in a singly linked list in Python:\nDelete a Node in a Linked List\nIf you want to delete a node in a linked list, it is important to connect the nodes on each side of the node before deleting it, so that the linked list is not broken.\nSo before deleting the node, we need to get the next pointer from the previous node, and connect the previous node to the new next node before deleting the node in between.\nAlso, it is a good idea to first connect next pointer to the node after the node we want to delete, before we delete it. This is to avoid a 'dangling' pointer, a pointer that points to nothing, even if it is just for a brief moment.\nThe simulation below shows the node we want to delete, and how the list must be traversed first to connect the list properly before deleting the node without breaking the linked list.\nIn the code below, the algorithm to delete a node is moved into a function called deleteSpecificNode.\nExample\nDeleting a specific node in a singly linked list in Python:\nIn the deleteSpecificNode function above, the return value is the new head of the linked list. So for example, if the node to be deleted is the first node, the new head returned will be the next node.\nInsert a Node in a Linked List\nInserting a node into a linked list is very similar to deleting a node, because in both cases we need to take care of the next pointers to make sure we do not break the linked list.\nTo insert a node in a linked list we first need to create the node, and then at the position where we insert it, we need to adjust the pointers so that the previous node points to the new node, and the new node points to the correct next node.\nThe simulation below shows how the links are adjusted when inserting a new node.\nNew node is created\nNode 1 is linked to new node\nNew node is linked to next node\nExample\nInserting a node in a singly linked list in Python:\nIn the insertNodeAtPosition function above, the return value is the new head of the linked list. So for example, if the node is inserted at the start of the linked list, the new head returned will be the new node.\nTime Complexity of Linked Lists Operations\nHere we discuss time complexity of linked list operations, and compare these with the time complexity of the array algorithms that we have discussed previously in this tutorial.\nRemember that time complexity just says something about the approximate number of operations needed by the algorithm based on a large set of data (n), and does not tell us the exact time a specific implementation of an algorithm takes.\nThis means that even though linear search is said to have the same time complexity for arrays as for linked list: O(n), it does not mean they take the same amount of time. The exact time it takes for an algorithm to run depends on programming language, computer hardware, differences in time needed for operations on arrays vs linked lists, and many other things as well.\nLinear search for linked lists works the same as for arrays. A list of unsorted values are traversed from the head node until the node with the specific value is found. Time complexity is O(n).\nBinary search is not possible for linked lists because the algorithm is based on jumping directly to different array elements, and that is not possible with linked lists.\nSorting algorithms have the same time complexities as for arrays, and these are explained earlier in this tutorial. But remember, sorting algorithms that are based on directly accessing an array element based on an index, do not work on linked lists.",
      "examples": [
        "class Node:\ndef __init__(self, data):\nself.data = data\nself.next = None\n\ndef traverseAndPrint(head):\ncurrentNode = head\nwhile currentNode:\nprint(currentNode.data, end=\" -> \")\ncurrentNode = currentNode.next\nprint(\"null\")\n\nnode1 = Node(7)\nnode2 = Node(11)\nnode3 = Node(3)\nnode4 = Node(2)\nnode5 = Node(9)\n\nnode1.next = node2\nnode2.next = node3\nnode3.next = node4\nnode4.next = node5\n\ntraverseAndPrint(node1)",
        "class Node:\ndef __init__(self, data):\nself.data = data\nself.next = None\n\ndef findLowestValue(head):\nminValue = head.data\ncurrentNode = head.next\nwhile currentNode:\nif currentNode.data < minValue:\nminValue = currentNode.data\ncurrentNode = currentNode.next\nreturn minValue\n\nnode1 = Node(7)\nnode2 = Node(11)\nnode3 = Node(3)\nnode4 = Node(2)\nnode5 = Node(9)\n\nnode1.next = node2\nnode2.next = node3\nnode3.next = node4\nnode4.next = node5\n\nprint(\"The lowest value in the linked list is:\", findLowestValue(node1))",
        "class Node:\ndef __init__(self, data):\nself.data = data\nself.next = None\n\ndef traverseAndPrint(head):\ncurrentNode = head\nwhile currentNode:\nprint(currentNode.data, end=\" -> \")\ncurrentNode = currentNode.next\nprint(\"null\")\n\ndef deleteSpecificNode(head, nodeToDelete):\nif head == nodeToDelete:\nreturn head.next\n\ncurrentNode = head\nwhile currentNode.next and currentNode.next != nodeToDelete:\ncurrentNode = currentNode.next\n\nif currentNode.next is None:\nreturn head\n\ncurrentNode.next = currentNode.next.next\n\nreturn head\n\nnode1 = Node(7)\nnode2 = Node(11)\nnode3 = Node(3)\nnode4 = Node(2)\nnode5 = Node(9)\n\nnode1.next = node2\nnode2.next = node3\nnode3.next = node4\nnode4.next = node5\n\nprint(\"Before deletion:\")\ntraverseAndPrint(node1)\n\n# Delete node4\nnode1 = deleteSpecificNode(node1, node4)\n\nprint(\"\\nAfter deletion:\")\ntraverseAndPrint(node1)",
        "class Node:\ndef __init__(self, data):\nself.data = data\nself.next = None\n\ndef traverseAndPrint(head):\ncurrentNode = head\nwhile currentNode:\nprint(currentNode.data, end=\" -> \")\ncurrentNode = currentNode.next\nprint(\"null\")\n\ndef insertNodeAtPosition(head, newNode, position):\nif position == 1:\nnewNode.next = head\nreturn newNode\n\ncurrentNode = head\nfor _ in range(position - 2):\nif currentNode is None:\nbreak\ncurrentNode = currentNode.next\n\nnewNode.next = currentNode.next\ncurrentNode.next = newNode\nreturn head\n\nnode1 = Node(7)\nnode2 = Node(3)\nnode3 = Node(2)\nnode4 = Node(9)\n\nnode1.next = node2\nnode2.next = node3\nnode3.next = node4\n\nprint(\"Original list:\")\ntraverseAndPrint(node1)\n\n# Insert a new node with value 97 at position 2\nnewNode = Node(97)\nnode1 = insertNodeAtPosition(node1, newNode, 2)\n\nprint(\"\\nAfter insertion:\")\ntraverseAndPrint(node1)",
        "(n)",
        "O(n)"
      ]
    },
    {
      "title": "Hash Tables with Python",
      "summary": "Hash Table\nA Hash Table is a data structure designed to be fast to work with.\nThe reason Hash Tables are sometimes preferred instead of arrays or linked lists is because searching for, adding, and deleting data can be done really quickly, even for large amounts of data.\nIn a Linked List, finding a person \"Bob\" takes time because we would have to go from one node to the next, checking each node, until the node with \"Bob\" is found.\nAnd finding \"Bob\" in an list/array could be fast if we knew the index, but when we only know the name \"Bob\", we need to compare each element and that takes time.\nWith a Hash Table however, finding \"Bob\" is done really fast because there is a way to go directly to where \"Bob\" is stored, using something called a hash function.\nBuilding A Hash Table from Scratch\nTo get the idea of what a Hash Table is, let's try to build one from scratch, to store unique first names inside it.\nWe will build the Hash Table in 5 steps:\nCreate an empty list (it can also be a dictionary or a set).\nCreate a hash function.\nInserting an element using a hash function.\nLooking up an element using a hash function.\nHandling collisions.\nStep 1: Create an Empty List\nTo keep it simple, let's create a list with 10 empty elements.\nEach of these elements is called a bucket in a Hash Table.\nStep 2: Create a Hash Function\nNow comes the special way we interact with Hash Tables.\nWe want to store a name directly into its right place in the array, and this is where the hash function comes in.\nA hash function can be made in many ways, it is up to the creator of the Hash Table. A common way is to find a way to convert the value into a number that equals one of the Hash Table's index numbers, in this case a number from 0 to 9.\nIn our example we will use the Unicode number of each character, summarize them and do a modulo 10 operation to get index numbers 0-9.\nExampleGet your own Python Server\nCreate a Hash Function that sums the Unicode numbers of each character and return a number between 0 and 9:\nThe character B has Unicode number 66, o has 111, and b has 98. Adding those together we get 275. Modulo 10 of 275 is 5, so \"Bob\" should be stored at index 5.\nThe number returned by the hash function is called the hash code.\nUnicode number: Everything in our computers are stored as numbers, and the Unicode code number is a unique number that exist for every character. For example, the character A has Unicode number 65.\nSee this page for more information about how characters are represented as numbers.\nModulo: A modulo operation divides a number with another number, and gives us the resulting remainder. So for example, 7 % 3 will give us the remainder 1. (Dividing 7 apples between 3 people, means that each person gets 2 apples, with 1 apple to spare.)\nIn Python and most programming languages, the modolo operator is written as %.\nStep 3: Inserting an Element\nAccording to our hash function, \"Bob\" should be stored at index 5.\nLets create a function that add items to our hash table:\nExample\nAfter storing \"Bob\" at index 5, our array now looks like this:\nWe can use the same functions to store \"Pete\", \"Jones\", \"Lisa\", and \"Siri\" as well.\nExample\nAfter using the hash function to store those names in the correct position, our array looks like this:\nExample\nStep 4: Looking up a name\nNow that we have a super basic Hash Table, let's see how we can look up a name from it.\nTo find \"Pete\" in the Hash Table, we give the name \"Pete\" to our hash function. The hash function returns 8, meaning that \"Pete\" is stored at index 8.\nExample\nBecause we do not have to check element by element to find out if \"Pete\" is in there, we can just use the hash function to go straight to the right element!\nStep 5: Handling collisions\nLet's also add \"Stuart\" to our Hash Table.\nWe give \"Stuart\" to our hash function, which returns 3, meaning \"Stuart\" should be stored at index 3.\nTrying to store \"Stuart\" in index 3, creates what is called a collision, because \"Lisa\" is already stored at index 3.\nTo fix the collision, we can make room for more elements in the same bucket. Solving the collision problem in this way is called chaining, and means giving room for more elements in the same bucket.\nStart by creating a new list with the same size as the original list, but with empty buckets:\nRewrite the add() function, and add the same names as before:\nExample\nAfter implementing each bucket as a list, \"Stuart\" can also be stored at index 3, and our Hash Set now looks like this:\nResult\nSearching for \"Stuart\" now takes a little bit longer time, because we also find \"Lisa\" in the same bucket, but still much faster than searching the entire Hash Table.\nUses of Hash Tables\nHash Tables are great for:\nChecking if something is in a collection (like finding a book in a library).\nStoring unique items and quickly finding them (like storing phone numbers).\nConnecting values to keys (like linking names to phone numbers).\nThe most important reason why Hash Tables are great for these things is that Hash Tables are very fast compared Arrays and Linked Lists, especially for large sets. Arrays and Linked Lists have time complexity O(n) for search and delete, while Hash Tables have just O(1) on average.\nHash Tables Summarized\nHash Table elements are stored in storage containers called buckets.\nA hash function takes the key of an element to generate a hash code.\nThe hash code says what bucket the element belongs to, so now we can go directly to that Hash Table element: to modify it, or to delete it, or just to check if it exists.\nA collision happens when two Hash Table elements have the same hash code, because that means they belong to the same bucket.\nCollision can be solved by Chaining by using lists to allow more than one element in the same bucket.",
      "examples": [
        "my_list = [None, None, None, None, None, None, None, None, None, None]",
        "def hash_function(value):\nsum_of_chars = 0\nfor char in value:\nsum_of_chars += ord(char)\n\nreturn sum_of_chars % 10\n\nprint(\"'Bob' has hash code:\", hash_function('Bob'))",
        "def add(name):\nindex = hash_function(name)\nmy_list[index] = name\n\nadd('Bob')\nprint(my_list)",
        "my_list = [None, None, None, None, None, 'Bob', None, None, None, None]",
        "add('Pete')\nadd('Jones')\nadd('Lisa')\nadd('Siri')\nprint(my_list)",
        "my_list = [None, 'Jones', None, 'Lisa', None, 'Bob', None, 'Siri', 'Pete', None]",
        "def contains(name):\nindex = hash_function(name)\nreturn my_list[index] == name\n\nprint(\"'Pete' is in the Hash Table:\", contains('Pete'))",
        "my_list = [\n[],\n[],\n[],\n[],\n[],\n[],\n[],\n[],\n[],\n[]\n]",
        "def add(name):\nindex = hash_function(name)\nmy_list[index].append(name)\n\nadd('Bob')\nadd('Pete')\nadd('Jones')\nadd('Lisa')\nadd('Siri')\nadd('Stuart')\nprint(my_list)",
        "my_list = [\n[None],\n['Jones'],\n[None],\n['Lisa', 'Stuart'],\n[None],\n['Bob'],\n[None],\n['Siri'],\n['Pete'],\n[None]\n]",
        "B",
        "66",
        "o",
        "111",
        "b",
        "98",
        "275",
        "5",
        "\"Bob\"",
        "A",
        "65",
        "7 % 3",
        "1",
        "%",
        "8",
        "3",
        "add()",
        "O(n)",
        "O(1)"
      ]
    },
    {
      "title": "Python Trees",
      "summary": "A tree is a hierarchical data structure consisting of nodes connected by edges.\nEach node contains a value and references to its child nodes.\nTrees\nThe Tree data structure is similar to Linked Lists in that each node contains data and can be linked to other nodes.\nWe have previously covered data structures like Arrays, Linked Lists, Stacks, and Queues. These are all linear structures, which means that each element follows directly after another in a sequence. Trees however, are different. In a Tree, a single element can have multiple 'next' elements, allowing the data structure to branch out in various directions.\nThe data structure is called a \"tree\" because it looks like a tree's structure.\nThe Tree data structure can be useful in many cases:\nHierarchical Data: File systems, organizational models, etc.\nDatabases: Used for quick data retrieval.\nRouting Tables: Used for routing data in network algorithms.\nSorting/Searching: Used for sorting data and searching for data.\nPriority Queues: Priority queue data structures are commonly implemented using trees, such as binary heaps.\nTypes of Trees\nTrees are a fundamental data structure in computer science, used to represent hierarchical relationships. This tutorial covers several key types of trees.\nBinary Trees: Each node has up to two children, the left child node and the right child node. This structure is the foundation for more complex tree types like Binay Search Trees and AVL Trees.\nBinary Search Trees (BSTs): A type of Binary Tree where for each node, the left child node has a lower value, and the right child node has a higher value.\nAVL Trees: A type of Binary Search Tree that self-balances so that for every node, the difference in height between the left and right subtrees is at most one. This balance is maintained through rotations when nodes are inserted or deleted.\nEach of these data structures are described in detail on the next pages, including animations and how to implement them.\nTrees vs Arrays and Linked Lists\nBenefits of Trees over Arrays and Linked Lists:\nArrays are fast when you want to access an element directly, like element number 700 in an array of 1000 elements for example. But inserting and deleting elements require other elements to shift in memory to make place for the new element, or to take the deleted elements place, and that is time consuming.\nLinked Lists are fast when inserting or deleting nodes, no memory shifting needed, but to access an element inside the list, the list must be traversed, and that takes time.\nTrees, such as Binary Trees, Binary Search Trees and AVL Trees, are great compared to Arrays and Linked Lists because they are BOTH fast at accessing a node, AND fast when it comes to deleting or inserting a node, with no shifts in memory needed.",
      "examples": []
    },
    {
      "title": "Python Binary Trees",
      "summary": "A tree is a hierarchical data structure consisting of nodes connected by edges.\nEach node contains a value and references to its child nodes.\nBinary Trees\nA Binary Tree is a type of tree data structure where each node can have a maximum of two child nodes, a left child node and a right child node.\nThis restriction, that a node can have a maximum of two child nodes, gives us many benefits:\nAlgorithms like traversing, searching, insertion and deletion become easier to understand, to implement, and run faster.\nKeeping data sorted in a Binary Search Tree (BST) makes searching very efficient.\nBalancing trees is easier to do with a limited number of child nodes, using an AVL Binary Tree for example.\nBinary Trees can be represented as arrays, making the tree more memory efficient.\nBinary Tree Implementation\nThe Binary Tree above can be implemented much like a Linked List, except that instead of linking each node to one next node, we create a structure where each node can be linked to both its left and right child nodes.\nExampleGet your own Python Server\nCreate a Binary Tree in Python:\nTypes of Binary Trees\nThere are different variants, or types, of Binary Trees worth discussing to get a better understanding of how Binary Trees can be structured.\nThe different kinds of Binary Trees are also worth mentioning now as these words and concepts will be used later in the tutorial.\nBelow are short explanations of different types of Binary Tree structures, and below the explanations are drawings of these kinds of structures to make it as easy to understand as possible.\nA balanced Binary Tree has at most 1 in difference between its left and right subtree heights, for each node in the tree.\nA complete Binary Tree has all levels full of nodes, except the last level, which is can also be full, or filled from left to right. The properties of a complete Binary Tree means it is also balanced.\nA full Binary Tree is a kind of tree where each node has either 0 or 2 child nodes.\nA perfect Binary Tree has all leaf nodes on the same level, which means that all levels are full of nodes, and all internal nodes have two child nodes.The properties of a perfect Binary Tree means it is also full, balanced, and complete.\nBinary Tree Traversal\nGoing through a Tree by visiting every node, one node at a time, is called traversal.\nSince Arrays and Linked Lists are linear data structures, there is only one obvious way to traverse these: start at the first element, or node, and continue to visit the next until you have visited them all.\nBut since a Tree can branch out in different directions (non-linear), there are different ways of traversing Trees.\nThere are two main categories of Tree traversal methods:\nBreadth First Search (BFS) is when the nodes on the same level are visited before going to the next level in the tree. This means that the tree is explored in a more sideways direction.\nDepth First Search (DFS) is when the traversal moves down the tree all the way to the leaf nodes, exploring the tree branch by branch in a downwards direction.\nThere are three different types of DFS traversals:\npre-order\nin-order\npost-order\nPre-order Traversal of Binary Trees\nPre-order Traversal is a type of Depth First Search, where each node is visited in a certain order..\nPre-order Traversal is done by visiting the root node first, then recursively do a pre-order traversal of the left subtree, followed by a recursive pre-order traversal of the right subtree. It's used for creating a copy of the tree, prefix notation of an expression tree, etc.\nThis traversal is \"pre\" order because the node is visited \"before\" the recursive pre-order traversal of the left and right subtrees.\nThis is how the code for pre-order traversal looks like:\nExample\nA pre-order traversal:\nThe first node to be printed is node R, as the Pre-order Traversal works by first visiting, or printing, the current node (line 4), before calling the left and right child nodes recursively (line 5 and 6).\nThe preOrderTraversal() function keeps traversing the left subtree recursively (line 5), before going on to traversing the right subtree (line 6). So the next nodes that are printed are 'A' and then 'C'.\nThe first time the argument node is None is when the left child of node C is given as an argument (C has no left child).\nAfter None is returned the first time when calling C's left child, C's right child also returns None, and then the recursive calls continue to propagate back so that A's right child D is the next to be printed.\nThe code continues to propagate back so that the rest of the nodes in R's right subtree gets printed.\nIn-order Traversal of Binary Trees\nIn-order Traversal is a type of Depth First Search, where each node is visited in a certain order.\nIn-order Traversal does a recursive In-order Traversal of the left subtree, visits the root node, and finally, does a recursive In-order Traversal of the right subtree. This traversal is mainly used for Binary Search Trees where it returns values in ascending order.\nWhat makes this traversal \"in\" order, is that the node is visited in between the recursive function calls. The node is visited after the In-order Traversal of the left subtree, and before the In-order Traversal of the right subtree.\nThis is how the code for In-order Traversal looks like:\nExample\nCreate an In-order Traversal:\nThe inOrderTraversal() function keeps calling itself with the current left child node as an argument (line 4) until that argument is None and the function returns (line 2-3).\nThe first time the argument node is None is when the left child of node C is given as an argument (C has no left child).\nAfter that, the data part of node C is printed (line 5), which means that 'C' is the first thing that gets printed.\nThen, node C's right child is given as an argument (line 6), which is None, so the function call returns without doing anything else.\nAfter 'C' is printed, the previous inOrderTraversal() function calls continue to run, so that 'A' gets printed, then 'D', then 'R', and so on.\nPost-order Traversal of Binary Trees\nPost-order Traversal is a type of Depth First Search, where each node is visited in a certain order..\nPost-order Traversal works by recursively doing a Post-order Traversal of the left subtree and the right subtree, followed by a visit to the root node. It is used for deleting a tree, post-fix notation of an expression tree, etc.\nWhat makes this traversal \"post\" is that visiting a node is done \"after\" the left and right child nodes are called recursively.\nThis is how the code for Post-order Traversal looks like:\nExample\nPost-order Traversal:\nThe postOrderTraversal() function keeps traversing the left subtree recursively (line 4), until None is returned when C's left child node is called as the node argument.\nAfter C's left child node returns None, line 5 runs and C's right child node returns None, and then the letter 'C' is printed (line 6).\nThis means that C is visited, or printed, \"after\" its left and right child nodes are traversed, that is why it is called \"post\" order traversal.\nThe postOrderTraversal() function continues to propagate back to previous recursive function calls, so the next node to be printed is 'D', then 'A'.\nThe function continues to propagate back and printing nodes until all nodes are printed, or visited.",
      "examples": [
        "class TreeNode:\ndef __init__(self, data):\nself.data = data\nself.left = None\nself.right = None\n\nroot = TreeNode('R')\nnodeA = TreeNode('A')\nnodeB = TreeNode('B')\nnodeC = TreeNode('C')\nnodeD = TreeNode('D')\nnodeE = TreeNode('E')\nnodeF = TreeNode('F')\nnodeG = TreeNode('G')\n\nroot.left = nodeA\nroot.right = nodeB\n\nnodeA.left = nodeC\nnodeA.right = nodeD\n\nnodeB.left = nodeE\nnodeB.right = nodeF\n\nnodeF.left = nodeG\n\n# Test\nprint(\"root.right.left.data:\", root.right.left.data)",
        "def preOrderTraversal(node):\nif node is None:\nreturn\nprint(node.data, end=\", \")\npreOrderTraversal(node.left)\npreOrderTraversal(node.right)",
        "def inOrderTraversal(node):\nif node is None:\nreturn\ninOrderTraversal(node.left)\nprint(node.data, end=\", \")\ninOrderTraversal(node.right)",
        "def postOrderTraversal(node):\nif node is None:\nreturn\npostOrderTraversal(node.left)\npostOrderTraversal(node.right)\nprint(node.data, end=\", \")",
        "preOrderTraversal()",
        "node",
        "None",
        "inOrderTraversal()",
        "data",
        "postOrderTraversal()"
      ]
    },
    {
      "title": "Python Binary Search Trees",
      "summary": "A Binary Search Tree is a Binary Tree where every node's left child has a lower value, and every node's right child has a higher value.\nA clear advantage with Binary Search Trees is that operations like search, delete, and insert are fast and done without having to shift values in memory.\nBinary Search Trees\nA Binary Search Tree (BST) is a type of Binary Tree data structure, where the following properties must be true for any node \"X\" in the tree:\nThe X node's left child and all of its descendants (children, children's children, and so on) have lower values than X's value.\nThe right child, and all its descendants have higher values than X's value.\nLeft and right subtrees must also be Binary Search Trees.\nThese properties makes it faster to search, add and delete values than a regular binary tree.\nTo make this as easy to understand and implement as possible, let's also assume that all values in a Binary Search Tree are unique.\nThe size of a tree is the number of nodes in it (n).\nA subtree starts with one of the nodes in the tree as a local root, and consists of that node and all its descendants.\nThe descendants of a node are all the child nodes of that node, and all their child nodes, and so on. Just start with a node, and the descendants will be all nodes that are connected below that node.\nThe node's height is the maximum number of edges between that node and a leaf node.\nA node's in-order successor is the node that comes after it if we were to do in-order traversal. In-order traversal of the BST above would result in node 13 coming before node 14, and so the successor of node 13 is node 14.\nTraversal of a Binary Search Tree\nJust to confirm that we actually have a Binary Search Tree data structure in front of us, we can check if the properties at the top of this page are true. So for every node in the figure above, check if all the values to the left of the node are lower, and that all values to the right are higher.\nAnother way to check if a Binary Tree is BST, is to do an in-order traversal (like we did on the previous page) and check if the resulting list of values are in an increasing order.\nThe code below is an implementation of the Binary Search Tree in the figure above, with traversal.\nExampleGet your own Python Server\nTraversal of a Binary Search Tree in Python\nAs we can see by running the code example above, the in-order traversal produces a list of numbers in an increasing (ascending) order, which means that this Binary Tree is a Binary Search Tree.\nSearch for a Value in a BST\nSearching for a value in a BST is very similar to how we found a value using Binary Search on an array.\nFor Binary Search to work, the array must be sorted already, and searching for a value in an array can then be done really fast.\nSimilarly, searching for a value in a BST can also be done really fast because of how the nodes are placed.\nHow it works:\nStart at the root node.\nIf this is the value we are looking for, return.\nIf the value we are looking for is higher, continue searching in the right subtree.\nIf the value we are looking for is lower, continue searching in the left subtree.\nIf the subtree we want to search does not exist, depending on the programming language, return None, or NULL, or something similar, to indicate that the value is not inside the BST.\nThe algorithm can be implemented like this:\nExample\nSearch the Tree for the value \"13\"\nThe time complexity for searching a BST for a value is O(h), where h is the height of the tree.\nFor a BST with most nodes on the right side for example, the height of the tree becomes larger than it needs to be, and the worst case search will take longer. Such trees are called unbalanced.\nBoth Binary Search Trees above have the same nodes, and in-order traversal of both trees gives us the same result but the height is very different. It takes longer time to search the unbalanced tree above because it is higher.\nWe will use the next page to describe a type of Binary Tree called AVL Trees. AVL trees are self-balancing, which means that the height of the tree is kept to a minimum so that operations like search, insertion and deletion take less time.\nInsert a Node in a BST\nInserting a node in a BST is similar to searching for a value.\nHow it works:\nStart at the root node.\nCompare each node:\nIs the value lower? Go left.\nIs the value higher? Go right.\nIs the value lower? Go left.\nIs the value higher? Go right.\nContinue to compare nodes with the new value until there is no right or left to compare with. That is where the new node is inserted.\nInserting nodes as described above means that an inserted node will always become a new leaf node.\nAll nodes in the BST are unique, so in case we find the same value as the one we want to insert, we do nothing.\nThis is how node insertion in BST can be implemented:\nExample\nInserting a node in a BST:\nFind The Lowest Value in a BST Subtree\nThe next section will explain how we can delete a node in a BST, but to do that we need a function that finds the lowest value in a node's subtree.\nHow it works:\nStart at the root node of the subtree.\nGo left as far as possible.\nThe node you end up in is the node with the lowest value in that BST subtree.\nThis is how a function for finding the lowest value in the subtree of a BST node looks like:\nExample\nFind the lowest value in a BST subtree\nWe will use this minValueNode() function in the section below, to find a node's in-order successor, and use that to delete a node.\nDelete a Node in a BST\nTo delete a node, our function must first search the BST to find it.\nAfter the node is found there are three different cases where deleting a node must be done differently.\nHow it works:\nIf the node is a leaf node, remove it by removing the link to it.\nIf the node only has one child node, connect the parent node of the node you want to remove to that child node.\nIf the node has both right and left child nodes: Find the node's in-order successor, change values with that node, then delete it.\nIn step 3 above, the successor we find will always be a leaf node, and because it is the node that comes right after the node we want to delete, we can swap values with it and delete it.\nThis is how a BST can be implemented with functionality for deleting a node:\nExample\nDelete a Node in a BST\nLine 1: The node argument here makes it possible for the function to call itself recursively on smaller and smaller subtrees in the search for the node with the data we want to delete.\nLine 2-8: This is searching for the node with correct data that we want to delete.\nLine 9-22: The node we want to delete has been found. There are three such cases:\nCase 1: Node with no child nodes (leaf node). None is returned, and that becomes the parent node's new left or right value by recursion (line 6 or 8).\nCase 2: Node with either left or right child node. That left or right child node becomes the parent's new left or right child through recursion (line 7 or 9).\nCase 3: Node has both left and right child nodes. The in-order successor is found using the minValueNode() function. We keep the successor's value by setting it as the value of the node we want to delete, and then we can delete the successor node.\nLine 24: node is returned to maintain the recursive functionality.\nBST Compared to Other Data Structures\nBinary Search Trees take the best from two other data structures: Arrays and Linked Lists.\nSearching a BST is just as fast as Binary Search on an array, with the same time complexity O(log n).\nAnd deleting and inserting new values can be done without shifting elements in memory, just like with Linked Lists.\nBST Balance and Time Complexity\nOn a Binary Search Tree, operations like inserting a new node, deleting a node, or searching for a node are actually O(h). That means that the higher the tree is (h), the longer the operation will take.\nThe reason why we wrote that searching for a value is O(log n) in the table above is because that is true if the tree is \"balanced\", like in the image below.\nWe call this tree balanced because there are approximately the same number of nodes on the left and right side of the tree.\nThe exact way to tell that a Binary Tree is balanced is that the height of the left and right subtrees of any node only differs by one. In the image above, the left subtree of the root node has height h=2, and the right subtree has height h=3.\nFor a balanced BST, with a large number of nodes (big n), we get height h ≈ \\log_2 n, and therefore the time complexity for searching, deleting, or inserting a node can be written as O(h) = O(\\log n).\nBut, in case the BST is completely unbalanced, like in the image below, the height of the tree is approximately the same as the number of nodes, h ≈ n, and we get time complexity O(h) = O(n) for searching, deleting, or inserting a node.\nSo, to optimize operations on a BST, the height must be minimized, and to do that the tree must be balanced.\nAnd keeping a Binary Search Tree balanced is exactly what AVL Trees do, which is the data structure explained on the next page.",
      "examples": [
        "class TreeNode:\ndef __init__(self, data):\nself.data = data\nself.left = None\nself.right = None\n\ndef inOrderTraversal(node):\nif node is None:\nreturn\ninOrderTraversal(node.left)\nprint(node.data, end=\", \")\ninOrderTraversal(node.right)\n\nroot = TreeNode(13)\nnode7 = TreeNode(7)\nnode15 = TreeNode(15)\nnode3 = TreeNode(3)\nnode8 = TreeNode(8)\nnode14 = TreeNode(14)\nnode19 = TreeNode(19)\nnode18 = TreeNode(18)\n\nroot.left = node7\nroot.right = node15\n\nnode7.left = node3\nnode7.right = node8\n\nnode15.left = node14\nnode15.right = node19\n\nnode19.left = node18\n\n# Traverse\ninOrderTraversal(root)",
        "def search(node, target):\nif node is None:\nreturn None\nelif node.data == target:\nreturn node\nelif target < node.data:\nreturn search(node.left, target)\nelse:\nreturn search(node.right, target)\n\n# Search for a value\nresult = search(root, 13)\nif result:\nprint(f\"Found the node with value: {result.data}\")\nelse:\nprint(\"Value not found in the BST.\")",
        "def insert(node, data):\nif node is None:\nreturn TreeNode(data)\nelse:\nif data < node.data:\nnode.left = insert(node.left, data)\nelif data > node.data:\nnode.right = insert(node.right, data)\nreturn node\n\n# Inserting new value into the BST\ninsert(root, 10)",
        "def minValueNode(node):\ncurrent = node\nwhile current.left is not None:\ncurrent = current.left\nreturn current\n\n# Find Lowest\nprint(\"\\nLowest value:\",minValueNode(root).data)",
        "def delete(node, data):\nif not node:\nreturn None\n\nif data < node.data:\nnode.left = delete(node.left, data)\nelif data > node.data:\nnode.right = delete(node.right, data)\nelse:\n# Node with only one child or no child\nif not node.left:\ntemp = node.right\nnode = None\nreturn temp\nelif not node.right:\ntemp = node.left\nnode = None\nreturn temp\n\n# Node with two children, get the in-order successor\nnode.data = minValueNode(node.right).data\nnode.right = delete(node.right, node.data)\n\nreturn node\n\n# Delete node 15\ndelete(root,15)",
        "(n)",
        "None",
        "NULL",
        "O(h)",
        "h",
        "minValueNode()",
        "node",
        "data",
        "O(\\log n)",
        "O(n)",
        "O(log n)",
        "h=2",
        "h=3",
        "n",
        "h ≈ \\log_2 n",
        "O(h) = O(\\log n)",
        "h ≈ n",
        "O(h) = O(n)"
      ]
    },
    {
      "title": "Python AVL Trees",
      "summary": "The AVL Tree is a type of Binary Search Tree named after two Soviet inventors Georgy Adelson-Velsky and Evgenii Landis who invented the AVL Tree in 1962.\nAVL trees are self-balancing, which means that the tree height is kept to a minimum so that a very fast runtime is guaranteed for searching, inserting and deleting nodes, with time complexity O(logn)O( \\log n).\nAVL Trees\nThe only difference between a regular Binary Search Tree and an AVL Tree is that AVL Trees do rotation operations in addition, to keep the tree balance.\nA Binary Search Tree is in balance when the difference in height between left and right subtrees is less than 2.\nBy keeping balance, the AVL Tree ensures a minimum tree height, which means that search, insert, and delete operations can be done really fast.\nThe two trees above are both Binary Search Trees, they have the same nodes, and the same in-order traversal (alphabetical), but the height is very different because the AVL Tree has balanced itself.\nStep through the building of an AVL Tree in the animation below to see how the balance factors are updated, and how rotation operations are done when required to restore the balance.\nContinue reading to learn more about how the balance factor is calculated, how rotation operations are done, and how AVL Trees can be implemented.\nLeft and Right Rotations\nTo restore balance in an AVL Tree, left or right rotations are done, or a combination of left and right rotations.\nThe previous animation shows one specific left rotation, and one specific right rotation.\nBut in general, left and right rotations are done like in the animation below.\nNotice how the subtree changes its parent. Subtrees change parent in this way during rotation to maintain the correct in-order traversal, and to maintain the BST property that the left child is less than the right child, for all nodes in the tree.\nAlso keep in mind that it is not always the root node that become unbalanced and need rotation.\nThe Balance Factor\nA node's balance factor is the difference in subtree heights.\nThe subtree heights are stored at each node for all nodes in an AVL Tree, and the balance factor is calculated based on its subtree heights to check if the tree has become out of balance.\nThe height of a subtree is the number of edges between the root node of the subtree and the leaf node farthest down in that subtree.\nThe Balance Factor (BFBF) for a node (XX) is the difference in height between its right and left subtrees.\nBF(X)=height(rightSubtree(X))−height(leftSubtree(X)) BF(X) = height(rightSubtree(X)) - height(leftSubtree(X))\nBalance factor values\n0: The node is in balance.\nmore than 0: The node is \"right heavy\".\nless than 0: The node is \"left heavy\".\nIf the balance factor is less than -1, or more than 1, for one or more nodes in the tree, the tree is considered not in balance, and a rotation operation is needed to restore balance.\nLet's take a closer look at the different rotation operations that an AVL Tree can do to regain balance.\nThe Four \"out-of-balance\" Cases\nWhen the balance factor of just one node is less than -1, or more than 1, the tree is regarded as out of balance, and a rotation is needed to restore balance.\nThere are four different ways an AVL Tree can be out of balance, and each of these cases require a different rotation operation.\nSee animations and explanations of these cases below.\nThe Left-Left (LL) Case\nThe node where the unbalance is discovered is left heavy, and the node's left child node is also left heavy.\nWhen this LL case happens, a single right rotation on the unbalanced node is enough to restore balance.\nStep through the animation below to see the LL case, and how the balance is restored by a single right rotation.\nAs you step through the animation above, two LL cases happen:\nWhen D is added, the balance factor of Q becomes -2, which means the tree is unbalanced. This is an LL case because both the unbalance node Q and its left child node P are left heavy (negative balance factors). A single right rotation at node Q restores the tree balance.\nAfter nodes L, C, and B are added, P's balance factor is -2, which means the tree is out of balance. This is also an LL case because both the unbalanced node P and its left child node D are left heavy. A single right rotation restores the balance.\nNote: The second time the LL case happens in the animation above, a right rotation is done, and L goes from being the right child of D to being the left child of P. Rotations are done like that to keep the correct in-order traversal ('B, C, D, L, P, Q' in the animation above). Another reason for changing parent when a rotation is done is to keep the BST property, that the left child is always lower than the node, and that the right child always higher.\nThe Right-Right (RR) Case\nA Right-Right case happens when a node is unbalanced and right heavy, and the right child node is also right heavy.\nA single left rotation at the unbalanced node is enough to restore balance in the RR case.\nThe RR case happens two times in the animation above:\nWhen node D is inserted, A becomes unbalanced, and bot A and B are right heavy. A left rotation at node A restores the tree balance.\nAfter nodes E, C and F are inserted, node B becomes unbalanced. This is an RR case because both node B and its right child node D are right heavy. A left rotation restores the tree balance.\nThe Left-Right (LR) Case\nThe Left-Right case is when the unbalanced node is left heavy, but its left child node is right heavy.\nIn this LR case, a left rotation is first done on the left child node, and then a right rotation is done on the original unbalanced node.\nStep through the animation below to see how the Left-Right case can happen, and how the rotation operations are done to restore balance.\nAs you are building the AVL Tree in the animation above, the Left-Right case happens 2 times, and rotation operations are required and done to restore balance:\nWhen K is inserted, node Q gets unbalanced with a balance factor of -2, so it is left heavy, and its left child E is right heavy, so this is a Left-Right case.\nAfter nodes C, F, and G are inserted, node K becomes unbalanced and left heavy, with its left child node E right heavy, so it is a Left-Right case.\nThe Right-Left (RL) Case\nThe Right-Left case is when the unbalanced node is right heavy, and its right child node is left heavy.\nIn this case we first do a right rotation on the unbalanced node's right child, and then we do a left rotation on the unbalanced node itself.\nStep through the animation below to see how the Right-Left case can occur, and how rotations are done to restore the balance.\nAfter inserting node B, we get a Right-Left case because node A becomes unbalanced and right heavy, and its right child is left heavy. To restore balance, a right rotation is first done on node F, and then a left rotation is done on node A.\nThe next Right-Left case occurs after nodes G, E, and D are added. This is a Right-Left case because B is unbalanced and right heavy, and its right child F is left heavy. To restore balance, a right rotation is first done on node F, and then a left rotation is done on node B.\nRetracing in AVL Trees\nAfter inserting or deleting a node in an AVL tree, the tree may become unbalanced. To find out if the tree is unbalanced, we need to update the heights and recalculate the balance factors of all ancestor nodes.\nThis process, known as retracing, is handled through recursion. As the recursive calls propagate back to the root after an insertion or deletion, each ancestor node's height is updated and the balance factor is recalculated. If any ancestor node is found to have a balance factor outside the range of -1 to 1, a rotation is performed at that node to restore the tree's balance.\nIn the simulation below, after inserting node F, the nodes C, E and H are all unbalanced, but since retracing works through recursion, the unbalance at node H is discovered and fixed first, which in this case also fixes the unbalance in nodes E and C.\nAfter node F is inserted, the code will retrace, calculating balancing factors as it propagates back up towards the root node. When node H is reached and the balancing factor -2 is calculated, a right rotation is done. Only after this rotation is done, the code will continue to retrace, calculating balancing factors further up on ancestor nodes E and C.\nBecause of the rotation, balancing factors for nodes E and C stay the same as before node F was inserted.\nAVL Tree Implementation in Python\nThis code is based on the BST implementation on the previous page, for inserting nodes.\nThere is only one new attribute for each node in the AVL tree compared to the BST, and that is the height, but there are many new functions and extra code lines needed for the AVL Tree implementation because of how the AVL Tree rebalances itself.\nThe implementation below builds an AVL tree based on a list of characters, to create the AVL Tree in the simulation above. The last node to be inserted 'F', also triggers a right rotation, just like in the simulation above.\nExampleGet your own Python Server\nImplement AVL Tree in Python:\nAVL Delete Node Implementation\nWhen deleting a node that is not a leaf node, the AVL Tree requires the minValueNode() function to find a node's next node in the in-order traversal. This is the same as when deleting a node in a Binary Search Tree, as explained on the previous page.\nTo delete a node in an AVL Tree, the same code to restore balance is needed as for the code to insert a node.\nExample\nDelete Node:\nTime Complexity for AVL Trees\nTake a look at the unbalanced Binary Search Tree below. Searching for \"M\" means that all nodes except 1 must be compared. But searching for \"M\" in the AVL Tree below only requires us to visit 4 nodes.\nSo in worst case, algorithms like search, insert, and delete must run through the whole height of the tree. This means that keeping the height (h) of the tree low, like we do using AVL Trees, gives us a lower runtime.\nSee the comparison of the time complexities between Binary Search Trees and AVL Trees below, and how the time complexities relate to the height (hh) of the tree, and the number of nodes (nn) in the tree.\nThe BST is not self-balancing. This means that a BST can be very unbalanced, almost like a long chain, where the height is nearly the same as the number of nodes. This makes operations like searching, deleting and inserting nodes slow, with time complexity O(h)=O(n)O(h) = O(n).\nThe AVL Tree however is self-balancing. That means that the height of the tree is kept to a minimum so that operations like searching, deleting and inserting nodes are much faster, with time complexity O(h)=O(logn)O(h) = O( \\log n).\nO(logn)O( \\log n) Explained\nThe fact that the time complexity is O(h)=O(logn)O(h) = O( \\log n) for search, insert, and delete on an AVL Tree with height hh and nodes nn can be explained like this:\nImagine a perfect Binary Tree where all nodes have two child nodes except on the lowest level, like the AVL Tree below.\nThe number of nodes on each level in such an AVL Tree are:\n1,2,4,8,16,32,..1, 2, 4, 8, 16, 32, ..\nWhich is the same as:\n20,21,22,23,24,25,..2^0, 2^1, 2^2, 2^3, 2^4, 2^5, ..\nTo get the number of nodes nn in a perfect Binary Tree with height h=3h=3, we can add the number of nodes on each level together:\nn3=20+21+22+23=15n_3=2^0 + 2^1 + 2^2 + 2^3 = 15\nWhich is actually the same as:\nn3=24−1=15n_3=2^4 - 1 = 15\nAnd this is actually the case for larger trees as well! If we want to get the number of nodes nn in a tree with height h=5h=5 for example, we find the number of nodes like this:\nn5=26−1=63n_5=2^6 - 1 = 63\nSo in general, the relationship between the height hh of a perfect Binary Tree and the number of nodes in it nn , can be expressed like this:\nnh=2h+1−1n_h = 2^{h+1} - 1\nNote: The formula above can also be found by calculating the sum of the geometric series 20+21+22+23+...+2n2^0 + 2^1 + 2^2+ 2^3 + ... + 2^n\nWe know that the time complexity for searching, deleting, or inserting a node in an AVL tree is O(h)O(h) , but we want to argue that the time complexity is actually O(log(n))O(\\log(n)) , so we need to find the height hh described by the number of nodes nn:\nn=2h+1−1n+1=2h+1log2(n+1)=log2(2h+1)h=log2(n+1)−1O(h)=O(logn) \\begin{equation} \\begin{aligned} n & = 2^{h+1}-1 \\\\ n+1 & = 2^{h+1} \\\\ \\log_2(n+1) & = \\log_2(2^{h+1}) \\\\ h & = \\log_2(n+1) - 1 \\\\ \\\\ O(h) & = O(\\log{n}) \\end{aligned} \\end{equation}\nHow the last line above is derived might not be obvious, but for a Binary Tree with a lot of nodes (big nn), the \"+1\" and \"-1\" terms are not important when we consider time complexity. For more details on how to calculate the time complexity using Big O notation, see this page.\nThe math above shows that the time complexity for search, delete, and insert operations on an AVL Tree O(h)O(h) , can actually be expressed as O(logn)O(\\log{n}) , which is fast, a lot faster than the time complexity for BSTs which is O(n)O(n) .",
      "examples": [
        "class TreeNode:\ndef __init__(self, data):\nself.data = data\nself.left = None\nself.right = None\nself.height = 1\n\ndef getHeight(node):\nif not node:\nreturn 0\nreturn node.height\n\ndef getBalance(node):\nif not node:\nreturn 0\nreturn getHeight(node.left) - getHeight(node.right)\n\ndef rightRotate(y):\nprint('Rotate right on node',y.data)\nx = y.left\nT2 = x.right\nx.right = y\ny.left = T2\ny.height = 1 + max(getHeight(y.left), getHeight(y.right))\nx.height = 1 + max(getHeight(x.left), getHeight(x.right))\nreturn x\n\ndef leftRotate(x):\nprint('Rotate left on node',x.data)\ny = x.right\nT2 = y.left\ny.left = x\nx.right = T2\nx.height = 1 + max(getHeight(x.left), getHeight(x.right))\ny.height = 1 + max(getHeight(y.left), getHeight(y.right))\nreturn y\n\ndef insert(node, data):\nif not node:\nreturn TreeNode(data)\n\nif data < node.data:\nnode.left = insert(node.left, data)\nelif data > node.data:\nnode.right = insert(node.right, data)\n\n# Update the balance factor and balance the tree\nnode.height = 1 + max(getHeight(node.left), getHeight(node.right))\nbalance = getBalance(node)\n\n# Balancing the tree\n# Left Left\nif balance > 1 and getBalance(node.left) >= 0:\nreturn rightRotate(node)\n\n# Left Right\nif balance > 1 and getBalance(node.left) < 0:\nnode.left = leftRotate(node.left)\nreturn rightRotate(node)\n\n# Right Right\nif balance < -1 and getBalance(node.right) <= 0:\nreturn leftRotate(node)\n\n# Right Left\nif balance < -1 and getBalance(node.right) > 0:\nnode.right = rightRotate(node.right)\nreturn leftRotate(node)\n\nreturn node\n\ndef inOrderTraversal(node):\nif node is None:\nreturn\ninOrderTraversal(node.left)\nprint(node.data, end=\", \")\ninOrderTraversal(node.right)\n\n# Inserting nodes\nroot = None\nletters = ['C', 'B', 'E', 'A', 'D', 'H', 'G', 'F']\nfor letter in letters:\nroot = insert(root, letter)\n\ninOrderTraversal(root)",
        "def minValueNode(node):\ncurrent = node\nwhile current.left is not None:\ncurrent = current.left\nreturn current\n\ndef delete(node, data):\nif not node:\nreturn node\n\nif data < node.data:\nnode.left = delete(node.left, data)\nelif data > node.data:\nnode.right = delete(node.right, data)\nelse:\nif node.left is None:\ntemp = node.right\nnode = None\nreturn temp\nelif node.right is None:\ntemp = node.left\nnode = None\nreturn temp\n\ntemp = minValueNode(node.right)\nnode.data = temp.data\nnode.right = delete(node.right, temp.data)\n\nreturn node\n\ndef inOrderTraversal(node):\nif node is None:\nreturn\ninOrderTraversal(node.left)\nprint(node.data, end=\", \")\ninOrderTraversal(node.right)\n\n# Inserting nodes\nroot = None\nletters = ['C', 'B', 'E', 'A', 'D', 'H', 'G', 'F']\nfor letter in letters:\nroot = insert(root, letter)\n\ninOrderTraversal(root)",
        "minValueNode()"
      ]
    },
    {
      "title": "Python Graphs",
      "summary": "Graphs\nA Graph is a non-linear data structure that consists of vertices (nodes) and edges.\nA vertex, also called a node, is a point or an object in the Graph, and an edge is used to connect two vertices with each other.\nGraphs are non-linear because the data structure allows us to have different paths to get from one vertex to another, unlike with linear data structures like Arrays or Linked Lists.\nGraphs are used to represent and solve problems where the data consists of objects and relationships between them, such as:\nSocial Networks: Each person is a vertex, and relationships (like friendships) are the edges. Algorithms can suggest potential friends.\nMaps and Navigation: Locations, like a town or bus stops, are stored as vertices, and roads are stored as edges. Algorithms can find the shortest route between two locations when stored as a Graph.\nInternet: Can be represented as a Graph, with web pages as vertices and hyperlinks as edges.\nBiology: Graphs can model systems like neural networks or the spread of diseases.\nGraph Representations\nA Graph representation tells us how a Graph is stored in memory.\nDifferent Graph representations can:\ntake up more or less space.\nbe faster or slower to search or manipulate.\nbe better suited depending on what type of Graph we have (weighted, directed, etc.), and what we want to do with the Graph.\nbe easier to understand and implement than others.\nBelow are short introductions of the different Graph representations, but Adjacency Matrix is the representation we will use for Graphs moving forward in this tutorial, as it is easy to understand and implement, and works in all cases relevant for this tutorial.\nGraph representations store information about which vertices are adjacent, and how the edges between the vertices are. Graph representations are slightly different if the edges are directed or weighted.\nTwo vertices are adjacent, or neighbors, if there is an edge between them.\nAdjacency Matrix Graph Representation\nAdjacency Matrix is the Graph representation (structure) we will use for this tutorial.\nHow to implement an Adjacency Matrix is shown on the next page.\nThe Adjacency Matrix is a 2D array (matrix) where each cell on index (i,j) stores information about the edge from vertex i to vertex j.\nBelow is a Graph with the Adjacency Matrix representation next to it.\nThe adjacency matrix above represents an undirected Graph, so the values '1' only tells us where the edges are. Also, the values in the adjacency matrix is symmetrical because the edges go both ways (undirected Graph).\nTo create a directed Graph with an adjacency matrix, we must decide which vertices the edges go from and to, by inserting the value at the correct indexes (i,j). To represent a weighted Graph we can put other values than '1' inside the adjacency matrix.\nBelow is a directed and weighted Graph with the Adjacency Matrix representation next to it.\nIn the adjacency matrix above, the value 3 on index (0,1) tells us there is an edge from vertex A to vertex B, and the weight for that edge is 3.\nAs you can see, the weights are placed directly into the adjacency matrix for the correct edge, and for a directed Graph, the adjacency matrix does not have to be symmetric.\nAdjacency List Graph Representation\nIn case we have a 'sparse' Graph with many vertices, we can save space by using an Adjacency List compared to using an Adjacency Matrix, because an Adjacency Matrix would reserve a lot of memory on empty Array elements for edges that don't exist.\nA 'sparse' Graph is a Graph where each vertex only has edges to a small portion of the other vertices in the Graph.\nAn Adjacency List has an array that contains all the vertices in the Graph, and each vertex has a Linked List (or Array) with the vertex's edges.\nIn the adjacency list above, the vertices A to D are placed in an Array, and each vertex in the array has its index written right next to it.\nEach vertex in the Array has a pointer to a Linked List that represents that vertex's edges. More specifically, the Linked List contains the indexes to the adjacent (neighbor) vertices.\nSo for example, vertex A has a link to a Linked List with values 3, 1, and 2. These values are the indexes to A's adjacent vertices D, B, and C.\nAn Adjacency List can also represent a directed and weighted Graph, like this:\nIn the Adjacency List above, vertices are stored in an Array. Each vertex has a pointer to a Linked List with edges stored as i,w, where i is the index of the vertex the edge goes to, and w is the weight of that edge.\nNode D for example, has a pointer to a Linked List with an edge to vertex A. The values 0,4 means that vertex D has an edge to vertex on index 0 (vertex A), and the weight of that edge is 4.",
      "examples": [
        "(i,j)",
        "i",
        "j",
        "3",
        "(0,1)",
        "i,w",
        "w",
        "0,4",
        "0",
        "4"
      ]
    },
    {
      "title": "Linear Search with Python",
      "summary": "Linear Search\nLinear search (or sequential search) is the simplest search algorithm. It checks each element one by one.\nRun the simulation above to see how the Linear Search algorithm works.\nThis algorithm is very simple and easy to understand and implement.\nHow it works:\nGo through the array value by value from the start.\nCompare each value to check if it is equal to the value we are looking for.\nIf the value is found, return the index of that value.\nIf the end of the array is reached and the value is not found, return -1 to indicate that the value was not found.\nIf the array is already sorted, it is better to use the much faster Binary Search algorithm that we will explore on the next page.\nImplement Linear Search in Python\nIn Python, the fastest way check if a value exists in a list is to use the in operator.\nExampleGet your own Python Server\nCheck if a value exists in a list:\nBut if you need to find the index of a value, you will need to implement a linear search:\nExample\nFind the index of a value in a list:\nTo implement the Linear Search algorithm we need:\nAn array with values to search through.\nA target value to search for.\nA loop that goes through the array from start to end.\nAn if-statement that compares the current value with the target value, and returns the current index if the target value is found.\nAfter the loop, return -1, because at this point we know the target value has not been found.\nLinear Search Time Complexity\nIf Linear Search runs and finds the target value as the first array value in an array with nn values, only one compare is needed.\nBut if Linear Search runs through the whole array of nn values, without finding the target value, nn compares are needed.\nThis means that time complexity for Linear Search is: O(n) O(n)\nIf we draw how much time Linear Search needs to find a value in an array of nn values, we get this graph:",
      "examples": [
        "mylist = [3, 7, 2, 9, 5, 1, 8, 4, 6]\n\nif 4 in mylist:\nprint(\"Found!\")\nelse:\nprint(\"Not found!\")",
        "def linearSearch(arr, targetVal):\nfor i in range(len(arr)):\nif arr[i] == targetVal:\nreturn i\nreturn -1\n\nmylist = [3, 7, 2, 9, 5, 1, 8, 4, 6]\nx = 4\n\nresult = linearSearch(mylist, x)\n\nif result != -1:\nprint(\"Found at index\", result)\nelse:\nprint(\"Not found\")",
        "in"
      ]
    },
    {
      "title": "Binary Search with Python",
      "summary": "Binary Search\nThe Binary Search algorithm searches through a sorted array and returns the index of the value it searches for.\nRun the simulation to see how the Binary Search algorithm works.\nBinary Search is much faster than Linear Search, but requires a sorted array to work.\nThe Binary Search algorithm works by checking the value in the center of the array. If the target value is lower, the next value to check is in the center of the left half of the array. This way of searching means that the search area is always half of the previous search area, and this is why the Binary Search algorithm is so fast.\nThis process of halving the search area happens until the target value is found, or until the search area of the array is empty.\nHow it works:\nCheck the value in the center of the array.\nIf the target value is lower, search the left half of the array. If the target value is higher, search the right half.\nContinue step 1 and 2 for the new reduced part of the array until the target value is found or until the search area is empty.\nIf the value is found, return the target value index. If the target value is not found, return -1.\nManual Run Through\nLet's try to do the searching manually, just to get an even better understanding of how Binary Search works before actually implementing it in a Python program. We will search for value 11.\nStep 1: We start with an array.\nStep 2: The value in the middle of the array at index 3, is it equal to 11?\nStep 3: 7 is less than 11, so we must search for 11 to the right of index 3. The values to the right of index 3 are [ 11, 15, 25]. The next value to check is the middle value 15, at index 5.\nStep 4: 15 is higher than 11, so we must search to the left of index 5. We have already checked index 0-3, so index 4 is only value left to check.\nWe have found it!\nValue 11 is found at index 4.\nReturning index position 4.\nBinary Search is finished.\nRun the simulation below to see the steps above animated:\nImplementing Binary Search in Python\nTo implement the Binary Search algorithm we need:\nAn array with values to search through.\nA target value to search for.\nA loop that runs as long as left index is less than, or equal to, the right index.\nAn if-statement that compares the middle value with the target value, and returns the index if the target value is found.\nAn if-statement that checks if the target value is less than, or larger than, the middle value, and updates the \"left\" or \"right\" variables to narrow down the search area.\nAfter the loop, return -1, because at this point we know the target value has not been found.\nThe resulting code for Binary Search looks like this:\nExampleGet your own Python Server\nCreate a Binary Search algorithm in Python:\nBinary Search Time Complexity\nEach time Binary Search checks a new value to see if it is the target value, the search area is halved.\nThis means that even in the worst case scenario where Binary Search cannot find the target value, it still only needs log2n \\log_{2}n comparisons to look through a sorted array of nn values.\nTime complexity for Binary Search is: O(log2n) O( \\log_{2} n )\nNote: When writing time complexity using Big O notation we could also just have written O(logn) O( \\log n ) , but O(log2n) O( \\log_{2} n ) reminds us that the array search area is halved for every new comparison, which is the basic concept of Binary Search, so we will just keep the base 2 indication in this case.\nIf we draw how much time Binary Search needs to find a value in an array of nn values, compared to Linear Search, we get this graph:",
      "examples": [
        "[ 2, 3, 7, 7, 11, 15, 25]",
        "[ 2, 3, 7,\n7\n, 11, 15, 25]",
        "[ 2, 3, 7, 7, 11,\n15\n, 25]",
        "[ 2, 3, 7, 7,\n11\n, 15, 25]",
        "def binarySearch(arr, targetVal):\nleft = 0\nright = len(arr) - 1\n\nwhile left <= right:\nmid = (left + right) // 2\n\nif arr[mid] == targetVal:\nreturn mid\n\nif arr[mid] < targetVal:\nleft = mid + 1\nelse:\nright = mid - 1\n\nreturn -1\n\nmylist = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\nx = 11\n\nresult = binarySearch(mylist, x)\n\nif result != -1:\nprint(\"Found at index\", result)\nelse:\nprint(\"Not found\")"
      ]
    },
    {
      "title": "Bubble Sort with Python",
      "summary": "Bubble Sort\nBubble Sort is an algorithm that sorts an array from the lowest value to the highest value.\nRun the simulation to see how it looks like when the Bubble Sort algorithm sorts an array of values. Each value in the array is represented by a column.\nThe word 'Bubble' comes from how this algorithm works, it makes the highest values 'bubble up'.\nHow it works:\nGo through the array, one value at a time.\nFor each value, compare the value with the next value.\nIf the value is higher than the next one, swap the values so that the highest value comes last.\nGo through the array as many times as there are values in the array.\nManual Run Through\nBefore we implement the Bubble Sort algorithm in a programming language, let's manually run through a short array only one time, just to get the idea.\nStep 1: We start with an unsorted array.\nStep 2: We look at the two first values. Does the lowest value come first? Yes, so we don't need to swap them.\nStep 3: Take one step forward and look at values 12 and 9. Does the lowest value come first? No.\nStep 4: So we need to swap them so that 9 comes first.\nStep 5: Taking one step forward, looking at 12 and 11.\nStep 6: We must swap so that 11 comes before 12.\nStep 7: Looking at 12 and 3, do we need to swap them? Yes.\nStep 8: Swapping 12 and 3 so that 3 comes first.\nRepeat until no more swaps are needed and you will get a sorted array:\nImplement Bubble Sort in Python\nTo implement the Bubble Sort algorithm in Python, we need:\nAn array with values to sort.\nAn inner loop that goes through the array and swaps values if the first value is higher than the next value. This loop must loop through one less value each time it runs.\nAn outer loop that controls how many times the inner loop must run. For an array with n values, this outer loop must run n-1 times.\nThe resulting code looks like this:\nExampleGet your own Python Server\nCreate a Bubble Sort algorithm in Python:\nBubble Sort Improvement\nThe Bubble Sort algorithm can be improved a little bit more.\nImagine that the array is almost sorted already, with the lowest numbers at the start, like this for example:\nIn this case, the array will be sorted after the first run, but the Bubble Sort algorithm will continue to run, without swapping elements, and that is not necessary.\nIf the algorithm goes through the array one time without swapping any values, the array must be finished sorted, and we can stop the algorithm, like this:\nExample\nImproved Bubble Sort algorithm:\nBubble Sort Time Complexity\nThe Bubble Sort algorithm loops through every value in the array, comparing it to the value next to it. So for an array of nn values, there must be nn such comparisons in one loop.\nAnd after one loop, the array is looped through again and again nn times.\nThis means there are n⋅nn \\cdot n comparisons done in total, so the time complexity for Bubble Sort is: O(n2) O(n^2)\nThe graph describing the Bubble Sort time complexity looks like this:\nAs you can see, the run time increases really fast when the size of the array is increased.\nLuckily there are sorting algorithms that are faster than this, like Quicksort, that we will look at later.",
      "examples": [
        "[7, 12, 9, 11, 3]",
        "[\n7, 12,\n9, 11, 3]",
        "[7,\n12, 9,\n11, 3]",
        "[7,\n9, 12,\n11, 3]",
        "[7, 9,\n12, 11,\n3]",
        "[7, 9,\n11, 12,\n3]",
        "[7, 9, 11,\n12, 3\n]",
        "[7, 9, 11,\n3, 12\n]",
        "mylist = [64, 34, 25, 12, 22, 11, 90, 5]\n\nn = len(mylist)\nfor i in range(n-1):\nfor j in range(n-i-1):\nif mylist[j] > mylist[j+1]:\nmylist[j], mylist[j+1] = mylist[j+1], mylist[j]\n\nprint(mylist)",
        "mylist = [7, 3, 9, 12, 11]",
        "mylist = [7, 3, 9, 12, 11]\n\nn = len(mylist)\nfor i in range(n-1):\nswapped = False\nfor j in range(n-i-1):\nif mylist[j] > mylist[j+1]:\nmylist[j], mylist[j+1] = mylist[j+1], mylist[j]\nswapped = True\nif not swapped:\nbreak\n\nprint(mylist)"
      ]
    },
    {
      "title": "Selection Sort with Python",
      "summary": "Selection Sort\nThe Selection Sort algorithm finds the lowest value in an array and moves it to the front of the array.\nThe algorithm looks through the array again and again, moving the next lowest values to the front, until the array is sorted.\nHow it works:\nGo through the array to find the lowest value.\nMove the lowest value to the front of the unsorted part of the array.\nGo through the array again as many times as there are values in the array.\nManual Run Through\nBefore we implement the Selection Sort algorithm in Python program, let's manually run through a short array only one time, just to get the idea.\nStep 1: We start with an unsorted array.\nStep 2: Go through the array, one value at a time. Which value is the lowest? 3, right?\nStep 3: Move the lowest value 3 to the front of the array.\nStep 4: Look through the rest of the values, starting with 7. 7 is the lowest value, and already at the front of the array, so we don't need to move it.\nStep 5: Look through the rest of the array: 12, 9 and 11. 9 is the lowest value.\nStep 6: Move 9 to the front.\nStep 7: Looking at 12 and 11, 11 is the lowest.\nStep 8: Move it to the front.\nFinally, the array is sorted.\nRun the simulation below to see the steps above animated:\nImplement Selection Sort in Python\nTo implement the Selection Sort algorithm in Python, we need:\nAn array with values to sort.\nAn inner loop that goes through the array, finds the lowest value, and moves it to the front of the array. This loop must loop through one less value each time it runs.\nAn outer loop that controls how many times the inner loop must run. For an array with nn values, this outer loop must run n−1n-1 times.\nThe resulting code looks like this:\nExampleGet your own Python Server\nUsing the Selection sort on a Python list:\nSelection Sort Shifting Problem\nThe Selection Sort algorithm can be improved a little bit more.\nIn the code above, the lowest value element is removed, and then inserted in front of the array.\nEach time the next lowest value array element is removed, all following elements must be shifted one place down to make up for the removal.\nThese shifting operation takes a lot of time, and we are not even done yet! After the lowest value (5) is found and removed, it is inserted at the start of the array, causing all following values to shift one position up to make space for the new value, like the image below shows.\nNote: You will not see these shifting operations happening in the code if you are using a high level programming language such as Python or Java, but the shifting operations are still happening in the background. Such shifting operations require extra time for the computer to do, which can be a problem.\nSolution: Swap Values!\nInstead of all the shifting, swap the lowest value (5) with the first value (64) like below.\nWe can swap values like the image above shows because the lowest value ends up in the correct position, and it does not matter where we put the other value we are swapping with, because it is not sorted yet.\nHere is a simulation that shows how this improved Selection Sort with swapping works:\nWe will insert the improvement in the Selection Sort algorithm:\nExample\nThe improved Selection Sort algorithm, including swapping values:\nSelection Sort Time Complexity\nSelection Sort sorts an array of nn values.\nOn average, about n2\\frac{n}{2} elements are compared to find the lowest value in each loop.\nAnd Selection Sort must run the loop to find the lowest value approximately nn times.\nWe get time complexity: O(n2⋅n)=O(n2) O( \\frac{n}{2} \\cdot n) = {O(n^2)}\nThe time complexity for the Selection Sort algorithm can be displayed in a graph like this:\nAs you can see, the run time is the same as for Bubble Sort: The run time increases really fast when the size of the array is increased.",
      "examples": [
        "[ 7, 12, 9, 11, 3]",
        "[ 7, 12, 9, 11,\n3\n]",
        "[\n3\n, 7, 12, 9, 11]",
        "[ 3,\n7\n, 12, 9, 11]",
        "[ 3, 7, 12,\n9\n, 11]",
        "[ 3, 7,\n9\n, 12, 11]",
        "[ 3, 7, 9, 12,\n11\n]",
        "[ 3, 7, 9,\n11\n, 12]",
        "mylist = [64, 34, 25, 5, 22, 11, 90, 12]\n\nn = len(mylist)\nfor i in range(n-1):\nmin_index = i\nfor j in range(i+1, n):\nif mylist[j] < mylist[min_index]:\nmin_index = j\nmin_value = mylist.pop(min_index)\nmylist.insert(i, min_value)\n\nprint(mylist)",
        "mylist = [64, 34, 25, 12, 22, 11, 90, 5]\n\nn = len(mylist)\nfor i in range(n):\nmin_index = i\nfor j in range(i+1, n):\nif mylist[j] < mylist[min_index]:\nmin_index = j\nmylist[i], mylist[min_index] = mylist[min_index], mylist[i]\n\nprint(mylist)"
      ]
    },
    {
      "title": "Insertion Sort with Python",
      "summary": "Insertion Sort\nThe Insertion Sort algorithm uses one part of the array to hold the sorted values, and the other part of the array to hold values that are not sorted yet.\nThe algorithm takes one value at a time from the unsorted part of the array and puts it into the right place in the sorted part of the array, until the array is sorted.\nHow it works:\nTake the first value from the unsorted part of the array.\nMove the value into the correct place in the sorted part of the array.\nGo through the unsorted part of the array again as many times as there are values.\nManual Run Through\nBefore we implement the Insertion Sort algorithm in a Python program, let's manually run through a short array, just to get the idea.\nStep 1: We start with an unsorted array.\nStep 2: We can consider the first value as the initial sorted part of the array. If it is just one value, it must be sorted, right?\nStep 3: The next value 12 should now be moved into the correct position in the sorted part of the array. But 12 is higher than 7, so it is already in the correct position.\nStep 4: Consider the next value 9.\nStep 5: The value 9 must now be moved into the correct position inside the sorted part of the array, so we move 9 in between 7 and 12.\nStep 6: The next value is 11.\nStep 7: We move it in between 9 and 12 in the sorted part of the array.\nStep 8: The last value to insert into the correct position is 3.\nStep 9: We insert 3 in front of all other values because it is the lowest value.\nFinally, the array is sorted.\nRun the simulation below to see the steps above animated:\nImplement Insertion Sort in Python\nTo implement the Insertion Sort algorithm in a Python program, we need:\nAn array with values to sort.\nAn outer loop that picks a value to be sorted. For an array with nn values, this outer loop skips the first value, and must run n−1n-1 times.\nAn inner loop that goes through the sorted part of the array, to find where to insert the value. If the value to be sorted is at index ii, the sorted part of the array starts at index 00 and ends at index i−1i-1.\nThe resulting code looks like this:\nExampleGet your own Python Server\nUsing the Insertion Sort on a Python list:\nInsertion Sort Improvement\nInsertion Sort can be improved a little bit more.\nThe way the code above first removes a value and then inserts it somewhere else is intuitive. It is how you would do Insertion Sort physically with a hand of cards for example. If low value cards are sorted to the left, you pick up a new unsorted card, and insert it in the correct place between the other already sorted cards.\nThe problem with this way of programming it is that when removing a value from the array, all elements above must be shifted one index place down:\nAnd when inserting the removed value into the array again, there are also many shift operations that must be done: all following elements must shift one position up to make place for the inserted value:\nThese shifting operations can take a lot of time, especially for an array with many elements.\nHidden memory shifts: You will not see these shifting operations happening in the code if you are using a high-level programming language such as Python or JavaScript, but the shifting operations are still happening in the background. Such shifting operations require extra time for the computer to do, which can be a problem.\nYou can read more about how arrays are stored in memory here.\nImproved Solution\nWe can avoid most of these shift operations by only shifting the values necessary:\nIn the image above, first value 7 is copied, then values 11 and 12 are shifted one place up in the array, and at last value 7 is put where value 11 was before.\nThe number of shifting operations is reduced from 12 to 2 in this case.\nThis improvement is implemented in the example below:\nExample\nInsert the improvements in the sorting algorithm:\nWhat is also done in the code above is to break out of the inner loop. That is because there is no need to continue comparing values when we have already found the correct place for the current value.\nInsertion Sort Time Complexity\nInsertion Sort sorts an array of nn values.\nOn average, each value must be compared to about n2\\frac{n}{2} other values to find the correct place to insert it.\nInsertion Sort must run the loop to insert a value in its correct place approximately nn times.\nWe get time complexity for Insertion Sort: O(n2⋅n)=O(n2) O( \\frac{n}{2} \\cdot n) = {O(n^2)}\nThe time complexity for Insertion Sort can be displayed like this:\nFor Insertion Sort, there is a big difference between best, average and worst case scenarios.\nNext up is Quicksort. Finally we will see a faster sorting algorithm!",
      "examples": [
        "[ 7, 12, 9, 11, 3]",
        "[\n7\n, 12, 9, 11, 3]",
        "[ 7,\n12\n, 9, 11, 3]",
        "[ 7, 12,\n9\n, 11, 3]",
        "[ 7,\n9\n, 12, 11, 3]",
        "[ 7, 9, 12, > 11, 3]",
        "[ 7, 9,\n11\n, 12, 3]",
        "[ 7, 9, 11, 12,\n3\n]",
        "[\n3\n,7, 9, 11, 12]",
        "mylist = [64, 34, 25, 12, 22, 11, 90, 5]\n\nn = len(mylist)\nfor i in range(1,n):\ninsert_index = i\ncurrent_value = mylist.pop(i)\nfor j in range(i-1, -1, -1):\nif mylist[j] > current_value:\ninsert_index = j\nmylist.insert(insert_index, current_value)\n\nprint(mylist)",
        "mylist = [64, 34, 25, 12, 22, 11, 90, 5]\n\nn = len(mylist)\nfor i in range(1,n):\ninsert_index = i\ncurrent_value = mylist[i]\nfor j in range(i-1, -1, -1):\nif mylist[j] > current_value:\nmylist[j+1] = mylist[j]\ninsert_index = j\nelse:\nbreak\nmylist[insert_index] = current_value\n\nprint(mylist)"
      ]
    },
    {
      "title": "DSA Quicksort with Python",
      "summary": "Quicksort\nAs the name suggests, Quicksort is one of the fastest sorting algorithms.\nThe Quicksort algorithm takes an array of values, chooses one of the values as the 'pivot' element, and moves the other values so that lower values are on the left of the pivot element, and higher values are on the right of it.\nIn this tutorial the last element of the array is chosen to be the pivot element, but we could also have chosen the first element of the array, or any element in the array really.\nThen, the Quicksort algorithm does the same operation recursively on the sub-arrays to the left and right side of the pivot element. This continues until the array is sorted.\nRecursion is when a function calls itself.\nAfter the Quicksort algorithm has put the pivot element in between a sub-array with lower values on the left side, and a sub-array with higher values on the right side, the algorithm calls itself twice, so that Quicksort runs again for the sub-array on the left side, and for the sub-array on the right side. The Quicksort algorithm continues to call itself until the sub-arrays are too small to be sorted.\nThe algorithm can be described like this:\nHow it works:\nChoose a value in the array to be the pivot element.\nOrder the rest of the array so that lower values than the pivot element are on the left, and higher values are on the right.\nSwap the pivot element with the first element of the higher values so that the pivot element lands in between the lower and higher values.\nDo the same operations (recursively) for the sub-arrays on the left and right side of the pivot element.\nManual Run Through\nBefore we implement the Quicksort algorithm in a programming language, let's manually run through a short array, just to get the idea.\nStep 1: We start with an unsorted array.\nStep 2: We choose the last value 3 as the pivot element.\nStep 3: The rest of the values in the array are all greater than 3, and must be on the right side of 3. Swap 3 with 11.\nStep 4: Value 3 is now in the correct position. We need to sort the values to the right of 3. We choose the last value 11 as the new pivot element.\nStep 5: The value 7 must be to the left of pivot value 11, and 12 must be to the right of it. Move 7 and 12.\nStep 6: Swap 11 with 12 so that lower values 9 and 7 are on the left side of 11, and 12 is on the right side.\nStep 7: 11 and 12 are in the correct positions. We choose 7 as the pivot element in sub-array [ 9, 7], to the left of 11.\nStep 8: We must swap 9 with 7.\nAnd now, the array is sorted.\nRun the simulation below to see the steps above animated:\nImplement Quicksort in Python\nTo write a 'quickSort' method that splits the array into shorter and shorter sub-arrays we use recursion. This means that the 'quickSort' method must call itself with the new sub-arrays to the left and right of the pivot element. Read more about recursion here.\nTo implement the Quicksort algorithm in a Python program, we need:\nAn array with values to sort.\nA quickSort method that calls itself (recursion) if the sub-array has a size larger than 1.\nA partition method that receives a sub-array, moves values around, swaps the pivot element into the sub-array and returns the index where the next split in sub-arrays happens.\nThe resulting code looks like this:\nExampleGet your own Python Server\nUsing the Quicksort algorithm in a Python program:\nQuicksort Time Complexity\nThe worst case scenario for Quicksort is O(n2)O(n^2) . This is when the pivot element is either the highest or lowest value in every sub-array, which leads to a lot of recursive calls. With our implementation above, this happens when the array is already sorted.\nBut on average, the time complexity for Quicksort is actually just O(nlogn)O(n \\log n) , which is a lot better than for the previous sorting algorithms we have looked at. That is why Quicksort is so popular.\nBelow you can see the significant improvement in time complexity for Quicksort in an average scenario O(nlogn)O(n \\log n) , compared to the previous sorting algorithms Bubble, Selection and Insertion Sort with time complexity O(n2)O(n^2) :\nThe recursion part of the Quicksort algorithm is actually a reason why the average sorting scenario is so fast, because for good picks of the pivot element, the array will be split in half somewhat evenly each time the algorithm calls itself. So the number of recursive calls do not double, even if the number of values nn double.",
      "examples": [
        "[ 11, 9, 12, 7, 3]",
        "[ 11, 9, 12, 7,\n3\n]",
        "[\n3\n, 9, 12, 7,\n11\n]",
        "[ 3, 9, 12, 7,\n11\n]",
        "[ 3, 9,\n7, 12\n, 11]",
        "[ 3, 9, 7,\n11, 12\n]",
        "[ 3, 9,\n7\n, 11, 12]",
        "[ 3,\n7, 9\n, 11, 12]",
        "def partition(array, low, high):\npivot = array[high]\ni = low - 1\n\nfor j in range(low, high):\nif array[j] <= pivot:\ni += 1\narray[i], array[j] = array[j], array[i]\n\narray[i+1], array[high] = array[high], array[i+1]\nreturn i+1\n\ndef quicksort(array, low=0, high=None):\nif high is None:\nhigh = len(array) - 1\n\nif low < high:\npivot_index = partition(array, low, high)\nquicksort(array, low, pivot_index-1)\nquicksort(array, pivot_index+1, high)\n\nmylist = [64, 34, 25, 5, 22, 11, 90, 12]\nquicksort(mylist)\nprint(mylist)"
      ]
    },
    {
      "title": "DSA Counting Sort with Python",
      "summary": "Counting Sort\nThe Counting Sort algorithm sorts an array by counting the number of times each value occurs.\nRun the simulation to see how 17 integer values from 1 till 5 are sorted using Counting Sort.\nCounting Sort does not compare values like the previous sorting algorithms we have looked at, and only works on non negative integers.\nFurthermore, Counting Sort is fast when the range of possible values kk is smaller than the number of values nn.\nHow it works:\nCreate a new array for counting how many there are of the different values.\nGo through the array that needs to be sorted.\nFor each value, count it by increasing the counting array at the corresponding index.\nAfter counting the values, go through the counting array to create the sorted array.\nFor each count in the counting array, create the correct number of elements, with values that correspond to the counting array index.\nConditions for Counting Sort\nThese are the reasons why Counting Sort is said to only work for a limited range of non-negative integer values:\nInteger values: Counting Sort relies on counting occurrences of distinct values, so they must be integers. With integers, each value fits with an index (for non negative values), and there is a limited number of different values, so that the number of possible different values kk is not too big compared to the number of values nn.\nNon negative values: Counting Sort is usually implemented by creating an array for counting. When the algorithm goes through the values to be sorted, value x is counted by increasing the counting array value at index x. If we tried sorting negative values, we would get in trouble with sorting value -3, because index -3 would be outside the counting array.\nLimited range of values: If the number of possible different values to be sorted kk is larger than the number of values to be sorted nn, the counting array we need for sorting will be larger than the original array we have that needs sorting, and the algorithm becomes ineffective.\nManual Run Through\nBefore we implement the Counting Sort algorithm in a programming language, let's manually run through a short array, just to get the idea.\nStep 1: We start with an unsorted array.\nStep 2: We create another array for counting how many there are of each value. The array has 4 elements, to hold values 0 through 3.\nStep 3: Now let's start counting. The first element is 2, so we must increment the counting array element at index 2.\nStep 4: After counting a value, we can remove it, and count the next value, which is 3.\nStep 5: The next value we count is 0, so we increment index 0 in the counting array.\nStep 6: We continue like this until all values are counted.\nStep 7: Now we will recreate the elements from the initial array, and we will do it so that the elements are ordered lowest to highest.\nThe first element in the counting array tells us that we have 1 element with value 0. So we push 1 element with value 0 into the array, and we decrease the element at index 0 in the counting array with 1.\nStep 8: From the counting array we see that we do not need to create any elements with value 1.\nStep 9: We push 3 elements with value 2 into the end of the array. And as we create these elements we also decrease the counting array at index 2.\nStep 10: At last we must add 2 elements with value 3 at the end of the array.\nFinally! The array is sorted.\nRun the simulation below to see the steps above animated:\nImplement Counting Sort in Python\nTo implement the Counting Sort algorithm in a Python program, we need:\nAn array with values to sort.\nA 'countingSort' method that receives an array of integers.\nAn array inside the method to keep count of the values.\nA loop inside the method that counts and removes values, by incrementing elements in the counting array.\nA loop inside the method that recreates the array by using the counting array, so that the elements appear in the right order.\nOne more thing: We need to find out what the highest value in the array is, so that the counting array can be created with the correct size. For example, if the highest value is 5, the counting array must be 6 elements in total, to be able count all possible non negative integers 0, 1, 2, 3, 4 and 5.\nThe resulting code looks like this:\nExampleGet your own Python Server\nUsing the Counting Sort algorithm in a Python program:\nCounting Sort Time Complexity\nHow fast the Counting Sort algorithm runs depends on both the range of possible values kk and the number of values nn.\nIn general, time complexity for Counting Sort is O(n+k)O(n+k).\nIn a best case scenario, the range of possible different values kk is very small compared to the number of values nn and Counting Sort has time complexity O(n)O(n).\nBut in a worst case scenario, the range of possible different values kk is very big compared to the number of values nn and Counting Sort can have time complexity O(n2)O(n^2) or even worse.\nThe plot below shows how much the time complexity for Counting Sort can vary.\nAs you can see, it is important to consider the range of values compared to the number of values to be sorted before choosing Counting Sort as your algorithm. Also, as mentioned at the top of the page, keep in mind that Counting Sort only works for non negative integer values.\nAs mentioned previously: if the numbers to be sorted varies a lot in value (large kk), and there are few numbers to sort (small nn), the Counting Sort algorithm is not effective.\nIf we hold nn and kk fixed, the \"Random\", \"Descending\" and \"Ascending\" alternatives in the simulation above results in the same number of operations. This is because the same thing happens in all three cases: A counting array is set up, the numbers are counted, and the new sorted array is created.",
      "examples": [
        "myArray = [ 2, 3, 0, 2, 3, 2]",
        "myArray = [ 2, 3, 0, 2, 3, 2]\ncountArray = [ 0, 0, 0, 0]",
        "myArray = [\n2\n, 3, 0, 2, 3, 2]\ncountArray = [ 0, 0,\n1\n, 0]",
        "myArray = [\n3\n, 0, 2, 3, 2]\ncountArray = [ 0, 0, 1,\n1\n]",
        "myArray = [\n0\n, 2, 3, 2]\ncountArray = [\n1\n, 0, 1, 1]",
        "myArray = [ ]\ncountArray = [\n1, 0, 3, 2\n]",
        "myArray = [\n0\n]\ncountArray = [\n0\n, 0, 3, 2]",
        "myArray = [ 0]\ncountArray = [ 0,\n0\n, 3, 2]",
        "myArray = [ 0,\n2, 2, 2\n]\ncountArray = [ 0, 0,\n0\n, 2]",
        "myArray = [0, 2, 2, 2,\n3, 3\n]\ncountArray = [ 0, 0, 0,\n0\n]",
        "def countingSort(arr):\nmax_val = max(arr)\ncount = [0] * (max_val + 1)\n\nwhile len(arr) > 0:\nnum = arr.pop(0)\ncount[num] += 1\n\nfor i in range(len(count)):\nwhile count[i] > 0:\narr.append(i)\ncount[i] -= 1\n\nreturn arr\n\nmylist = [4, 2, 2, 6, 3, 3, 1, 6, 5, 2, 3]\nmysortedlist = countingSort(mylist)\nprint(mysortedlist)",
        "countArray = [ 0, 0, 0, 0]",
        "myArray = [\n2\n, 3, 0, 2, 3, 2]",
        "countArray = [ 0, 0,\n1\n, 0]",
        "myArray = [\n3\n, 0, 2, 3, 2]",
        "countArray = [ 0, 0, 1,\n1\n]",
        "myArray = [\n0\n, 2, 3, 2]",
        "countArray = [\n1\n, 0, 1, 1]",
        "myArray = [ ]",
        "countArray = [\n1, 0, 3, 2\n]",
        "myArray = [\n0\n]",
        "countArray = [\n0\n, 0, 3, 2]",
        "myArray = [ 0]",
        "countArray = [ 0,\n0\n, 3, 2]",
        "myArray = [ 0,\n2, 2, 2\n]",
        "countArray = [ 0, 0,\n0\n, 2]",
        "myArray = [0, 2, 2, 2,\n3, 3\n]",
        "countArray = [ 0, 0, 0,\n0\n]"
      ]
    },
    {
      "title": "DSA Radix Sort with Python",
      "summary": "Radix Sort\nThe Radix Sort algorithm sorts an array by individual digits, starting with the least significant digit (the rightmost one).\nClick the button to do Radix Sort, one step (digit) at a time.\nThe radix (or base) is the number of unique digits in a number system. In the decimal system we normally use, there are 10 different digits from 0 till 9.\nRadix Sort uses the radix so that decimal values are put into 10 different buckets (or containers) corresponding to the digit that is in focus, then put back into the array before moving on to the next digit.\nRadix Sort is a non comparative algorithm that only works with non negative integers.\nThe Radix Sort algorithm can be described like this:\nHow it works:\nStart with the least significant digit (rightmost digit).\nSort the values based on the digit in focus by first putting the values in the correct bucket based on the digit in focus, and then put them back into array in the correct order.\nMove to the next digit, and sort again, like in the step above, until there are no digits left.\nStable Sorting\nRadix Sort must sort the elements in a stable way for the result to be sorted correctly.\nA stable sorting algorithm is an algorithm that keeps the order of elements with the same value before and after the sorting. Let's say we have two elements \"K\" and \"L\", where \"K\" comes before \"L\", and they both have value \"3\". A sorting algorithm is considered stable if element \"K\" still comes before \"L\" after the array is sorted.\nIt makes little sense to talk about stable sorting algorithms for the previous algorithms we have looked at individually, because the result would be same if they are stable or not. But it is important for Radix Sort that the the sorting is done in a stable way because the elements are sorted by just one digit at a time.\nSo after sorting the elements on the least significant digit and moving to the next digit, it is important to not destroy the sorting work that has already been done on the previous digit position, and that is why we need to take care that Radix Sort does the sorting on each digit position in a stable way.\nIn the simulation below it is revealed how the underlying sorting into buckets is done. And to get a better understanding of how stable sorting works, you can also choose to sort in an unstable way, that will lead to an incorrect result. The sorting is made unstable by simply putting elements into buckets from the end of the array instead of from the start of the array.\nStable sort? Yes\nManual Run Through\nLet's try to do the sorting manually, just to get an even better understanding of how Radix Sort works before actually implementing it in a programming language.\nStep 1: We start with an unsorted array, and an empty array to fit values with corresponding radices 0 till 9.\nStep 2: We start sorting by focusing on the least significant digit.\nStep 3: Now we move the elements into the correct positions in the radix array according to the digit in focus. Elements are taken from the start of myArray and pushed into the correct position in the radixArray.\nStep 4: We move the elements back into the initial array, and the sorting is now done for the least significant digit. Elements are taken from the end radixArray, and put into the start of myArray.\nStep 5: We move focus to the next digit. Notice that values 45 and 25 are still in the same order relative to each other as they were to start with, because we sort in a stable way.\nStep 6: We move elements into the radix array according to the focused digit.\nStep 7: We move elements back into the start of myArray, from the back of radixArray.\nThe sorting is finished!\nRun the simulation below to see the steps above animated:\nImplement Radix Sort in Python\nTo implement the Radix Sort algorithm we need:\nAn array with non negative integers that needs to be sorted.\nA two dimensional array with index 0 to 9 to hold values with the current radix in focus.\nA loop that takes values from the unsorted array and places them in the correct position in the two dimensional radix array.\nA loop that puts values back into the initial array from the radix array.\nAn outer loop that runs as many times as there are digits in the highest value.\nThe resulting code looks like this:\nExampleGet your own Python Server\nUsing the Radix Sort algorithm in a Python program:\nOn line 7, we use floor division (\"//\") to divide the maximum value 802 by 1 the first time the while loop runs, the next time it is divided by 10, and the last time it is divided by 100. When using floor division \"//\", any number beyond the decimal point are disregarded, and an integer is returned.\nOn line 11, it is decided where to put a value in the radixArray based on its radix, or digit in focus. For example, the second time the outer while loop runs exp will be 10. Value 170 divided by 10 will be 17. The \"%10\" operation divides by 10 and returns what is left. In this case 17 is divided by 10 one time, and 7 is left. So value 170 is placed in index 7 in the radixArray.\nRadix Sort Using Other Sorting Algorithms\nRadix Sort can actually be implemented together with any other sorting algorithm as long as it is stable. This means that when it comes down to sorting on a specific digit, any stable sorting algorithm will work, such as counting sort or bubble sort.\nThis is an implementation of Radix Sort that uses Bubble Sort to sort on the individual digits:\nExample\nA Radix Sort algorithm that uses Bubble Sort:\nRadix Sort Time Complexity\nThe time complexity for Radix Sort is: O(n⋅k) O(n \\cdot k)\nThis means that Radix Sort depends both on the values that need to be sorted nn, and the number of digits in the highest value kk.\nA best case scenario for Radix Sort is if there are lots of values to sort, but the values have few digits. For example if there are more than a million values to sort, and the highest value is 999, with just three digits. In such a case the time complexity O(n⋅k)O(n \\cdot k) can be simplified to just O(n)O(n).\nA worst case scenario for Radix Sort would be if there are as many digits in the highest value as there are values to sort. This is perhaps not a common scenario, but the time complexity would be O(n2)O(n^2)in this case.\nThe most average or common case is perhaps if the number of digits kk is something like k(n)=lognk(n)= \\log n. If so, Radix Sort gets time complexity O(n⋅logn)O(n \\cdot \\log n ). An example of such a case would be if there are 1000000 values to sort, and the values have 6 digits.\nSee different possible time complexities for Radix Sort in the image below.",
      "examples": [
        "myArray = [ 33, 45, 40, 25, 17, 24]\nradixArray = [ [], [], [], [], [], [], [], [], [], [] ]",
        "myArray = [ 3\n3\n, 4\n5\n, 4\n0\n, 2\n5\n, 1\n7\n, 2\n4\n]\nradixArray = [ [], [], [], [], [], [], [], [], [], [] ]",
        "myArray = [ ]\nradixArray = [ [4\n0\n], [], [], [3\n3\n], [2\n4\n], [4\n5\n, 2\n5\n], [], [1\n7\n], [], [] ]",
        "myArray = [ 4\n0\n, 3\n3\n, 2\n4\n, 4\n5\n, 2\n5\n, 1\n7\n]\nradixArray = [ [], [], [], [], [], [], [], [], [], [] ]",
        "myArray = [\n4\n0,\n3\n3,\n2\n4,\n4\n5,\n2\n5,\n1\n7 ]\nradixArray = [ [], [], [], [], [], [], [], [], [], [] ]",
        "myArray = [ ]\nradixArray = [ [], [\n1\n7], [\n2\n4,\n2\n5], [\n3\n3], [\n4\n0,\n4\n5], [], [], [], [], [] ]",
        "myArray = [\n1\n7,\n2\n4,\n2\n5,\n3\n3,\n4\n0,\n4\n5 ]\nradixArray = [ [], [], [], [], [], [], [], [], [], [] ]",
        "mylist = [170, 45, 75, 90, 802, 24, 2, 66]\nprint(\"Original array:\", mylist)\nradixArray = [[], [], [], [], [], [], [], [], [], []]\nmaxVal = max(mylist)\nexp = 1\n\nwhile maxVal // exp > 0:\n\nwhile len(mylist) > 0:\nval = mylist.pop()\nradixIndex = (val // exp) % 10\nradixArray[radixIndex].append(val)\n\nfor bucket in radixArray:\nwhile len(bucket) > 0:\nval = bucket.pop()\nmylist.append(val)\n\nexp *= 10\n\nprint(mylist)",
        "def bubbleSort(arr):\nn = len(arr)\nfor i in range(n):\nfor j in range(0, n - i - 1):\nif arr[j] > arr[j + 1]:\narr[j], arr[j + 1] = arr[j + 1], arr[j]\n\ndef radixSortWithBubbleSort(arr):\nmax_val = max(arr)\nexp = 1\n\nwhile max_val // exp > 0:\nradixList = [[],[],[],[],[],[],[],[],[],[]]\n\nfor num in arr:\nradixIndex = (num // exp) % 10\nradixList[radixIndex].append(num)\n\nfor bucket in radixList:\nbubbleSort(bucket)\n\ni = 0\nfor bucket in radixList:\nfor num in bucket:\narr[i] = num\ni += 1\n\nexp *= 10\n\nmylist = [170, 45, 75, 90, 802, 24, 2, 66]\n\nradixSortWithBubbleSort(mylist)\n\nprint(mylist)",
        "myArray = [ 33, 45, 40, 25, 17, 24]",
        "radixArray = [ [], [], [], [], [], [], [], [], [], [] ]",
        "myArray = [ 3\n3\n, 4\n5\n, 4\n0\n, 2\n5\n, 1\n7\n, 2\n4\n]",
        "myArray = [ ]",
        "radixArray = [ [4\n0\n], [], [], [3\n3\n], [2\n4\n], [4\n5\n, 2\n5\n], [], [1\n7\n], [], [] ]",
        "myArray = [ 4\n0\n, 3\n3\n, 2\n4\n, 4\n5\n, 2\n5\n, 1\n7\n]",
        "myArray = [\n4\n0,\n3\n3,\n2\n4,\n4\n5,\n2\n5,\n1\n7 ]",
        "radixArray = [ [], [\n1\n7], [\n2\n4,\n2\n5], [\n3\n3], [\n4\n0,\n4\n5], [], [], [], [], [] ]",
        "myArray = [\n1\n7,\n2\n4,\n2\n5,\n3\n3,\n4\n0,\n4\n5 ]"
      ]
    },
    {
      "title": "DSA Merge Sort with Python",
      "summary": "Merge Sort\nThe Merge Sort algorithm is a divide-and-conquer algorithm that sorts an array by first breaking it down into smaller arrays, and then building the array back together the correct way so that it is sorted.\nDivide: The algorithm starts with breaking up the array into smaller and smaller pieces until one such sub-array only consists of one element.\nConquer: The algorithm merges the small pieces of the array back together by putting the lowest values first, resulting in a sorted array.\nThe breaking down and building up of the array to sort the array is done recursively.\nIn the animation above, each time the bars are pushed down represents a recursive call, splitting the array into smaller pieces. When the bars are lifted up, it means that two sub-arrays have been merged together.\nThe Merge Sort algorithm can be described like this:\nHow it works:\nDivide the unsorted array into two sub-arrays, half the size of the original.\nContinue to divide the sub-arrays as long as the current piece of the array has more than one element.\nMerge two sub-arrays together by always putting the lowest value first.\nKeep merging until there are no sub-arrays left.\nTake a look at the drawing below to see how Merge Sort works from a different perspective. As you can see, the array is split into smaller and smaller pieces until it is merged back together. And as the merging happens, values from each sub-array are compared so that the lowest value comes first.\nManual Run Through\nLet's try to do the sorting manually, just to get an even better understanding of how Merge Sort works before actually implementing it in a Python program.\nStep 1: We start with an unsorted array, and we know that it splits in half until the sub-arrays only consist of one element. The Merge Sort function calls itself two times, once for each half of the array. That means that the first sub-array will split into the smallest pieces first.\nStep 2: The splitting of the first sub-array is finished, and now it is time to merge. 8 and 9 are the first two elements to be merged. 8 is the lowest value, so that comes before 9 in the first merged sub-array.\nStep 3: The next sub-arrays to be merged is [ 12] and [ 8, 9]. Values in both arrays are compared from the start. 8 is lower than 12, so 8 comes first, and 9 is also lower than 12.\nStep 4: Now the second big sub-array is split recursively.\nStep 5: 3 and 11 are merged back together in the same order as they are shown because 3 is lower than 11.\nStep 6: Sub-array with values 5 and 4 is split, then merged so that 4 comes before 5.\nStep 7: The two sub-arrays on the right are merged. Comparisons are done to create elements in the new merged array:\n3 is lower than 4\n4 is lower than 11\n5 is lower than 11\n11 is the last remaining value\nStep 8: The two last remaining sub-arrays are merged. Let's look at how the comparisons are done in more detail to create the new merged and finished sorted array:\n3 is lower than 8:\nStep 9: 4 is lower than 8:\nStep 10: 5 is lower than 8:\nStep 11: 8 and 9 are lower than 11:\nStep 12: 11 is lower than 12:\nThe sorting is finished!\nRun the simulation below to see the steps above animated:\nImplement Merge Sort in Python\nTo implement the Merge Sort algorithm we need:\nAn array with values that needs to be sorted.\nA function that takes an array, splits it in two, and calls itself with each half of that array so that the arrays are split again and again recursively, until a sub-array only consist of one value.\nAnother function that merges the sub-arrays back together in a sorted way.\nThe resulting code looks like this:\nExampleGet your own Python Server\nImplementing the Merge Sort algorithm in Python:\nOn line 6, arr[:mid] takes all values from the array up until, but not including, the value on index \"mid\".\nOn line 7, arr[mid:] takes all values from the array, starting at the value on index \"mid\" and all the next values.\nOn lines 26-27, the first part of the merging is done. At this this point the values of the two sub-arrays are compared, and either the left sub-array or the right sub-array is empty, so the result array can just be filled with the remaining values from either the left or the right sub-array. These lines can be swapped, and the result will be the same.\nMerge Sort without Recursion\nSince Merge Sort is a divide and conquer algorithm, recursion is the most intuitive code to use for implementation. The recursive implementation of Merge Sort is also perhaps easier to understand, and uses less code lines in general.\nBut Merge Sort can also be implemented without the use of recursion, so that there is no function calling itself.\nTake a look at the Merge Sort implementation below, that does not use recursion:\nExample\nA Merge sort without recursion\nYou might notice that the merge functions are exactly the same in the two Merge Sort implementations above, but in the implementation right above here the while loop inside the mergeSort function is used to replace the recursion. The while loop does the splitting and merging of the array in place, and that makes the code a bit harder to understand.\nTo put it simply, the while loop inside the mergeSort function uses short step lengths to sort tiny pieces (sub-arrays) of the initial array using the merge function. Then the step length is increased to merge and sort larger pieces of the array until the whole array is sorted.\nMerge Sort Time Complexity\nThe time complexity for Merge Sort is: O(n⋅logn) O( n \\cdot \\log n )\nAnd the time complexity is pretty much the same for different kinds of arrays. The algorithm needs to split the array and merge it back together whether it is already sorted or completely shuffled.\nThe image below shows the time complexity for Merge Sort.\nMerge Sort performs almost the same every time because the array is split, and merged using comparison, both if the array is already sorted or not.",
      "examples": [
        "[ 12, 8, 9, 3, 11, 5, 4]\n[ 12, 8, 9] [ 3, 11, 5, 4]\n[ 12] [ 8, 9] [ 3, 11, 5, 4]\n[ 12] [ 8] [ 9] [ 3, 11, 5, 4]",
        "[ 12] [\n8\n,\n9\n] [ 3, 11, 5, 4]",
        "[\n8\n,\n9\n,\n12\n] [ 3, 11, 5, 4]",
        "[ 8, 9, 12] [ 3, 11, 5, 4]\n[ 8, 9, 12] [ 3, 11] [ 5, 4]\n[ 8, 9, 12] [ 3] [ 11] [ 5, 4]",
        "[ 8, 9, 12] [\n3\n,\n11\n] [ 5, 4]",
        "[ 8, 9, 12] [ 3, 11] [\n5\n] [\n4\n]\n[ 8, 9, 12] [ 3, 11] [\n4\n,\n5\n]",
        "[ 8, 9, 12] [\n3\n,\n4\n,\n5\n,\n11\n]",
        "Before [\n8\n, 9, 12] [\n3\n, 4, 5, 11]\nAfter: [\n3\n,\n8\n, 9, 12] [ 4, 5, 11]",
        "Before [ 3,\n8\n, 9, 12] [\n4\n, 5, 11]\nAfter: [ 3,\n4\n,\n8\n, 9, 12] [ 5, 11]",
        "Before [ 3, 4,\n8\n, 9, 12] [\n5\n, 11]\nAfter: [ 3, 4,\n5\n,\n8\n, 9, 12] [ 11]",
        "Before [ 3, 4, 5,\n8\n,\n9\n, 12] [\n11\n]\nAfter: [ 3, 4, 5,\n8\n,\n9\n, 12] [\n11\n]",
        "Before [ 3, 4, 5, 8, 9,\n12\n] [\n11\n]\nAfter: [ 3, 4, 5, 8, 9,\n11\n,\n12\n]",
        "def mergeSort(arr):\nif len(arr) <= 1:\nreturn arr\n\nmid = len(arr) // 2\nleftHalf = arr[:mid]\nrightHalf = arr[mid:]\n\nsortedLeft = mergeSort(leftHalf)\nsortedRight = mergeSort(rightHalf)\n\nreturn merge(sortedLeft, sortedRight)\n\ndef merge(left, right):\nresult = []\ni = j = 0\n\nwhile i < len(left) and j < len(right):\nif left[i] < right[j]:\nresult.append(left[i])\ni += 1\nelse:\nresult.append(right[j])\nj += 1\n\nresult.extend(left[i:])\nresult.extend(right[j:])\n\nreturn result\n\nmylist = [3, 7, 6, -10, 15, 23.5, 55, -13]\nmysortedlist = mergeSort(mylist)\nprint(\"Sorted array:\", mysortedlist)",
        "def merge(left, right):\nresult = []\ni = j = 0\n\nwhile i < len(left) and j < len(right):\nif left[i] < right[j]:\nresult.append(left[i])\ni += 1\nelse:\nresult.append(right[j])\nj += 1\n\nresult.extend(left[i:])\nresult.extend(right[j:])\n\nreturn result\n\ndef mergeSort(arr):\nstep = 1 # Starting with sub-arrays of length 1\nlength = len(arr)\n\nwhile step < length:\nfor i in range(0, length, 2 * step):\nleft = arr[i:i + step]\nright = arr[i + step:i + 2 * step]\n\nmerged = merge(left, right)\n\n# Place the merged array back into the original array\nfor j, val in enumerate(merged):\narr[i + j] = val\n\nstep *= 2 # Double the sub-array length for the next iteration\n\nreturn arr\n\nmylist = [3, 7, 6, -10, 15, 23.5, 55, -13]\nmysortedlist = mergeSort(mylist)\nprint(mysortedlist)",
        "[",
        "12",
        ",",
        "8",
        "9",
        "3",
        "11",
        "5",
        "4",
        "]",
        "[ 12, 8, 9, 3, 11, 5, 4]",
        "[ 12, 8, 9] [ 3, 11, 5, 4]",
        "[ 12] [ 8, 9] [ 3, 11, 5, 4]",
        "[ 12] [ 8] [ 9] [ 3, 11, 5, 4]",
        "[ 8, 9, 12] [ 3, 11, 5, 4]",
        "[ 8, 9, 12] [ 3, 11] [ 5, 4]",
        "[ 8, 9, 12] [ 3] [ 11] [ 5, 4]",
        "[ 8, 9, 12] [ 3, 11] [\n5\n] [\n4\n]",
        "[ 8, 9, 12] [ 3, 11] [\n4\n,\n5\n]",
        "Before [\n8\n, 9, 12] [\n3\n, 4, 5, 11]",
        "After: [\n3\n,\n8\n, 9, 12] [ 4, 5, 11]",
        "Before [ 3,\n8\n, 9, 12] [\n4\n, 5, 11]",
        "After: [ 3,\n4\n,\n8\n, 9, 12] [ 5, 11]",
        "Before [ 3, 4,\n8\n, 9, 12] [\n5\n, 11]",
        "After: [ 3, 4,\n5\n,\n8\n, 9, 12] [ 11]",
        "Before [ 3, 4, 5,\n8\n,\n9\n, 12] [\n11\n]",
        "After: [ 3, 4, 5,\n8\n,\n9\n, 12] [\n11\n]",
        "Before [ 3, 4, 5, 8, 9,\n12\n] [\n11\n]",
        "After: [ 3, 4, 5, 8, 9,\n11\n,\n12\n]"
      ]
    },
    {
      "title": "Python MySQL",
      "summary": "Python can be used in database applications.\nOne of the most popular databases is MySQL.\nMySQL Database\nTo be able to experiment with the code examples in this tutorial, you should have MySQL installed on your computer.\nYou can download a MySQL database at https://www.mysql.com/downloads/.\nInstall MySQL Driver\nPython needs a MySQL driver to access the MySQL database.\nIn this tutorial we will use the driver \"MySQL Connector\".\nWe recommend that you use PIP to install \"MySQL Connector\".\nPIP is most likely already installed in your Python environment.\nNavigate your command line to the location of PIP, and type the following:\nDownload and install \"MySQL Connector\":\nNow you have downloaded and installed a MySQL driver.\nTest MySQL Connector\nTo test if the installation was successful, or if you already have \"MySQL Connector\" installed, create a Python page with the following content:\ndemo_mysql_test.py:\nIf the above code was executed with no errors, \"MySQL Connector\" is installed and ready to be used.\nREMOVE ADS\nCreate Connection\nStart by creating a connection to the database.\nUse the username and password from your MySQL database:\ndemo_mysql_connection.py:\nNow you can start querying the database using SQL statements.",
      "examples": [
        "C:\\Users\\Your Name\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts>python -m pip install mysql-connector-python",
        "import mysql.connector",
        "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npassword=\"yourpassword\"\n)\n\nprint(mydb)"
      ]
    },
    {
      "title": "Python MySQL Create Database",
      "summary": "Creating a Database\nTo create a database in MySQL, use the \"CREATE DATABASE\" statement:\nExampleGet your own Python Server\ncreate a database named \"mydatabase\":\nIf the above code was executed with no errors, you have successfully created a database.\nCheck if Database Exists\nYou can check if a database exist by listing all databases in your system by using the \"SHOW DATABASES\" statement:\nExample\nReturn a list of your system's databases:\nOr you can try to access the database when making the connection:\nExample\nTry connecting to the database \"mydatabase\":\nIf the database does not exist, you will get an error.",
      "examples": [
        "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npassword=\"yourpassword\"\n)\n\nmycursor = mydb.cursor()\n\nmycursor.execute(\"CREATE DATABASE mydatabase\")",
        "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npassword=\"yourpassword\"\n)\n\nmycursor = mydb.cursor()\n\nmycursor.execute(\"SHOW DATABASES\")\n\nfor x in mycursor:\nprint(x)",
        "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npassword=\"yourpassword\",\ndatabase=\"mydatabase\"\n)"
      ]
    },
    {
      "title": "Python MySQL Create Table",
      "summary": "Creating a Table\nTo create a table in MySQL, use the \"CREATE TABLE\" statement.\nMake sure you define the name of the database when you create the connection\nExampleGet your own Python Server\nCreate a table named \"customers\":\nIf the above code was executed with no errors, you have now successfully created a table.\nCheck if Table Exists\nYou can check if a table exist by listing all tables in your database with the \"SHOW TABLES\" statement:\nExample\nReturn a list of your system's databases:\nREMOVE ADS\nPrimary Key\nWhen creating a table, you should also create a column with a unique key for each record.\nThis can be done by defining a PRIMARY KEY.\nWe use the statement \"INT AUTO_INCREMENT PRIMARY KEY\" which will insert a unique number for each record. Starting at 1, and increased by one for each record.\nExample\nCreate primary key when creating the table:\nIf the table already exists, use the ALTER TABLE keyword:\nExample\nCreate primary key on an existing table:",
      "examples": [
        "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npassword=\"yourpassword\",\ndatabase=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nmycursor.execute(\"CREATE TABLE customers (name VARCHAR(255), address VARCHAR(255))\")",
        "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npassword=\"yourpassword\",\ndatabase=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nmycursor.execute(\"SHOW TABLES\")\n\nfor x in mycursor:\nprint(x)",
        "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npassword=\"yourpassword\",\ndatabase=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nmycursor.execute(\"CREATE TABLE customers (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255), address VARCHAR(255))\")",
        "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npassword=\"yourpassword\",\ndatabase=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nmycursor.execute(\"ALTER TABLE customers ADD COLUMN id INT AUTO_INCREMENT PRIMARY KEY\")"
      ]
    },
    {
      "title": "Python MySQL Insert Into Table",
      "summary": "Insert Into Table\nTo fill a table in MySQL, use the \"INSERT INTO\" statement.\nExampleGet your own Python Server\nInsert a record in the \"customers\" table:\nImportant!: Notice the statement: mydb.commit(). It is required to make the changes, otherwise no changes are made to the table.\nInsert Multiple Rows\nTo insert multiple rows into a table, use the executemany() method.\nThe second parameter of the executemany() method is a list of tuples, containing the data you want to insert:\nExample\nFill the \"customers\" table with data:\nREMOVE ADS\nGet Inserted ID\nYou can get the id of the row you just inserted by asking the cursor object.\nNote: If you insert more than one row, the id of the last inserted row is returned.\nExample\nInsert one row, and return the ID:",
      "examples": [
        "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npassword=\"yourpassword\",\ndatabase=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nsql = \"INSERT INTO customers (name, address) VALUES (%s, %s)\"\nval = (\"John\", \"Highway 21\")\nmycursor.execute(sql, val)\n\nmydb.commit()\n\nprint(mycursor.rowcount, \"record inserted.\")",
        "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npassword=\"yourpassword\",\ndatabase=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nsql = \"INSERT INTO customers (name, address) VALUES (%s, %s)\"\nval = [\n('Peter', 'Lowstreet 4'),\n('Amy', 'Apple st 652'),\n('Hannah', 'Mountain 21'),\n('Michael', 'Valley 345'),\n('Sandy', 'Ocean blvd 2'),\n('Betty', 'Green Grass 1'),\n('Richard', 'Sky st 331'),\n('Susan', 'One way 98'),\n('Vicky', 'Yellow Garden 2'),\n('Ben', 'Park Lane 38'),\n('William', 'Central st 954'),\n('Chuck', 'Main Road 989'),\n('Viola', 'Sideway 1633')\n]\n\nmycursor.executemany(sql, val)\n\nmydb.commit()\n\nprint(mycursor.rowcount, \"was inserted.\")",
        "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npassword=\"yourpassword\",\ndatabase=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nsql = \"INSERT INTO customers (name, address) VALUES (%s, %s)\"\nval = (\"Michelle\", \"Blue Village\")\nmycursor.execute(sql, val)\n\nmydb.commit()\n\nprint(\"1 record inserted, ID:\", mycursor.lastrowid)",
        "mydb.commit()",
        "executemany()"
      ]
    },
    {
      "title": "Python MySQL Select From",
      "summary": "Select From a Table\nTo select from a table in MySQL, use the \"SELECT\" statement:\nExampleGet your own Python Server\nSelect all records from the \"customers\" table, and display the result:\nNote: We use the fetchall() method, which fetches all rows from the last executed statement.\nSelecting Columns\nTo select only some of the columns in a table, use the \"SELECT\" statement followed by the column name(s):\nExample\nSelect only the name and address columns:\nREMOVE ADS\nUsing the fetchone() Method\nIf you are only interested in one row, you can use the fetchone() method.\nThe fetchone() method will return the first row of the result:\nExample\nFetch only one row:",
      "examples": [
        "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npassword=\"yourpassword\",\ndatabase=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nmycursor.execute(\"SELECT * FROM customers\")\n\nmyresult = mycursor.fetchall()\n\nfor x in myresult:\nprint(x)",
        "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npassword=\"yourpassword\",\ndatabase=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nmycursor.execute(\"SELECT name, address FROM customers\")\n\nmyresult = mycursor.fetchall()\n\nfor x in myresult:\nprint(x)",
        "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npassword=\"yourpassword\",\ndatabase=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nmycursor.execute(\"SELECT * FROM customers\")\n\nmyresult = mycursor.fetchone()\n\nprint(myresult)",
        "fetchall()",
        "fetchone()"
      ]
    },
    {
      "title": "Python MySQL Where",
      "summary": "Select With a Filter\nWhen selecting records from a table, you can filter the selection by using the \"WHERE\" statement:\nExampleGet your own Python Server\nSelect record(s) where the address is \"Park Lane 38\": result:\nWildcard Characters\nYou can also select the records that starts, includes, or ends with a given letter or phrase.\nUse the %  to represent wildcard characters:\nExample\nSelect records where the address contains the word \"way\":\nREMOVE ADS\nPrevent SQL Injection\nWhen query values are provided by the user, you should escape the values.\nThis is to prevent SQL injections, which is a common web hacking technique to destroy or misuse your database.\nThe mysql.connector module has methods to escape query values:\nExample\nEscape query values by using the placholder %s method:",
      "examples": [
        "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npassword=\"yourpassword\",\ndatabase=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nsql = \"SELECT * FROM customers WHERE address ='Park Lane 38'\"\n\nmycursor.execute(sql)\n\nmyresult = mycursor.fetchall()\n\nfor x in myresult:\nprint(x)",
        "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npassword=\"yourpassword\",\ndatabase=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nsql = \"SELECT * FROM customers WHERE address LIKE '%way%'\"\n\nmycursor.execute(sql)\n\nmyresult = mycursor.fetchall()\n\nfor x in myresult:\nprint(x)",
        "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npassword=\"yourpassword\",\ndatabase=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nsql = \"SELECT * FROM customers WHERE address = %s\"\nadr = (\"Yellow Garden 2\", )\n\nmycursor.execute(sql, adr)\n\nmyresult = mycursor.fetchall()\n\nfor x in myresult:\nprint(x)",
        "%",
        "%s"
      ]
    },
    {
      "title": "Python MySQL Order By",
      "summary": "Sort the Result\nUse the ORDER BY statement to sort the result in ascending or descending order.\nThe ORDER BY keyword sorts the result ascending by default. To sort the result in descending order, use the DESC keyword.\nExampleGet your own Python Server\nSort the result alphabetically by name: result:\nORDER BY DESC\nUse the DESC keyword to sort the result in a descending order.\nExample\nSort the result reverse alphabetically by name:",
      "examples": [
        "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npassword=\"yourpassword\",\ndatabase=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nsql = \"SELECT * FROM customers ORDER BY name\"\n\nmycursor.execute(sql)\n\nmyresult = mycursor.fetchall()\n\nfor x in myresult:\nprint(x)",
        "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npassword=\"yourpassword\",\ndatabase=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nsql = \"SELECT * FROM customers ORDER BY name DESC\"\n\nmycursor.execute(sql)\n\nmyresult = mycursor.fetchall()\n\nfor x in myresult:\nprint(x)"
      ]
    },
    {
      "title": "Python MySQL Delete From By",
      "summary": "Delete Record\nYou can delete records from an existing table by using the \"DELETE FROM\" statement:\nExampleGet your own Python Server\nDelete any record where the address is \"Mountain 21\":\nImportant!: Notice the statement: mydb.commit(). It is required to make the changes, otherwise no changes are made to the table.\nNotice the WHERE clause in the DELETE syntax: The WHERE clause specifies which record(s) that should be deleted. If you omit the WHERE clause, all records will be deleted!\nREMOVE ADS\nPrevent SQL Injection\nIt is considered a good practice to escape the values of any query, also in delete statements.\nThis is to prevent SQL injections, which is a common web hacking technique to destroy or misuse your database.\nThe mysql.connector module uses the placeholder %s to escape values in the delete statement:\nExample\nEscape values by using the placeholder %s method:",
      "examples": [
        "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npassword=\"yourpassword\",\ndatabase=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nsql = \"DELETE FROM customers WHERE address = 'Mountain 21'\"\n\nmycursor.execute(sql)\n\nmydb.commit()\n\nprint(mycursor.rowcount, \"record(s) deleted\")",
        "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npassword=\"yourpassword\",\ndatabase=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nsql = \"DELETE FROM customers WHERE address = %s\"\nadr = (\"Yellow Garden 2\", )\n\nmycursor.execute(sql, adr)\n\nmydb.commit()\n\nprint(mycursor.rowcount, \"record(s) deleted\")",
        "mydb.commit()",
        "%s"
      ]
    },
    {
      "title": "Python MySQL Drop Table",
      "summary": "Delete a Table\nYou can delete an existing table by using the \"DROP TABLE\" statement:\nExampleGet your own Python Server\nDelete the table \"customers\":\nDrop Only if Exist\nIf the table you want to delete is already deleted, or for any other reason does not exist, you can use the IF EXISTS keyword to avoid getting an error.\nExample\nDelete the table \"customers\" if it exists:",
      "examples": [
        "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npassword=\"yourpassword\",\ndatabase=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nsql = \"DROP TABLE customers\"\n\nmycursor.execute(sql)",
        "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npassword=\"yourpassword\",\ndatabase=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nsql = \"DROP TABLE IF EXISTS customers\"\n\nmycursor.execute(sql)"
      ]
    },
    {
      "title": "Python MySQL Update Table",
      "summary": "Update Table\nYou can update existing records in a table by using the \"UPDATE\" statement:\nExampleGet your own Python Server\nOverwrite the address column from \"Valley 345\" to \"Canyon 123\":\nImportant!: Notice the statement: mydb.commit(). It is required to make the changes, otherwise no changes are made to the table.\nNotice the WHERE clause in the UPDATE syntax: The WHERE clause specifies which record or records that should be updated. If you omit the WHERE clause, all records will be updated!\nREMOVE ADS\nPrevent SQL Injection\nIt is considered a good practice to escape the values of any query, also in update statements.\nThis is to prevent SQL injections, which is a common web hacking technique to destroy or misuse your database.\nThe mysql.connector module uses the placeholder %s to escape values in the update statement:\nExample\nEscape values by using the placeholder %s method:",
      "examples": [
        "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npassword=\"yourpassword\",\ndatabase=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nsql = \"UPDATE customers SET address = 'Canyon 123' WHERE address = 'Valley 345'\"\n\nmycursor.execute(sql)\n\nmydb.commit()\n\nprint(mycursor.rowcount, \"record(s) affected\")",
        "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npassword=\"yourpassword\",\ndatabase=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nsql = \"UPDATE customers SET address = %s WHERE address = %s\"\nval = (\"Valley 345\", \"Canyon 123\")\n\nmycursor.execute(sql, val)\n\nmydb.commit()\n\nprint(mycursor.rowcount, \"record(s) affected\")",
        "mydb.commit()",
        "%s"
      ]
    },
    {
      "title": "Python MySQL Limit",
      "summary": "Limit the Result\nYou can limit the number of records returned from the query, by using the \"LIMIT\" statement:\nExampleGet your own Python Server\nSelect the 5 first records in the \"customers\" table:\nStart From Another Position\nIf you want to return five records, starting from the third record, you can use the \"OFFSET\" keyword:\nExample\nStart from position 3, and return 5 records:",
      "examples": [
        "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npassword=\"yourpassword\",\ndatabase=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nmycursor.execute(\"SELECT * FROM customers LIMIT 5\")\n\nmyresult = mycursor.fetchall()\n\nfor x in myresult:\nprint(x)",
        "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npassword=\"yourpassword\",\ndatabase=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nmycursor.execute(\"SELECT * FROM customers LIMIT 5 OFFSET 2\")\n\nmyresult = mycursor.fetchall()\n\nfor x in myresult:\nprint(x)"
      ]
    },
    {
      "title": "Python MySQL Join",
      "summary": "Join Two or More Tables\nYou can combine rows from two or more tables, based on a related column between them, by using a JOIN statement.\nConsider you have a \"users\" table and a \"products\" table:\nusersGet your own Python Server\nproducts\nThese two tables can be combined by using users' fav field and products' id field.\nExample\nJoin users and products to see the name of the users favorite product:\nNote: You can use JOIN instead of INNER JOIN. They will both give you the same result.\nREMOVE ADS\nLEFT JOIN\nIn the example above, Hannah, and Michael were excluded from the result, that is because INNER JOIN only shows the records where there is a match.\nIf you want to show all users, even if they do not have a favorite product, use the LEFT JOIN statement:\nExample\nSelect all users and their favorite product:\nRIGHT JOIN\nIf you want to return all products, and the users who have them as their favorite, even if no user have them as their favorite, use the RIGHT JOIN statement:\nExample\nSelect all products, and the user(s) who have them as their favorite:\nNote: Hannah and Michael, who have no favorite product, are not included in the result.",
      "examples": [
        "{ id: 1, name: 'John', fav: 154},\n{ id: 2, name: 'Peter', fav: 154},\n{ id: 3, name: 'Amy', fav: 155},\n{ id: 4, name: 'Hannah', fav:},\n{ id: 5, name: 'Michael', fav:}",
        "{ id: 154, name: 'Chocolate Heaven' },\n{ id: 155, name: 'Tasty Lemons' },\n{ id: 156, name: 'Vanilla Dreams' }",
        "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"yourusername\",\npassword=\"yourpassword\",\ndatabase=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nsql = \"SELECT \\\nusers.name AS user, \\\nproducts.name AS favorite \\\nFROM users \\\nINNER JOIN products ON users.fav = products.id\"\n\nmycursor.execute(sql)\n\nmyresult = mycursor.fetchall()\n\nfor x in myresult:\nprint(x)",
        "sql = \"SELECT \\\nusers.name AS user, \\\nproducts.name AS favorite \\\nFROM users \\\nLEFT JOIN products ON users.fav = products.id\"",
        "sql = \"SELECT \\\nusers.name AS user, \\\nproducts.name AS favorite \\\nFROM users \\\nRIGHT JOIN products ON users.fav = products.id\"",
        "fav",
        "id"
      ]
    },
    {
      "title": "Python MongoDB",
      "summary": "Python can be used in database applications.\nOne of the most popular NoSQL database is MongoDB.\nMongoDB\nMongoDB stores data in JSON-like documents, which makes the database very flexible and scalable.\nTo be able to experiment with the code examples in this tutorial, you will need access to a MongoDB database.\nYou can download a free MongoDB database at https://www.mongodb.com.\nOr get started right away with a MongoDB cloud service at https://www.mongodb.com/cloud/atlas.\nPyMongo\nPython needs a MongoDB driver to access the MongoDB database.\nIn this tutorial we will use the MongoDB driver \"PyMongo\".\nWe recommend that you use PIP to install \"PyMongo\".\nPIP is most likely already installed in your Python environment.\nNavigate your command line to the location of PIP, and type the following:\nDownload and install \"PyMongo\":\nNow you have downloaded and installed a mongoDB driver.\nTest PyMongo\nTo test if the installation was successful, or if you already have \"pymongo\" installed, create a Python page with the following content:\ndemo_mongodb_test.py:\nIf the above code was executed with no errors, \"pymongo\" is installed and ready to be used.",
      "examples": [
        "C:\\Users\\Your Name\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts>python -m pip install pymongo",
        "import pymongo"
      ]
    },
    {
      "title": "Python MongoDB Create Database",
      "summary": "Creating a Database\nTo create a database in MongoDB, start by creating a MongoClient object, then specify a connection URL with the correct ip address and the name of the database you want to create.\nMongoDB will create the database if it does not exist, and make a connection to it.\nExampleGet your own Python Server\nCreate a database called \"mydatabase\":\nImportant: In MongoDB, a database is not created until it gets content!\nMongoDB waits until you have created a collection (table), with at least one document (record) before it actually creates the database (and collection).\nCheck if Database Exists\nRemember: In MongoDB, a database is not created until it gets content, so if this is your first time creating a database, you should complete the next two chapters (create collection and create document) before you check if the database exists!\nYou can check if a database exist by listing all databases in you system:\nExample\nReturn a list of your system's databases:\nOr you can check a specific database by name:\nExample\nCheck if \"mydatabase\" exists:",
      "examples": [
        "import pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n\nmydb = myclient[\"mydatabase\"]",
        "print(myclient.list_database_names())",
        "dblist = myclient.list_database_names()\nif \"mydatabase\" in dblist:\nprint(\"The database exists.\")"
      ]
    },
    {
      "title": "Python MongoDB Create Collection",
      "summary": "A collection in MongoDB is the same as a table in SQL databases.\nCreating a Collection\nTo create a collection in MongoDB, use database object and specify the name of the collection you want to create.\nMongoDB will create the collection if it does not exist.\nExampleGet your own Python Server\nCreate a collection called \"customers\":\nImportant: In MongoDB, a collection is not created until it gets content!\nMongoDB waits until you have inserted a document before it actually creates the collection.\nCheck if Collection Exists\nRemember: In MongoDB, a collection is not created until it gets content, so if this is your first time creating a collection, you should complete the next chapter (create document) before you check if the collection exists!\nYou can check if a collection exist in a database by listing all collections:\nExample\nReturn a list of all collections in your database:\nOr you can check a specific collection by name:\nExample\nCheck if the \"customers\" collection exists:",
      "examples": [
        "import pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\n\nmycol = mydb[\"customers\"]",
        "print(mydb.list_collection_names())",
        "collist = mydb.list_collection_names()\nif \"customers\" in collist:\nprint(\"The collection exists.\")"
      ]
    },
    {
      "title": "Python MongoDB Insert Document",
      "summary": "A document in MongoDB is the same as a record in SQL databases.\nInsert Into Collection\nTo insert a record, or document as it is called in MongoDB, into a collection, we use the insert_one() method.\nThe first parameter of the insert_one() method is a dictionary containing the name(s) and value(s) of each field in the document you want to insert.\nExampleGet your own Python Server\nInsert a record in the \"customers\" collection:\nReturn the _id Field\nThe insert_one() method returns a InsertOneResult object, which has a property, inserted_id, that holds the id of the inserted document.\nExample\nInsert another record in the \"customers\" collection, and return the value of the _id field:\nIf you do not specify an _id field, then MongoDB will add one for you and assign a unique id for each document.\nIn the example above no _id field was specified, so MongoDB assigned a unique _id for the record (document).\nREMOVE ADS\nInsert Multiple Documents\nTo insert multiple documents into a collection in MongoDB, we use the insert_many() method.\nThe first parameter of the insert_many() method is a list containing dictionaries with the data you want to insert:\nExample\nThe insert_many() method returns a InsertManyResult object, which has a property, inserted_ids, that holds the ids of the inserted documents.\nInsert Multiple Documents, with Specified IDs\nIf you do not want MongoDB to assign unique ids for your document, you can specify the _id field when you insert the document(s).\nRemember that the values has to be unique. Two documents cannot have the same _id.\nExample",
      "examples": [
        "import pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmydict = { \"name\": \"John\", \"address\": \"Highway 37\" }\n\nx = mycol.insert_one(mydict)",
        "mydict = { \"name\": \"Peter\", \"address\": \"Lowstreet 27\" }\n\nx = mycol.insert_one(mydict)\n\nprint(x.inserted_id)",
        "import pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmylist = [\n{ \"name\": \"Amy\", \"address\": \"Apple st 652\"},\n{ \"name\": \"Hannah\", \"address\": \"Mountain 21\"},\n{ \"name\": \"Michael\", \"address\": \"Valley 345\"},\n{ \"name\": \"Sandy\", \"address\": \"Ocean blvd 2\"},\n{ \"name\": \"Betty\", \"address\": \"Green Grass 1\"},\n{ \"name\": \"Richard\", \"address\": \"Sky st 331\"},\n{ \"name\": \"Susan\", \"address\": \"One way 98\"},\n{ \"name\": \"Vicky\", \"address\": \"Yellow Garden 2\"},\n{ \"name\": \"Ben\", \"address\": \"Park Lane 38\"},\n{ \"name\": \"William\", \"address\": \"Central st 954\"},\n{ \"name\": \"Chuck\", \"address\": \"Main Road 989\"},\n{ \"name\": \"Viola\", \"address\": \"Sideway 1633\"}\n]\n\nx = mycol.insert_many(mylist)\n\n#print list of the _id values of the inserted documents:\nprint(x.inserted_ids)",
        "import pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmylist = [\n{ \"_id\": 1, \"name\": \"John\", \"address\": \"Highway 37\"},\n{ \"_id\": 2, \"name\": \"Peter\", \"address\": \"Lowstreet 27\"},\n{ \"_id\": 3, \"name\": \"Amy\", \"address\": \"Apple st 652\"},\n{ \"_id\": 4, \"name\": \"Hannah\", \"address\": \"Mountain 21\"},\n{ \"_id\": 5, \"name\": \"Michael\", \"address\": \"Valley 345\"},\n{ \"_id\": 6, \"name\": \"Sandy\", \"address\": \"Ocean blvd 2\"},\n{ \"_id\": 7, \"name\": \"Betty\", \"address\": \"Green Grass 1\"},\n{ \"_id\": 8, \"name\": \"Richard\", \"address\": \"Sky st 331\"},\n{ \"_id\": 9, \"name\": \"Susan\", \"address\": \"One way 98\"},\n{ \"_id\": 10, \"name\": \"Vicky\", \"address\": \"Yellow Garden 2\"},\n{ \"_id\": 11, \"name\": \"Ben\", \"address\": \"Park Lane 38\"},\n{ \"_id\": 12, \"name\": \"William\", \"address\": \"Central st 954\"},\n{ \"_id\": 13, \"name\": \"Chuck\", \"address\": \"Main Road 989\"},\n{ \"_id\": 14, \"name\": \"Viola\", \"address\": \"Sideway 1633\"}\n]\n\nx = mycol.insert_many(mylist)\n\n#print list of the _id values of the inserted documents:\nprint(x.inserted_ids)",
        "insert_one()",
        "inserted_id",
        "_id",
        "insert_many()",
        "inserted_ids"
      ]
    },
    {
      "title": "Python MongoDB Find",
      "summary": "In MongoDB we use the find() and find_one() methods to find data in a collection.\nJust like the SELECT statement is used to find data in a table in a MySQL database.\nFind One\nTo select data from a collection in MongoDB, we can use the find_one() method.\nThe find_one() method returns the first occurrence in the selection.\nExampleGet your own Python Server\nFind the first document in the customers collection:\nFind All\nTo select data from a table in MongoDB, we can also use the find() method.\nThe find() method returns all occurrences in the selection.\nThe first parameter of the find() method is a query object. In this example we use an empty query object, which selects all documents in the collection.\nNo parameters in the find() method gives you the same result as SELECT * in MySQL.\nExample\nReturn all documents in the \"customers\" collection, and print each document:\nREMOVE ADS\nReturn Only Some Fields\nThe second parameter of the find() method is an object describing which fields to include in the result.\nThis parameter is optional, and if omitted, all fields will be included in the result.\nExample\nReturn only the names and addresses, not the _ids:\nYou are not allowed to specify both 0 and 1 values in the same object (except if one of the fields is the _id field). If you specify a field with the value 0, all other fields get the value 1, and vice versa:\nExample\nThis example will exclude \"address\" from the result:\nExample\nYou get an error if you specify both 0 and 1 values in the same object (except if one of the fields is the _id field):",
      "examples": [
        "import pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nx = mycol.find_one()\n\nprint(x)",
        "import pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nfor x in mycol.find():\nprint(x)",
        "import pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nfor x in mycol.find({},{ \"_id\": 0, \"name\": 1, \"address\": 1 }):\nprint(x)",
        "import pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nfor x in mycol.find({},{ \"address\": 0 }):\nprint(x)",
        "import pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nfor x in mycol.find({},{ \"name\": 1, \"address\": 0 }):\nprint(x)",
        "find()",
        "find_one()"
      ]
    },
    {
      "title": "Python MongoDB Query",
      "summary": "Filter the Result\nWhen finding documents in a collection, you can filter the result by using a query object.\nThe first argument of the find() method is a query object, and is used to limit the search.\nExampleGet your own Python Server\nFind document(s) with the address \"Park Lane 38\":\nAdvanced Query\nTo make advanced queries you can use modifiers as values in the query object.\nE.g. to find the documents where the \"address\" field starts with the letter \"S\" or higher (alphabetically), use the greater than modifier: {\"$gt\": \"S\"}:\nExample\nFind documents where the address starts with the letter \"S\" or higher:\nFilter With Regular Expressions\nYou can also use regular expressions as a modifier.\nRegular expressions can only be used to query strings.\nTo find only the documents where the \"address\" field starts with the letter \"S\", use the regular expression {\"$regex\": \"^S\"}:\nExample\nFind documents where the address starts with the letter \"S\":",
      "examples": [
        "import pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmyquery = { \"address\": \"Park Lane 38\" }\n\nmydoc = mycol.find(myquery)\n\nfor x in mydoc:\nprint(x)",
        "import pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmyquery = { \"address\": { \"$regex\": \"^S\" } }\n\nmydoc = mycol.find(myquery)\n\nfor x in mydoc:\nprint(x)",
        "find()",
        "{\"$gt\": \"S\"}",
        "{\"$regex\": \"^S\"}"
      ]
    },
    {
      "title": "Python MongoDB Sort",
      "summary": "Sort the Result\nUse the sort() method to sort the result in ascending or descending order.\nThe sort() method takes one parameter for \"fieldname\" and one parameter for \"direction\" (ascending is the default direction).\nExampleGet your own Python Server\nSort the result alphabetically by name:\nSort Descending\nUse the value -1 as the second parameter to sort descending.\nsort(\"name\", 1) #ascending\nsort(\"name\", -1) #descending\nExample\nSort the result reverse alphabetically by name:",
      "examples": [
        "import pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmydoc = mycol.find().sort(\"name\")\n\nfor x in mydoc:\nprint(x)",
        "import pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmydoc = mycol.find().sort(\"name\", -1)\n\nfor x in mydoc:\nprint(x)",
        "sort()"
      ]
    },
    {
      "title": "Python MongoDB Delete Document",
      "summary": "Delete Document\nTo delete one document, we use the delete_one() method.\nThe first parameter of the delete_one() method is a query object defining which document to delete.\nNote: If the query finds more than one document, only the first occurrence is deleted.\nExampleGet your own Python Server\nDelete the document with the address \"Mountain 21\":\nDelete Many Documents\nTo delete more than one document, use the delete_many() method.\nThe first parameter of the delete_many() method is a query object defining which documents to delete.\nExample\nDelete all documents were the address starts with the letter S:\nDelete All Documents in a Collection\nTo delete all documents in a collection, pass an empty query object to the delete_many() method:\nExample\nDelete all documents in the \"customers\" collection:",
      "examples": [
        "import pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmyquery = { \"address\": \"Mountain 21\" }\n\nmycol.delete_one(myquery)",
        "import pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmyquery = { \"address\": {\"$regex\": \"^S\"} }\n\nx = mycol.delete_many(myquery)\n\nprint(x.deleted_count, \" documents deleted.\")",
        "import pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nx = mycol.delete_many({})\n\nprint(x.deleted_count, \" documents deleted.\")",
        "delete_one()",
        "delete_many()"
      ]
    },
    {
      "title": "Python MongoDB Drop Collection",
      "summary": "Delete Collection\nYou can delete a table, or collection as it is called in MongoDB, by using the drop() method.\nExampleGet your own Python Server\nDelete the \"customers\" collection:\nThe drop() method returns true if the collection was dropped successfully, and false if the collection does not exist.",
      "examples": [
        "import pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmycol.drop()",
        "drop()"
      ]
    },
    {
      "title": "Python MongoDB Update",
      "summary": "Update Collection\nYou can update a record, or document as it is called in MongoDB, by using the update_one() method.\nThe first parameter of the update_one() method is a query object defining which document to update.\nNote: If the query finds more than one record, only the first occurrence is updated.\nThe second parameter is an object defining the new values of the document.\nExampleGet your own Python Server\nChange the address from \"Valley 345\" to \"Canyon 123\":\nUpdate Many\nTo update all documents that meets the criteria of the query, use the update_many() method.\nExample\nUpdate all documents where the address starts with the letter \"S\":",
      "examples": [
        "import pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmyquery = { \"address\": \"Valley 345\" }\nnewvalues = { \"$set\": { \"address\": \"Canyon 123\" } }\n\nmycol.update_one(myquery, newvalues)\n\n#print \"customers\" after the update:\nfor x in mycol.find():\nprint(x)",
        "import pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmyquery = { \"address\": { \"$regex\": \"^S\" } }\nnewvalues = { \"$set\": { \"name\": \"Minnie\" } }\n\nx = mycol.update_many(myquery, newvalues)\n\nprint(x.modified_count, \"documents updated.\")",
        "update_one()",
        "update_many()"
      ]
    },
    {
      "title": "Python MongoDB Limit",
      "summary": "Limit the Result\nTo limit the result in MongoDB, we use the limit() method.\nThe limit() method takes one parameter, a number defining how many documents to return.\nConsider you have a \"customers\" collection:\nCustomersGet your own Python Server\nExample\nLimit the result to only return 5 documents:",
      "examples": [
        "{'_id': 1, 'name': 'John', 'address': 'Highway37'}\n{'_id': 2, 'name': 'Peter', 'address': 'Lowstreet 27'}\n{'_id': 3, 'name': 'Amy', 'address': 'Apple st 652'}\n{'_id': 4, 'name': 'Hannah', 'address': 'Mountain 21'}\n{'_id': 5, 'name': 'Michael', 'address': 'Valley 345'}\n{'_id': 6, 'name': 'Sandy', 'address': 'Ocean blvd 2'}\n{'_id': 7, 'name': 'Betty', 'address': 'Green Grass 1'}\n{'_id': 8, 'name': 'Richard', 'address': 'Sky st 331'}\n{'_id': 9, 'name': 'Susan', 'address': 'One way 98'}\n{'_id': 10, 'name': 'Vicky', 'address': 'Yellow Garden 2'}\n{'_id': 11, 'name': 'Ben', 'address': 'Park Lane 38'}\n{'_id': 12, 'name': 'William', 'address': 'Central st 954'}\n{'_id': 13, 'name': 'Chuck', 'address': 'Main Road 989'}\n{'_id': 14, 'name': 'Viola', 'address': 'Sideway 1633'}",
        "import pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmyresult = mycol.find().limit(5)\n\n#print the result:\nfor x in myresult:\nprint(x)",
        "limit()"
      ]
    },
    {
      "title": "Python Reference",
      "summary": "This section contains a Python reference documentation.\nPython Reference\nModule Reference",
      "examples": []
    },
    {
      "title": "Python Built in Functions",
      "summary": "Python has a set of built-in functions.",
      "examples": []
    },
    {
      "title": "Python String Methods",
      "summary": "Python has a set of built-in methods that you can use on strings.\nNote: All string methods returns new values. They do not change the original string.\nNote: All string methods returns new values. They do not change the original string.\nLearn more about strings in our Python Strings Tutorial.",
      "examples": []
    },
    {
      "title": "Python List/Array Methods",
      "summary": "Python has a set of built-in methods that you can use on lists/arrays.\nNote: Python does not have built-in support for Arrays, but Python Lists can be used instead.\nLearn more about lists in our Python Lists Tutorial.\nLearn more about arrays in our Python Arrays Tutorial.",
      "examples": []
    },
    {
      "title": "Python Dictionary Methods",
      "summary": "Python has a set of built-in methods that you can use on dictionaries.\nLearn more about dictionaries in our Python Dictionaries Tutorial.",
      "examples": []
    },
    {
      "title": "Python Tuple Methods",
      "summary": "Python has two built-in methods that you can use on tuples.\nLearn more about tuples in our Python Tuples Tutorial.",
      "examples": []
    },
    {
      "title": "Python Set Methods",
      "summary": "Python has a set of built-in methods that you can use on sets.\nLearn more about sets in our Python Sets Tutorial.",
      "examples": [
        "-",
        "-=",
        "&",
        "&=",
        "<=",
        "<",
        ">=",
        ">",
        "^",
        "^=",
        "|",
        "|="
      ]
    },
    {
      "title": "Python File Methods",
      "summary": "Python has a set of methods available for the file object.\nLearn more about the file object in our Python File Handling Tutorial.",
      "examples": []
    },
    {
      "title": "Python Keywords",
      "summary": "Python has a set of keywords that are reserved words that cannot be used as variable names, function names, or any other identifiers:",
      "examples": []
    },
    {
      "title": "Python Built-in Exceptions",
      "summary": "Built-in Exceptions\nThe table below shows built-in exceptions that are usually raised in Python:",
      "examples": []
    },
    {
      "title": "Python Glossary",
      "summary": "This is a list of all the features explained in the Python Tutorial.",
      "examples": []
    },
    {
      "title": "Python Random Module",
      "summary": "Python has a built-in module that you can use to make random numbers.\nThe random module has a set of methods:",
      "examples": [
        "random"
      ]
    },
    {
      "title": "Python Requests Module",
      "summary": "ExampleGet your own Python Server\nMake a request to a web page, and print the response text:\nDefinition and Usage\nThe requests module allows you to send HTTP requests using Python.\nThe HTTP request returns a Response Object with all the response data (content, encoding, status, etc).\nDownload and Install the Requests Module\nNavigate your command line to the location of PIP, and type the following:\nSyntax\nMethods",
      "examples": [
        "import requests\n\nx = requests.get('https://w3schools.com/python/demopage.htm')\n\nprint(x.text)",
        "C:\\Users\\Your Name\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts>pip install requests",
        "requests.methodname(params)",
        "requests"
      ]
    },
    {
      "title": "Python statistics Module",
      "summary": "Python statistics Module\nPython has a built-in module that you can use to calculate mathematical statistics of numeric data.\nThe statistics module was new in Python 3.4.\nStatistics Methods",
      "examples": [
        "statistics"
      ]
    },
    {
      "title": "Python math Module",
      "summary": "Python math Module\nPython has a built-in module that you can use for mathematical tasks.\nThe math module has a set of methods and constants.\nMath Methods\nMath Constants",
      "examples": [
        "math"
      ]
    },
    {
      "title": "Python cmath Module",
      "summary": "Python cmath Module\nPython has a built-in module that you can use for mathematical tasks for complex numbers.\nThe methods in this module accepts int, float, and complex numbers. It even accepts Python objects that has a __complex__() or __float__() method.\nThe methods in this module almost always return a complex number. If the return value can be expressed as a real number, the return value has an imaginary part of 0.\nThe cmath module has a set of methods and constants.\ncMath Methods\ncMath Constants",
      "examples": [
        "int",
        "float",
        "complex",
        "__complex__()",
        "__float__()",
        "cmath"
      ]
    },
    {
      "title": "How to Remove Duplicates From a Python List",
      "summary": "Learn how to remove duplicates from a List in Python.\nExampleGet your own Python Server\nRemove any duplicates from a List:\nExample Explained\nFirst we have a List that contains duplicates:\nA List with Duplicates\nCreate a dictionary, using the List items as keys. This will automatically remove any duplicates because dictionaries cannot have duplicate keys.\nCreate a Dictionary\nThen, convert the dictionary back into a list:\nConvert Into a List\nNow we have a List without any duplicates, and it has the same order as the original List.\nPrint the List to demonstrate the result\nPrint the List\nREMOVE ADS\nCreate a Function\nIf you like to have a function where you can send your lists, and get them back without duplicates, you can create a function and insert the code from the example above.\nExample\nExample Explained\nCreate a function that takes a List as an argument.\nCreate a Function\nCreate a dictionary, using this List items as keys.\nCreate a Dictionary\nConvert the dictionary into a list.\nConvert Into a List\nReturn the list\nReturn List\nCall the function, with a list as a parameter:\nCall the Function\nPrint the result:\nPrint the Result",
      "examples": [
        "mylist = [\"a\", \"b\", \"a\", \"c\", \"c\"]\nmylist = list(dict.fromkeys(mylist))\nprint(mylist)",
        "mylist = [\"a\", \"b\", \"a\", \"c\", \"c\"]\nmylist = list( dict.fromkeys(mylist) )\nprint(mylist)",
        "def my_function(x):\nreturn list(dict.fromkeys(x))\n\nmylist = my_function([\"a\", \"b\", \"a\", \"c\", \"c\"])\n\nprint(mylist)",
        "def my_function(x):\nreturn list( dict.fromkeys(x) )\n\nmylist = my_function([\"a\", \"b\", \"a\", \"c\", \"c\"])\n\nprint(mylist)"
      ]
    },
    {
      "title": "How to Reverse a String in Python",
      "summary": "Learn how to reverse a String in Python.\nThere is no built-in function to reverse a String in Python.\nThe fastest (and easiest?) way is to use a slice that steps backwards, -1.\nExampleGet your own Python Server\nReverse the string \"Hello World\":\nExample Explained\nWe have a string, \"Hello World\", which we want to reverse:\nThe String to Reverse\nCreate a slice that starts at the end of the string, and moves backwards.\nIn this particular example, the slice statement [::-1] means start at the end of the string and end at position 0, move with the step -1, negative one, which means one step backwards.\nSlice the String\nNow we have a string txt that reads \"Hello World\" backwards.\nPrint the String to demonstrate the result\nPrint the List\nREMOVE ADS\nCreate a Function\nIf you like to have a function where you can send your strings, and return them backwards, you can create a function and insert the code from the example above.\nExample\nExample Explained\nCreate a function that takes a String as an argument.\nCreate a Function\nSlice the string starting at the end of the string and move backwards.\nSlice the String\nReturn the backward String\nReturn the String\nCall the function, with a string as a parameter:\nCall the Function\nPrint the result:\nPrint the Result",
      "examples": [
        "txt = \"Hello World\"[::-1]\nprint(txt)",
        "txt = \"Hello World\" [::-1]\nprint(txt)",
        "def my_function(x):\nreturn x[::-1]\n\nmytxt = my_function(\"I wonder how this text looks like backwards\")\n\nprint(mytxt)",
        "def my_function(x):\nreturn x [::-1]\n\nmytxt = my_function(\"I wonder how this text looks like backwards\")\n\nprint(mytxt)",
        "def my_function(x):\nreturn x[::-1]\n\nmytxt = my_function(\"I wonder how this text looks like backwards\")\n\nprint(mytxt )",
        "-1",
        "[::-1]",
        "txt"
      ]
    },
    {
      "title": "How to Add Two Numbers in Python",
      "summary": "Learn how to add two numbers in Python.\nUse the + operator to add two numbers:\nExampleGet your own Python Server\nAdd Two Numbers with User Input\nIn this example, the user must input two numbers. Then we print the sum by calculating (adding) the two numbers:\nExample",
      "examples": [
        "x = 5\ny = 10\nprint(x + y)",
        "x = input(\"Type a number: \")\ny = input(\"Type another number: \")\n\nsum = int(x) + int(y)\n\nprint(\"The sum is: \", sum)",
        "+"
      ]
    },
    {
      "title": "Python Examples",
      "summary": "Python Syntax\nSyntax Explained\nPython Variables\nVariables Explained\nPython Numbers\nNumbers Explained\nPython Casting\nCasting Explained\nREMOVE ADS\nPython Strings\nStrings Explained\nPython Operators\nOperators Explained\nPython Lists\nLists Explained\nPython Tuples\nTuples Explained\nPython Sets\nSets Explained\nPython Dictionaries\nDictionaries Explained\nPython If ... Else\nIf ... Else Explained\nPython While Loop\nWhile Loop Explained\nPython For Loop\nFor Loop Explained\nPython Functions\nFunctions Explained\nPython Lambda\nLambda Explained\nPython Arrays\nArrays Explained\nPython Classes and Objects\nClasses/Objects Explained\nPython Iterators\nIterators Explained\nPython Modules\nModules Explained\nPython Dates\nDates Explained\nPython Math\nMath Explained\nPython JSON\nJSON Explained\nPython RegEx\nRegEx Explained\nPython PIP\nPIP Explained\nPython Try Except\nTry Except Explained\nPython File Handling\nFile Handling Explained\nPython MySQL\nMySQL Explained\nPython MongoDB\nMongoDB Explained",
      "examples": []
    },
    {
      "title": "Python Online Compiler",
      "summary": "Python Compiler (Editor)\nWith our online Python compiler, you can edit Python code, and view the result in your browser.\nExample\nClick on the \"Try it Yourself\" button to see how it works.\nPublish Your Code\nIf you want to create your own website or build Python applications, check out W3Schools Spaces.\nW3Schools Spaces is a website-building tool that enables you to create and share your own website. You can also get a Python server, allowing you to develop and host your Python applications with ease.\nNote: This includes Python libraries such as: Django, Pandas, NumPy, SciPy and more.\nYou can change the website's look and how it works by editing the code right in your web browser.\nIt's easy to use and doesn't require any setup:\nThe code editor is packed with features to help you achieve more:\nTemplates: Start from scratch or use a template\nCloud-based: no installations required. You only need your browser\nTerminal & Log: debug and troubleshoot your code easily\nFile Navigator: switch between files inside the code editor\nAnd much more!\nLearn Faster\nPractice is key to mastering coding, and the best way to put your Python knowledge into practice is by getting practical with code.\nUse W3Schools Spaces to build, test and deploy code.\nThe code editor lets you write and practice different types of computer languages. It includes Python, but you can use it for other languages too.\nNew languages are added all the time:\nIf you don't know Python, we suggest that you read our Python Tutorial from scratch.\nEasy Package Management\nGet an overview of your packages and easily add or delete frameworks and libraries. Then, with just one click, you can make changes to your packages without manual installation.\nBuild Powerful Websites\nYou can also use the code editor in W3School Spaces to build frontend or full-stack websites from scratch.\nOr you can use the 60+ templates available and save time:\nCreate your Spaces account today and explore them all!\nShare Your Website With The World\nHost and publish your websites in no time with W3School Spaces.\nW3Schools subdomain and SSL certificate are included for free with W3School Spaces. An SSL certificate makes your website safe and secure. It also helps people trust your website and makes it easier to find it online.\nWant a custom domain for your website?\nYou can buy a domain or transfer an existing one and connect it to your space.\nHow Does It Work?\nGet started in a few clicks with W3School Spaces.",
      "examples": [
        "print(\"Hello, World!\")\n\nx = \"Python\"\ny = \"is\"\nz = \"awesome\"\nprint(x, y, z)",
        "Hello, World!",
        "Python is awesome"
      ]
    },
    {
      "title": "Python Exercises",
      "summary": "Exercises\nTest your Python skills with exercises from all categories:\nGet Started\nSyntax\nComments\nVariables\nVariable Names\nMultiple Variable Values\nOutput Variable\nGlobal Variable\nData Types\nNumbers\nCasting\nStrings\nSlicing Strings\nModify Strings\nConcatenate Strings\nFormat Strings\nBooleans\nOperators\nLists\nAccess Lists\nChange Lists\nAdd List Items\nRemove List Items\nLoop Lists\nList Comprehension\nSort Lists\nCopy Lists\nJoin Lists\nTuples\nAccess Tuples\nUpdate Tuples\nUnpack Tuples\nLoop Tuples\nJoin Tuples\nSets\nAccess Sets\nAdd Set Items\nRemove Set Items\nLoop Sets\nJoin Sets\nDictionaries\nAccess Dictionaries\nChange Dictionaries\nAdd Dictionary Items\nRemove Dictionary Items\nLoop Dictionaries\nCopy Dictionaries\nNested Dictionaries\nIf Else\nMatch\nWhile Loops\nFor Loops\nFunctions\nDecorators\nLambda\nArrays\nClasses\nInheritance\nIterators\nPolymorphism\nScope\nModules\nDates\nMath\nJSON\nRegEx\nPIP\nTry Except\nUser Input\nString Formatting\nVirtual Environment\nFile Handling\nOpen File\nWrite to File\nRemove File\nLog in to track your progress\nIf you haven't already, sign up to become a W3Schooler, and get points for every exercise you complete.\nAs a logged-in W3Schools user you will have access to many features like having your own web page, track your learning progress, receive personal guided paths, and more.\nThe Exercise\nThe exercises are a mix of \"multiple choice\" and \"fill in the blanks\" questions. There are between 3 and 9 questions in each category. The answer can be found in the corresponding tutorial chapter. If you're stuck, or answer wrong, you can try again or hit the \"Show Answer\" button to see the correct answer.\nKickstart your career\nGet certified by completing the PYTHON course",
      "examples": []
    },
    {
      "title": "Python Quiz",
      "summary": "You can test your Python skills with W3Schools' Quiz.\nThe Test\nThe test contains 25 questions and there is no time limit.\nThe test is not official, it's just a nice way to see how much you know, or don't know, about Python.\nCount Your Score\nYou will get 1 point for each correct answer. At the end of the Quiz, your total score will be displayed. Maximum score is 25 points.\nStart the Quiz\nGood luck!\nStart the Python Quiz ❯\nIf you don't know Python, we suggest that you read our Python Tutorial from scratch.\nKickstart your career\nGet certified by completing the PYTHON course",
      "examples": []
    },
    {
      "title": "Python Server Create a Python Server Powerful Code Editor Practice Makes Perfect kAI",
      "summary": "Coding Skills\nAI Tutor\nProjects\nSecurely\nChoose your Plan\nBy subscribing to a plan you support the W3Schools mission to make\nlearning available to everyone - no matter their background.\n$0 /Forever\nThis is for you that are beginning to explore coding and web development\nTrack your progress\nSet your goals\nBuild and host 1 static website\n100 credits/month\nAccess various AI features like W3Schools kAI coding tutor and interview preparation.\nNo support\n$14.99 /Month\nThis is for you that want to learn and reach your goals faster. Build fullstack projects, ad free experience.\nAd-free experience\nUnlimited challenges\nUnlimited practice tests\nBuild and host 15 static websites\nBuild and host 1 full stack server\nChoose from 75+ templates\n10000 credits/month\nAccess various AI features like W3Schools kAI coding tutor and interview preparation.\nCancel anytime\nFor teachers\nSpend less time on admin tasks while engaging your students. Help them learn, practice and collaborate. All in one place.\nAd-free for focused learning\nDashboard to manage your classroom\nStudy plans for structured learning\nTrack progress with insights\nInteractive code challenges and projects\nAccess to all courses and certification exams\nSpaces for building and publishing projects\n25% OFF\nYou can also buy a domain or connect an existing one.\nSave Time with Templates\nJust landed in Spaces\nLearn to code more effectively\nand intelligently with kAI - AI tutor\nHi! I'm kAI, W3Schools AI Tutor...\nFeel free to ask me any coding-related questions, and I'll do my best to assist you.\nI can help you checking your code for errors, improving your code's structure, explaining coding concepts in a clear and understandable way, and more...\nI can even create complete websites for you based on your input, so what are you waiting for?\nSuper Simple to Share\nIncluded for free in all plans\nWant custom domains?\nHow it works\nCoding Made Easy\nCloud-based\nTerminal & Log\nHow To Libraries\nDatabase\nFile Navigator\nPackage Manager\nAnalytics\nEnvironment Manager\nSave Time & Money.\nAll Your Files in One Place.\nFix Your Code Faster.\nGet Full Data Visibility.\nIncreased Control and Security.\nFind What You Need Quicker.\nGet Traffic Insights.\nGet Inspired\nFrequently Asked Questions\nWith Basic Spaces, you can build frontend websites. Whereas with Fullstack Spaces, you can build frontend and backend websites.\nBasic Spaces include HTML, CSS, and Javascript. Full Stack Spaces include everything in Basic Spaces plus PHP, Python, React.js, Vue.js, Node.js, Handlebars, and Django.\nYour subscription will be automatically renewed every month.\nYour access to all the benefits for the paid period of time will continue. However, the subscription will not be renewed automatically.\nTo subscribe W3Schools accounts for multiple users, you can contact sales@w3schools.com",
      "examples": []
    },
    {
      "title": "Python Syllabus",
      "summary": "Introduction\nThe W3Schools Python Tutorial is comprehensive and beginner-friendly.\nIt will give you a fundamental knowledge of Python.\nIt is designed for beginners and requires no prior experience with programming.\nThe content has been carefully made to be bite-sized, simple, and easy to understand.\nThe content has been proven by millions of users over the years. It is updated and improved frequently.\nThe syllabus outline and its sequence are structured so you can learn Python step by step, from the introduction, to creating your first application with Python.\nGet Started With Python »\nLearning Outcomes\nUnderstand Python basics, such as syntax, variables, and data types.\nWrite Python code using loops, conditionals, and functions.\nHandle files (open, read, write) using Python.\nUse Python libraries and modules for specific tasks.\nWork with data structures like lists, tuples, sets, and dictionaries.\nDevelop programs that use object-oriented concepts such as classes and inheritance.\nDevelop a problem-solving mindset.\nNote: Are you a teacher teaching Python programming? W3Schools Academy is a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more about Academy here.\nWhich Subjects Are Python Relevant For?\nComputer Science\nPython can be used to learn programming\nMathematics\nPython can help solve math problems and do calculations\nScience (Physics, Chemistry, Biology)\nPython can be used to make scientific models and undertake experiments\nEconomics and Finance\nPython can be used to analyze data, understand trends, and do financial calculations\nData Science and Analytics\nPython and its libraries can be used for big data and to find patterns\nRobotics and Engineering\nPython can be used to make programs to control robots or test engineering projects\nArt and Design\nPython can be used to create digital art, interactive projects, and automate tasks\nAnd more\nPython can be useful for many other subjects\nGet Started\nActivities\nIn this tutorial we offer different activities for you to learn Python for free:\nLessons\nExercises\nQuizzes\nSign in to Track Progress\nYou can also create a free account to track your progress.\nAs a signed-in user, you get access to features such as:\nLearning paths\nSandbox and lab environments\nAchievements\nAnd much more!\nSign Up - It's free\nOverview of the Modules\nPython HOME\nPython Intro\nPython Get Started\nPython Syntax\nPython Comments\nPython Variables\nPython Data Types\nPython Numbers\nPython Casting\nPython Strings\nPython Booleans\nPython Operators\nPython Lists\nPython Tuples\nPython Sets\nPython Dictionaries\nPython If...Else\nPython While Loops\nPython For Loops\nPython Functions\nPython Lambda\nPython Arrays\nPython Classes/Objects\nPython Inheritance\nPython Iterators\nPython Polymorphism\nPython Scope\nPython Modules\nPython Dates\nPython Math\nPython JSON\nPython RegEx\nPython PIP\nPython Try...Except\nPython User Input\nPython String Formatting\nPython File Handling\nPython NumPy\nPython Pandas\nPython SciPy\nPython Django\nPython Matplotlib\nPython Machine Learning\nPython MySQL\nPython MongoDB\nGet Started\nSandbox and Lab Environment\nPython, like any other programming language, is best learned by working hands-on with code.\nEasily try code with our \"Try it Yourself\" editor.\nHere, you can edit Python code and view the result:\nExampleGet your own Python Server\nIf you want to explore more and host your project, we have a feature called Spaces that allows you to build, test and deploy Python code and other backend languages.\nHere you get a secure sandbox environment called Spaces, where you can practice coding and test projects in real-time.\nSpaces allow you to test, build, and deploy code. This includes a W3Schools subdomain, hosting, and secure SSL certificates.\nSpaces require no installation and run directly in the browser.\nFeatures include:\nCollaboration\nFile navigator\nTerminal & log\nPackage manager\nDatabase\nEnvironment manager\nAnalytics\nCreate a Spaces Account\nPython Certification\nW3Schools offers an end-of-pathway certification program.\nHere you can take exams to get certified.\nThe Python exam is a test that summarizes the W3Schools Python syllabus.\nAfter passing the exam you get the \"Certified Python Developer\" Certification.\nThere are two different types of certifications:\nNon-adaptive\nAdaptive\nThe non-adaptive is pass or no pass.\nThe adaptive certification is adaptive and graded; students will get a grade from intermediate, advanced to professional.\nBuy Certificate »\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach Python programming?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo »",
      "examples": [
        "print(\"Hello, World!\")"
      ]
    },
    {
      "title": "Python Study Plan",
      "summary": "Introduction\nThe Python study plan helps you teach your students Python step-by-step.\nCreating a study plan for Python is easy.\nYou can use a pre-built study plan or customize it.\nStudents have different skill levels. The study plans can be customized to ensure that everyone is challenged.\nSave time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of Python to the final exam.\nW3Schools Academy\nThe study plan is a feature of W3Schools Academy.\nW3Schools Academy is a platform that has everything you need to teach coding, all in one place.\nIt offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom.\nYou need to have an active subscription to access the study plan feature. There are two different subscription tiers:\nEssentials ($1.99 / month per student)\nFull Access ($5.99 / month per student)\nCalculate your price and order here.\nLearn More »\nAcademy also offer other features such as:\nManaging your classroom\nTracking of student progress and reports\nLabs, assignments, and code challenges (prebuilt challenges or create your own ones)\nAuto-grading\nTeaching materials\nCertification exams\nGet a free demo »\nTeacher Materials\nW3Schools has everything you need to teach Python.\nThe Python training materials is available for you to include and use in your study plan:\nW3Schools Python Tutorial\nPython Exercises\nPython Quiz\nPython Challenges (Coding challenges)\nPython Certification Exam (End of Pathway Exam)\nPython Syllabus\nWith the Python Syllabus, your students will start with the basics, like understanding variables and data types, and move to more advanced topics, like working with loops, functions, and file handling. Each chapter has examples, try-it-yourself sections, exercises, and quizzes to make learning easy, interactive, and fun.\nRead more about Python Syllabus.\nStudy Plan Overview\nThe study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level.\nLearning Paths\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nInteractive Content\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTimeline and Pace\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nTrack Student Progress\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nEnd of Pathway Exam\nThe Python study plan aligns with the Python Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the Python Tutorial.\nYou get reports of the students' results.\nThe Python study plan aligns with the Python Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the Python Tutorial.\nYou get reports of the students' results.\nAccessibility\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nLearn More »\nSample Study Plan\nYou choose the timeline and pace of your study plans.\nSchools have different preferences.\nSome would like more intensive pace, e.g. 5 weeks, others 12 or more weeks.\nIt is completely up to you.\nFor example, this is how a 5-week Python study plan could look like:\nWeek 1: Introduction, variables, Data Types, Numbers & Casting\nWeek 2: Strings, Booleans & Operators, Lists, Tuples\nWeek 3: Sets, Dictionaries\nWeek 4: Conditionals, Loops & Iterators, Polymorphism, Arrays, Objects, Inheritance & Scope, Functions & Lambdas\nWeek 5: Miscellaneous, File Handling, MySQL, MongoDB, Matplotlib, Machine Learning, Python Certification Exam\nImage of Sample Python study plan:\nReady to get started?\nStart with Python Study Plans today.\nGet Started »\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach Python programming?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo »",
      "examples": []
    },
    {
      "title": "Python Interview Questions",
      "summary": "This page contains a list of typical Python Interview Questions and Answers.\nPython Interview Questions\nThese questions and answers cover some fundamental Python concepts that are often discussed in interviews.\nA variable created inside a function belongs to the local scope of that function, and can only be used inside that function.\nA variable created in the main body of the Python code is a global variable and belongs to the global scope. Global variables are available from within any scope, global and local.\nAn iterator is an object that contains a countable number of values.\nAn iterator is an object that can be iterated upon, meaning that you can traverse through all the values.\nTechnically, in Python, an iterator is an object which implements the iterator protocol, which consist of the methods __iter__() and __next__().\nAll classes in Python have a function called __init__(), which is always executed when the class is being initiated.\nWe can use the __init__() function to assign values to object properties, or other operations that are necessary to do when the object is being created.\nUse lambda functions when an anonymous function is required for a short period of time.\nLists, tuples, and sets are all used to store multiple items in a single variable, but they have different properties:\nA list is ordered and changeable. It allows duplicate values.\nA tuple is ordered but unchangeable (immutable). It also allows duplicates.\nA set is unordered, unindexed, and contains only unique items. It is changeable, but you cannot modify individual elements by index.\nYou can use the isalnum() method, which returns True if all the characters are alphanumeric, meaning alphabet letter (a-z) and numbers (0-9).\nYou can use the int() function, like this:\nIndentation refers to the spaces at the beginning of a code line. Where in other programming languages the indentation in code is for readability only, the indentation in Python is very important.\nPython uses indentation to indicate a block of code.\nPython will give you an error if you skip the indentation.\nSET\nInheritance allows us to define a class that inherits all the methods and properties from another class.\nParent class is the class being inherited from, also called base class.\nChild class is the class that inherits from another class, also called derived class.\nAbove ten,\nand also above 20!\nText Type: str\nNumeric Types: int, float, complex\nSequence Types: list, tuple, range\nMapping Type: dict\nSet Types: set, frozenset\nBoolean Type: bool\nBinary Types: bytes, bytearray, memoryview\nMembership operators are used to test if a sequence is present in an object. The in and not in operators are examples of these:\nMembership operators are used to test if a sequence is present in an object. The in and not in operators are examples of these:\nThe pass statement\nArbitrary Arguments are often shortened to *args in Python documentations.\nIf you do not know how many arguments that will be passed into your function, add a * before the parameter name in the function definition. This way the function will receive a tuple of arguments, and can access the items accordingly.\nTo create a module just save the code you want in a file with the file extension .py:\ndef greeting(name):\nprint(\"Hello, \" + name)\nTo create a module just save the code you want in a file with the file extension .py:\nNow we can use the module we just created, by using the import statement:\nimport mymodule\n\nmymodule.greeting(\"Jonathan\")\nNow we can use the module we just created, by using the import statement:\nNo, because: list2 will only be a reference to list1, and changes made in list1 will automatically also be made in list2.\nTo make a copy of a list, you can use copy() or the list() method.\nYou can return a range of characters by using the \"slice syntax\".\nSpecify the start index and the end index, separated by a colon, to return a part of the string, for example:\nGet the characters from position 2 to position 5 (not included):\nA Class is like an object constructor, or a \"blueprint\" for creating objects.\nYou can create a class with the class keyword:\nclass MyClass:\nx = 5\nNow we can use the class named MyClass to create objects:\nCreate an object named p1, and print the value of x:\np1 = MyClass()\nprint(p1.x)\nNow we can use the class named MyClass to create objects:\nCreate an object named p1, and print the value of x:\nKickstart your career\nGet certified by completing the PYTHON course",
      "examples": [
        "x = 41 if x > 10: print(\"Above ten,\") if x > 20: print(\"and also above 20!\") else: print(\"but not above 20.\")",
        "num = \"5\"\nconvert = int(num)",
        "print(type(x))",
        "x = [\"apple\", \"banana\"]\nprint(\"banana\" in x) # returns True\n\nx = [\"apple\", \"banana\"]\nprint(\"pineapple\" not in x) # returns True",
        "def greeting(name):\nprint(\"Hello, \" + name)",
        "import mymodule\n\nmymodule.greeting(\"Jonathan\")",
        "b = \"Hello, World!\"\nprint(b[2:5])",
        "class MyClass:\nx = 5",
        "p1 = MyClass()\nprint(p1.x)",
        "isalnum()",
        "int()",
        "str",
        "int",
        "float",
        "complex",
        "list",
        "tuple",
        "range",
        "dict",
        "set",
        "frozenset",
        "bool",
        "bytes",
        "bytearray",
        "memoryview",
        "in",
        "not in",
        "if",
        "pass",
        "*args",
        "*",
        ".py",
        "import",
        "list2 = list1",
        "list2",
        "list1",
        "copy()",
        "list()"
      ]
    },
    {
      "title": "W3Schools Python Bootcamp Python Bootcamp",
      "summary": "Learn More\nWhat You Will Learn\nPython\nHow to write scripts for automating tasks.\nHow to create and serve web applications.\nHow to write programs for mathematical and scientific computing.\nHow to use object-oriented programming and third-party libraries.\nHow to build secure and reliable applications.\nSQL\nHow to store, change and retrieve data in databases with SQL.\nHow to use SQL in: MySQL, SQL Server, MS Access, Oracle, Sybase, Informix, Postgres, and other database systems.\nNumPy\nHow NumPy can be used for arrays in statistics and math.\nPandas\nHow Pandas can be used for data analysis.\nR\nHow to use R for managing different types of data.\nHow to use R for statistical data analysis.\nHow to use R to visualize data with plots and diagrams.\nSelf-paced Data Analytics Program\nStart learning Data Analytics with the W3Schools program and lay the foundations of your programming skills. This program is a great foundation for you that wants to get started with Data Analytics. It covers Python, SQL, NumPy, Pandas, R, and Data Science.\nPython is a popular object oriented programming language.\nSQL is a standard language for storing, manipulating and retrieving data in databases.\nNumPy is a Python library for using arrays in statistics and math.\nPandas is a Python library for data analysis.\nR is a language for statistical computing and graphics. It provides an environment for data manipulation, calculation and visualization.\nThis is a structured and interactive version of the w3schools Python, SQL, NumPy, Pandas, R, and Data Science Tutorial together with the w3schools certification.\nThe program is a set of self-paced courses with text based modules, practical interactive examples and exercises to check your understanding as you progress. Complete the modules and the final certification exams to get the w3schools certification.\nWhat You Get\n7x Certifications:\nCertified Python Developer\nCertified SQL Developer\nNumpy Fundamentals\nPandas Fundamentals\nR Fundamentals\nData Science Fundamentals\nCertified Data Analyst\nThe Certified Data Analyst certification is granted when all the above certifications are obtained!\nCertificate of Completion\nYou get sharable certificates that can be added to your CV, Resume or LinkedIn.\nCheck out what it looks like in this example!\nThree Reasons to Join the Program\nLearn More\nHow it Works\nStep 1. Course enrollment\nEnroll by paying the enrollment fee and gain access to the course and final exam. There is no deadline to take the exam. All questions in the exam are based on W3Schools content.\nStep 2. Complete the course learning modules\nThe courses are self-paced with text based modules, practical interactive examples and exercises to check your understanding as you progress. Complete the learning modules to unlock the final exam.\nStep 3. Take the exams\nThe exams are taken at the end of each course after finishing the course learning modules. Immediately after completing the exam, you will be informed of your score and of your pass/fail status. You will get three attempts to pass each exam. You can use the new attempts to improve your score. The best result of the attempts will count.\nStep 4: Become certified\nPass the exams and get your certifications and your Certified Developer titles! Each certificate gets a unique link that can be shared with others. Validate your certificates with a link or a QR code.\nLearn More",
      "examples": []
    },
    {
      "title": "W3Schools Python Certificate",
      "summary": "W3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nW3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nWho Should Consider Getting Certified?\nAny student or professional within the digital industry.\nCertifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market.\nW3Schools is Trusted by Top Companies\nW3Schools has over two decades of experience with teaching coding online.\nOur certificates are recognized and valued by companies looking to employ skilled developers.\nSave Time and Money\nShow the world your coding skills by getting a certification.\nThe prices is a small fraction compared to the price of traditional education.\nDocument and validate your competence by getting certified!\nExam overview\nFee: 95 USD\nAchievable certification levels:\nIntermediate (40%)\nAdvanced (75%)\nProfessional (90%)\nNumber of questions:\nAdaptive, 60 on average\nRequirement to pass:\nMinimum 40% - Intermediate level\nTime limit: 60 minutes\nNumber of attempts to pass: 3\nExam deadline: None\nCertification Expiration: None\nFormat: Online, multiple choice\nRegister now »\nAdvance Faster in Your Career\nGetting a certificate proves your commitment to upgrading your skills.\nThe certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on.\nIt gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nKnowledge is power, especially in the current job market.\nDocumentation of your skills enables you to advance your career or helps you to start a new one.\nHow Does It Work?\nStudy for free at W3Schools.com\nStudy at your own speed\nTest your skills with W3Schools online quizzes\nApply for your certificate by paying an exam fee\nTake your exam online, at any time, and from any location\nGet Your Certificate and Share It With The World\nExample certificate:\nEach certificate gets a unique link that can be shared with others.\nValidate your certification with the link or QR code.\nCheck how it looks like in this Example.\nShare your certificate on Linked in the Certifications section in just one click!\nDocument Your Skills\nGetting a certificate proves your commitment to upgrade your skills, gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nGet Your Certificate »\nLooking to add multiple users?\nAre you an educator, manager or business owner looking for courses or certifications?\nWe are working with schools, companies and organizations from all over the world.\nGet courses and/or certifications for your team here.",
      "examples": []
    },
    {
      "title": "Python Training",
      "summary": "Introduction: Python is a popular programming language that can be used for a wide range of applications.\nW3Schools offers an Python training course that covers Python foundations and more.\nThe course includes the W3Schools Certified Python Developer certification.\nThe Python training is relevant for companies and schools that want to certify their employees or students.\nOrganizations can track learner progress, get insights and manage everything from licenses to certificates with W3Schools Academy.\nRemember that you can always learn for free on W3Schools with the Python Tutorial.\n*Academy is available for companies and schools only.\nGet analytics to track learner progress and results.\nFlexible timelines and pacing to match busy schedules.\nCertifications that are trusted by leading organizations worldwide\nPython Training with W3Schools\nW3Schools has been training millions of learners since 1998.\nGovernments, schools, and organizations worldwide trust W3Schools to train employees and students.\nW3Schools training materials and content have been well-proven over the years and are updated regularly.\nWith the W3Schools Academy pricing model, it is now one of the worlds most affordable quality Python training options there is.\nLearning Outcomes\nThe Certificate Course includes all the training materials to pass the Certified Python Developer certification exam.\nNo prerequisites are required to take the course.\nThe learners will be able to:\nUnderstand Python basics, such as syntax, variables, and data types.\nWrite Python code using loops, conditionals, and functions.\nHandle files (open, read, write) using Python.\nUse Python libraries and modules for specific tasks.\nWork with data structures like lists, tuples, sets, and dictionaries.\nDevelop programs that use object-oriented concepts such as classes and inheritance.\nDevelop a problem-solving mindset.\nIf you are not a company or school, you can still buy the course for personal use.\nRead more about W3Schools courses here: W3Schools Courses\nCertified Python Developer\nAfter completing the training modules the learner will take the end of pathway exam.\nWhen the learner passes the exam, the learner will get the Certified Python Developer certification.\nThe exam is a multiple choice exam with 60 questions and a duration of 60 minutes.\nImage of a Python Certificate:\nThe certificate does not expire and is valid for lifetime.\nIt is shareable and can be added to your CV or LinkedIn profile.\nYou can read more about the certificate here: Python Certificate\nTrack Learner Progress\nAs an employer or a school you can track learner progress and results.\nAssign courses to learners with ease and get them started in no time.\nWith W3Schools Academy you can manage everything from licenses to certificates.\nIt will give you everything you need to train your employees or students in different technologies.\nImage of class overview in Academy:\nYou can read more about the Academy here: W3Schools Academy\nNote: If you don't want to track progress, there is an option to give them access to the course without any management.\nInteractive Learning\nThe course is designed to be interactive and fun to learn.\nThe learner will engage with different learning activities to keep them engaged.\nThis includes quizzes, code exercises, challenges, and a final exam.\nStay engaged with hands-on coding challenges that help you practice and test what you've learned.\nImage of one of the activity types in the course, a Python Challenge:\nPython is best learned by doing, and this is why we have included a lot of challenges in the course.\nYou will get access to hundreds of coding challenges\nGet instant feedback with auto-grading\nReceive personalized guidance with manual grading\nWork on exercises ranging from simple to complex\nYou can read more about the different types of activities here: Coding Exercises\nTraining Course Overview\nHow to Get Started\nPurchase W3Schools Academy access for your organization\nCreate a class and invite your learners\nAssign the Python course to your class\nMonitor learner progress through the admin dashboard\nReview analytics and certification results\nAre you ready to start training your employees today?\nBuy Access to Academy Now »",
      "examples": []
    }
  ],
  "glossary": [
    "access items",
    "access tuples",
    "add items",
    "avl trees",
    "backend",
    "binary search",
    "binary trees",
    "bootstrap aggregation",
    "bubble sort",
    "categorical",
    "categorical data",
    "change items",
    "cmath module",
    "concatenate strings",
    "confusion matrix",
    "copy dictionaries",
    "copy lists",
    "counting sort",
    "cross validation",
    "data distribution",
    "data set",
    "data types",
    "decision tree",
    "dictionary exercises",
    "dictionary methods",
    "escape characters",
    "exercises",
    "file handling",
    "format strings",
    "free",
    "getting started",
    "global variables",
    "graphs",
    "grid search",
    "hash tables",
    "hierarchical clustering",
    "insertion sort",
    "javascript",
    "join lists",
    "join sets",
    "join tuples",
    "k-means",
    "k-nearest neighbors",
    "linear regression",
    "linear search",
    "linked lists",
    "list comprehension",
    "list exercises",
    "list methods",
    "logistic regression",
    "loop dictionaries",
    "loop lists",
    "loop sets",
    "loop tuples",
    "machine learning",
    "math module",
    "matplotlib bars",
    "matplotlib grid",
    "matplotlib histograms",
    "matplotlib intro",
    "matplotlib labels",
    "matplotlib line",
    "matplotlib markers",
    "matplotlib plotting",
    "matplotlib pyplot",
    "matplotlib scatter",
    "matplotlib subplot",
    "merge sort",
    "modify strings",
    "module reference",
    "mongodb collection",
    "mongodb delete",
    "mongodb find",
    "mongodb insert",
    "mongodb limit",
    "mongodb query",
    "mongodb sort",
    "mongodb update",
    "multiple regression",
    "mysql delete",
    "mysql insert",
    "mysql join",
    "mysql limit",
    "mysql select",
    "mysql update",
    "mysql where",
    "nested dictionaries",
    "numerical",
    "ordinal",
    "output variables",
    "percentile",
    "polynomial regression",
    "programs",
    "python arrays",
    "python booleans",
    "python bootcamp",
    "python casting",
    "python comments",
    "python compiler",
    "python dates",
    "python decorators",
    "python dictionaries",
    "python dsa",
    "python exceptions",
    "python exercises",
    "python functions",
    "python glossary",
    "python home",
    "python if...else",
    "python inheritance",
    "python intro",
    "python iterators",
    "python json",
    "python keywords",
    "python lambda",
    "python lists",
    "python match",
    "python math",
    "python matplotlib",
    "python modules",
    "python mongodb",
    "python mysql",
    "python numbers",
    "python oop",
    "python operators",
    "python overview",
    "python pip",
    "python polymorphism",
    "python quiz",
    "python reference",
    "python regex",
    "python scope",
    "python server",
    "python sets",
    "python strings",
    "python syllabus",
    "python syntax",
    "python training",
    "python try...except",
    "python tuples",
    "python variables",
    "python virtualenv",
    "queues",
    "quick sort",
    "radix sort",
    "random module",
    "remove items",
    "report error",
    "requests module",
    "scale",
    "scatter plot",
    "selection sort",
    "set exercises",
    "set methods",
    "slicing strings",
    "sort lists",
    "stacks",
    "standard deviation",
    "statistics module",
    "string exercises",
    "string methods",
    "train test",
    "trees",
    "tuple exercises",
    "tuple methods",
    "unpack tuples",
    "update tuples",
    "variable exercises",
    "variable names",
    "w3.css",
    "w3schools spaces"
  ]
}