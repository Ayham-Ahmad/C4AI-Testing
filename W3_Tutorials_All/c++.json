{
  "course_name": "C++",
  "description": "C++ is a popular programming language. C++ is used to create computer programs, and is one of the most used language in game development. C++ was developed as an extension of C, and both languages have almost the same syntax. Tip: Sign in to track your progress - it's free. Our \"Try it Yourself\" editor makes it easy to learn C++. You can edit C++ code and view the result in your browser. Click on the \"Run example\" button to see how it works. We recommend reading this tutorial, in the sequence listed in the left menu. C++ is an object oriented language and some concepts may be new. Take breaks when needed, and go over the examples as many times as needed. Many chapters in this tutorial end with an exercise where you can check your level of knowledge. See all C++ Exercises REMOVE ADS Learn by taking a quiz! The quiz will give you a signal of how much you know, or do not know, about C++. Start C++ Quiz",
  "course_summary": [
    {
      "title": "C++ Introduction",
      "summary": "What is C++?\nC++ is a cross-platform language that can be used to create high-performance applications.\nC++ was developed by Bjarne Stroustrup, as an extension to the C language.\nC++ gives programmers a high level of control over system resources and memory.\nThe language was updated 5 major times in 2011, 2014, 2017, 2020, and 2023 to C++11, C++14, C++17, C++20, and C++23.\nWhy Use C++\nC++ is one of the world's most popular programming languages.\nC++ can be found in today's operating systems, Graphical User Interfaces, and embedded systems.\nC++ is an object-oriented programming language which gives a clear structure to programs and allows code to be reused, lowering development costs.\nC++ is portable and can be used to develop applications that can be adapted to multiple platforms.\nC++ is fun and easy to learn!\nAs C++ is close to C, C# and Java, it makes it easy for programmers to switch to C++ or vice versa.\nDifference between C and C++\nC++ was developed as an extension of C, and both languages have almost the same syntax.\nThe main difference between C and C++ is that C++ supports classes and objects, while C does not.\nGet Started\nWhen you are finished with this tutorial, you will be able to write C++ programs and create real-life examples.\nIt is not necessary to have any prior programming experience.",
      "examples": []
    },
    {
      "title": "C++ Getting Started",
      "summary": "Get Started With C++\nAt W3Schools, you can try C++ without installing anything.\nOur Online C++ Editor runs directly in your browser, and shows both the code and the result:\nCode:\nResult:\nThis editor will be used in the entire tutorial to demonstrate the different aspects of C++.\nInstall C++\nIf you want to run C++ on your own computer, you need two things:\nA text editor, like Notepad, to write C++ code\nA compiler, like GCC, to translate the C++ code into a language that the computer will understand\nThere are many text editors and compilers to choose from. In the next steps, we will show you how to use an IDE that includes both.\nInstall C++ IDE\nAn IDE (Integrated Development Environment) is used to edit AND compile the code.\nPopular IDE's include Code::Blocks, Eclipse, and Visual Studio. These are all free, and they can be used to both edit and debug C++ code.\nNote: Web-based IDE's can work as well, but functionality is limited.\nWe will use Code::Blocks in our tutorial, which we believe is a good place to start.\nYou can find the latest version of Codeblocks at http://www.codeblocks.org/. Download the mingw-setup.exe file, which will install the text editor with a compiler.\nC++ Quickstart\nLet's create our first C++ file.\nOpen Codeblocks and go to File > New > Empty File.\nWrite the following C++ code and save the file as myfirstprogram.cpp (File > Save File as):\nDon't worry if you don't understand the code above - we will discuss it in detail in later chapters. For now, focus on how to run the code.\nIn Codeblocks, it should look like this:\nThen, go to Build > Build and Run to run (execute) the program. The result will look something to this:\nCongratulations! You have now written and executed your first C++ program.",
      "examples": [
        "#include <iostream>\nusing namespace std;\n\nint main() {\ncout << \"Hello World!\";\nreturn 0;\n}",
        "Hello World!",
        "mingw-setup.exe",
        "myfirstprogram.cpp",
        "Hello World!\nProcess returned 0 (0x0) execution time : 0.011 s\nPress any key to continue."
      ]
    },
    {
      "title": "C++ Syntax",
      "summary": "C++ Syntax\nLet's break up the following code to understand it better:\nExample\nExample explained\nLine 1: #include <iostream> is a header file library that lets us work with input and output objects, such as cout (used in line 5). Header files add functionality to C++ programs.\nLine 2: using namespace std means that we can use names for objects and variables from the standard library.\nDon't worry if you don't understand how #include <iostream> and using namespace std works. Just think of it as something that (almost) always appears in your program.\nLine 3: A blank line. C++ ignores white space. But we use it to make the code more readable.\nLine 4: Another thing that always appear in a C++ program is int main(). This is called a function. Any code inside its curly brackets {} will be executed.\nLine 5: cout (pronounced \"see-out\") is an object used together with the insertion operator (<<) to output/print text. In our example, it will output \"Hello World!\".\nNote: C++ is case-sensitive: \"cout\" and \"Cout\" has different meaning.\nNote: Every C++ statement ends with a semicolon ;.\nNote: The body of int main() could also been written as:\nint main () { cout << \"Hello World! \"; return 0; }\nRemember: The compiler ignores white spaces. However, multiple lines makes the code more readable.\nLine 6: return 0; ends the main function.\nLine 7: Do not forget to add the closing curly bracket } to actually end the main function.\nOmitting Namespace\nYou might see some C++ programs that runs without the standard namespace library. The using namespace std line can be omitted and replaced with the std keyword, followed by the :: operator for some objects:\nExample\nIt is up to you if you want to include the standard namespace library or not.",
      "examples": [
        "#include <iostream>\nusing namespace std;\n\nint main() {\ncout << \"Hello World!\";\nreturn 0;\n}",
        "#include <iostream>\n\nint main() {\nstd::cout << \"Hello World!\";\nreturn 0;\n}",
        "#include <iostream>",
        "cout",
        "using namespace std",
        "int main()",
        "{}",
        "<<",
        ";",
        "int main () { cout << \"Hello World! \"; return 0; }",
        "return 0;",
        "}",
        "std",
        "::"
      ]
    },
    {
      "title": "C++ Statements",
      "summary": "C++ Statements\nA computer program is a list of \"instructions\" to be \"executed\" by a computer.\nIn a programming language, these programming instructions are called statements.\nThe following statement \"instructs\" the compiler to print the text \"Hello World\" to the screen:\nExample\nIt is important that you end the statement with a semicolon ;\nIf you forget the semicolon (;), an error will occur and the program will not run:\nExample\nTry it Yourself Â»\nMany Statements\nMost C++ programs contain many statements.\nThe statements are executed, one by one, in the same order as they are written:\nExample\nFrom the example above, we have three statements:\ncout << \"Hello World!\";\ncout << \"Have a good day!\";\nreturn 0;\nThe first statement is executed first (print \"Hello World!\" to the screen).\nThen the second statement is executed (print \"Have a good day!\" to the screen).\nAnd at last, the third statement is executed (end the C++ program successfully).\nYou will learn more about statements while reading this tutorial. For now, just remember to always end them with a semicolon to avoid any errors.\nComing up: The next chapter will teach you how to control the output and how to insert new lines to make it more readable.",
      "examples": [
        "cout << \"Hello World!\";",
        "cout << \"Hello World!\"",
        "cout << \"Hello World!\";\ncout << \"Have a good day!\";\nreturn 0;",
        ";",
        "error: expected ';' before 'return'",
        "cout << \"Have a good day!\";",
        "return 0;"
      ]
    },
    {
      "title": "C++ Output (Print Text)",
      "summary": "C++ Output (Print Text)\nThe cout object, together with the << operator, is used to output values and print text.\nJust remember to surround the text with double quotes (\"\"):\nExample\nYou can add as many cout objects as you want. However, note that it does not insert a new line at the end of the output:\nExample\nTip: You will learn how to add new lines in the C++ New Lines chapter.",
      "examples": [
        "#include <iostream>\nusing namespace std;\n\nint main() {\ncout << \"Hello World!\";\nreturn 0;\n}",
        "#include <iostream>\nusing namespace std;\n\nint main() {\ncout << \"Hello World!\";\ncout << \"I am learning C++\";\nreturn 0;\n}",
        "cout",
        "<<",
        "\"\""
      ]
    },
    {
      "title": "C++ Output Numbers",
      "summary": "C++ Print Numbers\nYou can also use cout() to print numbers.\nHowever, unlike text, we don't put numbers inside double quotes:\nExample\nYou can also perform mathematical calculations:\nExample\nExample",
      "examples": [
        "#include <iostream>\nusing namespace std;\n\nint main() {\ncout << 3;\nreturn 0;\n}",
        "cout << 3 + 3;",
        "cout << 2 * 5;",
        "cout()"
      ]
    },
    {
      "title": "C++ New Lines",
      "summary": "New Lines\nTo insert a new line in your output, you can use the \\n character:\nExample\nYou can also use another << operator and place the \\n character after the text, like this:\nExample\nTip: Two \\n characters after each other will create a blank line:\nExample\nAnother way to insert a new line, is with the endl manipulator:\nExample\nBoth \\n and endl are used to break lines. However, \\n is most used.\nThe newline character (\\n) is called an escape sequence, and it forces the cursor to change its position to the beginning of the next line on the screen. This results in a new line.\nExamples of other valid escape sequences are:",
      "examples": [
        "#include <iostream>\nusing namespace std;\n\nint main() {\ncout << \"Hello World! \\n\";\ncout << \"I am learning C++\";\nreturn 0;\n}",
        "#include <iostream>\nusing namespace std;\n\nint main() {\ncout << \"Hello World!\" << \"\\n\";\ncout << \"I am learning C++\";\nreturn 0;\n}",
        "#include <iostream>\nusing namespace std;\n\nint main() {\ncout << \"Hello World!\" << \"\\n\\n\";\ncout << \"I am learning C++\";\nreturn 0;\n}",
        "\\n",
        "<<",
        "endl"
      ]
    },
    {
      "title": "C++ Comments",
      "summary": "C++ Comments\nComments can be used to explain C++ code, and to make it more readable. It can also be used to prevent execution when testing alternative code. Comments can be singled-lined or multi-lined.\nSingle-line Comments\nSingle-line comments start with two forward slashes (//).\nAny text between // and the end of the line is ignored by the compiler (will not be executed).\nThis example uses a single-line comment before a line of code:\nExample\nThis example uses a single-line comment at the end of a line of code:\nExample\nC++ Multi-line Comments\nMulti-line comments start with /* and ends with */.\nAny text between /* and */ will be ignored by the compiler:\nExample\nIt is up to you which you want to use. Normally, we use // for short comments, and /* */ for longer.",
      "examples": [
        "// This is a comment\ncout << \"Hello World!\";",
        "cout << \"Hello World!\"; // This is a comment",
        "/* The code below will print the words Hello World!\nto the screen, and it is amazing */\ncout << \"Hello World!\";",
        "//",
        "/*",
        "*/",
        "/* */"
      ]
    },
    {
      "title": "C++ Variables",
      "summary": "C++ Variables\nVariables are containers for storing data values.\nIn C++, there are different types of variables (defined with different keywords), for example:\nint - stores integers (whole numbers), without decimals, such as 123 or -123\ndouble - stores floating point numbers, with decimals, such as 19.99 or -19.99\nchar - stores single characters, such as 'a' or 'B'. Char values are surrounded by single quotes\nstring - stores text, such as \"Hello World\". String values are surrounded by double quotes\nbool - stores values with two states: true or false\nDeclaring (Creating) Variables\nTo create a variable, specify the type and assign it a value:\nSyntax\nWhere type is one of C++ types (such as int), and variableName is the name of the variable (such as x or myName). The equal sign is used to assign values to the variable.\nTo create a variable that should store a number, look at the following example:\nExample\nCreate a variable called myNum of type int and assign it the value 15:\nYou can also declare a variable without assigning the value, and assign the value later:\nExample\nChanging Variable Values\nNote that if you assign a new value to an existing variable, it will overwrite the previous value:\nExample\nREMOVE ADS\nOther Types\nA demonstration of other data types:\nExample\nYou will learn more about the individual types in the Data Types chapter.\nDisplay Variables\nThe cout object is used together with the << operator to display variables.\nTo combine both text and a variable, separate them with the << operator:\nExample\nYou can also combine different types, which you will learn more about in a later chapter.\nExample\nAdd Variables Together\nTo add a variable to another variable, you can use the + operator:\nExample",
      "examples": [
        "type variableName = value;",
        "int myNum = 15;\ncout << myNum;",
        "int myNum;\nmyNum = 15;\ncout << myNum;",
        "int myNum = 15;Â Â // myNum is 15\nmyNum = 10;Â  // Now myNum is 10\ncout << myNum;Â  // Outputs 10",
        "int myNum = 5;Â Â Â Â Â Â Â Â Â Â Â Â Â Â  // Integer (whole number without decimals)\ndouble myFloatNum = 5.99;Â Â Â  // Floating point number (with decimals)\nchar myLetter = 'D';Â Â Â Â Â Â Â Â  // Character\nstring myText = \"Hello\";Â Â Â Â  // String (text)\nbool myBoolean = true;Â Â Â Â Â Â  // Boolean (true or false)",
        "int myAge = 35;\ncout << \"I am \" << myAge << \" years old.\";",
        "string name = \"John\";\nint age = 35;\ndouble height = 6.1;\n\ncout << name << \" is \" << age << \" years old and \" << height << \" feet tall.\";",
        "int x = 5;\nint y = 6;\nint sum = x + y;\ncout << sum;",
        "int",
        "double",
        "char",
        "string",
        "bool",
        "cout",
        "<<",
        "+"
      ]
    },
    {
      "title": "C++ Declare Multiple Variables",
      "summary": "Declare Many Variables\nTo declare more than one variable of the same type, use a comma-separated list:\nExample\nOne Value to Multiple Variables\nYou can also assign the same value to multiple variables in one line:\nExample",
      "examples": [
        "int x = 5, y = 6, z = 50;\ncout << x + y + z;",
        "int x, y, z;\nx = y = z = 50;\ncout << x + y + z;"
      ]
    },
    {
      "title": "C++ Identifiers",
      "summary": "C++ Identifiers\nAll C++ variables must be identified with unique names.\nThese unique names are called identifiers.\nIdentifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).\nNote: It is recommended to use descriptive names in order to create understandable and maintainable code:\nExample\nThe general rules for naming variables are:\nNames can contain letters, digits and underscores\nNames must begin with a letter or an underscore (_)\nNames are case-sensitive (myVar and myvar are different variables)\nNames cannot contain whitespaces or special characters like !, #, %, etc.\nReserved words (like C++ keywords, such as int) cannot be used as names",
      "examples": [
        "// Good\nint minutesPerHour = 60;\n\n// OK, but not so easy to understand what m actually is\nint m = 60;",
        "myVar",
        "myvar",
        "int"
      ]
    },
    {
      "title": "C++ Constants",
      "summary": "Constants\nWhen you do not want others (or yourself) to change existing variable values, use the const keyword (this will declare the variable as \"constant\", which means unchangeable and read-only):\nExample\nYou should always declare the variable as constant when you have values that are unlikely to change:\nExample\nNotes On Constants\nWhen you declare a constant variable, it must be assigned with a value:\nExample\nLike this:\nThis however, will not work:",
      "examples": [
        "const int myNum = 15;Â  // myNum will always be 15\nmyNum = 10;Â  // error: assignment of read-only variable 'myNum'",
        "const int minutesPerHour = 60;",
        "const int minutesPerHour;\nminutesPerHour = 60; // error",
        "const"
      ]
    },
    {
      "title": "C++ Variables Examples",
      "summary": "Real-Life Examples\nLet's get a bit more practical!\nOften in our examples, we simplify variable names to match their data type (myInt or myNum for int types, myChar for char types, and so on). This is done to avoid confusion.\nHowever, for a practical example of using variables, we have created a program that stores different data about a college student:\nExample\nCalculate the Area of a Rectangle\nIn this real-life example, we create a program to calculate the area of a rectangle (by multiplying the length and width):\nExample",
      "examples": [
        "// Student data\nint studentID = 15;\nint studentAge = 23;\nfloat studentFee = 75.25;\nchar studentGrade = 'B';\n\n// Print variables\ncout << \"Student ID: \" << studentID << \"\\n\";\ncout << \"Student Age: \" << studentAge << \"\\n\";\ncout << \"Student Fee: \" << studentFee << \"\\n\";\ncout << \"Student Grade: \" << studentGrade << \"\\n\";",
        "// Create integer variables\nint length = 4;\nint width = 6;\n\n// Calculate the area of a rectangle\nint area = length * width;\n\n// Print the variables\ncout << \"Length is: \" << length << \"\\n\";\ncout << \"Width is: \" << width << \"\\n\";\ncout << \"Area of the rectangle is: \" << area << \"\\n\";",
        "int",
        "char"
      ]
    },
    {
      "title": "C++ User Input",
      "summary": "C++ User Input\nYou have already learned that cout is used to output (print) values. Now we will use cin to get user input.\ncin is a predefined variable that reads data from the keyboard with the extraction operator (>>).\nIn the following example, the user can input a number, which is stored in the variable x. Then we print the value of x:\nExample\ncout is pronounced \"see-out\". Used for output, and uses the insertion operator (<<)\ncin is pronounced \"see-in\". Used for input, and uses the extraction operator (>>)\nCreating a Simple Calculator\nIn this example, the user must input two numbers. Then we print the sum by calculating (adding) the two numbers:\nExample\nThere you go! You just built a basic calculator!\nComplete <iostream> Reference\nTip: Both cin and cout belongs to the <iostream> library, which is short for standard input / output streams. For a complete reference of <iostream> objects along with detailed information, go to our C++ iostream Reference.",
      "examples": [
        "int x;\ncout << \"Type a number: \"; // Type a number and press enter\ncin >> x; // Get user input from the keyboard\ncout << \"Your number is: \" << x; // Display the input value",
        "int x, y;\nint sum;\ncout << \"Type a number: \";\ncin >> x;\ncout << \"Type another number: \";\ncin >> y;\nsum = x + y;\ncout << \"Sum is: \" << sum;",
        "cout",
        "cin",
        ">>",
        "x",
        "<<",
        "<iostream>"
      ]
    },
    {
      "title": "C++ Data Types",
      "summary": "C++ Data Types\nAs explained in the Variables chapter, a variable in C++ must be a specified data type:\nExample\nBasic Data Types\nThe data type specifies the size and type of information the variable will store:\nYou will learn more about the individual data types in the next chapters.",
      "examples": [
        "int myNum = 5;Â Â Â Â Â Â Â Â Â Â Â Â Â Â  // Integer (whole number)\nfloat myFloatNum = 5.99;Â Â Â Â  // Floating point number\ndouble myDoubleNum = 9.98;Â  Â // Floating point number\nchar myLetter = 'D';Â Â Â Â Â Â Â Â  // Character\nbool myBoolean = true;Â Â Â Â Â Â  // Boolean\nstring myText = \"Hello\";Â Â Â Â  // String",
        "boolean",
        "char",
        "int",
        "float",
        "double"
      ]
    },
    {
      "title": "C++ Numeric Data Types",
      "summary": "Numeric Types\nUse int when you need to store a whole number without decimals, like 35 or 1000, and float or double when you need a floating point number (with decimals), like 9.99 or 3.14515.\nint\nfloat\ndouble\nfloat vs. double\nThe precision of a floating point value indicates how many digits the value can have after the decimal point. The precision of float is only six or seven decimal digits, while double variables have a precision of about 15 digits. Therefore it is safer to use double for most calculations.\nScientific Numbers\nA floating point number can also be a scientific number with an \"e\" to indicate the power of 10:\nExample",
      "examples": [
        "int myNum = 1000;\ncout << myNum;",
        "float myNum = 5.75;\ncout << myNum;",
        "double myNum = 19.99;\ncout << myNum;",
        "float f1 = 35e3;\ndouble d1 = 12E4;\ncout << f1;\ncout << d1;",
        "int",
        "float",
        "double"
      ]
    },
    {
      "title": "C++ Boolean Data Types",
      "summary": "Boolean Types\nA boolean data type is declared with the bool keyword and can only take the values true or false.\nWhen the value is returned, true = 1 and false = 0.\nExample\nBoolean values are mostly used for conditional testing, which you will learn more about in a later chapter.",
      "examples": [
        "bool isCodingFun = true;\nbool isFishTasty = false;\ncout << isCodingFun;Â  // Outputs 1 (true)\ncout << isFishTasty;Â  // Outputs 0 (false)",
        "bool",
        "true",
        "false",
        "1",
        "0"
      ]
    },
    {
      "title": "C++ Character Data Types",
      "summary": "Character Types\nThe char data type is used to store a single character. The character must be surrounded by single quotes, like 'A' or 'c':\nExample\nAlternatively, if you are familiar with ASCII, you can use ASCII values to display certain characters:\nExample\nTip: A list of all ASCII values can be found in our ASCII Table Reference.",
      "examples": [
        "char myGrade = 'B';\ncout << myGrade;",
        "char a = 65, b = 66, c = 67;\ncout << a;\ncout << b;\ncout << c;",
        "char"
      ]
    },
    {
      "title": "C++ String Data Types",
      "summary": "String Types\nThe string type is used to store a sequence of characters (text). This is not a built-in type, but it behaves like one in its most basic usage. String values must be surrounded by double quotes:\nExample\nTo use strings, you must include an additional header file in the source code, the <string> library:\nExample\nYou will learn much more about strings in our C++ Strings Chapter.",
      "examples": [
        "string greeting = \"Hello\";\ncout << greeting;",
        "// Include the string library\n#include <string>\n\n// Create a string variable\nstring greeting = \"Hello\";\n\n// Output string value\ncout << greeting;",
        "string",
        "<string>"
      ]
    },
    {
      "title": "C++ auto",
      "summary": "The auto Keyword\nThe auto keyword automatically detects the type of a variable based on the value you assign to it.\nIt helps you write cleaner code and avoid repeating types, especially for long or complex types.\nFor example: Instead of writing int x = 5;, you can write:\nExample\nStarting in C++11, auto became a powerful way to let the compiler figure out the type based on the value you assign.\nExample with Different Types\nHere's an example showing how auto can be used to create variables of different types, based on the values you assign:\nExample\nImportant Notes\nauto only works when you assign a value at the same time (You can't declare auto x; without assigning a value)\nOnce the type is chosen, it stays the same. See example below:\nNote: In this tutorial, we usually use int, double, and other basic types when the type is simple and easy to see.\nBut for more complex types - like iterators and lambdas, which you will learn more about in a later chapter, we use auto to keep the code cleaner and easier to understand.",
      "examples": [
        "auto x = 5; // x is automatically treated as int",
        "// Creating auto variables\nauto myNum = 5; // int\nauto myFloatNum = 5.99; // float\nauto myDoubleNum = 9.98; // double\nauto myLetter = 'D'; // char\nauto myBoolean = true; // bool\nauto myString = string(\"Hello\"); // std::string",
        "auto x = 5; // x is now an int\nx = 10;Â Â Â Â  //Â OK - still an int\nx = 9.99;Â Â  //Â Error - can't assign a double to an int",
        "auto",
        "int x = 5;",
        "auto x;",
        "int",
        "double"
      ]
    },
    {
      "title": "C++ Data Types Examples",
      "summary": "Real-Life Examples\nHere's a real-life example of using different data types, to calculate and output the total cost of a number of items:\nExample",
      "examples": [
        "// Create variables of different data types\nint items = 50;\ndouble cost_per_item = 9.99;\ndouble total_cost = items * cost_per_item;\nchar currency = '$';\n\n// Print variables\ncout << \"Number of items: \" << items << \"\\n\";\ncout << \"Cost per item: \" << cost_per_item << currency << \"\\n\";\ncout << \"Total cost = \" << total_cost << currency << \"\\n\";"
      ]
    },
    {
      "title": "C++ Operators",
      "summary": "C++ Operators\nOperators are used to perform operations on variables and values.\nIn the example below, we use the + operator to add together two values:\nExample\nAlthough the + operator is often used to add together two values, like in the example above, it can also be used to add together a variable and a value, or a variable and another variable:\nExample\nC++ divides the operators into the following groups:\nArithmetic operators\nAssignment operators\nComparison operators\nLogical operators\nBitwise operators\nArithmetic Operators\nArithmetic operators are used to perform common mathematical operations.",
      "examples": [
        "int x = 100 + 50;",
        "int sum1 = 100 + 50;Â Â Â Â Â Â Â  // 150 (100 + 50)\nint sum2 = sum1 + 250;Â Â Â Â Â  // 400 (150 + 250)\nint sum3 = sum2 + sum2;Â Â Â Â  // 800 (400 + 400)",
        "+"
      ]
    },
    {
      "title": "C++ Assignment Operators",
      "summary": "Assignment Operators\nAssignment operators are used to assign values to variables.\nIn the example below, we use the assignment operator (=) to assign the value 10 to a variable called x:\nExample\nThe addition assignment operator (+=) adds a value to a variable:\nExample\nA list of all assignment operators:",
      "examples": [
        "int x = 10;",
        "int x = 10;\nx += 5;",
        "=",
        "+="
      ]
    },
    {
      "title": "C++ Comparison Operators",
      "summary": "Comparison Operators\nComparison operators are used to compare two values (or variables). This is important in programming, because it helps us to find answers and make decisions.\nThe return value of a comparison is either 1 or 0, which means true (1) or false (0). These values are known as Boolean values, and you will learn more about them in the Booleans and If..Else chapter.\nIn the following example, we use the greater than operator (>) to find out if 5 is greater than 3:\nExample\nA list of all comparison operators:\nYou will learn much more about comparison operators and how to use them in a later chapter.",
      "examples": [
        "int x = 5;\nint y = 3;\ncout << (x > y); // returns 1 (true) because 5 is greater than 3",
        "1",
        "0",
        ">"
      ]
    },
    {
      "title": "C++ Logical Operators",
      "summary": "Logical Operators\nAs with comparison operators, you can also test for true (1) or false (0) values with logical operators.\nLogical operators are used to determine the logic between variables or values:\nYou will learn much more about true and false values in a later chapter.",
      "examples": [
        "1",
        "0"
      ]
    },
    {
      "title": "C++ Strings",
      "summary": "C++ Strings\nStrings are used for storing text/characters.\nFor example, \"Hello World\" is a string.\nA string variable contains a collection of characters surrounded by double quotes:\nExample\nCreate a variable of type string and assign it a value:\nTo use strings, you must include an additional header file in the source code, the <string> library:\nExample",
      "examples": [
        "string greeting = \"Hello\";",
        "// Include the string library\n#include <string>\n\n// Create a string variable\nstring greeting = \"Hello\";",
        "string",
        "<string>"
      ]
    },
    {
      "title": "C++ String Concatenation",
      "summary": "String Concatenation\nThe + operator can be used between strings to add them together to make a new string. This is called concatenation:\nExample\nIn the example above, we added a space after firstName to create a space between John and Doe on output. However, you could also add a space with quotes (\" \" or ' '):\nExample\nAppend\nA string in C++ is actually an object, which contain functions that can perform certain operations on strings. For example, you can also concatenate strings with the append() function:\nExample\nTip: A list of other useful string functions, can be found in our String Functions Reference.",
      "examples": [
        "string firstName = \"John \";\nstring lastName = \"Doe\";\nstring fullName = firstName + lastName;\ncout << fullName;",
        "string firstName = \"John\";\nstring lastName = \"Doe\";\nstring fullName = firstName + \" \" + lastName;\ncout << fullName;",
        "string firstName = \"John \";\nstring lastName = \"Doe\";\nstring fullName = firstName.append(lastName);\ncout << fullName;",
        "+",
        "\" \"",
        "' '",
        "append()"
      ]
    },
    {
      "title": "C++ Numbers and Strings",
      "summary": "Adding Numbers and Strings\nWARNING!\nC++ uses the + operator for both addition and concatenation.\nNumbers are added. Strings are concatenated.\nIf you add two numbers, the result will be a number:\nExample\nIf you add two strings, the result will be a string concatenation:\nExample\nIf you try to add a number to a string, an error occurs:\nExample",
      "examples": [
        "int x = 10;\nint y = 20;\nint z = x + y;Â Â Â Â Â Â // z will be 30 (an integer)",
        "string x = \"10\";\nstring y = \"20\";\nstring z = x + y;Â Â  // z will be 1020 (a string)",
        "string x = \"10\";\nint y = 20;\nstring z = x + y;",
        "+"
      ]
    },
    {
      "title": "C++ String Length",
      "summary": "String Length\nTo get the length of a string, use the length() function:\nExample\nTip: You might see some C++ programs that use the size() function to get the length of a string. This is just an alias of length(). It is completely up to you if you want to use length() or size():\nExample",
      "examples": [
        "string txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\ncout << \"The length of the txt string is: \" << txt.length();",
        "string txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\ncout << \"The length of the txt string is: \" << txt.size();",
        "length()",
        "size()"
      ]
    },
    {
      "title": "C++ Access Strings",
      "summary": "Access Strings\nYou can access the characters in a string by referring to its index number inside square brackets [].\nThis example prints the first character in myString:\nExample\nNote: String indexes start with 0: [0] is the first character. [1] is the second character, etc.\nThis example prints the second character in myString:\nExample\nTo print the last character of a string, you can use the following code:\nExample\nChange String Characters\nTo change the value of a specific character in a string, refer to the index number, and use single quotes:\nExample\nThe at() function\nThe <string> library also has an at() function that can be used to access characters in a string:\nExample\nTip: A list of other useful string functions, can be found in our String Functions Reference.",
      "examples": [
        "string myString = \"Hello\";\ncout << myString[0];\n// Outputs H",
        "string myString = \"Hello\";\ncout << myString[1];\n// Outputs e",
        "string myString = \"Hello\";\ncout << myString[myString.length() - 1];\n// Outputs o",
        "string myString = \"Hello\";\nmyString[0] = 'J';\ncout << myString;\n// Outputs Jello instead of Hello",
        "string myString = \"Hello\";\ncout << myString; // Outputs Hello\n\ncout << myString.at(0);Â  // First character\ncout << myString.at(1);Â  // Second character\ncout << myString.at(myString.length() - 1);Â  // Last character\n\nmyString.at(0) = 'J';\ncout << myString;Â  // Outputs Jello",
        "[]",
        "<string>",
        "at()"
      ]
    },
    {
      "title": "C++ Special Characters",
      "summary": "Strings - Special Characters\nBecause strings must be written within quotes, C++ will misunderstand this string, and generate an error:\nThe solution to avoid this problem, is to use the backslash escape character.\nThe backslash (\\) escape character turns special characters into string characters:\nThe sequence \\\"Â  inserts a double quote in a string:\nExample\nThe sequence \\'Â  inserts a single quote in a string:\nExample\nThe sequence \\\\Â  inserts a single backslash in a string:\nExample\nOther popular escape characters in C++ are:",
      "examples": [
        "string txt = \"We are the so-called \"Vikings\" from the north.\";",
        "string txt = \"We are the so-called \\\"Vikings\\\" from the north.\";",
        "string txt = \"It\\'s alright.\";",
        "string txt = \"The character \\\\ is called backslash.\";",
        "\\",
        "\\\"",
        "\\'",
        "\\\\"
      ]
    },
    {
      "title": "C++ User Input Strings",
      "summary": "User Input Strings\nIt is possible to use the extraction operator >> on cin to store a string entered by a user:\nExample\nHowever, cin considers a space (whitespace, tabs, etc) as a terminating character, which means that it can only store a single word (even if you type many words):\nExample\nFrom the example above, you would expect the program to print \"John Doe\", but it only prints \"John\".\n\nThat's why, when working with strings, we often use the getline() function to read a line of text. It takes cin as the first parameter, and the string variable as second:\nExample",
      "examples": [
        "string firstName;\ncout << \"Type your first name: \";\ncin >> firstName; // get user input from the keyboard\ncout << \"Your name is: \" << firstName;\n\n// Type your first name: John\n// Your name is: John",
        "string fullName;\ncout << \"Type your full name: \";\ncin >> fullName;\ncout << \"Your name is: \" << fullName;\n\n// Type your full name: John Doe\n// Your name is: John",
        "string fullName;\ncout << \"Type your full name: \";\ngetline (cin, fullName);\ncout << \"Your name is: \" << fullName;\n\n// Type your full name: John Doe\n// Your name is: John Doe",
        ">>",
        "cin",
        "getline()"
      ]
    },
    {
      "title": "C++ String Namespace",
      "summary": "Omitting Namespace\nYou might see some C++ programs that run without the standard namespace library. The using namespace std line can be omitted and replaced with the std keyword, followed by the :: operator for string (and cout) objects:\nExample\nIt is up to you if you want to include the standard namespace library or not.\nIn our tutorial, we will continue to include the library.",
      "examples": [
        "#include <iostream>\n#include <string>\n// using namespace std; - Remove this line\n\nint main() {\nstd::string greeting = \"Hello\";\nstd::cout << greeting;\nreturn 0;\n}",
        "using namespace std",
        "std",
        "::",
        "string",
        "cout"
      ]
    },
    {
      "title": "C++ C-Style Strings",
      "summary": "C-Style Strings\nC-style strings are created with the char type instead of string.\nThe name comes from the C language, which, unlike many other programming languages, does not have a string type for easily creating string variables. Instead, you must use the char type and create an array of characters to make a \"string\" in C.\nAs C++ was developed as an extension of C, it continued to support this way of creating strings in C++:\nExample\nNote: It is more convenient to work with the standard string type, rather than C-style strings. However, one reason some users continue to use C-style strings is that they have access to functions from the C standard library.\nA list of all C-style string functions, can be found in our CString Functions Reference.",
      "examples": [
        "string greeting1 = \"Hello\";Â  // Regular String\nchar greeting2[] = \"Hello\";Â  // C-Style String (an array of characters)",
        "char",
        "string"
      ]
    },
    {
      "title": "C++ Math",
      "summary": "C++ Math\nC++ has many functions that allows you to perform mathematical tasks on numbers.\nMax and min\nThe max(x,y) function can be used to find the highest value of x and y:\nExample\nAnd the min(x,y) function can be used to find the lowest value of x and y:\nExample\nC++ <cmath> Library\nOther functions, such as sqrt (square root), round (rounds a number) and log (natural logarithm), can be found in the <cmath> header file:\nExample\nComplete Math Reference\nFor a complete reference of Math functions, go to our C++ Math Reference.",
      "examples": [
        "cout << max(5, 10);",
        "cout << min(5, 10);",
        "// Include the cmath library\n#include <cmath>\n\ncout << sqrt(64);\ncout << round(2.6);\ncout << log(2);",
        "max(x,y)",
        "min(x,y)",
        "sqrt",
        "round",
        "log",
        "<cmath>"
      ]
    },
    {
      "title": "C++ Booleans",
      "summary": "C++ Booleans\nVery often, in programming, you will need a data type that can only have one of two values, like:\nYES / NO\nON / OFF\nTRUE / FALSE\nFor this, C++ has a bool data type, which can take the values true (1) or false (0).\nBoolean Values\nA boolean variable is declared with the bool keyword and can take the values true or false:\nExample\nFrom the example above, you can read that a true value returns 1, and false returns 0.\nHowever, it is more common to return a boolean value by comparing values and variables (see next page).",
      "examples": [
        "bool isCodingFun = true;\nbool isFishTasty = false;\ncout << isCodingFun;Â  // Outputs 1 (true)\ncout << isFishTasty;Â  // Outputs 0 (false)",
        "bool",
        "true",
        "false",
        "1",
        "0"
      ]
    },
    {
      "title": "C++ Boolean Expressions",
      "summary": "Boolean Expression\nA Boolean expression returns a boolean value, which is either 1 (true) or 0 (false).\nThis is useful for building logic and finding answers.\nYou can use a comparison operator, such as the greater than (>) operator, to find out if an expression (or variable) is true or false:\nExample\nOr even easier:\nExample\nIn the examples below, we use the equal to (==) operator to evaluate an expression:\nExample\nExample",
      "examples": [
        "int x = 10;\nint y = 9;\ncout << (x > y); // returns 1 (true), because 10 is higher than 9",
        "cout << (10 > 9); // returns 1 (true), because 10 is higher than 9",
        "int x = 10;\ncout << (x == 10);Â  // returns 1 (true), because the value of x is equal to 10",
        "cout << (10 == 15);Â  // returns 0 (false), because 10 is not equal to 15",
        "1",
        "0",
        ">",
        "=="
      ]
    },
    {
      "title": "C++ Boolean Examples",
      "summary": "Real Life Example\nLet's think of a \"real life example\" where we need to find out if a person is old enough to vote.\nIn the example below, we use the >= comparison operator to find out if the age (25) is greater than OR equal to the voting age limit, which is set to 18:\nExample\nCool, right? An even better approach (since we are on a roll now), would be to wrap the code above in an if...else statement, so we can perform different actions depending on the result:\nExample\nOutput \"Old enough to vote!\" if myAge is greater than or equal to 18. Otherwise output \"Not old enough to vote.\":\nBooleans are the basis for all C++ comparisons and conditions.\nYou will learn more about conditions (if...else) in the next chapter.",
      "examples": [
        "int myAge = 25;\nint votingAge = 18;\n\ncout << (myAge >= votingAge); // returns 1 (true), meaning 25 year olds are allowed to vote!",
        "int myAge = 25;\nint votingAge = 18;\n\nif (myAge >= votingAge) {\ncout << \"Old enough to vote!\";\n} else {\ncout << \"Not old enough to vote.\";\n}\n\n// Outputs: Old enough to vote!",
        ">=",
        "25",
        "18",
        "if...else",
        "myAge"
      ]
    },
    {
      "title": "C++ If ... Else",
      "summary": "C++ Conditions and If Statements\nYou already know that C++ supports familiar comparison conditions from mathematics, such as:\nLess than: a < b\nLess than or equal to: a <= b\nGreater than: a > b\nGreater than or equal to: a >= b\nEqual to a == b\nNot Equal to: a != b\nYou can use these conditions to perform different actions for different decisions.\nC++ has the following conditional statements:\nUse if to specify a block of code to be executed, if a specified condition is true\nUse else to specify a block of code to be executed, if the same condition is false\nUse else if to specify a new condition to test, if the first condition is false\nUse switch to specify many alternative blocks of code to be executed\nThe if Statement\nUse the if statement to specify a block of C++ code to be executed if a condition is true.\nSyntax\nNote that if is in lowercase letters. Uppercase letters (If or IF) will generate an error.\nIn the example below, we test two values to find out if 20 is greater than 18. If the condition is true, print some text:\nExample\nWe can also test variables:\nExample\nIn the example above we use two variables, x and y, to test whether x is greater than y (using the > operator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that \"x is greater than y\".",
      "examples": [
        "if (condition) {\n// block of code to be executed if the condition is true\n}",
        "if (20 > 18) {\ncout << \"20 is greater than 18\";\n}",
        "int x = 20;\nint y = 18;\nif (x > y) {\ncout << \"x is greater than y\";\n}",
        "if",
        "else",
        "else if",
        "switch",
        "true",
        ">"
      ]
    },
    {
      "title": "C++ Else",
      "summary": "The else Statement\nUse the else statement to specify a block of code to be executed if the condition is false.\nSyntax\nExample\nIn the example above, time (20) is greater than 18, so the condition is false. Because of this, we move on to the else condition and print to the screen \"Good evening\". If the time was less than 18, the program would print \"Good day\".",
      "examples": [
        "if (condition) {\n// block of code to be executed if the condition is true\n} else {\n// block of code to be executed if the condition is false\n}",
        "int time = 20;\nif (time < 18) {\ncout << \"Good day.\";\n} else {\ncout << \"Good evening.\";\n}\n// Outputs \"Good evening.\"",
        "else",
        "false"
      ]
    },
    {
      "title": "C++ Else If",
      "summary": "The else if Statement\nUse the else if statement to specify a new condition if the first condition is false.\nSyntax\nExample\nIn the example above, time (22) is greater than 10, so the first condition is false. The next condition, in the else if statement, is also false, so we move on to the else condition since condition1 and condition2 is both false - and print to the screen \"Good evening\".\nHowever, if the time was 14, our program would print \"Good day.\"",
      "examples": [
        "if (condition1) {\n// block of code to be executed if condition1 is true\n} else if (condition2) {\n// block of code to be executed if the condition1 is false and condition2 is true\n} else {\n// block of code to be executed if the condition1 is false and condition2 is false\n}",
        "int time = 22;\nif (time < 10) {\ncout << \"Good morning.\";\n} else if (time < 20) {\ncout << \"Good day.\";\n} else {\ncout << \"Good evening.\";\n}\n// Outputs \"Good evening.\"",
        "else if",
        "false",
        "else"
      ]
    },
    {
      "title": "C++ Short Hand If Else",
      "summary": "Short Hand If...Else (Ternary Operator)\nThere is also a short-hand if else, which is known as the ternary operator because it consists of three operands.\nIt can be used to replace multiple lines of code with a single line, and is often used to replace simple if else statements:\nSyntax\nInstead of writing:\nExample\nYou can simply write:\nExample",
      "examples": [
        "variable = (condition) ? expressionTrue : expressionFalse;",
        "int time = 20;\nif (time < 18) {\ncout << \"Good day.\";\n} else {\ncout << \"Good evening.\";\n}",
        "int time = 20;\nstring result = (time < 18) ? \"Good day.\" : \"Good evening.\";\ncout << result;"
      ]
    },
    {
      "title": "C++ If ... Else Examples",
      "summary": "Real Life Example\nThis example shows how you can use if..else to \"open a door\" if the user enters the correct code:\nExample\nThis example shows how you can use if..else to find out if a number is positive or negative:\nExample\nFind out if a person is old enough to vote:\nExample\nFind out if a number is even or odd:\nExample",
      "examples": [
        "int doorCode = 1337;\n\nif (doorCode == 1337) {\ncout << \"Correct code.\\nThe door is now open.\\n\";\n} else {\ncout << \"Wrong code.\\nThe door remains closed.\\n\";\n}",
        "int myNum = 10; // Is this a positive or negative number?\n\nif (myNum > 0) {\ncout << \"The value is a positive number.\\n\";\n} else if (myNum < 0) {\ncout << \"The value is a negative number.\\n\";\n} else {\ncout << \"The value is 0.\\n\";\n}",
        "int myAge = 25;\nint votingAge = 18;\n\nif (myAge >= votingAge) {\ncout << \"Old enough to vote!\\n\";\n} else {\ncout << \"Not old enough to vote.\\n\";\n}",
        "int myNum = 5;\n\nif (myNum % 2 == 0) {\ncout << myNum << \" is even.\\n\";\n} else {\ncout << myNum << \" is odd.\\n\";\n}",
        "if..else"
      ]
    },
    {
      "title": "C++ Switch",
      "summary": "C++ Switch Statements\nUse the switch statement to select one of many code blocks to be executed.\nSyntax\nThis is how it works:\nThe switch expression is evaluated once\nThe value of the expression is compared with the values of each case\nIf there is a match, the associated block of code is executed\nThe break and default keywords are optional, and will be described later in this chapter\nThe example below uses the weekday number to calculate the weekday name:\nExample\nThe break Keyword\nWhen C++ reaches a break keyword, it breaks out of the switch block.\nThis will stop the execution of more code and case testing inside the block.\nWhen a match is found, and the job is done, it's time for a break. There is no need for more testing.\nA break can save a lot of execution time because it \"ignores\" the execution of all the rest of the code in the switch block.\nREMOVE ADS\nThe default Keyword\nThe default keyword specifies some code to run if there is no case match:\nExample",
      "examples": [
        "switch(expression) {\ncase x:\n// code block\nbreak;\ncase y:\n// code block\nbreak;\ndefault:\n// code block\n}",
        "int day = 4;\nswitch (day) {\ncase 1:\ncout << \"Monday\";\nbreak;\ncase 2:\ncout << \"Tuesday\";\nbreak;\ncase 3:\ncout << \"Wednesday\";\nbreak;\ncase 4:\ncout << \"Thursday\";\nbreak;\ncase 5:\ncout << \"Friday\";\nbreak;\ncase 6:\ncout << \"Saturday\";\nbreak;\ncase 7:\ncout << \"Sunday\";\nbreak;\n}\n// Outputs \"Thursday\" (day 4)",
        "int day = 4;\nswitch (day) {\ncase 6:\ncout << \"Today is Saturday\";\nbreak;\ncase 7:\ncout << \"Today is Sunday\";\nbreak;\ndefault:\ncout << \"Looking forward to the Weekend\";\n}\n// Outputs \"Looking forward to the Weekend\"",
        "switch",
        "case",
        "break",
        "default"
      ]
    },
    {
      "title": "C++ While Loop",
      "summary": "C++ Loops\nLoops can execute a block of code as long as a specified condition is reached.\nLoops are handy because they save time, reduce errors, and they make code more readable.\nC++ While Loop\nThe while loop loops through a block of code as long as a specified condition is true:\nSyntax\nIn the example below, the code in the loop will run, over and over again, as long as a variable (i) is less than 5:\nExample\nNote: Do not forget to increase the variable used in the condition (i++), otherwise the loop will never end!\nDo you wonder why we use the letter i as a variable name? It's a counter variable and a common choice in simple loops because it's short, traditional, and stands for 'index' or 'iterator'.\nCountdown Example\nThis example counts down from 3 to 1 and then displays \"Happy New Year!!\" at the end:\nExample",
      "examples": [
        "while (condition) {\n// code block to be executed\n}",
        "int i = 0;\nwhile (i < 5) {\ncout << i << \"\\n\";\ni++;\n}",
        "int countdown = 3;\n\nwhile (countdown > 0) {\ncout << countdown << \"\\n\";\ncountdown--;\n}\n\ncout << \"Happy New Year!!\\n\";",
        "while",
        "true",
        "i",
        "i++"
      ]
    },
    {
      "title": "C++ Do/While Loop",
      "summary": "The Do/While Loop\nThe do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true. Then it will repeat the loop as long as the condition is true.\nSyntax\nNote: The semicolon ; after the while condition is required!\nDo/While Example\nThe example below uses a do/while loop. The loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested.\nExample\nDo not forget to increase the variable used in the condition (i++), otherwise the loop will never end!\nCondition is False from the Start\nIn the example above, the condition i < 5 was true at the beginning, so the loop executed multiple times. But what if the condition is false right from the start?\nIn the example below, the variable i starts at 10, so the condition i < 5 is false immediately - yet the do/while loop still runs once:\nExample\nSummary\nThe do/while loop always runs at least once, even if the condition is already false. This is different from a regular while loop, which would skip the loop entirely if the condition is false at the start.\nThis behavior makes do/while useful when you want to ensure something happens at least once, like showing a message or asking for user input.\nPractical Example: User Input\nThis example keeps asking the user to enter a positive number. The loop stops when the user enters 0 or a negative number:\nExample",
      "examples": [
        "do {\n// code block to be executed\n}\nwhile (condition);",
        "int i = 0;\ndo {\ncout << i << \"\\n\";\ni++;\n}\nwhile (i < 5);",
        "int i = 10;\ndo {\ncout << \"i is \" << i << \"\\n\";\ni++;\n} while (i < 5);",
        "int number;\ndo {\ncout << \"Enter a positive number: \";\ncin >> number;\n} while (number > 0);",
        "do/while",
        "while",
        ";",
        "i++",
        "i < 5",
        "i",
        "10"
      ]
    },
    {
      "title": "C++ While Loop Examples",
      "summary": "Real Life Example\nTo demonstrate a practical example of the while loop, we have created a simple \"countdown\" program:\nExample\nIn this example, we create a program that only print even numbers between 0 and 10 (inclusive):\nExample\nIn this example we use a while loop to reverse some numbers:\nExample\nTo demonstrate a practical example of the while loop combined with an if else statement, let's say we play a game of Yatzy:\nExample\nIf the loop passes the values ranging from 1 to 5, it prints \"No Yatzy\". Whenever it passes the value 6, it prints \"Yatzy!\".",
      "examples": [
        "int countdown = 3;\n\nwhile (countdown > 0) {\ncout << countdown << \"\\n\";\ncountdown--;\n}\n\ncout << \"Happy New Year!!\\n\";",
        "int i = 0;\n\nwhile (i <= 10) {\ncout << i << \"\\n\";\ni += 2;\n}",
        "// A variable with some specific numbers\nint numbers = 12345;\n\n// A variable to store the reversed number\nint revNumbers = 0;\n\n// Reverse and reorder the numbers\nwhile (numbers) {\n// Get the last number of 'numbers' and add it to 'revNumbers'\nrevNumbers = revNumbers * 10 + numbers % 10;\n// Remove the last number of 'numbers'\nnumbers /= 10;\n}\n\ncout << \"Reversed numbers: \" << revNumbers << \"\\n\";",
        "int dice = 1;\n\nwhile (dice <= 6) {\nif (dice < 6) {\ncout << \"No Yatzy\\n\";\n} else {\ncout << \"Yatzy!\\n\";\n}\ndice = dice + 1;\n}"
      ]
    },
    {
      "title": "C++ For Loop",
      "summary": "C++ For Loop\nWhen you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop:\nSyntax\nStatement 1 is executed (one time) before the execution of the code block.\nStatement 2 defines the condition for executing the code block.\nStatement 3 is executed (every time) after the code block has been executed.\nPrint Numbers\nThe example below will print the numbers 0 to 4:\nExample\nExample explained\nStatement 1 sets a variable before the loop starts: int i = 0\nStatement 2 defines the condition for the loop to run: i < 5. If the condition is true, the loop will start over again, if it is false, the loop will end.\nStatement 3 increases a value each time the code block in the loop has been executed: i++\nPrint Even Numbers\nThis example prints even values between 0 and 10:\nExample\nSum of Numbers\nThis example calculates the sum of numbers from 1 to 5:\nExample\nCountdown\nThis example prints a countdown from 5 to 1:\nExample",
      "examples": [
        "for (statement 1; statement 2; statement 3) {\n// code block to be executed\n}",
        "for (int i = 0; i < 5; i++) {\ncout << i << \"\\n\";\n}",
        "for (int i = 0; i <= 10; i = i + 2) {\ncout << i << \"\\n\";\n}",
        "int sum = 0;\nfor (int i = 1; i <= 5; i++) {\nsum = sum + i;\n}\ncout << \"Sum is \" << sum;",
        "for (int i = 5; i > 0; i--) {\ncout << i << \"\\n\";\n}",
        "for",
        "while",
        "int i = 0",
        "i < 5",
        "i++"
      ]
    },
    {
      "title": "C++ Nested Loops",
      "summary": "Nested Loops\nIt is also possible to place a loop inside another loop. This is called a nested loop.\nThe \"inner loop\" will be executed one time for each iteration of the \"outer loop\":\nExample\nMultiplication Table Example\nThis example uses nested loops to print a simple multiplication table (1 to 3):\nExample\nResult:\nNested loops are useful when working with tables, matrices, or multi-dimensional data structures.",
      "examples": [
        "// Outer loop\nfor (int i = 1; i <= 2; ++i) {\ncout << \"Outer: \" << i << \"\\n\"; // Executes 2 times\n\n// Inner loop\nfor (int j = 1; j <= 3; ++j) {\ncout << \" Inner: \" << j << \"\\n\"; // Executes 6 times (2 * 3)\n}\n}",
        "for (int i = 1; i <= 3; i++) {\nfor (int j = 1; j <= 3; j++) {\ncout << i * j << \" \";\n}\ncout << \"\\n\";\n}",
        "1 2 3\n2 4 6\n3 6 9"
      ]
    },
    {
      "title": "C++ The foreach Loop",
      "summary": "The foreach Loop\nThere is also a \"for-each loop\" (also known as ranged-based for loop), which is used to loop through elements in an array (or other data structures):\nSyntax\nThe following example outputs all elements in an array, using a \"for-each loop\":\nExample\nLoop Through a String\nYou can also use a for-each loop to loop through characters in a string:\nExample\nNote: Don't worry if you don't understand the examples above. You will learn more about arrays in the C++ Arrays chapter.\nGood to know: The for-each loop was introduced in C++ version 11 (2011).",
      "examples": [
        "for (type variableName : arrayName) {\n// code block to be executed\n}",
        "int myNumbers[5] = {10, 20, 30, 40, 50};\nfor (int num : myNumbers) {\ncout << num << \"\\n\";\n}",
        "string word = \"Hello\";\nfor (char c : word) {\ncout << c << \"\\n\";\n}"
      ]
    },
    {
      "title": "C++ For Loop Examples",
      "summary": "Real Life Example\nTo demonstrate a practical example of the for loop, let's create a program that counts to 100 by tens:\nExample\nIn this example, we create a program that only print even numbers between 0 and 10 (inclusive):\nExample\nHere we only print odd numbers:\nExample\nIn this example we print the powers of 2 up to 512:\nExample\nAnd in this example, we create a program that prints the multiplication table for a specified number:\nExample",
      "examples": [
        "for (int i = 0; i <= 100; i += 10) {\ncout << i << \"\\n\";\n}",
        "for (int i = 0; i <= 10; i = i + 2) {\ncout << i << \"\\n\";\n}",
        "for (int i = 1; i <= 10; i = i + 2) {\ncout << i << \"\\n\";\n}",
        "for (int i = 2; i <= 512; i *= 2) {\ncout << i << \"\\n\";\n}",
        "int number = 2;\nint i;\n\n// Print the multiplication table for the number 2\nfor (i = 1; i <= 10; i++) {\ncout << number << \" x \" << i << \" = \" << number * i << \"\\n\";\n}"
      ]
    },
    {
      "title": "C++ Break and Continue",
      "summary": "C++ Break\nYou have already seen the break statement used in an earlier chapter of this tutorial. It was used to \"jump out\" of a switch statement.\nThe break statement can also be used to jump out of a loop.\nThis example jumps out of the loop when i is equal to 4:\nExample\nC++ Continue\nThe continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.\nThis example skips the value of 4:\nExample\nREMOVE ADS\nBreak and Continue in While Loop\nYou can also use break and continue in while loops:\nBreak Example\nContinue Example",
      "examples": [
        "for (int i = 0; i < 10; i++) {\nif (i == 4) {\nbreak;\n}\ncout << i << \"\\n\";\n}",
        "for (int i = 0; i < 10; i++) {\nif (i == 4) {\ncontinue;\n}\ncout << i << \"\\n\";\n}",
        "int i = 0;\nwhile (i < 10) {\ncout << i << \"\\n\";\ni++;\nif (i == 4) {\nbreak;\n}\n}",
        "int i = 0;\nwhile (i < 10) {\nif (i == 4) {\ni++;\ncontinue;\n}\ncout << i << \"\\n\";\ni++;\n}",
        "break",
        "switch",
        "i",
        "continue"
      ]
    },
    {
      "title": "C++ Arrays",
      "summary": "C++ Arrays\nArrays are used to store multiple values in a single variable, instead of declaring separate variables for each value.\nTo declare an array, define the variable type, specify the name of the array followed by square brackets and specify the number of elements it should store:\nWe have now declared a variable that holds an array of four strings. To insert values to it, we can use an array literal - place the values in a comma-separated list, inside curly braces:\nTo create an array of three integers, you could write:\nAccess the Elements of an Array\nYou access an array element by referring to the index number inside square brackets [].\nThis statement accesses the value of the first element in cars:\nExample\nNote: Array indexes start with 0: [0] is the first element. [1] is the second element, etc.\nChange an Array Element\nTo change the value of a specific element, refer to the index number:\nExample",
      "examples": [
        "string cars[4];",
        "string cars[4] = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};",
        "int myNum[3] = {10, 20, 30};",
        "string cars[4] = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncout << cars[0];\n// Outputs Volvo",
        "cars[0] = \"Opel\";",
        "string cars[4] = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncars[0] = \"Opel\";\ncout << cars[0];\n// Now outputs Opel instead of Volvo",
        "[]"
      ]
    },
    {
      "title": "C++ Arrays and Loops",
      "summary": "Loop Through an Array\nYou can loop through the array elements with the for loop.\nThe following example outputs all elements in the cars array:\nExample\nThis example outputs the index of each element together with its value:\nExample\nAnd this example shows how to loop through an array of integers:\nExample\nThe foreach Loop\nThere is also a \"for-each loop\" (introduced in C++ version 11 (2011)), which is used exclusively to loop through elements in an array (and other data structures, like vectors and lists):\nSyntax\nThe following examples output all elements in an array using a \"for-each loop\":\nExample\nLoop through integers:\nExample\nLoop through strings:",
      "examples": [
        "// Create an array of strings\nstring cars[5] = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\", \"Tesla\"};\n\n// Loop through strings\nfor (int i = 0; i < 5; i++) {\ncout << cars[i] << \"\\n\";\n}",
        "string cars[5] = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\", \"Tesla\"};\nfor (int i = 0; i < 5; i++) {\ncout << i << \" = \" << cars[i] << \"\\n\";\n}",
        "int myNumbers[5] = {10, 20, 30, 40, 50};\nfor (int i = 0; i < 5; i++) {\ncout << myNumbers[i] << \"\\n\";\n}",
        "for (type variableName : arrayName) {\n// code block to be executed\n}",
        "// Create an array of integers\nint myNumbers[5] = {10, 20, 30, 40, 50};\n\n// Loop through integers\nfor (int num : myNumbers) {\ncout << num << \"\\n\";\n}",
        "// Create an array of strings\nstring cars[5] = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\", \"Tesla\"};\n\n// Loop through strings\nfor (string car : cars) {\ncout << car << \"\\n\";\n}",
        "for"
      ]
    },
    {
      "title": "C++ Omit Array Size",
      "summary": "Omit Array Size\nIn C++, you don't have to specify the size of the array. The compiler is smart enough to determine the size of the array based on the number of inserted values:\nThe example above is equal to:\nHowever, the last approach is considered as \"good practice\", because it will reduce the chance of errors in your program.\nOmit Elements on Declaration\nIt is also possible to declare an array without specifying the elements on declaration, and add them later:\nExample\nNote: The example above only works when you have specified the size of the array.\nIf you don't specify the array size, an error occurs:\nExample\nFixed Size (Arrays) vs. Dynamic Size (Vectors)\nYou will often hear the terms \"fixed size\" and \"dynamic size\" when discussing arrays in C++.\nThis is because the size of an array in C++ is fixed, meaning you cannot add or remove elements after it is created.\nVectors\nFor operations that require adding and removing array elements, C++ provides vectors, which are resizable arrays.\nThe size of a vector is dynamic, meaning it can grow and shrink as needed.\nVectors are found in the <vector> library, and they come with many useful functions to add, remove and modify elements:\nThis was just an introduction to vectors to let you know that \"resizable arrays\" exist.\nDon't worry if you don't understand the syntax above.\nYou will learn much more about vectors and other data structures in a later chapter.",
      "examples": [
        "string cars[] = {\"Volvo\", \"BMW\", \"Ford\"}; // Three array elements",
        "string cars[3] = {\"Volvo\", \"BMW\", \"Ford\"}; // Also three array elements",
        "string cars[5];\ncars[0] = \"Volvo\";\ncars[1] = \"BMW\";\ncars[2] = \"Ford\";\ncars[3] = \"Mazda\";\ncars[4] = \"Tesla\";",
        "string cars[];Â  // Array size is not specified\ncars[0] = \"Volvo\";\ncars[1] = \"BMW\";\ncars[2] = \"Ford\";\ncars[3] = \"Mazda\";\ncars[4] = \"Tesla\";\n\n// error: array size missing in 'cars'",
        "// An array with 3 elements\nstring cars[3] = {\"Volvo\", \"BMW\", \"Ford\"};\n\n// Trying to add another element (a fourth element) to the cars array will result in an error\ncars[3] = \"Tesla\";",
        "// A vector with 3 elements\nvector<string> cars = {\"Volvo\", \"BMW\", \"Ford\"};\n\n// Adding another element to the vector\ncars.push_back(\"Tesla\");",
        "<vector>"
      ]
    },
    {
      "title": "C++ Array Size",
      "summary": "Get the Size of an Array\nTo get the size of an array, you can use the sizeof() operator:\nExample\nResult:\nWhy did the result show 20 instead of 5, when the array contains 5 elements?\nIt is because the sizeof() operator returns the size of a type in bytes.\nYou learned from the Data Types chapter that an int type is usually 4 bytes, so from the example above, 4 x 5 (4 bytes x 5 elements) = 20 bytes.\nTo find out how many elements an array has, you have to divide the size of the array by the size of the first element in the array:\nExample\nResult:\nLoop Through an Array with sizeof()\nIn the Arrays and Loops Chapter, we wrote the size of the array in the loop condition (i < 5). This is not ideal, since it will only work for arrays of a specified size.\nHowever, by using the sizeof() approach from the example above, we can now make loops that work for arrays of any size, which is more sustainable.\nInstead of writing:\nIt is better to write:\nExample\nNote that, in C++ version 11 (2011), you can also use the \"for-each\" loop, which is even cleaner and simpler:\nExample\nIt is good to know the different ways to loop through an array, since you may encounter them all in different programs.",
      "examples": [
        "int myNumbers[5] = {10, 20, 30, 40, 50};\ncout << sizeof(myNumbers);",
        "int myNumbers[5] = {10, 20, 30, 40, 50};\nint getArrayLength = sizeof(myNumbers) / sizeof(myNumbers[0]);\ncout << getArrayLength;",
        "int myNumbers[5] = {10, 20, 30, 40, 50};\nfor (int i = 0; i < 5; i++) {\ncout << myNumbers[i] << \"\\n\";\n}",
        "int myNumbers[5] = {10, 20, 30, 40, 50};\nfor (int i = 0; i < sizeof(myNumbers) / sizeof(myNumbers[0]); i++) {\ncout << myNumbers[i] << \"\\n\";\n}",
        "int myNumbers[5] = {10, 20, 30, 40, 50};\nfor (int num : myNumbers) {\ncout << num << \"\\n\";\n}",
        "sizeof()",
        "20",
        "5",
        "int",
        "i < 5"
      ]
    },
    {
      "title": "C++ Arrays Real-Life Examples",
      "summary": "Real Life Example\nTo demonstrate a practical example of using arrays, let's create a program that calculates the average of different ages:\nExample\nAnd in this example, we create a program that finds the lowest age among different ages:\nExample",
      "examples": [
        "// An array storing different ages\nint ages[8] = {20, 22, 18, 35, 48, 26, 87, 70};\n\nfloat avg, sum = 0;\nint i;\n\n// Get the length of the array\nint length = sizeof(ages) / sizeof(ages[0]);\n\n// Loop through the elements of the array\nfor (int age : ages) {\nsum += age;\n}\n\n// Calculate the average by dividing the sum by the length\navg = sum / length;\n\n// Print the average\ncout << \"The average age is: \" << avg << \"\\n\";",
        "// An array storing different ages\nint ages[8] = {20, 22, 18, 35, 48, 26, 87, 70};\n\nint i;\n\n// Get the length of the array\nint length = sizeof(ages) / sizeof(ages[0]);\n\n// Create a variable and assign the first array element of ages to it\nint lowestAge = ages[0];\n\n// Loop through the elements of the ages array to find the lowest age\nfor (int age : ages) {\nif (lowestAge > age) {\nlowestAge = age;\n}\n}\n\n// Print the lowest age\ncout << \"The lowest age is: \" << lowestAge << \"\\n\";"
      ]
    },
    {
      "title": "C++ Multi-Dimensional Arrays",
      "summary": "Multi-Dimensional Arrays\nA multi-dimensional array is an array of arrays.\nTo declare a multi-dimensional array, define the variable type, specify the name of the array followed by square brackets which specify how many elements the main array has, followed by another set of square brackets which indicates how many elements the sub-arrays have:\nAs with ordinary arrays, you can insert values with an array literal - a comma-separated list inside curly braces. In a multi-dimensional array, each element in an array literal is another array literal.\nEach set of square brackets in an array declaration adds another dimension to an array. An array like the one above is said to have two dimensions.\nArrays can have any number of dimensions. The more dimensions an array has, the more complex the code becomes. The following array has three dimensions:\nAccess the Elements of a Multi-Dimensional Array\nTo access an element of a multi-dimensional array, specify an index number in each of the array's dimensions.\nThis statement accesses the value of the element in the first row (0) and third column (2) of the letters array.\nExample\nRemember that: Array indexes start with 0: [0] is the first element. [1] is the second element, etc.\nChange Elements in a Multi-Dimensional Array\nTo change the value of an element, refer to the index number of the element in each of the dimensions:\nExample\nREMOVE ADS\nLoop Through a Multi-Dimensional Array\nTo loop through a multi-dimensional array, you need one loop for each of the array's dimensions.\nThe following example outputs all elements in the letters array:\nExample\nThis example shows how to loop through a three-dimensional array:\nExample\nWhy Multi-Dimensional Arrays?\nMulti-dimensional arrays are great at representing grids. This example shows a practical use for them. In the following example we use a multi-dimensional array to represent a small game of Battleship:\nExample",
      "examples": [
        "string letters[2][4];",
        "string letters[2][4] = {\n{ \"A\", \"B\", \"C\", \"D\" },\n{ \"E\", \"F\", \"G\", \"H\" }\n};",
        "string letters[2][2][2] = {\n{\n{ \"A\", \"B\" },\n{ \"C\", \"D\" }\n},\n{\n{ \"E\", \"F\" },\n{ \"G\", \"H\" }\n}\n};",
        "string letters[2][4] = {\n{ \"A\", \"B\", \"C\", \"D\" },\n{ \"E\", \"F\", \"G\", \"H\" }\n};\n\ncout << letters[0][2];Â  // Outputs \"C\"",
        "string letters[2][4] = {\n{ \"A\", \"B\", \"C\", \"D\" },\n{ \"E\", \"F\", \"G\", \"H\" }\n};\nletters[0][0] = \"Z\";\n\ncout << letters[0][0];Â  // Now outputs \"Z\" instead of \"A\"",
        "string letters[2][4] = {\n{ \"A\", \"B\", \"C\", \"D\" },\n{ \"E\", \"F\", \"G\", \"H\" }\n};\n\nfor (int i = 0; i < 2; i++) {\nfor (int j = 0; j < 4; j++) {\ncout << letters[i][j] << \"\\n\";\n}\n}",
        "string letters[2][2][2] = {\n{\n{ \"A\", \"B\" },\n{ \"C\", \"D\" }\n},\n{\n{ \"E\", \"F\" },\n{ \"G\", \"H\" }\n}\n};\n\nfor (int i = 0; i < 2; i++) {\nfor (int j = 0; j < 2; j++) {\nfor (int k = 0; k < 2; k++) {\ncout << letters[i][j][k] << \"\\n\";\n}\n}\n}",
        "// We put \"1\" to indicate there is a ship.\nbool ships[4][4] = {\n{ 0, 1, 1, 0 },\n{ 0, 0, 0, 0 },\n{ 0, 0, 1, 0 },\n{ 0, 0, 1, 0 }\n};\n\n// Keep track of how many hits the player has and how many turns they have played in these variables\nint hits = 0;\nint numberOfTurns = 0;\n\n// Allow the player to keep going until they have hit all four ships\nwhile (hits < 4) {\nint row, column;\n\ncout << \"Selecting coordinates\\n\";\n\n// Ask the player for a row\ncout << \"Choose a row number between 0 and 3: \";\ncin >> row;\n\n// Ask the player for a column\ncout << \"Choose a column number between 0 and 3: \";\ncin >> column;\n\n// Check if a ship exists in those coordinates\nif (ships[row][column]) {\n// If the player hit a ship, remove it by setting the value to zero.\nships[row][column] = 0;\n\n// Increase the hit counter\nhits++;\n\n// Tell the player that they have hit a ship and how many ships are left\ncout << \"Hit! \" << (4-hits) << \" left.\\n\\n\";\n} else {\n// Tell the player that they missed\ncout << \"Miss\\n\\n\";\n}\n\n// Count how many turns the player has taken\nnumberOfTurns++;\n}\n\ncout << \"Victory!\\n\";\ncout << \"You won in \" << numberOfTurns << \" turns\";"
      ]
    },
    {
      "title": "C++ Structures (struct)",
      "summary": "C++ Structures\nStructures (also called structs) are a way to group several related variables into one place.\nEach variable in the structure is known as a member of the structure.\nUnlike an array, a structure can contain many different data types: int, string, bool, etc.\nCreate a Structure\nTo create a structure, use the struct keyword and declare each of its members inside curly braces.\nAfter the declaration, specify the name of the structure variable (myStructure in the example below):\nAccess Structure Members\nTo access members of a structure, use the dot syntax (.):\nExample\nAssign data to members of a structure and print it:\nOne Structure in Multiple Variables\nYou can use a comma (,) to use one structure in many variables:\nThis example shows how to use a structure in two different variables:\nExample\nUse one structure to represent two cars:\nREMOVE ADS\nNamed Structures\nBy giving a name to the structure, you can treat it as a data type. This means that you can create variables with this structure anywhere in the program at any time.\nTo create a named structure, put the name of the structure right after the struct keyword:\nTo declare a variable that uses the structure, use the name of the structure as the data type of the variable:\nNow the structure can be reused anywhere by using car as the data type:\nExample\nUse one structure to represent two cars:\nChallenge Task\nCreate a structure to represent a student. It should have the following members:\nname (string)\nage (int)\ngrade (char)\nThen:\nCreate one variable of the structure.\nAssign values to its members.\nPrint the values to the screen.\nSolution",
      "examples": [
        "struct {Â Â Â Â Â Â Â Â Â Â Â Â  // Structure declaration\nint myNum;Â Â Â Â Â Â Â Â  // Member (int variable)\nstring myString;Â Â  // Member (string variable)\n} myStructure;Â Â Â Â Â Â  // Structure variable",
        "// Create a structure variable called myStructure\nstruct {\nint myNum;\nstring myString;\n} myStructure;\n\n// Assign values to members of myStructure\nmyStructure.myNum = 1;\nmyStructure.myString = \"Hello World!\";\n\n// Print members of myStructure\ncout << myStructure.myNum << \"\\n\";\ncout << myStructure.myString << \"\\n\";",
        "struct {\nint myNum;\nstring myString;\n} myStruct1, myStruct2, myStruct3; // Multiple structure variables separated with commas",
        "struct {\nstring brand;\nstring model;\nint year;\n} myCar1, myCar2; // We can add variables by separating them with a comma here\n\n// Put data into the first structure\nmyCar1.brand = \"BMW\";\nmyCar1.model = \"X5\";\nmyCar1.year = 1999;\n\n// Put data into the second structure\nmyCar2.brand = \"Ford\";\nmyCar2.model = \"Mustang\";\nmyCar2.year = 1969;\n\n// Print the structure members\ncout << myCar1.brand << \" \" << myCar1.model << \" \" << myCar1.year << \"\\n\";\ncout << myCar2.brand << \" \" << myCar2.model << \" \" << myCar2.year << \"\\n\";",
        "struct car {Â  // This structure is now named \"car\"\nstring brand;\nstring model;\nint year;\n};",
        "car myCar1;",
        "// Declare a structure named \"car\"\nstruct car {\nstring brand;\nstring model;\nint year;\n};\n\nint main() {\n// Create a car structure and store it in myCar1;\ncar myCar1;\nmyCar1.brand = \"BMW\";\nmyCar1.model = \"X5\";\nmyCar1.year = 1999;\n\n// Create another car structure and store it in myCar2;\ncar myCar2;\nmyCar2.brand = \"Ford\";\nmyCar2.model = \"Mustang\";\nmyCar2.year = 1969;\n\n// Print the structure members\ncout << myCar1.brand << \" \" << myCar1.model << \" \" << myCar1.year << \"\\n\";\ncout << myCar2.brand << \" \" << myCar2.model << \" \" << myCar2.year << \"\\n\";\n\nreturn 0;\n}",
        "Name: Liam\nAge: 35\nGrade: A",
        "#include <iostream>\n#include <string>\nusing namespace std;\n\nstruct student {\nstring name;\nint age;\nchar grade;\n};\n\nint main() {\nstudent s1;\n\ns1.name = \"John\";\ns1.age = 35;\ns1.grade = 'A';\n\ncout << \"Name: \" << s1.name << \"\\n\";\ncout << \"Age: \" << s1.age << \"\\n\";\ncout << \"Grade: \" << s1.grade << \"\\n\";\n\nreturn 0;\n}",
        "int",
        "string",
        "bool",
        "struct",
        ".",
        ",",
        "car",
        "name",
        "age",
        "grade",
        "char"
      ]
    },
    {
      "title": "C++ Enumeration (enum)",
      "summary": "C++ Enums\nAn enum is a special type that represents a group of constants (unchangeable values).\nTo create an enum, use the enum keyword, followed by the name of the enum, and separate the enum items with a comma:\nNote that the last item does not need a comma.\nIt is not required to use uppercase, but often considered as good practice.\nEnum is short for \"enumerations\", which means \"specifically listed\".\nTo access the enum, you must create a variable of it.\nInside the main() method, specify the enum keyword, followed by the name of the enum (Level) and then the name of the enum variable (myVar in this example):\nNow that you have created an enum variable (myVar), you can assign a value to it.\nThe assigned value must be one of the items inside the enum (LOW, MEDIUM or HIGH):\nBy default, the first item (LOW) has the value 0, the second (MEDIUM) has the value 1, etc.\nIf you now try to print myVar, it will output 1, which represents MEDIUM:\nChange Values\nAs you know, the first item of an enum has the value 0. The second has the value 1, and so on.\nTo make more sense of the values, you can easily change them:\nNote that if you assign a value to one specific item, the next items will update their numbers accordingly:\nEnum in a Switch Statement\nEnums are often used in switch statements to check for corresponding values:\nEnums are used to give names to constants, which makes the code easier to read and maintain.\nUse enums when you have values that you know aren't going to change, like month days, days, colors, deck of cards, etc.",
      "examples": [
        "enum Level {\nLOW,\nMEDIUM,\nHIGH\n};",
        "enum Level myVar;",
        "enum Level myVar = MEDIUM;",
        "int main() {\n// Create an enum variable and assign a value to it\nenum Level myVar = MEDIUM;\n\n// Print the enum variable\ncout << myVar;\n\nreturn 0;\n}",
        "enum Level {\nLOW = 25,\nMEDIUM = 50,\nHIGH = 75\n};",
        "int main() {\nenum Level myVar = MEDIUM;\ncout << myVar;Â  // Now outputs 50\nreturn 0;\n}",
        "enum Level {\nLOW = 5,\nMEDIUM,Â // Now 6\nHIGHÂ // Now 7\n};",
        "enum Level {\nLOW = 1,\nMEDIUM,\nHIGH\n};\n\nint main() {\nenum Level myVar = MEDIUM;\n\nswitch (myVar) {\ncase 1:\ncout << \"Low Level\";\nbreak;\ncase 2:\ncout << \"Medium level\";\nbreak;\ncase 3:\ncout << \"High level\";\nbreak;\n}\nreturn 0;\n}",
        "enum",
        "main()",
        "Level",
        "myVar",
        "LOW",
        "MEDIUM",
        "HIGH",
        "0",
        "1"
      ]
    },
    {
      "title": "C++ References",
      "summary": "Creating References\nA reference variable is an alias for an existing variable. It is created using the & operator:\nNow, you can use either food or meal to refer to the same value:\nExample\nNote: Both food and meal refer to the same memory location. Changing one affects the other.\nUpdating Through References\nIf you change the value of a reference variable, the original variable will also change (and vice versa), because they both refer to the same memory location:\nExample",
      "examples": [
        "string food = \"Pizza\";Â  // food variable\nstring &meal = food;Â Â Â  // reference to food",
        "string food = \"Pizza\";\nstring &meal = food;\n\ncout << food << \"\\n\";Â  // Outputs Pizza\ncout << meal << \"\\n\";Â  // Outputs Pizza",
        "string food = \"Pizza\"; // food variable\nstring &meal = food;Â Â  // reference to food\n\nmeal = \"Burger\"; // changes both meal and food\n\ncout << food << \"\\n\"; // Outputs Burger\ncout << meal << \"\\n\"; // Outputs Burger",
        "&",
        "food",
        "meal"
      ]
    },
    {
      "title": "C++ Memory Address",
      "summary": "Memory Address\nIn the example from the previous page, the & operator was used to create a reference variable. But it can also be used to get the memory address of a variable; which is the location of where the variable is stored on the computer.\nWhen a variable is created in C++, a memory address is assigned to the variable. And when we assign a value to the variable, it is stored in this memory address.\nTo access it, use the & operator, and the result will represent where the variable is stored:\nExample\nNote: The memory address is in hexadecimal form (0x..). Note that you may not get the same result in your program.\nReferences and Pointers (which you will learn about in the next chapter) are important in C++, because they give you the ability to manipulate the data in the computer's memory - which can reduce the code and improve the performance.\nThese two features are one of the things that make C++ stand out from other programming languages, like Python and Java.",
      "examples": [
        "string food = \"Pizza\";\n\ncout << &food; // Outputs 0x6dfed4",
        "&"
      ]
    },
    {
      "title": "C++ Pointers",
      "summary": "Creating Pointers\nYou learned from the previous chapter, that we can get the memory address of a variable by using the & operator:\nExample\nA pointer however, is a variable that stores the memory address as its value.\nA pointer variable points to a data type (like int or string) of the same type, and is created with the * operator. The address of the variable you're working with is assigned to the pointer:\nExample\nCreate a pointer variable with the name ptr, that points to a string variable, by using the asterisk sign * (string* ptr). Note that the type of the pointer has to match the type of the variable you're working with.\nUse the & operator to store the memory address of the variable called food, and assign it to the pointer.\nNow, ptr holds the value of food's memory address.\nTip: There are three ways to declare pointer variables, but the first way is preferred:",
      "examples": [
        "string food = \"Pizza\"; // A food variable of type string\n\ncout << food;Â  // Outputs the value of food (Pizza)\ncout << &food; // Outputs the memory address of food (0x6dfed4)",
        "string food = \"Pizza\";Â  // A food variable of type string\nstring* ptr = &food;Â Â Â  // A pointer variable, with the name ptr, that stores the address of food\n\n// Output the value of food (Pizza)\ncout << food << \"\\n\";\n\n// Output the memory address of food (0x6dfed4)\ncout << &food << \"\\n\";\n\n// Output the memory address of food with the pointer (0x6dfed4)\ncout << ptr << \"\\n\";",
        "string* mystring; // Preferred\nstring *mystring;\nstring * mystring;",
        "&",
        "int",
        "string",
        "*",
        "ptr",
        "string* ptr",
        "food"
      ]
    },
    {
      "title": "C++ Dereference",
      "summary": "Get Memory Address and Value\nIn the example from the previous page, we used the pointer variable to get the memory address of a variable (used together with the & reference operator). However, you can also use the pointer to get the value of the variable, by using the * operator (the dereference operator):\nExample\nNote that the * sign can be confusing here, as it does two different things in our code:\nWhen used in declaration (string* ptr), it creates a pointer variable.\nWhen not used in declaration, it act as a dereference operator.",
      "examples": [
        "string food = \"Pizza\";Â  // Variable declaration\nstring* ptr = &food;Â Â Â  // Pointer declaration\n\n// Reference: Output the memory address of food with the pointer (0x6dfed4)\ncout << ptr << \"\\n\";\n\n// Dereference: Output the value of food with the pointer (Pizza)\ncout << *ptr << \"\\n\";",
        "&",
        "*"
      ]
    },
    {
      "title": "C++ Modify Pointers",
      "summary": "Modify the Pointer Value\nYou can also change the pointer's value. But note that this will also change the value of the original variable:\nExample",
      "examples": [
        "string food = \"Pizza\";\nstring* ptr = &food;\n\n// Output the value of food (Pizza)\ncout << food << \"\\n\";\n\n// Output the memory address of food (0x6dfed4)\ncout << &food << \"\\n\";\n\n// Access the memory address of food and output its value (Pizza)\ncout << *ptr << \"\\n\";\n\n// Change the value of the pointer\n*ptr = \"Hamburger\";\n\n// Output the new value of the pointer (Hamburger)\ncout << *ptr << \"\\n\";\n\n// Output the new value of the food variable (Hamburger)\ncout << food << \"\\n\";"
      ]
    },
    {
      "title": "C++ Memory Management",
      "summary": "Memory Management\nMemory management is the process of controlling how much memory your program uses - and how it is used. This includes creating, using, and releasing memory when it's no longer needed.\nMemory in C++\nWhen you create a variable in C++, the compiler automatically reserves space in memory for it.\nFor example:\nThe line above tells the program: \"I need space to store an integer.\" C++ handles this memory automatically, so in this case, you dont have to worry about managing memory.\nGet Memory Size\nYou can check how much memory a variable type uses with the sizeof operator:\nExample\nKnowing the size of types helps you write more efficient code, especially in larger programs.\nDo You Have to Manage Memory Yourself?\nSometimes yes - and sometimes no.\nFor normal variables (like int x = 10;), C++ takes care of the memory for you.\nBut when you want to create memory manually while the program is running (for example: based on user input), you need to manage it yourself and clean it up when you're done.\nIf your program uses too much memory, or forgets to clean up memory it no longer needs, it can lead to slow performance or even crashes.\nThat's why understanding memory is important. It gives you more control and helps avoid common bugs.\nWhat's Next?\nIn C++, you can use pointers to access and change memory directly.\nThis is powerful, but also risky. If you use a pointer the wrong way, you could accidentally change or damage other parts of your program's memory.\nIn the next chapter, you'll learn how to create memory manually using pointers - with the new keyword, and how to free it using delete.",
      "examples": [
        "int myNumber = 10;",
        "#include <iostream>\nusing namespace std;\n\nint main() {\nint myInt;\nfloat myFloat;\ndouble myDouble;\nchar myChar;\n\ncout << sizeof(myInt) << \"\\n\";Â Â Â Â  // 4 bytes (typically)\ncout << sizeof(myFloat) << \"\\n\";Â Â  // 4 bytes\ncout << sizeof(myDouble) << \"\\n\";Â  // 8 bytes\ncout << sizeof(myChar) << \"\\n\";Â Â Â  // 1 byte\nreturn 0;\n}",
        "sizeof",
        "int x = 10;",
        "new",
        "delete"
      ]
    },
    {
      "title": "C++ new and delete",
      "summary": "The new Keyword\nThe new keyword lets you manage memory yourself.\nIn the example below, we create memory space for an integer using new, store the value 35 in it, and print it using a pointer:\nExample\nExplanation:\nnew int creates memory space for one integer\nptr stores the address of that space\n*ptr = 35; stores the number 35\ncout << *ptr; prints the value\nSo we used new to create memory, and ptr to access it.\nThe delete Keyword\nWhen you create something with new, it's your job to remove it when you're done.\nTo do that, use delete:\nExample\nThis tells C++: \"I'm done with this memory, you can clean it up now.\"\nIf you forget to delete memory, your program will still run, but it may use more and more memory over time.\nThis is called a memory leak, and it can slow down or crash your program over time.\nUsing new and delete with Arrays\nYou can also use the new keyword to create dynamic arrays.\nNote: For arrays, use new[] and delete[]. For single variables, use new and delete.\nDynamic arrays are useful when you don't know the size of the array in advance - like when the size depends on user input or other values that are not known at the start of the program.\nFor example, imagine you run a hotel. Since you don't know how many guests will arrive, you ask the user for the number and create that many rooms - one to store each guest's name:\nExample\nExample Result:\nWhen to Use new\nIn most cases, you don't need to use new. C++ will automatically handle memory for normal variables like:\nBut sometimes, you have to manage memory yourself - especially when:\nYou don't know how much memory you'll need in advance (like how many guests or scores)\nYou want to create memory while the program is running, based on user input\nYou need to store large or flexible amounts of data\nYou want full manual control over memory (e.g., performance-critical code)\nIn those cases, new helps you create memory, and delete helps you clean it up when you're done.\nTip: If you use new, always remember to use delete (or delete[] for arrays) to avoid memory leaks.",
      "examples": [
        "int* ptr = new int;\n*ptr = 35;\ncout << *ptr;",
        "delete ptr;",
        "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\nint numGuests;\ncout << \"How many guests? \";\ncin >> numGuests;\n\n// Check for invalid input\nif (numGuests <= 0) {\ncout << \"Number of guests must be at least 1.\\n\";\nreturn 0;\n}\n\n// Create memory space for x guests (an array of strings)\nstring* guests = new string[numGuests];\n\n// Ignore the leftover newline character after reading numGuests\ncin.ignore();\n\n// Enter guest names\nfor (int i = 0; i < numGuests; i++) {\ncout << \"Enter name for guest \" << (i + 1) << \": \";\ngetline(cin, guests[i]); // Read the full name (including spaces)\n}\n\n// Show all guests\ncout << \"\\nGuests checked in:\\n\";\nfor (int i = 0; i < numGuests; i++) {\ncout << guests[i] << \"\\n\";\n}\n\ndelete[] guests; // Clean up memory\nreturn 0;\n}",
        "int age = 35;\nstring name = \"John\";",
        "new",
        "35",
        "new int",
        "ptr",
        "*ptr = 35;",
        "cout << *ptr;",
        "delete",
        "new[]",
        "delete[]",
        "How many guests? 3\nEnter name for guest 1: John Doe\nEnter name for guest 2: Liam Spurs\nEnter name for guest 3: Jenny Kasp\nGuests checked in:\nJohn Doe\nLiam Spurs\nJenny Kasp"
      ]
    },
    {
      "title": "C++ Functions",
      "summary": "A function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nFunctions are used to perform certain actions, and they are important for reusing code: Define the code once, and use it many times.\nCreate a Function\nC++ provides some pre-defined functions, such as main(), which is used to execute code. But you can also create your own functions to perform certain actions.\nTo create (often referred to as declare) a function, specify the name of the function, followed by parentheses ():\nSyntax\nmyFunction() is the name of the function\nvoid means that the function does not have a return value. You will learn more about return values later in the next chapter\ninside the function (the body), add code that defines what the function should do\nCall a Function\nDeclared functions are not executed immediately. They are \"saved for later use\", and will be executed later, when they are called.\nTo call a function, write the function's name followed by two parentheses () and a semicolon ;\nIn the following example, myFunction() is used to print a text (the action), when it is called:\nExample\nInside main, call myFunction():\nA function can be called multiple times:\nExample\nREMOVE ADS\nFunction Declaration and Definition\nA C++ function consist of two parts:\nDeclaration: the return type, the name of the function, and parameters (if any)\nDefinition: the body of the function (code to be executed)\nNote: If a user-defined function, such as myFunction() is declared after the main() function, an error will occur:\nExample\nHowever, it is possible to separate the declaration and the definition of the function - for code optimization.\nYou will often see C++ programs that have function declaration above main(), and function definition below main(). This will make the code better organized and easier to read:\nExample",
      "examples": [
        "void myFunction() {\n// code to be executed\n}",
        "// Create a function\nvoid myFunction() {\ncout << \"I just got executed!\";\n}\n\nint main() {\nmyFunction(); // call the function\nreturn 0;\n}\n\n// Outputs \"I just got executed!\"",
        "void myFunction() {\ncout << \"I just got executed!\\n\";\n}\n\nint main() {\nmyFunction();\nmyFunction();\nmyFunction();\nreturn 0;\n}\n\n// I just got executed!\n// I just got executed!\n// I just got executed!",
        "void myFunction() { // declaration\n// the body of the function (definition)\n}",
        "int main() {\nmyFunction();\nreturn 0;\n}\n\nvoid myFunction() {\ncout << \"I just got executed!\";\n}\n\n// Error",
        "// Function declaration\nvoid myFunction();\n\n// The main method\nint main() {\nmyFunction();Â  // call the function\nreturn 0;\n}\n\n// Function definition\nvoid myFunction() {\ncout << \"I just got executed!\";\n}",
        "main()",
        "myFunction()",
        "void",
        "()",
        ";",
        "main"
      ]
    },
    {
      "title": "C++ Function Parameters",
      "summary": "Parameters and Arguments\nInformation can be passed to functions as a parameter. Parameters act as variables inside the function.\nParameters are specified after the function name, inside the parentheses. You can add as many parameters as you want, just separate them with a comma:\nSyntax\nThe following example has a function that takes a string called fname as parameter. When the function is called, we pass along a first name, which is used inside the function to print the full name:\nExample\nWhen a parameter is passed to the function, it is called an argument. So, from the example above: fname is a parameter, while Liam, Jenny and Anja are arguments.",
      "examples": [
        "void functionName(parameter1, parameter2, parameter3) {\n// code to be executed\n}",
        "void myFunction(string fname) {\ncout << fname << \" Refsnes\\n\";\n}\n\nint main() {\nmyFunction(\"Liam\");\nmyFunction(\"Jenny\");\nmyFunction(\"Anja\");\nreturn 0;\n}\n\n// Liam Refsnes\n// Jenny Refsnes\n// Anja Refsnes",
        "string",
        "fname",
        "Liam",
        "Jenny",
        "Anja"
      ]
    },
    {
      "title": "C++ Default Parameters",
      "summary": "Default Parameter Value\nYou can also use a default parameter value, by using the equals sign (=).\nIf we call the function without an argument, it uses the default value (\"Norway\"):\nExample\nA parameter with a default value, is often known as an \"optional parameter\". From the example above, country is an optional parameter and \"Norway\" is the default value.",
      "examples": [
        "void myFunction(string country = \"Norway\") {\ncout << country << \"\\n\";\n}\n\nint main() {\nmyFunction(\"Sweden\");\nmyFunction(\"India\");\nmyFunction();\nmyFunction(\"USA\");\nreturn 0;\n}\n\n// Sweden\n// India\n// Norway\n// USA",
        "=",
        "country",
        "\"Norway\""
      ]
    },
    {
      "title": "C++ Multiple Parameters",
      "summary": "Multiple Parameters\nInside the function, you can add as many parameters as you want:\nExample\nNote that when you are working with multiple parameters, the function call must have the same number of arguments as there are parameters, and the arguments must be passed in the same order.",
      "examples": [
        "void myFunction(string fname, int age) {\ncout << fname << \" Refsnes. \" << age << \" years old. \\n\";\n}\n\nint main() {\nmyFunction(\"Liam\", 3);\nmyFunction(\"Jenny\", 14);\nmyFunction(\"Anja\", 30);\nreturn 0;\n}\n\n// Liam Refsnes. 3 years old.\n// Jenny Refsnes. 14 years old.\n// Anja Refsnes. 30 years old."
      ]
    },
    {
      "title": "C++ The Return Keyword",
      "summary": "Return Values\nThe void keyword, used in the previous examples, indicates that the function should not return a value. If you want the function to return a value, you can use a data type (such as int, string, etc.) instead of void, and use the return keyword inside the function:\nExample\nThis example returns the sum of a function with two parameters:\nExample\nYou can also store the result in a variable:\nExample\nPratical Example\nHere is a simple and fun \"game example\" using a function with return to double a number five times:\nExample",
      "examples": [
        "int myFunction(int x) {\nreturn 5 + x;\n}\n\nint main() {\ncout << myFunction(3);\nreturn 0;\n}\n\n// Outputs 8 (5 + 3)",
        "int myFunction(int x, int y) {\nreturn x + y;\n}\n\nint main() {\ncout << myFunction(5, 3);\nreturn 0;\n}\n\n// Outputs 8 (5 + 3)",
        "int myFunction(int x, int y) {\nreturn x + y;\n}\n\nint main() {\nint z = myFunction(5, 3);\ncout << z;\nreturn 0;\n}\n// Outputs 8 (5 + 3)",
        "int doubleGame(int x) {\nreturn x * 2;\n}\n\nint main() {\nfor (int i = 1; i <= 5; i++) {\ncout << \"Double of \" << i << \" is \" << doubleGame(i) << endl;\n}\nreturn 0;\n}",
        "void",
        "int",
        "string",
        "return"
      ]
    },
    {
      "title": "C++ Functions - Pass By Reference",
      "summary": "Pass By Reference\nIn the examples from the previous page, we used normal variables when we passed parameters to a function.\nYou can also pass a reference to the function.\nThis can be useful when you need to change the value of the argument(s):\nExample\nPass an integer by reference:\nExample\nPass two integers by reference:\nExample\nPass a string by reference:",
      "examples": [
        "void changeValue(int &num) {\nnum = 50;\n}\n\nint main() {\nint value = 10;\nchangeValue(value);Â  // Call the function and change the value to 50\ncout << value;\nreturn 0;\n}",
        "void swapNums(int &x, int &y) {\nint z = x;\nx = y;\ny = z;\n}\n\nint main() {\nint firstNum = 10;\nint secondNum = 20;\n\ncout << \"Before swap: \" << \"\\n\";\ncout << firstNum << secondNum << \"\\n\";\n\n// Call the function, which will change the values of firstNum and secondNum\nswapNums(firstNum, secondNum);\n\ncout << \"After swap: \" << \"\\n\";\ncout << firstNum << secondNum << \"\\n\";\n\nreturn 0;\n}",
        "void modifyStr(string &str) {\nstr += \" World!\";\n}\n\nint main() {\nstring greeting = \"Hello\";\nmodifyStr(greeting);\ncout << greeting;\nreturn 0;\n}"
      ]
    },
    {
      "title": "C++ Pass Array to a Function",
      "summary": "Pass Arrays as Function Parameters\nYou can also pass arrays to a function:\nExample\nThe function (myFunction) takes an array as its parameter (int myNumbers[5]), and loops through the array elements with the for loop.\nWhen the function is called inside main(), we pass along the myNumbers array, which outputs the array elements.\nNote that when you call the function, you only need to use the name of the array when passing it as an argument myFunction(myNumbers). However, the full declaration of the array is needed in the function parameter (int myNumbers[5]).",
      "examples": [
        "void myFunction(int myNumbers[5]) {\nfor (int i = 0; i < 5; i++) {\ncout << myNumbers[i] << \"\\n\";\n}\n}\n\nint main() {\nint myNumbers[5] = {10, 20, 30, 40, 50};\nmyFunction(myNumbers);\nreturn 0;\n}",
        "myFunction",
        "int myNumbers[5]",
        "for",
        "main()",
        "myNumbers",
        "myFunction(myNumbers)"
      ]
    },
    {
      "title": "C++ Pass Structures to a Function",
      "summary": "Pass Structure to a Function\nYou can also pass a structure to a function.\nThis is useful when you want to work with grouped data inside a function:\nExample\nNote: Since the structure is passed by value, the function gets a copy of the structure.\nThis means that the original data is not changed.\nPass by Reference\nYou can also pass a structure by reference, using &.\nThis allows the function to modify the original data:\nExample\nTip: Use reference if you want the function to change the structure's data, or to avoid copying large structures.",
      "examples": [
        "struct Car {\nstring brand;\nint year;\n};\n\nvoid myFunction(Car c) {\ncout << \"Brand: \" << c.brand << \", Year: \" << c.year << \"\\n\";\n}\n\nint main() {\nCar myCar = {\"Toyota\", 2020};\nmyFunction(myCar);\nreturn 0;\n}",
        "struct Car {\nstring brand;\nint year;\n};\n\nvoid updateYear(Car& c) {\nc.year++;\n}\n\nint main() {\nCar myCar = {\"Toyota\", 2020};\nupdateYear(myCar);\ncout << \"The \" << myCar.brand << \" is now from year \" << myCar.year << \".\\n\";\nreturn 0;\n}",
        "&"
      ]
    },
    {
      "title": "C++ Function Examples",
      "summary": "Real Life Example\nTo demonstrate a practical example of using functions, let's create a program that converts a value from fahrenheit to celsius:\nExample",
      "examples": [
        "// Function to convert Fahrenheit to Celsius\nfloat toCelsius(float fahrenheit) {\nreturn (5.0 / 9.0) * (fahrenheit - 32.0);\n}\n\nint main() {\n// Set a fahrenheit value\nfloat f_value = 98.8;\n\n// Call the function with the fahrenheit value\nfloat result = toCelsius(f_value);\n\n// Print the fahrenheit value\ncout << \"Fahrenheit: \" << f_value << \"\\n\";\n\n// Print the result\ncout << \"Convert Fahrenheit to Celsius: \" << result << \"\\n\";\n\nreturn 0;\n}"
      ]
    },
    {
      "title": "C++ Function Overloading",
      "summary": "Function Overloading\nFunction overloading allows multiple functions to have the same name, as long as their parameters are different in type or number:\nExample\nThis lets you use the same function name for similar tasks.\nWithout Function Overloading\nConsider the following example, which have two functions that add numbers of different type:\nExample\nProblem: We had to create two different function names for the same logic.\nUsing Function Overloading\nInstead of defining two functions that should do the same thing, it is better to overload one.\nIn the example below, we overload the plusFunc function to work for both int and double:\nExample\nNote: Multiple functions can have the same name as long as the number and/or type of parameters are different.\nFunction Overloading by Number of Parameters\nIn this example, we overload a function by using a different number of parameters:\nExample",
      "examples": [
        "int myFunction(int x)\nfloat myFunction(float x)\ndouble myFunction(double x, double y)",
        "int plusFuncInt(int x, int y) {\nreturn x + y;\n}\n\ndouble plusFuncDouble(double x, double y) {\nreturn x + y;\n}\n\nint main() {\nint myNum1 = plusFuncInt(8, 5);\ndouble myNum2 = plusFuncDouble(4.3, 6.26);\n\ncout << \"Int: \" << myNum1 << \"\\n\";\ncout << \"Double: \" << myNum2;\nreturn 0;\n}",
        "int plusFunc(int x, int y) {\nreturn x + y;\n}\n\ndouble plusFunc(double x, double y) {\nreturn x + y;\n}\n\nint main() {\nint myNum1 = plusFunc(8, 5);\ndouble myNum2 = plusFunc(4.3, 6.26);\n\ncout << \"Int: \" << myNum1 << \"\\n\";\ncout << \"Double: \" << myNum2;\nreturn 0;\n}",
        "int plusFunc(int x, int y) {\nreturn x + y;\n}\n\nint plusFunc(int x, int y, int z) {\nreturn x + y + z;\n}\n\nint main() {\nint result1 = plusFunc(3, 7);\nint result2 = plusFunc(1, 2, 3);\n\ncout << \"Sum of 2 numbers: \" << result1 << \"\\n\";\ncout << \"Sum of 3 numbers: \" << result2;\nreturn 0;\n}",
        "plusFunc",
        "int",
        "double"
      ]
    },
    {
      "title": "C++ Variable Scope",
      "summary": "Now that you understand how functions work, it is important to learn how variables act inside and outside of functions.\nIn C++, variables are only accessible inside the region they are created. This is called scope.\nLocal Scope\nA variable created inside a function belongs to the local scope of that function, and can only be used inside that function:\nExample\nA local variable cannot be used outside the function it belongs to.\nIf you try to access it outside the function, an error occurs:\nExample\nGlobal Scope\nA variable created outside of a function, is called a global variable and belongs to the global scope.\nGlobal variables are available from within any scope, global and local:\nExample\nA variable created outside of a function is global and can therefore be used by anyone:\nNaming Variables\nIf you operate with the same variable name inside and outside of a function, C++ will treat them as two separate variables; One available in the global scope (outside the function) and one available in the local scope (inside the function):\nExample\nThe function will print the local x, and then the code will print the global x:\nHowever, you should avoid using the same variable name for both globally and locally variables as it can lead to errors and confusion.\nIn general, you should be careful with global variables, since they can be accessed and modified from any function:\nExample\nChange the value of x from myFunction:\nConclusion\nTo sum up, use local variables (with good variable names) as much as you can. This will make your code easier to maintain and better to understand. However, you may find global variables when working on existing C++ programs or while collaborating with others. Therefore, it is good to understand how the scope works and how to use it effectively to make sure your code is clear and functional.",
      "examples": [
        "void myFunction() {\n// Local variable that belongs to myFunction\nint x = 5;\n\n// Print the variable x\ncout << x;\n}\n\nint main() {\nmyFunction();\nreturn 0;\n}",
        "void myFunction() {\n// Local variable that belongs to myFunction\nint x = 5;\n}\n\nint main() {\nmyFunction();\n\n// Print the variable x in the main function\ncout << x;\nreturn 0;\n}",
        "// Global variable x\nint x = 5;\n\nvoid myFunction() {\n// We can use x here\ncout << x << \"\\n\";\n}\n\nint main() {\nmyFunction();\n\n// We can also use x here\ncout << x;\nreturn 0;\n}",
        "// Global variable x\nint x = 5;\n\nvoid myFunction() {\n// Local variable with the same name as the global variable (x)\nint x = 22;\ncout << x << \"\\n\"; // Refers to the local variable x\n}\n\nint main() {\nmyFunction();\n\ncout << x; // Refers to the global variable x\nreturn 0;\n}",
        "// Global variable x\nint x = 5;\n\nvoid myFunction() {\ncout << ++x << \"\\n\"; // Increment the value of x by 1 and print it\n}\n\nint main() {\nmyFunction();\n\ncout << x; // Print the global variable x\nreturn 0;\n}\n\n// The value of x is now 6 (no longer 5)",
        "x",
        "myFunction"
      ]
    },
    {
      "title": "C++ Recursion",
      "summary": "Recursion\nRecursion is the technique of making a function call itself.\nThis technique provides a way to break complicated problems down into simple problems which are easier to solve.\nRecursion may be a bit difficult to understand. The best way to figure out how it works is to experiment with it.\nRecursion Example\nAdding two numbers together is easy to do, but adding a range of numbers is more complicated.\nIn the following example, recursion is used to add a range of numbers together by breaking it down into the simple task of adding two numbers:\nExample\nExample Explained\nWhen the sum() function is called, it adds parameter k to the sum of all numbers smaller than k and returns the result. When k becomes 0, the function just returns 0. When running, the program follows these steps:\nSince the function does not call itself when k is 0, the program stops there and returns the result.\nThe developer should be very careful with recursion as it can be quite easy to slip into writing a function which never terminates, or one that uses excess amounts of memory or processor power.\nHowever, when written correctly recursion can be a very efficient and mathematically-elegant approach to programming.\nCountdown\nThis example demonstrates how to use recursion to create a countdown function:\nExample\nThe function calls itself with n - 1 until n becomes 0.\nFactorial of a Number\nThis example uses a recursive function to calculate the factorial of 5:\nFactorial means multiplying a number by every number below it, down to 1 (for example, the factorial of 5 is: 5 * 4 * 3 * 2 * 1 = 120).",
      "examples": [
        "int sum(int k) {\nif (k > 0) {\nreturn k + sum(k - 1);\n} else {\nreturn 0;\n}\n}\n\nint main() {\nint result = sum(10);\ncout << result;\nreturn 0;\n}",
        "void countdown(int n) {\nif (n > 0) {\ncout << n << \" \";\ncountdown(n - 1);\n}\n}\n\nint main() {\ncountdown(5);\n}",
        "int factorial(int n) {\nif (n > 1) {\nreturn n * factorial(n - 1);\n} else {\nreturn 1;\n}\n}\n\nint main() {\ncout << \"Factorial of 5 is \" << factorial(5);\nreturn 0;\n}",
        "sum()",
        "k",
        "n - 1",
        "n",
        "0"
      ]
    },
    {
      "title": "C++ Lambda Functions",
      "summary": "Lambda Functions\nA lambda function is a small, anonymous function you can write directly in your code. It's useful when you need a quick function without naming it or declaring it separately.\nThink of it as a \"mini function on the fly.\"\nSyntax\nDon't worry: We'll explain what [capture] means later. For now, let's just use an empty pair of brackets.\nBasic Lambda Example\nHere, message holds a lambda function that prints a message to the screen:\nExample\nResult:\nLambda with Parameters\nYou can pass values into a lambda just like a regular function:\nResult:\nPassing Lambdas to Functions\nYou can also pass a lambda function as an argument to another function.\nThis is useful when you want to tell a function what to do, not just what data to use.\nIn the example below, we send a small lambda function to another function, which then runs it twice:\nResult:\nNote that you must include the <functional> library for this example to work.\nUsing Lambdas in Loops\nYou can define and use a lambda function inside a loop, which are great for quick actions:\nResult:\nCapture Clause []\nYou can use the [ ] brackets to give a lambda access to variables outside of it.\nThis is called the capture clause.\nIn this example, the lambda captures the variable x by value (a copy):\nResult:\nNote: The lambda uses a copy of x. If you change x after defining the lambda, it won't affect the value inside the lambda.\nNote: You can also use [&] to capture by reference.\nCapture by Reference\nIf you want the lambda to use the latest value of a variable (not just a copy), you can use [&] to capture it by reference.\nThis means the lambda will work with the original variable, not a separate copy:\nResult:\nWhy? The lambda sees the original x variable, so when you change x, the lambda uses the updated value.\nRegular Functions vs Lambda Functions\nBoth regular functions and lambda functions let you group code and run it later, but they are used in slightly different situations.\nYou plan to reuse the function in multiple places\nYou want to give the function a clear, meaningful name\nThe logic is long or complex\nYou only need the function once\nThe code is short and simple\nYou want to pass a quick function into another function\nBoth of these examples do the same thing. They return the sum of two numbers:\nNote: The lambda version is great when you don't need to reuse the function later. It's quick and works well inside blocks or as arguments to other functions.",
      "examples": [
        "[capture] (parameters) { code };",
        "int main() {\nauto message = []() {\ncout << \"Hello World!\\n\";\n};\n\nmessage();\nreturn 0;\n}",
        "#include <iostream>\nusing namespace std;\n\nint main() {\nauto add = [](int a, int b) {\nreturn a + b;\n};\n\ncout << add(3, 4);\nreturn 0;\n}",
        "#include <iostream>\n#include <functional> // Needed for std::function\nusing namespace std;\n\n// A function that takes another function as parameter\nvoid myFunction(function<void()> func) {\nfunc();\nfunc();\n}\n\nint main() {\nauto message = []() {\ncout << \"Hello World!\\n\";\n};\n\nmyFunction(message);\nreturn 0;\n}",
        "#include <iostream>\nusing namespace std;\n\nint main() {\nfor (int i = 1; i <= 3; i++) {\nauto show = [i]() {\ncout << \"Number: \" << i << \"\\n\";\n};\nshow();\n}\nreturn 0;\n}",
        "int main() {\nint x = 10;\nauto show = [x]() {\ncout << x;\n};\n\nshow();\nreturn 0;\n}",
        "int main() {\nint x = 10;\n\nauto show = [&x]() {\ncout << x;\n};\n\nx = 20;Â  // Change x after the lambda is created\n\nshow();\nreturn 0;\n}",
        "int add(int a, int b) {\nreturn a + b;\n}",
        "auto add = [](int a, int b) {\nreturn a + b;\n};",
        "message",
        "Hello World!",
        "7",
        "Hello World!\nHello World!",
        "<functional>",
        "Number: 1\nNumber: 2\nNumber: 3",
        "[ ]",
        "x",
        "10",
        "[&]",
        "20"
      ]
    },
    {
      "title": "C++ OOP",
      "summary": "C++ What is OOP?\nOOP stands for Object-Oriented Programming.\nObject-oriented programming is about creating \"objects\", which can hold data and functions that work on that data.\nAdvantages of OOP\nOOP provides a clear structure to programs\nMakes code easier to maintain, reuse, and debug\nHelps keep your code DRY (Don't Repeat Yourself)\nMakes it possible to create full reusable applications with less code and shorter development time\nTip: The DRY principle means you should avoid writing the same code more than once. Move repeated code into functions or classes and reuse it.\nWhat are Classes and Objects?\nClasses and objects are the two main aspects of object-oriented programming.\nA class defines what an object should look like, and an object is created based on that class. For example:\nWhen you create an object from a class, it inherits all the variables and functions defined inside that class.\nIn the next chapters, you will learn how to:\nDefine a class\nCreate objects\nAccess class members\nAnd much more\nProcedural vs Object-Oriented Programming\nProcedural programming is about writing functions that operate on data.\nObject-oriented programming (OOP) is about creating objects that contain both the data and the functions.\nIn procedural programming, the code is organized around functions.\nIn object-oriented programming, the code is organized around objects.",
      "examples": []
    },
    {
      "title": "C++ Classes and Objects",
      "summary": "C++ Classes/Objects\nC++ is an object-oriented programming language.\nEverything in C++ is associated with classes and objects, along with its attributes and methods. For example: in real life, a car is an object. The car has attributes, such as weight and color, and methods, such as drive and brake.\nAttributes and methods are basically variables and functions that belongs to the class. These are often referred to as \"class members\".\nA class is a user-defined data type that we can use in our program, and it works as an object constructor, or a \"blueprint\" for creating objects.\nCreate a Class\nTo create a class, use the class keyword:\nExample\nCreate a class called \"MyClass\":\nExample explained\nThe class keyword is used to create a class called MyClass.\nThe public keyword is an access specifier, which specifies that members (attributes and methods) of the class are accessible from outside the class. You will learn more about access specifiers later.\nInside the class, there is an integer variable myNum and a string variable myString. When variables are declared within a class, they are called attributes.\nAt last, end the class definition with a semicolon ;.\nCreate an Object\nIn C++, an object is created from a class. We have already created the class named MyClass, so now we can use this to create objects.\nTo create an object of MyClass, specify the class name, followed by the object name.\nTo access the class attributes (myNum and myString), use the dot syntax (.) on the object:\nExample\nCreate an object called \"myObj\" and access the attributes:\nREMOVE ADS\nMultiple Objects\nYou can create multiple objects of one class:\nExample\nChallenge Task\nCreate a class called Book with the following attributes:\ntitle (string)\nauthor (string)\nyear (int)\nThen create two objects of the class and print their attribute values.",
      "examples": [
        "class MyClass {Â  Â Â Â Â  // The class\npublic:Â Â Â Â Â Â Â Â Â Â Â Â  // Access specifier\nint myNum;Â Â Â Â Â Â Â  // Attribute (int variable)\nstring myString;Â  // Attribute (string variable)\n};",
        "class MyClass {Â  Â Â Â Â  // The class\npublic:Â Â Â Â Â Â Â Â Â Â Â Â  // Access specifier\nint myNum;Â Â Â Â Â Â Â  // Attribute (int variable)\nstring myString;Â  // Attribute (string variable)\n};\n\nint main() {\nMyClass myObj;Â  // Create an object of MyClass\n\n// Access attributes and set values\nmyObj.myNum = 15;\nmyObj.myString = \"Some text\";\n\n// Print attribute values\ncout << myObj.myNumÂ << \"\\n\";\ncout << myObj.myString;\nreturn 0;\n}",
        "// Create a Car class with some attributes\nclass Car {\npublic:\nstring brand;\nstring model;\nint year;\n};\n\nint main() {\n// Create an object of Car\nCar carObj1;\ncarObj1.brand = \"BMW\";\ncarObj1.model = \"X5\";\ncarObj1.year = 1999;\n\n// Create another object of Car\nCar carObj2;\ncarObj2.brand = \"Ford\";\ncarObj2.model = \"Mustang\";\ncarObj2.year = 1969;\n\n// Print attribute values\ncout << carObj1.brand << \" \" << carObj1.model << \" \" << carObj1.year << \"\\n\";\ncout << carObj2.brand << \" \" << carObj2.model << \" \" << carObj2.year << \"\\n\";\nreturn 0;\n}",
        "Matilda, Roald Dahl, 1988\nThe Giving Tree, Shel Silverstein, 1964",
        "#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Book {\npublic:\nstring title;\nstring author;\nint year;\n};\n\nint main() {\nBook book1;\nbook1.title = \"Matilda\";\nbook1.author = \"Roald Dahl\";\nbook1.year = 1988;\n\nBook book2;\nbook2.title = \"The Giving Tree\";\nbook2.author = \"Shel Silverstein\";\nbook2.year = 1964;\n\ncout << book1.title << \", \" << book1.author << \", \" << book1.year << \"\\n\";\ncout << book2.title << \", \" << book2.author << \", \" << book2.year;\nreturn 0;\n}",
        "class",
        "MyClass",
        "public",
        "myNum",
        "myString",
        ";",
        ".",
        "myObj",
        "Book",
        "title",
        "string",
        "author",
        "year",
        "int"
      ]
    },
    {
      "title": "C++ Class Methods",
      "summary": "Class Methods\nMethods are functions that belongs to the class.\nThere are two ways to define functions that belongs to a class:\nInside class definition\nOutside class definition\nDefine a Method Inside the Class\nIn the following example, we define a function inside the class, and we name it \"myMethod\".\nNote: You access methods just like you access attributes; by creating an object of the class and using the dot syntax (.):\nInside Example\nDefine a Method Outside the Class\nSometimes it is better to declare the method in the class and define it later (especially in large programs).\nThis is done by specifiying the name of the class, followed the scope resolution :: operator, followed by the name of the function:\nOutside Example\nREMOVE ADS\nParameters\nYou can also pass values to methods just like regular functions:\nExample\nChallenge Task\nCreate a class Dog with a method bark() that prints \"Woof!\".\nThen call that method from main() using an object of the class.",
      "examples": [
        "class MyClass {Â Â Â Â Â Â Â  // The class\npublic:Â Â Â Â Â Â Â Â Â Â Â Â Â  // Access specifier\nvoid myMethod() {Â  // Method/function defined inside the class\ncout << \"Hello World!\";\n}\n};\n\nint main() {\nMyClass myObj;Â Â Â Â  // Create an object of MyClass\nmyObj.myMethod();Â  // Call the method\nreturn 0;\n}",
        "class MyClass {Â Â Â Â Â Â Â  // The class\npublic:Â Â Â Â Â Â Â Â Â Â Â Â Â  // Access specifier\nvoid myMethod();Â Â  // Method/function declaration\n};\n\n// Method/function definition outside the class\nvoid MyClass::myMethod() {\ncout << \"Hello World!\";\n}\n\nint main() {\nMyClass myObj;Â Â Â Â  // Create an object of MyClass\nmyObj.myMethod();Â  // Call the method\nreturn 0;\n}",
        "#include <iostream>\nusing namespace std;\n\nclass Car {\npublic:\nint speed(int maxSpeed);\n};\n\nint Car::speed(int maxSpeed) {\nreturn maxSpeed;\n}\n\nint main() {\nCar myObj; // Create an object of Car\ncout << myObj.speed(200); // Call the method with an argument\nreturn 0;\n}",
        "#include <iostream>\nusing namespace std;\n\nclass Dog {\npublic:\nvoid bark() {\ncout << \"Woof!\";\n}\n};\n\nint main() {\nDog myDog;\nmyDog.bark();\nreturn 0;\n}",
        "myMethod",
        ".",
        "::",
        "Dog",
        "bark()",
        "\"Woof!\"",
        "main()"
      ]
    },
    {
      "title": "C++ Constructors",
      "summary": "Constructors\nA constructor is a special method that is automatically called when an object of a class is created.\nTo create a constructor, use the same name as the class, followed by parentheses ():\nExample\nConstructor Rules\nThe constructor has the same name as the class.\nIt has no return type (not even void).\nIt is usually declared public.\nIt is automatically called when an object is created.\nConstructor with Parameters\nConstructors can also take parameters (just like regular functions), which can be useful for setting initial values for attributes.\nThe following class have brand, model and year attributes, and a constructor with different parameters. Inside the constructor we set the attributes equal to the constructor parameters (brand=x, etc).\nWhen we call the constructor (by creating an object of the class), we pass parameters to the constructor, which will set the value of the corresponding attributes to the same:\nExample\nConstructor Defined Outside the Class\nYou can also define the constructor outside the class using the scope resolution operator ::.\nExample\nWhy Constructors Are Useful\nConstructors run by themselves when you create an object. They set things up so everything is ready right away.\nThink of it like this: When you order a pizza (object), the constructor is the chef who adds the sauce, cheese, and toppings before it gets to you - you don't have to do it yourself!",
      "examples": [
        "class MyClass {Â Â Â Â  // The class\npublic:Â Â Â Â Â Â Â Â Â Â  // Access specifier\nMyClass() {Â Â Â Â  // Constructor\ncout << \"Hello World!\";\n}\n};\n\nint main() {\nMyClass myObj;Â Â Â  // Create an object of MyClass (this will call the constructor)\nreturn 0;\n}",
        "class Car {Â Â Â Â Â Â Â  // The class\npublic:Â Â Â Â Â Â Â Â Â  // Access specifier\nstring brand;Â  // Attribute\nstring model;Â  // Attribute\nint year;Â Â Â Â Â  // Attribute\nCar(string x, string y, int z) { // Constructor with parameters\nbrand = x;\nmodel = y;\nyear = z;\n}\n};\n\nint main() {\n// Create Car objects and call the constructor with different values\nCar carObj1(\"BMW\", \"X5\", 1999);\nCar carObj2(\"Ford\", \"Mustang\", 1969);\n\n// Print values\ncout << carObj1.brand << \" \" << carObj1.model << \" \" << carObj1.year << \"\\n\";\ncout << carObj2.brand << \" \" << carObj2.model << \" \" << carObj2.year << \"\\n\";\nreturn 0;\n}",
        "class Car {Â Â Â Â Â Â Â  // The class\npublic:Â Â Â Â Â Â Â Â Â  // Access specifier\nstring brand;Â  // Attribute\nstring model;Â  // Attribute\nint year;Â Â Â Â Â  // Attribute\nCar(string x, string y, int z); // Constructor declaration\n};\n\n// Constructor definition outside the class\nCar::Car(string x, string y, int z) {\nbrand = x;\nmodel = y;\nyear = z;\n}\n\nint main() {\n// Create Car objects and call the constructor with different values\nCar carObj1(\"BMW\", \"X5\", 1999);\nCar carObj2(\"Ford\", \"Mustang\", 1969);\n\n// Print values\ncout << carObj1.brand << \" \" << carObj1.model << \" \" << carObj1.year << \"\\n\";\ncout << carObj2.brand << \" \" << carObj2.model << \" \" << carObj2.year << \"\\n\";\nreturn 0;\n}",
        "()",
        "void",
        "brand",
        "model",
        "year",
        "brand=x",
        "::"
      ]
    },
    {
      "title": "C++ Constructor Overloading",
      "summary": "Constructor Overloading\nIn C++, you can have more than one constructor in the same class. This is called constructor overloading.\nEach constructor must have a different number or type of parameters, so the compiler knows which one to use when you create an object.\nWhy Use Constructor Overloading?\nTo give flexibility when creating objects\nTo set default or custom values\nTo reduce repetitive code\nExample with Two Constructors\nThis class has two constructors: one without parameters, and one with parameters:\nResult:\nConstructor overloading lets you create objects with custom values.",
      "examples": [
        "class Car {\npublic:\nstring brand;\nstring model;\n\nCar() {\nbrand = \"Unknown\";\nmodel = \"Unknown\";\n}\n\nCar(string b, string m) {\nbrand = b;\nmodel = m;\n}\n};\n\nint main() {\nCar car1;\nCar car2(\"BMW\", \"X5\");\nCar car3(\"Ford\", \"Mustang\");\n\ncout << \"Car1: \" << car1.brand << \" \" << car1.model << \"\\n\";\ncout << \"Car2: \" << car2.brand << \" \" << car2.model << \"\\n\";\ncout << \"Car3: \" << car3.brand << \" \" << car3.model;\nreturn 0;\n}",
        "Car1: Unknown Unknown\nCar2: BMW X5\nCar3: Ford Mustang"
      ]
    },
    {
      "title": "C++ Access Specifiers",
      "summary": "Access Specifiers\nAccess specifiers control how the members (attributes and methods) of a class can be accessed.\nThey help protect data and organize code so that only the right parts can be seen or changed.\nUsing Access Specifiers\nThe public keyword is an access specifier.\nIn the example below, the members are public - which means that they can be accessed and modified from outside the code:\nExample\nHowever, what if we want members to be private and hidden from the outside world?\nIn C++, there are three access specifiers:\npublic - members are accessible from outside the class\nprivate - members cannot be accessed (or viewed) from outside the class\nprotected - members cannot be accessed from outside the class, however, they can be accessed in inherited classes. You will learn more about Inheritance later.\nPrivate\nMembers declared as private cannot be accessed from outside the class.\nIn the following example, we demonstrate the differences between public and private members:\nExample\nIf you try to access a private member, an error occurs:\nNote: It is possible to access private members of a class using a public method inside the same class. See the next chapter (Encapsulation) on how to do this.\nTip: It is considered good practice to declare your class attributes as private (as often as you can). This will reduce the possibility of yourself (or others) to mess up the code. This is also the main ingredient of the Encapsulation concept, which you will learn more about in the next chapter.\nNote: By default, all members of a class are private if you don't specify an access specifier:\nExample\nProtected\nMembers declared as protected cannot be accessed from outside the class, but they can be accessed in child classes.\nYou will learn more about Inheritance in a later chapter.\nReal-Life Example\nPublic: Like the front door of your house - anyone can come in.\nPrivate: Like a locked drawer - only the owner (or trusted friends) can open it.\nProtected: Like a family-only room - children (subclasses) can enter, others cannot.",
      "examples": [
        "class MyClass {Â  // The class\npublic:Â Â Â Â Â Â Â  // Access specifier\n// class members goes here\n};",
        "class MyClass {\npublic:Â Â Â  // Public access specifier\nint x;Â Â  // Public attribute\nprivate:Â Â  // Private access specifier\nint y;Â Â  // Private attribute\n};\n\nint main() {\nMyClass myObj;\nmyObj.x = 25;Â  // Allowed (public)\nmyObj.y = 50;Â  // Not allowed (private)\nreturn 0;\n}",
        "class MyClass {\nint x;Â Â  // Private attribute\nint y;Â Â  // Private attribute\n};",
        "public",
        "private",
        "protected",
        "error: y is private"
      ]
    },
    {
      "title": "C++ Encapsulation",
      "summary": "Encapsulation\nThe meaning of Encapsulation, is to make sure that \"sensitive\" data is hidden from users.\nTo achieve this, you must declare class variables/attributes as private (cannot be accessed from outside the class).\nIf you want others to read or modify the value of a private member, you can provide public get and set methods.\nReal-Life Example\nThink of an employee's salary:\nThe salary is private - the employee can't change it directly\nOnly their manager can update it or share it when appropriate\nEncapsulation works the same way. The data is hidden, and only trusted methods can access or modify it.\nAccess Private Members\nTo access a private attribute, use public \"get\" and \"set\" methods:\nExample\nsalary is private - it cannot be accessed directly\nsetSalary() sets the value\ngetSalary() returns the value\nWe use myObj.setSalary(50000) to assign a value, and myObj.getSalary() to print it.\nWhy Encapsulation?\nIt is considered good practice to declare your class attributes as private (as often as you can). Encapsulation ensures better control of your data, because you (or others) can change one part of the code without affecting other parts\nIncreased security of data",
      "examples": [
        "#include <iostream>\nusing namespace std;\n\nclass Employee {\nprivate:\n// Private attribute\nint salary;\n\npublic:\n// Setter\nvoid setSalary(int s) {\nsalary = s;\n}\n// Getter\nint getSalary() {\nreturn salary;\n}\n};\n\nint main() {\nEmployee myObj;\nmyObj.setSalary(50000);\ncout << myObj.getSalary();\nreturn 0;\n}",
        "private",
        "salary",
        "setSalary()",
        "getSalary()",
        "myObj.setSalary(50000)",
        "myObj.getSalary()"
      ]
    },
    {
      "title": "C++ The Friend Keyword",
      "summary": "C++ Friend Functions\nNormally, private members of a class can only be accessed using public methods like getters and setters. But in some cases, you can use a special function called a friend function to access them directly.\nA friend function is not a member of the class, but it is allowed to access the class's private data:\nExample\nTry it Yourself Â»\nExample Explained\nThe friend function displaySalary() is declared inside the Employee class but defined outside of it.\nEven though displaySalary() is not a member of the class, it can still access the private member salary.\nIn the main() function, we create an Employee object and call the friend function to print its salary.",
      "examples": [
        "class Employee { private: int salary; public: Employee(int s) { salary = s; } // Declare friend function friend void displaySalary(Employee emp); }; void displaySalary(Employee emp) { cout << \"Salary: \" << emp.salary; } int main() { Employee myEmp(50000); displaySalary(myEmp); return 0; }",
        "private",
        "friend",
        "displaySalary()",
        "Employee",
        "salary",
        "main()"
      ]
    },
    {
      "title": "C++ Inheritance",
      "summary": "Inheritance\nInheritance allows one class to reuse attributes and methods from another class. It helps you write cleaner, more efficient code by avoiding duplication.\nWe group the \"inheritance concept\" into two categories:\nderived class (child) - the class that inherits from another class\nbase class (parent) - the class being inherited from\nTo inherit from a class, use the : symbol.\nIn the example below, the Car class (child) inherits the attributes and methods from the Vehicle class (parent):\nExample\n- It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class.",
      "examples": [
        "// Base class\nclass Vehicle {\npublic:\nstring brand = \"Ford\";\nvoid honk() {\ncout << \"Tuut, tuut! \\n\" ;\n}\n};\n\n// Derived class\nclass Car: public Vehicle {\npublic:\nstring model = \"Mustang\";\n};\n\nint main() {\nCar myCar;\nmyCar.honk();\ncout << myCar.brand + \" \" + myCar.model;\nreturn 0;\n}",
        ":",
        "Car",
        "Vehicle"
      ]
    },
    {
      "title": "C++ Multilevel Inheritance",
      "summary": "Multilevel Inheritance\nA class can also be derived from one class, which is already derived from another class.\nIn the following example, MyGrandChild is derived from class MyChild (which is derived from MyClass).\nExample",
      "examples": [
        "// Base class (parent)\nclass MyClass {\npublic:\nvoid myFunction() {\ncout << \"Some content in parent class.\" ;\n}\n};\n\n// Derived class (child)\nclass MyChild: public MyClass {\n};\n\n// Derived class (grandchild)\nclass MyGrandChild: public MyChild {\n};\n\nint main() {\nMyGrandChild myObj;\nmyObj.myFunction();\nreturn 0;\n}",
        "MyGrandChild",
        "MyChild",
        "MyClass"
      ]
    },
    {
      "title": "C++ Multiple Inheritance",
      "summary": "Multiple Inheritance\nA class can also be derived from more than one base class, using a comma-separated list:\nExample",
      "examples": [
        "// Base class\nclass MyClass {\npublic:\nvoid myFunction() {\ncout << \"Some content in parent class.\" ;\n}\n};\n\n// Another base class\nclass MyOtherClass {\npublic:\nvoid myOtherFunction() {\ncout << \"Some content in another class.\" ;\n}\n};\n\n// Derived class\nclass MyChildClass: public MyClass, public MyOtherClass {\n};\n\nint main() {\nMyChildClass myObj;\nmyObj.myFunction();\nmyObj.myOtherFunction();\nreturn 0;\n}"
      ]
    },
    {
      "title": "C++ Inheritance Access",
      "summary": "Access Specifiers\nYou learned from the Access Specifiers chapter that there are three specifiers available in C++.\nUntil now, we have only used public (members of a class are accessible from outside the class) and private (members can only be accessed within the class).\nThe third specifier, protected, is similar to private, but it can also be accessed in the inherited class:\nExample",
      "examples": [
        "// Base class\nclass Employee {\nprotected: // Protected access specifier\nint salary;\n};\n\n// Derived class\nclass Programmer: public Employee {\npublic:\nint bonus;\nvoid setSalary(int s) {\nsalary = s;\n}\nint getSalary() {\nreturn salary;\n}\n};\n\nint main() {\nProgrammer myObj;\nmyObj.setSalary(50000);\nmyObj.bonus = 15000;\ncout << \"Salary: \" << myObj.getSalary() << \"\\n\";\ncout << \"Bonus: \" << myObj.bonus << \"\\n\";\nreturn 0;\n}",
        "public",
        "private",
        "protected"
      ]
    },
    {
      "title": "C++ Polymorphism",
      "summary": "Polymorphism\nPolymorphism means \"many forms\", and it occurs when we have many classes that are related to each other by inheritance.\nLike we specified in the previous chapter; Inheritance lets us inherit attributes and methods from another class. Polymorphism uses those methods to perform different tasks. This allows us to perform a single action in different ways.\nFor example, imagine a base class Animal with a method called makeSound(). Derived classes of Animals could be Pigs, Cats, Dogs, Birds, etc. Every animal can \"make a sound\", but each one sounds different:\nPig: wee wee\nDog: bow wow\nBird: tweet tweet\nThis is polymorphism - the same action (making a sound) behaves differently for each animal:\nExample\nRemember from the Inheritance chapter that we use the : symbol to inherit from a class.\nNow we can create Pig and Dog objects and override the animalSound() method:\nExample\n- It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class.",
      "examples": [
        "// Base class\nclass Animal {\npublic:\nvoid animalSound() {\ncout << \"The animal makes a sound \\n\";\n}\n};\n\n// Derived class\nclass Pig : public Animal {\npublic:\nvoid animalSound() {\ncout << \"The pig says: wee wee \\n\";\n}\n};\n\n// Derived class\nclass Dog : public Animal {\npublic:\nvoid animalSound() {\ncout << \"The dog says: bow wow \\n\";\n}\n};",
        "// Base class\nclass Animal {\npublic:\nvoid animalSound() {\ncout << \"The animal makes a sound \\n\";\n}\n};\n\n// Derived class\nclass Pig : public Animal {\npublic:\nvoid animalSound() {\ncout << \"The pig says: wee wee \\n\";\n}\n};\n\n// Derived class\nclass Dog : public Animal {\npublic:\nvoid animalSound() {\ncout << \"The dog says: bow wow \\n\";\n}\n};\n\nint main() {\nAnimal myAnimal;\nPig myPig;\nDog myDog;\n\nmyAnimal.animalSound();\nmyPig.animalSound();\nmyDog.animalSound();\nreturn 0;\n}",
        "makeSound()",
        ":",
        "Pig",
        "Dog",
        "animalSound()"
      ]
    },
    {
      "title": "C++ Virtual Functions",
      "summary": "C++ Virtual Functions\nA virtual function is a member function in the base class that can be overridden in derived classes.\nVirtual functions are a key part of polymorphism in C++. They let different objects respond differently to the same function call.\nWhy Use Virtual Functions?\nWithout virtual, C++ decides which function to call based on the pointer type, not the actual object type.\nWith virtual, it checks the actual object the pointer is pointing to.\nOr to put it even more simply:\nWithout virtual: the base function runs, even if the object is from a child class.\nWith virtual: the child's version runs, like you expect.\nWithout Virtual Function\nExample (No virtual keyword)\nEven though a points to a Dog, it still calls Animal::sound() because the function is not virtual.\nWith Virtual Function\nExample (With virtual keyword)\nNow it works! Because sound() is virtual, the call uses the actual object's function and not just the pointer type.\nUse virtual only in the base class\nUse override (optional, but recommended) in the derived class for clarity\nThe -> Operator in C++\nYou might be wondering why we used -> in the examples above.\nThe -> operator is used to access members (like functions or variables) through a pointer.\nIt's a shortcut for writing (*pointer).member:\nTip: If you are using a pointer to an object, use -> to access its members.",
      "examples": [
        "class Animal {\npublic:\nvoid sound() {\ncout << \"Animal sound\\n\";\n}\n};\n\nclass Dog : public Animal {\npublic:\nvoid sound() {\ncout << \"Dog barks\\n\";\n}\n};\n\nint main() {\nAnimal* a;Â  // Declare a pointer to the base class (Animal)\nDog d;Â  // Create an object of the derived class (Dog)\na = &d;Â  // Point the base class pointer to the Dog object\na->sound(); // Call the sound() function using the pointer. Since sound() is not virtual, this calls Animal's version\nreturn 0;\n}",
        "class Animal {\npublic:\nvirtual void sound() {\ncout << \"Animal sound\\n\";\n}\n};\n\nclass Dog : public Animal {\npublic:\nvoid sound() override {\ncout << \"Dog barks\\n\";\n}\n};\n\nint main() {\nAnimal* a;\nDog d;\na = &d;\na->sound(); // Outputs: Dog barks\nreturn 0;\n}",
        "Animal* a = new Animal();\na->sound(); // Same as (*a).sound();",
        "virtual",
        "a",
        "Dog",
        "Animal::sound()",
        "sound()",
        "override",
        "->",
        "(*pointer).member"
      ]
    },
    {
      "title": "C++ Templates",
      "summary": "C++ Templates\nTemplates let you write a function or class that works with different data types.\nThey help avoid repeating code and make programs more flexible.\nC++ Function Templates\nYou can create a function template by using the template keyword:\nSyntax\nT is a placeholder for a data type (like int, float, etc.).\nYou can use any name instead of T, but T is common.\nExample\nIn the example above, add<int>(5, 3) tells the compiler to use int for T, while add<double>(2.5, 1.5) tells it to use double.\nC++ Class Templates\nYou can also use templates to make classes that work with any data type:\nSyntax\nThe example below defines a template class Box that can store and display a value of any data type, and then creates one box for an int and one for a string:\nExample\nAnd this example defines a template class Pair that stores two values of different types and displays them, then creates one pair for a person's name and age, and another for an ID and score:\nExample\nWhy Use Templates?\nTemplates let you:\nAvoid repeating the same logic for different types\nWrite cleaner, reusable code\nSupport generic programming\nNote: Templates must be defined in the same file where they are used (usually in the .h file).",
      "examples": [
        "template <typename T> return_type function_name(T parameter) { // code }",
        "template <typename T> class ClassName { // members and methods using T };",
        "template <typename T>\nT add(T a, T b) {\nreturn a + b;\n}\n\nint main() {\ncout << add<int>(5, 3) << \"\\n\";\ncout << add<double>(2.5, 1.5) << \"\\n\";\nreturn 0;\n}",
        "template <typename T>\nclass Box {\npublic:\nT value;\nBox(T v) {\nvalue = v;\n}\nvoid show() {\ncout << \"Value: \" << value << \"\\n\";\n}\n};\n\nint main() {\nBox<int> intBox(50);\nBox<string> strBox(\"Hello\");\n\nintBox.show();\nstrBox.show();\nreturn 0;\n}",
        "template <typename T1, typename T2>\nclass Pair {\npublic:\nT1 first;\nT2 second;\n\nPair(T1 a, T2 b) {\nfirst = a;\nsecond = b;\n}\n\nvoid display() {\ncout << \"First: \" << first << \", Second: \" << second << \"\\n\";\n}\n};\n\nint main() {\nPair<string, int> person(\"John\", 30);\nPair<int, double> score(51, 9.5);\n\nperson.display();\nscore.display();\n\nreturn 0;\n}",
        "template",
        "T",
        "int",
        "float",
        "add<int>(5, 3)",
        "add<double>(2.5, 1.5)",
        "double",
        "Box",
        "string",
        "Pair",
        ".h"
      ]
    },
    {
      "title": "C++ Files",
      "summary": "C++ Files\nThe fstream library allows us to work with files.\nTo use the fstream library, include both the standard <iostream> AND the <fstream> header file:\nExample\nThere are three classes included in the fstream library, which are used to create, write or read files:\nCreate and Write To a File\nTo create a file, use either the ofstream or fstream class, and specify the name of the file.\nTo write to the file, use the insertion operator (<<).\nExample\nIt is considered good practice, and it can clean up unnecessary memory space.\nREMOVE ADS\nRead a File\nTo read from a file, use either the ifstream or fstream class, and the name of the file.\nNote that we also use a while loop together with the getline() function (which belongs to the ifstream class) to read the file line by line, and to print the content of the file:\nExample\nComplete <fstream> Reference\nFor a complete reference of <fstream> classes and functions, go to our C++ fstream Reference.",
      "examples": [
        "#include <iostream>\n#include <fstream>",
        "#include <iostream>\n#include <fstream>\nusing namespace std;\n\nint main() {\n// Create and open a text file\nofstream MyFile(\"filename.txt\");\n\n// Write to the file\nMyFile << \"Files can be tricky, but it is fun enough!\";\n\n// Close the file\nMyFile.close();\n}",
        "// Create a text string, which is used to output the text file\nstring myText;\n\n// Read from the text file\nifstream MyReadFile(\"filename.txt\");\n\n// Use a while loop together with the getline() function to read the file line by line\nwhile (getline (MyReadFile, myText)) {\n// Output the text from the file\ncout << myText;\n}\n\n// Close the file\nMyReadFile.close();",
        "fstream",
        "<iostream>",
        "<fstream>",
        "ofstream",
        "ifstream",
        "<<",
        "while",
        "getline()"
      ]
    },
    {
      "title": "C++ Date and Time",
      "summary": "Date and Time\nThe <ctime> library allows us to work with dates and times.\nTo use it, you must import the <ctime> header file:\nExample\nDisplay Current Date and Time\nThe <ctime> library has a variety of functions to measure dates and times.\nThe time() function gives us a timestamp representing the current date and time. We can use the ctime() function to show the date and time that a timestamp represents:\nExample\nDisplay the current date:\nTwo ways to use the time() function\nThe time() function writes a timestamp to the memory location given by the parameter, but it also returns the timestamp's value.\nAn alternative way to use the time() function is to pass in a NULL pointer and use the return value instead.\nData Types\nThere are two different data types used to store the date and time: time_t for timestamps and struct tm for datetime structures.\nTimestamps represent a moment in time as a single number, which makes it easier for the computer to do calculations.\nDatetime structures are structures that represent different components of the date and time as members. This makes it easier for us to specify dates. Datetime structures have the following members:\ntm_sec - The seconds within a minute\ntm_min - The minutes within an hour\ntm_hour - The hour within a day (from 0 to 23)\ntm_mday - The day of the month\ntm_mon - The month (from 0 to 11 starting with January)\ntm_year - The number of years since 1900\ntm_wday - The weekday (from 0 to 6 starting with Sunday)\ntm_yday - The day of the year (from 0 to 365 with 0 being January 1)\ntm_isdst - Positive when daylight saving time is in effect, zero when not in effect and negative when unknown\nAlways keep in mind the way that date components are represented:\nHours are represented in 24-hour format. 11pm would be represented as 23.\nThe months go from 0 to 11. For example, December would be represented as 11 rather than 12.\nYears are represented relative to the year 1900. The year 2024 would be represented as 124 because 124 years have passed since 1900.\nCreating Timestamps\nThe time() function can only create a timestamp for the current date, but we can create a timestamp for any date by using the mktime() function.\nThe mktime() function converts a datetime structure into a timestamp.\nExample\nCreate a timestamp using the mktime() function:\nNote: The mktime() function needs these members to have a value: tm_year, tm_mon, tm_mday, tm_hour, tm_min, tm_sec and tm_isdst.\nCreating Datetime Structures\nThe mktime() function also fills in the tm_wday and tm_yday members of the datetime structure with the correct values, which completes the structure and gives a valid datetime. It can be used, for example, to find the weekday of a given date:\nExample\nFind the weekday of a specified date:\nThe localtime() and gmtime() functions can convert timestamps into datetime structures.\nThe localtime() function returns a pointer to a structure representing the time in the computer's time zone.\nThe gmtime() function returns a pointer to a structure representing the time in the GMT time zone.\nThese functions return a pointer to a datetime structure. If we want to make sure its value does not change unexpectedly we should make a copy of it by dereferencing the pointer. To learn about dereferencing, see the C++ Dereference tutorial.\nExample\nGet a datetime structure and output the current hour:\nREMOVE ADS\nDisplay Dates\nSo far we have been using the ctime() function to display the date contained in a timestamp. To display dates from a datetime structure we can use the asctime() function.\nExample\nDisplay the date represented by a datetime structure:\nNote: The asctime() function does not correct invalid dates. For example, if you set the day of the month to 32 it will display 32. The mktime() function can correct these kinds of errors:\nExample\nCorrect a date before displaying it:\nThe ctime() and asctime() functions allow us to display the date but they do not allow us to choose how it is displayed.\nTo choose how a date is displayed we can use the strftime() function.\nExample\nRepresent the current date in different ways:\nThe strftime() function formats a date and writes it as a C-style string into a char array. It has four parameters:\nThe first parameter points to the char array where the formatted date will be written.\nThe second parameter specifies the space available in the array.\nThe third parameter allows us to choose how the date is formatted using format specifiers.\nThe last parameter is a pointer to the datetime structure which contains the date we want to display.\nThe following table has some useful format specifiers. For a more complete list, look at the strftime() reference page.\nMeasuring Time\nThere are two different functions that can be used to measure differences in time.\nThe difftime() function measures the number of seconds that passed between two different time stamps. This is useful when measuring time differences between dates.\nExample\nMeasure the time difference between two timestamps\nThe clock() function is useful for measuring short intervals of time while the program is running. It is more precise than the difftime() function.\nEach call to the clock function returns a special kind of timestamp measured in clocks (a unit of time that depends on how the library was implemented) which has a data type clock_t. To measure a time difference, store a timestamp at two different moments in time and then subtract them. The time difference is measured in clocks, but you can convert it into seconds by dividing it by the CLOCKS_PER_SEC constant.\nExample\nMeasure how long it takes for the program to run:\nNote: Make sure to cast the value to a float or double type before dividing, otherwise it may result in an integer division which would cause the decimal part to be cut off.\nComplete <ctime> Reference\nFor a complete reference of <ctime> functions, go to our C++ ctime Reference.",
      "examples": [
        "#include <ctime> // Import the ctime library",
        "// Get the timestamp for the current date and time time_t timestamp; time(&timestamp); // Display the date and time represented by the timestamp cout << ctime(&timestamp);",
        "time_t timestamp = time(NULL);",
        "struct tm datetime; time_t timestamp; datetime.tm_year = 2023 - 1900; // Number of years since 1900 datetime.tm_mon = 12 - 1; // Number of months since January datetime.tm_mday = 17; datetime.tm_hour = 12; datetime.tm_min = 30; datetime.tm_sec = 1; // Daylight Savings must be specified // -1 uses the computer's timezone setting datetime.tm_isdst = -1; timestamp = mktime(&datetime); cout << ctime(&timestamp);",
        "// Create the datetime structure and use mktime to fill in the missing members struct tm datetime; datetime.tm_year = 2023 - 1900; // Number of years since 1900 datetime.tm_mon = 12 - 1; // Number of months since January datetime.tm_mday = 17; datetime.tm_hour = 0; datetime.tm_min = 0; datetime.tm_sec = 0; datetime.tm_isdst = -1; mktime(&datetime); string weekdays[] = {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"}; cout << \"The date is on a \" << weekdays[datetime.tm_wday];",
        "time_t timestamp = time(&timestamp); struct tm datetime = *localtime(&timestamp); cout << datetime.tm_hour;",
        "time_t timestamp = time(NULL); struct tm datetime = *localtime(&timestamp); cout << asctime(&datetime);",
        "// Create the datetime structure and use mktime to correct mistakes struct tm datetime; datetime.tm_year = 2022 - 1900; // Number of years since 1900 datetime.tm_mon = 0; // 0 is January datetime.tm_mday = 32; datetime.tm_hour = 0; datetime.tm_min = 0; datetime.tm_sec = 0; datetime.tm_isdst = -1; mktime(&datetime); cout << asctime(&datetime);",
        "time_t timestamp = time(NULL); struct tm datetime = *localtime(&timestamp); char output[50]; strftime(output, 50, \"%B %e, %Y\", &datetime); cout << output << \"\\n\"; strftime(output, 50, \"%I:%M:%S %p\", &datetime); cout << output << \"\\n\"; strftime(output, 50, \"%m/%d/%y\", &datetime); cout << output << \"\\n\"; strftime(output, 50, \"%a %b %e %H:%M:%S %Y\", &datetime); cout << output << \"\\n\";",
        "time_t now; time_t nextyear; struct tm datetime; now = time(NULL); datetime = *localtime(&now); datetime.tm_year = datetime.tm_year + 1; datetime.tm_mon = 0; datetime.tm_mday = 1; datetime.tm_hour = 0; datetime.tm_min = 0; datetime.tm_sec = 0; datetime.tm_isdst = -1; nextyear = mktime(&datetime); int diff = difftime(nextyear, now); cout << diff << \" seconds until next year\";",
        "clock_t before = clock(); int k = 0; for(int i = 0; i < 100000; i++) { k += i; } clock_t duration = clock() - before; cout << \"Duration: \" << (float)duration / CLOCKS_PER_SEC << \" seconds\";",
        "<ctime>",
        "time()",
        "ctime()",
        "time_t",
        "struct tm",
        "tm_sec",
        "tm_min",
        "tm_hour",
        "tm_mday",
        "tm_mon",
        "tm_year",
        "tm_wday",
        "tm_yday",
        "tm_isdst",
        "mktime()",
        "localtime()",
        "gmtime()",
        "asctime()",
        "strftime()",
        "char",
        "%a",
        "Fri",
        "%b",
        "Dec",
        "%B",
        "December",
        "%d",
        "09",
        "%e",
        "9",
        "%H",
        "14",
        "%I",
        "02",
        "%M",
        "30",
        "%p",
        "PM",
        "%S",
        "01",
        "%y",
        "23",
        "%Y",
        "2023",
        "difftime()",
        "clock()",
        "clock_t",
        "CLOCKS_PER_SEC",
        "float",
        "double"
      ]
    },
    {
      "title": "C++ Errors",
      "summary": "Errors\nEven experienced C++ developers make mistakes. The key is learning how to spot and fix them!\nThese pages cover common errors and helpful debugging tips to help you understand what's going wrong and how to fix it.\nCommon Compile-Time Errors\nCompile-time errors are mistakes that prevent your program from compiling.\n1) Missing semicolon:\nResult:\n2) Using undeclared variables:\nResult:\n3) Mismatched types (e.g. trying to assign a string to an int):\nResult:\nCommon Runtime Errors\nRuntime errors occur when the program compiles but crashes or behaves unexpectedly.\n1) Dividing by zero:\n2) Accessing out-of-bounds array elements:\n3) Using deleted memory (dangling pointer):\nGood Habits to Avoid Errors\nAlways initialize your variables\nUse meaningful variable names\nKeep your code clean and use indentation to stay organized\nKeep functions short and focused\nCheck if loops or conditions are running as expected\nRead error messages carefully - they often tell you exactly where the problem is\nIn the next chapter, you will learn how to debug your code - how to find and fix bugs/errors in your program.",
      "examples": [
        "int x = 5",
        "cout << myVar;",
        "int x = \"Hello\";",
        "int a = 10;\nint b = 0;\nint result = a / b;Â  // not possible\ncout << result;",
        "int numbers[3] = {1, 2, 3};\ncout << numbers[8];Â  // element does not exist",
        "int* ptr = new int(10);\ndelete ptr;\ncout << *ptr;Â  // invalid",
        "error: expected ',' or ';' before 'cout'",
        "error: 'myVar' was not declared in this scope",
        "string",
        "int",
        "error: invalid conversion from 'const char*' to 'int'"
      ]
    },
    {
      "title": "C++ Debugging",
      "summary": "Debugging\nDebugging is the process of finding and fixing errors (bugs) in your program.\nBugs are mistakes that make your program crash, behave incorrectly, or give the wrong output.\nBefore you start debugging, make sure your code is clean and organized:\nUse proper indentation to keep the structure clear.\nGive your variables clear, meaningful names that describe what they store.\nClean code is easier to read - and easier to debug!\nIn the sections below, we'll introduce several common debugging techniques.\n1. Print Debugging\nUse cout to print values at different points in your code to see what's going wrong:\nIf you don't see \"After division\", the program crashed at x / y.\n2. Check Variable Values\nPrint variables to see if they are what you expect:\nExpected 15? That means the logic is wrong: try using x + y instead.\n3. Use a Debugger Tool\nIDEs like Visual Studio, Code::Blocks, and VS Code have debuggers that let you:\nPause your program (breakpoints)\nStep through code line by line\nWatch variables and find unexpected values\nTip: Start with \"1. Print Debugging\". Use IDE tools as you get more comfortable.\n4. Learn from Error Messages\nThe C++ compiler and runtime errors often tell you what went wrong and where. For example:\nEasy solution: Fix the missing semicolon!\nException Handling\nWhile debugging is about finding and fixing errors in your code, exception handling is a way to deal with errors while the program is running - and run specific code when something goes wrong.\nLearn about Exception Handling in the next chapter.",
      "examples": [
        "int x = 10;\nint y = 0;\ncout << \"Before division\\n\"; // Debug output\nint z = x / y; // Crashes!\ncout << \"After division\\n\"; // Never runs",
        "int x = 10;\nint y = 5;\nint result = x - y;\ncout << \"Result: \" << result << \"\\n\"; // Result: 5",
        "cout",
        "x / y",
        "x + y",
        "error: expected ';' before 'return'"
      ]
    },
    {
      "title": "C++ Exceptions",
      "summary": "Exceptions\nAs mentioned in the C++ Errors chapter, different types of errors can occur while running a program - such as coding mistakes, invalid input, or unexpected situations.\nWhen an error occurs, C++ will normally stop and generate an error message. The technical term for this is: C++ will throw an exception (throw an error).\nException Handling (try and catch)\nException handling lets you catch and handle errors during runtime - so your program doesn't crash.\nIt uses three keywords:\ntry - defines the code to test\nthrow - triggers an exception\ncatch - handles the error\nExample\nHere, the program throws an exception with the value 505, which is caught and handled in the catch block.\nReal-Life Example: Age Check\nWe can use exception handling to check if a user is old enough:\nExample\nWe use the try block to test some code: If the age variable is less than 18, we will throw an exception, and handle it in our catch block.\nIn the catch block, we catch the error and do something about it. The catch statement takes a parameter: in our example we use an int variable (myNum) (because we are throwing an exception of int type in the try block (age)), to output the value of age.\nIf no error occurs (e.g. if age is 20 instead of 15, meaning it will be be greater than 18), the catch block is skipped:\nExample\nYou can also use the throw keyword to output a reference number, like a custom error number/code for organizing purposes (505 in our example):\nExample\nHandle Any Type of Exceptions (...)\nIf you do not know the throw type used in the try block, you can use the \"three dots\" syntax (...) inside the catch block, which will handle any type of exception:\nExample",
      "examples": [
        "try {\n// Code that may throw an exception\nthrow 505;\n}\ncatch (int errorCode) {\ncout << \"Error occurred: \" << errorCode;\n}",
        "try {\nint age = 15;\nif (age >= 18) {\ncout << \"Access granted - you are old enough.\";\n} else {\nthrow (age);\n}\n}\ncatch (int myNum) {\ncout << \"Access denied - You must be at least 18 years old.\\n\";\ncout << \"Age is: \" << myNum;\n}",
        "int age = 20;",
        "try {\nint age = 15;\nif (age >= 18) {\ncout << \"Access granted - you are old enough.\";\n} else {\nthrow 505;\n}\n}\ncatch (int myNum) {\ncout << \"Access denied - You must be at least 18 years old.\\n\";\ncout << \"Error number: \" << myNum;\n}",
        "try {\nint age = 15;\nif (age >= 18) {\ncout << \"Access granted - you are old enough.\";\n} else {\nthrow 505;\n}\n}\ncatch (...) {\ncout << \"Access denied - You must be at least 18 years old.\\n\";\n}",
        "try",
        "throw",
        "catch",
        "505",
        "age",
        "18",
        "int",
        "myNum",
        "20",
        "15",
        "..."
      ]
    },
    {
      "title": "C++ Input Validation",
      "summary": "Input Validation\nWhen users enter data into a program, they might type something unexpected. Input validation makes sure the input is correct before your program continues.\nWithout validation, your program might crash or behave incorrectly!\nThe examples below show simple ways to check if the user's input is valid.\nValidate Integer Input\nMake sure the user enters a number. If they enter something else (like a letter), ask again:\nExample Result:\nValidate Number Range\nCheck if the number is within an allowed range (e.g. 1 to 5):\nExample Result:\nValidate Text Input\nCheck that a name is not empty:\nExample Result:\nTip: You can read more about the cin object in our <iostream> library reference.",
      "examples": [
        "int number;\ncout << \"Enter a number: \";\nwhile (!(cin >> number)) {Â  // Keep asking until the user enters a valid number\ncout << \"Invalid input. Try again: \";\ncin.clear(); // Reset input errors\ncin.ignore(10000, '\\n'); // Remove bad input\n}\ncout << \"You entered: \" << number;",
        "int number;\ndo {\ncout << \"Choose a number between 1 and 5: \";\ncin >> number;\n} while (number < 1 || number> 5);Â  // Keep asking until the user enters a number between 1 and 5\n\ncout << \"You chose: \" << number;",
        "string name;\ndo {\ncout << \"Enter your name: \";\ngetline(cin, name);\n} while (name.empty());Â  // Keep asking until the user enters something (name is not empty)\n\ncout << \"Hello, \" << name;",
        "Enter a number: f\nInvalid input. Try again: 3\nYou entered: 3",
        "Choose a number between 1 and 5: 8\nChoose a number between 1 and 5: -2\nChoose a number between 1 and 5: 4\nYou chose: 4",
        "Enter your name:\nEnter your name:\nEnter your name: John\nHello, John",
        "cin"
      ]
    },
    {
      "title": "C++ Data Structures and STL",
      "summary": "Data Structures\nData structures are used to store and organize data. An array is an example of a data structure, which allows multiple elements to be stored in a single variable.\nC++ includes many other data structures as well, each is used to handle data in different ways.\nThese are part of the C++ STL, which stands for The Standard Template Library.\nC++ STL\nSTL is a library that consist of different data structures and algorithms to effectively store and manipulate data.\nIf we say that data structures store data, we can say that algorithms are used to solve different problems, often by searching through and manipulating those data structures.\nUsing the right data structure and algorithm makes your program run faster, especially when working with lots of data.\nThe most common data structures are:\nWhich one to use depends on your specific needs. One thing they all have in common is that you must include the appropriate header file to use them:\nExample\nHere is an example of using vectors, after we have included the <vector> library:\nExample\nThe next chapters will explain how each data structure works and how to use them.\nKey Concepts of the STL\nThe key components of the STL consist of containers, iterators, and algorithms, and the relationship between them:\nContainers are data structures that provides a way to store data, like vectors, lists, etc.\nIterators are objects used to access elements of a data structure.\nAlgorithms include functions, like sort() and find(), that perform operations on data structures through iterators.\nIn Computer Science, data structures and algorithms go hand in hand. A data structure is not worth much if you cannot search through it or manipulate it efficiently using algorithms, and algorithms are not worth much without a data structure to work on.\nIn the following chapters, you will see how everything is connected.",
      "examples": [
        "// Include the vector library\n#include <vector>\n\n// Include the list library\n#include <list>\n\n// Include the set library\n#include <set>\n\n// Include the map library\n#include <map>\n\n// Include the stack library\n#include <stack>\n\n// Include the queue library\n#include <queue>",
        "// Create a vector called cars that will store strings\nvector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Print vector elements\nfor (string car : cars) {\ncout << car << \"\\n\";\n}",
        "<vector>",
        "sort()",
        "find()"
      ]
    },
    {
      "title": "C++ Vectors",
      "summary": "C++ Vector\nA vector in C++ is like a resizable array.\nBoth vectors and arrays are data structures used to store multiple elements of the same data type.\nThe difference between an array and a vector, is that the size of an array cannot be modified (you cannot add or remove elements from an array). A vector however, can grow or shrink in size as needed.\nTo use a vector, you have to include the <vector> header file:\nCreate a Vector\nTo create a vector, use the vector keyword, and specify the type of values it should store within angle brackets <> and then the name of the vector, like: vector<type> vectorName.\nExample\nIf you want to add elements at the time of declaration, place them in a comma-separated list, inside curly braces {}, just like with arrays:\nExample\nNote: The type of the vector (string in our example) cannot be changed after its been declared.\nAccess a Vector\nYou can access a vector element by referring to the index number inside square brackets [].\nVectors, like arrays, are 0-indexed, meaning that [0] is the first element, [1] is the second element, and so on:\nExample\nOne advantage of using the vector library, is that it includes many useful functions. For example, you can access the first or the last element of a vector with the .front() and .back() functions:\nExample\nTo access an element at a specified index, you can use the .at() function and specify the index number:\nExample\nNote: The .at() function is often preferred over square brackets [] because it lets you know if an error occurs.\nFor example if the element is out of range:\nExample\nREMOVE ADS\nChange a Vector Element\nTo change the value of a specific element, you can refer to the index number:\nExample\nHowever, it is safer to use the .at() function:\nExample\nAdd Vector Elements\nThe biggest difference between a vector and an array is that vectors can grow dynamically. That means you can add or remove elements from the vector.\nTo add an element to the vector, you can use the .push_back() function, which will add an element at the end of the vector:\nExample\nYou can add as many elements as you want:\nExample\nRemove Vector Elements\nTo remove an element from the vector, you can use the .pop_back() function, which removes an element from the end of the vector:\nExample\nNote: Elements are usually only added and removed from the end of the vector. If you need to add or remove elements from both ends, it is often better to use a deque instead of a vector.\nVector Size\nTo find out how many elements a vector has, use the .size() function:\nExample\nCheck if a Vector is Empty\nThere is also a function to find out whether a vector is empty or not.\nThe .empty() function returns 1 (true) if the vector is empty and 0 (false) if it contains one or more elements:\nExample\nExample\nLoop Through a Vector\nYou can loop through the vector elements by using a for loop combined with the .size() function:\nExample\nYou can also use a for-each loop (introduced in C++ version 11 (2011), which is cleaner and more readable:\nExample\nTip: It is also possible to loop through vectors with an iterator, which you will learn more about in a later chapter.\nComplete Vector Reference\nFor a complete reference of Vector functions, go to our C++ Vector Reference.",
      "examples": [
        "// Include the vector library\n#include <vector>",
        "// Create a vector called cars that will store strings\nvector<string> cars;",
        "// Create a vector called cars that will store strings\nvector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Print vector elements\nfor (string car : cars) {\ncout << car << \"\\n\";\n}",
        "// Create a vector called cars that will store strings\nvector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Get the first element\ncout << cars[0];Â  // Outputs Volvo\n\n// Get the second element\ncout << cars[1];Â  // Outputs BMW",
        "// Create a vector called cars that will store strings\nvector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Get the first element\ncout << cars.front();\n\n// Get the last element\ncout << cars.back();",
        "// Create a vector called cars that will store strings\nvector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Get the second element\ncout << cars.at(1);\n\n// Get the third element\ncout << cars.at(2);",
        "// Create a vector called cars that will store strings\nvector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Try to access an element that does not exist (throws an error message)\ncout << cars.at(6);",
        "vector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Change the value of the first element\ncars[0] = \"Opel\";\n\ncout << cars[0];Â  // Now outputs Opel instead of Volvo",
        "vector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Change the value of the first element\ncars.at(0) = \"Opel\";\n\ncout << cars.at(0);Â  // Now outputs Opel instead of Volvo",
        "vector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncars.push_back(\"Tesla\");",
        "vector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncars.push_back(\"Tesla\");\ncars.push_back(\"VW\");\ncars.push_back(\"Mitsubishi\");\ncars.push_back(\"Mini\");",
        "vector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncars.pop_back();",
        "vector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncout << cars.size();Â  // Outputs 4",
        "vector<string> cars;\ncout << cars.empty();Â  // Outputs 1 (The vector is empty)",
        "vector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncout << cars.empty();Â  // Outputs 0 (not empty)",
        "vector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\nfor (int i = 0; i < cars.size(); i++) {\ncout << cars[i] << \"\\n\";\n}",
        "vector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\nfor (string car : cars) {\ncout << car << \"\\n\";\n}",
        "<vector>",
        "vector",
        "<>",
        "vector<type> vectorName",
        "{}",
        "string",
        "[]",
        "[0]",
        "[1]",
        ".front()",
        ".back()",
        ".at()",
        ".push_back()",
        ".pop_back()",
        ".size()",
        ".empty()",
        "1",
        "0",
        "for"
      ]
    },
    {
      "title": "C++ List",
      "summary": "C++ List\nA list is similar to a vector in that it can store multiple elements of the same type and dynamically grow in size.\nHowever, two major differences between lists and vectors are:\nYou can add and remove elements from both the beginning and at the end of a list, while vectors are generally optimized for adding and removing at the end.\nUnlike vectors, a list does not support random access, meaning you cannot directly jump to a specific index, or access elements by index numbers.\nTo use a list, you have to include the <list> header file:\nCreate a List\nTo create a list, use the list keyword, and specify the type of values it should store within angle brackets <> and then the name of the list, like: list<type> listName.\nExample\nIf you want to add elements at the time of declaration, place them in a comma-separated list, inside curly braces {}:\nExample\nNote: The type of the list (string in our example) cannot be changed after its been declared.\nAccess a List\nYou cannot access list elements by referring to index numbers, like with arrays and vectors.\nHowever, you can access the first or the last element with the .front() and .back() functions, respectively:\nExample\nREMOVE ADS\nChange a List Element\nYou can also change the value of the first or the last element with the .front() and .back() functions\nExample\nAdd List Elements\nTo add elements to a list, you can use .push_front() to insert an element at the beginning of the list and .push_back() to add an element at the end:\nExample\nRemove List Elements\nTo remove elements from a list, use .pop_front() to remove an element from the beginning of the list and .pop_back() to remove an element at the end:\nExample\nList Size\nTo find out how many elements a list has, use the .size() function:\nExample\nCheck if a List is Empty\nUse the .empty() function to find out if a list is empty or not.\nThe .empty() function returns 1 (true) if the list is empty and 0 (false) otherwise:\nExample\nExample\nLoop Through a List\nYou cannot loop through the list elements with a traditional for loop combined with the .size() function, since it is not possible to access elements in a list by index:\nExample\nThe simplest way to loop through a list is with the for-each loop:\nExample\nTip: It is also possible to loop through lists with an iterator, which you will learn more about in a later chapter.",
      "examples": [
        "// Include the list library\n#include <list>",
        "// Create a list called cars that will store strings\nlist<string> cars;",
        "// Create a list called cars that will store strings\nlist<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Print list elements\nfor (string car : cars) {\ncout << car << \"\\n\";\n}",
        "// Create a list called cars that will store strings\nlist<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Get the first element\ncout << cars.front();Â  // Outputs Volvo\n\n// Get the last element\ncout << cars.back();Â  // Outputs Mazda",
        "list<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Change the value of the first element\ncars.front() = \"Opel\";\n\n// Change the value of the last element\ncars.back() = \"Toyota\";\n\ncout << cars.front(); // Now outputs Opel instead of Volvo\ncout << cars.back();Â  // Now outputs Toyota instead of Mazda",
        "list<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Add an element at the beginning\ncars.push_front(\"Tesla\");\n\n// Add an element at the end\ncars.push_back(\"VW\");",
        "list<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Remove the first element\ncars.pop_front();\n\n// Remove the last element\ncars.pop_back();",
        "list<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncout << cars.size();Â  // Outputs 4",
        "list<string> cars;\ncout << cars.empty();Â  // Outputs 1 (The list is empty)",
        "list<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncout << cars.empty();Â  // Outputs 0 (not empty)",
        "list<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\nfor (int i = 0; i < cars.size(); i++) {\ncout << cars[i] << \"\\n\";\n}",
        "list<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\nfor (string car : cars) {\ncout << car << \"\\n\";\n}",
        "<list>",
        "list",
        "<>",
        "list<type> listName",
        "{}",
        "string",
        ".front()",
        ".back()",
        ".push_front()",
        ".push_back()",
        ".pop_front()",
        ".pop_back()",
        ".size()",
        ".empty()",
        "1",
        "0",
        "for"
      ]
    },
    {
      "title": "C++ Stacks",
      "summary": "C++ Stack\nA stack stores multiple elements in a specific order, called LIFO.\nLIFO stands for Last in, First Out. To vizualise LIFO, think of a pile of pancakes, where pancakes are both added and removed from the top. So when removing a pancake, it will always be the last one you added. This way of organizing elements is called LIFO in computer science and programming.\nUnlike vectors, elements in the stack are not accessed by index numbers. Since elements are added and removed from the top, you can only access the element at the top of the stack.\nTo use a stack, you have to include the <stack> header file:\nCreate a Stack\nTo create a stack, use the stack keyword, and specify the type of values it should store within angle brackets <> and then the name of the stack, like: stack<type> stackName.\nNote: The type of the stack (string in our example) cannot be changed after its been declared.\nNote: You cannot add elements to the stack at the time of declaration, like you can with vectors:\nAdd Elements\nTo add elements to the stack, use the .push() function, after declaring the stack:\nExample\nThe stack will look like this (remember that the last element added is the top element):\nREMOVE ADS\nAccess Stack Elements\nYou cannot access stack elements by referring to index numbers, like you would with arrays and vectors.\nIn a stack, you can only access the top element, which is done using the .top() function:\nExample\nChange the Top Element\nYou can also use the .top function to change the value of the top element:\nExample\nRemove Elements\nYou can use the .pop() function to remove an element from the stack.\nThis will remove the last element that was added to the stack:\nExample\nGet the Size of the Stack\nTo find out how many elements a stack has, use the .size() function:\nExample\nCheck if the Stack is Empty\nUse the .empty() function to find out if the stack is empty or not.\nThe .empty() function returns 1 (true) if the stack is empty and 0 (false) otherwise:\nExample\nExample\nStacks and Queues\nStacks are often mentioned together with Queues, which is a similar data structure described on the next page.",
      "examples": [
        "// Include the stack library\n#include <stack>",
        "// Create a stack of strings called cars\nstack<string> cars;",
        "stack<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};",
        "// Create a stack of strings called cars\nstack<string> cars;\n\n// Add elements to the stack\ncars.push(\"Volvo\");\ncars.push(\"BMW\");\ncars.push(\"Ford\");\ncars.push(\"Mazda\");",
        "// Access the top element\ncout << cars.top();Â  // Outputs \"Mazda\"",
        "// Change the value of the top element\ncars.top() = \"Tesla\";\n\n// Access the top element\ncout << cars.top();Â  // Now outputs \"Tesla\" instead of \"Mazda\"",
        "// Create a stack of strings called cars\nstack<string> cars;\n\n// Add elements to the stack\ncars.push(\"Volvo\");\ncars.push(\"BMW\");\ncars.push(\"Ford\");\ncars.push(\"Mazda\");\n\n// Remove the last added element (Mazda)\ncars.pop();\n\n// Access the top element (Now Ford)\ncout << cars.top();",
        "cout << cars.size();",
        "stack<string> cars;\ncout << cars.empty(); // Outputs 1 (The stack is empty)",
        "stack<string> cars;\n\ncars.push(\"Volvo\");\ncars.push(\"BMW\");\ncars.push(\"Ford\");\ncars.push(\"Mazda\");\n\ncout << cars.empty();Â  // Outputs 0 (not empty)",
        "<stack>",
        "stack",
        "<>",
        "stack<type> stackName",
        ".push()",
        "Mazda (top element)\nFord\nBMW\nVolvo",
        ".top()",
        ".top",
        ".pop()",
        ".size()",
        ".empty()",
        "1",
        "0"
      ]
    },
    {
      "title": "C++ Queues",
      "summary": "C++ Queue\nA queue stores multiple elements in a specific order, called FIFO.\nFIFO stands for First in, First Out. To visualize FIFO, think of a queue as people standing in line in a supermarket. The first person to stand in line is also the first who can pay and leave the supermarket. This way of organizing elements is called FIFO in computer science and programming.\nUnlike vectors, elements in the queue are not accessed by index numbers. Since queue elements are added at the end and removed from the front, you can only access an element at the front or the back.\nTo use a queue, you have to include the <queue> header file:\nCreate a Queue\nTo create a queue, use the queue keyword, and specify the type of values it should store within angle brackets <> and then the name of the queue, like: queue<type> queueName.\nNote: The type of the queue (string in our example) cannot be changed after its been declared.\nNote: You cannot add elements to the queue at the time of declaration, like you can with vectors:\nAdd Elements\nTo add elements to the queue, you can use the .push() function after declaring the queue.\nThe .push() function adds an element at the end of the queue:\nExample\nThe queue will look like this:\nREMOVE ADS\nAccess Queue Elements\nYou cannot access queue elements by referring to index numbers, like you would with arrays and vectors.\nIn a queue, you can only access the element at the front or the back, using .front() and .back() respectively:\nExample\nChange Front and Back Elements\nYou can also use .front and .back to change the value of the front and back elements:\nExample\nRemove Elements\nYou can use the .pop() function to remove an element from the queue.\nThis will remove the front element (the first and oldest element that was added to the queue):\nExample\nGet the Size of a Queue\nTo find out how many elements there are in a queue, use the .size() function:\nExample\nCheck if the Queue is Empty\nUse the .empty() function to find out if the queue is empty or not.\nThe .empty() function returns 1 (true) if the queue is empty and 0 (false) otherwise:\nExample\nExample\nStacks and Queues\nQueues are often mentioned together with Stacks, which is a similar data structure described in the previous page.",
      "examples": [
        "// Include the queue library\n#include <queue>",
        "// Create a queue of strings called cars\nqueue<string> cars;",
        "queue<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};",
        "// Create a queue of strings\nqueue<string> cars;\n\n// Add elements to the queue\ncars.push(\"Volvo\");\ncars.push(\"BMW\");\ncars.push(\"Ford\");\ncars.push(\"Mazda\");",
        "// Access the front element (first and oldest)\ncout << cars.front();Â  // Outputs \"Volvo\"\n\n// Access the back element (last and newest)\ncout << cars.back();Â  // Outputs \"Mazda\"",
        "// Change the value of the front element\ncars.front() = \"Tesla\";\n\n// Change the value of the back element\ncars.back() = \"VW\";\n\n// Access the front element\ncout << cars.front();Â  // Now outputs \"Tesla\" instead of \"Volvo\"\n\n// Access the back element\ncout << cars.back();Â  // Now outputs \"VW\" instead of \"Mazda\"",
        "// Create a queue of strings\nqueue<string> cars;\n\n// Add elements to the queue\ncars.push(\"Volvo\");\ncars.push(\"BMW\");\ncars.push(\"Ford\");\ncars.push(\"Mazda\");\n\n// Remove the front element (Volvo)\ncars.pop();\n\n// Access the front element (Now BMW)\ncout << cars.front();",
        "cout << cars.size();",
        "queue<string> cars;\ncout << cars.empty(); // Outputs 1 (The queue is empty)",
        "queue<string> cars;\n\ncars.push(\"Volvo\");\ncars.push(\"BMW\");\ncars.push(\"Ford\");\ncars.push(\"Mazda\");\n\ncout << cars.empty();Â  // Outputs 0 (not empty)",
        "<queue>",
        "queue",
        "<>",
        "queue<type> queueName",
        ".push()",
        "Volvo (front (first) element)\nBMW\nFord\nMazda (back (last) element)",
        ".front()",
        ".back()",
        ".front",
        ".back",
        ".pop()",
        ".size()",
        ".empty()",
        "1",
        "0"
      ]
    },
    {
      "title": "C++ Deque",
      "summary": "C++ Deque\nIn the previous page, your learned that elements in a queue are added at the end and removed from the front.\nA deque (stands for double-ended queue) however, is more flexible, as elements can be added and removed from both ends (at the front and the back). You can also access elements by index numbers.\nTo use a deque, you have to include the <deque> header file:\nCreate a Deque\nTo create a deque, use the deque keyword, and specify the type of values it should store within angle brackets <> and then the name of the deque, like: deque<type> dequeName.\nExample\nIf you want to add elements at the time of declaration, place them in a comma-separated list, inside curly braces {}:\nExample\nNote: The type of the deque (string in our example) cannot be changed after its been declared.\nAccess a Deque\nYou can access a deque element by referring to the index number inside square brackets [].\nDeques are 0-indexed, meaning that [0] is the first element, [1] is the second element, and so on:\nExample\nYou can also access the first or the last element of a deque with the .front() and .back() functions:\nExample\nTo access an element at a specified index, you can use the .at() function and specify the index number:\nExample\nNote: The .at() function is often preferred over square brackets [] because it throws an error message if the element is out of range:\nExample\nREMOVE ADS\nChange a Deque Element\nTo change the value of a specific element, you can refer to the index number:\nExample\nHowever, it is safer to use the .at() function:\nExample\nAdd Deque Elements\nTo add elements to a deque, you can use .push_front() to insert an element at the beginning of the deque and .push_back() to add an element at the end:\nExample\nRemove Deque Elements\nTo remove elements from a deque, use .pop_front() to remove an element from the beginning of the deque and .pop_back() to remove an element at the end:\nExample\nDeque Size\nTo find out how many elements a deque has, use the .size() function:\nExample\nCheck if a Deque is Empty\nUse the .empty() function to find out if a deque is empty or not.\nThe .empty() function returns 1 (true) if the deque is empty and 0 (false) otherwise:\nExample\nExample\nLoop Through a Deque\nYou can loop through the deque elements by using a for loop combined with the .size() function:\nExample\nYou can also use a for-each loop (introduced in C++ version 11 (2011), which is cleaner and more readable:\nExample\nTip: It is also possible to loop through deques with an iterator, which you will learn more about in a later chapter.",
      "examples": [
        "// Include the deque library\n#include <deque>",
        "// Create a deque called cars that will store strings\ndeque<string> cars;",
        "// Create a deque called cars that will store strings\ndeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Print deque elements\nfor (string car : cars) {\ncout << car << \"\\n\";\n}",
        "// Create a deque called cars that will store strings\ndeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Get the first element\ncout << cars[0];Â  // Outputs Volvo\n\n// Get the second element\ncout << cars[1];Â  // Outputs BMW",
        "// Create a deque called cars that will store strings\ndeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Get the first element\ncout << cars.front();\n\n// Get the last element\ncout << cars.back();",
        "// Create a deque called cars that will store strings\ndeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Get the second element\ncout << cars.at(1);\n\n// Get the third element\ncout << cars.at(2);",
        "// Create a deque called cars that will store strings\ndeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Try to access an element that does not exist (will throw an exception)\ncout << cars.at(6);",
        "deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Change the value of the first element\ncars[0] = \"Opel\";\n\ncout << cars[0];Â  // Now outputs Opel instead of Volvo",
        "deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Change the value of the first element\ncars.at(0) = \"Opel\";\n\ncout << cars.at(0);Â  // Now outputs Opel instead of Volvo",
        "deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Add an element at the beginning\ncars.push_front(\"Tesla\");\n\n// Add an element at the end\ncars.push_back(\"VW\");",
        "deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Remove the first element\ncars.pop_front();\n\n// Remove the last element\ncars.pop_back();",
        "deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncout << cars.size();Â  // Outputs 4",
        "deque<string> cars;\ncout << cars.empty();Â  // Outputs 1 (The deque is empty)",
        "deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncout << cars.empty();Â  // Outputs 0 (not empty)",
        "deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\nfor (int i = 0; i < cars.size(); i++) {\ncout << cars[i] << \"\\n\";\n}",
        "deque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\nfor (string car : cars) {\ncout << car << \"\\n\";\n}",
        "<deque>",
        "deque",
        "<>",
        "deque<type> dequeName",
        "{}",
        "string",
        "[]",
        "[0]",
        "[1]",
        ".front()",
        ".back()",
        ".at()",
        ".push_front()",
        ".push_back()",
        ".pop_front()",
        ".pop_back()",
        ".size()",
        ".empty()",
        "1",
        "0",
        "for"
      ]
    },
    {
      "title": "C++ Sets",
      "summary": "C++ Set\nA set stores unique elements where they:\nAre sorted automatically in ascending order.\nAre unique, meaning equal or duplicate values are ignored.\nCan be added or removed, but the value of an existing element cannot be changed.\nCannot be accessed by index numbers, because the order is based on sorting and not indexing.\nTo use a set, you have to include the <set> header file:\nCreate a Set\nTo create a set, use the set keyword, and specify the type of values it should store within angle brackets <> and then the name of the set, like: set<type> setName.\nExample\nIf you want to add elements at the time of declaration, place them in a comma-separated list, inside curly braces {}:\nExample\nThe output will be:\nAs you can see from the result above, the elements in the set are sorted automatically. In this case, alphabetically, as we are working with strings.\nIf you store integers in the set, the returned values are sorted numerically:\nExample\nThe output will be:\nNote: The type of the set (e.g. string and int in the examples above) cannot be changed after its been declared.\nSort a Set in Descending Order\nBy default, the elements in a set are sorted in ascending order. If you want to reverse the order, you can use the greater<type> functor inside the angle brackets, like this:\nExample\nThe output will be:\nNote: The type specified in greater<type> must match the type of elements in the set (int in our example).\nREMOVE ADS\nUnique Elements\nElements in a set are unique, which means they cannot be duplicated or equal.\nFor example, if we try to add \"BMW\" two times in the set, the duplicate element is ignored:\nExample\nThe output will be:\nAdd Elements\nTo add elements to a set, you can use the .insert() function:\nExample\nRemove Elements\nTo remove specific elements from a set, you can use the .erase() function:\nExample\nTo remove all elements from a set, you can use the .clear() function:\nExample\nFind the Size of a Set\nTo find out how many elements a set has, use the .size() function:\nExample\nCheck if a Set is Empty\nUse the .empty() function to find out if a set is empty or not.\nThe .empty() function returns 1 (true) if the set is empty and 0 (false) otherwise:\nExample\nExample\nLoop Through a Set\nYou can loop through a set with the for-each loop:\nExample\nTip: It is also possible to loop through sets with an iterator, which you will learn more about in a later chapter.",
      "examples": [
        "// Include the set library\n#include <set>",
        "// Create a set called cars that will store strings\nset<string> cars;",
        "// Create a set called cars that will store strings\nset<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Print set elements\nfor (string car : cars) {\ncout << car << \"\\n\";\n}",
        "// Create a set called numbers that will store integers\nset<int> numbers = {1, 7, 3, 2, 5, 9};\n\n// Print set elements\nfor (int num : numbers) {\ncout << num << \"\\n\";\n}",
        "// Sort elements in a set in descending order\nset<int, greater<int>> numbers = {1, 7, 3, 2, 5, 9};\n// Print the elements\nfor (int num : numbers) {\ncout << num << \"\\n\";\n}",
        "set<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"BMW\", \"Mazda\"};\n\n// Print set elements\nfor (string car : cars) {\ncout << car << \"\\n\";\n}",
        "set<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Add new elements\ncars.insert(\"Tesla\");\ncars.insert(\"VW\");\ncars.insert(\"Toyota\");\ncars.insert(\"Audi\");",
        "set<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Remove elements\ncars.erase(\"Volvo\");\ncars.erase(\"Mazda\");",
        "set<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Remove all elements\ncars.clear();",
        "set<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncout << cars.size();Â  // Outputs 4",
        "set<string> cars;\ncout << cars.empty();Â  // Outputs 1 (The set is empty)",
        "set<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncout << cars.empty();Â  // Outputs 0 (not empty)",
        "set<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\nfor (string car : cars) {\ncout << car << \"\\n\";\n}",
        "<set>",
        "set",
        "<>",
        "set<type> setName",
        "{}",
        "BMW\nFord\nMazda\nVolvo",
        "1\n2\n3\n5\n7\n9",
        "string",
        "int",
        "greater<type>",
        "9\n7\n5\n3\n2\n1",
        ".insert()",
        ".erase()",
        ".clear()",
        ".size()",
        ".empty()",
        "1",
        "0"
      ]
    },
    {
      "title": "C++ Maps",
      "summary": "C++ Map\nA map stores elements in \"key/value\" pairs.\nElements in a map are:\nAccessible by keys (not index), and each key is unique.\nAutomatically sorted in ascending order by their keys.\nTo use a map, you have to include the <map> header file:\nCreate a Map\nTo create a map, use the map keyword, and specify the type of both the key and the value it should store within angle brackets <>. At last, specify the name of the map, like: map<keytype, valuetype> mapName:\nExample\nIf you want to add elements at the time of declaration, place them in a comma-separated list, inside curly braces {}:\nExample\nAccess a Map\nYou cannot access map elements by referring to index numbers, like you would with arrays and vectors.\nInstead, you can access a map element by referring to its key inside square brackets []:\nExample\nYou can also access elements with the .at() function:\nExample\nNote: The .at() function is often preferred over square brackets [] because it throws an error message if the element does not exist:\nExample\nREMOVE ADS\nChange Values\nYou can also change the value associated with a key:\nExample\nHowever, it is safer to use the .at() function:\nExample\nAdd Elements\nTo add elements to a map, it is ok to use square brackets []:\nExample\nBut you can also use the .insert() function:\nExample\nElements with Equal Keys\nA map cannot have elements with equal keys.\nFor example, if we try to add \"Jenny\" two times to the map, it will only keep the first one:\nExample\nTo sum up; values can be equal, but keys must be unique.\nRemove Elements\nTo remove specific elements from a map, you can use the .erase() function:\nExample\nTo remove all elements from a map, you can use the .clear() function:\nExample\nFind the Size of a Map\nTo find out how many elements a map has, use the .size() function:\nExample\nCheck if a Map is Empty\nUse the .empty() function to find out if a map is empty or not.\nThe .empty() function returns 1 (true) if the map is empty and 0 (false) otherwise:\nExample\nExample\nNote: You can also check if a specific element exists, by using the .count(key) function.\nIt returns 1 (true) if the element exists and 0 (false) otherwise:\nExample\nLoop Through a Map\nYou can loop through a map with the for-each loop. However, there are a couple of things to be aware of:\nYou should use the auto keyword (introduced in C++ version 11) inside the for loop. This allows the compiler to automatically determine the correct data type for each key-value pair.\nSince map elements consist of both keys and values, you have to include .first to access the keys, and .second to access values in the loop.\nElements in the map are sorted automatically in ascending order by their keys:\nExample\nThe output will be:\nIf you want to reverse the order, you can use the greater<type> functor inside the angle brackets, like this:\nExample\nThe output will be:\nTip: It is also possible to loop through maps with an iterator, which you will learn more about in the next chapter.",
      "examples": [
        "// Include the map library\n#include <map>",
        "// Create a map called people that will store strings as keys and integers as values\nmap<string, int> people",
        "// Create a map that will store the name and age of different people\nmap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };",
        "// Create a map that will store the name and age of different people\nmap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n\n// Get the value associated with the key \"John\"\ncout << \"John is: \" << people[\"John\"] << \"\\n\";\n\n// Get the value associated with the key \"Adele\"\ncout << \"Adele is: \" << people[\"Adele\"] << \"\\n\";",
        "// Create a map that will store the name and age of different people\nmap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n\n// Try to access an element that does not exist (will throw an exception)\ncout << people.at(\"Jenny\");",
        "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n\n// Change John's value to 50 instead of 32\npeople[\"John\"] = 50;\n\ncout << \"John is: \" << people[\"John\"];Â  // Now outputs John is: 50",
        "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n\n// Change John's value to 50 instead of 32\npeople.at(\"John\") = 50;\n\ncout << \"John is: \" << people.at(\"John\");Â  // Now outputs John is: 50",
        "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n\n// Add new elements\npeople[\"Jenny\"] = 22;\npeople[\"Liam\"] = 24;\npeople[\"Kasper\"] = 20;\npeople[\"Anja\"] = 30;",
        "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n\n// Add new elements\npeople.insert({\"Jenny\", 22});\npeople.insert({\"Liam\", 24});\npeople.insert({\"Kasper\", 20});\npeople.insert({\"Anja\", 30});",
        "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n\n// Trying to add two elements with equal keys\npeople.insert({\"Jenny\", 22});\npeople.insert({\"Jenny\", 30});",
        "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n\n// Remove an element by key\npeople.erase(\"John\");",
        "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n\n// Remove all elements\npeople.clear();",
        "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\ncout << people.size();Â  // Outputs 3",
        "map<string, int> people;\ncout << people.empty(); // Outputs 1 (The map is empty)",
        "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\ncout << people.empty();Â  // Outputs 0 (not empty)",
        "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\ncout << people.count(\"John\");Â  // Outputs 1 (John exists)",
        "map<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n\nfor (auto person : people) {\ncout << person.first << \" is: \" << person.second << \"\\n\";\n}",
        "map<string, int, greater<string>> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n\nfor (auto person : people) {\ncout << person.first << \" is: \" << person.second << \"\\n\";\n}",
        "<map>",
        "map",
        "<>",
        "map<keytype, valuetype> mapName",
        "{}",
        "[]",
        ".at()",
        ".insert()",
        ".erase()",
        ".clear()",
        ".size()",
        ".empty()",
        "1",
        "0",
        ".count(key)",
        "auto",
        "for",
        ".first",
        ".second",
        "Adele is: 45\nBo is: 29\nJohn is: 32",
        "greater<type>",
        "John is: 32\nBo is: 29\nAdele is: 45"
      ]
    },
    {
      "title": "C++ Iterator",
      "summary": "C++ Iterators\nIterators are used to access and iterate through elements of data structures (vectors, sets, etc.), by \"pointing\" to them.\nIt is called an \"iterator\" because \"iterating\" is the technical term for looping.\nTo iterate through a vector, look at the following example:\nExample\nFirst we create a vector of strings to store the names of different car manufactures.\nThen we create a \"vector iterator\" called it, that we will use to loop through the vector.\nNext, we use a for loop to loop through the vector with the iterator. The iterator (it) points to the first element in the vector (cars.begin()) and the loop continues as long as it is not equal to cars.end().\nThe increment operator (++it) moves the iterator to the next element in the vector.\nThe dereference operator (*it) accesses the element the iterator points to.\nNote: The type of the iterator must match the type of the data structure it should iterate through (string in our example)\nWhat is begin() and end()?\nbegin() and end() are functions that belong to data structures, such as vectors and lists. They do not belong to the iterator itself. Instead, they are used with iterators to access and iterate through the elements of these data structures.\nbegin() returns an iterator that points to the first element of the data structure.\nend() returns an iterator that points to one position after the last element.\nTo understand how they work, let's continue to use vectors as an example:\nBegin Examples\nbegin() points to the first element in the vector (index 0, which is \"Volvo\"):\nExample\nTo point to the second element (BMW), you can write cars.begin() + 1:\nExample\nAnd of course, that also means you can point to the third element with cars.begin() + 2:\nExample\nEnd Example\nend() points to one position after the last element in the vector (meaning it doesn't point to an actual element, but rather indicates that this is the end of the vector).\nSo, to use end() to point to the last element in the cars vector (Mazda), you can use cars.end() - 1:\nExample\nWhy do we say \"point\"?\nIterators are like \"pointers\" in that they \"point\" to elements in a data structure rather than returning values from them. They refer to a specific position, providing a way to access and modify the value when needed, without making a copy of it. For example:\nExample\nThe auto Keyword\nIn C++ 11 and later versions, you can use the auto keyword instead of explicitly declaring and specifying the type of the iterator.\nThe auto keyword allows the compiler to automatically determine the correct data type, which simplifies the code and makes it more readable:\nInstead of this:\nYou can simply write this:\nIn the example above, the compiler knows the type of it based on the return type of cars.begin(), which is vector<string>::iterator.\nThe auto keyword works in for loops as well:\nREMOVE ADS\nFor-Each Loop vs. Iterators\nYou can use a for-each loop to just loop through elements of a data structure, like this:\nExample\nWhen you are just reading the elements, and don't need to modify them, the for-each loop is much simpler and cleaner than iterators.\nHowever, when you need to add, modify, or remove elements during iteration, iterate in reverse, or skip elements, you should use iterators:\nExample\nIterate in Reverse\nTo iterate in reverse order, you can use rbegin() and rend() instead of begin() and end():\nExample\nIterate Through other Data Structures\nIterators are great for code reusability since you can use the same syntax for iterating through vectors, lists, deques, sets and maps:\nList Example\nDeque Example\nSet Example\nMap Example\nThe examples above shows how to iterate through different data structures that support iterators (vector, list, deque, map and set support iterators, while stacks and queues do not).\nAlgorithms\nAnother important feature of iterators is that they are used with different algorithm functions, such as sort() and find() (found in the <algorithm> library), to sort and search for elements in a data structure.\nFor example, the sort() function takes iterators (typically returned by begin() and end()) as parameters to sort elements in a data structure from the beginning to the end.\nIn this example, the elements are sorted alphabetically since they are strings:\nExample\nAnd in this example, the elements are sorted numerically since they are integers:\nExample\nTo reverse the order, you can use rbegin() and rend() instead of begin() and end():\nExample",
      "examples": [
        "// Create a vector called cars that will store strings\nvector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Create a vector iterator called it\nvector<string>::iterator it;\n\n// Loop through the vector with the iterator\nfor (it = cars.begin(); it != cars.end(); ++it) {\ncout << *it << \"\\n\";\n}",
        "vector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\nvector<string>::iterator it;",
        "// Point to the first element in the vector\nit = cars.begin();",
        "// Point to the second element\nit = cars.begin() + 1;",
        "// Point to the third element\nit = cars.begin() + 2;",
        "// Point to the last element\nit = cars.end() - 1;",
        "// Point to the first element in the vector\nit = cars.begin();\n\n// Modify the value of the first element\n*it = \"Tesla\";\n\n// Volvo is now Tesla",
        "vector<string>::iterator it = cars.begin();",
        "auto it = cars.begin();",
        "for (auto it = cars.begin(); it != cars.end(); ++it) {\ncout << *it << \"\\n\";\n}",
        "// Create a vector called cars that will store strings\nvector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Print vector elements\nfor (string car : cars) {\ncout << car << \"\\n\";\n}",
        "// Create a vector called cars that will store strings\nvector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Loop through vector elements\nfor (auto it = cars.begin(); it != cars.end(); ) {\nif (*it == \"BMW\") {\nit = cars.erase(it); // Remove the BMW element\n} else {\n++it;\n}\n}\n\n// Print vector elements\nfor (const string& car : cars) {\ncout << car << \"\\n\";\n}",
        "// Iterate in reverse order\nfor (auto it = cars.rbegin(); it != cars.rend(); ++it) {\ncout << *it << \"\\n\";\n}",
        "// Create a list called cars that will store strings\nlist<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Loop through the list with an iterator\nfor (auto it = cars.begin(); it != cars.end(); ++it) {\ncout << *it << \"\\n\";\n}",
        "// Create a deque called cars that will store strings\ndeque<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Loop through the deque with an iterator\nfor (auto it = cars.begin(); it != cars.end(); ++it) {\ncout << *it << \"\\n\";\n}",
        "// Create a set called cars that will store strings\nset<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Loop through the set with an iterator\nfor (auto it = cars.begin(); it != cars.end(); ++it) {\ncout << *it << \"\\n\";\n}",
        "// Create a map that will store strings and integers\nmap<string, int> people = { {\"John\", 32}, {\"Adele\", 45}, {\"Bo\", 29} };\n\n// Loop through the map with an iterator\nfor (auto it = people.begin(); it != people.end(); ++it) {\ncout << it->first << \" is: \" << it->second << \"\\n\";\n}",
        "#include <iostream>\n#include <vector>\n#include <algorithm>Â  // Include the <algorithm> library\nusing namespace std;\n\nint main() {\n// Create a vector called cars that will store strings\nvector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Sort cars in alphabetical order\nsort(cars.begin(), cars.end());\n\n// Print cars in alphabetical order\nfor (string car : cars) {\ncout << car << \"\\n\";\n}\n\nreturn 0;\n}",
        "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n// Create a vector called numbers that will store integers\nvector<int> numbers = {1, 7, 3, 5, 9, 2};\n\n// Sort numbers numerically\nsort(numbers.begin(), numbers.end());\n\nfor (int num : numbers) {\ncout << num << \"\\n\";\n}\n\nreturn 0;\n}",
        "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n// Create a vector called numbers that will store integers\nvector<int> numbers = {1, 7, 3, 5, 9, 2};\n\n// Sort numbers numerically in reverse order\nsort(numbers.rbegin(), numbers.rend());\n\nfor (int num : numbers) {\ncout << num << \"\\n\";\n}\n\nreturn 0;\n}",
        "it",
        "for",
        "cars.begin()",
        "cars.end()",
        "++it",
        "*it",
        "string",
        "begin()",
        "end()",
        "cars.begin() + 1",
        "cars.begin() + 2",
        "cars.end() - 1",
        "auto",
        "vector<string>::iterator",
        "rbegin()",
        "rend()",
        "sort()",
        "find()",
        "<algorithm>"
      ]
    },
    {
      "title": "C++ Algorithm",
      "summary": "C++ Algorithms\nIn the previous chapters, you learned that data structures (like vectors, lists, etc) are used to store and organize data.\nAlgorithms are used to solve problems by sorting, searching, and manipulating data structures.\nThe <algorithm> library provides many useful functions to perform these tasks with iterators.\nTo use these functions, you must include the <algorithm> header file:\nSorting Algorithms\nTo sort elements in a data structure, you can use the sort() function.\nThe sort() function takes iterators (typically a start iterator returned by begin() and an end iterator returned by end()) as parameters:\nExample\nBy default, the elements are sorted in ascending order. In the example above, the elements are sorted alphabetically since they are strings.\nIf we had a vector of integers, they would be sorted numerically:\nExample\nTo reverse the order, you can use rbegin() and rend() instead of begin() and end():\nExample\nTo only sort specific elements, you could write:\nExample\nSearching Algorithms\nTo search for specific elements in a vector, you can use the find() function.\nIt takes three parameters: start_iterator, end_iterator, value, where value is the value to search for:\nExample\nSeach for the number 3 in \"numbers\":\nTo search for the first element that is greater than a specific value, you can use the upper_bound() function:\nExample\nFind the first value greater than 5 in \"numbers\":\nThe upper_bound() function is typically used on sorted data structures. That's why we first sort the vector in the example above.\nTo find the smallest element in a vector, use the min_element() function:\nExample\nTo find the largest element, use the max_element() function:\nExample\nModifying Algorithms\nTo copy elements from one vector to another, you can use the copy() function:\nExample\nCopy elements from one vector to another:\nTo fill all elements in a vector with a value, you can use the fill() function:\nExample\nFill all elements in the numbers vector with the value 35:\nComplete Algorithm Reference\nFor a complete reference of algorithm functions, go to our C++ Algorithm Reference.",
      "examples": [
        "// Include the algorithm library\n#include <algorithm>",
        "// Create a vector called cars that will store strings\nvector<string> cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\n// Sort cars alphabetically\nsort(cars.begin(), cars.end());",
        "// Create a vector called numbers that will store integers\nvector<int> numbers = {1, 7, 3, 5, 9, 2};\n\n// Sort numbers numerically\nsort(numbers.begin(), numbers.end());",
        "// Create a vector called numbers that will store integers\nvector<int> numbers = {1, 7, 3, 5, 9, 2};\n\n// Sort numbers numerically in reverse order\nsort(numbers.rbegin(), numbers.rend());",
        "// Create a vector called numbers that will store integers\nvector<int> numbers = {1, 7, 3, 5, 9, 2};\n\n// Sort numbers numerically, starting from the fourth element (only sort 5, 9, and 2)\nsort(numbers.begin() + 3, numbers.end());",
        "// Create a vector called numbers that will store integers\nvector<int> numbers = {1, 7, 3, 5, 9, 2};\n\n// Search for the number 3\nauto it = find(numbers.begin(), numbers.end(), 3);",
        "// Create a vector called numbers that will store integers\nvector<int> numbers = {1, 7, 3, 5, 9, 2};\n\n// Sort the vector in ascending order\nsort(numbers.begin(), numbers.end());\n\n// Find the first value that is greater than 5 in the sorted vector\nauto it = upper_bound(numbers.begin(), numbers.end(), 5);",
        "// Create a vector called numbers that will store integers\nvector<int> numbers = {1, 7, 3, 5, 9, 2};\n\n// Find the smallest number\nauto it = min_element(numbers.begin(), numbers.end());",
        "// Create a vector called numbers that will store integers\nvector<int> numbers = {1, 7, 3, 5, 9, 2};\n\n// Find the largest number\nauto it = max_element(numbers.begin(), numbers.end());",
        "// Create a vector called numbers that will store integers\nvector<int> numbers = {1, 7, 3, 5, 9, 2};\n\n// Create a vector called copiedNumbers that should store 6 integers\nvector<int> copiedNumbers(6);\n\n// Copy elements from numbers to copiedNumbers\ncopy(numbers.begin(), numbers.end(), copiedNumbers.begin());",
        "// Create a vector called numbers that will store 6 integers\nvector<int> numbers(6);\n\n// Fill all elements in the numbers vector with the value 35\nfill(numbers.begin(), numbers.end(), 35);",
        "<algorithm>",
        "sort()",
        "begin()",
        "end()",
        "rbegin()",
        "rend()",
        "find()",
        "start_iterator, end_iterator, value",
        "upper_bound()",
        "min_element()",
        "max_element()",
        "copy()",
        "fill()"
      ]
    },
    {
      "title": "C++ Namespaces",
      "summary": "Namespaces\nA namespace is a way to group related code together under a name. It helps you avoid naming conflicts when your code grows or when you use code from multiple sources.\nThink of a namespace like a folder: you can have a variable named x in two different folders, and they won't clash.\nWhy Use Namespaces?\nTo avoid name conflicts, especially in larger projects\nTo organize code into logical groups\nTo separate your code from code in libraries\nBasic Namespace Example\nHere we define a variable called x inside a namespace called MyNamespace:\nWe use MyNamespace::x to access the variable inside the namespace.\nThe using namespace Keyword\nIf you don't want to write the namespace name every time you access the variable, you can use the using keyword:\nHowever, be careful: In large programs, using using namespace can cause name conflicts. It's often better to use the full name like MyNamespace::x instead.\nThe std Namespace\nIn C++, things like cout, cin, and endl belong to the Standard Library.\nThese are all part of a namespace called std, which stands for standard. That means you normally have to write std::cout, std::cin, and so on.\nTo make your code shorter, you can add:\nYou must type std:: before cout.\nNow you can use cout without writing std:: every time.\nShould You Always Use It?\nFor small programs and learning, using namespace std is fine.\nBut in large projects, it is better to write std:: before each item. This prevents conflicts if different libraries have functions or variables with the same name.\nIn short: using namespace std; is helpful for beginners, but use it with care in big programs.",
      "examples": [
        "namespace MyNamespace {\nint x = 42;\n}\n\nint main() {\ncout << MyNamespace::x;\nreturn 0;\n}",
        "namespace MyNamespace {\nint x = 42;\n}\n\nusing namespace MyNamespace;\n\nint main() {\ncout << x;Â  // No need to write MyNamespace::x\nreturn 0;\n}",
        "using namespace std;",
        "#include <iostream>\n\nint main() {\nstd::cout << \"Hello World!\\n\";\nreturn 0;\n}",
        "#include <iostream>\nusing namespace std;\n\nint main() {\ncout << \"Hello World!\\n\";\nreturn 0;\n}",
        "x",
        "MyNamespace",
        "MyNamespace::x",
        "using namespace",
        "using",
        "std",
        "cout",
        "cin",
        "endl",
        "std::cout",
        "std::cin",
        "std::",
        "namespace std"
      ]
    },
    {
      "title": "C++ Projects",
      "summary": "Projects and Practical Applications\nLearn how to apply your C++ knowledge to real-world projects.\nIn this section, we will build mini applications using the features you've learned throughout the tutorial.\nWhy Build Projects?\nProjects are an essential part of learning C++. Start small and gradually add more features:\nUnderstand how real programs are structured\nPractice combining concepts (e.g., functions, loops, file handling)\nImprove your debugging and problem-solving skills\nPrepare for job interviews and relevant exercises\nTip: The more you build, the better you understand.\nProject Examples\nSome examples of fun C++ projects could be:\nCalculate a Students Average\nSimple Calculator\nAddress Book\nTo-Do List\nGuess a Number Game\nQuiz Game\nProject: Calculate a Students Average\nLet's create a program to calculate a student's average from multiple grades.\nThe program asks the user to enter 1 to 5 grades and calculates the average. Then display the average and a corresponding letter grade (A to F):\nExample\nExample output:\nKey Concepts Used: loops, functions, conditions, input handling, and basic logic.\nPractice Challenge\nTry to make your own projects. For example, write a program that:\nAsks for your name\nAsks for your age\nPrints: Hi <name>! You will turn <age+1> next year.\nOpen CodeBlocks or any similar C++ IDE, and experiment on your own!\nStart small. Add one feature at a time. Remember to test often!\nTip: We have also gathered a set of simple projects in our Real Life Examples page.",
      "examples": [
        "// This function returns a letter grade based on the average of a student\nchar gradeFunction(double avg) {\nif (avg >= 90) return 'A';\nelse if (avg >= 80) return 'B';\nelse if (avg >= 70) return 'C';\nelse if (avg >= 60) return 'D';\nelse return 'F';\n}\n\nint main() {\nint count; // Number of grades the user wants to enter\ndouble sum = 0, grade; // Sum stores total grades, grade holds each input\n\n// Ask the user to enter total grades between 1 to 5\ncout << \"How many grades (1 to 5)? \";\ncin >> count;\n\n// Validate that count is between 1 and 5\nif (count < 1 || count > 5) {\ncout << \"Invalid number. You must enter between 1 and 5 grades.\\n\";\nreturn 1;Â  // Exit\n}\n\n// Loop to collect each grade\nfor (int i = 1; i <= count; i++) {\ncout << \"Enter grade \" << i << \": \";\ncin >> grade;\nsum += grade;\n}\n\n// Calculate the average score\ndouble avg = sum / count;\n\n// Display numeric average\ncout << \"Average: \" << avg << \"\\n\";\n\n// Display letter grade\ncout << \"Letter grade: \" << gradeFunction(avg) << \"\\n\";\n\nreturn 0;\n}",
        "How many grades (1 to 5)? 3\nEnter grade 1: 85\nEnter grade 2: 91\nEnter grade 3: 78\nAverage: 84.6667\nLetter grade: B",
        "Hi <name>! You will turn <age+1> next year."
      ]
    },
    {
      "title": "C++ How To Add Two Numbers",
      "summary": "Add Two Numbers\nLearn how to add two numbers in C++:\nExample\nAdd Two Numbers with User Input\nIn this example, the user must input two numbers. Then we print the sum by calculating (adding) the two numbers:\nExample",
      "examples": [
        "int x = 5;\nint y = 6;\nint sum = x + y;\ncout << sum;",
        "int x, y;\nint sum;\ncout << \"Type a number: \";\ncin >> x;\ncout << \"Type another number: \";\ncin >> y;\nsum = x + y;\ncout << \"Sum is: \" << sum;"
      ]
    },
    {
      "title": "C++ How To Generate Random Numbers",
      "summary": "Random Number\nYou can use the rand() function, found in the <cstdlib> library, to generate a random number:\nExample\nTo get more control over the random number, for example, if you only want a random number between 0 and 100, you can use the following formula:\nExample\nNote: The examples above just outputs a random number once. They don't output different random numbers each time the program runs. To fix this, you can use the srand() function and add the time() function from the <ctime> library.\nThis will generate a random number from 0 to 100 each time the program runs:\nExample",
      "examples": [
        "cout << rand();",
        "// Generate a random number between 0 and 100\nint randomNum = rand() % 101;\n\ncout << randomNum;\nreturn 0;",
        "// Get a different random number each time the program runs\nsrand(time(0));\n\n// Generate a random number between 0 and 100\nint randomNum = rand() % 101;\n\ncout << randomNum;\nreturn 0;",
        "rand()",
        "<cstdlib>",
        "srand()",
        "time()",
        "<ctime>"
      ]
    },
    {
      "title": "C++ Reference Documentation",
      "summary": "This section contains a C++ reference documentation.\nC++ Reference\nA list of C++ keywords and popular libraries can be found here:",
      "examples": []
    },
    {
      "title": "C++ Keywords",
      "summary": "C++ Keywords\nA list of useful keywords in C++ can be found in the table below.",
      "examples": [
        "&&",
        "&=",
        "&",
        "|",
        "~",
        "!",
        "!=",
        "||",
        "|=",
        "int",
        "char",
        "^",
        "^="
      ]
    },
    {
      "title": "C++ iostream Library (Standard Input / Output Streams)",
      "summary": "C++ iostream objects\nThe <iostream> library provides objects which can read user input and output data to the console or to a file.\nA list of all iostream objects can be found in the table below.",
      "examples": [
        "<iostream>",
        "wchar_t",
        "char"
      ]
    },
    {
      "title": "C++ fstream Library (File Streams)",
      "summary": "C++ fstream classes\nThe <fstream> library provides classes for reading and writing into files or data streams.\nA list of useful fstream classes can be found in the table below.\nLearn more about files in our C++ Files Tutorial.",
      "examples": [
        "<fstream>",
        "fstream",
        "ifstream",
        "ofstream"
      ]
    },
    {
      "title": "C++ cmath Library",
      "summary": "C++ Math Functions\nThe <cmath> library has many functions that allow you to perform mathematical tasks on numbers.\nA list of all math functions can be found in the table below:\nLearn more about math in our C++ Math Tutorial.",
      "examples": [
        "<cmath>"
      ]
    },
    {
      "title": "C++ string Library",
      "summary": "C++ string Functions\nThe <string> library has many functions that allow you to perform tasks on strings.\nA list of all string functions can be found in the table below.\nLearn more about strings in our C++ Strings Tutorial.",
      "examples": [
        "<string>"
      ]
    },
    {
      "title": "C++ cstring Library",
      "summary": "C++ cstring Functions\nThe <cstring> library has many functions that allow you to perform tasks on arrays and C-style strings.\nNote that C-style strings are different than regular strings. A C-style string is an array of characters, created with the char type. To learn more about C-style strings, read our C Strings Tutorial.\nA list of all cstring functions can be found in the table below.\nLearn more about c-style strings in our C-Style Strings Tutorial.",
      "examples": [
        "<cstring>",
        "char"
      ]
    },
    {
      "title": "C++ ctime Library",
      "summary": "C++ ctime Functions\nThe <ctime> library has a variety of functions that allow you to measure dates and times.",
      "examples": [
        "<ctime>",
        "tm"
      ]
    },
    {
      "title": "C++ vector Library",
      "summary": "C++ vector Library\nThe <vector> library has many functions that allow you to perform tasks on vectors.\nA list of popular vector functions can be found in the table below.\nLearn more about vectors in our C++ Vector Tutorial.",
      "examples": [
        "<vector>"
      ]
    },
    {
      "title": "C++ algorithm Library",
      "summary": "C++ algorithm Library\nThe <algorithm> library has many functions that allow you to modify ranges of data from data structures.\nA list of useful functions in the algorithm library can be found below.\nLearn more about algorithms in our C++ Algorithm Tutorial.",
      "examples": [
        "<algorithm>"
      ]
    },
    {
      "title": "C++ Examples",
      "summary": "C++ Syntax\nC++ Output/Print\nC++ Comments\nC++ Variables\nC++ User Input\nC++ Data Types\nREMOVE ADS\nC++ Operators\nC++ Strings\nC++ Math\nC++ Booleans\nC++ If...Else (Conditions)\nC++ Switch\nC++ Loops\nC++ Arrays\nC++ References\nC++ Pointers\nC++ Files\nC++ Functions\nC++ Classes/Objects",
      "examples": []
    },
    {
      "title": "C++ Real-Life Examples",
      "summary": "Practical Examples\nThis page contains a list of practical examples used in real world projects.\nVariables and Data Types\nExample\nUse variables to store different data of a college student:\nExample\nCalculate the area of a rectangle (by multiplying the length and width):\nExample\nUse different data types to calculate and output the total cost of a number of items:\nFor a tutorial about variables and data types in C++, visit our Variables Chapter and Data Types Chapter.\nStrings\nExample\nUse strings to create a simple welcome message:\nFor a tutorial about strings in C++, visit our Strings Chapter.\nBooleans\nExample\nFind out if a person is old enough to vote:\nFor a tutorial about booleans in C++, visit our Booleans Chapter.\nConditions (If..Else)\nExample\nCheck whether the user enters the correct code:\nExample\nFind out if a number is positive or negative:\nExample\nFind out if a person is old enough to vote:\nExample\nFind out if a number is even or odd:\nFor a tutorial about conditions in C++, visit our If..Else Chapter.\nSwitch\nExample\nUse the weekday number to calculate and output the weekday name:\nFor a tutorial about switch in C++, visit our Switch Chapter.\nWhile Loops\nExample\nCreate a simple \"countdown\" program:\nExample\nCreate a program that only print even numbers between 0 and 10 (inclusive):\nExample\nUse a while loop to reverse some numbers:\nExample\nUse a while loop together with an if else statement to play a game of Yatzy:\nFor a tutorial about while loops in C++, visit our While Loops Chapter.\nFor Loops\nExample\nUse a for loop to create a program that counts to 100 by tens:\nExample\nUse a for loop to create a program that only print even values between 0 and 10:\nExample\nUse a for loop to create a program that only prints odd numbers:\nExample\nUse a for loop to print the powers of 2 up to 512:\nExample\nUse a for loop to create a program that prints the multiplication table of a specified number (2 in this example):\nFor a tutorial about for loops in C++, visit our For Loops Chapter.\nArrays\nExample\nCreate a program that calculates the average of different ages:\nExample\nCreate a program that finds the lowest age among different ages:\nFor a tutorial about arrays in C++, visit our Arrays Chapter.\nStructs\nExample\nUse a structure to store and output different information about Cars:\nFor a tutorial about structs in C++, visit our Structures Chapter.\nFunctions\nExample\nCreate a program that converts a value from fahrenheit to celsius:\nExample\nCreate a program that doubles a number:\nFor a tutorial about functions in C++, visit our Functions Chapter.",
      "examples": [
        "// Student data\nint studentID = 15;\nint studentAge = 23;\nfloat studentFee = 75.25;\nchar studentGrade = 'B';\n\n// Print variables\ncout << \"Student ID: \" << studentID << \"\\n\";\ncout << \"Student Age: \" << studentAge << \"\\n\";\ncout << \"Student Fee: \" << studentFee << \"\\n\";\ncout << \"Student Grade: \" << studentGrade << \"\\n\";",
        "// Create integer variables\nint length = 4;\nint width = 6;\nint area;\n\n// Calculate the area of a rectangle\narea = length * width;\n\n// Print the variables\ncout << \"Length is: \" << length << \"\\n\";\ncout << \"Width is: \" << width << \"\\n\";\ncout << \"Area of the rectangle is: \" << area << \"\\n\";",
        "// Create variables of different data types\nint items = 50;\ndouble cost_per_item = 9.99;\ndouble total_cost = items * cost_per_item;\nchar currency = '$';\n\n// Print variables\ncout << \"Number of items: \" << items << \"\\n\";\ncout << \"Cost per item: \" << cost_per_item << \"\" << currency << \"\\n\";\ncout << \"Total cost = \" << total_cost << \"\" << currency << \"\\n\";",
        "string message = \"Good to see you, \";\nstring fname = \"John\";\n\ncout << greeting + fname;",
        "int myAge = 25;\nint votingAge = 18;\n\ncout << (myAge >= votingAge); // returns 1 (true), meaning 25 year olds are allowed to vote!",
        "int doorCode = 1337;\n\nif (doorCode == 1337) {\ncout << \"Correct code.\\nThe door is now open.\\n\";\n} else {\ncout << \"Wrong code.\\nThe door remains closed.\\n\";\n}",
        "int myNum = 10; // Is this a positive or negative number?\n\nif (myNum > 0) {\ncout << \"The value is a positive number.\\n\";\n} else if (myNum < 0) {\ncout << \"The value is a negative number.\\n\";\n} else {\ncout << \"The value is 0.\\n\";\n}",
        "int myAge = 25;\nint votingAge = 18;\n\nif (myAge >= votingAge) {\ncout << \"Old enough to vote!\\n\";\n} else {\ncout << \"Not old enough to vote.\\n\";\n}",
        "int myNum = 5;\n\nif (myNum % 2 == 0) {\ncout << myNum << \" is even.\\n\";\n} else {\ncout << myNum << \" is odd.\\n\";\n}",
        "int day = 4;\nswitch (day) {\ncase 1:\ncout << \"Monday\";\nbreak;\ncase 2:\ncout << \"Tuesday\";\nbreak;\ncase 3:\ncout << \"Wednesday\";\nbreak;\ncase 4:\ncout << \"Thursday\";\nbreak;\ncase 5:\ncout << \"Friday\";\nbreak;\ncase 6:\ncout << \"Saturday\";\nbreak;\ncase 7:\ncout << \"Sunday\";\nbreak;\n}\n// Outputs \"Thursday\" (day 4)",
        "int countdown = 3;\n\nwhile (countdown > 0) {\ncout << countdown << \"\\n\";\ncountdown--;\n}\n\ncout << \"Happy New Year!!\\n\";",
        "int i = 0;\n\nwhile (i <= 10) {\ncout << i << \"\\n\";\ni += 2;\n}",
        "// A variable with some specific numbers\nint numbers = 12345;\n\n// A variable to store the reversed number\nint revNumbers = 0;\n\n// Reverse and reorder the numbers\nwhile (numbers) {\n// Get the last number of 'numbers' and add it to 'revNumbers'\nrevNumbers = revNumbers * 10 + numbers % 10;\n// Remove the last number of 'numbers'\nnumbers /= 10;\n}\n\ncout << \"Reversed numbers: \" << revNumbers << \"\\n\";",
        "int dice = 1;\n\nwhile (dice <= 6) {\nif (dice < 6) {\ncout << \"No Yatzy\\n\";\n} else {\ncout << \"Yatzy!\\n\";\n}\ndice = dice + 1;\n}",
        "for (int i = 0; i <= 100; i += 10) {\ncout << i << \"\\n\";\n}",
        "for (int i = 0; i <= 10; i = i + 2) {\ncout << i << \"\\n\";\n}",
        "for (int i = 1; i <= 10; i = i + 2) {\ncout << i << \"\\n\";\n}",
        "for (int i = 2; i <= 512; i *= 2) {\ncout << i << \"\\n\";\n}",
        "int number = 2;\nint i;\n\n// Print the multiplication table for the number 2\nfor (i = 1; i <= 10; i++) {\ncout << number << \" x \" << i << \" = \" << number * i << \"\\n\";\n}",
        "// An array storing different ages\nint ages[8] = {20, 22, 18, 35, 48, 26, 87, 70};\n\nfloat avg, sum = 0;\nint i;\n\n// Get the length of the array\nint length = sizeof(ages) / sizeof(ages[0]);\n\n// Loop through the elements of the array\nfor (int age : ages) {\nsum += age;\n}\n\n// Calculate the average by dividing the sum by the length\navg = sum / length;\n\n// Print the average\ncout << \"The average age is: \" << avg << \"\\n\";",
        "// An array storing different ages\nint ages[8] = {20, 22, 18, 35, 48, 26, 87, 70};\n\nint i;\n\n// Get the length of the array\nint length = sizeof(ages) / sizeof(ages[0]);\n\n// Create a variable and assign the first array element of ages to it\nint lowestAge = ages[0];\n\n// Loop through the elements of the ages array to find the lowest age\nfor (int age : ages) {\nif (lowestAge > age) {\nlowestAge = age;\n}\n}\n\n// Print the lowest age\ncout << \"The lowest age is: \" << lowestAge << \"\\n\";",
        "// Declare a structure named \"car\"\nstruct car {\nstring brand;\nstring model;\nint year;\n};\n\nint main() {\n// Create a car structure and store it in myCar1;\ncar myCar1;\nmyCar1.brand = \"BMW\";\nmyCar1.model = \"X5\";\nmyCar1.year = 1999;\n\n// Create another car structure and store it in myCar2;\ncar myCar2;\nmyCar2.brand = \"Ford\";\nmyCar2.model = \"Mustang\";\nmyCar2.year = 1969;\n\n// Print the structure members\ncout << myCar1.brand << \" \" << myCar1.model << \" \" << myCar1.year << \"\\n\";\ncout << myCar2.brand << \" \" << myCar2.model << \" \" << myCar2.year << \"\\n\";\n\nreturn 0;\n}",
        "// Function to convert Fahrenheit to Celsius\nfloat toCelsius(float fahrenheit) {\nreturn (5.0 / 9.0) * (fahrenheit - 32.0);\n}\n\nint main() {\n// Set a fahrenheit value\nfloat f_value = 98.8;\n\n// Call the function with the fahrenheit value\nfloat result = toCelsius(f_value);\n\n// Print the fahrenheit value\ncout << \"Fahrenheit: \" << f_value << \"\\n\";\n\n// Print the result\ncout << \"Convert Fahrenheit to Celsius: \" << result << \"\\n\";\n\nreturn 0;\n}",
        "int doubleGame(int x) {\nreturn x * 2;\n}\n\nint main() {\nfor (int i = 1; i <= 5; i++) {\ncout << \"Double of \" << i << \" is \" << doubleGame(i) << endl;\n}\nreturn 0;\n}"
      ]
    },
    {
      "title": "C++ Online Compiler",
      "summary": "C++ Compiler (Editor)\nWith our online C++ compiler, you can edit C++ code, and view the result in your browser.\nExample\nClick on the \"Try it Yourself\" button to see how it works.\nC++ Compiler Explained\nThe window to the left is editable - edit the code and click on the \"Run\" button to view the result in the right window.\nThe icons are explained in the table below:\nIf you don't know C++, we suggest that you read our C++ Tutorial from scratch.",
      "examples": [
        "#include <iostream>\nusing namespace std;\n\nint main() {\ncout << \"Hello World!\";\nreturn 0;\n}",
        "Hello World!"
      ]
    },
    {
      "title": "C++ Exercises",
      "summary": "Exercises\nTest your C++ skills with exercises from all categories:\nSyntax\nStatements\nOutput Text\nOutput Numbers\nNew Lines\nComments\nVariables\nMultiple Variables\nIdentifiers\nConstants\nUser Input\nData Types\nNumeric Data Types\nBoolean Data Types\nCharacter Data Types\nString Data Types\nThe auto Keyword\nArithmetic Operators\nAssignment Operators\nComparison Operators\nLogical Operators\nStrings\nString Concatenation\nNumbers and Strings\nString Length\nAccess Strings\nSpecial Characters\nUser Input Strings\nString Namespace\nC-Style Strings\nMath\nBooleans\nBoolean Expressions\nIf\nElse\nElse If\nShort Hand If Else\nSwitch\nWhile Loop\nDo/While Loop\nFor Loop\nNested Loops\nThe foreach Loop\nBreak and Continue\nArrays\nArrays and Loops\nOmit Array Size\nGet Array Size\nMulti-Dimensional Arrays\nStructures\nEnums\nReferences\nMemory Address\nPointers\nDereference\nModify Pointers\nMemory Management\nNew and Delete\nFunctions\nFunction Parameters\nDefault Parameters\nMultiple Parameters\nReturn Values\nPass By Reference\nPass Arrays\nPass Structures\nFunction Overloading\nScope\nRecursion\nLambda\nOOP\nClasses and Objects\nClass Methods\nConstructors\nConstructor Overloading\nAccess Specifiers\nEncapsulation\nFriend Functions\nInheritance\nMultilevel Inheritance\nMultiple Inheritance\nInheritance Access\nPolymorphism\nTemplates\nFiles\nDate\nErrors\nDebugging\nExceptions\nData Structures and STL\nVectors\nList\nStacks\nQueues\nDeque\nSets\nMaps\nIterators\nAlgorithms\nLog in to track your progress\nIf you haven't already, sign up to become a W3Schooler, and get points for every exercise you complete.\nAs a logged-in W3Schools user you will have access to many features like having your own web page, track your learning progress, receive personal guided paths, and more.\nThe Exercise\nThe exercises are a mix of \"multiple choice\" and \"fill in the blanks\" questions. There are between 3 and 9 questions in each category. The answer can be found in the corresponding tutorial chapter. If you're stuck, or answer wrong, you can try again or hit the \"Show Answer\" button to see the correct answer.\nKickstart your career\nGet certified by completing the C++ course",
      "examples": []
    },
    {
      "title": "C++ Quiz",
      "summary": "You can test your C++ skills with W3Schools' Quiz.\nThe Test\nThe test contains 25 questions and there is no time limit.\nThe test is not official, it's just a nice way to see how much you know, or don't know, about C++.\nCount Your Score\nYou will get 1 point for each correct answer. At the end of the Quiz, your total score will be displayed. Maximum score is 25 points.\nStart the Quiz\nGood luck!\nStart the C++ Quiz â¯\nIf you don't know C++, we suggest that you read our C++ Tutorial from scratch.\nKickstart your career\nGet certified by completing the C++ course",
      "examples": []
    },
    {
      "title": "C++ Syllabus",
      "summary": "Introduction\nThe W3Schools C++ Tutorial is comprehensive and beginner-friendly.\nIt will give you a fundamental knowledge of C++.\nIt is designed for beginners and requires no prior experience with programming.\nThe content has been carefully made to be bite-sized, simple, and easy to understand.\nThe content has been proven by millions of users over the years. It is updated and improved frequently.\nThe syllabus outline and its sequence are structured so you can learn C++ step by step, from the introduction to creating your first application with C++.\nGet Started With C++ Â»\nLearning Outcomes\nUnderstand what C++ is and why it is used.\nUse cout to print text and cin for user input.\nCreate and use variables with different data types.\nUse if statements and loops like for and while.\nWrite functions and use arrays.\nWork with C++ strings.\nUnderstand basic object-oriented concepts like classes and objects.\nIdentify errors and debug your code.\nWrite and run C++ programs.\nNote: Are you a teacher teaching C++ programming? W3Schools Academy is a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more about Academy here.\nWhich Subjects Are C++ Relevant For?\nComputer Science:\nC++ is used to teach programming concepts, algorithms, and software development.\nMathematics:\nC++ can be used for algorithms and solving math problems.\nEngineering:\nC++ is useful for building programs that help with engineering projects, like robots and machines.\nPhysics:\nC++ is used for running simulations and solving equations in physics.\nGame Development and Graphics:\nC++ is used to create games and animations.\nRobotics:\nC++ can be used to program robots to move and react to their environment.\nInformation Technology (IT):\nC++ is used to understand how software communicates to hardware and how systems work.\nC++ in general can help to learn problem-solving, logic, and programming.\nGet Started\nActivities\nIn this tutorial we offer different activities for you to learn C++ for free:\nLessons\nExercises\nQuizzes\nSign in to Track Progress\nYou can also create a free account to track your progress.\nAs a signed-in user, you get access to features such as:\nLearning paths\nSandbox and lab environments\nAchievements\nAnd much more!\nSign Up - It's free\nOverview of the Modules\nC++ Introduction\nC++ Get Started\nC++ Syntax\nC++ Output\nC++ Comments\nC++ Variables\nC++ User Input\nC++ Data Types\nC++ Operators\nC++ Strings\nC++ Math\nC++ Booleans\nC++ If...Else (Conditions)\nC++ Switch\nC++ While Loop\nC++ For Loop\nC++ Break/Continue\nC++ Arrays\nC++ Structures\nC++ Enums\nC++ References\nC++ Pointers\nC++ Functions\nC++ Function Parameters\nC++ Function Overloading\nC++ Scope\nC++ Recursion\nC++ OOP (Object-Oriented Programming)\nC++ Classes/Objects\nC++ Class Methods\nC++ Constructors\nC++ Access Specifiers\nC++ Encapsulation\nC++ Inheritance\nC++ Polymorphism\nC++ Files\nC++ Exceptions\nC++ Date\nC++ Data Structures and STL\nC++ Vectors\nC++ List\nC++ Stacks\nC++ Queues\nC++ Deque\nC++ Sets\nC++ Maps\nC++ Iterators\nC++ Algorithms\nGet Started\nSandbox and Lab Environment\nC++, like any other coding language, is best learned by working hands-on with code.\nEasily try code with our \"Try it Yourself\" editor.\nHere, you can edit C++ code and view the result:\nExample\nC++ Certification\nW3Schools offers an end-of-pathway certification program.\nHere you can take exams to get certified.\nThe C++ exam is a test that summarizes the W3Schools C++ syllabus.\nAfter passing the exam you get the \"Certified C++ Developer\" Certification.\nThere are two different types of certifications:\nNon-adaptive\nAdaptive\nThe non-adaptive is pass or no pass.\nThe adaptive certification is adaptive and graded; students will get a grade from intermediate, advanced to professional.\nBuy Certificate Â»\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach C++?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo Â»",
      "examples": [
        "#include <iostream>\nusing namespace std;\n\nint main() {\ncout << \"Hello World!\";\nreturn 0;\n}"
      ]
    },
    {
      "title": "C++ Study Plan",
      "summary": "Introduction\nThe C++ study plan helps you teach your students C++ step-by-step.\nCreating a study plan for C++ is easy.\nYou can use a pre-built study plan or customize it.\nStudents have different skill levels. The study plans can be customized to ensure that everyone is challenged.\nSave time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of C++ to the final exam.\nW3Schools Academy\nThis study plan is a feature of W3Schools Academy.\nW3Schools Academy is a platform that has everything you need to teach coding, all in one place.\nIt offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom.\nYou need to have an active subscription to access the study plan feature. There are two different subscription tiers:\nEssentials ($1.99 / month per student)\nFull Access ($5.99 / month per student)\nCalculate your price and order here.\nLearn More Â»\nAcademy also offer other features such as:\nManaging your classroom\nTracking of student progress and reports\nLabs, assignments, and code challenges (prebuilt challenges or create your own ones)\nAuto-grading\nTeaching materials\nCertification exams\nGet a free demo Â»\nTeacher Materials\nW3Schools has everything you need to teach C++.\nThe C++ training materials is available for you to include and use in your study plan:\nW3Schools C++ Tutorial\nC++ Exercises\nC++ Quiz\nC++ Challenges (Coding challenges)\nC++ Certification Exam (End of Pathway Exam)\nC++ Syllabus\nWith the C++ Syllabus, your students will start with the basics, like understanding variables, data types, and simple input/output, and move to more advanced topics, like object-oriented programming, working with classes, and managing memory using pointers. Each chapter has examples, try-it-yourself sections, exercises, and quizzes to make learning easy, interactive, and fun.\nRead more about C++ Syllabus.\nStudy Plan Overview\nThe study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level.\nLearning Paths\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nInteractive Content\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTimeline and Pace\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nTrack Student Progress\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nEnd of Pathway Exam\nThe C++ study plan aligns with the C++ Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the C++ Tutorial.\nYou get reports of the students' results.\nThe C++ study plan aligns with the C++ Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the C++ Tutorial.\nYou get reports of the students' results.\nAccessibility\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nLearn More Â»\nSample Study Plan\nYou choose the timeline and pace of your study plans.\nSchools have different preferences.\nSome would like more intensive pace, e.g. 5 weeks, others 12 or more weeks.\nIt is completely up to you.\nFor example, this is how a 5-week C++ study plan could look like:\nWeek 1: Introduction, Output & Input\nWeek 2: Variables, Data Types\nWeek 3: Operators, Strings, Math, Booleans\nWeek 4: Conditions, Loop, Arrays, Structures, References\nWeek 5: Pointers, Functions, Classes, Exceptions, Inheritance & Polymorphism, Date, Files, Data Structures, C++ Certification Exam\nImage of Sample C++ study plan:\nReady to get started?\nStart with C++ Study Plans today.\nGet Started Â»\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach C++ programming?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo Â»",
      "examples": []
    },
    {
      "title": "C++ Certification",
      "summary": "W3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate Â»\nW3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate Â»\nWho Should Consider Getting Certified?\nAny student or professional within the digital industry.\nCertifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market.\nW3Schools is Trusted by Top Companies\nW3Schools has over two decades of experience with teaching coding online.\nOur certificates are recognized and valued by companies looking to employ skilled developers.\nSave Time and Money\nShow the world your coding skills by getting a certification.\nThe prices is a small fraction compared to the price of traditional education.\nDocument and validate your competence by getting certified!\nExam overview\nFee: 95 USD\nAchievable certification levels:\nIntermediate (40%)\nAdvanced (75%)\nProfessional (90%)\nNumber of questions:\nAdaptive, 60 on average\nRequirement to pass:\nMinimum 40% - Intermediate level\nTime limit: 60 minutes\nNumber of attempts to pass: 3\nExam deadline: None\nCertification Expiration: None\nFormat: Online, multiple choice\nRegister now Â»\nAdvance Faster in Your Career\nGetting a certificate proves your commitment to upgrading your skills.\nThe certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on.\nIt gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nKnowledge is power, especially in the current job market.\nDocumentation of your skills enables you to advance your career or helps you to start a new one.\nHow Does It Work?\nStudy for free at W3Schools.com\nStudy at your own speed\nTest your skills with W3Schools online quizzes\nApply for your certificate by paying an exam fee\nTake your exam online, at any time, and from any location\nGet Your Certificate and Share It With The World\nExample certificate:\nEach certificate gets a unique link that can be shared with others.\nValidate your certification with the link or QR code.\nCheck how it looks like in this Example.\nShare your certificate on Linked in the Certifications section in just one click!\nDocument Your Skills\nGetting a certificate proves your commitment to upgrade your skills, gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nGet Your Certificate Â»\nLooking to add multiple users?\nAre you an educator, manager or business owner looking for courses or certifications?\nWe are working with schools, companies and organizations from all over the world.\nGet courses and/or certifications for your team here.",
      "examples": []
    }
  ],
  "glossary": [
    "access specifiers",
    "access strings",
    "assignment",
    "backend",
    "boolean expressions",
    "booleans",
    "c++  algorithm",
    "c++  cmath",
    "c++  cstring",
    "c++  ctime",
    "c++  fstream",
    "c++  iostream",
    "c++  string",
    "c++  vector",
    "c++ algorithms",
    "c++ arrays",
    "c++ booleans",
    "c++ classes",
    "c++ comments",
    "c++ compiler",
    "c++ constructors",
    "c++ date",
    "c++ debugging",
    "c++ deque",
    "c++ encapsulation",
    "c++ enums",
    "c++ errors",
    "c++ exceptions",
    "c++ exercises",
    "c++ files",
    "c++ functions",
    "c++ home",
    "c++ inheritance",
    "c++ intro",
    "c++ iterators",
    "c++ keywords",
    "c++ lambda",
    "c++ list",
    "c++ maps",
    "c++ math",
    "c++ namespaces",
    "c++ oop",
    "c++ operators",
    "c++ output",
    "c++ pointers",
    "c++ polymorphism",
    "c++ projects",
    "c++ queues",
    "c++ quiz",
    "c++ recursion",
    "c++ reference",
    "c++ references",
    "c++ scope",
    "c++ sets",
    "c++ stacks",
    "c++ strings",
    "c++ structures",
    "c++ switch",
    "c++ syllabus",
    "c++ syntax",
    "c++ templates",
    "c++ variables",
    "c++ vectors",
    "characters",
    "comparison",
    "concatenation",
    "constants",
    "constructor overloading",
    "default parameter",
    "dereferencing",
    "else",
    "else if",
    "exercises",
    "free",
    "identifiers",
    "javascript",
    "logical",
    "memory address",
    "modify pointers",
    "multidimensional arrays",
    "multilevel inheritance",
    "multiple inheritance",
    "multiple parameters",
    "multiple variables",
    "nested loops",
    "new lines",
    "note",
    "numbers",
    "omitting namespace",
    "pass arrays",
    "pass structures",
    "print numbers",
    "programs",
    "references",
    "report error",
    "return values",
    "special characters",
    "statements",
    "string length",
    "strings",
    "virtual functions",
    "w3schools spaces"
  ]
}