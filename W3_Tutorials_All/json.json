{
  "course_name": "JSON",
  "description": "The programming language of the Web. JavaScript is easy to learn. This tutorial covers everything from basic JavaScript up to the latest 2025 version. With our Try it Yourself editor, you can edit the source code and view the result. Try it Yourself » We recommend reading this tutorial, in the sequence listed in the menu. If you have a large screen, the menu will always be present on the left. If you have a small screen, open the menu by clicking the top menu sign ☰. Examples are better than 1000 words. Examples are often easier to understand than text explanations. This tutorial supplements all explanations with clarifying Try it Yourself examples. If you try all the examples, you will learn a lot about JavaScript, in a very short time! JavaScript is one of the 3 languages all web developers must learn: 1. HTML to define the content of web pages 2. CSS to specify the layout of web pages 3. JavaScript to program the behavior of web pages",
  "course_summary": [
    {
      "title": "JavaScript Introduction",
      "summary": "What is JavaScript?\nJavaScript is the programming language of the web.\nIt can calculate, manipulate and validate data.\nIt can update and change both HTML and CSS.\nWhy Study JavaScript?\nJavaScript is one of the 3 languages all web developers must learn:\n1. HTML to define the content of web pages\n2. CSS to specify the layout of web pages\n3. JavaScript to program the behavior of web pages\nJavaScript Can Change HTML Content\nOne of many JavaScript HTML methods is getElementById().\nThe example below \"finds\" an HTML element (with id=\"demo\"), and changes the element content (innerHTML) to \"Hello JavaScript\":\nExample\nJavaScript accepts both double and single quotes:\nExample\nJavaScript Can Change HTML Attribute Values\nIn this example JavaScript changes the value of the src (source) attribute of an <img> tag:\nThe Light Bulb\nTry it Yourself »\nREMOVE ADS\nJavaScript Can Change HTML Styles (CSS)\nChanging the style of an HTML element, is a variant of changing an HTML attribute:\nExample\nJavaScript Can Hide HTML Elements\nHiding HTML elements can be done by changing the display style:\nExample\nJavaScript Can Show HTML Elements\nShowing hidden HTML elements can also be done by changing the display style:\nExample\nDid You Know?\nJavaScript and Java are completely different languages, both in concept and design.\nJavaScript was invented by Brendan Eich in 1995, and became an ECMA standard in 1997.\nECMA-262 is the official name of the standard. ECMAScript is the official name of the language.\nVideo: JavaScript Introduction",
      "examples": [
        "document.getElementById(\"demo\").innerHTML = \"Hello JavaScript\";",
        "document.getElementById('demo').innerHTML = 'Hello JavaScript';",
        "document.getElementById(\"demo\").style.fontSize = \"35px\";",
        "document.getElementById(\"demo\").style.display = \"none\";",
        "document.getElementById(\"demo\").style.display = \"block\";",
        "getElementById()",
        "src",
        "<img>",
        "display"
      ]
    },
    {
      "title": "JavaScript Where To",
      "summary": "The <script> Tag\nIn HTML, JavaScript code is inserted between <script> and </script> tags.\nExample\nTry it Yourself »\nOld JavaScript examples may use a type attribute: <script type=\"text/javascript\">.\nThe type attribute is not required. JavaScript is the default scripting language in HTML.\nJavaScript Functions and Events\nA JavaScript function is a block of JavaScript code, that can be executed when \"called\" for.\nFor example, a function can be called when an event occurs, like when the user clicks a button.\nYou will learn much more about functions and events in later chapters.\nJavaScript in <head> or <body>\nYou can place any number of scripts in an HTML document.\nScripts can be placed in the <body>, or in the <head> section of an HTML page, or in both.\nJavaScript in <head>\nIn this example, a JavaScript function is placed in the <head> section of an HTML page.\nThe function is invoked (called) when a button is clicked:\nExample\n<h2>Demo JavaScript in Head</h2>\n\n<p id=\"demo\">A Paragraph</p>\n<button type=\"button\" onclick=\"myFunction()\">Try it</button>\n</body>\n</html>\nREMOVE ADS\nJavaScript in <body>\nIn this example, a JavaScript function is placed in the <body> section of an HTML page.\nThe function is invoked (called) when a button is clicked:\nExample\nPlacing scripts at the bottom of the <body> element improves the display speed, because script interpretation slows down the display.\nExternal JavaScript\nScripts can also be placed in external files:\nExternal file: myScript.js\nExternal scripts are practical when the same code is used in many different web pages.\nJavaScript files have the file extension .js.\nTo use an external script, put the name of the script file in the src (source) attribute of a <script> tag:\nExample\nYou can place an external script reference in <head> or <body> as you like.\nThe script will behave as if it was located exactly where the <script> tag is located.\nExternal scripts cannot contain <script> tags.\nExternal JavaScript Advantages\nPlacing scripts in external files has some advantages:\nIt separates HTML and code\nIt makes HTML and JavaScript easier to read and maintain\nCached JavaScript files can speed up page loads\nTo add several script files to one page  - use several script tags:\nExample\nExternal References\nAn external script can be referenced in 3 different ways:\nWith a full URL (a full web address)\nWith a file path (like /js/)\nWithout any path\nThis example uses a full URL to link to myScript.js:\nExample\nTry it Yourself »\nThis example uses a file path to link to myScript.js:\nExample\nTry it Yourself »\nThis example uses no path to link to myScript.js:\nExample\nTry it Yourself »\nYou can read more about file paths in the chapter HTML File Paths.\nVideo: JavaScript Where to?",
      "examples": [
        "<script>\ndocument.getElementById(\"demo\").innerHTML = \"My First JavaScript\";\n</script>",
        "<!DOCTYPE html>\n<html>\n<head>\n<script>\nfunction myFunction() {\ndocument.getElementById(\"demo\").innerHTML = \"Paragraph changed.\";\n}\n</script>\n</head>\n<body>\n<h2>Demo JavaScript in Head</h2>\n\n<p id=\"demo\">A Paragraph</p>\n<button type=\"button\" onclick=\"myFunction()\">Try it</button>\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<body>\n\n<h2>Demo JavaScript in Body</h2>\n\n<p id=\"demo\">A Paragraph</p>\n\n<button type=\"button\" onclick=\"myFunction()\">Try it</button>\n\n<script>\nfunction myFunction() {\ndocument.getElementById(\"demo\").innerHTML = \"Paragraph changed.\";\n}\n</script>\n\n</body>\n</html>",
        "function myFunction() {\ndocument.getElementById(\"demo\").innerHTML = \"Paragraph changed.\";\n}",
        "<script src=\"myScript.js\"></script>",
        "<script src=\"myScript1.js\"></script>\n<script src=\"myScript2.js\"></script>",
        "<script src=\"https://www.w3schools.com/js/myScript.js\"></script>",
        "<script src=\"/js/myScript.js\"></script>",
        "<script>",
        "</script>",
        "function",
        "<body>",
        "<head>",
        "src"
      ]
    },
    {
      "title": "JavaScript Output",
      "summary": "JavaScript Display Possibilities\nJavaScript can \"display\" data in different ways:\nWriting into an HTML element, using innerHTML or innerText.\nWriting into the HTML output using document.write().\nWriting into an alert box, using window.alert().\nWriting into the browser console, using console.log().\nUsing innerHTML\nTo access an HTML element, you can use the document.getElementById(id) method.\nUse the id attribute to identify the HTML element.\nThen use the innerHTML property to change the HTML content of the HTML element:\nExample\nNote\nChanging the innerHTML property of an HTML element is the most common way to display data in HTML.\nUsing innerText\nTo access an HTML element, use the document.getElementById(id) method.\nThen use the innerText property to change the inner text of the HTML element:\nExample\nNote\nUse innerHTML when you want to change an HTML element.\nUse innerText when you only want to change the plain text.\nUsing document.write()\nFor testing purposes, it is convenient to use document.write():\nExample\nUsing document.write() after an HTML document is loaded, will delete all existing HTML:\nExample\nThe document.write() method should only be used for testing.\nREMOVE ADS\nUsing window.alert()\nYou can use an alert box to display data:\nExample\nYou can skip the window keyword.\nIn JavaScript, the window object is the global scope object. This means that variables, properties, and methods by default belong to the window object. This also means that specifying the window keyword is optional:\nExample\nUsing console.log()\nFor debugging purposes, you can call the console.log() method in the browser to display data.\nYou will learn more about debugging in a later chapter.\nExample\nJavaScript Print\nJavaScript does not have any print object or print methods.\nYou cannot access output devices from JavaScript.\nThe only exception is that you can call the window.print() method in the browser to print the content of the current window.\nExample\nVideo: JavaScript Output",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<body>\n\n<h1>My First Web Page</h1>\n<p>My First Paragraph</p>\n\n<p id=\"demo\"></p>\n\n<script>\ndocument.getElementById(\"demo\").innerHTML = \"<h2>Hello World</h2>\";\n</script>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<body>\n\n<h1>My First Web Page</h1>\n<p>My First Paragraph</p>\n\n<p id=\"demo\"></p>\n\n<script>\ndocument.getElementById(\"demo\").innerText = \"Hello World\";\n</script>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<body>\n\n<h1>My First Web Page</h1>\n<p>My first paragraph.</p>\n\n<script>\ndocument.write(5 + 6);\n</script>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<body>\n\n<h1>My First Web Page</h1>\n<p>My first paragraph.</p>\n\n<button type=\"button\" onclick=\"document.write(5 + 6)\">Try it</button>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<body>\n\n<h1>My First Web Page</h1>\n<p>My first paragraph.</p>\n\n<script>\nwindow.alert(5 + 6);\n</script>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<body>\n\n<h1>My First Web Page</h1>\n<p>My first paragraph.</p>\n\n<script>\nalert(5 + 6);\n</script>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<body>\n\n<script>\nconsole.log(5 + 6);\n</script>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<body>\n\n<button onclick=\"window.print()\">Print this page</button>\n\n</body>\n</html>",
        "innerHTML",
        "innerText",
        "document.write()",
        "window.alert()",
        "console.log()",
        "document.getElementById(id)",
        "id",
        "window",
        "window.print()"
      ]
    },
    {
      "title": "JavaScript Syntax",
      "summary": "Syntax Rules\nJavaScript Values\nThe JavaScript syntax defines two types of values:\nLiterals (Fixed values)\nVariables (Variable values)\nJavaScript Literals\nThe most important syntax rules for literals (fixed values) are:\nNumbers are written with or without decimals:\nExample\nStrings are text, written within double or single quotes:\nExample\nJavaScript Keywords\nJavaScript keywords are used to defines actions to be performed.\nThe let and const keywords create variables:\nExample\nNote\nJavaScript keywords are case-sensitive.\nJavaScript does not interpret LET or Let as the keyword let.\nJavaScript Variables\nVariables are containers for storing data values.\nVariables must be identified with unique names.\nExample\nJavaScript Identifiers\nAn identifier is the name you give to a variable.\nRules for identifiers:\nMust start with a letter, _, or $\nCan contain digits after the first character\nCannot be a reserved keyword (let, const, if, etc.)\nAre case-sensitive\nJavaScript Operators\nJavaScript assignment operators (=) assign values to variables:\nExample\nJavaScript uses arithmetic operators ( + - * / ) to compute values:\nExample\nJavaScript Expressions\nAn expression is a combination of values, variables, and operators, which computes to a value.\nExamples\n(5 + 6) * 10 evaluates to 110:\nExpressions can also contain variable:\n\"John\" + \" \" + \"Doe\", evaluates to \"John Doe\":\nREMOVE ADS\nJavaScript is Case Sensitive\nJavaScript identifiers are case sensitive.\nThe variables lastName and lastname, are different variables:\nExample\nJavaScript and Camel Case\nHistorically, programmers have used different ways of joining multiple words into one variable name:\nHyphens:\nfirst-name, last-name, master-card, inter-city.\nHyphens are not allowed in JavaScript. They are reserved for subtractions.\nUnderscore:\nfirst_name, last_name, master_card, inter_city.\nUpper Camel Case (Pascal Case):\nFirstName, LastName, MasterCard, InterCity.\nLower Camel Case:\nfirstName, lastName, masterCard, interCity.\nJavaScript programmers tend to use lower camel case.\nVideo: JavaScript Syntax",
      "examples": [
        "// How to Declare variables:\nlet x = 5;\nlet y = 6;\n\n// How to Compute values:\nlet z = x + y;\n\n// I am a Comment. I do Nothing",
        "10.50\n\n1001",
        "\"John Doe\"\n\n'John Doe'",
        "let x = 5;\n\nconst fname = \"John\";",
        "// Define x as a variable\nlet x;\n\n// Assign the value 6 to x\nx = 6;",
        "let x = 5;\nlet y = 6;\nlet sum = x + y;",
        "5 * 10",
        "(5 + 6) * 10",
        "x * 10",
        "\"John\" + \" \" + \"Doe\"",
        "let lastName = \"Doe\";\nlet lastname = \"Peterson\";",
        "let",
        "const",
        "+",
        "-",
        "*",
        "/",
        "lastName",
        "lastname"
      ]
    },
    {
      "title": "JavaScript Statements",
      "summary": "Example\nJavaScript Programs\nA computer program is a list of \"instructions\" to be \"executed\" by a computer.\nThese programming instructions are called statements.\nMost JavaScript programs contain many statements.\nThe statements are executed, one by one, in the same order as they are written.\nNote\nIn HTML, JavaScript programs are executed by the web browser.\nJavaScript Statements\nJavaScript statements are composed of:\nValues, Operators, Expressions, Keywords, and Comments.\nThis statement tells the browser to write \"Hello Dolly.\" inside an HTML element with id=\"demo\":\nExample\nNote\nJavaScript programs (and JavaScript statements) are often called JavaScript code.\nSemicolons ;\nSemicolons separate JavaScript statements.\nAdd a semicolon at the end of each executable statement:\nExamples\nWhen separated by semicolons, multiple statements on one line are allowed:\nOn the web, you might see examples without semicolons.\nEnding statements with semicolon is not required, but highly recommended.\nREMOVE ADS\nJavaScript White Space\nJavaScript ignores multiple spaces. You can add white space to your script to make it more readable.\nThe following lines are equivalent:\nA good practice is to put spaces around operators ( = + - * / ):\nJavaScript Line Length and Line Breaks\nFor best readability, programmers often like to avoid code lines longer than 80 characters.\nIf a JavaScript statement does not fit on one line, the best place to break it is after an operator:\nExample\nJavaScript Code Blocks\nJavaScript statements can be grouped together in code blocks, inside curly brackets {...}.\nThe purpose of code blocks is to define statements to be executed together.\nOne place you will find statements grouped together in blocks, is in JavaScript functions:\nExample\nIn this tutorial we use 2 spaces of indentation for code blocks.\nYou will learn more about functions later in this tutorial.\nJavaScript Keywords\nJavaScript statements often start with a keyword to identify the JavaScript action to be performed.\nOur Reserved Words Reference lists all JavaScript keywords.\nHere is a list of some of the keywords you will learn about in this tutorial:\nNote\nJavaScript keywords are reserved words. Reserved words cannot be used as names for variables.\nVideo: JavaScript Statements",
      "examples": [
        "let x, y, z;    // Statement 1\nx = 5;          // Statement 2\ny = 6;          // Statement 3\nz = x + y;      // Statement 4",
        "document.getElementById(\"demo\").innerHTML = \"Hello Dolly.\";",
        "let a, b, c;  // Declare 3 variables\na = 5;        // Assign the value 5 to a\nb = 6;        // Assign the value 6 to b\nc = a + b;    // Assign the sum of a and b to c",
        "a = 5; b = 6; c = a + b;",
        "let person = \"Hege\";\nlet person=\"Hege\";",
        "let x = y + z;",
        "document.getElementById(\"demo\").innerHTML =\n\"Hello Dolly!\";",
        "function myFunction() {\ndocument.getElementById(\"demo1\").innerHTML = \"Hello Dolly!\";\ndocument.getElementById(\"demo2\").innerHTML = \"How are you?\";\n}"
      ]
    },
    {
      "title": "JavaScript Comments",
      "summary": "JavaScript comments can be used to explain JavaScript code, and to make it more readable.\nJavaScript comments can also be used to prevent execution, when testing alternative code.\nSingle Line Comments\nSingle line comments start with //.\nAny text between // and the end of the line will be ignored by JavaScript (will not be executed).\nThis example uses a single-line comment before each code line:\nExample\nThis example uses a single line comment at the end of each line to explain the code:\nExample\nMulti-line Comments\nMulti-line comments start with /* and end with */.\nAny text between /* and */ will be ignored by JavaScript.\nThis example uses a multi-line comment (a comment block) to explain the code:\nExample\nIt is most common to use single line comments.\nBlock comments are often used for formal documentation.\nREMOVE ADS\nUsing Comments to Prevent Execution\nUsing comments to prevent execution of code is suitable for code testing.\nAdding // in front of a code line changes the code lines from an executable line to a comment.\nThis example uses // to prevent execution of one of the code lines:\nExample\nThis example uses a comment block to prevent execution of multiple lines:\nExample\nVideo: JavaScript Comments",
      "examples": [
        "// Change heading:\ndocument.getElementById(\"myH\").innerHTML = \"My First Page\";\n\n// Change paragraph:\ndocument.getElementById(\"myP\").innerHTML = \"My first paragraph.\";",
        "let x = 5;      // Declare x, give it the value of 5\nlet y = x + 2;  // Declare y, give it the value of x + 2",
        "/*\nThe code below will change\nthe heading with id = \"myH\"\nand the paragraph with id = \"myP\"\nin my web page:\n*/\ndocument.getElementById(\"myH\").innerHTML = \"My First Page\";\ndocument.getElementById(\"myP\").innerHTML = \"My first paragraph.\";",
        "//document.getElementById(\"myH\").innerHTML = \"My First Page\";\ndocument.getElementById(\"myP\").innerHTML = \"My first paragraph.\";",
        "/*\ndocument.getElementById(\"myH\").innerHTML = \"My First Page\";\ndocument.getElementById(\"myP\").innerHTML = \"My first paragraph.\";\n*/",
        "//",
        "/*",
        "*/"
      ]
    },
    {
      "title": "JavaScript Variables",
      "summary": "Variables = Data Containers\nJavaScript variables are containers for data.\nJavaScript variables can be declared in 4 ways:\nModern JavaScript\nUsing let\nUsing const\nOlder JavaScript\nUsing var (Not Recommended)\nAutomatically (Not Recommended)\nExample using let\nExample using const\nFrom the examples you can guess:\nx contains (or stores) the value 5\ny contains (or stores) the value 6\nz contains (or stores) the value 11\nVariables are labels for data values.\nVariables are containers for storing data.\nJavaScript Identifiers\nVariables are identified with unique names called identifiers.\nNames can be short like x, y, z.\nNames can be descriptive age, sum, carName.\nThe rules for constructing names (identifiers) are:\nNames can contain letters, digits, underscores, and dollar signs.\nNames must begin with a letter, a $ sign or an underscore (_).\nNames are case sensitive (X is different from x).\nReserved words (JavaScript keywords) cannot be used as names.\nNote\nNumbers are not allowed as the first character in names.\nThis way JavaScript can easily distinguish identifiers from numbers.\nJavaScript Underscore (_)\nJavaScript treats underscore as a letter.\nIdentifiers containing _ are valid variable names:\nExample\nA convention among professional programmers is to start a name with underscore for \"private\" variables.\nJavaScript Dollar Sign $\nJavaScript also treats a dollar sign as a letter.\nIdentifiers containing $ are valid variable names:\nExample\nUsing the $ is not very common in JavaScript, but professional programmers often use it as an alias for the main function in JavaScript libraries.\nDeclaring JavaScript Variables\nCreating a variable in JavaScript is called declaring a variable.\nYou declare a JavaScript variable with the let keyword or the const keyword.\nDeclaring a Variable Using let\nAfter the declaration, the variable has no value (technically it is undefined).\nTo assign a value to the variable, use the equal sign:\nMost often you will assign a value to the variable when you declare it:\nExample\nCreate a variable called carName and assign the value \"Volvo\" to it:\nDeclaring a Variable Using const\nAlways use const if the value should not be changed\nA Mixed Example\nThe two variables price1 and price2 are declared with the const keyword.\nThe values of price1 and price2 cannot be changed.\nThe variable total is declared with the let keyword.\nThe value of total can be changed.\nDeclaring a Variable Automatically\nUndeclared variables are automatically declared when first used:\nExample (Not Recommended)\nIt's a good programming practice to declare all variables at the beginning of a script.\nDeclaring a Variable Using var\nThe var keyword was used in all JavaScript code before 2015.\nThe let and const keywords were new to JavaScript in 2015.\nUsing var (Not Recommended)\nWhen to Use var, let, or const?\n1. Always declare variables\n2. Always use const if the value should not be changed\n3. Always use const if the type should not be changed (Arrays and Objects)\n4. Only use let if you cannot use const\n5. Never use var if you can use let or const.\nJavaScript Data Types\nJavaScript variables can hold 8 datatypes, but for now, just think of numbers and strings.\nStrings are text written inside quotes.\nNumbers are written without quotes.\nIf you put a number in quotes, it will be treated as a text string.\nExample\nREMOVE ADS\nOne Statement, Many Variables\nYou can declare many variables in one statement.\nStart the statement with let or constand separate the variables by comma:\nExample\nA declaration can span multiple lines:\nExample\nThe Assignment Operator\nIn JavaScript, the equal sign (=) is an assignment operator, not an equal to operator.\nThis is different from algebra. The following does not make sense in algebra:\nIn JavaScript, however, it makes perfect sense: it assigns the value of x + 5 to x.\n(It calculates the value of x + 5 and puts the result into x. The value of x is incremented by 5.)\nNote\nThe equal to operator is written like == in JavaScript.\nJavaScript Arithmetic\nAs with algebra, you can do arithmetic with JavaScript variables, using operators like = and +:\nExample\nYou can also add strings, but strings will be concatenated:\nExample\nNote\nIf you put a number in quotes, the rest of the numbers will be treated as strings, and concatenated.\nExamples\nVideo: JavaScript Variables",
      "examples": [
        "let x = 5;\nlet y = 6;\nlet z = x + y;",
        "const x = 5;\nconst y = 6;\nconst z = x + y;",
        "let _lastName = \"Johnson\";\nlet _x = 2;\nlet _100 = 5;",
        "let $ = \"Hello World\";\nlet $$$ = 2;\nlet $myMoney = 5;",
        "let carName;",
        "carName = \"Volvo\";",
        "let carName = \"Volvo\";",
        "const carName = \"Volvo\";",
        "const price1 = 5;\nconst price2 = 6;\nlet total = price1 + price2;",
        "x = 5;\ny = 6;\nz = x + y;",
        "var x = 5;\nvar y = 6;\nvar z = x + y;",
        "const pi = 3.14;\nlet person = \"John Doe\";\nlet answer = 'Yes I am!';",
        "let person = \"John Doe\", carName = \"Volvo\", price = 200;",
        "let person = \"John Doe\",\ncarName = \"Volvo\",\nprice = 200;",
        "x = x + 5",
        "let x = 5 + 2 + 3;",
        "let x = \"John\" + \" \" + \"Doe\";",
        "let x = \"5\" + 2 + 3;",
        "let x = 2 + 3 + \"5\";",
        "let",
        "const",
        "var",
        "undefined",
        "=",
        "==",
        "+"
      ]
    },
    {
      "title": "JavaScript Let",
      "summary": "The let keyword was introduced in ES6 (2015)\nVariables declared with let have Block Scope\nVariables declared with let must be Declared before use\nVariables declared with let cannot be Redeclared in the same scope\nBlock Scope\nBefore ES6 (2015), JavaScript did not have Block Scope.\nJavaScript had Global Scope and Function Scope.\nES6 introduced the two new JavaScript keywords: let and const.\nThese two keywords provided Block Scope in JavaScript:\nExample\nVariables declared inside a { } block cannot be accessed from outside the block:\nGlobal Scope\nVariables declared with the var always have Global Scope.\nVariables declared with the var keyword can NOT have block scope:\nExample\nVariables declared with varinside a { } block can be accessed from outside the block:\nCannot be Redeclared\nVariables defined with let can not be redeclared.\nYou can not accidentally redeclare a variable declared with let.\nWith let you can not do this:\nVariables defined with var can be redeclared.\nWith var you can do this:\nRedeclaring Variables\nRedeclaring a variable using the var keyword can impose problems.\nRedeclaring a variable inside a block will also redeclare the variable outside the block:\nExample\nRedeclaring a variable using the let keyword can solve this problem.\nRedeclaring a variable inside a block will not redeclare the variable outside the block:\nExample\nDifference Between var, let and const\nWhat is Good?\nlet and const have block scope.\nlet and const can not be redeclared.\nlet and const must be declared before use.\nlet and const does not bind to this.\nlet and const are not hoisted.\nWhat is Not Good?\nvar does not have to be declared.\nvar is hoisted.\nvar binds to this.\nBrowser Support\nThe let and const keywords are not supported in Internet Explorer 11 or earlier.\nThe following table defines the first browser versions with full support:\nREMOVE ADS\nRedeclaring\nRedeclaring a JavaScript variable with var is allowed anywhere in a program:\nExample\nWith let, redeclaring a variable in the same block is NOT allowed:\nExample\nRedeclaring a variable with let, in another block, IS allowed:\nExample\nLet Hoisting\nVariables defined with var are hoisted to the top and can be initialized at any time.\nMeaning: You can use the variable before it is declared:\nExample\nThis is OK:\nIf you want to learn more about hoisting, study the chapter JavaScript Hoisting.\nVariables defined with let are also hoisted to the top of the block, but not initialized.\nMeaning: Using a let variable before it is declared will result in a ReferenceError:\nExample\nVideo: JavaScript let",
      "examples": [
        "{\nlet x = 2;\n}\n// x can NOT be used here",
        "{\nvar x = 2;\n}\n// x CAN be used here",
        "let x = \"John Doe\";\n\nlet x = 0;",
        "var x = \"John Doe\";\n\nvar x = 0;",
        "var x = 10;\n// Here x is 10\n\n{\nvar x = 2;\n// Here x is 2\n}\n\n// Here x is 2",
        "let x = 10;\n// Here x is 10\n\n{\nlet x = 2;\n// Here x is 2\n}\n\n// Here x is 10",
        "var x = 2;\n// Now x is 2\n\nvar x = 3;\n// Now x is 3",
        "var x = 2;   // Allowed\nlet x = 3;   // Not allowed\n\n{\nlet x = 2;   // Allowed\nlet x = 3;   // Not allowed\n}\n\n{\nlet x = 2;   // Allowed\nvar x = 3;   // Not allowed\n}",
        "let x = 2;   // Allowed\n\n{\nlet x = 3;   // Allowed\n}\n\n{\nlet x = 4;    // Allowed\n}",
        "carName = \"Volvo\";\nvar carName;",
        "carName = \"Saab\";\nlet carName = \"Volvo\";",
        "let",
        "const",
        "var",
        "this",
        "ReferenceError"
      ]
    },
    {
      "title": "JavaScript Const",
      "summary": "The const keyword was introduced in ES6 (2015)\nVariables defined with const cannot be Redeclared\nVariables defined with const cannot be Reassigned\nVariables defined with const have Block Scope\nCannot be Reassigned\nA variable defined with the const keyword cannot be reassigned:\nExample\nMust be Assigned\nJavaScript const variables must be assigned a value when they are declared:\nCorrect\nIncorrect\nWhen to use JavaScript const?\nAlways declare a variable with const when you know that the value should not be changed.\nUse const when you declare:\nA new Array\nA new Object\nA new Function\nA new RegExp\nConstant Objects and Arrays\nThe keyword const is a little misleading.\nIt does not define a constant value. It defines a constant reference to a value.\nBecause of this you can NOT:\nReassign a constant value\nReassign a constant array\nReassign a constant object\nBut you CAN:\nChange the elements of constant array\nChange the properties of constant object\nConstant Arrays\nYou can change the elements of a constant array:\nExample\nBut you can NOT reassign the array:\nExample\nConstant Objects\nYou can change the properties of a constant object:\nExample\nBut you can NOT reassign the object:\nExample\nDifference Between var, let and const\nWhat is Good?\nlet and const have block scope.\nlet and const can not be redeclared.\nlet and const must be declared before use.\nlet and const does not bind to this.\nlet and const are not hoisted.\nWhat is Not Good?\nvar does not have to be declared.\nvar is hoisted.\nvar binds to this.\nBrowser Support\nThe let and const keywords are not supported in Internet Explorer 11 or earlier.\nThe following table defines the first browser versions with full support:\nREMOVE ADS\nBlock Scope\nDeclaring a variable with const is similar to let when it comes to Block Scope.\nThe x declared in the block, in this example, is not the same as the x declared outside the block:\nExample\nYou can learn more about block scope in the chapter JavaScript Scope.\nRedeclaring\nRedeclaring a JavaScript var variable is allowed anywhere in a program:\nExample\nRedeclaring an existing var or let variable to const, in the same scope, is not allowed:\nExample\nReassigning an existing const variable, in the same scope, is not allowed:\nExample\nRedeclaring a variable with const, in another scope, or in another block, is allowed:\nExample\nHoisting\nVariables defined with var are hoisted to the top and can be initialized at any time.\nMeaning: You can use the variable before it is declared:\nExample\nThis is OK:\nIf you want to learn more about hoisting, study the chapter JavaScript Hoisting.\nVariables defined with const are also hoisted to the top, but not initialized.\nMeaning: Using a const variable before it is declared will result in a ReferenceError:\nExample",
      "examples": [
        "const PI = 3.141592653589793;\nPI = 3.14;      // This will give an error\nPI = PI + 10;   // This will also give an error",
        "const PI = 3.14159265359;",
        "const PI;\nPI = 3.14159265359;",
        "// You can create a constant array:\nconst cars = [\"Saab\", \"Volvo\", \"BMW\"];\n\n// You can change an element:\ncars[0] = \"Toyota\";\n\n// You can add an element:\ncars.push(\"Audi\");",
        "const cars = [\"Saab\", \"Volvo\", \"BMW\"];\n\ncars = [\"Toyota\", \"Volvo\", \"Audi\"];    // ERROR",
        "// You can create a const object:\nconst car = {type:\"Fiat\", model:\"500\", color:\"white\"};\n\n// You can change a property:\ncar.color = \"red\";\n\n// You can add a property:\ncar.owner = \"Johnson\";",
        "const car = {type:\"Fiat\", model:\"500\", color:\"white\"};\n\ncar = {type:\"Volvo\", model:\"EX60\", color:\"red\"}    // ERROR",
        "const x = 10;\n// Here x is 10\n\n{\nconst x = 2;\n// Here x is 2\n}\n\n// Here x is 10",
        "var x = 2;     // Allowed\nvar x = 3;     // Allowed\nx = 4;         // Allowed",
        "var x = 2;     // Allowed\nconst x = 2;   // Not allowed\n\n{\nlet x = 2;     // Allowed\nconst x = 2;   // Not allowed\n}\n\n{\nconst x = 2;   // Allowed\nconst x = 2;   // Not allowed\n}",
        "const x = 2;     // Allowed\nx = 2;           // Not allowed\nvar x = 2;       // Not allowed\nlet x = 2;       // Not allowed\nconst x = 2;     // Not allowed\n\n{\nconst x = 2;   // Allowed\nx = 2;         // Not allowed\nvar x = 2;     // Not allowed\nlet x = 2;     // Not allowed\nconst x = 2;   // Not allowed\n}",
        "const x = 2;       // Allowed\n\n{\nconst x = 3;   // Allowed\n}\n\n{\nconst x = 4;   // Allowed\n}",
        "carName = \"Volvo\";\nvar carName;",
        "alert (carName);\nconst carName = \"Volvo\";",
        "const",
        "let",
        "this",
        "var",
        "ReferenceError"
      ]
    },
    {
      "title": "JavaScript Datatypes",
      "summary": "JavaScript has 8 Datatypes\nA JavaScript variable can hold 8 types of data:\nExamples\nThe typeof Operator\nYou can use the JavaScript typeof operator to find the type of a JavaScript variable.\nThe typeof operator returns the type of a variable or an expression:\nExample\nExample\nJavaScript Strings\nA string (a text string) is a series of characters like \"John Doe\".\nStrings are written with quotes. You can use single or double quotes:\nExample\nYou can use quotes inside a string, as long as they don't match the quotes surrounding the string:\nExample\nNote\nYou will learn a lot more about JavaScript Strings later in this tutorial.\nJavaScript Numbers\nAll JavaScript numbers are stored as decimal numbers (floating point).\nNumbers can be written with, or without decimals:\nExample\nExponential Notation\nExtra large or extra small numbers can be written with scientific (exponential) notation:\nExample\nREMOVE ADS\nJavaScript Booleans\nJavaScript booleans can only have one of two values: true or false\nThe boolean value of an expression is the basis for JavaScript comparisons:\nDatatype undefined\nIn computer programs, variables are often declared without a value. The value can be something that has to be calculated, or something that will be provided later, like user input.\nA variable without a value has the datatype undefined.\nA variable without a value also has the value undefined.\nExample\nEmpty Values\nAn empty value has nothing to do with undefined.\nAn empty string has both a legal value and a type.\nExample\nNote\nYou will learn a lot more about Data Types later in this tutorial.",
      "examples": [
        "// String\nlet color = \"Yellow\";\nlet lastName = \"Johnson\";\n\n// Number\nlet length = 16;\nlet weight = 7.5;\n\n// BigInt\nlet x = 1234567890123456789012345n;\nlet y = BigInt(1234567890123456789012345)\n\n// Boolean\nlet x = true;\nlet y = false;\n\n// Object\nconst person = {firstName:\"John\", lastName:\"Doe\"};\n\n// Array object\nconst cars = [\"Saab\", \"Volvo\", \"BMW\"];\n\n// Date object\nconst date = new Date(\"2022-03-25\");\n\n// Undefined\nlet x;\nlet y;\n\n// Null\nlet x = null;\nlet y = null;\n\n// Symbol\nconst x = Symbol();\nconst y = Symbol();",
        "typeof \"\"             // Returns \"string\"\ntypeof \"John\"         // Returns \"string\"\ntypeof \"John Doe\"     // Returns \"string\"",
        "typeof 0              // Returns \"number\"\ntypeof 314            // Returns \"number\"\ntypeof 3.14           // Returns \"number\"\ntypeof (3)            // Returns \"number\"\ntypeof (3 + 4)        // Returns \"number\"",
        "// Using double quotes:\nlet carName1 = \"Volvo XC60\";\n\n// Using single quotes:\nlet carName2 = 'Volvo XC60';",
        "// Single quote inside double quotes:\nlet answer1 = \"It's alright\";\n\n// Single quotes inside double quotes:\nlet answer2 = \"He is called 'Johnny'\";\n\n// Double quotes inside single quotes:\nlet answer3 = 'He is called \"Johnny\"';",
        "// With decimals:\nlet x1 = 34.00;\n\n// Without decimals:\nlet x2 = 34;",
        "let y = 123e5;    // 12300000\nlet z = 123e-5;   // 0.00123",
        "let carName;",
        "let car = \"\";    // The value is \"\", the typeof is \"string\"",
        "typeof",
        "undefined"
      ]
    },
    {
      "title": "JavaScript Operators",
      "summary": "Operators are for Mathematical and Logical Computations\nThe Assignment Operator = assigns values\nThe Addition Operator + adds values\nThe Multiplication Operator * multiplies values\nThe Comparison Operator > compares values\nJavaScript Assignment\nThe Assignment Operator (=) assigns a value to a variable:\nAssignment Examples\nJavaScript Addition\nThe Addition Operator (+) adds numbers:\nAdding\nJavaScript Multiplication\nThe Multiplication Operator (*) multiplies numbers:\nMultiplying\nTypes of JavaScript Operators\nThere are different types of JavaScript operators:\nArithmetic Operators\nAssignment Operators\nComparison Operators\nLogical Operators\nAnd more ...\nJavaScript Arithmetic Operators\nArithmetic Operators are used to perform arithmetic on numbers:\nArithmetic Operators Example\nNote\nArithmetic operators are fully described in the JS Arithmetic chapter.\nJavaScript String Addition\nThe + can also be used to add (concatenate) strings:\nExample\nThe += assignment operator can also be used to add (concatenate) strings:\nExample\nThe result of text1 will be:\nNote\nWhen used on strings, the + operator is called the concatenation operator.\nAdding Strings and Numbers\nAdding two numbers, will return the sum as a number like 5 + 5 = 10.\nAdding a number and a string, will return the sum as a concatenated string like 5 + \"5\" = \"55\".\nExample\nThe result of x, y, and z will be:\nNote\nIf you add a number and a string, the result will be a string!\nREMOVE ADS\nJavaScript Assignment Operators\nAssignment operators assign values to JavaScript variables.\nThe Addition Assignment Operator (+=) adds a value to a variable.\nAssignment\nNote\nAssignment operators are fully described in the JS Assignment chapter.\nJavaScript Comparison Operators\nComparison operators are used to compare two values.\nComparison operators always return true or false.\nExample\nAll the comparison operators above can also be used on strings:\nExample\nNote that strings are compared alphabetically.\nNote\nComparison operators are fully described in the JS Comparisons chapter.\nJavaScript Logical Operators\nNote\nLogical operators are fully described in the JS Logical chapter.",
      "examples": [
        "let x = 10;",
        "// Assign the value 5 to x\nlet x = 5;\n// Assign the value 2 to y\nlet y = 2;\n// Assign the value x + y to z:\nlet z = x + y;",
        "let x = 5;\nlet y = 2;\nlet z = x + y;",
        "let x = 5;\nlet y = 2;\nlet z = x * y;",
        "let a = 3;\nlet x = (100 + 50) * a;",
        "let text1 = \"John\";\nlet text2 = \"Doe\";\nlet text3 = text1 + \" \" + text2;",
        "let text1 = \"What a very \";\ntext1 += \"nice day\";",
        "let x = 5 + 5;\nlet y = \"5\" + 5;\nlet z = \"Hello\" + 5;",
        "let x = 10;\nx += 5;",
        "let x = 5;\nlet result = x > 8;",
        "let text1 = \"A\";\nlet text2 = \"B\";\nlet result = text1 < text2;",
        "=",
        "+",
        "*",
        "+=",
        "What a very nice day",
        "10\n55\nHello5",
        "true",
        "false"
      ]
    },
    {
      "title": "JavaScript Arithmetic",
      "summary": "JavaScript Arithmetic Operators\nArithmetic operators perform arithmetic on numbers (literals or variables).\nArithmetic Operations\nA typical arithmetic operation operates on two numbers.\nThe two numbers can be literals:\nExample\nor variables:\nExample\nor expressions:\nExample\nOperators and Operands\nThe numbers (in an arithmetic operation) are called operands.\nThe operation (to be performed between the two operands) is defined by an operator.\nREMOVE ADS\nAdding\nThe addition operator (+) adds numbers:\nExample\nSubtracting\nThe subtraction operator (-) subtracts numbers.\nExample\nMultiplying\nThe multiplication operator (*) multiplies numbers.\nExample\nDividing\nThe division operator (/) divides numbers.\nExample\nRemainder\nThe modulus operator (%) returns the division remainder.\nExample\nIn arithmetic, the division of two integers produces a quotient and a remainder.\nIn mathematics, the result of a modulo operation is the remainder of an arithmetic division.\nIncrementing\nThe increment operator (++) increments numbers.\nExample\nDecrementing\nThe decrement operator (--) decrements numbers.\nExample\nExponentiation\nThe exponentiation operator (**) raises the first operand to the power of the second operand.\nExample\nx ** y produces the same result as Math.pow(x,y):\nExample\nOperator Precedence\nOperator precedence describes the order in which operations are performed in an arithmetic expression.\nExample\nIs the result of example above the same as 150 * 3, or is it the same as 100 + 150?\nIs the addition or the multiplication done first?\nAs in traditional school mathematics, the multiplication is done first.\nMultiplication (*) and division (/) have higher precedence than addition (+) and subtraction (-).\nAnd (as in school mathematics) the precedence can be changed by using parentheses.\nWhen using parentheses, the operations inside the parentheses are computed first:\nExample\nWhen many operations have the same precedence (like addition and subtraction or multiplication and division), they are computed from left to right:\nExamples\nNote\nFor a full list of operator precedence values go to:\nJavaScript Operator Precedence Values.",
      "examples": [
        "let x = 100 + 50;",
        "let x = a + b;",
        "let x = (100 + 50) * a;",
        "let x = 5;\nlet y = 2;\nlet z = x + y;",
        "let x = 5;\nlet y = 2;\nlet z = x - y;",
        "let x = 5;\nlet y = 2;\nlet z = x * y;",
        "let x = 5;\nlet y = 2;\nlet z = x / y;",
        "let x = 5;\nlet y = 2;\nlet z = x % y;",
        "let x = 5;\nx++;\nlet z = x;",
        "let x = 5;\nx--;\nlet z = x;",
        "let x = 5;\nlet z = x ** 2;",
        "let x = 5;\nlet z = Math.pow(x,2);",
        "let x = 100 + 50 * 3;",
        "let x = (100 + 50) * 3;",
        "let x = 100 + 50 - 3;",
        "let x = 100 / 50 * 3;",
        "+",
        "-",
        "*",
        "/",
        "%",
        "++",
        "--",
        "**",
        "Math.pow(x,y)"
      ]
    },
    {
      "title": "JavaScript Assignment",
      "summary": "JavaScript Assignment Operators\nAssignment operators assign values to JavaScript variables.\nGiven that x = 10 and y = 5, the table below explains the assignment operators:\nLogical Assignment Operators\nThe = Operator\nThe Simple Assignment Operator assigns a simple value to a variable.\nSimple Assignment Examples\nThe += Operator\nThe Addition Assignment Operator adds a value to a variable.\nAddition Assignment Examples\nThe -= Operator\nThe Subtraction Assignment Operator subtracts a value from a variable.\nSubtraction Assignment Example\nThe *= Operator\nThe Multiplication Assignment Operator multiplies a variable.\nMultiplication Assignment Example\nThe **= Operator\nThe Exponentiation Assignment Operator raises a variable to the power of the operand.\nExponentiation Assignment Example\nThe /= Operator\nThe Division Assignment Operator divides a variable.\nDivision Assignment Example\nThe %= Operator\nThe Remainder Assignment Operator assigns a remainder to a variable.\nRemainder Assignment Example\nREMOVE ADS\nString Assignment\nTwo assignment operators can assign values to strings:\nThe Simple Assignment Operator assigns a simple value to a string.\nThe Addition Assignment Operator adds a value to a string.\nThe = Operator\nString Assignment\nThe += Operator\nThe Addition Assignment Operator Can also be used to add strings.\nAddition Assignment Example\nThe &&= Operator\nThe Logical AND assignment operator is used between two values.\nIf the first value is true, the second value is assigned.\nLogical AND Assignment Examples\nNote\nThe &&= operator is an ES2020 feature.\nThe ||= Operator\nThe Logical OR assignment operator is used between two values.\nIf the first value is false, the second value is assigned.\nLogical OR Assignment Examples\nNote\nThe ||= operator is an ES2020 feature.\nThe ??= Operator\nThe Nullish coalescing assignment operator is used between two values.\nIf the first value is undefined or null, the second value is assigned.\nNullish Coalescing Assignment Examples\nNote\nThe ??= operator is an ES2020 feature.\nThe Spread (...) Operator\nThe ... operator splits iterables into individual elements.\nExample",
      "examples": [
        "let x = 10;",
        "let x = 10 + y;",
        "let x = 10;\nx += 5;",
        "let x = 10;\nx -= 5;",
        "let x = 10;\nx *= 5;",
        "let x = 10;\nx **= 5;",
        "let x = 10;\nx /= 5;",
        "let x = 10;\nx %= 5;",
        "let text = \"Hello\";",
        "let text = \"Hello\"; text += \" World\";",
        "let x = true;\nlet y = x &&= 10;",
        "let x = false;\nlet y = x &&= 10;",
        "let x = 1;\nlet y = x &&= 10;",
        "let x = 0;\nlet y = x &&= 10;",
        "let x = undefined;\nlet y = x &&= 10;",
        "let x = null;\nlet y = x &&= 10;",
        "let x = false;\nlet y = x ||= 10;",
        "let x = true;\nlet y = x ||= 10;",
        "let x = null;\nlet y = x ||= 10;",
        "let x = undefined;\nlet y = x ||= 10;",
        "let x;\nx ??= 10;",
        "let x = 0;\nx ??= 10;",
        "let x = null;\nx ??= 10;",
        "let x = undefined;\nx ??= 10;",
        "let x = 10;\nlet y = 5;\nx ??= y;",
        "let text = \"12345\";\n\nlet min = Math.min(...text);\nlet max = Math.max(...text);",
        "&&=",
        "||=",
        "??=",
        "..."
      ]
    },
    {
      "title": "JavaScript Comparison",
      "summary": "Comparison Operators\nComparison operators are used to compare two values.\nComparison operators always return true or false.\nGiven that x = 5, the table below explains the comparison operators:\nComparison operators can be used in conditional statements to compare values and take action depending on the result:\nYou will learn more about the use of conditional statements in the if...else chapter of this tutorial.\nREMOVE ADS\nJavaScript String Comparison\nAll the comparison operators above can also be used on strings:\nExample\nNote that strings are compared alphabetically:\nExample\nComparing Different Types\nComparing data of different types may give unexpected results.\nWhen comparing a string with a number, JavaScript will convert the string to a number when doing the comparison. An empty string converts to 0. A non-numeric string converts to NaN which is always false.\nWhen comparing two strings, \"2\" will be greater than \"12\".\nAlphabetically 1 is less than 21.\nTo secure a proper result, variables should be converted to the proper type before comparison:\nExample",
      "examples": [
        "if (age < 18) text = \"Too young to buy alcohol\";",
        "let text1 = \"A\";\nlet text2 = \"B\";\nlet result = text1 < text2;",
        "let text1 = \"20\";\nlet text2 = \"5\";\nlet result = text1 < text2;",
        "age = Number(age);\nif (isNaN(age)) {\nvoteable = \"Input is not a number\";\n} else {\nvoteable = (age < 18) ? \"Too young\" : \"Old enough\";\n}",
        "true",
        "false",
        "x = 5",
        "NaN"
      ]
    },
    {
      "title": "JavaScript Conditionals",
      "summary": "Conditional Statements\nWhen you write code, you often want to perform different actions for different conditions.\nConditional statements run different code depending on a true or false condition.\nConditional statements include:\nif\nif...else\nif...else if...else\nswitch\nternary (? :)\nWhen to use Conditionals\nUse if to specify a code block to be executed, if a specified condition is true\nUse else to specify a code block to be executed, if the same condition is false\nUse else if to specify a new condition to test, if the first condition is false\nUse switch to specify many alternative code blocks to be executed\nUse (? :) (ternary) as a shorthand for if...else\nThe if Statement\nUse if to specify a code block to be executed, if a specified condition is true.\nSyntax\nThe else Statement\nUse else to specify a code block to be executed, if the same condition is false.\nSyntax\nThe else if Statement\nUse else if to specify a new condition to test, if the first condition is false.\nSyntax\nREMOVE ADS\nThe switch Statement\nUse switch to specify many alternative code blocks to be executed.\nSyntax\nTernary Operator (? :)\nUse (? :) (ternary) as a shorthand for if...else.\nExample",
      "examples": [
        "if (condition) {\n// code to execute if the condition is true\n}",
        "if (condition) {\n// code to execute if the condition is true\n} else {\n// code to execute if the condition is false\n}",
        "if (condition1) {\n// code to execute if condition1 is true\n} else if (condition2) {\n// code to execute if the condition1 is false and condition2 is true\n} else {\n// code to execute if the condition1 is false and condition2 is false\n}",
        "switch(expression) {\ncase x:\n// code block\nbreak;\ncase y:\n// code block\nbreak;\ndefault:\n// code block\n}",
        "condition ? expression1 : expression2",
        "if",
        "true",
        "else",
        "false",
        "else if",
        "switch",
        "(? :)",
        "if...else"
      ]
    },
    {
      "title": "JavaScript if",
      "summary": "The JavaScript if Statement\nUse the JavaScript if statement to execute a block of code when a condition is true.\nSyntax\nNote that if is in lowercase letters. Uppercase letters (If or IF) will generate a JavaScript error.\nExample\nMake a \"Good day\" greeting if the hour is less than 18:00:\nThe result of greeting will be:\nExamples\nREMOVE ADS\nNested if\nYou can use an if statement inside another if statement:\nExample\nNested if statements can make your code more complex.\nA better solution is to use the logical AND operator:\nExample",
      "examples": [
        "if (condition) {\n//  block of code to be executed if the condition is true\n}",
        "if (hour < 18) {\ngreeting = \"Good day\";\n}",
        "let age = 18;\nlet text = \"You can Not drive\";\n\nif (age >= 18) {\ntext = \"You can drive\");\n}",
        "let age = 16;\nlet text = \"You can Not drive\";\n\nif (age >= 18) {\ntext = \"You can drive\");\n}",
        "let age = 16;\nlet country = \"USA\";\nlet text = \"You can Not drive!\";\n\nif (country == \"USA\") {\nif (age >= 16) {\ntext = \"You can drive!\";\n}\n}",
        "let age = 16;\nlet country = \"USA\";\nlet text = \"You can Not drive!\";\n\nif (country == \"USA\" && age >= 16) {\ntext = \"You can drive!\";\n}",
        "if",
        "d=new Date(); var time=d.getHours(); if (time<20) { document.write(\"Good day\"); } Good day"
      ]
    },
    {
      "title": "JavaScript else",
      "summary": "The else Statement\nUse the else statement to specify a block of code to be executed if a condition is false.\nExample\nIf the hour is less than 18, create a \"Good day\" greeting, otherwise \"Good evening\":\nREMOVE ADS\nThe else if Statement\nUse the else if statement to specify a new condition if the first is false.\nSyntax\nExample\nIf time is less than 10:00, create a \"Good morning\" greeting, if not, but time is less than 20:00, create a \"Good day\" greeting, otherwise a \"Good evening\":\nExample\nThis example will write a link to either W3Schools or to the World Wildlife Foundation (WWF). By using a random number, there is a 50% chance for each of the links.",
      "examples": [
        "if (condition) {\n//  block of code to be executed if the condition is true\n} else {\n//  block of code to be executed if the condition is false\n}",
        "if (hour < 18) {\ngreeting = \"Good day\";\n} else {\ngreeting = \"Good evening\";\n}",
        "if (condition1) {\n//  block of code to be executed if condition1 is true\n} else if (condition2) {\n//  block of code to be executed if the condition1 is false and condition2 is true\n} else {\n//  block of code to be executed if the condition1 is false and condition2 is false\n}",
        "if (time < 10) {\ngreeting = \"Good morning\";\n} else if (time < 20) {\ngreeting = \"Good day\";\n} else {\ngreeting = \"Good evening\";\n}",
        "let text;\nif (Math.random() < 0.5) {\ntext = \"<a href='https://w3schools.com'>Visit W3Schools</a>\";\n} else {\ntext = \"<a href='https://wwf.org'>Visit WWF</a>\";\n}\ndocument.getElementById(\"demo\").innerHTML = text;",
        "else",
        "false",
        "else if"
      ]
    },
    {
      "title": "The Conditional (Ternary) Operator",
      "summary": "Example\nIf the value of age is < 18, set the value of text to \"Minor\", otherwise to \"Adult\":\nExample\nExample\nDescription\nThe conditional operator is a shorthand for writing conditional if...else statements.\nIt is called a ternary operator because it takes three operands.\nSyntax\nParameters\nNote\nThe conditional (ternary) operator is the only JavaScript operator that takes three operands.\nBrowser Support\n() ? x : y is an ES1 feature (JavaScript 1997).\nIt is fully supported in all browsers:",
      "examples": [
        "let text = (age < 18) ? \"Adult\" : \"Minor\";",
        "let isMember = true;\nlet discount = isMember ? 0.2 : 0;",
        "let isMember = false;\nlet discount = isMember ? 0.2 : 0;",
        "(condition) ? expression1 : expression2",
        "if...else",
        "true",
        "false",
        "() ? x : y"
      ]
    },
    {
      "title": "JavaScript Switch Statement",
      "summary": "Switch Control Flow\nBased on a condition, switch selects one or more code blocks to be executed.\nswitch executes the code blocks that matches an expression.\nswitch is often used as a more readable alternative to many if...else if...else statements, especially when dealing with multiple possible values.\nSyntax\nThis is how it works:\nThe switch expression is evaluated once.\nThe value of the expression is compared with the values of each case.\nIf there is a match, the associated block of code is executed.\nIf there is no match, no code is executed.\nExample\nThe getDay() method returns the weekday as a number between 0 and 6.\n(Sunday=0, Monday=1, Tuesday=2 ..)\nThis example uses the weekday number to calculate the weekday name:\nREMOVE ADS\nThe break Keyword\nWhen JavaScript reaches a break keyword, it breaks out of the switch block.\nThis will stop the execution inside the switch block.\nNo more statements in the switch block will be executed.\nIt is not necessary to break the last case. The switch ends (breaks) there anyway.\nNote\nThe break keyword is crucial for preventing a \"fall-through.\"\nWithout break, the code will continue to execute the next case blocks (and the default block if present) even if their values do not match the expression.\nThe default Keyword\nThe default keyword specifies a block of code to run if there is no case match.\nThe default keyword is optional.\nThe default can act as a fallback:\nExample\nThe getDay() method returns the weekday as a number between 0 and 6.\nIf today is neither Saturday (6) nor Sunday (0), write a default message:\nThe result of text will be:\nThe default case does not have to be the last case in a switch block:\nExample\nIf default is not the last case in the switch block, remember to end the default case with a break.\nCommon Code Blocks\nSometimes you will want different switch cases to use the same code.\nIn this example case 4 and 5 share the same code block, and 0 and 6 share another code block:\nExample\nSwitching Details\nIf multiple cases matches a case value, the first case is selected.\nIf no matching cases are found, the program continues to the default label.\nIf no default label is found, the program continues to the statement(s) after the switch.\nStrict Comparison\nSwitch uses strict comparison (===).\nThe values must be of the same type to match.\nA strict comparison can only be true if both operands are of the same type.\nExample\nIn this example there is no match for x:",
      "examples": [
        "switch(expression) {\ncase x:\n// code block\nbreak;\ncase y:\n// code block\nbreak;\ndefault:\n// code block\n}",
        "switch (new Date().getDay()) {\ncase 0:\nday = \"Sunday\";\nbreak;\ncase 1:\nday = \"Monday\";\nbreak;\ncase 2:\nday = \"Tuesday\";\nbreak;\ncase 3:\nday = \"Wednesday\";\nbreak;\ncase 4:\nday = \"Thursday\";\nbreak;\ncase 5:\nday = \"Friday\";\nbreak;\ncase 6:\nday = \"Saturday\";\n}",
        "switch (new Date().getDay()) {\ncase 6:\ntext = \"Today is Saturday\";\nbreak;\ncase 0:\ntext = \"Today is Sunday\";\nbreak;\ndefault:\ntext = \"Looking forward to the Weekend\";\n}",
        "switch (new Date().getDay()) {\ndefault:\ntext = \"Looking forward to the Weekend\";\nbreak;\ncase 6:\ntext = \"Today is Saturday\";\nbreak;\ncase 0:\ntext = \"Today is Sunday\";\n}",
        "switch (new Date().getDay()) {\ncase 4:\ncase 5:\ntext = \"Soon it is Weekend\";\nbreak;\ncase 0:\ncase 6:\ntext = \"It is Weekend\";\nbreak;\ndefault:\ntext = \"Looking forward to the Weekend\";\n}",
        "let x = \"0\";\nswitch (x) {\ncase 0:\ntext = \"Off\";\nbreak;\ncase 1:\ntext = \"On\";\nbreak;\ndefault:\ntext = \"No value found\";\n}",
        "switch",
        "getDay()",
        "break",
        "default",
        "switch (new Date().getDay()) { case 6: x= \"Today is Saturday\"; break; case 0: x = \"Today is Sunday\"; break; default: x = \"Looking forward to the Weekend\"; } document.write(x); Today is Sunday"
      ]
    },
    {
      "title": "JavaScript Booleans",
      "summary": "The Boolean Data Type\nIn JavaScript, a Boolean is a primitive data type that can only have one of two values:\ntrue or false\nThe Boolean value of an expression is the basis for all JavaScript comparisons and conditions.\nKey Boolean Characteristics\ntrue and false are boolean data types\ntrue and false are the only possible boolean values\ntrue and false must be written in lowercase\ntrue and false must be written without quotes\nBoolean Use Cases\nVery often, in programming, you will need a data type that can represent one of two values, like:\nyes or no\non or off\ntrue or false\nBoolean values are fundamental for logical operations and control flow in JavaScript programming.\nComparisons\nAll JavaScript comparison operators (like ==, !=, <, >) return true or false from the comparison.\nGiven that x = 5, the table below explains comparison:\nExample\nSee Also:\nJavaScript Comparisons\nConditions\nBooleans are extensively used in if statements to determine the code blocks to execute based on the logic.\nExample\nSee Also:\nJavaScript if\nJavaScript if else\nLoops\nBooleans are extensively used in loops to determine conditions for looping.\nExample\nSee Also:\nJavaScript Loops\nThe Boolean() Function\nYou can use the Boolean() function to find out if an expression (or a variable) is true:\nExample\nOr even easier:\nExample\nREMOVE ADS\nEverything With a \"Value\" is True\nExamples\nEverything Without a \"Value\" is False\nThe Boolean value of 0 (zero) is false:\nThe Boolean value of -0 (minus zero) is false:\nThe Boolean value of \"\" (empty string) is false:\nThe Boolean value of undefined is false:\nThe Boolean value of null is false:\nThe Boolean value of false is (you guessed it) false:\nThe Boolean value of NaN is false:\nJavaScript Booleans as Objects\nNormally JavaScript booleans are primitive values created from literals:\nBut booleans can also be defined as objects with the keyword new:\nExample\nWarning\nDo not create Boolean objects.\nThe new keyword complicates the code and slows down execution speed.\nBoolean objects can produce unexpected results:\nBooleans and boolean objects cannot be safely compared:\nComparing two JavaScript objects always returns false.\nComplete Boolean Reference\nFor a complete reference, go to our Complete JavaScript Boolean Reference.\nThe reference contains descriptions and examples of all Boolean properties and methods.",
      "examples": [
        "let x = 5;\n\n(x == 8); // equals false\n(x != 8); // equals true",
        "if (hour < 18) {\ngreeting = \"Good day\";\n} else {\ngreeting = \"Good evening\";\n}",
        "while (i < 10) {\ntext += i;\ni++;\n}",
        "Boolean(10 > 9)",
        "(10 > 9)",
        "100 is true\n\n3.14 is true\n\n-15 is true\n\n\"Hello\" is true\n\n\"false\" is true\n\n(7 + 1 + 3.14) is true",
        "let x = 0;\nBoolean(x);",
        "let x = -0;\nBoolean(x);",
        "let x = \"\";\nBoolean(x);",
        "let x;\nBoolean(x);",
        "let x = null;\nBoolean(x);",
        "let x = false;\nBoolean(x);",
        "let x = 10 / \"Hallo\";\nBoolean(x);",
        "let x = false;",
        "let y = new Boolean(false);",
        "let x = false;\nlet y = new Boolean(false);\n\n// typeof x returns boolean\n// typeof y returns object",
        "let x = Boolean(false);\nlet y = new Boolean(false);\n\n(x == Y) returns true\n(y === Y) returns false",
        "Boolean()",
        "new"
      ]
    },
    {
      "title": "JavaScript Logical Operators",
      "summary": "Logical Operators\nLogical operators are used to combine boolean expressions.\nLogical operators can be used to modify the results of comparisons.\nTypically, you will use a comparison operator to check a condition, and a logical operator to combine conditions into more complex logic.\nJavaScript Logical Operators\nLogical operators are used to determine the logic between variables or values.\nGiven that x = 6 and y = 3, the table below explains the logical operators:\nJavaScript Logical AND\nThe && operator returns true if both expressions are true, otherwise false:\nExample\nJavaScript Logical OR\nThe || operator returns true if one or both expressions are true, otherwise false:\nExample\nJavaScript Logical NOT\nThe NOT operator (!) returns true for false expressions and false for true expressions.\nExample\nThe Nullish Coalescing Operator (??)\nThe ?? operator returns the first argument if it is not nullish (null or undefined).\nOtherwise it returns the second argument.\nExample\nBrowser Support\n?? is an ES2020 feature.\nES2020 is fully supported in all modern browsers since September 2020:\nSee Also:\nJavaScript Comparisons.",
      "examples": [
        "let x = 6;\nlet y = 3;\nlet z = (x < 10 && y > 1)",
        "let x = 6;\nlet y = -3;\nlet z = (x > 0 || y > 0)",
        "let x = (5 == 8);\nlet y = !(5 == 8)",
        "let name = null;\nlet text = \"missing\";\nlet result = name ?? text;",
        "true",
        "false",
        "??",
        "null",
        "undefined"
      ]
    },
    {
      "title": "JavaScript Loops",
      "summary": "Loops can execute a block of code a number of times.\nJavaScript Loops\nLoops are handy, if you want to run the same code over and over again, each time with a different value.\nOften this is the case when working with arrays:\nInstead of writing:\nYou can write:\nThe For Loop\nThe for statement creates a loop with 3 optional expressions:\nexp1 is executed one time before the execution of the code block.\nexp2 defines the condition for executing the code block.\nexp3 is executed every time the code block has been executed.\nExample\nexp1 sets a variable before the loop starts (let i = 0).\nexp2 defines the condition for the loop to run (i must be less than 5).\nexp3 increases a value (i++) each time the code block has been executed.\nLoop Scope\nExample\nExample\nIn the first example, let i = 5; is declared outside the loop.\nIn the second example, let = 0;, is declared inside the loop.\nWhen a variable is declared with let or const inside a loop, it will only be visible within the loop.\nREMOVE ADS\nThe While Loop\nThe while loop loops through a block of code as long as a specified condition is true.\nSyntax\nExample\nIn the following example, the code in the loop will run, over and over again, as long as a variable (i) is less than 10:\nExample\nNote\nIf you forget to increase the variable used in the condition, the loop will never end.\nThis will crash your browser.\nThe Do While Loop\nThe do while loop is a variant of the while loop.\nThe do while loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.\nSyntax\nNote\nThe do while runs at least once, even if the condition is false from the start.\nThis is because the code block is executed before the condition is tested:\nExample\nDo not forget to increase the variable used in the condition, otherwise the loop will never end!",
      "examples": [
        "text += cars[0] + \"<br>\";\ntext += cars[1] + \"<br>\";\ntext += cars[2] + \"<br>\";\ntext += cars[3] + \"<br>\";\ntext += cars[4] + \"<br>\";\ntext += cars[5] + \"<br>\";",
        "for (let i = 0; i < cars.length; i++) {\ntext += cars[i] + \"<br>\";\n}",
        "for (expr1; expr2; expr) {\n// code block to be executed\n}",
        "for (let i = 0; i < 5; i++) {\ntext += \"The number is \" + i + \"<br>\";\n}",
        "let i = 5;\n\nfor (i = 0; i < 10; i++) {\n// some code\n}\n\n// Here i is 10",
        "let i = 5;\n\nfor (let i = 0; i < 10; i++) {\n// some code\n}\n\n// Here i is 5",
        "while (condition) {\n// code block to be executed\n}",
        "while (i < 10) {\ntext += \"The number is \" + i;\ni++;\n}",
        "do {\n// code block to be executed\n}\nwhile (condition);",
        "do {\ntext += \"The number is \" + i;\ni++;\n}\nwhile (i < 10);",
        "for",
        "let i = 5;",
        "let = 0;",
        "let",
        "const",
        "while",
        "do while"
      ]
    },
    {
      "title": "JavaScript For Loop",
      "summary": "For Loops can execute a block of code a number of times.\nFor Loops are fundamental for tasks like performing an action multiple times.\nThe For Loop\nThe for statement creates a loop with 3 optional expressions:\nexp 1 is executed (one time) before the execution of the code block.\nexp 2 defines the condition for executing the code block.\nexp 3 is executed (every time) after the code block has been executed.\nExample\nFrom the example above, you can read:\nexp 1 sets a variable before the loop starts (let i = 0).\nexp 2 defines the condition for the loop to run (i must be less than 5).\nexp 3 increases a value (i++) after the code block has been executed.\nREMOVE ADS\nExample\nUse a for loop to collect the car names from the cars array:\nHow to use exp 1\nexp 1 is used to initialize the variable(s) used in the loop (let i = 0).\nexp 1 is optional.\nYou can omit exp 1 if the value is set before the loop starts:\nExample\nHow to use exp 2\nexp 2 is used to evaluate the condition of the initial variable (i < len).\nexp 2 is also optional.\nIf exp 2 returns false, the loop will end.\nNote\nIf you omit exp 2, you must provide a break inside the loop.\nOtherwise the loop will never end.\nThis will crash your browser.\nHow to use exp 3\nexp 3 increments the value of the initial variable (i++).\nexp 3 is optional.\nexp 3 can do anything like negative increment (i--), positive increment (i = i + 15), or anything else.\nexp 3 can be omitted (if you increment the value inside the loop):\nExample\nLoop Scope\nUsing var in a loop:\nExample\nUsing let in a loop:\nExample\nIn the first example, using var, the variable declared in the loop redeclares the variable outside the loop.\nIn the second example, using let, the variable declared in the loop does not redeclare the variable outside the loop.\nWhen let is used to declare the i variable in a loop, the i variable will only be visible within the loop.",
      "examples": [
        "for (exp 1; exp 2; exp 3) {\n// code block to be executed\n}",
        "for (let i = 0; i < 5; i++) {\ntext += \"The number is \" + i + \"<br>\";\n}",
        "const cars = [\"BMW\", \"Volvo\", \"Saab\", \"Ford\"];\nlet len = cars.length;\n\nlet text = \"\";\nfor (let i = 0; i < len; i++) {\ntext += cars[i];\n}",
        "const cars = [\"BMW\", \"Volvo\", \"Saab\", \"Ford\"];\nlet len = cars.length;\n\nlet i = 2;\n\nlet text = \"\";\nfor (; i < len; i++) {\ntext += cars[i] + \"<br>\";\n}",
        "const cars = [\"BMW\", \"Volvo\", \"Saab\", \"Ford\"];\nlet len = cars.length;\n\nlet i = 0;\n\nlet text = \"\";\nfor (; i < len; ) {\ntext += cars[i] + \"<br>\";\ni++;\n}",
        "var i = 5;\n\nfor (var i = 0; i < 10; i++) {\n// some code\n}\n\n// Here i is 10",
        "let i = 5;\n\nfor (let i = 0; i < 10; i++) {\n// some code\n}\n\n// Here i is 5",
        "for",
        "false",
        "var",
        "let"
      ]
    },
    {
      "title": "JavaScript While Loop",
      "summary": "Some loops execute a block of code as long as a specified condition is true.\nThe While Loop\nThe while loop loops through a block of code as long as a specified condition is true.\nSyntax\nIn the following example, the code in the loop will run, over and over again, as long as a variable (i) is less than 10:\nExample\nNote\nIf you forget to increase the variable used in the condition, the loop will never end.\nThis will crash your browser.\nThe Do While Loop\nThe do while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.\nSyntax\nNote\nThe do while runs at least once, even if the condition is false from the start.\nThis is because the code block is executed before the condition is tested:\nExample\nDo not forget to increase the variable used in the condition, otherwise the loop will never end!\nREMOVE ADS\nComparing For and While\nA while loop is much the same as a for loop, with statement 1 and statement 3 omitted.\nExample\nUses a for loop to collect the car names from the cars array:\nExample\nUse a while loop to collect the car names from the cars array:",
      "examples": [
        "while (condition) {\n// code block to be executed\n}",
        "while (i < 10) {\ntext += \"The number is \" + i;\ni++;\n}",
        "do {\n// code block to be executed\n}\nwhile (condition);",
        "do {\ntext += \"The number is \" + i;\ni++;\n}\nwhile (i < 10);",
        "const cars = [\"BMW\", \"Volvo\", \"Saab\", \"Ford\"];\nlet i = 0;\nlet text = \"\";\n\nfor (;cars[i];) {\ntext += cars[i];\ni++;\n}",
        "const cars = [\"BMW\", \"Volvo\", \"Saab\", \"Ford\"];\nlet i = 0;\nlet text = \"\";\n\nwhile (cars[i]) {\ntext += cars[i];\ni++;\n}",
        "while",
        "do while",
        "for"
      ]
    },
    {
      "title": "JavaScript Break",
      "summary": "The Break Statement\nThe break statement \"jumps out\" of loops and switches.\nThe break statement terminates the execution of a loop or a switch statement.\nBreak in Loops\nWhen break is encountered in a loop, the loop terminates immediately.\nThe program control is transfered to the statements following the loop.\nNo more loop iterations are executed.\nExample\nTerminate the loop (break the loop) when the loop counter (i) is 3:\nNote\nYou have already seen the break statement used in an earlier chapter of this tutorial.\nIt was used to \"jump out\" of a switch statement.\nBreak in a Switch\nIn a switch statement, a break statement will exit the switch block after a matching case is executed. Without break, execution would \"fall through\" to subsequent case blocks.\nExample\nUse the weekday number to calculate the weekday name:\nNote\nThe break keyword is crucial for preventing a switch \"fall-through.\"\nWithout break, the code will continue to execute the next case blocks (and the default block if present) even if their values do not match the expression.\nREMOVE ADS\nJavaScript Labels\nA label provides a name for a statement, or a block of statements, allowing statements to be referenced to, for program flow control, particularly in loops.\nSyntax\nA label is an identifier followed by a colon (:).\nA label precedes a statement or a block of code.\nLabeled Break\nSyntax\nThe break statement exits a loop or block and transfers the control to the labeled statement.\nThe break statement is particularly useful for breaking out of inner or outer loops from nested loops.\nExample\nBreak to loop1:\nExample\nBreak to loop2:\nNote\nbreak and continue are the only JavaScript statements that can \"jump out of\" a code block.\nA code block is a block of code between { and }.\nWithout a label reference, break can only jump out of a loop or a switch.\nWith a label reference, break can jump out of any code block:\nExample\nBreak out of the block after the second car:",
      "examples": [
        "for (let i = 0; i < 10; i++) {\nif (i === 3) { break; }\ntext += \"The number is \" + i + \"<br>\";\n}",
        "switch (new Date().getDay()) {\ncase 0:\nday = \"Sunday\";\nbreak;\ncase 1:\nday = \"Monday\";\nbreak;\ncase 2:\nday = \"Tuesday\";\nbreak;\ncase 3:\nday = \"Wednesday\";\nbreak;\ncase 4:\nday = \"Thursday\";\nbreak;\ncase 5:\nday = \"Friday\";\nbreak;\ncase 6:\nday = \"Saturday\";\n}",
        "labelname: statement;",
        "labelname: {\nstatements\n}",
        "break labelname;",
        "let text = \"\";\n\nloop1: for (let j = 1; j < 5; j++) {\nloop2: for (let i = 1; i < 5; i++) {\nif (i === 3) { break loop1; }\ntext += i;\n}\n}",
        "const cars = [\"BMW\", \"Volvo\", \"Saab\", \"Ford\"];\nlist: {\ntext += cars[0] + \"<br>\";\ntext += cars[1] + \"<br>\";\nbreak list;\ntext += cars[2] + \"<br>\";\ntext += cars[3] + \"<br>\";\n}",
        "break",
        "switch",
        "continue"
      ]
    },
    {
      "title": "JavaScript Continue",
      "summary": "The Continue Statement\nThe continue statement skips the current iteration in a loop.\nThe remaining code in the iteration is skipped and processing moves to the next iteration.\nExample\nSkip the value of 3:\nJavaScript Labels\nA label provides a name for a statement, or a block of statements, allowing statements to be referenced to, for program flow control, particularly in loops.\nSyntax\nA label is an identifier followed by a colon (:).\nA label precedes a statement or a block of code.\nREMOVE ADS\nContinue to Labelname\nSyntax\nExample\nContinue to loop1:\nExample\nContinue to loop2:\nNote\nbreak and continue are the only JavaScript statements that can \"jump out of\" a code block.",
      "examples": [
        "for (let i = 1; i < 10; i++) {\nif (i === 3) { continue; }\ntext += \"The number is \" + i + \"<br>\";\n}",
        "labelname: statement;",
        "labelname: {\nstatements\n}",
        "continue labelname;",
        "let text = \"\";\n\nloop1: for (let j = 1; j < 5; j++) {\nloop2: for (let i = 1; i < 5; i++) {\nif (i === 3) { continue loop1; }\ntext += i;\n}\n}",
        "continue",
        "break"
      ]
    },
    {
      "title": "JavaScript Strings",
      "summary": "Strings are for storing text\nStrings are written with quotes\nUsing Quotes\nA JavaScript string is zero or more characters written inside quotes.\nExample\nYou can use single or double quotes:\nExample\nNote\nStrings created with single or double quotes work the same.\nThere is no difference between the two.\nQuotes Inside Quotes\nYou can use quotes inside a string, as long as they don't match the quotes surrounding the string:\nExample\nTemplate Strings\nTemplates were introduced with ES6 (JavaScript 2016).\nTemplates are strings enclosed in backticks (`This is a template string`).\nTemplates allow single and double quotes inside a string:\nExample\nTry it Yourself »\nString Length\nTo find the length of a string, use the built-in length property:\nExample\nEscape Characters\nBecause strings must be written within quotes, JavaScript will misunderstand this string:\nThe string will be chopped to \"We are the so-called \".\nTo solve this problem, you can use an backslash escape character.\nThe backslash escape character (\\) turns special characters into string characters:\nExamples\n\\\" inserts a double quote in a string:\n\\' inserts a single quote in a string:\n\\\\ inserts a backslash in a string:\nSix other escape sequences are valid in JavaScript:\nNote\nThe 6 escape characters above were originally designed to control typewriters, teletypes, and fax machines. They do not make any sense in HTML.\nREMOVE ADS\nBreaking Long Lines\nFor readability, programmers often like to avoid long code lines.\nA safe way to break up a statement is after an operator:\nExample\nA safe way to break up a string is by using string addition:\nExample\nTemplate Strings\nTemplates were introduced with ES6 (JavaScript 2016).\nTemplates are strings enclosed in backticks (`This is a template string`).\nTemplates allow multiline strings:\nExample\nTry it Yourself »\nJavaScript Strings as Objects\nNormally, JavaScript strings are primitive values, created from literals:\nBut strings can also be defined as objects with the keyword new:\nExample\nDo not create String objects.\nThe new keyword complicates the code and slows down execution speed.\nString objects can produce unexpected results:\nWhen using the == operator, x and y are equal:\nWhen using the === operator, x and y are not equal:\nNote the difference between (x==y) and (x===y).\n(x == y) true or false?\n(x === y) true or false?\nComparing two JavaScript objects always returns false.\nLearn More:\nJavaScript String Methods\nJavaScript String Search\nJavaScript String Reference",
      "examples": [
        "let text = \"John Doe\";",
        "let carName1 = \"Volvo XC60\";  // Double quotes\nlet carName2 = 'Volvo XC60';  // Single quotes",
        "let answer1 = \"It's alright\";\nlet answer2 = \"He is called 'Johnny'\";\nlet answer3 = 'He is called \"Johnny\"';",
        "let text = `He's often called \"Johnny\"`;",
        "let text = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nlet length = text.length;",
        "let text = \"We are the so-called \"Vikings\" from the north.\";",
        "let text = \"We are the so-called \\\"Vikings\\\" from the north.\";",
        "let text= 'It\\'s alright.';",
        "let text = \"The character \\\\ is called backslash.\";",
        "document.getElementById(\"demo\").innerHTML =\n\"Hello Dolly!\";",
        "document.getElementById(\"demo\").innerHTML = \"Hello \" +\n\"Dolly!\";",
        "let text =\n`The quick\nbrown fox\njumps over\nthe lazy dog`;",
        "let x = \"John\";",
        "let y = new String(\"John\");",
        "let x = \"John\";\nlet y = new String(\"John\");",
        "let x = new String(\"John\");\nlet y = new String(\"John\");",
        "length",
        "\\",
        "new",
        "==",
        "===",
        "(x==y)",
        "(x===y)",
        "(x == y)",
        "(x === y)"
      ]
    },
    {
      "title": "JavaScript String Templates",
      "summary": "String Templates\nTemplate Strings\nTemplate Literals\nBeloved child has many names\nBack-Tics Syntax\nTemplate Strings use back-ticks (``) rather than the quotes (\"\") to define a string:\nExample\nTry it Yourself »\nQuotes Inside Strings\nTemplate Strings allow both single and double quotes inside a string:\nExample\nTry it Yourself »\nMultiline Strings\nTemplate Strings allow multiline strings:\nExample\nTry it Yourself »\nREMOVE ADS\nInterpolation\nTemplate Strings allow variables in strings.\nTemplate strings provide an easy way to interpolate variables in strings.\nSyntax\nExample\nVariable Substitutions:\nTry it Yourself »\nExpression Substitution\nTemplate Strings allow interpolation of expressions in strings:\nExample\nTry it Yourself »\nHTML Templates\nExample\nTry it Yourself »\nBrowser Support\nTemplate Strings is an ES6 feature.\nES6 is fully supported in all modern browsers since June 2017:\nComplete String Reference\nFor a complete String reference, go to our:\nComplete JavaScript String Reference.\nThe reference contains descriptions and examples of all string properties and methods.",
      "examples": [
        "let text = `Hello World!`;",
        "let text = `He's often called \"Johnny\"`;",
        "let text =\n`The quick\nbrown fox\njumps over\nthe lazy dog`;",
        "${...}",
        "let firstName = \"John\";\nlet lastName = \"Doe\";\n\nlet text = `Welcome ${firstName}, ${lastName}!`;",
        "let price = 10;\nlet VAT = 0.25;\n\nlet total = `Total: ${(price * (1 + VAT)).toFixed(2)}`;",
        "let header = \"Template Strings\";\nlet tags = [\"template strings\", \"javascript\", \"es6\"];\n\nlet html = `<h2>${header}</h2><ul>`;\nfor (const x of tags) {\nhtml += `<li>${x}</li>`;\n}\n\nhtml += `</ul>`;",
        "Template Strings"
      ]
    },
    {
      "title": "JavaScript String Methods",
      "summary": "Basic String Methods\nJavascript strings are primitive and immutable: All string methods produce a new string without altering the original string.\nSee Also:\nJavaScript String Length\nThe length property returns the length of a string:\nExample\nExtracting String Characters\nThere are 4 methods for extracting string characters:\nThe at(position) Method\nThe charAt(position) Method\nThe charCodeAt(position) Method\nUsing property access [] like in arrays\nJavaScript String charAt()\nThe charAt() method returns the character at a specified index (position) in a string:\nExample\nJavaScript String charCodeAt()\nThe charCodeAt() method returns the code of the character at a specified index in a string:\nThe method returns a UTF-16 code (an integer between 0 and 65535).\nExample\nJavaScript codePointAt()\nExamples\nGet code point value at the first position in a string:\nJavaScript String at()\nES2022 introduced the string method at():\nExamples\nGet the third letter of name:\nGet the third letter of name:\nThe at() method returns the character at a specified index (position) in a string.\nThe at() method is supported in all modern browsers since March 2022:\nNote\nThe at() method is a new addition to JavaScript.\nIt allows the use of negative indexes while charAt() do not.\nBrowser Support\nat() is an ES2022 feature.\nJavaScript 2022 is supported in all modern browsers since March 2022:\nProperty Access [ ]\nExample\nNote\nProperty access might be a little unpredictable:\nIt makes strings look like arrays (but they are not)\nIf no character is found, [ ] returns undefined, while charAt() returns an empty string.\nIt is read only. str[0] = \"A\" gives no error (but does not work!)\nExample\nJavaScript String concat()\nconcat() joins two or more strings:\nExample\nThe concat() method can be used instead of the plus operator. These two lines do the same:\nExample\nNote\nAll string methods return a new string. They don't modify the original string.\nFormally said:\nStrings are immutable: Strings cannot be changed, only replaced.\nExtracting String Parts\nThere are 3 methods for extracting a part of a string:\nslice(start, end)\nsubstring(start, end)\nsubstr(start, length)\nJavaScript String slice()\nslice() extracts a part of a string and returns the extracted part in a new string.\nThe method takes 2 parameters: start position, and end position (end not included).\nExample\nSlice out a portion of a string from position 7 to position 13:\nNote\nJavaScript counts positions from zero.\nFirst position is 0.\nSecond position is 1.\nExamples\nIf you omit the second parameter, the method will slice out the rest of the string:\nIf a parameter is negative, the position is counted from the end of the string:\nThis example slices out a portion of a string from position -12 to position -6:\nREMOVE ADS\nJavaScript String substring()\nsubstring() is similar to slice().\nThe difference is that start and end values less than 0 are treated as 0 in substring().\nExample\nIf you omit the second parameter, substring() will slice out the rest of the string.\nJavaScript String substr()\nsubstr() is similar to slice().\nThe difference is that the second parameter specifies the length of the extracted part.\nWarning\nThe substr() method is removed (deprecated) in the latest JavaScript standard.\nUse substring() or slice() instead.\nExample\nIf you omit the second parameter, substr() will slice out the rest of the string.\nExample\nIf the first parameter is negative, the position counts from the end of the string.\nExample\nConverting to Upper and Lower Case\nA string is converted to upper case with toUpperCase():\nA string is converted to lower case with toLowerCase():\nJavaScript String toUpperCase()\nExample\nJavaScript String toLowerCase()\nExample\nJavaScript String isWellFormed()\nThe isWellFormed() method returns true if a string is well formed.\nOtherwise it returns false.\nA string is not well formed if it contains lone surrogates.\nExamples\nLone Surrogates\nA lone surrogate is a Unicode surrogate code point that is not part of a valid surrogate pair used to represent characters in UTF-16 encoding.\nJavaScript String toWellFormed()\nThe String method toWellFormed() returns a new string where all \"lone surrogates\" are replaced with the Unicode replacement character (U+FFFD).\nExamples\nJavaScript String trim()\nThe trim() method removes whitespace from both sides of a string:\nExample\nJavaScript String trimStart()\nECMAScript 2019 added the String method trimStart() to JavaScript.\nThe trimStart() method works like trim(), but removes whitespace only from the start of a string.\nExample\nBrowser Support\ntrimStart() is an ECMAScript 2019 feature.\nES2019 is supported in all modern browsers since January 2020:\nJavaScript String trimEnd()\nECMAScript 2019 added the string method trimEnd() to JavaScript.\nThe trimEnd() method works like trim(), but removes whitespace only from the end of a string.\nExample\nBrowser Support\ntrimEnd() is an ECMAScript 2019 feature.\nES2019 is supported in all modern browsers since January 2020:\nJavaScript String Padding\nECMAScript 2017 added two new string methods to JavaScript: padStart() and padEnd() to support padding at the beginning and at the end of a string.\nJavaScript String padStart()\nThe padStart() method pads a string from the start.\nIt pads a string with another string (multiple times) until it reaches a given length.\nExamples\nPad a string with \"0\" until it reaches the length 4:\nPad a string with \"x\" until it reaches the length 4:\nNote\nThe padStart() method is a string method.\nTo pad a number, convert the number to a string first.\nSee the example below.\nExample\nBrowser Support\npadStart() is an ECMAScript 2017 feature.\nES2017 is supported in all modern browsers since September 2017:\nJavaScript String padEnd()\nThe padEnd() method pads a string from the end.\nIt pads a string with another string (multiple times) until it reaches a given length.\nExamples\nNote\nThe padEnd() method is a string method.\nTo pad a number, convert the number to a string first.\nSee the example below.\nExample\nBrowser Support\npadEnd() is an ECMAScript 2017 feature.\nES2017 is supported in all modern browsers since September 2017:\nJavaScript String repeat()\nThe repeat() method returns a string with a number of copies of a string.\nThe repeat() method returns a new string.\nThe repeat() method does not change the original string.\nExamples\nCreate copies of a text:\nSyntax\nParameters\nReturn Value\nBrowser Support\nrepeat() is an ES6 feature.\nES6 is fully supported in all modern browsers since June 2017:\nReplacing String Content\nThe replace() method replaces a specified value with another value in a string:\nExample\nNote\nThe replace() method does not change the string it is called on.\nThe replace() method returns a new string.\nThe replace() method replaces only the first match\nIf you want to replace all matches, use a regular expression with the /g flag set. See examples below.\nBy default, the replace() method replaces only the first match:\nExample\nTry it Yourself »\nBy default, the replace() method is case sensitive. Writing MICROSOFT (with upper-case) will not work:\nExample\nTry it Yourself »\nTo replace case insensitive, use a regular expression with an /i flag (insensitive):\nExample\nTry it Yourself »\nNote\nRegular expressions are written without quotes.\nTo replace all matches, use a regular expression with a /g flag (global match):\nExample\nTry it Yourself »\nNote\nYou will learn a lot more about regular expressions in the chapter JavaScript Regular Expressions.\nJavaScript String ReplaceAll()\nIn 2021, JavaScript introduced the string method replaceAll():\nExample\nThe replaceAll() method allows you to specify a regular expression instead of a string to be replaced.\nIf the parameter is a regular expression, the global flag (g) must be set, otherwise a TypeError is thrown.\nExample\nNote\nreplaceAll() is an ES2021 feature.\nreplaceAll() does not work in Internet Explorer.\nConverting a String to an Array\nIf you want to work with a string as an array, you can convert it to an array.\nJavaScript String split()\nA string can be converted to an array with the split() method:\nExample\nIf the separator is omitted, the returned array will contain the whole string in index [0].\nIf the separator is \"\", the returned array will be an array of single characters:\nExample\nComplete JavaScript Reference\nFor a complete reference to all JavaScript properties and methods, with full descriptions and many examples, go to:\nW3Schools' Full JavaScript Reference.\nThe reference inludes all JavaScript updates from 1999 to 2025.",
      "examples": [
        "let text = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nlet length = text.length;",
        "let text = \"HELLO WORLD\";\nlet char = text.charAt(0);",
        "let text = \"HELLO WORLD\";\nlet char = text.charCodeAt(0);",
        "let text = \"HELLO WORLD\";\nlet code = text.codePointAt(0);",
        "const name = \"W3Schools\";\nlet letter = name.at(2);",
        "const name = \"W3Schools\";\nlet letter = name[2];",
        "let text = \"HELLO WORLD\";\nlet char = text[0];",
        "let text = \"HELLO WORLD\";\ntext[0] = \"A\";    // Gives no error, but does not work",
        "let text1 = \"Hello\";\nlet text2 = \"World\";\nlet text3 = text1.concat(\" \", text2);",
        "text = \"Hello\" + \" \" + \"World!\";\ntext = \"Hello\".concat(\" \", \"World!\");",
        "let text = \"Apple, Banana, Kiwi\";\nlet part = text.slice(7, 13);",
        "let text = \"Apple, Banana, Kiwi\";\nlet part = text.slice(7);",
        "let text = \"Apple, Banana, Kiwi\";\nlet part = text.slice(-12);",
        "let text = \"Apple, Banana, Kiwi\";\nlet part = text.slice(-12, -6);",
        "let str = \"Apple, Banana, Kiwi\";\nlet part = str.substring(7, 13);",
        "let str = \"Apple, Banana, Kiwi\";\nlet part = str.substr(7, 6);",
        "let str = \"Apple, Banana, Kiwi\";\nlet part = str.substr(7);",
        "let str = \"Apple, Banana, Kiwi\";\nlet part = str.substr(-4);",
        "let text1 = \"Hello World!\";\nlet text2 = text1.toUpperCase();",
        "let text1 = \"Hello World!\";       // String\nlet text2 = text1.toLowerCase();  // text2 is text1 converted to lower",
        "let text = \"Hello world!\";\nlet result = text.isWellFormed();",
        "let text = \"Hello World \\uD800\";\nlet result = text.isWellFormed();",
        "let text = \"Hello World \\uD800\";\nlet result = text.toWellFormed();",
        "let text1 = \"      Hello World!      \";\nlet text2 = text1.trim();",
        "let text1 = \"     Hello World!     \";\nlet text2 = text1.trimStart();",
        "let text1 = \"     Hello World!     \";\nlet text2 = text1.trimEnd();",
        "let text = \"5\";\nlet padded = text.padStart(4,\"0\");",
        "let text = \"5\";\nlet padded = text.padStart(4,\"x\");",
        "let numb = 5;\nlet text = numb.toString();\nlet padded = text.padStart(4,\"0\");",
        "let text = \"5\";\nlet padded = text.padEnd(4,\"0\");",
        "let text = \"5\";\nlet padded = text.padEnd(4,\"x\");",
        "let numb = 5;\nlet text = numb.toString();\nlet padded = text.padEnd(4,\"0\");",
        "let text = \"Hello world!\";\nlet result = text.repeat(2);",
        "let text = \"Hello world!\";\nlet result = text.repeat(4);",
        "string.repeat(count)",
        "let text = \"Please visit Microsoft!\";\nlet newText = text.replace(\"Microsoft\", \"W3Schools\");",
        "let text = \"Please visit Microsoft and Microsoft!\";\nlet newText = text.replace(\"Microsoft\", \"W3Schools\");",
        "let text = \"Please visit Microsoft!\";\nlet newText = text.replace(\"MICROSOFT\", \"W3Schools\");",
        "let text = \"Please visit Microsoft!\";\nlet newText = text.replace(/MICROSOFT/i, \"W3Schools\");",
        "let text = \"Please visit Microsoft and Microsoft!\";\nlet newText = text.replace(/Microsoft/g, \"W3Schools\");",
        "text = text.replaceAll(\"Cats\",\"Dogs\");\ntext = text.replaceAll(\"cats\",\"dogs\");",
        "text = text.replaceAll(/Cats/g,\"Dogs\");\ntext = text.replaceAll(/cats/g,\"dogs\");",
        "text.split(\",\")    // Split on commas\ntext.split(\" \")    // Split on spaces\ntext.split(\"|\")    // Split on pipe",
        "text.split(\"\")",
        "length",
        "at(position)",
        "charAt(position)",
        "charCodeAt(position)",
        "charAt()",
        "charCodeAt()",
        "at()",
        "myString.at(-2)",
        "charAt(myString.length-2)",
        "concat()",
        "slice(start, end)",
        "substring(start, end)",
        "substr(start, length)",
        "slice()",
        "substring()",
        "substr()",
        "toUpperCase()",
        "toLowerCase()",
        "isWellFormed()",
        "true",
        "false",
        "toWellFormed()",
        "trim()",
        "trimStart()",
        "trimEnd()",
        "padStart()",
        "padEnd()",
        "repeat()",
        "replace()",
        "/i",
        "/g",
        "replaceAll()",
        "split()"
      ]
    },
    {
      "title": "JavaScript String Search",
      "summary": "String Search Methods\nSee Also:\nJavaScript String indexOf()\nThe indexOf() method returns the index (position) of the first occurrence of a string in a string, or it returns -1 if the string is not found:\nExample\nNote\nJavaScript counts positions from zero.\n0 is the first position in a string, 1 is the second, 2 is the third, ...\nJavaScript String lastIndexOf()\nThe lastIndexOf() method returns the index of the last occurrence of a specified text in a string:\nExample\nBoth indexOf(), and lastIndexOf() return -1 if the text is not found:\nExample\nBoth methods accept a second parameter as the starting position for the search:\nExample\nThe lastIndexOf() methods searches backwards (from the end to the beginning), meaning: if the second parameter is 15, the search starts at position 15, and searches to the beginning of the string.\nExample\nJavaScript String search()\nThe search() method searches a string for a string (or a regular expression) and returns the position of the match:\nExamples\nDid You Notice?\nThe two methods, indexOf() and search(), are equal?\nThey accept the same arguments (parameters), and return the same value?\nThe two methods are NOT equal. These are the differences:\nThe search() method cannot take a second start position argument.\nThe indexOf() method cannot take powerful search values (regular expressions).\nYou will learn more about regular expressions in a later chapter.\nREMOVE ADS\nJavaScript String match()\nThe match() method returns an array containing the results of matching a string against a string (or a regular expression).\nExamples\nPerform a search for \"ain\":\nPerform a search for \"ain\":\nPerform a global search for \"ain\":\nPerform a global, case-insensitive search for \"ain\":\nNote\nIf a regular expression does not include the g modifier (global search), match() will return only the first match in the string.\nRead more about regular expressions in the chapter JS RegExp.\nJavaScript String matchAll()\nThe matchAll() method returns an iterator containing the results of matching a string against a string (or a regular expression).\nExample\nIf the parameter is a regular expression, the global flag (g) must be set, otherwise a TypeError is thrown.\nExample\nIf you want to search case insensitive, the insensitive flag (i) must be set:\nExample\nNotes\nmatchAll() is an ES2020 feature.\nmatchAll() does not work in Internet Explorer.\nJavaScript String includes()\nThe includes() method returns true if a string contains a specified value.\nOtherwise it returns false.\nExamples\nCheck if a string includes \"world\":\nCheck if a string includes \"world\". Start at position 12:\nNotes\nincludes() is case sensitive.\nincludes() is an ES6 feature.\nJavaScript String startsWith()\nThe startsWith() method returns true if a string begins with a specified value.\nOtherwise it returns false:\nExamples\nReturns true:\nReturns false:\nA start position for the search can be specified:\nReturns false:\nReturns true:\nNotes\nstartsWith() is case sensitive.\nstartsWith() is an ES6 feature.\nJavaScript String endsWith()\nThe endsWith() method returns true if a string ends with a specified value.\nOtherwise it returns false:\nExamples\nCheck if a string ends with \"Doe\":\nCheck if the 11 first characters of a string ends with \"world\":\nTry it Yourself »\nNotes\nendsWith() is case sensitive.\nendsWith() is an ES6 feature.\nComplete JavaScript Reference\nFor a complete reference to all JavaScript properties and methods, with full descriptions and many examples, go to:\nW3Schools' Full JavaScript Reference.\nThe reference inludes all JavaScript updates from 1999 to 2025.",
      "examples": [
        "let text = \"Please locate where 'locate' occurs!\";\nlet index = text.indexOf(\"locate\");",
        "let text = \"Please locate where 'locate' occurs!\";\nlet index = text.lastIndexOf(\"locate\");",
        "let text = \"Please locate where 'locate' occurs!\";\nlet index = text.lastIndexOf(\"John\");",
        "let text = \"Please locate where 'locate' occurs!\";\nlet index = text.indexOf(\"locate\", 15);",
        "let text = \"Please locate where 'locate' occurs!\";\ntext.lastIndexOf(\"locate\", 15);",
        "let text = \"Please locate where 'locate' occurs!\";\ntext.search(\"locate\");",
        "let text = \"Please locate where 'locate' occurs!\";\ntext.search(/locate/);",
        "let text = \"The rain in SPAIN stays mainly in the plain\";\ntext.match(\"ain\");",
        "let text = \"The rain in SPAIN stays mainly in the plain\";\ntext.match(/ain/);",
        "let text = \"The rain in SPAIN stays mainly in the plain\";\ntext.match(/ain/g);",
        "let text = \"The rain in SPAIN stays mainly in the plain\";\ntext.match(/ain/gi);",
        "const iterator = text.matchAll(\"Cats\");",
        "const iterator = text.matchAll(/Cats/g);",
        "const iterator = text.matchAll(/Cats/gi);",
        "let text = \"Hello world, welcome to the universe.\";\ntext.includes(\"world\");",
        "let text = \"Hello world, welcome to the universe.\";\ntext.includes(\"world\", 12);",
        "let text = \"Hello world, welcome to the universe.\";\ntext.startsWith(\"Hello\");",
        "let text = \"Hello world, welcome to the universe.\";\ntext.startsWith(\"world\")",
        "let text = \"Hello world, welcome to the universe.\";\ntext.startsWith(\"world\", 5)",
        "let text = \"Hello world, welcome to the universe.\";\ntext.startsWith(\"world\", 6)",
        "let text = \"John Doe\";\ntext.endsWith(\"Doe\");",
        "let text = \"Hello world, welcome to the universe.\";\ntext.endsWith(\"world\", 11);",
        "indexOf()",
        "lastIndexOf()",
        "15",
        "search()",
        "match()",
        "matchAll()",
        "includes()",
        "false",
        "startsWith()",
        "true",
        "endsWith()"
      ]
    },
    {
      "title": "JavaScript String Reference",
      "summary": "Complete String Reference\nNote\nAll string methods return a new value.\nThey do not change the original string.\nREMOVE ADS\nString HTML Wrapper Methods\nHTML wrapper methods return a string wrapped inside an HTML tag.\nThese are not standard methods, and may not work as expected.\nThe HTML wrapper methods are deprecated in JavaScript.\nThey are only standardized for compatibility purposes and are not recommended for new development.\nModern web development practices advocate for using CSS for styling and DOM manipulation to create and modify HTML elements, providing greater control and flexibility.\nComplete JavaScript Reference\nFor a complete reference to all JavaScript properties and methods, with full descriptions and many examples, go to:\nW3Schools' Full JavaScript Reference.\nThe reference inludes all JavaScript updates from 1999 to 2025.",
      "examples": []
    },
    {
      "title": "JavaScript Numbers",
      "summary": "JavaScript has only one type of number. Numbers can be written with or without decimals.\nExample\nTry it Yourself »\nExtra large or extra small numbers can be written with scientific (exponent) notation:\nExample\nTry it Yourself »\nJavaScript Numbers are Always 64-bit Floating Point\nUnlike many other programming languages, JavaScript does not define different types of numbers, like integers, short, long, floating-point etc.\nJavaScript numbers are always stored as double precision floating point numbers, following the international IEEE 754 standard.\n\nThis format stores numbers in 64 bits, where the number (the fraction) is stored in bits 0 to 51, the exponent in bits 52 to 62, and the sign in bit 63:\nNote\nMost programming languages have many number types:\nWhole numbers (integers):\nbyte (8-bit), short (16-bit), int (32-bit), long (64-bit)\nReal numbers (floating-point):\nfloat (32-bit), double (64-bit).\nJavascript numbers are always double (64-bit floating point).\nInteger Precision\nIntegers (numbers without a period or exponent notation) are accurate up to 15 digits.\nExample\nThe maximum number of decimals is 17.\nFloating Precision\nFloating point arithmetic is not always 100% accurate:\nTry it Yourself »\nTo solve the problem above, it helps to multiply and divide:\nREMOVE ADS\nAdding Numbers and Strings\nWARNING !!\nJavaScript uses the + operator for both addition and concatenation.\nNumbers are added. Strings are concatenated.\nIf you add two numbers, the result will be a number:\nExample\nIf you add two strings, the result will be a string concatenation:\nExample\nIf you add a number and a string, the result will be a string concatenation:\nExample\nIf you add a string and a number, the result will be a string concatenation:\nExample\nA common mistake is to expect this result to be 30:\nExample\nA common mistake is to expect this result to be 102030:\nExample\nThe JavaScript interpreter works from left to right.\nFirst 10 + 20 is added because x and y are both numbers.\nThen 30 + \"30\" is concatenated because z is a string.\nNumeric Strings\nJavaScript strings can have numeric content:\nJavaScript will try to convert strings to numbers in all numeric operations:\nThis will work:\nTry it Yourself »\nThis will also work:\nTry it Yourself »\nAnd this will work:\nTry it Yourself »\nBut this will not work:\nTry it Yourself »\nIn the last example JavaScript uses the + operator to concatenate the strings.\nNaN - Not a Number\nNaN is a JavaScript reserved word indicating that a number is not a legal number.\nTrying to do arithmetic with a non-numeric string will result in NaN (Not a Number):\nExample\nTry it Yourself »\nHowever, if the string is numeric, the result will be a number:\nExample\nYou can use the global JavaScript function isNaN() to find out if a value is a not a number:\nExample\nWatch out for NaN. If you use NaN in a mathematical operation, the result will also be NaN:\nExample\nOr the result might be a concatenation like NaN5:\nExample\nNaN is a number: typeof NaN returns number:\nExample\nInfinity\nInfinity (or -Infinity) is the value JavaScript will return if you calculate a number outside the largest possible number.\nExample\nDivision by 0 (zero) also generates Infinity:\nExample\nInfinity is a number: typeof Infinity returns number.\nExample\nHexadecimal\nJavaScript interprets numeric constants as hexadecimal if they are preceded by 0x.\nExample\nNever write a number with a leading zero (like 07).\nSome JavaScript versions interpret numbers as octal if they are written with a leading zero.\nBy default, JavaScript displays numbers as base 10 decimals.\nBut you can use the toString() method to output numbers from base 2 to base 36.\nHexadecimal is base 16. Decimal is base 10. Octal is base 8. Binary is base 2.\nExample\nJavaScript Numbers as Objects\nNormally JavaScript numbers are primitive values created from literals:\nBut numbers can also be defined as objects with the keyword new:\nExample\nDo not create Number objects.\nThe new keyword complicates the code and slows down execution speed.\nNumber Objects can produce unexpected results:\nWhen using the == operator, x and y are equal:\nWhen using the === operator, x and y are not equal.\nNote the difference between (x==y) and (x===y).\n(x == y) true or false?\n(x === y) true or false?\nComparing two JavaScript objects always returns false.\nLearn More:\nJavaScript Number Methods\nJavaScript Number Properties\nJavaScript Number Reference",
      "examples": [
        "let x = 3.14;    // A number with decimals\nlet y = 3;       // A number without decimals",
        "let x = 123e5;    // 12300000\nlet y = 123e-5;   // 0.00123",
        "let x = 999999999999999;   // x will be 999999999999999\nlet y = 9999999999999999;  // y will be 10000000000000000",
        "let x = 0.2 + 0.1;",
        "let x = (0.2 * 10 + 0.1 * 10) / 10;",
        "let x = 10;\nlet y = 20;\nlet z = x + y;",
        "let x = \"10\";\nlet y = \"20\";\nlet z = x + y;",
        "let x = 10;\nlet y = \"20\";\nlet z = x + y;",
        "let x = \"10\";\nlet y = 20;\nlet z = x + y;",
        "let x = 10;\nlet y = 20;\nlet z = \"The result is: \" + x + y;",
        "let x = 10;\nlet y = 20;\nlet z = \"30\";\nlet result = x + y + z;",
        "let x = 100;         // x is a number\n\nlet y = \"100\";       // y is a string",
        "let x = \"100\";\nlet y = \"10\";\nlet z = x / y;",
        "let x = \"100\";\nlet y = \"10\";\nlet z = x * y;",
        "let x = \"100\";\nlet y = \"10\";\nlet z = x - y;",
        "let x = \"100\";\nlet y = \"10\";\nlet z = x + y;",
        "let x = 100 / \"Apple\";",
        "let x = 100 / \"10\";",
        "let x = 100 / \"Apple\";\nisNaN(x);",
        "let x = NaN;\nlet y = 5;\nlet z = x + y;",
        "let x = NaN;\nlet y = \"5\";\nlet z = x + y;",
        "typeof NaN;",
        "let myNumber = 2;\n// Execute until Infinity\nwhile (myNumber != Infinity) {\nmyNumber = myNumber * myNumber;\n}",
        "let x =  2 / 0;\nlet y = -2 / 0;",
        "typeof Infinity;",
        "let x = 0xFF;",
        "let myNumber = 32;\nmyNumber.toString(32);\nmyNumber.toString(16);\nmyNumber.toString(12);\nmyNumber.toString(10);\nmyNumber.toString(8);\nmyNumber.toString(2);",
        "let x = 123;",
        "let y = new Number(123);",
        "let x = 123;\nlet y = new Number(123);",
        "let x = 500;\nlet y = new Number(500);",
        "let x = new Number(500);\nlet y = new Number(500);",
        "NaN",
        "isNaN()",
        "typeof NaN",
        "number",
        "Infinity",
        "-Infinity",
        "typeof Infinity",
        "toString()",
        "new",
        "==",
        "===",
        "(x==y)",
        "(x===y)",
        "(x == y)",
        "(x === y)"
      ]
    },
    {
      "title": "JavaScript Number Methods",
      "summary": "Basic Methods\nBasic number methods can be used on any number:\nStatic Methods\nStatic methods can only be used on Number:\nSee Also:\nThe toString() Method\nThe toString() method returns a number as a string.\nAll number methods can be used on any type of numbers (literals, variables, or expressions):\nExample\nThe toString() method can take an optional radix argument to convert the number to a different base:\nExample\nThe toExponential() Method\ntoExponential() returns a string, with a number rounded and written using exponential notation.\nA parameter defines the number of characters behind the decimal point:\nExample\nThe parameter is optional. If you don't specify it, JavaScript will not round the number.\nREMOVE ADS\nThe toFixed() Method\ntoFixed() returns a string, with the number written with a specified number of decimals:\nExample\ntoFixed(2) is perfect for working with money.\nThe toPrecision() Method\ntoPrecision() returns a string, with a number written with a specified length:\nExample\nThe valueOf() Method\nvalueOf() returns a number as a number.\nExample\nIn JavaScript, a number can be a primitive value (typeof = number) or an object (typeof = object).\nThe valueOf() method is used internally in JavaScript to convert Number objects to primitive values.\nThere is no reason to use it in your code.\nAll JavaScript data types have a valueOf() and a toString() method.\nConverting Variables to Numbers\nThere are 3 JavaScript methods that can be used to convert a variable to a number:\nThe methods above are not number methods. They are global JavaScript methods.\nThe Number() Method\nThe Number() method can be used to convert JavaScript variables to numbers:\nExample\nIf the number cannot be converted, NaN (Not a Number) is returned.\nThe Number() Method Used on Dates\nNumber() can also convert a date to a number.\nExample\nNote\nThe Date() method returns the number of milliseconds since 1.1.1970.\nThe number of milliseconds between 1970-01-02 and 1970-01-01 is 86400000:\nExample\nExample\nThe parseInt() Method\nparseInt() parses a string and returns a whole number. Spaces are allowed. Only the first number is returned:\nExample\nIf the number cannot be converted, NaN (Not a Number) is returned.\nThe parseFloat() Method\nparseFloat() parses a string and returns a number. Spaces are allowed. Only the first number is returned:\nExample\nIf the number cannot be converted, NaN (Not a Number) is returned.\nNumber Object Methods\nThese object methods belong to the Number object:\nNumber Methods Cannot be Used on Variables\nThe number methods above belong to the JavaScript Number Object.\nThese methods can only be accessed like Number.isInteger().\nUsing X.isInteger() where X is a variable, will result in an error:\nTypeError X.isInteger is not a function.\nThe Number.isInteger() Method\nThe Number.isInteger() method returns true if the argument is an integer.\nExample\nThe Number.isFinite() Method\nThe Number.isFinite() method returns true if the argument is not Infinity, -iInfinity, nor Nan.\nExample\nThe Number.isNaN() Method\nThe Number.isNaN() method returns true if the argument is NaN (Not a Number).\nExample\nNote\nNumber.isNaN() is the preferred way to check for equality with NaN. You cannot test for equality with NaN using == or ===.\nThe Number.isSafeInteger() Method\nA safe integer is an integer that can be exactly represented as a double precision number.\nThe Number.isSafeInteger() method returns true if the argument is a safe integer.\nExample\nSafe integers are all integers from -(253 - 1) to +(253 - 1).\nThis is safe: 9007199254740991. This is not safe: 9007199254740992.\nThe Number.parseFloat() Method\nNumber.parseFloat() parses a string and returns a number.\nSpaces are allowed. Only the first number is returned:\nExample\nIf the number cannot be converted, NaN (Not a Number) is returned.\nNote\nThe Number methods Number.parseInt() and Number.parseFloat()\n\nare the same as the\n\nGlobal methods parseInt() and parseFloat().\nThe purpose of these two methods is modularization of globals, to make it easier to use the same JavaScript code outside the browser.\nThe Number.parseInt() Method\nNumber.parseInt() parses a string and returns a whole number.\nSpaces are allowed. Only the first number is returned:\nExample\nIf the number cannot be converted, NaN (Not a Number) is returned.\nThe Number.isInteger() Method\nThe Number.isInteger() method returns true if the argument is an integer.\nExample: isInteger()\nThe Number.isSafeInteger() Method\nA safe integer is an integer that can be exactly represented as a double precision number.\nThe Number.isSafeInteger() method returns true if the argument is a safe integer.\nExample isSafeInteger()\nNote\nSafe integers are all integers from -(253 - 1) to +(253 - 1).\nThis is safe: 9007199254740991. This is not safe: 9007199254740992.\nComplete JavaScript Reference\nFor a complete reference to all JavaScript properties and methods, with full descriptions and many examples, go to:\nW3Schools' Full JavaScript Reference.\nThe reference inludes all JavaScript updates from 1999 to 2025.",
      "examples": [
        "let x = 123;\nx.toString();\n(123).toString();\n(100 + 23).toString();",
        "let x = 123;\n\nlet text = x.toString(2);",
        "let x = 9.656;\nx.toExponential(2);\nx.toExponential(4);\nx.toExponential(6);",
        "let x = 9.656;\nx.toFixed(0);\nx.toFixed(2);\nx.toFixed(4);\nx.toFixed(6);",
        "let x = 9.656;\nx.toPrecision();\nx.toPrecision(2);\nx.toPrecision(4);\nx.toPrecision(6);",
        "let x = 123;\nx.valueOf();\n(123).valueOf();\n(100 + 23).valueOf();",
        "Number(true);\nNumber(false);\nNumber(\"10\");\nNumber(\"  10\");\nNumber(\"10  \");\nNumber(\" 10  \");\nNumber(\"10.33\");\nNumber(\"10,33\");\nNumber(\"10 33\");\nNumber(\"John\");",
        "Number(new Date(\"1970-01-01\"))",
        "Number(new Date(\"1970-01-02\"))",
        "Number(new Date(\"2017-09-30\"))",
        "parseInt(\"-10\");\nparseInt(\"-10.33\");\nparseInt(\"10\");\nparseInt(\"10.33\");\nparseInt(\"10 20 30\");\nparseInt(\"10 years\");\nparseInt(\"years 10\");",
        "parseFloat(\"10\");\nparseFloat(\"10.33\");\nparseFloat(\"10 20 30\");\nparseFloat(\"10 years\");\nparseFloat(\"years 10\");",
        "Number.isInteger(10);\nNumber.isInteger(10.5);",
        "Number.isFinite(123);",
        "Number.isNaN(123);",
        "Number.isSafeInteger(10);\nNumber.isSafeInteger(12345678901234567890);",
        "Number.parseFloat(\"10\");\nNumber.parseFloat(\"10.33\");\nNumber.parseFloat(\"10 20 30\");\nNumber.parseFloat(\"10 years\");\nNumber.parseFloat(\"years 10\");",
        "Number.parseInt(\"-10\");\nNumber.parseInt(\"-10.33\");\nNumber.parseInt(\"10\");\nNumber.parseInt(\"10.33\");\nNumber.parseInt(\"10 20 30\");\nNumber.parseInt(\"10 years\");\nNumber.parseInt(\"years 10\");",
        "toString()",
        "toExponential()",
        "toFixed()",
        "toFixed(2)",
        "toPrecision()",
        "valueOf()",
        "Number()",
        "NaN",
        "Date()",
        "parseInt()",
        "parseFloat()",
        "Number.isInteger()",
        "TypeError X.isInteger is not a function",
        "true",
        "Number.isFinite()",
        "Number.isNaN()",
        "Number.isSafeInteger()",
        "Number.parseFloat()",
        "Number.parseInt()"
      ]
    },
    {
      "title": "JavaScript Number Properties",
      "summary": "Number Properties\nSee Also:\nJavaScript EPSILON\nNumber.EPSILON is the difference between the smallest floating point number greater than 1 and 1.\nExample\nNote\nNumber.EPSILON is an ES6 feature.\nIt does not work in Internet Explorer.\nJavaScript MAX_VALUE\nNumber.MAX_VALUE is a constant representing the largest possible number in JavaScript.\nExample\nNumber Properties Cannot be Used on Variables\nNumber properties belong to the JavaScript Number Object.\nThese properties can only be accessed as Number.MAX_VALUE.\nUsing x.MAX_VALUE, where x is a variable or a value, will return undefined:\nExample\nJavaScript MIN_VALUE\nNumber.MIN_VALUE is a constant representing the lowest possible number in JavaScript.\nExample\nMinimum and Maximum Safe Integers\nES6 added max and min properties to the Number object:\nNumber.MAX_SAFE_INTEGER\nNumber.MIN_SAFE_INTEGER\nJavaScript MIN_SAFE_INTEGER\nNumber.MIN_SAFE_INTEGER represents the minimum safe integer in JavaScript.\nNumber.MIN_SAFE_INTEGER is -(253 - 1).\nExample\nJavaScript MAX_SAFE_INTEGER\nNumber.MAX_SAFE_INTEGER represents the maximum safe integer in JavaScript.\nNumber.MAX_SAFE_INTEGER is (253 - 1).\nExample\nREMOVE ADS\nJavaScript POSITIVE_INFINITY\nExample\nPOSITIVE_INFINITY is returned on overflow:\nJavaScript NEGATIVE_INFINITY\nExample\nNEGATIVE_INFINITY is returned on overflow:\nJavaScript NaN - Not a Number\nNaN is a JavaScript reserved word for a number that is not a legal number.\nExamples\nTrying to do arithmetic with a non-numeric string will result in NaN (Not a Number):\nTry it Yourself »\nSafe integers are all integers from -(253 - 1) to +(253 - 1).\nThis is safe: 9007199254740991. This is not safe: 9007199254740992.\nComplete JavaScript Reference\nFor a complete reference to all JavaScript properties and methods, with full descriptions and many examples, go to:\nW3Schools' Full JavaScript Reference.\nThe reference inludes all JavaScript updates from 1999 to 2025.",
      "examples": [
        "let x = Number.EPSILON;",
        "let x = Number.MAX_VALUE;",
        "let x = 6;\nx.MAX_VALUE",
        "let x = Number.MIN_VALUE;",
        "let x = Number.MIN_SAFE_INTEGER;",
        "let x = Number.MAX_SAFE_INTEGER;",
        "let x = Number.POSITIVE_INFINITY;",
        "let x = 1 / 0;",
        "let x = Number.NEGATIVE_INFINITY;",
        "let x = -1 / 0;",
        "let x = Number.NaN;",
        "let x = 100 / \"Apple\";",
        "Number.EPSILON",
        "Number.MAX_VALUE",
        "undefined",
        "Number.MIN_VALUE",
        "Number.MAX_SAFE_INTEGER",
        "Number.MIN_SAFE_INTEGER",
        "POSITIVE_INFINITY",
        "NEGATIVE_INFINITY",
        "NaN"
      ]
    },
    {
      "title": "JavaScript Number Reference",
      "summary": "Complete Number Reference\nNOTE\nAll number methods return a new value.\nThey do not change the original number.\nComplete JavaScript Reference\nFor a complete reference to all JavaScript properties and methods, with full descriptions and many examples, go to:\nW3Schools' Full JavaScript Reference.\nThe reference inludes all JavaScript updates from 1999 to 2025.",
      "examples": []
    },
    {
      "title": "JavaScript BigInt",
      "summary": "JavaScript BigInt variables are used to store big integer values that are too big to be represented by a normal JavaScript Number.\nJavaScript Integer Accuracy\nJavaScript integers are only accurate up to 15 digits:\nInteger Precision\nIn JavaScript, all numbers are stored in a 64-bit floating-point format (IEEE 754 standard).\nWith this standard, large integer cannot be exactly represented and will be rounded.\nBecause of this, JavaScript can only safely represent integers:\nUp to 9007199254740991 +(253-1)\nand\nDown to -9007199254740991 -(253-1).\nInteger values outside this range lose precision.\nHow to Create a BigInt\nTo create a BigInt, append n to the end of an integer or call BigInt():\nExamples\nBigInt: A new JavaScript Datatype\nThe JavaScript typeof a BigInt is \"bigint\":\nExample\nBigInt is the second numeric data type in JavaScript (after Number).\nWith BigInt the total number of supported data types in JavaScript is 8:\n1. String\n2. Number\n3. Bigint\n4. Boolean\n5. Undefined\n6. Null\n7. Symbol\n8. Object\nBigInt Operators\nOperators that can be used on a JavaScript Number can also be used on a BigInt.\nBigInt Multiplication Example\nNotes\nArithmetic between a BigInt and a Number is not allowed (type conversion lose information).\nUnsigned right shift (>>>) can not be done on a BigInt (it does not have a fixed width).\nBigInt Decimals\nA BigInt can not have decimals.\nBigInt Division Example\nBigInt Hex, Octal and Binary\nBigInt can also be written in hexadecimal, octal, or binary notation:\nBigInt Hex Example\nPrecision Curiosity\nRounding can compromise program security:\nMAX_SAFE_INTEGER Example\nBrowser Support\nBigInt() is an ES2020 feature.\nES2020 is fully supported in all modern browsers since September 2020:\nREMOVE ADS",
      "examples": [
        "let x = 999999999999999;\nlet y = 9999999999999999;",
        "let x = 9999999999999999;\nlet y = 9999999999999999n;",
        "let x = 1234567890123456789012345n;\nlet y = BigInt(1234567890123456789012345)",
        "let x = BigInt(999999999999999);\nlet type = typeof x;",
        "let x = 9007199254740995n;\nlet y = 9007199254740995n;\nlet z = x * y;",
        "let x = 5n;\nlet y = x / 2;\n// Error: Cannot mix BigInt and other types, use explicit conversion.",
        "let x = 5n;\nlet y = Number(x) / 2;",
        "let hex = 0x20000000000003n;\nlet oct = 0o400000000000000003n;\nlet bin = 0b100000000000000000000000000000000000000000000000000011n;",
        "9007199254740992 === 9007199254740993; // is true !!!",
        "BigInt",
        "Number",
        "BigInt()",
        "typeof"
      ]
    },
    {
      "title": "JavaScript Bitwise Operations",
      "summary": "JavaScript Bitwise Operators\nExamples\nJavaScript Uses 32 bits Bitwise Operands\nJavaScript stores numbers as 64 bits floating point numbers, but all bitwise operations are performed on 32 bits binary numbers.\nBefore a bitwise operation is performed, JavaScript converts numbers to 32 bits signed integers.\nAfter the bitwise operation is performed, the result is converted back to 64 bits JavaScript numbers.\nThe examples above uses 4 bits unsigned binary numbers. Because of this ~ 5 returns 10.\nSince JavaScript uses 32 bits signed integers, it will not return 10. It will return -6.\n00000000000000000000000000000101 (5)\n11111111111111111111111111111010 (~5 = -6)\nA signed integer uses the leftmost bit as the minus sign.\nREMOVE ADS\nJavaScript Bitwise AND\nWhen a bitwise AND is performed on a pair of bits, it returns 1 if both bits are 1.\nJavaScript Bitwise OR\nWhen a bitwise OR is performed on a pair of bits, it returns 1 if one of the bits is 1:\nJavaScript Bitwise XOR\nWhen a bitwise XOR is performed on a pair of bits, it returns 1 if the bits are different:\nJavaScript Bitwise AND (&)\nBitwise AND returns 1 only if both bits are 1:\nExample\nJavaScript Bitwise OR (|)\nBitwise OR returns 1 if one of the bits is 1:\nExample\nJavaScript Bitwise XOR (^)\nBitwise XOR returns 1 if the bits are different:\nExample\nJavaScript Bitwise NOT (~)\nExample\nJavaScript (Zero Fill) Bitwise Left Shift (<<)\nThis is a zero fill left shift. One or more zero bits are pushed in from the right, and the leftmost bits fall off:\nExample\nJavaScript (Sign Preserving) Bitwise Right Shift (>>)\nThis is a sign preserving right shift. Copies of the leftmost bit are pushed in from the left, and the rightmost bits fall off:\nExample\nJavaScript (Zero Fill) Right Shift (>>>)\nThis is a zero fill right shift. One or more zero bits are pushed in from the left, and the rightmost bits fall off:\nExample\nShift Assignment Operators\nThe <<= Operator\nThe Left Shift Assignment Operator left shifts a variable.\nLeft Shift Assignment Example\nThe >>= Operator\nThe Right Shift Assignment Operator right shifts a variable (signed).\nRight Shift Assignment Example\nThe >>>= Operator\nThe Unsigned Right Shift Assignment Operator right shifts a variable (unsigned).\nUnsigned Right Shift Assignment Example\nBitwise Assignment Operators\nThe &= Operator\nThe Bitwise AND Assignment Operator does a bitwise AND operation on two operands and assigns the result to the the variable.\nBitwise AND Assignment Example\nThe |= Operator\nThe Bitwise OR Assignment Operator does a bitwise OR operation on two operands and assigns the result to the variable.\nBitwise OR Assignment Example\nThe ^= Operator\nThe Bitwise XOR Assignment Operator does a bitwise XOR operation on two operands and assigns the result to the variable.\nBitwise XOR Assignment Example\nBinary Numbers\nBinary numbers with only one bit set are easy to understand:\nSetting a few more bits reveals the binary pattern:\nJavaScript binary numbers are stored in two's complement format.\nThis means that a negative number is the bitwise NOT of the number plus 1:\nJoke:\nThere are only 10 types of people in the world: those who understand binary and those who don't.\nConverting Decimal to Binary\nExample\nConverting Binary to Decimal\nExample",
      "examples": [
        "let x = 5 & 1;",
        "let x = 5 | 1;",
        "let x = 5 ^ 1;",
        "let x = ~5;",
        "let x = 5 << 1;",
        "let x = -5 >> 1;",
        "let x = 5 >>> 1;",
        "let x = -100;\nx <<= 5;",
        "let x = -100;\nx >>= 5;",
        "let x = -100;\nx >>>= 5;",
        "let x = 10;\nx &= 5;",
        "let x = 10;\nx |= 5;",
        "let x = 10;\nx ^= 5;",
        "function dec2bin(dec){\nreturn (dec >>> 0).toString(2);\n}",
        "function bin2dec(bin){\nreturn parseInt(bin, 2).toString(10);\n}"
      ]
    },
    {
      "title": "JavaScript Functions",
      "summary": "What are Functions?\nFunctions are fundamental building blocks in all programming.\nFunctions enable better code organization, modularity, and efficiency.\nFunctions are reusable block of code designed to perform a particular task.\nFunctions execute when they are \"called\" or \"invoked\".\nExample\nFunction to compute the product of two numbers:\nJavaScript Function Syntax\nA function is defined with the function keyword, followed by the function name, followed by parentheses ( ), followed by brackets { }.\nThe name follows the naming rules for variables (letters, digits, ...).\nOptional parameters are listed inside parentheses: (p1, p2, p3)\nThe code to be executed is listed inside curly brackets: { code }\nFunctions can optionally return a value back to the \"caller\".\nWhy Functions?\nWith functions you can reuse code\nYou can write code that can be used many times.\nYou can use the same code with different arguments, to produce different results.\nFunction Invocation ()\nThe code inside the function will execute when \"something\" invokes (calls) the function:\nWhen it is invoked (called) from JavaScript code\nWhen an event occurs (a user clicks a button)\nAutomatically (self invoked)\nThe () operator invokes (calls) the function:\nExample\nConvert Fahrenheit to Celsius:\nAccessing a function with incorrect parameters can return an incorrect answer:\nExample\nAccessing a function without () returns the function and not the function result:\nExample\nNote\nIn the examples above, toCelsius refers to the function object, and toCelsius() refers to the function result.\nREMOVE ADS\nArrow Functions\nArrow functions were introduced in ES6.\nArrow functions allow us to write shorter function syntax:\nBefore Arrow:\nFunction to compute the product of a and b\nTry it Yourself »\nWith Arrow\nTry it Yourself »\nLearn More:\nJavaScript Arrow Functions\nLocal Variables\nVariables declared within a JavaScript function, become LOCAL to the function.\nLocal variables can only be accessed from within the function.\nExample\nSince local variables are only recognized inside their functions, variables with the same name can be used in different functions.\nLocal variables are created when a function starts, and deleted when the function is completed.\nParameters vs. Arguments\nIn JavaScript, function parameters and arguments are distinct concepts:\nParameters are the names listed in the function definition.\nParameters are the names of the values that will be passed.\nExample\n\"name\" and \"age\" are parameters:\nArguments are the values passed to the function when it is invoked or called.\nArguments are the values received by the function.\nExample\n\"John\" and 21 are arguments:\nFunctions Used as Variables\nFunctions can be used as variables, in all types of formulas, assignments, and calculations.\nExample\nInstead of using a variable to store the return value of a function:\nYou can use the function directly, as a variable value:\nNote\nYou will learn a lot more about functions later in this tutorial.",
      "examples": [
        "function myFunction(p1, p2) {\nreturn p1 * p2;\n}",
        "function name(p1, p2, p3) { // code }",
        "function toCelsius(fahrenheit) {\nreturn (5/9) * (fahrenheit-32);\n}\n\nlet value = toCelsius(77);",
        "function toCelsius(fahrenheit) {\nreturn (5/9) * (fahrenheit-32);\n}\n\nlet value = toCelsius();",
        "function toCelsius(fahrenheit) {\nreturn (5/9) * (fahrenheit-32);\n}\n\nlet value = toCelsius;",
        "let myFunction = function(a, b) {return a * b}",
        "let myFunction = (a, b) => a * b;",
        "// code here can NOT use carName\n\nfunction myFunction() {\nlet carName = \"Volvo\";\n// code here CAN use carName\n}\n\n// code here can NOT use carName",
        "function greet(name, age) {\nreturn `Hello $name! You are ${age} years old.`;\n}",
        "greet(\"John\", 21);",
        "let x = toCelsius(77);\nlet text = \"The temperature is \" + x + \" Celsius\";",
        "let text = \"The temperature is \" + toCelsius(77) + \" Celsius\";",
        "toCelsius",
        "toCelsius()"
      ]
    },
    {
      "title": "JavaScript Objects",
      "summary": "An Object is a variable that can hold many variables.\nObjects are collections of key-value pairs, where each key (known as property names) has a value.\nObjects can describe anything like houses, cars, people, animals, or any other subjects.\nDifferent cars have the same properties, but the property values can differ from car to car.\nDifferent cars have the same methods, but the methods can be performed at different times.\nJavaScript Objects\nThis code assigns many values (Fiat, 500, white) to an object named car:\nExample\nNote:\nYou should declare objects with the const keyword.\nWhen an object is declared with const, you cannot later reassign it to point to a different variable.\nIt does not make the object unchangeable. You can still modify its properties and values.\nHow to Create a JavaScript Object\nAn object literal is a concise way to create an object.\nAn object literal is a list of key : value pairs inside curly braces { }:\nIn object terms, the key : value pairs are the object properties.\nExamples\nAll the examples below, create a JavaScript object with 4 properties.\nSpaces and line breaks are not important. An object literal can span multiple lines:\nYou can also create an empty object, and add the properties later:\nUsing the new Keyword\nExample\nCreate a new JavaScript object using new Object():\nNote:\nAll the examples above do exactly the same.\nThere is no need to use new Object().\nFor readability, simplicity and speed, use an object literal instead.\nREMOVE ADS\nObject Properties\nYou can access object properties in two ways:\nExamples\nJavaScript Object Methods\nObject methods are actions that can be performed on objects.\nObject methods are function definitions stored as property values:\nExample\nIn the example above, this refers to the person object:\nthis.firstName means the firstName property of person.\nthis.lastName means the lastName property of person.\nHow to Display JavaScript Objects?\nDisplaying a JavaScript object will output [object Object].\nExample\nDisplaying Object Properties\nThe properties of an object can be added in a string:\nExample\nObject Constructor Functions\nSometimes we need to create many objects of the same type.\nTo create an object type we use an object constructor function.\nIt is considered good practice to name constructor functions with an upper-case first letter.\nObject Type Person\nNote:\nIn the constructor function, this has no value.\nThe value of this will become the new object when a new object is created.\nNow we can use new Person() to create many new Person objects:\nExample\nSummary\nObjects are containers for Properties and Methods.\nProperties are named Values.\nMethods are Functions stored as Properties.\nProperties can be primitive values, functions, or even other objects.\nConstructors are Object Prototypes.\nIn JavaScript, Objects are King.\nIn JavaScript, almost \"everything\" is an object.\nObjects are objects\nMaths are objects\nFunctions are objects\nDates are objects\nArrays are objects\nMaps are objects\nSets are objects\nAll JavaScript values, except primitives, are objects.\nJavaScript Primitives\nA primitive data type is data type that can only store a single primitive value.\nJavaScript defines 7 types of primitive data types:\nLearn More:\nJavaScript Object Definitions\nJavaScript Object Properties\nJavaScript Object Methods\nJavaScript Object Display\nJavaScript Object Constructors\nJavaScript Object this\nJavaScript Object Distructuring\nJavaScript Object Prototypes\nJavaScript Object Iterations\nJavaScript Object Management\nJavaScript Object Getters & Setters\nJavaScript Object Protection\nJavaScript Object Reference",
      "examples": [
        "const car = {type:\"Fiat\", model:\"500\", color:\"white\"};",
        "{firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"}",
        "// Create an Object\nconst person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};",
        "// Create an Object\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};",
        "// Create an Object\nconst person = {};\n\n// Add Properties\nperson.firstName = \"John\";\nperson.lastName = \"Doe\";\nperson.age = 50;\nperson.eyeColor = \"blue\";",
        "// Create an Object\nconst person = new Object({\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n});",
        "objectName.propertyName",
        "objectName[\"propertyName\"]",
        "person.lastName;",
        "person[\"lastName\"];",
        "const person = {\nfirstName: \"John\",\nlastName : \"Doe\",\nid       : 5566,\nfullName : function() {\nreturn this.firstName + \" \" + this.lastName;\n}\n};",
        "// Create an Object\nconst person = {\nname: \"John\",\nage: 30,\ncity: \"New York\"\n};\n\nlet text = person;",
        "// Create an Object\nconst person = {\nname: \"John\",\nage: 30,\ncity: \"New York\"\n};\n\n// Add Properties\nlet text = person.name + \",\" + person.age + \",\" + person.city;",
        "function Person(first, last, age, eye) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eye;\n}",
        "const myFather = new Person(\"John\", \"Doe\", 50, \"blue\");\nconst myMother = new Person(\"Sally\", \"Rally\", 48, \"green\");\nconst mySister = new Person(\"Anna\", \"Rally\", 18, \"green\");\n\nconst mySelf = new Person(\"Johnny\", \"Rally\", 22, \"green\");",
        "new Object()",
        "this",
        "new Person()",
        "string",
        "number",
        "boolean",
        "bigint",
        "null",
        "undefined",
        "symbol"
      ]
    },
    {
      "title": "JavaScript Dates",
      "summary": "JavaScript Date Objects let us work with dates:\ndocument.write(xxx)Sun Sep 21 2025 10:30:43 GMT+0800 (Malaysia Time)\nExamples\nNote\nDate objects are static. The \"clock\" is not \"running\".\nThe computer clock is ticking, date objects are not.\nJavaScript Date Output\nBy default, JavaScript will use the browser's time zone and display a date as a full text string:\ndocument.write(xxx)Sun Sep 21 2025 10:30:43 GMT+0800 (Malaysia Time)\nYou will learn much more about how to display dates, later in this tutorial.\nCreating Date Objects\nDate objects are created with the new Date() constructor.\nThere are 9 ways to create a new date object:\nJavaScript new Date()\nnew Date() creates a date object with the current date and time:\nExample\nnew Date(date string)\nnew Date(date string) creates a date object from a date string:\nExamples\nDate string formats are described in the next chapter.\nnew Date(year, month, ...)\nnew Date(year, month, ...) creates a date object with a specified date and time.\n7 numbers specify year, month, day, hour, minute, second, and millisecond (in that order):\nExample\nNote\nJavaScript counts months from 0 to 11:\nJanuary = 0.\nDecember = 11.\nSpecifying a month higher than 11, will not result in an error but add the overflow to the next year:\nSpecifying:\nIs the same as:\nSpecifying a day higher than max, will not result in an error but add the overflow to the next month:\nSpecifying:\nIs the same as:\nUsing 6, 4, 3, or 2 Numbers\n6 numbers specify year, month, day, hour, minute, second:\nExample\n5 numbers specify year, month, day, hour, and minute:\nExample\n4 numbers specify year, month, day, and hour:\nExample\n3 numbers specify year, month, and day:\nExample\n2 numbers specify year and month:\nExample\nYou cannot omit month. If you supply only one parameter it will be treated as milliseconds.\nExample\nPrevious Century\nOne and two digit years will be interpreted as 19xx:\nExample\nExample\nJavaScript Stores Dates as Milliseconds\nJavaScript stores dates as number of milliseconds since January 01, 1970.\nZero time is January 01, 1970 00:00:00 UTC.\nOne day (24 hours) is 86 400 000 milliseconds.\nNow the time is: document.write(xxx.getTime())1758421843068 milliseconds past January 01, 1970\nnew Date(milliseconds)\nnew Date(milliseconds) creates a new date object as milliseconds plus zero time:\nExamples\n01 January 1970 plus 100 000 000 000 milliseconds is:\nJanuary 01 1970 minus 100 000 000 000 milliseconds is:\nJanuary 01 1970 plus 24 hours is:\n01 January 1970 plus 0 milliseconds is:\nREMOVE ADS\nDate Methods\nWhen a date object is created, a number of methods allow you to operate on it.\nDate methods allow you to get and set the year, month, day, hour, minute, second, and millisecond of date objects, using either local time or UTC (universal, or GMT) time.\nDate methods and time zones are covered in the next chapters.\nDisplaying Dates\nJavaScript will (by default) output dates using the toString() method. This is a string representation of the date, including the time zone. The format is specified in the ECMAScript specification:\nExample\nWhen you display a date object in HTML, it is automatically converted to a string, with the toString() method.\nExample\nThe toDateString() method converts a date to a more readable format:\nExample\nThe toUTCString() method converts a date to a string using the UTC standard:\nExample\nThe toISOString() method converts a date to a string using the ISO standard:\nExample\nLearn More:\nJavaScript Date Formats\nJavaScript Date Get Methods\nJavaScript Date Set Methods\nJavaScript Date Reference",
      "examples": [
        "const d = new Date();",
        "const d = new Date(\"2022-03-25\");",
        "new Date()\nnew Date(date string)\n\nnew Date(year,month)\nnew Date(year,month,day)\nnew Date(year,month,day,hours)\nnew Date(year,month,day,hours,minutes)\nnew Date(year,month,day,hours,minutes,seconds)\nnew Date(year,month,day,hours,minutes,seconds,ms)\n\nnew Date(milliseconds)",
        "const d = new Date(\"October 13, 2014 11:13:00\");",
        "const d = new Date(2018, 11, 24, 10, 33, 30, 0);",
        "const d = new Date(2018, 15, 24, 10, 33, 30);",
        "const d = new Date(2019, 3, 24, 10, 33, 30);",
        "const d = new Date(2018, 5, 35, 10, 33, 30);",
        "const d = new Date(2018, 6, 5, 10, 33, 30);",
        "const d = new Date(2018, 11, 24, 10, 33, 30);",
        "const d = new Date(2018, 11, 24, 10, 33);",
        "const d = new Date(2018, 11, 24, 10);",
        "const d = new Date(2018, 11, 24);",
        "const d = new Date(2018, 11);",
        "const d = new Date(2018);",
        "const d = new Date(99, 11, 24);",
        "const d = new Date(9, 11, 24);",
        "const d = new Date(100000000000);",
        "const d = new Date(-100000000000);",
        "const d = new Date(24 * 60 * 60 * 1000);\n// or\nconst d = new Date(86400000);",
        "const d = new Date(0);",
        "document.write(new Date()) Sun Sep 21 2025 10:30:43 GMT+0800 (Malaysia Time)",
        "const d = new Date();\nd.toString();",
        "const d = new Date();\nd.toDateString();",
        "const d = new Date();\nd.toUTCString();",
        "const d = new Date();\nd.toISOString();",
        "new Date()",
        "new Date(date string)",
        "new Date(year, month, ...)",
        "new Date(milliseconds)",
        "toString()",
        "toDateString()",
        "toUTCString()",
        "toISOString()"
      ]
    },
    {
      "title": "JavaScript Date Formats",
      "summary": "JavaScript Date Input\nThere are generally 3 types of JavaScript date input formats:\nThe ISO format follows a strict standard in JavaScript.\nThe other formats are not so well defined and might be browser specific.\nJavaScript Date Output\nIndependent of input format, JavaScript will (by default) output dates in full text string format:\nJavaScript ISO Dates\nISO 8601 is the international standard for the representation of dates and times.\nThe ISO 8601 syntax (YYYY-MM-DD) is also the preferred JavaScript date format:\nExample (Complete date)\nThe computed date will be relative to your time zone.\nDepending on your time zone, the result above will vary between March 24 and March 25.\nREMOVE ADS\nISO Dates (Year and Month)\nISO dates can be written without specifying the day (YYYY-MM):\nExample\nTime zones will vary the result above between February 28 and March 01.\nISO Dates (Only Year)\nISO dates can be written without month and day (YYYY):\nExample\nTime zones will vary the result above between December 31 2014 and January 01 2015.\nISO Dates (Date-Time)\nISO dates can be written with added hours, minutes, and seconds (YYYY-MM-DDTHH:MM:SSZ):\nExample\nDate and time is separated with a capital T.\nUTC time is defined with a capital letter Z.\nIf you want to modify the time relative to UTC, remove the Z and add +HH:MM or -HH:MM instead:\nExample\nUTC (Universal Time Coordinated) is the same as GMT (Greenwich Mean Time).\nOmitting T or Z in a date-time string can give different results in different browsers.\nTime Zones\nWhen setting a date, without specifying the time zone, JavaScript will use the browser's time zone.\nWhen getting a date, without specifying the time zone, the result is converted to the browser's time zone.\nIn other words: If a date/time is created in GMT (Greenwich Mean Time), the date/time will be converted to CDT (Central US Daylight Time) if a user browses from central US.\nJavaScript Short Dates.\nShort dates are written with an \"MM/DD/YYYY\" syntax like this:\nExample\nWARNINGS !\nIn some browsers, months or days with no leading zeroes may produce an error:\nThe behavior of \"YYYY/MM/DD\" is undefined.\nSome browsers will try to guess the format. Some will return NaN.\nThe behavior of  \"DD-MM-YYYY\" is also undefined.\nSome browsers will try to guess the format. Some will return NaN.\nJavaScript Long Dates.\nLong dates are most often written with a \"MMM DD YYYY\" syntax like this:\nExample\nMonth and day can be in any order:\nExample\nAnd, month can be written in full (January), or abbreviated (Jan):\nExample\nExample\nCommas are ignored. Names are case insensitive:\nExample\nDate Input - Parsing Dates\nIf you have a valid date string, you can use the Date.parse() method to convert it to milliseconds.\nDate.parse() returns the number of milliseconds between the date and January 1, 1970:\nExample\nYou can then use the number of milliseconds to convert it to a date object:\nExample\nLearn More:\nJavaScript Date Tutorial\nJavaScript Date Get Methods\nJavaScript Date Set Methods\nJavaScript Date Reference",
      "examples": [
        "document.write(new Date()) Sun Sep 21 2025 10:30:44 GMT+0800 (Malaysia Time)",
        "const d = new Date(\"2015-03-25\");",
        "const d = new Date(\"2015-03\");",
        "const d = new Date(\"2015\");",
        "const d = new Date(\"2015-03-25T12:00:00Z\");",
        "const d = new Date(\"2015-03-25T12:00:00-06:30\");",
        "const d = new Date(\"03/25/2015\");",
        "const d = new Date(\"2015-3-25\");",
        "const d = new Date(\"2015/03/25\");",
        "const d = new Date(\"25-03-2015\");",
        "const d = new Date(\"Mar 25 2015\");",
        "const d = new Date(\"25 Mar 2015\");",
        "const d = new Date(\"January 25 2015\");",
        "const d = new Date(\"Jan 25 2015\");",
        "const d = new Date(\"JANUARY, 25, 2015\");",
        "let msec = Date.parse(\"March 21, 2012\");",
        "let msec = Date.parse(\"March 21, 2012\");\nconst d = new Date(msec);",
        "Date.parse()"
      ]
    },
    {
      "title": "JavaScript Get Date Methods",
      "summary": "The new Date() Constructor\nIn JavaScript, date objects are created with new Date().\nnew Date() returns a date object with the current date and time.\nGet the Current Time\nDate Get Methods\nNote 1\nThe get methods above return Local time.\nUniversal time (UTC) is documented at the bottom of this page.\nNote 2\nThe get methods return information from existing date objects.\nIn a date object, the time is static. The \"clock\" is not \"running\".\nThe time in a date object is NOT the same as current time.\nThe getFullYear() Method\nThe getFullYear() method returns the year of a date as a four digit number:\nExamples\nWarning !\nOld JavaScript code might use the non-standard method getYear().\ngetYear() is supposed to return a 2-digit year.\ngetYear() is deprecated. Do not use it!\nThe getMonth() Method\nThe getMonth() method returns the month of a date as a number (0-11).\nNote\nIn JavaScript, January is month number 0, February is number 1, ...\nFinally, December is month number 11.\nExamples\nNote\nYou can use an array of names to return the month as a name:\nExamples\nThe getDate() Method\nThe getDate() method returns the day of a date as a number (1-31):\nExamples\nREMOVE ADS\nThe getHours() Method\nThe getHours() method returns the hours of a date as a number (0-23):\nExamples\nThe getMinutes() Method\nThe getMinutes() method returns the minutes of a date as a number (0-59):\nExamples\nThe getSeconds() Method\nThe getSeconds() method returns the seconds of a date as a number (0-59):\nExamples\nThe getMilliseconds() Method\nThe getMilliseconds() method returns the milliseconds of a date as a number (0-999):\nExamples\nThe getDay() Method\nThe getDay() method returns the weekday of a date as a number (0-6).\nNote\nIn JavaScript, the first day of the week (day 0) is Sunday.\nSome countries in the world consider the first day of the week to be Monday.\nExamples\nNote\nYou can use an array of names, and getDay() to return weekday as a name:\nExamples\nThe getTime() Method\nThe getTime() method returns the number of milliseconds since January 1, 1970:\nExamples\nThe Date.now() Method\nDate.now() returns the number of milliseconds since January 1, 1970.\nExamples\nCalculate the number of years since 1970/01/01:\nDate.now() is a static method of the Date object.\nYou cannot use it on a date object like myDate.now().\nThe syntax is always Date.now().\nUTC Date Get Methods\nUTC methods use UTC time (Coordinated Universal Time).\nUTC time is the same as GMT (Greenwich Mean Time).\nThe difference between Local time and UTC time can be up to 24 hours.\nThe getTimezoneOffset() Method\nThe getTimezoneOffset() method returns the difference (in minutes) between local time an UTC time:\nExample\nLearn More:\nJavaScript Date Tutorial\nJavaScript Date Formats\nJavaScript Date Set Methods\nJavaScript Date Reference",
      "examples": [
        "const date = new Date();",
        "const d = new Date(\"2021-03-25\");\nd.getFullYear();",
        "const d = new Date();\nd.getFullYear();",
        "const d = new Date(\"2021-03-25\");\nd.getMonth();",
        "const d = new Date();\nd.getMonth();",
        "const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\nconst d = new Date(\"2021-03-25\");\nlet month = months[d.getMonth()];",
        "const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\nconst d = new Date();\nlet month = months[d.getMonth()];",
        "const d = new Date(\"2021-03-25\");\nd.getDate();",
        "const d = new Date();\nd.getDate();",
        "const d = new Date(\"2021-03-25\");\nd.getHours();",
        "const d = new Date();\nd.getHours();",
        "const d = new Date(\"2021-03-25\");\nd.getMinutes();",
        "const d = new Date();\nd.getMinutes();",
        "const d = new Date(\"2021-03-25\");\nd.getSeconds();",
        "const d = new Date();\nd.getSeconds();",
        "const d = new Date(\"2021-03-25\");\nd.getMilliseconds();",
        "const d = new Date();\nd.getMilliseconds();",
        "const d = new Date(\"2021-03-25\");\nd.getDay();",
        "const d = new Date();\nd.getDay();",
        "const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\nconst d = new Date(\"2021-03-25\");\nlet day = days[d.getDay()];",
        "const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\nconst d = new Date();\nlet day = days[d.getDay()];",
        "const d = new Date(\"1970-01-01\");\nd.getTime();",
        "const d = new Date(\"2021-03-25\");\nd.getTime();",
        "const d = new Date();\nd.getTime();",
        "let ms = Date.now();",
        "const minute = 1000 * 60;\nconst hour = minute * 60;\nconst day = hour * 24;\nconst year = day * 365;\n\nlet years = Math.round(Date.now() / year);",
        "let diff = d.getTimezoneOffset();",
        "new Date()",
        "getFullYear()",
        "getMonth()",
        "getDate()",
        "getHours()",
        "getMinutes()",
        "getSeconds()",
        "getMilliseconds()",
        "getDay()",
        "getTime()",
        "Date.now()",
        "myDate.now()",
        "getTimezoneOffset()"
      ]
    },
    {
      "title": "JavaScript Set Date Methods",
      "summary": "Set Date methods let you set date values (years, months, days, hours, minutes, seconds, milliseconds) for a Date Object.\nSet Date Methods\nSet Date methods are used for setting a part of a date:\nThe setFullYear() Method\nThe setFullYear() method sets the year of a date object. In this example to 2020:\nExample\nThe setFullYear() method can optionally set month and day:\nExample\nREMOVE ADS\nThe setMonth() Method\nThe setMonth() method sets the month of a date object (0-11):\nExample\nThe setDate() Method\nThe setDate() method sets the day of a date object (1-31):\nExample\nThe setDate() method can also be used to add days to a date:\nExample\nNote\nIf adding days shifts the month or year, the changes are handled automatically by the Date object.\nThe setHours() Method\nThe setHours() method sets the hours of a date object (0-23):\nExample\nThe setHours() method can also be used to set minutes and seconds.\nExample\nThe setMinutes() Method\nThe setMinutes() method sets the minutes of a date object (0-59):\nExample\nThe setSeconds() Method\nThe setSeconds() method sets the seconds of a date object (0-59):\nExample\nCompare Dates\nDates can easily be compared.\nThe following example compares today's date with January 14, 2100:\nExample\nNote\nJavaScript counts months from 0 to 11. January is 0. December is 11.\nLearn More:\nJavaScript Date Tutorial\nJavaScript Date Formats\nJavaScript Date Get Methods\nJavaScript Date Reference",
      "examples": [
        "const d = new Date(\"January 01, 2025\");\nd.setFullYear(2020);",
        "const d = new Date(\"January 01, 2025\");\nd.setFullYear(2020, 11, 3);",
        "const d = new Date(\"January 01, 2025\");\nd.setMonth(11);",
        "const d = new Date(\"January 01, 2025\");\nd.setDate(15);",
        "const d = new Date(\"January 01, 2025\");\nd.setDate(d.getDate() + 50);",
        "const d = new Date(\"January 01, 2025\");\nd.setHours(22);",
        "const d = new Date(\"January 01, 2025\");\nd.setHours(22, 10, 20);",
        "const d = new Date(\"January 01, 2025\");\nd.setMinutes(30);",
        "const d = new Date(\"January 01, 2025\");\nd.setSeconds(30);",
        "let text = \"\";\nconst today = new Date();\nconst someday = new Date();\nsomeday.setFullYear(2100, 0, 14);\n\nif (someday > today) {\ntext = \"Today is before January 14, 2100.\";\n} else {\ntext = \"Today is after January 14, 2100.\";\n}",
        "setFullYear()",
        "setMonth()",
        "setDate()",
        "setHours()",
        "setMinutes()",
        "setSeconds()"
      ]
    },
    {
      "title": "JavaScript Date Reference",
      "summary": "JavaScript Date Methods and Properties\nLearn More:\nJavaScript Date Tutorial\nJavaScript Date Formats\nJavaScript Date Get Methods\nJavaScript Date Set Methods\nJavaScript Date Reference",
      "examples": []
    },
    {
      "title": "JavaScript Arrays",
      "summary": "Example\nAn Array is an object type designed for storing data collections.\nKey characteristics of JavaScript arrays are:\nElements: An array is a list of values, known as elements.\nElements: An array is a list of values, known as elements.\nOrdered: Array elements are ordered based on their index.\nOrdered: Array elements are ordered based on their index.\nZero indexed: The first element is at index 0, the second at index 1, and so on.\nZero indexed: The first element is at index 0, the second at index 1, and so on.\nDynamic size: Arrays can grow or shrink as elements are added or removed.\nDynamic size: Arrays can grow or shrink as elements are added or removed.\nHeterogeneous: Arrays can store elements of different data types (numbers, strings, objects and other arrays).\nHeterogeneous: Arrays can store elements of different data types (numbers, strings, objects and other arrays).\nWhy Use Arrays?\nIf you have a list of items (a list of car names, for example), storing the names in single variables could look like this:\nHowever, what if you want to loop through the cars and find a specific one? And what if you had not 3 cars, but 300?\nThe solution is an array!\nAn array can hold many values under a single name, and you can access the values by referring to an index number.\nCreating an Array\nUsing an array literal is the easiest way to create a JavaScript Array.\nSyntax:\nNote\nIt is a common practice to declare arrays with the const keyword.\nLearn more about const with arrays in the chapter: JS Array Const.\nExample\nSpaces and line breaks are not important. A declaration can span multiple lines:\nExample\nYou can also create an empty array, and provide elements later:\nExample\nUsing the JavaScript Keyword new\nThe following example also creates an Array, and assigns values to it:\nExample\nNote\nThe two examples above do exactly the same.\nThere is no need to use new Array().\nFor simplicity, readability and execution speed, use the array literal method.\nREMOVE ADS\nAccessing Array Elements\nYou access an array element by referring to the index number:\nNote: Array indexes start with 0.\n[0] is the first element. [1] is the second element.\nChanging an Array Element\nThis statement changes the value of the first element in cars:\nExample\nConverting an Array to a String\nThe JavaScript method toString() converts an array to a string of (comma separated) array values.\nExample\nResult:\nAccess the Full Array\nWith JavaScript, the full array can be accessed by referring to the array name:\nExample\nArrays are Objects\nArrays are a special type of objects. The typeof operator in JavaScript returns \"object\" for arrays.\nBut, JavaScript arrays are best described as arrays.\nArrays use numbers to access its \"elements\". In this example, person[0] returns John:\nArray:\nObjects use names to access its \"members\". In this example, person.firstName returns John:\nObject:\nArray Elements Can Be Objects\nJavaScript variables can be objects. Arrays are special kinds of objects.\nBecause of this, you can have variables of different types in the same Array.\nYou can have objects in an Array. You can have functions in an Array. You can have arrays in an Array:\nArray Properties and Methods\nThe real strength of JavaScript arrays are the built-in array properties and methods:\nArray methods are covered in the next chapters.\nThe length Property\nThe length property of an array returns the length of an array (the number of array elements).\nExample\nThe length property is always one more than the highest array index.\nAccessing the First Array Element\nExample\nAccessing the Last Array Element\nExample\nLooping Array Elements\nOne way to loop through an array, is using a for loop:\nExample\nYou can also use the Array.forEach() function:\nExample\nAdding Array Elements\nThe easiest way to add a new element to an array is using the push() method:\nExample\nNew element can also be added to an array using the length property:\nExample\nWARNING !\nAdding elements with high indexes can create undefined \"holes\" in an array:\nExample\nAssociative Arrays\nMany programming languages support arrays with named indexes.\nArrays with named indexes are called associative arrays (or hashes).\nJavaScript does not support arrays with named indexes.\nIn JavaScript, arrays always use numbered indexes.\nExample\nWARNING !!\nIf you use named indexes, JavaScript will redefine the array to an object.\nAfter that, some array methods and properties will produce incorrect results.\nExample:\nThe Difference Between Arrays and Objects\nIn JavaScript, arrays use numbered indexes.\nIn JavaScript, objects use named indexes.\nArrays are a special kind of objects, with numbered indexes.\nWhen to Use Arrays. When to use Objects.\nJavaScript does not support associative arrays.\nYou should use objects when you want the element names to be strings (text).\nYou should use arrays when you want the element names to be numbers.\nJavaScript new Array()\nJavaScript has a built-in array constructor new Array().\nBut you can safely use [] instead.\nThese two different statements both create a new empty array named points:\nThese two different statements both create a new array containing 6 numbers:\nThe new keyword can produce some unexpected results:\nA Common Error\nis not the same as:\nHow to Recognize an Array\nA common question is: How do I know if a variable is an array?\nThe problem is that the JavaScript operator typeof returns \"object\":\nThe typeof operator returns object because a JavaScript array is an object.\nSolution 1:\nTo solve this problem ECMAScript 5 (JavaScript 2009) defined a new method Array.isArray():\nSolution 2:\nThe instanceof operator returns true if an object is created by a given constructor:\nNested Arrays and Objects\nValues in objects can be arrays, and values in arrays can be objects:\nExample\nTo access arrays inside arrays, use a for-in loop for each array:\nExample\nLearn More:\nBasic Array Methods\nArray Search Methods\nArray Sort Methods\nArray Iteration Methods\nJavaScript Array Reference",
      "examples": [
        "const cars = [\"Saab\", \"Volvo\", \"BMW\"];",
        "let car1 = \"Saab\";\nlet car2 = \"Volvo\";\nlet car3 = \"BMW\";",
        "const array_name = [item1, item2, ...];",
        "const cars = [\n\"Saab\",\n\"Volvo\",\n\"BMW\"\n];",
        "const cars = [];\ncars[0]= \"Saab\";\ncars[1]= \"Volvo\";\ncars[2]= \"BMW\";",
        "const cars = new Array(\"Saab\", \"Volvo\", \"BMW\");",
        "const cars = [\"Saab\", \"Volvo\", \"BMW\"];\nlet car = cars[0];",
        "cars[0] = \"Opel\";",
        "const cars = [\"Saab\", \"Volvo\", \"BMW\"];\ncars[0] = \"Opel\";",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\ndocument.getElementById(\"demo\").innerHTML = fruits.toString();",
        "const cars = [\"Saab\", \"Volvo\", \"BMW\"];\ndocument.getElementById(\"demo\").innerHTML = cars;",
        "const person = [\"John\", \"Doe\", 46];",
        "const person = {firstName:\"John\", lastName:\"Doe\", age:46};",
        "myArray[0] = Date.now;\nmyArray[1] = myFunction;\nmyArray[2] = myCars;",
        "cars.length   // Returns the number of elements\ncars.sort()   // Sorts the array",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet length = fruits.length;",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet fruit = fruits[0];",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet fruit = fruits[fruits.length - 1];",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet fLen = fruits.length;\n\nlet text = \"<ul>\";\nfor (let i = 0; i < fLen; i++) {\ntext += \"<li>\" + fruits[i] + \"</li>\";\n}\ntext += \"</ul>\";",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\nlet text = \"<ul>\";\nfruits.forEach(myFunction);\ntext += \"</ul>\";\n\nfunction myFunction(value) {\ntext += \"<li>\" + value + \"</li>\";\n}",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\"];\nfruits.push(\"Lemon\");  // Adds a new element (Lemon) to fruits",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\"];\nfruits[fruits.length] = \"Lemon\";  // Adds \"Lemon\" to fruits",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\"];\nfruits[6] = \"Lemon\";  // Creates undefined \"holes\" in fruits",
        "const person = [];\nperson[0] = \"John\";\nperson[1] = \"Doe\";\nperson[2] = 46;\nperson.length;    // Will return 3\nperson[0];        // Will return \"John\"",
        "const person = [];\nperson[\"firstName\"] = \"John\";\nperson[\"lastName\"] = \"Doe\";\nperson[\"age\"] = 46;\nperson.length;     // Will return 0\nperson[0];         // Will return undefined",
        "const points = new Array();\nconst points = [];",
        "const points = new Array(40, 100, 1, 5, 25, 10);\nconst points = [40, 100, 1, 5, 25, 10];",
        "// Create an array with three elements:\nconst points = new Array(40, 100, 1);",
        "// Create an array with two elements:\nconst points = new Array(40, 100);",
        "// Create an array with one element ???\nconst points = new Array(40);",
        "const points = [40];",
        "const points = new Array(40);",
        "// Create an array with one element:\nconst points = [40];",
        "// Create an array with 40 undefined elements:\nconst points = new Array(40);",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\"];\nlet type = typeof fruits;",
        "Array.isArray(fruits);",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\"];\n\n(fruits instanceof Array);",
        "const myObj = {\nname: \"John\",\nage: 30,\ncars: [\n{name:\"Ford\", models:[\"Fiesta\", \"Focus\", \"Mustang\"]},\n{name:\"BMW\", models:[\"320\", \"X3\", \"X5\"]},\n{name:\"Fiat\", models:[\"500\", \"Panda\"]}\n]\n}",
        "for (let i in myObj.cars) {\nx += \"<h1>\" + myObj.cars[i].name + \"</h1>\";\nfor (let j in myObj.cars[i].models) {\nx += myObj.cars[i].models[j];\n}\n}",
        "new Array()",
        "cars",
        "toString()",
        "typeof",
        "person[0]",
        "person.firstName",
        "length",
        "for",
        "Array.forEach()",
        "push()",
        "[]",
        "new",
        "object",
        "Array.isArray()",
        "instanceof"
      ]
    },
    {
      "title": "JavaScript Array Methods",
      "summary": "Basic Array Methods\nComplete JavaScript Array Reference\nSee Also:\nJavaScript Array Tutorial\nJavaScript Array Search Methods\nJavaScript Array Sort Methods\nJavaScript Array Iteration Methods\nJavaScript Array length\nThe length property returns the length (size) of an array:\nExample\nThe length property can also be used to set the length of an array:\nExample\nJavaScript Array toString()\nThe toString() method returns the elements of an array as a comma separated string.\nExample\nNote\nEvery JavaScript object has a toString() method.\nThe toString() method is used internally by JavaScript when an object needs to be displayed as a text (like in HTML), or when an object needs to be used as a string.\nJavaScript Array at()\nES2022 intoduced the array method at():\nExamples\nGet the third element of fruits using at():\nGet the third element of fruits using []:\nThe at() method returns an indexed element from an array.\nThe at() method returns the same as [].\nBrowser Support\nat() is an ES2022 feature.\nJavaScript 2022 is supported in all modern browsers since March 2022:\nNote\nMany languages allow negative bracket indexing like [-1] to access elements from the end of an object / array / string.\nThis is not possible in JavaScript, because [] is used for accessing both arrays and objects. obj[-1] refers to the value of key -1, not to the last property of the object.\nThe at() method was introduced in ES2022 to solve this problem.\nJavaScript Array join()\nThe join() method also joins all array elements into a string.\nIt behaves just like toString(), but in addition you can specify the separator:\nExample\nResult:\nPopping and Pushing\nWhen you work with arrays, it is easy to remove elements and add new elements.\nThis is what popping and pushing is:\nPopping items out of an array, or pushing items into an array.\nREMOVE ADS\nJavaScript Array pop()\nThe pop() method removes the last element from an array:\nExample\nThe pop() method returns the value that was \"popped out\":\nExample\nJavaScript Array push()\nThe push() method adds a new element to an array (at the end):\nExample\nThe push() method returns the new array length:\nExample\nShifting Elements\nShifting is equivalent to popping, but working on the first element instead of the last.\nJavaScript Array shift()\nThe shift() method removes the first array element and \"shifts\" all other elements to a lower index.\nExample\nThe shift() method returns the value that was \"shifted out\":\nExample\nJavaScript Array unshift()\nThe unshift() method adds a new element to an array (at the beginning), and \"unshifts\" older elements:\nExample\nThe unshift() method returns the new array length:\nExample\nChanging Elements\nArray elements are accessed using their index number:\nArray indexes start with 0:\n[0] is the first array element\n[1] is the second\n[2] is the third ...\nExample\nJavaScript Array length\nThe length property provides an easy way to append a new element to an array:\nExample\nJavaScript Array delete()\nWarning !\nUsing delete() leaves undefined holes in the array.\nUse pop() or shift() instead.\nExample\nMerging Arrays (Concatenating)\nIn programming languages, concatenation means joining strings end-to-end.\nConcatenation \"snow\" and \"ball\" gives \"snowball\".\nConcatenating arrays means joining arrays end-to-end.\nJavaScript Array concat()\nThe concat() method creates a new array by merging (concatenating) existing arrays:\nExample (Merging Two Arrays)\nNote\nThe concat() method does not change the existing arrays. It always returns a new array.\nThe concat() method can take any number of array arguments.\nExample (Merging Three Arrays)\nThe concat() method can also take strings as arguments:\nExample (Merging an Array with Values)\nArray copyWithin()\nThe copyWithin() method copies array elements to another position in an array:\nExamples\nCopy to index 2, all elements from index 0:\nCopy to index 2, the elements from index 0 to 2:\nNote\nThe copyWithin() method overwrites the existing values.\nThe copyWithin() method does not add items to the array.\nThe copyWithin() method does not change the length of the array.\nFlattening an Array\nFlattening an array is the process of reducing the dimensionality of an array.\nFlattening is useful when you want to convert a multi-dimensional array into a one-dimensional array.\nJavaScript Array flat()\nES2019 Introduced the Array flat() method.\nThe flat() method creates a new array with sub-array elements concatenated to a specified depth.\nExample\nBrowser Support\nflat() is an ECMAScript 2019 feature.\nES2019 is supported in all modern browsers since January 2020:\nJavaScript Array flatMap()\nES2019 added the Array flatMap() method to JavaScript.\nThe flatMap() method first maps all elements of an array and then creates a new array by flattening the array.\nExample\nBrowser Support\nflatMap() is an ECMAScript 2019 feature.\nES2019 is supported in all modern browsers since January 2020:\nSplicing and Slicing Arrays\nThe splice() method adds new items to an array.\nThe slice() method slices out a piece of an array.\nJavaScript Array splice()\nThe splice() method can be used to add new items to an array:\nExample\nThe first parameter (2) defines the position where new elements should be added (spliced in).\nThe second parameter (0) defines how many elements should be removed.\nThe rest of the parameters (\"Lemon\" , \"Kiwi\") define the new elements to be added.\nThe splice() method returns an array with the deleted items:\nExample\nUsing splice() to Remove Elements\nWith clever parameter setting, you can use splice() to remove elements without leaving \"holes\" in the array:\nExample\nThe first parameter (0) defines the position where new elements should be added (spliced in).\nThe second parameter (1) defines how many elements should be removed.\nThe rest of the parameters are omitted. No new elements will be added.\nJavaScript Array toSpliced()\nES2023 added the Array toSpliced() method as a safe way to splice an array without altering the original array.\nThe difference between the new toSpliced() method and the old splice() method is that the new method creates a new array, keeping the original array unchanged, while the old method altered the original array.\nExample\nJavaScript Array slice()\nThe slice() method slices out a piece of an array into a new array:\nExample\nSlice out a part of an array starting from array element 1 (\"Orange\"):\nNote\nThe slice() method creates a new array.\nThe slice() method does not remove any elements from the source array.\nExample\nSlice out a part of an array starting from array element 3 (\"Apple\"):\nThe slice() method can take two arguments like slice(1, 3).\nThe method then selects elements from the start argument, and up to (but not including) the end argument.\nExample\nIf the end argument is omitted, like in the first examples, the slice() method slices out the rest of the array.\nExample\nAutomatic toString()\nJavaScript automatically converts an array to a comma separated string when a primitive value is expected.\nThis is always the case when you try to output an array.\nThese two examples will produce the same result:\nExample\nExample\nNote\nAll JavaScript objects have a toString() method.\nSearching Arrays\nSearching arrays are covered in the next chapter of this tutorial.\nSorting Arrays\nSorting arrays covers the methods used to sort arraysg.\nIterating Arrays\nIterating arrays covers methods that operate on all array elements.",
      "examples": [
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\nlet size = fruits.length;",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\nfruits.length = 2;",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\nlet myList = fruits.toString();",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet fruit = fruits.at(2);",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet fruit = fruits[2];",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\ndocument.getElementById(\"demo\").innerHTML = fruits.join(\" * \");",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.pop();",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet fruit = fruits.pop();",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.push(\"Kiwi\");",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet length = fruits.push(\"Kiwi\");",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.shift();",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet fruit = fruits.shift();",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.unshift(\"Lemon\");",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits[0] = \"Kiwi\";",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits[fruits.length] = \"Kiwi\";",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\ndelete fruits[0];",
        "const myGirls = [\"Cecilie\", \"Lone\"];\nconst myBoys = [\"Emil\", \"Tobias\", \"Linus\"];\n\nconst myChildren = myGirls.concat(myBoys);",
        "const arr1 = [\"Cecilie\", \"Lone\"];\nconst arr2 = [\"Emil\", \"Tobias\", \"Linus\"];\nconst arr3 = [\"Robin\", \"Morgan\"];\nconst myChildren = arr1.concat(arr2, arr3);",
        "const arr1 = [\"Emil\", \"Tobias\", \"Linus\"];\nconst myChildren = arr1.concat(\"Peter\");",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.copyWithin(2, 0);",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\", \"Kiwi\"];\nfruits.copyWithin(2, 0, 2);",
        "const myArr = [[1,2],[3,4],[5,6]];\nconst newArr = myArr.flat();",
        "const myArr = [1, 2, 3, 4, 5, 6];\nconst newArr = myArr.flatMap(x => [x, x * 10]);",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.splice(2, 0, \"Lemon\", \"Kiwi\");",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.splice(2, 2, \"Lemon\", \"Kiwi\");",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.splice(0, 1);",
        "const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\"];\nconst spliced = months.toSpliced(0, 1);",
        "const fruits = [\"Banana\", \"Orange\", \"Lemon\", \"Apple\", \"Mango\"];\nconst citrus = fruits.slice(1);",
        "const fruits = [\"Banana\", \"Orange\", \"Lemon\", \"Apple\", \"Mango\"];\nconst citrus = fruits.slice(1, 3);",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\ndocument.getElementById(\"demo\").innerHTML = fruits.toString();",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\ndocument.getElementById(\"demo\").innerHTML = fruits;",
        "length",
        "toString()",
        "at()",
        "[]",
        "negative bracket indexing",
        "join()",
        "pop()",
        "push()",
        "shift()",
        "unshift()",
        "delete()",
        "undefined",
        "concat()",
        "copyWithin()",
        "flat()",
        "flatMap()",
        "splice()",
        "slice()",
        "slice(1, 3)"
      ]
    },
    {
      "title": "JavaScript Array Search",
      "summary": "Array Search Methods\nComplete JavaScript Array Reference\nSee Also:\nJavaScript Array Tutorial\nJavaScript Basic Array Methods\nJavaScript Array Sort Methods\nJavaScript Array Iteration Methods\nJavaScript Array Reference\nJavaScript Array indexOf()\nThe indexOf() method searches an array for an element value and returns its position.\nNote: The first item has position 0, the second item has position 1, and so on.\nExample\nSearch an array for the item \"Apple\":\nSyntax\nArray.indexOf() returns -1 if the item is not found.\nIf the item is present more than once, it returns the position of the first occurrence.\nJavaScript Array lastIndexOf()\nArray.lastIndexOf() is the same as Array.indexOf(), but returns the position of the last occurrence of the specified element.\nExample\nSearch an array for the item \"Apple\":\nSyntax\nJavaScript Array includes()\nECMAScript 2016 introduced Array.includes() to arrays. This allows us to check if an element is present in an array (including NaN, unlike indexOf).\nExample\nSyntax\nArray.includes() allows to check for NaN values. Unlike Array.indexOf().\nBrowser Support\nincludes() is an ECMAScript 2016 feature.\nES 2016 is fully supported in all modern browsers since March 2017:\nREMOVE ADS\nJavaScript Array find()\nThe find() method returns the value of the first array element that passes a test function.\nThis example finds (returns the value of) the first element that is larger than 18:\nExample\nNote that the function takes 3 arguments:\nThe item value\nThe item index\nThe array itself\nBrowser Support\nfind() is an ES6 feature.\nES6 is fully supported in all modern browsers since June 2017:\nJavaScript Array findIndex()\nThe findIndex() method returns the index of the first array element that passes a test function.\nThis example finds the index of the first element that is larger than 18:\nExample\nNote that the function takes 3 arguments:\nThe item value\nThe item index\nThe array itself\nBrowser Support\nfindIndex() is an ES6 feature.\nES6 is fully supported in all modern browsers since June 2017:\nJavaScript Array findLast() Method\nES2023 added the findLast() method that will start from the end of an array and return the value of the first element that satisfies a condition.\nExample\nBrowser Support\nfindLast() is an ES2023 feature.\nJavaScript 2023 is supported in all modern browsers since July 2023:\nJavaScript Array findLastIndex() Method\nThe findLastIndex() method finds the index of the last element that satisfies a condition.\nExample\nBrowser Support\nfindLastIndex() is an ES2023 feature.\nJavaScript 2023 is supported in all modern browsers since July 2023:\nComplete JavaScript Reference\nFor a complete reference to all JavaScript properties and methods, with full descriptions and many examples, go to:\nW3Schools' Full JavaScript Reference.\nThe reference inludes all JavaScript updates from 1999 to 2025.",
      "examples": [
        "const fruits = [\"Apple\", \"Orange\", \"Apple\", \"Mango\"];\nlet position = fruits.indexOf(\"Apple\") + 1;",
        "array.indexOf(item, start)",
        "const fruits = [\"Apple\", \"Orange\", \"Apple\", \"Mango\"];\nlet position = fruits.lastIndexOf(\"Apple\") + 1;",
        "array.lastIndexOf(item, start)",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\nfruits.includes(\"Mango\"); // is true",
        "array.includes(search-item)",
        "const numbers = [4, 9, 16, 25, 29];\nlet first = numbers.find(myFunction);\n\nfunction myFunction(value, index, array) {\nreturn value > 18;\n}",
        "const numbers = [4, 9, 16, 25, 29];\nlet first = numbers.findIndex(myFunction);\n\nfunction myFunction(value, index, array) {\nreturn value > 18;\n}",
        "const temp = [27, 28, 30, 40, 42, 35, 30];\nlet high = temp.findLast(x => x > 40);",
        "const temp = [27, 28, 30, 40, 42, 35, 30];\nlet pos = temp.findLastIndex(x => x > 40);",
        "indexOf()",
        "Array.indexOf()",
        "Array.lastIndexOf()",
        "Array.includes()",
        "includes()",
        "find()",
        "findIndex()",
        "findLast()",
        "findLastIndex()"
      ]
    },
    {
      "title": "JavaScript Array Sort",
      "summary": "Alphabetic Sort\nNumeric Sort\nComplete JavaScript Array Reference\nSee Also:\nArray Tutorial\nArray Basic Methods\nArray Search Methods\nArray Iteration Methods\nArray Reference\nSorting an Array\nThe sort() method sorts an array alphabetically:\nExample\nReversing an Array\nThe reverse() method reverses the elements in an array:\nExample\nBy combining sort() and reverse(), you can sort an array in descending order:\nExample\nJavaScript Array toSorted() Method\nES2023 added the toSorted() method as a safe way to sort an array without altering the original array.\nThe difference between toSorted() and sort() is that the first method creates a new array, keeping the original array unchanged, while the last method alters the original array.\nExample\nJavaScript Array toReversed() Method\nES2023 added the toReversed() method as a safe way to reverse an array without altering the original array.\nThe difference between toReversed() and reverse() is that the first method creates a new array, keeping the original array unchanged, while the last method alters the original array.\nExample\nNumeric Sort\nBy default, the sort() function sorts values as strings.\nThis works well for strings (\"Apple\" comes before \"Banana\").\nIf numbers are sorted as strings, \"25\" is bigger than \"100\", because \"2\" is bigger than \"1\".\nBecause of this, the sort() method will produce incorrect result when sorting numbers.\nYou can fix this by providing a compare function:\nExample\nUse the same trick to sort an array descending:\nExample\nREMOVE ADS\nThe Compare Function\nThe purpose of the compare function is to define an alternative sort order.\nThe compare function should return a negative, zero, or positive value, depending on the arguments:\nWhen the sort() function compares two values, it sends the values to the compare function, and sorts the values according to the returned (negative, zero, positive) value.\nIf the result is negative, a is sorted before b.\nIf the result is positive, b is sorted before a.\nIf the result is 0, no changes are done with the sort order of the two values.\nExample:\nThe compare function compares all the values in the array, two values at a time (a, b).\nWhen comparing 40 and 100, the sort() method calls the compare function(40, 100).\nThe function calculates 40 - 100 (a - b), and since the result is negative (-60),  the sort function will sort 40 as a value lower than 100.\nYou can use this code snippet to experiment with numerically and alphabetically sorting:\nSorting an Array in Random Order\nUsing a sort function, like explained above, you can sort an numeric array in random order\nExample\nTry it Yourself »\nThe Fisher Yates Method\nThe points.sort() method in the example above is not accurate. It will favor some numbers over others.\nThe most popular correct method, is called the Fisher Yates shuffle, and was introduced in data science as early as 1938!\nIn JavaScript the method can be translated to this:\nExample\nTry it Yourself »\nFind the Lowest (or Highest) Array Value\nThere are no built-in functions for finding the max or min value in an array.\nTo find the lowest or highest value you have 3 options:\nSort the array and read the first or last element\nUse Math.min() or Math.max()\nWrite a home made function\nFind Min or Max with sort()\nAfter you have sorted an array, you can use the index to obtain the highest and lowest values.\nExample\nExample\nNote\nSorting a whole array is a very inefficient method if you only want to find the highest (or lowest) value.\nUsing Math.min() on an Array\nYou can use Math.min.apply to find the lowest number in an array:\nExample\nTry it Yourself »\nMath.min.apply(null, [1, 2, 3]) is equivalent to Math.min(1, 2, 3).\nUsing Math.max() on an Array\nYou can use Math.max.apply to find the highest number in an array:\nExample\nTry it Yourself »\nMath.max.apply(null, [1, 2, 3]) is equivalent to Math.max(1, 2, 3).\nJavaScript Array Minimum Method\nThere is no built-in function for finding the lowest value in a JavaScript array.\nThe fastest code to find the lowest number is to use a home made method.\nThis function loops through an array comparing each value with the lowest value found:\nExample (Find Min)\nTry it Yourself »\nJavaScript Array Maximum Method\nThere is no built-in function for finding the highest value in a JavaScript array.\nThe fastest code to find the highest number is to use a home made method.\nThis function loops through an array comparing each value with the highest value found:\nExample (Find Max)\nTry it Yourself »\nSorting Object Arrays\nJavaScript arrays often contain objects:\nExample\nEven if objects have properties of different data types, the sort() method can be used to sort the array.\nThe solution is to write a compare function to compare the property values:\nExample\nComparing string properties is a little more complex:\nExample\nStable Array sort()\nES2019 revised the Array sort() method.\nBefore 2019, the specification allowed unstable sorting algorithms such as QuickSort.\nAfter ES2019, browsers must use a stable sorting algorithm:\nWhen sorting elements on a value, the elements must keep their relative position to other elements with the same value.\nExample\nIn the example above, when sorting on price, the result is not allowed to come out with the names in an other relative position like this:\nComplete JavaScript Reference\nFor a complete reference to all JavaScript properties and methods, with full descriptions and many examples, go to:\nW3Schools' Full JavaScript Reference.\nThe reference inludes all JavaScript updates from 1999 to 2025.",
      "examples": [
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.sort();",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.reverse();",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.sort();\nfruits.reverse();",
        "const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\"];\nconst sorted = months.toSorted();",
        "const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\"];\nconst reversed = months.toReversed();",
        "const points = [40, 100, 1, 5, 25, 10];\npoints.sort(function(a, b){return a - b});",
        "const points = [40, 100, 1, 5, 25, 10];\npoints.sort(function(a, b){return b - a});",
        "function(a, b){return a - b}",
        "<button onclick=\"myFunction1()\">Sort Alphabetically</button>\n<button onclick=\"myFunction2()\">Sort Numerically</button>\n\n<p id=\"demo\"></p>\n\n<script>\nconst points = [40, 100, 1, 5, 25, 10];\ndocument.getElementById(\"demo\").innerHTML = points;\n\nfunction myFunction1() {\npoints.sort();\ndocument.getElementById(\"demo\").innerHTML = points;\n}\n\nfunction myFunction2() {\npoints.sort(function(a, b){return a - b});\ndocument.getElementById(\"demo\").innerHTML = points;\n}\n</script>",
        "const points = [40, 100, 1, 5, 25, 10];\npoints.sort(function(){return 0.5 - Math.random()});",
        "const points = [40, 100, 1, 5, 25, 10];\n\nfor (let i = points.length -1; i > 0; i--) {\nlet j = Math.floor(Math.random() * (i+1));\nlet k = points[i];\npoints[i] = points[j];\npoints[j] = k;\n}",
        "const points = [40, 100, 1, 5, 25, 10];\npoints.sort(function(a, b){return a - b});\n// now points[0] contains the lowest value\n// and points[points.length-1] contains the highest value",
        "const points = [40, 100, 1, 5, 25, 10];\npoints.sort(function(a, b){return b - a});\n// now points[0] contains the highest value\n// and points[points.length-1] contains the lowest value",
        "function myArrayMin(arr) {\nreturn Math.min.apply(null, arr);\n}",
        "function myArrayMax(arr) {\nreturn Math.max.apply(null, arr);\n}",
        "function myArrayMin(arr) {\nlet len = arr.length;\nlet min = Infinity;\nwhile (len--) {\nif (arr[len] < min) {\nmin = arr[len];\n}\n}\nreturn min;\n}",
        "function myArrayMax(arr) {\nlet len = arr.length;\nlet max = -Infinity;\nwhile (len--) {\nif (arr[len] > max) {\nmax = arr[len];\n}\n}\nreturn max;\n}",
        "const cars = [\n{type:\"Volvo\", year:2016},\n{type:\"Saab\", year:2001},\n{type:\"BMW\", year:2010}\n];",
        "cars.sort(function(a, b){return a.year - b.year});",
        "cars.sort(function(a, b){\nlet x = a.type.toLowerCase();\nlet y = b.type.toLowerCase();\nif (x < y) {return -1;}\nif (x > y) {return 1;}\nreturn 0;\n});",
        "const myArr = [\n{name:\"X00\",price:100 },\n{name:\"X01\",price:100 },\n{name:\"X02\",price:100 },\n{name:\"X03\",price:100 },\n{name:\"X04\",price:110 },\n{name:\"X05\",price:110 },\n{name:\"X06\",price:110 },\n{name:\"X07\",price:110 }\n];",
        "X01 100\nX03 100\nX00 100\nX03 100\nX05 110\nX04 110\nX06 110\nX07 110",
        "sort()",
        "reverse()",
        "toSorted()",
        "toReversed()",
        "a",
        "b",
        "(a, b)",
        "(a - b)",
        "Math.min.apply",
        "Math.min.apply(null, [1, 2, 3])",
        "Math.min(1, 2, 3)",
        "Math.max.apply",
        "Math.max.apply(null, [1, 2, 3])",
        "Math.max(1, 2, 3)"
      ]
    },
    {
      "title": "JavaScript Array Iterations",
      "summary": "Array Iteration Methods\nArray iteration methods operate on every array item.\nComplete JavaScript Array Reference\nSee Also:\nArray Tutorial\nArray Basic Methods\nArray Search Methods\nArray Sort Methods\nArray Iteration Methods\nArray Reference\nJavaScript Array forEach()\nThe forEach() method calls a function (a callback function) once for each array element.\nExample\nNote that the function takes 3 arguments:\nThe item value\nThe item index\nThe array itself\nThe example above uses only the value parameter. The example can be rewritten to:\nExample\nJavaScript Array map()\nThe map() method creates a new array by performing a function on each array element.\nThe map() method does not execute the function for array elements without values.\nThe map() method does not change the original array.\nThis example multiplies each array value by 2:\nExample\nNote that the function takes 3 arguments:\nThe item value\nThe item index\nThe array itself\nWhen a callback function uses only the value parameter, the index and array parameters can be omitted:\nExample\nJavaScript Array flatMap()\nES2019 added the Array flatMap() method to JavaScript.\nThe flatMap() method first maps all elements of an array and then creates a new array by flattening the array.\nExample\nBrowser Support\nflatMap() is an ECMAScript 2019 feature.\nES2019 is supported in all modern browsers since January 2020:\nREMOVE ADS\nJavaScript Array filter()\nThe filter() method creates a new array with array elements that pass a test.\nThis example creates a new array from elements with a value larger than 18:\nExample\nNote that the function takes 3 arguments:\nThe item value\nThe item index\nThe array itself\nIn the example above, the callback function does not use the index and array parameters, so they can be omitted:\nExample\nJavaScript Array reduce()\nThe reduce() method runs a function on each array element to produce a single value.\nThe reduce() method works from left-to-right in the array. See also reduceRight().\nNote\nThe reduce() method does not reduce the original array.\nThis example finds the sum of all numbers in an array:\nExample\nNote that the function takes 4 arguments:\nThe total (the initial value / previously returned value)\nThe item value\nThe item index\nThe array itself\nSince the example above does not use the index and array parameters, it can be rewritten to:\nExample\nThe reduce() method can accept an initial value:\nExample\nJavaScript Array reduceRight()\nThe reduceRight() method runs a function on each array element to produce a single value.\nThe reduceRight() works from right-to-left in the array. See also reduce().\nNote\nThe reduceRight() method does not reduce the original array.\nThis example finds the sum of all numbers in an array:\nExample\nNote that the function takes 4 arguments:\nThe total (the initial value / previously returned value)\nThe item value\nThe item index\nThe array itself\nThe example above does not use the index and array parameters. It can be rewritten to:\nExample\nJavaScript Array every()\nThe every() method checks if all array values pass a test.\nThis example checks if all array values are larger than 18:\nExample\nNote that the function takes 3 arguments:\nThe item value\nThe item index\nThe array itself\nWhen a callback function uses the first parameter only (value), the other parameters can be omitted:\nExample\nJavaScript Array some()\nThe some() method checks if some array values pass a test.\nThis example checks if some array values are larger than 18:\nExample\nNote that the function takes 3 arguments:\nThe item value\nThe item index\nThe array itself\nJavaScript Array.from()\nThe Array.from() method returns an Array object from:\nAny iterable object\nAny iterable object\nAny object with a length property\nAny object with a length property\nExample\nCreate an Array from a String:\nArray.from() has an optional parameter which allows you to execute a function on each element of the new array:\nExample\nCreate an Array from an Array:\nBrowser Support\nfrom() is an ES6 feature.\nES6 is fully supported in all modern browsers since June 2017:\nJavaScript Array keys()\nThe Array.keys() method returns an Array Iterator object with the keys of an array.\nExample\nCreate an Array Iterator object, containing the keys of the array:\nBrowser Support\nkeys() is an ES6 feature.\nES6 is fully supported in all modern browsers since June 2017:\nJavaScript Array entries()\nExample\nCreate an Array Iterator, and then iterate over the key/value pairs:\nThe entries() method returns an Array Iterator object with key/value pairs:\n[0, \"Banana\"]\n[1, \"Orange\"]\n[2, \"Apple\"]\n[3, \"Mango\"]\nThe entries() method does not change the original array.\nBrowser Support\nentries() is an ES6 feature.\nES6 is fully supported in all modern browsers since June 2017:\nJavaScript Array with() Method\nES2023 added the Array with() method as a safe way to update elements in an array without altering the original array.\nExample\nJavaScript Array Spread (...)\nThe ... operator expands an array into individual elements.\nThis can be used join arrays:\nExample 1\nIn the example above, ...arr1 expands arr1 into single elements, ...arr2 expands arr2 into single elements, and arr3 is constructed using ...arr1 and ...arr2.\nExample 2\nThe spread operator (...) can be used to copy an array:\nExample 3\nThe spread operator (...) can be used to pass arguments to a function:\nExample 4\nBrowser Support\n... (spread) is an ES6 feature.\nES6 is fully supported in all modern browsers since June 2017:\nJavaScript Array Rest (...)\nThe rest operator (...) allows us to destruct an array and collect the leftovers:\nExample 1\nExample 2\nBrowser Support\n... (rest) is an ECMAScript 2018 feature.\nES2018 is supported in all modern browsers since January 2020:\nComplete JavaScript Reference\nFor a complete reference to all JavaScript properties and methods, with full descriptions and many examples, go to:\nW3Schools' Full JavaScript Reference.\nThe reference inludes all JavaScript updates from 1999 to 2025.",
      "examples": [
        "const numbers = [45, 4, 9, 16, 25];\nlet txt = \"\";\nnumbers.forEach(myFunction);\n\nfunction myFunction(value, index, array) {\ntxt += value + \"<br>\";\n}",
        "const numbers = [45, 4, 9, 16, 25];\nlet txt = \"\";\nnumbers.forEach(myFunction);\n\nfunction myFunction(value) {\ntxt += value + \"<br>\";\n}",
        "const numbers1 = [45, 4, 9, 16, 25];\nconst numbers2 = numbers1.map(myFunction);\n\nfunction myFunction(value, index, array) {\nreturn value * 2;\n}",
        "const numbers1 = [45, 4, 9, 16, 25];\nconst numbers2 = numbers1.map(myFunction);\n\nfunction myFunction(value) {\nreturn value * 2;\n}",
        "const myArr = [1, 2, 3, 4, 5, 6];\nconst newArr = myArr.flatMap((x) => x * 2);",
        "const numbers = [45, 4, 9, 16, 25];\nconst over18 = numbers.filter(myFunction);\n\nfunction myFunction(value, index, array) {\nreturn value > 18;\n}",
        "const numbers = [45, 4, 9, 16, 25];\nconst over18 = numbers.filter(myFunction);\n\nfunction myFunction(value) {\nreturn value > 18;\n}",
        "const numbers = [45, 4, 9, 16, 25];\nlet sum = numbers.reduce(myFunction);\n\nfunction myFunction(total, value, index, array) {\nreturn total + value;\n}",
        "const numbers = [45, 4, 9, 16, 25];\nlet sum = numbers.reduce(myFunction);\n\nfunction myFunction(total, value) {\nreturn total + value;\n}",
        "const numbers = [45, 4, 9, 16, 25];\nlet sum = numbers.reduce(myFunction, 100);\n\nfunction myFunction(total, value) {\nreturn total + value;\n}",
        "const numbers = [45, 4, 9, 16, 25];\nlet sum = numbers.reduceRight(myFunction);\n\nfunction myFunction(total, value, index, array) {\nreturn total + value;\n}",
        "const numbers = [45, 4, 9, 16, 25];\nlet sum = numbers.reduceRight(myFunction);\n\nfunction myFunction(total, value) {\nreturn total + value;\n}",
        "const numbers = [45, 4, 9, 16, 25];\nlet allOver18 = numbers.every(myFunction);\n\nfunction myFunction(value, index, array) {\nreturn value > 18;\n}",
        "const numbers = [45, 4, 9, 16, 25];\nlet allOver18 = numbers.every(myFunction);\n\nfunction myFunction(value) {\nreturn value > 18;\n}",
        "const numbers = [45, 4, 9, 16, 25];\nlet someOver18 = numbers.some(myFunction);\n\nfunction myFunction(value, index, array) {\nreturn value > 18;\n}",
        "let text = \"ABCDEFG\";\nArray.from(text);",
        "const myNumbers = [1,2,3,4];\nconst myArr = Array.from(myNumbers, (x) => x * 2);",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nconst keys = fruits.keys();\n\nfor (let x of keys) {\ntext += x + \"<br>\";\n}",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nconst f = fruits.entries();\n\nfor (let x of f) {\ndocument.getElementById(\"demo\").innerHTML += x;\n}",
        "const months = [\"Januar\", \"Februar\", \"Mar\", \"April\"];\nconst myMonths = months.with(2, \"March\");",
        "const arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\n\nconst arr3 = [...arr1, ...arr2];",
        "const q1 = [\"Jan\", \"Feb\", \"Mar\"];\nconst q2 = [\"Apr\", \"May\", \"Jun\"];\nconst q3 = [\"Jul\", \"Aug\", \"Sep\"];\nconst q4 = [\"Oct\", \"Nov\", \"Des\"];\n\nconst year = [...q1, ...q2, ...q3, ...q4];",
        "const arr1 = [1, 2, 3];\nconst arr2 = [...arr1];",
        "const numbers = [23,55,21,87,56];\nlet minValue = Math.min(...numbers);\nlet maxValue = Math.max(...numbers);",
        "let a, rest;\nconst arr1 = [1,2,3,4,5,6,7,8];\n\n[a, ...rest] = arr1;",
        "let a, b, rest;\nconst arr1 = [1,2,3,4,5,6,7,8];\n\n[a, b, ...rest] = arr1;",
        "forEach()",
        "map()",
        "flatMap()",
        "filter()",
        "reduce()",
        "reduceRight()",
        "every()",
        "some()",
        "Array.from()",
        "from()",
        "Array.keys()",
        "keys()",
        "entries()",
        "...",
        "... (spread)",
        "... (rest)"
      ]
    },
    {
      "title": "JavaScript Array Reference",
      "summary": "Complete Array Reference\nComplete JavaScript Reference\nFor a complete reference to all JavaScript properties and methods, with full descriptions and many examples, go to:\nW3Schools' Full JavaScript Reference.\nThe reference inludes all JavaScript updates from 1999 to 2025.",
      "examples": []
    },
    {
      "title": "JavaScript Array Const",
      "summary": "ECMAScript 2015 (ES6)\nIn 2015, JavaScript introduced an important new keyword: const.\nIt has become a common practice to declare arrays using const:\nExample\nCannot be Reassigned\nAn array declared with const cannot be reassigned:\nExample\nArrays are Not Constants\nThe keyword const is a little misleading.\nIt does NOT define a constant array. It defines a constant reference to an array.\nBecause of this, we can still change the elements of a constant array.\nElements Can be Reassigned\nYou can change the elements of a constant array:\nExample\nAssigned when Declared\nJavaScript const variables must be assigned a value when they are declared:\nMeaning: An array declared with const must be initialized when it is declared.\nUsing const without initializing the array is a syntax error:\nExample\nThis will not work:\nArrays declared with var can be initialized at any time.\nYou can even use the array before it is declared:\nExample\nThis is OK:\nConst Block Scope\nAn array declared with const has Block Scope.\nAn array declared in a block is not the same as an array declared outside the block:\nExample\nAn array declared with var does not have block scope:\nExample\nYou can learn more about Block Scope in the chapter: JavaScript Scope.\nREMOVE ADS\nRedeclaring Arrays\nRedeclaring an array declared with var is allowed anywhere in a program:\nExample\nRedeclaring or reassigning an array to const, in the same scope, or in the same block, is not allowed:\nExample\nRedeclaring or reassigning an existing const array, in the same scope, or in the same block, is not allowed:\nExample\nRedeclaring an array with const, in another scope, or in another block, is allowed:\nExample\nComplete Array Reference\nFor a complete Array reference, go to our:\nComplete JavaScript Array Reference\nThe reference contains descriptions and examples of all Array properties and methods.",
      "examples": [
        "const cars = [\"Saab\", \"Volvo\", \"BMW\"];",
        "const cars = [\"Saab\", \"Volvo\", \"BMW\"];\ncars = [\"Toyota\", \"Volvo\", \"Audi\"];    // ERROR",
        "// You can create a constant array:\nconst cars = [\"Saab\", \"Volvo\", \"BMW\"];\n\n// You can change an element:\ncars[0] = \"Toyota\";\n\n// You can add an element:\ncars.push(\"Audi\");",
        "const cars;\ncars = [\"Saab\", \"Volvo\", \"BMW\"];",
        "cars = [\"Saab\", \"Volvo\", \"BMW\"];\nvar cars;",
        "const cars = [\"Saab\", \"Volvo\", \"BMW\"];\n// Here cars[0] is \"Saab\"\n{\nconst cars = [\"Toyota\", \"Volvo\", \"BMW\"];\n// Here cars[0] is \"Toyota\"\n}\n// Here cars[0] is \"Saab\"",
        "var cars = [\"Saab\", \"Volvo\", \"BMW\"];\n// Here cars[0] is \"Saab\"\n{\nvar cars = [\"Toyota\", \"Volvo\", \"BMW\"];\n// Here cars[0] is \"Toyota\"\n}\n// Here cars[0] is \"Toyota\"",
        "var cars = [\"Volvo\", \"BMW\"];   // Allowed\nvar cars = [\"Toyota\", \"BMW\"];  // Allowed\ncars = [\"Volvo\", \"Saab\"];      // Allowed",
        "var cars = [\"Volvo\", \"BMW\"];     // Allowed\nconst cars = [\"Volvo\", \"BMW\"];   // Not allowed\n{\nvar cars = [\"Volvo\", \"BMW\"];   // Allowed\nconst cars = [\"Volvo\", \"BMW\"]; // Not allowed\n}",
        "const cars = [\"Volvo\", \"BMW\"];   // Allowed\nconst cars = [\"Volvo\", \"BMW\"];   // Not allowed\nvar cars = [\"Volvo\", \"BMW\"];     // Not allowed\ncars = [\"Volvo\", \"BMW\"];         // Not allowed\n\n{\nconst cars = [\"Volvo\", \"BMW\"]; // Allowed\nconst cars = [\"Volvo\", \"BMW\"]; // Not allowed\nvar cars = [\"Volvo\", \"BMW\"];   // Not allowed\ncars = [\"Volvo\", \"BMW\"];       // Not allowed\n}",
        "const cars = [\"Volvo\", \"BMW\"];   // Allowed\n{\nconst cars = [\"Volvo\", \"BMW\"]; // Allowed\n}\n{\nconst cars = [\"Volvo\", \"BMW\"]; // Allowed\n}",
        "const",
        "var"
      ]
    },
    {
      "title": "JavaScript Typed Arrays",
      "summary": "Example\nTyped Arrays\nTyped arrays was designed for handling raw binary data.\nUnlike standard arrays, typed arrays are array buffers of fixed length.\nTyped arrays store elements of fixed types like 8-bit integers or 32-bit numbers.\nTyped Array Benefits\nTyped Arrays were designed to provide an efficient way to handle binary data, unlike traditional JavaScript arrays which can hold elements of mixed data types.\nTyped arrays are raw memory, so JavaScript can pass them directly to any function without converting the data to another representation.\nTyped arrays are seriously faster than normal arrays for passing data to functions that can use raw binary data. Typed Arrays are highly suitable for:\nWebGL and Canvas:\nFast graphics rendering and image processing.\nWebGL and Canvas:\nFast graphics rendering and image processing.\nFile APIs:\nFast reading and writing of local files.\nFile APIs:\nFast reading and writing of local files.\nMedia APIs:\nFast handling of audio and video data.\nMedia APIs:\nFast handling of audio and video data.\nWebSockets:\nEfficient binary data transfer over network.\nWebSockets:\nEfficient binary data transfer over network.\nTyped Arrays were introduced to JavaScript as part of the ECMAScript 2015 (ES6) specification, released in June 2015.\nDifferences from Regular Arrays\nFixed Length:\nTyped Arrays cannot be dynamically resized using methods like push() or pop().\nFixed Length:\nTyped Arrays cannot be dynamically resized using methods like push() or pop().\nType Restriction:\nElements must adhere to the specified data type of the typed array.\nType Restriction:\nElements must adhere to the specified data type of the typed array.\nUnderlying Buffer:\nTyped Arrays are views into an ArrayBuffer, allowing direct manipulation of binary data.\nUnderlying Buffer:\nTyped Arrays are views into an ArrayBuffer, allowing direct manipulation of binary data.\nTyped Array Types\n8 Bit Integers\nExamples\nCreate a typed array of 10 signed 8-bit integers (byte format):\nCreate a typed array of 10 unsigned 8-bit integers (octet format):\nCreate a typed array of 10 usigned 8-bit integers (clamped format):\nUint8Array vs Uint8ClampedArray\nThe difference between an Uint8Array and an Uint8ClampedArray is how values are added.\nIf you set one element in an Uint8ClampedArray to a value outside the 0-255 range, it will default to 0 or 255.\nA typed array will just take the first 8 bits of the value.\nNote\nTyped arrays are not arrays.\nisArray() on a typed array returns false.\nMany array methods (like push and pop) are not supported by typed arrays.\n16-Bits Integers\nExamples\nCreate a typed array of 10 signed 16-bit integers (short format):\nCreate a typed array of 10 unsigned 16-bit integers (unsigned short format):\n32-Bit Integers\nExamples\nCreate a typed array of 10 signed 32-bit integers (long format):\nCreate a typed array of 10 unsigned 32-bit integers (unsigned long format):\nREMOVE ADS\n64-Bit Integers\nExamples\nCreate a typed array of 10 signed 64-bit integers (bigint format):\nCreate a typed array of 10 unsigned 64-bit integers (bigint format):\nFloating Point Numbers\nAs specified by the ECMAScript standard, arithmetic in JavaScript shall be done using double-precision floating-point arithmetic:\nExamples\nCreate a typed array of 10 floating point numbers in (half precision) 16-bit format:\nCreate a typed array of 10 floating point numbers in (normal precision) 32-bit format:\nCreate a typed array of 10 floating point numbers in (double precision) 64-bit format:\nLearn More:\nTyped Array Methods\nTyped Array Reference\nBrowser Support\nTyped Arrays is an ES6 feature.\nES6 is fully supported in all modern browsers since June 2017:",
      "examples": [
        "const myArr = new Int8Array(10);",
        "const myArr = new Uint8Array(10);",
        "const myArr = new Uint8ClampedArray(10);",
        "const myArr = new Int16Array(10);",
        "const myArr = new Uint16Array(10);",
        "const myArr = new Int32Array(10);",
        "const myArr = new Uint32Array(10);",
        "const myArr = new Bigint64Array(10);",
        "const myArr = new Biguint64Array(10);",
        "const myArr = new Float16Array(10);",
        "const myArr = new Float32Array(10);",
        "const myArr = new Float64Array(10);",
        "Typed Arrays"
      ]
    },
    {
      "title": "Typed Array Methods",
      "summary": "The from() Method\nThe from()method creates a new typed array from any iterable object:\nExamples\nCreate a typed array from a string:\nCreate a typed array from an array:\nThe of() Method\nThe of() method creates a new typed array from a number of arguments:\nExample\nThe constructor.name Property\nThe constructor.name property returns the name (type) of a typed array:\nExample\nThe BYTES_PER_ELEMENT Property\nBYTES_PER_ELEMENT returns the number of bytes used to store each array element:\nExample\nCommon Array Methods\nTyped Arrays share many methods with Standard Arrays:\nIteration: forEach(), map(), filter(), reduce(), reduceRight(), every(), some(), find(), findIndex(), findLast(), findLastIndex().\nIteration: forEach(), map(), filter(), reduce(), reduceRight(), every(), some(), find(), findIndex(), findLast(), findLastIndex().\nSearching: includes(), indexOf(), lastIndexOf().\nSearching: includes(), indexOf(), lastIndexOf().\nManipulation: at(), copyWithin(), fill(), reverse(), set(), slice(), sort(), subarray().\nManipulation: at(), copyWithin(), fill(), reverse(), set(), slice(), sort(), subarray().\nConversion: join(), toLocaleString(), toString().\nConversion: join(), toLocaleString(), toString().\nNon-mutating methods: toReversed(), toSorted(), with().\nNon-mutating methods: toReversed(), toSorted(), with().\nThe fill() Method\nThe fill() method changes all elements in a typed array to a value:\nExample\nFill all array elements with a value:\nThe fill() method takes two optional arguments: start index and end index:\nExample\nFill some array elements with a value:\nThe find() Method\nThe find() method returns the first element that satisfies a test:\nExample\nThe some() Method\nThe some() method returns true if an element for which a provided function returns true:\nExample\nREMOVE ADS\nNot Available Array Methods\nSome array methods are NOT available for typed array.\nThis is due to the fixed-length nature and the lack of fixed structure.\nBrowser APIs Supporting Typed Arrays\nFetch API Example\nCanvas Example\nBrowser Support\nTyped Arrays is an ES6 feature.\nES6 is fully supported in all modern browsers since June 2017:",
      "examples": [
        "const myArr = Int16Array.from(\"1234567890\");",
        "const myArr = Int16Array.from([1,2,3,4,5,6,7,8,9,0]);",
        "const myArr = Int16Array.of(1,2,3,4,5,6,7,8,9,0);",
        "myArr.constructor.name",
        "myArr.BYTES_PER_ELEMENT",
        "myArr.fill(200);",
        "myArr.fill(200, 0, 3);",
        "myArr.find((x) => x > 18)",
        "myArr.some((x) => x > 18)",
        "fetch(url)\n.then(request => request.arrayBuffer())\n.then(arrayBuffer =>...);",
        "const canvas = document.getElementById('my_canvas');\nconst context = canvas.getContext('2d');\nconst imageData = context.getImageData(0, 0, canvas.width, canvas.height);\nconst uint8ClampedArray = imageData.data;",
        "from()",
        "of()",
        "constructor.name",
        "BYTES_PER_ELEMENT",
        "fill()",
        "find()",
        "some()",
        "Typed Arrays"
      ]
    },
    {
      "title": "Typed Array Reference",
      "summary": "Typed Array Types\nTyped Array Methods\nBrowser Support\nTyped Arrays is an ES6 feature.\nES6 is fully supported in all modern browsers since June 2017:",
      "examples": [
        "Typed Arrays"
      ]
    },
    {
      "title": "JavaScript Sets",
      "summary": "A JavaScript Set is a collection of unique values.\nEach value can only occur once in a Set.\nThe values can be of any type, primitive values or objects.\nHow to Create a Set\nYou can create a JavaScript Set by:\nPassing an array to new Set()\nCreate an empty set and use add() to add values\nThe new Set() Method\nPass an array to the new Set() constructor:\nExample\nCreate a Set and add values:\nExample\nCreate a Set and add variables:\nExample\nThe add() Method\nExample\nIf you add equal elements, only the first will be saved:\nExample\nREMOVE ADS\nListing the Elements\nYou can list all Set elements (values) with a for..of loop:\nExample\nSets are Objects\ntypeof returns object:\ninstanceof Set returns true:\nLearn More:\nJavaScript Set Methods\nJavaScript Set Logic\nJavaScript Weak Sets\nJavaScript Set Reference\nJavaScript Maps\nBrowser Support\nSet is an ES6 feature.\nES6 is fully supported in all modern browsers since June 2017:",
      "examples": [
        "// Create a Set\nconst letters = new Set([\"a\",\"b\",\"c\"]);",
        "// Create a Set\nconst letters = new Set();\n\n// Add Values to the Set\nletters.add(\"a\");\nletters.add(\"b\");\nletters.add(\"c\");",
        "// Create a Set\nconst letters = new Set();\n\n// Create Variables\nconst a = \"a\";\nconst b = \"b\";\nconst c = \"c\";\n\n// Add Variables to the Set\nletters.add(a);\nletters.add(b);\nletters.add(c);",
        "letters.add(\"d\");\nletters.add(\"e\");",
        "letters.add(\"a\");\nletters.add(\"b\");\nletters.add(\"c\");\nletters.add(\"c\");\nletters.add(\"c\");\nletters.add(\"c\");\nletters.add(\"c\");\nletters.add(\"c\");",
        "// Create a Set\nconst letters = new Set([\"a\",\"b\",\"c\"]);\n\n// List all Elements\nlet text = \"\";\nfor (const x of letters) {\ntext += x;\n}",
        "typeof letters;      // Returns object",
        "letters instanceof Set;  // Returns true",
        "new Set()",
        "add()",
        "typeof",
        "instanceof Set",
        "Set"
      ]
    },
    {
      "title": "JavaScript Set Methods",
      "summary": "Basic Set Methods\nSet Properties\nsize\nThe new Set() Method\nPass an array to the new Set() constructor:\nExample\nThe add() Method\nExample\nIf you add equal elements, only the first will be saved:\nExample\nNote\nThe primary feature of Set objects is that they only store unique values.\nIf an attempt is made to add an element that already exists in the set, the add() method will have no effect, and the set will remain unchanged.\nThe size Property\nExample\nListing Set Elements\nYou can list all Set elements (values) with a for..of loop:\nExample\nThe has() Method\nThe has() method returns true if a specified value exists in a set.\nExample\nREMOVE ADS\nThe forEach() Method\nThe forEach() method invokes a function for each Set element:\nExample\nThe values() Method\nThe values() method returns an Iterator object with the values in a Set:\nExample 1\nExample 2\nThe keys() Method\nThe keys() method returns an Iterator object with the values in a Set:\nNote\nA Set has no keys, so keys() returns the same as values().\nThis makes Sets compatible with Maps.\nExample 1\nExample 2\nThe entries() Method\nThe entries() method returns an Iterator with [value,value] pairs from a Set.\nNote\nThe entries() method is supposed to return a [key,value] pair from an object.\nA Set has no keys, so the entries() method returns [value,value].\nThis makes Sets compatible with Maps.\nExample 1\nExample 2\nLearn More:\nJavaScript Sets\nJavaScript Set Logic\nJavaScript Weak Sets\nJavaScript Set Reference\nJavaScript Maps",
      "examples": [
        "// Create a new Set\nconst letters = new Set([\"a\",\"b\",\"c\"]);",
        "letters.add(\"d\");\nletters.add(\"e\");",
        "letters.add(\"a\");\nletters.add(\"b\");\nletters.add(\"c\");\nletters.add(\"c\");\nletters.add(\"c\");\nletters.add(\"c\");\nletters.add(\"c\");\nletters.add(\"c\");",
        "// Create a new Set\nconst mySet = new Set([\"a\",\"b\",\"c\"]);\n\n// The number of elements are\nmySet.size;",
        "// Create a Set\nconst letters = new Set([\"a\",\"b\",\"c\"]);\n\n// List all Elements\nlet text = \"\";\nfor (const x of letters) {\ntext += x;\n}",
        "// Create a Set\nconst letters = new Set([\"a\",\"b\",\"c\"]);\n\n// Does the Set contain \"d\"?\nanswer = letters.has(\"d\");",
        "// Create a Set\nconst letters = new Set([\"a\",\"b\",\"c\"]);\n\n// List all entries\nlet text = \"\";\nletters.forEach (function(value) {\ntext += value;\n})",
        "// Create a Set\nconst letters = new Set([\"a\",\"b\",\"c\"]);\n\n// Get all Values\nconst myIterator = letters.values();\n\n// List all Values\nlet text = \"\";\nfor (const entry of myIterator) {\ntext += entry;\n}",
        "// Create a Set\nconst letters = new Set([\"a\",\"b\",\"c\"]);\n\n// List all Values\nlet text = \"\";\nfor (const entry of letters.values()) {\ntext += entry;\n}",
        "// Create a Set\nconst letters = new Set([\"a\",\"b\",\"c\"]);\n\n// Create an Iterator\nconst myIterator = letters.keys();\n\n// List all Elements\nlet text = \"\";\nfor (const x of myIterator) {\ntext += x;\n}",
        "// Create a Set\nconst letters = new Set([\"a\",\"b\",\"c\"]);\n\n// List all Elements\nlet text = \"\";\nfor (const x of letters.keys()) {\ntext += x;\n}",
        "// Create a Set\nconst letters = new Set([\"a\",\"b\",\"c\"]);\n\n// Get all Entries\nconst myIterator = letters.entries();\n\n// List all Entries\nlet text = \"\";\nfor (const entry of myIterator) {\ntext += entry;\n}",
        "// Create a Set\nconst letters = new Set([\"a\",\"b\",\"c\"]);\n\n// List all Entries\nlet text = \"\";\nfor (const entry of letters.entries()) {\ntext += entry;\n}",
        "new Set()",
        "add()",
        "has()",
        "true",
        "forEach()",
        "values()",
        "keys()",
        "entries()"
      ]
    },
    {
      "title": "JavaScript Set Logic",
      "summary": "Logic Methods\nIn JavaScript 2025, 7 new logical methods were added to the Set object:\nBrowser Support\nSet Logic is an ES2025 feature.\nJavaScript 2025 is fully supported in all modern browsers since May 2025:\nThe union() Method\nThe union() method returns the union of two sets.\nThe union() method returns a new set containing the elements which are in this set, or in the argument set, or in both:\nExample\nThe intersection() Method\nThe intersection() method returns the intersection of two sets.\nThe intersection() method returns a new set containing the elements which are in this set and in the argument set:\nExample\nThe difference() Method\nThe difference() method returns the difference between two sets.\nThe difference() method returns a new set containing elements which are in this set but not in the argument set:\nExample\nThe symmetricDifference() Method\nThe symmetricDifference() method returns the symmetric difference between to sets.\nThe symmetricDifference() method returns a new set containing elements which are in this set or in the argument set, but not in both:\nExample\nREMOVE ADS\nThe isSubsetOf() Method\nThe isSubsetOf() method returns true if all elements in this set is also elements in the argument set:\nExample\nThe isSupersetOf() Method\nThe isSupersetOf() method returns true if all elements in the argument set are also in this set:\nExample\nThe isDisjointFrom() Method\nThe isDisjointFrom() method returns true if this set has no elements in common with the argument set:\nExample\nLearn More:\nJavaScript Sets\nJavaScript Set Methods\nJavaScript Weak Sets\nJavaScript Set Reference\nJavaScript Maps",
      "examples": [
        "const A = new Set(['a','b','c']);\nconst B = new Set(['b','c','d']);\n\nconst C = A.union(B);",
        "const A = new Set(['a','b','c']);\nconst B = new Set(['b','c','d']);\n\nconst C = A.intersection(B);",
        "const A = new Set(['a','b','c']);\nconst B = new Set(['b','c','d']);\n\nconst C = A.difference(B);",
        "const A = new Set(['a','b','c']);\nconst B = new Set(['b','c','d']);\n\nconst C = A.symetricDifference(B);",
        "const A = new Set(['a','b','c']);\nconst B = new Set(['b','c','d']);\n\nlet answer = A.isSubsetOf(B);",
        "const A = new Set(['a','b','c']);\nconst B = new Set(['b','c','d']);\n\nlet answer = A.isSupersetOf(B);",
        "const A = new Set(['a','b','c']);\nconst B = new Set(['b','c','d']);\n\nlet answer = A.isDisjointFrom(B);",
        "Set Logic",
        "union()",
        "intersection()",
        "difference()",
        "symmetricDifference()",
        "isSubsetOf()",
        "true",
        "isSupersetOf()",
        "isDisjointFrom()"
      ]
    },
    {
      "title": "JavaScript WeakSet",
      "summary": "The WeakSet Object\nA JavaScript WeakSet is a collection of values where the values must be objects.\nA WeakSet holds weak references to its values.\nExamples\nGarbage Collection\nJavaScript employs a memory management mechanism known as Garbage Collection.\nThe primary functiona are:\nEnsuring efficient use of memory resources\nReclaim memory occupied by variables that are no longer in use\nPreventing memory leaks\nWeak References\nUnlike a regular Set, a WeakSet does not prevent its values from being garbage collected.\nIf a value (an object) has no references in a program, it becomes eligible for garbage collection.\nWhen the value is garbage collected, its is removed from the WeakSet.\nExample\nValues Must Be Objects\nPrimitive values cannot be values in a WeakSet.\nThe values must be objects.\nThis restriction is tied to the garbage collection mechanism; primitives are not garbage collected in the same way as objects.\nTracking Objects\nA WeakSet is similar to a Set, but it only stores objects, and holds them weakly. If there are no other references to an object, it gets garbage collected automatically.\nThis makes it handy for tracking objects without storing extra data (like counts).\nTracking Visitors:\nNote\nIf you want to count the visits as well:\nTry to use a WeakMap instead.\nAutomatic Cleanup\nIf you remove all references to a visitor object:\nTracking Visitors:\nNot Iterable\nWeakSets are not enumerable.\nYou cannot iterate over the values with for loops, forEach(), or values().\nYou cannot access the size. WeakSets have no size property.\nLimited Methods\nA WeakSet is minimal, memory-safe, and purpose-built for tracking objects privately and efficiently.\nWeakSet provides a limited set of methods:\nWeakSet does not have:\nA size property\nA spread operator (...)\nA clear() method\nAny logic methods (union, difference, intersection)\nAny iteration methods (forEach, keys, values, entries)\nThe above is by design: Objects may disappear in garbage collection, it makes no sense to iterate over or count them.\nLearn More:\nJavaScript Sets\nJavaScript Set Methods\nJavaScript Set Logic\nJavaScript Set Reference\nJavaScript Maps\nBrowser Support\nWeakSet is an ES6 feature.\nES6 is fully supported in all modern browsers since June 2017:",
      "examples": [
        "// Create a WeakSet\nlet mySet = new WeakSet();\n\n// Create an Object\nlet myObj = {fname:\"John\", lname:\"Doe\"};\n\n// Add the Object\nmySet.add(myObj);\n\n// Do I have myObj in the mySet?\nlet answer = mySet.has(myObj);",
        "// Create a WeakSet\nlet mySet = new WeakSet();\n\n// Create an Object\nlet myObj = {fname:\"John\", lname:\"Doe\"};\n\n// Add the Object\nmySet.add(myObj);\n\n// Delete the Object\nmySet.delete(myObj);\n\n// Do I have myObj in the mySet?\nlet answer = mySet.has(myObj);",
        "// Create a WeakSet\nlet mySet = new WeakSet();\n\n// Create an Object\nlet myObj = {fname:\"John\", lname:\"Doe\"};\n\n// Add the Object\nmySet.add(myObj);\n\n// Remove the Object from memory\nmyObj = null;\n\n// Now myObj in mySet will be garbage collected",
        "let text = \"\";\n\n// Create a WeakSet to track persons\nconst persons = new WeakSet();\n\n// Visitor Objects\nconst John = {name:\"John\", age:40};\nconst Paul = {name:\"Paul\", age:41};\nconst Ringo = {name:\"Ringo\", age:42};\nconst George = {name:\"George\", age:43};\n\n// Track visits\ntrack(Paul);\ntrack(Ringo);\ntrack(Paul);\n\n// Function to track visitors\nfunction track(visitor) {\nif (persons.has(visitor)) {\ntext += visitor.name + \" is visiting again.<br>\";\n} else {\npersons.add(visitor);\ntext += visitor.name + \", age\" + visitor.age +\", is visiting for the first time<br>\";\n}\n}",
        "John = null;\n\n// The entry for John is now removed from the WeakMap (persons)",
        "WeakSet"
      ]
    },
    {
      "title": "JavaScript Set Reference",
      "summary": "Complete Set Reference\nSets have only one property:\nLearn More:\nJavaScript Sets\nJavaScript Set Methods\nJavaScript Set Logic\nJavaScript Weak Sets\nJavaScript Maps",
      "examples": []
    },
    {
      "title": "JavaScript Maps",
      "summary": "The Map Object\nA Map object holds key-value pairs where the keys can be any datatype.\nA Map also remembers the original insertion order of the keys.\nHow to Create a Map\nYou can create a JavaScript Map by:\nPassing an Array to new Map()\nCreate a Map and use Map.set()\nThe new Map() Method\nYou can create a Map by passing an Array to the new Map() constructor:\nExample\nThe set() Method\nYou can add elements to a Map with the set() method:\nExample\nThe set() method can also be used to change existing Map values:\nExample\nThe get() Method\nThe get() method gets the value of a key in a Map:\nExample\nREMOVE ADS\nMaps are Objects\ntypeof returns object:\nExample\ninstanceof Map returns true:\nExample\nJavaScript Objects vs Maps\nLearn More:\nJavaScript Map Methods\nJavaScript Weak Maps\nJavaScript Map Reference\nJavaScript Sets\nBrowser Support\nMap is an ES6 feature.\nES6 is fully supported in all modern browsers since June 2017:",
      "examples": [
        "// Create a Map\nconst fruits = new Map([\n[\"apples\", 500],\n[\"bananas\", 300],\n[\"oranges\", 200]\n]);",
        "// Create a Map\nconst fruits = new Map();\n\n// Set Map Values\nfruits.set(\"apples\", 500);\nfruits.set(\"bananas\", 300);\nfruits.set(\"oranges\", 200);",
        "fruits.set(\"apples\", 200);",
        "fruits.get(\"apples\");    // Returns 500",
        "// Returns object:\ntypeof fruits;",
        "// Returns true:\nfruits instanceof Map;",
        "new Map()",
        "Map.set()",
        "set()",
        "get()",
        "typeof",
        "instanceof",
        "Map"
      ]
    },
    {
      "title": "JavaScript Map Methods",
      "summary": "The new Map() Method\nYou can create a map by passing an array to the new Map() constructor:\nExample\nMap.get()\nYou get the value of a key in a map with the get() method\nExample\nMap.set()\nYou can add elements to a map with the set() method:\nExample\nThe set() method can also be used to change existing map values:\nExample\nMap.size\nThe size property returns the number of elements in a map:\nExample\nMap.delete()\nThe delete() method removes a map element:\nExample\nMap.clear()\nThe clear() method removes all the elements from a map:\nExample\nMap.has()\nThe has() method returns true if a key exists in a map:\nExample\nTry This:\nREMOVE ADS\nMap.forEach()\nThe forEach() method invokes a callback for each key/value pair in a map:\nExample\nMap.entries()\nThe entries() method returns an iterator object with the [key,values] in a map:\nExample\nMap.keys()\nThe keys() method returns an iterator object with the keys in a map:\nExample\nMap.values()\nThe values() method returns an iterator object with the values in a map:\nExample\nYou can use the values() method to sum the values in a map:\nExample\nObjects as Keys\nBeing able to use objects as keys is an important Map feature.\nExample\nRemember: The key is an object (apples), not a string (\"apples\"):\nExample\nJavaScript Map.groupBy()\nES2024 added the Map.groupBy() method to JavaScript.\nThe Map.groupBy() method groups elements of an object according to string values returned from a callback function.\nThe Map.groupBy() method does not change the original object.\nExample\nBrowser Support\nMap.groupby() is an ES2024 feature.\nJavaScript 2024 is supported in new browsers since March 2024:\nWarning\nES2024 features are relatively new.\nOlder browsers may need an alternative code (Polyfill)\nObject.groupBy() vs Map.groupBy()\nThe difference between Object.groupBy() and Map.groupBy() is:\nObject.groupBy() groups elements into a JavaScript object.\nMap.groupBy() groups elements into a Map object.\nLearn More:\nJavaScript Maps\nJavaScript Weak Maps\nJavaScript Map Reference\nJavaScript Sets",
      "examples": [
        "// Create a Map\nconst fruits = new Map([\n[\"apples\", 500],\n[\"bananas\", 300],\n[\"oranges\", 200]\n]);",
        "fruits.get(\"apples\");",
        "// Create a Map\nconst fruits = new Map();\n\n// Set Map Values\nfruits.set(\"apples\", 500);\nfruits.set(\"bananas\", 300);\nfruits.set(\"oranges\", 200);",
        "fruits.set(\"apples\", 500);",
        "fruits.size;",
        "fruits.delete(\"apples\");",
        "fruits.clear();",
        "fruits.has(\"apples\");",
        "fruits.delete(\"apples\");\nfruits.has(\"apples\");",
        "// List all entries\nlet text = \"\";\nfruits.forEach (function(value, key) {\ntext += key + ' = ' + value;\n})",
        "// List all entries\nlet text = \"\";\nfor (const x of fruits.entries()) {\ntext += x;\n}",
        "// List all keys\nlet text = \"\";\nfor (const x of fruits.keys()) {\ntext += x;\n}",
        "// List all values\nlet text = \"\";\nfor (const x of fruits.values()) {\ntext += x;\n}",
        "// Sum all values\nlet total = 0;\nfor (const x of fruits.values()) {\ntotal += x;\n}",
        "// Create Objects\nconst apples = {name: 'Apples'};\nconst bananas = {name: 'Bananas'};\nconst oranges = {name: 'Oranges'};\n\n// Create a Map\nconst fruits = new Map();\n\n// Add new Elements to the Map\nfruits.set(apples, 500);\nfruits.set(bananas, 300);\nfruits.set(oranges, 200);",
        "fruits.get(\"apples\");  // Returns undefined",
        "// Create an Array\nconst fruits = [\n{name:\"apples\", quantity:300},\n{name:\"bananas\", quantity:500},\n{name:\"oranges\", quantity:200},\n{name:\"kiwi\", quantity:150}\n];\n\n// Callback function to Group Elements\nfunction myCallback({ quantity }) {\nreturn quantity > 200 ? \"ok\" : \"low\";\n}\n\n// Group by Quantity\nconst result = Map.groupBy(fruits, myCallback);",
        "new Map()",
        "get()",
        "set()",
        "size",
        "delete()",
        "clear()",
        "has()",
        "forEach()",
        "entries()",
        "keys()",
        "values()",
        "Map.groupBy()",
        "Map.groupby()"
      ]
    },
    {
      "title": "JavaScript WeakMap",
      "summary": "The WeakMap Object\nA JavaScript WeakMap is a collection of key/value pairs where the keys must be objects.\nA WeakMap holds weak references to its keys.\nExample\nGarbage Collection\nJavaScript employs a memory management mechanism known as Garbage Collection.\nThe primary functiona are:\nEnsuring efficient use of memory resources\nReclaim memory occupied by variables that are no longer in use\nPreventing memory leaks\nWeak References\nUnlike a regular Map, a WeakMap does not prevent its keys from being garbage collected.\nIf a key (an object) has no references to it in a program, it becomes eligible for garbage collection.\nWhen the key is garbage collected, its key-value pair is removed from the WeakMap.\nExample\nKeys Must Be Objects\nPrimitive values cannot be used as keys in a WeakMap.\nThe keys must be objects or non-registered symbols.\nThis restriction is tied to the garbage collection mechanism; primitives are not garbage collected in the same way as objects.\nTracking Objects\nThe entries in a WeakMap are weakly held: if the object key becomes unreachable, its mapping is removed automatically.\nThis is perfect for tracking data about objects without preventing garbage collection.\nTracking Visitors\nAutomatic Cleanup\nIf you remove all references to a visitor object:\nTracking Visitors:\nNot Iterable\nWeakMaps are not enumerable.\nYou cannot iterate over the keys and values with for loops, forEach(), or keys().\nYou cannot access the size.\nLimited Methods\nWeakMap provides a limited set of methods:\nWeak Map Secret Data\nExample\nExample Explained\nA WeakMap does not allow iteration.\nOutside code can not \"discover\" what objects are stored inside a WeakMap.\nTo get the secret, you need the this reference that was used in the constructor.\nExternal code has access to user1 and myMap, bot not to the this reference inside myMap, unless you explicitly expose it, like via getSecret(), the secret value is unreachable.\nPrivacy\nWeakMap was intentionally designed for privacy: you can set, get, has, and delete using an object key, but not inspect what is inside.\nThis was a great tool for simulating private properties in JavaScript classes (before #private fields were added to the language).\nLearn More:\nJavaScript Maps\nJavaScript Map Methods\nJavaScript Map Reference\nJavaScript Sets\nBrowser Support\nWeakMap is an ES6 feature.\nES6 is fully supported in all modern browsers since June 2017:",
      "examples": [
        "// Create a WeakMap\nlet myMap = new WeakMap();\n\n// Create an Object\nlet myObj = {fname:\"John\", lname:\"Doe\"};\n\n// Set a WeakMap value\nmyMap.set(myObj, \"player\");\n\n// Get the WeakMap value\nlet type = myMap.get(myObj);",
        "let myMap = new WeakMap();\nlet myObj = {fname:\"John\", lname:\"Doe\"};\n\nmyMap.set(myObj, \"secret\");\nmyObj = null;\n// now myObj (and its values) in myMap can be garbage collected",
        "let text = \"\";\n\n// Create a WeakMap to store visit counts\nconst visitsCount = new WeakMap();\n\n// Create Visitor Objects\nconst John = {name:\"John\", age:40};\nconst Paul = {name:\"Paul\", age:41};\nconst Ringo = {name:\"Ringo\", age:42};\nconst George = {name:\"George\", age:43};\n\n// Track visits\ntrack(Paul);\ntrack(Ringo);\ntrack(Paul);\ntrack(Paul);\ntrack(John);\n\n// Function to track visitors\nfunction track(visitor) {\nlet count = visitsCount.get(visitor) || 0;\ncount++;\nvisitsCount.set(visitor, count);\ntext += visitor.name + \", age \" + visitor.age + \", has visited \" + count + \" time(s).<br>\";\n}",
        "John = null;\n\n// The entry for John is now removed from the WeakMap (persons)",
        "// Create WeakMap\nconst myMap = new WeakMap();\n\n// Private Fields Simulation\nclass User {\nconstructor(name) {\nmyMap.set(this, {secret:\"hidden data\"});\nthis.name = name;\n}\ngetSecret() {\nreturn myMap.get(this).secret;\n}\n}\n\nconst user1 = new User(\"John\");\nsecret = user1.getSecret();",
        "WeakMap"
      ]
    },
    {
      "title": "JavaScript Map Reference",
      "summary": "Complete Map Reference\nLearn More:\nJavaScript Maps\nJavaScript Map Methods\nJavaScript Weak Maps\nJavaScript Sets",
      "examples": []
    },
    {
      "title": "JavaScript Math Object",
      "summary": "The Math Object\nThe JavaScript Math object allows you to perform mathematical tasks.\nThe Math object is static.\nAll methods and properties can be used without creating a Math object first.\nMath Properties (Constants)\nThe syntax for any Math property is : Math.property.\nJavaScript provides 8 mathematical constants that can be accessed as Math properties:\nExample\nMath Methods\nThe syntax for Math any methods is : Math.method(number)\nNumber to Integer\nThere are 4 common methods to round a number to an integer:\nMath.round()\nMath.round(x) returns the nearest integer:\nExamples\nMath.ceil()\nMath.ceil(x) returns the value of x rounded up to its nearest integer:\nExample\nMath.floor()\nMath.floor(x) returns the value of x rounded down to its nearest integer:\nExample\nMath.trunc()\nMath.trunc(x) returns the integer part of x:\nExample\nMath.sign()\nMath.sign(x) returns if x is negative, null or positive.\nIf x is positive it returns 1\nIf x is negative it returns -1\nIf x is zero, it returns 0\nExample\nNote\nMath.trunc() and Math.sign() were added to JavaScript 2015 - ES6.\nREMOVE ADS\nMath.pow()\nMath.pow(x, y) returns the value of x to the power of y:\nExample\nMath.sqrt()\nMath.sqrt(x) returns the square root of x:\nExample\nMath.abs()\nMath.abs(x) returns the absolute (positive) value of x:\nExample\nMath.sin()\nMath.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).\nIf you want to use degrees instead of radians, you have to convert degrees to radians:\nAngle in radians = Angle in degrees x PI / 180.\nExample\nMath.cos()\nMath.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).\nIf you want to use degrees instead of radians, you have to convert degrees to radians:\nAngle in radians = Angle in degrees x PI / 180.\nExample\nMath.min() and Math.max()\nMath.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:\nExample\nExample\nMath.random()\nMath.random() returns a random number between 0 (inclusive), and 1 (exclusive):\nExample\nYou will learn more about Math.random() in the next chapter of this tutorial.\nThe Math.log() Method\nMath.log(x) returns the natural logarithm of x.\nThe natural logarithm returns the time needed to reach a certain level of growth:\nExamples\nMath.E and Math.log() are twins.\nHow many times must we multiply Math.E to get 10?\nThe Math.log2() Method\nMath.log2(x) returns the base 2 logarithm of x.\nHow many times must we multiply 2 to get 8?\nThe Math.log10() Method\nMath.log10(x) returns the base 10 logarithm of x.\nHow many times must we multiply 10 to get 1000?\nLearn More:\nFull Math Reference",
      "examples": [
        "Math.PI;",
        "Math.E        // returns Euler's number\nMath.PI       // returns PI\nMath.SQRT2    // returns the square root of 2\nMath.SQRT1_2  // returns the square root of 1/2\nMath.LN2      // returns the natural logarithm of 2\nMath.LN10     // returns the natural logarithm of 10\nMath.LOG2E    // returns base 2 logarithm of E\nMath.LOG10E   // returns base 10 logarithm of E",
        "Math.round(4.6);",
        "Math.round(4.5);",
        "Math.round(4.4);",
        "Math.ceil(4.9);\nMath.ceil(4.7);\nMath.ceil(4.4);\nMath.ceil(4.2);\nMath.ceil(-4.2);",
        "Math.floor(4.9);\nMath.floor(4.7);\nMath.floor(4.4);\nMath.floor(4.2);\nMath.floor(-4.2);",
        "Math.trunc(4.9);\nMath.trunc(4.7);\nMath.trunc(4.4);\nMath.trunc(4.2);\nMath.trunc(-4.2);",
        "Math.sign(-4);\nMath.sign(0);\nMath.sign(4);",
        "Math.pow(8, 2);",
        "Math.sqrt(64);",
        "Math.abs(-4.7);",
        "Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)",
        "Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)",
        "Math.min(0, 150, 30, 20, -8, -200);",
        "Math.max(0, 150, 30, 20, -8, -200);",
        "Math.random();",
        "Math.log(1);",
        "Math.log(2);",
        "Math.log(3);",
        "Math.log(10);",
        "Math.log2(8);",
        "Math.log10(1000);",
        "Math.property",
        "Math.method(number)",
        "Math.round(x)",
        "Math.ceil(x)",
        "Math.floor(x)",
        "Math.trunc(x)",
        "Math.sign(x)",
        "Math.pow(x, y)",
        "Math.sqrt(x)",
        "Math.abs(x)",
        "Math.sin(x)",
        "Math.cos(x)",
        "Math.min()",
        "Math.max()",
        "Math.random()",
        "Math.log(x)",
        "Math.log2(x)",
        "Math.log10(x)"
      ]
    },
    {
      "title": "JavaScript Math Reference",
      "summary": "Complete Math Reference\nComplete JavaScript Reference\nFor a complete reference to all JavaScript properties and methods, with full descriptions and many examples, go to:\nW3Schools' Full JavaScript Reference.\nThe reference inludes all JavaScript updates from 1999 to 2025.",
      "examples": []
    },
    {
      "title": "JavaScript Random",
      "summary": "Math.random()\nMath.random() returns a random number between 0 (inclusive),  and 1 (exclusive):\nExample\nMath.random() always returns a number lower than 1.\nJavaScript Random Integers\nMath.random() used with Math.floor() can be used to return random integers.\nThere is no such thing as JavaScript integers.\nWe are talking about numbers with no decimals here.\nExample\nExample\nExample\nExample\nExample\nExample\nREMOVE ADS\nA Proper Random Function\nAs you can see from the examples above, it might be a good idea to create a proper random function to use for all random integer purposes.\nThis JavaScript function always returns a random number between min (included) and max (excluded):\nExample\nThis JavaScript function always returns a random number between min and max (both included):\nExample",
      "examples": [
        "// Returns a random number:\nMath.random();",
        "// Returns a random integer from 0 to 9:\nMath.floor(Math.random() * 10);",
        "// Returns a random integer from 0 to 10:\nMath.floor(Math.random() * 11);",
        "// Returns a random integer from 0 to 99:\nMath.floor(Math.random() * 100);",
        "// Returns a random integer from 0 to 100:\nMath.floor(Math.random() * 101);",
        "// Returns a random integer from 1 to 10:\nMath.floor(Math.random() * 10) + 1;",
        "// Returns a random integer from 1 to 100:\nMath.floor(Math.random() * 100) + 1;",
        "function getRndInteger(min, max) {\nreturn Math.floor(Math.random() * (max - min) ) + min;\n}",
        "function getRndInteger(min, max) {\nreturn Math.floor(Math.random() * (max - min + 1) ) + min;\n}",
        "Math.random()",
        "Math.floor()"
      ]
    },
    {
      "title": "JavaScript RegExp",
      "summary": "Regular Expressions\nA Regular Expression is a sequence of characters that forms a search pattern.\nRegex is a common shorthand for a regular expression.\nJavaScript RexExp is an Object for handling Regular Expressions.\nRegExp are be used for:\nText searching\nText replacing\nText validation\nExample\nDo a case-insensitive search for \"w3schools\" in a string:\nTry it Yourself »\nExample explained:\n/w3schools/i  is a regular expression.\nw3schools  is a pattern (to be used in a search).\ni  is a modifier (modifies the search to be case-insensitive).\nRegular Expression Syntax\nUsing String Methods\nRegular expressions are often used with the string methods:\nUsing String match()\nSearch for \"W3schools\" in a string:\nTry it Yourself »\nUsing String replace()\nReplace Microsoft with W3Schools in a string:\nUsing String search()\nSearch for \"W3Schools\" in a string:\nTry it Yourself »\nRexExp Alteration (OR)\nIn a regular expression an alteration is denoted with a vertical line character |.\nAn alteration matches any of the alternatives separated with |.\nExample\nA global search for the alternatives (red|green|blue):\nTry it Yourself »\nJavaScript Regex Flags\nRegular expression flags are parameters that can modify how a pattern is used, such as making it case-insensitive or global.\nThese are the most common:\nThe /g Flag (Global)\nThe /g flag matches all occurrences of the pattern, rather than just the first one.\nExample\nA global search for \"is\" in a string:\nTry it Yourself »\nThe /i Flag (Insensitive)\nThe /i flag makes a match case-insensitive: /abc/i matches \"abc\", \"AbC\", \"ABC\".\nExample\nA case-insensitive search for \"w3schools\" in a string:\nTry it Yourself »\nLearn More:\nJavaScript RegExp Flags\nRexExp Metacharacters\nMetacharacters are characters with a special meaning.\nThey can be used to match digts, words, spaces, and more.\nThese are the most common:\nRegExp \\d (digits) Metacharacter\nThe \\d metacharacter matches digits.\nExample\nA global search for digits in a string:\nTry it Yourself »\nRegExp \\w (word) Metacharacter\nThe \\w metacharacter matches word characters.\nA word character is a character a-z, A-Z, 0-9, including _ (underscore).\nExample\nA global search for word characters:\nLearn More:\nJavaScript RegExp Metacharacters\nJavaScript RegExp Quantifiers\nQuantifiers define the numbers of characters or expressions to match.\nThese are the most common:\nThe n? Quantifier\nx? matches zero or one occurrences of x.\nExample\nA global search for \"1\", followed by zero or more \"0\" characters:\nTry it Yourself »\nLearn More:\nJavaScript RegExp Quantifiers\nREMOVE ADS\nRegular Expression Assertions\nAssertions matches Boundaries and Lookarounds:\nString Boundaries and Word Boundaries.\nLookarounds: Lookaheads and Lookbehinds.\nThese are the most common:\nRegExp ^ Metacharacter\nThe ^ metacharacter matches the beginning of a string.\nExamples\nTest if a string starts with W3Schools:\nTry it Yourself »\nTry it Yourself »\nRegExp $ Metacharacter\nThe $ metacharacter matches the end of a string.\nTest if a string ends with W3Schools:\nLearn More:\nJavaScript RegExp Assertions\nJavaScript RegExp Character Classes\nCharacter Classes are characters enclosed in square brackets [].\nA character class matches any character from a set within brackets.\nThese are the most common:\nExample [0-9]\nA global search for the characters \"0\" to \"9\" in a string:\nTry it Yourself »\nLearn More:\nJavaScript RegExp Flags\nJavaScript RegExp Character Classes\nJavaScript RegExp Meta Characters\nJavaScript RegExp Assertions\nJavaScript RegExp Quantifiers\nJavaScript RegExp Patterns\nJavaScript RegExp Objects\nJavaScript RegExp Methods",
      "examples": [
        "let text = \"Visit W3Schools\";\nlet n = text.search(/w3schools/i);",
        "/pattern/modifier flags;",
        "let text = \"Visit W3Schools\";\nlet n = text.match(/W3schools/);",
        "let text = \"Visit Microsoft!\";\nlet result = text.replace(/Microsoft/i, \"W3Schools\");",
        "let text = \"Visit W3Schools\";\nlet n = text.search(/W3Schools/);",
        "let text = \"Black, white, red, green, blue, yellow.\";\n\nlet result = text.match(/red|green|blue/g);",
        "/pattern/flags",
        "let text = \"Is this all there is?\";\nconst pattern = /is/g;\n\nlet result = text.match(pattern);",
        "let text = \"Visit W3Schools\";\nconst pattern = /w3schools/i;\nlet result = text.match(pattern);",
        "// Match words\nconst pattern = /\\w/;",
        "let text = \"Give 100%!\";\nconst pattern = /\\d/g;\n\nlet result = text.match(pattern);",
        "let text = \"Give 100%!\";\nconst pattern = /\\w/g;\n\nlet result = text.match(pattern);",
        "// Match at least one zero\nconst pattern = /0+/;",
        "let text = \"1, 100 or 1000?\";\nconst pattern = /10?/g;\n\nlet result = text.match(pattern);",
        "// Match beginning of string\nconst pattern = /^W3Schools/;\n\n// Match end of string\nconst pattern = /W3Schools$/;",
        "const pattern = /^W3Schools/;\nlet text = \"W3Schools Tutorial\";\n\nlet result = pattern.test(text); // true",
        "const pattern = /^W3Schools/;\nlet text = \"Hello W3Schools\";\n\nlet result = pattern.test(text); // false",
        "const pattern = /W3Schools$/;\nlet text = \"Hello W3Schools\";\n\nlet result = pattern.test(text); // true",
        "const pattern = /W3Schools$/;\nlet text = \"W3Schools tutorial\";\n\nlet result = pattern.test(text); // false",
        "// Match Digits\nconst pattern = /[0-9]/;",
        "let text = \"More than 1000 times\";\nconst pattern = /[0-9]/g;\n\nlet result = text.match(pattern);"
      ]
    },
    {
      "title": "JavaScript RegExp Flags",
      "summary": "RegExp Modifier Flags\nFlags are parameters that can modify how a regex pattern is used, such as making it case-insensitive or global.\nJavaScript Regex Flags\nFlag Syntax: /pattern/flags\nRegExp /g Flag (Global)\nThe /g flag matches all occurrences of the pattern, rather than just the first one.\nExample\nA global search for \"is\" in a string:\nTry it Yourself »\nRegExp /i Flag (Insensitive)\nThe /i flag makes the match case-insensitive: /abc/i matches \"abc\", \"AbC\", \"ABC\".\nExample\nA case-insensitive search for \"w3schools\" in a string:\nTry it Yourself »\nRegExp /d Flag\nThe /d flag specifies the start and the end of a match.\nExample\nMatch every sub text that starts or ends with aa or bb:\nRegExp /s Flag (Single line/DotAll)\nThe /s flag allows the . (dot) metacharacter to match newline characters (\\n) in addition to any other character.\nExample\nWithout the /s flag, \\n does not match . (wildchars):\nRegExp /y Flag (Sticky):\nThe /y flag performs a \"sticky\" search from the lastIndex property of the RegExp object.\nThe /y flag lets a match start at the exact position where the last match ended.\nExamples\nThe /y flag must be set to allow match from a position.\nThis will not work:\nNote\nThe example above uses a regex metacharacter /\\w+/.\nThe meaning of /\\w+/ is \"mach any word\".\nYou will learn more about metacharacters in the next chapters.\nREMOVE ADS\nRegExp /u Flag (Unicode)\nThe /u flag enables full Unicode support in a regular expression.\nBy default, JavaScript RegExp treats 4-byte Unicode characters (like emojis or less common symbols) as two separate 2-byte \"surrogate\" code units.\nThe /u flag treats the pattern as a sequence of Unicode code points, which is important for correctly handling of characters outside the Basic Multilingual Plane (BMP).\nExample\nWithout the /u flag, regular expressions are not \"Unicode-aware\".\nExample\nNote\nJavaScript 2025 introduced the /v flag as an \"upgrade\" to the /u flag.\nThe /v Flag enables more Unicode-related features.\nRegExp /v Flag (Unicode Sets)\nThe /v flag is an upgrade to the /u flag for better Unicode support.\nIt enables more Unicode-related features.\nThe new features are:\nThe \\p escape sequence matches strings, instead of just characters.\nThe character class is upgraded to allow intersection, union, and subtraction syntaxes, as well as matching multiple Unicode characters.\nExample\nWithout the /v flag, regular expressions are not \"Unicode-aware\".\nExample\nRegExp Group Modifiers (?flag)\nThe (?flag) syntax is a group modifier (inline flag modifier).\nIt allows for modifying flags in a part of a pattern, rather than to the entire pattern.\n(?flags:pattern) enables the flags only for the pattern in the group.\nExample\nThe i flag is only enabled for the W3Schools part of the pattern.\nThe i flag is only enabled for the W3Schools part of the pattern.\nJavaScript Regex Flag Properties\nThe dotAll Property\nThe dotAll property returns true if the /s flag is set.\nExample\nThe global Property\nThe global property returns true if the /g flag is set.\nExample\nThe hasIndices Property\nThe hasIndices property returns true if the /d flag is set.\nExample\nThe ignoreCase Property\nThe ignoreCase property returns true if the /i flag is set.\nExample\nThe multiline Property\nThe multiline property returns true if the /m flag is set.\nExample\nThe sticky Property\nThe sticky property returns true if the /y flag is set.\nExample\nThe unicode Property\nThe unicode property returns true if the /u flag is set.\nExample\nThe unicodeSets Property\nThe unicodeSets property returns true if the /v flag is set.\nExample\nRegular Expression Methods\nRegular Expression Search and Replace can be done with different methods.\nThese are the most common:\nString Methods\nRegExp Methods\nSee Also:\nJavaScript RegExp Tutorial\nJavaScript RegExp Character Classes\nJavaScript RegExp Meta Characters\nJavaScript RegExp Assertions\nJavaScript RegExp Quantifiers\nJavaScript RegExp Patterns\nJavaScript RegExp Objects\nJavaScript RegExp Methods",
      "examples": [
        "/pattern/flags",
        "let text = \"Is this all there is?\";\nconst pattern = /is/g;\n\nlet result = text.match(pattern);",
        "let text = \"Visit W3Schools\";\nconst pattern = /is/g;\n\nlet result = text.match(pattern);",
        "let text = \"aaaabb\";\nconst pattern = /(aa)(bb)/d;\n\nlet result = text.match(pattern);",
        "let text = \"Line\\nLine.\";\nconst pattern = /Line./gs;\n\nlet result = text.match(pattern);",
        "let text = \"abc def ghi\";\nconst pattern = /\\w+/y;\n\n// Start match from position 4\npattern.lastIndex = 4;\nlet result = text.match(pattern);",
        "let text = \"abc def ghi\";\nconst pattern = /\\w+/;\n\n// Start match from position 4\npattern.lastIndex = 4;\nlet result = text.match(pattern);",
        "let text = \"䷀\";\nconst pattern = /\\u{04DC0}/u;\n\n// Returns true:\nlet result = pattern.test(text);",
        "let text = \"䷀\";\nconst pattern = /\\u{04DC0}/;\n\n// Returns false:\nlet result = pattern.test(text);",
        "let text = \"Hello 😄\";\nconst pattern = /\\p{Emoji}/v;\n\n// Returns true:\nlet result = pattern.test(text);",
        "let text = \"Hello 😄\";\nconst pattern = /\\p{Emoji}/;\n\n// Returns false:\nlet result = pattern.test(text);",
        "let text = \"W3Schools tutorials.\";\nconst pattern = /(?i:WShools) tutorials/;\n\n// Returns true:\nlet result = pattern.test(text);",
        "let text = \"W3Schools Tutorials.\";\nconst pattern = /(?i:W3Sshools) tutorials/;\n\n// Returns false:\nlet result = pattern.test(text);",
        "const pattern = /W3Schools/s;\n\nlet result = pattern.dotAll;",
        "const pattern = /W3Schools/g;\n\nlet result = pattern.global;",
        "const pattern = /W3Schools/d;\n\nlet result = pattern.hasIndices;",
        "const pattern = /W3Schools/i;\n\nlet result = pattern.ignoreCase;",
        "const pattern = /W3Schools/m;\n\nlet result = pattern.multiline;",
        "const pattern = /W3Schools/y;\n\nlet result = pattern.sticky;",
        "let text = \"䷀\";\nconst pattern = /\\u{04DC0}/u;\n\nlet result = pattern.unicode;",
        "let text = \"Hello 😄\";\nconst pattern = /\\p{Emoji}/v;\n\nlet result = pattern.unicodeSets;",
        "true",
        "dotAll",
        "global",
        "hasIndices",
        "ignoreCase",
        "multiline",
        "sticky",
        "unicode",
        "unicodeSets"
      ]
    },
    {
      "title": "RegExp Character Classes",
      "summary": "Character Classes are characters enclosed in square brackets [].\nA character class matches any character from a set within brackets:\nJavaScript Regex Character Classes\nExample [HW]\nA global search for the characters \"H\" and \"W\" in a string:\nTry it Yourself »\nExample [A-Z]\nA global search for the upper case characters \"A\" to \"Z\" in a string:\nTry it Yourself »\nExample [1234]\nA global search for the characters \"1\", \"2\", \"3\" and \"4\" in a string:\nTry it Yourself »\nExample [1-4]\nA global search for the characters \"1\" to \"4\" in a string:\nTry it Yourself »\nNote\n[01234] is the same as [0-4]\n[abcde] is the same as [a-e]\nREMOVE ADS\nRegular Expression Methods\nRegular Expression Search and Replace can be done with different methods.\nThese are the most common:\nString Methods\nRegExp Methods\nSee Also:\nJavaScript RegExp Tutorial\nJavaScript RegExp Flags\nJavaScript RegExp Meta Characters\nJavaScript RegExp Assertions\nJavaScript RegExp Quantifiers\nJavaScript RegExp Patterns\nJavaScript RegExp Objects\nJavaScript RegExp Methods",
      "examples": [
        "// Match Digits\nconst pattern = /[0-9]/;",
        "let text = \"Hello World!\";\nconst pattern = /[HW]/g;\n\nlet result = text.match(pattern);",
        "let text = \"This is W3School\";\nconst pattern = /[A-Z]/g;\n\nlet result = text.match(pattern);",
        "let text = \"123456789\";\nconst pattern = /[1234]/g;\n\nlet result = text.match(pattern);",
        "let text = \"123456789\";\nconst pattern = /[1-4]/g;\n\nlet result = text.match(pattern);"
      ]
    },
    {
      "title": "RegExp Meta Characters RegExp \\W Metacharacter",
      "summary": "Regular Expression Metacharacters\nMetacharacters are characters with a special meaning.\nThey can be used to match digts, words, spaces, and more:\nJavaScript Regex Metacharacters\nRegExp \\d (digits) Metacharacter\nThe \\d metacharacter matches digits.\nExample\nA global search for digits in a string:\nTry it Yourself »\nRegExp \\D Metacharacter\nThe \\D metacharacter matches non-digit characters.\nExample\nA global search for non-digit characters:\nRegExp \\w (word) Metacharacter\nThe \\w metacharacter matches word characters.\nA word character is a character a-z, A-Z, 0-9, including _ (underscore).\nExample\nA global search for word characters:\nThe \\W metacharacter matches non-word characters.\nA word character is a character a-z, A-Z, 0-9, including _ (underscore).\nExample\nA global search for non-word characters:\nThe \\s (space) Metacharacter\nThe \\s metacharacter matches whitespace characters like space, tab, and newline.\nExample\nA global search for whitespace characters in a string:\nTry it Yourself »\nRegExp \\xhh (hexadecimal)\n\\xhh matches characters by the hexadecimal number hh.\nA global replace of the hexadecimal character 6F (o) in a string:\nRegExp \\uhhhh (unicode hex)\n\\uhhhh matches a Unicode character by the hex number hhhh.\nExample\nA global search for a Unicode character with the hexadecimal code 0057 (W):\nTry it Yourself »\nREMOVE ADS\nRegular Expression Methods\nRegular Expression Search and Replace can be done with different methods.\nThese are the most common:\nString Methods\nRegExp Methods\nSee Also:\nJavaScript RegExp Tutorial\nJavaScript RegExp Character Classes\nJavaScript RegExp Assertions\nJavaScript RegExp Quantifiers\nJavaScript RegExp Patterns\nJavaScript RegExp Objects\nJavaScript RegExp Methods",
      "examples": [
        "// Match words\nconst pattern = /\\w/;",
        "let text = \"Give 100%!\";\nconst pattern = /\\d/g;\n\nlet result = text.match(pattern);",
        "let text = \"Give 100%!\";\nconst pattern = /\\D/g;\n\nlet result = text.match(pattern);",
        "let text = \"Give 100%!\";\nconst pattern = /\\w/g;\n\nlet result = text.match(pattern);",
        "let text = \"Give 100%!\";\nconst pattern = /\\W/g;\n\nlet result = text.match(pattern);",
        "let text = \"Is this all there is?\";\nconst pattern = /\\s/g;\n\nlet result = text.match(pattern);",
        "let text = \"Visit W3Schools. Hello World!\";\nlet pattern = /\\x6F/g;\n\nlet result = text.replace(pattern, \"*\");",
        "let text = \"Visit W3Schools. Hello World!\";\nconst pattern = /\\u0057/g;\n\nlet result = text.match(pattern);"
      ]
    },
    {
      "title": "Regular Expression Assertions",
      "summary": "RegExp Assertions\nAssertions matches Boundaries and Lookarounds:\nString Boundaries and Word Boundaries.\nLookarounds: Lookaheads and Lookbehinds.\nJavaScript Regex Assertions\nRegExp ^ Metacharacter\nThe ^ metacharacter matches the beginning of a string.\nExamples\nTest if a string starts with W3Schools:\nTry it Yourself »\nTry it Yourself »\nRegExp $ Metacharacter\nThe $ metacharacter matches the end of a string.\nTest if a string ends with W3Schools:\nThe \\b Metacharacter\nThe \\b metacharacter matches the beginning of a word or the end of a word.\nExamples\nSearch for the characters \"LO\" at the beginning of a word:\nTry it Yourself »\nSearch for the characters \"LO\" at the end of a word:\nTry it Yourself »\nRegExp Lookahead x(?=y)\nx(?=y) matches \"x\" if \"x\" is followed by \"y\".\nExample\nMatch \"W3schools\" if \"W3Schools\" is followed by \" Tutorials\".\nNegative Lookahead x(?!y)\nx(?!y) matches \"x\" if \"x\" is NOT followed by \"y\".\nExample\nRegExp Lookbehind (?<=y)x\n(?<=y)x matches \"x\" if \"x\" is preceded by \"y\".\nExample\nMatch \"W3Scools\" if \"W3Schools\" is preceded by \"Hello \".\nNegative Lookbehind (?<!y)x\n(?<!y)x matches \"x\" only if \"x\" is NOT preceded by \"y\".\nExample\nREMOVE ADS\nRegular Expression Groups\nRegExp Capturing Groups (x)\nExample\nExplained\n(haha) captures a group of characters\n(haha)+ matches zero or more occurences of the group\ntext.match() returns an array of results\nmatch.groups() returns an array of matches\nNamed Capturing Groups (?<n>)\nExample\nExplained\n(?<firstName>\\w+) captures a word and labels it firstName\n(?<lastName>\\w+) does the same for lastName\ntext.match() returns an array with a groups property\nmatch.groups() returns an object:\n{firstName:\"John\", lastName:\"Doe\" }\nWhen using capturing groups, the String method match() and the RegExp method exec(), return a match object with a groups property. This property holds the names and the values of the groups.\nRegExp Group Modifiers (?flag)\nThe (?flag) syntax is a group modifier (inline flag modifier).\nIt allows for modifying flags in a part of a pattern, rather than to the entire pattern.\n(?flags:pattern) enables the flags only for the pattern in the group.\nExample\nThe i flag is only enabled for the W3Schools part of the pattern.\nThe i flag is only enabled for the W3Schools part of the pattern.\nSee Also:\nJavaScript RegExp Tutorial\nJavaScript RegExp Flags\nJavaScript RegExp Character Classes\nJavaScript RegExp Meta Characters\nJavaScript RegExp Quantifiers\nJavaScript RegExp Patterns\nJavaScript RegExp Objects\nJavaScript RegExp Methods\nRegular Expression Methods\nRegular Expression Search and Replace can be done with different methods.\nThese are the most common:\nString Methods\nRegExp Methods",
      "examples": [
        "// Match beginning of string\nconst pattern = /^W3Schools/;\n\n// Match end of string\nconst pattern = /W3Schools$/;",
        "const pattern = /^W3Schools/;\nlet text = \"W3Schools Tutorial\";\n\nlet result = pattern.test(text); // true",
        "const pattern = /^W3Schools/;\nlet text = \"Hello W3Schools\";\n\nlet result = pattern.test(text); // false",
        "const pattern = /W3Schools$/;\nlet text = \"Hello W3Schools\";\n\nlet result = pattern.test(text); // true",
        "const pattern = /W3Schools$/;\nlet text = \"W3Schools tutorial\";\n\nlet result = pattern.test(text); // false",
        "let text = \"HELLO, LOOK AT YOU!\";\n\nlet result = text.search(/\\bLO/);",
        "let text = \"HELLO, LOOK AT YOU!\";\n\nlet result = text.search(/LO\\b/);",
        "let text = \"W3Schools Tutorials\";\nlet pattern = /W3Schools(?= Tutorials)/;\n\nlet result = pattern.test(text);",
        "let text = \"Hello W3Schools\";\n\nlet pattern = /W3Schools(?!Hello )/;\nlet result = pattern.test(text);",
        "let text = \"Hello W3Schools\";\nlet pattern = /(?<=Hello )W3Schools/;\n\nlet result = pattern.test(text);",
        "let text = \"Hello W3Schools\";\n\nlet pattern = /(?<!Hello ) W3Schools/;\nlet result = pattern.test(text);",
        "let text = \"Haha, haha, haha.\";\nconst pattern = /(haha)+/;\n\nlet result = text.match(pattern);",
        "const text = \"Name: John Doe\";\n\n// Using named capturing groups\nconst regex = /(?<firstName>\\w+) (?<lastName>\\w+)/;\nconst match = text.match(regex);\n\nlet fName = match.groups.firstName;\nlet lName = match.groups.lastName;",
        "let text = \"W3Schools tutorials.\";\nconst pattern = /(?i:WShools) tutorials/;\n\n// Returns true:\nlet result = pattern.test(text);",
        "let text = \"W3Schools Tutorials.\";\nconst pattern = /(?i:W3Sshools) tutorials/;\n\n// Returns false:\nlet result = pattern.test(text);"
      ]
    },
    {
      "title": "RegExp Quantifiers",
      "summary": "RegExp Quantifiers\nQuantifiers define the numbers of characters or expressions to match.\nJavaScript RexExp Quantifiers\nRegExp + Quantifier\nx+ matches matches at least one x.\nExample\nA global search for at least one \"o\":\nTry it Yourself »\nRegExp * Quantifier\nx* matches zero or more occurrences of x.\nExample\nA global search for an \"l\", followed by zero or more \"o\" characters:\nTry it Yourself »\nRegExp ? Quantifier\nx? matches zero or one occurrences of x.\nExample\nA global search for \"1\", followed by zero or more \"0\" characters:\nTry it Yourself »\nREMOVE ADS\nRegExp {n} Quantifier\nx{n} matches n occurences of x.\nA global search for a string that contains a sequence of four digits:\nRegExp {n,m} Quantifier\nx{n,m} matches from n to m occurences of x.\nA global search for a substring that contains a sequence of three to four digits:\nRegExp {n,} Quantifier\nx{n,} matches n or more occurences of x.\nA global search for a sequence of at least three digits:\nRegular Expression Methods\nRegular Expression Search and Replace can be done with different methods.\nThese are the most common:\nString Methods\nRegExp Methods\nSee Also:\nJavaScript RegExp Tutorial\nJavaScript RegExp Flags\nJavaScript RegExp Character Classes\nJavaScript RegExp Meta Characters\nJavaScript RegExp Assertions\nJavaScript RegExp Patterns\nJavaScript RegExp Objects\nJavaScript RegExp Methods",
      "examples": [
        "// Match at least one zero\nconst pattern = /0+/;",
        "let text = \"Hellooo World! Hello W3Schools!\";\nconst pattern = /lo+/g;\n\nlet result = text.match(pattern);",
        "let text = \"Hellooo World! Hello W3Schools!\";\nconst pattern = /lo*/g;\n\nlet result = text.match(pattern);",
        "let text = \"1, 100 or 1000?\";\nconst pattern = /10?/g;\n\nlet result = text.match(pattern);",
        "let text = \"100, 1000 or 10000?\";\nlet pattern = /\\d{4}/g;\n\nlet result = text.match(pattern);",
        "let text = \"100, 1000 or 10000?\";\nlet pattern = /\\d{3,4}/g;\n\nlet result = text.match(pattern);",
        "let text = \"100, 1000 or 10000?\";\nlet pattern = /\\d{3,}/g;\n\nlet result = text.match(pattern);"
      ]
    },
    {
      "title": "JavaScript RegExp Patterns",
      "summary": "Full RegExp Flag Reference\nRevised July 2025\nFlags can be added to a regexp pattern to Modify its behavior:\nSee Also:\nJavaScript RegExp Flags Tutorial\nFull Character Classes Reference\nRevised July 2025\nA character class is one or more characters enclosed in square brackets [ ]:\nSee Also:\nRegExp Characters Classes Tutorial\nFull Metacharacter Reference\nRevised July 2025\nMetacharacters are characters with a special meaning:\nSee Also:\nRegExp Meta Characters Tutorial\nREMOVE ADS\nFull RexExp Assertions Reference\nRevised July 2025\nAssertions consist of Boundaries and Lookarounds.\nBoundaries matches at the beginning or the end of lines and words, Lookarounds mathes previos or subsequent patterns.\nSee Also:\nRegExp Assertions Tutorial\nRexExp Quantifiers\nQuantifiers indicate the numbers of characters or expressions to match:\nSee Also:\nRegExp Quantifiers Tutorial",
      "examples": []
    },
    {
      "title": "JavaScript RegExp Objects",
      "summary": "The RegExp Object\nIn JavaScript, RegExp is a regular expression object with predefined properties and methods.\nUsing test()\nThe test() method is a RegExp expression method.\nIt searches a string for a pattern, and returns true or false, depending on the result.\nThe following example searches a string for the character \"e\":\nExample\nSince there is an \"e\" in the string, the output of the code above will be:\nTry it Yourself »\nYou don't have to put the regular expression in a variable first. The two lines above can be shortened to one:\nUsing exec()\nThe exec() method is a RegExp expression method.\nIt searches a string for a specified pattern, and returns the found text as an object.\nIf no match is found, it returns an empty (null) object.\nThe following example searches a string for the character \"e\":\nExample\nThe RegExp.escape() Method\nThe RegExp.escape() method returns string where characters that belongs to the regular expression syntax are escaped.\nThis makes it possible to treat characters like +, *, ?, ^, $, (, ), [, ], {, }, |, and \\ literally, and not as part of a regular expression.\nExample\nCreate a regular expression that matches the string \"[*]\":\nBrowser Support\nRegExp.escape() is an ES2025 feature.\nJavaScript 2025 is fully supported in all modern browsers since May 2025:\nSee Also:\nJavaScript RegExp Tutorial\nJavaScript RegExp Flags\nJavaScript RegExp Character Classes\nJavaScript RegExp Meta Characters\nJavaScript RegExp Assertions\nJavaScript RegExp Quantifiers\nJavaScript RegExp Patterns\nJavaScript RegExp Methods",
      "examples": [
        "const pattern = /e/;\npattern.test(\"The best things in life are free!\");",
        "/e/.test(\"The best things in life are free!\");",
        "/e/.exec(\"The best things in life are free!\");",
        "// Escape a text for to use as a regular expression\nconst safe = RegExp.escape(\"[*]\";\n\n// Build a new reglar expression\nconst regex = new RegExp(safe);\n\n// Text to replace within\nconst oldText = \"[*] is a web school.\";\n\n// Perform the replace\nconst newText = oldText.match(regex, \"W3Schools\");",
        "test()",
        "true",
        "exec()",
        "RegExp.escape()"
      ]
    },
    {
      "title": "RegExp Methods",
      "summary": "Complete RexExp Reference\nRegExp String Methods\nSee Also:\nJavaScript RegExp Tutorial\nJavaScript RegExp Flags\nJavaScript RegExp Character Classes\nJavaScript RegExp Meta Characters\nJavaScript RegExp Assertions\nJavaScript RegExp Quantifiers\nJavaScript RegExp Patterns\nJavaScript RegExp Objects",
      "examples": [
        "true",
        "false"
      ]
    },
    {
      "title": "JavaScript Data Types",
      "summary": "JavaScript has 8 Datatypes\nA JavaScript variable can hold 8 types of data:\nExamples\nThe Concept of Data Types\nIn programming, data types is an important concept.\nTo be able to operate on variables, it is important to know something about the type.\nWithout data types, a computer cannot safely solve this:\nDoes it make any sense to add \"Volvo\" to sixteen? Will it produce an error or will it produce a result?\nJavaScript will treat the example above as:\nNote\nWhen adding a number and a string, JavaScript will treat the number as a string.\nExample\nExample\nJavaScript evaluates expressions from left to right. Different sequences can produce different results:\nJavaScript:\nResult:\nJavaScript:\nResult:\nIn the first example, JavaScript treats 16 and 4 as numbers, until it reaches \"Volvo\".\nIn the second example, since the first operand is a string, all operands are treated as strings.\nJavaScript Types are Dynamic\nJavaScript has dynamic types. This means that the same variable can be used to hold different data types:\nExample\nJavaScript Strings\nA string (or a text string) is a series of characters like \"John Doe\".\nStrings are written with quotes. You can use single or double quotes:\nExample\nYou can use quotes inside a string, as long as they don't match the quotes surrounding the string:\nExample\nLearn More:\nJavaScript String Methods\nJavaScript String Search\nJavaScript String Reference\nJavaScript Numbers\nAll JavaScript numbers are stored as decimal numbers (floating point).\nNumbers can be written with, or without decimals:\nExample\nExponential Notation\nExtra large or extra small numbers can be written with scientific (exponential) notation:\nExample\nNumber Types\nMost programming languages have many number types:\nWhole numbers (integers):\nbyte (8-bit), short (16-bit), int (32-bit), long (64-bit)\nReal numbers (floating-point):\nfloat (32-bit), double (64-bit).\nJavascript numbers are always double (64-bit floating point).\nLearn More:\nJavaScript Numbers Tutorial\nJavaScript Number Methods\nJavaScript Number Properties\nJavaScript Number Reference\nJavaScript BigInt\nAll JavaScript numbers are stored in a 64-bit floating-point format.\nJavaScript BigInt is a new datatype (ES2020) that can be used to store integer values that are too big to be represented by a normal JavaScript Number.\nExample\nLearn More:\nJavaScript BigInt Tutorial\nJavaScript Booleans\nBooleans can only have two values: true or false.\nExample\nBooleans are often used in conditional testing.\nLearn More:\nJavaScript Boolean Tutorial\nREMOVE ADS\nJavaScript Objects\nJavaScript Objects represent complex data structures and functionalities beyond the primitive data types (string, number, boolean, null, undefined, symbol, bigint).\nJavaScript objects are written with curly braces { }.\nJavaScript objects contains a collection of different properties.\nObject properties are written as name:value pairs, separated by commas.\nExample\nCreate a person object with 4 properties: firstName, lastName, age and eyeColor:\nLearn More:\nJavaScript Object Tutorial\nJavaScript Object Definitions\nJavaScript Object Methods\nJavaScript Object Reference\nBuilt-In Object Types\nA JavaScript object can represent a JavScript object or a User defined object.\nBuilt-in JavavaScript object types can be:\nNote\nThe list above is not complete, as JavaScript offers other built-in object types like Math for mathematic methods and values, and various other specialized objects for specific tasks.\nThe typeof Operator\nYou can use the JavaScript typeof operator to find the type of a JavaScript variable.\nThe typeof operator returns the type of a variable or an expression:\nExample\nExample\nLearn More:\nJavaScript typeof Tutorial\nJavaScript Arrays\nJavaScript arrays are a special type of JavaScript objects.\nJavaScript arrays are written with square [ ] brackets.\nArray items are separated by commas.\nThe following code declares (creates) an array called cars, containing three items (car names):\nExample\nArray indexes are zero-based, which means the first item is [0], second is [1], and so on.\nLearn More:\nJavaScript Array Tutorial\nJavaScript Array Methods\nJavaScript Array Sort\nJavaScript Array Iterations\nJavaScript Array Reference\nUndefined\nIn JavaScript, a variable without a value, has the value undefined. The type is also undefined.\nExample\nAny variable can be emptied, by setting the value to undefined. The type will also be undefined.\nExample\nEmpty Values\nAn empty value has nothing to do with undefined.\nAn empty string has both a legal value and a type.\nExample\nDatatype null\nIn JavaScript, a variable or an expression can obtain the datatype null in several ways.\nA function can return null or a variable can be assigned the null value:\nExample\nNote\nThe typeof operator returns object for null.\nThis is a historical quirk in JavaScript and does not indicate that null is an object.\nThe strict equality operator (===) compares both the value and the type of the operands.\nIt returns true only if both the operands values and types are null.\nThe loose equality operator (==) also returns true for a null value, but it also returns true if the value is undefined.\nUsing == is not recommended when checking for null.",
      "examples": [
        "// Strings\nlet color = \"Yellow\";\nlet lastName = \"Johnson\";\n\n// Number\nlet length = 16;\nlet weight = 7.5;\n\n// BigInt\nlet x = 1234567890123456789012345n;\nlet y = BigInt(1234567890123456789012345)\n\n// Boolean\nlet x = true;\nlet y = false;\n\n// Object\nconst person = {firstName:\"John\", lastName:\"Doe\"};\n\n// Array object\nconst cars = [\"Saab\", \"Volvo\", \"BMW\"];\n\n// Date object\nconst date = new Date(\"2022-03-25\");\n\n// Undefined\nlet x;\nlet y;\n\n// Null\nlet x = null;\nlet y = null;\n\n// Symbol\nconst x = Symbol();\nconst y = Symbol();",
        "let x = 16 + \"Volvo\";",
        "let x = \"16\" + \"Volvo\";",
        "let x = \"Volvo\" + 16;",
        "let x = 16 + 4 + \"Volvo\";",
        "let x = \"Volvo\" + 16 + 4;",
        "let x;       // Now x is undefined\nx = 5;       // Now x is a Number\nx = \"John\";  // Now x is a String",
        "// Using double quotes:\nlet carName1 = \"Volvo XC60\";\n\n// Using single quotes:\nlet carName2 = 'Volvo XC60';",
        "// Single quote inside double quotes:\nlet answer1 = \"It's alright\";\n\n// Single quotes inside double quotes:\nlet answer2 = \"He is called 'Johnny'\";\n\n// Double quotes inside single quotes:\nlet answer3 = 'He is called \"Johnny\"';",
        "// With decimals:\nlet x1 = 34.00;\n\n// Without decimals:\nlet x2 = 34;",
        "let y = 123e5;    // 12300000\nlet z = 123e-5;   // 0.00123",
        "let x = BigInt(\"123456789012345678901234567890\");",
        "let x = 5;\nlet y = 5;\nlet z = 6;\n(x == y)       // Returns true\n(x == z)       // Returns false",
        "const person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};",
        "typeof \"\"             // Returns \"string\"\ntypeof \"John\"         // Returns \"string\"\ntypeof \"John Doe\"     // Returns \"string\"",
        "typeof 0              // Returns \"number\"\ntypeof 314            // Returns \"number\"\ntypeof 3.14           // Returns \"number\"\ntypeof (3)            // Returns \"number\"\ntypeof (3 + 4)        // Returns \"number\"",
        "const cars = [\"Saab\", \"Volvo\", \"BMW\"];",
        "let car;    // Value is undefined, type is undefined",
        "car = undefined;    // Value is undefined, type is undefined",
        "let car = \"\";    // The value is \"\", the typeof is \"string\"",
        "let carName = null;",
        "20Volvo",
        "Volvo164",
        "true",
        "false",
        "{ }",
        "typeof",
        "[ ]",
        "cars",
        "undefined",
        "null"
      ]
    },
    {
      "title": "JavaScript typeof",
      "summary": "The typeof Operator\nThe typeof operator returns the data type of a JavaScript variable.\nPrimitive Data Types\nIn JavaScript, a primitive value is a single value with no properties or methods.\nJavaScript has 7 primitive data types:\nstring\nnumber\nboolean\nbigint\nsymbol\nnull\nundefined\nThe typeof operator returns the type of a variable or an expression.\nExamples\nNote:\nIn JavaScript, null is a primitive value. However, typeof returns \"object\".\nThis is a well-known bug in JavaScript and has historical reasons.\nComplex Data Types\nA complex data type can store multiple values and/or different data types together.\nJavaScript has one complex data type:\nobject\nAll other complex types like arrays, functions, sets, and maps are just different types of objects.\nThe typeof operator returns only two types:\nobject\nfunction\nExample\nNote:\nThe typeof operator returns object for all types of objects:\nobjects\narrays\nsets\nmaps\nYou cannot use typeof to determine if a JavaScript object is an array or a date.\nHow to Recognize an Array\nHow to know if a variable is an array?\nECMAScript 5 (2009) defined a new method for this: Array.isArray():\nExample\nThe instanceof Operator\nThe instanceof operator returns true if an object is an instance of a specified object type:\nExamples\nREMOVE ADS\nUndefined Variables\nThe typeof of an undefined variable is undefined.\nExample\nThe typeof of a variable with no value is undefined. The value is also undefined.\nExample\nAny variable can be emptied, by setting the value to undefined.\nThe type will also be undefined.\nExample\nEmpty Values\nAn empty value has nothing to do with undefined.\nAn empty string has both a legal value and a type.\nExample\nNull\nIn JavaScript null is \"nothing\". It is supposed to be something that doesn't exist.\nUnfortunately, in JavaScript, the data type of null is an object.\nYou can empty an object by setting it to null:\nExample\nYou can also empty an object by setting it to undefined:\nExample\nDifference Between Undefined and Null\nundefined and null are equal in value but different in type:\nThe constructor Property\nThe constructor property returns the constructor function for all JavaScript variables.\nExample\nWith the constructor, you can check if an object is an Array:\nExample\nTry it Yourself »\nWith the constructor, you can check if an object is a Date:\nExample\nTry it Yourself »\nAll Together\nNote:\nThe data type of NaN (Not a Number) is number !\nThe void Operator\nThe void operator evaluates an expression and returns undefined. This operator is often used to obtain the undefined primitive value, using \"void(0)\" (useful when evaluating an expression without using the return value).\nExample",
      "examples": [
        "typeof \"John\"         // Returns string\ntypeof (\"John\"+\"Doe\") // Returns string\ntypeof 3.14           // Returns number\ntypeof 33             // Returns number\ntypeof (33 + 66)      // Returns number\ntypeof true           // Returns boolean\ntypeof false          // Returns boolean\ntypeof 1234n          // Returns bigint\ntypeof Symbol()       // Returns symbol\ntypeof x              // Returns undefined",
        "typeof null           // Returns object",
        "typeof {name:'John'}   // Returns object\ntypeof [1,2,3,4]       // Returns object\ntypeof new Map()       // Returns object\ntypeof new Set()       // Returns object\n\ntypeof function (){}   // Returns function",
        "// Create an Array\nconst fruits = [\"apples\", \"bananas\", \"oranges\"];\nArray.isArray(fruits);",
        "// Create a Date\nconst time = new Date();\n\n(time instanceof Date);",
        "// Create an Array\nconst fruits = [\"apples\", \"bananas\", \"oranges\"];\n\n(fruits instanceof Array);",
        "// Create a Map\nconst fruits = new Map([\n[\"apples\", 500],\n[\"bananas\", 300],\n[\"oranges\", 200]\n]);\n\n(fruits instanceof Map);",
        "// Create a Set\nconst fruits = new Set([\"apples\", \"bananas\", \"oranges\"]);\n\n(fruits instanceof Set);",
        "typeof car;",
        "let car;\ntypeof car;",
        "let car = \"Volvo\";\ncar = undefined;",
        "let car = \"\";\ntypeof car;",
        "// Create an Object\nlet person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};\n\nperson = null;\n// Now value is null, but type is still an object",
        "let person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};\n\nperson = undefined;\n// Now both value and type is undefined",
        "typeof undefined      // undefined\ntypeof null           // object\n\nnull === undefined    // false\nnull == undefined     // true",
        "// Returns function Object() {[native code]}:\n{name:'John',age:34}.constructor\n\n// Returns function Array() {[native code]}:\n[1,2,3,4].constructor\n\n// Returns function Date() {[native code]}:\nnew Date().constructor\n\n// Returns function Set() {[native code]}:\nnew Set().constructor\n\n// Returns function Map() {[native code]}:\nnew Map().constructor\n\n// Returns function Function() {[native code]}:\nfunction () {}.constructor",
        "(myArray.constructor === Array);",
        "(myDate.constructor === Date);",
        "typeof \"John\"          // Returns \"string\"\ntypeof (\"John\"+\"Doe\")  // Returns \"string\"\ntypeof 3.14            // Returns \"number\"\ntypeof (33 + 66)       // Returns \"number\"\ntypeof NaN             // Returns \"number\"\ntypeof 1234n           // Returns \"bigint\"\ntypeof true            // Returns \"boolean\"\ntypeof false           // Returns \"boolean\"\ntypeof {name:'John'}   // Returns \"object\"\ntypeof [1,2,3,4]       // Returns \"object\"\ntypeof {}              // Returns \"object\"\ntypeof []              // Returns \"object\"\ntypeof new Object()    // Returns \"object\"\ntypeof new Array()     // Returns \"object\"\ntypeof new Date()      // Returns \"object\"\ntypeof new Set()       // Returns \"object\"\ntypeof new Map()       // Returns \"object\"\ntypeof function () {}  // Returns \"function\"\ntypeof x               // Returns \"undefined\"\ntypeof null            // Returns \"object\"",
        "<a href=\"javascript:void(0);\">\nUseless link\n</a>\n\n<a href=\"javascript:void(document.body.style.backgroundColor='red');\">\nClick me to change the background color of body to red\n</a>",
        "typeof",
        "null",
        "Array.isArray()",
        "instanceof",
        "true",
        "undefined",
        "constructor"
      ]
    },
    {
      "title": "JavaScript toString()",
      "summary": "The JavaScript toString() method converts a variable (or a value) to a string.\nIt is a built-in method for many data types, including numbers, arrays, dates, and objects.\nThe method is useful for:\nConverting data to a readable format for display\nEnsuring type compatibility when a string is required\nCustomizing objects other user interfaces\nCustomizing objects for debugging\nJavaScript Array toString()\nWhen used on an array, toString() returns the array elements as a comma separated string.\nExample\nJavaScript Date toString()\nWhen used on a date, toString() returns a human-readable date and time string.\nExample\nConvert a date object to a string:\nJavaScript Number toString()\nWhen used on a number, toString() returns the number as a string.\nExample\nConvert a number to a string, using base 2 (binary):\nExample\nJavaScript Function toString()\nWhen used on a function, toString() returns the source code of the function as a string.\nJavaScript Object toString()\nWhen used on an object, toString() an object returns \"[object Object]\".\nTo provide a meaningful string representation, it can be overridden in the object definition:\nExample",
      "examples": [
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\nlet myList = fruits.toString();",
        "const d = new Date();\n\nlet text = d.toString();",
        "let x = 123;\n\nlet text = x.toString();",
        "let x = 123;\n\nlet text = x.toString(2);",
        "let person = {\nfirstname: \"John\",\nlastname: \"Doe\",\n}\nlet text = person.toString();",
        "toString()"
      ]
    },
    {
      "title": "JavaScript Type Conversion",
      "summary": "Converting Strings to Numbers\nConverting Numbers to Strings\nConverting Dates to Numbers\nConverting Numbers to Dates\nConverting Booleans to Numbers\nConverting Numbers to Booleans\nJavaScript Type Conversion\nJavaScript variables can be converted to a new variable and another data type:\nBy the use of a JavaScript function\nAutomatically by JavaScript itself\nConverting Strings to Numbers\nThe global method Number() converts a variable (or a value) into a number.\nA numeric string (like \"3.14\") converts to a number (like 3.14).\nAn empty string (like \"\") converts to 0.\nA non numeric string (like \"John\") converts to NaN (Not a Number).\nExamples\nThese will convert:\nThese will not convert:\nNumber Methods\nIn the chapter Number Methods, you will find more methods that can be used to convert strings to numbers:\nThe Unary + Operator\nThe unary + operator can be used to convert a variable to a number:\nExample\nIf the variable cannot be converted, it will still become a number, but with the value NaN (Not a Number):\nExample\nREMOVE ADS\nConverting Numbers to Strings\nThe global method String() can convert numbers to strings.\nIt can be used on any type of numbers, literals, variables, or expressions:\nExample\nThe Number method toString() does the same.\nExample\nMore Methods\nIn the chapter Number Methods, you will find more methods that can be used to convert numbers to strings:\nConverting Dates to Numbers\nThe global method Number() can be used to convert dates to numbers.\nThe date method getTime() does the same.\nConverting Dates to Strings\nThe global method String() can convert dates to strings.\nThe Date method toString() does the same.\nExample\nIn the chapter Date Methods, you will find more methods that can be used to convert dates to strings:\nConverting Booleans to Numbers\nThe global method Number() can also convert booleans to numbers.\nConverting Booleans to Strings\nThe global method String() can convert booleans to strings.\nThe Boolean method toString() does the same.\nAutomatic Type Conversion\nWhen JavaScript tries to operate on a \"wrong\" data type, it will try to convert the value to a \"right\" type.\nThe result is not always what you expect:\nAutomatic String Conversion\nJavaScript automatically calls the variable's toString() function when you try to \"output\" an object or a variable:\nNumbers and booleans are also converted, but this is not very visible:\nJavaScript Type Conversion Table\nThis table shows the result of converting different JavaScript values to Number, String, and Boolean:\nValues in quotes indicate string values.\nRed values indicate values (some) programmers might not expect.",
      "examples": [
        "Number(\"3.14\")\nNumber(Math.PI)\nNumber(\" \")\nNumber(\"\")",
        "Number(\"99 88\")\nNumber(\"John\")",
        "let y = \"5\";      // y is a string\nlet x = + y;      // x is a number",
        "let y = \"John\";   // y is a string\nlet x = + y;      // x is a number (NaN)",
        "String(x)         // returns a string from a number variable x\nString(123)       // returns a string from a number literal 123\nString(100 + 23)  // returns a string from a number from an expression",
        "x.toString()\n(123).toString()\n(100 + 23).toString()",
        "d = new Date();\nNumber(d)          // returns 1404568027739",
        "d = new Date();\nd.getTime()        // returns 1404568027739",
        "String(Date())  // returns \"Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)\"",
        "Date().toString()  // returns \"Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)\"",
        "Number(false)     // returns 0\nNumber(true)      // returns 1",
        "String(false)      // returns \"false\"\nString(true)       // returns \"true\"",
        "false.toString()   // returns \"false\"\ntrue.toString()    // returns \"true\"",
        "5 + null    // returns 5         because null is converted to 0\n\"5\" + null  // returns \"5null\"   because null is converted to \"null\"\n\"5\" + 2     // returns \"52\"      because 2 is converted to \"2\"\n\"5\" - 2     // returns 3         because \"5\" is converted to 5\n\"5\" * \"2\"   // returns 10        because \"5\" and \"2\" are converted to 5 and 2",
        "document.getElementById(\"demo\").innerHTML = myVar;\n\n// if myVar = {name:\"Fjohn\"}  // toString converts to \"[object Object]\"\n// if myVar = [1,2,3,4]       // toString converts to \"1,2,3,4\"\n// if myVar = new Date()      // toString converts to \"Fri Jul 18 2014 09:08:55 GMT+0200\"",
        "// if myVar = 123             // toString converts to \"123\"\n// if myVar = true            // toString converts to \"true\"\n// if myVar = false           // toString converts to \"false\"",
        "Number()",
        "NaN",
        "String()",
        "toString()",
        "getTime()"
      ]
    },
    {
      "title": "JavaScript Errors",
      "summary": "Throw, and Try...Catch...Finally\nThe try statement defines a code block to run (to try).\nThe catch statement defines a code block to handle any error.\nThe finally statement defines a code block to run regardless of the result.\nThe throw statement defines a custom error.\nErrors Will Happen!\nWhen executing JavaScript code, different errors can occur.\nErrors can be coding errors made by the programmer, errors due to wrong input, and other unforeseeable things.\nExample\nIn this example we misspelled \"alert\" as \"adddlert\" to deliberately produce an error:\nJavaScript catches adddlert as an error, and executes the catch code to handle it.\nJavaScript try and catch\nThe try statement allows you to define a block of code to be tested for errors while it is being executed.\nThe catch statement allows you to define a block of code to be executed, if an error occurs in the try block.\nThe JavaScript statements try and catch come in pairs:\nREMOVE ADS\nJavaScript Throws Errors\nWhen an error occurs, JavaScript will normally stop and generate an error message.\nThe technical term for this is: JavaScript will throw an exception (throw an error).\nJavaScript will actually create an Error object with two properties: name and message.\nThe throw Statement\nThe throw statement allows you to create a custom error.\nTechnically you can throw an exception (throw an error).\nThe exception can be a JavaScript String, a Number, a Boolean or an Object:\nIf you use throw together with try and catch, you can control program flow and generate custom error messages.\nInput Validation Example\nThis example examines input. If the value is wrong, an exception (err) is thrown.\nThe exception (err) is caught by the catch statement and a custom error message is displayed:\nHTML Validation\nThe code above is just an example.\nModern browsers will often use a combination of JavaScript and built-in HTML validation, using predefined validation rules defined in HTML attributes:\nYou can read more about forms validation in a later chapter of this tutorial.\nThe finally Statement\nThe finally statement lets you execute code, after try and catch, regardless of the result:\nSyntax\nExample\nThe Error Object\nJavaScript has a built in error object that provides error information when an error occurs.\nThe error object provides two useful properties: name and message.\nError Object Properties\nError Name Values\nSix different values can be returned by the error name property:\nThe six different values are described below.\nEval Error\nAn EvalError indicates an error in the eval() function.\nNewer versions of JavaScript do not throw EvalError. Use SyntaxError instead.\nRange Error\nA RangeError is thrown if you use a number that is outside the range of legal values.\nFor example: You cannot set the number of significant digits of a number to 500.\nExample\nReference Error\nA ReferenceError is thrown if you use (reference) a variable that has not been declared:\nExample\nSyntax Error\nA SyntaxError is thrown if you try to evaluate code with a syntax error.\nExample\nType Error\nA TypeError is thrown if an operand or argument is incompatible with the type expected by an operator or function.\nExample\nURI (Uniform Resource Identifier) Error\nA URIError is thrown if you use illegal characters in a URI function:\nExample\nNon-Standard Error Object Properties\nMozilla and Microsoft define some non-standard error object properties:\nfileName (Mozilla)\nlineNumber (Mozilla)\ncolumnNumber (Mozilla)\nstack (Mozilla)\ndescription (Microsoft)\nnumber (Microsoft)\nDo not use these properties in public web sites. They will not work in all browsers.\nComplete Error Reference\nFor a complete reference of the Error object, go to our Complete JavaScript Error Reference.",
      "examples": [
        "<p id=\"demo\"></p>\n\n<script>\ntry {\nadddlert(\"Welcome guest!\");\n}\ncatch(err) {\ndocument.getElementById(\"demo\").innerHTML = err.message;\n}\n</script>",
        "try {\nBlock of code to try\n}\ncatch(err) {\nBlock of code to handle errors\n}",
        "throw \"Too big\";    // throw a text\nthrow 500;          // throw a number",
        "<!DOCTYPE html>\n<html>\n<body>\n\n<p>Please input a number between 5 and 10:</p>\n\n<input id=\"demo\" type=\"text\">\n<button type=\"button\" onclick=\"myFunction()\">Test Input</button>\n<p id=\"p01\"></p>\n\n<script>\nfunction myFunction() {\nconst message = document.getElementById(\"p01\");\nmessage.innerHTML = \"\";\nlet x = document.getElementById(\"demo\").value;\ntry {\nif(x.trim() == \"\") throw \"empty\";\nif(isNaN(x)) throw \"not a number\";\nx = Number(x);\nif(x < 5) throw \"too low\";\nif(x > 10) throw \"too high\";\n}\ncatch(err) {\nmessage.innerHTML = \"Input is \" + err;\n}\n}\n</script>\n\n</body>\n</html>",
        "<input id=\"demo\" type=\"number\" min=\"5\" max=\"10\" step=\"1\">",
        "try {\nBlock of code to try\n}\ncatch(err) {\nBlock of code to handle errors\n}\nfinally {\nBlock of code to be executed regardless of the try / catch result\n}",
        "function myFunction() {\nconst message = document.getElementById(\"p01\");\nmessage.innerHTML = \"\";\nlet x = document.getElementById(\"demo\").value;\ntry {\nif(x.trim() == \"\") throw \"is empty\";\nif(isNaN(x)) throw \"is not a number\";\nx = Number(x);\nif(x > 10) throw \"is too high\";\nif(x < 5) throw \"is too low\";\n}\ncatch(err) {\nmessage.innerHTML = \"Error: \" + err + \".\";\n}\nfinally {\ndocument.getElementById(\"demo\").value = \"\";\n}\n}",
        "let num = 1;\ntry {\nnum.toPrecision(500);   // A number cannot have 500 significant digits\n}\ncatch(err) {\ndocument.getElementById(\"demo\").innerHTML = err.name;\n}",
        "let x = 5;\ntry {\nx = y + 1;   // y cannot be used (referenced)\n}\ncatch(err) {\ndocument.getElementById(\"demo\").innerHTML = err.name;\n}",
        "try {\neval(\"alert('Hello)\");   // Missing ' will produce an error\n}\ncatch(err) {\ndocument.getElementById(\"demo\").innerHTML = err.name;\n}",
        "let num = 1;\ntry {\nnum.toUpperCase();   // You cannot convert a number to upper case\n}\ncatch(err) {\ndocument.getElementById(\"demo\").innerHTML = err.name;\n}",
        "try {\ndecodeURI(\"%%%\");   // You cannot URI decode percent signs\n}\ncatch(err) {\ndocument.getElementById(\"demo\").innerHTML = err.name;\n}",
        "try",
        "catch",
        "finally",
        "throw",
        "String",
        "Number",
        "Boolean",
        "Object",
        "EvalError",
        "RangeError",
        "ReferenceError",
        "SyntaxError",
        "TypeError",
        "URIError"
      ]
    },
    {
      "title": "JavaScript Debugging",
      "summary": "Errors can (will) happen, every time you write some new computer code.\nCode Debugging\nProgramming code might contain syntax errors, or logical errors.\nMany of these errors are difficult to diagnose.\nOften, when programming code contains errors, nothing will happen. There are no error messages, and you will get no indications where to search for errors.\nSearching for (and fixing) errors in programming code is called code debugging.\nJavaScript Debuggers\nDebugging is not easy. But fortunately, all modern browsers have a built-in JavaScript debugger.\nBuilt-in debuggers can be turned on and off, forcing errors to be reported to the user.\nWith a debugger, you can also set breakpoints (places where code execution can be stopped), and examine variables while the code is executing.\nNormally (otherwise follow the steps at the bottom of this page), you activate debugging in your browser with the F12 key, and select \"Console\" in the debugger menu.\nThe console.log() Method\nIf your browser supports debugging, you can use console.log() to display JavaScript values in the debugger window:\nExample\nTip: Read more about the console.log() method in our JavaScript Console Reference.\nSetting Breakpoints\nIn the debugger window, you can set breakpoints in the JavaScript code.\nAt each breakpoint, JavaScript will stop executing, and let you examine JavaScript values.\nAfter examining values, you can resume the execution of code (typically with a play button).\nREMOVE ADS\nThe debugger Keyword\nThe debugger keyword stops the execution of JavaScript, and calls (if available) the debugging function.\nThis has the same function as setting a breakpoint in the debugger.\nIf no debugging is available, the debugger statement has no effect.\nWith the debugger turned on, this code will stop executing before it executes the third line.\nExample\nMajor Browsers' Debugging Tools\nNormally, you activate debugging in your browser with F12, and select \"Console\" in the debugger menu.\nOtherwise follow these steps:\nChrome\nOpen the browser.\nFrom the menu, select \"More tools\".\nFrom tools, choose \"Developer tools\".\nFinally, select Console.\nFirefox\nOpen the browser.\nFrom the menu, select \"Web Developer\".\nFinally, select \"Web Console\".\nEdge\nOpen the browser.\nFrom the menu, select \"Developer Tools\".\nFinally, select \"Console\".\nOpera\nOpen the browser.\nFrom the menu, select \"Developer\".\nFrom \"Developer\", select \"Developer tools\".\nFinally, select \"Console\".\nSafari\nGo to Safari, Preferences, Advanced in the main menu.\nCheck \"Enable Show Develop menu in menu bar\".\nWhen the new option \"Develop\" appears in the menu:\nChoose \"Show Error Console\".\nDid You Know?\nDebugging is the process of testing, finding, and reducing bugs (errors) in computer programs.\nThe first known computer bug was a real bug (an insect) stuck in the electronics.",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<body>\n\n<h1>My First Web Page</h1>\n\n<script>\na = 5;\nb = 6;\nc = a + b;\nconsole.log(c);\n</script>\n\n</body>\n</html>",
        "let x = 15 * 5;\ndebugger;\ndocument.getElementById(\"demo\").innerHTML = x;",
        "console.log()",
        "debugger"
      ]
    },
    {
      "title": "JavaScript Events",
      "summary": "HTML events are \"things\" that happen to HTML elements.\nWhen JavaScript is used in HTML pages, JavaScript can \"react\" on these events.\nHTML Events\nAn HTML event can be something the browser does, or something a user does.\nHere are some examples of HTML events:\nAn HTML web page has finished loading\nAn HTML input field was changed\nAn HTML button was clicked\nOften, when events happen, you may want to do something.\nJavaScript lets you execute code when events are detected.\nHTML allows event handler attributes, with JavaScript code, to be added to HTML elements.\nWith single quotes:\nWith double quotes:\nIn the following example, an onclick attribute (with code), is added to a <button> element:\nExample\nIn the example above, the JavaScript code changes the content of the element with id=\"demo\".\nIn the next example, the code changes the content of its own element (using this.innerHTML):\nExample\nJavaScript code is often several lines long. It is more common to see event attributes calling functions:\nExample\nREMOVE ADS\nCommon HTML Events\nHere is a list of some common HTML events:\nThe list is much longer: W3Schools JavaScript Reference HTML DOM Events.\nJavaScript Event Handlers\nEvent handlers can be used to handle and verify user input, user actions, and browser actions:\nThings that should be done every time a page loads\nThings that should be done when the page is closed\nAction that should be performed when a user clicks a button\nContent that should be verified when a user inputs data\nAnd more ...\nMany different methods can be used to let JavaScript work with events:\nHTML event attributes can execute JavaScript code directly\nHTML event attributes can call JavaScript functions\nYou can assign your own event handler functions to HTML elements\nYou can prevent events from being sent or being handled\nAnd more ...\nYou will learn a lot more about events and event handlers in the HTML DOM chapters.",
      "examples": [
        "<element event='some JavaScript'>",
        "<element event=\"some JavaScript\">",
        "<button onclick=\"document.getElementById('demo').innerHTML = Date()\">The time is?</button>",
        "<button onclick=\"this.innerHTML = Date()\">The time is?</button>",
        "<button onclick=\"displayDate()\">The time is?</button>",
        "onclick",
        "<button>",
        "this.innerHTML"
      ]
    },
    {
      "title": "JavaScript Control Flow",
      "summary": "Control Flow is the order in which statements are executed in a program.\nBy default, JavaScript runs code from top to bottom and left to right.\nControl flow statements let you change that order, based on conditions, loops or keywords.\nDefault Flow\nDefault flow executes code sequentially (from top to bottom / from left to right).\nExample\nFlow sequentially: let x → let y → let z.\nConditional Control Flow\nConditions let you make decisions using:\nif\nif...else\nswitch\nternary (? :)\nExample\nFlow branches depending on conditions:\nLoops (Repetition Control Flow)\nLoops let you run code multiple times using:\nfor\nwhile\ndo...while\nExample\nRepeat flow until a condition (i < 5) is false.\nJump Statements\nJump statements let you change the flow abruptly using:\nbreak - exits a loop or switch\ncontinue - skips the current loop iteration\nreturn - exits from a function\nthrow - jumps to error handling\nExample\nTerminate (break) the loop when the loop counter (i) is 3:\nREMOVE ADS\nFunction Flow\nFunctions are callable and reusable code blocks:\nExample\nFunction to compute the product of two numbers:\nAsyncronus Flow\nCallbacks, Promises, and async/await handle asynchronous flow (events, network calls):\nExample\nFunction to compute the product of two numbers:",
      "examples": [
        "let x = 5;\nlet y = 6;\nlet z = x + y;",
        "let text = \"Unknown\";\n\nif (age >= 18) {\ntext = \"Adult\";\n} else {\ntext = \"Minor\";\n}",
        "for (let i = 0; i < 5; i++) {\ntext += \"The number is \" + i + \"<br>\";\n}",
        "for (let i = 0; i < 10; i++) {\nif (i === 3) { break; }\ntext += \"The number is \" + i + \"<br>\";\n}",
        "function myFunction(p1, p2) {\nreturn p1 * p2;\n}",
        "async function fetchData() {\nlet data = await fetch(\"https://api.example.com/data\");\n// code to execute\n}"
      ]
    },
    {
      "title": "JavaScript Scope",
      "summary": "Scope = Visibility\nScope determines the accessibility (visibility) of variables.\nJavaScript variables have 3 types of scope:\nGlobal scope\nFunction scope\nBlock scope\nGlobal Scope\nVariables declared Globally (outside any block or function) have Global Scope.\nGlobal variables can be accessed from anywhere in a JavaScript program.\nVariables declared with var, let and const are quite similar when declared outside a block.\nThey all have Global Scope:\nExample\nA variable declared outside a function, becomes GLOBAL.\nGlobal variables has Global Scope:\nAll scripts and functions in the same web page can access a variable with global scope.\nFunction Scope\nEach JavaScript function have their own scope.\nVariables defined inside a function are not accessible (visible) from outside the function.\nVariables declared with var, let and const are quite similar when declared inside a function.\nThey all have Function Scope:\nExample\nVariables declared within a JavaScript function, are LOCAL to the function:\nLocal Variables has Function Scope\nThey can only be accessed from within the function\nNo scripts or functions outside the function can access them\nVariables with the same name can be used outside the function\nVariables with the same name can be used in different functions\nLocal variables are created when a function starts\nLocal variables are deleted when the function is completed\nArguments (parameters) work as local variables inside functions\nBlock Scope\nBefore ES6, JavaScript variables could only have Global Scope or Function Scope.\nES6 introduced two important new JavaScript keywords: let and const.\nThese two keywords provide Block Scope in JavaScript.\nVariables declared with let and const inside a code block are \"block-scoped,\" meaning they are only accessible within that block.\nThis helps prevent unintended variable overwrites and promotes better code organization:\nExample\nVariables declared with the var keyword can NOT have block scope.\nVariables declared with the var keyword, inside a { } block; can be accessed from outside the block.\nExample (Not Recommended)\nREMOVE ADS\nAutomatically Global\nIf you assign a value to a variable that has not been declared, it will become a GLOBAL variable.\nThis code example will declare a global variable carName, even if the value is assigned inside a function.\nExample\nStrict Mode\nAll modern browsers support running JavaScript in \"Strict Mode\".\nIn \"Strict Mode\", undeclared variables are not automatically global.\nGlobal Variables in HTML\nWith JavaScript, the global scope is the JavaScript environment.\nIn HTML, the global scope is the window object.\nGlobal variables defined with the var keyword belong to the window object:\nExample (Not Recommended)\nGlobal variables defined with the let keyword do not belong to the window object:\nExample\nWarning\nDo NOT create global variables unless you intend to.\nYour global variables (or functions) can overwrite window variables (or functions).\nAny function, including the window object, can overwrite your global variables and functions.\nThe Lifetime of JavaScript Variables\nThe lifetime of a JavaScript variable starts when it is declared.\nFunction (local) variables are deleted when the function is completed.\nIn a web browser, global variables are deleted when you close the browser window (or tab).",
      "examples": [
        "var x = 1;    // Global scope\n\nlet y = 2;    // Global scope\n\nconst z = 3;  // Global scope",
        "let carName = \"Volvo\";\n// code here can use carName\n\nfunction myFunction() {\n// code here can also use carName\n}",
        "function myFunction1() {\nvar carName = \"Volvo\";  // Function Scope\n}\n\nfunction myFunction2() {\nlet carName = \"Volvo\";  // Function Scope\n}\n\nfunction myFunction3() {\nconst carName = \"Volvo\";  // Function Scope\n}",
        "// code here can NOT use carName\n\nfunction myFunction() {\nlet carName = \"Volvo\";\n// code here CAN use carName\n}\n\n// code here can NOT use carName",
        "{\nlet x = 2;\n}\n// x can NOT be used here",
        "{\nvar x = 2;\n}\n// x CAN be used here",
        "myFunction();\n\n// code here can use carName\n\nfunction myFunction() {\ncarName = \"Volvo\";\n}",
        "var carName = \"Volvo\";\n// code here can use window.carName",
        "let carName = \"Volvo\";\n// code here can NOT use window.carName",
        "var",
        "let",
        "const",
        "carName"
      ]
    },
    {
      "title": "JavaScript Hoisting",
      "summary": "Hoisting is JavaScript's default behavior of moving declarations to the top.\nJavaScript Declarations are Hoisted\nIn JavaScript, a variable can be declared after it has been used.\nIn other words; a variable can be used before it has been declared.\nExample 1 gives the same result as Example 2:\nExample 1\nExample 2\nTo understand this, you have to understand the term \"hoisting\".\nHoisting is JavaScript's default behavior of moving all declarations to the top of the current scope (to the top of the current script or the current function).\nThe let and const Keywords\nVariables defined with let and const are hoisted to the top of the block, but not initialized.\nMeaning: The block of code is aware of the variable, but it cannot be used until it has been declared.\nUsing a let variable before it is declared will result in a ReferenceError.\nThe variable is in a \"temporal dead zone\" from the start of the block until it is declared:\nExample\nUsing a const variable before it is declared, is a syntax error, so the code will simply not run.\nExample\nThis code will not run.\nRead more about let and const in JS Let / Const.\nREMOVE ADS\nJavaScript Initializations are Not Hoisted\nJavaScript only hoists declarations, not initializations.\nExample 1 does not give the same result as Example 2:\nExample 1\nExample 2\nDoes it make sense that y is undefined in the last example?\nThis is because only the declaration (var y), not the initialization (=7) is hoisted to the top.\nBecause of hoisting, y has been declared before it is used, but because initializations are not hoisted, the value of y is undefined.\nExample 2 is the same as writing:\nExample\nDeclare Your Variables At the Top !\nHoisting is (to many developers) an unknown or overlooked behavior of JavaScript.\nIf a developer doesn't understand hoisting, programs may contain bugs (errors).\nTo avoid bugs, always declare all variables at the beginning of every scope.\nSince this is how JavaScript interprets the code, it is always a good rule.\nJavaScript in strict mode does not allow variables to be used if they are not declared.\nStudy \"use strict\" in the next chapter.",
      "examples": [
        "x = 5; // Assign 5 to x\n\nelem = document.getElementById(\"demo\"); // Find an element\nelem.innerHTML = x;                     // Display x in the element\n\nvar x; // Declare x",
        "var x; // Declare x\nx = 5; // Assign 5 to x\n\nelem = document.getElementById(\"demo\"); // Find an element\nelem.innerHTML = x;                     // Display x in the element",
        "carName = \"Volvo\";\nlet carName;",
        "carName = \"Volvo\";\nconst carName;",
        "var x = 5; // Initialize x\nvar y = 7; // Initialize y\n\nelem = document.getElementById(\"demo\"); // Find an element\nelem.innerHTML = x + \" \" + y;           // Display x and y",
        "var x = 5; // Initialize x\n\nelem = document.getElementById(\"demo\"); // Find an element\nelem.innerHTML = x + \" \" + y;           // Display x and y\n\nvar y = 7; // Initialize y",
        "var x = 5; // Initialize x\nvar y;     // Declare y\n\nelem = document.getElementById(\"demo\"); // Find an element\nelem.innerHTML = x + \" \" + y;           // Display x and y\n\ny = 7;    // Assign 7 to y",
        "let",
        "const",
        "ReferenceError"
      ]
    },
    {
      "title": "JavaScript Use Strict",
      "summary": "The \"use strict\" Directive\nThe \"use strict\" directive was new in ECMAScript version 5.\nIt defines that JavaScript code should be executed in \"strict mode\".\nIt is not a statement. It is a literal expression, ignored by earlier versions of JavaScript.\nThe purpose of \"use strict\" is to indicate that the code should be executed in \"strict mode\".\nWith strict mode, you can not, for example, use undeclared variables.\nDeclaring Strict Mode\nStrict mode is declared by adding \"use strict\"; to the beginning of a script or a function.\nDeclared at the beginning of a script, it has global scope (all code in the script will execute in strict mode):\nExample\nExample\nDeclared inside a function, it has local scope (only the code inside the function is in strict mode):\nREMOVE ADS\nThe \"use strict\"; Syntax\nThe syntax, for declaring strict mode, was designed to be compatible with older versions of JavaScript.\nCompiling a numeric literal (4 + 5;) or a string literal (\"John Doe\";) in a JavaScript program has no side effects. It simply compiles to a non existing variable and dies.\nSo \"use strict\"; only matters to new compilers that \"understand\" the meaning of it.\nWhy Strict Mode?\nStrict mode makes it easier to write \"secure\" JavaScript.\nStrict mode changes previously accepted \"bad syntax\" into real errors.\nAs an example, in normal JavaScript, mistyping a variable name creates a new global variable. In strict mode, this will throw an error, making it impossible to accidentally create a global variable.\nIn normal JavaScript, a developer will not receive any error feedback assigning values to non-writable properties.\nIn strict mode, any assignment to a non-writable property, a getter-only property, a non-existing property, a non-existing variable, or a non-existing object, will throw an error.\nNot Allowed in Strict Mode\nUsing a variable, without declaring it, is not allowed:\nTry it Yourself »\nObjects are variables too.\nUsing an object, without declaring it, is not allowed:\nTry it Yourself »\nDeleting a variable (or object) is not allowed.\nTry it Yourself »\nDeleting a function is not allowed.\nTry it Yourself »\nDuplicating a parameter name is not allowed:\nTry it Yourself »\nOctal numeric literals are not allowed:\nTry it Yourself »\nOctal escape characters are not allowed:\nTry it Yourself »\nWriting to a read-only property is not allowed:\nTry it Yourself »\nWriting to a get-only property is not allowed:\nTry it Yourself »\nDeleting an undeletable property is not allowed:\nTry it Yourself »\nThe word eval cannot be used as a variable:\nTry it Yourself »\nThe word arguments cannot be used as a variable:\nTry it Yourself »\nThe with statement is not allowed:\nTry it Yourself »\nFor security reasons, eval() is not allowed to create variables in the scope from which it was called.\nIn strict mode, a variable can not be used before it is declared:\nTry it Yourself »\nIn strict mode, eval() can not declare a variable using the var keyword:\nTry it Yourself »\neval() can not declare a variable using the let keyword:\nTry it Yourself »\nThe this keyword in functions behaves differently in strict mode.\nThe this keyword refers to the object that called the function.\nIf the object is not specified, functions in strict mode will return undefined and functions in normal mode will return the global object (window):\nTry it Yourself »\nFuture Proof!\nKeywords reserved for future JavaScript versions can NOT be used as variable names in strict mode.\nThese are:\nimplements\ninterface\nlet\npackage\nprivate\nprotected\npublic\nstatic\nyield\nTry it Yourself »\nWatch Out!\nThe \"use strict\" directive is only recognized at the beginning of a script or a function.",
      "examples": [
        "\"use strict\";\nx = 3.14;       // This will cause an error because x is not declared",
        "\"use strict\";\nmyFunction();\n\nfunction myFunction() {\ny = 3.14;   // This will also cause an error because y is not declared\n}",
        "x = 3.14;       // This will not cause an error.\nmyFunction();\n\nfunction myFunction() {\n\"use strict\";\ny = 3.14;   // This will cause an error\n}",
        "\"use strict\";\nx = 3.14;                // This will cause an error",
        "\"use strict\";\nx = {p1:10, p2:20};      // This will cause an error",
        "\"use strict\";\nlet x = 3.14;\ndelete x;                // This will cause an error",
        "\"use strict\";\nfunction x(p1, p2) {};\ndelete x;                // This will cause an error",
        "\"use strict\";\nfunction x(p1, p1) {};   // This will cause an error",
        "\"use strict\";\nlet x = 010;             // This will cause an error",
        "\"use strict\";\nlet x = \"\\010\";            // This will cause an error",
        "\"use strict\";\nconst obj = {};\nObject.defineProperty(obj, \"x\", {value:0, writable:false});\n\nobj.x = 3.14;            // This will cause an error",
        "\"use strict\";\nconst obj = {get x() {return 0} };\n\nobj.x = 3.14;            // This will cause an error",
        "\"use strict\";\ndelete Object.prototype; // This will cause an error",
        "\"use strict\";\nlet eval = 3.14;         // This will cause an error",
        "\"use strict\";\nlet arguments = 3.14;    // This will cause an error",
        "\"use strict\";\nwith (Math){x = cos(2)}; // This will cause an error",
        "\"use strict\";\neval (\"x = 2\");\nalert (x);      // This will cause an error",
        "\"use strict\";\neval (\"var x = 2\");\nalert (x);    // This will cause an error",
        "eval (\"let x = 2\");\nalert (x);        // This will cause an error",
        "\"use strict\";\nfunction myFunction() {\nalert(this); // will alert \"undefined\"\n}\nmyFunction();",
        "\"use strict\";\nlet public = 1500;      // This will cause an error",
        "\"use strict\"",
        "\"use strict\";",
        "eval",
        "arguments",
        "with",
        "eval()",
        "this",
        "undefined"
      ]
    },
    {
      "title": "JavaScript Code Blocks",
      "summary": "Curly Braces\nA code block or block statement is a group of statements enclosed within curly braces { }.\nCode blocks are important for controlling the flow of execution and defining variable scope within a JavaScript program.\nCode Blocks Statments\nCode blocks allows for multiple statements to be treated as a single unit.\nThe body of a JavaScript function is always enclosed within a code block:\nExample\nTry it Yourself »\nCode blocks are essential for if statements:\nExample\nTry it Yourself »\nCode blocks are essential for loop statements:\nExample\nTry it Yourself »\nExample\nTry it Yourself »\nDefining Scope\nVariables declared with let and const inside a code block are \"block-scoped,\" meaning they are only accessible within that specific block.\nThis helps prevent unintended variable overwrites and promotes better code organization:\nExample\nTry it Yourself »\nStandalone Blocks\nCode blocks can also exist independently without being attached to an if statement, a function or a loop.\nThis can be used to create a scope for let and const variables.\nExample\nThis example above demonstrates how a standalone block can be used to limit the scope of variables.\nEncapsulation\nVariables inside the block are only available in the block.\nThis prevents \"polluting\" the global scope, keeps the code clean, and reduces the risk of name collisions.\nTemporary Use\nIf you only need variables for a calculation, a block lets you declare them, use them, and discard them.\nOrganized Code\nYou can group related variables and statements in their own scope to avoid accidental name conflict without forcing them into a function or an object.\nThis improves readability and avoids accidental name conflictre-use of variable names outside the block.",
      "examples": [
        "function myFunction() {\n// This is a code block\n}",
        "if (condition) {\n// This is a code block\n} else {\n// This is a code block\n}",
        "for (expression 1; expression 2; expression 3) {\n// This is a code block\n}",
        "while (condition) {\n// This is a code block\n}",
        "{\nlet x = 10;\n// x is accessible here\n}\n\n// x is not accessible here",
        "{\nlet x = 10;\nlet y = 100;\nlet areal = x * y;\n}",
        "let",
        "const"
      ]
    },
    {
      "title": "JavaScript Style Guide JavaScript Coding Conventions",
      "summary": "Always use the same coding conventions for all your JavaScript projects.\nCoding conventions are style guidelines for programming. They typically cover:\nNaming and declaration rules for variables and functions.\nRules for the use of white space, indentation, and comments.\nProgramming practices and principles.\nCoding conventions secure quality:\nImprove code readability\nMake code maintenance easier\nCoding conventions can be documented rules for teams to follow, or just be your individual coding practice.\nThis page describes the general JavaScript code conventions used by W3Schools.\nYou should also read the next chapter \"Best Practices\", and learn how to avoid coding pitfalls.\nVariable Names\nAt W3schools we use camelCase for identifier names (variables and functions).\nAll names start with a letter.\nAt the bottom of this page, you will find a wider discussion about naming rules.\nSpaces Around Operators\nAlways put spaces around operators ( = + - * / ), and after commas:\nExamples:\nREMOVE ADS\nCode Indentation\nAlways use 2 spaces for indentation of code blocks:\nFunctions:\nDo not use tabs (tabulators) for indentation. Different editors interpret tabs differently.\nStatement Rules\nGeneral rules for simple statements:\nAlways end a simple statement with a semicolon.\nExamples:\nGeneral rules for complex (compound) statements:\nPut the opening bracket at the end of the first line.\nUse one space before the opening bracket.\nPut the closing bracket on a new line, without leading spaces.\nDo not end a complex statement with a semicolon.\nFunctions:\nLoops:\nConditionals:\nObject Rules\nGeneral rules for object definitions:\nPlace the opening bracket on the same line as the object name.\nUse colon plus one space between each property and its value.\nUse quotes around string values, not around numeric values.\nDo not add a comma after the last property-value pair.\nPlace the closing bracket on a new line, without leading spaces.\nAlways end an object definition with a semicolon.\nExample\nShort objects can be written compressed, on one line, using spaces only between properties, like this:\nLine Length < 80\nFor readability, avoid lines longer than 80 characters.\nIf a JavaScript statement does not fit on one line, the best place to break it, is after an operator or a comma.\nExample\nNaming Conventions\nAlways use the same naming convention for all your code. For example:\nVariable and function names written as camelCase\nGlobal variables written in UPPERCASE (We don't, but it's quite common)\nConstants (like PI) written in UPPERCASE\nShould you use hyp-hens, camelCase, or under_scores in variable names?\nThis is a question programmers often discuss. The answer depends on who you ask:\nHyphens in HTML and CSS:\nHTML5 attributes can start with data- (data-quantity, data-price).\nCSS uses hyphens in property-names (font-size).\nHyphens can be mistaken as subtraction attempts. Hyphens are not allowed in JavaScript names.\nUnderscores:\nMany programmers prefer to use underscores (date_of_birth), especially in SQL databases.\nUnderscores are often used in PHP documentation.\nPascalCase:\nPascalCase is often preferred by C programmers.\ncamelCase:\ncamelCase is used by JavaScript itself, by jQuery, and other JavaScript libraries.\nDo not start names with a $ sign. It will put you in conflict with many JavaScript library names.\nLoading JavaScript in HTML\nUse simple syntax for loading external scripts (the type attribute is not necessary):\nAccessing HTML Elements\nA consequence of using \"untidy\" HTML styles, might result in JavaScript errors.\nThese two JavaScript statements will produce different results:\nIf possible, use the same naming convention (as JavaScript) in HTML.\nVisit the HTML Style Guide.\nFile Extensions\nHTML files should have a .html extension (.htm is allowed).\nCSS files should have a .css extension.\nJavaScript files should have a .js extension.\nUse Lower Case File Names\nMost web servers (Apache, Unix) are case sensitive about file names:\nlondon.jpg cannot be accessed as London.jpg.\nOther web servers (Microsoft, IIS) are not case sensitive:\nlondon.jpg can be accessed as London.jpg or london.jpg.\nIf you use a mix of upper and lower case, you have to be extremely consistent.\nIf you move from a case insensitive, to a case sensitive server, even small errors can break your web site.\nTo avoid these problems, always use lower case file names (if possible).\nPerformance\nCoding conventions are not used by computers. Most rules have little impact on the execution of programs.\nIndentation and extra spaces are not significant in small scripts.\nFor code in development, readability should be preferred. Larger production scripts should be minimized.",
      "examples": [
        "firstName = \"John\";\nlastName = \"Doe\";\n\nprice = 19.90;\ntax = 0.20;\n\nfullPrice = price + (price * tax);",
        "let x = y + z;\nconst myArray = [\"Volvo\", \"Saab\", \"Fiat\"];",
        "function toCelsius(fahrenheit) {\nreturn (5 / 9) * (fahrenheit - 32);\n}",
        "const cars = [\"Volvo\", \"Saab\", \"Fiat\"];\n\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};",
        "for (let i = 0; i < 5; i++) {\nx += i;\n}",
        "if (time < 20) {\ngreeting = \"Good day\";\n} else {\ngreeting = \"Good evening\";\n}",
        "const person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};",
        "const person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};",
        "document.getElementById(\"demo\").innerHTML =\n\"Hello Dolly.\";",
        "<script src=\"myscript.js\"></script>",
        "const obj = getElementById(\"Demo\")\n\nconst obj = getElementById(\"demo\")"
      ]
    },
    {
      "title": "JavaScript Best Practices",
      "summary": "Avoid global variables, avoid new, avoid ==, avoid eval()\nAvoid Global Variables\nMinimize the use of global variables.\nThis includes all data types, objects, and functions.\nGlobal variables and functions can be overwritten by other scripts.\nUse local variables instead, and learn how to use closures.\nAlways Declare Local Variables\nAll variables used in a function should be declared as local variables.\nLocal variables must be declared with the var, the let, or the const keyword, otherwise they will become global variables.\nStrict mode does not allow undeclared variables.\nDeclarations on Top\nIt is a good coding practice to put all declarations at the top of each script or function.\nThis will:\nGive cleaner code\nProvide a single place to look for local variables\nMake it easier to avoid unwanted (implied) global variables\nReduce the possibility of unwanted re-declarations\nThis also goes for loop variables:\nREMOVE ADS\nInitialize Variables\nIt is a good coding practice to initialize variables when you declare them.\nThis will:\nGive cleaner code\nProvide a single place to initialize variables\nAvoid undefined values\nInitializing variables provides an idea of the intended use (and intended data type).\nRe-Declaring JavaScript Variables\nIf you re-declare a JavaScript variable declared with var, it will not lose its value.\nThe variable carName will still have the value \"Volvo\" after the execution of these statements:\nExample (Not Recommended)\nYou cannot re-declare a variable declared with let or const.\nExamples\nThis will not work:\nThis will not work:\nDeclare Objects with const\nDeclaring objects with const will prevent any accidental change of type:\nExample\nDeclare Arrays with const\nDeclaring arrays with const will prevent any accidential change of type:\nExample\nDon't Use new Object()\nUse \"\" instead of new String()\nUse 0 instead of new Number()\nUse false instead of new Boolean()\nUse {} instead of new Object()\nUse [] instead of new Array()\nUse /()/ instead of new RegExp()\nUse function (){} instead of new Function()\nExample\nBeware of Automatic Type Conversions\nJavaScript is loosely typed.\nA variable can contain all data types.\nA variable can change its data type:\nExample\nBeware that numbers can accidentally be converted to strings or NaN (Not a Number).\nWhen doing mathematical operations, JavaScript can convert numbers to strings:\nExample\nSubtracting a string from a string, does not generate an error but returns NaN (Not a Number):\nExample\nUse === Comparison\nThe == comparison operator always converts (to matching types) before comparison.\nThe === operator forces comparison of values and type:\nExample\nUse Parameter Defaults\nIf a function is called with a missing argument, the value of the missing argument is set to undefined.\nUndefined values can break your code. It is a good habit to assign default values to arguments.\nExample\nECMAScript 2015 allows default parameters in the function definition:\nRead more about function parameters and arguments at Function Parameters\nEnd Your Switches with Defaults\nAlways end your switch statements with a default. Even if you think there is no need for it.\nExample\nAvoid Number, String, and Boolean as Objects\nAlways treat numbers, strings, or booleans as primitive values. Not as objects.\nDeclaring these types as objects, slows down execution speed, and produces nasty side effects:\nExample\nOr even worse:\nExample\nAvoid Using eval()\nThe eval() function is used to run text as code. In almost all cases, it should not be necessary to use it.\nBecause it allows arbitrary code to be run, it also represents a security problem.",
      "examples": [
        "// Declare at the beginning\nlet firstName, lastName, price, discount, fullPrice;\n\n// Use later\nfirstName = \"John\";\nlastName = \"Doe\";\n\nprice = 19.90;\ndiscount = 0.10;\n\nfullPrice = price - discount;",
        "for (let i = 0; i < 5; i++) {",
        "// Declare and initiate at the beginning\nlet firstName = \"\";\nlet lastName = \"\";\nlet price = 0;\nlet discount = 0;\nlet fullPrice = 0,\nconst myArray = [];\nconst myObject = {};",
        "var carName = \"Volvo\";\nvar carName;",
        "let carName = \"Volvo\";\nlet carName;",
        "const carName = \"Volvo\";\nconst carName;",
        "let car = {type:\"Fiat\", model:\"500\", color:\"white\"};\ncar = \"Fiat\";      // Changes object to string",
        "const car = {type:\"Fiat\", model:\"500\", color:\"white\"};\ncar = \"Fiat\";      // Not possible",
        "let cars = [\"Saab\", \"Volvo\", \"BMW\"];\ncars = 3;    // Changes array to number",
        "const cars = [\"Saab\", \"Volvo\", \"BMW\"];\ncars = 3;    // Not possible",
        "let x1 = \"\";             // new primitive string\nlet x2 = 0;              // new primitive number\nlet x3 = false;          // new primitive boolean\nconst x4 = {};           // new object\nconst x5 = [];           // new array object\nconst x6 = /()/;         // new regexp object\nconst x7 = function(){}; // new function object",
        "let x = \"Hello\";     // typeof x is a string\nx = 5;               // changes typeof x to a number",
        "let x = 5 + 7;       // x.valueOf() is 12,  typeof x is a number\nlet x = 5 + \"7\";     // x.valueOf() is 57,  typeof x is a string\nlet x = \"5\" + 7;     // x.valueOf() is 57,  typeof x is a string\nlet x = 5 - 7;       // x.valueOf() is -2,  typeof x is a number\nlet x = 5 - \"7\";     // x.valueOf() is -2,  typeof x is a number\nlet x = \"5\" - 7;     // x.valueOf() is -2,  typeof x is a number\nlet x = 5 - \"x\";     // x.valueOf() is NaN, typeof x is a number",
        "\"Hello\" - \"Dolly\"    // returns NaN",
        "0 == \"\";        // true\n1 == \"1\";       // true\n1 == true;      // true\n\n0 === \"\";       // false\n1 === \"1\";      // false\n1 === true;     // false",
        "function myFunction(x, y) {\nif (y === undefined) {\ny = 0;\n}\n}",
        "function (a=1, b=1) { /*function code*/ }",
        "switch (new Date().getDay()) {\ncase 0:\nday = \"Sunday\";\nbreak;\ncase 1:\nday = \"Monday\";\nbreak;\ncase 2:\nday = \"Tuesday\";\nbreak;\ncase 3:\nday = \"Wednesday\";\nbreak;\ncase 4:\nday = \"Thursday\";\nbreak;\ncase 5:\nday = \"Friday\";\nbreak;\ncase 6:\nday = \"Saturday\";\nbreak;\ndefault:\nday = \"Unknown\";\n}",
        "let x = \"John\";\nlet y = new String(\"John\");\n(x === y) // is false because x is a string and y is an object.",
        "let x = new String(\"John\");\nlet y = new String(\"John\");\n(x == y) // is false because you cannot compare objects.",
        "new",
        "==",
        "eval()",
        "var",
        "let",
        "const",
        "carName",
        "\"\"",
        "new String()",
        "0",
        "new Number()",
        "false",
        "new Boolean()",
        "{}",
        "new Object()",
        "[]",
        "new Array()",
        "/()/",
        "new RegExp()",
        "function (){}",
        "new Function()",
        "NaN",
        "===",
        "undefined",
        "switch",
        "default"
      ]
    },
    {
      "title": "JavaScript Common Mistakes",
      "summary": "This chapter points out some common JavaScript mistakes.\nAccidentally Using the Assignment Operator\nJavaScript programs may generate unexpected results if a programmer accidentally uses an assignment operator (=), instead of a comparison operator (==) in an if statement.\nThis if statement returns false (as expected) because x is not equal to 10:\nThis if statement returns true (maybe not as expected), because 10 is true:\nThis if statement returns false (maybe not as expected), because 0 is false:\nAn assignment always returns the value of the assignment.\nExpecting Loose Comparison\nIn regular comparison, data type does not matter. This if statement returns true:\nIn strict comparison, data type does matter. This if statement returns false:\nIt is a common mistake to forget that switch statements use strict comparison:\nThis case switch will display an alert:\nThis case switch will not display an alert:\nREMOVE ADS\nConfusing Addition & Concatenation\nAddition is about adding numbers.\nConcatenation is about adding strings.\nIn JavaScript both operations use the same + operator.\nBecause of this, adding a number as a number will produce a different result from adding a number as a string:\nWhen adding two variables, it can be difficult to anticipate the result:\nMisunderstanding Floats\nAll numbers in JavaScript are stored as 64-bits Floating point numbers (Floats).\nAll programming languages, including JavaScript, have difficulties with precise floating point values:\nTo solve the problem above, it helps to multiply and divide:\nExample\nBreaking a JavaScript String\nJavaScript will allow you to break a statement into two lines:\nExample 1\nBut, breaking a statement in the middle of a string will not work:\nExample 2\nYou must use a \"backslash\" if you must break a statement in a string:\nExample 3\nMisplacing Semicolon\nBecause of a misplaced semicolon, this code block will execute regardless of the value of x:\nBreaking a Return Statement\nIt is a default JavaScript behavior to close a statement automatically at the end of a line.\nBecause of this, these two examples will return the same result:\nExample 1\nExample 2\nJavaScript will also allow you to break a statement into two lines.\nBecause of this, example 3 will also return the same result:\nExample 3\nBut, what will happen if you break the return statement in two lines like this:\nExample 4\nThe function will return undefined!\nWhy? Because JavaScript thought you meant:\nExample 5\nExplanation\nIf a statement is incomplete like:\nJavaScript will try to complete the statement by reading the next line:\nBut since this statement is complete:\nJavaScript will automatically close it like this:\nThis happens because closing (ending) statements with semicolon is optional in JavaScript.\nJavaScript will close the return statement at the end of the line, because it is a complete statement.\nNever break a return statement.\nAccessing Arrays with Named Indexes\nMany programming languages support arrays with named indexes.\nArrays with named indexes are called associative arrays (or hashes).\nJavaScript does not support arrays with named indexes.\nIn JavaScript, arrays use numbered indexes:\nExample\nIn JavaScript, objects use named indexes.\nIf you use a named index, when accessing an array, JavaScript will redefine the array to a standard object.\nAfter the automatic redefinition, array methods and properties will produce undefined or incorrect results:\nExample:\nEnding Definitions with a Comma\nTrailing commas in object and array definition are legal in ECMAScript 5.\nObject Example:\nArray Example:\nWARNING !!\nInternet Explorer 8 will crash.\nJSON does not allow trailing commas.\nJSON:\nJSON:\nUndefined is Not Null\nJavaScript objects, variables, properties, and methods can be undefined.\nIn addition, empty JavaScript objects can have the value null.\nThis can make it a little bit difficult to test if an object is empty.\nYou can test if an object exists by testing if the type is undefined:\nExample:\nBut you cannot test if an object is null, because this will throw an error if the object is undefined:\nIncorrect:\nTo solve this problem, you must test if an object is not null, and not undefined.\nBut this can still throw an error:\nIncorrect:\nBecause of this, you must test for not undefined before you can test for not null:\nCorrect:",
      "examples": [
        "let x = 0;\nif (x == 10)",
        "let x = 0;\nif (x = 10)",
        "let x = 0;\nif (x = 0)",
        "let x = 10;\nlet y = \"10\";\nif (x == y)",
        "let x = 10;\nlet y = \"10\";\nif (x === y)",
        "let x = 10;\nswitch(x) {\ncase 10: alert(\"Hello\");\n}",
        "let x = 10;\nswitch(x) {\ncase \"10\": alert(\"Hello\");\n}",
        "let x = 10;\nx = 10 + 5;       // Now x is 15\n\nlet y = 10;\ny += \"5\";        // Now y is \"105\"",
        "let x = 10;\nlet y = 5;\nlet z = x + y;     // Now z is 15\n\nlet x = 10;\nlet y = \"5\";\nlet z = x + y;     // Now z is \"105\"",
        "let x = 0.1;\nlet y = 0.2;\nlet z = x + y            // the result in z will not be 0.3",
        "let z = (x * 10 + y * 10) / 10;       // z will be 0.3",
        "let x =\n\"Hello World!\";",
        "let x = \"Hello\nWorld!\";",
        "let x = \"Hello \\\nWorld!\";",
        "if (x == 19);\n{\n// code block\n}",
        "function myFunction(a) {\nlet power = 10\nreturn a * power\n}",
        "function myFunction(a) {\nlet power = 10;\nreturn a * power;\n}",
        "function myFunction(a) {\nlet\npower = 10;\nreturn a * power;\n}",
        "function myFunction(a) {\nlet\npower = 10;\nreturn\na * power;\n}",
        "function myFunction(a) {\nlet\npower = 10;\nreturn;\na * power;\n}",
        "let",
        "power = 10;",
        "return",
        "return;",
        "const person = [];\nperson[0] = \"John\";\nperson[1] = \"Doe\";\nperson[2] = 46;\nperson.length;       // person.length will return 3\nperson[0];           // person[0] will return \"John\"",
        "const person = [];\nperson[\"firstName\"] = \"John\";\nperson[\"lastName\"] = \"Doe\";\nperson[\"age\"] = 46;\nperson.length;      // person.length will return 0\nperson[0];          // person[0] will return undefined",
        "person = {firstName:\"John\", lastName:\"Doe\", age:46,}",
        "points = [40, 100, 1, 5, 25, 10,];",
        "person = {\"firstName\":\"John\", \"lastName\":\"Doe\", \"age\":46}",
        "points = [40, 100, 1, 5, 25, 10];",
        "if (typeof myObj === \"undefined\")",
        "if (myObj === null)",
        "if (myObj !== null && typeof myObj !== \"undefined\")",
        "if (typeof myObj !== \"undefined\" && myObj !== null)",
        "=",
        "==",
        "if",
        "false",
        "true",
        "switch",
        "case switch",
        "+",
        "undefined",
        "null"
      ]
    },
    {
      "title": "JavaScript Performance",
      "summary": "How to speed up your JavaScript code.\nReduce Activity in Loops\nLoops are often used in programming.\nEach statement in a loop, including the for statement, is executed for each iteration of the loop.\nStatements or assignments that can be placed outside the loop will make the loop run faster.\nBad:\nBetter Code:\nThe bad code accesses the length property of an array each time the loop is iterated.\nThe better code accesses the length property outside the loop and makes the loop run faster.\nReduce DOM Access\nAccessing the HTML DOM is very slow, compared to other JavaScript statements.\nIf you expect to access a DOM element several times, access it once, and use it as a local variable:\nExample\nREMOVE ADS\nReduce DOM Size\nKeep the number of elements in the HTML DOM small.\nThis will always improve page loading, and speed up rendering (page display), especially on smaller devices.\nEvery attempt to search the DOM (like getElementsByTagName) will benefit from a smaller DOM.\nAvoid Unnecessary Variables\nDon't create new variables if you don't plan to save values.\nOften you can replace code like this:\nWith this:\nDelay JavaScript Loading\nPutting your scripts at the bottom of the page body lets the browser load the page first.\nWhile a script is downloading, the browser will not start any other downloads. In addition all parsing and rendering activity might be blocked.\nThe HTTP specification defines that browsers should not download more than two components in parallel.\nAn alternative is to use defer=\"true\" in the script tag. The defer attribute specifies that the script should be executed after the page has finished parsing, but it only works for external scripts.\nIf possible, you can add your script to the page by code, after the page has loaded:\nExample\nAvoid Using with\nAvoid using the with keyword. It has a negative effect on speed. It also clutters up JavaScript scopes.\nThe with keyword is not allowed in strict mode.",
      "examples": [
        "for (let i = 0; i < arr.length; i++) {",
        "let l = arr.length;\nfor (let i = 0; i < l; i++) {",
        "const obj = document.getElementById(\"demo\");\nobj.innerHTML = \"Hello\";",
        "let fullName = firstName + \" \" + lastName;\ndocument.getElementById(\"demo\").innerHTML = fullName;",
        "document.getElementById(\"demo\").innerHTML = firstName + \" \" + lastName;",
        "<script>\nwindow.onload = function() {\nconst element = document.createElement(\"script\");\nelement.src = \"myScript.js\";\ndocument.body.appendChild(element);\n};\n</script>",
        "defer=\"true\"",
        "with"
      ]
    },
    {
      "title": "JavaScript Statements",
      "summary": "Statement Identifiers\nJavaScript statements start with a statement identifier to identify the action to be performed.\nStatement identifiers are reserved words (cannot be used as variable names or any other things).\nComplete Statements Reference\nRevised July 2025\nSee Also:\nTutorial: JavaScript Statements",
      "examples": []
    },
    {
      "title": "JavaScript Reserved Words",
      "summary": "Note\nWords marked with* have been added to JavaScript from after 2015.\nYou can read more the newest JavaScript versions in JS News 2025-2015.\nRemoved Reserved Words\nREMOVE ADS\nJavaScript Objects, Properties, and Methods\nJava Reserved Words\nOther Reserved Words\nJavaScript can be used as the programming language in many applications.\nHTML Event Handlers\nIn addition you should avoid using the name of all HTML event handlers.",
      "examples": []
    },
    {
      "title": "JavaScript Operators Reference",
      "summary": "Complete Operators Reference\nJavaScript Assignment Operators\nAssignment operators assign values to JavaScript variables.\nGiven that x = 10 and y = 5, the table below explains the assignment operators:\nLogical Assignment Operators\nLearn More:\nStudy our JavaScript Assignment Tutorial.\nJavaScript Arithmetic Operators\nArithmetic operators are used to perform arithmetic between variables and/or values.\nGiven that y = 5, the table below explains the arithmetic operators:\nLearn More:\nStudy our JavaScript Arithmetic Tutorial.\nJavaScript String Operators\nThe + operator, and the += operator can also be used to concatenate (add) strings.\nGiven that t1 = \"Good \", t2 = \"Morning\", and t3 = \"\", the table below explains the operators:\nLearn More:\nStudy our JavaScript Strings Tutorial.\nJavascript Comparison Operators\nComparison operators are used in logical statements to determine equality or difference between variables or values.\nGiven that x = 5, the table below explains the comparison operators:\nLearn More:\nStudy our JavaScript Comparisons Tutorial.\nJavaScript Logical Operators\nLogical operators are used to determine the logic between variables or values.\nGiven that x = 6 and y = 3, the table below explains the logical operators:\nLearn More:\nStudy our JavaScript Logical Tutorial.\nJavaScript Bitwise Operators\nBit operators work on 32 bits numbers. Any numeric operand in the operation is converted into a 32 bit number. The result is converted back to a JavaScript number.\nLearn More:\nStudy our JavaScript Bitwise Tutorial.\nMiscellaneous JavaScript Operators\nSome miscellaneous JavaScript operators are described below.",
      "examples": []
    },
    {
      "title": "JavaScript Operator Precedence",
      "summary": "Order of Operation\nOperator precedence describes the order in which operations are performed in an arithmetic expression.\nMultiplication (*) and division (/) have higher precedence than addition (+) and subtraction (-).\nExamples\nAs in traditional mathematics, multiplication is done first:\nWhen using parentheses, operations inside the parentheses are computed first:\nOperations with the same precedence (like * and /) are computed from left to right:\nOperator Precedence Values",
      "examples": [
        "let x = 100 + 50 * 3;",
        "let x = (100 + 50) * 3;",
        "let x = 100 / 50 * 3;",
        "*",
        "/",
        "+",
        "-"
      ]
    },
    {
      "title": "JavaScript UTF-8 Letters",
      "summary": "JavaScript Character Set\nJavaScript uses the UTF-8 character set.\nUTF-8 covers (almost) all the characters, punctuations, and symbols in the world.\nBasic Latin\nLatin Extended A-B\nLatin IPA Extentions\nSpacing Modifiers\nDiacritical Marks\nGreek and Coptic\nSlavic / Cyrillic\nGeorgian\nArmenian\nGlagolitic\nArabic\nHebrew\nSyriac\nHindi / Devanagari\nThai\nEthiopic\nCherokee\nAboriginal\nRunic\nGeneral Punctuation",
      "examples": []
    },
    {
      "title": "JavaScript UTF-8 Symbols",
      "summary": "JavaScript Character Set\nJavaScript uses the UTF-8 character set.\nUTF-8 covers (almost) all the characters, punctuations, and symbols in the world.\nCurrency Symbols\nLetterlike Symbols\nNumber Forms\nMath Operators\nMath Symbols\nMath Alphanumeric\nEnclosed Alphanumeric\nMisc Technical\nBox Drawings\nBlock Elements\nGeometric Shapes\nWeather Symbols\nAstrological Symbols\nMusical Symbols\nDomino & Dices\nMahjong Tiles\nChess Symbols\nCard Symbols\nArrows\nArrows A\nArrows B\nArrows C\nSymbols and Arrows\nYin Yang Symbols\nRecycling Symbols\nLife & Religion\nPlaces & Traffic\nMisc Symbols\nDingbats\nBraille\nAegean Numbers\nGothic\nAlchemical\nMeroitic Hieroglyphs\nEgyptian Hieroglyphs\nColored Symbols",
      "examples": []
    },
    {
      "title": "JavaScript UTF-8 Emojis",
      "summary": "JavaScript Character Set\nJavaScript uses the UTF-8 character set.\nUTF-8 covers (almost) all the characters, punctuations, and symbols in the world.\nSmileys\nHands\nPeople\nOffice\nPlaces\nTransport\nAnimals\nFood\nPlants\nFruits\nSports\nEarth & Sky\nWeather\nClothing\nAudio/Video\nCelebration\nEntertainment\nSymbols",
      "examples": []
    },
    {
      "title": "JavaScript Versions",
      "summary": "W3Schools Covers All JavaScript Versions\nJavaScript, invented by Brendan Eich in 1995, became an ECMA standard in 1997.\nECMAScript is the official name of the JavaScript standard.\nFrom 1997 ECMA versions was abbreviated by numbers. (ES1, ES2, ES3, ES5, ES6).\n2016 - 2025, versions are named by year (ECMAScript 2016, 2017, 2018 ... 2025).\nECMAScript Editions",
      "examples": []
    },
    {
      "title": "ECMAScript 2025",
      "summary": "New Features in JavaScript 2025\nNew Set Features in 2025\nWarning\nThese features are relatively new.\nOlder browsers may need an alternative code (Polyfill)\nThe RegExp /v Flag\nThe v flag is an \"upgrade\" to the u flag.\nThe u (unicode) flag enables full Unicode support in regular expressions.\nThe v flag enables more Unicode-related features.\nThe new features are:\nThe \\p escape sequence matches strings, instead of just characters.\nThe character class is upgraded to allow intersection, union, and subtraction syntaxes, as well as matching multiple Unicode characters.\nExamples\n/regexp/v is supported all in modern browsers since May 2025:\nThe RegExp.escape() Method\nThe RegExp.escape() method returns a string where characters that belongs to the regular expression syntax are escaped.\nThis makes it possible to treat characters like +, *, ?, ^, $, (, ), [, ], {, }, |, and \\ literally, and not as part of a regular expression.\nExample\nCreate a regular expression that matches the string \"[*]\":\nRegExp.escape() is supported all in modern browsers since May 2025:\nThe Float16Array Method\nA Float16Array is a TypedArray that stores 16-bit (half-precision) floating-point numbers in the IEEE 754 half-precision format.\nFloat16Array requires half the memory of Float32Array and a quarter of Float64Array.\nExample\nThe Float16Array object is supported in all modern browsers since June 2024:\nThe Math.f16round Method\nThe static Math.f16round() method returns the nearest 16-bit floating point representation of a number.\nExample\nThe Math.f16round() method is supported in all modern browsers since June 2024:\nThe Promise.try() Method\nThe Promise.try() method starts a promise chain from potentially throwing, synchronous code.\nThis ensures exceptions are correctly handled as promise rejections.\nExample\nJavaScript Set union()\nThe union() method returns the union of two sets.\nThe union() method returns a new set containing the elements which are in this set, or in the argument set, or in both:\nExample\nThe union() method is supported in all modern browsers since June 2024:\nJavaScript Set intersection()\nThe intersection() method returns the intersection of two sets.\nThe intersection() method returns a new set containing the elements which are in this set and in the argument set:\nExample\nThe intersection() method is supported in all modern browsers since June 2024:\nJavaScript Set difference()\nThe difference() method returns the difference between two sets.\nThe difference() method returns a new set containing elements which are in this set but not in the argument set:\nExample\nThe difference() method is supported in all modern browsers since June 2024:\nJavaScript Set symmetricDifference()\nThe symmetricDifference() method returns the symmetric difference between to sets.\nThe symmetricDifference() method returns a new set containing elements which are in this set or in the argument set, but not in both:\nExample\nThe symmetricDifference() method is supported in all modern browsers since June 2024:\nJavaScript Set isSubsetOf()\nThe isSubsetOf() method returns true if all elements in this set are elements in the argument set:\nExample\nThe isSubsetOf() method is supported in all modern browsers since June 2024:\nJavaScript Set isSupersetOf()\nThe isSupersetOf() method returns true if all elements in the argument set are also in this set:\nExample\nThe isSupersetOf() method is supported in all modern browsers since June 2024:\nJavaScript Set isDisjointFrom()\nThe isDisjointFrom() method returns true if this set has no elements in common with the argument set:\nExample\nThe Set.isDisjointFrom() method is supported in all modern browsers since June 2024:\nNote\nUsing both flags (u and v) results in a SyntaxError.\nModules with Import Attributes\nSyntax\nExamples",
      "examples": [
        "let text = \"Hello 😄\";\n\nlet pattern = /\\p{RGI_Emoji}/v;\nlet result = pattern.test(text);",
        "let text = \"Hello 😄\";\n\nlet pattern = /\\p{RGI_Emoji}/;\nlet result = pattern.test(text);",
        "// Escape a text for to use as a regular expression\nconst safe = RegExp.escape(\"[*]\");\n\n// Build a new reglar expression\nconst regex = new RegExp(safe);\n\n// Text to replace within\nconst oldText = \"[*] is a web school.\";\n\n// Perform the replace\nconst newText = oldText.match(regex, \"W3Schools\");",
        "const myArr = new Float16Array([1.5, 2.5, 3.5, 4.5]);\n\nlet bytes = myArr.BYTES_PER_ELEMENT;\nlet length = myArr.length;",
        "let a = Math.f16round(2.60);\nlet b = Math.f16round(2.50);\nlet c = Math.f16round(2.49);\nlet d = Math.f16round(-2.60);\nlet e = Math.f16round(-2.50);\nlet f = Math.f16round(-2.49);",
        "function compute() {\nreturn Promise.try(() => {\nconst v = mayThrowSync();\nreturn asyncFunc(v);\n});\n}",
        "const A = new Set(['a','b','c']);\nconst B = new Set(['b','c','d']);\n\nconst C = A.union(B);",
        "const A = new Set(['a','b','c']);\nconst B = new Set(['b','c','d']);\n\nconst C = A.intersection(B);",
        "const A = new Set(['a','b','c']);\nconst B = new Set(['b','c','d']);\n\nconst C = A.difference(B);",
        "const A = new Set(['a','b','c']);\nconst B = new Set(['b','c','d']);\n\nconst C = A.symetricDifference(B);",
        "const A = new Set(['a','b','c']);\nconst B = new Set(['b','c','d']);\n\nlet answer = A.isSubsetOf(B);",
        "const A = new Set(['a','b','c']);\nconst B = new Set(['b','c','d']);\n\nlet answer = A.isSupersetOf(B);",
        "const A = new Set(['a','b','c']);\nconst B = new Set(['b','c','d']);\n\nlet answer = A.isDisjointFrom(B);",
        "import {names} from \"module-name\" with {key:\"data\"};",
        "import config from \"config.json\" with {type:\"json\"};\n\nimport styles from \"styles.css\" with {type:\"css\"};\n\nimport data from \"data.json\" with {type:\"json\"};",
        "/regexp/v",
        "RegExp.escape()",
        "Float16Array",
        "Float32Array",
        "Float64Array",
        "Math.f16round()",
        "union()",
        "intersection()",
        "difference()",
        "symmetricDifference()",
        "isSubsetOf()",
        "true",
        "isSupersetOf()",
        "isDisjointFrom()",
        "Set.isDisjointFrom()"
      ]
    },
    {
      "title": "ECMAScript 2024",
      "summary": "New Features in JavaScript 2024\nWarning\nThese features are relatively new.\nOlder browsers may need an alternative code (Polyfill)\nJavaScript Object.groupBy()\nExample\nDescription\nThe Object.groupBy() method groups elements of an object according to string values returned from a callback function.\nThe Object.groupBy() method return a new object.\nThe Object.groupBy() method does not change the original object.\nNote:\nThe elements in the original and in the returned object are the same.\nFuture changes will be reflected in both the original and in the returned object.\nJavaScript Map.groupBy()\nExample\nDescription\nThe Map.groupBy() method groups elements of a map according to string values returned from a callback function.\nThe Map.groupBy() method returns a new map.\nThe Map.groupBy() method does not change the original object.\nNote:\nThe elements in the original and in the returned object are the same.\nFuture changes will be reflected in both the original and in the returned object.\nObject.groupBy() vs Map.groupBy()\nThe difference between Object.groupBy() and Map.groupBy() is:\nObject.groupBy() groups elements into a JavaScript object.\nMap.groupBy() groups elements into a Map object.\nREMOVE ADS\nJavaScript String isWellFormed()\nThe isWellFormed() method returns true if a string is well formed.\nOtherwise it returns false.\nA string is not well formed if it contains lone surrogates.\nExamples\nLone Surrogates\nA lone surrogate is a Unicode surrogate code point that is not part of a valid surrogate pair used to represent characters in UTF-16 encoding.\nJavaScript String toWellFormed()\nThe String method toWellFormed() returns a new string where all \"lone surrogates\" are replaced with the Unicode replacement character (U+FFFD).\nExamples",
      "examples": [
        "// Create an Array\nconst fruits = [\n{name:\"apples\", quantity:300},\n{name:\"bananas\", quantity:500},\n{name:\"oranges\", quantity:200},\n{name:\"kiwi\", quantity:150}\n];\n\n// Callback function to Group Elements\nfunction myCallback({ quantity }) {\nreturn quantity > 200 ? \"ok\" : \"low\";\n}\n\n// Group by Quantity\nconst result = Object.groupBy(fruits, myCallback);",
        "// Create a Map\nconst fruits = [\n{name:\"apples\", quantity:300},\n{name:\"bananas\", quantity:500},\n{name:\"oranges\", quantity:200},\n{name:\"kiwi\", quantity:150}\n];\n\n// Callback function to Group Elements\nfunction myCallback({ quantity }) {\nreturn quantity > 200 ? \"ok\" : \"low\";\n}\n\n// Group by Quantity\nconst result = Map.groupBy(fruits, myCallback);",
        "let text = \"Hello world!\";\nlet result = text.isWellFormed();",
        "let text = \"Hello World \\uD800\";\nlet result = text.isWellFormed();",
        "let text = \"Hello World \\uD800\";\nlet result = text.toWellFormed();",
        "Object.groupBy()",
        "Map.groupBy()",
        "isWellFormed()",
        "true",
        "false",
        "toWellFormed()"
      ]
    },
    {
      "title": "ECMAScript 2023",
      "summary": "New Features in JavaScript 2023\nNew Array Features in 2023\nBrowser Support\nECMAScript 2023 is supported in all modern browsers since July 2023:\nJavaScript Array findLast() Method\nES2023 added the findLast() method that will start from the end of an array and return the value of the first element that satisfies a condition.\nExample\nJavaScript Array findLastIndex() Method\nThe findLastIndex() method finds the index of the last element that satisfies a condition.\nExample\nJavaScript Array toReversed() Method\nES2023 added the Array toReversed() method as a safe way to reverse an array without altering the original array.\nThe difference between the new toReversed() method and the old reverse() method is that the new method creates a new array, keeping the original array unchanged, while the old method altered the original array.\nExample\nJavaScript Array toSorted() Method\nES2023 added the Array toSorted() method as a safe way to sort an array without altering the original array.\nThe difference between the new toSorted() method and the old sort() method is that the new method creates a new array, keeping the original array unchanged, while the old method altered the original array.\nExample\nJavaScript Array toSpliced() Method\nES2023 added the Array toSpliced() method as a safe way to splice an array without altering the original array.\nThe difference between the new toSpliced() method and the old splice() method is that the new method creates a new array, keeping the original array unchanged, while the old method altered the original array.\nExample\nREMOVE ADS\nJavaScript Array with() Method\nES2023 added the Array with() method as a safe way to update elements in an array without altering the original array.\nExample\n#! JavaScript Shebang\nIn operating systems, a shebang (also known as hashbang, pound-bang, sharp-exclamation or hash-pling) is a sequence of two characters: a number sign (#) and an exclamation mark (!).\n#! at the beginning of a script tells the operating system what interpreter should be used to execute the script:\nExample\nThe example above tells the operating system to use the node program to run the script.\nNow, you can run JavaScript code with ./fileName.js instead of node fileName.js.",
      "examples": [
        "const temp = [27, 28, 30, 40, 42, 35, 30];\nlet high = temp.findLast(x => x > 40);",
        "const temp = [27, 28, 30, 40, 42, 35, 30];\nlet pos = temp.findLastIndex(x => x > 40);",
        "const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\"];\nconst reversed = months.toReversed();",
        "const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\"];\nconst sorted = months.toSorted();",
        "const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\"];\nconst spliced = months.toSpliced(0, 1);",
        "const months = [\"Januar\", \"Februar\", \"Mar\", \"April\"];\nconst new = months.with(2, \"March\");",
        "#!/usr/bin/env node",
        "./fileName.js",
        "node fileName.js"
      ]
    },
    {
      "title": "ECMAScript 2022",
      "summary": "New Features in JavaScript 2022\nSupported in all modern browsers since March 2023.\nBrowser Support\nECMAScript 2022 is supported in all modern browsers since March 2023:\nJavaScript Array at()\nES2022 intoduced the array method at():\nExamples\nGet the third element of fruits:\nGet the third element of fruits:\nThe at() method returns an indexed element from an array.\nThe at() method returns the same as [].\nThe at() method is supported in all modern browsers since March 2022:\nNote\nMany languages allows negative bracket indexing like [-1] to access elements from the end of an object / array / string.\nThis is not possible in JavaScript, because [] is used for accessing both arrays and objects. obj[-1] refers to the value of key -1, not to the last property of the object.\nThe at() method was introduced in ES2022 to solve this problem.\nJavaScript String at()\nES2022 intoduced the string method at():\nExamples\nGet the third letter of name:\nGet the third letter of name:\nThe at() method returns an indexed element from an string.\nThe at() method returns the same as [].\nRegExp d Modifier\nES2022 added the /d modifier to express the start and end of the match.\nExample\nRegExp Modifiers are used to spescfy case-insensitive, and other global searches:\nObject hasOwn\nES2022 provides a safe way to check if a property is the own property of an object.\nObject.hasOwn() is similar to Object.prototype.hasOwnProperty but supports all object types.\nExample\nError Cause\nES2022 let you specify the reason behind an error with error.cause.\nExample\nREMOVE ADS\nJavaScript await import\nJavasSript modules can now wait for resources that require import before running:\nJavaScript Class Field Declarations\nJavaScript Private Methods and Fields",
      "examples": [
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet fruit = fruits.at(2);",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet fruit = fruits[2];",
        "const name = \"W3Schools\";\nlet letter = name.at(2);",
        "const name = \"W3Schools\";\nlet letter = name[2];",
        "let text = \"aaaabb\";\nlet result = text.match(/(aa)(bb)/d);",
        "Object.hasOwn(myObject, age)",
        "try { connectData(); } catch (err) { throw new Error(\"Connecting failed.\", { cause: err }); }",
        "import {myData} from './myData.js';\n\nconst data = await myData();",
        "class Hello {\ncounter = 0; // Class field\n}\nconst myClass = new Hello();\n\nlet x = myClass.counter;",
        "class Hello {\n#counter = 0;  // Private field\n#myMethod() {} // Private method\n}\nconst myClass = new Hello();\n\nlet x = myClass.#counter; // Error\nmyClass.#myMethod();      // Error",
        "at()",
        "[]",
        "negative bracket indexing",
        "Object.hasOwn()",
        "Object.prototype.hasOwnProperty",
        "error.cause"
      ]
    },
    {
      "title": "ECMAScript 2021",
      "summary": "New Features in JavaScript 2021\nBrowser Support\nECMAScript 2021 is supported in all modern browsers since April 2021:\nJavaScript Promise.any()\nPromise.any() is a static method in JavaScript that takes an iterable of Promises as input and returns a single Promise.\nExample\nJavaScript String ReplaceAll()\nES2021 introduced the string method replaceAll():\nExample\nThe replaceAll() method allows you to specify a regular expression instead of a string to be replaced.\nIf the parameter is a regular expression, the global flag (g) must be set, otherwise a TypeError is thrown.\nExample\nNote\nES2020 introduced the string method matchAll().\nREMOVE ADS\nJavaScript Numeric Separator (_)\nES2021 intoduced the numeric separator (_) to make numbers more readable:\nExample\nThe numeric separator is only for visual use.\nExample\nThe numeric separator can be placed anywhere in a number:\nExample\nNote\nThe numeric separator is not allowed at the beginning or at the end of a number.\nIn JavaScript only variables can start with _.",
      "examples": [
        "// Create a Promise\nconst myPromise1 = new Promise((resolve, reject) => {\nsetTimeout(resolve, 200, \"King\");\n});\n\n// Create another Promise\nconst myPromise2 = new Promise((resolve, reject) => {\nsetTimeout(resolve, 100, \"Queen\");\n});\n\n// Run when any promise fulfill\nPromise.any([myPromise1, myPromise2]).then((x) => {\nmyDisplay(x);\n});",
        "text = text.replaceAll(\"Cats\",\"Dogs\");\ntext = text.replaceAll(\"cats\",\"dogs\");",
        "text = text.replaceAll(/Cats/g,\"Dogs\");\ntext = text.replaceAll(/cats/g,\"dogs\");",
        "const num = 1_000_000_000;",
        "const num1 = 1_000_000_000;\nconst num2 = 1000000000;\n(num1 === num2);",
        "const num1 = 1_2_3_4_5;",
        "replaceAll()"
      ]
    },
    {
      "title": "ECMAScript 2020",
      "summary": "New Features in JavaScript 2020\nNew JavaScript Operators in 2020\nBrowser Support\nECMAScript 2020 is supported in all modern browsers since April 2021.\nJavaScript BigInt\nJavaScript BigInt variables are used to store big integer values that are too big to be represented by a a normal JavaScript Number.\nJavaScript integers are only accurate up to about 15 digits.\nInteger Example\nBigInt Example\nTo create a BigInt, append n to the end of an integer or call BigInt():\nExample\nThe JavaScript typeof a BigInt is \"bigint\":\nExample\nJavaScript String matchAll()\nBefore ES2020 there was no string method that could be used to search for all occurrences of a string in a string.\nExample\nIf the parameter is a regular expression, the global flag (g) must be set set, otherwise a TypeError is thrown.\nExample\nIf you want to search case insensitive, the insensitive flag (i) must be set:\nExample\nNote\nES2021 introduced the string method replaceAll().\nREMOVE ADS\nThe Nullish Coalescing Operator (??)\nThe ?? operator returns the first argument if it is not nullish (null or undefined).\nOtherwise it returns the second.\nExample\nThe Optional Chaining Operator (?.)\nThe Optional Chaining Operator returns undefined if an object is undefined or null (instead of throwing an error).\nExample\nThe &&= Operator\nThe Logical AND Assignment Operator is used between two values.\nIf the first value is true, the second value is assigned.\nLogical AND Assignment Example\nThe ||= Operator\nThe Logical OR Assignment Operator is used between two values.\nIf the first value is false, the second value is assigned.\nLogical OR Assignment Example\nThe ??= Operator\nThe Nullish Coalescing Assignment Operator is used between two values.\nIf the first value is undefined or null, the second value is assigned.\nNullish Coalescing Assignment Example\nJavaScript Promise.allSettled()\nThe Promise.allSettled() method returns a single Promise from a list of promises.\nExample",
      "examples": [
        "let x = 999999999999999;\nlet y = 9999999999999999; // too big",
        "let x = 9999999999999999;\nlet y = 9999999999999999n;",
        "let x = 1234567890123456789012345n;\nlet y = BigInt(1234567890123456789012345)",
        "let x = BigInt(999999999999999);\nlet type = typeof x;",
        "const iterator = text.matchAll(\"Cats\");",
        "const iterator = text.matchAll(/Cats/g);",
        "const iterator = text.matchAll(/Cats/gi);",
        "let name = null;\nlet text = \"missing\";\nlet result = name ?? text;",
        "const car = {type:\"Fiat\", model:\"500\", color:\"white\"};\nlet name = car?.name;",
        "let x = 10;\nx &&= 5;",
        "let x = 10;\nx ||= 5;",
        "let x;\nx ??= 10;",
        "// Create a Promise\nconst myPromise1 = new Promise((resolve, reject) => {\nsetTimeout(resolve, 200, \"King\");\n});\n\n// Create another Promise\nconst myPromise2 = new Promise((resolve, reject) => {\nsetTimeout(resolve, 100, \"Queen\");\n});\n\n// Settle All\nPromise.allSettled([myPromise1, myPromise2]).then((results) =>\nresults.forEach((x) => myDisplay(x.status)),\n);",
        "BigInt",
        "Number",
        "BigInt()",
        "typeof",
        "??",
        "null",
        "undefined",
        "true",
        "false",
        "Promise.allSettled()"
      ]
    },
    {
      "title": "ECMAScript 2019",
      "summary": "New Features in JavaScript 2019\nBrowser Support\nECMAScript 2019 is supported in all modern browsers since January 2020:\nJavaScript String trimStart()\nES2019 added the String method trimStart() to JavaScript.\nThe trimStart() method works like trim(), but removes whitespace only from the start of a string.\nExample\nJavaScript String trimEnd()\nES2019 added the String method trimEnd() to JavaScript.\nThe trimEnd() method works like trim(), but removes whitespace only from the end of a string.\nExample\nJavaScript Object fromEntries()\nES2019 added the Object method fromEntries() to JavaScript.\nThe fromEntries() method creates an object from iterable key / value pairs.\nExample\nREMOVE ADS\nOptional catch Binding\nFrom ES2019 you can omit the catch parameter if you don't need it:\nExample\nBefore 2019:\nAfter 2019:\nJavaScript Array flat()\nES2019 added the Array flat() method to JavaScript.\nThe flat() method creates a new array by flattening a nested array.\nExample\nJavaScript Array flatMap()\nES2019 added the Array flatMap() method to JavaScript.\nThe flatMap() method first maps all elements of an array and then creates a new array by flattening the array.\nExample\nStable Array sort()\nES2019 revised the Array sort() method.\nBefore 2019, the specification allowed unstable sorting algorithms such as QuickSort.\nAfter ES2019, browsers must use a stable sorting algorithm:\nWhen sorting elements on a value, the elements must keep their relative position to other elements with the same value.\nExample\nIn the example above, when sorting on price, the result should not have names in a different relative position, such as this:\nRevised JSON.stringify()\nES2019 revised the JSON stringify() method.\nBefore 2019, JSON could not stringify character encoded with \\.\nExample\nBefore ES2019, using JSON.stringify()JSON on UTF-8 code points (U+D800 to U+DFFF) returned broken Unicode characters like ���.\nAfter this revision, strings with UTF-8 code points convert safely with JSON.stringify(), and back to the original using JSON.parse().\nSeparator Symbols\nLine separators and paragraph separator symbols (\\u2028 and \\u2029) are now allowed in string literals.\nBefore 2019, these were treated as line terminators and resulted in error exceptions:\nExample\nNote\nNow, JavaScript and JSON have equal rules.\nBefore ES2019:\ntext = JSON.parse('\"\\u2028\"') would parse to ''.\ntext = '\"\\u2028\"' would give syntax error.\nRevised Function toString()\nES2019 revised the Function toString() method.\nThe toString() method returns a string representing the source code of a function.\nFrom 2019, toString() must return the source code of the function including comments, spaces, and syntax details.\nBefore 2019, different browsers returned different variants of the function (like without comments and spaces). From 2019 the function should be returned exactly as it is written.\nExample",
      "examples": [
        "let text1 = \"     Hello World!     \";\nlet text2 = text1.trimStart();",
        "let text1 = \"     Hello World!     \";\nlet text2 = text1.trimEnd();",
        "const fruits = [\n[\"apples\", 300],\n[\"pears\", 900],\n[\"bananas\", 500]\n];\n\nconst myObj = Object.fromEntries(fruits);",
        "try {\n// code\n} catch (err) {\n// code\n}",
        "try {\n// code\n} catch {\n// code\n}",
        "const myArr = [[1,2],[3,4],[5,6]];\nconst newArr = myArr.flat();",
        "const myArr = [1, 2, 3, 4, 5, 6];\nconst newArr = myArr.flatMap(x => [x, x * 10]);",
        "const myArr = [\n{name:\"X00\",price:100 },\n{name:\"X01\",price:100 },\n{name:\"X02\",price:100 },\n{name:\"X03\",price:100 },\n{name:\"X04\",price:110 },\n{name:\"X05\",price:110 },\n{name:\"X06\",price:110 },\n{name:\"X07\",price:110 }\n];",
        "X01 100\nX03 100\nX00 100\nX03 100\nX05 110\nX04 110\nX06 110\nX07 110",
        "let text = JSON.stringify(\"\\u26D4\");",
        "// This is valid in ES2019:\nlet text = \"\\u2028\";",
        "function myFunction(p1, p2) {\nreturn p1 * p2;\n}\nlet text = myFunction.toString();",
        "trimStart()",
        "trim()",
        "trimEnd()",
        "fromEntries()",
        "flat()",
        "flatMap()",
        "sort()",
        "stringify()",
        "JSON.stringify()",
        "JSON.parse()",
        "toString()"
      ]
    },
    {
      "title": "ECMAScript 2018 RegExp /s Flag RegExp \\p Metacharacter RegExp Lookbehind Negative Lookbehind RegExp Named Capturing Groups",
      "summary": "New Features in JavaScript 2018\nNew RegExp Features in 2018\nBrowser Support\nECMAScript 2018 is supported in all modern browsers since Jun 2020:\nJavaScript Asynchronous Iteration\nECMAScript 2018 added asynchronous iterators and iterables.\nWith asynchronous iterables, we can use the await keyword in for/of loops.\nExample\nJavaScript Promise.finally()\nECMAScript 2018 finalizes the full implementation of the Promise object with Promise.finally:\nPromise.finally() defines a function to be executed when a promise has either been successfully resolved rejected.\nExample\nJavaScript Array Rest Elements\nECMAScript 2018 added the rest operator (...).\nThe rest operator (...) allows us to destruct an array and collect the leftovers:\nExample 1\nExample 2\nJavaScript Object Rest Properties\nECMAScript 2018 added the rest operator (...).\nThis allows us to destruct an object and collect the leftovers onto a new object:\nExample\nREMOVE ADS\nNew JavaScript RegExp Features\nECMAScript 2018 added 4 new RegExp features:\n/s (dotAll) Flag\nUnicode Property Escapes (\\p{...})\nLookbehind Assertions (?<=y)x and (?<!y)x\nNamed Capture Groups\nExample\nDescription\nThe s (dotAll) flag allows the . (dot) metacharacter to match any character, including line terminator characters (like \\n, \\r, \\u2028, \\u2029).\nWithout s, \\n does not match line terminators.\nExample\nDescription\nThe \\p{Unicode Property} metacharacter matches any character with a Unicode character property.\nExample (?<=y)x\nDescription\n(?<=y)x matches \"x\" if \"x\" is preceded by \"y\".\nExample (?<!y)x\nDescription\n(?<!y)x matches \"x\" if \"x\" is NOT preceded by \"y\".\nExample (?<name>...)\nExplained\n(?<firstName>\\w+) captures a word and labels it firstName\n(?<lastName>\\w+) does the same for lastName\ntext.match() returns an array with a groups property\nmatch.groups() returns an object:\n{firstName:\"John\", lastName:\"Doe\" }\nWhen using a regular expression with capturing groups, the match() method of a string returns a result array that includes a groups property. This groups property is an object that holds the matches for named capturing groups.\nJavaScript Threads\nIn JavaScript you use the Web Workers API to create threads.\nWorker threads are used to execute code in the background so that the main program can continue execution.\nWorker threads run simultaneously with the main program. Simultaneous execution of different parts of a program can be time-saving.\nJavaScript Shared Memory\nShared memory is a feature that allows threads (different parts of a program) to access and update the same data in the same memory.\nInstead of passing data between threads, you can pass a SharedArrayBuffer object that points to the memory where data is saved.\nSharedArrayBuffer\nA SharedArrayBuffer object represents a fixed-length raw binary data buffer similar to the ArrayBuffer object.",
      "examples": [
        "for await () {}",
        "let myPromise = new Promise();\n\nmyPromise.then();\nmyPromise.catch();\nmyPromise.finally();",
        "let a, rest;\nconst arr1 = [1,2,3,4,5,6,7,8];\n\n[a, ...rest] = arr1;",
        "let a, b, rest;\nconst arr1 = [1,2,3,4,5,6,7,8];\n\n[a, b, ...rest] = arr1;",
        "// Create an Object:\nconst car = {type:\"Fiat\", model:\"500\", color:\"white\"};\n\n// Destructure the Object\nlet {type, model, color} = car;\ndocument.getElementById(\"demo\").innerHTML = \"The car type is: \" + type;",
        "let text = \"Line\\nLine.\";\n\nlet pattern = /Line./gs;\nlet result = text.match(pattern);",
        "let text = \"Hello 😄\";\n\nlet pattern = /\\p{RGI_Emoji}/v;\nlet result = pattern.test(text);",
        "let text = \"Hello W3Schools\";\n\nlet pattern = /(?<=Hello )W3Schools/;\nlet result = pattern.test(text);",
        "const text = \"Name: John Doe\";\n\n// Using named capturing groups\nconst regex = /(?<firstName>\\w+) (?<lastName>\\w+)/;\nconst match = text.match(regex);\n\nlet fName = match.groups.firstName;\nlet lName = match.groups.lastName;",
        "await",
        "for/of",
        "Promise.finally"
      ]
    },
    {
      "title": "ECMAScript 2017",
      "summary": "New Features in JavaScript 2017\nBrowser Support\nJavaScript 2017 is supported in all modern browsers since September 2017:\nJavaScript String Padding\nECMAScript 2017 added two string methods to JavaScript: padStart() and padEnd() to support padding at the beginning and at the end of a string.\nExamples\nJavaScript Object Entries\nECMAScript 2017 added the Object.entries() method to objects.\nObject.entries() returns an array of the key/value pairs in an object:\nExample\nObject.entries() makes it simple to use objects in loops:\nExample\nObject.entries() also makes it simple to convert objects to maps:\nExample\nJavaScript Object Values\nObject.values() is similar to Object.entries(), but returns a single dimension array of the object values:\nExample\nREMOVE ADS\nJavaScript Async Functions\nWaiting for a Timeout\nTry it Yourself »\nJavaScript Trailing Commas\nJavaScript allows trailing commas wherever a comma-separated list of values is accepted.\nIn Array and Object Literals, Function Calls, Parameters, Imports and Exports.\nExample",
      "examples": [
        "let text = \"5\";\ntext = text.padStart(4,0);",
        "let text = \"5\";\ntext = text.padEnd(4,0);",
        "const person = {\nfirstName : \"John\",\nlastName : \"Doe\",\nage : 50,\neyeColor : \"blue\"\n};\n\nlet text = Object.entries(person);",
        "const fruits = {Bananas:300, Oranges:200, Apples:500};\n\nlet text = \"\";\nfor (let [fruit, value] of Object.entries(fruits)) {\ntext += fruit + \": \" + value + \"<br>\";\n}",
        "const fruits = {Bananas:300, Oranges:200, Apples:500};\n\nconst myMap = new Map(Object.entries(fruits));",
        "const person = {\nfirstName : \"John\",\nlastName : \"Doe\",\nage : 50,\neyeColor : \"blue\"\n};\n\nlet text = Object.values(person);",
        "async function myDisplay() {\nlet myPromise = new Promise(function(myResolve, myReject) {\nsetTimeout(function() { myResolve(\"I love You !!\"); }, 3000);\n});\ndocument.getElementById(\"demo\").innerHTML = await myPromise;\n}\n\nmyDisplay();",
        "function myFunc(x,,,) {};\nconst myArr = [1,2,3,4,,,];\nconst myObj = {fname: John, age:50,,,};",
        "padStart()",
        "padEnd()",
        "Object.entries()",
        "Object.values()"
      ]
    },
    {
      "title": "ECMAScript 2016",
      "summary": "New Features in JavaScript 2016\nSupported in all modern browsers since March 2017.\nBrowser Support\nJavaScript 2016 is supported in all modern browsers since March 2017:\nES 2016 is not supported in Internet Explorer.\nExponentiation Operator\nThe exponentiation operator (**) raises the first operand to the power of the second operand.\nExample\nx ** y produces the same result as Math.pow(x, y):\nExample\nExponentiation Assignment\nExample\nREMOVE ADS\nJavaScript Array includes()\nECMAScript 2016 introduced Array.includes to arrays.\nThis allows us to check if an element is present in an array:\nExample",
      "examples": [
        "let x = 5;\nlet z = x ** 2;",
        "let x = 5;\nlet z = Math.pow(x,2);",
        "let x = 5;\nx **= 2;",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\nfruits.includes(\"Mango\");",
        "**",
        "x ** y",
        "Math.pow(x, y)",
        "**=",
        "Array.includes"
      ]
    },
    {
      "title": "Javascript 2015 (ES6)",
      "summary": "ECMAScript 2015\nThe second major revision to JavaScript.\nECMAScript 2015 is also known as ES6.\nNew Features in JavaScript 2015 (ES6)\nMath Features\nNumber Features\nBrowser Support\nJavaScript 2015 is supported in all modern browsers since June 2017:\nES6 is not supported in Internet Explorer.\nJavaScript let\nThe let keyword allows you to declare a variable with block scope.\nExample\nRead more about let in the chapter: JavaScript Let.\nJavaScript const\nThe const keyword allows you to declare a constant (a JavaScript variable with a constant value).\nConstants are similar to let variables, except that the value cannot be changed.\nExample\nRead more about const in the chapter: JavaScript Const.\nArrow Functions\nArrow functions is a short syntax for writing function expressions.\nYou don't need the function keyword, the return keyword, or the curly brackets.\nBefore Arrow:\nFunction to compute the product of a and b\nTry it Yourself »\nWith Arrow\nTry it Yourself »\nNote\nArrow functions do not have their own this. They are not well suited for defining object methods.\nArrow functions are not hoisted. They must be defined before they are used.\nYou can only omit the return keyword and the curly brackets if the function is a single statement. Because of this, it might be a good habit to always keep them:\nExample\nLearn more about Arrow Functions in the chapter: JavaScript Arrow Function.\nObject Destructuring\nDestructuring assignment makes it easy to assign array values and object properties to variables.\nExample\nNote:\nWhen destructuring an object, you must use the same name for the variables as the corresponding object keys (names).\nThe order of the keys (names) does not matter.\nArray Destructuring\nDestructuring assignment makes it easy to assign array values and object properties to variables.\nExample\nThe Spread (...) Operator\nThe ... operator spreads an array or iterable into individual elements.\nExample\nThe ... operator can pass arguments to a function:\nExample\nThe ... operator can be used to join arrays:\nExample\nREMOVE ADS\nThe For/Of Loop\nThe JavaScript for/of statement loops through the values of iterable objects.\nfor/of lets you loop over data structures that are iterable such as Arrays, Strings, Maps, NodeLists, and more.\nThe for/of loop has the following syntax:\nvariable - For every iteration the value of the next property is assigned to the variable. Variable can be declared with const, let, or var.\niterable - An object that has iterable properties.\nLooping over an Array\nExample\nLooping over a String\nExample\nLearn more in the chapter: JavaScript Loop For/In/Of.\nJavaScript Maps\nA Map is an object that stores key-value pairs, similar to objects, but with differences:\nKeys can be of any data type (objects, functions, primitive values), unlike plain objects where keys are strings.\nMaintains the original insertion order of keys.\nNote\nBeing able to use an Object as a key is an important Map feature.\nExample\nLearn more about Map objects, and the difference between a Map and an Array, in the the chapter: JavaScript Maps.\nJavaScript Sets\nA Set is an object that stores unique values of any type (primitive values, functions, objects).\nA Set can only contain unique values. An attempt to add a duplicate value will be ignored.\nExample\nLearn more about Set objects in the the chapter: JavaScript Sets.\nJavaScript Classes\nJavaScript Classes are templates for JavaScript Objects.\nUse the keyword class to create a class.\nAlways add a method named constructor():\nSyntax\nExample\nThe example above creates a class named \"Car\".\nThe class has two initial properties: \"name\" and \"year\".\nA JavaScript class is not an object.\nIt is a template for JavaScript objects.\nUsing a Class\nWhen you have a class, you can use the class to create objects:\nExample\nTry it Yourself »\nLearn more about classes in the the chapter: JavaScript Classes.\nJavaScript Promises\nA JavaScript Promise is an object representing the completion or failure of an asynchronous operation and its values.\nIt is a placeholder for a value that may not yet be available, providing a structured way to handle asynchronous code.\nPromise Syntax\nExample Using a Promise\nTry it Yourself »\nLearn more about Promises in the the chapter: JavaScript Promises.\nThe Symbol Type\nA JavaScript Symbol is a primitive data type just like Number, String, or Boolean.\nIt represents a unique \"hidden\" identifier that no other code can accidentally access.\nFor instance, if different coders want to add a person.id property to a person object belonging to a third-party code, they could mix each others values.\nUsing Symbol() to create a unique identifiers, solves this problem:\nExample\nNote\nSymbols are always unique.\nIf you create two symbols with the same description they will have different values:\nDefault Parameter Values\nES6 allows function parameters to have default values.\nExample\nFunction Rest Parameter\nThe rest parameter (...) allows a function to treat an indefinite number of arguments as an array:\nExample\nString.includes()\nThe includes() method returns true if a string contains a specified value, otherwise false:\nExample\nString.startsWith()\nThe startsWith() method returns true if a string begins with a specified value, otherwise false:\nExample\nString.endsWith()\nThe endsWith() method returns true if a string ends with a specified value, otherwise false:\nExample\nArray entries()\nExample\nCreate an Array Iterator, and then iterate over the key/value pairs:\nThe entries() method returns an Array Iterator object with key/value pairs:\n[0, \"Banana\"]\n[1, \"Orange\"]\n[2, \"Apple\"]\n[3, \"Mango\"]\nThe entries() method does not change the original array.\nArray.from()\nThe Array.from() method returns an Array object from any object with a length property or any iterable object.\nExample\nCreate an Array from a String:\nArray keys()\nThe keys() method returns an Array Iterator object with the keys of an array.\nExample\nCreate an Array Iterator object, containing the keys of the array:\nArray find()\nThe find() method returns the value of the first array element that passes a test function.\nThis example finds (returns the value of ) the first element that is larger than 18:\nExample\nNote that the function takes 3 arguments:\nThe item value\nThe item index\nThe array itself\nArray findIndex()\nThe findIndex() method returns the index of the first array element that passes a test function.\nThis example finds the index of the first element that is larger than 18:\nExample\nNote that the function takes 3 arguments:\nThe item value\nThe item index\nThe array itself\nNew Math Methods\nES6 added the following methods to the Math object:\nMath.trunc()\nMath.sign()\nMath.cbrt()\nMath.log2()\nMath.log10()\nThe Math.trunc() Method\nMath.trunc(x) returns the integer part of x:\nExample\nThe Math.sign() Method\nMath.sign(x) returns -1, 0, or 1 (if x is negative, null or positive):\nExample\nThe Math.cbrt() Method\nMath.cbrt(x) returns the cube root of x:\nExample\nThe Math.log2() Method\nMath.log2(x) returns the base 2 logarithm of x:\nExample\nThe Math.log10() Method\nMath.log10(x) returns the base 10 logarithm of x:\nExample\nNew Number Properties\nES6 added the following properties to the Number object:\nEPSILON\nMIN_SAFE_INTEGER\nMAX_SAFE_INTEGER\nEPSILON Example\nThe difference between 1 and the smallest floating-point number:\nMIN_SAFE_INTEGER Example\nMinimum integer value that can be precisely represented:\nMAX_SAFE_INTEGER Example\nMaximum integer value that can be precisely represented:\nThe Number.isInteger() Method\nThe Number.isInteger() method returns true if the argument is an integer.\nExample\nThe Number.isSafeInteger() Method\nA safe integer is an integer that can be exactly represented as a double precision number.\nThe Number.isSafeInteger() method returns true if the argument is a safe integer.\nExample\nSafe integers are all integers from -(253 - 1) to +(253 - 1).\nThis is safe: 9007199254740991. This is not safe: 9007199254740992.\nNew Global Methods\nES6 added 2 new global number methods:\nisFinite()\nisNaN()\nThe isFinite() Method\nThe global isFinite() method returns false if the argument is Infinity or NaN.\nOtherwise it returns true:\nExample\nThe isNaN() Method\nThe global isNaN() method returns true if the argument is NaN. Otherwise it returns false:\nExample\nJavaScript Object.assign()\nThe Object.assign() method copies properties from one or more source objects to a target object.\nExample\nRegExp u Modifier\nExamples\nDescription\nThe u (unicode) flag enables full Unicode support in the regular expression.\nBy default, JavaScript and regex treats 4-byte Unicode characters (like emojis or less common symbols) as two separate 2-byte \"surrogate\" code units.\nThe u flag treats the pattern as a sequence of Unicode code points, which is important for correctly handling characters outside the Basic Multilingual Plane (BMP).\nRegExp y Modifier\nExamples\nDescription\nThe y (Sticky) flag performs a \"sticky\" search that matches only from the lastIndex property of the RegExp object.\nThe y flag ensures that subsequent matches start immediately after the previous one, without skipping characters.\nModules\nModules are imported in two different ways:\nImport from named exports\nImport named exports from the file person.js:\nTry it Yourself »\nImport from default exports\nImport a default export from the file message.js:\nTry it Yourself »\nLearn more about Modules in: JavaScript Modules.",
      "examples": [
        "var x = 10;\n// Here x is 10\n{\nlet x = 2;\n// Here x is 2\n}\n// Here x is 10",
        "var x = 10;\n// Here x is 10\n{\nconst x = 2;\n// Here x is 2\n}\n// Here x is 10",
        "let myFunction = function(a, b) {return a * b}",
        "let myFunction = (a, b) => a * b;",
        "// This will not work\nlet myFunction = (x, y) => { x * y } ;\n\n// This will not work\nlet myFunction = (x, y) => return x * y ;\n\n// Only this will work\nlet myFunction = (x, y) => { return x * y };",
        "// Create an Object\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\n\n// Destructuring Assignment\nlet { firstName, age } = person;",
        "// Create an Array\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\n// Destructuring Assignment\nlet [fruit1, fruit2] = fruits;",
        "const numbers = [23,55,21,87,56];\nlet minValue = Math.min(...numbers);\nlet maxValue = Math.max(...numbers);",
        "const arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst arr3 = [...arr1, ...arr2];",
        "const q1 = [\"Jan\", \"Feb\", \"Mar\"];\nconst q2 = [\"Apr\", \"May\", \"Jun\"];\nconst q3 = [\"Jul\", \"Aug\", \"Sep\"];\nconst q4 = [\"Oct\", \"Nov\", \"Dec\"];\n\nconst year = [...q1, ...q2, ...q3, ...q4];",
        "for (variable of iterable) {\n// code block to be executed\n}",
        "const cars = [\"BMW\", \"Volvo\", \"Mini\"];\nlet text = \"\";\n\nfor (let x of cars) {\ntext += x + \" \";\n}",
        "let language = \"JavaScript\";\nlet text = \"\";\n\nfor (let x of language) {\ntext += x + \" \";\n}",
        "const fruits = new Map([\n[\"apples\", 500],\n[\"bananas\", 300],\n[\"oranges\", 200]\n]);",
        "// Create a Set\nconst letters = new Set();\n\n// Add some values to the Set\nletters.add(\"a\");\nletters.add(\"b\");\nletters.add(\"c\");",
        "class ClassName {\nconstructor() { ... }\n}",
        "class Car {\nconstructor(name, year) {\nthis.name = name;\nthis.year = year;\n}\n}",
        "const myCar1 = new Car(\"Ford\", 2014);\nconst myCar2 = new Car(\"Audi\", 2019);",
        "const myPromise = new Promise(function(myResolve, myReject) {\n// \"Producing Code\" (May take some time)\n\nmyResolve(); // when successful\nmyReject();  // when error\n});\n\n// \"Consuming Code\" (Must wait for a fulfilled Promise).\nmyPromise.then(\nfunction(value) { /* code if successful */ },\nfunction(error) { /* code if some error */ }\n);",
        "const myPromise = new Promise(function(myResolve, myReject) {\nsetTimeout(function() { myResolve(\"I love You !!\"); }, 3000);\n});\n\nmyPromise.then(function(value) {\ndocument.getElementById(\"demo\").innerHTML = value;\n});",
        "const person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\n\nlet id = Symbol('id');\nperson[id] = 140353;\n// Now person[id] = 140353\n// but person.id is still undefined",
        "Symbol(\"id\") == Symbol(\"id\"); // false",
        "function myFunction(x, y = 10) {\n// y is 10 if not passed or undefined\nreturn x + y;\n}\nmyFunction(5); // will return 15",
        "function sum(...args) {\nlet sum = 0;\nfor (let arg of args) sum += arg;\nreturn sum;\n}\n\nlet x = sum(4, 9, 16, 25, 29, 100, 66, 77);",
        "let text = \"Hello world, welcome to the universe.\";\ntext.includes(\"world\")    // Returns true",
        "let text = \"Hello world, welcome to the universe.\";\n\ntext.startsWith(\"Hello\")   // Returns true",
        "var text = \"John Doe\";\ntext.endsWith(\"Doe\")    // Returns true",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nconst f = fruits.entries();\n\nfor (let x of f) {\ndocument.getElementById(\"demo\").innerHTML += x;\n}",
        "Array.from(\"ABCDEFG\")   // Returns [A,B,C,D,E,F,G]",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nconst keys = fruits.keys();\n\nlet text = \"\";\nfor (let x of keys) {\ntext += x + \"<br>\";\n}",
        "const numbers = [4, 9, 16, 25, 29];\nlet first = numbers.find(myFunction);\n\nfunction myFunction(value, index, array) {\nreturn value > 18;\n}",
        "const numbers = [4, 9, 16, 25, 29];\nlet first = numbers.findIndex(myFunction);\n\nfunction myFunction(value, index, array) {\nreturn value > 18;\n}",
        "Math.trunc(4.9);    // returns 4\nMath.trunc(4.7);    // returns 4\nMath.trunc(4.4);    // returns 4\nMath.trunc(4.2);    // returns 4\nMath.trunc(-4.2);    // returns -4",
        "Math.sign(-4);    // returns -1\nMath.sign(0);    // returns 0\nMath.sign(4);    // returns 1",
        "Math.cbrt(8);    // returns 2\nMath.cbrt(64);    // returns 4\nMath.cbrt(125);    // returns 5",
        "Math.log2(2);    // returns 1",
        "Math.log10(10);    // returns 1",
        "let x = Number.EPSILON;",
        "let x = Number.MIN_SAFE_INTEGER;",
        "let x = Number.MAX_SAFE_INTEGER;",
        "Number.isInteger(10);        // returns true\nNumber.isInteger(10.5);      // returns false",
        "Number.isSafeInteger(10);    // returns true\nNumber.isSafeInteger(12345678901234567890);  // returns false",
        "isFinite(10/0);       // returns false\nisFinite(10/1);       // returns true",
        "isNaN(\"Hello\");       // returns true",
        "// Create Target Object\nconst person1 = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\n\n// Create Source Object\nconst person2 = {firstName: \"Anne\",lastName: \"Smith\"};\n\n// Assign Source to Target\nObject.assign(person1, person2);",
        "let text = \"Hello 😄\";\n\nlet pattern = /\\p{Emoji}/u;\nlet result = pattern.test(text);",
        "let text = \"Hello 😄\";\n\nlet pattern = /\\p{Emoji}/;\nlet result = pattern.test(text);",
        "let text = \"abc def ghi\";\nlet pattern = /\\w+/y;\n\n// Start match from position 4\npattern.lastIndex = 4;\nlet result = text.match(pattern);",
        "let text = \"abc def ghi\";\nlet pattern = /\\w+/;\n\n// Start match from position 4\npattern.lastIndex = 4;\nlet result = text.match(pattern);",
        "import { name, age } from \"./person.js\";",
        "import message from \"./message.js\";",
        "let",
        "const",
        "...",
        "for/of",
        "var",
        "class",
        "constructor()",
        "includes()",
        "true",
        "false",
        "startsWith()",
        "endsWith()",
        "entries()",
        "Array.from()",
        "keys()",
        "find()",
        "findIndex()",
        "Math.trunc()",
        "Math.sign()",
        "Math.cbrt()",
        "Math.log2()",
        "Math.log10()",
        "Math.trunc(x)",
        "Math.sign(x)",
        "Math.cbrt(x)",
        "Math.log2(x)",
        "Math.log10(x)",
        "EPSILON",
        "MIN_SAFE_INTEGER",
        "MAX_SAFE_INTEGER",
        "Number.isInteger()",
        "Number.isSafeInteger()",
        "isFinite()",
        "isNaN()",
        "Infinity",
        "NaN",
        "Object.assign()"
      ]
    },
    {
      "title": "JavaScript 2009 (ES5)",
      "summary": "ECMAScript 2009\nThe first major revision to JavaScript.\nECMAScript 2009 is also known as ES5.\nES5 Features\nBrowser Support\nJavaScript 2009 is supported in all modern browsers since July 2013:\nThe \"use strict\" Directive\n\"use strict\" defines that the JavaScript code should be executed in \"strict mode\".\nWith strict mode you can, for example, not use undeclared variables.\nYou can use strict mode in all your programs. It helps you to write cleaner code, like preventing you from using undeclared variables.\n\"use strict\" is just a string expression. Old browsers will not throw an error if they don't understand it.\nRead more in JS Strict Mode.\nProperty Access on Strings\nThe charAt() method returns the character at a specified index (position) in a string:\nExample\nES5 allows property access on strings:\nExample\nProperty access on string might be a little unpredictable.\nRead more in JS String Methods.\nStrings Over Multiple Lines\nExample\nThe \\ method might not have universal support.\nOlder browsers might treat the spaces around the backslash differently.\nSome older browsers do not allow spaces behind the \\ character.\nA safer way to break up a string literal, is to use string addition:\nExample\nReserved Words as Property Names\nES5 allows reserved words as property names:\nObject Example\nString trim()\nThe trim() method removes whitespace from both sides of a string.\nExample\nRead more in JS String Methods.\nREMOVE ADS\nArray.isArray()\nThe isArray() method checks whether an object is an array.\nExample\nRead more in JS Arrays.\nArray forEach()\nThe forEach() method calls a function once for each array element.\nExample\nLearn more in JS Array Iteration Methods.\nArray map()\nThe map() method creates a new array by performing a function on each array element.\nExample\nMultiply each array value by 2:\nLearn more in JS Array Iteration Methods.\nArray filter()\nThe filter() method creates a new array from array elements that passes a test.\nExample\nCreate a new array from elements with a value larger than 18:\nLearn more in JS Array Iteration Methods.\nArray reduce()\nThe reduce() method reduces an array to a single value.\nExample\nFind the sum of all numbers in an array:\nLearn more in JS Array Iteration Methods.\nArray reduceRight()\nThe reduceRight() method reduces an array to a single value (from right to left).\nExample\nFind the sum of all numbers in an array:\nLearn more in JS Array Iteration Methods.\nArray every()\nThe every() method checks if all array values pass a test.\nExample\nCheck if all values are over 18:\nLearn more in JS Array Iteration Methods.\nArray some()\nThe some() method checks if some array values pass a test.\nExample\nCheck if some values are over 18:\nLearn more in JS Array Iteration Methods.\nArray indexOf()\nThe indexOf() method searches for an element value and returns its position.\nExample\nSearch an array for an element value:\nLearn more in JS Array Iteration Methods.\nArray lastIndexOf()\nlastIndexOf() is the same as indexOf(), but searches from the end of the array.\nExample\nLearn more in JS Array Iteration Methods.\nJSON.parse()\nA common use of JSON is to receive data from a web server.\nImagine you received this text string from a web server:\nThe JavaScript function JSON.parse() is used to convert the text into a JavaScript object:\nExample\nRead more in our JSON Tutorial.\nJSON.stringify()\nA common use of JSON is to send data to a web server.\nWhen sending data to a web server, the data has to be a string.\nImagine we have this object in JavaScript:\nUse the JavaScript function JSON.stringify() to convert it into a string.\nThe result will be a string following the JSON notation.\nmyJSON is now a string, and ready to be sent to a server:\nExample\nRead more in our JSON Tutorial.\nDate.now()\nDate.now() returns the number of milliseconds since zero date (January 1. 1970 00:00:00 UTC).\nExample\nDate.now() returns the same as getTime() performed on a Date object.\nLearn more in JS Dates.\nDate toISOString()\nThe toISOString() method converts a Date object to a string, using the ISO standard format:\nExample\nDate toJSON()\ntoJSON() converts a Date object into a string, formatted as a JSON date.\nJSON dates have the same format as the ISO-8601 standard: YYYY-MM-DDTHH:mm:ss.sssZ:\nExample\nProperty Getters\nA property getter is a method that allows you to define how a property value is retrieved when it is accessed.\nThis example creates a getter for a property called fullName:\nExample\nProperty Setters\nA property setter is a method that allows you to define how a property value is set.\nThis example uses a setter to secure upper case updates of language:\nExample\nThis example creates a setter and a getter for the language property:\nExample\nLearn more about Gettes and Setters in JS Object Accessors\nObject.defineProperty()\nObject.defineProperty() is a new Object method in ES5.\nIt lets you define an object property and/or change a property's value and/or metadata.\nExample\nNext example is the same code, except it hides the language property from enumeration:\nExample\nThis example creates a setter and a getter to secure upper case updates of language:\nExample\nObject.create()\nThe Object.create() method creates an object from an existing object.\nExample\nObject.keys()\nThe Object.keys() method returns an array with the keys of an object.\nExample\nObject Management\nES5 added new Object management methods to JavaScript:\nManaging Objects\nLearn more in Object Properties.\nObject Protection\nES5 added Object protection methods to JavaScript:\nProtecting Objects\nLearn more in Object Protection.\nFunction Bind()\nWith the bind() method, an object can borrow a method from another object.\nThis example creates 2 objects (person and member).\nThe member object borrows the fullname method from the person object:\nExample\nLearn more in Function bind().\nTrailing Commas\nES5 allows trailing commas in object and array definitions:\nObject Example\nArray Example\nWARNING\nJSON does not allow trailing commas.\nJSON Objects:\nJSON Arrays:",
      "examples": [
        "var str = \"HELLO WORLD\";\nstr.charAt(0);            // returns H",
        "var str = \"HELLO WORLD\";\nstr[0];                   // returns H",
        "\"Hello \\\nDolly!\";",
        "\"Hello \" +\n\"Dolly!\";",
        "var obj = {name: \"John\", new: \"yes\"}",
        "var str = \"       Hello World!        \";\nalert(str.trim());",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\nresult = Array.isArray(fruits);",
        "const numbers = [45, 4, 9, 16, 25];\n\nnumbers.forEach(myFunction);",
        "const numbers1 = [45, 4, 9, 16, 25];\nconst numbers2 = numbers1.map(myFunction);\n\nfunction myFunction(value) {\nreturn value * 2;\n}",
        "const numbers = [45, 4, 9, 16, 25];\nconst over18 = numbers.filter(myFunction);\n\nfunction myFunction(value) {\nreturn value > 18;\n}",
        "const numbers = [45, 4, 9, 16, 25];\nlet sum = numbers.reduce(myFunction);\n\nfunction myFunction(total, value) {\nreturn total + value;\n}",
        "const numbers1 = [45, 4, 9, 16, 25];\nlet sum = numbers1.reduceRight(myFunction);\n\nfunction myFunction(total, value) {\nreturn total + value;\n}",
        "const numbers = [45, 4, 9, 16, 25];\nlet allOver18 = numbers.every(myFunction);\n\nfunction myFunction(value) {\nreturn value > 18;\n}",
        "const numbers = [45, 4, 9, 16, 25];\nlet allOver18 = numbers.some(myFunction);\n\nfunction myFunction(value) {\nreturn value > 18;\n}",
        "const fruits = [\"Apple\", \"Orange\", \"Apple\", \"Mango\"];\nlet position = fruits.indexOf(\"Apple\") + 1;",
        "const fruits = [\"Apple\", \"Orange\", \"Apple\", \"Mango\"];\nlet position = fruits.lastIndexOf(\"Apple\") + 1;",
        "'{\"name\":\"John\", \"age\":30, \"city\":\"New York\"}'",
        "const txt = '{\"name\":\"John\", \"age\":30, \"city\":\"New York\"}'\n\nconst myObj = JSON.parse(txt);",
        "const myObj = {name:\"John\", age:30, city:\"New York\"};",
        "const myJSON = JSON.stringify(myObj);",
        "const myObj = {name:\"John\", age:30, city:\"New York\"};\nconst myJSON = JSON.stringify(myObj);",
        "var timInMSs = Date.now();",
        "const d = new Date();\ndocument.getElementById(\"demo\").innerHTML = d.toISOString();",
        "d = new Date();\ndocument.getElementById(\"demo\").innerHTML = d.toJSON();",
        "// Create an object:\nconst Person = {\nfirstName: \"John\",\nlastName : \"Doe\",\nget fullName() {\nreturn this.firstName + \" \" + this.lastName;\n}\n};\n\n// Display data from the object using a getter:\ndocument.getElementById(\"demo\").innerHTML = Person.fullName;",
        "const Person = {\nfirstName: \"John\",\nlastName : \"Doe\",\nlanguage : \"NO\",\nset lang(value) {\nthis.language = value.toUpperCase();\n}\n};\n\n// Set an object property using a setter:\nperson.lang = \"en\";\n\n// Display data from the object:\ndocument.getElementById(\"demo\").innerHTML = Person.language;",
        "const Person = {\nfirstName: \"John\",\nlastName : \"Doe\",\nlanguage : \"NO\",\nget lang() {\nreturn this.language;\n},\nset lang(value) {\nthis.language = value;\n}\n};\n\n// Set an object property using a setter:\nperson.lang = \"en\";\n\n// Display data from the object using a getter:\ndocument.getElementById(\"demo\").innerHTML = Person.lang;",
        "// Create an Object:\nconst person = {\nfirstName: \"John\",\nlastName : \"Doe\",\nlanguage : \"NO\",\n};\n\n// Change a Property:\nObject.defineProperty(person, \"language\", {\nvalue: \"EN\",\nwritable : true,\nenumerable : true,\nconfigurable : true\n});\n\n// Enumerate Properties\nlet txt = \"\";\nfor (let x in person) {\ntxt += person[x] + \"<br>\";\n}\n\n// Display Properties\ndocument.getElementById(\"demo\").innerHTML = txt;",
        "// Create an Object:\nconst person = {\nfirstName: \"John\",\nlastName : \"Doe\",\nlanguage : \"NO\",\n};\n\n// Change a Property:\nObject.defineProperty(person, \"language\", {\nvalue: \"EN\",\nwritable : true,\nenumerable : false,\nconfigurable : true\n});\n\n// Enumerate Properties\nlet txt = \"\";\nfor (let x in person) {\ntxt += person[x] + \"<br>\";\n}\ndocument.getElementById(\"demo\").innerHTML = txt;",
        "// Create an Object:\nconst person = {\nfirstName: \"John\",\nlastName : \"Doe\",\nlanguage : \"NO\"\n};\n\n// Change a Property:\nObject.defineProperty(person, \"language\", {\nget : function() { return language },\nset : function(value) { language = value.toUpperCase()}\n});\n\n// Change Language\nperson.language = \"en\";\n\n// Display Language\ndocument.getElementById(\"demo\").innerHTML = person.language;",
        "// Create an Object:\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\"\n};\n\n// Create new Object\nconst man = Object.create(person);\nman.firstName = \"Peter\";",
        "// Create an Object\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\n\n// Get the Keys\nconst keys = Object.keys(person);",
        "// Adding or changing an object property\nObject.defineProperty(object, property, descriptor)\n\n// Adding or changing object properties\nObject.defineProperties(object, descriptors)\n\n// Accessing a Property\nObject.getOwnPropertyDescriptor(object, property)\n\n// Accessing Properties\nObject.getOwnPropertyDescriptors(object)\n\n// Returns all properties as an array\nObject.getOwnPropertyNames(object)\n\n// Accessing the prototype\nObject.getPrototypeOf(object)",
        "// Prevents adding properties to an object\nObject.preventExtensions(object)\n\n// Returns true if properties can be added to an object\nObject.isExtensible(object)\n\n// Prevents changes of object properties (not values)\nObject.seal(object)\n\n// Returns true if object is sealed\nObject.isSealed(object)\n\n// Prevents any changes to an object\nObject.freeze(object)\n\n// Returns true if object is frozen\nObject.isFrozen(object)",
        "const person = {\nfirstName:\"John\",\nlastName: \"Doe\",\nfullName: function () {\nreturn this.firstName + \" \" + this.lastName;\n}\n}\n\nconst member = {\nfirstName:\"Hege\",\nlastName: \"Nilsen\",\n}\n\nlet fullName = person.fullName.bind(member);",
        "person = {\nfirstName: \"John\",\nlastName: \" Doe\",\nage: 46,\n}",
        "points = [\n1,\n5,\n10,\n25,\n40,\n100,\n];",
        "// Allowed:\nvar person = '{\"firstName\":\"John\", \"lastName\":\"Doe\", \"age\":46}'\nJSON.parse(person)\n\n// Not allowed:\nvar person = '{\"firstName\":\"John\", \"lastName\":\"Doe\", \"age\":46,}'\nJSON.parse(person)",
        "// Allowed:\npoints = [40, 100, 1, 5, 25, 10]\n\n// Not allowed:\npoints = [40, 100, 1, 5, 25, 10,]",
        "\"use strict\"",
        "charAt()",
        "trim()",
        "isArray()",
        "forEach()",
        "map()",
        "filter()",
        "reduce()",
        "reduceRight()",
        "every()",
        "some()",
        "indexOf()",
        "lastIndexOf()",
        "JSON.parse()",
        "JSON.stringify()",
        "Date.now()",
        "Date",
        "toISOString()",
        "toJSON()",
        "Object.defineProperty()",
        "Object.create()",
        "Object.keys()",
        "bind()"
      ]
    },
    {
      "title": "Internet Explorer Retirement Earlier Announcements Google",
      "summary": "Microsoft ended all support for Internet Explorer June 15, 2022.\nInternet Explorer Retirement Dates:\nSource ...\nWindows 11 Removes Internet Explorer\nInternet Explorer is disabled in Windows 11\nWindows 10 Replaces Internet Explorer\nInternet Explorer is \"replaced\" by Edge in Windows 10\nInternet Explorer Retires\nIE 11 goes out of support on June 15 2022\nMicrosoft Edge Legacy\nEdge was the default browser for Windows 10.\nIt was built with Microsoft's browser engine EdgeHTML and their Chakra JavaScript engine.\nThe first versions of Edge (12-18), are now referred to as \"Edge Legacy\".\nThe Microsoft support for Edge Legacy ended on March 9, 2021.\nFuture Windows updates will replace Edge Legacy with The New Edge.\nSource ...\nThe New Edge\nThe new Microsoft Edge is Chromium based with Blink and V8 engines.\nIt was released in January 2020, and is available for Windows 7, 8, and 10.\nIt can also be downloaded for macOS, iOS, and Android.\nThe new Edge follows the Modern Lifecycle Policy (updates on an approx. six-week cycle).\nREMOVE ADS\nGoogle Ad Manager\nAs of March 28, 2022, Google Ad Manager no longer supports ad serving for Internet Explorer versions 11 and below.\nSource ...\nGoogle Search\nAs of October 1, 2021, Google Search no longer supports Internet Explorer 11.\nSource ...\nGoogle Workspace\nAs of March 15, 2021, Google Workspace no longer supports Internet Explorer 11.\nSource ...\nOld Operating Systems\nInternet Explorer 11 is still a component in some old Windows operating system and follows the Lifecycle Policy for these products:\nOld Applications\nSome old PCs (like in public libraries) are still using Internet Explorer.\nSome legacy web applications are using Internet Explorer.\nSome legacy web applications are using Internet Explorer runtime DLLs.\nSome AJAX based applications are using Microsoft ActiveX components.\nIn order to ease the migration from Internet Explorer, Microsoft Edge offers Internet Explorer Mode, providing backward compatibility and enabling customers to continue to run legacy web applications.",
      "examples": []
    },
    {
      "title": "JavaScript History",
      "summary": "JavaScript / ECMAScript\nJavaScript was invented by Brendan Eich in 1995.\nIt was developed for Netscape 2, and became the ECMA-262 standard in 1997.\nAfter Netscape handed JavaScript over to ECMA, the Mozilla foundation continued to develop JavaScript for the Firefox browser. Mozilla's latest version was 1.8.5. (Identical to ES5).\nInternet Explorer (IE4) was the first browser to support ECMA-262 Edition 1 (ES1).\nREMOVE ADS\nThe ECMA Technical Committee 39\nIn 1996, Netscape and Brendan Eich took JavaScript to the ECMA international standards organization, and a technical committee (TC39) was created to develop the language.\nECMA-262 Edition 1 was released in June 1997.\nFrom ES4 to ES6\nWhen the TC39 committee got together in Oslo in 2008, to agree on ECMAScript 4, they were divided into 2 very different camps:\nThe ECMAScript 3.1 Camp:\nMicrosoft and Yahoo who wanted an incremental upgrade from ES3.\nThe ECMAScript 4 Camp:\nAdobe, Mozilla, Opera, and Google who wanted a massive ES4 upgrade.\nAugust 13 2008, Brendan Eich wrote an email:\nIt's no secret that the JavaScript standards body, Ecma's Technical Committee 39, has been split for over a year, with some members favoring ES4, a major fourth edition to ECMA-262, and others advocating ES3.1 based on the existing ECMA-262 Edition 3 (ES3) specification. Now, I'm happy to report, the split is over.\nThe solution was to work together:\nECMAScript 4 was renamed to ES5\nES5 should be an incremental upgrade of ECMAScript 3.\nFeatures of ECMAScript 4 should be picked up in later versions.\nTC39 should develop a new major release, bigger in scope than ES5.\nThe planned new release (ES6) was codenamed \"Harmony\" (Because of the split it created?).\nES5 was a huge success. It was released in 2009, and all major browsers (including Internet Explorer) were fully compliant by July 2013:\nES6 was also a huge success. It was released in 2015, and all major browsers were fully compliant by March 2017:",
      "examples": []
    },
    {
      "title": "JavaScript Function Definitions",
      "summary": "JavaScript functions are defined with the function keyword.\nYou can use a function declaration or a function expression.\nFunction Declarations\nEarlier in this tutorial, you learned that functions are declared with the following syntax:\nDeclared functions are not executed immediately. They are \"saved for later use\", and will be executed later, when they are invoked (called upon).\nExample\nSemicolons are used to separate executable JavaScript statements.\nSince a function declaration is not an executable statement, it is not common to end it with a semicolon.\nFunction Expressions\nA JavaScript function can also be defined using an expression.\nA function expression can be stored in a variable:\nExample\nAfter a function expression has been stored in a variable, the variable can be used as a function:\nExample\nThe function above is actually an anonymous function (a function without a name).\nFunctions stored in variables do not need function names. They are always invoked (called) using the variable name.\nThe function above ends with a semicolon because it is a part of an executable statement.\nREMOVE ADS\nThe Function() Constructor\nAs you have seen in the previous examples, JavaScript functions are defined with the function keyword.\nFunctions can also be defined with a built-in JavaScript function constructor called Function().\nExample\nYou actually don't have to use the function constructor. The example above is the same as writing:\nExample\nMost of the time, you can avoid using the new keyword in JavaScript.\nFunction Hoisting\nEarlier in this tutorial, you learned about \"hoisting\" (JavaScript Hoisting).\nHoisting is JavaScript's default behavior of moving declarations to the top of the current scope.\nHoisting applies to variable declarations and to function declarations.\nBecause of this, JavaScript functions can be called before they are declared:\nFunctions defined using an expression are not hoisted.\nSelf-Invoking Functions\nFunction expressions can be made \"self-invoking\".\nA self-invoking expression is invoked (started) automatically, without being called.\nFunction expressions will execute automatically if the expression is followed by ().\nYou cannot self-invoke a function declaration.\nYou have to add parentheses around the function to indicate that it is a function expression:\nExample\nThe function above is actually an anonymous self-invoking function (function without name).\nFunctions Can Be Used as Values\nJavaScript functions can be used as values:\nExample\nJavaScript functions can be used in expressions:\nExample\nFunctions are Objects\nThe typeof operator in JavaScript returns \"function\" for functions.\nBut, JavaScript functions can best be described as objects.\nJavaScript functions have both properties and methods.\nThe arguments.length property returns the number of arguments received when the function was invoked:\nExample\nThe toString() method returns the function as a string:\nExample\nA function defined as the property of an object, is called a method to the object.\nA function designed to create new objects, is called an object constructor.",
      "examples": [
        "function functionName(parameters) {\n// code to be executed\n}",
        "function myFunction(a, b) {\nreturn a * b;\n}",
        "const x = function (a, b) {return a * b};",
        "const x = function (a, b) {return a * b};\nlet z = x(4, 3);",
        "const myFunction = new Function(\"a\", \"b\", \"return a * b\");\n\nlet x = myFunction(4, 3);",
        "const myFunction = function (a, b) {return a * b};\n\nlet x = myFunction(4, 3);",
        "myFunction(5);\n\nfunction myFunction(y) {\nreturn y * y;\n}",
        "(function () {\nlet x = \"Hello!!\";  // I will invoke myself\n})();",
        "function myFunction(a, b) {\nreturn a * b;\n}\n\nlet x = myFunction(4, 3);",
        "function myFunction(a, b) {\nreturn a * b;\n}\n\nlet x = myFunction(4, 3) * 2;",
        "function myFunction(a, b) {\nreturn arguments.length;\n}",
        "function myFunction(a, b) {\nreturn a * b;\n}\n\nlet text = myFunction.toString();",
        "function",
        "Function()",
        "new",
        "typeof",
        "arguments.length",
        "toString()"
      ]
    },
    {
      "title": "JavaScript Arrow Function",
      "summary": "Arrow functions were introduced in ES6.\nArrow functions allows a shorter syntax for function expressions.\nYou don't need the function keyword, the return keyword, and the curly brackets:\nBefore Arrow:\nFunction to compute the product of a and b\nTry it Yourself »\nWith Arrow\nTry it Yourself »\nBefore Arrow:\nTry it Yourself »\nWith Arrow Function:\nTry it Yourself »\nIf the function has only one statement that returns a value, you can remove the brackets and the return keyword:\nArrow Functions Return Value by Default:\nTry it Yourself »\nNote\nThis works only if the function has only one statement.\nIf you have parameters, you pass them inside the parentheses:\nArrow Function With Parameters:\nTry it Yourself »\nIn fact, if you have only one parameter, you can skip the parentheses as well:\nArrow Function Without Parentheses:\nTry it Yourself »\nNote\nArrow functions do not have their own this. They are not well suited for defining object methods.\nArrow functions are not hoisted. They must be defined before they are used.\nYou can only omit the return keyword and the curly brackets if the function is a single statement. Because of this, it might be a good habit to always keep them:\nExample\nREMOVE ADS\nWhat About this?\nThe handling of this is also different in arrow functions compared to regular functions.\nIn short, with arrow functions there are no binding of this.\nIn regular functions the this keyword represented the object that called the function, which could be the window, the document, a button or whatever.\nWith arrow functions the this keyword always represents the object that defined the arrow function.\nLet us take a look at two examples to understand the difference.\nBoth examples call a method twice, first when the page loads, and once again when the user clicks a button.\nThe first example uses a regular function, and the second example uses an arrow function.\nThe result shows that the first example returns two different objects (window and button), and the second example returns the window object twice, because the window object is the \"owner\" of the function.\nExample\nWith a regular function this represents the object that calls the function:\nTry it Yourself »\nExample\nWith an arrow function this represents the owner of the function:\nTry it Yourself »\nRemember these differences when you are working with functions. Sometimes the behavior of regular functions is what you want, if not, use arrow functions.\nBrowser Support\n= () => {} is an ES6 feature.\nES6 is fully supported in all modern browsers since June 2017:",
      "examples": [
        "let myFunction = (a, b) => a * b;",
        "let myFunction = function(a, b) {return a * b}",
        "let hello = function() {\nreturn \"Hello World!\";\n}",
        "let hello = () => {\nreturn \"Hello World!\";\n}",
        "let hello = () => \"Hello World!\";",
        "let hello = (val) => \"Hello \" + val;",
        "let hello = val => \"Hello \" + val;",
        "// This will not work\nlet myFunction = (x, y) => { x * y } ;\n\n// This will not work\nlet myFunction = (x, y) => return x * y ;\n\n// Only this will work\nlet myFunction = (x, y) => { return x * y };",
        "// Regular Function:\nhello = function() {\ndocument.getElementById(\"demo\").innerHTML += this;\n}\n\n// The window object calls the function:\nwindow.addEventListener(\"load\", hello);\n\n// A button object calls the function:\ndocument.getElementById(\"btn\").addEventListener(\"click\", hello);",
        "// Arrow Function:\nhello = () => {\ndocument.getElementById(\"demo\").innerHTML += this;\n}\n\n// The window object calls the function:\nwindow.addEventListener(\"load\", hello);\n\n// A button object calls the function:\ndocument.getElementById(\"btn\").addEventListener(\"click\", hello);",
        "return",
        "this",
        "= () => {}"
      ]
    },
    {
      "title": "JavaScript Function Parameters",
      "summary": "A JavaScript function does not perform any checking on parameter values (arguments).\nFunction Parameters and Arguments\nEarlier in this tutorial, you learned that functions can have parameters:\nFunction parameters are the names listed in the function definition.\nFunction arguments are the real values passed to (and received by) the function.\nParameter Rules\nJavaScript function definitions do not specify data types for parameters.\nJavaScript functions do not perform type checking on the passed arguments.\nJavaScript functions do not check the number of arguments received.\nDefault Parameters\nIf a function is called with missing arguments (less than declared), the missing values are set to undefined.\nSometimes this is acceptable, but sometimes it is better to assign a default value to the parameter:\nExample\nDefault Parameter Values\nES6 allows function parameters to have default values.\nExample\nIf y is not passed or undefined, then y = 10.\nFunction Rest Parameter\nThe rest parameter (...) allows a function to treat an indefinite number of arguments as an array:\nExample\nREMOVE ADS\nThe Arguments Object\nJavaScript functions have a built-in object called the arguments object.\nThe argument object contains an array of the arguments used when the function was called (invoked).\nThis way you can simply use a function to find (for instance) the highest value in a list of numbers:\nExample\nOr create a function to sum all input values:\nExample\nIf a function is called with too many arguments (more than declared), these arguments can be reached using the arguments object.\nArguments are Passed by Value\nThe parameters, in a function call, are the function's arguments.\nJavaScript arguments are passed by value: The function only gets to know the values, not the argument's locations.\nIf a function changes an argument's value, it does not change the parameter's original value.\nChanges to arguments are not visible (reflected) outside the function.\nObjects are Passed by Reference\nIn JavaScript, object references are values.\nBecause of this, objects will behave like they are passed by reference:\nIf a function changes an object property, it changes the original value.\nChanges to object properties are visible (reflected) outside the function.",
      "examples": [
        "function functionName(parameter1, parameter2, parameter3) {\n// code to be executed\n}",
        "function myFunction(x, y) {\nif (y === undefined) {\ny = 2;\n}\n}",
        "function myFunction(x, y = 10) {\nreturn x + y;\n}\nmyFunction(5);",
        "function sum(...args) {\nlet sum = 0;\nfor (let arg of args) sum += arg;\nreturn sum;\n}\n\nlet x = sum(4, 9, 16, 25, 29, 100, 66, 77);",
        "x = findMax(1, 123, 500, 115, 44, 88);\n\nfunction findMax() {\nlet max = -Infinity;\nfor (let i = 0; i < arguments.length; i++) {\nif (arguments[i] > max) {\nmax = arguments[i];\n}\n}\nreturn max;\n}",
        "x = sumAll(1, 123, 500, 115, 44, 88);\n\nfunction sumAll() {\nlet sum = 0;\nfor (let i = 0; i < arguments.length; i++) {\nsum += arguments[i];\n}\nreturn sum;\n}",
        "function",
        "undefined"
      ]
    },
    {
      "title": "JavaScript Function Invocation",
      "summary": "The code inside a JavaScript function will execute when \"something\" invokes it.\nInvoking a JavaScript Function\nThe code inside a function is not executed when the function is defined.\nThe code inside a function is executed when the function is invoked.\nIt is common to use the term \"call a function\" instead of \"invoke a function\".\nIt is also common to say \"call upon a function\", \"start a function\", or \"execute a function\".\nIn this tutorial, we will use invoke, because a JavaScript function can be invoked without being called.\nInvoking a Function as a Function\nExample\nThe function above does not belong to any object. But in JavaScript there is always a default global object.\nIn HTML the default global object is the HTML page itself, so the function above \"belongs\" to the HTML page.\nIn a browser the page object is the browser window. The function above automatically becomes a window function.\nNote\nThis is a common way to invoke a JavaScript function, but not a very good practice.\nGlobal variables, methods, or functions can easily create name conflicts and bugs in the global object.\nmyFunction() and window.myFunction() is the same function:\nExample\nWhat is this?\nIn JavaScript, the this keyword refers to an object.\nThe this keyword refers to different objects depending on how it is used:\nNote\nthis is not a variable.\nthis is a keyword.\nYou cannot change the value of this.\nREMOVE ADS\nThe Global Object\nWhen a function is called without an owner object, the value of this becomes the global object.\nIn a web browser the global object is the browser window.\nThis example returns the window object as the value of this:\nExample\nInvoking a function as a global function, causes the value of this to be the global object.\nUsing the window object as a variable can easily crash your program.\nInvoking a Function as a Method\nIn JavaScript you can define functions as object methods.\nThe following example creates an object (myObject), with two properties (firstName and lastName), and a method (fullName):\nExample\nThe fullName method is a function. The function belongs to the object. myObject is the owner of the function.\nThe thing called this, is the object that \"owns\" the JavaScript code. In this case the value of this is myObject.\nTest it! Change the fullName method to return the value of this:\nExample\nInvoking a function as an object method, causes the value of this to be the object itself.\nInvoking a Function with the Constructor\nIf a function invocation is preceded with the new keyword, it is a constructor invocation.\nIt looks like you create a new function, but since JavaScript functions are objects you actually create a new object:\nExample\nA constructor invocation creates a new object. The new object inherits the properties and methods from its constructor.\nThe this keyword in the constructor does not have a value.\nThe value of this will be the new object created when the function is invoked.",
      "examples": [
        "function myFunction(a, b) {\nreturn a * b;\n}\nmyFunction(10, 2);           // Will return 20",
        "function myFunction(a, b) {\nreturn a * b;\n}\nwindow.myFunction(10, 2);    // Will also return 20",
        "let x = myFunction();            // x will be the window object\n\nfunction myFunction() {\nreturn this;\n}",
        "const myObject = {\nfirstName:\"John\",\nlastName: \"Doe\",\nfullName: function () {\nreturn this.firstName + \" \" + this.lastName;\n}\n}\nmyObject.fullName();         // Will return \"John Doe\"",
        "const myObject = {\nfirstName:\"John\",\nlastName: \"Doe\",\nfullName: function () {\nreturn this;\n}\n}\n\n// This will return [object Object] (the owner object)\nmyObject.fullName();",
        "// This is a function constructor:\nfunction myFunction(arg1, arg2) {\nthis.firstName = arg1;\nthis.lastName  = arg2;\n}\n\n// This creates a new object\nconst myObj = new myFunction(\"John\", \"Doe\");\n\n// This will return \"John\"\nmyObj.firstName;",
        "function",
        "this",
        "undefined",
        "call()",
        "apply()",
        "bind()",
        "new"
      ]
    },
    {
      "title": "JavaScript this in Functions",
      "summary": "What is this?\nIn JavaScript, the this keyword refers to an object.\nThe this keyword refers to different objects depending on how it is used:\nNote\nthis is not a variable.\nthis is a keyword.\nYou cannot change the value of this.\nthis Alone\nWhen used alone, this refers to the global object.\nBecause this is in the global scope.\nIn a browser window the global object is [object Window]:\nExample\nIn strict mode, when used alone, this also refers to the global object:\nExample\nthis in a Function (Default)\nIn a function, by default, this is the global object.\nIn a browser window, the global object is [object Window]:\nExample\nREMOVE ADS\nthis in a Function (Strict)\nJavaScript strict mode does not allow default binding.\nWhen used in a function, in strict mode, this is undefined.\nExample\nthis in Event Handlers\nIn HTML event handlers, this refers to the HTML element that received the event:\nExample\nTry it Yourself »\nThis Precedence\nUse the following precedence of order to determine which object this refers to:",
      "examples": [
        "let x = this;",
        "\"use strict\";\nlet x = this;",
        "function myFunction() {\nreturn this;\n}",
        "\"use strict\";\nfunction myFunction() {\nreturn this;\n}",
        "<button onclick=\"this.style.display='none'\">\nClick to Remove Me!\n</button>",
        "this",
        "undefined",
        "call()",
        "apply()",
        "bind()",
        "[object Window]"
      ]
    },
    {
      "title": "JavaScript Function call()",
      "summary": "Method Reuse\nWith the call() method, you can write a method that can be used on different objects.\nAll Functions are Methods\nIn JavaScript all functions are object methods.\nIf a function is not a method of a JavaScript object, it is a function of the global object (see previous chapter).\nThe example below creates an object with 3 properties, firstName, lastName, fullName.\nExample\nIn the example above, this refers to the person object.\nthis.firstName means the firstName property of this.\nSame as:\nthis.firstName means the firstName property of person.\nWhat is this?\nIn JavaScript, the this keyword refers to an object.\nThe this keyword refers to different objects depending on how it is used:\nNote\nthis is not a variable.\nthis is a keyword.\nYou cannot change the value of this.\nREMOVE ADS\nThe JavaScript call() Method\nThe call() method is a predefined JavaScript method.\nIt can be used to invoke (call) a method with an object as an argument (parameter).\nNote\nWith call(), an object can use a method belonging to another object.\nThis example calls the fullName method of person, using it on person1:\nExample\nTry it Yourself »\nThis example calls the fullName method of person, using it on person2:\nExample\nTry it Yourself »\nThe call() Method with Arguments\nThe call() method can accept arguments:\nExample\nTry it Yourself »",
      "examples": [
        "const person = {\nfirstName:\"John\",\nlastName: \"Doe\",\nfullName: function () {\nreturn this.firstName + \" \" + this.lastName;\n}\n}\n\n// This will return \"John Doe\":\nperson.fullName();",
        "const person = {\nfullName: function() {\nreturn this.firstName + \" \" + this.lastName;\n}\n}\nconst person1 = {\nfirstName:\"John\",\nlastName: \"Doe\"\n}\nconst person2 = {\nfirstName:\"Mary\",\nlastName: \"Doe\"\n}\n\n// This will return \"John Doe\":\nperson.fullName.call(person1);",
        "const person = {\nfullName: function() {\nreturn this.firstName + \" \" + this.lastName;\n}\n}\nconst person1 = {\nfirstName:\"John\",\nlastName: \"Doe\"\n}\nconst person2 = {\nfirstName:\"Mary\",\nlastName: \"Doe\"\n}\n\n// This will return \"Mary Doe\"\nperson.fullName.call(person2);",
        "const person = {\nfullName: function(city, country) {\nreturn this.firstName + \" \" + this.lastName + \",\" + city + \",\" + country;\n}\n}\n\nconst person1 = {\nfirstName:\"John\",\nlastName: \"Doe\"\n}\n\nperson.fullName.call(person1, \"Oslo\", \"Norway\");",
        "call()",
        "this",
        "undefined",
        "apply()",
        "bind()"
      ]
    },
    {
      "title": "JavaScript Function apply()",
      "summary": "Method Reuse\nWith the apply() method, you can write a method that can be used on different objects.\nThe JavaScript apply() Method\nThe apply() method is similar to the call() method (previous chapter).\nIn this example the fullName method of person is applied on person1:\nExample\nTry it Yourself »\nThe Difference Between call() and apply()\nThe difference is:\nThe call() method takes arguments separately.\nThe apply() method takes arguments as an array.\nThe apply() method is very handy if you want to use an array instead of an argument list.\nThe apply() Method with Arguments\nThe apply() method accepts arguments in an array:\nExample\nTry it Yourself »\nCompared with the call() method:\nExample\nTry it Yourself »\nREMOVE ADS\nSimulate a Max Method on Arrays\nYou can find the largest number (in a list of numbers) using the Math.max() method:\nExample\nTry it Yourself »\nSince JavaScript arrays do not have a max() method, you can apply the Math.max() method instead.\nExample\nTry it Yourself »\nThe first argument (null) does not matter. It is not used in this example.\nThese examples will give the same result:\nExample\nTry it Yourself »\nExample\nTry it Yourself »\nExample\nTry it Yourself »\nJavaScript Strict Mode\nIn JavaScript strict mode, if the first argument of the apply() method is not an object, it becomes the owner (object) of the invoked function. In \"non-strict\" mode, it becomes the global object.",
      "examples": [
        "const person = {\nfullName: function() {\nreturn this.firstName + \" \" + this.lastName;\n}\n}\n\nconst person1 = {\nfirstName: \"Mary\",\nlastName: \"Doe\"\n}\n\n// This will return \"Mary Doe\":\nperson.fullName.apply(person1);",
        "const person = {\nfullName: function(city, country) {\nreturn this.firstName + \" \" + this.lastName + \",\" + city + \",\" + country;\n}\n}\n\nconst person1 = {\nfirstName:\"John\",\nlastName: \"Doe\"\n}\n\nperson.fullName.apply(person1, [\"Oslo\", \"Norway\"]);",
        "const person = {\nfullName: function(city, country) {\nreturn this.firstName + \" \" + this.lastName + \",\" + city + \",\" + country;\n}\n}\n\nconst person1 = {\nfirstName:\"John\",\nlastName: \"Doe\"\n}\n\nperson.fullName.call(person1, \"Oslo\", \"Norway\");",
        "Math.max(1,2,3);  // Will return 3",
        "Math.max.apply(null, [1,2,3]); // Will also return 3",
        "Math.max.apply(Math, [1,2,3]); // Will also return 3",
        "Math.max.apply(\" \", [1,2,3]); // Will also return 3",
        "Math.max.apply(0, [1,2,3]); // Will also return 3",
        "apply()",
        "call()",
        "Math.max()"
      ]
    },
    {
      "title": "JavaScript Function bind()",
      "summary": "Function Borrowing\nWith the bind() method, an object can borrow a method from another object.\nThe example below creates 2 objects (person and member).\nThe member object borrows the fullname method from the person object:\nExample\nPreserving this\nSometimes the bind() method has to be used to prevent losing this.\nIn the following example, the person object has a display method. In the display method, this refers to the person object:\nExample\nWhen a function is used as a callback, this is lost.\nThis example will try to display the person name after 3 seconds, but it will display undefined instead:\nExample\nThe bind() method solves this problem.\nIn the following example, the bind() method is used to bind person.display to person.\nThis example will display the person name after 3 seconds:\nExample\nREMOVE ADS\nWhat is this?\nIn JavaScript, the this keyword refers to an object.\nThe this keyword refers to different objects depending on how it is used:\nNote\nthis is not a variable.\nthis is a keyword.\nYou cannot change the value of this.",
      "examples": [
        "const person = {\nfirstName:\"John\",\nlastName: \"Doe\",\nfullName: function () {\nreturn this.firstName + \" \" + this.lastName;\n}\n}\n\nconst member = {\nfirstName:\"Hege\",\nlastName: \"Nilsen\",\n}\n\nlet fullName = person.fullName.bind(member);",
        "const person = {\nfirstName:\"John\",\nlastName: \"Doe\",\ndisplay: function () {\nlet x = document.getElementById(\"demo\");\nx.innerHTML = this.firstName + \" \" + this.lastName;\n}\n}\n\nperson.display();",
        "const person = {\nfirstName:\"John\",\nlastName: \"Doe\",\ndisplay: function () {\nlet x = document.getElementById(\"demo\");\nx.innerHTML = this.firstName + \" \" + this.lastName;\n}\n}\n\nsetTimeout(person.display, 3000);",
        "const person = {\nfirstName:\"John\",\nlastName: \"Doe\",\ndisplay: function () {\nlet x = document.getElementById(\"demo\");\nx.innerHTML = this.firstName + \" \" + this.lastName;\n}\n}\n\nlet display = person.display.bind(person);\nsetTimeout(display, 3000);",
        "bind()",
        "this",
        "undefined",
        "call()",
        "apply()"
      ]
    },
    {
      "title": "JavaScript Closures",
      "summary": "JavaScript variables can belong to:\nThe local scope or The global scope\nGlobal variables can be made local (private) with closures.\nClosures makes it possible for a function to have \"private\" variables.\nLocal Variables\nA local variable is a \"private\" variable defined inside a function.\nA function can access all variables in the local scope.\nExample\na is a local variable defined inside the function:\nGlobal Variables\nA global variable is a \"public\" variable defined outside a function.\nA function can access all variables in the global scope:\nExample\na is global variable defined outside the function:\nIn a web page, global variables belong to the page.\nGlobal variables can be used (or changed) by all scripts in the page.\nA local variable can only be used inside the function where it is defined. It is private and hidden from other functions and other scripting code.\nGlobal and local variables with the same name are different variables. Modifying one, does not modify the other.\nNote\nUndeclared variables (created without a keyword var, let, const), are always global, even if they are created inside a function.\nExample\nThe variable a is a global variable because it is undeclared:\nREMOVE ADS\nVariable Lifetime\nGlobal variables live until the page is discarded, like when you navigate to another page or close the window.\nLocal variables have short lives. They are created when the function is invoked, and deleted when the function is finished.\nA Counter Dilemma\nSuppose you want to use a variable for counting something, and you want this counter to be available to everyone (all functions).\nYou could use a global variable, and a function to increase the counter:\nExample\nWarning !\nThere is a problem with the solution above: Any code on the page can change the counter, without calling add().\nThe counter should be local to the add() function, to prevent other code from changing it:\nExample\nIt did not work because we display the global counter instead of the local counter.\nWe can remove the global counter and access the local counter by letting the function return it:\nExample\nIt did not work because we reset the local counter every time we call the function.\nSolution\nA JavaScript inner function can solve this.\nJavaScript Nested Functions\nAll functions have access to the global scope.\nIn fact, in JavaScript, all functions have access to the scope \"above\" them.\nJavaScript supports nested functions. Nested functions have access to the scope \"above\" them.\nExample\nThe inner function plus() has access to the counter variable in the parent function:\nThis could have solved the counter dilemma, if we could reach the plus() function from the outside.\nWe also need to find a way to execute counter = 0 only once.\nSolution\nWe need a closure.\nJavaScript Closures\nExample\nExample Explained\nThe variable add is assigned to the return value of a function.\nThe function only runs once. It sets the counter to zero (0), and returns a function expression.\nThis way add becomes a function. The \"wonderful\" part is that it can access the counter in its parent scope.\nThis is called a closure. It makes it possible for a function to have \"private\" variables.\nThe counter is protected by the scope of the myCounter function, and can only be changed using the add function.\nConclusion\nA closure is a function that has access to the parent scope, after the parent function has closed.\nClosures has historically been used to:\nCreate private variables\nPreserve state between function calls\nSimulate block-scoping before let and const existed\nImplement certain design patterns like currying and memoization\nNote\nOld JavaScript code will often contain closures, but modern JavaScript will not use closures as frequently as before.\nECMAScript 2015 and subsequent JavaScript versions have introduced new language features that provide alternatives to closures.\nWhile closures are a powerful concept in JavaScript, new JavaScript features make some use cases for closures less necessary.",
      "examples": [
        "function myFunction() {\nlet a = 4;\nreturn a * a;\n}",
        "let a = 4;\nfunction myFunction() {\nreturn a * a;\n}",
        "function myFunction() {\na = 4;\n}",
        "// Initiate counter\nlet counter = 0;\n\n// Function to increment counter\nfunction add() {\ncounter += 1;\n}\n\n// Call add() 3 times\nadd();\nadd();\nadd();\n\n// The counter should now be 3",
        "// Initiate counter\nlet counter = 0;\n\n// Function to increment counter\nfunction add() {\nlet counter = 0;\ncounter += 1;\n}\n\n// Call add() 3 times\nadd();\nadd();\nadd();\n\n// The counter should now be 3. But it is 0",
        "// Function to increment counter\nfunction add() {\nlet counter = 0;\ncounter += 1;\nreturn counter;\n}\n\nlet x= 0;\n// Call add() 3 times\nx = add();\nx = add();\nx = add();\n\n// The counter should now be 3. But it is 1.",
        "function add() {\nlet counter = 0;\nfunction plus() {counter += 1;}\nplus();\nreturn counter;\n}",
        "function myCounter() {\nlet counter = 0;\nreturn function() {\ncounter++;\nreturn counter;\n};\n}\nconst add = myCounter();\nadd();\nadd();\nadd();\n\n// the counter is now 3",
        "function",
        "var",
        "let",
        "const",
        "add()",
        "plus()",
        "counter",
        "counter = 0",
        "add"
      ]
    },
    {
      "title": "JavaScript Object Definitions",
      "summary": "Methods for Defining JavaScript Objects\nUsing an Object Literal\nUsing the new Keyword\nUsing an Object Constructor\nUsing Object.assign()\nUsing Object.create()\nUsing Object.fromEntries()\nUsing an Object Literal\nAn object literal is a list of property key:values inside curly braces { }.\nExample\nUsing the new Keyword\nExample\nNote:\nThe examples above do exactly the same.\nBut, there is no need to use new Object().\nFor readability, simplicity and execution speed, use the object literal method.\nObjects written as name value pairs are similar to:\nAssociative arrays in PHP\nDictionaries in Python\nHash tables in C\nHash maps in Java\nHashes in Ruby and Perl\nREMOVE ADS\nJavaScript Object.create()\nThe Object.create() method creates an object from an existing object.\nExample\nJavaScript Object fromEntries()\nES2019 added the Object method fromEntries() to JavaScript.\nThe fromEntries() method creates an object from iterable key / value pairs.\nExample\nBrowser Support\nfromEntries() is an ECMAScript 2019 feature.\nES2019 is supported in all modern browsers since January 2020:\nJavaScript Object.assign()\nThe Object.assign() method copies properties from one or more source objects to a target object.\nExample\nIn JavaScript, Objects are King.\nIn JavaScript, almost \"everything\" is an object.\nObjects are objects\nMaths are objects\nFunctions are objects\nDates are objects\nArrays are objects\nMaps are objects\nSets are objects\nAll JavaScript values, except primitives, are objects.\nJavaScript Primitives\nA primitive data type is data type that can only store a single primitive value.\nJavaScript defines 7 types of primitive data types:\nImmutable\nPrimitive values are immutable (they are hardcoded and cannot be changed).\nif x = 3.14, you can change the value of x, but you cannot change the value of 3.14.\nJavaScript Objects are Mutable\nObjects are mutable: They are addressed by reference, not by value.\nIf person is an object, the following statement will not create a copy of person:\nThe object x is not a copy of person. The object x is person.\nThe object x and the object person share the same memory address.\nAny changes to x will also change person:\nExample\nLearn More:\nJavaScript Object Definitions\nJavaScript Object Properties\nJavaScript Object Methods\nJavaScript Object Display\nJavaScript Object Constructors\nJavaScript Object this\nJavaScript Object Distructuring\nJavaScript Object Prototypes\nJavaScript Object Iterations\nJavaScript Object Management\nJavaScript Object Getters & Setters\nJavaScript Object Protection\nJavaScript Object Reference",
      "examples": [
        "{firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};",
        "// Create an Object\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};",
        "// Create an Object\nconst person = new Object({\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n});",
        "// Create an Object:\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\"\n};\n\n// Create new Object\nconst man = Object.create(person);\nman.firstName = \"Peter\";",
        "const fruits = [\n[\"apples\", 300],\n[\"pears\", 900],\n[\"bananas\", 500]\n];\n\nconst myObj = Object.fromEntries(fruits);",
        "// Create Target Object\nconst person1 = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\n\n// Create Source Object\nconst person2 = {firstName: \"Anne\",lastName: \"Smith\"};\n\n// Assign Source to Target\nObject.assign(person1, person2);",
        "const x = person;",
        "//Create an Object\nconst person = {\nfirstName:\"John\",\nlastName:\"Doe\",\nage:50, eyeColor:\"blue\"\n}\n\n// Try to create a copy\nconst x = person;\n\n// This will change age in person:\nx.age = 10;",
        "new",
        "Object.assign()",
        "Object.create()",
        "Object.fromEntries()",
        "new Object()",
        "fromEntries()",
        "string",
        "number",
        "boolean",
        "bigint",
        "null",
        "undefined",
        "symbol"
      ]
    },
    {
      "title": "JavaScript Object Properties",
      "summary": "An Object is an Unordered Collection of Properties\nProperties are the most important part of JavaScript objects.\nProperties can be changed, added, deleted, and some are read only.\nAccessing JavaScript Properties\nThe syntax for accessing the property of an object is:\nor\nor\nExamples\nAdding New Properties\nYou can add new properties to an existing object by simply giving it a value:\nExample\nProperty Default Values\nA value given to a property will be a default value for all objects created by the constructor:\nExample\nDeleting Properties\nThe delete keyword deletes a property from an object:\nExample\nor delete person[\"age\"];\nExample\nNote:\nThe delete keyword deletes both the value of the property and the property itself.\nAfter deletion, the property cannot be used before it is added back again.\nREMOVE ADS\nNested Objects\nProperty values in an object can be other objects:\nExample\nYou can access nested objects using the dot notation or the bracket notation:\nExamples\nLearn More:\nJavaScript Object Definitions\nJavaScript Object Properties\nJavaScript Object Methods\nJavaScript Object Display\nJavaScript Object Constructors\nJavaScript Object this\nJavaScript Object Distructuring\nJavaScript Object Prototypes\nJavaScript Object Iterations\nJavaScript Object Management\nJavaScript Object Getters & Setters\nJavaScript Object Protection\nJavaScript Object Reference",
      "examples": [
        "// objectName.property\nlet age = person.age;",
        "//objectName[\"property\"]\nlet age = person[\"age\"];",
        "//objectName[expression]\nlet age = person[x];",
        "person.firstname + \" is \" + person.age + \" years old.\";",
        "person[\"firstname\"] + \" is \" + person[\"age\"] + \" years old.\";",
        "let x = \"firstname\";\nlet y = \"age\";\nperson[x] + \" is \" + person[y] + \" years old.\";",
        "person.nationality = \"English\";",
        "function Person(first, last, age, eyecolor) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eyecolor;\nthis.nationality = \"English\";\n}",
        "const person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\n\ndelete person.age;",
        "const person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\n\ndelete person[\"age\"];",
        "myObj = {\nname:\"John\",\nage:30,\nmyCars: {\ncar1:\"Ford\",\ncar2:\"BMW\",\ncar3:\"Fiat\"\n}\n}",
        "myObj.myCars.car2;",
        "myObj.myCars[\"car2\"];",
        "myObj[\"myCars\"][\"car2\"];",
        "let p1 = \"myCars\";\nlet p2 = \"car2\";\nmyObj[p1][p2];",
        "delete"
      ]
    },
    {
      "title": "JavaScript Object Methods",
      "summary": "Object methods are actions that can be performed on objects.\nA method is a function definition stored as a property value.\nExample\nIn the example above, this refers to the person object:\nthis.firstName means the firstName property of person.\nthis.lastName means the lastName property of person.\nAccessing Object Methods\nYou access an object method with the following syntax:\nIf you invoke the fullName property with (), it will execute as a function:\nExample\nIf you access the fullName property without (), it will return the function definition:\nExample\nREMOVE ADS\nAdding a Method to an Object\nAdding a new method to an object is easy:\nExample\nUsing JavaScript Methods\nThis example uses the JavaScript toUpperCase() method to convert a text to uppercase:\nExample\nLearn More:\nJavaScript Object Definitions\nJavaScript Object Properties\nJavaScript Object Methods\nJavaScript Object Display\nJavaScript Object Constructors\nJavaScript Object this\nJavaScript Object Distructuring\nJavaScript Object Prototypes\nJavaScript Object Iterations\nJavaScript Object Management\nJavaScript Object Getters & Setters\nJavaScript Object Protection\nJavaScript Object Reference",
      "examples": [
        "const person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nid: 5566,\nfullName: function() {\nreturn this.firstName + \" \" + this.lastName;\n}\n};",
        "objectName.methodName()",
        "name = person.fullName();",
        "name = person.fullName;",
        "person.name = function () {\nreturn this.firstName + \" \" + this.lastName;\n};",
        "person.name = function () {\nreturn (this.firstName + \" \" + this.lastName).toUpperCase();\n};",
        "this",
        "toUpperCase()"
      ]
    },
    {
      "title": "JavaScript Display Objects",
      "summary": "How to Display JavaScript Objects?\nDisplaying a JavaScript object will output [object Object].\nExample\nSome solutions to display JavaScript objects are:\nDisplaying the Object Properties by name\nDisplaying the Object Properties in a Loop\nDisplaying the Object using Object.values()\nDisplaying the Object using JSON.stringify()\nDisplaying Object Properties\nThe properties of an object can be added in a string:\nExample\nUsing a For .. In Loop\nThe properties of an object can be collected in a loop:\nExample\nNote:\nYou must use person[x] in the loop.\nperson.x will not work (Because x is the loop variable).\nREMOVE ADS\nUsing Object.values()\nObject.values() creates an array from the property values:\nUsing Object.entries()\nObject.entries() makes it simple to use objects in loops:\nExample\nUsing JSON.stringify()\nJavaScript objects can be converted to a string with JSON method JSON.stringify().\nJSON.stringify() is included in JavaScript and supported in all browsers.\nNote:\nThe result will be a string written in JSON notation:\n{\"name\":\"John\",\"age\":50,\"city\":\"New York\"}\nExample\nLearn More:\nJavaScript Object Definitions\nJavaScript Object Properties\nJavaScript Object Methods\nJavaScript Object Display\nJavaScript Object Constructors\nJavaScript Object this\nJavaScript Object Distructuring\nJavaScript Object Prototypes\nJavaScript Object Iterations\nJavaScript Object Management\nJavaScript Object Getters & Setters\nJavaScript Object Protection\nJavaScript Object Reference",
      "examples": [
        "// Create an Object\nconst person = {\nname: \"John\",\nage: 30,\ncity: \"New York\"\n};\n\nlet text = person;",
        "// Create an Object\nconst person = {\nname: \"John\",\nage: 30,\ncity: \"New York\"\n};\n\n// Add Properties\nlet text = person.name + \",\" + person.age + \",\" + person.city;",
        "// Create an Object\nconst person = {\nname: \"John\",\nage: 30,\ncity: \"New York\"\n};\n\n// Build a Text\nlet text = \"\";\nfor (let x in person) {\ntext += person[x] + \" \";\n};",
        "// Create an Object\nconst person = {\nname: \"John\",\nage: 30,\ncity: \"New York\"\n};\n\n// Create an Array\nconst myArray = Object.values(person);\n\n// Stringify the Array\nlet text = myArray.toString();",
        "const fruits = {Bananas:300, Oranges:200, Apples:500};\n\nlet text = \"\";\nfor (let [fruit, value] of Object.entries(fruits)) {\ntext += fruit + \": \" + value + \"<br>\";\n}",
        "// Create an Object\nconst person = {\nname: \"John\",\nage: 30,\ncity: \"New York\"\n};\n\n// Stringify Object\nlet text = JSON.stringify(person);",
        "Object.values()",
        "Object.entries()",
        "JSON.stringify()"
      ]
    },
    {
      "title": "JavaScript Object Constructors",
      "summary": "Object Constructor Functions\nSometimes we need to create many objects of the same type.\nTo create an object type we use an object constructor function.\nIt is considered good practice to name constructor functions with an upper-case first letter.\nObject Type Person\nNote:\nIn the constructor function, this has no value.\nThe value of this will become the new object when a new object is created.\nSee Also:\nThe JavaScript this Tutorial\nNow we can use new Person() to create many new Person objects:\nExample\nProperty Default Values\nA value given to a property will be a default value for all objects created by the constructor:\nExample\nAdding a Property to an Object\nAdding a property to a created object is easy:\nExample\nNote:\nThe new property will be added to myFather. Not to any other Person Objects.\nAdding a Property to a Constructor\nYou can NOT add a new property to an object constructor:\nExample\nTo add a new property, you must add it to the constructor function prototype:\nExample\nREMOVE ADS\nConstructor Function Methods\nA constructor function can also have methods:\nExample\nAdding a Method to an Object\nAdding a method to a created object is easy:\nExample\nNote:\nThe new method will be added to myMother. Not to any other Person Objects.\nAdding a Method to a Constructor\nYou cannot add a new method to an object constructor function.\nThis code will produce a TypeError:\nExample\nTypeError: myMother.changeName is not a function\nAdding a new method must be done to the constructor function prototype:\nExample\nNote:\nThe changeName() function assigns the value of name to the person's lastName property, substituting this with myMother.\nBuilt-in JavaScript Constructors\nJavaScript has built-in constructors for all native objects:\nNote:\nThe Math() object is not in the list. Math is a global object. The new keyword cannot be used on Math.\nDid You Know?\nUse object literals {} instead of new Object().\nUse array literals [] instead of new Array().\nUse pattern literals /()/ instead of new RegExp().\nUse function expressions () {} instead of new Function().\nExample\nLearn More:\nJavaScript Object Definitions\nJavaScript Object Properties\nJavaScript Object Methods\nJavaScript Object Display\nJavaScript Object Constructors\nJavaScript Object this\nJavaScript Object Distructuring\nJavaScript Object Prototypes\nJavaScript Object Iterations\nJavaScript Object Management\nJavaScript Object Getters & Setters\nJavaScript Object Protection\nJavaScript Object Reference",
      "examples": [
        "function Person(first, last, age, eye) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eye;\n}",
        "const myFather = new Person(\"John\", \"Doe\", 50, \"blue\");\nconst myMother = new Person(\"Sally\", \"Rally\", 48, \"green\");\nconst mySister = new Person(\"Anna\", \"Rally\", 18, \"green\");\n\nconst mySelf = new Person(\"Johnny\", \"Rally\", 22, \"green\");",
        "function Person(first, last, age, eyecolor) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eyecolor;\nthis.nationality = \"English\";\n}",
        "myFather.nationality = \"English\";",
        "Person.nationality = \"English\";",
        "Person.prototype.nationality = \"English\";",
        "function Person(first, last, age, eyecolor) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eyecolor;\nthis.fullName = function() {\nreturn this.firstName + \" \" + this.lastName;\n};\n}",
        "myMother.changeName = function (name) {\nthis.lastName = name;\n}",
        "Person.changeName = function (name) {\nthis.lastName = name;\n}\n\nmyMother.changeName(\"Doe\");",
        "Person.prototype.changeName = function (name) {\nthis.lastName = name;\n}\n\nmyMother.changeName(\"Doe\");",
        "new Object()   // A new Object object\nnew Array()    // A new Array object\nnew Map()      // A new Map object\nnew Set()      // A new Set object\nnew Date()     // A new Date object\nnew RegExp()   // A new RegExp object\nnew Function() // A new Function object",
        "\"\";           // primitive string\n0;            // primitive number\nfalse;        // primitive boolean\n\n{};           // object object\n[];           // array object\n/()/          // regexp object\nfunction(){}; // function",
        "this",
        "new Person()",
        "TypeError: myMother.changeName is not a function",
        "name",
        "lastName",
        "myMother",
        "Math()",
        "Math",
        "new",
        "{}",
        "new Object()",
        "[]",
        "new Array()",
        "/()/",
        "new RegExp()",
        "() {}",
        "new Function()"
      ]
    },
    {
      "title": "this in JavaScript Objects",
      "summary": "What is this?\nIn JavaScript, the this keyword refers to an object.\nThe this keyword refers to different objects depending on how it is used:\nNote\nthis is not a variable.\nthis is a keyword.\nYou cannot change the value of this.\nthis in a Method\nWhen used in an object method, this refers to the object.\nIn the example on top of this page, this refers to the person object.\nBecause the fullName method is a method of the person object.\nExample\nREMOVE ADS\nObject Method Binding\nIn these examples, this is the person object:\nExample\nExample\ni.e. this.firstName is the firstName property of this (the person object).\nExplicit Function Binding\nThe call() and apply() methods are predefined JavaScript methods.\nThey can both be used to call an object method with another object as argument.\nSee Also:\nThe Function call() Method\nThe Function apply() Method\nThe Function bind() Method\nThe example below calls person1.fullName with person2 as an argument, this refers to person2, even if fullName is a method of person1:\nExample\nTry it Yourself »\nFunction Borrowing\nWith the bind() method, an object can borrow a method from another object.\nThis example creates 2 objects (person and member).\nThe member object borrows the fullname method from the person object:\nExample\nThis Precedence\nUse the following precedence of order to determine which object this refers to:\nLearn More:\nJavaScript Object Definitions\nJavaScript Object Properties\nJavaScript Object Methods\nJavaScript Object Display\nJavaScript Object Constructors\nJavaScript Object this\nJavaScript Object Distructuring\nJavaScript Object Prototypes\nJavaScript Object Iterations\nJavaScript Object Management\nJavaScript Object Getters & Setters\nJavaScript Object Protection\nJavaScript Object Reference",
      "examples": [
        "const person = {\nfirstName: \"John\",\nlastName : \"Doe\",\nid       : 5566,\nfullName : function() {\nreturn this.firstName + \" \" + this.lastName;\n}\n};",
        "const person = {\nfirstName  : \"John\",\nlastName   : \"Doe\",\nid         : 5566,\nmyFunction : function() {\nreturn this;\n}\n};",
        "const person1 = {\nfullName: function() {\nreturn this.firstName + \" \" + this.lastName;\n}\n}\n\nconst person2 = {\nfirstName:\"John\",\nlastName: \"Doe\",\n}\n\n// Return \"John Doe\":\nperson1.fullName.call(person2);",
        "const person = {\nfirstName:\"John\",\nlastName: \"Doe\",\nfullName: function () {\nreturn this.firstName + \" \" + this.lastName;\n}\n}\n\nconst member = {\nfirstName:\"Hege\",\nlastName: \"Nilsen\",\n}\n\nlet fullName = person.fullName.bind(member);",
        "this",
        "undefined",
        "call()",
        "apply()",
        "bind()"
      ]
    },
    {
      "title": "JavaScript Destructuring",
      "summary": "Destructuring Assignment Syntax\nThe destructuring assignment syntax unpack object properties into variables:\nIt can also unpack arrays and any other iterables:\nObject Destructuring\nExample\nThe order of the properties does not matter:\nExample\nNote:\nDestructuring is not destructive.\nDestructuring does not change the original object.\nObject Default Values\nFor potentially missing properties we can set default values:\nExample\nObject Property Alias\nExample\nString Destructuring\nOne use for destructuring is unpacking string characters.\nExample\nNote:\nDestructuring can be used with any iterables.\nREMOVE ADS\nArray Destructuring\nWe can pick up array variables into our own variables:\nExample\nSkipping Array Values\nWe can skip array values using two or more commas:\nExample\nArray Position Values\nWe can pick up values from specific index locations of an array:\nExample\nThe Rest Property\nYou can end a destructuring syntax with a rest property.\nThis syntax will store all remaining values into a new array:\nExample\nDestructuring Maps\nExample\nSwapping JavaScript Variables\nYou can swap the values of two variables using a destructuring assignment:\nExample\nBrowser Support\nDestructuring is an ES6 feature.\nES6 is fully supported in all modern browsers since June 2017:\nLearn More:\nJavaScript Object Definitions\nJavaScript Object Properties\nJavaScript Object Methods\nJavaScript Object Display\nJavaScript Object Constructors\nJavaScript Object this\nJavaScript Object Distructuring\nJavaScript Object Prototypes\nJavaScript Object Iterations\nJavaScript Object Management\nJavaScript Object Getters & Setters\nJavaScript Object Protection\nJavaScript Object Reference",
      "examples": [
        "let {firstName, lastName} = person;",
        "let [firstName, lastName] = person;",
        "// Create an Object\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50\n};\n\n// Destructuring\nlet {firstName, lastName} = person;",
        "// Create an Object\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50\n};\n\n// Destructuring\nlet {firstName, lastName, country = \"US\"} = person;",
        "// Create an Object\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50\n};\n\n// Destructuring\nlet {lastName : name} = person;",
        "// Create a String\nlet name = \"W3Schools\";\n\n// Destructuring\nlet [a1, a2, a3, a4, a5] = name;",
        "// Create an Array\nconst fruits = [\"Bananas\", \"Oranges\", \"Apples\", \"Mangos\"];\n\n// Destructuring\nlet [fruit1, fruit2] = fruits;",
        "// Create an Array\nconst fruits = [\"Bananas\", \"Oranges\", \"Apples\", \"Mangos\"];\n\n// Destructuring\nlet [fruit1,,,fruit2] = fruits;",
        "// Create an Array\nconst fruits = [\"Bananas\", \"Oranges\", \"Apples\", \"Mangos\"];\n// Destructuring\nlet {[0]:fruit1 ,[1]:fruit2} = fruits;",
        "// Create an Array\nconst numbers = [10, 20, 30, 40, 50, 60, 70];\n\n// Destructuring\nconst [a,b, ...rest] = numbers",
        "// Create a Map\nconst fruits = new Map([\n[\"apples\", 500],\n[\"bananas\", 300],\n[\"oranges\", 200]\n]);\n\n// Destructuring\nlet text = \"\";\nfor (const [key, value] of fruits) {\ntext += key + \" is \" + value;\n}",
        "let firstName = \"John\";\nlet lastName = \"Doe\";\n\n// Destructuring\n[firstName, lastName] = [lastName, firstName];",
        "Destructuring"
      ]
    },
    {
      "title": "JavaScript Object Prototypes",
      "summary": "All JavaScript objects inherit properties and methods from a prototype.\nIn the previous chapter we learned how to use an object constructor:\nExample\nWe also learned that you can not add a new property to an existing object constructor:\nExample\nTo add a new property to a constructor, you must add it to the constructor function:\nExample\nREMOVE ADS\nPrototype Inheritance\nAll JavaScript objects inherit properties and methods from a prototype:\nDate objects inherit from Date.prototype\nArray objects inherit from Array.prototype\nPerson objects inherit from Person.prototype\nThe Object.prototype is on the top of the prototype inheritance chain:\nDate objects, Array objects, and Person objects inherit from Object.prototype.\nAdding Properties and Methods to Objects\nSometimes you want to add new properties (or methods) to all existing objects of a given type.\nSometimes you want to add new properties (or methods) to an object constructor.\nUsing the prototype Property\nThe JavaScript prototype property allows you to add new properties to object constructors:\nExample\nThe JavaScript prototype property also allows you to add new methods to objects constructors:\nExample\nWarning\nOnly modify your own prototypes. Never modify the prototypes of standard JavaScript objects.\nLearn More:\nJavaScript Object Definitions\nJavaScript Object Properties\nJavaScript Object Methods\nJavaScript Object Display\nJavaScript Object Constructors\nJavaScript Object this\nJavaScript Object Distructuring\nJavaScript Object Prototypes\nJavaScript Object Iterations\nJavaScript Object Management\nJavaScript Object Getters & Setters\nJavaScript Object Protection\nJavaScript Object Reference",
      "examples": [
        "function Person(first, last, age, eyecolor) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eyecolor;\n}\n\nconst myFather = new Person(\"John\", \"Doe\", 50, \"blue\");\nconst myMother = new Person(\"Sally\", \"Rally\", 48, \"green\");",
        "Person.nationality = \"English\";",
        "function Person(first, last, age, eyecolor) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eyecolor;\nthis.nationality = \"English\";\n}",
        "function Person(first, last, age, eyecolor) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eyecolor;\n}\n\nPerson.prototype.nationality = \"English\";",
        "function Person(first, last, age, eyecolor) {\nthis.firstName = first;\nthis.lastName = last;\nthis.age = age;\nthis.eyeColor = eyecolor;\n}\n\nPerson.prototype.name = function() {\nreturn this.firstName + \" \" + this.lastName;\n};",
        "Date",
        "Date.prototype",
        "Array",
        "Array.prototype",
        "Person",
        "Person.prototype",
        "Object.prototype",
        "prototype"
      ]
    },
    {
      "title": "JavaScript Object Iterations",
      "summary": "General Methods\nJavaScript Object.assign()\nThe Object.assign() method copies properties from one or more source objects to a target object.\nExample\nJavaScript Object.entries()\nECMAScript 2017 added the Object.entries() method to objects.\nObject.entries() returns an array of the key/value pairs in an object:\nExample\nObject.entries() makes it simple to use objects in loops:\nExample\nObject.entries() also makes it simple to convert objects to maps:\nExample\nObject.entries() is supported in all modern browsers since March 2017:\nJavaScript Object.fromEntries()\nThe fromEntries() method creates an object from a list of key/value pairs.\nExample\nREMOVE ADS\nJavaScript Object.values()\nObject.values() is similar to Object.entries(), but returns a single dimension array of the object values:\nExample\nObject.values() is supported in all modern browsers since March 2017:\nJavaScript Object.groupBy()\nES2024 added the Object.groupBy() method to JavaScript.\nThe Object.groupBy() method groups elements of an object according to string values returned from a callback function.\nThe Object.groupBy() method does not change the original object.\nExample\nBrowser Support\nObject.groupby() is an ES2024 feature.\nJavaScript 2024 is supported in new browsers since March 2024:\nWarning\nES2024 features are relatively new.\nOlder browsers may need an alternative code (Polyfill)\nObject.groupBy() vs Map.groupBy()\nThe difference between Object.groupBy() and Map.groupBy() is:\nObject.groupBy() groups elements into a JavaScript object.\nMap.groupBy() groups elements into a Map object.\nJavaScript Object.keys()\nThe Object.keys() method returns an array with the keys of an object.\nExample\nJavaScript for...in Loop\nThe JavaScript for...in statement loops through the properties of an object.\nSyntax\nThe block of code inside of the for...in loop will be executed once for each property.\nLooping through the properties of an object:\nExample\nLearn More:\nJavaScript Object Definitions\nJavaScript Object Properties\nJavaScript Object Methods\nJavaScript Object Display\nJavaScript Object Constructors\nJavaScript Object this\nJavaScript Object Distructuring\nJavaScript Object Prototypes\nJavaScript Object Iterations\nJavaScript Object Management\nJavaScript Object Getters & Setters\nJavaScript Object Protection\nJavaScript Object Reference",
      "examples": [
        "// Copies properties from a source object to a target object\nObject.assign(target, source)\n\n// Creates an object from an existing object\nObject.create(object)\n\n// Returns an array of the key/value pairs of an object\nObject.entries(object)\n\n// Creates an object from a list of keys/values\nObject.fromEntries()\n\n// Returns an array of the keys of an object\nObject.keys(object)\n\n// Returns an array of the property values of an object\nObject.values(object)\n\n// Groups object elements according to a function\nObject.groupBy(object, callback)",
        "// Create Target Object\nconst person1 = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\n\n// Create Source Object\nconst person2 = {firstName: \"Anne\",lastName: \"Smith\"};\n\n// Assign Source to Target\nObject.assign(person1, person2);",
        "const person = {\nfirstName : \"John\",\nlastName : \"Doe\",\nage : 50,\neyeColor : \"blue\"\n};\n\nlet text = Object.entries(person);",
        "const fruits = {Bananas:300, Oranges:200, Apples:500};\n\nlet text = \"\";\nfor (let [fruit, value] of Object.entries(fruits)) {\ntext += fruit + \": \" + value + \"<br>\";\n}",
        "const fruits = {Bananas:300, Oranges:200, Apples:500};\n\nconst myMap = new Map(Object.entries(fruits));",
        "const fruits = [\n[\"apples\", 300],\n[\"pears\", 900],\n[\"bananas\", 500]\n];\n\nconst myObj = Object.fromEntries(fruits);",
        "const person = {\nfirstName : \"John\",\nlastName : \"Doe\",\nage : 50,\neyeColor : \"blue\"\n};\n\nlet text = Object.values(person);",
        "// Create an Array\nconst fruits = [\n{name:\"apples\", quantity:300},\n{name:\"bananas\", quantity:500},\n{name:\"oranges\", quantity:200},\n{name:\"kiwi\", quantity:150}\n];\n\n// Callback function to Group Elements\nfunction myCallback({ quantity }) {\nreturn quantity > 200 ? \"ok\" : \"low\";\n}\n\n// Group by Quantity\nconst result = Object.groupBy(fruits, myCallback);",
        "// Create an Object\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\n\n// Get the Keys\nconst keys = Object.keys(person);",
        "for (let variable in object) {\n// code to be executed\n}",
        "const person = {\nfname:\" John\",\nlname:\" Doe\",\nage: 25\n};\n\nfor (let x in person) {\ntxt += person[x];\n}",
        "Object.assign()",
        "Object.entries()",
        "fromEntries()",
        "Object.values()",
        "Object.groupBy()",
        "Object.groupby()",
        "Object.keys()",
        "for...in"
      ]
    },
    {
      "title": "JavaScript Object Management",
      "summary": "Property Management Methods\nJavaScript Object.defineProperty()\nThe Object.defineProperty() method can be used to:\nAdding a new property to an object\nChanging property values\nChanging property metadata\nChanging object getters and setters\nSyntax:\nAdding a new Property\nThis example adds a new property to an object:\nExample\nChanging a Property Value\nThis example changes a property value:\nExample\nProperty Attributes\nAll properties have a name. In addition they also have a value.\nThe value is one of the property's attributes.\nOther attributes are: enumerable, configurable, and writable.\nThese attributes define how the property can be accessed (is it readable?, is it writable?)\nIn JavaScript, all attributes can be read, but only the value attribute can be changed (and only if the property is writable).\n( ECMAScript 5 has methods for both getting and setting all property attributes)\nChanging Meta Data\nThe following property meta data can be changed:\nGetters and setters can also be changed:\nThis example makes language read-only:\nThis example makes language not enumerable:\nREMOVE ADS\nJavaScript getOwnPropertyNames()\nThe Object.getOwnPropertyNames() method can:\nList object properties\nSyntax\nList all Object Properties\nThis example gets all properties of an object:\nExample\nObject.getOwnPropertyNames() will also list properties that is not enumerable:\nExample\nJavaScript Object.keys()\nThe Object.keys() method can:\nList enumerable object properties\nSyntax\nList Enumerable Object Properties\nThis example uses Object.keys() insted of Object.getOwnPropertyNames():\nExample\nNote\nThe getOwnPropertyNames() method returns all properties.\nThe Object.keys() method returns all enumerable properties.\nIf you define object properties without enumerable:false, the two methods will return the same.\nAdding Getters and Setters\nThe Object.defineProperty() method can also be used to add Getters and Setters:\nExample\nA Counter Example\nExample\nPrototype Properties\nJavaScript objects inherit the properties of their prototype.\nThe delete keyword does not delete inherited properties, but if you delete a prototype property, it will affect all objects inherited from the prototype.\nLearn More:\nJavaScript Object Definitions\nJavaScript Object Properties\nJavaScript Object Methods\nJavaScript Object Display\nJavaScript Object Constructors\nJavaScript Object this\nJavaScript Object Distructuring\nJavaScript Object Prototypes\nJavaScript Object Iterations\nJavaScript Object Management\nJavaScript Object Getters & Setters\nJavaScript Object Protection\nJavaScript Object Reference",
      "examples": [
        "// Adding or changing an object property\nObject.defineProperty(object, property, descriptor)\n\n// Adding or changing object properties\nObject.defineProperties(object, descriptors)\n\n// Accessing a Property\nObject.getOwnPropertyDescriptor(object, property)\n\n// Accessing Properties\nObject.getOwnPropertyDescriptors(object)\n\n// Returns all properties as an array\nObject.getOwnPropertyNames(object)\n\n// Accessing the prototype\nObject.getPrototypeOf(object)",
        "Object.defineProperty(object, property, descriptor)",
        "// Create an Object:\nconst person = {\nfirstName: \"John\",\nlastName : \"Doe\",\nlanguage : \"EN\"\n};\n\n// Add a Property\nObject.defineProperty(person, \"year\", {value:\"2008\"});",
        "// Create an Object:\nconst person = {\nfirstName: \"John\",\nlastName : \"Doe\",\nlanguage : \"EN\"\n};\n\n// Change a Property\nObject.defineProperty(person, \"language\", {value : \"NO\"});",
        "writable : true      // Property value can be changed\nenumerable : true    // Property can be enumerated\nconfigurable : true  // Property can be reconfigured",
        "writable : false     // Property value can not be changed\nenumerable : false   // Property can be not enumerated\nconfigurable : false // Property can be not reconfigured",
        "// Defining a getter\nget: function() { return language }\n// Defining a setter\nset: function(value) { language = value }",
        "Object.defineProperty(person, \"language\", {writable:false});",
        "Object.defineProperty(person, \"language\", {enumerable:false});",
        "Object.getOwnPropertyNames(object)",
        "// Create an Object\nconst person = {\nfirstName: \"John\",\nlastName : \"Doe\",\nlanguage : \"EN\"\n};\n\n// Get all Properties\nObject.getOwnPropertyNames(person);",
        "// Create an Object\nconst person = {\nfirstName: \"John\",\nlastName : \"Doe\",\nlanguage : \"EN\"\n};\n\n// Set the language Property not enumerable\nObject.defineProperty(person, \"language\", {enumerable:false});\n\n// Get all Properties\nObject.getOwnPropertyNames(person);",
        "Object.keys(object)",
        "// Create an Object\nconst person = {\nfirstName: \"John\",\nlastName : \"Doe\",\nlanguage : \"EN\"\n};\n\n// Change the \"language\" Property\nObject.defineProperty(person, \"language\", {enumerable:false});\n\n// Get all Enumerable Properties\nObject.keys(person);",
        "//Create an object\nconst person = {firstName:\"John\", lastName:\"Doe\"};\n\n// Define a getter\nObject.defineProperty(person, \"fullName\", {\nget: function () {return this.firstName + \" \" + this.lastName;}\n});",
        "// Define object\nconst obj = {counter:0};\n\n// Define setters\nObject.defineProperty(obj, \"reset\", {\nget : function () {this.counter = 0;}\n});\nObject.defineProperty(obj, \"increment\", {\nget : function () {this.counter++;}\n});\nObject.defineProperty(obj, \"decrement\", {\nget : function () {this.counter--;}\n});\nObject.defineProperty(obj, \"add\", {\nset : function (value) {this.counter += value;}\n});\nObject.defineProperty(obj, \"subtract\", {\nset : function (i) {this.counter -= i;}\n});\n\n// Play with the counter:\nobj.reset;\nobj.add = 5;\nobj.subtract = 1;\nobj.increment;\nobj.decrement;",
        "Object.defineProperty()",
        "Object.getOwnPropertyNames()",
        "Object.keys()",
        "delete"
      ]
    },
    {
      "title": "JavaScript Object Accessors",
      "summary": "JavaScript Accessors (Getters and Setters)\nGetters and setters allow you to define Object Accessors (Computed Properties).\nJavaScript Getter (The get Keyword)\nThis example uses a lang property to get the value of the language property.\nExample\nJavaScript Setter (The set Keyword)\nThis example uses a lang property to set the value of the language property.\nExample\nREMOVE ADS\nJavaScript Function or Getter?\nWhat is the differences between these two examples?\nExample 1\nExample 2\nExample 1 access fullName as a function: person.fullName().\nExample 2 access fullName as a property: person.fullName.\nThe second example provides a simpler syntax.\nData Quality\nJavaScript can secure better data quality when using getters and setters.\nUsing the lang property, in this example, returns the value of the language property in upper case:\nExample\nUsing the lang property, in this example, stores an upper case value in the language property:\nExample\nWhy Using Getters and Setters?\nIt gives simpler syntax\nIt allows equal syntax for properties and methods\nIt can secure better data quality\nIt is useful for doing things behind-the-scenes\nObject.defineProperty()\nThe Object.defineProperty() method can also be used to add Getters and Setters:\nA Counter Example\nLearn More:\nJavaScript Object Definitions\nJavaScript Object Properties\nJavaScript Object Methods\nJavaScript Object Display\nJavaScript Object Constructors\nJavaScript Object this\nJavaScript Object Distructuring\nJavaScript Object Prototypes\nJavaScript Object Iterations\nJavaScript Object Management\nJavaScript Object Getters & Setters\nJavaScript Object Protection\nJavaScript Object Reference",
      "examples": [
        "// Create an object:\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nlanguage: \"en\",\nget lang() {\nreturn this.language;\n}\n};\n\n// Display data from the object using a getter:\ndocument.getElementById(\"demo\").innerHTML = person.lang;",
        "const person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nlanguage: \"\",\nset lang(lang) {\nthis.language = lang;\n}\n};\n\n// Set an object property using a setter:\nperson.lang = \"en\";\n\n// Display data from the object:\ndocument.getElementById(\"demo\").innerHTML = person.language;",
        "const person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nfullName: function() {\nreturn this.firstName + \" \" + this.lastName;\n}\n};\n\n// Display data from the object using a method:\ndocument.getElementById(\"demo\").innerHTML = person.fullName();",
        "const person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nget fullName() {\nreturn this.firstName + \" \" + this.lastName;\n}\n};\n\n// Display data from the object using a getter:\ndocument.getElementById(\"demo\").innerHTML = person.fullName;",
        "// Create an object:\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nlanguage: \"en\",\nget lang() {\nreturn this.language.toUpperCase();\n}\n};\n\n// Display data from the object using a getter:\ndocument.getElementById(\"demo\").innerHTML = person.lang;",
        "const person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nlanguage: \"\",\nset lang(lang) {\nthis.language = lang.toUpperCase();\n}\n};\n\n// Set an object property using a setter:\nperson.lang = \"en\";\n\n// Display data from the object:\ndocument.getElementById(\"demo\").innerHTML = person.language;",
        "// Define object\nconst obj = {counter : 0};\n\n// Define setters and getters\nObject.defineProperty(obj, \"reset\", {\nget : function () {this.counter = 0;}\n});\nObject.defineProperty(obj, \"increment\", {\nget : function () {this.counter++;}\n});\nObject.defineProperty(obj, \"decrement\", {\nget : function () {this.counter--;}\n});\nObject.defineProperty(obj, \"add\", {\nset : function (value) {this.counter += value;}\n});\nObject.defineProperty(obj, \"subtract\", {\nset : function (value) {this.counter -= value;}\n});\n\n// Play with the counter:\nobj.reset;\nobj.add = 5;\nobj.subtract = 1;\nobj.increment;\nobj.decrement;",
        "lang",
        "get",
        "language",
        "set",
        "Object.defineProperty()"
      ]
    },
    {
      "title": "JavaScript Object Protection",
      "summary": "Object Protection Methods\nUsing const\nThe most common way to protect an object from being changed is by using the const keyword.\nWith const you can not re-assign the object, but you can still change the value of a property, delete a property or create a new property.\nJavaScript Object.preventExtensions()\nThe Object.preventExtensions() method prevents adding properties to an object.\nExample\nSince arrays are objects, arrays can be prevented from extensions too:\nExample\nJavaScript Object.isExtensible()\nYou can use Object.isExtensible() to check if an object is extensible.\nThe Object.isExtensible() returns true if an object is extensible.\nExamples\nJavaScript Object.seal()\nThe Object.seal() method prevents additions or deletions of new properties.\nThe Object.seal() method makes existing properties non-configurable.\nThe Object.isSealed() method can be used to check if an object is sealed.\nNote\nThe Object.seal() method will fail silently in non-strict mode and throw a TypeError in strict mode.\nExample\nSince arrays are objects, arrays can be sealed too:\nExample\nJavaScript Object.isSealed()\nThe Object.isSealed() method can be used to check if an object is sealed.\nThe Object.isSealed() returns true if an object is sealed.\nExamples\nJavaScript Object.freeze()\nThe Object.freeze() method prevents any changes to an object.\nFrozen objects are read-only.\nNo modification, addition or deletion of properties are allowed.\nNote\nThe Object.freeze() method will fail silently in non-strict mode and throw a TypeError in strict mode.\nExample\nSince arrays are objects, arrays can be frozen too:\nExample\nJavaScript Object.isFrozen()\nThe Object.isFrozen() method can be used to check if an object is frozen.\nThe Object.isFrozen() returns true if an object is frozen.\nExamples\nLearn More:\nJavaScript Object Definitions\nJavaScript Object Properties\nJavaScript Object Methods\nJavaScript Object Display\nJavaScript Object Constructors\nJavaScript Object this\nJavaScript Object Distructuring\nJavaScript Object Prototypes\nJavaScript Object Iterations\nJavaScript Object Management\nJavaScript Object Getters & Setters\nJavaScript Object Protection\nJavaScript Object Reference",
      "examples": [
        "// Prevents re-assignment\nconst car = {type:\"Fiat\", model:\"500\", color:\"white\"};\n\n// Prevents adding object properties\nObject.preventExtensions(object)\n\n// Returns true if properties can be added to an object\nObject.isExtensible(object)\n\n// Prevents adding and deleting object properties\nObject.seal(object)\n\n// Returns true if object is sealed\nObject.isSealed(object)\n\n// Prevents any changes to an object\nObject.freeze(object)\n\n// Returns true if object is frozen\nObject.isFrozen(object)",
        "// Create Object\nconst person = {firstName:\"John\", lastName:\"Doe\"};\n\n// Prevent Extensions\nObject.preventExtensions(person);\n\n// This will throw an error\nperson.nationality = \"English\";",
        "// Create Array\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nObject.preventExtensions(fruits);\n\n// This will throw an error:\nfruits.push(\"Kiwi\");",
        "// Create Object\nconst person = {firstName:\"John\", lastName:\"Doe\"};\n\n// Prevent Extensions\nObject.preventExtensions(person);\n\n// This will return false\nlet answer = Object.isExtensible(person);",
        "// Create Array\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\n// Prevent Extensions\nObject.preventExtensions(fruits);\n\n// This will return false\nlet answer = Object.isExtensible(fruits);",
        "\"use strict\"\n// Create Object\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\n\n// Seal Object\nObject.seal(person)\n\n// This will throw an error\ndelete person.age;",
        "// Create Array\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nObject.seal(fruits);\n\n// This will throw an error:\nfruits.push(\"Kiwi\");",
        "// Create Object\nconst person = {firstName:\"John\", lastName:\"Doe\"};\n\n// Seal Object\nObject.seal(person);\n\n// This will return true\nlet answer = Object.isSealed(person);",
        "// Create Array\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\n// Seal Array\nObject.seal(fruits);\n\n// This will return true\nlet answer = Object.isSealed(fruits);",
        "\"use strict\"\n// Create Object\nconst person = {\nfirstName: \"John\",\nlastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n};\n\n// Freeze Object\nObject.freeze(person)\n\n// This will throw an error\nperson.age = 51;",
        "const fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nObject.freeze(fruits);\n\n// This will trow an error:\nfruits.push(\"Kiwi\");",
        "// Create Object\nconst person = {firstName:\"John\", lastName:\"Doe\"};\n\n// Freeze Object\nObject.freeze(person);\n\n// This will return true\nlet answer = Object.isFrozen(person);",
        "// Create Array\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nObject.freeze(fruits);\n\n// This will return true:\nlet answer = Object.isFrozen(fruits);",
        "const",
        "Object.preventExtensions()",
        "Object.isExtensible()",
        "Object.seal()",
        "Object.isSealed()",
        "Object.freeze()",
        "Object.isFrozen()"
      ]
    },
    {
      "title": "JavaScript Object Reference",
      "summary": "Object Methods and Properties\nLearn More:\nJavaScript Object Definitions\nJavaScript Object Properties\nJavaScript Object Methods\nJavaScript Object Display\nJavaScript Object Constructors\nJavaScript Object this\nJavaScript Object Distructuring\nJavaScript Object Prototypes\nJavaScript Object Iterations\nJavaScript Object Management\nJavaScript Object Getters & Setters\nJavaScript Object Protection\nJavaScript Object Reference",
      "examples": []
    },
    {
      "title": "JavaScript Classes",
      "summary": "ECMAScript 2015, also known as ES6, introduced JavaScript Classes.\nJavaScript Classes are templates for JavaScript Objects.\nJavaScript Class Syntax\nUse the keyword class to create a class.\nAlways add a method named constructor():\nSyntax\nExample\nThe example above creates a class named \"Car\".\nThe class has two initial properties: \"name\" and \"year\".\nA JavaScript class is not an object.\nIt is a template for JavaScript objects.\nUsing a Class\nWhen you have a class, you can use the class to create objects:\nExample\nTry it Yourself »\nThe example above uses the Car class to create two Car objects.\nThe constructor method is called automatically when a new object is created.\nThe Constructor Method\nThe constructor method is a special method:\nIt has to have the exact name \"constructor\"\nIt is executed automatically when a new object is created\nIt is used to initialize object properties\nIf you do not define a constructor method, JavaScript will add an empty constructor method.\nREMOVE ADS\nClass Methods\nClass methods are created with the same syntax as object methods.\nUse the keyword class to create a class.\nAlways add a constructor() method.\nThen add any number of methods.\nSyntax\nCreate a Class method named \"age\", that returns the Car age:\nExample\nTry it Yourself »\nYou can send parameters to Class methods:\nExample\nTry it Yourself »\n\"use strict\"\nClasses syntax must be written following The \"use strict\" Directive.\nYou will get an error if you do not follow the \"strict mode\" rules.\nExample\nIn \"strict mode\" you will get an error if you use a variable without declaring it:",
      "examples": [
        "class ClassName {\nconstructor() { ... }\n}",
        "class Car {\nconstructor(name, year) {\nthis.name = name;\nthis.year = year;\n}\n}",
        "const myCar1 = new Car(\"Ford\", 2014);\nconst myCar2 = new Car(\"Audi\", 2019);",
        "class ClassName {\nconstructor() { ... }\nmethod_1() { ... }\nmethod_2() { ... }\nmethod_3() { ... }\n}",
        "class Car {\nconstructor(name, year) {\nthis.name = name;\nthis.year = year;\n}\nage() {\nconst date = new Date();\nreturn date.getFullYear() - this.year;\n}\n}\n\nconst myCar = new Car(\"Ford\", 2014);\ndocument.getElementById(\"demo\").innerHTML =\n\"My car is \" + myCar.age() + \" years old.\";",
        "class Car {\nconstructor(name, year) {\nthis.name = name;\nthis.year = year;\n}\nage(x) {\nreturn x - this.year;\n}\n}\n\nconst date = new Date();\nlet year = date.getFullYear();\n\nconst myCar = new Car(\"Ford\", 2014);\ndocument.getElementById(\"demo\").innerHTML=\n\"My car is \" + myCar.age(year) + \" years old.\";",
        "class Car {\nconstructor(name, year) {\nthis.name = name;\nthis.year = year;\n}\nage() {\n// date = new Date();  // This will not work\nconst date = new Date(); // This will work\nreturn date.getFullYear() - this.year;\n}\n}",
        "class",
        "constructor()"
      ]
    },
    {
      "title": "JavaScript Class Inheritance",
      "summary": "Class Inheritance\nTo create a class inheritance, use the extends keyword.\nA class created with a class inheritance inherits all the methods from another class:\nExample\nCreate a class named \"Model\" which will inherit the methods from the \"Car\" class:\nTry it Yourself »\nThe super() method refers to the parent class.\nBy calling the super() method in the constructor method, we call the parent's constructor method and gets access to the parent's properties and methods.\nInheritance is useful for code reusability: reuse properties and methods of an existing class when you create a new class.\nREMOVE ADS\nGetters and Setters\nClasses also allow you to use getters and setters.\nIt can be smart to use getters and setters for your properties, especially if you want to do something special with the value before returning them, or before you set them.\nTo add getters and setters in the class, use the get and set keywords.\nExample\nCreate a getter and a setter for the \"carname\" property:\nTry it Yourself »\nNote: even if the getter is a method, you do not use parentheses when you want to get the property value.\nThe name of the getter/setter method cannot be the same as the name of the property, in this case carname.\nMany programmers use an underscore character _ before the property name to separate the getter/setter from the actual property:\nExample\nYou can use the underscore character to separate the getter/setter from the actual property:\nTry it Yourself »\nTo use a setter, use the same syntax as when you set a property value, without parentheses:\nExample\nUse a setter to change the carname to \"Volvo\":\nTry it Yourself »\nHoisting\nUnlike functions, and other JavaScript declarations, class declarations are not hoisted.\nThat means that you must declare a class before you can use it:\nExample\nNote: For other declarations, like functions, you will NOT get an error when you try to use it before it is declared, because the default behavior of JavaScript declarations are hoisting (moving the declaration to the top).",
      "examples": [
        "class Car {\nconstructor(brand) {\nthis.carname = brand;\n}\npresent() {\nreturn 'I have a ' + this.carname;\n}\n}\n\nclass Model extends Car {\nconstructor(brand, mod) {\nsuper(brand);\nthis.model = mod;\n}\nshow() {\nreturn this.present() + ', it is a ' + this.model;\n}\n}\n\nlet myCar = new Model(\"Ford\", \"Mustang\");\ndocument.getElementById(\"demo\").innerHTML = myCar.show();",
        "class Car {\nconstructor(brand) {\nthis.carname = brand;\n}\nget cnam() {\nreturn this.carname;\n}\nset cnam(x) {\nthis.carname = x;\n}\n}\n\nconst myCar = new Car(\"Ford\");\n\ndocument.getElementById(\"demo\").innerHTML = myCar.cnam;",
        "class Car {\nconstructor(brand) {\nthis._carname = brand;\n}\nget carname() {\nreturn this._carname;\n}\nset carname(x) {\nthis._carname = x;\n}\n}\n\nconst myCar = new Car(\"Ford\");\n\ndocument.getElementById(\"demo\").innerHTML = myCar.carname;",
        "class Car {\nconstructor(brand) {\nthis._carname = brand;\n}\nget carname() {\nreturn this._carname;\n}\nset carname(x) {\nthis._carname = x;\n}\n}\n\nconst myCar = new Car(\"Ford\");\nmyCar.carname = \"Volvo\";\ndocument.getElementById(\"demo\").innerHTML = myCar.carname;",
        "//You cannot use the class yet.\n//myCar = new Car(\"Ford\") will raise an error.\n\nclass Car {\nconstructor(brand) {\nthis.carname = brand;\n}\n}\n\n//Now you can use the class:\nconst myCar = new Car(\"Ford\")",
        "extends",
        "super()",
        "get",
        "set",
        "carname",
        "_"
      ]
    },
    {
      "title": "JavaScript Static Methods",
      "summary": "Static class methods are defined on the class itself.\nYou cannot call a static method on an object, only on an object class.\nExample\nTry it Yourself »\nIf you want to use the myCar object inside the static method, you can send it as a parameter:\nExample\nTry it Yourself »",
      "examples": [
        "class Car {\nconstructor(name) {\nthis.name = name;\n}\nstatic hello() {\nreturn \"Hello!!\";\n}\n}\n\nconst myCar = new Car(\"Ford\");\n\n// You can call 'hello()' on the Car Class:\ndocument.getElementById(\"demo\").innerHTML = Car.hello();\n\n// But NOT on a Car Object:\n// document.getElementById(\"demo\").innerHTML = myCar.hello();\n// this will raise an error.",
        "class Car {\nconstructor(name) {\nthis.name = name;\n}\nstatic hello(x) {\nreturn \"Hello \" + x.name;\n}\n}\nconst myCar = new Car(\"Ford\");\ndocument.getElementById(\"demo\").innerHTML = Car.hello(myCar);",
        "static"
      ]
    },
    {
      "title": "JavaScript Loops",
      "summary": "JavaScript loops repeat executing a block of code a number of times.\nLoops are fundamental for tasks involving:\nIteration over values\nIteration over data structures\nPerforming an action multiple times\nThe for Loop\nThe for loop is used when the number of iterations is known.\nIt consists of an initialization (exp1), a condition (exp2), and an increment expression (exp3).\nSyntax\nexp1 is executed one time before the execution of the code block.\nexp2 defines the condition for executing the code block.\nexp3 is executed every time a code block has been executed.\nExample\nThe while Loop\nThe while loop executes a block of code as long as a specified condition evaluates to true.\nSyntax\nIn the following example, the code in the loop will run, over and over again, as long as a variable (i) is less than 10:\nExample\nNote\nIf you forget to increase the variable used in the condition, the loop will never end. This will crash your browser.\nThe do...while Loop\nThe do...while loop is similar to the while loop, but guarantees that the code block will be executed at least once, before the condition is checked.\nSyntax\nThe example below uses a do...while loop. The loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested:\nExample\nDo not forget to increase the variable used in the condition, otherwise the loop will never end!\nThe for...in Loop\nThe for...in loop iterates over the enumerable properties of an object.\nIt is typically used for iterating over object keys.\nSyntax\nA JavaScript for...in statement loops through the properties of a person object:\nExample\nThe for...of Loop\nThe for...of loop iterates over the values of iterable objects such as arrays, strings, Maps, Sets, and NodeLists.\nSyntax\nvariable\nFor every iteration the value of the next property is assigned to the variable. Variable can be declared with const, let, or var.\niterable\nAn object that has iterable properties.\nOther Methods\nArray methods like forEach(), map(), filter(), and reduce() provide alternative ways to iterate and manipulate array elements, often offering a more functional and concise approach compared to traditional loops for array-specific operations.",
      "examples": [
        "for (exp1; exp2; exp3) {\n// code block to be executed\n}",
        "for (let i = 0; i < 5; i++) {\ntext += \"The number is \" + i + \"<br>\";\n}",
        "while (condition) {\n// code block to be executed\n}",
        "while (i < 10) {\ntext += \"The number is \" + i;\ni++;\n}",
        "do {\n// code block to be executed\n}\nwhile (condition);",
        "do {\ntext += \"The number is \" + i;\ni++;\n}\nwhile (i < 10);",
        "for (key in object) {\n// code block to be executed\n}",
        "const person = {fname:\"John\", lname:\"Doe\", age:25};\n\nlet text = \"\";\nfor (let x in person) {\ntext += person[x];\n}",
        "for (variable of iterable) {\n// code block to be executed\n}",
        "for",
        "while",
        "do...while",
        "for...in",
        "for...of",
        "const",
        "let",
        "var"
      ]
    },
    {
      "title": "JavaScript Iterables",
      "summary": "An Iterable is an Iterable Object\nAn iterable can be iterated over with for..of loops\nThe For Of Loop\nThe JavaScript for..of statement loops through the elements of an iterable object.\nSyntax\nIterating\nIterating means looping over a sequence of elements.\nHere are some easy examples:\nIterating over a String\nIterating over an Array\nIterating over a Set\nIterating over a Map\nIterating Over a String\nYou can use a for..of loop to iterate over the elements of a string:\nExample\nIterating Over an Array\nYou can use a for..of loop to iterate over the elements of an Array:\nExample 1\nExample 2\nIterating Over a Set\nYou can use a for..of loop to iterate over the elements of a Set:\nExample\nIterating Over a Map\nYou can use a for..of loop to iterate over the elements of a Map:\nExample\nREMOVE ADS\nJavaScript Iterators\nThe iterator protocol defines how to produce a sequence of values from an object.\nAn object becomes an iterator when it implements a next() method.\nThe next() method must return an object with two properties:\nvalue (the next value)\ndone (true or false)\nNote\nTechnically, iterables must implement the Symbol.iterator method.\nIn JavaScript the following are iterables:\nStrings\nArrays\nTyped Arrays\nSets\nMaps\nBecause their prototype objects have a Symbol.iterator method:\nHome Made Iterable\nThis iterable returns never ending number: 10,20,30,40,.... when the next() method is called:\nExample\nNote\nHome made iterables do not support the JavaScript for..of statement.\nA JavaScript iterable is an object that has a Symbol.iterator.\nThe Symbol.iterator is a function that returns a next() function.\nAn iterable can be iterated over with the code: for (const x of iterable) { }\nExample\nNow you can use for..of\nThe Symbol.iterator method is called automatically by for..of.\nBut we can also do it \"manually\":\nExample\nNote\nIterators provide a controlled way to work with data sequences, enabling custom iteration logic for various data structures.\nIn the next chapter you will learn about the new Iterator Helper Functions introduced in ECMAScript 2025.",
      "examples": [
        "for (variable of iterable) {\n// code block to be executed\n}",
        "const name = \"W3Schools\";\n\nfor (const x of name) {\n// code block to be executed\n}",
        "const letters = [\"a\",\"b\",\"c\"];\n\nfor (const x of letters) {\n// code block to be executed\n}",
        "const numbers = [2,4,6,8];\n\nfor (const x of numbers) {\n// code block to be executed\n}",
        "const letters = new Set([\"a\",\"b\",\"c\"]);\n\nfor (const x of letters) {\n// code block to be executed\n}",
        "const fruits = new Map([\n[\"apples\", 500],\n[\"bananas\", 300],\n[\"oranges\", 200]\n]);\n\nfor (const x of fruits) {\n// code block to be executed\n}",
        "// Home Made Iterable\nfunction myNumbers() {\nlet n = 0;\nreturn {\nnext: function() {\nn += 10;\nreturn {value:n, done:false};\n}\n};\n}\n\n// Run the Iterable\nconst n = myNumbers();\nn.next(); // Returns 10\nn.next(); // Returns 20\nn.next(); // Returns 30",
        "// Create an Object\nmyNumbers = {};\n\n// Make it Iterable\nmyNumbers[Symbol.iterator] = function() {\nlet n = 0;\ndone = false;\nreturn {\nnext() {\nn += 10;\nif (n == 100) {done = true}\nreturn {value:n, done:done};\n}\n};\n}",
        "for (const num of myNumbers) {\n// Any Code Here\n}",
        "let iterator = myNumbers[Symbol.iterator]();\n\nwhile (true) {\nconst result = iterator.next();\nif (result.done) break;\n// Any Code Here\n}",
        "for..of",
        "next()",
        "Symbol.iterator",
        "the next()",
        "for (const x of iterable) { }"
      ]
    },
    {
      "title": "JavaScript Iterators",
      "summary": "The Iterator Object\nAn Iterator is an object that provides a standard way to access elements sequentially.\nAn Iterator must adheres to the Iterator Protocol: It must have a next() method.\nThe next() Method\nThe next() method returns an object with two properties:\nThe value property holds the next value in the iteration sequence.\nThe done property returns false if there are more elements to iterate over, otherwise it returns true.\nThe For Of Loop\nThe JavaScript for..of statement loops through the elements of an iterable object.\nSyntax\nNote\nTechnically, iterables must implement the Symbol.iterator method.\nIn JavaScript the following are iterables:\nStrings\nArrays\nTyped Arrays\nSets\nMaps\nBecause their prototype objects have a Symbol.iterator method:\nIterators provide a controlled way to work with data sequences, enabling custom iteration logic for various data structures.\nThey are particularly useful for handling streams of data, lazy computation of values, and building custom data structures with defined iteration behaviors.\nHelper Functions\nJavaScript 2025 (ECMAScript 2025) officially approved a set of new Iterator Helper methods that significantly enhance the functionality of iterators in JavaScript.\nThe methods provide a more functional and efficient way to work with iterable objects, including generators, by allowing direct manipulation and transformation without first converting them to arrays:\nThe Iterator.from() Method\nThe Iterator.from() creates an iterator object from an existing iterable or iterator object.\nExample\nThe filter() Method\nThe filter() method returns a new iterator containing elements that satisfy a filter function.\nExample\nThe map() Method\nThe map() method returns a new iterator with all elements transformed by a map function.\nExample\nThe flatMap() Method\nThe flatMap() method returns a new iterator by mapping each element and then flattening the results into a single iterator.\nExample\nThe take() Method\nThe take() method returns a new iterator that yields at most a specified number of elements.\nExample\nThe drop() Method\nThe drop() method returns a new iterator that skips a specified number of elements before yielding the rest.\nExample\nREMOVE ADS\nThe find() Method\nThe find(fn) method returns the first element that satisfies a test function.\nExample\nThe reduce() Method\nThe reduce() method applies a reducer function against an accumulator and each element to reduce it to a single value.\nExample\nThe every() Method\nThe every(fn) method returns true if all elements in the iterator satisfy the provided test function.\nExample\nThe some() Method\nThe some() method returns true if at least one element in the iterator satisfies the provided test function.\nExample\nThe forEach() Method\nThe forEach() method executes a provided function once for each element in the iterator.\nExample\nNote\nIterators bring the iteration concept directly into the core JavaScript language and provide a mechanism for customizing the behavior of for...of.",
      "examples": [
        "for (variable of iterable) {\n// code block to be executed\n}",
        "// Create an iterator\nconst myIterator = Iterator.from([1, 2, 3]);\n\n// Iterate over the elements\nlet text = \"\";\nfor (const x of myIterator) {\ntext += x;\n}",
        "// Create an iterator\nconst myIterator = Iterator.from([32, 33, 16, 40]);\n\n// Filter the iterator\nconst filteredIterator = myIterator.filter(x => x > 18);",
        "// Create an iterator\nconst myIterator = Iterator.from(\"123456789\");\n\n// Now you can use the map method\nconst mappedIterator = myIterator.map(x => x * 2);",
        "// Create an iterator\nconst myIterator = Iterator.from([1, 2, 3, 4, 5, 6]);\n\n// Map the Iterator\nconst mappedIterator = myIterator.flatMap(x => [x, x * 10]);",
        "const myIterator = Iterator.from([1, 2, 3, 4, 5, 6]);\n\n// Take the first five elements\nconst firstFive = myIterator.take(5);",
        "// Create an iterator\nconst myIterator = Iterator.from([1, 2, 3, 4, 5, 6]);\n\n// Remove the first five\nconst firstFive = myIterator.drop(5);",
        "// Create an iterator\nconst myIterator = Iterator.from([3, 10, 18, 30, 20]);\n\n// Find first greater than 18\nlet result = myIterator.find(x => x > 18);",
        "// Create an Iterator\nconst myIterator = Iterator.from([175, 50, 25]);\n\n// Reduce the Iterator\nlet result = myIterator.reduce(myFunc);",
        "// Create an Iterator\nconst myIterator = Iterator.from(\"123456789\");\n\n// Is every Element greater than 7?\nlet result = myIterator.every(x => x > 7);",
        "// Create an Iterator\nconst myIterator = Iterator.from(\"123456789\");\n\n// Is some Element greater than 7?\nlet result = myIterator.some(x => x > 7);",
        "// Create an iterator\nconst myIterator = Iterator.from(\"123456789\");\n\n// Iterate over all elements\nlet text = \"\";\nmyIterator.forEach (x => text += x);",
        "false",
        "true",
        "for..of",
        "Symbol.iterator",
        "Iterator.from()",
        "filter()",
        "map()",
        "flatMap()",
        "take()",
        "drop()",
        "find(fn)",
        "reduce()",
        "every(fn)",
        "some()",
        "forEach()"
      ]
    },
    {
      "title": "JavaScript Generators",
      "summary": "A JavaScript Function can only return one value.\nA JavaScript Generator can return multiple values, one by one.\nA JavaScript Generator can yield a stream of data.\nA JavaScript Generator can be paused and resumed.\nGenerator Functions\nA Generator Function is defined using the function* syntax:\nWhen called, a generator function returns a Generator Object, not a direct value:\nGenerator Objects\nA Generator Object is returned by the generator function.\nIt conforms to both the iterable and iterator protocols, meaning it can be iterated over using for...of loops.\nExample\nThe yield Keyword\nThe yield keyword pauses execution and yield a value back to the caller.\nThe generator's state is preserved, and can be resumed from the point of the yield when next() is called.\nGenerators maintain their internal state between yield calls, allowing them to continue execution from where they left off.\nNote\nThe code example above returns 1 and 2. Not 3!\nThe for..of loop exits when done:true.\nTo get all the values, return them with yield.\nExample\nGenerator Object Methods\nA Generator Object conforms to the iterable and iterator protocols.\nIt can be iterated over with for...of loops.\nIt also has methods:\nThe next() Method\nWhen called on the Generator object it resumes execution of the generator function.\nIt returns an object with and value and a boolean, indicating if the generator has finished:\n{ value: value, done: true|false}\nCustom Iterators\nGenerators simplify the creation of custom iterators for complex data structures or sequences.\nThey can efficiently generate values on demand, making them suitable for potentially infinite data streams.\nThey can pause and resume execution, which can be useful for fine-grained control over program flow.\nBefore async/await, generators were used with Promises to manage asynchronous operations in a more sequential-looking manner.\nNote\nGenerators bring the iteration concept directly into the core JavaScript language and provide a mechanism for customizing the behavior of for...of.",
      "examples": [
        "function* myGenerator() {}",
        "{value:1, done:false}",
        "function* myStream() {\n// return {value:1, done:false}\nyield 1;\n\n// return {value:2, done:false}\nyield 2;\n\n// return {value:3, done:true}\nreturn 3;\n}\n\n// Create a Generator\nlet myGenerator = myStream();\n\n// Iterate over the Generator\nfor (let value of myGenerator) { // code }",
        "true|false"
      ]
    },
    {
      "title": "JavaScript Callbacks",
      "summary": "\"I will call back later!\"\nA callback is a function passed as an argument to another function\nThis technique allows a function to call another function\nA callback function can run after another function has finished\nFunction Sequence\nJavaScript functions are executed in the sequence they are called. Not in the sequence they are defined.\nThis example will display \"Hello\", but end up with \"Goodbye\" because the functions are called in that order:\nExample\nTry it Yourself »\nThis example will display \"Goodbye\", but end up with \"Hello\" because the functions are called in that order:\nExample\nTry it Yourself »\nSequence Control\nSometimes you would like to have better control over when to execute a function.\nSuppose you want to do a calculation, and then display the result.\nYou could call a calculator function (myCalculator), save the result, and then call another function (myDisplayer) to display the result:\nExample\nTry it Yourself »\nOr, you could call a calculator function (myCalculator), and let the calculator function call the display function (myDisplayer):\nExample\nTry it Yourself »\nThe problem with the first example above, is that you have to call two functions to display the result.\nThe problem with the second example, is that you cannot prevent the calculator function from displaying the result.\nNow it is time to bring in a callback.\nREMOVE ADS\nJavaScript Callbacks\nA callback is a function passed as an argument to another function.\nUsing a callback, you could call the calculator function (myCalculator) with a callback (myCallback), and let the calculator function run the callback after the calculation is finished:\nExample\nIn the example above, myDisplayer is a called a callback function.\nIt is passed to myCalculator() as an argument.\nNote\nWhen you pass a function as an argument, remember not to use parenthesis.\nRight: myCalculator(5, 5, myDisplayer);\nWrong:\nmyCalculator(5, 5, myDisplayer())\n;\nExample\nIn the example above, (x) => x >= 0 is a callback function.\nIt is passed to removeNeg() as an argument.\nWhen to Use a Callback?\nThe examples above are not very exciting.\nThey are simplified to teach you the callback syntax.\nWhere callbacks really shine are in asynchronous functions, where one function has to wait for another function (like waiting for a file to load).\nAsynchronous functions are covered in the next chapter.",
      "examples": [
        "function myFirst() {\nmyDisplayer(\"Hello\");\n}\n\nfunction mySecond() {\nmyDisplayer(\"Goodbye\");\n}\n\nmyFirst();\nmySecond();",
        "function myDisplayer(some) {\ndocument.getElementById(\"demo\").innerHTML = some;\n}\n\nfunction myCalculator(num1, num2) {\nlet sum = num1 + num2;\nreturn sum;\n}\n\nlet result = myCalculator(5, 5);\nmyDisplayer(result);",
        "function myDisplayer(some) {\ndocument.getElementById(\"demo\").innerHTML = some;\n}\n\nfunction myCalculator(num1, num2) {\nlet sum = num1 + num2;\nmyDisplayer(sum);\n}\n\nmyCalculator(5, 5);",
        "function myDisplayer(some) {\ndocument.getElementById(\"demo\").innerHTML = some;\n}\n\nfunction myCalculator(num1, num2, myCallback) {\nlet sum = num1 + num2;\nmyCallback(sum);\n}\n\nmyCalculator(5, 5, myDisplayer);",
        "// Create an Array\nconst myNumbers = [4, 1, -20, -7, 5, 9, -6];\n\n// Call removeNeg with a callback\nconst posNumbers = removeNeg(myNumbers, (x) => x >= 0);\n\n// Display Result\ndocument.getElementById(\"demo\").innerHTML = posNumbers;\n\n// Keep only positive numbers\nfunction removeNeg(numbers, callback) {\nconst myArray = [];\nfor (const x of numbers) {\nif (callback(x)) {\nmyArray.push(x);\n}\n}\nreturn myArray;\n}",
        "myCalculator",
        "myDisplayer",
        "myCallback",
        "myCalculator()",
        "(x) => x >= 0",
        "removeNeg()"
      ]
    },
    {
      "title": "Asynchronous JavaScript",
      "summary": "\"I will finish later!\"\nFunctions running in parallel with other functions are called asynchronous\nA good example is JavaScript setTimeout()\nAsynchronous JavaScript\nThe examples used in the previous chapter, was very simplified.\nThe purpose of the examples was to demonstrate the syntax of callback functions:\nExample\nTry it Yourself »\nIn the example above, myDisplayer is the name of a function.\nIt is passed to myCalculator() as an argument.\nIn the real world, callbacks are most often used with asynchronous functions.\nA typical example is JavaScript setTimeout().\nWaiting for a Timeout\nWhen using the JavaScript function setTimeout(), you can specify a callback function to be executed on time-out:\nExample\nTry it Yourself »\nIn the example above, myFunction is used as a callback.\nmyFunction is passed to setTimeout() as an argument.\n3000 is the number of milliseconds before time-out, so myFunction() will be called after 3 seconds.\nNote\nWhen you pass a function as an argument, remember not to use parenthesis.\nRight: setTimeout(myFunction, 3000);\nWrong:\nsetTimeout(myFunction(), 3000)\n;\nInstead of passing the name of a function as an argument to another function, you can always pass a whole function instead:\nExample\nTry it Yourself »\nIn the example above, function(){ myFunction(\"I love You !!!\"); } is used as a callback. It is a complete function. The complete function is passed to setTimeout() as an argument.\n3000 is the number of milliseconds before time-out, so myFunction() will be called after 3 seconds.\nREMOVE ADS\nWaiting for Intervals:\nWhen using the JavaScript function setInterval(), you can specify a callback function to be executed for each interval:\nExample\nTry it Yourself »\nIn the example above, myFunction is used as a callback.\nmyFunction is passed to setInterval() as an argument.\n1000 is the number of milliseconds between intervals, so myFunction() will be called every second.\nCallback Alternatives\nWith asynchronous programming, JavaScript programs can start long-running tasks, and continue running other tasks in parallel.\nBut, asynchronus programmes are difficult to write and difficult to debug.\nBecause of this, most modern asynchronous JavaScript methods don't use callbacks. Instead, in JavaScript, asynchronous programming is solved using Promises instead.\nNote\nYou will learn about promises in the next chapter of this tutorial.",
      "examples": [
        "function myDisplayer(something) {\ndocument.getElementById(\"demo\").innerHTML = something;\n}\n\nfunction myCalculator(num1, num2, myCallback) {\nlet sum = num1 + num2;\nmyCallback(sum);\n}\n\nmyCalculator(5, 5, myDisplayer);",
        "setTimeout(myFunction, 3000);\n\nfunction myFunction() {\ndocument.getElementById(\"demo\").innerHTML = \"I love You !!\";\n}",
        "setTimeout(function() { myFunction(\"I love You !!!\"); }, 3000);\n\nfunction myFunction(value) {\ndocument.getElementById(\"demo\").innerHTML = value;\n}",
        "setInterval(myFunction, 1000);\n\nfunction myFunction() {\nlet d = new Date();\ndocument.getElementById(\"demo\").innerHTML=\nd.getHours() + \":\" +\nd.getMinutes() + \":\" +\nd.getSeconds();\n}",
        "myDisplayer",
        "myCalculator()",
        "setTimeout()",
        "myFunction",
        "myFunction()",
        "function(){ myFunction(\"I love You !!!\"); }",
        "setInterval()"
      ]
    },
    {
      "title": "JavaScript Promises",
      "summary": "\"I Promise a Result!\"\n\"Producing code\" is code that can take some time\n\"Consuming code\" is code that must wait for the result\nA Promise is an Object that links Producing code and Consuming code\nJavaScript Promise Object\nA Promise contains both the producing code and calls to the consuming code:\nPromise Syntax\nWhen the producing code obtains the result, it should call one of the two callbacks:\nPromise Object Properties\nA JavaScript Promise object can be:\nPending\nFulfilled\nRejected\nThe Promise object supports two properties: state and result.\nWhile a Promise object is \"pending\" (working), the result is undefined.\nWhen a Promise object is \"fulfilled\", the result is a value.\nWhen a Promise object is \"rejected\", the result is an error object.\nYou cannot access the Promise properties state and result.\nYou must use a Promise method to handle promises.\nPromise How To\nHere is how to use a Promise:\nPromise.then() takes two arguments, a callback for success and another for failure.\nBoth are optional, so you can add a callback for success or failure only.\nExample\nTry it Yourself »\nREMOVE ADS\nJavaScript Promise Examples\nTo demonstrate the use of promises, we will use the callback examples from the previous chapter:\nWaiting for a Timeout\nWaiting for a File\nWaiting for a Timeout\nExample Using Callback\nTry it Yourself »\nExample Using Promise\nTry it Yourself »\nWaiting for a file\nExample using Callback\nTry it Yourself »\nExample using Promise\nTry it Yourself »\nBrowser Support\nECMAScript 2015, also known as ES6, introduced the JavaScript Promise object.\nThe following table defines the first browser version with full support for Promise objects:",
      "examples": [
        "let myPromise = new Promise(function(myResolve, myReject) {\n// \"Producing Code\" (May take some time)\n\nmyResolve(); // when successful\nmyReject();  // when error\n});\n\n// \"Consuming Code\" (Must wait for a fulfilled Promise)\nmyPromise.then(\nfunction(value) { /* code if successful */ },\nfunction(error) { /* code if some error */ }\n);",
        "myPromise.then(\nfunction(value) { /* code if successful */ },\nfunction(error) { /* code if some error */ }\n);",
        "function myDisplayer(some) {\ndocument.getElementById(\"demo\").innerHTML = some;\n}\n\nlet myPromise = new Promise(function(myResolve, myReject) {\nlet x = 0;\n\n// The producing code (this may take some time)\n\nif (x == 0) {\nmyResolve(\"OK\");\n} else {\nmyReject(\"Error\");\n}\n});\n\nmyPromise.then(\nfunction(value) {myDisplayer(value);},\nfunction(error) {myDisplayer(error);}\n);",
        "setTimeout(function() { myFunction(\"I love You !!!\"); }, 3000);\n\nfunction myFunction(value) {\ndocument.getElementById(\"demo\").innerHTML = value;\n}",
        "let myPromise = new Promise(function(myResolve, myReject) {\nsetTimeout(function() { myResolve(\"I love You !!\"); }, 3000);\n});\n\nmyPromise.then(function(value) {\ndocument.getElementById(\"demo\").innerHTML = value;\n});",
        "function getFile(myCallback) {\nlet req = new XMLHttpRequest();\nreq.open('GET', \"mycar.html\");\nreq.onload = function() {\nif (req.status == 200) {\nmyCallback(req.responseText);\n} else {\nmyCallback(\"Error: \" + req.status);\n}\n}\nreq.send();\n}\n\ngetFile(myDisplayer);",
        "let myPromise = new Promise(function(myResolve, myReject) {\nlet req = new XMLHttpRequest();\nreq.open('GET', \"mycar.html\");\nreq.onload = function() {\nif (req.status == 200) {\nmyResolve(req.response);\n} else {\nmyReject(\"File not Found\");\n}\n};\nreq.send();\n});\n\nmyPromise.then(\nfunction(value) {myDisplayer(value);},\nfunction(error) {myDisplayer(error);}\n);"
      ]
    },
    {
      "title": "JavaScript Async",
      "summary": "\"async and await make promises easier to write\"\nasync makes a function return a Promise\nawait makes a function wait for a Promise\nAsync Syntax\nThe keyword async before a function makes the function return a promise:\nExample\nIs the same as:\nHere is how to use the Promise:\nExample\nTry it Yourself »\nOr simpler, since you expect a normal value (a normal response, not an error):\nExample\nTry it Yourself »\nAwait Syntax\nThe await keyword can only be used inside an async function.\nThe await keyword makes the function pause the execution and wait for a resolved promise before it continues:\nREMOVE ADS\nExample\nLet's go slowly and learn how to use it.\nBasic Syntax\nTry it Yourself »\nThe two arguments (resolve and reject) are pre-defined by JavaScript.\nWe will not create them, but call one of them when the executor function is ready.\nVery often we will not need a reject function.\nExample without reject\nTry it Yourself »\nWaiting for a Timeout\nTry it Yourself »\nWaiting for a File\nTry it Yourself »\nBrowser Support\nECMAScript 2017 introduced the JavaScript keywords async and await.\nThe following table defines the first browser version with full support for both:",
      "examples": [
        "async function myFunction() {\nreturn \"Hello\";\n}",
        "function myFunction() {\nreturn Promise.resolve(\"Hello\");\n}",
        "myFunction().then(\nfunction(value) { /* code if successful */ },\nfunction(error) { /* code if some error */ }\n);",
        "async function myFunction() {\nreturn \"Hello\";\n}\nmyFunction().then(\nfunction(value) {myDisplayer(value);},\nfunction(error) {myDisplayer(error);}\n);",
        "async function myFunction() {\nreturn \"Hello\";\n}\nmyFunction().then(\nfunction(value) {myDisplayer(value);}\n);",
        "let value = await promise;",
        "async function myDisplay() {\nlet myPromise = new Promise(function(resolve, reject) {\nresolve(\"I love You !!\");\n});\ndocument.getElementById(\"demo\").innerHTML = await myPromise;\n}\n\nmyDisplay();",
        "async function myDisplay() {\nlet myPromise = new Promise(function(resolve) {\nresolve(\"I love You !!\");\n});\ndocument.getElementById(\"demo\").innerHTML = await myPromise;\n}\n\nmyDisplay();",
        "async function myDisplay() {\nlet myPromise = new Promise(function(resolve) {\nsetTimeout(function() {resolve(\"I love You !!\");}, 3000);\n});\ndocument.getElementById(\"demo\").innerHTML = await myPromise;\n}\n\nmyDisplay();",
        "async function getFile() {\nlet myPromise = new Promise(function(resolve) {\nlet req = new XMLHttpRequest();\nreq.open('GET', \"mycar.html\");\nreq.onload = function() {\nif (req.status == 200) {\nresolve(req.response);\n} else {\nresolve(\"File not Found\");\n}\n};\nreq.send();\n});\ndocument.getElementById(\"demo\").innerHTML = await myPromise;\n}\n\ngetFile();",
        "async",
        "await"
      ]
    },
    {
      "title": "JavaScript Modules",
      "summary": "Modules\nJavaScript modules allow you to break up your code into separate files.\nThis makes it easier to maintain a code-base.\nModules are imported from external files with the import statement.\nModules also rely on type=\"module\" in the <script> tag.\nExample\nTry it Yourself »\nExport\nModules with functions or variables can be stored in any external file.\nThere are two types of exports: Named Exports and Default Exports.\nNamed Exports\nLet us create a file named person.js, and fill it with the things we want to export.\nYou can create named exports two ways. In-line individually, or all at once at the bottom.\nIn-line individually:\nperson.js\nAll at once at the bottom:\nperson.js\nDefault Exports\nLet us create another file, named message.js, and use it for demonstrating default export.\nYou can only have one default export in a file.\nExample\nmessage.js\nREMOVE ADS\nImport\nYou can import modules into a file in two ways, based on if they are named exports or default exports.\nNamed exports are constructed using curly braces. Default exports are not.\nImport from named exports\nImport named exports from the file person.js:\nTry it Yourself »\nImport from default exports\nImport a default export from the file message.js:\nTry it Yourself »\nNote\nModules only work with the HTTP(s) protocol.\nA web-page opened via the file:// protocol cannot use import / export.",
      "examples": [
        "<script type=\"module\">\nimport message from \"./message.js\";\n</script>",
        "export const name = \"Jesse\";\nexport const age = 40;",
        "const name = \"Jesse\";\nconst age = 40;\n\nexport {name, age};",
        "const message = () => {\nconst name = \"Jesse\";\nconst age = 40;\nreturn name + ' is ' + age + 'years old.';\n};\n\nexport default message;",
        "import { name, age } from \"./person.js\";",
        "import message from \"./message.js\";",
        "import",
        "type=\"module\"",
        "person.js",
        "message.js"
      ]
    },
    {
      "title": "JavaScript HTML DOM",
      "summary": "With the HTML DOM, JavaScript can access and change all the elements of an HTML document.\nThe HTML DOM (Document Object Model)\nWhen a web page is loaded, the browser creates a Document Object Model of the page.\nThe HTML DOM model is constructed as a tree of Objects:\nThe HTML DOM Tree of Objects\nWith the object model, JavaScript gets all the power it needs to create dynamic HTML:\nJavaScript can change all the HTML elements in the page\nJavaScript can change all the HTML attributes in the page\nJavaScript can change all the CSS styles in the page\nJavaScript can remove existing HTML elements and attributes\nJavaScript can add new HTML elements and attributes\nJavaScript can react to all existing HTML events in the page\nJavaScript can create new HTML events in the page\nWhat You Will Learn\nIn the next chapters of this tutorial you will learn:\nHow to change the content of HTML elements\nHow to change the style (CSS) of HTML elements\nHow to react to HTML DOM events\nHow to add and delete HTML elements\nREMOVE ADS\nWhat is the DOM?\nThe DOM is a W3C (World Wide Web Consortium) standard.\nThe DOM defines a standard for accessing documents:\n\"The W3C Document Object Model (DOM) is a platform and language-neutral interface that allows programs and scripts to dynamically access and update the content, structure, and style of a document.\"\nThe W3C DOM standard is separated into 3 different parts:\nCore DOM - standard model for all document types\nXML DOM - standard model for XML documents\nHTML DOM - standard model for HTML documents\nWhat is the HTML DOM?\nThe HTML DOM is a standard object model and programming interface for HTML. It defines:\nThe HTML elements as objects\nThe properties of all HTML elements\nThe methods to access all HTML elements\nThe events for all HTML elements\nIn other words: The HTML DOM is a standard for how to get, change, add, or delete HTML elements.",
      "examples": []
    },
    {
      "title": "JavaScript - HTML DOM Methods",
      "summary": "HTML DOM methods are actions you can perform (on HTML Elements).\nHTML DOM properties are values (of HTML Elements) that you can set or change.\nThe DOM Programming Interface\nThe HTML DOM can be accessed with JavaScript (and with other programming languages).\nIn the DOM, all HTML elements are defined as objects.\nThe programming interface is the properties and methods of each object.\nA property is a value that you can get or set (like changing the content of an HTML element).\nA method is an action you can do (like add or deleting an HTML element).\nExample\nThe following example changes the content (the innerHTML) of the <p> element with id=\"demo\":\nExample\nIn the example above, getElementById is a method, while innerHTML is a property.\nThe getElementById Method\nThe most common way to access an HTML element is to use the id of the element.\nIn the example above the getElementById method used id=\"demo\" to find the element.\nThe innerHTML Property\nThe easiest way to get the content of an element is by using the innerHTML property.\nThe innerHTML property is useful for getting or replacing the content of HTML elements.\nThe innerHTML property can be used to get or change any HTML element, including <html> and <body>.",
      "examples": [
        "<html>\n<body>\n\n<p id=\"demo\"></p>\n\n<script>\ndocument.getElementById(\"demo\").innerHTML = \"Hello World!\";\n</script>\n\n</body>\n</html>",
        "innerHTML",
        "<p>",
        "id=\"demo\"",
        "getElementById",
        "id",
        "<html>",
        "<body>"
      ]
    },
    {
      "title": "JavaScript HTML DOM Document",
      "summary": "The HTML DOM document object is the owner of all other objects in your web page.\nThe HTML DOM Document Object\nThe document object represents your web page.\nIf you want to access any element in an HTML page, you always start with accessing the document object.\nBelow are some examples of how you can use the document object to access and manipulate HTML.\nFinding HTML Elements\nChanging HTML Elements\nAdding and Deleting Elements\nREMOVE ADS\nAdding Events Handlers\nFinding HTML Objects\nThe first HTML DOM Level 1 (1998), defined 11 HTML objects, object collections, and properties. These are still valid in HTML5.\nLater, in HTML DOM Level 3, more objects, collections, and properties were added.",
      "examples": []
    },
    {
      "title": "JavaScript HTML DOM Elements",
      "summary": "This page teaches you how to find and access HTML elements in an HTML page.\nFinding HTML Elements\nOften, with JavaScript, you want to manipulate HTML elements.\nTo do so, you have to find the elements first. There are several ways to do this:\nFinding HTML elements by id\nFinding HTML elements by tag name\nFinding HTML elements by class name\nFinding HTML elements by CSS selectors\nFinding HTML elements by HTML object collections\nFinding HTML Element by Id\nThe easiest way to find an HTML element in the DOM, is by using the element id.\nThis example finds the element with id=\"intro\":\nExample\nIf the element is found, the method will return the element as an object (in element).\nIf the element is not found, element will contain null.\nFinding HTML Elements by Tag Name\nThis example finds all <p> elements:\nExample\nThis example finds the element with id=\"main\", and then finds all <p> elements inside \"main\":\nExample\nREMOVE ADS\nFinding HTML Elements by Class Name\nIf you want to find all HTML elements with the same class name, use getElementsByClassName().\nThis example returns a list of all elements with class=\"intro\".\nExample\nFinding HTML Elements by CSS Selectors\nIf you want to find all HTML elements that match a specified CSS selector (id, class names, types, attributes, values of attributes, etc), use the querySelectorAll() method.\nThis example returns a list of all <p> elements with class=\"intro\".\nExample\nFinding HTML Elements by HTML Object Collections\nThis example finds the form element with id=\"frm1\", in the forms collection, and displays all element values:\nExample\nThe following HTML objects (and object collections) are also accessible:\ndocument.anchors\ndocument.body\ndocument.documentElement\ndocument.embeds\ndocument.forms\ndocument.head\ndocument.images\ndocument.links\ndocument.scripts\ndocument.title",
      "examples": [
        "const element = document.getElementById(\"intro\");",
        "const element = document.getElementsByTagName(\"p\");",
        "const x = document.getElementById(\"main\");\nconst y = x.getElementsByTagName(\"p\");",
        "const x = document.getElementsByClassName(\"intro\");",
        "const x = document.querySelectorAll(\"p.intro\");",
        "const x = document.forms[\"frm1\"];\nlet text = \"\";\nfor (let i = 0; i < x.length; i++) {\ntext += x.elements[i].value + \"<br>\";\n}\ndocument.getElementById(\"demo\").innerHTML = text;",
        "id=\"intro\"",
        "null",
        "<p>",
        "id=\"main\"",
        "\"main\"",
        "getElementsByClassName()",
        "class=\"intro\"",
        "querySelectorAll()",
        "id=\"frm1\""
      ]
    },
    {
      "title": "JavaScript HTML DOM - Changing HTML",
      "summary": "The HTML DOM allows JavaScript to change the content of HTML elements.\nChanging HTML Content\nThe easiest way to modify the content of an HTML element is by using the innerHTML property.\nTo change the content of an HTML element, use this syntax:\nThis example changes the content of a <p> element:\nExample\nExample explained:\nThe HTML document above contains a <p> element with id=\"p1\"\nWe use the HTML DOM to get the element with id=\"p1\"\nA JavaScript changes the content (innerHTML) of that element to \"New text!\"\nThis example changes the content of an <h1> element:\nExample\nExample explained:\nThe HTML document above contains an <h1> element with id=\"id01\"\nWe use the HTML DOM to get the element with id=\"id01\"\nA JavaScript changes the content (innerHTML) of that element to \"New Heading\"\nREMOVE ADS\nChanging the Value of an Attribute\nTo change the value of an HTML attribute, use this syntax:\nThis example changes the value of the src attribute of an <img> element:\nExample\nExample explained:\nThe HTML document above contains an <img> element with id=\"myImage\"\nWe use the HTML DOM to get the element with id=\"myImage\"\nA JavaScript changes the src attribute of that element from \"smiley.gif\" to \"landscape.jpg\"\nDynamic HTML content\nJavaScript can create dynamic HTML content:\nDate : Sun Sep 21 2025 10:33:40 GMT+0800 (Malaysia Time)\nExample\ndocument.write()\nIn JavaScript, document.write() can be used to write directly to the HTML output stream:\nExample\nNever use document.write() after the document is loaded. It will overwrite the document.",
      "examples": [
        "document.getElementById(id).innerHTML = new HTML",
        "<html>\n<body>\n\n<p id=\"p1\">Hello World!</p>\n\n<script>\ndocument.getElementById(\"p1\").innerHTML = \"New text!\";\n</script>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<body>\n\n<h1 id=\"id01\">Old Heading</h1>\n\n<script>\nconst element = document.getElementById(\"id01\");\nelement.innerHTML = \"New Heading\";\n</script>\n\n</body>\n</html>",
        "document.getElementById(id).attribute = new value",
        "<!DOCTYPE html>\n<html>\n<body>\n\n<img id=\"myImage\" src=\"smiley.gif\">\n\n<script>\ndocument.getElementById(\"myImage\").src = \"landscape.jpg\";\n</script>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<body>\n\n<script>\ndocument.getElementById(\"demo\").innerHTML = \"Date : \" + Date(); </script>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<body>\n\n<p>Bla bla bla</p>\n\n<script>\ndocument.write(Date());\n</script>\n\n<p>Bla bla bla</p>\n\n</body>\n</html>",
        "innerHTML",
        "<p>",
        "id=\"p1\"",
        "<h1>",
        "id=\"id01\"",
        "<img>",
        "id=\"myImage\"",
        "src",
        "document.write()"
      ]
    },
    {
      "title": "JavaScript Forms",
      "summary": "JavaScript Form Validation\nHTML form validation can be done by JavaScript.\nIf a form field (fname) is empty, this function alerts a message, and returns false, to prevent the form from being submitted:\nJavaScript Example\nThe function can be called when the form is submitted:\nHTML Form Example\nJavaScript Can Validate Numeric Input\nJavaScript is often used to validate numeric input:\nPlease input a number between 1 and 10\nREMOVE ADS\nAutomatic HTML Form Validation\nHTML form validation can be performed automatically by the browser:\nIf a form field (fname) is empty, the required attribute prevents this form from being submitted:\nHTML Form Example\nAutomatic HTML form validation does not work in Internet Explorer 9 or earlier.\nData Validation\nData validation is the process of ensuring that user input is clean, correct, and useful.\nTypical validation tasks are:\nhas the user filled in all required fields?\nhas the user entered a valid date?\nhas the user entered text in a numeric field?\nMost often, the purpose of data validation is to ensure correct user input.\nValidation can be defined by many different methods, and deployed in many different ways.\nServer side validation is performed by a web server, after input has been sent to the server.\nClient side validation is performed by a web browser, before input is sent to a web server.\nHTML Constraint Validation\nHTML5 introduced a new HTML validation concept called constraint validation.\nHTML constraint validation is based on:\nConstraint validation HTML Input Attributes\nConstraint validation CSS Pseudo Selectors\nConstraint validation DOM Properties and Methods\nConstraint Validation HTML Input Attributes\nFor a full list, go to HTML Input Attributes.\nConstraint Validation CSS Pseudo Selectors\nFor a full list, go to CSS Pseudo Classes.",
      "examples": [
        "function validateForm() {\nlet x = document.forms[\"myForm\"][\"fname\"].value;\nif (x == \"\") {\nalert(\"Name must be filled out\");\nreturn false;\n}\n}",
        "<form name=\"myForm\" action=\"/action_page.php\" onsubmit=\"return validateForm()\" method=\"post\">\nName: <input type=\"text\" name=\"fname\">\n<input type=\"submit\" value=\"Submit\">\n</form>",
        "<form action=\"/action_page.php\" method=\"post\">\n<input type=\"text\" name=\"fname\" required>\n<input type=\"submit\" value=\"Submit\">\n</form>",
        "required"
      ]
    },
    {
      "title": "JavaScript HTML DOM - Changing CSS",
      "summary": "The HTML DOM allows JavaScript to change the style of HTML elements.\nChanging HTML Style\nTo change the style of an HTML element, use this syntax:\nThe following example changes the style of a <p> element:\nExample\nUsing Events\nThe HTML DOM allows you to execute code when an event occurs.\nEvents are generated by the browser when \"things happen\" to HTML elements:\nAn element is clicked on\nThe page has loaded\nInput fields are changed\nYou will learn more about events in the next chapter of this tutorial.\nThis example changes the style of the HTML element with id=\"id1\", when the user clicks a button:\nExample\nREMOVE ADS\nMore Examples\nVisibility How to make an element invisible. Do you want to show the element or not?\nHTML DOM Style Object Reference\nFor all HTML DOM style properties, look at our complete HTML DOM Style Object Reference.",
      "examples": [
        "document.getElementById(id).style.property = new style",
        "<html>\n<body>\n\n<p id=\"p2\">Hello World!</p>\n\n<script>\ndocument.getElementById(\"p2\").style.color = \"blue\";\n</script>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<body>\n\n<h1 id=\"id1\">My Heading 1</h1>\n\n<button type=\"button\"\nonclick=\"document.getElementById('id1').style.color = 'red'\">\nClick Me!</button>\n\n</body>\n</html>",
        "<p>",
        "id=\"id1\""
      ]
    },
    {
      "title": "JavaScript HTML DOM Animation",
      "summary": "Learn to create HTML animations using JavaScript.\nA Basic Web Page\nTo demonstrate how to create HTML animations with JavaScript, we will use a simple web page:\nExample\nCreate an Animation Container\nAll animations should be relative to a container element.\nExample\nStyle the Elements\nThe container element should be created with style = \"position: relative\".\nThe animation element should be created with style = \"position: absolute\".\nExample\nREMOVE ADS\nAnimation Code\nJavaScript animations are done by programming gradual changes in an element's style.\nThe changes are called by a timer. When the timer interval is small, the animation looks continuous.\nThe basic code is:\nExample\nCreate the Full Animation Using JavaScript\nExample",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<body>\n\n<h1>My First JavaScript Animation</h1>\n\n<div id=\"animation\">My animation will go here</div>\n\n</body>\n</html>",
        "<div id =\"container\">\n<div id =\"animate\">My animation will go here</div>\n</div>",
        "#container {\nwidth: 400px;\nheight: 400px;\nposition: relative;\nbackground: yellow;\n}\n#animate {\nwidth: 50px;\nheight: 50px;\nposition: absolute;\nbackground: red;\n}",
        "id = setInterval(frame, 5);\n\nfunction frame() {\nif (/* test for finished */) {\nclearInterval(id);\n} else {\n/* code to change the element style */\n}\n}",
        "function myMove() {\nlet id = null;\nconst elem = document.getElementById(\"animate\");\nlet pos = 0;\nclearInterval(id);\nid = setInterval(frame, 5);\nfunction frame() {\nif (pos == 350) {\nclearInterval(id);\n} else {\npos++;\nelem.style.top = pos + 'px';\nelem.style.left = pos + 'px';\n}\n}\n}",
        "position: relative",
        "position: absolute"
      ]
    },
    {
      "title": "JavaScript HTML DOM Events",
      "summary": "HTML DOM allows JavaScript to react to HTML events:\nReacting to Events\nA JavaScript can be executed when an event occurs, like when a user clicks on an HTML element.\nTo execute code when a user clicks on an element, add JavaScript code to an HTML event attribute:\nExamples of HTML events:\nWhen a user clicks the mouse\nWhen a web page has loaded\nWhen an image has been loaded\nWhen the mouse moves over an element\nWhen an input field is changed\nWhen an HTML form is submitted\nWhen a user strokes a key\nIn this example, the content of the <h1> element is changed when a user clicks on it:\nExample\nIn this example, a function is called from the event handler:\nExample\nREMOVE ADS\nHTML Event Attributes\nTo assign events to HTML elements you can use event attributes.\nExample\nAssign an onclick event to a button element:\nIn the example above, a function named displayDate will be executed when the button is clicked.\nAssign Events Using the HTML DOM\nThe HTML DOM allows you to assign events to HTML elements using JavaScript:\nExample\nAssign an onclick event to a button element:\nIn the example above, a function named displayDate is assigned to an HTML element with the id=\"myBtn\".\nThe function will be executed when the button is clicked.\nThe onload and onunload Events\nThe onload and onunload events are triggered when the user enters or leaves the page.\nThe onload event can be used to check the visitor's browser type and browser version, and load the proper version of the web page based on the information.\nThe onload and onunload events can be used to deal with cookies.\nExample\nThe oninput Event\nThe oninput event is often to some action while the user input data.\nBelow is an example of how to use the oninput to change the content of an input field.\nExample\nThe onchange Event\nThe onchange event is often used in combination with validation of input fields.\nBelow is an example of how to use the onchange. The upperCase() function will be called when a user changes the content of an input field.\nExample\nThe onmouseover and onmouseout Events\nThe onmouseover and onmouseout events can be used to trigger a function when the user mouses over, or out of, an HTML element:\nTry it Yourself »\nThe onmousedown, onmouseup and onclick Events\nThe onmousedown, onmouseup, and onclick events are all parts of a mouse-click. First when a mouse-button is clicked, the onmousedown event is triggered, then, when the mouse-button is released, the onmouseup event is triggered, finally, when the mouse-click is completed, the onclick event is triggered.\nTry it Yourself »\nMore Examples\nonmousedown and onmouseup\nChange an image when a user holds down the mouse button.\nonload\nDisplay an alert box when the page has finished loading.\nonfocus\nChange the background-color of an input field when it gets focus.\nMouse Events\nChange the color of an element when the cursor moves over it.\nHTML DOM Event Object Reference\nFor a list of all HTML DOM events, look at our complete HTML DOM Event Object Reference.",
      "examples": [
        "onclick=JavaScript",
        "<!DOCTYPE html>\n<html>\n<body>\n\n<h1 onclick=\"this.innerHTML = 'Ooops!'\">Click on this text!</h1>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<body>\n\n<h1 onclick=\"changeText(this)\">Click on this text!</h1>\n\n<script>\nfunction changeText(id) {\nid.innerHTML = \"Ooops!\";\n}\n</script>\n\n</body>\n</html>",
        "<button onclick=\"displayDate()\">Try it</button>",
        "<script>\ndocument.getElementById(\"myBtn\").onclick = displayDate;\n</script>",
        "<body onload=\"checkCookies()\">",
        "<input type=\"text\" id=\"fname\" oninput=\"upperCase()\">",
        "<input type=\"text\" id=\"fname\" onchange=\"upperCase()\">",
        "<h1>",
        "displayDate",
        "id=\"myBtn\"",
        "onload",
        "onunload",
        "oninput",
        "onchange",
        "upperCase()",
        "onmouseover",
        "onmouseout",
        "onmousedown",
        "onmouseup",
        "onclick"
      ]
    },
    {
      "title": "JavaScript HTML DOM EventListener",
      "summary": "The addEventListener() method\nExample\nAdd an event listener that fires when a user clicks a button:\nThe addEventListener() method attaches an event handler to the specified element.\nThe addEventListener() method attaches an event handler to an element without overwriting existing event handlers.\nYou can add many event handlers to one element.\nYou can add many event handlers of the same type to one element, i.e two \"click\" events.\nYou can add event listeners to any DOM object not only HTML elements. i.e the window object.\nThe addEventListener() method makes it easier to control how the event reacts to bubbling.\nWhen using the addEventListener() method, the JavaScript is separated from the HTML markup, for better readability and allows you to add event listeners even when you do not control the HTML markup.\nYou can easily remove an event listener by using the removeEventListener() method.\nSyntax\nThe first parameter is the type of the event (like \"click\" or \"mousedown\" or any other HTML DOM Event.)\nThe second parameter is the function we want to call when the event occurs.\nThe third parameter is a boolean value specifying whether to use event bubbling or event capturing. This parameter is optional.\nNote that you don't use the \"on\" prefix for the event; use \"click\" instead of \"onclick\".\nAdd an Event Handler to an Element\nExample\nAlert \"Hello World!\" when the user clicks on an element:\nYou can also refer to an external \"named\" function:\nExample\nAlert \"Hello World!\" when the user clicks on an element:\nREMOVE ADS\nAdd Many Event Handlers to the Same Element\nThe addEventListener() method allows you to add many events to the same element, without overwriting existing events:\nExample\nYou can add events of different types to the same element:\nExample\nAdd an Event Handler to the window Object\nThe addEventListener() method allows you to add event listeners on any HTML DOM object such as HTML elements, the HTML document, the window object, or other objects that support events, like the xmlHttpRequest object.\nExample\nAdd an event listener that fires when a user resizes the window:\nPassing Parameters\nWhen passing parameter values, use an \"anonymous function\" that calls the specified function with the parameters:\nExample\nEvent Bubbling or Event Capturing?\nThere are two ways of event propagation in the HTML DOM, bubbling and capturing.\nEvent propagation is a way of defining the element order when an event occurs. If you have a <p> element inside a <div> element, and the user clicks on the <p> element, which element's \"click\" event should be handled first?\nIn bubbling the inner most element's event is handled first and then the outer: the <p> element's click event is handled first, then the <div> element's click event.\nIn capturing the outer most element's event is handled first and then the inner: the <div> element's click event will be handled first, then the <p> element's click event.\nWith the addEventListener() method you can specify the propagation type by using the \"useCapture\" parameter:\nThe default value is false, which will use the bubbling propagation, when the value is set to true, the event uses the capturing propagation.\nExample\nThe removeEventListener() method\nThe removeEventListener() method removes event handlers that have been attached with the addEventListener() method:\nExample\nHTML DOM Event Object Reference\nFor a list of all HTML DOM events, look at our complete HTML DOM Event Object Reference.",
      "examples": [
        "document.getElementById(\"myBtn\").addEventListener(\"click\", displayDate);",
        "element.addEventListener(event, function, useCapture);",
        "element.addEventListener(\"click\", function(){ alert(\"Hello World!\"); });",
        "element.addEventListener(\"click\", myFunction);\n\nfunction myFunction() {\nalert (\"Hello World!\");\n}",
        "element.addEventListener(\"click\", myFunction);\nelement.addEventListener(\"click\", mySecondFunction);",
        "element.addEventListener(\"mouseover\", myFunction);\nelement.addEventListener(\"click\", mySecondFunction);\nelement.addEventListener(\"mouseout\", myThirdFunction);",
        "window.addEventListener(\"resize\", function(){\ndocument.getElementById(\"demo\").innerHTML = sometext;\n});",
        "element.addEventListener(\"click\", function(){ myFunction(p1, p2); });",
        "addEventListener(event, function, useCapture);",
        "document.getElementById(\"myP\").addEventListener(\"click\", myFunction, true);\ndocument.getElementById(\"myDiv\").addEventListener(\"click\", myFunction, true);",
        "element.removeEventListener(\"mousemove\", myFunction);",
        "addEventListener()",
        "removeEventListener()",
        "click",
        "mousedown",
        "onclick",
        "xmlHttpRequest"
      ]
    },
    {
      "title": "JavaScript HTML DOM Navigation",
      "summary": "With the HTML DOM, you can navigate the node tree using node relationships.\nDOM Nodes\nAccording to the W3C HTML DOM standard, everything in an HTML document is a node:\nThe entire document is a document node\nEvery HTML element is an element node\nThe text inside HTML elements are text nodes\nEvery HTML attribute is an attribute node (deprecated)\nAll comments are comment nodes\nWith the HTML DOM, all nodes in the node tree can be accessed by JavaScript.\nNew nodes can be created, and all nodes can be modified or deleted.\nNode Relationships\nThe nodes in the node tree have a hierarchical relationship to each other.\nThe terms parent, child, and sibling are used to describe the relationships.\nIn a node tree, the top node is called the root (or root node)\nEvery node has exactly one parent, except the root (which has no parent)\nA node can have a number of children\nSiblings (brothers or sisters) are nodes with the same parent\nFrom the HTML above you can read:\n<html> is the root node\n<html> has no parents\n<html> is the parent of <head> and <body>\n<head> is the first child of <html>\n<body> is the last child of <html>\nand:\n<head> has one child: <title>\n<title> has one child (a text node): \"DOM Tutorial\"\n<body> has two children: <h1> and <p>\n<h1> has one child: \"DOM Lesson one\"\n<p> has one child: \"Hello world!\"\n<h1> and <p> are siblings\nREMOVE ADS\nNavigating Between Nodes\nYou can use the following node properties to navigate between nodes with JavaScript:\nparentNode\nchildNodes[nodenumber]\nfirstChild\nlastChild\nnextSibling\npreviousSibling\nChild Nodes and Node Values\nA common error in DOM processing is to expect an element node to contain text.\nExample:\nThe element node <title> (in the example above) does not contain text.\nIt contains a text node with the value \"DOM Tutorial\".\nThe value of the text node can be accessed by the node's innerHTML property:\nAccessing the innerHTML property is the same as accessing the nodeValue of the first child:\nAccessing the first child can also be done like this:\nAll the (3) following examples retrieves the text of an <h1> element and copies it into a <p> element:\nExample\nExample\nExample\nInnerHTML\nIn this tutorial we use the innerHTML property to retrieve the content of an HTML element.\nHowever, learning the other methods above is useful for understanding the tree structure and the navigation of the DOM.\nDOM Root Nodes\nThere are two special properties that allow access to the full document:\ndocument.body - The body of the document\ndocument.documentElement - The full document\nExample\nExample\nThe nodeName Property\nThe nodeName property specifies the name of a node.\nnodeName is read-only\nnodeName of an element node is the same as the tag name\nnodeName of an attribute node is the attribute name\nnodeName of a text node is always #text\nnodeName of the document node is always #document\nExample\nNote: nodeName always contains the uppercase tag name of an HTML element.\nThe nodeValue Property\nThe nodeValue property specifies the value of a node.\nnodeValue for element nodes is null\nnodeValue for text nodes is the text itself\nnodeValue for attribute nodes is the attribute value\nThe nodeType Property\nThe nodeType property is read only. It returns the type of a node.\nExample\nThe most important nodeType properties are:\nType 2 is deprecated in the HTML DOM (but works). It is not deprecated in the XML DOM.",
      "examples": [
        "<html>\n\n<head>\n<title>DOM Tutorial</title>\n</head>\n\n<body>\n<h1>DOM Lesson one</h1>\n<p>Hello world!</p>\n</body>\n\n</html>",
        "<title id=\"demo\">DOM Tutorial</title>",
        "myTitle = document.getElementById(\"demo\").innerHTML;",
        "myTitle = document.getElementById(\"demo\").firstChild.nodeValue;",
        "myTitle = document.getElementById(\"demo\").childNodes[0].nodeValue;",
        "<html>\n<body>\n\n<h1 id=\"id01\">My First Page</h1>\n<p id=\"id02\"></p>\n\n<script>\ndocument.getElementById(\"id02\").innerHTML = document.getElementById(\"id01\").innerHTML;\n</script>\n\n</body>\n</html>",
        "<html>\n<body>\n\n<h1 id=\"id01\">My First Page</h1>\n<p id=\"id02\"></p>\n\n<script>\ndocument.getElementById(\"id02\").innerHTML = document.getElementById(\"id01\").firstChild.nodeValue;\n</script>\n\n</body>\n</html>",
        "<html>\n<body>\n\n<h1 id=\"id01\">My First Page</h1>\n<p id=\"id02\">Hello!</p>\n\n<script>\ndocument.getElementById(\"id02\").innerHTML = document.getElementById(\"id01\").childNodes[0].nodeValue;\n</script>\n\n</body>\n</html>",
        "<html>\n<body>\n\n<h2>JavaScript HTMLDOM</h2>\n<p>Displaying document.body</p>\n\n<p id=\"demo\"></p>\n\n<script>\ndocument.getElementById(\"demo\").innerHTML = document.body.innerHTML;\n</script>\n\n</body>\n</html>",
        "<html>\n<body>\n\n<h2>JavaScript HTMLDOM</h2>\n<p>Displaying document.documentElement</p>\n\n<p id=\"demo\"></p>\n\n<script>\ndocument.getElementById(\"demo\").innerHTML = document.documentElement.innerHTML;\n</script>\n\n</body>\n</html>",
        "<h1 id=\"id01\">My First Page</h1>\n<p id=\"id02\"></p>\n\n<script>\ndocument.getElementById(\"id02\").innerHTML = document.getElementById(\"id01\").nodeName;\n</script>",
        "<html>",
        "<head>",
        "<body>",
        "<title>",
        "<h1>",
        "<p>",
        "parentNode",
        "childNodes[nodenumber]",
        "firstChild",
        "lastChild",
        "nextSibling",
        "previousSibling",
        "innerHTML",
        "nodeValue",
        "document.body",
        "document.documentElement",
        "nodeName",
        "null",
        "nodeType"
      ]
    },
    {
      "title": "JavaScript HTML DOM Elements (Nodes)",
      "summary": "Adding and Removing Nodes (HTML Elements)\nCreating New HTML Elements (Nodes)\nTo add a new element to the HTML DOM, you must create the element (element node) first, and then append it to an existing element.\nExample\nExample Explained\nThis code creates a new <p> element:\nTo add text to the <p> element, you must create a text node first. This code creates a text node:\nThen you must append the text node to the <p> element:\nFinally you must append the new element to an existing element.\nThis code finds an existing element:\nThis code appends the new element to the existing element:\nREMOVE ADS\nCreating new HTML Elements - insertBefore()\nThe appendChild() method in the previous example, appended the new element as the last child of the parent.\nIf you don't want that you can use the insertBefore() method:\nExample\nRemoving Existing HTML Elements\nTo remove an HTML element, use the remove() method:\nExample\nExample Explained\nThe HTML document contains a <div> element with two child nodes (two <p> elements):\nFind the element you want to remove:\nThen execute the remove() method on that element:\nThe remove() method does not work in older browsers, see the example below on how to use removeChild() instead.\nRemoving a Child Node\nFor browsers that does not support the remove() method, you have to find the parent node to remove an element:\nExample\nExample Explained\nThis HTML document contains a <div> element with two child nodes (two <p> elements):\nFind the element with id=\"div1\":\nFind the <p> element with id=\"p1\":\nRemove the child from the parent:\nHere is a common workaround: Find the child you want to remove, and use its parentNode property to find the parent:\nReplacing HTML Elements\nTo replace an element to the HTML DOM, use the replaceChild() method:\nExample",
      "examples": [
        "<div id=\"div1\">\n<p id=\"p1\">This is a paragraph.</p>\n<p id=\"p2\">This is another paragraph.</p>\n</div>\n\n<script>\nconst para = document.createElement(\"p\");\nconst node = document.createTextNode(\"This is new.\");\npara.appendChild(node);\n\nconst element = document.getElementById(\"div1\");\nelement.appendChild(para);\n</script>",
        "const para = document.createElement(\"p\");",
        "const node = document.createTextNode(\"This is a new paragraph.\");",
        "para.appendChild(node);",
        "const element = document.getElementById(\"div1\");",
        "element.appendChild(para);",
        "<div id=\"div1\">\n<p id=\"p1\">This is a paragraph.</p>\n<p id=\"p2\">This is another paragraph.</p>\n</div>\n\n<script>\nconst para = document.createElement(\"p\");\nconst node = document.createTextNode(\"This is new.\");\npara.appendChild(node);\n\nconst element = document.getElementById(\"div1\");\nconst child = document.getElementById(\"p1\");\nelement.insertBefore(para, child);\n</script>",
        "<div>\n<p id=\"p1\">This is a paragraph.</p>\n<p id=\"p2\">This is another paragraph.</p>\n</div>\n\n<script>\nconst elmnt = document.getElementById(\"p1\"); elmnt.remove();\n</script>",
        "<div>\n<p id=\"p1\">This is a paragraph.</p>\n<p id=\"p2\">This is another paragraph.</p>\n</div>",
        "const elmnt = document.getElementById(\"p1\");",
        "elmnt.remove();",
        "<div id=\"div1\">\n<p id=\"p1\">This is a paragraph.</p>\n<p id=\"p2\">This is another paragraph.</p>\n</div>\n\n<script>\nconst parent = document.getElementById(\"div1\");\nconst child = document.getElementById(\"p1\");\nparent.removeChild(child);\n</script>",
        "<div id=\"div1\">\n<p id=\"p1\">This is a paragraph.</p>\n<p id=\"p2\">This is another paragraph.</p>\n</div>",
        "const parent = document.getElementById(\"div1\");",
        "const child = document.getElementById(\"p1\");",
        "parent.removeChild(child);",
        "const child = document.getElementById(\"p1\");\nchild.parentNode.removeChild(child);",
        "<div id=\"div1\">\n<p id=\"p1\">This is a paragraph.</p>\n<p id=\"p2\">This is another paragraph.</p>\n</div>\n\n<script>\nconst para = document.createElement(\"p\");\nconst node = document.createTextNode(\"This is new.\");\npara.appendChild(node);\n\nconst parent = document.getElementById(\"div1\");\nconst child = document.getElementById(\"p1\");\nparent.replaceChild(para, child);\n</script>",
        "<p>",
        "appendChild()",
        "insertBefore()",
        "remove()",
        "<div>",
        "removeChild()",
        "id=\"div1\"",
        "id=\"p1\"",
        "parentNode",
        "replaceChild()"
      ]
    },
    {
      "title": "JavaScript HTML DOM Collections",
      "summary": "The HTMLCollection Object\nThe getElementsByTagName() method returns an HTMLCollection object.\nAn HTMLCollection object is an array-like list (collection) of HTML elements.\nThe following code selects all <p> elements in a document:\nExample\nThe elements in the collection can be accessed by an index number.\nTo access the second <p> element you can write:\nNote: The index starts at 0.\nHTML HTMLCollection Length\nThe length property defines the number of elements in an HTMLCollection:\nExample\nThe length property is useful when you want to loop through the elements in a collection:\nExample\nChange the text color of all <p> elements:\nAn HTMLCollection is NOT an array!\nAn HTMLCollection may look like an array, but it is not.\nYou can loop through the list and refer to the elements with a number (just like an array).\nHowever, you cannot use array methods like valueOf(), pop(), push(), or join() on an HTMLCollection.",
      "examples": [
        "const myCollection = document.getElementsByTagName(\"p\");",
        "myCollection[1]",
        "myCollection.length",
        "const myCollection = document.getElementsByTagName(\"p\");\nfor (let i = 0; i < myCollection.length; i++) {\nmyCollection[i].style.color = \"red\";\n}",
        "getElementsByTagName()",
        "HTMLCollection",
        "<p>",
        "length"
      ]
    },
    {
      "title": "JavaScript HTML DOM Node Lists",
      "summary": "The HTML DOM NodeList Object\nA NodeList object is a list (collection) of nodes extracted from a document.\nA NodeList object is almost the same as an HTMLCollection object.\nSome (older) browsers return a NodeList object instead of an HTMLCollection for methods like getElementsByClassName().\nAll browsers return a NodeList object for the property childNodes.\nMost browsers return a NodeList object for the method querySelectorAll().\nThe following code selects all <p> nodes in a document:\nExample\nThe elements in the NodeList can be accessed by an index number.\nTo access the second <p> node you can write:\nNote: The index starts at 0.\nHTML DOM Node List Length\nThe length property defines the number of nodes in a node list:\nExample\nThe length property is useful when you want to loop through the nodes in a node list:\nExample\nChange the color of all <p> elements in a node list:\nREMOVE ADS\nThe Difference Between an HTMLCollection and a NodeList\nA NodeList and an HTMLcollection is very much the same thing.\nBoth are array-like collections (lists) of nodes (elements) extracted from a document. The nodes can be accessed by index numbers. The index starts at 0.\nBoth have a length property that returns the number of elements in the list (collection).\nAn HTMLCollection is a collection of document elements.\nA NodeList is a collection of document nodes (element nodes, attribute nodes, and text nodes).\nHTMLCollection items can be accessed by their name, id, or index number.\nNodeList items can only be accessed by their index number.\nAn HTMLCollection is always a live collection. Example: If you add a <li> element to a list in the DOM, the list in the HTMLCollection will also change.\nA NodeList is most often a static collection. Example: If you add a <li> element to a list in the DOM, the list in NodeList will not change.\nThe getElementsByClassName() and getElementsByTagName() methods return a live HTMLCollection.\nThe querySelectorAll() method returns a static NodeList.\nThe childNodes property returns a live NodeList.\nNot an Array!\nA NodeList may look like an array, but it is not.\nYou can loop through a NodeList and refer to its nodes by index.\nBut, you cannot use Array methods like push(), pop(), or join() on a NodeList.",
      "examples": [
        "const myNodeList = document.querySelectorAll(\"p\");",
        "myNodeList[1]",
        "myNodelist.length",
        "const myNodelist = document.querySelectorAll(\"p\");\nfor (let i = 0; i < myNodelist.length; i++) {\nmyNodelist[i].style.color = \"red\";\n}",
        "NodeList",
        "HTMLCollection",
        "getElementsByClassName()",
        "childNodes",
        "querySelectorAll()",
        "<p>",
        "length",
        "getElementsByTagName()"
      ]
    },
    {
      "title": "JavaScript Window - The Browser Object Model",
      "summary": "The Browser Object Model (BOM) allows JavaScript to \"talk to\" the browser.\nThe Browser Object Model (BOM)\nThere are no official standards for the Browser Object Model (BOM).\nSince modern browsers have implemented (almost) the same methods and properties for JavaScript interactivity, it is often referred to, as methods and properties of the BOM.\nThe Window Object\nThe window object is supported by all browsers. It represents the browser's window.\nAll global JavaScript objects, functions, and variables automatically become members of the window object.\nGlobal variables are properties of the window object.\nGlobal functions are methods of the window object.\nEven the document object (of the HTML DOM) is a property of the window object:\nis the same as:\nWindow Size\nTwo properties can be used to determine the size of the browser window.\nBoth properties return the sizes in pixels:\nwindow.innerHeight - the inner height of the browser window (in pixels)\nwindow.innerWidth - the inner width of the browser window (in pixels)\nThe browser window (the browser viewport) is NOT including toolbars and scrollbars.\nExample\nOther Window Methods\nSome other methods:\nwindow.open() - open a new window\nwindow.close() - close the current window\nwindow.moveTo() - move the current window\nwindow.resizeTo() - resize the current window",
      "examples": [
        "window.document.getElementById(\"header\");",
        "document.getElementById(\"header\");",
        "let w = window.innerWidth;\nlet h = window.innerHeight;",
        "window",
        "window.innerHeight",
        "window.innerWidth",
        "window.open()",
        "window.close()",
        "window.moveTo()",
        "window.resizeTo()"
      ]
    },
    {
      "title": "JavaScript Window Screen",
      "summary": "The window.screen object contains information about the user's screen.\nWindow Screen\nThe window.screen object can be written without the window prefix.\nProperties:\nscreen.width\nscreen.height\nscreen.availWidth\nscreen.availHeight\nscreen.colorDepth\nscreen.pixelDepth\nWindow Screen Width\nThe screen.width property returns the width of the visitor's screen in pixels.\nExample\nDisplay the width of the screen in pixels:\nResult will be:\nWindow Screen Height\nThe screen.height property returns the height of the visitor's screen in pixels.\nExample\nDisplay the height of the screen in pixels:\nResult will be:\nREMOVE ADS\nWindow Screen Available Width\nThe screen.availWidth property returns the width of the visitor's screen, in pixels, minus interface features like the Windows Taskbar.\nExample\nDisplay the available width of the screen in pixels:\nResult will be:\nWindow Screen Available Height\nThe screen.availHeight property returns the height of the visitor's screen, in pixels, minus interface features like the Windows Taskbar.\nExample\nDisplay the available height of the screen in pixels:\nResult will be:\nWindow Screen Color Depth\nThe screen.colorDepth property returns the number of bits used to display one color.\nAll modern computers use 24 bit or 32 bit hardware for color resolution:\n24 bits =      16,777,216 different \"True Colors\"\n32 bits = 4,294,967,296 different \"Deep Colors\"\nOlder computers used 16 bits: 65,536 different \"High Colors\" resolution.\nVery old computers, and old cell phones used 8 bits: 256 different \"VGA colors\".\nExample\nDisplay the color depth of the screen in bits:\nResult will be:\nThe #rrggbb (rgb) values used in HTML represents \"True Colors\" (16,777,216 different colors)\nWindow Screen Pixel Depth\nThe screen.pixelDepth property returns the pixel depth of the screen.\nExample\nDisplay the pixel depth of the screen in bits:\nResult will be:\nFor modern computers, Color Depth and Pixel Depth are equal.",
      "examples": [
        "document.getElementById(\"demo\").innerHTML =\n\"Screen Width: \" + screen.width;",
        "document.getElementById(\"demo\").innerHTML =\n\"Screen Height: \" + screen.height;",
        "document.getElementById(\"demo\").innerHTML =\n\"Available Screen Width: \" + screen.availWidth;",
        "document.getElementById(\"demo\").innerHTML =\n\"Available Screen Height: \" + screen.availHeight;",
        "document.getElementById(\"demo\").innerHTML =\n\"Screen Color Depth: \" + screen.colorDepth;",
        "document.getElementById(\"demo\").innerHTML =\n\"Screen Pixel Depth: \" + screen.pixelDepth;",
        "window.screen",
        "screen.width",
        "screen.height",
        "screen.availWidth",
        "screen.availHeight",
        "screen.colorDepth",
        "screen.pixelDepth",
        "document.write(\"Screen Width: \" + screen.width); Screen Width: 1080",
        "document.write(\"Screen Height: \" + screen.height); Screen Height: 600",
        "document.write(\"Available Screen Width: \" + screen.availWidth); Available Screen Width: 1080",
        "document.write(\"Available Screen Height: \" + screen.availHeight); Available Screen Height: 600",
        "document.write(\"Screen Color Depth: \" + screen.colorDepth); Screen Color Depth: 24",
        "document.write(\"Screen Pixel Depth: \" + screen.pixelDepth); Screen Pixel Depth: 24"
      ]
    },
    {
      "title": "JavaScript Window Location",
      "summary": "The window.location object can be used to get the current page address (URL) and to redirect the browser to a new page.\nWindow Location\nThe window.location object can be written without the window prefix.\nSome examples:\nwindow.location.href returns the href (URL) of the current page\nwindow.location.hostname returns the domain name of the web host\nwindow.location.pathname returns the path and filename of the current page\nwindow.location.protocol returns the web protocol used (http: or https:)\nwindow.location.assign() loads a new document\nWindow Location Href\nThe window.location.href property returns the URL of the current page.\nExample\nDisplay the href (URL) of the current page:\nResult is:\nWindow Location Hostname\nThe window.location.hostname property returns the name of the internet host (of the current page).\nExample\nDisplay the name of the host:\nResult is:\nREMOVE ADS\nWindow Location Pathname\nThe window.location.pathname property returns the pathname of the current page.\nExample\nDisplay the path name of the current URL:\nResult is:\nWindow Location Protocol\nThe window.location.protocol property returns the web protocol of the page.\nExample\nDisplay the web protocol:\nResult is:\nWindow Location Port\nThe window.location.port property returns the number of the internet host port (of the current page).\nExample\nDisplay the name of the host:\nResult is:\nMost browsers will not display default port numbers (80 for http and 443 for https)\nWindow Location Assign\nThe window.location.assign() method loads a new document.\nExample\nLoad a new document:",
      "examples": [
        "document.getElementById(\"demo\").innerHTML =\n\"Page location is \" + window.location.href;",
        "document.getElementById(\"demo\").innerHTML =\n\"Page hostname is \" + window.location.hostname;",
        "document.getElementById(\"demo\").innerHTML =\n\"Page path is \" + window.location.pathname;",
        "document.getElementById(\"demo\").innerHTML =\n\"Page protocol is \" + window.location.protocol;",
        "document.getElementById(\"demo\").innerHTML =\n\"Port number is \" + window.location.port;",
        "<html>\n<head>\n<script>\nfunction newDoc() {\nwindow.location.assign(\"https://www.w3schools.com\")\n}\n</script>\n</head>\n<body>\n\n<input type=\"button\" value=\"Load new document\" onclick=\"newDoc()\">\n\n</body>\n</html>",
        "window.location",
        "window.location.href",
        "window.location.hostname",
        "window.location.pathname",
        "window.location.protocol",
        "window.location.assign()",
        "document.write(\"Page location is \" + location.href); Page location is https://www.w3schools.com/js/js_window_location.asp",
        "document.write(\"Page hostname is \" + location.hostname); Page hostname is www.w3schools.com",
        "document.write(\"Page path is \" + location.pathname); Page path is /js/js_window_location.asp",
        "document.write(\"Page protocol is \" + location.protocol); Page protocol is https:",
        "window.location.port",
        "document.write(\"Port number is \" + location.port); Port number is"
      ]
    },
    {
      "title": "JavaScript Window History",
      "summary": "The window.history object contains the browsers history.\nWindow History\nThe window.history object can be written without the window prefix.\nTo protect the privacy of the users, there are limitations to how JavaScript can access this object.\nSome methods:\nhistory.back() - same as clicking back in the browser\nhistory.forward() - same as clicking forward in the browser\nWindow History Back\nThe history.back() method loads the previous URL in the history list.\nThis is the same as clicking the Back button in the browser.\nExample\nCreate a back button on a page:\nThe output of the code above will be:\nREMOVE ADS\nWindow History Forward\nThe history.forward() method loads the next URL in the history list.\nThis is the same as clicking the Forward button in the browser.\nExample\nCreate a forward button on a page:\nThe output of the code above will be:",
      "examples": [
        "<html>\n<head>\n<script>\nfunction goBack() {\nwindow.history.back()\n}\n</script>\n</head>\n<body>\n\n<input type=\"button\" value=\"Back\" onclick=\"goBack()\">\n\n</body>\n</html>",
        "<html>\n<head>\n<script>\nfunction goForward() {\nwindow.history.forward()\n}\n</script>\n</head>\n<body>\n\n<input type=\"button\" value=\"Forward\" onclick=\"goForward()\">\n\n</body>\n</html>",
        "window.history",
        "history.back()",
        "history.forward()"
      ]
    },
    {
      "title": "JavaScript Window Navigator",
      "summary": "The Navigator Object\nThe navigator object contains information about the visitor's browser.\nIt can be written with or without the window prefix like:\nwindows.navigator or just navigator\nBrowser Cookies\nThe cookieEnabled property returns true if cookies are enabled, otherwise false:\nExample\nThe Browser Language\nThe language property returns the browser's language:\nExample\nIs The Browser Online?\nThe onLine property returns true if the browser is online:\nExample\nBrowser Application Name\nThe appName property returns the application name of the browser:\nExample\nWarning\nThis property is removed (deprecated) in the latest web standard.\nMost browsers (Chrome, Edge, Firefox, Safari) returns Netscape as appName.\nREMOVE ADS\nBrowser Application Code Name\nThe appCodeName property returns the application code name of the browser:\nExample\nWarning\nThis property is removed (deprecated) in the latest web standard.\nMost browsers (Chrome, Edge, Firefox, Safari) returns Mozilla as appCodeName.\nThe Browser Engine\nThe product property returns the product name of the browser engine:\nExample\nWarning\nThis property is removed (deprecated) in the latest web standard.\nMost browsers returns Gecko as product.\nThe Browser Version\nThe appVersion property returns version information about the browser:\nExample\nWarning\nThis property is removed (deprecated) in the latest web standard.\nDo not rely on appVersion to return the correct browser version.\nThe Browser Agent\nThe userAgent property returns the user-agent header sent by the browser to the server:\nExample\nWarning\nThe information from the navigator object can often be misleading.\nThe navigator object should not be used to detect browser versions because:\nDifferent browsers can use the same name\nThe navigator data can be changed by the browser owner\nSome browsers misidentify themselves to bypass site tests\nBrowsers cannot report new operating systems, released later than the browser\nThe Browser Platform\nThe platform property returns the browser platform (operating system):\nExample\nWarning\nThis property is removed (deprecated) in the latest web standard.\nDo not rely on platform to return the correct browser platform in all browsers.\nIs Java Enabled?\nThe javaEnabled() method returns true if Java is enabled:\nExample\nWarning\nThis method is removed (deprecated) in the latest web standard.\njavaEnabled() always returns false.",
      "examples": [
        "<p id=\"demo\"></p>\n\n<script>\ndocument.getElementById(\"demo\").innerHTML =\n\"cookiesEnabled is \" + navigator.cookieEnabled;\n</script>",
        "<p id=\"demo\"></p>\n\n<script>\ndocument.getElementById(\"demo\").innerHTML = navigator.language;\n</script>",
        "<p id=\"demo\"></p>\n\n<script>\ndocument.getElementById(\"demo\").innerHTML = navigator.onLine;\n</script>",
        "<p id=\"demo\"></p>\n\n<script>\ndocument.getElementById(\"demo\").innerHTML =\n\"navigator.appName is \" + navigator.appName;\n</script>",
        "<p id=\"demo\"></p>\n\n<script>\ndocument.getElementById(\"demo\").innerHTML =\n\"navigator.appCodeName is \" + navigator.appCodeName;\n</script>",
        "<p id=\"demo\"></p>\n\n<script>\ndocument.getElementById(\"demo\").innerHTML = navigator.appVersion;\n</script>",
        "<p id=\"demo\"></p>\n\n<script>\ndocument.getElementById(\"demo\").innerHTML = navigator.userAgent;\n</script>",
        "<p id=\"demo\"></p>\n\n<script>\ndocument.getElementById(\"demo\").innerHTML = navigator.javaEnabled();\n</script>",
        "navigator",
        "windows.navigator",
        "cookieEnabled",
        "language",
        "onLine",
        "appName",
        "appCodeName",
        "product",
        "appVersion",
        "userAgent",
        "platform",
        "javaEnabled()",
        "false"
      ]
    },
    {
      "title": "JavaScript Popup Boxes",
      "summary": "JavaScript has three kind of popup boxes: Alert box, Confirm box, and Prompt box.\nAlert Box\nAn alert box is often used if you want to make sure information comes through to the user.\nWhen an alert box pops up, the user will have to click \"OK\" to proceed.\nSyntax\nThe window.alert() method can be written without the window prefix.\nExample\nConfirm Box\nA confirm box is often used if you want the user to verify or accept something.\nWhen a confirm box pops up, the user will have to click either \"OK\" or \"Cancel\" to proceed.\nIf the user clicks \"OK\", the box returns true. If the user clicks \"Cancel\", the box returns false.\nSyntax\nThe window.confirm() method can be written without the window prefix.\nExample\nREMOVE ADS\nPrompt Box\nA prompt box is often used if you want the user to input a value before entering a page.\nWhen a prompt box pops up, the user will have to click either \"OK\" or \"Cancel\" to proceed after entering an input value.\nIf the user clicks \"OK\" the box returns the input value. If the user clicks \"Cancel\" the box returns null.\nSyntax\nThe window.prompt() method can be written without the window prefix.\nExample\nLine Breaks\nTo display line breaks inside a popup box, use a back-slash followed by the character n.\nExample",
      "examples": [
        "window.alert(\"sometext\");",
        "alert(\"I am an alert box!\");",
        "window.confirm(\"sometext\");",
        "if (confirm(\"Press a button!\")) {\ntxt = \"You pressed OK!\";\n} else {\ntxt = \"You pressed Cancel!\";\n}",
        "window.prompt(\"sometext\",\"defaultText\");",
        "let person = prompt(\"Please enter your name\", \"Harry Potter\");\nlet text;\nif (person == null || person == \"\") {\ntext = \"User cancelled the prompt.\";\n} else {\ntext = \"Hello \" + person + \"! How are you today?\";\n}",
        "alert(\"Hello\\nHow are you?\");",
        "window.alert()",
        "window.confirm()",
        "window.prompt()"
      ]
    },
    {
      "title": "JavaScript Timing Events",
      "summary": "JavaScript can be executed in time-intervals.\nThis is called timing events.\nTiming Events\nThe window object allows execution of code at specified time intervals.\nThese time intervals are called timing events.\nThe two key methods to use with JavaScript are:\nsetTimeout(function, milliseconds)\nExecutes a function, after waiting a specified number of milliseconds.\nsetInterval(function, milliseconds)\nSame as setTimeout(), but repeats the execution of the function continuously.\nThe setTimeout() and setInterval() are both methods of the HTML DOM Window object.\nThe setTimeout() Method\nThe window.setTimeout() method can be written without the window prefix.\nThe first parameter is a function to be executed.\nThe second parameter indicates the number of milliseconds before execution.\nExample\nClick a button. Wait 3 seconds, and the page will alert \"Hello\":\nREMOVE ADS\nHow to Stop the Execution?\nThe clearTimeout() method stops the execution of the function specified in setTimeout().\nThe window.clearTimeout() method can be written without the window prefix.\nThe clearTimeout() method uses the variable returned from setTimeout():\nIf the function has not already been executed, you can stop the execution by calling the clearTimeout() method:\nExample\nSame example as above, but with an added \"Stop\" button:\nThe setInterval() Method\nThe setInterval() method repeats a given function at every given time-interval.\nThe window.setInterval() method can be written without the window prefix.\nThe first parameter is the function to be executed.\nThe second parameter indicates the length of the time-interval between each execution.\nThis example executes a function called \"myTimer\" once every second (like a digital watch).\nExample\nDisplay the current time:\nThere are 1000 milliseconds in one second.\nHow to Stop the Execution?\nThe clearInterval() method stops the executions of the function specified in the setInterval() method.\nThe window.clearInterval() method can be written without the window prefix.\nThe clearInterval() method uses the variable returned from setInterval():\nExample\nSame example as above, but we have added a \"Stop time\" button:\nMore Examples\nAnother simple timing\nA clock created with a timing event",
      "examples": [
        "window.setTimeout(function, milliseconds);",
        "<button onclick=\"setTimeout(myFunction, 3000)\">Try it</button>\n\n<script>\nfunction myFunction() {\nalert('Hello');\n}\n</script>",
        "window.clearTimeout(timeoutVariable)",
        "myVar = setTimeout(function, milliseconds);\nclearTimeout(myVar);",
        "<button onclick=\"myVar = setTimeout(myFunction, 3000)\">Try it</button>\n\n<button onclick=\"clearTimeout(myVar)\">Stop it</button>",
        "window.setInterval(function, milliseconds);",
        "setInterval(myTimer, 1000);\n\nfunction myTimer() {\nconst d = new Date();\ndocument.getElementById(\"demo\").innerHTML = d.toLocaleTimeString();\n}",
        "window.clearInterval(timerVariable)",
        "let myVar = setInterval(function, milliseconds);\nclearInterval(myVar);",
        "<p id=\"demo\"></p>\n\n<button onclick=\"clearInterval(myVar)\">Stop time</button>\n\n<script>\nlet myVar = setInterval(myTimer, 1000);\nfunction myTimer() {\nconst d = new Date();\ndocument.getElementById(\"demo\").innerHTML = d.toLocaleTimeString();\n}\n</script>",
        "window",
        "setTimeout(function, milliseconds",
        "setInterval(function, milliseconds",
        "setTimeout()",
        "setInterval()",
        "window.setTimeout()",
        "clearTimeout()",
        "window.clearTimeout()",
        "window.setInterval()",
        "clearInterval()",
        "window.clearInterval()"
      ]
    },
    {
      "title": "JavaScript Cookies",
      "summary": "Cookies let you store user information in web pages.\nWhat are Cookies?\nCookies are data, stored in small text files, on your computer.\nWhen a web server has sent a web page to a browser, the connection is shut down, and the server forgets everything about the user.\nCookies were invented to solve the problem \"how to remember information about the user\":\nWhen a user visits a web page, his/her name can be stored in a cookie.\nNext time the user visits the page, the cookie \"remembers\" his/her name.\nCookies are saved in name-value pairs like:\nWhen a browser requests a web page from a server, cookies belonging to the page are added to the request. This way the server gets the necessary data to \"remember\" information about users.\nNone of the examples below will work if your browser has local cookies support turned off.\nCreate a Cookie with JavaScript\nJavaScript can create, read, and delete cookies with the document.cookie property.\nWith JavaScript, a cookie can be created like this:\nYou can also add an expiry date (in UTC time). By default, the cookie is deleted when the browser is closed:\nWith a path parameter, you can tell the browser what path the cookie belongs to. By default, the cookie belongs to the current page.\nREMOVE ADS\nRead a Cookie with JavaScript\nWith JavaScript, cookies can be read like this:\ndocument.cookie will return all cookies in one string much like: cookie1=value; cookie2=value; cookie3=value;\nChange a Cookie with JavaScript\nWith JavaScript, you can change a cookie the same way as you create it:\nThe old cookie is overwritten.\nDelete a Cookie with JavaScript\nDeleting a cookie is very simple.\nYou don't have to specify a cookie value when you delete a cookie.\nJust set the expires parameter to a past date:\nYou should define the cookie path to ensure that you delete the right cookie.\nSome browsers will not let you delete a cookie if you don't specify the path.\nThe Cookie String\nThe document.cookie property looks like a normal text string. But it is not.\nEven if you write a whole cookie string to document.cookie, when you read it out again, you can only see the name-value pair of it.\nIf you set a new cookie, older cookies are not overwritten. The new cookie is added to document.cookie, so if you read document.cookie again you will get something like:\ncookie1 = value; cookie2 = value;\nDisplay All Cookies  Create Cookie 1  Create Cookie 2 Delete Cookie 1  Delete Cookie 2\nIf you want to find the value of one specified cookie, you must write a JavaScript function that searches for the cookie value in the cookie string.\nJavaScript Cookie Example\nIn the example to follow, we will create a cookie that stores the name of a visitor.\nThe first time a visitor arrives to the web page, he/she will be asked to fill in his/her name. The name is then stored in a cookie.\nThe next time the visitor arrives at the same page, he/she will get a welcome message.\nFor the example we will create 3 JavaScript functions:\nA function to set a cookie value\nA function to get a cookie value\nA function to check a cookie value\nA Function to Set a Cookie\nFirst, we create a function that stores the name of the visitor in a cookie variable:\nExample\nExample explained:\nThe parameters of the function above are the name of the cookie (cname), the value of the cookie (cvalue), and the number of days until the cookie should expire (exdays).\nThe function sets a cookie by adding together the cookiename, the cookie value, and the expires string.\nA Function to Get a Cookie\nThen, we create a function that returns the value of a specified cookie:\nExample\nFunction explained:\nTake the cookiename as parameter (cname).\nCreate a variable (name) with the text to search for (cname + \"=\").\nDecode the cookie string, to handle cookies with special characters, e.g. '$'\nSplit document.cookie on semicolons into an array called ca (ca = decodedCookie.split(';')).\nLoop through the ca array (i = 0; i < ca.length; i++), and read out each value c = ca[i]).\nIf the cookie is found (c.indexOf(name) == 0), return the value of the cookie (c.substring(name.length, c.length).\nIf the cookie is not found, return \"\".\nA Function to Check a Cookie\nLast, we create the function that checks if a cookie is set.\nIf the cookie is set it will display a greeting.\nIf the cookie is not set, it will display a prompt box, asking for the name of the user, and stores the username cookie for 365 days, by calling the setCookie function:\nExample\nAll Together Now\nExample\nThe example above runs the checkCookie() function when the page loads.",
      "examples": [
        "username = John Doe",
        "document.cookie = \"username=John Doe\";",
        "document.cookie = \"username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 UTC\";",
        "document.cookie = \"username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 UTC; path=/\";",
        "let x = document.cookie;",
        "document.cookie = \"username=John Smith; expires=Thu, 18 Dec 2013 12:00:00 UTC; path=/\";",
        "document.cookie = \"username=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";",
        "function setCookie(cname, cvalue, exdays) {\nconst d = new Date();\nd.setTime(d.getTime() + (exdays*24*60*60*1000));\nlet expires = \"expires=\"+ d.toUTCString();\ndocument.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\n}",
        "function getCookie(cname) {\nlet name = cname + \"=\";\nlet decodedCookie = decodeURIComponent(document.cookie);\nlet ca = decodedCookie.split(';');\nfor(let i = 0; i <ca.length; i++) {\nlet c = ca[i];\nwhile (c.charAt(0) == ' ') {\nc = c.substring(1);\n}\nif (c.indexOf(name) == 0) {\nreturn c.substring(name.length, c.length);\n}\n}\nreturn \"\";\n}",
        "function checkCookie() {\nlet username = getCookie(\"username\");\nif (username != \"\") {\nalert(\"Welcome again \" + username);\n} else {\nusername = prompt(\"Please enter your name:\", \"\");\nif (username != \"\" && username != null) {\nsetCookie(\"username\", username, 365);\n}\n}\n}",
        "function setCookie(cname, cvalue, exdays) {\nconst d = new Date();\nd.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));\nlet expires = \"expires=\"+d.toUTCString();\ndocument.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\n}\n\nfunction getCookie(cname) {\nlet name = cname + \"=\";\nlet ca = document.cookie.split(';');\nfor(let i = 0; i < ca.length; i++) {\nlet c = ca[i];\nwhile (c.charAt(0) == ' ') {\nc = c.substring(1);\n}\nif (c.indexOf(name) == 0) {\nreturn c.substring(name.length, c.length);\n}\n}\nreturn \"\";\n}\n\nfunction checkCookie() {\nlet user = getCookie(\"username\");\nif (user != \"\") {\nalert(\"Welcome again \" + user);\n} else {\nuser = prompt(\"Please enter your name:\", \"\");\nif (user != \"\" && user != null) {\nsetCookie(\"username\", user, 365);\n}\n}\n}",
        "document.cookie",
        "function",
        "setCookie",
        "checkCookie()"
      ]
    },
    {
      "title": "Web APIs - Introduction",
      "summary": "A Web API is a developer's dream.\nIt can extend the functionality of the browser\nIt can greatly simplify complex functions\nIt can provide easy syntax to complex code\nWhat is Web API?\nAPI stands for Application Programming Interface.\nA Web API is an application programming interface for the Web.\nA Browser API can extend the functionality of a web browser.\nA Server API can extend the functionality of a web server.\nBrowser APIs\nAll browsers have a set of built-in Web APIs to support complex operations, and to help accessing data.\nFor example, the Geolocation API can return the coordinates of where the browser is located.\nExample\nGet the latitude and longitude of the user's position:\nREMOVE ADS\nThird Party APIs\nThird party APIs are not built into your browser.\nTo use these APIs, you will have to download the code from the Web.\nExamples:\nYouTube API - Allows you to display videos on a web site.\nTwitter API - Allows you to display Tweets on a web site.\nFacebook API - Allows you to display Facebook info on a web site.",
      "examples": [
        "const myElement = document.getElementById(\"demo\");\n\nfunction getLocation() {\nif (navigator.geolocation) {\nnavigator.geolocation.getCurrentPosition(showPosition);\n} else {\nmyElement.innerHTML = \"Geolocation is not supported by this browser.\";\n}\n}\n\nfunction showPosition(position) {\nmyElement.innerHTML = \"Latitude: \" + position.coords.latitude +\n\"<br>Longitude: \" + position.coords.longitude;\n}"
      ]
    },
    {
      "title": "JavaScript Validation API",
      "summary": "Constraint Validation DOM Methods\nIf an input field contains invalid data, display a message:\nThe checkValidity() Method\nConstraint Validation DOM Properties\nREMOVE ADS\nValidity Properties\nThe validity property of an input element contains a number of properties related to the validity of data:\nExamples\nIf the number in an input field is greater than 100 (the input's max attribute), display a message:\nThe rangeOverflow Property\nIf the number in an input field is less than 100 (the input's min attribute), display a message:\nThe rangeUnderflow Property",
      "examples": [
        "<input id=\"id1\" type=\"number\" min=\"100\" max=\"300\" required>\n<button onclick=\"myFunction()\">OK</button>\n\n<p id=\"demo\"></p>\n\n<script>\nfunction myFunction() {\nconst inpObj = document.getElementById(\"id1\");\nif (!inpObj.checkValidity()) {\ndocument.getElementById(\"demo\").innerHTML = inpObj.validationMessage;\n}\n}\n</script>",
        "<input id=\"id1\" type=\"number\" max=\"100\">\n<button onclick=\"myFunction()\">OK</button>\n\n<p id=\"demo\"></p>\n\n<script>\nfunction myFunction() {\nlet text = \"Value OK\";\nif (document.getElementById(\"id1\").validity.rangeOverflow) {\ntext = \"Value too large\";\n}\n}\n</script>",
        "<input id=\"id1\" type=\"number\" min=\"100\">\n<button onclick=\"myFunction()\">OK</button>\n\n<p id=\"demo\"></p>\n\n<script>\nfunction myFunction() {\nlet text = \"Value OK\";\nif (document.getElementById(\"id1\").validity.rangeUnderflow) {\ntext = \"Value too small\";\n}\n}\n</script>",
        "max",
        "min"
      ]
    },
    {
      "title": "Web History API",
      "summary": "The Web History API provides easy methods to access the windows.history object.\nThe window.history object contains the URLs (Web Sites) visited by the user.\nThe Web History API is supported in all browsers:\nThe History back() Method\nThe back() method loads the previous URL in the windows.history list.\nIt is the same as clicking the \"back arrow\" in your browser.\nExample\nGo Back\nREMOVE ADS\nThe History go() Method\nThe go() method loads a specific URL from the history list:\nExample\nGo Back 2 Pages\nHistory Object Properties\nHistory Object Methods",
      "examples": [
        "<button onclick=\"myFunction()\">Go Back</button>\n\n<script>\nfunction myFunction() {\nwindow.history.back();\n}\n</script>",
        "<button onclick=\"myFunction()\">Go Back 2 Pages</button>\n\n<script>\nfunction myFunction() {\nwindow.history.go(-2);\n}\n</script>"
      ]
    },
    {
      "title": "Web Storage API",
      "summary": "The Web Storage API is a simple syntax for storing and retrieving data in the browser. It is very easy to use:\nExample\nThe Web Storage API is supported in all browsers:\nThe localStorage Object\nThe localStorage object provides access to a local storage for a particular Web Site. It allows you to store, read, add, modify, and delete data items for that domain.\nThe data is stored with no expiration date, and will not be deleted when the browser is closed.\nThe data will be available for days, weeks, and years.\nThe setItem() Method\nThe localStorage.setItem() method stores a data item in a storage.\nIt takes a name and a value as parameters:\nExample\nThe getItem() Method\nThe localStorage.getItem() method retrieves a data item from the storage.\nIt takes a name as parameter:\nExample\nREMOVE ADS\nThe sessionStorage Object\nThe sessionStorage object is identical to the localStorage object.\nThe difference is that the sessionStorage object stores data for one session.\nThe data is deleted when the browser is closed.\nExample\nThe setItem() Method\nThe sessionStorage.setItem() method stores a data item in a storage.\nIt takes a name and a value as parameters:\nExample\nThe getItem() Method\nThe sessionStorage.getItem() method retrieves a data item from the storage.\nIt takes a name as parameter:\nExample\nStorage Object Properties and Methods\nRelated Pages for Web Storage API",
      "examples": [
        "localStorage.setItem(\"name\", \"John Doe\");\nlocalStorage.getItem(\"name\");",
        "localStorage.setItem(\"name\", \"John Doe\");",
        "localStorage.getItem(\"name\");",
        "sessionStorage.getItem(\"name\");",
        "sessionStorage.setItem(\"name\", \"John Doe\");"
      ]
    },
    {
      "title": "Web Workers API",
      "summary": "A web worker is a JavaScript running in the background, without affecting the performance of the page.\nWhat is a Web Worker?\nWhen executing scripts in an HTML page, the page becomes unresponsive until the script is finished.\nA web worker is a JavaScript that runs in the background, independently of other scripts, without affecting the performance of the page. You can continue to do whatever you want: clicking, selecting things, etc., while the web worker runs in the background.\nBrowser Support\nThe numbers in the table specify the first browser versions that fully support Web Workers:\nWeb Workers Example\nThe example below creates a simple web worker that count numbers in the background:\nExample\nStart Worker Stop Worker var w; function startWorker() { if(typeof(Worker)!==\"undefined\") { if(typeof(w)==\"undefined\") { w=new Worker(\"demo_workers.js\"); } w.onmessage = function (event) { document.getElementById(\"result\").innerHTML=event.data; }; } else { document.getElementById(\"result\").innerHTML=\"Sorry, your browser does not support Web Workers...\"; } } function stopWorker() { w.terminate(); w = undefined; }\nCheck Web Worker Support\nBefore creating a web worker, check whether the user's browser supports it:\nREMOVE ADS\nCreate a Web Worker File\nNow, let's create our web worker in an external JavaScript.\nHere, we create a script that counts. The script is stored in the \"demo_workers.js\" file:\nThe important part of the code above is the postMessage() method - which is used to post a message back to the HTML page.\nNote: Normally web workers are not used for such simple scripts, but for more CPU intensive tasks.\nCreate a Web Worker Object\nNow that we have the web worker file, we need to call it from an HTML page.\nThe following lines checks if the worker already exists, if not - it creates a new web worker object and runs the code in \"demo_workers.js\":\nThen we can send and receive messages from the web worker.\nAdd an \"onmessage\" event listener to the web worker.\nWhen the web worker posts a message, the code within the event listener is executed. The data from the web worker is stored in event.data.\nTerminate a Web Worker\nWhen a web worker object is created, it will continue to listen for messages (even after the external script is finished) until it is terminated.\nTo terminate a web worker, and free browser/computer resources, use the terminate() method:\nReuse the Web Worker\nIf you set the worker variable to undefined, after it has been terminated, you can reuse the code:\nFull Web Worker Example Code\nWe have already seen the Worker code in the .js file. Below is the code for the HTML page:\nExample\nWeb Workers and the DOM\nSince web workers are in external files, they do not have access to the following JavaScript objects:\nThe window object\nThe document object\nThe parent object",
      "examples": [
        "if (typeof(Worker) !== \"undefined\") {\n// Yes! Web worker support!\n// Some code.....\n} else {\n// Sorry! No Web Worker support..\n}",
        "let i = 0;\n\nfunction timedCount() {\ni ++;\npostMessage(i);\nsetTimeout(\"timedCount()\",500);\n}\n\ntimedCount();",
        "if (typeof(w) == \"undefined\") {\nw = new Worker(\"demo_workers.js\");\n}",
        "w.onmessage = function(event){\ndocument.getElementById(\"result\").innerHTML = event.data;\n};",
        "w.terminate();",
        "w = undefined;",
        "<!DOCTYPE html>\n<html>\n<body>\n\n<p>Count numbers: <output id=\"result\"></output></p>\n<button onclick=\"startWorker()\">Start Worker</button>\n<button onclick=\"stopWorker()\">Stop Worker</button>\n\n<script>\nlet w;\n\nfunction startWorker() {\nif (typeof(w) == \"undefined\") {\nw = new Worker(\"demo_workers.js\");\n}\nw.onmessage = function(event) {\ndocument.getElementById(\"result\").innerHTML = event.data;\n};\n}\n\nfunction stopWorker() {\nw.terminate();\nw = undefined;\n}\n</script>\n\n</body>\n</html>",
        "postMessage()",
        "terminate()"
      ]
    },
    {
      "title": "JavaScript Fetch API",
      "summary": "The Fetch API interface allows web browser to make HTTP requests to web servers.\n😀 No need for XMLHttpRequest anymore.\nBrowser Support\nfetch() is an ES6 feature.\nES6 is fully supported in all modern browsers since June 2017:\nA Fetch API Example\nThe example below fetches a file and displays the content:\nExample\nSince Fetch is based on async and await, the example above might be easier to understand like this:\nExample\nOr even better: Use understandable names instead of x and y:\nExample",
      "examples": [
        "fetch(file)\n.then(x => x.text())\n.then(y => myDisplay(y));",
        "async function getText(file) {\nlet x = await fetch(file);\nlet y = await x.text();\nmyDisplay(y);\n}",
        "async function getText(file) {\nlet myObject = await fetch(file);\nlet myText = await myObject.text();\nmyDisplay(myText);\n}",
        "fetch()"
      ]
    },
    {
      "title": "Web Geolocation API",
      "summary": "Locate the User's Position\nThe HTML Geolocation API is used to get the geographical position of a user.\nSince this can compromise privacy, the position is not available unless the user approves it.\nTry It\nNote\nGeolocation is most accurate for devices with GPS, like smartphones.\nBrowser Support\nThe Geolocation API is supported in all browsers:\nNote\nThe Geolocation API will only work on secure contexts such as HTTPS.\nIf your site is hosted on a non-secure origin (such as HTTP) the requests to get the users location will no longer function.\nUsing the Geolocation API\nThe getCurrentPosition() method is used to return the user's position.\nThe example below returns the latitude and longitude of the user's position:\nExample\nExample explained:\nCheck if Geolocation is supported\nIf supported, run the getCurrentPosition() method. If not, display a message to the user\nIf the getCurrentPosition() method is successful, it returns a coordinates object to the function specified in the parameter (showPosition)\nThe showPosition() function outputs the Latitude and Longitude\nThe example above is a very basic Geolocation script, with no error handling.\nREMOVE ADS\nHandling Errors and Rejections\nThe second parameter of the getCurrentPosition() method is used to handle errors. It specifies a function to run if it fails to get the user's location:\nExample\nDisplaying the Result in a Map\nTo display the result in a map, you need access to a map service, like Google Maps.\nIn the example below, the returned latitude and longitude is used to show the location in a Google Map (using a static image):\nExample\nLocation-specific Information\nThis page has demonstrated how to show a user's position on a map.\nGeolocation is also very useful for location-specific information, like:\nUp-to-date local information\nShowing Points-of-interest near the user\nTurn-by-turn navigation (GPS)\nThe getCurrentPosition() Method - Return Data\nThe getCurrentPosition() method returns an object on success. The latitude, longitude and accuracy properties are always returned. The other properties are returned if available:\nGeolocation Object - Other interesting Methods\nThe Geolocation object also has other interesting methods:\nwatchPosition() - Returns the current position of the user and continues to return updated position as the user moves (like the GPS in a car).\nclearWatch() - Stops the watchPosition() method.\nThe example below shows the watchPosition() method. You need an accurate GPS device to test this (like smartphone):\nExample",
      "examples": [
        "<script>\nconst x = document.getElementById(\"demo\");\nfunction getLocation() {\nif (navigator.geolocation) {\nnavigator.geolocation.getCurrentPosition(showPosition);\n} else {\nx.innerHTML = \"Geolocation is not supported by this browser.\";\n}\n}\n\nfunction showPosition(position) {\nx.innerHTML = \"Latitude: \" + position.coords.latitude +\n\"<br>Longitude: \" + position.coords.longitude;\n}\n</script>",
        "function showError(error) {\nswitch(error.code) {\ncase error.PERMISSION_DENIED:\nx.innerHTML = \"User denied the request for Geolocation.\"\nbreak;\ncase error.POSITION_UNAVAILABLE:\nx.innerHTML = \"Location information is unavailable.\"\nbreak;\ncase error.TIMEOUT:\nx.innerHTML = \"The request to get user location timed out.\"\nbreak;\ncase error.UNKNOWN_ERROR:\nx.innerHTML = \"An unknown error occurred.\"\nbreak;\n}\n}",
        "function showPosition(position) {\nlet latlon = position.coords.latitude + \",\" + position.coords.longitude;\n\nlet img_url = \"https://maps.googleapis.com/maps/api/staticmap?center=\n\"+latlon+\"&zoom=14&size=400x300&sensor=false&key=YOUR_KEY\";\n\ndocument.getElementById(\"mapholder\").innerHTML = \"<img src='\"+img_url+\"'>\";\n}",
        "<script>\nconst x = document.getElementById(\"demo\");\nfunction getLocation() {\nif (navigator.geolocation) {\nnavigator.geolocation.watchPosition(showPosition);\n} else {\nx.innerHTML = \"Geolocation is not supported by this browser.\";\n}\n}\nfunction showPosition(position) {\nx.innerHTML = \"Latitude: \" + position.coords.latitude +\n\"<br>Longitude: \" + position.coords.longitude;\n}\n</script>",
        "getCurrentPosition()",
        "watchPosition()",
        "clearWatch()"
      ]
    },
    {
      "title": "AJAX Introduction",
      "summary": "AJAX is a developer's dream, because you can:\nRead data from a web server - after the page has loaded\nUpdate a web page without reloading the page\nSend data to a web server - in the background\nAJAX Example\nLet AJAX change this text\nTry it Yourself »\nAJAX Example Explained\nHTML Page\nThe HTML page contains a <div> section and a <button>.\nThe <div> section is used to display information from a server.\nThe <button> calls a function (if it is clicked).\nThe function requests data from a web server and displays it:\nFunction loadDoc()\nREMOVE ADS\nWhat is AJAX?\nAJAX = Asynchronous JavaScript And XML.\nAJAX is not a programming language.\nAJAX just uses a combination of:\nA browser built-in XMLHttpRequest object (to request data from a web server)\nJavaScript and HTML DOM (to display or use the data)\nAJAX is a misleading name. AJAX applications might use XML to transport data, but it is equally common to transport data as plain text or JSON text.\nAJAX allows web pages to be updated asynchronously by exchanging data with a web server behind the scenes. This means that it is possible to update parts of a web page, without reloading the whole page.\nHow AJAX Works\n1. An event occurs in a web page (the page is loaded, a button is clicked)\n2. An XMLHttpRequest object is created by JavaScript\n3. The XMLHttpRequest object sends a request to a web server\n4. The server processes the request\n5. The server sends a response back to the web page\n6. The response is read by JavaScript\n7. Proper action (like page update) is performed by JavaScript\nModern Browsers (Fetch API)\nModern Browsers can use Fetch API instead of the XMLHttpRequest Object.\nThe Fetch API interface allows web browser to make HTTP requests to web servers.\nIf you use the XMLHttpRequest Object, Fetch can do the same in a simpler way.",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<body>\n\n<div id=\"demo\">\n<h2>Let AJAX change this text</h2>\n<button type=\"button\" onclick=\"loadDoc()\">Change Content</button>\n</div>\n\n</body>\n</html>",
        "function loadDoc() {\nconst xhttp = new XMLHttpRequest();\nxhttp.onload = function() {\ndocument.getElementById(\"demo\").innerHTML = this.responseText;\n}\nxhttp.open(\"GET\", \"ajax_info.txt\", true);\nxhttp.send();\n}",
        "XMLHttpRequest"
      ]
    },
    {
      "title": "AJAX - The XMLHttpRequest Object",
      "summary": "The keystone of AJAX is the XMLHttpRequest object.\nCreate an XMLHttpRequest object\nDefine a callback function\nOpen the XMLHttpRequest object\nSend a Request to a server\nThe XMLHttpRequest Object\nAll modern browsers support the XMLHttpRequest object.\nThe XMLHttpRequest object can be used to exchange data with a web server behind the scenes. This means that it is possible to update parts of a web page, without reloading the whole page.\nCreate an XMLHttpRequest Object\nAll modern browsers (Chrome, Firefox, IE, Edge, Safari, Opera) have a built-in XMLHttpRequest object.\nSyntax for creating an XMLHttpRequest object:\nDefine a Callback Function\nA callback function is a function passed as a parameter to another function.\nIn this case, the callback function should contain the code to execute when the response is ready.\nSend a Request\nTo send a request to a server, you can use the open() and send() methods of the XMLHttpRequest object:\nExample\nAccess Across Domains\nFor security reasons, modern browsers do not allow access across domains.\nThis means that both the web page and the XML file it tries to load, must be located on the same server.\nThe examples on W3Schools all open XML files located on the W3Schools domain.\nIf you want to use the example above on one of your own web pages, the XML files you load must be located on your own server.\nREMOVE ADS\nXMLHttpRequest Object Methods\nXMLHttpRequest Object Properties\nThe onload Property\nWith the XMLHttpRequest object you can define a callback function to be executed when the request receives an answer.\nThe function is defined in the onload property of the XMLHttpRequest object:\nExample\nMultiple Callback Functions\nIf you have more than one AJAX task in a website, you should create one function for executing the XMLHttpRequest object, and one callback function for each AJAX task.\nThe function call should contain the URL and what function to call when the response is ready.\nExample\nThe onreadystatechange Property\nThe readyState property holds the status of the XMLHttpRequest.\nThe onreadystatechange property defines a callback function to be executed when the readyState changes.\nThe status property and the statusText properties hold the status of the XMLHttpRequest object.\nThe onreadystatechange function is called every time the readyState changes.\nWhen readyState is 4 and status is 200, the response is ready:\nExample\nThe onreadystatechange event is triggered four times (1-4), one time for each change in the readyState.",
      "examples": [
        "variable = new XMLHttpRequest();",
        "xhttp.onload = function() {\n// What to do when the response is ready\n}",
        "xhttp.open(\"GET\", \"ajax_info.txt\");\nxhttp.send();",
        "// Create an XMLHttpRequest object\nconst xhttp = new XMLHttpRequest();\n\n// Define a callback function\nxhttp.onload = function() {\n// Here you can use the Data\n}\n\n// Send a request\nxhttp.open(\"GET\", \"ajax_info.txt\");\nxhttp.send();",
        "xhttp.onload = function() {\ndocument.getElementById(\"demo\").innerHTML = this.responseText;\n}\nxhttp.open(\"GET\", \"ajax_info.txt\");\nxhttp.send();",
        "loadDoc(\"url-1\", myFunction1);\n\nloadDoc(\"url-2\", myFunction2);\n\nfunction loadDoc(url, cFunction) {\nconst xhttp = new XMLHttpRequest();\nxhttp.onload = function() {cFunction(this);}\nxhttp.open(\"GET\", url);\nxhttp.send();\n}\n\nfunction myFunction1(xhttp) {\n// action goes here\n}\nfunction myFunction2(xhttp) {\n// action goes here\n}",
        "function loadDoc() {\nconst xhttp = new XMLHttpRequest();\nxhttp.onreadystatechange = function() {\nif (this.readyState == 4 && this.status == 200) {\ndocument.getElementById(\"demo\").innerHTML =\nthis.responseText;\n}\n};\nxhttp.open(\"GET\", \"ajax_info.txt\");\nxhttp.send();\n}",
        "XMLHttpRequest",
        "onload",
        "readyState",
        "onreadystatechange",
        "status",
        "statusText"
      ]
    },
    {
      "title": "AJAX - XMLHttpRequest",
      "summary": "The XMLHttpRequest object is used to request data from a server.\nSend a Request To a Server\nTo send a request to a server, we use the open() and send() methods of the XMLHttpRequest object:\nThe url - A File On a Server\nThe url parameter of the open() method, is an address to a file on a server:\nThe file can be any kind of file, like .txt and .xml, or server scripting files like .asp and .php (which can perform actions on the server before sending the response back).\nAsynchronous - True or False?\nServer requests should be sent asynchronously.\nThe async parameter of the open() method should be set to true:\nBy sending asynchronously, the JavaScript does not have to wait for the server response, but can instead:\nexecute other scripts while waiting for server response\ndeal with the response after the response is ready\nThe default value for the async parameter is async = true.\nYou can safely remove the third parameter from your code.\nSynchronous XMLHttpRequest (async = false) is not recommended because the JavaScript will stop executing until the server response is ready. If the server is busy or slow, the application will hang or stop.\nGET or POST?\nGET is simpler and faster than POST, and can be used in most cases.\nHowever, always use POST requests when:\nA cached file is not an option (update a file or database on the server).\nSending a large amount of data to the server (POST has no size limitations).\nSending user input (which can contain unknown characters), POST is more robust and secure than GET.\nGET Requests\nA simple GET request:\nExample\nIn the example above, you may get a cached result. To avoid this, add a unique ID to the URL:\nExample\nIf you want to send information with the GET method, add the information to the URL:\nExample\nHow the server uses the input and how the server responds to a request, is explained in a later chapter.\nREMOVE ADS\nPOST Requests\nA simple POST request:\nExample\nTo POST data like an HTML form, add an HTTP header with setRequestHeader(). Specify the data you want to send in the send() method:\nExample\nSynchronous Request\nTo execute a synchronous request, change the third parameter in the open() method to false:\nSometimes async = false are used for quick testing. You will also find synchronous requests in older JavaScript code.\nSince the code will wait for server completion, there is no need for an onreadystatechange function:\nExample\nSynchronous XMLHttpRequest (async = false) is not recommended because the JavaScript will stop executing until the server response is ready. If the server is busy or slow, the application will hang or stop.\nModern developer tools are encouraged to warn about using synchronous requests and may throw an InvalidAccessError exception when it occurs.",
      "examples": [
        "xhttp.open(\"GET\", \"ajax_info.txt\", true);\nxhttp.send();",
        "xhttp.open(\"GET\", \"ajax_test.asp\", true);",
        "xhttp.open(\"GET\", \"demo_get.asp\");\nxhttp.send();",
        "xhttp.open(\"GET\", \"demo_get.asp?t=\" + Math.random());\nxhttp.send();",
        "xhttp.open(\"GET\", \"demo_get2.asp?fname=Henry&lname=Ford\");\nxhttp.send();",
        "xhttp.open(\"POST\", \"demo_post.asp\");\nxhttp.send();",
        "xhttp.open(\"POST\", \"ajax_test.asp\");\nxhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\nxhttp.send(\"fname=Henry&lname=Ford\");",
        "xhttp.open(\"GET\", \"ajax_info.txt\", false);",
        "xhttp.open(\"GET\", \"ajax_info.txt\", false);\nxhttp.send();\ndocument.getElementById(\"demo\").innerHTML = xhttp.responseText;",
        "XMLHttpRequest",
        "open()",
        "GET",
        "POST",
        "setRequestHeader()",
        "send()",
        "false",
        "onreadystatechange"
      ]
    },
    {
      "title": "AJAX - Server Response",
      "summary": "Server Response Properties\nThe responseText Property\nThe responseText property returns the server response as a JavaScript string, and you can use it accordingly:\nExample\nThe responseXML Property\nThe XMLHttpRequest object has an in-built XML parser.\nThe responseXML property returns the server response as an XML DOM object.\nUsing this property you can parse the response as an XML DOM object:\nExample\nRequest the file cd_catalog.xml and parse the response:\nREMOVE ADS\nServer Response Methods\nThe getAllResponseHeaders() Method\nThe getAllResponseHeaders() method returns all header information from the server response.\nExample\nThe getResponseHeader() Method\nThe getResponseHeader() method returns specific header information from the server response.\nExample",
      "examples": [
        "document.getElementById(\"demo\").innerHTML = xhttp.responseText;",
        "const xmlDoc = xhttp.responseXML;\nconst x = xmlDoc.getElementsByTagName(\"ARTIST\");\n\nlet txt = \"\";\nfor (let i = 0; i < x.length; i++) {\ntxt += x[i].childNodes[0].nodeValue + \"<br>\";\n}\ndocument.getElementById(\"demo\").innerHTML = txt;\n\nxhttp.open(\"GET\", \"cd_catalog.xml\");\nxhttp.send();",
        "const xhttp = new XMLHttpRequest();\nxhttp.onload = function() {\ndocument.getElementById(\"demo\").innerHTML =\nthis.getAllResponseHeaders();\n}\nxhttp.open(\"GET\", \"ajax_info.txt\");\nxhttp.send();",
        "const xhttp = new XMLHttpRequest();\nxhttp.onload = function() {\ndocument.getElementById(\"demo\").innerHTML =\nthis.getResponseHeader(\"Last-Modified\");\n}\nxhttp.open(\"GET\", \"ajax_info.txt\");\nxhttp.send();",
        "responseText",
        "responseXML",
        "getAllResponseHeaders()",
        "getResponseHeader()"
      ]
    },
    {
      "title": "AJAX XML Example",
      "summary": "AJAX can be used for interactive communication with an XML file.\nAJAX XML Example\nThe following example will demonstrate how a web page can fetch information from an XML file with AJAX:\nExample\nTry it Yourself »\nExample Explained\nWhen a user clicks on the \"Get CD info\" button above, the loadDoc() function is executed.\nThe loadDoc() function creates an XMLHttpRequest object, adds the function to be executed when the server response is ready, and sends the request off to the server.\nWhen the server response is ready, an HTML table is built, nodes (elements) are extracted from the XML file, and it finally updates the element \"demo\" with the HTML table filled with XML data:\nThe XML File\nThe XML file used in the example above looks like this: \"cd_catalog.xml\".",
      "examples": [
        "function loadDoc() {\nconst xhttp = new XMLHttpRequest();\nxhttp.onload = function() {myFunction(this);}\nxhttp.open(\"GET\", \"cd_catalog.xml\");\nxhttp.send();\n}\nfunction myFunction(xml) {\nconst xmlDoc = xml.responseXML;\nconst x = xmlDoc.getElementsByTagName(\"CD\");\nlet table=\"<tr><th>Artist</th><th>Title</th></tr>\";\nfor (let i = 0; i <x.length; i++) {\ntable += \"<tr><td>\" +\nx[i].getElementsByTagName(\"ARTIST\")[0].childNodes[0].nodeValue +\n\"</td><td>\" +\nx[i].getElementsByTagName(\"TITLE\")[0].childNodes[0].nodeValue +\n\"</td></tr>\";\n}\ndocument.getElementById(\"demo\").innerHTML = table;\n}",
        "loadDoc()",
        "XMLHttpRequest"
      ]
    },
    {
      "title": "AJAX PHP Example",
      "summary": "AJAX is used to create more interactive applications.\nAJAX PHP Example\nThe following example demonstrates how a web page can communicate with a web server while a user types characters in an input field:\nExample\nStart typing a name in the input field below:\nSuggestions:\nFirst name:\nExample Explained\nIn the example above, when a user types a character in the input field, a function called showHint() is executed.\nThe function is triggered by the onkeyup event.\nHere is the code:\nExample\nCode explanation:\nFirst, check if the input field is empty (str.length == 0). If it is, clear the content of the txtHint placeholder and exit the function.\nHowever, if the input field is not empty, do the following:\nCreate an XMLHttpRequest object\nCreate the function to be executed when the server response is ready\nSend the request off to a PHP file (gethint.php) on the server\nNotice that q parameter is added gethint.php?q=\"+str\nThe str variable holds the content of the input field\nREMOVE ADS\nThe PHP File - \"gethint.php\"\nThe PHP file checks an array of names, and returns the corresponding name(s) to the browser:",
      "examples": [
        "<p>Start typing a name in the input field below:</p>\n<p>Suggestions: <span id=\"txtHint\"></span></p>\n\n<form>\nFirst name: <input type=\"text\" onkeyup=\"showHint(this.value)\">\n</form>\n\n<script>\nfunction showHint(str) {\nif (str.length == 0) {\ndocument.getElementById(\"txtHint\").innerHTML = \"\";\nreturn;\n} else {\nconst xmlhttp = new XMLHttpRequest();\nxmlhttp.onload = function() {\ndocument.getElementById(\"txtHint\").innerHTML = this.responseText;\n}\nxmlhttp.open(\"GET\", \"gethint.php?q=\" + str);\nxmlhttp.send();\n}\n}\n</script>",
        "<?php\n// Array with names\n$a[] = \"Anna\";\n$a[] = \"Brittany\";\n$a[] = \"Cinderella\";\n$a[] = \"Diana\";\n$a[] = \"Eva\";\n$a[] = \"Fiona\";\n$a[] = \"Gunda\";\n$a[] = \"Hege\";\n$a[] = \"Inga\";\n$a[] = \"Johanna\";\n$a[] = \"Kitty\";\n$a[] = \"Linda\";\n$a[] = \"Nina\";\n$a[] = \"Ophelia\";\n$a[] = \"Petunia\";\n$a[] = \"Amanda\";\n$a[] = \"Raquel\";\n$a[] = \"Cindy\";\n$a[] = \"Doris\";\n$a[] = \"Eve\";\n$a[] = \"Evita\";\n$a[] = \"Sunniva\";\n$a[] = \"Tove\";\n$a[] = \"Unni\";\n$a[] = \"Violet\";\n$a[] = \"Liza\";\n$a[] = \"Elizabeth\";\n$a[] = \"Ellen\";\n$a[] = \"Wenche\";\n$a[] = \"Vicky\";\n\n// get the q parameter from URL\n$q = $_REQUEST[\"q\"];\n\n$hint = \"\";\n\n// lookup all hints from array if $q is different from \"\"\nif ($q !== \"\") {\n$q = strtolower($q);\n$len=strlen($q);\nforeach($a as $name) {\nif (stristr($q, substr($name, 0, $len))) {\nif ($hint === \"\") {\n$hint = $name;\n} else {\n$hint .= \", $name\";\n}\n}\n}\n}\n\n// Output \"no suggestion\" if no hint was found or output correct values\necho $hint === \"\" ? \"no suggestion\" : $hint;\n?>",
        "showHint()",
        "onkeyup"
      ]
    },
    {
      "title": "AJAX ASP Example",
      "summary": "AJAX is used to create more interactive applications.\nAJAX ASP Example\nThe following example will demonstrate how a web page can communicate with a web server while a user type characters in an input field:\nExample\nStart typing a name in the input field below:\nSuggestions:\nFirst name:\nExample Explained\nIn the example above, when a user types a character in the input field, a function called showHint() is executed.\nThe function is triggered by the onkeyup event.\nHere is the code:\nExample\nCode explanation:\nFirst, check if the input field is empty (str.length == 0). If it is, clear the content of the txtHint placeholder and exit the function.\nHowever, if the input field is not empty, do the following:\nCreate an XMLHttpRequest object\nCreate the function to be executed when the server response is ready\nSend the request off to an ASP file (gethint.asp) on the server\nNotice that q parameter is added gethint.asp?q=\"+str\nThe str variable holds the content of the input field\nREMOVE ADS\nThe ASP File - \"gethint.asp\"\nThe ASP file checks an array of names, and returns the corresponding name(s) to the browser:",
      "examples": [
        "<p>Start typing a name in the input field below:</p>\n<p>Suggestions: <span id=\"txtHint\"></span></p>\n\n<form>\nFirst name: <input type=\"text\" onkeyup=\"showHint(this.value)\">\n</form>\n\n<script>\nfunction showHint(str) {\nif (str.length == 0) {\ndocument.getElementById(\"txtHint\").innerHTML = \"\";\nreturn;\n} else {\nconst xmlhttp = new XMLHttpRequest();\nxmlhttp.onload = function() {\ndocument.getElementById(\"txtHint\").innerHTML = this.responseText;\n}\nxmlhttp.open(\"GET\", \"gethint.asp?q=\" + str);\nxmlhttp.send();\n}\n}\n</script>",
        "<%\nresponse.expires=-1\ndim a(30)\n'Fill up array with names\na(1)=\"Anna\"\na(2)=\"Brittany\"\na(3)=\"Cinderella\"\na(4)=\"Diana\"\na(5)=\"Eva\"\na(6)=\"Fiona\"\na(7)=\"Gunda\"\na(8)=\"Hege\"\na(9)=\"Inga\"\na(10)=\"Johanna\"\na(11)=\"Kitty\"\na(12)=\"Linda\"\na(13)=\"Nina\"\na(14)=\"Ophelia\"\na(15)=\"Petunia\"\na(16)=\"Amanda\"\na(17)=\"Raquel\"\na(18)=\"Cindy\"\na(19)=\"Doris\"\na(20)=\"Eve\"\na(21)=\"Evita\"\na(22)=\"Sunniva\"\na(23)=\"Tove\"\na(24)=\"Unni\"\na(25)=\"Violet\"\na(26)=\"Liza\"\na(27)=\"Elizabeth\"\na(28)=\"Ellen\"\na(29)=\"Wenche\"\na(30)=\"Vicky\"\n\n'get the q parameter from URL\nq=ucase(request.querystring(\"q\"))\n\n'lookup all hints from array if length of q>0\nif len(q)>0 then\nhint=\"\"\nfor i=1 to 30\nif q=ucase(mid(a(i),1,len(q))) then\nif hint=\"\" then\nhint=a(i)\nelse\nhint=hint & \" , \" & a(i)\nend if\nend if\nnext\nend if\n\n'Output \"no suggestion\" if no hint were found\n'or output the correct values\nif hint=\"\" then\nresponse.write(\"no suggestion\")\nelse\nresponse.write(hint)\nend if\n%>",
        "showHint()",
        "onkeyup"
      ]
    },
    {
      "title": "AJAX Database Example",
      "summary": "AJAX can be used for interactive communication with a database.\nAJAX Database Example\nThe following example will demonstrate how a web page can fetch information from a database with AJAX:\nExample\nTry it Yourself »\nExample Explained - The showCustomer() Function\nWhen a user selects a customer in the dropdown list above, a function called showCustomer() is executed. The function is triggered by the onchange event:\nshowCustomer\nThe showCustomer() function does the following:\nCheck if a customer is selected\nCreate an XMLHttpRequest object\nCreate the function to be executed when the server response is ready\nSend the request off to a file on the server\nNotice that a parameter (q) is added to the URL (with the content of the dropdown list)\nREMOVE ADS\nThe AJAX Server Page\nThe page on the server called by the JavaScript above is a PHP file called \"getcustomer.php\".\nThe source code in \"getcustomer.php\" runs a query against a database, and returns the result in an HTML table:",
      "examples": [
        "function showCustomer(str) {\nif (str == \"\") {\ndocument.getElementById(\"txtHint\").innerHTML = \"\";\nreturn;\n}\nconst xhttp = new XMLHttpRequest();\nxhttp.onload = function() {\ndocument.getElementById(\"txtHint\").innerHTML = this.responseText;\n}\nxhttp.open(\"GET\", \"getcustomer.php?q=\"+str);\nxhttp.send();\n}",
        "<?php\n$mysqli = new mysqli(\"servername\", \"username\", \"password\", \"dbname\");\nif($mysqli->connect_error) {\nexit('Could not connect');\n}\n\n$sql = \"SELECT customerid, companyname, contactname, address, city, postalcode, country\nFROM customers WHERE customerid = ?\";\n\n$stmt = $mysqli->prepare($sql);\n$stmt->bind_param(\"s\", $_GET['q']);\n$stmt->execute();\n$stmt->store_result();\n$stmt->bind_result($cid, $cname, $name, $adr, $city, $pcode, $country);\n$stmt->fetch();\n$stmt->close();\n\necho \"<table>\";\necho \"<tr>\";\necho \"<th>CustomerID</th>\";\necho \"<td>\" . $cid . \"</td>\";\necho \"<th>CompanyName</th>\";\necho \"<td>\" . $cname . \"</td>\";\necho \"<th>ContactName</th>\";\necho \"<td>\" . $name . \"</td>\";\necho \"<th>Address</th>\";\necho \"<td>\" . $adr . \"</td>\";\necho \"<th>City</th>\";\necho \"<td>\" . $city . \"</td>\";\necho \"<th>PostalCode</th>\";\necho \"<td>\" . $pcode . \"</td>\";\necho \"<th>Country</th>\";\necho \"<td>\" . $country . \"</td>\";\necho \"</tr>\";\necho \"</table>\";\n?>",
        "showCustomer()",
        "onchange"
      ]
    },
    {
      "title": "XML Applications",
      "summary": "This chapter demonstrates some HTML applications using XML, HTTP, DOM, and JavaScript.\nThe XML Document Used\nIn this chapter we will use the XML file called \"cd_catalog.xml\".\nDisplay XML Data in an HTML Table\nThis example loops through each <CD> element, and displays the values of the <ARTIST> and the <TITLE> elements in an HTML table:\nExample\nFor more information about using JavaScript and the XML DOM, go to DOM Intro.\nREMOVE ADS\nDisplay the First CD in an HTML div Element\nThis example uses a function to display the first CD element in an HTML element with id=\"showCD\":\nExample\nNavigate Between the CDs\nTo navigate between the CDs in the example above, create a next() and previous() function:\nExample\nShow Album Information When Clicking On a CD\nThe last example shows how you can show album information when the user clicks on a CD:\nExample",
      "examples": [
        "<table id=\"demo\"></table>\n\n<script>\nfunction loadXMLDoc() {\nconst xhttp = new XMLHttpRequest();\nxhttp.onload = function() {\nconst xmlDoc = xhttp.responseXML;\nconst cd = xmlDoc.getElementsByTagName(\"CD\");\nmyFunction(cd);\n}\nxhttp.open(\"GET\", \"cd_catalog.xml\");\nxhttp.send();\n}\n\nfunction myFunction(cd) {\nlet table=\"<tr><th>Artist</th><th>Title</th></tr>\";\nfor (let i = 0; i < cd.length; i++) {\ntable += \"<tr><td>\" +\ncd[i].getElementsByTagName(\"ARTIST\")[0].childNodes[0].nodeValue +\n\"</td><td>\" +\ncd[i].getElementsByTagName(\"TITLE\")[0].childNodes[0].nodeValue +\n\"</td></tr>\";\n}\ndocument.getElementById(\"demo\").innerHTML = table;\n}\n</script>\n\n</body>\n</html>",
        "const xhttp = new XMLHttpRequest();\nxhttp.onload = function() {\nconst xmlDoc = xhttp.responseXML;\nconst cd = xmlDoc.getElementsByTagName(\"CD\");\nmyFunction(cd, 0);\n}\nxhttp.open(\"GET\", \"cd_catalog.xml\");\nxhttp.send();\n\nfunction myFunction(cd, i) {\ndocument.getElementById(\"showCD\").innerHTML =\n\"Artist: \" +\ncd[i].getElementsByTagName(\"ARTIST\")[0].childNodes[0].nodeValue +\n\"<br>Title: \" +\ncd[i].getElementsByTagName(\"TITLE\")[0].childNodes[0].nodeValue +\n\"<br>Year: \" +\ncd[i].getElementsByTagName(\"YEAR\")[0].childNodes[0].nodeValue;\n}",
        "function next() {\n// display the next CD, unless you are on the last CD\nif (i < len-1) {\ni++;\ndisplayCD(i);\n}\n}\n\nfunction previous() {\n// display the previous CD, unless you are on the first CD\nif (i > 0) {\ni--;\ndisplayCD(i);\n}\n}",
        "function displayCD(i) {\ndocument.getElementById(\"showCD\").innerHTML =\n\"Artist: \" +\ncd[i].getElementsByTagName(\"ARTIST\")[0].childNodes[0].nodeValue +\n\"<br>Title: \" +\ncd[i].getElementsByTagName(\"TITLE\")[0].childNodes[0].nodeValue +\n\"<br>Year: \" +\ncd[i].getElementsByTagName(\"YEAR\")[0].childNodes[0].nodeValue;\n}",
        "next()",
        "previous()"
      ]
    },
    {
      "title": "AJAX Examples",
      "summary": "Simple Examples\nExamples explained\nRequest Header Information\nExamples explained\nRequest XML Files\nExamples explained\nRetrieve Server Data with PHP and ASP\nExamples explained\nRetrieve Database Information\nExamples explained\nAJAX Applications\nExamples explained",
      "examples": []
    },
    {
      "title": "JavaScript JSON",
      "summary": "JSON stands for JavaScript Object Notation.\nJSON is a plain text format for storing and transporting data.\nJSON is similar to the syntax for creating JavaScript objects.\nJSON is used to send, receive and store data.\nExample\nThe example above defines an object with 3 properties:\n\"name\"\n\"age\"\n\"car\"\nEach property has a value:\n\"John\"\n30\nnull\nWhy JSON?\nJSON is make it easy to send and store data between computers\nJSON is text only and language independent *\n* The syntax is derived from JavaScript object syntax, but JSON is text only.\nCode for reading and generating JSON data can be written in any programming language.\nThe JSON format was originally specified by Douglas Crockford.\nJSON and JavaScript\nThe JSON format is syntactically identical to the code for creating JavaScript objects.\nBecause of this, a JavaScript program can easily convert JSON data into native JavaScript objects.\nJavaScript has a built in function for converting JSON strings into JavaScript objects:\nJSON.parse()\nJavaScript also has a built in function for converting an object into a JSON string:\nJSON.stringify()\nYou can receive pure text from a server and use it as a JavaScript object.\nYou can send a JavaScript object to a server in pure text format.\nYou can work with data as JavaScript objects, with no complicated parsing and translations.\nStoring Data\nWhen storing data, the data has to be a certain format, and regardless of where you choose to store it, text is always one of the legal formats.\nJSON makes it possible to store JavaScript objects as text.\nJSON Example\nText that defines an employees object with an array of 3 employee objects:\nIf you parse the JSON string with a JavaScript program, you can access the data as an object:\nREMOVE ADS\nJSON Data - A Name and a Value\nJSON data is written as name/value pairs, just like JavaScript object properties.\nA name/value pair consists of a field name (in double quotes), followed by a colon, followed by a value:\nJSON names require double quotes. JavaScript names do not.\nJSON Objects\nJSON objects are written inside curly braces.\nJust like in JavaScript, objects can contain multiple name/value pairs:\nJSON Arrays\nJSON arrays are written inside square brackets.\nJust like in JavaScript, an array can contain objects:\nIn the example above, the object \"employees\" is an array. It contains three objects.\nEach object is a record of a person (with a first name and a last name).\nConverting a JSON Text to a JavaScript Object\nA common use of JSON is to read data from a web server, and display the data in a web page.\nFor simplicity, this can be demonstrated using a string as input.\nFirst, create a JavaScript string containing JSON syntax:\nThen, use the JavaScript built-in function JSON.parse() to convert the string into a JavaScript object:\nFinally, use the new JavaScript object in your page:\nExample",
      "examples": [
        "'{\"name\":\"John\", \"age\":30, \"car\":null}'",
        "{\n\"employees\":[\n{\"firstName\":\"John\", \"lastName\":\"Doe\"},\n{\"firstName\":\"Anna\", \"lastName\":\"Smith\"},\n{\"firstName\":\"Peter\", \"lastName\":\"Jones\"}\n]\n}",
        "let personName = obj.name;\nlet personAge = obj.age;",
        "\"firstName\":\"John\"",
        "{\"firstName\":\"John\", \"lastName\":\"Doe\"}",
        "\"employees\":[\n{\"firstName\":\"John\", \"lastName\":\"Doe\"},\n{\"firstName\":\"Anna\", \"lastName\":\"Smith\"},\n{\"firstName\":\"Peter\", \"lastName\":\"Jones\"}\n]",
        "let text = '{ \"employees\" : [' +\n'{ \"firstName\":\"John\" , \"lastName\":\"Doe\" },' +\n'{ \"firstName\":\"Anna\" , \"lastName\":\"Smith\" },' +\n'{ \"firstName\":\"Peter\" , \"lastName\":\"Jones\" } ]}';",
        "const obj = JSON.parse(text);",
        "<p id=\"demo\"></p>\n\n<script>\ndocument.getElementById(\"demo\").innerHTML =\nobj.employees[1].firstName + \" \" + obj.employees[1].lastName;\n</script>",
        "JSON.parse()",
        "JSON.stringify()"
      ]
    },
    {
      "title": "JSON Syntax",
      "summary": "JSON syntax is derived from JavaScript object notation syntax:\nData is in name/value pairs\nData is separated by commas\nCurly braces hold objects\nSquare brackets hold arrays\nJSON Data - A Name and a Value\nJSON data is written as name/value pairs (aka key/value pairs).\nA name/value pair consists of a field name (in double quotes), followed by a colon, followed by a value:\nExample\nJSON names require double quotes.\nJSON - Evaluates to JavaScript Objects\nThe JSON format is almost identical to JavaScript objects.\nIn JSON, keys must be strings, written with double quotes:\nJSON\nIn JavaScript, keys can be strings, numbers, or identifier names:\nJavaScript\nREMOVE ADS\nJSON Values\nIn JSON, values must be one of the following data types:\na string\na number\nan object\nan array\na boolean\nnull\nIn JavaScript values can be all of the above, plus any other valid JavaScript expression, including:\na function\na date\nundefined\nIn JSON, string values must be written with double quotes:\nJSON\nIn JavaScript, you can write string values with double or single quotes:\nJavaScript\nJavaScript Objects\nBecause JSON syntax is derived from JavaScript object notation, very little extra software is needed to work with JSON within JavaScript.\nWith JavaScript you can create an object and assign data to it, like this:\nExample\nYou can access a JavaScript object like this:\nExample\nIt can also be accessed like this:\nExample\nData can be modified like this:\nExample\nIt can also be modified like this:\nExample\nYou will learn how to convert JavaScript objects into JSON later in this tutorial.\nJavaScript Arrays as JSON\nThe same way JavaScript objects can be written as JSON, JavaScript arrays can also be written as JSON.\nYou will learn more about objects and arrays later in this tutorial.\nJSON Files\nThe file type for JSON files is \".json\"\nThe MIME type for JSON text is \"application/json\"",
      "examples": [
        "\"name\":\"John\"",
        "{\"name\":\"John\"}",
        "{name:\"John\"}",
        "{name:'John'}",
        "person = {name:\"John\", age:31, city:\"New York\"};",
        "// returns John\nperson.name;",
        "// returns John\nperson[\"name\"];",
        "person.name = \"Gilbert\";",
        "person[\"name\"] = \"Gilbert\";"
      ]
    },
    {
      "title": "JSON vs XML",
      "summary": "Both JSON and XML can be used to receive data from a web server.\nThe following JSON and XML examples both define an employees object, with an array of 3 employees:\nJSON Example\nXML Example\nJSON is Like XML Because\nBoth JSON and XML are \"self describing\" (human readable)\nBoth JSON and XML are hierarchical (values within values)\nBoth JSON and XML can be parsed and used by lots of programming languages\nBoth JSON and XML can be fetched with an XMLHttpRequest\nJSON is Unlike XML Because\nJSON doesn't use end tag\nJSON is shorter\nJSON is quicker to read and write\nJSON can use arrays\nThe biggest difference is:\nXML has to be parsed with an XML parser. JSON can be parsed by a standard JavaScript function.\nWhy JSON is Better Than XML\nXML is much more difficult to parse than JSON.\nJSON is parsed into a ready-to-use JavaScript object.\nFor AJAX applications, JSON is faster and easier than XML:\nUsing XML\nFetch an XML document\nUse the XML DOM to loop through the document\nExtract values and store in variables\nUsing JSON\nFetch a JSON string\nJSON.Parse the JSON string",
      "examples": [
        "{\"employees\":[\n{ \"firstName\":\"John\", \"lastName\":\"Doe\" },\n{ \"firstName\":\"Anna\", \"lastName\":\"Smith\" },\n{ \"firstName\":\"Peter\", \"lastName\":\"Jones\" }\n]}",
        "<employees>\n<employee>\n<firstName>John</firstName> <lastName>Doe</lastName>\n</employee>\n<employee>\n<firstName>Anna</firstName> <lastName>Smith</lastName>\n</employee>\n<employee>\n<firstName>Peter</firstName> <lastName>Jones</lastName>\n</employee>\n</employees>"
      ]
    },
    {
      "title": "JSON Data Types",
      "summary": "Valid Data Types\nIn JSON, values must be one of the following data types:\na string\na number\nan object (JSON object)\nan array\na boolean\nnull\nJSON values cannot be one of the following data types:\na function\na date\nundefined\nJSON Strings\nStrings in JSON must be written in double quotes.\nExample\nJSON Numbers\nNumbers in JSON must be an integer or a floating point.\nExample\nJSON Objects\nValues in JSON can be objects.\nExample\nObjects as values in JSON must follow the JSON syntax.\nREMOVE ADS\nJSON Arrays\nValues in JSON can be arrays.\nExample\nJSON Booleans\nValues in JSON can be true/false.\nExample\nJSON null\nValues in JSON can be null.\nExample",
      "examples": [
        "{\"name\":\"John\"}",
        "{\"age\":30}",
        "{\n\"employee\":{\"name\":\"John\", \"age\":30, \"city\":\"New York\"}\n}",
        "{\n\"employees\":[\"John\", \"Anna\", \"Peter\"]\n}",
        "{\"sale\":true}",
        "{\"middlename\":null}"
      ]
    },
    {
      "title": "JSON.parse()",
      "summary": "A common use of JSON is to exchange data to/from a web server.\nWhen receiving data from a web server, the data is always a string.\nParse the data with JSON.parse(), and the data becomes a JavaScript object.\nExample - Parsing JSON\nImagine we received this text from a web server:\nUse the JavaScript function JSON.parse() to convert text into a JavaScript object:\nMake sure the text is in JSON format, or else you will get a syntax error.\nUse the JavaScript object in your page:\nExample\nArray as JSON\nWhen using the JSON.parse() on a JSON derived from an array, the method will return a JavaScript array, instead of a JavaScript object.\nExample\nREMOVE ADS\nExceptions\nParsing Dates\nDate objects are not allowed in JSON.\nIf you need to include a date, write it as a string.\nYou can convert it back into a date object later:\nExample\nConvert a string into a date:\nOr, you can use the second parameter, of the JSON.parse() function, called reviver.\nThe reviver parameter is a function that checks each property, before returning the value.\nExample\nConvert a string into a date, using the reviver function:\nParsing Functions\nFunctions are not allowed in JSON.\nIf you need to include a function, write it as a string.\nYou can convert it back into a function later:\nExample\nConvert a string into a function:\nYou should avoid using functions in JSON, the functions will lose their scope, and you would have to use eval() to convert them back into functions.",
      "examples": [
        "'{\"name\":\"John\", \"age\":30, \"city\":\"New York\"}'",
        "const obj = JSON.parse('{\"name\":\"John\", \"age\":30, \"city\":\"New York\"}');",
        "<p id=\"demo\"></p>\n\n<script>\ndocument.getElementById(\"demo\").innerHTML = obj.name;\n</script>",
        "const text = '[\"Ford\", \"BMW\", \"Audi\", \"Fiat\"]';\nconst myArr = JSON.parse(text);",
        "const text = '{\"name\":\"John\", \"birth\":\"1986-12-14\", \"city\":\"New York\"}';\nconst obj = JSON.parse(text);\nobj.birth = new Date(obj.birth);\n\ndocument.getElementById(\"demo\").innerHTML = obj.name + \", \" + obj.birth;",
        "const text = '{\"name\":\"John\", \"birth\":\"1986-12-14\", \"city\":\"New York\"}';\nconst obj = JSON.parse(text, function (key, value) {\nif (key == \"birth\") {\nreturn new Date(value);\n} else {\nreturn value;\n}\n});\n\ndocument.getElementById(\"demo\").innerHTML = obj.name + \", \" + obj.birth;",
        "const text = '{\"name\":\"John\", \"age\":\"function () {return 30;}\", \"city\":\"New York\"}';\nconst obj = JSON.parse(text);\nobj.age = eval(\"(\" + obj.age + \")\");\n\ndocument.getElementById(\"demo\").innerHTML = obj.name + \", \" + obj.age();",
        "JSON.parse()",
        "eval()"
      ]
    },
    {
      "title": "JSON.stringify()",
      "summary": "A common use of JSON is to exchange data to/from a web server.\nWhen sending data to a web server, the data has to be a string.\nYou can convert any JavaScript datatype into a string with JSON.stringify().\nStringify a JavaScript Object\nImagine we have this object in JavaScript:\nUse the JavaScript function JSON.stringify() to convert it into a string.\nThe result will be a string following the JSON notation.\nmyJSON is now a string, and ready to be sent to a server:\nExample\nYou will learn how to send JSON to a server in the next chapters.\nStringify a JavaScript Array\nIt is also possible to stringify JavaScript arrays:\nImagine we have this array in JavaScript:\nUse the JavaScript function JSON.stringify() to convert it into a string.\nThe result will be a string following the JSON notation.\nmyJSON is now a string, and ready to be sent to a server:\nExample\nYou will learn how to send a JSON string to a server in the next chapters.\nStoring Data\nWhen storing data, the data has to be a certain format, and regardless of where you choose to store it, text is always one of the legal formats.\nJSON makes it possible to store JavaScript objects as text.\nExample\nStoring data in local storage\nREMOVE ADS\nAll Data Types\nJSON.stringify() can not only convert objects and arrays into JSON strings, it can convert any JavaScript value into a string.\nExample\nStringify a Number\nExample\nStringify a Boolean\nStringify a Date\nIn JSON, date objects are not allowed. The JSON.stringify() function will convert any Date objects into strings.\nExample\nYou can convert the string back into a date object at the receiver.\nStringify a Function\nIn JSON, functions are not allowed as object values.\nThe JSON.stringify() function will remove any functions from a JavaScript object, both the key and the value:\nExample\nThis can be omitted if you convert your functions into strings before running the JSON.stringify() function.\nExample\nIf you send functions using JSON, the functions will lose their scope, and the receiver would have to use eval() to convert them back into functions.",
      "examples": [
        "const obj = {name: \"John\", age: 30, city: \"New York\"};",
        "const myJSON = JSON.stringify(obj);",
        "const obj = {name: \"John\", age: 30, city: \"New York\"};\nconst myJSON = JSON.stringify(obj);",
        "const arr = [\"John\", \"Peter\", \"Sally\", \"Jane\"];",
        "const myJSON = JSON.stringify(arr);",
        "const arr = [\"John\", \"Peter\", \"Sally\", \"Jane\"];\nconst myJSON = JSON.stringify(arr);",
        "// Storing data:\nconst myObj = {name: \"John\", age: 31, city: \"New York\"};\nconst myJSON = JSON.stringify(myObj);\nlocalStorage.setItem(\"testJSON\", myJSON);\n\n// Retrieving data:\nlet text = localStorage.getItem(\"testJSON\");\nlet obj = JSON.parse(text);\ndocument.getElementById(\"demo\").innerHTML = obj.name;",
        "const num = 123e-5;\nconst myJSON = JSON.stringify(num);",
        "let bool = new Boolean(1);\nconst myJSON = JSON.stringify(bool);",
        "const obj = {name: \"John\", today: new Date(), city : \"New York\"};\nconst myJSON = JSON.stringify(obj);",
        "const obj = {name: \"John\", age: function () {return 30;}, city: \"New York\"};\nconst myJSON = JSON.stringify(obj);",
        "const obj = {name: \"John\", age: function () {return 30;}, city: \"New York\"};\nobj.age = obj.age.toString();\nconst myJSON = JSON.stringify(obj);",
        "JSON.stringify()",
        "myJSON"
      ]
    },
    {
      "title": "JSON Object Literals",
      "summary": "This is a JSON string:\nInside the JSON string there is a JSON object literal:\nJSON object literals are surrounded by curly braces {}.\nJSON object literals contains key/value pairs.\nKeys and values are separated by a colon.\nKeys must be strings, and values must be a valid JSON data type:\nstring\nnumber\nobject\narray\nboolean\nnull\nEach key/value pair is separated by a comma.\nIt is a common mistake to call a JSON object literal \"a JSON object\".\nJSON cannot be an object. JSON is a string format.\nThe data is only JSON when it is in a string format. When it is converted to a JavaScript variable, it becomes a JavaScript object.\nJavaScript Objects\nYou can create a JavaScript object from a JSON object literal:\nExample\nNormally, you create a JavaScript object by parsing a JSON string:\nExample\nAccessing Object Values\nYou can access object values by using dot (.) notation:\nExample\nYou can also access object values by using bracket ([]) notation:\nExample\nREMOVE ADS\nLooping an Object\nYou can loop through object properties with a for-in loop:\nExample\nIn a for-in loop, use the bracket notation to access the property values:\nExample",
      "examples": [
        "'{\"name\":\"John\", \"age\":30, \"car\":null}'",
        "{\"name\":\"John\", \"age\":30, \"car\":null}",
        "myObj = {\"name\":\"John\", \"age\":30, \"car\":null};",
        "myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';\nmyObj = JSON.parse(myJSON);",
        "const myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';\nconst myObj = JSON.parse(myJSON);\nx = myObj.name;",
        "const myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';\nconst myObj = JSON.parse(myJSON);\nx = myObj[\"name\"];",
        "const myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';\nconst myObj = JSON.parse(myJSON);\n\nlet text = \"\";\nfor (const x in myObj) {\ntext += x + \", \";\n}",
        "const myJSON = '{\"name\":\"John\", \"age\":30, \"car\":null}';\nconst myObj = JSON.parse(myJSON);\n\nlet text = \"\";\nfor (const x in myObj) {\ntext += myObj[x] + \", \";\n}"
      ]
    },
    {
      "title": "JSON Array Literals",
      "summary": "This is a JSON string:\nInside the JSON string there is a JSON array literal:\nArrays in JSON are almost the same as arrays in JavaScript.\nIn JSON, array values must be of type string, number, object, array, boolean or null.\nIn JavaScript, array values can be all of the above, plus any other valid JavaScript expression, including functions, dates, and undefined.\nJavaScript Arrays\nYou can create a JavaScript array from a literal:\nExample\nYou can create a JavaScript array by parsing a JSON string:\nExample\nAccessing Array Values\nYou access array values by index:\nExample\nArrays in Objects\nObjects can contain arrays:\nExample\nYou access array values by index:\nExample\nREMOVE ADS\nLooping Through an Array\nYou can access array values by using a for in loop:\nExample\nOr you can use a for loop:\nExample",
      "examples": [
        "'[\"Ford\", \"BMW\", \"Fiat\"]'",
        "[\"Ford\", \"BMW\", \"Fiat\"]",
        "myArray = [\"Ford\", \"BMW\", \"Fiat\"];",
        "myJSON = '[\"Ford\", \"BMW\", \"Fiat\"]';\nmyArray = JSON.parse(myJSON);",
        "myArray[0];",
        "{\n\"name\":\"John\",\n\"age\":30,\n\"cars\":[\"Ford\", \"BMW\", \"Fiat\"]\n}",
        "myObj.cars[0];",
        "for (let i in myObj.cars) {\nx += myObj.cars[i];\n}",
        "for (let i = 0; i < myObj.cars.length; i++) {\nx += myObj.cars[i];\n}",
        "for in",
        "for"
      ]
    },
    {
      "title": "JSON Server",
      "summary": "A common use of JSON is to exchange data to/from a web server.\nWhen receiving data from a web server, the data is always a string.\nParse the data with JSON.parse(), and the data becomes a JavaScript object.\nSending Data\nIf you have data stored in a JavaScript object, you can convert the object into JSON, and send it to a server:\nExample\nReceiving Data\nIf you receive data in JSON format, you can easily convert it into a JavaScript object:\nExample\nJSON From a Server\nYou can request JSON from the server by using an AJAX request\nAs long as the response from the server is written in JSON format, you can parse the string into a JavaScript object.\nExample\nUse the XMLHttpRequest to get data from the server:\nTake a look at json_demo.txt\nREMOVE ADS\nArray as JSON\nWhen using the JSON.parse() on JSON derived from an array, the method will return a JavaScript array, instead of a JavaScript object.\nExample\nJSON returned from a server as an array:\nTake a look at json_demo_array.txt",
      "examples": [
        "const myObj = {name: \"John\", age: 31, city: \"New York\"};\nconst myJSON = JSON.stringify(myObj);\nwindow.location = \"demo_json.php?x=\" + myJSON;",
        "const myJSON = '{\"name\":\"John\", \"age\":31, \"city\":\"New York\"}';\nconst myObj = JSON.parse(myJSON);\ndocument.getElementById(\"demo\").innerHTML = myObj.name;",
        "const xmlhttp = new XMLHttpRequest();\nxmlhttp.onload = function() {\nconst myObj = JSON.parse(this.responseText);\ndocument.getElementById(\"demo\").innerHTML = myObj.name;\n};\nxmlhttp.open(\"GET\", \"json_demo.txt\");\nxmlhttp.send();",
        "const xmlhttp = new XMLHttpRequest();\nxmlhttp.onload = function() {\nconst myArr = JSON.parse(this.responseText);\ndocument.getElementById(\"demo\").innerHTML = myArr[0];\n}\n}\nxmlhttp.open(\"GET\", \"json_demo_array.txt\", true);\nxmlhttp.send();",
        "JSON.parse()"
      ]
    },
    {
      "title": "JSON PHP",
      "summary": "A common use of JSON is to read data from a web server, and display the data in a web page.\nThis chapter will teach you how to exchange JSON data between the client and a PHP server.\nThe PHP File\nPHP has some built-in functions to handle JSON.\nObjects in PHP can be converted into JSON by using the PHP function json_encode():\nPHP file\nThe Client JavaScript\nHere is a JavaScript on the client, using an AJAX call to request the PHP file from the example above:\nExample\nUse JSON.parse() to convert the result into a JavaScript object:\nREMOVE ADS\nPHP Array\nArrays in PHP will also be converted into JSON when using the PHP function json_encode():\nPHP file\nThe Client JavaScript\nHere is a JavaScript on the client, using an AJAX call to request the PHP file from the array example above:\nExample\nUse JSON.parse() to convert the result into a JavaScript array:\nPHP Database\nPHP is a server side programming language, and can be used to access a database.\nImagine you have a database on your server, and you want to send a request to it from the client where you ask for the 10 first rows in a table called \"customers\".\nOn the client, make a JSON object that describes the numbers of rows you want to return.\nBefore you send the request to the server, convert the JSON object into a string and send it as a parameter to the url of the PHP page:\nExample\nUse JSON.stringify() to convert the JavaScript object into JSON:\nExample explained:\nDefine an object containing a \"limit\" property and value.\nConvert the object into a JSON string.\nSend a request to the PHP file, with the JSON string as a parameter.\nWait until the request returns with the result (as JSON)\nDisplay the result received from the PHP file.\nTake a look at the PHP file:\nPHP file\nPHP File explained:\nConvert the request into an object, using the PHP function json_decode().\nAccess the database, and fill an array with the requested data.\nAdd the array to an object, and return the object as JSON using the json_encode() function.\nUse the Data\nExample\nPHP Method = POST\nWhen sending data to the server, it is often best to use the HTTP POST method.\nTo send AJAX requests using the POST method, specify the method, and the correct header.\nThe data sent to the server must now be an argument to the send() method:\nExample\nThe only difference in the PHP file is the method for getting the transferred data.\nPHP file\nUse $_POST instead of $_GET:",
      "examples": [
        "<?php\n$myObj->name = \"John\";\n$myObj->age = 30;\n$myObj->city = \"New York\";\n\n$myJSON = json_encode($myObj);\n\necho $myJSON;\n?>",
        "const xmlhttp = new XMLHttpRequest();\nxmlhttp.onload = function() {\nconst myObj = JSON.parse(this.responseText);\ndocument.getElementById(\"demo\").innerHTML = myObj.name;\n}\nxmlhttp.open(\"GET\", \"demo_file.php\");\nxmlhttp.send();",
        "<?php\n$myArr = array(\"John\", \"Mary\", \"Peter\", \"Sally\");\n\n$myJSON = json_encode($myArr);\n\necho $myJSON;\n?>",
        "var xmlhttp = new XMLHttpRequest();\nxmlhttp.onload = function() {\nconst myObj = JSON.parse(this.responseText);\ndocument.getElementById(\"demo\").innerHTML = myObj[2];\n}\nxmlhttp.open(\"GET\", \"demo_file_array.php\", true);\nxmlhttp.send();",
        "const limit = {\"limit\":10};\nconst dbParam = JSON.stringify(limit);\nxmlhttp = new XMLHttpRequest();\nxmlhttp.onload = function() {\ndocument.getElementById(\"demo\").innerHTML = this.responseText;\n}\nxmlhttp.open(\"GET\",\"json_demo_db.php?x=\" + dbParam);\nxmlhttp.send();",
        "<?php\nheader(\"Content-Type: application/json; charset=UTF-8\");\n$obj = json_decode($_GET[\"x\"], false);\n\n$conn = new mysqli(\"myServer\", \"myUser\", \"myPassword\", \"Northwind\");\n$stmt = $conn->prepare(\"SELECT name FROM customers LIMIT ?\");\n$stmt->bind_param(\"s\", $obj->limit);\n$stmt->execute();\n$result = $stmt->get_result();\n$outp = $result->fetch_all(MYSQLI_ASSOC);\n\necho json_encode($outp);\n?>",
        "xmlhttp.onload = function() {\nconst myObj = JSON.parse(this.responseText);\nlet text = \"\";\nfor (let x in myObj) {\ntext += myObj[x].name + \"<br>\";\n}\ndocument.getElementById(\"demo\").innerHTML = text;\n}",
        "const dbParam = JSON.stringify({\"limit\":10});\nconst xmlhttp = new XMLHttpRequest();\nxmlhttp.onload = function() {\nconst myObj = JSON.parse(this.responseText);\nlet text =\"\";\nfor (let x in myObj) {\ntext += myObj[x].name + \"<br>\";\n}\ndocument.getElementById(\"demo\").innerHTML = text;\n}\nxmlhttp.open(\"POST\", \"json_demo_db_post.php\");\nxmlhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\nxmlhttp.send(\"x=\" + dbParam);",
        "<?php\nheader(\"Content-Type: application/json; charset=UTF-8\");\n$obj = json_decode($_POST[\"x\"], false);\n\n$conn = new mysqli(\"myServer\", \"myUser\", \"myPassword\", \"Northwind\");\n$stmt = $conn->prepare(\"SELECT name FROM customers LIMIT ?\");\n$stmt->bind_param(\"s\", $obj->limit);\n$stmt->execute();\n$result = $stmt->get_result();\n$outp = $result->fetch_all(MYSQLI_ASSOC);\n\necho json_encode($outp);\n?>",
        "POST",
        "send()"
      ]
    },
    {
      "title": "JSON HTML",
      "summary": "JSON can very easily be translated into JavaScript.\nJavaScript can be used to make HTML in your web pages.\nHTML Table\nMake an HTML table with data received as JSON:\nExample\nDynamic HTML Table\nMake the HTML table based on the value of a drop down menu:\nChoose an option:\nCustomers\nProducts\nSuppliers\nExample\nREMOVE ADS\nHTML Drop Down List\nMake an HTML drop down list with data received as JSON:\nExample",
      "examples": [
        "const dbParam = JSON.stringify({table:\"customers\",limit:20});\nconst xmlhttp = new XMLHttpRequest();\nxmlhttp.onload = function() {\nmyObj = JSON.parse(this.responseText);\nlet text = \"<table border='1'>\"\nfor (let x in myObj) {\ntext += \"<tr><td>\" + myObj[x].name + \"</td></tr>\";\n}\ntext += \"</table>\"\ndocument.getElementById(\"demo\").innerHTML = text;\n}\nxmlhttp.open(\"POST\", \"json_demo_html_table.php\");\nxmlhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\nxmlhttp.send(\"x=\" + dbParam);",
        "<select id=\"myselect\" onchange=\"change_myselect(this.value)\">\n<option value=\"\">Choose an option:</option>\n<option value=\"customers\">Customers</option>\n<option value=\"products\">Products</option>\n<option value=\"suppliers\">Suppliers</option>\n</select>\n\n<script>\nfunction change_myselect(sel) {\nconst dbParam = JSON.stringify({table:sel,limit:20});\nconst xmlhttp = new XMLHttpRequest();\nxmlhttp.onload = function() {\nconst myObj = JSON.parse(this.responseText);\nlet text = \"<table border='1'>\"\nfor (let x in myObj) {\ntext += \"<tr><td>\" + myObj[x].name + \"</td></tr>\";\n}\ntext += \"</table>\"\ndocument.getElementById(\"demo\").innerHTML = text;\n}\nxmlhttp.open(\"POST\", \"json_demo_html_table.php\");\nxmlhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\nxmlhttp.send(\"x=\" + dbParam);\n}\n</script>",
        "const dbParam = JSON.stringify({table:\"customers\",limit:20});\nconst xmlhttp = new XMLHttpRequest();\nxmlhttp.onload = function() {\nconst myObj = JSON.parse(this.responseText);\nlet text = \"<select>\"\nfor (let x in myObj) {\ntext += \"<option>\" + myObj[x].name + \"</option>\";\n}\ntext += \"</select>\"\ndocument.getElementById(\"demo\").innerHTML = text;\n}\n}\nxmlhttp.open(\"POST\", \"json_demo_html_table.php\", true);\nxmlhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\nxmlhttp.send(\"x=\" + dbParam);"
      ]
    },
    {
      "title": "JSONP",
      "summary": "JSONP is a method for sending JSON data without worrying about cross-domain issues.\nJSONP does not use the XMLHttpRequest object.\nJSONP uses the <script> tag instead.\nJSONP Intro\nJSONP stands for JSON with Padding.\nRequesting a file from another domain can cause problems, due to cross-domain policy.\nRequesting an external script from another domain does not have this problem.\nJSONP uses this advantage, and request files using the script tag instead of the XMLHttpRequest object.\nThe Server File\nThe file on the server wraps the result inside a function call:\nExample\nThe result returns a call to a function named \"myFunc\" with the JSON data as a parameter.\nMake sure that the function exists on the client.\nThe JavaScript function\nThe function named \"myFunc\" is located on the client, and ready to handle JSON data:\nExample\nREMOVE ADS\nCreating a Dynamic Script Tag\nThe example above will execute the \"myFunc\" function when the page is loading, based on where you put the script tag, which is not very satisfying.\nThe script tag should only be created when needed:\nExample\nCreate and insert the <script> tag when a button is clicked:\nDynamic JSONP Result\nThe examples above are still very static.\nMake the example dynamic by sending JSON to the php file, and let the php file return a JSON object based on the information it gets.\nPHP file\nPHP File explained:\nConvert the request into an object, using the PHP function json_decode().\nAccess the database, and fill an array with the requested data.\nAdd the array to an object.\nConvert the array into JSON using the json_encode() function.\nWrap \"myFunc()\" around the return object.\nJavaScript Example\nThe \"myFunc\" function will be called from the php file:\nCallback Function\nWhen you have no control over the server file, how do you get the server file to call the correct function?\nSometimes the server file offers a callback function as a parameter:\nExample\nThe php file will call the function you pass as a callback parameter:",
      "examples": [
        "<script src=\"demo_jsonp.php\">",
        "<?php\n$myJSON = '{ \"name\":\"John\", \"age\":30, \"city\":\"New York\" }';\n\necho \"myFunc(\".$myJSON.\");\";\n?>",
        "function myFunc(myObj) {\ndocument.getElementById(\"demo\").innerHTML = myObj.name;\n}",
        "function clickButton() {\nlet s = document.createElement(\"script\");\ns.src = \"demo_jsonp.php\";\ndocument.body.appendChild(s);\n}",
        "<?php\nheader(\"Content-Type: application/json; charset=UTF-8\");\n$obj = json_decode($_GET[\"x\"], false);\n\n$conn = new mysqli(\"myServer\", \"myUser\", \"myPassword\", \"Northwind\");\n$result = $conn->query(\"SELECT name FROM \".$obj->$table.\" LIMIT \".$obj->$limit);\n$outp = array();\n$outp = $result->fetch_all(MYSQLI_ASSOC);\n\necho \"myFunc(\".json_encode($outp).\")\";\n?>",
        "const obj = { table: \"products\", limit: 10 };\nlet s = document.createElement(\"script\");\ns.src = \"jsonp_demo_db.php?x=\" + JSON.stringify(obj);\ndocument.body.appendChild(s);\n\nfunction myFunc(myObj) {\nlet txt = \"\";\nfor (let x in myObj) {\ntxt += myObj[x].name + \"<br>\";\n}\ndocument.getElementById(\"demo\").innerHTML = txt;\n}",
        "let s = document.createElement(\"script\");\ns.src = \"jsonp_demo_db.php?callback=myDisplayFunction\";\ndocument.body.appendChild(s);",
        "XMLHttpRequest",
        "<script>"
      ]
    },
    {
      "title": "JavaScript / jQuery DOM Selectors",
      "summary": "jQuery vs JavaScript\njQuery was created in 2006 by John Resig. It was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax.\nHowever, after JavaScript Version 5 (2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript:\nFinding HTML Element by Id\nReturn the element with id=\"id01\":\njQuery\nTry it Yourself »\nJavaScript\nTry it Yourself »\nFinding HTML Elements by Tag Name\nReturn all <p> elements:\njQuery\nTry it Yourself »\nJavaScript\nTry it Yourself »\nREMOVE ADS\nFinding HTML Elements by Class Name\nReturn all elements with class=\"intro\".\njQuery\nTry it Yourself »\nJavaScript\nTry it Yourself »\nFinding HTML Elements by CSS Selectors\nReturn a list of all <p> elements with class=\"intro\".\njQuery\nTry it Yourself »\nJavaScript\nTry it Yourself »",
      "examples": [
        "myElement = $(\"#id01\");",
        "myElement = document.getElementById(\"id01\");",
        "myElements = $(\"p\");",
        "myElements = document.getElementsByTagName(\"p\");",
        "myElements = $(\".intro\");",
        "myElements = document.getElementsByClassName(\"intro\");",
        "myElements = $(\"p.intro\");",
        "myElements = document.querySelectorAll(\"p.intro\");"
      ]
    },
    {
      "title": "JavaScript / jQuery HTML Elements",
      "summary": "jQuery vs JavaScript\njQuery was created in 2006 by John Resig. It was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax.\nHowever, after JavaScript Version 5 (2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript:\nSet Text Content\nSet the inner text of an HTML element:\njQuery\nTry it Yourself »\nJavaScript\nTry it Yourself »\nGet Text Content\nGet the inner text of an HTML element:\njQuery\nTry it Yourself »\nJavaScript\nTry it Yourself »\nREMOVE ADS\nSet HTML Content\nSet the HTML content of an element:\njQuery\nTry it Yourself »\nJavaScript\nTry it Yourself »\nGet HTML Content\nGet the HTML content of an element:\njQuery\nTry it Yourself »\nJavaScript\nTry it Yourself »",
      "examples": [
        "myElement.text(\"Hello Sweden!\");",
        "myElement.textContent = \"Hello Sweden!\";",
        "myText = $(\"#02\").text();",
        "myText = document.getElementById(\"02\").textContent;",
        "myElement.html(\"<p>Hello World</p>\");",
        "myElement.innerHTML = \"<p>Hello World</p>\";",
        "content = myElement.html();",
        "content = myElement.innerHTML;"
      ]
    },
    {
      "title": "JavaScript / jQuery CSS Styles",
      "summary": "jQuery vs JavaScript\njQuery was created in 2006 by John Resig. It was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax.\nHowever, after JavaScript Version 5 (2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript:\nHiding HTML Elements\nHide an HTML Element:\njQuery\nTry it Yourself »\nJavaScript\nTry it Yourself »\nShowing HTML Elements\nShow an HTML Element:\njQuery\nTry it Yourself »\nJavaScript\nTry it Yourself »\nStyling HTML Elements\nChange the font size of an HTML element:\njQuery\nTry it Yourself »\nJavaScript\nTry it Yourself »",
      "examples": [
        "myElement.hide();",
        "myElement.style.display = \"none\";",
        "myElement.show();",
        "myElement.style.display = \"\";",
        "$(\"#demo\").css(\"font-size\",\"35px\");",
        "document.getElementById(\"demo\").style.fontSize = \"35px\";"
      ]
    },
    {
      "title": "JavaScript / jQuery HTML DOM",
      "summary": "jQuery vs JavaScript\njQuery was created in 2006 by John Resig. It was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax.\nHowever, after JavaScript Version 5 (2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript:\nRemoving HTML Elements\nRemove an HTML element:\njQuery\nTry it Yourself »\nJavaScript\nTry it Yourself »\nGet Parent Element\nReturn the parent of an HTML element:\njQuery\nTry it Yourself »\nJavaScript\nTry it Yourself »",
      "examples": [
        "$(\"#id02\").remove();",
        "document.getElementById(\"id02\").remove();",
        "myParent = $(\"#02\").parent().prop(\"nodeName\"); ;",
        "myParent = document.getElementById(\"02\").parentNode.nodeName;"
      ]
    },
    {
      "title": "JavaScript Graphics",
      "summary": "Graphic Libraries\nJavaScript libraries to use for all kinds of graphs:\nPlotly.js\nChart.js\nGoogle Chart\nPlotly.js\nPlotly.js is a charting library that comes with over 40 chart types, 3D charts, statistical graphs, and SVG maps.\nLearn More ... var xArray = [\"Italy\",\"France\",\"Spain\",\"USA\",\"Argentina\"]; var yArray = [55, 49, 44, 24, 15]; var data = [{labels:xArray, values:yArray, type:\"pie\"}]; var layout = {title:\"World Wide Wine Production\"}; Plotly.newPlot(\"myPlot24\", data, layout);\nChart.js\nChart.js comes with many built-in chart types:\nScatter\nLine\nBar\nRadar\nPie and Doughnut\nPolar Area\nBubble\nLearn More ... var chart13 = new Chart(\"myPlot13\", { type: 'bar', data: { labels: [\"Italy\",\"France\",\"Spain\",\"USA\",\"Argentina\"], datasets: [{ backgroundColor:[\"red\", \"green\",\"blue\",\"orange\",\"brown\"], data: [55, 49, 44, 24, 15] }] }, options: { legend: {display: false}, scales: { yAxes: [{ ticks: { beginAtZero: true } }] }, title: { display: true, text: \"World Wide Wine Production 2018\", fontSize: 16 } } });\nREMOVE ADS\nGoogle Chart\nFrom simple line charts to complex tree maps, Google Chart provides a number of built-in chart types:\nScatter Chart\nLine Chart\nBar / Column Chart\nArea Chart\nPie Chart\nDonut Chart\nOrg Chart\nMap / Geo Chart\nLearn More ...",
      "examples": []
    },
    {
      "title": "HTML Canvas",
      "summary": "HTML Canvas is perfect for Scatter Plots\nHTML Canvas is perfect for Line Graphs\nHTML Canvas is perfect for combining Scatter and Lines\nScatter Plots\nSource Code\nTry it Yourself »\nLine Graphs\nSource Code\nTry it Yourself »\nREMOVE ADS\nCombined\nSource Code\nTry it Yourself »",
      "examples": [
        "const xArray = [50,60,70,80,90,100,110,120,130,140,150];\nconst yArray = [7,8,8,9,9,9,10,11,14,14,15];\n\n// Plot Scatter\nctx.fillStyle = \"red\";\nfor (let i = 0; i < xArray.length-1; i++) {\nlet x = xArray[i]*400/150;\nlet y = yArray[i]*400/15;\nctx.beginPath();\nctx.ellipse(x, y, 2, 3, 0, 0, Math.PI * 2);\nctx.fill();\n}",
        "let xMax = canvas.height;\nlet slope = 1.2;\nlet intercept = 70;\n\n// Plot Scatter\nctx.moveTo(0, intercept);\nctx.lineTo(xMax, f(xMax));\nctx.strokeStyle = \"black\";\nctx.stroke();\n\n// Line Function\nfunction f(x) {\nreturn x * slope + intercept;\n}",
        "let xMax = canvas.height;\nlet yMax = canvas.width;\nlet slope = 1.2;\nlet intercept = 70;\n\nconst xArray = [50,60,70,80,90,100,110,120,130,140,150];\nconst yArray = [7,8,8,9,9,9,10,11,14,14,15];\n\n// Plot Scatter\nctx.fillStyle = \"red\";\nfor (let i = 0; i < xArray.length-1; i++) {\nlet x = xArray[i]*400/150;\nlet y = yArray[i]*400/15;\nctx.beginPath();\nctx.ellipse(x, y, 2, 3, 0, 0, Math.PI * 2);\nctx.fill();\n}\n\n// Plot Line\nctx.moveTo(0, intercept);\nctx.lineTo(xMax, f(xMax));\nctx.strokeStyle = \"black\";\nctx.stroke();\n\n// Line Function\nfunction f(x) {\nreturn x * slope + intercept;\n}"
      ]
    },
    {
      "title": "Plotly.js",
      "summary": "Plotly.js is a charting library that comes with over 40 chart types:\nHorizontal and Vertical Bar Charts\nPie and Donut Charts\nLine Charts\nScatter and Bubble Plots\nEquation Plots\n3D Charts\nStatistical Graphs\nSVG Maps\n...\nPlotly.js is free and open-source under the MIT license. It costs nothing to install and use. You can view the source, report issues and contribute using Github.\nBar Charts\nSource Code\nTry it Yourself »\nHorizontal Bar Charts\nSource Code\nTry it Yourself »\nPie Charts\nTo display a pie instead of bars, change x and y to labels and values, and change the type to \"pie\":\nTry it Yourself »\nDonut Charts\nTo display a donut instead of a pie, add a hole:\nTry it Yourself »\nPlotting Equations\nSource Code\nTo display scatters instead, change mode to markers:\nScatter Plots\nSource Code\nTry it Yourself »\nLine Graphs\nSource Code\nTry it Yourself »\nREMOVE ADS\nBubble Plots\nBubble Plots are Scatter Plots whose markers have variable color, size, and symbols.\nIt is a type of 3-dimensional chart with only two axes (x and y) where the size of the bubble communicates the third dimention.\nSource Code\nTry it Yourself »\nLinear Graphs\nSource Code\nTry it Yourself »\nMultiple Lines\nSource Code\nTry it Yourself »",
      "examples": [
        "const xArray = [\"Italy\",\"France\",\"Spain\",\"USA\",\"Argentina\"];\nconst yArray = [55, 49, 44, 24, 15];\n\nconst data = [{\nx: xArray,\ny: yArray,\ntype: \"bar\",\norientation:\"v\",\nmarker: {color:\"rgba(0,0,255)\"}\n}];\n\nconst layout = {title:\"World Wide Wine Production\"};\n\nPlotly.newPlot(\"myPlot\", data, layout);",
        "const xArray = [55, 49, 44, 24, 15];\nconst yArray = [\"Italy\",\"France\",\"Spain\",\"USA\",\"Argentina\"];\n\nconst data = [{\nx: xArray,\ny: yArray,\ntype: \"bar\",\norientation: \"h\",\nmarker: {color:\"rgba(255,0,0,0.6)\"}\n}];\n\nconst layout = {title:\"World Wide Wine Production\"};\n\nPlotly.newPlot(\"myPlot\", data, layout);",
        "const data = [{\nlabels: xArray,\nvalues: yArray,\ntype: \"pie\"\n}];",
        "const data = [{\nlabels: xArray,\nvalues: yArray,\nhole: .4,\ntype: \"pie\"\n}];",
        "let exp = \"Math.sin(x)\";\n\n// Generate values\nconst xValues = [];\nconst yValues = [];\nfor (let x = 0; x <= 10; x += 0.1) {\nxValues.push(x);\nyValues.push(eval(exp));\n}\n\n// Display using Plotly\nconst data = [{x:xValues, y:yValues, mode:\"lines\"}];\nconst layout = {title: \"y = \" + exp};\nPlotly.newPlot(\"myPlot\", data, layout);",
        "// Display using Plotly\nconst data = [{x:xValues, y:yValues, mode:\"markers\"}];\nconst layout = {title: \"y = \" + exp};\nPlotly.newPlot(\"myPlot\", data, layout);",
        "const xArray = [50,60,70,80,90,100,110,120,130,140,150];\nconst yArray = [7,8,8,9,9,9,10,11,14,14,15];\n\n// Define Data\nconst data = [{\nx: xArray,\ny: yArray,\nmode:\"markers\",\ntype:\"scatter\"\n}];\n\n// Define Layout\nconst layout = {\nxaxis: {range: [40, 160], title: \"Square Meters\"},\nyaxis: {range: [5, 16], title: \"Price in Millions\"},\ntitle: \"House Prices vs. Size\"\n};\n\nPlotly.newPlot(\"myPlot\", data, layout);",
        "const xArray = [50,60,70,80,90,100,110,120,130,140,150];\nconst yArray = [7,8,8,9,9,9,10,11,14,14,15];\n\n// Define Data\nconst data = [{\nx: xArray,\ny: yArray,\nmode: \"lines\",\ntype: \"scatter\"\n}];\n\n// Define Layout\nconst layout = {\nxaxis: {range: [40, 160], title: \"Square Meters\"},\nyaxis: {range: [5, 16], title: \"Price in Millions\"},\ntitle: \"House Prices vs Size\"\n};\n\n// Display using Plotly\nPlotly.newPlot(\"myPlot\", data, layout);",
        "const xArray = [1,2,3,4];\nconst yArray = [10,20,30,40];\n\nconst trace1 = {\nx: xArray,\ny: yArray,\nmode: 'markers',\nmarker: {\ncolor: ['red', 'green', 'blue', 'orange'],\nsize: [20, 30, 40, 50]\n}\n};\n\nconst data = [trace1];\n\nconst layout = {\ntitle: \"Plotting Bubbles\"\n};\n\nPlotly.newPlot('myPlot', data, layout);",
        "let exp = \"x + 17\";\n\n// Generate values\nconst xValues = [];\nconst yValues = [];\nfor (let x = 0; x <= 10; x += 1) {\nyValues.push(eval(exp));\nxValues.push(x);\n}\n\n// Define Data\nconst data = [{\nx: xValues,\ny: yValues,\nmode: \"lines\"\n}];\n\n// Define Layout\nconst layout = {title: \"y = \" + exp};\n\n// Display using Plotly\nPlotly.newPlot(\"myPlot\", data, layout);",
        "let exp1 = \"x\";\nlet exp2 = \"1.5*x\";\nlet exp3 = \"1.5*x + 7\";\n\n// Generate values\nconst x1Values = [];\nconst x2Values = [];\nconst x3Values = [];\nconst y1Values = [];\nconst y2Values = [];\nconst y3Values = [];\n\nfor (let x = 0; x <= 10; x += 1) {\nx1Values.push(x);\nx2Values.push(x);\nx3Values.push(x);\ny1Values.push(eval(exp1));\ny2Values.push(eval(exp2));\ny3Values.push(eval(exp3));\n}\n\n// Define Data\nconst data = [\n{x: x1Values, y: y1Values, mode:\"lines\"},\n{x: x2Values, y: y2Values, mode:\"lines\"},\n{x: x3Values, y: y3Values, mode:\"lines\"}\n];\n\n// Define Layout\nconst layout = {title: \"[y=\" + exp1 + \"] [y=\" + exp2 + \"] [y=\" + exp3 + \"]\"};\n\n// Display using Plotly\nPlotly.newPlot(\"myPlot\", data, layout);"
      ]
    },
    {
      "title": "Chart.js",
      "summary": "Chart.js is an free JavaScript library for making HTML-based charts. It is one of the simplest visualization libraries for JavaScript, and comes with the many built-in chart types:\nScatter Plot\nLine Chart\nBar Chart\nPie Chart\nDonut Chart\nBubble Chart\nArea Chart\nRadar Chart\nMixed Chart\nHow to Use Chart.js?\n1. Add a link to the providing CDN (Content Delivery Network):\n2. Add a <canvas> to where in the HTML you want to draw the chart:\nThe canvas element must have a unique id.\nBar Charts\nSource Code\nTry it Yourself »\nOnly Blue Bars:\nTry it Yourself »\nColor Shades:\nTry it Yourself »\nHorizontal Bars\nSet Index axiss to y:\nTry it Yourself »\nPie Charts\nExample\nTry it Yourself »\nDoughnut Charts\nJust change type from \"pie\" to \"doughnut\":\nTry it Yourself »\nScatter Plots\nHouse Prices vs. Size\nSource Code\nTry it Yourself »\nREMOVE ADS\nLine Graphs\nHouse Prices vs. Size\nSource Code\nTry it Yourself »\nIf you set the borderColor to zero, you can scatter plot the line graph:\nTry it Yourself »\nMultiple Lines\nSource Code\nTry it Yourself »\nLinear Graphs\nSource Code\nTry it Yourself »\nFunction Graphs\nSame as Linear Graph. Just change the generateData parameter(s):\nTry it Yourself »",
      "examples": [
        "<script\nsrc=\"https://cdn.jsdelivr.net/npm/chart.js@4.5.0\">\n</script>",
        "<canvas>\nid=\"myChart\" style=\"width:100%;max-width:700px\"\n</canvas>",
        "const myChart = new Chart(\"myChart\", {\ntype: \"bar\",\ndata: {},\noptions: {}\n});",
        "const myChart = new Chart(\"myChart\", {\ntype: \"line\",\ndata: {},\noptions: {}\n});",
        "const xValues = [\"Italy\", \"France\", \"Spain\", \"USA\", \"Argentina\"];\nconst yValues = [55, 49, 44, 24, 15];\nconst barColors = [\"red\", \"green\",\"blue\",\"orange\",\"brown\"];\n\nnew Chart(\"myChart\", {\ntype: \"bar\",\ndata: {\nlabels: xValues,\ndatasets: [{\nbackgroundColor: barColors,\ndata: yValues\n}]\n},\noptions: {...}\n});",
        "const barColors = [\"blue\"];",
        "const barColors = [\n\"rgba(0,0,255,1.0)\",\n\"rgba(0,0,255,0.8)\",\n\"rgba(0,0,255,0.6)\",\n\"rgba(0,0,255,0.4)\",\n\"rgba(0,0,255,0.2)\",\n];",
        "indexAxis: 'y',",
        "new Chart(\"myChart\", {\ntype: \"pie\",\ndata: {\nlabels: xValues,\ndatasets: [{\nbackgroundColor: barColors,\ndata: yValues\n}]\n},\noptions: {\ntitle: {\ndisplay: true,\ntext: \"World Wide Wine Production\"\n}\n}\n});",
        "type: \"doughnut\";",
        "const xyValues = [\n{x:50, y:7},\n{x:60, y:8},\n{x:70, y:8},\n{x:80, y:9},\n{x:90, y:9},\n{x:100, y:9},\n{x:110, y:10},\n{x:120, y:11},\n{x:130, y:14},\n{x:140, y:14},\n{x:150, y:15}\n];\n\nnew Chart(\"myChart\", {\ntype: \"scatter\",\ndata: {\ndatasets: [{\npointRadius: 4,\npointBackgroundColor: \"rgba(0,0,255,1)\",\ndata: xyValues\n}]\n},\noptions:{...}\n});",
        "const xValues = [50,60,70,80,90,100,110,120,130,140,150];\nconst yValues = [7,8,8,9,9,9,10,11,14,14,15];\n\nnew Chart(\"myChart\", {\ntype: \"line\",\ndata: {\nlabels: xValues,\ndatasets: [{\nbackgroundColor:\"rgba(0,0,255,1.0)\",\nborderColor: \"rgba(0,0,255,0.1)\",\ndata: yValues\n}]\n},\noptions:{...}\n});",
        "borderColor: \"rgba(0,0,0,0)\",",
        "const xValues = [100,200,300,400,500,600,700,800,900,1000];\n\nnew Chart(\"myChart\", {\ntype: \"line\",\ndata: {\nlabels: xValues,\ndatasets: [{\ndata: [860,1140,1060,1060,1070,1110,1330,2210,7830,2478],\nborderColor: \"red\",\nfill: false\n},{\ndata: [1600,1700,1700,1900,2000,2700,4000,5000,6000,7000],\nborderColor: \"green\",\nfill: false\n},{\ndata: [300,700,2000,5000,6000,4000,2000,1000,200,100],\nborderColor: \"blue\",\nfill: false\n}]\n},\noptions: {\nlegend: {display: false}\n}\n});",
        "const xValues = [];\nconst yValues = [];\ngenerateData(\"x * 2 + 7\", 0, 10, 0.5);\n\nconst ctx = document.getElementById('myChart');\n\nnew Chart(ctx, {\ntype: \"line\",\ndata: {\nlabels: xValues,\ndatasets: [{\nfill: false,\npointRadius: 1,\nborderColor: \"rgba(255,0,0,0.5)\",\ndata: yValues\n}]\n},\noptions: {...}\n});\n\nfunction generateData(value, i1, i2, step = 1) {\nfor (let x = i1; x <= i2; x += step) {\nyValues.push(eval(value));\nxValues.push(x);\n}\n}",
        "generateData(\"Math.sin(x)\", 0, 10, 0.5);"
      ]
    },
    {
      "title": "Google Chart",
      "summary": "From simple line charts to complex hierarchical tree maps, the Google Chart gallery provides a large number of ready-to-use chart types:\nScatter Chart\nLine Chart\nBar / Column Chart\nArea Chart\nPie Chart\nDonut Chart\nOrg Chart\nMap / Geo Chart\nHow to Use Google Chart?\n1. Add a <div> element (with a unique id) in the HTML where you want to display the chart:\n2. Add a link to the charts loader:\n3. Load the Graph API, and add the function to run when the API is loaded:\nBar Charts\nSource Code\nTry it Yourself »\nPie Charts\nTo convert a Bar Chart to a Pie chart, just replace:\n\ngoogle.visualization.BarChart\n\nwith:\n\ngoogle.visualization.PieChart\nTry it Yourself »\n3D Pie\nTo display the Pie in 3D, just add is3D: true to the options:\nTry it Yourself »\nLine Graph\nSource Code\nTry it Yourself »\nREMOVE ADS\nScatter Plots\nTo scatter plot the same data, change google.visualization to ScatterChart:\nTry it Yourself »",
      "examples": [
        "<div id=\"myChart\" style=\"max-width:700px; height:400px\"></div>",
        "<script src=\"https://www.gstatic.com/charts/loader.js\"></script>",
        "<script>\ngoogle.charts.load('current',{packages:['corechart']});\ngoogle.charts.setOnLoadCallback(drawChart);\n\n// Your Function\nfunction drawChart() {\n...\n}\n</script>",
        "function drawChart() {\n\n// Set Data\nconst data = google.visualization.arrayToDataTable([\n['Contry', 'Mhl'],\n['Italy', 55],\n['France', 49],\n['Spain', 44],\n['USA', 24],\n['Argentina', 15]\n]);\n\n// Set Options\nconst options = {\ntitle: 'World Wide Wine Production'\n};\n\n// Draw\nconst chart = new google.visualization.BarChart(document.getElementById('myChart'));\nchart.draw(data, options);\n\n}",
        "const chart = new google.visualization.PieChart(document.getElementById('myChart'));",
        "const options = {\ntitle: 'World Wide Wine Production',\nis3D: true\n};",
        "function drawChart() {\n// Set Data\nconst data = google.visualization.arrayToDataTable([\n['Price', 'Size'],\n[50,7],[60,8],[70,8],[80,9],[90,9],[100,9],\n[110,10],[120,11],[130,14],[140,14],[150,15]\n]);\n// Set Options\nconst options = {\ntitle: 'House Prices vs Size',\nhAxis: {title: 'Square Meters'},\nvAxis: {title: 'Price in Millions'},\nlegend: 'none'\n};\n// Draw Chart\nconst chart = new google.visualization.LineChart(document.getElementById('myChart'));\nchart.draw(data, options);\n}",
        "const chart = new google.visualization.ScatterChart(document.getElementById('myChart'));"
      ]
    },
    {
      "title": "D3.js",
      "summary": "D3.js is a JavaScript library for manipulating HTML data.\nD3.js is easy to use.\nHow to Use D3.js?\nTo use D3.js in your web page, add a link to the library:\nThis script selects the body element and appends a paragraph with the text \"Hello World!\":\nTry it Yourself »\nScatter Plot\nExample\nTry it Yourself »",
      "examples": [
        "<script src=\"//d3js.org/d3.v3.min.js\"></script>",
        "d3.select(\"body\").append(\"p\").text(\"Hello World!\");",
        "// Set Dimensions\nconst xSize = 500;\nconst ySize = 500;\nconst margin = 40;\nconst xMax = xSize - margin*2;\nconst yMax = ySize - margin*2;\n\n// Create Random Points\nconst numPoints = 100;\nconst data = [];\nfor (let i = 0; i < numPoints; i++) {\ndata.push([Math.random() * xMax, Math.random() * yMax]);\n}\n\n// Append SVG Object to the Page\nconst svg = d3.select(\"#myPlot\")\n.append(\"svg\")\n.append(\"g\")\n.attr(\"transform\",\"translate(\" + margin + \",\" + margin + \")\");\n\n// X Axis\nconst x = d3.scaleLinear()\n.domain([0, 500])\n.range([0, xMax]);\n\nsvg.append(\"g\")\n.attr(\"transform\", \"translate(0,\" + yMax + \")\")\n.call(d3.axisBottom(x));\n\n// Y Axis\nconst y = d3.scaleLinear()\n.domain([0, 500])\n.range([ yMax, 0]);\n\nsvg.append(\"g\")\n.call(d3.axisLeft(y));\n\n// Dots\nsvg.append('g')\n.selectAll(\"dot\")\n.data(data).enter()\n.append(\"circle\")\n.attr(\"cx\", function (d) { return d[0] } )\n.attr(\"cy\", function (d) { return d[1] } )\n.attr(\"r\", 3)\n.style(\"fill\", \"Red\");"
      ]
    },
    {
      "title": "JavaScript Examples",
      "summary": "What can JavaScript do?\nExamples Explained\nWhere to Insert JavaScript\nWhere to Explained\nJavaScript Output\nOutput Explained\nJavaScript Syntax\nSyntax Explained\nREMOVE ADS\nJavaScript Statements\nStatements Explained\nJavaScript Comments\nComments Explained\nJavaScript Variables\nVariables Explained\nJavaScript Arithmetic\nArithmetic Explained\nJavaScript Assignment\nAssignment Explained\nJavaScript String Concatenation\nConcatenation Explained\nJavaScript Data Types\nData types Explained\nJavaScript Objects\nObjects Explained\nJavaScript Functions\nFunctions Explained\nJavaScript Events\nEvents Explained\nJavaScript Strings\nStrings Explained\nJavaScript Numbers\nNumbers Explained\nJavaScript Number Methods\nNumbers Methods Explained\nJavaScript Maths\nMaths Explained\nJavaScript Random\nRandom Explained\nJavaScript Dates\nDates Explained\nJavaScript Arrays\nArrays Explained\nJavaScript Array Methods\nArray Methods Explained\nJavaScript Array Sort\nArray Sort Explained\nJavaScript Array Iteration\nArray Iteration Explained\nJavaScript Type Conversion\nType Conversion Explained\nJavaScript Booleans\nBooleans Explained\nJavaScript Comparisons\nComparisons Explained\nJavaScript Conditionals\nConditionals Explained\nJavaScript Loops\nLoops Explained\nJavaScript Error Handling\nErrors Explained\nJavaScript Regular Expressions\nRegular Expressions Explained\nJavaScript Objects\nObjects Explained\nJavaScript Object Properties\nObject Properties Explained\nJSON Objects\nJSON Object Properties Explained\nJSON Arrays\nJSON Arrays Explained\nJSON Parse\nJSON Parse Explained\nJSON Stringify\nJSON Stringify Explained\nJSON PHP\nJSON PHP Explained\nJSON HTML\nJSON HTML Explained\nJSON JSONP\nJSON JSONP Explained",
      "examples": []
    },
    {
      "title": "JavaScript HTML DOM Examples",
      "summary": "Examples of using JavaScript to access and manipulate DOM objects.\nThe Document Object\nDocument Object Explained\nThe Anchors Collection\nThe Links Collection\nThe Forms Collection\nThe Images Collection\nCSS Manipulation",
      "examples": []
    },
    {
      "title": "JavaScript HTML Input Examples",
      "summary": "Examples of using JavaScript to access and manipulate HTML input objects.\nButton Object\nForm Object\nOption and Select Objects",
      "examples": []
    },
    {
      "title": "JavaScript HTML Objects Examples",
      "summary": "Examples of using JavaScript to access and manipulate HTML objects.\nAnchor Object\nArea Object\nBase Object\nIFrame Object\nImage Object\nTable Objects",
      "examples": []
    },
    {
      "title": "JavaScript HTML DOM Events Examples",
      "summary": "Examples of using JavaScript to react to events\nInput Events\nMouse Events\nClick Events\nLoad Events\nOthers\nExamples explained",
      "examples": []
    },
    {
      "title": "JavaScript Browser Objects Examples",
      "summary": "Examples of using JavaScript to access and manipulate the Browser objects.\nWindow Object\nWindow explained\nScreen Object\nScreen explained\nLocation Object\nLocation explained\nREMOVE ADS\nHistory Object\nHistory explained\nNavigator Object\nNavigator explained\nPopup Boxes\nPopup explained\nTiming\nTiming explained\nCookies\nCookies explained",
      "examples": []
    },
    {
      "title": "JavaScript Online Editor",
      "summary": "JavaScript Editor\nWith our online JavaScript editor, you can edit HTML, CSS and JavaScript code, and view the result in your browser.\nExample\nClick on the \"Try it Yourself\" button to see how it works.\nPublish Your Code\nIf you want to save your HTML, CSS and JavaScript code, and create your own website, check out W3Schools Spaces.\nW3Schools Spaces is a website-building tool that lets you make and share your own website.\nYou can change the website's look and how it works by editing the code right in your web browser.\nIt's easy to use and doesn't require any setup:\nThe code editor is packed with features to help you achieve more:\nTemplates: Start from scratch or use a template\nCloud-based: no installations required. You only need your browser\nTerminal & Log: debug and troubleshoot your code easily\nFile Navigator: switch between files inside the code editor\nAnd much more!\nLearn Faster\nPractice is key to mastering coding, and the best way to put your JavaScript knowledge into practice is by getting practical with code.\nUse W3Schools Spaces to build, test and deploy code.\nThe code editor lets you write and practice different types of computer languages. It includes HTML/CSS/JavaScript, and you can use it for other languages too.\nNew languages are added all the time:\nIf you do not know JavaScript, we suggest that you read our JavaScript Tutorial from scratch.\nBuild Powerful Websites\nYou can also use the code editor in W3School Spaces to build frontend or full-stack websites from scratch.\nOr you can use the 60+ templates available and save time:\nCreate your Spaces account today and explore them all!\nShare It With The World\nHost and publish your websites in no time with W3School Spaces.\nW3Schools subdomain and SSL certificate are included for free with W3School Spaces. An SSL certificate makes your website safe and secure. It also helps people trust your website and makes it easier to find it online.\nWant a custom domain for your website?\nYou can buy a domain or transfer an existing one and connect it to your space.\nHow Does It Work?\nGet started in a few clicks with W3School Spaces.",
      "examples": [
        "let x = 5;\nlet y = 6;\nlet z = x + y;",
        "11"
      ]
    },
    {
      "title": "JavaScript Exercises",
      "summary": "Exercises\nTest your JavaScript skills with exercises from all categories:\nIntroduction\nWhere To\nOutput\nStatements\nSyntax\nComments\nVariables\nLet\nConst\nOperators\nArithmetic Operators\nAssignment Operators\nData Types\nFunctions\nObjects\nObject Properties\nObject Methods\nDisplay Objects\nObject Constructors\nEvents\nStrings\nString Methods\nString Search\nString Templates\nNumbers\nBigInt\nNumber Methods\nNumber Properties\nArrays\nArray Methods\nArray Search\nSorting Arrays\nArray iteration\nArray Const\nDates\nDate Formats\nDate Get Methods\nDate Set Methods\nMath\nMath Random\nBooleans\nComparisons\nIf Else\nSwitch\nFor Loops\nFor In Loops\nFor Of Loops\nWhile Loops\nBreak and Continue\nIterables\nSets\nSet Methods\nMaps\nMap Methods\nTypeOf\nType Conversion\nDestructuring\nBitwise\nRegular Expressions\nOperator Precedence\nError Handling\nScope\nHoisting\nStrict Mode\nThe this Keyword\nArrow Function\nClasses\nModules\nJSON\nDebugging\nHTML DOM\nHTML DOM Methods\nHTML DOM Document\nHTML DOM Elements\nHTML DOM HTML\nHTML DOM Form Validation\nHTML DOM CSS\nHTML DOM Events\nHTML DOM Event Listener\nHTML DOM Navigation\nHTML DOM Nodes\nHTML DOM Collections\nHTML DOM Node List\nLog in to track your progress\nIf you haven't already, sign up to become a W3Schooler, and get points for every exercise you complete.\nAs a logged on W3Schools user you will have access to many features like having your own web page, track your learning progress, receive personal guided paths, and more.\nThe Exercise\nWe have gathered a variety of React exercises from most of the chapters in our JavaScript Tutorial.\nThe exercises are a mix of \"multiple choice\" and \"fill in the blanks\" questions. The answer can be found in the corresponding tutorial chapter. If you're stuck, or answer wrong, you can try again or hit the \"Show Answer\" button to see the correct answer.\nKickstart your career\nGet certified by completing the JavaScript course",
      "examples": []
    },
    {
      "title": "JavaScript Quiz Test",
      "summary": "You can test your JavaScript skills with W3Schools' Quiz.\nThe Test\nThe test contains 25 questions and there is no time limit.\nThe test is not official, it's just a nice way to see how much you know, or don't know, about JavaScript.\nCount Your Score\nYou will get 1 point for each correct answer. At the end of the Quiz, your total score will be displayed. Maximum score is 25 points.\nStart the Quiz\nGood luck!\nStart the JavaScript Quiz ❯\nIf you don't know JavaScript, we suggest that you read our JavaScript Tutorial from scratch.\nKickstart your career\nGet certified by completing the JavaScript course",
      "examples": []
    },
    {
      "title": "JavaScript and HTML Website Hosting Create Website with HTML and JavaScript Powerful Code Editor Practice Makes Perfect kAI",
      "summary": "Coding Skills\nAI Tutor\nProjects\nSecurely\nChoose your Plan\nBy subscribing to a plan you support the W3Schools mission to make\nlearning available to everyone - no matter their background.\n$0 /Forever\nThis is for you that are beginning to explore coding and web development\nTrack your progress\nSet your goals\nBuild and host 1 static website\n100 credits/month\nAccess various AI features like W3Schools kAI coding tutor and interview preparation.\nNo support\n$14.99 /Month\nThis is for you that want to learn and reach your goals faster. Build fullstack projects, ad free experience.\nAd-free experience\nUnlimited challenges\nUnlimited practice tests\nBuild and host 15 static websites\nBuild and host 1 full stack server\nChoose from 75+ templates\n10000 credits/month\nAccess various AI features like W3Schools kAI coding tutor and interview preparation.\nCancel anytime\nFor teachers\nSpend less time on admin tasks while engaging your students. Help them learn, practice and collaborate. All in one place.\nAd-free for focused learning\nDashboard to manage your classroom\nStudy plans for structured learning\nTrack progress with insights\nInteractive code challenges and projects\nAccess to all courses and certification exams\nSpaces for building and publishing projects\n25% OFF\nYou can also buy a domain or connect an existing one.\nSave Time with Templates\nJust landed in Spaces\nLearn to code more effectively\nand intelligently with kAI - AI tutor\nHi! I'm kAI, W3Schools AI Tutor...\nFeel free to ask me any coding-related questions, and I'll do my best to assist you.\nI can help you checking your code for errors, improving your code's structure, explaining coding concepts in a clear and understandable way, and more...\nI can even create complete websites for you based on your input, so what are you waiting for?\nSuper Simple to Share\nIncluded for free in all plans\nWant custom domains?\nHow it works\nCoding Made Easy\nCloud-based\nTerminal & Log\nHow To Libraries\nDatabase\nFile Navigator\nPackage Manager\nAnalytics\nEnvironment Manager\nSave Time & Money.\nAll Your Files in One Place.\nFix Your Code Faster.\nGet Full Data Visibility.\nIncreased Control and Security.\nFind What You Need Quicker.\nGet Traffic Insights.\nGet Inspired\nFrequently Asked Questions\nWith Basic Spaces, you can build frontend websites. Whereas with Fullstack Spaces, you can build frontend and backend websites.\nBasic Spaces include HTML, CSS, and Javascript. Full Stack Spaces include everything in Basic Spaces plus PHP, Python, React.js, Vue.js, Node.js, Handlebars, and Django.\nYour subscription will be automatically renewed every month.\nYour access to all the benefits for the paid period of time will continue. However, the subscription will not be renewed automatically.\nTo subscribe W3Schools accounts for multiple users, you can contact sales@w3schools.com",
      "examples": []
    },
    {
      "title": "JavaScript Syllabus",
      "summary": "Introduction\nThe W3Schools JavaScript Tutorial is comprehensive and beginner-friendly.\nIt will give you a fundamental knowledge of JavaScript.\nIt is designed for beginners and requires no prior experience with programming.\nThe content has been carefully made to be bite-sized, simple, and easy to understand.\nThe content has been proven by millions of users over the years. It is updated and improved frequently.\nThe syllabus outline and its sequence are structured so you can learn JavaScript step by step, from the introduction to creating your first application with JavaScript.\nGet Started With JavaScript »\nLearning Outcomes\nLearn how JavaScript works and how it is used in web development.\nMake web pages interactive by typing and running JavaScript code.\nUse variables to store and change data.\nUse data types and operators to do logic and calculations.\nOrganize and reuse code by functions.\nConditions, like \"if\" and \"else,\" let you control how a program runs. Learn how to use them.\nUse loops (like for and while) to do things over and over again.\nLearn how to use Document Object Model (DOM) to change HTML elements.\nMake interactive user experiences by handling events like button clicks and form submissions.\nDebugging JavaScript code.\nNote: Are you a teacher teaching JavaScript? W3Schools Academy is a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more about Academy here.\nWhich Subjects Are JavaScript Relevant For?\nComputer Science (CS) / Information Technology (IT):\nJavaScript is a fundamental programming language used to teach coding, algorithms, and how to make websites that people can interact with.\nMath:\nJavaScript can be used for mathematical operations and algorithms. It can help you develop logical thinking and problem-solving skills.\nPhysics and Engineering:\nJavaScript can be used for simulations and modeling to help you understand advanced concepts and engineering problems better.\nDigital Media:\nJavaScript is used to make websites interactive, making your digital projects more relevant and interesting.\nBusiness and Entrepreneurship:\nJavaScript makes your web applications, prototypes, and digital presentations interactive.\nArt and Design:\nJavaScript lets you make animations, interactive graphs, and can be used for generative art.\nSTEM (Science, Technology, Engineering, Mathematics):\nJavaScript as a programming language can be an important part of technology-based projects because it teaches students about logic, automation, and how to use code in the real world.\nRobotics and the Internet of Things (IoT):\nJavaScript is used by some platforms to program robots and IoT devices.\nGet Started\nActivities\nIn this tutorial we offer different activities for you to learn JavaScript for free:\nLessons\nExercises\nQuizzes\nSign in to Track Progress\nYou can also create a free account to track your progress.\nAs a signed-in user, you get access to features such as:\nLearning paths\nSandbox and lab environments\nAchievements\nAnd much more!\nSign Up - It's free\nOverview of the Modules\nJavaScript HOME\nJavaScript Introduction\nJavaScript Where To\nJavaScript Output\nJavaScript Statements\nJavaScript Syntax\nJavaScript Comments\nJavaScript Variables\nJavaScript Let\nJavaScript Const\nJavaScript Operators\nJavaScript Arithmetic\nJavaScript Assignment\nJavaScript Data Types\nJavaScript Functions\nJavaScript Objects\nJavaScript Events\nJavaScript Strings\nJavaScript String Methods\nJavaScript String Search\nJavaScript String Templates\nJavaScript Numbers\nJavaScript BigInt\nJavaScript Number Methods\nJavaScript Number Properties\nJavaScript Arrays\nJavaScript Array Methods\nJavaScript Array Search\nJavaScript Array Sort\nJavaScript Array Iteration\nJavaScript Array Const\nJavaScript Dates\nJavaScript Date Formats\nJavaScript Date Methods\nJavaScript Set Methods\nJavaScript Math\nJavaScript Random\nJavaScript Booleans\nJavaScript Comparisons\nJavaScript If Else\nJavaScript Switch\nJavaScript For Loop\nJavaScript For In\nJavaScript For Of\nJavaScript While Loop\nJavaScript Break and Continue\nJavaScript Iterables\nJavaScript Sets\nJavaScript Set Methods\nJavaScript Maps\nJavaScript Map Methods\nJavaScript typeof\nJavaScript Type Conversion\nJavaScript Destructing\nJavaScript Bitwise\nJavaScript RegExp\nJavaScript Precedence\nJavaScript Errors\nJavaScript Scope\nJavaScript Hoisting\nJavaScript Strict Mode\nJavaScript this Keyword\nJavaScript Arrow Function\nJavaScript Classes\nJavaScript Modules\nJavaScript JSON\nJavaScript Debugging\nJavaScript Style Guide\nJavaScript Best Practices\nJavaScript Mistakes\nJavaScript Performance\nJavaScript Reserved Words\nJavaScript Versions\nJavaScript Objects\nJavaScript Functions\nJavaScript Classes\nJavaScript Async\nJavaScript HTML DOM\nJavaScript Browser DOM\nJavaScript Web APIs\nJavaScript AJAX\nJavaScript JSON\nJavaScript vs. jQuery\nJavaScript Graphics\nGet Started\nSandbox and Lab Environment\nJavaScript, like any other programming language, is best learned by working hands-on with code.\nEasily try code with our \"Try it Yourself\" editor.\nHere, you can edit JavaScript code and view the result:\nExample\nIf you want to explore more and host your JavaScript project, we have a feature called Spaces that allows you to build, test and deploy static websites for free.\nHere you get a secure sandbox environment called Spaces, where you can practice coding and test projects in real-time.\nSpaces allow you to test, build, and deploy code. This includes a W3Schools subdomain, hosting, and secure SSL certificates.\nSpaces require no installation and run directly in the browser.\nFeatures include:\nCollaboration\nFile navigator\nTerminal & log\nPackage manager\nDatabase\nEnvironment manager\nAnalytics\nCreate a Spaces Account\nJavaScript Certification\nW3Schools offers an end-of-pathway certification program.\nHere you can take exams to get certified.\nThe JavaScript exam is a test that summarizes the W3Schools JavaScript syllabus.\nAfter passing the exam you get the \"Certified JavaScript Developer\" Certification.\nThere are two different types of certifications:\nNon-adaptive\nAdaptive\nThe non-adaptive is pass or no pass.\nThe adaptive certification is adaptive and graded; students will get a grade from intermediate, advanced to professional.\nBuy Certificate »\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach JavaScript?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo »",
      "examples": [
        "document.getElementById(\"demo\").innerHTML = \"Hello JavaScript\";"
      ]
    },
    {
      "title": "JavaScript Study Plan",
      "summary": "Introduction\nThe JavaScript study plan helps you teach your students JavaScript step-by-step.\nCreating a study plan for JavaScript is easy.\nYou can use a pre-built study plan or customize it.\nStudents have different skill levels. The study plans can be customized to ensure that everyone is challenged.\nSave time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of JavaScript to the final exam.\nW3Schools Academy\nThis study plan is a feature of W3Schools Academy.\nW3Schools Academy is a platform that has everything you need to teach coding, all in one place.\nIt offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom.\nYou need to have an active subscription to access the study plan feature. There are two different subscription tiers:\nEssentials ($1.99 / month per student)\nFull Access ($5.99 / month per student)\nCalculate your price and order here.\nLearn More »\nAcademy also offer other features such as:\nManaging your classroom\nTracking of student progress and reports\nLabs, assignments, and code challenges (prebuilt challenges or create your own ones)\nAuto-grading\nTeaching materials\nCertification exams\nGet a free demo »\nTeacher Materials\nW3Schools has everything you need to teach JavaScript.\nThe JavaScript training materials is available for you to include and use in your study plan:\nW3Schools JavaScript Tutorial\nJavaScript Exercises\nJavaScript Quiz\nJavaScript Challenges (Coding challenges)\nJavaScript Certification Exam (End of Pathway Exam)\nJavaScript Syllabus\nWith the JavaScript Syllabus, your students will start with the basics, like creating simple web pages, and move to more advanced topics, like adding images, links, and forms. Each chapter has examples, try-its, exercises, and quizzes to make learning easy, interactive and fun.\nRead more about JavaScript Syllabus.\nStudy Plan Overview\nThe study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level.\nLearning Paths\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nInteractive Content\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTimeline and Pace\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nTrack Student Progress\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nEnd of Pathway Exam\nThe JavaScript study plan aligns with the JavaScript Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the JavaScript Tutorial.\nYou get reports of the students' results.\nThe JavaScript study plan aligns with the JavaScript Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the JavaScript Tutorial.\nYou get reports of the students' results.\nAccessibility\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nLearn More »\nSample Study Plan\nYou choose the timeline and pace of your study plans.\nSchools have different preferences.\nSome would like more intensive pace, e.g. 5 weeks, others 12 or more weeks.\nIt is completely up to you.\nFor example, this is how a 5-week JavaScript study plan could look like:\nWeek 1: Introduction, Variables, Let, Const & Data Types, Booleans, Numbers\nWeek 2: Operators, Assignment, Arithmetic Operators, Assignment, Arithmetic and Math, Strings, Dates, Arrays, Events, Precidence & Conditionals, Loops & Iterables\nWeek 3: Maps & Sets, Typeof & Type Conversion, Destructing, Scope, Hoisting & this keyword, Functions, Miscellaneous, Versions, Errors, Debugging & Coding Best Practices\nWeek 4: Objects, Modules, Classes, Async, HTML DOM, Browser DOM, Web APIs, AJAX, JSON, JS vs jQuery\nWeek 5: Graphics, JavaScript Certification Exam\nImage of Sample JavaScript study plan:\nReady to get started?\nStart with JavaScript Study Plans today.\nGet Started »\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach JavaScript programming?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo »",
      "examples": []
    },
    {
      "title": "JavaScript Interview Preparation",
      "summary": "Try W3Schools' comprehensive Front-End interview preparation feature.\nA tool that will help you get ready for your next interview.\nW3Schools interview preparation is an interactive feature powered by AI, where you can select the role of the interviewer, ask questions, and receive guidance.\nAfter the interview training you will get an evaluation of your performance that you can use to improve yourself.\nGet Started\nWhat to expect in a Front-End interview\nIf you are going to a Front-End interview, there are a few things you can expect:\nCoding Questions:\nYou will be asked coding questions, and you possibly also get a task to solve.\nExamples of technical questions:\nTell me about your experience as a Front-End developer.\nTell me about a personal project where you worked on implementing the user interface for a website.\nExamples of a task:\nCreate a webpage that shows a greeting message to the user.\nUse HTML and CSS to structure and style it. You can add a JavaScript function to change the message based on the time of the day.\nIf you don't know how to solve the task or answer the question, do not panic. It happens to everyone, even pro Front-End developers.\nShowcase your skills and projects:\nThey would like to see projects to understand your work better.\nYou can include current projects in your portfolio even if they are unfinished.\nExamples of projects to have in your portfolio:\nTo-do list app\nBlog template\nWeather dashboard\nE-commerce product page\nInteractive game or application\nREMOVE ADS\nWhat to do before the interview\nBefore you go to an interview, you should check out the company.\nIt will give you a better understanding of their values and what they do.\nCheck out:\nTheir webpage\nTheir social media platforms\nArticles and reviews\nMake sure you understand the job description:\nRead the description and take notes if you need help understanding something. You can call them before the interview and ask about the things you don't understand.\nYou can also ask a friend or a community member to help you.\nThere is a big community of Front-End developers on social media.\nReflect on why you are the right fit for this role:\nCompanies hire people they believe will be the right fit.\nThink about what value you can add to the role and the team.\nWrite them down.\nIt will help you discuss how you are the right candidate for the role.\nWe have created an interview tool to help you prepare:\nTry it out\nWhat is Front-End Development?\nFront-End development is an exciting career that allows you to create dynamic and responsive websites and apps. It's a good choice if you're interested in good user engagement and experience.\nTypical Languages Used in Front-End Development:\nHTML\nCSS\nJavaScript\nReact.js\nBootstrap\nand other CSS frameworks\nCareer Outlook\nThe demand for Front-End developers is high.\nYou can expect:\nCompetitive salary\nPossibility of working remotely\nOpportunity to grow as the industry innovates and adopts new technologies.\nThe Average Salary is $112,328 in the US.\nTypical Job Titles for a Front-End Developer:\nFront-End developer\nWeb Developer\nUI/UX Designer\nWeb App Developer\nand many more.\nTry W3Schools Pathfinder Jobs, where companies post in-demand job roles such as Front-End development, web development, Java development, and more.\nOur best tip: Prepare yourself so you can go in with confidence and enjoy the process!\nTry W3Schools interview preparation here: Interview Preperation\nBest of luck!",
      "examples": [
        "<head>\n<title>Simple Greeting Page</title>\n<style>\nbody {\nfont-family: Arial, sans-serif;\nbackground-color: #f0f0f0;\ncolor: #333;\npadding: 20px;\n}\n</style>\n</head>\n<body>\n\n<h1>Hello, welcome to our website!</h1>\n\n</body>\n</html>"
      ]
    },
    {
      "title": "W3Schools JavaScript Bootcamp JavaScript Bootcamp",
      "summary": "Learn More\nWhat You Will Learn\nHTML\nHow to use the latest HTML 5 standard to create your own Website.\nHow to format text, add graphics, create links, input forms, frames and tables, etc.\nHow to save it all in a text file that any browser can read and display.\nCSS\nHow to control the style and layout of multiple web pages all at once.\nHow to change the appearance and layout of all the pages in a Web site.\nJavaScript\nHow to program the behavior of web pages.\nHow to change the content and style of web pages.\nSelf-paced Courses\nStart learning Front-end with the W3Schools program and lay the foundations of your Web Development skills. This program is a great foundation for you that wants to get started with Front-end Development. It covers HTML, CSS and JavaScript.\nHTML is the standard markup language for Web pages. With HTML you can create your own Website.\nCSS is the language we use to style an HTML document. CSS describes how HTML elements should be displayed.\nJavaScript is the programming language of the Web.\nThis is a structured and interactive version of the w3schools HTML, CSS, and JavaScript Tutorials together with the W3schools certification.\nThe program is a set of self-paced courses with text based modules, practical interactive examples and exercises to check your understanding as you progress. Complete the modules and the final certification exams to get the w3schools certification.\nWhat You Get\n4x Certifications:\nCertified HTML Developer\nCertified CSS Developer\nCertified JavaScript Developer\nCertified Front End Developer\nCertificate of Completion\nYou get sharable certificates that can be added to your CV, Resume or LinkedIn.\nCheck out what it looks like in this example!\nThree Reasons to Join the Program\nLearn More\nHow it Works\nStep 1. Course enrollment\nEnroll by paying the enrollment fee and gain access to the course and final exam. There is no deadline to take the exam. All questions in the exam are based on W3Schools content.\nStep 2. Complete the course learning modules\nThe courses are self-paced with text based modules, practical interactive examples and exercises to check your understanding as you progress. Complete the learning modules to unlock the final exam.\nStep 3. Take the exams\nThe exams are taken at the end of each course after finishing the course learning modules. Immediately after completing the exam, you will be informed of your score and of your pass/fail status. You will get three attempts to pass each exam. You can use the new attempts to improve your score. The best result of the attempts will count.\nStep 4: Become certified\nPass the exams and get your certifications and your Certified Developer titles! Each certificate gets a unique link that can be shared with others. Validate your certificates with a link or a QR code.\nLearn More",
      "examples": []
    },
    {
      "title": "W3Schools JavaScript Certificate",
      "summary": "W3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nW3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nWho Should Consider Getting Certified?\nAny student or professional within the digital industry.\nCertifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market.\nW3Schools is Trusted by Top Companies\nW3Schools has over two decades of experience with teaching coding online.\nOur certificates are recognized and valued by companies looking to employ skilled developers.\nSave Time and Money\nShow the world your coding skills by getting a certification.\nThe prices is a small fraction compared to the price of traditional education.\nDocument and validate your competence by getting certified!\nExam overview\nFee: 95 USD\nAchievable certification levels:\nIntermediate (40%)\nAdvanced (75%)\nProfessional (90%)\nNumber of questions:\nAdaptive, 60 on average\nRequirement to pass:\nMinimum 40% - Intermediate level\nTime limit: 60 minutes\nNumber of attempts to pass: 3\nExam deadline: None\nCertification Expiration: None\nFormat: Online, multiple choice\nRegister now »\nAdvance Faster in Your Career\nGetting a certificate proves your commitment to upgrading your skills.\nThe certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on.\nIt gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nKnowledge is power, especially in the current job market.\nDocumentation of your skills enables you to advance your career or helps you to start a new one.\nHow Does It Work?\nStudy for free at W3Schools.com\nStudy at your own speed\nTest your skills with W3Schools online quizzes\nApply for your certificate by paying an exam fee\nTake your exam online, at any time, and from any location\nGet Your Certificate and Share It With The World\nExample certificate:\nEach certificate gets a unique link that can be shared with others.\nValidate your certification with the link or QR code.\nCheck how it looks like in this Example.\nShare your certificate on Linked in the Certifications section in just one click!\nDocument Your Skills\nGetting a certificate proves your commitment to upgrade your skills, gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nGet Your Certificate »\nLooking to add multiple users?\nAre you an educator, manager or business owner looking for courses or certifications?\nWe are working with schools, companies and organizations from all over the world.\nGet courses and/or certifications for your team here.",
      "examples": []
    },
    {
      "title": "JavaScript and HTML DOM",
      "summary": "Complete JavaScript and HTML DOM References\nAll Properties and Methods with Full Examples\nJavaScript Objects with Examples\nWindow Objects with Examples\nHTML DOM Objects with Examples\nWeb APIs with Examples\nHTML Elements with Examples\nOther\nJavaScript Tutorial\nVisit Our JavaScript Tutorial »",
      "examples": []
    }
  ],
  "glossary": [
    "ajax applications",
    "ajax asp",
    "ajax database",
    "ajax php",
    "ajax request",
    "ajax response",
    "ajax xmlhttp",
    "backend",
    "basic javascript",
    "dom animations",
    "dom collections",
    "dom css",
    "dom document",
    "dom elements",
    "dom events",
    "dom forms",
    "dom html",
    "dom methods",
    "dom navigation",
    "dom nodes",
    "exercises",
    "free",
    "function apply",
    "function arrows",
    "function bind",
    "function call",
    "function closures",
    "function invocation",
    "function parameters",
    "javascript",
    "javascript json",
    "jquery css",
    "jquery dom",
    "jquery html",
    "js 2016",
    "js 2017",
    "js 2018",
    "js 2019",
    "js 2020",
    "js 2021",
    "js 2022",
    "js 2023",
    "js 2024",
    "js 2025",
    "js advanced",
    "js ajax",
    "js arithmetic",
    "js arrays",
    "js assignment",
    "js asynchronous",
    "js bigint",
    "js bitwise",
    "js booleans",
    "js bootcamp",
    "js break",
    "js browser",
    "js canvas",
    "js chart.js",
    "js classes",
    "js comments",
    "js comparisons",
    "js const",
    "js continue",
    "js cookies",
    "js d3.js",
    "js dates",
    "js debugging",
    "js editor",
    "js errors",
    "js events",
    "js exercises",
    "js functions",
    "js generators",
    "js graphics",
    "js history",
    "js hoisting",
    "js if",
    "js iterables",
    "js iterations",
    "js iterators",
    "js jquery",
    "js json",
    "js let",
    "js location",
    "js logical",
    "js loops",
    "js maps",
    "js math",
    "js mistakes",
    "js modules",
    "js navigator",
    "js numbers",
    "js objects",
    "js operators",
    "js output",
    "js performance",
    "js plotly",
    "js programming",
    "js promises",
    "js quiz",
    "js random",
    "js references",
    "js regexp",
    "js scope",
    "js screen",
    "js sets",
    "js statements",
    "js strings",
    "js switch",
    "js syllabus",
    "js syntax",
    "js ternary",
    "js timing",
    "js tostring",
    "js typeof",
    "js types",
    "js variables",
    "js versions",
    "js website",
    "js windows",
    "json",
    "json arrays",
    "json html",
    "json jsonp",
    "json objects",
    "json parse",
    "json php",
    "json server",
    "json stringify",
    "json syntax",
    "json.parse",
    "json.stringify",
    "object constructors",
    "object destructuring",
    "object display",
    "object iterations",
    "object management",
    "object methods",
    "object properties",
    "object protection",
    "object prototypes",
    "object reference",
    "programs",
    "receive",
    "report error",
    "send",
    "store data",
    "storing data",
    "w3.css",
    "w3schools spaces",
    "why json"
  ]
}