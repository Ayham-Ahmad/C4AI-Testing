{
  "course_name": "Pandas",
  "description": "Pandas is a Python library. Pandas is used to analyze data. We have created 14 tutorial pages for you to learn more about Pandas. Starting with a basic introduction and ends up with cleaning and plotting data: In our \"Try it Yourself\" editor, you can use the Pandas module, and modify the code to see the result. Load a CSV file into a Pandas DataFrame: Click on the \"Try it Yourself\" button to see how it works. Most chapters in this tutorial end with an exercise where you can check your level of knowledge. See all Pandas Exercises Test your Pandas skills with a quiz test. Start Pandas Quiz",
  "course_summary": [
    {
      "title": "Pandas Introduction",
      "summary": "What is Pandas?\nPandas is a Python library used for working with data sets.\nIt has functions for analyzing, cleaning, exploring, and manipulating data.\nThe name \"Pandas\" has a reference to both \"Panel Data\", and \"Python Data Analysis\" and was created by Wes McKinney in 2008.\nWhy Use Pandas?\nPandas allows us to analyze big data and make conclusions based on statistical theories.\nPandas can clean messy data sets, and make them readable and relevant.\nRelevant data is very important in data science.\nData Science: is a branch of computer science where we study how to store, use and analyze data for deriving information from it.\nWhat Can Pandas Do?\nPandas gives you answers about the data. Like:\nIs there a correlation between two or more columns?\nWhat is average value?\nMax value?\nMin value?\nPandas are also able to delete rows that are not relevant, or contains wrong values, like empty or NULL values. This is called cleaning the data.\nWhere is the Pandas Codebase?\nThe source code for Pandas is located at this github repository https://github.com/pandas-dev/pandas\ngithub: enables many people to work on the same codebase.",
      "examples": []
    },
    {
      "title": "Pandas Getting Started",
      "summary": "Installation of Pandas\nIf you have Python and PIP already installed on a system, then installation of Pandas is very easy.\nInstall it using this command:\nIf this command fails, then use a python distribution that already has Pandas installed like, Anaconda, Spyder etc.\nImport Pandas\nOnce Pandas is installed, import it in your applications by adding the import keyword:\nNow Pandas is imported and ready to use.\nExampleGet your own Python Server\nREMOVE ADS\nPandas as pd\nPandas is usually imported under the pd alias.\nalias: In Python alias are an alternate name for referring to the same thing.\nCreate an alias with the as keyword while importing:\nNow the Pandas package can be referred to as pd instead of pandas.\nExample\nChecking Pandas Version\nThe version string is stored under __version__ attribute.\nExample",
      "examples": [
        "C:\\Users\\Your Name>pip install pandas",
        "import pandas",
        "import pandas\n\nmydataset = {\n'cars': [\"BMW\", \"Volvo\", \"Ford\"],\n'passings': [3, 7, 2]\n}\n\nmyvar = pandas.DataFrame(mydataset)\n\nprint(myvar)",
        "import pandas as pd",
        "import pandas as pd\n\nmydataset = {\n'cars': [\"BMW\", \"Volvo\", \"Ford\"],\n'passings': [3, 7, 2]\n}\n\nmyvar = pd.DataFrame(mydataset)\n\nprint(myvar)",
        "import pandas as pd\n\nprint(pd.__version__)",
        "import",
        "pd",
        "as",
        "pandas",
        "__version__"
      ]
    },
    {
      "title": "Pandas Series",
      "summary": "What is a Series?\nA Pandas Series is like a column in a table.\nIt is a one-dimensional array holding data of any type.\nExampleGet your own Python Server\nCreate a simple Pandas Series from a list:\nLabels\nIf nothing else is specified, the values are labeled with their index number. First value has index 0, second value has index 1 etc.\nThis label can be used to access a specified value.\nExample\nReturn the first value of the Series:\nCreate Labels\nWith the index argument, you can name your own labels.\nExample\nCreate your own labels:\nWhen you have created labels, you can access an item by referring to the label.\nExample\nReturn the value of \"y\":\nREMOVE ADS\nKey/Value Objects as Series\nYou can also use a key/value object, like a dictionary, when creating a Series.\nExample\nCreate a simple Pandas Series from a dictionary:\nNote: The keys of the dictionary become the labels.\nTo select only some of the items in the dictionary, use the index argument and specify only the items you want to include in the Series.\nExample\nCreate a Series using only data from \"day1\" and \"day2\":\nDataFrames\nData sets in Pandas are usually multi-dimensional tables, called DataFrames.\nSeries is like a column, a DataFrame is the whole table.\nExample\nCreate a DataFrame from two Series:\nYou will learn about DataFrames in the next chapter.",
      "examples": [
        "import pandas as pd\n\na = [1, 7, 2]\n\nmyvar = pd.Series(a)\n\nprint(myvar)",
        "print(myvar[0])",
        "import pandas as pd\n\na = [1, 7, 2]\n\nmyvar = pd.Series(a, index = [\"x\", \"y\", \"z\"])\n\nprint(myvar)",
        "print(myvar[\"y\"])",
        "import pandas as pd\n\ncalories = {\"day1\": 420, \"day2\": 380, \"day3\": 390}\n\nmyvar = pd.Series(calories)\n\nprint(myvar)",
        "import pandas as pd\n\ncalories = {\"day1\": 420, \"day2\": 380, \"day3\": 390}\n\nmyvar = pd.Series(calories, index = [\"day1\", \"day2\"])\n\nprint(myvar)",
        "import pandas as pd\n\ndata = {\n\"calories\": [420, 380, 390],\n\"duration\": [50, 40, 45]\n}\n\nmyvar = pd.DataFrame(data)\n\nprint(myvar)",
        "index"
      ]
    },
    {
      "title": "Pandas DataFrames",
      "summary": "What is a DataFrame?\nA Pandas DataFrame is a 2 dimensional data structure, like a 2 dimensional array, or a table with rows and columns.\nExampleGet your own Python Server\nCreate a simple Pandas DataFrame:\nResult\nLocate Row\nAs you can see from the result above, the DataFrame is like a table with rows and columns.\nPandas use the loc attribute to return one or more specified row(s)\nExample\nReturn row 0:\nResult\nNote: This example returns a Pandas Series.\nExample\nReturn row 0 and 1:\nResult\nNote: When using [], the result is a Pandas DataFrame.\nREMOVE ADS\nNamed Indexes\nWith the index argument, you can name your own indexes.\nExample\nAdd a list of names to give each row a name:\nResult\nLocate Named Indexes\nUse the named index in the loc attribute to return the specified row(s).\nExample\nReturn \"day2\":\nResult\nLoad Files Into a DataFrame\nIf your data sets are stored in a file, Pandas can load them into a DataFrame.\nExample\nLoad a comma separated file (CSV file) into a DataFrame:\nYou will learn more about importing files in the next chapters.",
      "examples": [
        "calories duration 0 420 50 1 380 40 2 390 45",
        "calories 420 duration 50 Name: 0, dtype: int64",
        "calories duration 0 420 50 1 380 40",
        "calories duration day1 420 50 day2 380 40 day3 390 45",
        "calories 380 duration 40 Name: day2, dtype: int64",
        "import pandas as pd\n\ndata = {\n\"calories\": [420, 380, 390],\n\"duration\": [50, 40, 45]\n}\n\n#load data into a DataFrame object:\ndf = pd.DataFrame(data)\n\nprint(df)",
        "#refer to the row index:\nprint(df.loc[0])",
        "#use a list of indexes:\nprint(df.loc[[0, 1]])",
        "import pandas as pd\n\ndata = {\n\"calories\": [420, 380, 390],\n\"duration\": [50, 40, 45]\n}\n\ndf = pd.DataFrame(data, index = [\"day1\", \"day2\", \"day3\"])\n\nprint(df)",
        "#refer to the named index:\nprint(df.loc[\"day2\"])",
        "import pandas as pd\n\ndf = pd.read_csv('data.csv')\n\nprint(df)",
        "loc",
        "[]",
        "index"
      ]
    },
    {
      "title": "Pandas Read CSV",
      "summary": "Read CSV Files\nA simple way to store big data sets is to use CSV files (comma separated files).\nCSV files contains plain text and is a well know format that can be read by everyone including Pandas.\nIn our examples we will be using a CSV file called 'data.csv'.\nDownload data.csv. or Open data.csv\nExampleGet your own Python Server\nLoad the CSV into a DataFrame:\nTip: use to_string() to print the entire DataFrame.\nIf you have a large DataFrame with many rows, Pandas will only return the first 5 rows, and the last 5 rows:\nExample\nPrint the DataFrame without the to_string() method:\nmax_rows\nThe number of rows returned is defined in Pandas option settings.\nYou can check your system's maximum rows with the pd.options.display.max_rows statement.\nExample\nCheck the number of maximum returned rows:\nIn my system the number is 60, which means that if the DataFrame contains more than 60 rows, the print(df) statement will return only the headers and the first and last 5 rows.\nYou can change the maximum rows number with the same statement.\nExample\nIncrease the maximum number of rows to display the entire DataFrame:",
      "examples": [
        "import pandas as pd\n\ndf = pd.read_csv('data.csv')\n\nprint(df.to_string())",
        "import pandas as pd\n\ndf = pd.read_csv('data.csv')\n\nprint(df)",
        "import pandas as pd\n\nprint(pd.options.display.max_rows)",
        "import pandas as pd\n\npd.options.display.max_rows = 9999\n\ndf = pd.read_csv('data.csv')\n\nprint(df)",
        "to_string()",
        "pd.options.display.max_rows",
        "print(df)"
      ]
    },
    {
      "title": "Pandas Read JSON",
      "summary": "Read JSON\nBig data sets are often stored, or extracted as JSON.\nJSON is plain text, but has the format of an object, and is well known in the world of programming, including Pandas.\nIn our examples we will be using a JSON file called 'data.json'.\nOpen data.json.\nExampleGet your own Python Server\nLoad the JSON file into a DataFrame:\nTip: use to_string() to print the entire DataFrame.\nDictionary as JSON\nJSON = Python Dictionary\nJSON objects have the same format as Python dictionaries.\nIf your JSON code is not in a file, but in a Python Dictionary, you can load it into a DataFrame directly:\nExample\nLoad a Python Dictionary into a DataFrame:",
      "examples": [
        "import pandas as pd\n\ndf = pd.read_json('data.json')\n\nprint(df.to_string())",
        "import pandas as pd\n\ndata = {\n\"Duration\":{\n\"0\":60,\n\"1\":60,\n\"2\":60,\n\"3\":45,\n\"4\":45,\n\"5\":60\n},\n\"Pulse\":{\n\"0\":110,\n\"1\":117,\n\"2\":103,\n\"3\":109,\n\"4\":117,\n\"5\":102\n},\n\"Maxpulse\":{\n\"0\":130,\n\"1\":145,\n\"2\":135,\n\"3\":175,\n\"4\":148,\n\"5\":127\n},\n\"Calories\":{\n\"0\":409,\n\"1\":479,\n\"2\":340,\n\"3\":282,\n\"4\":406,\n\"5\":300\n}\n}\n\ndf = pd.DataFrame(data)\n\nprint(df)",
        "to_string()"
      ]
    },
    {
      "title": "Pandas - Analyzing DataFrames",
      "summary": "Viewing the Data\nOne of the most used method for getting a quick overview of the DataFrame, is the head() method.\nThe head() method returns the headers and a specified number of rows, starting from the top.\nExampleGet your own Python Server\nGet a quick overview by printing the first 10 rows of the DataFrame:\nIn our examples we will be using a CSV file called 'data.csv'.\nDownload data.csv, or open data.csv in your browser.\nNote: if the number of rows is not specified, the head() method will return the top 5 rows.\nExample\nPrint the first 5 rows of the DataFrame:\nThere is also a tail() method for viewing the last rows of the DataFrame.\nThe tail() method returns the headers and a specified number of rows, starting from the bottom.\nExample\nPrint the last 5 rows of the DataFrame:\nREMOVE ADS\nInfo About the Data\nThe DataFrames object has a method called info(), that gives you more information about the data set.\nExample\nPrint information about the data:\nResult\nResult Explained\nThe result tells us there are 169 rows and 4 columns:\nAnd the name of each column, with the data type:\nNull Values\nThe info() method also tells us how many Non-Null values there are present in each column, and in our data set it seems like there are 164 of 169 Non-Null values in the \"Calories\" column.\nWhich means that there are 5 rows with no value at all, in the \"Calories\" column, for whatever reason.\nEmpty values, or Null values, can be bad when analyzing data, and you should consider removing rows with empty values. This is a step towards what is called cleaning data, and you will learn more about that in the next chapters.",
      "examples": [
        "<class 'pandas.core.frame.DataFrame'> RangeIndex: 169 entries, 0 to 168 Data columns (total 4 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 Duration 169 non-null int64 1 Pulse 169 non-null int64 2 Maxpulse 169 non-null int64 3 Calories 164 non-null float64 dtypes: float64(1), int64(3) memory usage: 5.4 KB None",
        "import pandas as pd\n\ndf = pd.read_csv('data.csv')\n\nprint(df.head(10))",
        "import pandas as pd\n\ndf = pd.read_csv('data.csv')\n\nprint(df.head())",
        "print(df.tail())",
        "print(df.info())",
        "RangeIndex: 169 entries, 0 to 168 Data columns (total 4 columns):",
        "# Column Non-Null Count Dtype --- ------ -------------- ----- 0 Duration 169 non-null int64 1 Pulse 169 non-null int64 2 Maxpulse 169 non-null int64 3 Calories 164 non-null float64",
        "head()",
        "tail()",
        "info()"
      ]
    },
    {
      "title": "Pandas - Cleaning Data",
      "summary": "Data Cleaning\nData cleaning means fixing bad data in your data set.\nBad data could be:\nEmpty cells\nData in wrong format\nWrong data\nDuplicates\nIn this tutorial you will learn how to deal with all of them.\nOur Data Set\nIn the next chapters we will use this data set:\nThe data set contains some empty cells (\"Date\" in row 22, and \"Calories\" in row 18 and 28).\nThe data set contains wrong format (\"Date\" in row 26).\nThe data set contains wrong data (\"Duration\" in row 7).\nThe data set contains duplicates (row 11 and 12).",
      "examples": [
        "Duration Date Pulse Maxpulse Calories 0 60 '2020/12/01' 110 130 409.1 1 60 '2020/12/02' 117 145 479.0 2 60 '2020/12/03' 103 135 340.0 3 45 '2020/12/04' 109 175 282.4 4 45 '2020/12/05' 117 148 406.0 5 60 '2020/12/06' 102 127 300.0 6 60 '2020/12/07' 110 136 374.0 7 450 '2020/12/08' 104 134 253.3 8 30 '2020/12/09' 109 133 195.1 9 60 '2020/12/10' 98 124 269.0 10 60 '2020/12/11' 103 147 329.3 11 60 '2020/12/12' 100 120 250.7 12 60 '2020/12/12' 100 120 250.7 13 60 '2020/12/13' 106 128 345.3 14 60 '2020/12/14' 104 132 379.3 15 60 '2020/12/15' 98 123 275.0 16 60 '2020/12/16' 98 120 215.2 17 60 '2020/12/17' 100 120 300.0 18 45 '2020/12/18' 90 112 NaN 19 60 '2020/12/19' 103 123 323.0 20 45 '2020/12/20' 97 125 243.0 21 60 '2020/12/21' 108 131 364.2 22 45 NaN 100 119 282.0 23 60 '2020/12/23' 130 101 300.0 24 45 '2020/12/24' 105 132 246.0 25 60 '2020/12/25' 102 126 334.5 26 60 2020/12/26 100 120 250.0 27 60 '2020/12/27' 92 118 241.0 28 60 '2020/12/28' 103 132 NaN 29 60 '2020/12/29' 100 132 280.0 30 60 '2020/12/30' 102 129 380.3 31 60 '2020/12/31' 92 115 243.0"
      ]
    },
    {
      "title": "Pandas - Cleaning Empty Cells",
      "summary": "Empty Cells\nEmpty cells can potentially give you a wrong result when you analyze data.\nRemove Rows\nOne way to deal with empty cells is to remove rows that contain empty cells.\nThis is usually OK, since data sets can be very big, and removing a few rows will not have a big impact on the result.\nExampleGet your own Python Server\nReturn a new Data Frame with no empty cells:\nNote: By default, the dropna() method returns a new DataFrame, and will not change the original.\nIf you want to change the original DataFrame, use the inplace = True argument:\nExample\nRemove all rows with NULL values:\nNote: Now, the dropna(inplace = True) will NOT return a new DataFrame, but it will remove all rows containing NULL values from the original DataFrame.\nReplace Empty Values\nAnother way of dealing with empty cells is to insert a new value instead.\nThis way you do not have to delete entire rows just because of some empty cells.\nThe fillna() method allows us to replace empty cells with a value:\nExample\nReplace NULL values with the number 130:\nReplace Only For Specified Columns\nThe example above replaces all empty cells in the whole Data Frame.\nTo only replace empty values for one column, specify the column name for the DataFrame:\nExample\nReplace NULL values in the \"Calories\" columns with the number 130:\nREMOVE ADS\nReplace Using Mean, Median, or Mode\nA common way to replace empty cells, is to calculate the mean, median or mode value of the column.\nPandas uses the mean() median() and mode() methods to calculate the respective values for a specified column:\nExample\nCalculate the MEAN, and replace any empty values with it:\nMean = the average value (the sum of all values divided by number of values).\nExample\nCalculate the MEDIAN, and replace any empty values with it:\nMedian = the value in the middle, after you have sorted all values ascending.\nExample\nCalculate the MODE, and replace any empty values with it:\nMode = the value that appears most frequently.",
      "examples": [
        "import pandas as pd\n\ndf = pd.read_csv('data.csv')\n\nnew_df = df.dropna()\n\nprint(new_df.to_string())",
        "import pandas as pd\n\ndf = pd.read_csv('data.csv')\n\ndf.dropna(inplace = True)\n\nprint(df.to_string())",
        "import pandas as pd\n\ndf = pd.read_csv('data.csv')\n\ndf.fillna(130, inplace = True)",
        "import pandas as pd\n\ndf = pd.read_csv('data.csv')\n\ndf.fillna({\"Calories\": 130}, inplace=True)",
        "import pandas as pd\n\ndf = pd.read_csv('data.csv')\n\nx = df[\"Calories\"].mean()\n\ndf.fillna({\"Calories\": x}, inplace=True)",
        "import pandas as pd\n\ndf = pd.read_csv('data.csv')\n\nx = df[\"Calories\"].median()\n\ndf.fillna({\"Calories\": x}, inplace=True)",
        "import pandas as pd\n\ndf = pd.read_csv('data.csv')\n\nx = df[\"Calories\"].mode()[0]\n\ndf.fillna({\"Calories\": x}, inplace=True)",
        "dropna()",
        "inplace = True",
        "dropna(inplace = True)",
        "fillna()",
        "mean()",
        "median()",
        "mode()"
      ]
    },
    {
      "title": "Pandas - Cleaning Data of Wrong Format",
      "summary": "Data of Wrong Format\nCells with data of wrong format can make it difficult, or even impossible, to analyze data.\nTo fix it, you have two options: remove the rows, or convert all cells in the columns into the same format.\nConvert Into a Correct Format\nIn our Data Frame, we have two cells with the wrong format. Check out row 22 and 26, the 'Date' column should be a string that represents a date:\nLet's try to convert all cells in the 'Date' column into dates.\nPandas has a to_datetime() method for this:\nExampleGet your own Python Server\nConvert to date:\nResult:\nAs you can see from the result, the date in row 26 was fixed, but the empty date in row 22 got a NaT (Not a Time) value, in other words an empty value. One way to deal with empty values is simply removing the entire row.\nREMOVE ADS\nRemoving Rows\nThe result from the converting in the example above gave us a NaT value, which can be handled as a NULL value, and we can remove the row by using the dropna() method.\nExample\nRemove rows with a NULL value in the \"Date\" column:",
      "examples": [
        "Duration Date Pulse Maxpulse Calories 0 60 '2020/12/01' 110 130 409.1 1 60 '2020/12/02' 117 145 479.0 2 60 '2020/12/03' 103 135 340.0 3 45 '2020/12/04' 109 175 282.4 4 45 '2020/12/05' 117 148 406.0 5 60 '2020/12/06' 102 127 300.0 6 60 '2020/12/07' 110 136 374.0 7 450 '2020/12/08' 104 134 253.3 8 30 '2020/12/09' 109 133 195.1 9 60 '2020/12/10' 98 124 269.0 10 60 '2020/12/11' 103 147 329.3 11 60 '2020/12/12' 100 120 250.7 12 60 '2020/12/12' 100 120 250.7 13 60 '2020/12/13' 106 128 345.3 14 60 '2020/12/14' 104 132 379.3 15 60 '2020/12/15' 98 123 275.0 16 60 '2020/12/16' 98 120 215.2 17 60 '2020/12/17' 100 120 300.0 18 45 '2020/12/18' 90 112 NaN 19 60 '2020/12/19' 103 123 323.0 20 45 '2020/12/20' 97 125 243.0 21 60 '2020/12/21' 108 131 364.2 22 45 NaT 100 119 282.0 23 60 '2020/12/23' 130 101 300.0 24 45 '2020/12/24' 105 132 246.0 25 60 '2020/12/25' 102 126 334.5 26 60 '2020/12/26' 100 120 250.0 27 60 '2020/12/27' 92 118 241.0 28 60 '2020/12/28' 103 132 NaN 29 60 '2020/12/29' 100 132 280.0 30 60 '2020/12/30' 102 129 380.3 31 60 '2020/12/31' 92 115 243.0",
        "import pandas as pd\n\ndf = pd.read_csv('data.csv')\n\ndf['Date'] = pd.to_datetime(df['Date'], format='mixed')\n\nprint(df.to_string())",
        "df.dropna(subset=['Date'], inplace = True)",
        "Duration Date Pulse Maxpulse Calories 0 60 '2020/12/01' 110 130 409.1 1 60 '2020/12/02' 117 145 479.0 2 60 '2020/12/03' 103 135 340.0 3 45 '2020/12/04' 109 175 282.4 4 45 '2020/12/05' 117 148 406.0 5 60 '2020/12/06' 102 127 300.0 6 60 '2020/12/07' 110 136 374.0 7 450 '2020/12/08' 104 134 253.3 8 30 '2020/12/09' 109 133 195.1 9 60 '2020/12/10' 98 124 269.0 10 60 '2020/12/11' 103 147 329.3 11 60 '2020/12/12' 100 120 250.7 12 60 '2020/12/12' 100 120 250.7 13 60 '2020/12/13' 106 128 345.3 14 60 '2020/12/14' 104 132 379.3 15 60 '2020/12/15' 98 123 275.0 16 60 '2020/12/16' 98 120 215.2 17 60 '2020/12/17' 100 120 300.0 18 45 '2020/12/18' 90 112 NaN 19 60 '2020/12/19' 103 123 323.0 20 45 '2020/12/20' 97 125 243.0 21 60 '2020/12/21' 108 131 364.2 22 45 NaN 100 119 282.0 23 60 '2020/12/23' 130 101 300.0 24 45 '2020/12/24' 105 132 246.0 25 60 '2020/12/25' 102 126 334.5 26 60 20201226 100 120 250.0 27 60 '2020/12/27' 92 118 241.0 28 60 '2020/12/28' 103 132 NaN 29 60 '2020/12/29' 100 132 280.0 30 60 '2020/12/30' 102 129 380.3 31 60 '2020/12/31' 92 115 243.0",
        "to_datetime()",
        "dropna()"
      ]
    },
    {
      "title": "Pandas - Fixing Wrong Data",
      "summary": "Wrong Data\n\"Wrong data\" does not have to be \"empty cells\" or \"wrong format\", it can just be wrong, like if someone registered \"199\" instead of \"1.99\".\nSometimes you can spot wrong data by looking at the data set, because you have an expectation of what it should be.\nIf you take a look at our data set, you can see that in row 7, the duration is 450, but for all the other rows the duration is between 30 and 60.\nIt doesn't have to be wrong, but taking in consideration that this is the data set of someone's workout sessions, we conclude with the fact that this person did not work out in 450 minutes.\nHow can we fix wrong values, like the one for \"Duration\" in row 7?\nREMOVE ADS\nReplacing Values\nOne way to fix wrong values is to replace them with something else.\nIn our example, it is most likely a typo, and the value should be \"45\" instead of \"450\", and we could just insert \"45\" in row 7:\nExampleGet your own Python Server\nSet \"Duration\" = 45 in row 7:\nFor small data sets you might be able to replace the wrong data one by one, but not for big data sets.\nTo replace wrong data for larger data sets you can create some rules, e.g. set some boundaries for legal values, and replace any values that are outside of the boundaries.\nExample\nLoop through all values in the \"Duration\" column.\nIf the value is higher than 120, set it to 120:\nRemoving Rows\nAnother way of handling wrong data is to remove the rows that contains wrong data.\nThis way you do not have to find out what to replace them with, and there is a good chance you do not need them to do your analyses.\nExample\nDelete rows where \"Duration\" is higher than 120:",
      "examples": [
        "df.loc[7, 'Duration'] = 45",
        "for x in df.index:\nif df.loc[x, \"Duration\"] > 120:\ndf.loc[x, \"Duration\"] = 120",
        "for x in df.index:\nif df.loc[x, \"Duration\"] > 120:\ndf.drop(x, inplace = True)",
        "Duration Date Pulse Maxpulse Calories 0 60 '2020/12/01' 110 130 409.1 1 60 '2020/12/02' 117 145 479.0 2 60 '2020/12/03' 103 135 340.0 3 45 '2020/12/04' 109 175 282.4 4 45 '2020/12/05' 117 148 406.0 5 60 '2020/12/06' 102 127 300.0 6 60 '2020/12/07' 110 136 374.0 7 450 '2020/12/08' 104 134 253.3 8 30 '2020/12/09' 109 133 195.1 9 60 '2020/12/10' 98 124 269.0 10 60 '2020/12/11' 103 147 329.3 11 60 '2020/12/12' 100 120 250.7 12 60 '2020/12/12' 100 120 250.7 13 60 '2020/12/13' 106 128 345.3 14 60 '2020/12/14' 104 132 379.3 15 60 '2020/12/15' 98 123 275.0 16 60 '2020/12/16' 98 120 215.2 17 60 '2020/12/17' 100 120 300.0 18 45 '2020/12/18' 90 112 NaN 19 60 '2020/12/19' 103 123 323.0 20 45 '2020/12/20' 97 125 243.0 21 60 '2020/12/21' 108 131 364.2 22 45 NaN 100 119 282.0 23 60 '2020/12/23' 130 101 300.0 24 45 '2020/12/24' 105 132 246.0 25 60 '2020/12/25' 102 126 334.5 26 60 20201226 100 120 250.0 27 60 '2020/12/27' 92 118 241.0 28 60 '2020/12/28' 103 132 NaN 29 60 '2020/12/29' 100 132 280.0 30 60 '2020/12/30' 102 129 380.3 31 60 '2020/12/31' 92 115 243.0"
      ]
    },
    {
      "title": "Pandas - Removing Duplicates",
      "summary": "Discovering Duplicates\nDuplicate rows are rows that have been registered more than one time.\nBy taking a look at our test data set, we can assume that row 11 and 12 are duplicates.\nTo discover duplicates, we can use the duplicated() method.\nThe duplicated() method returns a Boolean values for each row:\nExampleGet your own Python Server\nReturns True for every row that is a duplicate, otherwise False:\nREMOVE ADS\nRemoving Duplicates\nTo remove duplicates, use the drop_duplicates() method.\nExample\nRemove all duplicates:\nRemember: The (inplace = True) will make sure that the method does NOT return a new DataFrame, but it will remove all duplicates from the original DataFrame.",
      "examples": [
        "print(df.duplicated())",
        "df.drop_duplicates(inplace = True)",
        "Duration Date Pulse Maxpulse Calories 0 60 '2020/12/01' 110 130 409.1 1 60 '2020/12/02' 117 145 479.0 2 60 '2020/12/03' 103 135 340.0 3 45 '2020/12/04' 109 175 282.4 4 45 '2020/12/05' 117 148 406.0 5 60 '2020/12/06' 102 127 300.0 6 60 '2020/12/07' 110 136 374.0 7 450 '2020/12/08' 104 134 253.3 8 30 '2020/12/09' 109 133 195.1 9 60 '2020/12/10' 98 124 269.0 10 60 '2020/12/11' 103 147 329.3 11 60 '2020/12/12' 100 120 250.7 12 60 '2020/12/12' 100 120 250.7 13 60 '2020/12/13' 106 128 345.3 14 60 '2020/12/14' 104 132 379.3 15 60 '2020/12/15' 98 123 275.0 16 60 '2020/12/16' 98 120 215.2 17 60 '2020/12/17' 100 120 300.0 18 45 '2020/12/18' 90 112 NaN 19 60 '2020/12/19' 103 123 323.0 20 45 '2020/12/20' 97 125 243.0 21 60 '2020/12/21' 108 131 364.2 22 45 NaN 100 119 282.0 23 60 '2020/12/23' 130 101 300.0 24 45 '2020/12/24' 105 132 246.0 25 60 '2020/12/25' 102 126 334.5 26 60 20201226 100 120 250.0 27 60 '2020/12/27' 92 118 241.0 28 60 '2020/12/28' 103 132 NaN 29 60 '2020/12/29' 100 132 280.0 30 60 '2020/12/30' 102 129 380.3 31 60 '2020/12/31' 92 115 243.0",
        "duplicated()",
        "True",
        "False",
        "drop_duplicates()",
        "(inplace = True)"
      ]
    },
    {
      "title": "Pandas - Data Correlations",
      "summary": "Finding Relationships\nA great aspect of the Pandas module is the corr() method.\nThe corr() method calculates the relationship between each column in your data set.\nThe examples in this page uses a CSV file called: 'data.csv'.\nDownload data.csv. or Open data.csv\nExampleGet your own Python Server\nShow the relationship between the columns:\nResult\nNote: The corr() method ignores \"not numeric\" columns.\nResult Explained\nThe Result of the corr() method is a table with a lot of numbers that represents how well the relationship is between two columns.\nThe number varies from -1 to 1.\n1 means that there is a 1 to 1 relationship (a perfect correlation), and for this data set, each time a value went up in the first column, the other one went up as well.\n0.9 is also a good relationship, and if you increase one value, the other will probably increase as well.\n-0.9 would be just as good relationship as 0.9, but if you increase one value, the other will probably go down.\n0.2 means NOT a good relationship, meaning that if one value goes up does not mean that the other will.\nWhat is a good correlation? It depends on the use, but I think it is safe to say you have to have at least 0.6 (or -0.6) to call it a good correlation.\nPerfect Correlation:\nWe can see that \"Duration\" and \"Duration\" got the number 1.000000, which makes sense, each column always has a perfect relationship with itself.\nGood Correlation:\n\"Duration\" and \"Calories\" got a 0.922721 correlation, which is a very good correlation, and we can predict that the longer you work out, the more calories you burn, and the other way around: if you burned a lot of calories, you probably had a long work out.\nBad Correlation:\n\"Duration\" and \"Maxpulse\" got a 0.009403 correlation, which is a very bad correlation, meaning that we can not predict the max pulse by just looking at the duration of the work out, and vice versa.",
      "examples": [
        "Duration Pulse Maxpulse Calories Duration 1.000000 -0.155408 0.009403 0.922721 Pulse -0.155408 1.000000 0.786535 0.025120 Maxpulse 0.009403 0.786535 1.000000 0.203814 Calories 0.922721 0.025120 0.203814 1.000000",
        "df.corr()",
        "corr()",
        "0.6",
        "-0.6",
        "1.000000",
        "0.922721",
        "0.009403"
      ]
    },
    {
      "title": "Pandas - Plotting",
      "summary": "Plotting\nPandas uses the plot() method to create diagrams.\nWe can use Pyplot, a submodule of the Matplotlib library to visualize the diagram on the screen.\nRead more about Matplotlib in our Matplotlib Tutorial.\nExampleGet your own Python Server\nImport pyplot from Matplotlib and visualize our DataFrame:\nThe examples in this page uses a CSV file called: 'data.csv'.\nDownload data.csv or Open data.csv\nScatter Plot\nSpecify that you want a scatter plot with the kind argument:\nkind = 'scatter'\nA scatter plot needs an x- and a y-axis.\nIn the example below we will use \"Duration\" for the x-axis and \"Calories\" for the y-axis.\nInclude the x and y arguments like this:\nx = 'Duration', y = 'Calories'\nExample\nResult\nRemember: In the previous example, we learned that the correlation between \"Duration\" and \"Calories\" was 0.922721, and we concluded with the fact that higher duration means more calories burned.\nBy looking at the scatterplot, I will agree.\nLet's create another scatterplot, where there is a bad relationship between the columns, like \"Duration\" and \"Maxpulse\", with the correlation 0.009403:\nExample\nA scatterplot where there are no relationship between the columns:\nResult\nREMOVE ADS\nHistogram\nUse the kind argument to specify that you want a histogram:\nkind = 'hist'\nA histogram needs only one column.\nA histogram shows us the frequency of each interval, e.g. how many workouts lasted between 50 and 60 minutes?\nIn the example below we will use the \"Duration\" column to create the histogram:\nExample\nResult\nNote: The histogram tells us that there were over 100 workouts that lasted between 50 and 60 minutes.",
      "examples": [
        "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('data.csv')\n\ndf.plot()\n\nplt.show()",
        "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('data.csv')\n\ndf.plot(kind = 'scatter', x = 'Duration', y = 'Calories')\n\nplt.show()",
        "df[\"Duration\"].plot(kind = 'hist')",
        "plot()",
        "kind",
        "kind = 'scatter'",
        "x = 'Duration', y = 'Calories'",
        "0.922721",
        "0.009403",
        "kind = 'hist'"
      ]
    },
    {
      "title": "Pandas Online Compiler (Editor)",
      "summary": "Pandas (Python) Editor\nWith our \"Try it Yourself\" editor, you can edit Python code and use the Pandas module, and view the result in your browser.\nExample\nClick on the \"Try it Yourself\" button to see how it works.\nPublish Your Code\nIf you want to create your own website or build Python applications, check out W3Schools Spaces.\nW3Schools Spaces is a website-building tool that enables you to create and share your own website. You can also get a Python server, allowing you to develop and host your Python applications with ease.\nNote: This includes Python libraries such as: Django, Pandas, NumPy, SciPy and more.\nYou can change the website's look and how it works by editing the code right in your web browser.\nIt's easy to use and doesn't require any setup\nThe code editor is packed with features to help you achieve more:\nTemplates: Start from scratch or use a template\nCloud-based: no installations required. You only need your browser\nTerminal & Log: debug and troubleshoot your code easily\nFile Navigator: switch between files inside the code editor\nAnd much more!\nLearn Faster\nPractice is key to mastering coding, and the best way to put your Python knowledge into practice is by getting practical with code.\nUse W3Schools Spaces to build, test and deploy code.\nThe code editor lets you write and practice different types of computer languages. It includes Python, but you can use it for other languages too.\nNew languages are added all the time:\nIf you don't know Python, we suggest that you read our Python Tutorial from scratch.\nEasy Package Management\nGet an overview of your packages and easily add or delete frameworks and libraries. Then, with just one click, you can make changes to your packages without manual installation.\nBuild Powerful Websites\nYou can also use the code editor in W3School Spaces to build frontend or full-stack websites from scratch.\nOr you can use the 60+ templates available and save time:\nCreate your Spaces account today and explore them all!\nShare Your Website With The World\nHost and publish your websites in no time with W3School Spaces.\nW3Schools subdomain and SSL certificate are included for free with W3School Spaces. An SSL certificate makes your website safe and secure. It also helps people trust your website and makes it easier to find it online.\nWant a custom domain for your website?\nYou can buy a domain or transfer an existing one and connect it to your space.\nHow Does It Work?\nGet started in a few clicks with W3School Spaces.",
      "examples": [
        "import pandas as pd\n\ndf = pd.read_csv('data.csv')\n\nprint(df.to_string())",
        "Duration Pulse Maxpulse Calories 0 60 110 130 409.1 1 60 117 145 479.0 2 60 103 135 340.0"
      ]
    },
    {
      "title": "Pandas Quiz",
      "summary": "You can test your Pandas skills with W3Schools' Quiz.\nThe Test\nThe test contains 25 questions and there is no time limit.\nThe test is not official, it's just a nice way to see how much you know, or don't know, about Pandas.\nCount Your Score\nYou will get 1 point for each correct answer. At the end of the Quiz, your total score will be displayed. Maximum score is 25 points.\nStart the Quiz\nGood luck!\nStart the Pandas Quiz ❯\nIf you don't know Pandas, we suggest that you read our Pandas Tutorial from scratch.",
      "examples": []
    },
    {
      "title": "Pandas Exercises",
      "summary": "Exercises\nTest your Pandas skills with exercises from all categories:\nIntroduction\nGetting Started\nSeries\nDataFrame\nRead CSV\nRead JSON\nAnalyzing DataFrames\nCleaning Empty Cells\nCleaning Wrong Format\nCleaning Wrong Data\nCleaning Duplicates\nCorrelations\nPlotting\nLog in to track your progress\nIf you haven't already, sign up to become a W3Schooler, and get points for every exercise you complete.\nAs a logged on W3Schools user you will have access to many features like having your own web page, track your learning progress, receive personal guided paths, and more.\nThe Exercise\nThe exercises are a mix of \"multiple choice\" and \"fill in the blanks\" questions. There are between 3 and 9 questions in each category. The answer can be found in the corresponding tutorial chapter. If you're stuck, or answer wrong, you can try again or hit the \"Show Answer\" button to see the correct answer.\nKickstart your career\nGet certified by completing the PYTHON course",
      "examples": []
    },
    {
      "title": "Pandas Syllabus",
      "summary": "Introduction\nThe W3Schools Pandas Tutorial is comprehensive and beginner-friendly.\nIt will give you a fundamental knowledge of Pandas.\nIt is designed for beginners and requires only basic Python knowledge.\nThe content has been carefully made to be bite-sized, simple, and easy to understand.\nThe content has been proven by millions of users over the years. It is updated and improved frequently.\nThe syllabus outline and its sequence are structured so you can learn Pandas step by step, from the introduction to data analysis.\nGet Started With Pandas »\nLearning Outcomes\nUnderstand the basic structure of Pandas DataFrames and Series.\nLoad and manipulate data from various sources.\nClean and preprocess data effectively.\nPerform data analysis and aggregation.\nHandle missing data appropriately.\nCreate data visualizations.\nWork with time series data.\nMerge and join datasets.\nExport data to different formats.\nNote: Are you a teacher teaching Pandas? W3Schools Academy is a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more about Academy here.\nWhich Subjects Are Pandas Relevant For?\nData Analysis:\nPandas is essential for data manipulation and analysis.\nData Science:\nPandas is fundamental for data preparation and exploration.\nBusiness Analytics:\nPandas helps analyze business data and create reports.\nFinance:\nPandas is perfect for financial data analysis and time series.\nResearch:\nPandas supports data cleaning and statistical analysis.\nMachine Learning:\nPandas is crucial for data preprocessing in ML projects.\nData Engineering:\nPandas helps in data transformation and ETL processes.\nGet Started\nActivities\nIn this tutorial we offer different activities for you to learn Pandas for free:\nLessons\nExercises\nQuizzes\nSign in to Track Progress\nYou can also create a free account to track your progress.\nAs a signed-in user, you get access to features such as:\nLearning paths\nSandbox and lab environments\nAchievements\nAnd much more!\nSign Up - It's free\nOverview of the Modules\nPandas HOME\nPandas Intro\nPandas Getting Started\nPandas Series\nPandas DataFrames\nPandas Read CSV\nPandas Read JSON\nPandas Analyzing Data\nCleaning Data\nCleaning Empty Cells\nCleaning Wrong Format\nCleaning Wrong Data\nRemoving Duplicates\nPandas Correlations\nPandas Plotting\nDataFrames Reference\nGet Started\nSandbox and Lab Environment\nPandas, like any other library, is best learned through hands-on practice.\nTry this example using our editor:\nExampleGet your own Python Server\nLoad a CSV file into a Pandas DataFrame:\nIf you want to explore more and host your project, we have a feature called Spaces that allows you to build, test and deploy Python projects for free.\nHere you get a secure sandbox environment called Spaces, where you can practice Pandas code and test projects in real-time.\nSpaces allow you to test, build, and deploy code. This includes a W3Schools subdomain, hosting, and secure SSL certificates.\nSpaces require no installation and run directly in the browser.\nFeatures include:\nCollaboration\nFile navigator\nTerminal & log\nPackage manager\nDatabase\nEnvironment manager\nAnalytics\nCreate a Spaces Account\nPandas Certification\nW3Schools offers an end-of-pathway certification program.\nHere you can take exams to get certified.\nThe Pandas exam is a test that summarizes the W3Schools Pandas syllabus.\nAfter passing the exam you get the \"Certified Pandas Developer\" Certification.\nThere are two different types of certifications:\nNon-adaptive\nAdaptive\nThe non-adaptive is pass or no pass.\nThe adaptive certification is adaptive and graded; students will get a grade from intermediate, advanced to professional.\nBuy Certificate »\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach Pandas?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo »",
      "examples": [
        "import pandas as pd\n\ndf = pd.read_csv('data.csv')\n\nprint(df.to_string())"
      ]
    },
    {
      "title": "Pandas Study Plan",
      "summary": "Introduction\nThe Pandas study plan helps you teach your students Pandas step-by-step.\nCreating a study plan for Pandas is easy.\nYou can use a pre-built study plan or customize it.\nStudents have different skill levels. The study plans can be customized to ensure that everyone is challenged.\nSave time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of Pandas to the final exam.\nW3Schools Academy\nThis study plan is a feature of W3Schools Academy.\nW3Schools Academy is a platform that has everything you need to teach coding, all in one place.\nIt offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom.\nYou need to have an active subscription to access the study plan feature. There are two different subscription tiers:\nEssentials ($1.99 / month per student)\nFull Access ($5.99 / month per student)\nCalculate your price and order here.\nLearn More »\nAcademy also offer other features such as:\nManaging your classroom\nTracking of student progress and reports\nLabs, assignments, and code challenges (prebuilt challenges or create your own ones)\nAuto-grading\nTeaching materials\nCertification exams\nGet a free demo »\nTeacher Materials\nW3Schools has everything you need to teach Pandas.\nThe Pandas training materials is available for you to include and use in your study plan:\nW3Schools Pandas Tutorial\nPandas Exercises\nPandas Quiz\nPandas Challenges (Coding challenges)\nPandas Certification Exam (End of Pathway Exam)\nPandas Syllabus\nWith the Pandas Syllabus, your students will start with the basics, like understanding DataFrames and Series, and move to more advanced topics, like data cleaning, merging datasets, and analyzing data. Each chapter includes examples, try-it-yourself sections, exercises, and quizzes to make learning easy, interactive, and fun.\nRead more about Pandas Syllabus.\nStudy Plan Overview\nThe study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level.\nLearning Paths\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nInteractive Content\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTimeline and Pace\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nTrack Student Progress\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nEnd of Pathway Exam\nThe Pandas study plan aligns with the Pandas Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the Pandas Tutorial.\nYou get reports of the students' results.\nThe Pandas study plan aligns with the Pandas Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the Pandas Tutorial.\nYou get reports of the students' results.\nAccessibility\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nLearn More »\nSample Study Plan\nYou choose the timeline and pace of your study plans.\nSchools have different preferences.\nSome would like more intensive pace, e.g. 3 weeks, others 12 or more weeks.\nIt is completely up to you.\nFor example, this is how a 3-week Pandas study plan could look like:\nWeek 1: Introduction, Getting started\nWeek 2: Data, Cleaning Data\nWeek 3: Plotting\nImage of Sample Pandas study plan:\nReady to get started?\nStart with Pandas Study Plans today.\nGet Started »\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach Pandas programming?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo »",
      "examples": []
    },
    {
      "title": "Pandas Certification",
      "summary": "W3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nW3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nWho Should Consider Getting Certified?\nAny student or professional within the digital industry.\nCertifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market.\nW3Schools is Trusted by Top Companies\nW3Schools has over two decades of experience with teaching coding online.\nOur certificates are recognized and valued by companies looking to employ skilled developers.\nSave Time and Money\nShow the world your coding skills by getting a certification.\nThe prices is a small fraction compared to the price of traditional education.\nDocument and validate your competence by getting certified!\nExam overview\nFee: 95 USD\nAchievable certification levels:\nIntermediate (40%)\nAdvanced (75%)\nProfessional (90%)\nNumber of questions:\nAdaptive, 60 on average\nRequirement to pass:\nMinimum 40% - Intermediate level\nTime limit: 60 minutes\nNumber of attempts to pass: 3\nExam deadline: None\nCertification Expiration: None\nFormat: Online, multiple choice\nRegister now »\nAdvance Faster in Your Career\nGetting a certificate proves your commitment to upgrading your skills.\nThe certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on.\nIt gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nKnowledge is power, especially in the current job market.\nDocumentation of your skills enables you to advance your career or helps you to start a new one.\nHow Does It Work?\nStudy for free at W3Schools.com\nStudy at your own speed\nTest your skills with W3Schools online quizzes\nApply for your certificate by paying an exam fee\nTake your exam online, at any time, and from any location\nGet Your Certificate and Share It With The World\nExample certificate:\nEach certificate gets a unique link that can be shared with others.\nValidate your certification with the link or QR code.\nCheck how it looks like in this Example.\nShare your certificate on Linked in the Certifications section in just one click!\nDocument Your Skills\nGetting a certificate proves your commitment to upgrade your skills, gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nGet Your Certificate »\nLooking to add multiple users?\nAre you an educator, manager or business owner looking for courses or certifications?\nWe are working with schools, companies and organizations from all over the world.\nGet courses and/or certifications for your team here.",
      "examples": []
    },
    {
      "title": "Pandas - DataFrame Reference",
      "summary": "All properties and methods of the DataFrame object, with explanations and examples:",
      "examples": []
    }
  ],
  "glossary": [
    "advanced",
    "backend",
    "basic",
    "cleaning data",
    "correlations",
    "dataframes reference",
    "exercises",
    "free",
    "javascript",
    "pandas correlations",
    "pandas dataframes",
    "pandas editor",
    "pandas exercises",
    "pandas home",
    "pandas intro",
    "pandas plotting",
    "pandas quiz",
    "pandas series",
    "pandas syllabus",
    "plotting",
    "programs",
    "quiz exercises",
    "references",
    "removing duplicates",
    "report error",
    "w3schools spaces"
  ]
}