{
  "course_name": "Kotlin",
  "description": "Kotlin is a modern, trending programming language. Kotlin is easy to learn, especially if you already know Java (it is 100% compatible with Java). Kotlin is used to develop Android apps, server side apps, and much more. Our \"Try it Yourself\" editor makes it easy to learn Kotlin. You can edit the code and view the result in your browser: Click on the \"Try it Yourself\" button to see how it works. We recommend reading this tutorial, in the sequence listed in the left menu. Insert the missing part of the code below to output \"Hello World\". Start the Exercise Learn by taking a quiz! This quiz will give you a signal of how much you know about Kotlin. Take the Kotlin Quiz Learn by examples! This tutorial supplements all explanations with clarifying examples. See All Kotlin Examples Download Kotlin from github: https://github.com/JetBrains/kotlin Sign Up for Free Note: This is an optional feature. You can study at W3Schools without creating an account.",
  "course_summary": [
    {
      "title": "Kotlin Introduction",
      "summary": "What is Kotlin?\nKotlin is a modern, trending programming language that was released in 2016 by JetBrains.\nIt has become very popular since it is compatible with Java (one of the most popular programming languages out there), which means that Java code (and libraries) can be used in Kotlin programs.\nKotlin is used for:\nMobile applications (specially Android apps)\nWeb development\nServer side applications\nData science\nAnd much, much more!\nWhy Use Kotlin?\nKotlin is fully compatible with Java\nKotlin works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc.)\nKotlin is concise and safe\nKotlin is easy to learn, especially if you already know Java\nKotlin is free to use\nBig community/support\nGet Started\nThis tutorial will teach you the very basics of Kotlin.\nIt is not necessary to have any prior programming experience.",
      "examples": []
    },
    {
      "title": "Kotlin Get Started",
      "summary": "Kotlin IDE\nThe easiest way to get started with Kotlin, is to use an IDE.\nAn IDE (Integrated Development Environment) is used to edit and compile code.\nIn this chapter, we will use IntelliJ (developed by the same people that created Kotlin) which is free to download from https://www.jetbrains.com/idea/download/.\nKotlin Install\nOnce IntelliJ is downloaded and installed, click on the New Project button to get started with IntelliJ:\nThen click on \"Kotlin\" in the left side menu, and enter a name for your project:\nNext, we need to install something called JDK (Java Development Kit) to get our Kotlin project up and going. Click on the \"Project JDK\" menu, select \"Download JDK\" and select a version and vendor (e.g. AdoptOpenJDK 11) and click on the \"Download\" button:\nWhen the JDK is downloaded and installed, choose it from the select menu and then click on the \"Next\" button and at last \"Finish\":\nNow we can start working with our Kotlin project. Do not worry about all of the different buttons and functions in IntelliJ. For now, just open the src (source) folder, and follow the same steps as in the image below, to create a kotlin file:\nSelect the \"File\" option and add a name to your Kotlin file, for example \"Main\":\nYou have now created your first Kotlin file (Main.kt). Let's add some Kotlin code to it, and run the program to see how it works. Inside the Main.kt file, add the following code:\nMain.kt\nDon't worry if you don't understand the code above - we will discuss it in detail in later chapters. For now, lets focus on how to run the code. Click on the Run button at the top navigation bar, then click \"Run\", and select \"Mainkt\".\nNext, IntelliJ will build your project, and run the Kotlin file. The output will look something like this:\nAs you can see, the output of the code was \"Hello World\", meaning that you have now written and executed your first Kotlin program!\nLearning Kotlin At W3Schools\nWhen learning Kotlin at w3schools.com, you can use our \"Try it Yourself\" tool, which shows both the code and the result. This will make it easier for you to understand every part as we move forward:\nMain.kt\nCode:\nResult:",
      "examples": [
        "fun main() { println(\"Hello World\") }",
        "Hello World"
      ]
    },
    {
      "title": "Kotlin Syntax",
      "summary": "Kotlin Syntax\nIn the previous chapter, we created a Kotlin file called Main.kt, and we used the following code to print \"Hello World\" to the screen:\nExample\nExample explained\nThe fun keyword is used to declare a function. A function is a block of code designed to perform a particular task. In the example above, it declares the main() function.\nThe main() function is something you will see in every Kotlin program. This function is used to execute code. Any code inside the main() function's curly brackets {} will be executed.\nFor example, the println() function is inside the main() function, meaning that this will be executed. The println() function is used to output/print text, and in our example it will output \"Hello World\".\nGood To Know: In Kotlin, code statements do not have to end with a semicolon (;) (which is often required for other programming languages, such as Java, C++, C#, etc.).\nMain Parameters\nBefore Kotlin version 1.3, it was required to use the main() function with parameters, like: fun main(args : Array<String>). The example above had to be written like this to work:\nExample\nNote: This is no longer required, and the program will run fine without it. However, it will not do any harm if you have been using it in the past, and will continue to use it.",
      "examples": [
        "fun main() { println(\"Hello World\") }",
        "fun main(args : Array<String>) { println(\"Hello World\") }",
        "Main.kt",
        "fun",
        "main()",
        "{}",
        "println()",
        ";",
        "fun main(args : Array<String>)"
      ]
    },
    {
      "title": "Kotlin Output (Print Text)",
      "summary": "Kotlin Output (Print)\nThe println() function is used to output values/print text:\nExample\nYou can add as many println() functions as you want. Note that it will add a new line for each function:\nExample\nYou can also print numbers, and perform mathematical calculations:\nExample\nThe print() function\nThere is also a print() function, which is similar to println(). The only difference is that it does not insert a new line at the end of the output:\nExample\nNote that we have added a space character to create a space between the sentences.",
      "examples": [
        "fun main() { println(\"Hello World\") }",
        "fun main() { println(\"Hello World!\") println(\"I am learning Kotlin.\") println(\"It is awesome!\") }",
        "fun main() { println(3 + 3) }",
        "fun main() { print(\"Hello World! \") print(\"I am learning Kotlin. \") print(\"It is awesome!\") }",
        "println()",
        "print()"
      ]
    },
    {
      "title": "Kotlin Comments",
      "summary": "Kotlin Comments\nComments can be used to explain Kotlin code, and to make it more readable. It can also be used to prevent execution when testing alternative code.\nSingle-line Comments\nSingle-line comments starts with two forward slashes (//).\nAny text between // and the end of the line is ignored by Kotlin (will not be executed).\nThis example uses a single-line comment before a line of code:\nExample\nThis example uses a single-line comment at the end of a line of code:\nExample\nMulti-line Comments\nMulti-line comments start with /* and ends with */.\nAny text between /* and */ will be ignored by Kotlin.\nThis example uses a multi-line comment (a comment block) to explain the code:\nExample",
      "examples": [
        "// This is a comment println(\"Hello World\")",
        "println(\"Hello World\") // This is a comment",
        "/* The code below will print the words Hello World to the screen, and it is amazing */ println(\"Hello World\")",
        "//",
        "/*",
        "*/"
      ]
    },
    {
      "title": "Kotlin Variables",
      "summary": "Kotlin Variables\nVariables are containers for storing data values.\nTo create a variable, use var or val, and assign a value to it with the equal sign (=):\nSyntax\nExample\nThe difference between var and val is that variables declared with the var keyword can be changed/modified, while val variables cannot.\nVariable Type\nUnlike many other programming languages, variables in Kotlin do not need to be declared with a specified type (like \"String\" for text or \"Int\" for numbers, if you are familiar with those).\nTo create a variable in Kotlin that should store text and another that should store a number, look at the following example:\nExample\nKotlin is smart enough to understand that \"John\" is a String (text), and that 1975 is an Int (number) variable.\nHowever, it is possible to specify the type if you insist:\nExample\nYou can also declare a variable without assigning the value, and assign the value later. However, this is only possible when you specify the type:\nExample\nThis works fine:\nExample\nThis will generate an error:\nNote: You will learn more about Data Types in the next chapter.\nREMOVE ADS\nNotes on val\nWhen you create a variable with the val keyword, the value cannot be changed/reassigned.\nThe following example will generate an error:\nExample\nWhen using var, you can change the value whenever you want:\nExample\nThe val keyword is useful when you want a variable to always store the same value, like PI (3.14159...):\nExample\nDisplay Variables\nLike you have seen with the examples above, the println() method is often used to display variables.\nTo combine both text and a variable, use the + character:\nExample\nYou can also use the + character to add a variable to another variable:\nExample\nFor numeric values, the + character works as a mathematical operator:\nExample\nFrom the example above, you can expect:\nx stores the value 5\ny stores the value 6\nThen we use the println() method to display the value of x + y, which is 11\nVariable Names\nA variable can have a short name (like x and y) or more descriptive names (age, sum, totalVolume).\nThe general rule for Kotlin variables are:\nNames can contain letters, digits, underscores, and dollar signs\nNames should start with a letter\nNames can also begin with $ and _ (but we will not use it in this tutorial)\nNames are case sensitive (\"myVar\" and \"myvar\" are different variables)\nNames should start with a lowercase letter and it cannot contain whitespace\nReserved words (like Kotlin keywords, such as var or String) cannot be used as names\ncamelCase variables\nYou might notice that we used firstName and lastName as variable names in the example above, instead of firstname and lastname. This is called \"camelCase\", and it is considered as good practice as it makes it easier to read when you have a variable name with different words in it, for example \"myFavoriteFood\", \"rateActionMovies\" etc.",
      "examples": [
        "var variableName = value val variableName = value",
        "var name = \"John\" val birthyear = 1975 println(name) // Print the value of name println(birthyear) // Print the value of birthyear",
        "var name = \"John\" // String (text) val birthyear = 1975 // Int (number) println(name) // Print the value of name println(birthyear) // Print the value of birthyear",
        "var name: String = \"John\" // String val birthyear: Int = 1975 // Int println(name) println(birthyear)",
        "var name: String name = \"John\" println(name)",
        "var name name = \"John\" println(name)",
        "val name = \"John\" name = \"Robert\" // Error (Val cannot be reassigned) println(name)",
        "var name = \"John\" name = \"Robert\" println(name)",
        "val pi = 3.14159265359 println(pi)",
        "val name = \"John\" println(\"Hello \" + name)",
        "val firstName = \"John \" val lastName = \"Doe\" val fullName = firstName + lastName println(fullName)",
        "val x = 5 val y = 6 println(x + y) // Print the value of x + y",
        "var",
        "val",
        "=",
        "String",
        "Int",
        "println()",
        "+"
      ]
    },
    {
      "title": "Kotlin Data Types",
      "summary": "Kotlin Data Types\nIn Kotlin, the type of a variable is decided by its value:\nExample\nHowever, you learned from the previous chapter that it is possible to specify the type if you want:\nExample\nSometimes you have to specify the type, and often you don't. Anyhow, it is good to know what the different types represent.\nYou will learn more about when you need to specify the type later.\nData types are divided into different groups:\nNumbers\nCharacters\nBooleans\nStrings\nArrays\nNumbers\nNumber types are divided into two groups:\nInteger types store whole numbers, positive or negative (such as 123 or -456), without decimals. Valid types are Byte, Short, Int and Long.\nFloating point types represent numbers with a fractional part, containing one or more decimals. There are two types: Float and Double.\nIf you don't specify the type for a numeric variable, it is most often returned as Int for whole numbers and Double for floating point numbers.\nInteger Types\nByte\nThe Byte data type can store whole numbers from -128 to 127. This can be used instead of Int or other integer types to save memory when you are certain that the value will be within -128 and 127:\nExample\nShort\nThe Short data type can store whole numbers from -32768 to 32767:\nExample\nInt\nThe Int data type can store whole numbers from -2147483648 to 2147483647:\nExample\nLong\nThe Long data type can store whole numbers from -9223372036854775808 to 9223372036854775807. This is used when Int is not large enough to store the value. Optionally, you can end the value with an \"L\":\nExample\nDifference Between Int and Long\nA whole number is an Int as long as it is up to 2147483647. If it goes beyond that, it is defined as Long:\nExample\nREMOVE ADS\nFloating Point Types\nFloating point types represent numbers with a decimal, such as 9.99 or 3.14515.\nThe Float and Double data types can store fractional numbers:\nFloat Example\nDouble Example\nUse Float or Double?\nThe precision of a floating point value indicates how many digits the value can have after the decimal point. The precision of Float is only six or seven decimal digits, while Double variables have a precision of about 15 digits. Therefore it is safer to use Double for most calculations.\nAlso note that you should end the value of a Float type with an \"F\".\nScientific Numbers\nA floating point number can also be a scientific number with an \"e\" or \"E\" to indicate the power of 10:\nExample\nBooleans\nThe Boolean data type can only take the values true or false:\nExample\nBoolean values are mostly used for conditional testing, which you will learn more about in a later chapter.\nCharacters\nThe Char data type is used to store a single character. A char value must be surrounded by single quotes, like 'A' or 'c':\nExample\nUnlike Java, you cannot use ASCII values to display certain characters. The value 66 would output a \"B\" in Java, but will generate an error in Kotlin:\nExample\nStrings\nThe String data type is used to store a sequence of characters (text). String values must be surrounded by double quotes:\nExample\nYou will learn more about strings in the Strings chapter.\nArrays\nArrays are used to store multiple values in a single variable, instead of declaring separate variables for each value.\nYou will learn more about arrays in the Arrays chapter.\nType Conversion\nType conversion is when you convert the value of one data type to another type.\nIn Kotlin, numeric type conversion is different from Java. For example, it is not possible to convert an Int type to a Long type with the following code:\nExample\nTo convert a numeric data type to another type, you must use one of the following functions: toByte(), toShort(), toInt(), toLong(), toFloat(), toDouble() or toChar():\nExample",
      "examples": [
        "val myNum = 5 // Int val myDoubleNum = 5.99 // Double val myLetter = 'D' // Char val myBoolean = true // Boolean val myText = \"Hello\" // String",
        "val myNum: Int = 5 // Int val myDoubleNum: Double = 5.99 // Double val myLetter: Char = 'D' // Char val myBoolean: Boolean = true // Boolean val myText: String = \"Hello\" // String",
        "val myNum: Byte = 100 println(myNum)",
        "val myNum: Short = 5000 println(myNum)",
        "val myNum: Int = 100000 println(myNum)",
        "val myNum: Long = 15000000000L println(myNum)",
        "val myNum1 = 2147483647 // Int val myNum2 = 2147483648 // Long",
        "val myNum: Float = 5.75F println(myNum)",
        "val myNum: Double = 19.99 println(myNum)",
        "val myNum1: Float = 35E3F val myNum2: Double = 12E4 println(myNum1) println(myNum2)",
        "val isKotlinFun: Boolean = true val isFishTasty: Boolean = false println(isKotlinFun) // Outputs true println(isFishTasty) // Outputs false",
        "val myGrade: Char = 'B' println(myGrade)",
        "val myLetter: Char = 66 println(myLetter) // Error",
        "val myText: String = \"Hello World\" println(myText)",
        "val x: Int = 5 val y: Long = x println(y) // Error: Type mismatch",
        "val x: Int = 5 val y: Long = x.toLong() println(y)",
        "Byte",
        "Short",
        "Int",
        "Long",
        "Float",
        "Double",
        "Boolean",
        "true",
        "false",
        "Char",
        "String",
        "toByte()",
        "toShort()",
        "toInt()",
        "toLong()",
        "toFloat()",
        "toDouble()",
        "toChar()"
      ]
    },
    {
      "title": "Kotlin Operators",
      "summary": "Kotlin Operators\nOperators are used to perform operations on variables and values.\nThe value is called an operand, while the operation (to be performed between the two operands) is defined by an operator:\nIn the example below, the numbers 100 and 50 are operands, and the + sign is an operator:\nExample\nAlthough the + operator is often used to add together two values, like in the example above, it can also be used to add together a variable and a value, or a variable and a variable:\nExample\nKotlin divides the operators into the following groups:\nArithmetic operators\nAssignment operators\nComparison operators\nLogical operators\nArithmetic Operators\nArithmetic operators are used to perform common mathematical operations.\nREMOVE ADS\nKotlin Assignment Operators\nAssignment operators are used to assign values to variables.\nIn the example below, we use the assignment operator (=) to assign the value 10 to a variable called x:\nExample\nThe addition assignment operator (+=) adds a value to a variable:\nExample\nA list of all assignment operators:\nKotlin Comparison Operators\nComparison operators are used to compare two values, and returns a Boolean value: either true or false.\nYou will learn much more about Booleans in the Boolean chapter and Conditions.\nKotlin Logical Operators\nLogical operators are used to determine the logic between variables or values:",
      "examples": [
        "var x = 100 + 50",
        "var sum1 = 100 + 50 // 150 (100 + 50) var sum2 = sum1 + 250 // 400 (150 + 250) var sum3 = sum2 + sum2 // 800 (400 + 400)",
        "var x = 10",
        "var x = 10\nx += 5",
        "+",
        "=",
        "+=",
        "Boolean",
        "true",
        "false"
      ]
    },
    {
      "title": "Kotlin Strings",
      "summary": "Kotlin Strings\nStrings are used for storing text.\nA string contains a collection of characters surrounded by double quotes:\nExample\nUnlike Java, you do not have to specify that the variable should be a String. Kotlin is smart enough to understand that the greeting variable in the example above is a String because of the double quotes.\nHowever, just like with other data types, you can specify the type if you insist:\nExample\nNote: If you want to create a String without assigning the value (and assign the value later), you must specify the type while declaring the variable:\nExample\nThis works fine:\nExample\nThis will generate an error:\nAccess a String\nTo access the characters (elements) of a string, you must refer to the index number inside square brackets.\nString indexes start with 0. In the example below, we access the first and third element in txt:\nExample\n[0] is the first element. [1] is the second element, [2] is the third element, etc.\nREMOVE ADS\nString Length\nA String in Kotlin is an object, which contain properties and functions that can perform certain operations on strings, by writing a dot character (.) after the specific string variable. For example, the length of a string can be found with the length property:\nExample\nString Functions\nThere are many string functions available, for example uppercase() and lowercase():\nExample\nComparing Strings\nThe compareTo(string) function compares two strings and returns 0 if both are equal:\nExample\nFinding a String in a String\nThe indexOf() function returns the index (the position) of the first occurrence of a specified text in a string (including whitespace):\nExample\nRemember that Kotlin counts positions from zero.\n0 is the first position in a string, 1 is the second, 2 is the third ...\nQuotes Inside a String\nTo use quotes inside a string, use single quotes ('):\nExample\nString Concatenation\nThe + operator can be used between strings to add them together to make a new string. This is called concatenation:\nExample\nNote that we have added an empty text (\" \") to create a space between firstName and lastName on print.\nYou can also use the plus() function to concatenate two strings:\nExample\nString Templates/Interpolation\nInstead of concatenation, you can also use \"string templates\", which is an easy way to add variables and expressions inside a string.\nJust refer to the variable with the $ symbol:\nExample\n\"String Templates\" is a popular feature of Kotlin, as it reduces the amount of code. For example, you do not have to specify a whitespace between firstName and lastName, like we did in the concatenation example.",
      "examples": [
        "var greeting = \"Hello\"",
        "var greeting: String = \"Hello\"",
        "var name: String name = \"John\" println(name)",
        "var name name = \"John\" println(name)",
        "var txt = \"Hello World\" println(txt[0]) // first element (H) println(txt[2]) // third element (l)",
        "var txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" println(\"The length of the txt string is: \" + txt.length)",
        "var txt = \"Hello World\" println(txt.uppercase()) // Outputs \"HELLO WORLD\" println(txt.lowercase()) // Outputs \"hello world\"",
        "var txt1 = \"Hello World\"\nvar txt2 = \"Hello World\" println(txt1.compareTo(txt2)) // Outputs 0 (they are equal)",
        "var txt = \"Please locate where 'locate' occurs!\" println(txt.indexOf(\"locate\")) // Outputs 7",
        "var txt1 = \"It's alright\" var txt2 = \"That's great\"",
        "var firstName = \"John\" var lastName = \"Doe\" println(firstName + \" \" + lastName)",
        "var firstName = \"John \" var lastName = \"Doe\" println(firstName.plus(lastName))",
        "var firstName = \"John\" var lastName = \"Doe\" println(\"My name is $firstName $lastName\")",
        "String",
        "txt",
        ".",
        "length",
        "uppercase()",
        "lowercase()",
        "compareTo(string)",
        "indexOf()",
        "'",
        "+",
        "plus()",
        "$"
      ]
    },
    {
      "title": "Kotlin Booleans",
      "summary": "Kotlin Booleans\nVery often, in programming, you will need a data type that can only have one of two values, like:\nYES / NO\nON / OFF\nTRUE / FALSE\nFor this, Kotlin has a Boolean data type, which can take the values true or false.\nBoolean Values\nA boolean type can be declared with the Boolean keyword and can only take the values true or false:\nExample\nJust like you have learned with other data types in the previous chapters, the example above can also be written without specifying the type, as Kotlin is smart enough to understand that the variables are Booleans:\nExample\nREMOVE ADS\nBoolean Expression\nA Boolean expression returns a Boolean value: true or false.\nYou can use a comparison operator, such as the greater than (>) operator to find out if an expression (or a variable) is true:\nExample\nOr even easier:\nExample\nIn the examples below, we use the equal to (==) operator to evaluate an expression:\nExample\nExample\nThe Boolean value of an expression is the basis for all Kotlin comparisons and conditions.\nYou will learn more about conditions in the next chapter.",
      "examples": [
        "val isKotlinFun: Boolean = true val isFishTasty: Boolean = false println(isKotlinFun) // Outputs true println(isFishTasty) // Outputs false",
        "val isKotlinFun = true val isFishTasty = false println(isKotlinFun) // Outputs true println(isFishTasty) // Outputs false",
        "val x = 10 val y = 9\nprintln(x > y) // Returns true, because 10 is greater than 9",
        "println(10 > 9) // Returns true, because 10 is greater than 9",
        "val x = 10; println(x == 10); // Returns true, because the value of x is equal to 10",
        "println(10 == 15); // Returns false, because 10 is not equal to 15",
        "Boolean",
        "true",
        "false",
        ">",
        "=="
      ]
    },
    {
      "title": "Kotlin If ... Else",
      "summary": "Kotlin Conditions and If..Else\nYou already know that Kotlin supports familiar comparison conditions from mathematics, such as:\nLess than: a < b\nLess than or equal to: a <= b\nGreater than: a > b\nGreater than or equal to: a >= b\nEqual to a == b\nNot Equal to: a != b\nYou can use these conditions to perform different actions for different decisions.\nKotlin has the following conditionals:\nUse if to specify a block of code to be executed, if a specified condition is true\nUse else to specify a block of code to be executed, if the same condition is false\nUse else if to specify a new condition to test, if the first condition is false\nUse when to specify many alternative blocks of code to be executed\nNote: Unlike Java, if..else can be used as a statement or as an expression (to assign a value to a variable) in Kotlin. See an example at the bottom of the page to better understand it.\nKotlin if\nUse if to specify a block of code to be executed if a condition is true.\nSyntax\nNote that if is in lowercase letters. Uppercase letters (If or IF) will generate an error.\nIn the example below, we test two values to find out if 20 is greater than 18. If the condition is true, print some text:\nExample\nWe can also test variables:\nExample\nIn the example above we use two variables, x and y, to test whether x is greater than y (using the > operator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that \"x is greater than y\".\nREMOVE ADS\nKotlin else\nUse else to specify a block of code to be executed if the condition is false.\nSyntax\nExample\nIn the example above, time (20) is greater than 18, so the condition is false, so we move on to the else condition and print to the screen \"Good evening\". If the time was less than 18, the program would print \"Good day\".\nKotlin else if\nUse else if to specify a new condition if the first condition is false.\nSyntax\nExample\nIn the example above, time (22) is greater than 10, so the first condition is false. The next condition, in the else if statement, is also false, so we move on to the else condition since condition1 and condition2 is both false - and print to the screen \"Good evening\".\nHowever, if the time was 14, our program would print \"Good day.\"\nKotlin If..Else Expressions\nIn Kotlin, you can also use if..else statements as expressions (assign a value to a variable and return it):\nExample\nWhen using if as an expression, you must also include else (required).\nNote: You can ommit the curly braces {} when if has only one statement:\nExample\nTip: This example is similar to the \"ternary operator\" (short hand if...else) in Java.",
      "examples": [
        "if (condition) { // block of code to be executed if the condition is true }",
        "if (20 > 18) { println(\"20 is greater than 18\") }",
        "val x = 20 val y = 18 if (x > y) { println(\"x is greater than y\") }",
        "if (condition) { // block of code to be executed if the condition is true } else { // block of code to be executed if the condition is false }",
        "val time = 20 if (time < 18) { println(\"Good day.\") } else { println(\"Good evening.\") } // Outputs \"Good evening.\"",
        "if (condition1) { // block of code to be executed if condition1 is true } else if (condition2) { // block of code to be executed if the condition1 is false and condition2 is true } else { // block of code to be executed if the condition1 is false and condition2 is false }",
        "val time = 22 if (time < 10) { println(\"Good morning.\") } else if (time < 20) { println(\"Good day.\") } else { println(\"Good evening.\") } // Outputs \"Good evening.\"",
        "val time = 20 val greeting = if (time < 18) { \"Good day.\" } else { \"Good evening.\" } println(greeting)",
        "fun main() { val time = 20 val greeting = if (time < 18) \"Good day.\" else \"Good evening.\" println(greeting) }",
        "if",
        "else",
        "else if",
        "when",
        "if..else",
        "true",
        ">",
        "false",
        "{}"
      ]
    },
    {
      "title": "Kotlin When",
      "summary": "Kotlin when\nInstead of writing many if..else expressions, you can use the when expression, which is much easier to read.\nIt is used to select one of many code blocks to be executed:\nExample\nUse the weekday number to calculate the weekday name:\nThe when expression is similar to the switch statement in Java.\nThis is how it works:\nThe when variable (day) is evaluated once\nThe value of the day variable is compared with the values of each \"branch\"\nEach branch starts with a value, followed by an arrow (->) and a result\nIf there is a match, the associated block of code is executed\nelse is used to specify some code to run if there is no match\nIn the example above, the value of day is 4, meaning \"Thursday\" will be printed",
      "examples": [
        "val day = 4 val result = when (day) { 1 -> \"Monday\" 2 -> \"Tuesday\" 3 -> \"Wednesday\" 4 -> \"Thursday\" 5 -> \"Friday\" 6 -> \"Saturday\" 7 -> \"Sunday\" else -> \"Invalid day.\" } println(result) // Outputs \"Thursday\" (day 4)",
        "if..else",
        "when",
        "switch",
        "else",
        "day",
        "4"
      ]
    },
    {
      "title": "Kotlin While Loop",
      "summary": "Loops\nLoops can execute a block of code as long as a specified condition is reached.\nLoops are handy because they save time, reduce errors, and they make code more readable.\nKotlin While Loop\nThe while loop loops through a block of code as long as a specified condition is true:\nSyntax\nIn the example below, the code in the loop will run, over and over again, as long as the counter variable (i) is less than 5:\nExample\nNote: Do not forget to increase the variable used in the condition, otherwise the loop will never end.\nREMOVE ADS\nThe Do..While Loop\nThe do..while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.\nSyntax\nThe example below uses a do/while loop. The loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested:\nExample\nDo not forget to increase the variable used in the condition, otherwise the loop will never end!",
      "examples": [
        "while (condition) { // code block to be executed }",
        "var i = 0 while (i < 5) { println(i) i++ }",
        "do { // code block to be executed } while (condition);",
        "var i = 0 do { println(i) i++ } while (i < 5)",
        "while",
        "true",
        "do..while",
        "do/while"
      ]
    },
    {
      "title": "Kotlin Break and Continue",
      "summary": "Kotlin Break\nThe break statement is used to jump out of a loop.\nThis example jumps out of the loop when i is equal to 4:\nExample\nKotlin Continue\nThe continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.\nThis example skips the value of 4:\nExample",
      "examples": [
        "var i = 0 while (i < 10) { println(i) i++ if (i == 4) { break } }",
        "var i = 0 while (i < 10) { if (i == 4) { i++ continue } println(i) i++\n}",
        "break",
        "continue"
      ]
    },
    {
      "title": "Kotlin Arrays",
      "summary": "Kotlin Arrays\nArrays are used to store multiple values in a single variable, instead of creating separate variables for each value.\nTo create an array, use the arrayOf() function, and place the values in a comma-separated list inside it:\nAccess the Elements of an Array\nYou can access an array element by referring to the index number, inside square brackets.\nIn this example, we access the value of the first element in cars:\nExample\nNote: Just like with Strings, Array indexes start with 0: [0] is the first element. [1] is the second element, etc.\nChange an Array Element\nTo change the value of a specific element, refer to the index number:\nExample\nExample\nArray Length / Size\nTo find out how many elements an array have, use the size property:\nExample\nREMOVE ADS\nCheck if an Element Exists\nYou can use the in operator to check if an element exists in an array:\nExample\nLoop Through an Array\nOften when you work with arrays, you need to loop through all of the elements.\nYou can loop through the array elements with the for loop, which you will learn even more about in the next chapter.\nThe following example outputs all elements in the cars array:\nExample",
      "examples": [
        "val cars = arrayOf(\"Volvo\", \"BMW\", \"Ford\", \"Mazda\")",
        "val cars = arrayOf(\"Volvo\", \"BMW\", \"Ford\", \"Mazda\") println(cars[0]) // Outputs Volvo",
        "cars[0] = \"Opel\"",
        "val cars = arrayOf(\"Volvo\", \"BMW\", \"Ford\", \"Mazda\") println(cars.size) // Outputs 4",
        "val cars = arrayOf(\"Volvo\", \"BMW\", \"Ford\", \"Mazda\") if (\"Volvo\" in cars) { println(\"It exists!\") } else { println(\"It does not exist.\") }",
        "val cars = arrayOf(\"Volvo\", \"BMW\", \"Ford\", \"Mazda\") for (x in cars) { println(x) }",
        "val cars = arrayOf(\"Volvo\", \"BMW\", \"Ford\", \"Mazda\")\ncars[0] = \"Opel\"\nprintln(cars[0])\n// Now outputs Opel instead of Volvo",
        "arrayOf()",
        "size",
        "in",
        "for"
      ]
    },
    {
      "title": "Kotlin For Loop",
      "summary": "Kotlin For Loop\nOften when you work with arrays, you need to loop through all of the elements.\nTo loop through array elements, use the for loop together with the in operator:\nExample\nOutput all elements in the cars array:\nYou can loop through all kinds of arrays. In the example above, we used an array of strings.\nIn the example below, we loop through an array of integers:\nExample\nTraditional For Loop\nUnlike Java and other programming languages, there is no traditional for loop in Kotlin.\nIn Kotlin, the for loop is used to loop through arrays, ranges, and other things that contains a countable number of values.\nYou will learn more about ranges in the next chapter - which will create a range of values.",
      "examples": [
        "val cars = arrayOf(\"Volvo\", \"BMW\", \"Ford\", \"Mazda\") for (x in cars) { println(x) }",
        "val nums = arrayOf(1, 5, 10, 15, 20) for (x in nums) { println(x) }",
        "for",
        "in"
      ]
    },
    {
      "title": "Kotlin Ranges",
      "summary": "Kotlin Ranges\nWith the for loop, you can also create ranges of values with \"..\":\nExample\nPrint the whole alphabet:\nYou can also create ranges of numbers:\nExample\nNote: The first and last value is included in the range.\nCheck if a Value Exists\nYou can also use the in operator to check if a value exists in a range:\nExample\nExample\nREMOVE ADS\nBreak or Continue a Range\nYou can also use the break and continue keywords in a range/for loop:\nExample\nStop the loop when nums is equal to 10:\nExample\nSkip the value of 10 in the loop, and continue with the next iteration:",
      "examples": [
        "for (chars in 'a'..'x') { println(chars) }",
        "for (nums in 5..15) { println(nums) }",
        "val nums = arrayOf(2, 4, 6, 8) if (2 in nums) { println(\"It exists!\") } else { println(\"It does not exist.\") }",
        "val cars = arrayOf(\"Volvo\", \"BMW\", \"Ford\", \"Mazda\") if (\"Volvo\" in cars) { println(\"It exists!\") } else { println(\"It does not exist.\") }",
        "for (nums in 5..15) { if (nums == 10) { break } println(nums) }",
        "for (nums in 5..15) { if (nums == 10) { continue } println(nums) }",
        "for",
        "..",
        "in",
        "break",
        "continue",
        "nums",
        "10"
      ]
    },
    {
      "title": "Kotlin Functions",
      "summary": "A function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nFunctions are used to perform certain actions, and they are also known as methods.\nPredefined Functions\nSo it turns out you already know what a function is. You have been using it the whole time through this tutorial!\nFor example, println() is a function. It is used to output/print text to the screen:\nExample\nCreate Your Own Functions\nTo create your own function, use the fun keyword, and write the name of the function, followed by parantheses ():\nExample\nCreate a function named \"myFunction\" that should output some text:\nCall a Function\nNow that you have created a function, you can execute it by calling it.\nTo call a function in Kotlin, write the name of the function followed by two parantheses ().\nIn the following example, myFunction() will print some text (the action), when it is called:\nExample\nA function can be called multiple times, if you want:\nExample\nREMOVE ADS\nFunction Parameters\nInformation can be passed to functions as parameter.\nParameters are specified after the function name, inside the parentheses. You can add as many parameters as you want, just separate them with a comma. Just note that you must specify the type of each parameter (Int, String, etc).\nThe following example has a function that takes a String called fname as parameter. When the function is called, we pass along a first name, which is used inside the function to print the full name:\nExample\nWhen a parameter is passed to the function, it is called an argument. So, from the example above: fname is a parameter, while John, Jane and George are arguments.\nMultiple Parameters\nYou can have as many parameters as you like:\nExample\nNote: When working with multiple parameters, the function call must have the same number of arguments as there are parameters, and the arguments must be passed in the same order.\nReturn Values\nIn the examples above, we used functions to output a value. In the following example, we will use a function to return a value and assign it to a variable.\nTo return a value, use the return keyword, and specify the return type after the function's parantheses (Int in this example):\nExample\nA function with one Int parameter, and Int return type:\nUsing two parameters:\nExample\nA function with two Int parameters, and Int return type:\nShorter Syntax for Return Values\nThere is also a shorter syntax for returning values. You can use the = operator instead of return without specifying the return type. Kotlin is smart enough to automatically find out what it is:\nExample",
      "examples": [
        "fun main() { println(\"Hello World\") }",
        "fun myFunction() { println(\"I just got executed!\") }",
        "fun main() { myFunction() // Call myFunction } // Outputs \"I just got executed!\"",
        "fun main() { myFunction() myFunction() myFunction() } // I just got executed! // I just got executed! // I just got executed!",
        "fun myFunction(fname: String) { println(fname + \" Doe\") } fun main() { myFunction(\"John\") myFunction(\"Jane\") myFunction(\"George\") } // John Doe // Jane Doe // George Doe",
        "fun myFunction(fname: String, age: Int) { println(fname + \" is \" + age) } fun main() { myFunction(\"John\", 35) myFunction(\"Jane\", 32) myFunction(\"George\", 15) } // John is 35 // Jane is 32 // George is 15",
        "fun myFunction(x: Int): Int { return (x + 5) } fun main() { var result = myFunction(3) println(result) } // 8 (3 + 5)",
        "fun myFunction(x: Int, y: Int): Int { return (x + y) } fun main() { var result = myFunction(3, 5) println(result) } // 8 (3 + 5)",
        "fun myFunction(x: Int, y: Int) = x + y fun main() { var result = myFunction(3, 5) println(result) } // 8 (3 + 5)",
        "println()",
        "fun",
        "myFunction()",
        "String",
        "fname",
        "John",
        "Jane",
        "George",
        "return",
        "Int",
        "="
      ]
    },
    {
      "title": "Kotlin OOP",
      "summary": "Kotlin - What is OOP?\nOOP stands for Object-Oriented Programming.\nProcedural programming is about writing procedures or methods that perform operations on the data, while object-oriented programming is about creating objects that contain both data and methods.\nObject-oriented programming has several advantages over procedural programming:\nOOP is faster and easier to execute\nOOP provides a clear structure for the programs\nOOP helps to keep the Kotlin code DRY \"Don't Repeat Yourself\", and makes the code easier to maintain, modify and debug\nOOP makes it possible to create full reusable applications with less code and shorter development time\nTip: The \"Don't Repeat Yourself\" (DRY) principle is about reducing the repetition of code. You should extract out the codes that are common for the application, and place them at a single place and reuse them instead of repeating it.\nKotlin - What are Classes and Objects?\nClasses and objects are the two main aspects of object-oriented programming.\nLook at the following illustration to see the difference between class and objects:\nclass\nFruit\nobjects\nApple\nBanana\nMango\nAnother example:\nclass\nCar\nobjects\nVolvo\nAudi\nToyota\nSo, a class is a template for objects, and an object is an instance of a class.\nWhen the individual objects are created, they inherit all the variables and methods from the class.\nYou will learn much more about classes and objects in the next chapter.",
      "examples": []
    },
    {
      "title": "Kotlin Classes and Objects",
      "summary": "Kotlin Classes/Objects\nEverything in Kotlin is associated with classes and objects, along with its properties and functions. For example: in real life, a car is an object. The car has properties, such as brand, weight and color, and functions, such as drive and brake.\nA Class is like an object constructor, or a \"blueprint\" for creating objects.\nCreate a Class\nTo create a class, use the class keyword, and specify the name of the class:\nExample\nCreate a Car class along with some properties (brand, model and year)\nA property is basically a variable that belongs to the class.\nGood to Know: It is considered good practice to start the name of a class with an upper case letter, for better organization.\nCreate an Object\nNow we can use the class named Car to create objects.\nIn the example below, we create an object of Car called c1, and then we access the properties of c1 by using the dot syntax (.), just like we did to access array and string properties:\nExample\nREMOVE ADS\nMultiple Objects\nYou can create multiple objects of one class:\nExample",
      "examples": [
        "class Car { var brand = \"\" var model = \"\" var year = 0 }",
        "// Create a c1 object of the Car class val c1 = Car() // Access the properties and add some values to it c1.brand = \"Ford\" c1.model = \"Mustang\" c1.year = 1969 println(c1.brand) // Outputs Ford println(c1.model) // Outputs Mustang println(c1.year) // Outputs 1969",
        "val c1 = Car() c1.brand = \"Ford\" c1.model = \"Mustang\" c1.year = 1969 val c2 = Car() c2.brand = \"BMW\" c2.model = \"X5\" c2.year = 1999 println(c1.brand) // Ford println(c2.brand) // BMW",
        "class",
        "."
      ]
    },
    {
      "title": "Kotlin Constructors",
      "summary": "Kotlin Constructor\nIn the previous chapter, we created an object of a class, and specified the properties inside the class, like this:\nExample\nIn Kotlin, there's a faster way of doing this, by using a constructor.\nA constructor is like a special function, and it is defined by using two parantheses () after the class name. You can specify the properties inside of the parantheses (like passing parameters into a regular function).\nThe constructor will initialize the properties when you create an object of a class. Just remember to specify the type of the property/variable:\nExample\nNow it's even easier to specify multiple objects of one class:\nExample",
      "examples": [
        "class Car { var brand = \"\" var model = \"\" var year = 0 } fun main() { val c1 = Car() c1.brand = \"Ford\" c1.model = \"Mustang\" c1.year = 1969 }",
        "class Car(var brand: String, var model: String, var year: Int) fun main() { val c1 = Car(\"Ford\", \"Mustang\", 1969) }",
        "class Car(var brand: String, var model: String, var year: Int) fun main() { val c1 = Car(\"Ford\", \"Mustang\", 1969) val c2 = Car(\"BMW\", \"X5\", 1999) val c3 = Car(\"Tesla\", \"Model S\", 2020) }",
        "()"
      ]
    },
    {
      "title": "Kotlin Class Functions",
      "summary": "Kotlin Class Functions\nYou can also use functions inside a class, to perfom certain actions:\nExample\nCreate a drive() function inside the Car class and call it:\nTip: When a function is declared inside a class, it is known as a class function, or member function.\nNote: When an object of the class is created, it has access to all of the class functions.\nClass Function Parameters\nJust like with regular functions, you can pass parameters to a class function:\nExample\nCreate two functions: drive() and speed(), and pass parameters to the speed() function:",
      "examples": [
        "class Car(var brand: String, var model: String, var year: Int) { // Class function fun drive() { println(\"Wrooom!\") } } fun main() { val c1 = Car(\"Ford\", \"Mustang\", 1969) // Call the function c1.drive() }",
        "class Car(var brand: String, var model: String, var year: Int) { // Class function fun drive() { println(\"Wrooom!\") } // Class function with parameters fun speed(maxSpeed: Int) { println(\"Max speed is: \" + maxSpeed) } } fun main() { val c1 = Car(\"Ford\", \"Mustang\", 1969) // Call the functions c1.drive() c1.speed(200) }",
        "drive()",
        "Car",
        "speed()"
      ]
    },
    {
      "title": "Kotlin Inheritance",
      "summary": "Kotlin Inheritance (Subclass and Superclass)\nIn Kotlin, it is possible to inherit class properties and functions from one class to another. We group the \"inheritance concept\" into two categories:\nsubclass (child) - the class that inherits from another class\nsuperclass (parent) - the class being inherited from\nIn the example below, MyChildClass (subclass) inherits the properties from the MyParentClass class (superclass):\nExample\nExample Explained\nUse the open keyword in front of the superclass/parent, to make this the class other classes should inherit properties and functions from.\nTo inherit from a class, specify the name of the subclass, followed by a colon :, and then the name of the superclass.\n- It is useful for code reusability: reuse properties and functions of an existing class when you create a new class.",
      "examples": [
        "// Superclass\nopen class MyParentClass { val x = 5 } // Subclass class MyChildClass: MyParentClass() { fun myFunction() { println(x) // x is now inherited from the superclass } } // Create an object of MyChildClass and call myFunction fun main() { val myObj = MyChildClass() myObj.myFunction() }",
        "MyChildClass",
        "MyParentClass",
        "open",
        ":"
      ]
    },
    {
      "title": "Kotlin Examples",
      "summary": "Kotlin Syntax and Output\nKotlin Comments\nKotlin Variables\nKotlin Data Types\nKotlin Operators\nREMOVE ADS\nKotlin Strings\nKotlin Booleans\nKotlin If...Else\nKotlin When\nKotlin While Loop\nKotlin While Loop\nKotlin Arrays\nKotlin For Loops\nKotlin Ranges\nKotlin Functions\nKotlin Classes",
      "examples": []
    },
    {
      "title": "Kotlin Compiler",
      "summary": "Kotlin Compiler (Editor)\nWith our online Kotlin compiler, you can edit Kotlin code, and view the result in your browser.\nExample\nClick on the \"Try it Yourself\" button to see how it works.\nKotlin Compiler Explained\nThe window to the left is editable - edit the code and click on the \"Run\" button to view the result in the right window.\nThe icons are explained in the table below:\nIf you don't know Kotlin, we suggest that you read our Kotlin Tutorial from scratch.",
      "examples": [
        "fun main() {\nprintln(\"Hello World\")\n}",
        "Hello World"
      ]
    },
    {
      "title": "Kotlin Exercises",
      "summary": "You can test your Kotlin skills with W3Schools' Exercises.\nExercises\nWe have gathered a variety of Kotlin exercises (with answers) for each Kotlin Chapter.\nTry to solve an exercise by editing some code, or show the answer to see what you've done wrong.\nCount Your Score\nYou will get 1 point for each correct answer. Your score and total score will always be displayed.\nStart Kotlin Exercises\nGood luck!\nStart Kotlin Exercises ❯\nIf you don't know Kotlin, we suggest that you read our Kotlin Tutorial from scratch.",
      "examples": []
    },
    {
      "title": "Kotlin Quiz",
      "summary": "You can test your Kotlin skills with W3Schools' Quiz.\nThe Test\nThe test contains 25 questions and there is no time limit.\nThe test is not official, it's just a nice way to see how much you know, or don't know, about Kotlin.\nCount Your Score\nYou will get 1 point for each correct answer. At the end of the Quiz, your total score will be displayed. Maximum score is 25 points.\nStart the Quiz\nGood luck!\nStart the Kotlin Quiz ❯\nIf you do not know Kotlin, we suggest that you read our Kotlin Tutorial from scratch.",
      "examples": []
    },
    {
      "title": "Kotlin Syllabus",
      "summary": "Introduction\nThe W3Schools Kotlin Tutorial is comprehensive and beginner-friendly.\nIt will give you a fundamental knowledge of Kotlin programming.\nIt is designed for beginners and requires no prior programming experience.\nThe content has been carefully made to be bite-sized, simple, and easy to understand.\nThe content has been proven by millions of users over the years. It is updated and improved frequently.\nThe syllabus outline and its sequence are structured so you can learn Kotlin step by step, from the introduction to advanced features.\nGet Started With Kotlin »\nLearning Outcomes\nLearn what Kotlin is and set up your environment\nUnderstand Kotlin syntax and basic concepts\nWork with variables and data types\nUse operators and control flow (if, when, while)\nCreate and use arrays and loops\nWrite functions in Kotlin\nLearn object-oriented programming with classes\nWork with constructors and inheritance\nCreate class functions and objects\nNote: Are you a teacher teaching Kotlin? W3Schools Academy is a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more about Academy here.\nWhich Subjects Are Kotlin Relevant For?\nAndroid Development:\nKotlin is one of the preferred languages for Android app development.\nMobile Development:\nKotlin enables cross-platform mobile development.\nServer-side Development:\nKotlin works well for backend services.\nWeb Development:\nKotlin can be used for full-stack web development.\nData Science:\nKotlin supports data analysis and processing.\nDesktop Applications:\nKotlin can create desktop applications.\nMulti-platform Development:\nKotlin enables sharing code across platforms.\nGet Started\nActivities\nIn this tutorial we offer different activities for you to learn Kotlin for free:\nLessons\nExercises\nQuizzes\nSign in to Track Progress\nYou can also create a free account to track your progress.\nAs a signed-in user, you get access to features such as:\nLearning paths\nSandbox and lab environments\nAchievements\nAnd much more!\nSign Up - It's free\nOverview of the Modules\nKotlin HOME\nKotlin Intro\nKotlin Get Started\nKotlin Syntax\nKotlin Output\nKotlin Comments\nKotlin Variables\nKotlin Data Types\nKotlin Operators\nKotlin Strings\nKotlin Booleans\nKotlin If...Else\nKotlin When\nKotlin While Loop\nKotlin Break/Continue\nKotlin Arrays\nKotlin For Loop\nKotlin Ranges\nKotlin Functions\nKotlin OOP\nKotlin Classes/Objects\nKotlin Constructors\nKotlin Class Functions\nKotlin Inheritance\nGet Started\nSandbox and Lab Environment\nKotlin, like any programming language, is best learned through hands-on practice.\nTry this example using our editor:\nExample\nThe Try It's Yourself feature is available for you to throughout the tutorial.\nKotlin Certification\nW3Schools offers an end-of-pathway certification program.\nHere you can take exams to get certified.\nThe Kotlin exam is a test that summarizes the W3Schools Kotlin syllabus.\nAfter passing the exam you get the \"Certified Kotlin Developer\" Certification.\nThere are two different types of certifications:\nNon-adaptive\nAdaptive\nThe non-adaptive is pass or no pass.\nThe adaptive certification is adaptive and graded; students will get a grade from intermediate, advanced to professional.\nBuy Certificate »\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach Kotlin?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo »",
      "examples": [
        "fun main() { println(\"Hello World\") }"
      ]
    },
    {
      "title": "Kotlin Study Plan",
      "summary": "Introduction\nThe Kotlin study plan helps you teach your students Kotlin step-by-step.\nCreating a study plan for Kotlin is easy.\nYou can use a pre-built study plan or customize it.\nStudents have different skill levels. The study plans can be customized to ensure that everyone is challenged.\nSave time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of Kotlin to the final exam.\nW3Schools Academy\nThis study plan is a feature of W3Schools Academy.\nW3Schools Academy is a platform that has everything you need to teach coding, all in one place.\nIt offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom.\nYou need to have an active subscription to access the study plan feature. There are two different subscription tiers:\nEssentials ($1.99 / month per student)\nFull Access ($5.99 / month per student)\nCalculate your price and order here.\nLearn More »\nAcademy also offer other features such as:\nManaging your classroom\nTracking of student progress and reports\nLabs, assignments, and code challenges (prebuilt challenges or create your own ones)\nAuto-grading\nTeaching materials\nCertification exams\nGet a free demo »\nTeacher Materials\nW3Schools has everything you need to teach Kotlin.\nThe Kotlin training materials is available for you to include and use in your study plan:\nW3Schools Kotlin Tutorial\nKotlin Exercises\nKotlin Quiz\nKotlin Challenges (Coding challenges)\nKotlin Certification Exam (End of Pathway Exam)\nKotlin Syllabus\nWith the Kotlin Syllabus, your students will start with the basics, like understanding variables, data types, and simple syntax, and move to more advanced topics, like working with functions, classes, and null safety. Each chapter includes simple examples, try-it-yourself sections, exercises, and quizzes to make learning easy, interactive, and fun.\nRead more about Kotlin Syllabus.\nStudy Plan Overview\nThe study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level.\nLearning Paths\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nInteractive Content\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTimeline and Pace\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nTrack Student Progress\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nEnd of Pathway Exam\nThe Kotlin study plan aligns with the Kotlin Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the Kotlin Tutorial.\nYou get reports of the students' results.\nThe Kotlin study plan aligns with the Kotlin Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the Kotlin Tutorial.\nYou get reports of the students' results.\nAccessibility\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nLearn More »\nSample Study Plan\nYou choose the timeline and pace of your study plans.\nSchools have different preferences.\nSome would like more intensive pace, e.g. 3 weeks, others 12 or more weeks.\nIt is completely up to you.\nFor example, this is how a 3-week Kotlin study plan could look like:\nWeek 1: Fundamentals, Variables, Data Types & Operators\nWeek 2: Conditionals, Arrays, Loops\nWeek 3: Functions, Classes, Kotlin Certification Exam\nImage of Sample Kotlin study plan:\nReady to get started?\nStart with Kotlin Study Plans today.\nGet Started »\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach Kotlin programming?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo »",
      "examples": []
    },
    {
      "title": "W3Schools Kotlin Certificate",
      "summary": "W3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nW3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nWho Should Consider Getting Certified?\nAny student or professional within the digital industry.\nCertifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market.\nW3Schools is Trusted by Top Companies\nW3Schools has over two decades of experience with teaching coding online.\nOur certificates are recognized and valued by companies looking to employ skilled developers.\nSave Time and Money\nShow the world your coding skills by getting a certification.\nThe prices is a small fraction compared to the price of traditional education.\nDocument and validate your competence by getting certified!\nExam overview\nFee: 95 USD\nAchievable certification levels:\nIntermediate (40%)\nAdvanced (75%)\nProfessional (90%)\nNumber of questions:\nAdaptive, 60 on average\nRequirement to pass:\nMinimum 40% - Intermediate level\nTime limit: 60 minutes\nNumber of attempts to pass: 3\nExam deadline: None\nCertification Expiration: None\nFormat: Online, multiple choice\nRegister now »\nAdvance Faster in Your Career\nGetting a certificate proves your commitment to upgrading your skills.\nThe certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on.\nIt gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nKnowledge is power, especially in the current job market.\nDocumentation of your skills enables you to advance your career or helps you to start a new one.\nHow Does It Work?\nStudy for free at W3Schools.com\nStudy at your own speed\nTest your skills with W3Schools online quizzes\nApply for your certificate by paying an exam fee\nTake your exam online, at any time, and from any location\nGet Your Certificate and Share It With The World\nExample certificate:\nEach certificate gets a unique link that can be shared with others.\nValidate your certification with the link or QR code.\nCheck how it looks like in this Example.\nShare your certificate on Linked in the Certifications section in just one click!\nDocument Your Skills\nGetting a certificate proves your commitment to upgrade your skills, gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nGet Your Certificate »\nLooking to add multiple users?\nAre you an educator, manager or business owner looking for courses or certifications?\nWe are working with schools, companies and organizations from all over the world.\nGet courses and/or certifications for your team here.",
      "examples": []
    }
  ],
  "glossary": [
    "backend",
    "download kotlin",
    "exercise",
    "exercises",
    "free",
    "javascript",
    "kotlin arrays",
    "kotlin booleans",
    "kotlin classes",
    "kotlin comments",
    "kotlin compiler",
    "kotlin constructors",
    "kotlin exercises",
    "kotlin functions",
    "kotlin home",
    "kotlin if...else",
    "kotlin inheritance",
    "kotlin intro",
    "kotlin oop",
    "kotlin operators",
    "kotlin output",
    "kotlin quiz",
    "kotlin ranges",
    "kotlin strings",
    "kotlin syllabus",
    "kotlin syntax",
    "kotlin variables",
    "kotlin when",
    "note",
    "programs",
    "report error",
    "w3.css",
    "w3schools spaces"
  ]
}