{
  "course_name": "Git",
  "description": "Tip: Sign in to track your progress - it's free. Git works on your computer, but you also use it with online services like GitHub, GitLab, or Bitbucket to share your work with others. These are called remote repositories. In this tutorial, you'll learn how to use Git for your own projects and how to connect with remote repositories online. In this tutorial, we will show you Git commands like this: For new users, using the terminal view can seem a bit complicated. Don't worry! We will keep it really simple, and learning this way gives you a good grasp of how Git works. In the code above, you can see commands (input) and output. Lines like this are commands we input: Lines like this are the output/response to our commands: In general, lines with $ in front of it is input. These are the commands you can copy and run in your terminal. Tip for Beginners: Don't worry about making mistakes! When you use Git on your own computer, you can't really break anything important.",
  "course_summary": [
    {
      "title": "Git and GitHub Introduction",
      "summary": "What is Git?\nGit is a popular version control system.\nIt was created by Linus Torvalds in 2005, and has been maintained by Junio Hamano since then.\nIt is used for:\nTracking code changes\nTracking who made changes\nCoding collaboration\nKey Git Concepts\nRepository: A folder where Git tracks your project and its history.\nClone: Make a copy of a remote repository on your computer.\nStage: Tell Git which changes you want to save next.\nCommit: Save a snapshot of your staged changes.\nBranch: Work on different versions or features at the same time.\nMerge: Combine changes from different branches.\nPull: Get the latest changes from a remote repository.\nPush: Send your changes to a remote repository.\nWorking with Git\nInitialize Git on a folder, making it a Repository\nGit now creates a hidden folder to keep track of changes in that folder\nWhen a file is changed, added or deleted, it is considered modified\nYou select the modified files you want to Stage\nThe Staged files are Committed, which prompts Git to store a permanent snapshot of the files\nGit allows you to see the full history of every commit.\nYou can revert back to any previous commit.\nGit does not store a separate copy of every file in every commit, but keeps track of changes made in each commit!\nREMOVE ADS\nWhy Git?\nOver 70% of developers use Git!\nDevelopers can work together from anywhere in the world.\nDevelopers can see the full history of the project.\nDevelopers can revert to earlier versions of a project.\nNote: Most Git actions (like staging, committing, and viewing history) happen on your own computer.\nOnly Push and Pull interact with remote servers like GitHub, GitLab, or Bitbucket to upload or download changes.\nChange Platform:\nWhat is GitHub?\nGit is not the same as GitHub.\nGitHub makes tools that use Git.\nGitHub is the largest host of source code in the world, and has been owned by Microsoft since 2018.\nIn this tutorial, we will focus on using Git with GitHub.",
      "examples": []
    },
    {
      "title": "Git Install",
      "summary": "How to Install Git\nYou can download Git for free from git-scm.com.\nWindows: Download and run the installer.\nClick “Next” to accept the recommended settings.\nThis will install Git and Git Bash.\nmacOS: If you use Homebrew, open Terminal and type brew install git.\nOr, download the .dmg file and drag Git to your Applications folder.\nLinux: Open your terminal and use your package manager.\nFor example, on Ubuntu: sudo apt-get install git\nAfter installation, you will be able to use Git from your terminal or command prompt.\nTip for Beginners: Installing Git is safe and you can always uninstall it later if you want.\nGit Bash\nGit Bash is a terminal for Windows that lets you use Git commands.\nLook at our Bash Tutorial to learn more about Bash.\nAfter installing Git, you can find Git Bash in your Start menu.\nYou can use Git Bash just like the Command Prompt, but with extra Unix commands (like ls and pwd).\nExample: Open Git Bash\nClick Start, type \"Git Bash\", and open the app.\nExample: First Command in Git Bash\nThis command lists the files in your current folder.\nREMOVE ADS\nVerifying Your Installation\nAfter installing, check that Git works by opening your terminal (or Git Bash on Windows) and running:\nExample: Check Git Version\nIf Git is installed, you will see something like git version X.Y.Z\nIf you see an error, try closing and reopening your terminal, or check that Git is in your PATH.\nDefault Editor\nDuring installation, Git asks you to pick a default text editor.\nThis is the program that will open when you need to write messages (like for commits).\nExample: Set VS Code as Default Editor\nIf you're not sure, just pick the default (Notepad on Windows). You can always change this later.\nExample: Set Notepad as Default Editor\nPATH Environment\nChoosing to add Git to your PATH means you can use Git commands in any terminal window.\nThis is highly recommended for most users to do this during installation.\nIf you skip this, you'll only be able to use Git in Git Bash (on Windows) or Terminal (on macOS and Linux).\nExample: Check if Git is in PATH\nIf you see an error, you need to add Git to your PATH.\nHow to Add Git to PATH after Installation\nWindows:\n\nIf you missed the option during installation, search for \"Environment Variables\" in the Start menu and open it.\nClick \"Environment Variables...\" and find the \"Path\" variable under \"System variables\".\nClick \"Edit\", then \"New\", and add the path to your Git bin and cmd folders\n(e.g., C:\\Program Files\\Git\\bin and C:\\Program Files\\Git\\cmd).\nClick OK to save. Restart your terminal.\nIf you missed the option during installation, search for \"Environment Variables\" in the Start menu and open it.\nClick \"Environment Variables...\" and find the \"Path\" variable under \"System variables\".\nClick \"Edit\", then \"New\", and add the path to your Git bin and cmd folders\n(e.g., C:\\Program Files\\Git\\bin and C:\\Program Files\\Git\\cmd).\nClick OK to save. Restart your terminal.\nmacOS:\n\nIf you installed with Homebrew, your PATH is usually set automatically.\nIf not, open Terminal and add this line to your ~/.zshrc or ~/.bash_profile:\nexport PATH=\"/usr/local/bin:$PATH\"\nSave the file and run source ~/.zshrc or source ~/.bash_profile.\nIf you installed with Homebrew, your PATH is usually set automatically.\nIf not, open Terminal and add this line to your ~/.zshrc or ~/.bash_profile:\nexport PATH=\"/usr/local/bin:$PATH\"\nSave the file and run source ~/.zshrc or source ~/.bash_profile.\nLinux:\n\nMost package managers add Git to PATH automatically.\nIf not, add this line to your ~/.bashrc or ~/.profile:\nexport PATH=\"/usr/bin:$PATH\"\nSave the file and run source ~/.bashrc or source ~/.profile.\nMost package managers add Git to PATH automatically.\nIf not, add this line to your ~/.bashrc or ~/.profile:\nexport PATH=\"/usr/bin:$PATH\"\nSave the file and run source ~/.bashrc or source ~/.profile.\nAfter adding Git to your PATH, open a new terminal window and run git --version to check that it works everywhere.\nLine Endings\nGit can convert line endings in text files.\nOn Windows, it's usually best to select \"Checkout Windows-style, commit Unix-style line endings\".\nThis helps prevent problems when you share code with people using different operating systems.\nUpdating or Uninstalling Git\nUpdate: Download and run the latest installer, or use your package manager\n(e.g., brew upgrade git or sudo apt-get upgrade git).\nIt's a good idea to keep Git up to date for the latest features and security fixes.\nUninstall: Use \"Add or Remove Programs\" on Windows, or your package manager on Mac/Linux.\nTroubleshooting Git Installation\nIf you run into problems installing or running Git, don't worry!\nHere are solutions to some of the most common issues.\nTip: If something doesn't work right away, try closing and reopening your terminal, or restarting your computer.\nCommon Installation Issues\n\"git is not recognized as an internal or external command\"\nSolution: Git is not in your system's PATH. Make sure you installed Git and restart your terminal.\nIf needed, add Git's bin folder (usually C:\\Program Files\\Git\\bin) to your PATH.\nIf it still doesn't work, try restarting your computer.\nPermission errors (\"Permission denied\")\nSolution: On Windows, run Git Bash or your terminal as administrator.\nOn macOS/Linux, use sudo if necessary.\nSSL or HTTPS errors when cloning/pushing\nSolution: Check your internet connection.\nMake sure your Git version is up to date.\nWrong version of Git\nSolution: Check your installed version with git --version.\nDownload the latest version from git-scm.com if needed.",
      "examples": [
        "ls Desktop Documents Downloads Pictures",
        "git --version git version 2.43.0.windows.1",
        "git config --global core.editor \"code --wait\"",
        "git config --global core.editor \"notepad\"",
        "export PATH=\"/usr/local/bin:$PATH\"",
        "export PATH=\"/usr/bin:$PATH\"",
        "brew install git",
        "sudo apt-get install git",
        "ls",
        "pwd",
        "git version X.Y.Z",
        "bin",
        "cmd",
        "C:\\Program Files\\Git\\bin",
        "C:\\Program Files\\Git\\cmd",
        "~/.zshrc",
        "~/.bash_profile",
        "source ~/.zshrc",
        "source ~/.bash_profile",
        "~/.bashrc",
        "~/.profile",
        "source ~/.bashrc",
        "source ~/.profile",
        "git --version",
        "brew upgrade git",
        "sudo apt-get upgrade git",
        "sudo"
      ]
    },
    {
      "title": "Git Config",
      "summary": "Configure Git\nNow let Git know who you are.\nThis is important for version control systems, as each Git commit uses this information:\nTip for Beginners: Configuring Git is safe.\nYou can change these settings at any time, they only affect how your name and email appear in your commits.\nUser Name\nYour name will be attached to your commits. Set it with:\nExample\nNote: If you make a typo or mistake, just run the command again with the correct value.\nThe new setting will overwrite the old one.\nEmail Address\nYour email is also attached to your commits. Set it with:\nExample\nChange the user name and email to your own.\nYou will probably also want to use this when registering to GitHub later on.\nNote: If you forget to set your name or email, Git will prompt you the first time you try to commit.\nYou can always change these settings later, and previous commits will keep the old info.\nUse --global to set the value for every repository on your computer.\nUse --local (the default) to set it only for the current repository.\nWhy Configure Git?\nGit uses your name and email to label your commits.\nIf you do not set these, Git will prompt you the first time you try to commit.\nNow you have added the minimum of configuration needed to start using Git.\nSo feel free to continue with the next chapter.\nFor more information about configuration, or if you want to change anything, keep reading this page.\nREMOVE ADS\nViewing Your Configuration\nYou can see all your Git settings with:\nExample: List All Settings\nTo view a specific value, use:\nExample: View a Specific Setting\nChanging or Unsetting Config Values\nTo change a value, just run the git config command again with the new value.\nTo remove a setting, use --unset:\nExample: Unset an Alias\nDefault Branch Name\nSet the default branch name for new repositories (for example, main instead of master):\nExample: Set Default Branch Name\nConfiguration Levels\nThere are three levels of configuration:\nSystem (all users): git config --system\nGlobal (current user): git config --global\nLocal (current repo): git config --local\nThe order of precedence is:\nLocal (current repo)\nGlobal (current user)\nSystem (all users)\nThe reason to use the different levels is that you can set different values for different users or repositories.\nThis can be used for example to set different default branches for different repositories and users.\nExample: Set a Local Config\nLocal settings only apply to the current repository.\nExample: Set a Global Config\nGlobal settings apply to all repositories for the current user.\nExample: Set a System Config\nSystem settings apply to all repositories for all users.",
      "examples": [
        "git config --global user.name \"Your Name\"",
        "git config --global user.email \"you@example.com\"",
        "git config --list user.name=Your Name user.email=you@example.com core.editor=code --wait alias.st=status init.defaultbranch=main ...",
        "git config user.name Your Name",
        "git config --global --unset code.editor",
        "git config --global init.defaultBranch main",
        "git config user.name \"Project Name\"",
        "git config --global user.name \"Global Name\"",
        "git config --system user.name \"System Name\"",
        "--global",
        "--local",
        "git config",
        "--unset",
        "main",
        "master",
        "git config --system",
        "git config --global",
        "git config --local"
      ]
    },
    {
      "title": "Git Getting Started",
      "summary": "Change Platform:\nGet Started with Git\nNow that Git is installed, and it knows who you are, you can start using Git.\nLets create our first repository\nKey Steps to Get Started\nCreate a project folder\nNavigate to the folder\nInitialize a Git repository\nCreating Git Folder\nStart by creating a new folder for our project:\nExample\nmkdir creates a new directory.\ncd changes our working directory.\nNow we are in the correct directory and can initialize Git!\nNote: Open Git Bash Here (Windows)\nIf you're using Windows, you can open Git Bash directly in your project folder:\nRight-click the folder in File Explorer\nSelect Git Bash Here\nThis opens a terminal window in the correct location.\nREMOVE ADS\nInitialize Git\nNow that we are in the correct folder, we can initialize Git on that folder:\nExample\nYou just created your first Git Repository!\nWhat is a Repository?\nA Git repository is a folder that Git tracks for changes.\nThe repository stores all your project's history and versions.\nWhat Happens When You Run git init?\nGit creates a hidden folder called .git inside your project.\nThis is where Git stores all the information it needs to track your files and history.\nExample: Show Hidden .git Folder (Linux/macOS)\nOn Windows, you may need to enable “Show hidden files” in File Explorer to see the .git folder.\nTroubleshooting\ngit: command not found\nSolution: Make sure Git is installed and added to your PATH. Restart your terminal if needed.\nPermission denied\nSolution: Try running your terminal as administrator (Windows) or use sudo (macOS/Linux) if needed.",
      "examples": [
        "mkdir myproject cd myproject",
        "git init Initialized empty Git repository in /Users/user/myproject/.git/",
        "ls -a . .. .git",
        "mkdir",
        "cd",
        "git init",
        ".git",
        "sudo"
      ]
    },
    {
      "title": "Git New Files",
      "summary": "Change Platform:\nWhat is a New File?\nA new file is a file that you have created or copied into your project folder, but haven't told Git to watch.\nHere are the key things to know:\nCreate a new file (with a text editor)\nls - List files in the folder\ngit status - Check which files are tracked\nUnderstand untracked and tracked files\nCreate a New File\nYour new Git repository is empty.\nLet's add a file using your favorite text editor, and save it in your project folder.\nIf you need help creating a file, see our HTML Editors page.\nFor this example, we'll use a simple HTML file:\nExample: Simple HTML File\nSave this as index.html in your project folder.\nREMOVE ADS\nList Files in the Directory\nTo see which files are in your project folder, use the ls command:\nExample\nls lists all files in the current folder.\nYou should see index.html in the output.\nCheck File Status with git status\nNow check if Git is tracking your new file:\nExample\nGit sees index.html, but it is untracked (not yet added to the repository).\nWhat is an Untracked File?\nAn untracked file is any file in your project folder that Git is not yet tracking.\nThese are files you've created or copied into the folder, but haven't told Git to watch.\nWhat is a Tracked File?\nA tracked file is a file that Git is watching for changes.\nTo make a file tracked, you need to add it to the staging area (covered in the next chapter).\nTroubleshooting\nFile not showing up with ls: Make sure you saved it in the correct folder.\nUse pwd to check your current directory.\nFile not listed in git status: Make sure you are in the correct folder and that you saved the file.",
      "examples": [
        "ls index.html",
        "git status On branch master No commits yet Untracked files:   (use \"git add\n...\" to include in what will be committed)     index.html nothing added to commit but untracked files present (use \"git add\" to track)",
        "<!DOCTYPE html>\n<html>\n<head>\n<title>Hello World!</title>\n</head>\n<body>\n\n<h1>Hello world!</h1>\n<p>This is the first file in my new Git Repo.</p>\n\n</body>\n</html>",
        "ls",
        "git status",
        "index.html",
        "pwd"
      ]
    },
    {
      "title": "Git Staging Environment",
      "summary": "Change Platform:\nWhat is the Staging Environment?\nThe staging environment (or staging area) is like a waiting room for your changes.\nYou use it to tell Git exactly which files you want to include in your next commit.\nThis gives you control over what goes into your project history.\nHere are some key commands for staging:\ngit add <file> - Stage a file\ngit add --all or git add -A - Stage all changes\ngit status - See what is staged\ngit restore --staged <file> - Unstage a file\nStage a File with git add\nTo add a file to the staging area, use git add <file>:\nExample\nNow index.html is staged. You can check what is staged with git status:\nExample\nREMOVE ADS\nStage Multiple Files (git add --all, git add -A)\nYou can stage all changes (new, modified, and deleted files) at once:\nExample\ngit add -A does the same thing as git add --all.\nCheck Staged Files with git status\nSee which files are staged and ready to commit:\nExample\nHow to Unstage a File\nIf you staged a file by mistake, you can remove it from the staging area (unstage it) with:\nExample\nNow index.html is no longer staged. You can also use git reset HEAD index.html for the same effect.\nTroubleshooting\nStaged the wrong file? Use git restore --staged <file> to unstage it.\nForgot to stage a file? Just run git add <file> again before you commit.\nNot sure what's staged? Run git status to see what will be committed.",
      "examples": [
        "git add index.html",
        "git status On branch master No commits yet Changes to be committed:   (use \"git restore --staged\n...\" to unstage)     new file: index.html",
        "git add --all",
        "git status On branch master No commits yet Changes to be committed: (use \"git restore --staged\n...\" to unstage) new file: README.md new file: bluestyle.css new file: index.html",
        "git restore --staged index.html",
        "git add <file>",
        "git add -A",
        "git status",
        "git restore --staged <file>",
        "git add",
        "index.html",
        "git reset HEAD index.html"
      ]
    },
    {
      "title": "Git Commit",
      "summary": "Change Platform:\nWhat is a Commit?\nA commit is like a save point in your project.\nIt records a snapshot of your files at a certain time, with a message describing what changed.\nYou can always go back to a previous commit if you need to.\nHere are some key commands for commits:\ngit commit -m \"message\" - Commit staged changes with a message\ngit commit -a -m \"message\" - Commit all tracked changes (skip staging)\ngit log - See commit history\nHow to Commit with a Message (-m)\nTo save your staged changes, use git commit -m \"your message\":\nExample\nAlways write a clear message so you and others can understand what changed.\nREMOVE ADS\nCommit All Changes Without Staging (-a)\nYou can skip the staging step for already tracked files with git commit -a -m \"message\".\nThis commits all modified and deleted files, but not new/untracked files.\nExample\nWarning: Skipping the staging step can make you include unwanted changes. Use with care.\nNote: git commit -a does\nnot\nwork for new/untracked files. You must use git add <file> first for new files.\nWhat happens if you try to commit a new file with -a?\nWrite Multi-line Commit Messages\nIf you just type git commit (no -m), your default editor will open so you can write a detailed, multi-line message:\nExample\nWrite a short summary on the first line, leave a blank line, then add more details below.\nCommit Message Best Practices:\nKeep the first line short (50 characters or less).\nUse the imperative mood (e.g., \"Add feature\" not \"Added feature\").\nLeave a blank line after the summary, then add more details if needed.\nDescribe why the change was made, not just what changed.\nOther Useful Commit Options\nCreate an empty commit:\ngit commit --allow-empty -m \"Start project\"\nUse previous commit message (no editor):\ngit commit --no-edit\nQuickly add staged changes to last commit, keep message:\ngit commit --amend --no-edit\nForgot to stage a file?\nIf you run git commit -m \"message\" but forgot to git add a file, just add it and commit again. Or use git commit --amend to add it to your last commit.\nTypo in your commit message?\nUse git commit --amend -m \"Corrected message\" to fix the last commit message.\nAccidentally committed the wrong files?\nYou can use git reset --soft HEAD~1 to undo the last commit and keep your changes staged.\nView Commit History (git log)\nTo view the history of commits for a repository, you can use the git log command:\nExample\nFor a shorter view, use git log --oneline:\nExample\nTo see which files changed in each commit, use git log --stat:\nExample",
      "examples": [
        "git commit -m \"First release of Hello World!\" [master (root-commit) 221ec6e] First release of Hello World! 3 files changed, 26 insertions(+) create mode 100644 README.md create mode 100644 bluestyle.css create mode 100644 index.html",
        "git commit -a -m \"Quick update to README\" [master 123abcd] Quick update to README 1 file changed, 2 insertions(+)",
        "$ git commit -a -m \"Try to commit new file\" On branch master No commits yet Untracked files: (use \"git add ...\" to include in what will be committed) index.html nothing added to commit but untracked files present (use \"git add\" to track)",
        "git commit",
        "git log commit 09f4acd3f8836b7f6fc44ad9e012f82faf861803 (HEAD -> master) Author: w3schools-test\nDate: Fri Mar 26 09:35:54 2021 +0100 Updated index.html with a new line commit 221ec6e10aeedbfd02b85264087cd9adc18e4b26 Author: w3schools-test\nDate: Fri Mar 26 09:13:07 2021 +0100 First release of Hello World!",
        "git log --oneline 09f4acd Updated index.html with a new line 221ec6e First release of Hello World!",
        "git log --stat",
        "git commit -m \"message\"",
        "git commit -a -m \"message\"",
        "git log",
        "-m",
        "git commit -m \"your message\"",
        "-a",
        "git commit -a",
        "git add <file>",
        "git commit --allow-empty -m \"Start project\"",
        "git commit --no-edit",
        "git commit --amend --no-edit",
        "git add",
        "git commit --amend",
        "git commit --amend -m \"Corrected message\"",
        "git reset --soft HEAD~1",
        "git log --oneline"
      ]
    },
    {
      "title": "Git Tagging",
      "summary": "Key Commands for Tagging\ngit tag <tagname> - Create a lightweight tag\ngit tag -a <tagname> -m \"message\" - Create an annotated tag\ngit tag <tagname> <commit-hash> - Tag a specific commit\ngit tag - List tags\ngit show <tagname> - Show tag details\nWhat is a Tag?\nA tag in Git is like a label or bookmark for a specific commit.\nTags are most often used to mark important points in your project history, like releases (v1.0 or v2.0).\nTags are a simple and reliable way to keep track of versions and share them with your team or users.\nSome common tag types include:\nReleases: Tags let you mark when your project is ready for release, so you (and others) can always find that exact version later.\nMilestones: Use tags to highlight major milestones, like when a big feature is finished or a bug is fixed.\nDeployment: Many deployment tools use tags to know which version of your code to deploy.\nHotfixes: If you need to fix an old version, tags make it easy to check out and patch the right code.\nCreate a Lightweight Tag\nA lightweight tag is just a name for a commit.\nIt's quick and simple, but does not store extra information.\nAnnotated vs Lightweight Tags\nAnnotated Tag: Stores author, date, and message.\nRecommended for releases and sharing with others.\nLightweight Tag: Just a simple name for a commit (no extra info, like a bookmark).\nExample\nREMOVE ADS\nCreate an Annotated Tag (-a -m)\nAn annotated tag stores your name, the date, and a message.\nThis is recommended for most uses.\nExample\nTag a Specific Commit\nYou can tag an older commit by specifying its hash:\nExample\nReplace 1a2b3c4d with the commit hash you want to tag.\nList Tags\nSee all tags in your repository:\nExample\nShow Tag Details (git show)\nSee details about a tag and the commit it points to:\nExample\nPush Tags to Remote\nBy default, tags exist only on your local computer.\nIf you want others to see your tags, you need to push them to your remote repository.\nIf you don't push your tags, only you will see them, and only locally.\nTo push a single tag to your remote repository (for example, after creating a release tag):\nExample: Push a Single Tag\nDid you know? Pushing commits with git push does\nnot\npush your tags!\nYou must push tags explicitly as shown above.\nTo push all your local tags to the remote at once (useful if you've created several tags):\nExample: Push All Tags\nDelete Tags\nDelete a tag locally:\nExample\nDelete a tag from the remote repository:\nExample\nUpdate or Replace a Tag (Force Push)\nIf you need to move a tag to a different commit and update the remote, use --force:\nExample\nTagging Best Practices\nUse tags to mark releases, major milestones, or stable points in your project.\nAlways use annotated tags (with -a -m) for anything public or shared.\nCreate tags after passing all tests or before deploying/releasing code.\nTroubleshooting\nTag already exists? Use git tag -d <tagname> to delete it, then re-create.\nPushed the wrong tag? Delete it locally and remotely, then push the correct tag.\nTag not showing on remote? Remember to push tags with git push origin <tagname> or git push --tags.\nNeed to overwrite a tag on the remote? You can force-push a tag with git push --force origin <tagname>, but be careful! This will overwrite the tag for everyone using the remote.",
      "examples": [
        "git tag v1.0",
        "git tag -a v1.0 -m \"Version 1.0 release\"",
        "git tag v1.1 1a2b3c4d",
        "git tag",
        "git show v1.0",
        "git push origin v1.0",
        "git push --tags",
        "git tag -d v1.0",
        "git push origin --delete tag v1.0",
        "git tag -f v1.0 <new-commit-hash> git push --force origin v1.0",
        "git tag <tagname>",
        "git tag -a <tagname> -m \"message\"",
        "git tag <tagname> <commit-hash>",
        "git show <tagname>",
        "v1.0",
        "v2.0",
        "-a -m",
        "1a2b3c4d",
        "git show",
        "git push",
        "--force",
        "git tag -d <tagname>",
        "git push origin <tagname>",
        "git push --force origin <tagname>"
      ]
    },
    {
      "title": "Git Stash",
      "summary": "Key Commands for Stashing\ngit stash - Stash your changes\ngit stash push -m \"message\" - Stash with a message\ngit stash list - List all stashes\ngit stash branch <branchname> - Create a branch from a stash\nWhat is Git Stash? Why Use It?\nSometimes you need to quickly switch tasks or fix a bug, but you're not ready to commit your work.\ngit stash lets you save your uncommitted changes and return to a clean working directory.\nYou can come back and restore your changes later.\nHere are some common use cases:\nSwitch branches safely: Save your work before changing branches.\nHandle emergencies: Stash your work to fix something urgent, then restore it.\nKeep your work-in-progress safe: Avoid messy commits or losing changes.\nStash Your Changes (git stash)\nSave your current changes (both staged and unstaged tracked files) with:\nTracked files (both staged and unstaged) are stashed by default.\nUntracked files (new files not yet added to Git) are\nnot\nstashed by default.\nTo stash untracked files too, use git stash -u (or --include-untracked).\nExample: Stash Your Work\nThis command saves your changes and cleans your working directory so you can safely switch tasks or branches.\nYour changes are now saved in a stack.\nWhat is a stash stack?\nEach time you run git stash, your changes are saved on top of a \"stack\".\nThe most recent stash is on top, and you can apply or drop stashes from the top down, or pick a specific one from the list.\nYour working directory is clean, and you can switch branches or pull updates safely.\nStash with a Message (git stash push -m)\nAdd a message to remember what you stashed:\nExample: Stash with a Message\nThis command lets you add a descriptive message to your stash so you can remember what you were working on.\nREMOVE ADS\nList All Stashes (git stash list)\nSee all your saved stashes:\nExample: List Stashes\nThis command shows all the stashes you have saved so far, with their names and messages.\nShow Stash Details (git stash show)\nSee what was changed in the latest stash:\nExample: Show Latest Stash\nThis command gives a summary of what files and changes are in your most recent stash.\nTo see a full diff:\nExample: Show Full Diff\nThis command shows the exact lines that were changed in your most recent stash.\nApply the Latest Stash (git stash apply)\nRestore your most recent stashed changes (keeps the stash in the stack):\nExample: Apply Latest Stash\nThis command restores your most recent stashed changes, but keeps the stash in the list so you can use it again if needed.\nApply a Specific Stash (git stash apply stash@{n})\nRestore a specific stash from the list:\nExample: Apply a Specific Stash\nThis command lets you restore a specific stash from your list, not just the most recent one.\nPop the Stash (git stash pop)\nApply the latest stash and remove it from the stack:\nExample: Pop the Stash\nThis command restores your most recent stash and removes it from the list at the same time.\nDrop a Stash (git stash drop)\nDelete a specific stash when you no longer need it:\nExample: Drop a Stash\nThis command deletes a specific stash from your list when you no longer need it.\nClear All Stashes (git stash clear)\nDelete all your stashes at once:\nExample: Clear All Stashes\nThis command deletes all your stashes at once. Be careful! This cannot be undone!\nBranch from a Stash (git stash branch)\nCreate a new branch and apply a stash to it.\nUseful if your stashed work should become its own feature branch:\nExample: Branch from a Stash\nThis command creates a new branch and applies your stashed changes to it.\nThis is useful if you decide your work should become its own feature branch.\nBest Practices for Stashing\nUse clear messages when stashing: git stash push -m \"WIP: feature name\"\nDon't use stashes as long-term storage—commit your work when possible.\nCheck your stash list regularly and clean up old stashes you no longer need.\nTroubleshooting\nDid you lose your changes? Try git stash list and git stash apply to recover stashed work.\nStash didn't apply cleanly? You may need to resolve conflicts, just like a merge.\nGit will mark the conflicts in your files for you to resolve.\nUntracked files missing? By default, untracked files are not stashed.\nIf you need to stash them, use git stash -u next time.\nAccidentally cleared all stashes? Unfortunately, git stash clear is permanent.\nAlways double-check before running it!\nNote: Stashes are useful for temporary work, but are not a replacement for commits!",
      "examples": [
        "git stash Saved working directory and index state WIP on main: 1234567 Add new feature",
        "git stash push -m \"WIP: homepage redesign\" Saved working directory and index state On main: WIP: homepage redesign",
        "git stash list stash@{0}: On main: WIP: homepage redesign stash@{1}: WIP on main: 1234567 Add new feature",
        "git stash show src/index.html | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-)",
        "git stash show -p diff --git a/src/index.html b/src/index.html index 1234567..89abcde 100644 --- a/src/index.html +++ b/src/index.html @@ ...",
        "git stash apply On branch main Changes not staged for commit: (use \"git add\n...\" to update what will be committed) (use \"git restore\n...\" to discard changes in working directory) modified: src/index.html",
        "git stash apply stash@{1} On branch main Changes not staged for commit: modified: src/index.html",
        "git stash pop On branch main Changes not staged for commit: modified: src/index.html Dropped refs/stash@{0} (abc1234d5678)",
        "git stash drop stash@{0} Dropped stash@{0} (abc1234d5678)",
        "git stash clear",
        "git stash branch new-feature stash@{0} Switched to a new branch 'new-feature' On branch new-feature Changes not staged for commit: modified: src/index.html Dropped stash@{0} (abc1234d5678)",
        "git stash",
        "git stash push -m \"message\"",
        "git stash list",
        "git stash branch <branchname>",
        "git stash -u",
        "--include-untracked",
        "git stash push -m",
        "git stash show",
        "git stash apply",
        "git stash apply stash@{n}",
        "git stash pop",
        "git stash drop",
        "git stash branch",
        "git stash push -m \"WIP: feature name\""
      ]
    },
    {
      "title": "Git History",
      "summary": "What is Git History? Why Use It?\nGit keeps a detailed record of every change made to your project.\nYou can use history commands to see what changed, when, and who made the change.\nThis is useful for tracking progress, finding bugs, and understanding your project's evolution.\nKey Commands for Viewing History\ngit log - Show full commit history\ngit log --oneline - Show a summary of commits\ngit show <commit> - Show details of a specific commit\ngit diff - See unstaged changes\ngit diff --staged - See staged changes\nBest Practices for Viewing History\nMake frequent, meaningful commits to keep your history clear.\nWrite clear commit messages so you and your team can understand changes later.\nUse git log --oneline for a quick overview of your commit history.\nUse git diff before committing to review your work.\nSee Commit History (git log)\nShow a detailed list of all commits in your repository:\nExample: Full Commit History\nThis command shows all commits, including author, date, and message.\nUse the arrow keys to scroll, and press q to quit.\nTip: While viewing the log, you can search for a word by typing / followed by your search term\n(for example, /fix), then press n to jump to the next match.\nPress q at any time to quit.\nShow Commit Details (git show <commit>)\nSee all the details and changes for a specific commit:\nExample: Show Commit Details\nThis command shows everything about a commit: who made it, when, the message, and the exact changes.\nREMOVE ADS\nCompare Changes (git diff)\nSee what is different between your working directory and the last commit (unstaged changes):\nExample: See Unstaged Changes\nThis command shows changes you have made but not yet staged for commit.\nCompare Staged Changes (git diff --staged)\nSee what is different between your staged files and the last commit:\nExample: See Staged Changes\nThis command shows changes that are staged and ready to be committed.\nCompare Two Commits (git diff <commit1> <commit2>)\nSee what changed between any two commits:\nExample: Compare Two Commits\nThis command shows the differences between two specific commits.\nShow a Summary of Commits (git log --oneline)\nShow a short summary of each commit (great for a quick overview):\nExample: Oneline Log\nThis command shows each commit on a single line for easy reading.\nShow Commits by Author (git log --author=\"Alice\")\nSee only the commits made by a specific author:\nExample: Commits by Author\nThis command filters the log to show only commits by the author you specify.\nShow Recent Commits (git log --since=\"2 weeks ago\")\nSee only commits made in the last two weeks:\nExample: Recent Commits\nThis command shows only the commits made in a recent time frame.\nShow Files Changed Per Commit (git log --stat)\nSee which files were changed in each commit and how many lines were added or removed:\nExample: Log with Stats\nThis command adds a summary of file changes to each commit in the log.\nShow a Branch Graph (git log --graph)\nSee a simple ASCII graph of your branch history (great for visualizing merges):\nExample: Log with Graph\nThis command shows a simple graph of your branch and merge history.\nTroubleshooting\nCan't see your changes? Make sure you have committed your work. Uncommitted changes won't appear in the history.\nLog is too long? Use git log --oneline or git log --since to make it easier to read.\nHow do I quit the log view? Press q to exit the log or diff view.\nNote: Exploring your history helps you understand what changed, when, and why.",
      "examples": [
        "git log commit 09f4acd3f8836b7f6fc44ad9e012f82faf861803 (HEAD -> master) Author: w3schools-test Date: Fri Mar 26 09:35:54 2021 +0100 Updated index.html with a new line",
        "git show 09f4acd commit 09f4acd3f8836b7f6fc44ad9e012f82faf861803 (HEAD -> master) Author: w3schools-test Date: Fri Mar 26 09:35:54 2021 +0100 Updated index.html with a new line diff --git a/index.html b/index.html index 1234567..89abcde 100644 --- a/index.html +++ b/index.html @@ ... +New Title",
        "git diff diff --git a/index.html b/index.html index 1234567..89abcde 100644 --- a/index.html +++ b/index.html @@ ... -Old Title +New Title",
        "git diff --staged diff --git a/index.html b/index.html index 1234567..89abcde 100644 --- a/index.html +++ b/index.html @@ ... -Old Title +New Title",
        "git diff 1234567 89abcde diff --git a/index.html b/index.html index 1234567..89abcde 100644 --- a/index.html +++ b/index.html @@ ... -Old Title +New Title",
        "git log --oneline 09f4acd Updated index.html with a new line 8e7b2c1 Add about page 1a2b3c4 Initial commit",
        "git log --author=\"Alice\" commit 1a2b3c4d5e6f7g8h9i0j Author: Alice Date: Mon Mar 22 10:12:34 2021 +0100 Add about page",
        "git log --since=\"2 weeks ago\" commit 09f4acd3f8836b7f6fc44ad9e012f82faf861803 Author: w3schools-test Date: Fri Mar 26 09:35:54 2021 +0100 Updated index.html with a new line",
        "git log --stat commit 09f4acd3f8836b7f6fc44ad9e012f82faf861803 Author: w3schools-test Date: Fri Mar 26 09:35:54 2021 +0100 Updated index.html with a new line index.html | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-)",
        "git log --graph --oneline * 09f4acd Updated index.html with a new line * 8e7b2c1 Add about page |\\ | * aabbccd Merge branch 'feature-x' |/",
        "git log",
        "git log --oneline",
        "git show <commit>",
        "git diff",
        "git diff --staged",
        "q",
        "/",
        "/fix",
        "n",
        "git diff <commit1> <commit2>",
        "git log --author=\"Alice\"",
        "git log --since=\"2 weeks ago\"",
        "git log --stat",
        "git log --graph",
        "git log --since"
      ]
    },
    {
      "title": "Git Help",
      "summary": "Change Platform:\nWhy and When to Use Git Help?\nGit has many commands and options.\nIf you forget how a command works or want to learn about its options, you can use Git's built-in help.\nThis is the fastest way to get answers without leaving your terminal.\nKey Commands for Getting Help\ngit help <command> - See the manual page for a command\ngit <command> --help - See help for a command (same as above)\ngit <command> -h - See a quick summary of options\ngit help --all - List all possible Git commands\ngit help -g - List guides and concepts\nSee Help for a Specific Command (git help <command>)\nShows the full manual page for a specific command, including all options and examples:\nExample: See Help for Commit\nThis command opens the full documentation for git commit in your terminal.\nUse the arrow keys or Space to scroll down, b to scroll up.\nType / followed by a word to search (e.g., /option), then n for next match.\nPress q at any time to quit the help view.\nSee Help with --help (git <command> --help)\nThis does the same as git help <command>. Most users prefer this form:\nExample: See Help for Status\nThis command opens the manual page for git status.\nSee a Quick Summary with -h (git <command> -h)\nShows a short summary of the command's options, right in the terminal window (does not open the full manual):\nExample: Quick Help for Add\nThis command gives you a brief overview of available options for a command.\nREMOVE ADS\nList All Git Commands (git help --all)\nLists every Git command available on your system, grouped by category:\nWarning: This will display a very long list of commands\nExample\nNote: If you find yourself stuck in the list view, SHIFT + G to jump the end of the list, then q to exit the view.\nList Guides and Concepts (git help -g)\nShows a list of guides and concept topics for deeper learning:\nExample: List Guides and Concepts\nThis command is great for learning about Git's advanced concepts and best practices.\nTroubleshooting\nHow do I quit the help viewer? Press q to exit the help page.\nHelp page won't open? Try git <command> -h for a quick summary instead.\nHow do I search for a word? In the help viewer, press / then type your search term and press Enter.",
      "examples": [
        "git help commit GIT-COMMIT(1) NAME git-commit - Record changes to the repository SYNOPSIS git commit [options] [--]\n... DESCRIPTION Stores the current contents of the index in a new commit together with a log message from the user describing the changes. ...",
        "git status --help GIT-STATUS(1) NAME git-status - Show the working tree status SYNOPSIS git status [options] [--] [pathspec...] DESCRIPTION Displays paths that have differences between the index file and the current HEAD commit. ...",
        "git add -h usage: git add [options] [--]\n... -n, --dry-run dry run -v, --verbose be verbose -i, --interactive interactive picking -p, --patch select hunks interactively -e, --edit edit current diff and apply -u, --update update tracked files -A, --all add changes from all tracked and untracked files ...",
        "$ git help --all See 'git help\n' to read about a specific subcommand Main Porcelain Commands add Add file contents to the index am Apply a series of patches from a mailbox archive Create an archive of files from a named tree bisect Use binary search to find the commit that introduced a bug branch List, create, or delete branches bundle Move objects and refs by archive checkout Switch branches or restore working tree files cherry-pick Apply the changes introduced by some existing commits citool Graphical alternative to git-commit clean Remove untracked files from the working tree clone Clone a repository into a new directory commit Record changes to the repository describe Give an object a human readable name based on an available ref diff Show changes between commits, commit and working tree, etc fetch Download objects and refs from another repository format-patch Prepare patches for e-mail submission gc Cleanup unnecessary files and optimize the local repository gitk The Git repository browser grep Print lines matching a pattern gui A portable graphical interface to Git init Create an empty Git repository or reinitialize an existing one log Show commit logs maintenance Run tasks to optimize Git repository data merge Join two or more development histories together mv Move or rename a file, a directory, or a symlink notes Add or inspect object notes pull Fetch from and integrate with another repository or a local branch push Update remote refs along with associated objects range-diff Compare two commit ranges (e.g. two versions of a branch) rebase Reapply commits on top of another base tip reset Reset current HEAD to the specified state restore Restore working tree files revert Revert some existing commits rm Remove files from the working tree and from the index shortlog Summarize 'git log' output show Show various types of objects sparse-checkout Initialize and modify the sparse-checkout stash Stash the changes in a dirty working directory away status Show the working tree status submodule Initialize, update or inspect submodules switch Switch branches tag Create, list, delete or verify a tag object signed with GPG worktree Manage multiple working trees Ancillary Commands / Manipulators config Get and set repository or global options fast-export Git data exporter fast-import Backend for fast Git data importers filter-branch Rewrite branches mergetool Run merge conflict resolution tools to resolve merge conflicts pack-refs Pack heads and tags for efficient repository access prune Prune all unreachable objects from the object database reflog Manage reflog information remote Manage set of tracked repositories repack Pack unpacked objects in a repository replace Create, list, delete refs to replace objects Ancillary Commands / Interrogators annotate Annotate file lines with commit information blame Show what revision and author last modified each line of a file bugreport Collect information for user to file a bug report count-objects Count unpacked number of objects and their disk consumption difftool Show changes using common diff tools fsck Verifies the connectivity and validity of the objects in the database gitweb Git web interface (web frontend to Git repositories) help Display help information about Git instaweb Instantly browse your working repository in gitweb merge-tree Show three-way merge without touching index rerere Reuse recorded resolution of conflicted merges show-branch Show branches and their commits verify-commit Check the GPG signature of commits verify-tag Check the GPG signature of tags whatchanged Show logs with difference each commit introduces Interacting with Others archimport Import a GNU Arch repository into Git cvsexportcommit Export a single commit to a CVS checkout cvsimport Salvage your data out of another SCM people love to hate cvsserver A CVS server emulator for Git imap-send Send a collection of patches from stdin to an IMAP folder p4 Import from and submit to Perforce repositories quiltimport Applies a quilt patchset onto the current branch request-pull Generates a summary of pending changes send-email Send a collection of patches as emails svn Bidirectional operation between a Subversion repository and Git Low-level Commands / Manipulators apply Apply a patch to files and/or to the index checkout-index Copy files from the index to the working tree commit-graph Write and verify Git commit-graph files commit-tree Create a new commit object hash-object Compute object ID and optionally creates a blob from a file index-pack Build pack index file for an existing packed archive merge-file Run a three-way file merge merge-index Run a merge for files needing merging mktag Creates a tag object mktree Build a tree-object from ls-tree formatted text multi-pack-index Write and verify multi-pack-indexes pack-objects Create a packed archive of objects prune-packed Remove extra objects that are already in pack files read-tree Reads tree information into the index symbolic-ref Read, modify and delete symbolic refs unpack-objects Unpack objects from a packed archive update-index Register file contents in the working tree to the index update-ref Update the object name stored in a ref safely write-tree Create a tree object from the current index Low-level Commands / Interrogators cat-file Provide content or type and size information for repository objects cherry Find commits yet to be applied to upstream diff-files Compares files in the working tree and the index diff-index Compare a tree to the working tree or index diff-tree Compares the content and mode of blobs found via two tree objects for-each-ref Output information on each ref for-each-repo Run a Git command on a list of repositories get-tar-commit-id Extract commit ID from an archive created using git-archive ls-files Show information about files in the index and the working tree ls-remote List references in a remote repository ls-tree List the contents of a tree object merge-base Find as good common ancestors as possible for a merge name-rev Find symbolic names for given revs pack-redundant Find redundant pack files rev-list Lists commit objects in reverse chronological order rev-parse Pick out and massage parameters show-index Show packed archive index show-ref List references in a local repository unpack-file Creates a temporary file with a blob's contents var Show a Git logical variable verify-pack Validate packed Git archive files Low-level Commands / Syncing Repositories daemon A really simple server for Git repositories fetch-pack Receive missing objects from another repository http-backend Server side implementation of Git over HTTP send-pack Push objects over Git protocol to another repository update-server-info Update auxiliary info file to help dumb servers Low-level Commands / Internal Helpers check-attr Display gitattributes information check-ignore Debug gitignore / exclude files check-mailmap Show canonical names and email addresses of contacts check-ref-format Ensures that a reference name is well formed column Display data in columns credential Retrieve and store user credentials credential-cache Helper to temporarily store passwords in memory credential-store Helper to store credentials on disk fmt-merge-msg Produce a merge commit message interpret-trailers Add or parse structured information in commit messages mailinfo Extracts patch and authorship from a single e-mail message mailsplit Simple UNIX mbox splitter program merge-one-file The standard helper program to use with git-merge-index patch-id Compute unique ID for a patch sh-i18n Git's i18n setup code for shell scripts sh-setup Common Git shell script setup code stripspace Remove unnecessary whitespace External commands askyesno credential-helper-selector flow lfs",
        "git help -g The common Git guides are: attributes Defining attributes per path everyday Everyday Git With 20 Commands Or So glossary A Git glossary of terms revisions Specifying revisions and ranges for Git ...",
        "git help <command>",
        "git <command> --help",
        "git <command> -h",
        "git help --all",
        "git help -g",
        "git commit",
        "Space",
        "b",
        "/",
        "/option",
        "n",
        "q",
        "git status",
        "SHIFT + G"
      ]
    },
    {
      "title": "Git Branch",
      "summary": "Change Platform:\nWhat is a Git Branch?\nIn Git, a branch is like a separate workspace where you can make changes and try new ideas without affecting the main project. Think of it as a \"parallel universe\" for your code.\nWhy Use Branches?\nBranches let you work on different parts of a project, like new features or bug fixes, without interfering with the main branch.\nCommon Reasons to Create a Branch\nDeveloping a new feature\nFixing a bug\nExperimenting with ideas\nExample: With and Without Git\nLet's say you have a large project, and you need to update the design on it.\nHow would that work without and with Git:\nWithout Git:\nMake copies of all the relevant files to avoid impacting the live version\nStart working with the design and find that code depend on code in other files, that also need to be changed!\nMake copies of the dependant files as well. Making sure that every file dependency references the correct file name\nEMERGENCY! There is an unrelated error somewhere else in the project that needs to be fixed ASAP!\nSave all your files, making a note of the names of the copies you were working on\nWork on the unrelated error and update the code to fix it\nGo back to the design, and finish the work there\nCopy the code or rename the files, so the updated design is on the live version\n(2 weeks later, you realize that the unrelated error was not fixed in the new design version because you copied the files before the fix)\nWith Git:\nWith a new branch called new-design, edit the code directly without impacting the main branch\nEMERGENCY! There is an unrelated error somewhere else in the project that needs to be fixed ASAP!\nCreate a new branch from the main project called small-error-fix\nFix the unrelated error and merge the small-error-fix branch with the main branch\nYou go back to the new-design branch, and finish the work there\nMerge the new-design branch with main (getting alerted to the small error fix that you were missing)\nBranches allow you to work on different parts of a project without impacting the main branch.\nWhen the work is complete, a branch can be merged with the main project.\nYou can even switch between branches and work on different projects without them interfering with each other.\nBranching in Git is very lightweight and fast!\nCreating a New Branch\nLet's say you want to add a new feature. You can create a new branch for it.\nLet add some new features to our index.html page.\nWe are working in our local repository, and we do not want to disturb or possibly wreck the main project.\nSo we create a new branch:\nExample\nNow we created a new branch called \"hello-world-images\"\nListing All Branches\nLet's confirm that we have created a new branch.\nTo see all branches in your repository, use:\nExample\nWe can see the new branch with the name \"hello-world-images\", but the * beside master specifies that we are currently on that branch.\nSwitching Between Branches\ncheckout is the command used to check out a branch.\nMoving us from the current branch, to the one specified at the end of the command:\nExample\nNow you can work in your new branch without affecting the main branch.\nWorking in a Branch\nNow we have moved our current workspace from the master branch, to the new branch\nOpen your favourite editor and make some changes.\nFor this example, we added an image (img_hello_world.jpg) to the working folder and a line of code in the index.html file:\nExample\nWe have made changes to a file and added a new file in the working directory (same directory as the main branch).\nNow check the status of the current branch:\nExample\nSo let's go through what happens here:\nThere are changes to our index.html, but the file is not staged for commit\nimg_hello_world.jpg is not tracked\nSo we need to add both files to the Staging Environment for this branch:\nExample\nUsing --all instead of individual filenames will Stage all changed (new, modified, and deleted) files.\nCheck the status of the branch:\nExample\nWe are happy with our changes. So we will commit them to the branch:\nExample\nNow we have a new branch, that is different from the master branch.\nNote: Using the -b option on checkout will create a new branch, and move to it, if it does not exist\nREMOVE ADS\nSwitching Between Branches\nNow let's see just how quick and easy it is to work with different branches, and how well it works.\nWe are currently on the branch hello-world-images. We added an image to this branch, so let's list the files in the current directory:\nExample\nWe can see the new file img_hello_world.jpg, and if we open the html file, we can see the code has been altered. All is as it should be.\nNow, let's see what happens when we change branch to master\nExample\nThe new image is not a part of this branch. List the files in the current directory again:\nExample\nimg_hello_world.jpg is no longer there! And if we open the html file, we can see the code reverted to what it was before the alteration.\nSee how easy it is to work with branches? And how this allows you to work on different things?\nEmergency Branch\nNow imagine that we are not yet done with hello-world-images, but we need to fix an error on master.\nI don't want to mess with master directly, and I do not want to mess with hello-world-images, since it is not done yet.\nSo we create a new branch to deal with the emergency:\nExample\nNow we have created a new branch from master, and changed to it. We can safely fix the error without disturbing the other branches.\nLet's fix our imaginary error:\nExample\nWe have made changes in this file, and we need to get those changes to the master branch.\nCheck the status:\nExample\nstage the file, and commit:\nExample\nNow we have a fix ready for master, and we need to merge the two branches.\nDeleting a Branch\nWhen you're done with a branch, you can delete it:\nExample\nThis deletes the branch named hello-world-images (if it's already merged).\nBest Practices for Working with Branches\nUse clear, descriptive branch names (like feature/login-page or bugfix/header-crash).\nKeep each branch focused on a single purpose or feature.\nRegularly merge changes from the main branch to keep your branch up-to-date.\nDelete branches that are no longer needed to keep your repository clean.\nPractical Examples\nRename a branch: git branch -m old-name new-name\nList all branches: git branch\nSwitch branches: git checkout branch-name or git switch branch-name\nDelete a branch (not merged): git branch -D branch-name\nSee which branch you're on: git status\nTroubleshooting\nIf you don't see your changes on the main branch, remember: changes in one branch stay there until you merge them.\nWhen deleting a branch, make sure it's merged first. If you try to delete an unmerged branch, Git will prevent you from doing so.\nTo force delete an unmerged branch, use git branch -D branch-name.",
      "examples": [
        "git branch hello-world-images",
        "git branch hello-world-images * master",
        "git checkout hello-world-images Switched to branch 'hello-world-images'",
        "git status On branch hello-world-images Changes not staged for commit: (use \"git add\n...\" to update what will be committed) (use \"git restore\n...\" to discard changes in working directory) modified: index.html Untracked files: (use \"git add\n...\" to include in what will be committed) img_hello_world.jpg no changes added to commit (use \"git add\" and/or \"git commit -a\")",
        "git add --all",
        "git status On branch hello-world-images Changes to be committed:   (use \"git restore --staged\n...\" to unstage)     new file: img_hello_world.jpg     modified: index.html",
        "git commit -m \"Added image to Hello World\" [hello-world-images 0312c55] Added image to Hello World 2 files changed, 1 insertion(+) create mode 100644 img_hello_world.jpg",
        "ls README.md bluestyle.css img_hello_world.jpg index.html",
        "git checkout master Switched to branch 'master'",
        "ls README.md bluestyle.css index.html",
        "git checkout -b emergency-fix Switched to a new branch 'emergency-fix'",
        "git status On branch emergency-fix Changes not staged for commit: (use \"git add\n...\" to update what will be committed) (use \"git restore\n...\" to discard changes in working directory) modified: index.html no changes added to commit (use \"git add\" and/or \"git commit -a\")",
        "git add index.html git commit -m \"updated index.html with emergency fix\" [emergency-fix dfa79db] updated index.html with emergency fix 1 file changed, 1 insertion(+), 1 deletion(-)",
        "git branch -d hello-world-images",
        "<!DOCTYPE html>\n<html>\n<head>\n<title>Hello World!</title>\n<link rel=\"stylesheet\" href=\"bluestyle.css\">\n</head>\n<body>\n\n<h1>Hello world!</h1>\n<div><img src=\"img_hello_world.jpg\" alt=\"Hello World from Space\"\nstyle=\"width:100%;max-width:960px\"></div>\n<p>This is the first file in my new Git Repo.</p>\n<p>A new line in our file!</p>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<head>\n<title>Hello World!</title>\n<link rel=\"stylesheet\" href=\"bluestyle.css\">\n</head>\n<body>\n\n<h1>Hello world!</h1>\n<p>This is the first file in my new Git Repo.</p>\n<p>This line is here to show how merging works.</p>\n\n</body>\n</html>",
        "branch",
        "index.html",
        "hello-world-images",
        "*",
        "master",
        "checkout",
        "main",
        "commit",
        "img_hello_world.jpg",
        "tracked",
        "--all",
        "status",
        "-b",
        "feature/login-page",
        "bugfix/header-crash",
        "git branch -m old-name new-name",
        "git branch",
        "git checkout branch-name",
        "git switch branch-name",
        "git branch -D branch-name",
        "git status"
      ]
    },
    {
      "title": "Git Branch Merge",
      "summary": "Change Platform:\nWhat is Merging in Git?\nMerging in Git means combining the changes from one branch into another.\nThis is how you bring your work together after working separately on different features or bug fixes.\nCommon git merge Options\ngit merge - Merge a branch into your current branch\ngit merge --no-ff - Always create a merge commit\ngit merge --squash - Combine changes into a single commit\ngit merge --abort - Abort a merge in progress\nMerging Branches (git merge)\nTo combine the changes from one branch into another, use git merge.\nUsually, you first switch to the branch you want to merge into (often main or master), then run the merge command with the branch name you want to combine in.\nFirst, we need to change to the master branch:\nExample\nNow we merge the current branch (master) with emergency-fix:\nExample\nSince the emergency-fix branch came directly from master, and no other changes had been made to master while we were working, Git sees this as a continuation of master.\nSo it can \"Fast-forward\", just pointing both master and emergency-fix to the same commit.\nBest Practices for Merging Branches\nAlways commit or stash your changes before starting a merge.\nRegularly merge from the main branch into your feature branch to minimize conflicts.\nRead and resolve conflicts carefully—don't just accept all changes blindly.\nWrite clear and descriptive merge commit messages.\nPractical Examples\nAbort a merge: git merge --abort\nCheck status during a merge: git status\nResolve a conflict and complete the merge: Edit the conflicted file(s), then git add file and git commit\nFast-forward merge: Happens when no new commits diverged—Git just moves the branch pointer forward.\nNo-fast-forward merge: Use git merge --no-ff branch to always create a merge commit, preserving branch history.\nAs master and emergency-fix are essentially the same now, we can delete emergency-fix, as it is no longer needed:\nExample\nREMOVE ADS\nNon-Fast-Forward Merge (git merge --no-ff)\nBy default, if your branch can be merged with a fast-forward (no new commits on the base), Git just moves the branch pointer forward.\nIf you want to always create a merge commit (to keep history clearer), use git merge --no-ff branchname.\nExample\nSquash Merge (git merge --squash)\nIf you want to combine all the changes from a branch into a single commit (instead of keeping every commit), use git merge --squash branchname.\nThis is useful for cleaning up commit history before merging.\nExample\nAborting a Merge (git merge --abort)\nIf you run into trouble during a merge (like a conflict you don't want to resolve), you can cancel the merge and go back to how things were before with git merge --abort.\nExample\nWhat is a Merge Conflict?\nA merge conflict happens when changes in two branches touch the same part of a file and Git doesn't know which version to keep.\nThink of it like two people editing the same sentence in a document in different ways—Git needs your help to decide which version to use.\nHow to Resolve a Merge Conflict\nGit will mark the conflict in your file.\nYou need to open the file, look for lines like <<<<<<< HEAD and =======, and decide what the final version should be.\nThen, stage and commit your changes.\nTroubleshooting & Tips\nIf you want to cancel a merge, use git merge --abort.\nAlways commit or stash your changes before starting a merge.\nRead the conflict markers carefully and remove them after you've resolved the issue.\nUse git status to see what files need your attention.\nIf you're unsure, ask a teammate or look up the error message.\nMerge Conflict Example\nNow we can move over to hello-world-images from last chapter, and keep working.\nAdd another image file (img_hello_git.jpg) and change index.html, so it shows it:\nExample\nExample\nNow, we are done with our work here and can stage and commit for this branch:\nExample\nWe see that index.html has been changed in both branches.\nNow we are ready to merge hello-world-images into master.\nBut what will happen to the changes we recently made in master?\nExample\nThe merge failed, as there is conflict between the versions for index.html.\nLet us check the status:\nExample\nThis confirms there is a conflict in index.html, but the image files are ready and staged to be committed.\nSo we need to fix that conflict. Open the file in our editor:\nExample\nWe can see the differences between the versions and edit it like we want:\nExample\nNow we can stage index.html and check the status:\nExample\nThe conflict has been fixed, and we can use commit to conclude the merge:\nExample\nAnd delete the hello-world-images branch:\nExample\nNow you have a better understanding of how branches and merging works.\nTime to start working with a remote repository!",
      "examples": [
        "git checkout master Switched to branch 'master'",
        "git merge emergency-fix Updating 09f4acd..dfa79db Fast-forward index.html | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-)",
        "git branch -d emergency-fix Deleted branch emergency-fix (was dfa79db).",
        "git merge --no-ff feature-branch Merge made by the 'recursive' strategy. index.html | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-)",
        "git merge --squash feature-branch Squash commit -- not updating HEAD Automatic merge went well; stopped before committing as requested",
        "git merge --abort",
        "git checkout hello-world-images Switched to branch 'hello-world-images'",
        "git add --all git commit -m \"added new image\" [hello-world-images 1f1584e] added new image 2 files changed, 1 insertion(+) create mode 100644 img_hello_git.jpg",
        "git checkout master git merge hello-world-images Auto-merging index.html CONFLICT (content): Merge conflict in index.html Automatic merge failed; fix conflicts and then commit the result.",
        "git status On branch master You have unmerged paths. (fix conflicts and run \"git commit\") (use \"git merge --abort\" to abort the merge) Changes to be committed: new file: img_hello_git.jpg new file: img_hello_world.jpg Unmerged paths: (use \"git add\n...\" to mark resolution) both modified: index.html",
        "git add index.html git status On branch master All conflicts fixed but you are still merging. (use \"git commit\" to conclude merge) Changes to be committed: new file: img_hello_git.jpg new file: img_hello_world.jpg modified: index.html",
        "git commit -m \"merged with hello-world-images after fixing conflicts\" [master e0b6038] merged with hello-world-images after fixing conflicts",
        "git branch -d hello-world-images Deleted branch hello-world-images (was 1f1584e).",
        "<!DOCTYPE html>\n<html>\n<head>\n<title>Hello World!</title>\n<link rel=\"stylesheet\" href=\"bluestyle.css\">\n</head>\n<body>\n\n<h1>Hello world!</h1>\n<div><img src=\"img_hello_world.jpg\" alt=\"Hello World from Space\" style=\"width:100%;max-width:960px\"></div>\n<p>This is the first file in my new Git Repo.</p>\n<p>A new line in our file!</p>\n<div><img src=\"img_hello_git.jpg\" alt=\"Hello Git\" style=\"width:100%;max-width:640px\"></div>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<head>\n<title>Hello World!</title>\n<link rel=\"stylesheet\" href=\"bluestyle.css\">\n</head>\n<body>\n\n<h1>Hello world!</h1>\n<div><img src=\"img_hello_world.jpg\" alt=\"Hello World from Space\" style=\"width:100%;max-width:960px\"></div>\n<p>This is the first file in my new Git Repo.</p>\n<<<<<<< HEAD\n<p>This line is here to show how merging works.</p>\n=======\n<p>A new line in our file!</p>\n<div><img src=\"img_hello_git.jpg\" alt=\"Hello Git\" style=\"width:100%;max-width:640px\"></div>\n>>>>>>> hello-world-images\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<head>\n<title>Hello World!</title>\n<link rel=\"stylesheet\" href=\"bluestyle.css\">\n</head>\n<body>\n\n<h1>Hello world!</h1>\n<div><img src=\"img_hello_world.jpg\" alt=\"Hello World from Space\" style=\"width:100%;max-width:960px\"></div>\n<p>This is the first file in my new Git Repo.</p>\n<p>This line is here to show how merging works.</p>\n<div><img src=\"img_hello_git.jpg\" alt=\"Hello Git\" style=\"width:100%;max-width:640px\"></div>\n\n</body>\n</html>",
        "git merge",
        "main",
        "master",
        "git status",
        "git add file",
        "git commit",
        "git merge --no-ff branch",
        "git merge --no-ff",
        "git merge --no-ff branchname",
        "git merge --squash",
        "git merge --squash branchname",
        "<<<<<<< HEAD",
        "======="
      ]
    },
    {
      "title": "Git Workflow",
      "summary": "Git Workflow Commands Overview\nWorking Directory - Where you make changes\ngit add - Stage changes\ngit commit - Save changes to your repository\ngit push - Share changes with others\ngit status - Check what's going on\nUndo/Amend - Fix mistakes (git restore, git reset, git commit --amend)\nSee Also: GitHub Flow is a popular collaborative workflow for teams using GitHub.\nIf you work with GitLab or Bitbucket, those platforms have their own workflows too. Learn more about GitHub Flow »\nUnderstanding the Git Workflow\nGit uses a distributed workflow that allows you to work on your code, stage changes, and commit them to your local repository before sharing with others.\nUnderstanding this workflow is essential for effective version control.\nThe Three Areas of Git\nWorking Directory: Where you make changes to your files.\nStaging Area (Index): Where you prepare changes before committing.\nRepository: Where your committed history is stored.\nWorkflow Diagram\nBest Practices for Git Workflow\nCommit frequently with clear, meaningful messages.\nCheck your status often with git status to avoid surprises.\nStage only what you intend to commit. Use git add <file> for precision.\nPush regularly to back up your work and share with others.\nReview your changes with git diff before committing.\nREMOVE ADS\nWorking Directory\nThis is where you make changes to your files.\nThink of it as your workspace or desk.\nFiles here can be new, modified, or deleted, but Git won't save these changes until you stage and commit them.\nStaging Changes (git add)\nWhen you are happy with your changes, you \"stage\" them with git add.\nThis puts your changes in the Staging Area, like putting your finished letter in an envelope.\nExample\nTo stage all changes (new, modified, and deleted files):\nCommitting Changes (git commit)\nCommitting saves your staged changes to your local repository.\nIt's like mailing your letter—you can't change it after it's sent!\nExample\nYou can also use git commit -a -m \"message\" to stage and commit all modified and deleted files in one step (but not new files).\nPushing Changes (git push)\nAfter you commit, your changes are only in your local repository.\nUse git push to send your commits to a remote repository (like GitHub or Bitbucket) so others can see them.\nExample\nChecking Status (git status)\nUse git status to see which files are staged, unstaged, or untracked.\nThis helps you keep track of what you still need to add or commit.\nExample\nUndoing and Amending Changes\nMade a mistake? Git lets you fix things before you push!\ngit restore <file> - Undo changes in your working directory (before staging).\ngit restore --staged <file> - Unstage a file (move it out of the Staging Area).\ngit reset HEAD~ - Undo your last commit (keeps changes in your working directory).\ngit commit --amend - Change the last commit message or add files to your last commit.\nExample: Unstage a file\nTips & Troubleshooting\nUse git status often to see what's going on.\nIf you commit the wrong thing, use git reset or git commit --amend before pushing.\nStage only what you want to commit—use git add <filename> for specific files.\nDon't forget to push after committing, or your changes won't show up for others.\nIf you're not sure, ask for help or look up the error message—everyone makes mistakes!",
      "examples": [
        "[Working Directory] --git add--> [Staging Area] --git commit--> [Repository]",
        "git add index.html",
        "git add .",
        "git commit -m \"Describe your changes\"",
        "git push",
        "git status",
        "git restore --staged index.html",
        "git restore",
        "git reset",
        "git commit --amend",
        "git add <file>",
        "git diff",
        "git add",
        "git commit",
        "git commit -a -m \"message\"",
        "git restore <file>",
        "git restore --staged <file>",
        "git reset HEAD~",
        "git add <filename>"
      ]
    },
    {
      "title": "Git Best Practices",
      "summary": "Summary of Git Best Practices\nCommit Often\nWrite Clear Commit Messages\nUse Branches\nPull Before You Push\nReview Changes Before Committing\nKeep Repositories Small\nUse .gitignore\nTag Releases\nCommit Often\nMake small, frequent commits to capture your progress.\nThis makes it easier to track changes and find bugs.\nExample\nWrite Clear Commit Messages\nUse descriptive messages that explain why a change was made, not just what changed.\nGood commit messages help you and your team understand the history of the project.\nBe specific: Say what and why, not just \"Update\" or \"Fix\".\nUse the imperative mood: For example, \"Add login validation\" instead of \"Added login validation\".\nExample\nREMOVE ADS\nUse Branches\nCreate branches for features, fixes, and experiments to keep your main branch stable.\nThis way, you can work on new ideas without affecting the main codebase.\nWhy? Branches let you test and develop independently, and make collaboration safer.\nName branches clearly: For example, feature/login-form or bugfix/user-auth.\nExample\nPull Before You Push\nAlways git pull before pushing.\nThis updates your local branch with changes from others, helps you avoid conflicts, and ensures your push will succeed.\nWhy? If someone else has pushed changes since your last pull, your push may be rejected or cause conflicts.\nPulling first lets you fix any issues locally.\nExample\nReview Changes Before Committing\nUse git status and git diff to review your changes before you commit.\nThis helps you catch mistakes early.\nExample\nKeep Repositories Small\nAvoid adding large files or unnecessary dependencies.\nThis keeps your repository fast and easy to clone.\nTip: For large files (like videos or datasets), use Git LFS (Large File Storage) instead of adding them directly to your repo.\nUse .gitignore\nExclude files that shouldn't be tracked (like build artifacts, log files, or secrets) by adding them to a .gitignore file.\nNote: .gitignore only prevents new files from being tracked.\nFiles already tracked by Git will remain in the repository until you remove them with git rm --cached <file>.\nExample: .gitignore\nTag Releases\nUse tags to mark release points (like v1.0) so you can easily find and reference important versions.\nThis helps you keep track of your project's history and make it easier to roll back to previous versions if needed.\nExample\nNote: Good Git habits make it easier for your team (and your future self) to understand and build on your work.",
      "examples": [
        "git add . git commit -m \"Add user authentication logic\"",
        "git commit -m \"Fix bug in user login validation\"",
        "git checkout -b feature/login-form",
        "git pull origin main git push origin main",
        "git status git diff",
        "# .gitignore node_modules/ *.log .env",
        "git tag v1.0 git push origin v1.0",
        "feature/login-form",
        "bugfix/user-auth",
        "git pull",
        "git status",
        "git diff",
        ".gitignore",
        "git rm --cached <file>",
        "v1.0"
      ]
    },
    {
      "title": "Git Glossary",
      "summary": "Git Glossary\nThis glossary covers common Git terms and concepts. Use it as a handy reference while learning and working with Git.\nSummary of Git Terms\nBranch\nCheckout\nClone\nCommit\nConflict\nFetch\nFork\nHEAD\nIndex (Staging Area)\nMerge\nOrigin\nPull\nPush\nRebase\nRemote\nRepository (Repo)\nStash\nTag\nUpstream\nWorking Directory\nBranch\nA branch is a parallel version of your repository. Used to develop features independently.\nLearn more on our Git Branch page\nExample\nCheckout\nSwitch to a different branch or commit.\nLearn more on our Git Checkout page\nExample\nREMOVE ADS\nClone\nCreate a local copy of a remote repository.\nLearn more on our Git Clone page\nExample\nCommit\nA snapshot of your changes in the repository.\nLearn more on our Git Commit page\nExample\nConflict\nWhen Git can't automatically merge changes from different commits or branches. You must resolve the differences manually.\nLearn more on our Git Branch Merge page\nExample\nFetch\nDownload changes from a remote repository without merging.\nLearn more on our Git Pull from Remote page\nExample\nFork\nA personal copy of someone else's repository, usually on a platform like GitHub.\nLearn more on our Git Remote Fork page\nExample\nIndex (Staging Area)\nThe Index (also called the Staging Area) is where changes are prepared before committing.\nLearn more on our Git Staging Area page\nExample\nMerge\nCombine changes from different branches.\nLearn more on our Git Merge page\nExample\nOrigin\nThe default name for your main remote repository. You can rename or have multiple remotes if needed.\nLearn more on our Git Remote page\nExample\nPull\nFetch and merge changes from a remote repository.\nLearn more on our Git Pull from Remote page\nExample\nPush\nUpload your commits to a remote repository.\nLearn more on our Git Push to Remote page\nExample\nRebase\nMove or combine a sequence of commits to a new base commit.\nLearn more on our Git Rebase page\nExample\nRemote\nA version of your repository hosted on the internet or network.\nLearn more on our Git Set Remote page\nExample\nRepository (Repo)\nThe database where your project's history is stored.\nLearn more on our Git Get Started page\nExample\nStash\nTemporarily save changes that aren't ready to commit.\nLearn more on our Git Stash page\nExample\nTag\nMark a specific commit as important, usually for releases.\nLearn more on our Git Tag page\nExample\nNote: Refer to this glossary whenever you encounter an unfamiliar Git term!\nHEAD\nHEAD is a reference to the current commit your working directory is based on. Usually points to the latest commit on your current branch.\nExample\nUpstream\nAn \"upstream\" branch is the default branch that your branch tracks and pulls from, usually on a remote repository.\nExample",
      "examples": [
        "git branch feature/login",
        "git checkout main",
        "git clone https://github.com/user/repo.git",
        "git commit -m \"Add login feature\"",
        "# Example: Merge conflict message # CONFLICT (content): Merge conflict in file.txt",
        "git fetch origin",
        "# Use the GitHub interface to fork a repo",
        "git add file.txt",
        "git merge feature/login",
        "git remote add origin https://github.com/user/repo.git",
        "git pull origin main",
        "git push origin main",
        "git rebase main",
        "git remote -v",
        "git init",
        "git stash",
        "git tag v1.0",
        "git log --oneline # The top entry is HEAD",
        "git push --set-upstream origin main"
      ]
    },
    {
      "title": "Git GitHub Getting Started",
      "summary": "Change Platform:\nGet Started with GitHub\nWelcome! This page will guide you through the first steps of using GitHub for version control and collaboration.\n1. Sign Up for GitHub\nGo to GitHub and create a free account:\nNote: Use the same email address you plan to use for your Git configuration.\n2. Create a Repository\nAfter signing in, click the New button to create a new repository:\nFill in the repository details (name, description, public/private, etc.) and click Create repository:\n3. What is a Remote Repository?\nA remote repository is a version of your project hosted on the internet. GitHub is a popular platform for hosting remote repositories, enabling you to collaborate with others and back up your code.\nNext, you will learn how to securely connect your computer to GitHub using SSH.",
      "examples": []
    },
    {
      "title": "Git Security SSH",
      "summary": "Change Platform:\nWhat is SSH?\nSSH (Secure Shell) is a way to connect securely to remote computers and services, like Git repositories.\nSSH uses a pair of keys (public and private) to make sure only you can access your code.\nSummary of SSH Concepts and Commands\nSSH key pair - A public and private key for secure access\nssh-keygen - Generate a new SSH key pair\nssh-add - Add your private key to the SSH agent\nssh -T git@github.com - Test SSH connection\nssh-add -l - List loaded SSH keys\nssh-add -d - Remove a key from agent\nHow SSH Keys Work\nSSH keys come in pairs: a public key (like a lock) and a private key (like your own key).\nYou share the public key with the server (like GitHub or Bitbucket), but keep the private key safe on your computer.\nOnly someone with the private key can access what's locked by the public key.\nFirst-Time SSH Key Setup\nIf you've never used SSH keys before, follow this step to enable the SSH agent on your operating system:\nExample: Enable SSH Agent\nGenerating an SSH Key Pair\nTo create a new SSH key pair, use this command in the terminal (Linux, macOS, or Git Bash for Windows):\nExample: Generate SSH Key\nFollow the prompts to choose a file location (press Enter to use the default) and set a passphrase (optional, but recommended for extra security).\nAdding Your Key to the SSH Agent\nAfter creating your key, add it to the SSH agent so Git can use it:\nExample: Add Key to SSH Agent\nREMOVE ADS\nCopying Your Public Key\nTo use SSH with Git hosting services, you need to copy your public key and add it to your account settings on GitHub, GitLab, or Bitbucket.\nOn macOS: pbcopy < ~/.ssh/id_rsa.pub\nOn Windows (Git Bash): clip < ~/.ssh/id_rsa.pub\nOn Linux: cat ~/.ssh/id_rsa.pub (then copy manually)\nListing and Removing SSH Keys\nSee which keys are loaded in your SSH agent:\nExample: List Loaded SSH Keys\nTo remove a key from the agent:\nExample: Remove SSH Key from Agent\nTroubleshooting SSH\nIf you get \"Permission denied\", make sure your public key is added to your Git host and your private key is loaded in the agent.\nCheck file permissions: private keys should be readable only by you (chmod 600 ~/.ssh/id_rsa).\nUse ssh -v for verbose output to debug problems.\nMake sure you're using the correct SSH URL for your remote (starts with git@).\nTip: Never share your private key with anyone. Use a passphrase for extra security.\nIf your private key is ever exposed, generate a new key pair and update your Git host immediately.",
      "examples": [
        "eval $(ssh-agent -s)",
        "ssh-keygen -t rsa -b 4096 -C \"your@email.com\"",
        "ssh-add ~/.ssh/id_rsa",
        "ssh-add -l",
        "ssh-add -d ~/.ssh/id_rsa",
        "ssh-keygen",
        "ssh-add",
        "ssh -T git@github.com",
        "ssh-add -d",
        "pbcopy < ~/.ssh/id_rsa.pub",
        "clip < ~/.ssh/id_rsa.pub",
        "cat ~/.ssh/id_rsa.pub",
        "chmod 600 ~/.ssh/id_rsa",
        "ssh -v",
        "git@"
      ]
    },
    {
      "title": "Git GitHub Add SSH",
      "summary": "Change Platform:\nAdd SSH to GitHub\nNow that you have generated your SSH key, you need to add your public key to your GitHub account.\nCopy Your Public SSH Key\nOn Windows (Git Bash): clip < ~/.ssh/id_rsa.pub\nOn macOS: pbcopy < ~/.ssh/id_rsa.pub\nOn Linux: cat ~/.ssh/id_rsa.pub (then copy manually)\nImportant: Complete these steps before you attempt to push, pull, or clone with SSH. This page assumes you have already generated your SSH key and added it to your SSH agent. If not, go back to the SSH setup section in the Getting Started guide.\nAdd the Key to GitHub\nGo to GitHub, click your profile in the top right, and select Settings:\nIn the sidebar, select SSH and GPG keys and click the New SSH key button.\nGive your key a descriptive title, paste your public SSH key into the \"Key\" field, and click Add SSH Key.\nYou may be prompted to supply your GitHub password or use 2FA to confirm the addition.\nYou will see your new SSH key listed:\nNext, you'll test your SSH connection and set your GitHub remote origin using SSH.",
      "examples": [
        "clip < ~/.ssh/id_rsa.pub",
        "pbcopy < ~/.ssh/id_rsa.pub",
        "cat ~/.ssh/id_rsa.pub"
      ]
    },
    {
      "title": "Git Set Remote from GitHub",
      "summary": "Change Platform:\nSet GitHub Remote Origin\nNow that your SSH key is added to GitHub, you can securely connect your local repository to GitHub using SSH.\nTest Your SSH Connection\nFirst, test that your SSH connection to GitHub works:\nExample\nIf the last line contains your username on GitHub, you are successfully authenticated!\nGet Your Repository's SSH Address\nOn GitHub, go to your repository and click the Code button. Make sure SSH is selected, then copy the SSH URL (it starts with git@github.com:):\nAdd or Update the Remote Origin\nTo add the remote origin (first time):\nExample\nTo update an existing remote to use SSH:\nExample\nCongratulations! You are now ready to use GitHub with SSH.\nExercise?What is this?\nTest your skills by answering a few questions about the topics of this page",
      "examples": [
        "ssh -T git@github.com The authenticity of host 'github.com (140.82.121.3)' can't be established. RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added 'github.com,140.82.121.3' (RSA) to the list of known hosts. Hi your-username! You've successfully authenticated, but GitHub does not provide shell access.",
        "git remote add origin git@github.com:your-username/your-repo.git",
        "git remote set-url origin git@github.com:your-username/your-repo.git",
        "git@github.com:",
        "git remote origin git@github.com:username/repo.git"
      ]
    },
    {
      "title": "Git GitHub Edit Code",
      "summary": "Change Platform:",
      "examples": []
    },
    {
      "title": "Git Pull from GitHub",
      "summary": "Change Platform:\nPull from Remote\nIn the last chapters, we made an account on GitHub and set up SSH.\nThen we made some changes directly on GitHub.\nNow we want to update our local repository with the changes from GitHub.\nKey Pull Commands\nFetch\nMerge\nPull\nFetch, Pull and Merge\nWhen working as a team on a project, it is important that everyone stays up to date.\nAny time you start working on a project, you should get the most recent changes to your local copy.\nWith Git, you can do that with pull.\npull is a combination of 2 different commands:\nfetch\nmerge\nLet's take a closer look into how fetch, merge, and pull works.\nGit Fetch\ngit fetch downloads new data from a remote repository, but does not change your working files or branches. It lets you see what others have pushed before you merge or pull.\nExample\nNow that we have the recent changes, we can check our status:\nExample\nWe are behind the origin/master by 1 commit. That should be the updated README.md, but lets double check by viewing the log:\nExample\nThat looks as expected, but we can also verify by showing the differences between our local master and origin/master:\nExample\nThat looks precisely as expected! Now we can safely merge.\nREMOVE ADS\nGit Merge\nmerge combines the current branch, with a specified branch.\nWe have confirmed that the updates are as expected, and we can merge our current branch (master) with origin/master:\nExample\nCheck our status again to confirm we are up to date:\nExample\nThere! Your local git is up to date!\nGit Pull\nBut what if you just want to update your local repository, without going through all those steps?\npull is a combination of fetch and merge.\nIt is used to pull all changes from a remote repository into the branch you are working on.\nMake another change to the Readme.md file on GitHub.\nUse pull to update our local Git:\nExample\nThat is how you keep your local Git up to date from a remote repository. In the next chapter, we will look closer at how push works on GitHub.",
      "examples": [
        "git fetch origin remote: Enumerating objects: 5, done. remote: Counting objects: 100% (5/5), done. remote: Compressing objects: 100% (3/3), done. remote: Total 3 (delta 2), reused 0 (delta 0), pack-reused 0 Unpacking objects: 100% (3/3), 733 bytes | 3.00 KiB/s, done. From https://github.com/w3schools-test/hello-world e0b6038..d29d69f master -> origin/master",
        "git status On branch master Your branch is behind 'origin/master' by 1 commit, and can be fast-forwarded. (use \"git pull\" to update your local branch) nothing to commit, working tree clean",
        "git log origin/master commit d29d69ffe2ee9e6df6fa0d313bb0592b50f3b853 (origin/master) Author: w3schools-test <77673807+w3schools-test@users.noreply.github.com> Date: Fri Mar 26 14:59:14 2021 +0100 Updated README.md with a line about GitHub commit e0b6038b1345e50aca8885d8fd322fc0e5765c3b (HEAD -> master) Merge: dfa79db 1f1584e Author: w3schools-test\nDate: Fri Mar 26 12:42:56 2021 +0100 merged with hello-world-images after fixing conflicts ... ...",
        "git diff origin/master diff --git a/README.md b/README.md index 23a0122..a980c39 100644 --- a/README.md +++ b/README.md @@ -2,6 +2,4 @@ Hello World repository for Git tutorial This is an example repository for the Git tutoial on https://www.w3schools.com -This repository is built step by step in the tutorial. - -It now includes steps for GitHub +This repository is built step by step in the tutorial. \\ No newline at end of file",
        "git merge origin/master Updating e0b6038..d29d69f Fast-forward README.md | 4 +++- 1 file changed, 3 insertions(+), 1 deletion(-)",
        "git status On branch master Your branch is up to date with 'origin/master'. nothing to commit, working tree clean",
        "git pull origin remote: Enumerating objects: 5, done. remote: Counting objects: 100% (5/5), done. remote: Compressing objects: 100% (3/3), done. remote: Total 3 (delta 1), reused 0 (delta 0), pack-reused 0 Unpacking objects: 100% (3/3), 794 bytes | 1024 bytes/s, done. From https://github.com/w3schools-test/hello-world a7cdd4b..ab6b4ed master -> origin/master Updating a7cdd4b..ab6b4ed Fast-forward README.md | 2 ++ 1 file changed, 2 insertions(+)",
        "pull",
        "fetch",
        "merge",
        "git fetch",
        "changes",
        "status",
        "origin/master",
        "commit",
        "README.md",
        "log",
        "master",
        "push"
      ]
    },
    {
      "title": "Git Push to GitHub",
      "summary": "Change Platform:\nGit Push to GitHub\nWhen we have made changes locally, we want to update our remote repository with the changes.\nTransferring our local changes to our remote is done with a push command.\nThere are several commands we can use to push changes to GitHub.\nKey Push Commands\nBasic Push\nForce Push\nPush Tags\nTroubleshooting\nBasic Push\nThis command pushes your current branch to the remote repository named origin:\nExample\nThis will upload your local commits to GitHub.\nYou must have already committed your changes with git commit.\nREMOVE ADS\nForce Push\nIf your push is rejected due to non-fast-forward updates (for example, after a rebase), you can force the push.\nWarning: This can overwrite changes on the remote repository. Use with caution!\nExample\nUse --force-with-lease for a safer force push:\nExample\nPush Tags\nTo push all local tags to GitHub:\nExample\nTo push a specific tag:\nExample\nTroubleshooting\nNon-fast-forward error: Happens if someone else pushed to the branch. Run git pull --rebase before pushing again.\nAuthentication failed: Make sure you have access to the repository and your credentials are correct.\nGo to GitHub, and confirm that the repository has a new commit:\nNow, we are going to start working on branches on GitHub.",
      "examples": [
        "git push origin",
        "git push --force origin feature-branch",
        "git push --force-with-lease origin feature-branch",
        "git push --tags",
        "git push origin v1.0",
        "push",
        "origin",
        "git commit",
        "--force-with-lease",
        "git pull --rebase"
      ]
    },
    {
      "title": "Git GitHub Branch",
      "summary": "Change Platform:\nCreate a Branch\nOn GitHub, access your repository and click the \"master\" branch button.\nThere you can create a new Branch. Type in a descriptive name, and click Create branch:\nThe branch should now be created and active. You can confirm which branch you are working on by looking at the branch button. See that it now says \"html-skeleton\" instead of \"main\"?\nStart working on an existing file in this branch. Click the \"index.html\" file and start editing:\nAfter you have finished editing the file, you can click the \"Preview changes\" tab to see the changes you made highlighted:\nIf you are happy with the change, add a comment that explains what you did, and click Commit changes.\nYou now have a new branch on GitHub, updated with some changes!\nSwitch Branch\nTo switch to another branch in GitHub's web interface, click the branch dropdown and select the branch you want to work on.\nTo switch branches using the command line:\nExample\nDelete Branch\nTo delete a branch on GitHub, go to the branches page, find your branch, and click the delete icon (trash can).\nTo delete a branch using the command line:\nExample\nTo delete a remote branch:\nExample\nRename Branch\nTo rename a branch using the command line:\nExample\nMerge Branch\nTo merge a branch into another on GitHub, open a Pull Request (PR) and follow the prompts to merge.\nTo merge using the command line:\nExample\nView Branches\nTo see all branches in your repository on GitHub, click the branch dropdown at the top of the file list.\nTo view branches using the command line:\nExample\nProtected Branches\nSome branches (like main) may be protected, meaning you cannot delete or force-push to them without special permissions.\nThis helps prevent accidental changes to important branches.",
      "examples": [
        "git switch branch-name",
        "git branch -d branch-name",
        "git push origin --delete branch-name",
        "git branch -m old-name new-name",
        "git merge branch-name",
        "git branch",
        "branch",
        "index.html",
        "main"
      ]
    },
    {
      "title": "Git Pull Branch from GitHub",
      "summary": "Change Platform:\nPulling a Branch from GitHub\nNow continue working on our new branch in our local Git.\nLets pull from our GitHub repository again so that our code is up-to-date:\nExample\nNow our main branch is up todate. And we can see that there is a new branch available on GitHub.\nDo a quick status check:\nExample\nAnd confirm which branches we have, and where we are working at the moment:\nExample\nSo, we do not have the new branch on our local Git. But we know it is available on GitHub. So we can use the -a option to see all local and remote branches:\nExample\nNote: branch -r is for remote branches only.\nWe see that the branch html-skeleton is available remotely, but not on our local git. Lets check it out:\nExample\nAnd check if it is all up to date:\nExample\nWhich branches do we have now, and where are we working from?\nExample\nNow, open your favourite editor and confirm that the changes from the GitHub branch carried over.\nThat is how you pull a GitHub branch to your local Git.",
      "examples": [
        "git pull remote: Enumerating objects: 5, done. remote: Counting objects: 100% (5/5), done. remote: Compressing objects: 100% (3/3), done. remote: Total 3 (delta 2), reused 0 (delta 0), pack-reused 0 Unpacking objects: 100% (3/3), 851 bytes | 9.00 KiB/s, done. From https://github.com/w3schools-test/hello-world * [new branch] html-skeleton -> origin/html-skeleton Already up to date.",
        "git status On branch master Your branch is up to date with 'origin/master'. nothing to commit, working tree clean",
        "git branch * master",
        "git branch -a * master remotes/origin/html-skeleton remotes/origin/master",
        "git checkout html-skeleton Switched to a new branch 'html-skeleton' Branch 'html-skeleton' set up to track remote branch 'html-skeleton' from 'origin'.",
        "git pull Already up to date.",
        "git branch * html-skeleton master",
        "branch",
        "pull",
        "status",
        "-a",
        "branch -r",
        "html-skeleton"
      ]
    },
    {
      "title": "Git Push Branch to GitHub",
      "summary": "Change Platform:\nPush Branch to GitHub\nThis chapter explains how to push a branch from your local computer to GitHub.\nPush a Branch to GitHub\nLet's create a new local branch, make a change, and push it to GitHub.\nExample\nEdit a file, then check the status:\nExample\nAdd and commit your changes:\nExample\nPush your branch to GitHub:\nExample\nREMOVE ADS\nPush and Set Upstream\nUse this if your branch doesn't exist on GitHub yet, and you want to track it:\nExample\nForce Push\nWarning: This overwrites the branch on GitHub with your local changes. Only use if you understand the risks.\nExample\nDelete Remote Branch\nRemove a branch from GitHub:\nExample\nPush All Branches\nPush all your local branches to GitHub:\nExample\nPush Tags\nPush all your tags to GitHub:\nExample\nTroubleshooting\nRejected push (non-fast-forward): Someone else pushed changes before you. Run git pull --rebase first, then try again.\nAuthentication failed: Make sure you are logged in and have permission to push to the repository.\nRemote branch not found: Double-check the branch name and spelling.",
      "examples": [
        "git checkout -b update-readme Switched to a new branch 'update-readme'",
        "git status",
        "git add README.md git commit -m \"Update readme for GitHub\"",
        "git push origin update-readme",
        "git push --set-upstream origin update-readme",
        "git push --force origin update-readme",
        "git push origin --delete update-readme",
        "git push --all origin",
        "git push --tags",
        "git pull --rebase"
      ]
    },
    {
      "title": "Git GitHub Flow",
      "summary": "Change Platform:\nWhat is the GitHub Flow?\nThe GitHub Flow is a simple, effective workflow for collaborating on code using Git and GitHub.\nIt helps teams work together smoothly, experiment safely, and deliver new features or fixes quickly.\nHere's how the GitHub Flow works, step by step:\nCreate a Branch: Start new work without affecting the main code.\nMake Commits: Save progress as you make changes.\nOpen a Pull Request: Ask others to review your work.\nReview: Discuss and improve the changes together.\nDeploy: Test your changes before merging.\nMerge: Add your finished work to the main branch.\nThis workflow is designed to be easy for beginners and powerful for teams of any size.\nCreate a New Branch\nBranching is the key concept in Git. And it works around the rule that the master branch is ALWAYS deployable.\nThat means, if you want to try something new or experiment, you create a new branch!\nBranching gives you an environment where you can make changes without affecting the main branch.\nWhen your new branch is ready, it can be reviewed, discussed, and merged with the main branch when ready.\nWhen you make a new branch, you will (almost always) want to make it from the master branch.\nNote: Keep in mind that you are working with others.\nUsing descriptive names for new branches, so everyone can understand what is happening.\nMake Changes and Add Commits\nAfter the new branch is created, it is time to get to work.\nMake changes by adding, editing and deleting files.\nWhenever you reach a small milestone, add the changes to your branch by commit.\nAdding commits keeps track of your work.\nEach commit should have a message explaining what has changed and why.\nEach commit becomes a part of the history of the branch, and a point you can revert back to if you need to.\nNote: commit messages are very important! Let everyone know what has changed and why.\nMessages and comments make it so much easier for yourself and other people to keep track of changes.\nREMOVE ADS\nOpen a Pull Request\nPull requests are a key part of GitHub.\nA Pull Request notifies people you have changes ready for them to consider or review.\nYou can ask others to review your changes or pull your contribution and merge it into their branch.\nReview\nWhen a Pull Request is made, it can be reviewed by whoever has the proper access to the branch.\nThis is where good discussions and review of the changes happen.\nPull Requests are designed to allow people to work together easily and produce better results together!\nIf you receive feedback and continue to improve your changes, you can push your changes with new commits, making further reviews possible.\nNote: GitHub shows new commit and feedback in the \"unified Pull Request view\".\nDeploy\nWhen the pull request has been reviewed and everything looks good, it is time for the final testing.\nGitHub allows you to deploy from a branch for final testing in production before merging with the master branch.\nIf any issues arise, you can undo the changes by deploying the master branch into production again!\nNote: Teams often have dedicated testing environments used for deploying branches.\nMerge\nAfter exhaustive testing, you can merge the code into the master branch!\nPull Requests keep records of changes to your code, and if you commented and named changes well, you can go back and understand why changes and decisions were made.\nNote: You can add keywords to your pull request for easier searching!",
      "examples": []
    },
    {
      "title": "Git GitHub Pages",
      "summary": "Change Platform:\nEnable GitHub Pages\nGitHub Pages lets you publish a website directly from your repository. To enable it:\nCreate a new repository named your-username.github.io.\nAdd your website files (like index.html) to the repository.\nPush your changes to GitHub.\nExample\nSet Source Branch/Folder\nYou can choose which branch and folder to publish. By default, GitHub uses main (or master) and the root folder. To change this:\nGo to your repository on GitHub.\nClick Settings > Pages.\nUnder Source, select the branch and folder (e.g., main and docs).\nClick Save.\nView Your Site\nAfter enabling GitHub Pages, your site will be available at https://your-username.github.io/ (or your custom domain).\nClick the link to see your live site!\nDisable GitHub Pages\nTo turn off your Pages site:\nGo to Settings > Pages.\nClick Delete or remove the source branch/folder.\nOptionally, delete the repository if you no longer need it.\nExample",
      "examples": [
        "git remote add origin https://github.com/your-username/your-username.github.io.git git push -u origin master",
        "git push origin --delete gh-pages",
        "your-username.github.io",
        "index.html",
        "main",
        "master",
        "docs",
        "https://your-username.github.io/"
      ]
    },
    {
      "title": "Git GUI Clients",
      "summary": "Why use a GUI client?\nGit GUI clients let you use Git with buttons and menus instead of typing commands.\nThey are great for beginners, make it easier to see what's happening, and help you avoid common mistakes.\nSee your branches and changes visually\nStage, commit, and push with clicks\nHandle merge conflicts with helpful tools\nNo need to remember command-line options\nPopular Git GUI Clients\nGitHub Desktop\nGitKraken\nSourcetree\nGit GUI\nVS Code Git\nOther Clients\nGitHub Desktop\nGitHub Desktop is a free, beginner-friendly app for Windows and Mac.\nIt works best with GitHub, but you can use it with other repositories too.\nPros: Simple, clean interface. Great for GitHub users.\nCons: Fewer advanced features. Not as flexible for non-GitHub platforms.\nExample workflow\nREMOVE ADS\nGitKraken\nGitKraken is a powerful, cross-platform Git client with a modern interface.\nIt supports GitHub, GitLab, Bitbucket, and more.\nPros: Visual commit graph, built-in merge/conflict tools, works with many platforms.\nCons: Some features require a paid license.\nExample workflow\nSourcetree\nSourcetree is a free Git client from Atlassian, popular for Bitbucket but works with any Git repository.\nPros: Free, full-featured, good for advanced users.\nCons: Interface can be overwhelming for beginners.\nExample workflow\nGit GUI\nGit GUI is a basic graphical tool that comes with Git for Windows.\nIt's simple, but covers the basics.\nPros: Always available, lightweight, no extra install needed.\nCons: Basic interface, fewer features than other clients.\nExample workflow\nVS Code Git\nVisual Studio Code has built-in Git support.\nYou can use the Source Control panel to stage, commit, push, pull, and resolve conflicts—all inside your code editor.\nPros: Integrated with your editor, easy to use, works with extensions.\nCons: Not as visual for history/branches as dedicated apps.\nExample workflow\nOther Clients\nThere are many other Git GUI clients, including:\nFork\nTower\nSmartGit\nAurora\nGit-Cola\nMost work in similar ways: you open a repo, see your changes, and use buttons for Git actions.\nTroubleshooting\nAuthentication issues: Make sure you've set up SSH keys or personal access tokens if needed.\nChanges not showing: Refresh or re-scan your repo in the client.\nConflicts: Use the merge/conflict tools built into your client, or fall back to the command line if stuck.",
      "examples": [
        "1. Clone a repository from GitHub 2. Make changes to files 3. See changes in the app 4. Stage and commit with a message 5. Push to GitHub with one click",
        "1. Open a repository 2. Drag and drop to create branches 3. View history and merge visually 4. Resolve conflicts with built-in tools 5. Push changes to remote",
        "1. Add a repository 2. Stage and commit changes 3. Use the log/history view to see all commits 4. Push and pull with buttons",
        "1. Open Git GUI from the Start menu 2. Select your repository folder 3. Stage files, write a commit message, and commit 4. Push to remote using the menu",
        "1. Open a folder in VS Code 2. Make changes to files 3. Use the Source Control panel to stage and commit 4. Push and pull with buttons"
      ]
    },
    {
      "title": "Git GitHub Fork",
      "summary": "Change Platform:\nAdd to Someone Else's Repository\nAt the heart of Git is collaboration.\nHowever, Git does not allow you to add code to someone else's repository without access rights.\nIn these next 3 chapters we will show you how to copy a repository, make changes to it, and suggest those changes be implemented to the original repository.\nAt the end of these chapters, you will have the opportunity to add a message to our public GitHub page: https://w3schools-test.github.io/\nFork a Repository\nA fork is a copy of a repository.\nThis is useful when you want to contribute to someone else's project or start your own project based on theirs.\nfork is not a command in Git, but something offered in GitHub and other repository hosts.\nLet's start by logging in to GitHub, and fork our repository:\nhttps://github.com/w3schools-test/w3schools-test.github.io\nNow we have our own copy of w3schools-test.github.io:\nNow let's look at how we add a local copy of this for us to work with.",
      "examples": [
        "https://w3schools-test.github.io/",
        "fork",
        "https://github.com/w3schools-test/w3schools-test.github.io",
        "w3schools-test.github.io"
      ]
    },
    {
      "title": "Git Clone from GitHub",
      "summary": "Change Platform:\nClone a Fork from GitHub\nNow we have our own fork, but only on GitHub. We also want a clone on our local Git to keep working on it.\nA clone is a full copy of a repository, including all logging and versions of files.\nMove back to the original repository, and click the green \"Code\" button to get the URL to clone:\nOpen your Git bash and clone the repository:\nExample\nTake a look in your file system, and you will see a new directory named after the cloned project:\nExample\nNote: To specify a specific folder to clone to, add the name of the folder after the repository URL, like this: git clone https://github.com/w3schools-test/w3schools-test.github.io.git myfolder\nNavigate to the new directory, and check the status:\nExample\nAnd check the log to confirm that we have the full repository data:\nExample\nNow we have a full copy of the original repository.\nConfiguring Remotes\nBasically, we have a full copy of a repository, whose origin we are not allowed to make changes to.\nLet's see how the remotes of this Git is set up:\nExample\nWe see that origin is set up to the original \"w3schools-test\" repository, we also want to add our own fork.\nFirst, we rename the original origin remote:\nExample\nThen fetch the URL of our own fork:\nAnd add that as origin:\nExample\nNote: According to Git naming conventions, it is recommended to name your own repository origin, and the one you forked for upstream\nNow we have 2 remotes:\norigin - our own fork, where we have read and write access\nupstream - the original, where we have read-only access\nNow we are going to make some changes to the code. In the next chapter, we will cover how we suggest those changes to the original repository.",
      "examples": [
        "git clone https://github.com/w3schools-test/w3schools-test.github.io.git Cloning into 'w3schools-test.github.io'... remote: Enumerating objects: 33, done. remote: Counting objects: 100% (33/33), done. remote: Compressing objects: 100% (15/15), done. remote: Total 33 (delta 18), reused 33 (delta 18), pack-reused 0 Receiving objects: 100% (33/33), 94.79 KiB | 3.16 MiB/s, done. Resolving deltas: 100% (18/18), done.",
        "ls w3schools-test.github.io/",
        "cd w3schools-test.github.io git status On branch master Your branch is up to date with 'origin/master'. nothing to commit, working tree clean",
        "git log commit facaeae8fd87dcb63629f108f401aa9c3614d4e6 (HEAD -> master, origin/master, origin/HEAD) Merge: e7de78f 5a04b6f Author: w3schools-test\nDate: Fri Mar 26 15:44:10 2021 +0100 Merge branch 'master' of https://github.com/w3schools-test/hello-world commit e7de78fdefdda51f6f961829fcbdf197e9b926b6 Author: w3schools-test\nDate: Fri Mar 26 15:37:22 2021 +0100 Updated index.html. Resized image .....",
        "git remote -v origin https://github.com/w3schools-test/w3schools-test.github.io.git (fetch) origin https://github.com/w3schools-test/w3schools-test.github.io.git (push)",
        "git remote rename origin upstream git remote -v upstream https://github.com/w3schools-test/w3schools-test.github.io.git (fetch) upstream https://github.com/w3schools-test/w3schools-test.github.io.git (push)",
        "git remote add origin https://github.com/kaijim/w3schools-test.github.io.git git remote -v origin https://github.com/kaijim/w3schools-test.github.io.git (fetch) origin https://github.com/kaijim/w3schools-test.github.io.git (push) upstream https://github.com/w3schools-test/w3schools-test.github.io.git (fetch) upstream https://github.com/w3schools-test/w3schools-test.github.io.git (push)",
        "fork",
        "clone",
        "URL",
        "git clone https://github.com/w3schools-test/w3schools-test.github.io.git myfolder",
        "status",
        "log",
        "origin",
        "remotes",
        "w3schools-test",
        "rename",
        "remote",
        "upstream"
      ]
    },
    {
      "title": "Git GitHub Send Pull Request",
      "summary": "Change Platform:\nPush Changes to Our GitHub Fork\nWe have made a lot of changes to our local Git.\nNow we push them to our GitHub fork:\ncommit the changes:\nExample\nGo to GitHub, and we see that the repository has a new commit. And we can send a Pull Request to the original repository:\nClick that and create a pull request:\nRemember to add an explanation for the administrators.\nPull Request is sent:\nApproving Pull Requests\nNow any member with access can see the Pull Request when they see the original repository:\nAnd they can see the proposed changes:\nComment on the changes and merge:\nConfirm:\nAnd changes have been merged with master:\nNow you try!",
      "examples": [
        "git push origin Enumerating objects: 8, done. Counting objects: 100% (8/8), done. Delta compression using up to 16 threads Compressing objects: 100% (5/5), done. Writing objects: 100% (5/5), 393.96 KiB | 32.83 MiB/s, done. Total 5 (delta 0), reused 0 (delta 0), pack-reused 0 To https://github.com/kaijim/w3schools-test.github.io.git facaeae..ebb1a5c master -> master",
        "push",
        "fork",
        "commit",
        "merge",
        "merged",
        "master"
      ]
    },
    {
      "title": "Git Revert",
      "summary": "Change Platform:\nWhat Does Git Revert Do?\nThe git revert command undoes a previous commit by creating a new commit that reverses the changes.\nThis keeps your commit history intact and is the safest way to undo changes in a shared repository.\nSummary of Git Revert Commands and Options\ngit revert HEAD - Revert the latest commit\ngit revert <commit> - Revert a specific commit\ngit revert HEAD~2 - Revert a commit further back in history\ngit revert --no-edit - Skip commit message editor\ngit log --oneline - Show commit history\nHow to Find the Commit to Revert\nFirst, you need to find the commit you want to undo.\nUse git log --oneline to see a summary of your commit history:\nExample\nREMOVE ADS\nRun Git Revert\nOnce you've found the commit you want to undo, use git revert to create a new commit that reverses the changes:\nExample\nReview Changes After Git Revert\nAfter running git revert, review the changes to make sure everything is as expected:\nExample\nTips & Best Practices\nHere are some tips and best practices to keep in mind when using Git Revert:\nUse git revert instead of git reset when you want to undo a previous commit, but still keep the commit history intact.\nUse git log --oneline to find the commit you want to undo.\nUse git revert HEAD --no-edit to create a new commit that reverses the changes.\nTroubleshooting\nHere are some common issues you may encounter when using Git Revert:\nIf you get an error message saying \"error: could not revert...\", try using git revert --abort to abort the revert process.\nIf you get an error message saying \"error: could not apply...\", try using git revert --continue to continue the revert process.",
      "examples": [
        "git log --oneline 52418f7 (HEAD -> master) Just a regular update, definitely no accidents here... 9a9add8 (origin/master) Added .gitignore 81912ba Corrected spelling error 3fdaa5b Merge pull request #1 from w3schools-test/update-readme 836e5bf (origin/update-readme, update-readme) Updated readme for GitHub Branches daf4f7c (origin/html-skeleton, html-skeleton) Updated index.html with basic meta facaeae (gh-page/master) Merge branch 'master' of https://github.com/w3schools-test/hello-world e7de78f Updated index.html. Resized image 5a04b6f Updated README.md with a line about focus d29d69f Updated README.md with a line about GitHub e0b6038 merged with hello-world-images after fixing conflicts 1f1584e added new image dfa79db updated index.html with emergency fix 0312c55 Added image to Hello World 09f4acd Updated index.html with a new line 221ec6e First release of Hello World!",
        "git revert HEAD --no-edit [master e56ba1f] Revert \"Just a regular update, definitely no accidents here...\" Date: Thu Apr 22 10:50:13 2021 +0200 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 img_hello_git.jpg",
        "git log --oneline e56ba1f (HEAD -> master) Revert \"Just a regular update, definitely no accidents here...\" 52418f7 Just a regular update, definitely no accidents here... 9a9add8 (origin/master) Added .gitignore 81912ba Corrected spelling error 3fdaa5b Merge pull request #1 from w3schools-test/update-readme 836e5bf (origin/update-readme, update-readme) Updated readme for GitHub Branches daf4f7c (origin/html-skeleton, html-skeleton) Updated index.html with basic meta facaeae (gh-page/master) Merge branch 'master' of https://github.com/w3schools-test/hello-world e7de78f Updated index.html. Resized image 5a04b6f Updated README.md with a line about focus d29d69f Updated README.md with a line about GitHub e0b6038 merged with hello-world-images after fixing conflicts 1f1584e added new image dfa79db updated index.html with emergency fix 0312c55 Added image to Hello World 09f4acd Updated index.html with a new line 221ec6e First release of Hello World!",
        "git revert",
        "git revert HEAD",
        "git revert <commit>",
        "git revert HEAD~2",
        "git revert --no-edit",
        "git log --oneline",
        "git reset",
        "git revert HEAD --no-edit",
        "git revert --abort",
        "git revert --continue"
      ]
    },
    {
      "title": "Git Reset",
      "summary": "Change Platform:\nWhat Does Git Reset Do?\nThe git reset command moves your current branch (HEAD) to a different commit.\nDepending on the option, it can also change which changes are staged or even delete changes from your working directory.\nUse it to undo commits, unstage files, or clean up your history.\nSummary of Git Reset Commands and Options\ngit reset --soft <commit> - Move HEAD to commit, keep changes staged\ngit reset --mixed <commit> - Move HEAD to commit, unstage changes (default)\ngit reset --hard <commit> - Move HEAD to commit, discard all changes\ngit reset <file> - Unstage a file\ngit log --oneline - Show commit history\nHow to Find the Commit to Reset To\nFirst, you need to find the commit you want to go back to.\nUse git log --oneline to see a summary of your commit history:\nStep 2: Move the repository back to that step:\nAfter the previous chapter, we have a part in our commit history we could go back to.\nLet's try and do that with reset.\nGit Reset Find Commit in Log\nFirst thing, we need to find the point we want to return to.\nTo do that, we need to go through the log.\nTo avoid the very long log list, we are going to use the --oneline option, which gives just one line per commit showing:\nThe first seven characters of the commit hash - this is what we need to refer to in our reset command.\nthe commit message\nSo let's find the point we want to reset to:\nExample\nWe want to return to the commit: 9a9add8 (origin/master) Added .gitignore, the last one before we started to mess with things.\nREMOVE ADS\nGit Reset --soft\ngit reset --soft <commit> moves HEAD to the specified commit, but keeps all your changes staged (in the index).\nThis is useful if you want to combine several commits into one, or just want to rewrite history but keep your work ready to commit.\nExample\nAll changes after 9a9add8 are now staged, ready for a new commit.\nGit Reset --mixed (default)\ngit reset --mixed <commit> (or just git reset <commit>) moves HEAD to the specified commit and unstages any changes, but keeps them in your working directory.\nThis is the default option and is useful if you want to \"undo\" a commit but keep your changes for editing or recommitting.\nExample\nAll changes after 9a9add8 are now unstaged, but still in your files.\nReview Changes\nAfter running Git Reset, review your changes to make sure everything is as expected.\nTips & Best Practices\nUse Git Reset with caution, as it can rewrite your commit history.\nMake sure to communicate with your team before making changes to the remote repository.\nTroubleshooting\nIf you encounter issues with Git Reset, try using git status to see the current state of your repository.\nWarnings\nBe careful when using Git Reset, as it can delete changes and rewrite your commit history.\nMake sure to use it only when necessary.",
      "examples": [
        "git log --oneline e56ba1f (HEAD -> master) Revert \"Just a regular update, definitely no accidents here...\" 52418f7 Just a regular update, definitely no accidents here... 9a9add8 (origin/master) Added .gitignore 81912ba Corrected spelling error 3fdaa5b Merge pull request #1 from w3schools-test/update-readme 836e5bf (origin/update-readme, update-readme) Updated readme for GitHub Branches daf4f7c (origin/html-skeleton, html-skeleton) Updated index.html with basic meta facaeae (gh-page/master) Merge branch 'master' of https://github.com/w3schools-test/hello-world e7de78f Updated index.html. Resized image 5a04b6f Updated README.md with a line about focus d29d69f Updated README.md with a line about GitHub e0b6038 merged with hello-world-images after fixing conflicts 1f1584e added new image dfa79db updated index.html with emergency fix 0312c55 Added image to Hello World 09f4acd Updated index.html with a new line 221ec6e First release of Hello World!",
        "git reset --soft 9a9add8",
        "git reset --mixed 9a9add8",
        "git reset",
        "git reset --soft <commit>",
        "git reset --mixed <commit>",
        "git reset --hard <commit>",
        "git reset <file>",
        "git log --oneline",
        "commit",
        "reset",
        "log",
        "--oneline",
        "commit hash",
        "commit message",
        "9a9add8 (origin/master) Added .gitignore",
        "9a9add8",
        "git reset <commit>",
        "git status"
      ]
    },
    {
      "title": "Git Amend",
      "summary": "Change Platform:\nWhat is Git Amend?\nGit Amend is a command that allows you to modify the most recent commit.\nYou can use it to fix typos, add or remove files, or change the commit message.\nWhen to Use Git Amend\nUse Git Amend when you need to make small changes to your last commit.\nIt's perfect for fixing mistakes, adding forgotten files, or updating the commit message.\nFix Last Commit Message\nTo change the last commit message, follow these steps:\nOpen your terminal and navigate to your repository.\nType git commit --amend -m \"New message\" to change the commit message.\nPress Enter to save the changes.\nExample\nAdd Files to Last Commit\nTo add files to the last commit, follow these steps:\nOpen your terminal and navigate to your repository.\nType git add <file> to add the file to the staging area.\nType git commit --amend to add the file to the last commit.\nPress Enter to save the changes.\nExample\nREMOVE ADS\nRemove Files from Last Commit\nTo remove files from the last commit, follow these steps:\nOpen your terminal and navigate to your repository.\nType git reset HEAD^ -- <file> to remove the file from the staging area.\nType git commit --amend to remove the file from the last commit.\nPress Enter to save the changes.\nExample\nNow let's check the log:\nExample\nOh no! the commit message is full of spelling errors.\nEmbarrassing. Let's amend that:\nExample\nAnd re-check the log:\nExample\nWe see the previous commit is replaced with our amended one!\nWarning: Messing with the commit history of a repository can be dangerous.\nIt is usually ok to make these kinds of changes to your own local repository.\nHowever, you should avoid making changes that rewrite history to remote repositories, especially if others are working with them.\nGit Amend Files\nAdding files with --amend works the same way as above.\nJust add them to the staging environment before committing.",
      "examples": [
        "git commit --amend -m \"Corrected commit message\"",
        "git add forgotten.txt git commit --amend",
        "git reset HEAD^ -- unwanted.txt git commit --amend 1 file changed, 3 insertions(+), 1 deletion(-)",
        "git log --oneline 07c5bc5 (HEAD -> master) Adding plines to reddme 9a9add8 (origin/master) Added .gitignore 81912ba Corrected spelling error 3fdaa5b Merge pull request #1 from w3schools-test/update-readme 836e5bf (origin/update-readme, update-readme) Updated readme for GitHub Branches daf4f7c (origin/html-skeleton, html-skeleton) Updated index.html with basic meta facaeae (gh-page/master) Merge branch 'master' of https://github.com/w3schools-test/hello-world e7de78f Updated index.html. Resized image 5a04b6f Updated README.md with a line about focus d29d69f Updated README.md with a line about GitHub e0b6038 merged with hello-world-images after fixing conflicts 1f1584e added new image dfa79db updated index.html with emergency fix 0312c55 Added image to Hello World 09f4acd Updated index.html with a new line 221ec6e First release of Hello World!",
        "git commit --amend -m \"Added lines to README.md\" [master eaa69ce] Added lines to README.md Date: Thu Apr 22 12:18:52 2021 +0200 1 file changed, 3 insertions(+), 1 deletion(-))",
        "git log --oneline eaa69ce (HEAD -> master) Added lines to README.md 9a9add8 (origin/master) Added .gitignore 81912ba Corrected spelling error 3fdaa5b Merge pull request #1 from w3schools-test/update-readme 836e5bf (origin/update-readme, update-readme) Updated readme for GitHub Branches daf4f7c (origin/html-skeleton, html-skeleton) Updated index.html with basic meta facaeae (gh-page/master) Merge branch 'master' of https://github.com/w3schools-test/hello-world e7de78f Updated index.html. Resized image 5a04b6f Updated README.md with a line about focus d29d69f Updated README.md with a line about GitHub e0b6038 merged with hello-world-images after fixing conflicts 1f1584e added new image dfa79db updated index.html with emergency fix 0312c55 Added image to Hello World 09f4acd Updated index.html with a new line 221ec6e First release of Hello World!",
        "git commit --amend -m \"New message\"",
        "git add <file>",
        "git commit --amend",
        "git reset HEAD^ -- <file>",
        "log",
        "commit",
        "amend",
        "remote",
        "--amend",
        "staging environment"
      ]
    },
    {
      "title": "Git Rebase",
      "summary": "What is Git Rebase?\nRebasing moves or combines a sequence of commits to a new base commit.\nIt is often used to keep a clean, linear project history.\nRebasing can make your commit history easier to read by avoiding unnecessary merge commits.\nWhen to Use Git Rebase\nUse Git Rebase to:\nKeep a clean, linear project history\nAvoid unnecessary merge commits\nCombine multiple commits into one\nEdit or reorder commits\nBasic Rebase\nTo move your current branch on top of another branch (e.g., update your feature branch with latest main):\nExample: Rebase onto main\nThis reapplies your feature branch changes on top of the latest main branch.\nREMOVE ADS\nInteractive Rebase\ngit rebase -i <base> lets you edit, reorder, squash, or fix up commits before a certain point.\nThis is useful for cleaning up your commit history before sharing it with others.\nExample: Start Interactive Rebase\nThis opens an editor where you can:\npick: keep the commit as is\nsquash: combine commits together\nedit: pause to change a commit\nreword: change just the commit message\nFollow these steps:\nEdit the commit message or choose an action (pick, squash, edit, reword)\nSave and close the editor\nGit will apply the changes and let you review the results\nContinue, Abort, or Skip\nIf you hit a conflict or need to finish editing a commit, use git rebase --continue after resolving the issue.\nThis tells Git to keep going with the rebase process.\nExample\nIf something goes wrong or you want to stop the rebase, use git rebase --abort.\nThis will put your branch back to how it was before you started rebasing.\nExample\nIf you can't fix a commit during a rebase (for example, if a conflict can't be resolved), you can skip it with git rebase --skip.\nGit will leave out that commit and move on to the next one.\nExample\nReview Changes\nAfter completing the rebase, review your changes to ensure everything is correct.\nTips & Best Practices\nRebasing rewrites commit history.\nAvoid rebasing commits that you have already pushed to a shared repository.\nUse git rebase -i to edit, reorder, squash, or fix up commits before a certain point.\nUse git rebase --continue to continue a rebase after resolving conflicts.\nUse git rebase --abort to cancel a rebase in progress.\nTroubleshooting\nIf you encounter conflicts during a rebase, resolve them and then use git rebase --continue to continue the rebase process.\nIf you can't fix a commit during a rebase, use git rebase --skip to skip it.\nNote: Rebasing rewrites commit history.\nAvoid rebasing commits that you have already pushed to a shared repository.",
      "examples": [
        "git checkout feature-branch git rebase main",
        "git rebase -i HEAD~3",
        "git add fixed_file.txt git rebase --continue",
        "git rebase --abort",
        "git rebase --skip",
        "main",
        "git rebase -i <base>",
        "git rebase --continue",
        "git rebase -i"
      ]
    },
    {
      "title": "Git Reflog",
      "summary": "What is Git Reflog?\ngit reflog records updates to the tip of branches and HEAD.\nIt lets you see where your branch and HEAD have been, even changes you made by mistake.\nThis is useful for recovering lost commits or undoing a reset.\nWhen to Use Git Reflog\nUse git reflog when you need to:\nRecover lost commits or changes\nUndo a reset or a merge\nSee the history of your branch and HEAD\nShow the Reflog\nTo see the history of where HEAD and branches have pointed, use:\nExample\nThis lists recent positions of HEAD, so you can see actions like commits, resets, merges, and checkouts.\nREMOVE ADS\nFind and Recover Lost Commits\nIf you accidentally reset or deleted commits, you can use the reflog to find the commit and restore it.\nEach entry in the reflog has a reference like HEAD@{2}.\nExample: Undo a Hard Reset\nThis puts your branch back to the state it was in at that point.\nClean Up the Reflog\nThe reflog is automatically cleaned by Git, but you can manually expire old entries if needed:\nExample\nThis removes reflog entries older than 30 days for the main branch and runs garbage collection.\nTips & Best Practices\nUse git reflog regularly to keep track of your changes\nUse git reflog to recover lost commits or changes\nUse git reflog expire to clean up old entries\nTroubleshooting\nIf you encounter issues with git reflog, try:\nChecking the Git documentation for more information\nSearching online for solutions to specific issues\nSeeking help from a Git expert or community\nWarnings\nBe careful when using git reflog to recover lost commits or changes, as it can overwrite existing changes.",
      "examples": [
        "git reflog e56ba1f (HEAD -> master) HEAD@{0}: commit: Revert \"Just a regular update, definitely no accidents here...\" 52418f7 HEAD@{1}: commit: Just a regular update, definitely no accidents here... 9a9add8 (origin/master) HEAD@{2}: commit: Added .gitignore 81912ba HEAD@{3}: commit: Corrected spelling error 3fdaa5b HEAD@{4}: merge: Merge pull request #1 from w3schools-test/update-readme 836e5bf HEAD@{5}: commit: Updated readme for GitHub Branches ...",
        "git reflog e56ba1f (HEAD -> master) HEAD@{0}: commit: Revert \"Just a regular update, definitely no accidents here...\" 52418f7 HEAD@{1}: commit: Just a regular update, definitely no accidents here... 9a9add8 (origin/master) HEAD@{2}: commit: Added .gitignore 81912ba HEAD@{3}: commit: Corrected spelling error ... git reset --hard HEAD@{2} HEAD is now at 9a9add8 Added .gitignore",
        "git reflog expire --expire=30.days refs/heads/main git gc --prune=now Counting objects: 15, done. Compressing objects: 100% (10/10), done. Pruning objects",
        "git reflog",
        "HEAD@{2}",
        "main",
        "git reflog expire"
      ]
    },
    {
      "title": "Git Recovery",
      "summary": "What is Git Recovery?\nGit recovery means getting back lost commits, branches, or files.\nGit keeps a record of recent changes so you can undo mistakes—even after a reset or delete.\nWhen to Use Git Recovery\nUse Git recovery when you:\nAccidentally delete a branch or file\nReset your branch to a previous commit and lose changes\nNeed to recover lost commits or changes\nRecover Lost Commits with git reflog\ngit reflog records changes to the tip of branches and lets you find lost commits.\nExample: Show Reflog\nFind the commit hash you want to recover from the list.\nRestore a Deleted Branch\nIf you deleted a branch but the commits are still in reflog, you can recreate it:\nExample: Restore a Branch\nThis brings back the branch at the commit you specify.\nREMOVE ADS\nRecover a Deleted or Changed File\nIf you deleted or changed a file and want to get it back, use git restore:\nExample: Restore a File\nThis brings back the file from the latest commit.\nRecover from a Hard Reset\nIf you used git reset --hard and lost commits, you can use the reflog to find and restore them:\nExample: Undo a Hard Reset\nThis puts your branch back to the state it was in at that point.\nTips & Best Practices\nRegularly commit your changes to avoid losing work\nUse git reflog to find lost commits\nUse git restore to recover deleted or changed files",
      "examples": [
        "git reflog e56ba1f (HEAD -> master) HEAD@{0}: commit: Revert \"Just a regular update, definitely no accidents here...\" 52418f7 HEAD@{1}: commit: Just a regular update, definitely no accidents here... 9a9add8 (origin/master) HEAD@{2}: commit: Added .gitignore 81912ba HEAD@{3}: commit: Corrected spelling error 3fdaa5b HEAD@{4}: merge: Merge pull request #1 from w3schools-test/update-readme 836e5bf HEAD@{5}: commit: Updated readme for GitHub Branches ...",
        "git checkout -b branch-name <commit-hash> Switched to a new branch 'branch-name'",
        "git restore filename.txt",
        "git reflog e56ba1f (HEAD -> master) HEAD@{0}: commit: Revert \"Just a regular update, definitely no accidents here...\" 52418f7 HEAD@{1}: commit: Just a regular update, definitely no accidents here... 9a9add8 (origin/master) HEAD@{2}: commit: Added .gitignore 81912ba HEAD@{3}: commit: Corrected spelling error 3fdaa5b HEAD@{4}: merge: Merge pull request #1 from w3schools-test/update-readme 836e5bf HEAD@{5}: commit: Updated readme for GitHub Branches ... git reset --hard HEAD@{2} HEAD is now at 9a9add8 Added .gitignore",
        "git reflog",
        "git restore",
        "git reset --hard"
      ]
    },
    {
      "title": "Git Ignore and .gitignore",
      "summary": "Change Platform:\nWhat is .gitignore?\nThe .gitignore file tells Git which files and folders to ignore (not track).\nThis is useful for keeping log files, temporary files, build artifacts, or personal files out of your repository.\nExamples of files to ignore: log files, temporary files, hidden files, personal files, OS/editor files, etc.\nThe .gitignore file itself is tracked by Git, so everyone using the repository ignores the same files.\nWhen to Use .gitignore\nWhen you want to keep sensitive, local, or unnecessary files out of your repository\nWhen sharing a project with others and want to avoid cluttering Git history\nWhen working with build tools or editors that create extra files\nCreate a .gitignore File\nGo to the root of your local Git repository.\nCreate a file named .gitignore:\nExample\nIgnoring Folders\nTo ignore a folder and everything inside it, use a trailing slash:\nThis ignores any folder named temp anywhere in your project.\nREMOVE ADS\nWildcards & Patterns\nWildcards let you match many files or folders at once:\n* matches any number of characters\n? matches a single character\n[abc] matches any character in the set\n[!abc] matches any character not in the set\nNegation (!)\nUse ! to not ignore something that would otherwise be ignored. This is called an exception:\nThis ignores all .log files except important.log.\nComments and Blank Lines\nLines starting with # are comments and are ignored by Git. Blank lines are also ignored. Use comments to explain your rules:\nLocal & Personal Ignore Rules\nIf you want to ignore files only for yourself (not for everyone who uses the repository), add them to .git/info/exclude. This works just like .gitignore but is not shared.\nGlobal .gitignore (User Level)\nYou can set up a global .gitignore file for all your projects. This is great for ignoring OS or editor files everywhere (like .DS_Store or Thumbs.db):\nThen add your patterns to ~/.gitignore_global.\nHow to Stop Tracking a File\nIf you add a file to .gitignore but Git is still tracking it, you need to tell Git to stop:\nThis removes the file from the repository but keeps it on your computer. Next time you commit, Git will ignore it.\nTips & Troubleshooting\nCheck for typos—.gitignore is case-sensitive!\nIf a file is already tracked, use git rm --cached to stop tracking it.\nUse comments (#) to explain tricky rules for your teammates.\nUse git status to see if your ignored files are being tracked.\nRemember: .gitignore only affects files that are not already tracked by Git.\nPattern Syntax\nHere are some common patterns and how they match:",
      "examples": [
        "touch .gitignore",
        "temp/",
        "*.tmp # all .tmp files my?ile.txt # matches my1ile.txt, myAile.txt, etc. log[0-9].txt # log1.txt, log2.txt, ... log9.txt",
        "*.log !important.log",
        "# Ignore log files *.log # Ignore temp folders temp/",
        "git config --global core.excludesfile ~/.gitignore_global",
        "git rm --cached filename.txt",
        ".gitignore",
        "temp",
        "*",
        "?",
        "[abc]",
        "[!abc]",
        "!",
        ".log",
        "important.log",
        "#",
        ".git/info/exclude",
        ".DS_Store",
        "Thumbs.db",
        "~/.gitignore_global",
        "git rm --cached",
        "git status"
      ]
    },
    {
      "title": "Git .gitattributes",
      "summary": "What is .gitattributes?\nThe .gitattributes file is a special file that tells Git how to handle specific files in your repository.\nIt controls things like line endings, file types, merge behavior, custom diff tools, and more.\nEveryone on your team gets the same settings because this file is versioned with your project.\nFor more about Git LFS, see the dedicated page.\nWhen to Use .gitattributes\nTo enforce consistent line endings across different operating systems\nTo mark files as binary (so Git doesn't try to merge or change them)\nTo enable Git LFS for large files\nTo set up custom diff or merge tools for special file types\nTo control how files are exported in archives\nCreate or Edit .gitattributes\nGo to the root of your repository (or a subfolder for local rules).\nCreate or edit the .gitattributes file.\nAdd rules, one per line, for how Git should treat files.\nExample: Force Unix Line Endings for All Text Files\nREMOVE ADS\nHandle Line Endings\nStandardize line endings to avoid merge conflicts and broken files across different OSes.\nExample: Set LF for Shell Scripts\nMark Files as Binary\nTell Git which files are binary (not text).\nThis prevents Git from trying to merge or change line endings for these files.\nExample: Mark PNG Files as Binary\nEnable LFS for File Types\nUse Git LFS for large files like images or datasets.\nThis tells Git to use LFS for these files:\nExample: Track PSD Files with LFS\nCustom Diff Settings\nTell Git to use a special tool to compare certain file types (like Markdown or Jupyter notebooks):\nExample: Custom Diff for Markdown\nCheck Attributes\nSee what attributes are set for a file:\nExample: Check Attributes of a File\nAdvanced Usage\nMerge Strategies: Set custom merge drivers for tricky files (like lock files or notebooks).\nExport-ignore: Exclude files from tar/zip archives created by git archive:\nExample: Ignore Files on Export\nTips & Best Practices\nPatterns work like .gitignore (wildcards, etc).\nPut .gitattributes in subfolders for rules that only apply there.\nChanging .gitattributes won't retroactively fix files already committed—re-add files to update them.\nUse git check-attr to debug attribute issues.\nNote: .gitattributes is versioned with your project, so everyone on your team gets the same settings.",
      "examples": [
        "*.txt text eol=lf",
        "*.sh text eol=lf",
        "*.png binary",
        "*.psd filter=lfs diff=lfs merge=lfs -text",
        "*.md diff=markdown",
        "git check-attr --all README.md",
        "docs/* export-ignore",
        ".gitattributes",
        "git archive",
        ".gitignore",
        "git check-attr"
      ]
    },
    {
      "title": "Git LFS",
      "summary": "What is Git LFS?\nGit LFS (Large File Storage) is an extension for Git that helps you manage large files (like videos, images, or datasets) efficiently.\nInstead of storing big files directly in your repository, LFS stores a small pointer file in your repo and keeps the real content on a separate LFS server.\nThis keeps your repository fast and small, even if you work with huge files.\nEveryone who clones the repo gets the pointer, and Git LFS fetches the real file content as needed.\nWhen to Use Git LFS\nWhen you need to version large files (media, datasets, binaries)\nWhen your project exceeds the file size limits of standard Git hosting\nWhen you want to keep your repository size manageable and fast\nInstall Git LFS\nDownload and install Git LFS from git-lfs.github.com.\nInitialize LFS in your repository:\nExample\nREMOVE ADS\nTrack Files with LFS\nTell Git LFS which files to manage by \"tracking\" them. For example, to track all Photoshop files:\nExample: Track .psd Files\nYou can track any file type. Here are more examples:\nHow LFS Works (.gitattributes & Pointers)\nWhen you track a file type with LFS, Git adds a rule to the .gitattributes file. This tells Git to use LFS for those files.\nExample: .gitattributes Entry\nWhen you add and commit a tracked file, Git stores a small \"pointer\" file in your repo. The real content is uploaded to the LFS server.\nIf you clone or pull a repo with LFS files, Git will download the real content from the LFS server (if you have LFS installed).\nAdd, Commit, and Push LFS Files\nAdd files as usual: git add largefile.psd\nCommit: git commit -m \"Add large file\"\nPush: git push origin main\nThe actual file data is stored on the LFS server, while your repo contains a pointer file.\nCheck LFS Status\nSee which files are managed by LFS in your repo:\nExample: List LFS Files\nUntrack/Remove Files from LFS\nEdit .gitattributes and remove or change the relevant line.\nRun the untrack command:\nExample: Untrack a File\nCommit the change. The file will no longer be managed by LFS (but existing versions are still stored in LFS).\nTips & Best Practices\nUse LFS only for files that are too large or change too often for regular Git.\nCheck if your hosting provider supports LFS before using it (especially for private repos).\nMonitor your LFS storage quota. Free plans are often limited.\nTroubleshooting\nIf you clone a repo and see pointer files instead of real content, make sure Git LFS is installed and run git lfs pull.\nIf you push to a remote that doesn't support LFS, you'll get an error.\nSome files may not upload if you exceed your LFS quota.\nWarnings\nNot all hosting providers support LFS. Check before using it.\nLFS storage is often limited on free plans.",
      "examples": [
        "git lfs install",
        "git lfs track \"*.psd\"",
        "git lfs track \"*.zip\" git lfs track \"data/*.csv\" git lfs track \"images/*.{png,jpg}\"",
        "*.psd filter=lfs diff=lfs merge=lfs -text",
        "git lfs ls-files",
        "git lfs untrack \"*.psd\" git add .gitattributes",
        ".gitattributes",
        "git add largefile.psd",
        "git commit -m \"Add large file\"",
        "git push origin main",
        "git lfs pull"
      ]
    },
    {
      "title": "Git Signing",
      "summary": "What is Commit Signing?\nSigning a commit is like putting your personal signature on your work.\nIt proves that you really made the change, and helps others trust your code.\nOn platforms like GitHub or GitLab, signed commits often get a Verified badge.\nWhat is GPG?\nGPG (GNU Privacy Guard) is a tool that lets you create a digital key, kind of like a secret password, to sign things.\nGit uses GPG keys to sign commits and tags.\nThis helps prove your identity and ensures your code hasn't been tampered with.\nWhy and When Should You Sign Commits?\nTo prove your commits really came from you\nTo help others trust your code (especially in open source projects)\nSome companies or projects require signed commits for security\nIf you don't sign, your commits are still valid, just not verified\nHow to Set Up Commit Signing\nCreate a GPG key (if you don't have one):\nExample: Generate a New GPG Key\nFollow the prompts to create your key.\nFind your key ID:\nExample: List GPG Keys\nLook for a line like sec rsa4096/1234ABCD5678EFGH. The part after the slash is your key ID.\nTell Git to use your key:\nExample: Set Signing Key\nREMOVE ADS\nHow to Sign Commits and Tags\nTo sign a commit, use:\nTo sign a tag, use:\nSign All Commits Automatically\nIf you want Git to sign every commit by default, run:\nHow to Check if a Commit is Signed\nTo check in Git, run:\nOn GitHub or GitLab, look for a Verified badge next to your commit or tag.\nExample: Signed Commit in Git Log\nTroubleshooting Signed Commits\nGPG failed to sign the data: Make sure your GPG agent is running and your key is loaded.\nWrong key used: Double-check the key ID you set in Git.\nStill stuck? Try searching for the error message online or check your Git and GPG installation.\nNote: Signed commits and tags help ensure your code hasn't been tampered with and confirm your identity as the author.\nSome platforms may require additional setup to recognize your signature (for example, uploading your public key to GitHub or GitLab).",
      "examples": [
        "gpg --full-generate-key",
        "gpg --list-secret-keys --keyid-format=long",
        "git config --global user.signingkey <your-key-id>",
        "commit 1234abcd5678efgh gpg: Signature made ... gpg: Good signature from \"Your Name\n\" Author: Your Name\nDate: ...",
        "git commit -S -m \"message\"",
        "git tag -s v1.0 -m \"version 1.0\"",
        "git config --global commit.gpgSign true",
        "git log --show-signature",
        "sec rsa4096/1234ABCD5678EFGH"
      ]
    },
    {
      "title": "Git Cherry-pick & Patch",
      "summary": "What is Cherry-pick?\nCherry-pick lets you copy a single commit from one branch to another. It’s useful when you want just one (or a few) changes, not everything from another branch.\nWhat is a Patch?\nA patch is a file with changes from one or more commits. You can share a patch or apply it to another repository, even if it’s unrelated to your own.\nWhen to Use Each\nUse cherry-pick to copy a commit between branches in the same repository.\nUse patches to share changes as files, or when working across different repositories.\nHow to Cherry-pick a Commit\nCopy a specific commit from another branch to your current branch:\nExample: Cherry-pick a Commit\nThis creates a new commit on your branch with the same changes.\nREMOVE ADS\nEdit the Commit Message\nUse --edit to change the commit message while cherry-picking:\nExample: Edit Commit Message\nApply Without Committing\nUse --no-commit (or -n) to apply the changes, but not create a commit yet. This lets you make more changes before committing:\nExample: Cherry-pick Without Commit\nAdd Commit Origin\nUse -x to add a line to the commit message showing where the commit came from:\nExample: Cherry-pick With Origin\nHandling Conflicts\nIf there are conflicts, Git will pause and ask you to fix them. After fixing, run:\nExample: Continue After Conflict\nTo cancel the cherry-pick, use:\nExample: Abort Cherry-pick\nHow to Create a Patch\nMake a patch file from a commit:\nExample: Create Patch\nFor multiple commits:\nExample: Multiple Commits\nHow to Apply a Patch\nApply a patch file to your current branch:\nExample: Apply Patch\nApply a Patch and Keep Metadata\nUse git am to apply a patch and keep the original author and message:\nExample: Apply Patch with Metadata\nReverse a Patch\nUndo the changes in a patch file:\nExample: Reverse Patch\nTip: Use cherry-pick for copying a single commit in the same repository.\nUse patches to share changes as files or work across repositories.\nIf you want to keep commit history and authors, use git am instead of git apply.\nTroubleshooting & Best Practices\nCherry-pick conflicts: If you get conflicts, fix them, then run git cherry-pick --continue.\nAbort with git cherry-pick --abort if needed.\nPatch doesn't apply cleanly: Make sure the patch matches your codebase. Sometimes you may need to adjust manually.\nKeep your branches up to date: Before cherry-picking or applying patches, pull the latest changes.",
      "examples": [
        "git cherry-pick abc1234",
        "git cherry-pick abc1234 --edit",
        "git cherry-pick abc1234 --no-commit",
        "git cherry-pick abc1234 -x",
        "git add . git cherry-pick --continue",
        "git cherry-pick --abort",
        "git format-patch -1 abc1234",
        "git format-patch HEAD~3",
        "git apply 0001-some-change.patch",
        "git am 0001-some-change.patch",
        "git apply -R 0001-some-change.patch",
        "--edit",
        "--no-commit",
        "-n",
        "-x",
        "git am",
        "git apply",
        "git cherry-pick --continue"
      ]
    },
    {
      "title": "Git Merge Conflicts",
      "summary": "What is a Merge Conflict?\nA merge conflict happens when two branches change the same part of a file.\nGit can't decide which change to keep, so you have to choose.\nYou must resolve the conflict before you can finish the merge.\nWhy Do Merge Conflicts Happen?\nMerge conflicts usually happen when you merge branches that changed the same lines in a file.\nThis is common in collaborative projects or when working on long-lived branches.\nHow to See and Resolve Merge Conflicts\nWhen you merge a branch and there are conflicting changes, Git will pause and mark the files with conflicts.\nExample: Merge a Branch\nIf there are conflicts, Git will tell you which files are affected.\nSee Which Files Have Conflicts\nUse git status to see which files need your attention:\nExample: Check Status\nREMOVE ADS\nSee the Differences\nUse git diff to see what changed and help you decide how to resolve the conflict:\nExample: See Differences\nEdit the Conflict Markers\nOpen the conflicted file. You'll see sections like this:\nConflict Markers\nEdit the file to keep what you want, then remove the conflict markers (<<<<<<<, =======, >>>>>>>).\nMark as Resolved\nAfter fixing the file, mark it as resolved:\nExample: Mark Resolved\nComplete the Merge\nFinish the merge with a commit (if Git doesn't do it automatically):\nExample: Finish Merge\nCancel the Merge\nIf you want to stop and undo the merge:\nExample: Abort Merge\nUse a Visual Merge Tool\nIf you prefer, you can use a visual tool to resolve conflicts:\nExample: Use Mergetool\nPick One Side's Changes\nIf you want to keep only your changes or only the other branch's changes:\nExample: Keep Our Changes\nExample: Keep Their Changes\nTroubleshooting & Best Practices\nIf you're stuck, you can always use git merge --abort to start over.\nMake sure you remove all conflict markers before marking as resolved.\nIf you use git mergetool and don't like the result, you can still edit the files by hand.",
      "examples": [
        "git merge feature-branch",
        "git status",
        "git diff",
        "<<<<<<< HEAD Your changes here ======= Other branch's changes >>>>>>> feature-branch",
        "git add filename.txt",
        "git commit",
        "git merge --abort",
        "git mergetool",
        "git checkout --ours filename.txt",
        "git checkout --theirs filename.txt",
        "<<<<<<<",
        "=======",
        ">>>>>>>"
      ]
    },
    {
      "title": "Git CI/CD",
      "summary": "What is CI/CD?\nCI/CD stands for Continuous Integration and Continuous Deployment/Delivery.\nIt means your code is automatically tested and deployed every time you push.\nThis helps you catch bugs early and deliver features faster, with less manual work.\nWhy Use CI/CD?\nCI/CD automates the process of testing and deploying your code. This means:\nFind bugs before they reach users\nDeploy changes faster and more safely\nReduce manual steps and mistakes\nGet quick feedback on every push\nHow Does CI/CD Work with Git?\nEvery time you push code to your Git repository:\nThe CI/CD service (like GitHub Actions or GitLab CI) detects the change\nIt runs tests, builds your project, and can deploy automatically\nIf something fails, you get notified right away\nExample Workflow\nPopular CI/CD Services\nGitHub Actions: Built into GitHub, uses YAML files in .github/workflows/\nGitLab CI/CD: Built into GitLab, uses .gitlab-ci.yml\nCircleCI: Works with GitHub/GitLab, easy setup for many languages\nTravis CI: Popular for open-source, uses .travis.yml\nAzure Pipelines: Works with Azure DevOps and GitHub, supports many platforms\nKey CI/CD Concepts\nHere are some important terms:\nWorkflow: A series of jobs that run together\nJob: A group of steps that run together\nStep: A single task, like checking out code or running tests\nRunner: The computer/server that runs your jobs\nTrigger: Decides when your workflow runs\nEnvironment Variables: Settings for your workflow\nSecrets: Passwords or API keys\nJobs\nA job is a group of steps that run together. Each job runs on a runner (a server).\nREMOVE ADS\nSteps\nEach step is a single task, like checking out code or running tests.\nRunners\nA runner is the computer/server that runs your jobs.\nYou can use the service's runners or set up your own for more control.\nTriggers\nA trigger decides when your workflow runs.\nCommon triggers are push (every push) and pull_request (when a pull request is opened or updated).\nEnvironment Variables & Secrets\nUse environment variables for settings, and secrets for passwords or API keys.\nNever hardcode secrets in your code!\nBuild Logs\nCI/CD tools show logs for every job and step. Check logs to see what happened or to debug failures.\nIn GitHub Actions, click on a workflow run and see logs for each job/step.\nSkipping CI\nYou can skip CI/CD for a commit by adding [skip ci] to your commit message.\nThis is useful for documentation or minor changes.\nBadges\nAdd a badge to your README to show CI/CD status.\nThis lets others see if your latest build passed.\nExample: GitHub Actions Workflow File (Explained)\nname: Sets the workflow's display name in GitHub.\non: Decides when the workflow runs (here: every push).\njobs: Groups together steps that run on a runner.\nbuild: The name of this job (can be anything).\nruns-on: Picks the type of server (here: Ubuntu Linux).\nsteps: Each step does one thing, like checking out code or running tests.\nuses: Uses a pre-made GitHub Action (here: checks out your code).\nname: (under steps) Gives a step a label.\nrun: Runs a shell command (here: npm test to run tests).\nTroubleshooting & Best Practices\nIf a build fails, check the logs for error messages.\nMake sure your secrets and environment variables are set correctly.\nYou can rerun failed jobs from the CI/CD dashboard.\nCheck the documentation for your CI/CD service for more help.\nStart small: automate tests first, then add deployment when ready.\nKeep secrets out of your code and never commit API keys.\nUse badges to show your build status in the README.\nNote: CI/CD helps catch bugs early and speeds up delivery. Even small projects can benefit from automation!",
      "examples": [
        "[Developer] --push--> [Git Repository] --triggers--> [CI/CD Pipeline: Test, Build, Deploy]",
        "jobs: build: runs-on: ubuntu-latest steps: # steps go here",
        "steps: - uses: actions/checkout@v3 - name: Run tests run: npm test",
        "runs-on: ubuntu-latest",
        "on: push: pull_request:",
        "env: NODE_ENV: production API_KEY: ${{ secrets.API_KEY }}",
        "git commit -m \"Update docs [skip ci]\"",
        "![CI](https://github.com/username/repo/actions/workflows/ci.yml/badge.svg)",
        "# .github/workflows/ci.yml # This file tells GitHub Actions how to run CI for your project name: CI # The name of the workflow (shows up in GitHub) on: [push] # Trigger: run this workflow on every push jobs: build: # Job name (can be anything) runs-on: ubuntu-latest # Runner: use the latest Ubuntu server steps: - uses: actions/checkout@v3 # Step: check out your code from the repo - name: Run tests # Step: give this step a name run: npm test # Step: run your project's tests",
        ".github/workflows/",
        ".gitlab-ci.yml",
        ".travis.yml",
        "push",
        "pull_request",
        "[skip ci]",
        "npm test"
      ]
    },
    {
      "title": "Git Hooks",
      "summary": "What are Git Hooks?\nGit hooks are scripts that run automatically when certain Git events happen, like making a commit or pushing code.\nWhy Use Hooks?\nHooks help you automate repetitive tasks, enforce coding standards, and catch problems early.\nFor example, you can:\nRun tests before every commit or push\nCheck code style automatically\nBlock bad commit messages\nEnforce rules for everyone on your team\nWhere Do Hooks Live?\nHooks are stored in .git/hooks inside your repository.\nBy default, you'll see sample scripts ending with .sample.\nHow to Enable a Hook\nTo enable a hook, remove the .sample extension and make the script executable.\nFor example, to enable pre-commit:\nOn Windows, just rename the file to pre-commit and make sure it can be run by your shell (e.g. use .bat or .ps1 if needed).\nREMOVE ADS\nTypes of Hooks\nThere are many types of hooks, but the most common are:\npre-commit\ncommit-msg\npre-push\npre-receive\npost-receive\npre-commit Hook\nThe pre-commit hook runs before you make a commit.\nYou can use it to check code style, run tests, or stop a commit if something is wrong.\ncommit-msg Hook\nThe commit-msg hook checks or edits the commit message.\nFor example, it can block commits without a ticket number.\npre-push Hook\nThe pre-push hook runs before you push code to a remote.\nYou can use it to run tests or checks before sharing code.\nServer-side Hooks\nSome hooks (like pre-receive) run on the Git server, not your computer.\nThese can enforce rules for everyone who pushes to the repository.\nCustom Hooks\nYou can write any custom script as a hook.\nJust put it in .git/hooks and make it executable.\nDebugging and Best Practices\nMake sure your hook script is executable (chmod +x scriptname).\nAdd echo statements to see what your script is doing.\nCheck the exit code: exit 0 means success, exit 1 means fail.\nOn Windows, use .bat or .ps1 scripts if needed.\nKeep hooks simple and fast—slow hooks slow down your workflow.\nShare useful hooks with your team (but remember: hooks are not versioned by default).\nNote: Hooks are powerful for automating checks (like linting or tests) and enforcing team standards. Client-side hooks run on your computer. Server-side hooks run on the Git server.",
      "examples": [
        "ls .git/hooks",
        "mv .git/hooks/pre-commit.sample .git/hooks/pre-commit chmod +x .git/hooks/pre-commit",
        "#!/bin/sh # Stop commit if any .js file has \"console.log\" grep -r 'console.log' *.js && { echo \"Remove console.log before committing!\" exit 1 }",
        "#!/bin/sh # Block commit if message does not contain a ticket number if ! grep -qE 'JIRA-[0-9]+' \"$1\"; then echo \"Commit message must have a ticket number (e.g. JIRA-123)\" exit 1 fi",
        "#!/bin/sh npm test || exit 1",
        "#!/bin/sh # Block pushes to main branch grep refs/heads/main || exit 1",
        "#!/bin/sh echo \"Hello from my custom hook!\"",
        ".git/hooks",
        ".sample",
        "pre-commit",
        ".bat",
        ".ps1",
        "commit-msg",
        "pre-push",
        "pre-receive",
        "post-receive",
        "chmod +x scriptname",
        "echo",
        "exit 0",
        "exit 1"
      ]
    },
    {
      "title": "Git Submodules",
      "summary": "What Are Git Submodules?\nGit submodules let you include one Git repository inside another as a subdirectory.\nThis is useful for adding libraries or dependencies managed in separate repositories, while keeping their commit history separate.\nWhy Use Submodules?\nSubmodules are helpful when you want to:\nReuse code from another project\nTrack a library or dependency at a specific commit\nKeep histories of projects separate\nHow to Add a Submodule\nTo add a submodule to your project, use:\nExample: Add a Submodule\nThis creates a subdirectory libs/library and updates .gitmodules with the submodule info.\nHow to Clone a Repo with Submodules\nWhen you clone a repository with submodules, you need to fetch their contents separately:\nOr do it all at once when cloning:\nREMOVE ADS\nHow to Check Submodule Status\nTo see the current commit and state of your submodules, use:\nHow to Run Commands in All Submodules\nYou can run a command in every submodule. For example, to check their status:\nHow to Update Submodules\nTo update submodules to the latest commit from their remote repository:\nHow to Remove a Submodule\nTo remove a submodule:\nDelete the relevant section from .gitmodules\nRemove the submodule directory from your working tree\nRun git rm --cached path/to/submodule\nAbout .gitmodules\nThe .gitmodules file keeps track of all submodules and their paths. Edit this file if you move or remove submodules.\nTroubleshooting and Best Practices\nIf submodules are empty after cloning, run git submodule update --init --recursive.\nIf you change a submodule's URL, update both .gitmodules and .git/config.\nSubmodules always point to a specific commit, not always the latest—remember to update if you want new changes.\nKeep submodules for external projects you want to track at a fixed version. For simpler needs, consider alternatives like Git subtree or copying files.\nNote: Submodules are powerful, but can be tricky to manage.\nOnly use them if you really need to track another project at a specific commit.",
      "examples": [
        "git submodule add https://github.com/example/library.git libs/library",
        "git submodule init git submodule update",
        "git clone --recurse-submodules https://github.com/user/repo.git",
        "git submodule status",
        "git submodule foreach git status",
        "git submodule update --remote",
        "[submodule \"libs/library\"] path = libs/library url = https://github.com/example/library.git",
        "libs/library",
        ".gitmodules",
        "git rm --cached path/to/submodule",
        "git submodule update --init --recursive",
        ".git/config"
      ]
    },
    {
      "title": "Git Advanced Remote",
      "summary": "What Are Git Remotes?\nRemotes are references to remote repositories.\nThey let you collaborate, fetch, and push code to shared projects on services like GitHub, GitLab, or Bitbucket.\nWhy Use Multiple Remotes?\nYou can add more than one remote to your project. This is useful for:\nCollaborating with different teams (e.g., your fork and the main project)\nMirroring repositories\nMaintaining backups\nHow to Add a Remote\nTo add a new remote repository:\nHow to Remove a Remote\nTo remove a remote repository:\nHow to Rename a Remote\nTo change the name of an existing remote (for example, renaming origin to main-origin):\nREMOVE ADS\nHow to List All Remotes\nSee all remotes and their URLs:\nHow to Show Remote Details\nGet detailed information about a specific remote (such as fetch/push URLs and tracked branches):\nHow to Fetch from a Remote\nFetch changes from any remote:\nHow to Push to a Remote\nPush your local branch to a specific remote repository:\nHow to Track a Remote Branch\nTo set up a local branch to track a branch from a remote:\nNote: Managing multiple remotes is common in open source projects (e.g., origin for your fork, upstream for the main project).\nTroubleshooting and Best Practices\nIf you get \"remote not found\", check the spelling of the remote name with git remote -v.\nIf fetch or push fails, make sure you have access to the remote repository.\nUse git remote show <name> to see details and troubleshoot issues.\nCheck your network connection if you cannot reach a remote server.\nUse clear, descriptive names for remotes (e.g., origin, upstream, backup).\nRemove unused remotes to keep your project tidy.",
      "examples": [
        "git remote add upstream https://github.com/other/repo.git",
        "git remote remove upstream",
        "git remote rename origin main-origin",
        "git remote -v",
        "git remote show upstream",
        "git fetch upstream",
        "git push upstream main",
        "git checkout -b new-feature upstream/new-feature",
        "origin",
        "main-origin",
        "upstream",
        "git remote show <name>",
        "backup"
      ]
    },
    {
      "title": "Git Exercises",
      "summary": "Exercises\nTest your Git skills with exercises from all categories:\nInstall\nConfig\nGet Started\nNew Files\nStaging Environment\nCommit\nTagging\nStash\nHistory\nHelp\nBranch\nBranch Merge\nWorkflow\nBest Practices\nSSH Security\nSet Remote\nPull from Remote\nPush to Remote\nRemote Branch\nPull from Remote Branch\nPush to Remote Branch\nClone\nPull Request\nRevert\nReset\nAmend\nRebase\nReflog\nRecovery\n.gitignore\n.gitattributes\nLFS\nSigning\nCherry Pick/Patch\nMerge Conflicts\nCI/CD\nHooks\nSubmodules\nRemote Advanced\nLog in to track your progress\nIf you haven't already, sign up to become a W3Schooler, and get points for every exercise you complete.\nAs a logged-in W3Schools user you will have access to many features like having your own web page, track your learning progress, receive personal guided paths, and more.\nThe Exercise\nThe exercises are a mix of \"multiple choice\" and \"fill in the blanks\" questions. There are between 3 and 9 questions in each category. The answer can be found in the corresponding tutorial chapter. If you're stuck, or answer wrong, you can try again or hit the \"Show Answer\" button to see the correct answer.\nKickstart your career\nGet certified by completing the GIT course",
      "examples": []
    },
    {
      "title": "Git Quiz",
      "summary": "You can test your Git skills with W3Schools' Quiz.\nThe Test\nThe test contains 25 questions and there is no time limit.\nThe test is not official, it's just a nice way to see how much you know, or don't know, about Git.\nCount Your Score\nYou will get 1 point for each correct answer. At the end of the Quiz, your total score will be displayed. Maximum score is 25 points.\nStart the Quiz\nGood luck!\nStart the Git Quiz ❯\nIf you do not know Git, we suggest that you read our Git Tutorial from scratch.",
      "examples": []
    },
    {
      "title": "Git Syllabus",
      "summary": "Introduction\nThe W3Schools Git Tutorial is comprehensive and beginner-friendly.\nIt will give you a fundamental knowledge of Git version control.\nIt is designed for beginners and requires no prior version control experience.\nThe content has been carefully made to be bite-sized, simple, and easy to understand.\nThe content has been proven by millions of users over the years. It is updated and improved frequently.\nThe syllabus outline and its sequence are structured so you can learn Git step by step, from the introduction to advanced features.\nGet Started With Git »\nLearning Outcomes\nUnderstand the basic concepts of version control with Git.\nCreate and manage Git repositories.\nTrack changes and manage file versions.\nWork with branches and merging.\nCollaborate with other developers.\nUse Git commands effectively.\nHandle conflicts and troubleshooting.\nWork with remote repositories.\nNote: Are you a teacher teaching Git? W3Schools Academy is a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more about Academy here.\nWhich Subjects Are Git Relevant For?\nSoftware Development:\nGit is essential for managing code versions and collaboration.\nDevOps:\nGit is fundamental for continuous integration and deployment.\nProject Management:\nGit helps track project changes and contributions.\nTeam Collaboration:\nGit enables multiple developers to work together.\nCode Review:\nGit provides tools for reviewing and discussing code.\nDocumentation:\nGit helps maintain documentation versions.\nOpen Source:\nGit is crucial for open source development.\nGet Started\nActivities\nIn this tutorial we offer different activities for you to learn Git for free:\nLessons\nExercises\nQuizzes\nSign in to Track Progress\nYou can also create a free account to track your progress.\nAs a signed-in user, you get access to features such as:\nLearning paths\nSandbox and lab environments\nAchievements\nAnd much more!\nSign Up - It's free\nOverview of the Modules\nGit HOME\nGit Intro\nGit Get Started\nGit New Files\nGit Staging Environment\nGit Commit\nGit Help\nGit Branch\nGit Branch Merge\nGitHub Get Started\nGitHub Edit Code\nPull from GitHub\nPush to GitHub\nGitHub Branch\nPull Branch from GitHub\nPush Branch to GitHub\nGitHub Flow\nGitHub Pages\nGitHub Fork\nGit Clone from GitHub\nGitHub Send Pull Request\nGit .gitignore\nGit Security SSH\nGitHub Add SSH\nGit Revert\nGit Reset\nGit Amend\nGet Started\nSandbox and Lab Environment\nIf you want to host your project, we have a feature called Spaces that allows you to practice Git commands and manage repositories.\nHere you get a secure sandbox environment called Spaces, it integrates with GitHub, where you can practice Git and test commands in real-time.\nSpaces allow you to test, commit, and manage repositories. This includes a W3Schools subdomain, hosting, and secure SSL certificates.\nSpaces require no installation and run directly in the browser.\nFeatures include:\nCollaboration\nFile navigator\nTerminal & log\nPackage manager\nDatabase\nEnvironment manager\nAnalytics\nCreate a Spaces Account\nGit Certification\nW3Schools offers an end-of-pathway certification program.\nHere you can take exams to get certified.\nThe Git exam is a test that summarizes the W3Schools Git syllabus.\nAfter passing the exam you get the \"Certified Git Developer\" Certification.\nThe certification exam is adaptive and graded; students will get a grade from intermediate, advanced to professional.\nBuy Certificate »\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach Git?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo »",
      "examples": []
    },
    {
      "title": "Git Study Plan",
      "summary": "Introduction\nThe Git study plan helps you teach your students Git step-by-step.\nCreating a study plan for Git is easy.\nYou can use a pre-built study plan or customize it.\nStudents have different skill levels. The study plans can be customized to ensure that everyone is challenged.\nSave time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of Git to the final exam.\nW3Schools Academy\nThis study plan is a feature of W3Schools Academy.\nW3Schools Academy is a platform that has everything you need to teach coding, all in one place.\nIt offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom.\nYou need to have an active subscription to access the study plan feature. There are two different subscription tiers:\nEssentials ($1.99 / month per student)\nFull Access ($5.99 / month per student)\nCalculate your price and order here.\nLearn More »\nAcademy also offer other features such as:\nManaging your classroom\nTracking of student progress and reports\nLabs, assignments, and code challenges (prebuilt challenges or create your own ones)\nAuto-grading\nTeaching materials\nCertification exams\nGet a free demo »\nTeacher Materials\nW3Schools has everything you need to teach Git.\nThe Git training materials is available for you to include and use in your study plan:\nW3Schools Git Tutorial\nGit Exercises\nGit Quiz\nGit Challenges (Coding challenges)\nGit Certification Exam (End of Pathway Exam)\nGit Syllabus\nWith the Git Syllabus, your students will start with the basics, like understanding version control and creating repositories, and move to more advanced topics, like branching, merging, and collaborating on projects. Each chapter includes simple examples, try-it-yourself sections, exercises, and quizzes to make learning easy, interactive, and fun.\nRead more about Git Syllabus.\nStudy Plan Overview\nThe study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level.\nLearning Paths\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nInteractive Content\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTimeline and Pace\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nTrack Student Progress\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nEnd of Pathway Exam\nThe Git study plan aligns with the Git Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the Git Tutorial.\nYou get reports of the students' results.\nThe Git study plan aligns with the Git Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the Git Tutorial.\nYou get reports of the students' results.\nAccessibility\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nLearn More »\nSample Study Plan\nYou choose the timeline and pace of your study plans.\nSchools have different preferences.\nSome would like more intensive pace, e.g. 3 weeks, others 12 or more weeks.\nIt is completely up to you.\nFor example, this is how a 3-week Git study plan could look like:\nWeek 1: Essentials\nWeek 2: Essential Commands, Branch Management, Remote Collaboration, Contribution Guide\nWeek 3: Security Practices, Undo and Revert, Git Certification Exam\nImage of Sample Git study plan:\nReady to get started?\nStart with Git Study Plans today.\nGet Started »\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach Git programming?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo »",
      "examples": []
    },
    {
      "title": "W3Schools Git Certificate",
      "summary": "W3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nW3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nWho Should Consider Getting Certified?\nAny student or professional within the digital industry.\nCertifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market.\nW3Schools is Trusted by Top Companies\nW3Schools has over two decades of experience with teaching coding online.\nOur certificates are recognized and valued by companies looking to employ skilled developers.\nSave Time and Money\nShow the world your coding skills by getting a certification.\nThe prices is a small fraction compared to the price of traditional education.\nDocument and validate your competence by getting certified!\nExam overview\nFee: 95 USD\nAchievable certification levels:\nIntermediate (40%)\nAdvanced (75%)\nProfessional (90%)\nNumber of questions:\nAdaptive, 60 on average\nRequirement to pass:\nMinimum 40% - Intermediate level\nTime limit: 60 minutes\nNumber of attempts to pass: 3\nExam deadline: None\nCertification Expiration: None\nFormat: Online, multiple choice\nRegister now »\nAdvance Faster in Your Career\nGetting a certificate proves your commitment to upgrading your skills.\nThe certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on.\nIt gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nKnowledge is power, especially in the current job market.\nDocumentation of your skills enables you to advance your career or helps you to start a new one.\nHow Does It Work?\nStudy for free at W3Schools.com\nStudy at your own speed\nTest your skills with W3Schools online quizzes\nApply for your certificate by paying an exam fee\nTake your exam online, at any time, and from any location\nGet Your Certificate and Share It With The World\nExample certificate:\nEach certificate gets a unique link that can be shared with others.\nValidate your certification with the link or QR code.\nCheck how it looks like in this Example.\nShare your certificate on Linked in the Certifications section in just one click!\nDocument Your Skills\nGetting a certificate proves your commitment to upgrade your skills, gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nGet Your Certificate »\nLooking to add multiple users?\nAre you an educator, manager or business owner looking for courses or certifications?\nWe are working with schools, companies and organizations from all over the world.\nGet courses and/or certifications for your team here.",
      "examples": []
    }
  ],
  "glossary": [
    "backend",
    "bitbucket",
    "change platform",
    "exercises",
    "free",
    "git   version",
    "git  gitattributes",
    "git  gitignore",
    "git advanced",
    "git amend",
    "git branch",
    "git commit",
    "git config",
    "git contribute",
    "git exercises",
    "git glossary",
    "git help",
    "git history",
    "git home",
    "git hooks",
    "git install",
    "git intro",
    "git merge",
    "git quiz",
    "git rebase",
    "git recovery",
    "git reflog",
    "git reset",
    "git revert",
    "git staging",
    "git stash",
    "git submodules",
    "git syllabus",
    "git tagging",
    "git undo",
    "git workflow",
    "github",
    "github branch",
    "github flow",
    "github fork",
    "github pages",
    "gitlab",
    "javascript",
    "note",
    "programs",
    "references",
    "remote repositories",
    "report error",
    "w3schools spaces"
  ]
}