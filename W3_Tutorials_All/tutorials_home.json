{
  "course_name": "Tutorials HOME",
  "description": "Enjoy our free tutorials, covering all aspects of web development and programming. HTML is the standard markup language for web pages. CSS is the language used to style web pages. JavaScript is the language for programming web pages. SQL is a standard language for storing, manipulating and retrieving data in databases. Python is a popular programming language. Java is a popular programming language. PHP is a server scripting language, and a powerful tool for making dynamic and interactive web pages. Large collection of code snippets for HTML, CSS, and JavaScript. Bootstrap is a popular CSS framework. W3.CSS is a small, fast and easy-to-use CSS framework. React is a JavaScript library for building user interfaces. jQuery is a JavaScript Library. Django is a back-end server side web framework, written in Python. MySQL is a widely used relational database management system (RDBMS). PostgreSQL is an advanced relational database system.",
  "course_summary": [
    {
      "title": "HTML Tutorial",
      "summary": "Learn HTML\nHTML is the standard markup language for Web pages.\nWith HTML you can create your own Website.\nHTML is easy to learn - You will enjoy it!\nHTML Tutorial\nStudy our HTML Tutorial for free,\nno registration needed.\nHTML Course + Certificate\nUpgrade your learning with our\ninteractive HTML Course and Get Certified.\nTip: Sign in to track your progress - it's free.\nLearning by Examples\nWith our \"Try it Yourself\" editor, you can edit the HTML code and view the result in the browser:\nExample\nClick on the \"Try it Yourself\" button to see how it works.\nHTML Examples\nThis tutorial supplements all explanations with clarifying examples.\nSee all HTML Examples\nREMOVE ADS\nHTML Exercises\nMany chapters in this tutorial end with an exercise where you can check your level of knowledge.\nSee all HTML Exercises\nHTML Quiz Test\nTest your HTML skills with our HTML Quiz!\nStart HTML Quiz!\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\nHTML References\nAt W3Schools you will find complete references about HTML elements, attributes, events, color names, entities, character-sets, URL encoding, language codes, HTTP messages, browser support, and more:\nKickstart your career\nGet certified by completing the HTML course\nVideo: HTML for Beginners",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<head>\n<title>Page Title</title>\n</head>\n<body>\n\n<h1>This is a Heading</h1>\n<p>This is a paragraph.</p>\n\n</body>\n</html>"
      ]
    },
    {
      "title": "CSS Tutorial",
      "summary": "Learn CSS\nCSS is the language we use to style an HTML document.\nCSS describes how HTML elements should be displayed.\nThis tutorial will teach you CSS from basic to advanced.\nTip: Sign in to track your progress - it's free.\nExamples in Each Chapter\nThis CSS tutorial contains hundreds of CSS examples.\nWith our online editor, you can edit the CSS, and click on a button to view the result.\nCSS Example\nClick on the \"Try it Yourself\" button to see how it works.\nCSS Examples\nLearn from over 300 examples! With our editor, you can edit the CSS, and click on a button to view the result.\nGo to CSS Examples!\nUse the Menu\nWe recommend reading this tutorial, in the sequence listed in the menu.\nIf you have a large screen, the menu will always be present on the left.\nIf you have a small screen, open the menu by clicking the top menu sign ☰.\nCSS Templates\nWe have created some responsive W3.CSS templates for you to use.\nYou are free to modify, save, share, and use them in all your projects.\nFree CSS Templates!\nREMOVE ADS\nCSS Exercises\nMany chapters in this tutorial end with an exercise where you can check your level of knowledge.\nSee all CSS Exercises\nCSS Quiz\nTest your CSS skills with a quiz.\nStart CSS Quiz!\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\nCSS References\nAt W3Schools you will find complete CSS references of all properties and selectors with syntax, examples, browser support, and more.\nKickstart your career\nGet certified by completing the CSS course",
      "examples": [
        "body {\nbackground-color: lightblue;\n}\n\nh1 {\ncolor: white;\ntext-align: center;\n}\n\np {\nfont-family: verdana;\nfont-size: 20px;\n}"
      ]
    },
    {
      "title": "Responsive Web Design - Introduction",
      "summary": "What is Responsive Web Design?\nResponsive web design makes your web page look good on all devices.\nResponsive web design uses only HTML and CSS.\nResponsive web design is not a program or a JavaScript.\nDesigning For The Best Experience For All Users\nWeb pages can be viewed using many different devices: desktops, tablets, and phones. Your web page should look good, and be easy to use, regardless of the device.\nWeb pages should not leave out information to fit smaller devices, but rather adapt its content to fit any device:\nIt is called responsive web design when you use CSS and HTML to resize, hide, shrink, enlarge, or move the content to make it look good on any screen.",
      "examples": []
    },
    {
      "title": "Bootstrap Versions",
      "summary": "Bootstrap is the world's most famous free CSS framework.\nYou can choose between the following versions:\nLearn Bootstrap 3 »\nBootstrap 3 is the most stable version of Bootstrap, and it is still supported by the team for critical bugfixes and documentation changes.\nLearn Bootstrap 4 »\nBootstrap 4 is a newer version of Bootstrap; with new components, faster stylesheet and more responsiveness. However, Internet Explorer 9 and down is not supported.\nLearn Bootstrap 5 »\nBootstrap 5 is the newest version of Bootstrap; with a smooth overhaul. However, Internet Explorer 11 and down is not supported, and jQuery is replaced with vanilla JavaScript.",
      "examples": []
    },
    {
      "title": "W3.CSS Tutorial",
      "summary": "W3.CSS is a CSS framework for developing websites and web apps.\nIt provides equality for all browsers (Chrome, Edge, Firefox, Safari, Opera) on all devices (Desktop, Laptop, Tablet, Mobile).\nW3.CSS is free, open source, and uses standard CSS only (no JavaScript).\nNote\nw3-grid and w3-flex is new in W3.CSS 5.0.\nw3-grid vs w3-flex\nw3-grid is for two-dimensional layout, with rows AND columns.\nw3-flex is for one-dimensional layout, with rows OR columns.\nExample\nA Quality Alternative to Bootstrap\nW3.CSS is a modern CSS framework developed by the W3Schools team. It's similar to Bootstrap when it comes to build responsive, mobile-friendly websites, but it is lighter, simpler, and faster, and does not rely on JavaScript or external libraries like jQuery.\n\"Make it as simple as possible, but not simpler.\"\nAlbert Einstein\nHow To Use W3.CSS\nTo use W3.CSS in your web site, just add a link to w3.css from your web pages:\nExample\nOr download w3.css from:\nhttps://www.w3schools.com/w3css/5/w3.css\nand add a local link to your downloaded w3.css file:\nExample\nREMOVE ADS\nW3.CSS Crash Course\nHow to create web page that looks nice on all devices (desktop, laptop, tablet, and phone).\nStart the Crash Course » » »\nW3.CSS Web Site Templates\nWe have created 50 responsive W3CSS templates for you to use.\nYou are free to modify, save, share, use or do whatever you want with them:\nCatering Template\nSee Demo »\nPortfolio Template\nSee Demo »\nArchitect Template\nSee Demo »\nCafe Template\nSee Demo »\nWedding Template\nSee Demo »\nHouse Design Template\nSee Demo »\nFood Template\nSee Demo »\nSee All Templates »",
      "examples": [
        "<div class=\"w3-container w3-teal\">\n<h1>My Header</h1>\n</div>\n\n<img src=\"img_car.jpg\" alt=\"Car\">\n\n<div class=\"w3-container\">\n<p>A car is a wheeled, self-powered motor vehicle used for transportation.</p>\n</div>\n\n<div class=\"w3-container w3-teal\">\n<p>My Footer</p>\n</div>",
        "<link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/5/w3.css\">",
        "<link rel=\"stylesheet\" href=\"w3.css\">"
      ]
    },
    {
      "title": "Sass Tutorial",
      "summary": "Learn Sass\nSass is a CSS pre-processor.\nSass reduces repetition of CSS and therefore saves time.\nExamples in Each Chapter\nOur \"Show Sass\" tool makes it easy to learn Sass, it shows both the code and the result.\nSass Example\nRun Example »\nSass Function References\nAt W3Schools you will find complete references of all Sass functions with syntax and examples.\nSass String Functions\nSass Numeric Functions\nSass List Functions\nSass Map Functions\nSass Selector Functions\nSass Introspection Functions\nSass Color Functions",
      "examples": [
        "/* Define standard variables and values for website */\n$bgcolor: lightblue;\n$textcolor: darkblue;\n$fontsize: 18px;\n\n/* Use the variables */\nbody {\nbackground-color: $bgcolor;\ncolor: $textcolor;\nfont-size: $fontsize;\n}"
      ]
    },
    {
      "title": "SVG Tutorial",
      "summary": "Learn SVG\nSVG stands for Scalable Vector Graphics.\nSVG defines vector-based graphics in XML format.\nSVG graphics are scalable, and do not lose any quality if they are zoomed or resized.\nSVG is supported by all major browsers.\nExamples in Each Chapter\nWith our \"Try it Yourself\" editor, you can edit the SVG, and click on a button to view the result.\nSVG Example\nWhat you should already know\nBefore you continue, you should have a basic understanding of the following:\nHTML\nBasic XML\nIf you want to study these subjects first, find the tutorials on our Home page.\nWhat is SVG?\nSVG stands for Scalable Vector Graphics\nSVG is used to define vector-based graphics for the Web\nSVG defines graphics in XML format\nEach element and attribute in SVG files can be animated\nSVG is a W3C recommendation\nSVG integrates with other standards, such as CSS, DOM, XSL and JavaScript\nREMOVE ADS\nSVG is a W3C Recommendation\nSVG 1.0 became a W3C Recommendation on 4 September 2001.\nSVG 1.1 became a W3C Recommendation on 14 January 2003.\nSVG 1.1 (Second Edition) became a W3C Recommendation on 16 August 2011.\nSVG Advantages\nAdvantages of using SVG over other image formats (like JPEG and GIF) are:\nSVG images can be created and edited with any text editor\nSVG images can be searched, indexed, scripted, and compressed\nSVG images are scalable\nSVG images can be printed with high quality at any resolution\nSVG images are zoomable\nSVG graphics do NOT lose any quality if they are zoomed or resized\nSVG is an open standard\nSVG files are pure XML\nHow does it Work?\nSVG has elements and attributes for rectangles, circles, ellipses, lines, polygons, curves, and more.\nSVG also supports filter and blur effects, gradients, rotations, animations, interactivity with JavaScript, and more.\nA simple SVG document consists of the <svg> root element and several basic shape elements that will build a graphic together.\nCreating SVG Images\nSVG images can be created with any text editor, or with a drawing program, like Inkscape.\nFor you to learn the concept and basics of SVG, this tutorial will just use plain text to teach you SVG.\nThe next page shows how to embed an SVG image directly into an HTML page!",
      "examples": [
        "<html>\n<body>\n\n<h1>My first SVG</h1>\n\n<svg width=\"100\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n<circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"green\" stroke-width=\"4\" fill=\"yellow\" />\n</svg>\n\n</body>\n</html>"
      ]
    },
    {
      "title": "HTML Canvas Tutorial",
      "summary": "Learn Canvas\nThe HTML <canvas> element is used to draw graphics on a web page.\nThe HTML <canvas> element is only a container for graphics. You must use a script to actually draw the graphics.\nCanvas has several methods for drawing paths, boxes, circles, text, and adding images.\nCanvas is supported by all major browsers.\nHTML Canvas Example\nThe graphic above is created with <canvas>. It contains four objects: a red rectangle, a gradient rectangle, a multicolor rectangle, and a multicolor text.\nWhat you should already know\nBefore you continue, you should have a basic understanding of the following:\nHTML\nBasic JavaScript\nIf you want to study these subjects first, find the tutorials on our Home page.\nWhat is HTML Canvas?\nThe HTML <canvas> element is used to draw graphics, on the fly, via scripting (usually JavaScript).\nThe <canvas> element is only a container for graphics. You must use a script to actually draw the graphics.\nCanvas has several methods for drawing paths, boxes, circles, text, and adding images.\nHTML Canvas Can Draw Text\nCanvas can draw colorful text, with or without animation.\nHTML Canvas Can Draw Graphics\nCanvas has great features for graphical data presentation with an imagery of graphs and charts.\nREMOVE ADS\nHTML Canvas Can be Animated\nCanvas objects can move. Everything is possible: from simple bouncing balls to complex animations.\nHTML Canvas Can be Interactive\nCanvas can respond to JavaScript events.\nCanvas can respond to any user action (key clicks, mouse clicks, button clicks, finger movement).\nHTML Canvas Can be Used in Games\nCanvas' methods for animations, offer a lot of possibilities for HTML gaming applications.\nCanvas Example\nIn HTML, a <canvas> element looks like this:\nThe id attribute is required (so it can be referred to by JavaScript).\nThe width and height attribute defines the size of the canvas.\nTip: The default size of the canvas is 300px (width) x 150px (height).\nTip: You can have multiple <canvas> elements on one HTML page.\nBy default, the <canvas> element has no border and no content.\nTo add a border, use a style attribute:\nExample\nThe next chapters show how to draw on the canvas.\nSee Also:\nW3Schools' Full Canvas Reference",
      "examples": [
        "<canvas id=\"myCanvas\" width=\"200\" height=\"100\"></canvas>",
        "<canvas id=\"myCanvas\" width=\"200\" height=\"100\" style=\"border:1px solid #000000;\"></canvas>",
        "<canvas>",
        "id",
        "width",
        "height",
        "style"
      ]
    },
    {
      "title": "HTML Graphics",
      "summary": "SVG (Scalable Vector Graphics)\nSVG defines vector-based graphics in XML, which can be directly embedded in HTML pages.\nSVG graphics are scalable, and do not lose any quality if they are zoomed or resized:\nHTML Canvas\nThe HTML <canvas> element element is used to draw graphics, on the fly, with JavaScript:\nThe graphic above shows four elements: a red rectangle, a gradient rectangle, a multicolor rectangle, and a multicolor text inside a <canvas> element.\nPlotting\nJavaScript libraries are used for both Artificial Intelligence graphs and other charts:\nPlotly.js\nChart.js\nGoogle Chart\nD3.js\nHere is an example of a 3D pie made with Google Chart:\nGoogle Maps\nGoogle Maps lets you embed maps in HTML pages.\nHTML + JavaScript Game\nLearn how to make a game with HTML and JavaScript.",
      "examples": []
    },
    {
      "title": "Colors Tutorial",
      "summary": "Colors are displayed combining RED, GREEN, and BLUE light.\nColor Names\nWith CSS, colors can be set by using color names:\nExample\nCSS Color Values\nWith CSS, colors can be specified in different ways:\nBy color names\nAs RGB values\nAs hexadecimal values\nAs HSL values (CSS3)\nAs HWB values (CSS4)\nWith the currentcolor keyword\nRGB Colors\nRGB color values are supported in all browsers.\nAn RGB color value is specified with: rgb( RED , GREEN , BLUE ).\nEach parameter defines the intensity of the color as an integer between 0 and 255.\nFor example, rgb(0,0,255) is rendered as blue, because the blue parameter is set to its highest value (255) and the others are set to 0.\nExample\nShades of gray are often defined using equal values for all the 3 light sources:\nExample\nREMOVE ADS\nHexadecimal Colors\nHexadecimal color values are also supported in all browsers.\nA hexadecimal color is specified with: #RRGGBB.\nRR (red), GG (green) and BB (blue) are hexadecimal integers between 00 and FF specifying the intensity of the color.\nFor example, #0000FF is displayed as blue, because the blue component is set to its highest value (FF) and the others are set to 00.\nExample\nShades of gray are often defined using equal values for all the 3 light sources:\nExample\nUpper Case or Lower Case?\nYou can use upper case or lower case letters to specify hexadecimal values.\nLower case are easier to write. Upper case are easier to read.\nColor Names\nCSS supports 140 standard color names.\nIn the next chapter you will find a complete alphabetical list of color names with hexadecimal values:\nThe currentcolor Keyword\nThe currentcolor keyword refers to the value of the color property of an element.\nExample\nThe border color of the following <div> element will be blue, because the text color of the <div> element is blue:",
      "examples": [
        "#myDIV {\ncolor: blue; /* Blue text color */\nborder: 10px solid currentcolor; /* Blue border color */\n}",
        "currentcolor"
      ]
    },
    {
      "title": "Icons Tutorial",
      "summary": "How To Add Icons\nTo insert an icon, add the name of the icon class to any inline HTML element.\nThe <i> and <span> elements are widely used to add icons.\nAll the icons in the icon libraries below, are scalable vector icons that can be customized with CSS (size, color, shadow, etc.)\nFont Awesome 5 Icons\nTo use the Free Font Awesome 5 icons, go to fontawesome.com and sign in to get a code to use in your web pages.\nRead more about how to get started with Font Awesome in our Font Awesome 5 chapter.\nNote: No downloading or installation is required!\nExample\nFont Awesome 4 Icons\nTo use the Font Awesome 4 icons, add the following line inside the <head> section of your HTML page:\nNote: No downloading or installation is required!\nExample\nREMOVE ADS\nBootstrap 3 Icons\nTo use the Bootstrap 3 glyphicons, add the following line inside the <head> section of your HTML page:\nNote: No downloading or installation is required!\nExample\nNote: Glyphicons are not supported in Bootstrap 4.\nFor more information about Bootstrap 3 and Glyphicons, visit our Bootstrap 3 Tutorial.\nGoogle Icons\nTo use the Google icons, add the following line inside the <head> section of your HTML page:\nNote: No downloading or installation is required!\nExample\nLearn More\nComplete Icon Reference.\nComplete UTF-8 Emoji Reference.\nComplete UTF-8 Symbols Reference.",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<head>\n<script src=\"https://kit.fontawesome.com/yourcode.js\" crossorigin=\"anonymous\"></script>\n<!--Get your code at fontawesome.com-->\n</head>\n<body>\n\n<i class=\"fas fa-band-aid\"></i>\n<i class=\"fas fa-cat\"></i>\n<i class=\"fas fa-dragon\"></i>\n<i class=\"far fa-clock\"></i>\n<i class=\"fas fa-clock\"></i>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<head>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\">\n</head>\n<body>\n\n<i class=\"fa fa-cloud\"></i>\n<i class=\"fa fa-heart\"></i>\n<i class=\"fa fa-car\"></i>\n<i class=\"fa fa-file\"></i>\n<i class=\"fa fa-bars\"></i>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<head>\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">\n</head>\n<body>\n\n<i class=\"glyphicon glyphicon-cloud\"></i>\n<i class=\"glyphicon glyphicon-remove\"></i>\n<i class=\"glyphicon glyphicon-user\"></i>\n<i class=\"glyphicon glyphicon-envelope\"></i>\n<i class=\"glyphicon glyphicon-thumbs-up\"></i>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<head>\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\">\n</head>\n<body>\n\n<i class=\"material-icons\">cloud</i>\n<i class=\"material-icons\">favorite</i>\n<i class=\"material-icons\">attachment</i>\n<i class=\"material-icons\">computer</i>\n<i class=\"material-icons\">traffic</i>\n\n</body>\n</html>",
        "<i>",
        "<span>",
        "<head>"
      ]
    },
    {
      "title": "W3Schools How To",
      "summary": "Code snippets for HTML, CSS and JavaScript.\nSlideshow\nLearn How To »\nLogin Form\nLearn How To »\nAccordion\nLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nLearn How To »\nHover Dropdowns\nLearn How To »\nREMOVE ADS\nClick Dropdowns\nLearn How To »\nSide Navigation\nLearn How To »\nFixed Sidebar\nLearn How To »\nModal Box\nOpen Modal\nModal Header\nHello World!\nModals are awesome!\nGo Back To W3 How TO Examples\nModal Footer\nLearn How To »\nModal Image\nLearn How To »\nLightbox\nNature and sunrise\nLearn How To »\nSlideshow Gallery\nThe Woods\nLearn How To »\nImage Hover Overlay\nLearn How To »\nTabs\nLondon\nParis\nTokyo\nLondon\nLondon is the capital city of England.\nParis\nParis is the capital of France.\nTokyo\nTokyo is the capital of Japan.\nLearn How To »\nVertical Tabs\nLearn How To »\nTab Image Gallery\nLearn How To »\nAlert Buttons\nLearn How To »\nOutline Buttons\nLearn How To »\nTop Navigation\nLearn How To »\nResponsive Top Navigation\nResize the browser window to see the effect:\nLearn How To »\nFullscreen Navigation\nLearn How To »\nLogin Form in Navbar\nLearn How To »\nChange Background on Scroll\nLearn How To »\nEver heard about W3Schools Spaces? Here you can create your own website, or save your favorite code snippets.\n* no credit card required",
      "examples": []
    },
    {
      "title": "JavaScript Tutorial",
      "summary": "Learn JavaScript\nThe programming language of the Web.\nJavaScript is easy to learn.\nThis tutorial covers everything from basic JavaScript up to the latest 2025 version.\nExamples in Each Chapter\nWith our Try it Yourself editor, you can edit the source code and view the result.\nExample\nMy First JavaScript\nTry it Yourself »\nUse the Menu\nWe recommend reading this tutorial, in the sequence listed in the menu.\nIf you have a large screen, the menu will always be present on the left.\nIf you have a small screen, open the menu by clicking the top menu sign ☰.\nLearn by Examples\nExamples are better than 1000 words.\nExamples are often easier to understand than text explanations.\nThis tutorial supplements all explanations with clarifying Try it Yourself examples.\nNote\nIf you try all the examples, you will learn a lot about JavaScript, in a very short time!\nWhy Study JavaScript?\nJavaScript is one of the 3 languages all web developers must learn:\n1. HTML to define the content of web pages\n2. CSS to specify the layout of web pages\n3. JavaScript to program the behavior of web pages\nREMOVE ADS\nLearning Speed\nIn this tutorial, the learning speed is your choice.\nEverything is up to you.\nIf you are struggling, take a break, or re-read the material.\nAlways make sure you understand all the \"Try-it-Yourself\" examples.\nThe only way to become a clever programmer is to:\nPractice coding! Practice coding! Practice coding!\nCommonly Asked Questions\nHow do I get JavaScript?\nWhere can I download JavaScript?\nIs JavaScript Free?\nYou don't have to get or download JavaScript.\nJavaScript is already running in your browser on your computer, on your tablet, and on your smart-phone.\nJavaScript is free to use for everyone.\nJavaScript Exercises\nMany chapters in this tutorial end with an exercise where you can check your level of knowledge.\nSee all JavaScript Exercises\nJavaScript Quiz Test\nTest your JavaScript skills at W3Schools!\nStart JavaScript Quiz!\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\nJavaScript References\nW3Schools maintains a complete JavaScript reference, including all HTML and browser objects.\nThe reference contains examples for all properties, methods and events, and is continuously updated according to the latest web standards.\nKickstart your career\nGet certified by completing the JavaScript course",
      "examples": []
    },
    {
      "title": "React Tutorial",
      "summary": "Learn React\nReact is a JavaScript library for building user interfaces.\nReact is used to build single-page applications.\nReact allows us to create reusable UI components.\nTip: Sign in to track your progress - it's free.\nLearning by Examples\nOur \"Show React\" tool makes it easy to demonstrate React. It shows both the code and the result.\nExample:Get your own React.js Server\nRun Example »\nLearning by Exercises\nMany chapters in this tutorial end with an exercise where you can check you level of knowledge.\nSee all React Exercises\nREMOVE ADS\nReact Quiz\nTest your React skills with a quiz.\nReact Quiz\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\nWhat You Should Already Know\nBefore you continue you should have a basic understanding of the following:\nHTML\nCSS\nJavaScript\nIf you want to study these subjects first, find the tutorials on our Home page.\nIn addition, you should also have some experience with the new JavaScript features introduced in ECMAScript 6 (ES6), you will learn about them in the React ES6 chapter.\nKickstart your career\nGet certified by completing the REACT course",
      "examples": [
        "import { createRoot } from 'react-dom/client'; function Hello() { return ( <h1>Hello World!</h1> ); } createRoot(document.getElementById('root')).render( <Hello /> );"
      ]
    },
    {
      "title": "Angular Tutorial",
      "summary": "Learn Angular\nAngular is a framework for building client applications in HTML and TypeScript.\nOverview & Prerequisites\nLearn Angular step-by-step with easy-to-follow pages and runnable JS-only examples.\nWe use standalone components, modern control flow, and the built-in Router and HttpClient in examples.\nPrerequisites:\nBasic HTML, CSS, and JavaScript.\nSome TypeScript helps but is not required.\nLearning by Examples\nOur \"Show Angular\" tool makes it easy to demonstrate Angular.\nIt shows both the code and the result.\nExample:Get your own Angular Server\nRun Example »\nLearning by Exercises\nMany chapters in this tutorial end with an exercise where you can check you level of knowledge.\nSee all Angular Exercises\nREMOVE ADS\nAngular Quiz\nTest your Angular skills with a quiz.\nAngular Quiz\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.",
      "examples": [
        "import { bootstrapApplication } from '@angular/platform-browser'; import { Component } from '@angular/core'; @Component({ selector: 'app-root', standalone: true, template: `<h1>Hello Angular!</h1>` }) export class App {} bootstrapApplication(App);",
        "<!doctype html> <html lang=\"en\"> <head> <meta charset=\"utf-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> <title>Angular App</title> </head> <body> <app-root></app-root> </body> </html>"
      ]
    },
    {
      "title": "jQuery Tutorial",
      "summary": "Learn jQuery\njQuery is a JavaScript Library.\njQuery greatly simplifies JavaScript programming.\njQuery is easy to learn.\nTip: Sign in to track your progress - it's free.\nExamples in Each Chapter\nOur \"Try it Yourself\" editor makes it easy to learn jQuery. You can edit code and view the result in your browser:\nExample\nClick on the \"Try it Yourself\" button to see how it works.\njQuery Exercises\nTest Yourself With Exercises\nExercise:\nUse the correct selector to hide all <p> elements.\nStart the Exercise\nREMOVE ADS\njQuery Examples\nLearn by examples! At W3Schools you will find a lot of jQuery examples to edit and test yourself.\njQuery Quiz Test\nTest your jQuery skills at W3Schools!\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\njQuery References\nAt W3Schools you will find a complete reference of all jQuery selectors, methods, properties and events.\nKickstart your career\nGet certified by completing the JQUERY course",
      "examples": [
        "$(document).ready(function(){\n$(\"p\").click(function(){\n$(this).hide();\n});\n});",
        "$(\"\").hide();"
      ]
    },
    {
      "title": "Vue Tutorial",
      "summary": "Learn Vue\nVue is a popular JavaScript framework.\nUser interfaces built in Vue updates automatically when data changes.\nVue is easy to learn.\nThis Tutorial\nThis tutorial is specially designed to help you learn Vue as quickly and efficiently as possible.\nFirst, you will learn the basics of Vue: text interpolation, directives, and how to incorporate events and forms into your project.\nThen you will learn everything else you need to know about Vue:\nComputed properties, watchers, methods, setup for Single-File Components (SFCs, *.vue files), and more.\nTry it Yourself Examples in Every Chapter\nIn every chapter, you can edit the examples online, and click on a button to view the result.\nExampleGet your own Vue Server\nREMOVE ADS\nWhat You Should Already Know\nBefore you study Vue, you should have a basic understanding of:\nHTML\nCSS\nJavaScript\nVue History\nEvan You, a Google employee using AngularJS, started to develop Vue in 2013.\nVue version 1.0 was released in 2015.\nVue Exercises\nTest Yourself With Exercises\nExercise:\nWhat is the name of the programming language missing here?\nStart the Exercise\nVue Quiz ?\nLearn by taking a quiz! The quiz will give you a signal of how much you know about Vue.\nStart Vue Quiz\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\nLearn by Examples\nLearn by examples! This tutorial supplements all explanations with clarifying examples.\nSee All Vue Examples",
      "examples": [
        "<h1>\"Hello, World!\" Example</h1>\n\n<div id=\"app\">{{ message }}</div>",
        "Vue is a popular framework."
      ]
    },
    {
      "title": "AngularJS Tutorial",
      "summary": "Learn AngularJS\nAngularJS extends HTML with new attributes.\nAngularJS is perfect for Single Page Applications (SPAs).\nAngularJS is easy to learn.\nThis Tutorial\nThis tutorial is specially designed to help you learn AngularJS as quickly and efficiently as possible.\nFirst, you will learn the basics of AngularJS: directives, expressions, filters, modules, and controllers.\nThen you will learn everything else you need to know about AngularJS:\nEvents, DOM, Forms, Input, Validation, Http, and more.\nTry it Yourself Examples in Every Chapter\nIn every chapter, you can edit the examples online, and click on a button to view the result.\nAngularJS Example\nREMOVE ADS\nWhat You Should Already Know\nBefore you study AngularJS, you should have a basic understanding of:\nHTML\nCSS\nJavaScript\nAngularJS History\nAngularJS version 1.0 was released in 2012.\nMiško Hevery, a Google employee, started to work with AngularJS in 2009.\nThe idea turned out very well, and the project is now officially supported by Google.\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\nAngularJS Examples\nW3Schools' AngularJS tutorial contains lots of AngularJS examples!\nAngularJS Examples\nAngularJS Reference\nThe AngularJS reference contains all directives and filters used in this tutorial.\nAngularJS Reference",
      "examples": [
        "<!DOCTYPE html>\n<html lang=\"en-US\">\n<script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js\"></script>\n<body>\n\n<div ng-app=\"\">\n<p>Name : <input type=\"text\" ng-model=\"name\"></p>\n<h1>Hello {{name}}</h1>\n</div>\n\n</body>\n</html>"
      ]
    },
    {
      "title": "JavaScript JSON",
      "summary": "JSON stands for JavaScript Object Notation.\nJSON is a plain text format for storing and transporting data.\nJSON is similar to the syntax for creating JavaScript objects.\nJSON is used to send, receive and store data.\nExample\nThe example above defines an object with 3 properties:\n\"name\"\n\"age\"\n\"car\"\nEach property has a value:\n\"John\"\n30\nnull\nWhy JSON?\nJSON is make it easy to send and store data between computers\nJSON is text only and language independent *\n* The syntax is derived from JavaScript object syntax, but JSON is text only.\nCode for reading and generating JSON data can be written in any programming language.\nThe JSON format was originally specified by Douglas Crockford.\nJSON and JavaScript\nThe JSON format is syntactically identical to the code for creating JavaScript objects.\nBecause of this, a JavaScript program can easily convert JSON data into native JavaScript objects.\nJavaScript has a built in function for converting JSON strings into JavaScript objects:\nJSON.parse()\nJavaScript also has a built in function for converting an object into a JSON string:\nJSON.stringify()\nYou can receive pure text from a server and use it as a JavaScript object.\nYou can send a JavaScript object to a server in pure text format.\nYou can work with data as JavaScript objects, with no complicated parsing and translations.\nStoring Data\nWhen storing data, the data has to be a certain format, and regardless of where you choose to store it, text is always one of the legal formats.\nJSON makes it possible to store JavaScript objects as text.\nJSON Example\nText that defines an employees object with an array of 3 employee objects:\nIf you parse the JSON string with a JavaScript program, you can access the data as an object:\nREMOVE ADS\nJSON Data - A Name and a Value\nJSON data is written as name/value pairs, just like JavaScript object properties.\nA name/value pair consists of a field name (in double quotes), followed by a colon, followed by a value:\nJSON names require double quotes. JavaScript names do not.\nJSON Objects\nJSON objects are written inside curly braces.\nJust like in JavaScript, objects can contain multiple name/value pairs:\nJSON Arrays\nJSON arrays are written inside square brackets.\nJust like in JavaScript, an array can contain objects:\nIn the example above, the object \"employees\" is an array. It contains three objects.\nEach object is a record of a person (with a first name and a last name).\nConverting a JSON Text to a JavaScript Object\nA common use of JSON is to read data from a web server, and display the data in a web page.\nFor simplicity, this can be demonstrated using a string as input.\nFirst, create a JavaScript string containing JSON syntax:\nThen, use the JavaScript built-in function JSON.parse() to convert the string into a JavaScript object:\nFinally, use the new JavaScript object in your page:\nExample",
      "examples": [
        "'{\"name\":\"John\", \"age\":30, \"car\":null}'",
        "{\n\"employees\":[\n{\"firstName\":\"John\", \"lastName\":\"Doe\"},\n{\"firstName\":\"Anna\", \"lastName\":\"Smith\"},\n{\"firstName\":\"Peter\", \"lastName\":\"Jones\"}\n]\n}",
        "let personName = obj.name;\nlet personAge = obj.age;",
        "\"firstName\":\"John\"",
        "{\"firstName\":\"John\", \"lastName\":\"Doe\"}",
        "\"employees\":[\n{\"firstName\":\"John\", \"lastName\":\"Doe\"},\n{\"firstName\":\"Anna\", \"lastName\":\"Smith\"},\n{\"firstName\":\"Peter\", \"lastName\":\"Jones\"}\n]",
        "let text = '{ \"employees\" : [' +\n'{ \"firstName\":\"John\" , \"lastName\":\"Doe\" },' +\n'{ \"firstName\":\"Anna\" , \"lastName\":\"Smith\" },' +\n'{ \"firstName\":\"Peter\" , \"lastName\":\"Jones\" } ]}';",
        "const obj = JSON.parse(text);",
        "<p id=\"demo\"></p>\n\n<script>\ndocument.getElementById(\"demo\").innerHTML =\nobj.employees[1].firstName + \" \" + obj.employees[1].lastName;\n</script>",
        "JSON.parse()",
        "JSON.stringify()"
      ]
    },
    {
      "title": "AJAX Introduction",
      "summary": "AJAX is a developer's dream, because you can:\nRead data from a web server - after the page has loaded\nUpdate a web page without reloading the page\nSend data to a web server - in the background\nAJAX Example\nLet AJAX change this text\nTry it Yourself »\nAJAX Example Explained\nHTML Page\nThe HTML page contains a <div> section and a <button>.\nThe <div> section is used to display information from a server.\nThe <button> calls a function (if it is clicked).\nThe function requests data from a web server and displays it:\nFunction loadDoc()\nREMOVE ADS\nWhat is AJAX?\nAJAX = Asynchronous JavaScript And XML.\nAJAX is not a programming language.\nAJAX just uses a combination of:\nA browser built-in XMLHttpRequest object (to request data from a web server)\nJavaScript and HTML DOM (to display or use the data)\nAJAX is a misleading name. AJAX applications might use XML to transport data, but it is equally common to transport data as plain text or JSON text.\nAJAX allows web pages to be updated asynchronously by exchanging data with a web server behind the scenes. This means that it is possible to update parts of a web page, without reloading the whole page.\nHow AJAX Works\n1. An event occurs in a web page (the page is loaded, a button is clicked)\n2. An XMLHttpRequest object is created by JavaScript\n3. The XMLHttpRequest object sends a request to a web server\n4. The server processes the request\n5. The server sends a response back to the web page\n6. The response is read by JavaScript\n7. Proper action (like page update) is performed by JavaScript\nModern Browsers (Fetch API)\nModern Browsers can use Fetch API instead of the XMLHttpRequest Object.\nThe Fetch API interface allows web browser to make HTTP requests to web servers.\nIf you use the XMLHttpRequest Object, Fetch can do the same in a simpler way.",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<body>\n\n<div id=\"demo\">\n<h2>Let AJAX change this text</h2>\n<button type=\"button\" onclick=\"loadDoc()\">Change Content</button>\n</div>\n\n</body>\n</html>",
        "function loadDoc() {\nconst xhttp = new XMLHttpRequest();\nxhttp.onload = function() {\ndocument.getElementById(\"demo\").innerHTML = this.responseText;\n}\nxhttp.open(\"GET\", \"ajax_info.txt\", true);\nxhttp.send();\n}",
        "XMLHttpRequest"
      ]
    },
    {
      "title": "AppML Tutorial",
      "summary": "AppML Brings Data to HTML\n\"No Nonsense Web Applications\"\nIntroduction\nThe Web is growing fast, and the amount of data in Cyberspace is growing even faster.\nEvery day new information systems are developed, and every day new users are connected, and data can be accessed 24/7 from anywhere in the world.\nFaster and better software development methods are desperately needed.\nAlong these lines, W3Schools has developed a very flexible technique for retrieving, displaying, and manipulate data, without the need for traditional programming.\nCooperating with Jan Egil Refsnes, W3schools has developed a vocabulary for defining Web applications. The vocabulary is called AppML (Application Modeling Language).\nAppML uses the most up-to-date techniques and ideas of modern Web development with focus on:\nLow Cost\nRapid and Agile Web Develoment\nOptimized for Cloud Computing\nHigh Speed and Low Bandwidth Consumption\nMVC (Model View Controller) Architecture\nFull Separation of Content from Presentation\nHighly Scalable and Testable\nEasy Configuration and Reconfiguration\nAppML supports the functions you find in other frameworks like React, Angular, and Vue, but AppML is much easier to use, and much easier to understand.\nWhat is AppML?\nAppML stands for Application Modeling Language.\nAppML is not a programming language. It is descriptive language (a language for describing applications).\nIt is built around familiar Web application concepts like:\nForms\nLists\nReports\nFilters\nFunctions\nDatabases\nAppML runs in any HTML page. No installation is required.\nAppML is a tool for bringing data to HTML applications:\nFrom Objects\nFrom JSON files\nFrom Text files\nFrom XML files\nFrom databases\nObjects JSON Files\n\nText Files XML Files\n\nPHP/MySQL\nREMOVE ADS\nWhy AppML?\nHTML is not very suitable for describing web applications.\nAppML is made for web applications:\nAppML extends HTML with data attributes.\nAppML adds controllers to HTML, to control the behavior of HTML data.\nAppML is very easy to understand and extraordinarily quick to develop.\nAppML Example\nThis example shows how easy AppML can bring data to HTML:\nAppML Example\nAppML is a tool for easy, rapid, and agile web application development.\nEasy and Agile\nOn today's market, there are many frameworks (tools or libraries) designed to extend HTML.\nMost of these frameworks manipulate HTML, CSS or JavaScript in a way that makes them difficult to use (especially when used in combination).\nAppML is different. You have full HTML, CSS, and JavaScript freedom.\nAppML makes it easy to create Single Page Applications (SPA) in a very clean and efficient way.\nEven if you have never worked with web development before, you will find AppML very easy to use.\nIf you are an experienced web developer, you will soon discover the power of AppML.",
      "examples": [
        "<!DOCTYPE html>\n<html lang=\"en-US\">\n\n<title>Customers</title>\n<link rel=\"stylesheet\" href=\"style.css\">\n<script src=\"https://www.w3schools.com/appml/2.0.3/appml.js\"></script>\n\n<body>\n<h1>Customers</h1>\n\n<table appml-data=\"customers.js\">\n<tr>\n<th>Customer</th>\n<th>City</th>\n<th>Country</th>\n</tr>\n<tr appml-repeat=\"records\">\n<td>{{CustomerName}}</td>\n<td>{{City}}</td>\n<td>{{Country}}</td>\n</tr>\n</table>\n\n</body>\n</html>"
      ]
    },
    {
      "title": "W3.JS Tutorial",
      "summary": "W3.JS is a JavaScript library designed to simplify web development projects:\nEasy to learn and easy to use.\nDesigned for fast application development.\nDesigned for all devices: PC, Tablet, and Mobile.\nFree to use. No licenses.\nWhat Can W3.JS Do?\nBelow is a list of the some of the things W3.JS can do:\nW3.JS Examples\nAt the end of the W3.JS tutorial, you can find more than 100 examples.\nWith our online editor, you can edit and test each example yourself.\nGo to W3.JS Examples!\nW3.JS References\nIn this tutorial you will also find a complete W3.JS reference about all functions and attributes.\nW3.JS References\nHow To\nW3.JS is very easy to use.\nJust add a link to w3.js in your web page:\nExample\nOr download w3.js and add a link to the file:\nExample",
      "examples": [
        "<script src=\"https://www.w3schools.com/lib/w3.js\"></script>",
        "<script src=\"w3.js\"></script>"
      ]
    },
    {
      "title": "Python Tutorial",
      "summary": "Learn Python\nPython is a popular programming language.\nPython can be used on a server to create web applications.\nTip: Sign in to track your progress - it's free.\nLearning by Examples\nWith our \"Try it Yourself\" editor, you can edit Python code and view the result.\nExampleGet your own Python Server\nClick on the \"Try it Yourself\" button to see how it works.\nPython File Handling\nIn our File Handling section you will learn how to open, read, write, and delete files.\nPython File Handling\nPython Database Handling\nIn our database section you will learn how to access and work with MySQL and MongoDB databases:\nPython MySQL Tutorial\nPython MongoDB Tutorial\nPython Exercises\nMany chapters in this tutorial end with an exercise where you can check your level of knowledge.\nSee all Python Exercises\nREMOVE ADS\nPython Examples\nLearn by examples! This tutorial supplements all explanations with clarifying examples.\nSee All Python Examples\nPython Quiz\nTest your Python skills with a quiz.\nPython Quiz\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\nPython Reference\nYou will also find complete function and method references:\nDownload Python\nDownload Python from the official Python web site: https://python.org\nKickstart your career\nGet certified by completing the PYTHON course",
      "examples": [
        "print(\"Hello, World!\")"
      ]
    },
    {
      "title": "SQL Tutorial",
      "summary": "Learn SQL\nSQL is a standard language for storing, manipulating and retrieving data in databases.\nOur SQL tutorial will teach you how to use SQL in: MySQL, SQL Server, MS Access, Oracle, Sybase, Informix, Postgres, and other database systems.\nTip: Sign in to track your progress - it's free.\nExamples in Each Chapter\nWith our online SQL editor, you can edit the SQL statements, and click on a button to view the result.\nExampleGet your own SQL Server\nClick on the \"Try it Yourself\" button to see how it works.\nSQL Exercises\nMany chapters in this tutorial end with an exercise where you can check your level of knowledge.\nSee all SQL Exercises\nREMOVE ADS\nSQL Examples\nLearn by examples! This tutorial supplements all explanations with clarifying examples.\nSee All SQL Examples\nSQL Quiz Test\nTest your SQL skills at W3Schools!\nStart SQL Quiz!\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\nSQL References\nAt W3Schools you will find a complete reference for keywords and functions:\nSQL Data Types\nData types and ranges for Microsoft Access, MySQL and SQL Server.\nSQL Data Types\nKickstart your career\nGet certified by completing the SQL course",
      "examples": [
        "SELECT * FROM Customers;"
      ]
    },
    {
      "title": "MySQL Tutorial",
      "summary": "Learn MySQL\nMySQL is a widely used relational database management system (RDBMS).\nMySQL is free and open-source.\nMySQL is ideal for both small and large applications.\nTip: Sign in to track your progress - it's free.\nExamples in Each Chapter\nWith our online MySQL editor, you can edit the SQL statements, and click on a button to view the result.\nExampleGet your own SQL Server\nClick on the \"Try it Yourself\" button to see how it works.\nMySQL Exercises\nMany chapters in this tutorial end with an exercise where you can check your level of knowledge.\nSee all MySQL Exercises\nREMOVE ADS\nMySQL Examples\nLearn by examples! This tutorial supplements all explanations with clarifying examples.\nSee All SQL Examples\nMySQL Quiz Test\nTest your MySQL skills at W3Schools!\nStart MySQL Quiz!\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\nMySQL References\nAt W3Schools you will find a complete reference of MySQL data types and functions:\nMySQL Data Types\nMySQL Functions",
      "examples": [
        "SELECT * FROM Customers;"
      ]
    },
    {
      "title": "PHP Tutorial",
      "summary": "Learn PHP\nPHP is a server scripting language, and a powerful tool for making dynamic and interactive Web pages.\nPHP is a widely-used, free, and efficient alternative to competitors such as Microsoft's ASP.\nTip: Sign in to track your progress - it's free.\nEasy Learning with \"PHP Tryit\"\nWith our online \"PHP Tryit\" editor, you can edit the PHP code, and click on a button to view the result.\nExampleGet your own PHP Server\nClick on the \"Try it Yourself\" button to see how it works.\nPHP Exercises\nMany chapters in this tutorial end with an exercise where you can check your level of knowledge.\nSee all PHP Exercises\nREMOVE ADS\nPHP Examples\nLearn by examples! This tutorial supplements all explanations with clarifying examples.\nSee All PHP Examples\nPHP Quiz Test\nLearn by taking a quiz! This quiz will give you a signal of how much you know, or do not know, about PHP.\nStart PHP Quiz!\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\nPHP References\nW3Schools' PHP reference contains different categories of all PHP functions, keywords and constants, along with examples.\nKickstart your career\nGet certified by completing the PHP course",
      "examples": [
        "<!DOCTYPE html> <html> <body> <?php echo \"My first PHP script!\"; ?> </body> </html>"
      ]
    },
    {
      "title": "Java Tutorial",
      "summary": "Learn Java\nJava is a popular programming language.\nJava is used to develop mobile apps, web apps, desktop apps, games and much more.\nTip: Sign in to track your progress - it's free.\nExamples in Each Chapter\nOur \"Try it Yourself\" editor makes it easy to learn Java. You can edit Java code and view the result in your browser.\nExampleGet your own Java Server\nTry it Yourself »\nClick on the \"Run example\" button to see how it works.\nWe recommend reading this tutorial, in the sequence listed in the left menu.\nJava is an object oriented language and some concepts may be new. Take breaks when needed, and go over the examples as many times as needed.\nJava Exercises\nMany chapters in this tutorial end with an exercise where you can check your level of knowledge.\nSee all Java Exercises\nREMOVE ADS\nJava Quiz\nTest your Java skills with a quiz.\nStart Java Quiz\nLearn by Examples\nLearn by examples! This tutorial supplements all explanations with clarifying examples.\nSee All Java Examples\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\nJava Reference\nYou will also find complete keyword and method references:\nKickstart your career\nGet certified by completing the JAVA course",
      "examples": [
        "public class Main { public static void main(String[] args) { System.out.println(\"Hello World\"); } }"
      ]
    },
    {
      "title": "C Tutorial",
      "summary": "Learn C\nC is a general-purpose programming language that has been widely used for over 50 years.\nC is very powerful; it has been used to develop operating systems, databases, applications, etc.\nTip: Sign in to track your progress - it's free.\nExamples in Each Chapter\nOur \"Try it Yourself\" editor makes it easy to learn C. You can edit code and view the result in your browser:\nExample\nClick on the \"Try it Yourself\" button to see how it works.\nWe recommend reading this tutorial, in the sequence listed in the left menu.\nC Exercises\nMany chapters in this tutorial end with an exercise where you can check your level of knowledge.\nSee all C Exercises\nREMOVE ADS\nC Quiz\nLearn by taking a quiz! The quiz will give you a signal of how much you know about C.\nStart C Quiz\nLearn by Examples\nLearn by examples! This tutorial supplements all explanations with clarifying examples.\nSee All C Examples\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\nC Reference\nYou will also find complete keyword and function references:",
      "examples": [
        "#include <stdio.h>\n\nint main() {\nprintf(\"Hello World!\");\nreturn 0;\n}"
      ]
    },
    {
      "title": "C++ Tutorial",
      "summary": "Learn C++\nC++ is a popular programming language.\nC++ is used to create computer programs, and is one of the most used language in game development.\nC++ was developed as an extension of C, and both languages have almost the same syntax.\nTip: Sign in to track your progress - it's free.\nExamples in Each Chapter\nOur \"Try it Yourself\" editor makes it easy to learn C++. You can edit C++ code and view the result in your browser.\nExample\nClick on the \"Run example\" button to see how it works.\nWe recommend reading this tutorial, in the sequence listed in the left menu.\nC++ is an object oriented language and some concepts may be new. Take breaks when needed, and go over the examples as many times as needed.\nC++ Exercises\nMany chapters in this tutorial end with an exercise where you can check your level of knowledge.\nSee all C++ Exercises\nREMOVE ADS\nC++ Quiz\nLearn by taking a quiz! The quiz will give you a signal of how much you know, or do not know, about C++.\nStart C++ Quiz\nLearn by Examples\nLearn by examples! This tutorial supplements all explanations with clarifying examples.\nSee All C++ Examples\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\nC++ Reference\nYou will also find references for different libraries, keywords and functions:\nKickstart your career\nGet certified by completing the C++ course",
      "examples": [
        "#include <iostream>\nusing namespace std;\n\nint main() {\ncout << \"Hello World!\";\nreturn 0;\n}"
      ]
    },
    {
      "title": "C# Tutorial",
      "summary": "Learn C#\nC# (C-Sharp) is a programming language developed by Microsoft that runs on the .NET Framework.\nC# is used to develop web apps, desktop apps, mobile apps, games and much more.\nTip: Sign in to track your progress - it's free.\nExamples in Each Chapter\nOur \"Try it Yourself\" editor makes it easy to learn C#. You can edit C# code and view the result in your browser.\nExampleGet your own C# Server\nTry it Yourself »\nClick on the \"Run example\" button to see how it works.\nWe recommend reading this tutorial, in the sequence listed in the left menu.\nC# Exercises\nMany chapters in this tutorial end with an exercise where you can check your level of knowledge.\nSee all C# Exercises\nREMOVE ADS\nC# Quiz\nLearn by taking a quiz! The quiz will give you a signal of how much you know, or do not know, about C#.\nStart C# Quiz\nLearn by Examples\nLearn by examples! This tutorial supplements all explanations with clarifying examples.\nSee All C# Examples\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\nKickstart your career\nGet certified by completing the C# course",
      "examples": [
        "using System; namespace HelloWorld { class Program { static void Main(string[] args) { Console.WriteLine(\"Hello World!\"); } } }"
      ]
    },
    {
      "title": "R Tutorial",
      "summary": "Learn R\nR is a programming language.\nR is often used for statistical computing and graphical presentation to analyze and visualize data.\nTip: Sign in to track your progress - it's free.\nExamples in Each Chapter\nWith our \"Try it Yourself\" editor, you can edit R code and view the result.\nExample\nHow to output some text, and how to do a simple calculation in R:\nResult:\nExample\nHow you can use R to easily create a graph with numbers from 1 to 10 on both the x and y axis:\nResult:\nWe recommend reading this tutorial, in the sequence listed in the left menu.\nREMOVE ADS\nR Exercises\nTest Yourself With Exercises\nExercise:\nInsert the missing part of the code below to output \"Hello World\".\nStart the Exercise\nR Quiz\nLearn by taking a quiz! This quiz will give you a signal of how much you know about R.\nTake the R Quiz\nR Examples\nLearn by examples! This tutorial supplements all explanations with clarifying examples.\nSee All R Examples\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.",
      "examples": [
        "\"Hello World!\"\n5 + 5",
        "plot(1:10)",
        "Hello World",
        "[1] \"Hello World!\"\n[1] 10"
      ]
    },
    {
      "title": "Go Tutorial",
      "summary": "Learn Go\nGo is a popular programming language.\nGo is used to create computer programs.\nExamples in Each Chapter\nOur \"Try it Yourself\" editor makes it easy to learn Go. You can edit Go code and view the result in your browser.\nExample\nClick on the \"Try it Yourself\" button to see how it works.\nGo Exercises\nTest Yourself With Exercises\nExercise:\nInsert the missing part of the code below to output \"Hello World\".\nStart the Exercise\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.",
      "examples": [
        "package main\nimport (\"fmt\")\n\nfunc main() {\nfmt.Println(\"Hello World!\")\n}",
        "package main import (\"fmt\")\nfunc main() { (\"Hello World!\") }"
      ]
    },
    {
      "title": "Kotlin Tutorial",
      "summary": "Learn Kotlin\nKotlin is a modern, trending programming language.\nKotlin is easy to learn, especially if you already know Java (it is 100% compatible with Java).\nKotlin is used to develop Android apps, server side apps, and much more.\nExamples in Each Chapter\nOur \"Try it Yourself\" editor makes it easy to learn Kotlin. You can edit the code and view the result in your browser:\nExample\nClick on the \"Try it Yourself\" button to see how it works.\nWe recommend reading this tutorial, in the sequence listed in the left menu.\nKotlin Exercises\nTest Yourself With Exercises\nExercise:\nInsert the missing part of the code below to output \"Hello World\".\nStart the Exercise\nKotlin Quiz\nLearn by taking a quiz! This quiz will give you a signal of how much you know about Kotlin.\nTake the Kotlin Quiz\nLearn by Examples\nLearn by examples! This tutorial supplements all explanations with clarifying examples.\nSee All Kotlin Examples\nDownload Kotlin\nDownload Kotlin from github: https://github.com/JetBrains/kotlin\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.",
      "examples": [
        "fun main() { println(\"Hello World\") }",
        "() { println(\"Hello World\") }"
      ]
    },
    {
      "title": "Rust Tutorial",
      "summary": "Learn Rust\nRust is a popular programming language used to build everything from web servers to game engines.\nRust is known for being very fast, and is similar to C and C++ in language.\nExamples in Each Chapter\nOur \"Try it Yourself\" editor makes it easy to learn Rust. You can edit code and view the result in your browser:\nExample\nClick on the \"Try it Yourself\" button to see how it works.\nWe recommend reading this tutorial, in the sequence listed in the left menu.\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.",
      "examples": [
        "fn main() {\nprintln!(\"Hello World!\");\n}"
      ]
    },
    {
      "title": "Django Tutorial",
      "summary": "Learn Django\nDjango is a back-end server side web framework.\nDjango is free, open source and written in Python.\nDjango makes it easier to build web pages using Python.\nLearning by Doing\nIn this tutorial you get a step by step guide on how to install and create a Django project. You will learn how to create a project where you can add, read, update or delete data.\nYou will learn how to make HTML Templates and use Django Template Tags to insert data within a HTML document.\nYou will learn how to work with QuerySets to extract, filter, and sort data from the database.\nYou will also learn how to set up a PostgreSQL database and how to deploy your Django project to the world.\nDjango\nDisplay\nAdmin\nSyntax\nQuerySets\nStatic Files\nPostgreSQL\nDeploy\nLearning by Examples\nIn the tutorial we will use examples to better explain the various concepts.\nExampleGet your own Django Server\nLearning by Exercises\nMany chapters in this tutorial end with an exercise where you can check your level of knowledge.\nSee all Django Exercises\nDjango Quiz\nLearn by taking a quiz! The quiz will give you a signal of how much you know about Django.\nStart Django Quiz\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\nLearning by References\nYou will also find references over the most common Django features:",
      "examples": [
        "<ul> {% for x in mymembers %} <li>{{ x.firstname }}</li> {% endfor %} </ul>"
      ]
    },
    {
      "title": "PostgreSQL Tutorial",
      "summary": "Learn PostgreSQL\nPostgreSQL is an advanced relational database system.\nPostgreSQL supports both relational (SQL) and non-relational (JSON) queries.\nPostgreSQL is free and open-source.\nLearning by Doing\nIn this tutorial you get a step by step guide on how to install and create a PostgreSQL database. You will learn how to create a project where you can create, read, update, and delete data.\nYou will learn how to query, filter, and sort data from the database.\nExamples in Each Chapter\nIn the tutorial we will use examples to show what SQL statements returns from the database:\nExample\nSort the table by year:\nLearning by Exercises\nMany chapters in this tutorial end with an exercise where you can check your level of knowledge.\nSee all PostgreSQL Exercises\nPostgreSQL Quiz\nLearn by taking a quiz! The quiz will give you a signal of how much you know about PostgreSQL.\nStart PostgreSQL Quiz\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.",
      "examples": [
        "SELECT * FROM cars\nORDER BY year;"
      ]
    },
    {
      "title": "TypeScript Tutorial",
      "summary": "Learn TypeScript\nTypeScript is JavaScript with added syntax for types.\nTip: Sign in to track your progress - it's free.\nExamples in Each Chapter\nOur \"Try it Yourself\" editor makes it easy to learn TypeScript.\nYou can edit TypeScript code and view the result in your browser.\nExampleGet your own TypeScript Server\nClick on the \"Try it Yourself\" button to see how it works.\nWe recommend reading this tutorial in the sequence listed in the left menu.\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.",
      "examples": [
        "console.log('Hello World!');"
      ]
    },
    {
      "title": "ASP and ASP.NET Tutorials",
      "summary": "ASP stands for Active Server Pages\nASP is a development framework for building web pages.\nASP supports many different development models:\nClassic ASP\nASP.NET Web Forms\nASP.NET MVC\nASP.NET Web Pages\nASP.NET API\nASP.NET Core\nThe ASP Technology\nASP and ASP.NET are server side technologies.\nBoth technologies enable computer code to be executed by an Internet server.\nWhen a browser requests an ASP or ASP.NET file, the ASP engine reads the file, executes any code in the file, and returns the result to the browser.\nClassic ASP - Active Server Pages\nASP (aka Classic ASP) was introduced in 1998 as Microsoft's first server side scripting language.\nClassic ASP pages have the file extension .asp and are normally written in VBScript.\nASP.NET\nASP.NET was released in 2002 as a successor to Classic ASP.\nASP.NET pages have the extension .aspx and are normally written in C# (C sharp).\nASP.NET 4.6 is the latest official version of ASP.NET.\nASP.NET 5 was expected to be an important redesign of ASP.NET.\nHowever, the development of ASP.NET 5 was stopped in favor of ASP.NET Core.\nREMOVE ADS\nASP.NET Web Pages\nASP.NET Web Pages is an SPA application model (Single Page Application).\nThe SPA model is quite similar to PHP and Classic ASP.\nASP.NET Web Pages is being merged into the new ASP.NET Core.\nASP.NET MVC\nASP.NET MVC is an MVC application model (Model-View-Controller).\nASP.NET MVC is being merged into the new ASP.NET Core.\nASP.NET MVC is not covered in this tutorial.\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\nASP.NET Web API\nASP.NET API is an API application model (Application Programming Interface).\nASP.NET API is being merged into the new ASP.NET Core.\nASP.NET API is not covered in this tutorial.\nASP.NET Web Forms\nASP.NET Web Forms is an event driven application model.\nASP.NET Web Forms is not a part of the new ASP.NET Core.\nASP.NET Web Forms is not covered in this tutorial.\nASP.NET Core\nASP.NET Core was released in 2016.\nASP.NET Core merges ASP.NET MVC, ASP.NET Web API, and ASP.NET Web Pages into one application framework.\nASP.NET Core is not covered in this tutorial.",
      "examples": []
    },
    {
      "title": "Node.js Tutorial",
      "summary": "What is Node.js?\nNode.js is a free, open source tool that lets you run JavaScript outside the web browser.\nWith Node.js, you can build fast and scalable applications like web servers, APIs, tools, and more.\nTip: Sign in to track your progress - it's free.\nWhat Can You Build With Node.js?\nNode.js uses an event-driven, non-blocking model.\nIt can handle many connections at once without waiting for one to finish before starting another.\nThis makes it great for real-time apps and high-traffic websites.\nHere are some examples of what you can build with Node.js:\nWeb servers and websites\nREST APIs\nReal-time apps (like chat)\nCommand-line tools\nWorking with files and databases\nIoT and hardware control\nHow to Run Node.js Code\nSave your code in a file, for example app.js, then run it in your terminal or command prompt with:\nThis will start your Node.js program.\nREMOVE ADS\nLearning by Examples\nOur \"Show Node.js\" tool makes it easy to learn Node.js, it shows both the code and the result.\nExampleGet your own Node.js Server\nClick on the \"Run example\" button to see how it works.\nExamples Running in the Command Line Interface\nIn this tutorial there will be some examples that are better explained by displaying the result in the command line interface.\nWhen this happens, The \"Show Node.js\" tool will show the result in a black screen on the right:\nExample\nClick on the \"Run example\" button to see how it works.\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\nNode.js Built-in Modules\nNode.js comes with many built-in modules to help you work with files, servers, paths, the operating system, and more.\nYou can use them by importing them with require().\nExample: Using the OS Module\nSee the full list of built-in modules.\nWhat is npm?\nnpm is the package manager for Node.js.\nIt helps you install and manage third-party packages (libraries) to add more features to your apps.\nExample: Installing a Package\nThis command installs the popular Express web framework.\nYou can then use it in your code:\nDownload Node.js\nDownload Node.js from the official Node.js web site: https://nodejs.org\nNode.js Exercises\nMany chapters in this tutorial end with an exercise where you can check your level of knowledge.\nSee all Node.js Exercises\nNode.js Quiz\nTest your Node.js skills with a quiz.\nStart Node.js Quiz",
      "examples": [
        "node app.js",
        "let http = require('http');\n\nhttp.createServer(function (req, res) {\nres.writeHead(200, {'Content-Type': 'text/plain'});\nres.end('Hello World!');\n}).listen(8080);",
        "console.log('This example is different!');\nconsole.log('The result is displayed in the Command Line Interface');",
        "const os = require('os');\nconsole.log(os.platform());",
        "npm install express",
        "const express = require('express');\nconst app = express();\napp.get('/', (req, res) => res.send('Hello World!'));\napp.listen(8080);",
        "app.js",
        "require()"
      ]
    },
    {
      "title": "Node.js and Raspberry Pi",
      "summary": "Raspberry Pi is a small, multi-use computer.\nWith Node.js you can do amazing things with your Raspberry Pi.\nWhat is the Raspberry Pi?\nThe Raspberry Pi is a small, affordable, and amazingly capable, credit card size computer.\nIt is developed by the Raspberry Pi Foundation, and it might be the most versatile tech ever created.\nCreator Eben Upton's goal was to create a low-cost device that would improve programming skills and hardware understanding.\nDue to the small size and price of the device, it has become the center of a wide range of projects by tinkerers, makers, and electronics enthusiasts.\nRaspberry Pi and Node.js\nThe Raspberry Pi has a row of GPIO (General Purpose input/output) pins, and these can be used to interact in amazing ways with the real world. This tutorial will focus on how to use these with Node.js.\nWhat Do I Need?\nFor this tutorial you need a Raspberry Pi. In our examples we use a Raspberry Pi 3, but this tutorial should work for most versions.\nHardware needed:\nRaspberry Pi computer\nMicroSD memory card (We recommend a class 10 with 16 GB or higher)\nMicroSD to SD memory card adapter (usually included with the MicroSD card)\nMicro USB power supply to power the Raspberry Pi (2.5A or greater recommended)\nWiFi/Ethernet Cable connection for the Raspberry Pi (Not needed for Raspberry Pi 3 as it has built in WiFi)\nA working computer with internet and SD memory card reader (used to get the OS (Operating System) for the Raspberry Pi onto the memory card). In our tutorial we use a Windows computer for this, but you can use a Mac or Linux computer if you prefer\nHDMI monitor, USB keyboard (we need these only temporarily for the first boot of the Raspberry Pi)\nFor later chapters in this tutorial we will use special sensors or devices that we connect to the Raspberry Pi. We will specify these as special requirements in the relevant chapters.\nIf you already have a Raspberry Pi set up with Raspbian, internet and enabled SSH, you can skip to the step \"Install Node.js on Raspberry Pi\".\nWrite Raspbian OS Image to MicroSD Card\nBefore we can start using our Raspberry Pi for anything, we need to get a OS installed.\nRaspbian is a free operating system based on Debian Linux, and it is optimized Raspberry Pi.\nDownload the latest Raspbian image from https://www.raspberrypi.org/downloads/raspbian/ to your computer.\nWe use the \"LITE\" version in our tutorial, since we are setting the Raspberry Pi up as a headless server (we will connect to it through SSH, without having a keyboard/display connected to it). You can use whichever version you want, but this tutorial is written with the \"LITE\" version as its focus.\nInsert the MicroSD memory card in your computer (via the SD adapter if needed). Open File Explorer to verify that it is operational.\nEtcher is a program for flashing images to memory cards. Download and install Etcher from: https://etcher.io/\nLaunch Etcher:\nClick \"Select image\" button and find the Raspbian zip file that you downloaded.\nClick the \"Select drive\" button and specify the memory card as the target location.\nClick the \"Flash!\" button to write the image to the memory card.\nAfter Etcher is finished writing the image to the memory card, remove it from your computer.\nSet up Your Raspberry Pi\nTo get the Raspberry Pi ready to boot we need to:\nInsert the MicroSD memory card into the Raspberry Pi\nConnect the USB keyboard\nConnect the HDMI cable\nConnect the USB Wi-Fi adapter (or Ethernet cable). Skip this step if you are using a Raspberry Pi 3\nConnect the micro USB power supply\nThe Raspberry Pi should now be booting up\nWhen the Raspberry Pi is finished booting up, log in using username: pi and password: raspberry\nSet Up Network on the Raspberry Pi\nIf you will use a Ethernet cable to connect your Raspberry Pi to the internet, you can skip this step.\nFor this section we will assume you have a Raspberry Pi 3, with built in WiFi.\nStart by scanning for wireless networks:\nThis will list all of the available WiFi networks. (It also confirms that your WiFi is working)\nNow we need to open the wpa-supplicant file, to add the network you want to connect to:\nThis will open the file in the Nano editor. Add the following to the bottom of the file (change wifiName and wifiPassword with the actual network name and password):\nPress \"Ctrl+x\" to save the code. Confirm with \"y\", and confirm the name with \"Enter\".\nAnd reboot the Raspberry Pi:\nAfter reboot, log in again, and confirm that the WiFi is connected and working:\nIf the WiFi is working propery, the information displayed should include an IP address, similar to this:\nWrite down that IP address, as we will use it to connect to the Raspberry Pi via SSH.\nREMOVE ADS\nEnable SSH, Change Hostname and Password\nNow your Raspberry Pi is connected to the internet, it is time to enable SSH.\nSSH allows you up use the Raspberry Pi without having a monitor and keyboard connected to it.\n(You will need a SSH client for this on your non-Raspberry Pi computer. We use\nPuTTY\nfor windows)\nOpen the Raspberry Pi Software Configuration Tool:\nYou should see a menu like this:\nSelect option 5 Interfacing Options:\nSelect option P2 SSH, to activate SSH:\nConfirm with YES, to activate SSH:\nSSH is now enabled, and you should be in the main menu again.\nSelect 1 Change User Password, and follow the instructions to change the password. Choose a secure password, but something you will remember:\nAfter you have finished changing the password, you should be back in the main menu.\nSelect 2 Hostname, and follow the instructions to change the hostname:\nAfter you have finished changing the hostname, you should be back in the main menu.\nNow we will close the menu and save the changes:\nWhen selecting Finish, you will get the option to reboot. Select Yes to reboot the Raspberry Pi.\nYou can now unplug the monitor and keyboard from the Raspberry Pi, and we can log in using out SSH client.\nOpen PuTTY, type in the IP address for your Raspberry Pi, and click Open:\nLog in using the username pi and the new password you specified.\nYou should now see a command line like this: (we used w3demopi as our hostname)\nYou are now able to run your Raspberry Pi in \"Headless-mode\", meaning you do not need a monitor or keyboard. And if you have a WiFi connection, you do not need a ethernet cable either, just the power cable!\nInstall Node.js on Raspberry Pi\nWith the Raspberry Pi properly set up, login in via SSH, and update your Raspberry Pi system packages to their latest versions.\nUpdate your system package list:\nUpgrade all your installed packages to their latest version:\nDoing this regularly will keep your Raspberry Pi installation up to date.\nTo download and install newest version of Node.js, use the following command:\nNow install it by running:\nCheck that the installation was successful, and the version number of Node.js with:\nGet Started with Raspberry Pi and Node.js\nNow you have a Raspberry Pi with Node.js installed!\nIf you want to learn more about Node.js, follow our tutorial: https://www.w3schools.com/nodejs/\nIn the next chapter we will get to know the GPIO and how to use it with Node.js.",
      "examples": [
        "pi@raspberrypi:~ $ sudo iwlist wlan0 scan",
        "pi@raspberrypi:~ $ sudo nano /etc/wpa_supplicant/wpa_supplicant.conf",
        "network={\nssid=\"wifiName\"\npsk=\"wifiPassword\"\n}",
        "pi@raspberrypi:~ $ sudo reboot",
        "pi@raspberrypi:~ $ ifconfig wlan0",
        "inet addr:192.168.1.50",
        "pi@raspberrypi:~ $ sudo raspi-config",
        "pi@w3demopi:~ $",
        "pi@w3demopi:~ $ sudo apt-get update",
        "pi@w3demopi:~ $ sudo apt-get dist-upgrade",
        "pi@w3demopi:~ $ curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -",
        "pi@w3demopi:~ $ sudo apt-get install -y nodejs",
        "pi@w3demopi:~ $ node -v",
        "pi",
        "raspberry",
        "wifiName",
        "wifiPassword",
        "Ctrl+x",
        "y",
        "Enter",
        "5 Interfacing Options",
        "P2 SSH",
        "YES",
        "1 Change User Password",
        "2 Hostname",
        "Finish",
        "Yes",
        "Open"
      ]
    },
    {
      "title": "Git Tutorial",
      "summary": "Learn Git\nsave and manage different versions of your files and code.\nwork with others, keep track of changes, and undo mistakes.\nTip: Sign in to track your progress - it's free.\nWhere to use Git?\nGit works on your computer, but you also use it with online services like GitHub, GitLab, or Bitbucket to share your work with others. These are called remote repositories.\nIn this tutorial, you'll learn how to use Git for your own projects and how to connect with remote repositories online.\nLearning by Examples\nIn this tutorial, we will show you Git commands like this:\nExample\nFor new users, using the terminal view can seem a bit complicated.\nDon't worry! We will keep it really simple, and learning this way gives you a good grasp of how Git works.\nIn the code above, you can see commands (input) and output.\nLines like this are commands we input:\nExample\nLines like this are the output/response to our commands:\nExample\nIn general, lines with $ in front of it is input.\nThese are the commands you can copy and run in your terminal.\nTip for Beginners: Don't worry about making mistakes!\nWhen you use Git on your own computer, you can't really break anything important.\nExperimenting is a great way to learn, and you can always undo or redo changes as you go.\nREMOVE ADS\nChange Platform:\nWhat Changes When You Switch Platform?\nThe tutorial can show examples for GitHub, GitLab, or Bitbucket.\nThe Git commands are mostly the same, but some steps (like connecting to a remote or pushing code) might look a little different depending on the platform you choose.\nUse the menu to see examples for each platform.\nWhy Practice with Exercises?\nPracticing with exercises helps you remember the commands and understand how Git works.\nTry the exercises and quiz to test your knowledge!\nGit Quiz\nTest your Git skills with a quiz.\nStart Git Quiz\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.",
      "examples": [
        "git --version git version 2.30.2.windows.1",
        "git --version",
        "git version 2.30.2.windows.1",
        "$"
      ]
    },
    {
      "title": "MongoDB Tutorial",
      "summary": "Learn MongoDB\nMongoDB is a document database. It stores data in a type of JSON format called BSON.\nIf you are unfamiliar with JSON, check out our JSON tutorial.\nA record in MongoDB is a document, which is a data structure composed of key value pairs similar to the structure of JSON objects.\nA MongoDB Document\nRecords in a MongoDB database are called documents, and the field values may include numbers, strings, booleans, arrays, or even nested documents.\nExample Document\nLearning by Examples\nOur \"Show MongoDB\" tool makes it easy to demonstrate MongoDB. It shows both the code and the result.\nExample\nFind all documents that have a category of \"news\".\nLearning by Exercises\nMongoDB Exercises\nExercise:\nWhat type of database is MongoDB?\nStart the Exercise\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.",
      "examples": [
        "{ title: \"Post Title 1\", body: \"Body of post.\", category: \"News\", likes: 1, tags: [\"news\", \"events\"], date: Date() }",
        "db.posts.find( {category: \"News\"} )",
        "MongoDB is a database."
      ]
    },
    {
      "title": "AWS Cloud Practitioner Tutorial",
      "summary": "AWS Cloud Tutorial\nLearn AWS\nBoost your cloud skills.\nYou will be catching up in no time!\nThis tutorial gives an overview of the AWS cloud.\nIt will teach you AWS concepts, services, security, architecture, and pricing.\nIn addition, this tutorial will help you prepare for the AWS Certified Cloud Practitioner Exam.\nWhy Learn AWS Cloud?\nThis skill offers many job opportunities.\nAWS is one of the major cloud providers.\nYou can do everything in the AWS cloud.\nTutorial Overview\nFormat: Text and video.\nPrerequisites: None.\nTime to complete: Eight hours.\nContent collaboration: W3schools.com collaborates with Amazon Web Services on this tutorial to deliver digital training content to our students.",
      "examples": []
    },
    {
      "title": "XML Tutorial",
      "summary": "Learn XML\nXML stands for eXtensible Markup Language.\nXML was designed to store and transport data.\nXML was designed to be both human- and machine-readable.\nXML Example 1\nDisplay the XML File » Display the XML File as a Note »\nXML Example 2\nDisplay the XML File » Display with XSLT »\nHeader\nREMOVE ADS\nWhy Study XML?\nXML plays an important role in many different IT systems.\nXML is often used for distributing data over the Internet.\nIt is important (for all types of software developers!) to have a good understanding of XML.\nWhat You Will Learn\nThis tutorial will give you a solid understanding of:\nWhat is XML?\nHow does XML work?\nHow can I use XML?\nWhat can I use XML for?\nImportant XML Standards\nThis tutorial will also dig deep into the following important XML standards:\nXML AJAX\nXML DOM\nXML XPath\nXML XSLT\nXML XQuery\nXML DTD\nXML Schema\nXML Services\nWe recommend reading this tutorial, in the sequence listed in the left menu.\nLearn by Examples\nExamples are better than 1000 words. Examples are often easier to understand than text explanations.\nThis tutorial supplements all explanations with clarifying \"Try it Yourself\" examples.\nXML Examples\nAJAX Examples\nDOM Examples\nXPath Examples\nXSLT Examples\nXML Quiz Test\nTest your XML skills at W3Schools!\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\nKickstart your career\nGet certified by completing the XML course",
      "examples": [
        "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>",
        "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<breakfast_menu>\n<food>\n<name>Belgian Waffles</name>\n<price>$5.95</price>\n<description>\nTwo of our famous Belgian Waffles with plenty of real maple syrup\n</description>\n<calories>650</calories>\n</food>\n<food>\n<name>Strawberry Belgian Waffles</name>\n<price>$7.95</price>\n<description>\nLight Belgian waffles covered with strawberries and whipped cream\n</description>\n<calories>900</calories>\n</food>\n<food>\n<name>Berry-Berry Belgian Waffles</name>\n<price>$8.95</price>\n<description>\nBelgian waffles covered with assorted fresh berries and whipped cream\n</description>\n<calories>900</calories>\n</food>\n<food>\n<name>French Toast</name>\n<price>$4.50</price>\n<description>\nThick slices made from our homemade sourdough bread\n</description>\n<calories>600</calories>\n</food>\n<food>\n<name>Homestyle Breakfast</name>\n<price>$6.95</price>\n<description>\nTwo eggs, bacon or sausage, toast, and our ever-popular hash browns\n</description>\n<calories>950</calories>\n</food>\n</breakfast_menu>"
      ]
    },
    {
      "title": "Machine Learning",
      "summary": "Machine Learning is a subfield of Artificial intelligence\n\"Learning machines to imitate human intelligence\"\nMachine Learning (ML)\nTraditional programming uses algorithms to produce results from data:\nData + Algorithms = Results\nMachine learning creates algorithms from data and results:\nData + Results = Algorithms\nNeural Networks (NN)\nNeural Networks is:\nA programming technique\nA method used in machine learning\nA software that learns from mistakes\nNeural Networks are based on how the human brain works:\nNeurons are sending messages to each other. While the neurons are trying to solve a problem (over and over again), it is strengthening the connections that lead to success and diminishing the connections that lead to failure.\nPerceptrons\nThe Perceptron defines the first step into Neural Networks.\nIt represents a single neuron with only one input layer, and no hidden layers.\nLearn how to program a perceptron.\nNeural Networks\nNeural Networks are Multi-Layer Perceptrons.\nIn its simplest form, a neural network is made up from:\nAn input layer (yellow)\nA hidden layer (blue)\nAn output layer (red)\nIn the Neural Network Model, input data (yellow) are processed against a hidden layer (blue) before producing the final output (red).\nThe First Layer:\nThe yellow perceptrons are making simple decisions based on the input. Each single decision is sent to the perceptrons in the next layer.\nThe Second Layer:\nThe blue perceptrons are making decisions by weighing the results from the first layer. This layer make more complex decisions at a more abstract level than the first layer.\nREMOVE ADS\nDeep Neural Networks\nDeep Neural Networks are made up of several hidden layers of neural networks that perform complex operations on massive amounts of data.\nEach successive layer uses the preceding layer as input.\nFor instance, optical reading uses low layers to identify edges, and higher layers to identify letters.\nIn the Deep Neural Network Model, input data (yellow) are processed against a hidden layer (blue) and modified against more hidden layers (green) to produce the final output (red).\nThe First Layer:\nThe yellow perceptrons are making simple decisions based on the input. Each single decision is sent to the perceptrons in the next layer.\nThe Second Layer:\nThe blue perceptrons are making decisions by weighing the results from the first layer. This layer make more complex decisions at a more abstract level than the first layer.\nThe Third Layer:\nEven more complex decisions are made by the green perceptrons.\nDeep Learning (DL)\nDeep Learning is a subset of Machine Learning.\nDeep Learning is responsible for the AI boom of the last years.\nDeep learning is an advanced type of ML that handles complex tasks like image recognition.",
      "examples": []
    },
    {
      "title": "Generative AI Tutorial",
      "summary": "Learn Generative AI\nGenerative AI can help boost your productivity if used correctly.\nAI prompt engineering is one of the hottest jobs in tech.\nKnowing how to write prompts correctly is the key to helping you use generative AIs.\nLearning by Doing\nIn these tutorials, you get step-by-step guides on how to write AI prompts to get the best possible results from text-to-text and text-to-image generative AIs.\nYou will learn to understand Generative AI capabilities and write prompts that minimize misinformation and biased results.\nYou will learn how to preface your prompts and add details to them to generate consistent results.\nLearning by Examples\nIn these tutorials, we will use examples to better explain the various concepts.\nExample\nWith the following prompt:\nA response from a Generative AI (in this case, ChatGPT) could be:\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.",
      "examples": [
        "Explain \"Generative AI\" like I'm 5 years old"
      ]
    },
    {
      "title": "ChatGPT-3.5 Tutorial",
      "summary": "ChatGPT is an AI chatbot developed by OpenAI.\nChatGPT can help boost your productivity if used correctly.\nKnowing how to write prompts correctly is the key to helping you use ChatGPT\nLearning by Doing\nIn this tutorial you get step-by-step guides on how to write AI prompts to get the best possible results from ChatGPT-3.5.\nYou will learn to understand ChatGPT-3.5's capabilities and write prompts that minimize misinformation and biased results.\nYou will learn how to preface your prompts and add details to them to generate consistent results.\nLearning by Examples\nIn the tutorial we will use examples to better explain the various concepts.\nExample\nWith the following prompt:\nA response from a Generative AI (in this case, ChatGPT) could be:\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\nChatGPT-4\nChatGPT-4 is the improved version based on ChatGPT-3.5. If you want to learn more about ChatGPT-4, see our ChatGPT-4 Tutorial",
      "examples": [
        "Explain \"Generative AI\" like I'm 5 years old."
      ]
    },
    {
      "title": "Machine Learning",
      "summary": "Machine Learning is making the computer learn from studying data and statistics.\nMachine Learning is a step into the direction of artificial intelligence (AI).\nMachine Learning is a program that analyses data and learns to predict the outcome.\nWhere To Start?\nIn this tutorial we will go back to mathematics and study statistics, and how to calculate important numbers based on data sets.\nWe will also learn how to use various Python modules to get the answers we need.\nAnd we will learn how to make functions that are able to predict the outcome based on what we have learned.\nData Set\nIn the mind of a computer, a data set is any collection of data. It can be anything from an array to a complete database.\nExample of an array:\n[99,86,87,88,111,86,103,87,94,78,77,85,86]\nExample of a database:\nBy looking at the array, we can guess that the average value is probably around 80 or 90, and we are also able to determine the highest value and the lowest value, but what else can we do?\nAnd by looking at the database we can see that the most popular color is white, and the oldest car is 17 years, but what if we could predict if a car had an AutoPass, just by looking at the other values?\nThat is what Machine Learning is for! Analyzing data and predicting the outcome!\nIn Machine Learning it is common to work with very large data sets. In this tutorial we will try to make it as easy as possible to understand the different concepts of machine learning, and we will work with small easy-to-understand data sets.\nREMOVE ADS\nData Types\nTo analyze data, it is important to know what type of data we are dealing with.\nWe can split the data types into three main categories:\nNumerical\nCategorical\nOrdinal\nNumerical data are numbers, and can be split into two numerical categories:\nDiscrete Data\n- counted data that are limited to integers. Example: The number of cars passing by.\nContinuous Data\n- measured data that can be any number. Example: The price of an item, or the size of an item\nCategorical data are values that cannot be measured up against each other. Example: a color value, or any yes/no values.\nOrdinal data are like categorical data, but can be measured up against each other. Example: school grades where A is better than B and so on.\nBy knowing the data type of your data source, you will be able to know what technique to use when analyzing them.\nYou will learn more about statistics and analyzing data in the next chapters.",
      "examples": [
        "[99,86,87,88,111,86,103,87,94,78,77,85,86]"
      ]
    },
    {
      "title": "DSA Tutorial",
      "summary": "Learn Data Structures and Algorithms\nData Structures and Algorithms (DSA) is a fundamental part of Computer Science that teaches you how to think and solve complex problems systematically.\nUsing the right data structure and algorithm makes your program run faster, especially when working with lots of data.\nKnowing DSA can help you perform better in job interviews and land great jobs in tech companies.\nTip: Sign in to track your progress - it's free.\nThis Tutorial\nThis tutorial is made to help you learn Data Structures and Algorithms (DSA) fast and easy.\nAnimations, like the one below, are used to explain ideas along the way.\nResult:\nFirst, you will learn the fundamentals of DSA: understanding different data structures, basic algorithm concepts, and how they are used in programming.\nThen, you will learn more about complex data structures like trees and graphs, study advanced sorting and searching algorithms, explore concepts like time complexity, and more.\nThis tutorial will give you a solid foundation in Data Structures and Algorithms, an essential skill for any software developer.\nTry it Yourself Examples in Every Chapter\nIn every chapter, you can edit the examples online, and click on a button to view the result.\nThe code examples in this tutorial are written in Python, C, and Java. You can see this by clicking the \"Run Example\" button.\nExample\nREMOVE ADS\nWhat You Should Already Know\nAlthough Data Structures and Algorithms is actually not specific to any programming language, you should have a basic understanding of programming in one of these common programming languages:\nPython\nC\nC++\nJava\nJavaScript\nDSA History\nThe word 'algorithm' comes from 'al-Khwarizmi', named after a Persian scholar who lived around year 800.\nThe concept of algorithmic problem-solving can be traced back to ancient times, long before the invention of computers.\nThe study of Data Structures and Algorithms really took off with the invention of computers in the 1940s, to efficiently manage and process data.\nToday, DSA is a key part of Computer Science education and professional programming, helping us to create faster and more powerful software.\nDSA Exercises\nTest Yourself With Exercises\nExercise:\nWhat does DSA stand for?\nStart the Exercise\nDSA Quiz ?\nLearn by taking a quiz! The quiz will give you a signal of how much you know about Data Structures and Algorithms.\nStart DSA Quiz\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\nLearn by Examples\nLearn by examples! This tutorial supplements all explanations with clarifying examples.\nSee All DSA Examples",
      "examples": [
        "my_array = [7, 12, 9, 4, 11] minVal = my_array[0] for i in my_array: if i < minVal: minVal = i print('Lowest value:',minVal)",
        "DSA stands for Structures and ."
      ]
    },
    {
      "title": "Data Science Tutorial",
      "summary": "Learn Data Science\nToday, Data rules the world. This has resulted in a huge demand for Data Scientists.\nA Data Scientist helps companies with data-driven decisions, to make their business better.\nLearning by Examples\nWith our \"Try it Yourself\" editor, you can edit Python code and view the result.\nExample\nClick on the \"Try it Yourself\" button to see how it works.\nThe Python Language\nPython is a programming language widely used by Data Scientists.\nPython has in-built mathematical libraries and functions, making it easier to calculate mathematical problems and to perform data analysis.\nIn this tutorial, we will use Python to provide practical examples.\nTo learn more about Python, please visit our Python Tutorial.",
      "examples": [
        "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\nfull_health_data = pd.read_csv(\"data.csv\", header=0, sep=\",\")\n\nx = full_health_data[\"Average_Pulse\"]\ny = full_health_data[\"Calorie_Burnage\"]\n\nslope, intercept, r, p, std_err = stats.linregress(x, y)\n\ndef myfunc(x):\nreturn slope * x + intercept\n\nmymodel = list(map(myfunc, x))\n\nplt.scatter(x, y)\nplt.plot(x, mymodel)\nplt.ylim(ymin=0, ymax=2000)\nplt.xlim(xmin=0, xmax=200)\nplt.xlabel(\"Average_Pulse\")\nplt.ylabel (\"Calorie_Burnage\")\nplt.show()"
      ]
    },
    {
      "title": "NumPy Tutorial",
      "summary": "Learn NumPy\nNumPy is a Python library.\nNumPy is used for working with arrays.\nNumPy is short for \"Numerical Python\".\nLearning by Reading\nWe have created 43 tutorial pages for you to learn more about NumPy.\nStarting with a basic introduction and ends up with creating and plotting random data sets, and working with NumPy functions:\nBasic\nRandom\nufunc\nREMOVE ADS\nLearning by Examples\nIn our \"Try it Yourself\" editor, you can use the NumPy module, and modify the code to see the result.\nExampleGet your own Python Server\nCreate a NumPy array:\nClick on the \"Try it Yourself\" button to see how it works.\nLearning by Exercises\nMany chapters in this tutorial end with an exercise where you can check your level of knowledge.\nSee all NumPy Exercises\nLearning by Quiz Test\nTest your NumPy skills with a quiz test.\nStart NumPy Quiz",
      "examples": [
        "import numpy as np\n\narr = np.array([1, 2, 3, 4, 5])\n\nprint(arr)\n\nprint(type(arr))"
      ]
    },
    {
      "title": "Pandas Tutorial",
      "summary": "Learn Pandas\nPandas is a Python library.\nPandas is used to analyze data.\nLearning by Reading\nWe have created 14 tutorial pages for you to learn more about Pandas.\nStarting with a basic introduction and ends up with cleaning and plotting data:\nBasic\nCleaning Data\nAdvanced\nLearning by Examples\nIn our \"Try it Yourself\" editor, you can use the Pandas module, and modify the code to see the result.\nExampleGet your own Python Server\nLoad a CSV file into a Pandas DataFrame:\nClick on the \"Try it Yourself\" button to see how it works.\nLearning by Exercises\nMost chapters in this tutorial end with an exercise where you can check your level of knowledge.\nSee all Pandas Exercises\nLearning by Quiz Test\nTest your Pandas skills with a quiz test.\nStart Pandas Quiz",
      "examples": [
        "import pandas as pd\n\ndf = pd.read_csv('data.csv')\n\nprint(df.to_string())"
      ]
    },
    {
      "title": "SciPy Tutorial",
      "summary": "Learn SciPy\nSciPy is a scientific computation library that uses NumPy underneath.\nSciPy stands for Scientific Python.\nLearning by Reading\nWe have created 10 tutorial pages for you to learn the fundamentals of SciPy:\nBasic SciPy\nLearning by Examples\nIn our \"Try it Yourself\" editor, you can use the SciPy module, and modify the code to see the result.\nExampleGet your own Python Server\nHow many cubic meters are in one liter:\nClick on the \"Try it Yourself\" button to see how it works.\nLearning by Exercises\nMany chapters in this tutorial end with an exercise where you can check your level of knowledge.\nSee all SciPy Exercises\nLearning by Quiz Test\nTest your SciPy skills with a quiz test.\nStart SciPy Quiz",
      "examples": [
        "from scipy import constants\n\nprint(constants.liter)"
      ]
    },
    {
      "title": "Matplotlib Tutorial",
      "summary": "What is Matplotlib?\nMatplotlib is a low level graph plotting library in python that serves as a visualization utility.\nMatplotlib was created by John D. Hunter.\nMatplotlib is open source and we can use it freely.\nMatplotlib is mostly written in python, a few segments are written in C, Objective-C and Javascript for Platform compatibility.\nWhere is the Matplotlib Codebase?\nThe source code for Matplotlib is located at this github repository https://github.com/matplotlib/matplotlib",
      "examples": []
    },
    {
      "title": "Statistics Tutorial",
      "summary": "Learn Statistics\nWelcome to this introductory course in Statistics.\nThis course serves as an excellent primer to Data Analytics.\nLearning by Reading\nWe have created 36 tutorial pages for you to learn more about some of the most important concepts in Statistics.\nBasic Concepts\nDescriptive Statistics\nInferential Statistics\nLearning by Examples\nIn our \"Try it Yourself\" editor, you can use Python modules and R code, and modify the code to see the result.\nExampleGet your own Python Server\nWith Python use the NumPy library mean() method to find the mean of the values 4,11,7,14:\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.",
      "examples": [
        "import numpy\n\nvalues = [4,11,7,14]\n\nx = numpy.mean(values)\n\nprint(x)",
        "mean()"
      ]
    },
    {
      "title": "Excel Tutorial",
      "summary": "Learn Excel\nExcel is the world's most used spreadsheet program\nExcel is a powerful tool to use for mathematical functions\nStart learning Excel now »\nLearn Excel\nTip: Sign in to track your progress - it's free.\nExamples in Each Chapter\nWe use practical examples to give the user a better understanding of the concepts.\nCopy Values Tool\nExample values can be copied from the tutorial and into your spreadsheet, making it easy for you to tag along step-by-step:\nREMOVE ADS\nCase Based Learning\nWe have created active learning activities, so you can test and build your knowledge. Making the learning experience more fun and engaging.\nSolve Case »\nWhy Study Excel?\nExcel is the world's most used spreadsheet program.\nExample use areas:\nData analytics\nProject management\nFinance and accounting\nTest Yourself With Exercises\nExcel Exercise:\nComplete the Excel formula:\nStart the Exercise\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.",
      "examples": [
        "309 39 320 35 318 45 314 44",
        "1+1"
      ]
    },
    {
      "title": "Google Sheets Tutorial",
      "summary": "Learn Google Sheets\nGoogle Sheets is a widely used spreadsheet program\nGoogle Sheets is a powerful tool to use for mathematical functions\nStart learning Google Sheets now »\nLearn Google Sheets\nExamples in Each Chapter\nWe use practical examples to give the user a better understanding of the concepts.\nCopy Values Tool\nExample values can be copied from the tutorial and into your spreadsheet, making it easy for you to tag along step-by-step:\nWhy Study Google Sheets?\nGoogle Sheets is an widely used spreadsheet program.\nExample use areas:\nData analytics\nProject management\nFinance and accounting",
      "examples": [
        "309 39 320 35 318 45 314 44"
      ]
    }
  ],
  "glossary": [
    "ai",
    "ajax",
    "angular",
    "angularjs",
    "appml",
    "asp",
    "aws cloud",
    "backend",
    "bootstrap",
    "c#",
    "c++",
    "canvas",
    "chatgpt",
    "colors",
    "css",
    "data science",
    "django",
    "dsa",
    "excel",
    "exercises",
    "free",
    "generative ai",
    "git",
    "go",
    "google sheets",
    "graphics",
    "how to",
    "html",
    "html css",
    "icons",
    "java",
    "javascript",
    "jquery",
    "json",
    "kotlin",
    "machine learning",
    "matplotlib",
    "mongodb",
    "mysql",
    "node.js",
    "numpy",
    "pandas",
    "php",
    "postgresql",
    "programs",
    "python",
    "raspberry pi",
    "react",
    "report error",
    "rust",
    "rwd",
    "sass",
    "scipy",
    "sql",
    "statistics",
    "svg",
    "tutorials home",
    "typescript",
    "vue",
    "w3.css",
    "w3.js",
    "w3schools spaces",
    "xml"
  ]
}