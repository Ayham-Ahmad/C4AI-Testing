{
  "course_name": "Data Science",
  "course_url": "https://www.w3schools.com/datascience/default.asp",
  "description": "Today, Data rules the world. This has resulted in a huge demand for Data Scientists. A Data Scientist helps companies with data-driven decisions, to make their business better. With our \"Try it Yourself\" editor, you can edit Python code and view the result. Click on the \"Try it Yourself\" button to see how it works. Python is a programming language widely used by Data Scientists. Python has in-built mathematical libraries and functions, making it easier to calculate mathematical problems and to perform data analysis. In this tutorial, we will use Python to provide practical examples. To learn more about Python, please visit our Python Tutorial.",
  "course_summary": [
    {
      "title": "Data Science Tutorial",
      "summary": "Learn Data Science\nToday, Data rules the world. This has resulted in a huge demand for Data Scientists.\nA Data Scientist helps companies with data-driven decisions, to make their business better.\nLearning by Examples\nWith our \"Try it Yourself\" editor, you can edit Python code and view the result.\nExample\nClick on the \"Try it Yourself\" button to see how it works.\nThe Python Language\nPython is a programming language widely used by Data Scientists.\nPython has in-built mathematical libraries and functions, making it easier to calculate mathematical problems and to perform data analysis.\nIn this tutorial, we will use Python to provide practical examples.\nTo learn more about Python, please visit our Python Tutorial.",
      "examples": [
        "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\nfull_health_data = pd.read_csv(\"data.csv\", header=0, sep=\",\")\n\nx = full_health_data[\"Average_Pulse\"]\ny = full_health_data[\"Calorie_Burnage\"]\n\nslope, intercept, r, p, std_err = stats.linregress(x, y)\n\ndef myfunc(x):\nreturn slope * x + intercept\n\nmymodel = list(map(myfunc, x))\n\nplt.scatter(x, y)\nplt.plot(x, mymodel)\nplt.ylim(ymin=0, ymax=2000)\nplt.xlim(xmin=0, xmax=200)\nplt.xlabel(\"Average_Pulse\")\nplt.ylabel (\"Calorie_Burnage\")\nplt.show()"
      ]
    },
    {
      "title": "Data Science Introduction",
      "summary": "Data Science is a combination of multiple disciplines that uses statistics, data analysis, and machine learning to analyze data and to extract knowledge and insights from it.\nWhat is Data Science?\nData Science is about data gathering, analysis and decision-making.\nData Science is about finding patterns in data, through analysis, and make future predictions.\nBy using Data Science, companies are able to make:\nBetter decisions (should we choose A or B)\nPredictive analysis (what will happen next?)\nPattern discoveries (find pattern, or maybe hidden information in the data)\nWhere is Data Science Needed?\nData Science is used in many industries in the world today, e.g. banking, consultancy, healthcare, and manufacturing.\nExamples of where Data Science is needed:\nFor route planning: To discover the best routes to ship\nTo foresee delays for flight/ship/train etc. (through predictive analysis)\nTo create promotional offers\nTo find the best suited time to deliver goods\nTo forecast the next years revenue for a company\nTo analyze health benefit of training\nTo predict who will win elections\nData Science can be applied in nearly every part of a business where data is available. Examples are:\nConsumer goods\nStock markets\nIndustry\nPolitics\nLogistic companies\nE-commerce\nREMOVE ADS\nHow Does a Data Scientist Work?\nA Data Scientist requires expertise in several backgrounds:\nMachine Learning\nStatistics\nProgramming (Python or R)\nMathematics\nDatabases\nA Data Scientist must find patterns within the data. Before he/she can find the patterns, he/she must organize the data in a standard format.\nHere is how a Data Scientist works:\nAsk the right questions - To understand the business problem.\nExplore and collect data - From database, web logs, customer feedback, etc.\nExtract the data - Transform the data to a standardized format.\nClean the data - Remove erroneous values from the data.\nFind and replace missing values - Check for missing values and replace them with a suitable value (e.g. an average value).\nNormalize data - Scale the values in a practical range (e.g. 140 cm is smaller than 1,8 m. However, the number 140 is larger than 1,8. - so scaling is important).\nAnalyze data, find patterns and make future predictions.\nRepresent the result - Present the result with useful insights in a way the \"company\" can understand.\nWhere to Start?\nIn this tutorial, we will start by presenting what data is and how data can be analyzed.\nYou will learn how to use statistics and mathematical functions to make predictions.",
      "examples": []
    },
    {
      "title": "Data Science - What is Data?",
      "summary": "What is Data?\nData is a collection of information.\nOne purpose of Data Science is to structure data, making it interpretable and easy to work with.\nData can be categorized into two groups:\nStructured data\nUnstructured data\nUnstructured Data\nUnstructured data is not organized. We must organize the data for analysis purposes.\nStructured Data\nStructured data is organized and easier to work with.\nHow to Structure Data?\nWe can use an array or a database table to structure or present data.\nExample of an array:\nThe following example shows how to create an array in Python:\nExample\nIt is common to work with very large data sets in Data Science.\nIn this tutorial we will try to make it as easy as possible to understand the concepts of Data Science. We will therefore work with a small data set that is easy to interpret.",
      "examples": [
        "[80, 85, 90, 95, 100, 105, 110, 115, 120, 125]",
        "Array = [80, 85, 90, 95, 100, 105, 110, 115, 120, 125]\nprint(Array)"
      ]
    },
    {
      "title": "Data Science - Database Table",
      "summary": "Database Table\nA database table is a table with structured data.\nThe following table shows a database table with health data extracted from a sports watch:\nThis dataset contains information of a typical training session such as duration, average pulse, calorie burnage etc.\nDatabase Table Structure\nA database table consists of column(s) and row(s):\nA row is a horizontal representation of data.\nA column is a vertical representation of data.\nREMOVE ADS\nVariables\nA variable is defined as something that can be measured or counted.\nExamples can be characters, numbers or time.\nIn the example under, we can observe that each column represents a variable.\nThere are 6 columns, meaning that there are 6 variables (Duration, Average_Pulse, Max_Pulse, Calorie_Burnage, Hours_Work, Hours_Sleep).\nThere are 11 rows, meaning that each variable has 10 observations.\nBut if there are 11 rows, how come there are only 10 observations?\nIt is because the first row is the label, meaning that it is the name of the variable.",
      "examples": []
    },
    {
      "title": "Data Science & Python",
      "summary": "Python\nPython is a programming language widely used by Data Scientists.\nPython has in-built mathematical libraries and functions, making it easier to calculate mathematical problems and to perform data analysis.\nWe will provide practical examples using Python.\nTo learn more about Python, please visit our Python Tutorial.\nPython Libraries\nPython has libraries with large collections of mathematical functions and analytical tools.\nIn this tutorial, we will use the following libraries:\nPandas - This library is used for structured data operations, like import CSV files, create dataframes, and data preparation\nNumpy - This is a mathematical library. Has a powerful N-dimensional array object, linear algebra, Fourier transform, etc.\nMatplotlib - This library is used for visualization of data.\nSciPy - This library has linear algebra modules\nWe will use these libraries throughout the tutorial to create examples.",
      "examples": []
    },
    {
      "title": "Data Science - Python DataFrame",
      "summary": "Create a DataFrame with Pandas\nA data frame is a structured representation of data.\nLet's define a data frame with 3 columns and 5 rows with fictional numbers:\nExample\nExample Explained\nImport the Pandas library as pd\nDefine data with column and rows in a variable named d\nCreate a data frame using the function pd.DataFrame()\nThe data frame contains 3 columns and 5 rows\nPrint the data frame output with the print() function\nWe write pd. in front of DataFrame() to let Python know that we want to activate the DataFrame() function from the Pandas library.\nBe aware of the capital D and F in DataFrame!\nInterpreting the Output\nThis is the output:\nWe see that \"col1\", \"col2\" and \"col3\" are the names of the columns.\nDo not be confused about the vertical numbers ranging from 0-4. They tell us the information about the position of the rows.\nIn Python, the numbering of rows starts with zero.\nNow, we can use Python to count the columns and rows.\nWe can use df.shape[1] to find the number of columns:\nExample\nCount the number of columns:\nWe can use df.shape[0] to find the number of rows:\nExample\nCount the number of rows:\nWhy Can We Not Just Count the Rows and Columns Ourselves?\nIf we work with larger data sets with many columns and rows, it will be confusing to count it by yourself. You risk to count it wrongly. If we use the built-in functions in Python correctly, we assure that the count is correct.",
      "examples": [
        "import pandas as pd\n\nd = {'col1': [1, 2, 3, 4, 7], 'col2': [4, 5, 6, 9, 5], 'col3': [7, 8, 12, 1, 11]}\n\ndf = pd.DataFrame(data=d)\n\nprint(df)",
        "count_column = df.shape[1]\nprint(count_column)",
        "count_row = df.shape[0]\nprint(count_row)"
      ]
    },
    {
      "title": "Data Science Functions",
      "summary": "This chapter shows three commonly used functions when working with Data Science: max(), min(), and mean().\nThe Sports Watch Data Set\nThe data set above consists of 6 variables, each with 10 observations:\nDuration - How long lasted the training session in minutes?\nAverage_Pulse - What was the average pulse of the training session? This is measured by beats per minute\nMax_Pulse - What was the max pulse of the training session?\nCalorie_Burnage - How much calories were burnt on the training session?\nHours_Work - How many hours did we work at our job before the training session?\nHours_Sleep - How much did we sleep the night before the training session?\nWe use underscore (_) to separate strings because Python cannot read space as separator.\nREMOVE ADS\nThe max() function\nThe Python max() function is used to find the highest value in an array.\nExample\nThe min() function\nThe Python min() function is used to find the lowest value in an array.\nExample\nThe mean() function\nThe NumPy mean() function is used to find the average value of an array.\nExample\nNote: We write np. in front of mean to let Python know that we want to activate the mean function from the Numpy library.",
      "examples": [
        "Average_pulse_max = max(80, 85, 90, 95, 100, 105, 110, 115, 120, 125)\n\nprint (Average_pulse_max)",
        "Average_pulse_min = min(80, 85, 90, 95, 100, 105, 110, 115, 120, 125)\n\nprint (Average_pulse_min)",
        "import numpy as np\n\nCalorie_burnage = [240, 250, 260, 270, 280, 290, 300, 310, 320, 330]\n\nAverage_calorie_burnage = np.mean(Calorie_burnage)\n\nprint(Average_calorie_burnage)",
        "max()",
        "min()",
        "mean()"
      ]
    },
    {
      "title": "Data Science - Data Preparation",
      "summary": "Before analyzing data, a Data Scientist must extract the data, and make it clean and valuable.\nExtract and Read Data With Pandas\nBefore data can be analyzed, it must be imported/extracted.\nIn the example below, we show you how to import data using Pandas in Python.\nWe use the read_csv() function to import a CSV file with the health data:\nExample\nExample Explained\nImport the Pandas library\nName the data frame as health_data.\nheader=0 means that the headers for the variable names are to be found in the first row (note that 0 means the first row in Python)\nsep=\",\" means that \",\" is used as the separator between the values. This is because we are using the file type .csv (comma separated values)\nTip: If you have a large CSV file, you can use the head() function to only show the top 5rows:\nExample\nData Cleaning\nLook at the imported data. As you can see, the data are \"dirty\" with wrongly or unregistered values:\nThere are some blank fields\nAverage pulse of 9 000 is not possible\n9 000 will be treated as non-numeric, because of the space separator\nOne observation of max pulse is denoted as \"AF\", which does not make sense\nSo, we must clean the data in order to perform the analysis.\nRemove Blank Rows\nWe see that the non-numeric values (9 000 and AF) are in the same rows with missing values.\nSolution: We can remove the rows with missing observations to fix this problem.\nWhen we load a data set using Pandas, all blank cells are automatically converted into \"NaN\" values.\nSo, removing the NaN cells gives us a clean data set that can be analyzed.\nWe can use the dropna() function to remove the NaNs. axis=0 means that we want to remove all rows that have a NaN value:\nExample\nThe result is a data set without NaN rows:\nREMOVE ADS\nData Categories\nTo analyze data, we also need to know the types of data we are dealing with.\nData can be split into two main categories:\nQuantitative Data - Can be expressed as a number or can be quantified. Can be divided into two sub-categories:\nDiscrete data: Numbers are counted as \"whole\", e.g. number of students in a class, number of goals in a soccer game\nContinuous data: Numbers can be of infinite precision. e.g. weight of a person, shoe size, temperature\nDiscrete data: Numbers are counted as \"whole\", e.g. number of students in a class, number of goals in a soccer game\nContinuous data: Numbers can be of infinite precision. e.g. weight of a person, shoe size, temperature\nQualitative Data - Cannot be expressed as a number and cannot be quantified. Can be divided into two sub-categories:\nNominal data: Example: gender, hair color, ethnicity\nOrdinal data: Example: school grades (A, B, C), economic status (low, middle, high)\nNominal data: Example: gender, hair color, ethnicity\nOrdinal data: Example: school grades (A, B, C), economic status (low, middle, high)\nBy knowing the type of your data, you will be able to know what technique to use when analyzing them.\nData Types\nWe can use the info() function to list the data types within our data set:\nExample\nResult:\nWe see that this data set has two different types of data:\nFloat64\nObject\nWe cannot use objects to calculate and perform analysis here. We must convert the type object to float64 (float64 is a number with a decimal in Python).\nWe can use the astype() function to convert the data into float64.\nThe following example converts \"Average_Pulse\" and \"Max_Pulse\" into data type float64 (the other variables are already of data type float64):\nExample\nResult:\nNow, the data set has only float64 data types.\nAnalyze the Data\nWhen we have cleaned the data set, we can start analyzing the data.\nWe can use the describe() function in Python to summarize data:\nExample\nResult:\nCount - Counts the number of observations\nMean - The average value\nStd - Standard deviation (explained in the statistics chapter)\nMin - The lowest value\n25%, 50% and 75% are percentiles (explained in the statistics chapter)\nMax - The highest value",
      "examples": [
        "import pandas as pd\n\nhealth_data = pd.read_csv(\"data.csv\", header=0, sep=\",\")\n\nprint(health_data)",
        "import pandas as pd\n\nhealth_data = pd.read_csv(\"data.csv\", header=0, sep=\",\")\n\nprint(health_data.head())",
        "health_data.dropna(axis=0,inplace=True)\n\nprint(health_data)",
        "print(health_data.info())",
        "health_data[\"Average_Pulse\"] = health_data['Average_Pulse'].astype(float)\nhealth_data[\"Max_Pulse\"] = health_data[\"Max_Pulse\"].astype(float)\n\nprint (health_data.info())",
        "print(health_data.describe())",
        "read_csv()",
        "health_data",
        "header=0",
        "sep=\",\"",
        "head()",
        "dropna()",
        "info()",
        "astype()",
        "describe()"
      ]
    },
    {
      "title": "Data Science - Linear Functions",
      "summary": "Mathematical functions are important to know as a data scientist, because we want to make predictions and interpret them.\nLinear Functions\nIn mathematics a function is used to relate one variable to another variable.\nSuppose we consider the relationship between calorie burnage and average pulse. It is reasonable to assume that, in general, the calorie burnage will change as the average pulse changes - we say that the calorie burnage depends upon the average pulse.\nFurthermore, it may be reasonable to assume that as the average pulse increases, so will the calorie burnage. Calorie burnage and average pulse are the two variables being considered.\nBecause the calorie burnage depends upon the average pulse, we say that calorie burnage is the dependent variable and the average pulse is the independent variable.\nThe relationship between a dependent and an independent variable can often be expressed mathematically using a formula (function).\nA linear function has one independent variable (x) and one dependent variable (y), and has the following form:\nThis function is used to calculate a value for the dependent variable when we choose a value for the independent variable.\nExplanation:\nf(x) = the output (the dependant variable)\nx = the input (the independant variable)\na = slope = is the coefficient of the independent variable. It gives the rate of change of the dependent variable\nb = intercept = is the value of the dependent variable when x = 0. It is also the point where the diagonal line crosses the vertical axis.\nREMOVE ADS\nLinear Function With One Explanatory Variable\nA function with one explanatory variable means that we use one variable for prediction.\nLet us say we want to predict calorie burnage using average pulse. We have the following formula:\nHere, the numbers and variables means:\nf(x) = The output. This number is where we get the predicted value of Calorie_Burnage\nx = The input, which is Average_Pulse\n2 = Slope = Specifies how much Calorie_Burnage increases if Average_Pulse increases by one. It tells us how \"steep\" the diagonal line is\n80 = Intercept = A fixed value. It is the value of the dependent variable when x = 0\nPlotting a Linear Function\nThe term linearity means a \"straight line\". So, if you show a linear function graphically, the line will always be a straight line. The line can slope upwards, downwards, and in some cases may be horizontal or vertical.\nHere is a graphical representation of the mathematical function above:\nGraph Explanations:\nThe horizontal axis is generally called the x-axis. Here, it represents Average_Pulse.\nThe vertical axis is generally called the y-axis. Here, it represents Calorie_Burnage.\nCalorie_Burnage is a function of Average_Pulse, because Calorie_Burnage is assumed to be dependent on Average_Pulse.\nIn other words, we use Average_Pulse to predict Calorie_Burnage.\nThe blue (diagonal) line represents the structure of the mathematical function that predicts calorie burnage.",
      "examples": [
        "y = f(x) = ax + b",
        "f(x) = 2x + 80"
      ]
    },
    {
      "title": "Data Science - Plotting Linear Functions",
      "summary": "The Sports Watch Data Set\nTake a look at our health data set:\nPlot the Existing Data in Python\nNow, we can first plot the values of Average_Pulse against Calorie_Burnage using the matplotlib library.\nThe plot() function is used to make a 2D hexagonal binning plot of points x,y:\nExample\nExample Explained\nImport the pyplot module of the matplotlib library\nPlot the data from Average_Pulse against Calorie_Burnage\nkind='line' tells us which type of plot we want. Here, we want to have a straight line\nplt.ylim() and plt.xlim() tells us what value we want the axis to start on. Here, we want the axis to begin from zero\nplt.show() shows us the output\nThe code above will produce the following result:\nThe Graph Output\nAs we can see, there is a relationship between Average_Pulse and Calorie_Burnage. Calorie_Burnage increases proportionally with Average_Pulse. It means that we can use Average_Pulse to predict Calorie_Burnage.\nREMOVE ADS\nWhy is The Line Not Fully Drawn Down to The y-axis?\nThe reason is that we do not have observations where Average_Pulse or Calorie_Burnage are equal to zero. 80 is the first observation of Average_Pulse and 240 is the first observation of Calorie_Burnage.\nLook at the line. What happens to calorie burnage if average pulse increases from 80 to 90?\nWe can use the diagonal line to find the mathematical function to predict calorie burnage.\nAs it turns out:\nIf the average pulse is 80, the calorie burnage is 240\nIf the average pulse is 90, the calorie burnage is 260\nIf the average pulse is 100, the calorie burnage is 280\nThere is a pattern. If average pulse increases by 10, the calorie burnage increases by 20.",
      "examples": [
        "import matplotlib.pyplot as plt\n\nhealth_data.plot(x ='Average_Pulse', y='Calorie_Burnage', kind='line'),\nplt.ylim(ymin=0)\nplt.xlim(xmin=0)\n\nplt.show()",
        "plot()",
        "kind='line'"
      ]
    },
    {
      "title": "Data Science - Slope and Intercept",
      "summary": "Slope and Intercept\nNow we will explain how we found the slope and intercept of our function:\nThe image below points to the Slope - which indicates how steep the line is, and the Intercept - which is the value of y, when x = 0 (the point where the diagonal line crosses the vertical axis). The red line is the continuation of the blue line from previous page.\nFind The Slope\nThe slope is defined as how much calorie burnage increases, if average pulse increases by one. It tells us how \"steep\" the diagonal line is.\nWe can find the slope by using the proportional difference of two points from the graph.\nIf the average pulse is 80, the calorie burnage is 240\nIf the average pulse is 90, the calorie burnage is 260\nWe see that if average pulse increases with 10, the calorie burnage increases by 20.\nThe slope is 2.\nMathematically, Slope is Defined as:\nf(x2) = Second observation of Calorie_Burnage = 260\nf(x1) = First observation of Calorie_Burnage = 240\nx2 = Second observation of Average_Pulse = 90\nx1 = First observation of Average_Pulse = 80\nBe consistent to define the observations in the correct order! If not, the prediction will not be correct!\nUse Python to Find the Slope\nCalculate the slope with the following code:\nExample\nFind The Intercept\nThe intercept is used to fine tune the functions ability to predict Calorie_Burnage.\nThe intercept is where the diagonal line crosses the y-axis, if it were fully drawn.\nThe intercept is the value of y, when x = 0.\nHere, we see that if average pulse (x) is zero, then the calorie burnage (y) is 80.\nSo, the intercept is 80.\nSometimes, the intercept has a practical meaning. Sometimes not.\nDoes it make sense that average pulse is zero?\nNo, you would be dead and you certainly would not burn any calories.\nHowever, we need to include the intercept in order to complete the mathematical function's ability to predict Calorie_Burnage correctly.\nOther examples where the intercept of a mathematical function can have a practical meaning:\nPredicting next years revenue by using marketing expenditure (How much revenue will we have next year, if marketing expenditure is zero?). It is likely to assume that a company will still have some revenue even though if it does not spend money on marketing.\nFuel usage with speed (How much fuel do we use if speed is equal to 0 mph?). A car that uses gasoline will still use fuel when it is idle.\nREMOVE ADS\nFind the Slope and Intercept Using Python\nThe np.polyfit() function returns the slope and intercept.\nIf we proceed with the following code, we can both get the slope and intercept from the function.\nExample\nExample Explained:\nIsolate the variables Average_Pulse (x) and Calorie_Burnage (y) from health_data.\nCall the np.polyfit() function.\nThe last parameter of the function specifies the degree of the function, which in this case is \"1\".\nTip: linear functions = 1.degree function. In our example, the function is linear, which is in the 1.degree. That means that all coefficients (the numbers) are in the power of one.\nWe have now calculated the slope (2) and the intercept (80). We can write the mathematical function as follow:\nPredict Calorie_Burnage by using a mathematical expression:\nTask:\nNow, we want to predict calorie burnage if average pulse is 135.\nRemember that the intercept is a constant. A constant is a number that does not change.\nWe can now substitute the input x with 135:\nIf average pulse is 135, the calorie burnage is 350.\nDefine the Mathematical Function in Python\nHere is the exact same mathematical function, but in Python. The function returns 2*x + 80, with x as the input:\nExample\nTry to replace x with 140 and 150.\nPlot a New Graph in Python\nHere, we plot the same graph as earlier, but formatted the axis a little bit.\nMax value of the y-axis is now 400 and for x-axis is 150:\nExample\nExample Explained\nImport the pyplot module of the matplotlib library\nPlot the data from Average_Pulse against Calorie_Burnage\nkind='line' tells us which type of plot we want. Here, we want to have a straight line\nplt.ylim() and plt.xlim() tells us what value we want the axis to start and stop on.\nplt.show() shows us the output",
      "examples": [
        "f(x) = 2x + 80",
        "Slope = 20/10 = 2",
        "Slope = f(x2) - f(x1) / x2-x1",
        "Slope = (260-240) / (90 - 80) = 2",
        "def slope(x1, y1, x2, y2):\ns = (y2-y1)/(x2-x1)\nreturn s\n\nprint (slope(80,240,90,260))",
        "import pandas as pd\nimport numpy as np\n\nhealth_data = pd.read_csv(\"data.csv\", header=0, sep=\",\")\n\nx = health_data[\"Average_Pulse\"]\ny = health_data[\"Calorie_Burnage\"]\nslope_intercept = np.polyfit(x,y,1)\n\nprint(slope_intercept)",
        "f(135) = 2 * 135 + 80 = 350",
        "def my_function(x):\nreturn 2*x + 80\n\nprint (my_function(135))",
        "import matplotlib.pyplot as plt\n\nhealth_data.plot(x ='Average_Pulse', y='Calorie_Burnage', kind='line'),\nplt.ylim(ymin=0, ymax=400)\nplt.xlim(xmin=0, xmax=150)\n\nplt.show()",
        "np.polyfit()",
        "kind='line'"
      ]
    },
    {
      "title": "Data Science - Intro to Statistics",
      "summary": "Introduction to Statistics\nStatistics is the science of analyzing data.\nWhen we have created a model for prediction, we must assess the prediction's reliability.\nAfter all, what is a prediction worth, if we cannot rely on it?\nDescriptive Statistics\nWe will first cover some basic descriptive statistics.\nDescriptive statistics summarizes important features of a data set such as:\nCount\nSum\nStandard Deviation\nPercentile\nAverage\nEtc..\nIt is a good starting point to become familiar with the data.\nWe can use the describe() function in Python to summarize the data:\nExample\nOutput:\nDo you see anything interesting here?",
      "examples": [
        "print (full_health_data.describe())",
        "describe()"
      ]
    },
    {
      "title": "Data Science - Statistics Percentiles",
      "summary": "25%, 50% and 75% - Percentiles\nPercentiles are used in statistics to give you a number that describes the value that a given percent of the values are lower than.\nLet us try to explain it by some examples, using Average_Pulse.\nThe 25% percentile of Average_Pulse means that 25% of all of the training sessions have an average pulse of 100 beats per minute or lower. If we flip the statement, it means that 75% of all of the training sessions have an average pulse of 100 beats per minute or higher\nThe 75% percentile of Average_Pulse means that 75% of all the training session have an average pulse of 111 or lower. If we flip the statement, it means that 25% of all of the training sessions have an average pulse of 111 beats per minute or higher\nTask: Find the 10% percentile for Max_Pulse\nThe following example shows how to do it in Python:\nExample\nMax_Pulse = full_health_data[\"Max_Pulse\"] - Isolate the variable Max_Pulse from the full health data set.\nnp.percentile() is used to define that we want the 10% percentile from Max_Pulse.\nThe 10% percentile of Max_Pulse is 120. This means that 10% of all the training sessions have a Max_Pulse of 120 or lower.",
      "examples": [
        "import numpy as np\n\nMax_Pulse= full_health_data[\"Max_Pulse\"]\npercentile10 = np.percentile(Max_Pulse, 10)\nprint(percentile10)"
      ]
    },
    {
      "title": "Data Science - Statistics Standard Deviation",
      "summary": "Standard Deviation\nStandard deviation is a number that describes how spread out the observations are.\nA mathematical function will have difficulties in predicting precise values, if the observations are \"spread\". Standard deviation is a measure of uncertainty.\nA low standard deviation means that most of the numbers are close to the mean (average) value.\nA high standard deviation means that the values are spread out over a wider range.\nTip: Standard Deviation is often represented by the symbol Sigma: σ\nWe can use the std() function from Numpy to find the standard deviation of a variable:\nExample\nThe output:\nWhat does these numbers mean?\nCoefficient of Variation\nThe coefficient of variation is used to get an idea of how large the standard deviation is.\nMathematically, the coefficient of variation is defined as:\nWe can do this in Python if we proceed with the following code:\nExample\nThe output:\nWe see that the variables Duration, Calorie_Burnage and Hours_Work has a high Standard Deviation compared to Max_Pulse, Average_Pulse and Hours_Sleep.",
      "examples": [
        "import numpy as np\n\nstd = np.std(full_health_data)\nprint(std)",
        "Coefficient of Variation = Standard Deviation / Mean",
        "import numpy as np\n\ncv = np.std(full_health_data) / np.mean(full_health_data)\nprint(cv)",
        "std()"
      ]
    },
    {
      "title": "Data Science - Statistics Variance",
      "summary": "Variance\nVariance is another number that indicates how spread out the values are.\nIn fact, if you take the square root of the variance, you get the standard deviation. Or the other way around, if you multiply the standard deviation by itself, you get the variance!\nWe will first use the data set with 10 observations to give an example of how we can calculate the variance:\nTip: Variance is often represented by the symbol Sigma Square: σ^2\nStep 1 to Calculate the Variance: Find the Mean\nWe want to find the variance of Average_Pulse.\n1. Find the mean:\nThe mean is 102.5\nStep 2: For Each Value - Find the Difference From the Mean\n2. Find the difference from the mean for each value:\nStep 3: For Each Difference - Find the Square Value\n3. Find the square value for each difference:\nNote: We must square the values to get the total spread.\nREMOVE ADS\nStep 4: The Variance is the Average Number of These Squared Values\n4. Sum the squared values and find the average:\nThe variance is 206.25.\nUse Python to Find the Variance of health_data\nWe can use the var() function from Numpy to find the variance (remember that we now use the first data set with 10 observations):\nExample\nThe output:\nUse Python to Find the Variance of Full Data Set\nHere we calculate the variance for each column for the full data set:\nExample\nThe output:",
      "examples": [
        "(80+85+90+95+100+105+110+115+120+125) / 10 = 102.5",
        "80 - 102.5 = -22.5\n85 - 102.5 = -17.5\n90 - 102.5 = -12.5\n95 - 102.5 = -7.5\n100 - 102.5 = -2.5\n105 - 102.5 = 2.5\n110 - 102.5 = 7.5\n115 - 102.5 = 12.5\n120 - 102.5 = 17.5\n125 - 102.5 = 22.5",
        "(-22.5)^2 = 506.25\n(-17.5)^2 = 306.25\n(-12.5)^2 = 156.25\n(-7.5)^2 = 56.25\n(-2.5)^2 = 6.25\n2.5^2 = 6.25\n7.5^2 = 56.25\n12.5^2 = 156.25\n17.5^2 = 306.25\n22.5^2 = 506.25",
        "(506.25 + 306.25 + 156.25 + 56.25 + 6.25 + 6.25 + 56.25 + 156.25 + 306.25 + 506.25) / 10 = 206.25",
        "import numpy as np\n\nvar = np.var(health_data)\nprint(var)",
        "import numpy as np\n\nvar_full = np.var(full_health_data)\nprint(var_full)",
        "var()"
      ]
    },
    {
      "title": "Data Science - Statistics Correlation",
      "summary": "Correlation\nCorrelation measures the relationship between two variables.\nWe mentioned that a function has a purpose to predict a value, by converting input (x) to output (f(x)). We can say also say that a function uses the relationship between two variables for prediction.\nCorrelation Coefficient\nThe correlation coefficient measures the relationship between two variables.\nThe correlation coefficient can never be less than -1 or higher than 1.\n1 = there is a perfect linear relationship between the variables (like Average_Pulse against Calorie_Burnage)\n0 = there is no linear relationship between the variables\n-1 = there is a perfect negative linear relationship between the variables (e.g. Less hours worked, leads to higher calorie burnage during a training session)\nExample of a Perfect Linear Relationship (Correlation Coefficient = 1)\nWe will use scatterplot to visualize the relationship between Average_Pulse and Calorie_Burnage (we have used the small data set of the sports watch with 10 observations).\nThis time we want scatter plots, so we change kind to \"scatter\":\nExample\nOutput:\nAs we saw earlier, it exists a perfect linear relationship between Average_Pulse and Calorie_Burnage.\nREMOVE ADS\nExample of a Perfect Negative Linear Relationship (Correlation Coefficient = -1)\nWe have plotted fictional data here. The x-axis represents the amount of hours worked at our job before a training session. The y-axis is Calorie_Burnage.\nIf we work longer hours, we tend to have lower calorie burnage because we are exhausted before the training session.\nThe correlation coefficient here is -1.\nExample\nExample of No Linear Relationship (Correlation coefficient = 0)\nHere, we have plotted Max_Pulse against Duration from the full_health_data set.\nAs you can see, there is no linear relationship between the two variables. It means that longer training session does not lead to higher Max_Pulse.\nThe correlation coefficient here is 0.\nExample",
      "examples": [
        "import matplotlib.pyplot as plt\n\nhealth_data.plot(x ='Average_Pulse', y='Calorie_Burnage', kind='scatter')\nplt.show()",
        "import pandas as pd\nimport matplotlib.pyplot as plt\n\nnegative_corr = {'Hours_Work_Before_Training': [10,9,8,7,6,5,4,3,2,1],\n'Calorie_Burnage': [220,240,260,280,300,320,340,360,380,400]}\nnegative_corr = pd.DataFrame(data=negative_corr)\n\nnegative_corr.plot(x ='Hours_Work_Before_Training', y='Calorie_Burnage', kind='scatter')\nplt.show()",
        "import matplotlib.pyplot as plt\n\nfull_health_data.plot(x ='Duration', y='Max_Pulse', kind='scatter')\nplt.show()"
      ]
    },
    {
      "title": "Data Science - Statistics Correlation Matrix",
      "summary": "Correlation Matrix\nA matrix is an array of numbers arranged in rows and columns.\nA correlation matrix is simply a table showing the correlation coefficients between variables.\nHere, the variables are represented in the first row, and in the first column:\nThe table above has used data from the full health data set.\nObservations:\nWe observe that Duration and Calorie_Burnage are closely related, with a correlation coefficient of 0.89. This makes sense as the longer we train, the more calories we burn\nWe observe that there is almost no linear relationships between Average_Pulse and Calorie_Burnage (correlation coefficient of 0.02)\nCan we conclude that Average_Pulse does not affect Calorie_Burnage? No. We will come back to answer this question later!\nCorrelation Matrix in Python\nWe can use the corr() function in Python to create a correlation matrix. We also use the round() function to round the output to two decimals:\nExample\nOutput:\nREMOVE ADS\nUsing a Heatmap\nWe can use a Heatmap to Visualize the Correlation Between Variables:\nThe closer the correlation coefficient is to 1, the greener the squares get.\nThe closer the correlation coefficient is to -1, the browner the squares get.\nUse Seaborn to Create a Heatmap\nWe can use the Seaborn library to create a correlation heat map (Seaborn is a visualization library based on matplotlib):\nExample\nExample Explained:\nImport the library seaborn as sns.\nUse the full_health_data set.\nUse sns.heatmap() to tell Python that we want a heatmap to visualize the correlation matrix.\nUse the correlation matrix. Define the maximal and minimal values of the heatmap. Define that 0 is the center.\nDefine the colors with sns.diverging_palette. n=500 means that we want 500 types of color in the same color palette.\nsquare = True means that we want to see squares.",
      "examples": [
        "Corr_Matrix = round(full_health_data.corr(),2)\nprint(Corr_Matrix)",
        "import matplotlib.pyplot as plt\nimport seaborn as sns\n\ncorrelation_full_health = full_health_data.corr()\n\naxis_corr = sns.heatmap(\ncorrelation_full_health,\nvmin=-1, vmax=1, center=0,\ncmap=sns.diverging_palette(50, 500, n=500),\nsquare=True\n)\n\nplt.show()",
        "corr()",
        "round()"
      ]
    },
    {
      "title": "Data Science - Statistics Correlation vs. Causality",
      "summary": "Correlation Does Not Imply Causality\nCorrelation measures the numerical relationship between two variables.\nA high correlation coefficient (close to 1), does not mean that we can for sure conclude an actual relationship between two variables.\nA classic example:\nDuring the summer, the sale of ice cream at a beach increases\nSimultaneously, drowning accidents also increase as well\nDoes this mean that increase of ice cream sale is a direct cause of increased drowning accidents?\nThe Beach Example in Python\nHere, we constructed a fictional data set for you to try:\nExample\nOutput:\nCorrelation vs Causality - The Beach Example\nIn other words: can we use ice cream sale to predict drowning accidents?\nThe answer is - Probably not.\nIt is likely that these two variables are accidentally correlating with each other.\nWhat causes drowning then?\nUnskilled swimmers\nWaves\nCramp\nSeizure disorders\nLack of supervision\nAlcohol (mis)use\netc.\nLet us reverse the argument:\nDoes a low correlation coefficient (close to zero) mean that change in x does not affect y?\nBack to the question:\nCan we conclude that Average_Pulse does not affect Calorie_Burnage because of a low correlation coefficient?\nThe answer is no.\nThere is an important difference between correlation and causality:\nCorrelation is a number that measures how closely the data are related\nCausality is the conclusion that x causes y.\nTip: Always critically reflect over the concept of causality when doing predictions!",
      "examples": [
        "import pandas as pd\nimport matplotlib.pyplot as plt\n\nDrowning_Accident = [20,40,60,80,100,120,140,160,180,200]\nIce_Cream_Sale = [20,40,60,80,100,120,140,160,180,200]\nDrowning = {\"Drowning_Accident\": [20,40,60,80,100,120,140,160,180,200],\n\"Ice_Cream_Sale\": [20,40,60,80,100,120,140,160,180,200]}\nDrowning = pd.DataFrame(data=Drowning)\n\nDrowning.plot(x=\"Ice_Cream_Sale\", y=\"Drowning_Accident\", kind=\"scatter\")\nplt.show()\n\ncorrelation_beach = Drowning.corr()\nprint(correlation_beach)"
      ]
    },
    {
      "title": "Data Science - Linear Regression",
      "summary": "We are missing one important variable that affects Calorie_Burnage, which is the Duration of the training session.\nDuration in combination with Average_Pulse will together explain Calorie_Burnage more precisely.\nLinear Regression\nThe term regression is used when you try to find the relationship between variables.\nIn Machine Learning and in statistical modeling, that relationship is used to predict the outcome of events.\nIn this module, we will cover the following questions:\nCan we conclude that Average_Pulse and Duration are related to Calorie_Burnage?\nCan we use Average_Pulse and Duration to predict Calorie_Burnage?\nLeast Square Method\nLinear regression uses the least square method.\nThe concept is to draw a line through all the plotted data points. The line is positioned in a way that it minimizes the distance to all of the data points.\nThe distance is called \"residuals\" or \"errors\".\nThe red dashed lines represents the distance from the data points to the drawn mathematical function.\nREMOVE ADS\nLinear Regression Using One Explanatory Variable\nIn this example, we will try to predict Calorie_Burnage with Average_Pulse using Linear Regression:\nExample\nExample Explained:\nImport the modules you need: Pandas, matplotlib and Scipy\nIsolate Average_Pulse as x. Isolate Calorie_burnage as y\nGet important key values with: slope, intercept, r, p, std_err = stats.linregress(x, y)\nCreate a function that uses the slope and intercept values to return a new value. This new value represents where on the y-axis the corresponding x value will be placed\nRun each value of the x array through the function. This will result in a new array with new values for the y-axis: mymodel = list(map(myfunc, x))\nDraw the original scatter plot: plt.scatter(x, y)\nDraw the line of linear regression: plt.plot(x, mymodel)\nDefine maximum and minimum values of the axis\nLabel the axis: \"Average_Pulse\" and \"Calorie_Burnage\"\nOutput:\nDo you think that the line is able to predict Calorie_Burnage precisely?\nWe will show that the variable Average_Pulse alone is not enough to make precise prediction of Calorie_Burnage.",
      "examples": [
        "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\nfull_health_data = pd.read_csv(\"data.csv\", header=0, sep=\",\")\n\nx = full_health_data[\"Average_Pulse\"]\ny = full_health_data [\"Calorie_Burnage\"]\n\nslope, intercept, r, p, std_err = stats.linregress(x, y)\n\ndef myfunc(x):\nreturn slope * x + intercept\n\nmymodel = list(map(myfunc, x))\n\nplt.scatter(x, y)\nplt.plot(x, slope * x + intercept)\nplt.ylim(ymin=0, ymax=2000)\nplt.xlim(xmin=0, xmax=200)\nplt.xlabel(\"Average_Pulse\")\nplt.ylabel (\"Calorie_Burnage\")\nplt.show()"
      ]
    },
    {
      "title": "Data Science - Regression Table",
      "summary": "Regression Table\nThe output from linear regression can be summarized in a regression table.\nThe content of the table includes:\nInformation about the model\nCoefficients of the linear regression function\nRegression statistics\nStatistics of the coefficients from the linear regression function\nOther information that we will not cover in this module\nRegression Table with Average_Pulse as Explanatory Variable\nYou can now begin your journey on analyzing advanced output!\nCreate a Linear Regression Table in Python\nHere is how to create a linear regression table in Python:\nExample\nExample Explained:\nImport the library statsmodels.formula.api as smf. Statsmodels is a statistical library in Python.\nUse the full_health_data set.\nCreate a model based on Ordinary Least Squares with smf.ols(). Notice that the explanatory variable must be written first in the parenthesis. Use the full_health_data data set.\nBy calling .fit(), you obtain the variable results. This holds a lot of information about the regression model.\nCall summary() to get the table with the results of linear regression.",
      "examples": [
        "import pandas as pd\nimport statsmodels.formula.api as smf\n\nfull_health_data = pd.read_csv(\"data.csv\", header=0, sep=\",\")\n\nmodel = smf.ols('Calorie_Burnage ~ Average_Pulse', data = full_health_data)\nresults = model.fit()\nprint(results.summary())"
      ]
    },
    {
      "title": "Data Science - Regression Table - Info",
      "summary": "The \"Information Part\" in Regression Table\nDep. Variable: is short for \"Dependent Variable\". Calorie_Burnage is here the dependent variable. The Dependent variable is here assumed to be explained by Average_Pulse.\nModel: OLS is short for Ordinary Least Squares. This is a type of model that uses the Least Square method.\nDate: and Time: shows the date and time the output was calculated in Python.",
      "examples": []
    },
    {
      "title": "Data Science - Regression Table - Coefficients",
      "summary": "The \"Coefficients Part\" in Regression Table\nCoef is short for coefficient. It is the output of the linear regression function.\nThe linear regression function can be rewritten mathematically as:\nThese numbers means:\nIf Average_Pulse increases by 1, Calorie_Burnage increases by 0.3296 (or 0,3 rounded)\nIf Average_Pulse = 0, the Calorie_Burnage is equal to 346.8662 (or 346.9 rounded).\nRemember that the intercept is used to adjust the model's precision of predicting!\nDo you think that this is a good model?\nDefine the Linear Regression Function in Python\nDefine the linear regression function in Python to perform predictions.\nWhat is Calorie_Burnage if Average_Pulse is: 120, 130, 150, 180?\nExample",
      "examples": [
        "Calorie_Burnage = 0.3296 * Average_Pulse + 346.8662",
        "def Predict_Calorie_Burnage(Average_Pulse):\nreturn(0.3296*Average_Pulse + 346.8662)\n\nprint(Predict_Calorie_Burnage(120))\nprint(Predict_Calorie_Burnage(130))\nprint(Predict_Calorie_Burnage(150))\nprint(Predict_Calorie_Burnage(180))"
      ]
    },
    {
      "title": "Data Science - Regression Table: P-Value",
      "summary": "The \"Statistics of the Coefficients Part\" in Regression Table\nNow, we want to test if the coefficients from the linear regression function has a significant impact on the dependent variable (Calorie_Burnage).\nThis means that we want to prove that it exists a relationship between Average_Pulse and Calorie_Burnage, using statistical tests.\nThere are four components that explains the statistics of the coefficients:\nstd err stands for Standard Error\nt is the \"t-value\" of the coefficients\nP>|t| is called the \"P-value\"\n[0.025  0.975] represents the confidence interval of the coefficients\nWe will focus on understanding the \"P-value\" in this module.\nThe P-value\nThe P-value is a statistical number to conclude if there is a relationship between Average_Pulse and Calorie_Burnage.\nWe test if the true value of the coefficient is equal to zero (no relationship). The statistical test for this is called Hypothesis testing.\nA low P-value (< 0.05) means that the coefficient is likely not to equal zero.\nA high P-value (> 0.05) means that we cannot conclude that the explanatory variable affects the dependent variable (here: if Average_Pulse affects Calorie_Burnage).\nA high P-value is also called an insignificant P-value.\nHypothesis Testing\nHypothesis testing is a statistical procedure to test if your results are valid.\nIn our example, we are testing if the true coefficient of Average_Pulse and the intercept is equal to zero.\nHypothesis test has two statements. The null hypothesis and the alternative hypothesis.\nThe null hypothesis can be shortly written as H0\nThe alternative hypothesis can be shortly written as HA\nMathematically written:\nThe sign ≠ means \"not equal to\"\nHypothesis Testing and P-value\nThe null hypothesis can either be rejected or not.\nIf we reject the null hypothesis, we conclude that it exist a relationship between Average_Pulse and Calorie_Burnage. The P-value is used for this conclusion.\nA common threshold of the P-value is 0.05.\nNote: A P-value of 0.05 means that 5% of the times, we will falsely reject the null hypothesis. It means that we accept that 5% of the times, we might falsely have concluded a relationship.\nIf the P-value is lower than 0.05, we can reject the null hypothesis and conclude that it exist a relationship between the variables.\nHowever, the P-value of Average_Pulse is 0.824. So, we cannot conclude a relationship between Average_Pulse and Calorie_Burnage.\nIt means that there is a 82.4% chance that the true coefficient of Average_Pulse is zero.\nThe intercept is used to adjust the regression function's ability to predict more precisely. It is therefore uncommon to interpret the P-value of the intercept.",
      "examples": [
        "H0: Average_Pulse = 0\nHA: Average_Pulse ≠ 0\nH0: Intercept = 0\nHA: Intercept ≠ 0"
      ]
    },
    {
      "title": "Data Science - Regression Table: R-Squared",
      "summary": "R - Squared\nR-Squared and Adjusted R-Squared describes how well the linear regression model fits the data points:\nThe value of R-Squared is always between 0 to 1 (0% to 100%).\nA high R-Squared value means that many data points are close to the linear regression function line.\nA low R-Squared value means that the linear regression function line does not fit the data well.\nVisual Example of a Low R - Squared Value (0.00)\nOur regression model shows a R-Squared value of zero, which means that the linear regression function line does not fit the data well.\nThis can be visualized when we plot the linear regression function through the data points of Average_Pulse and Calorie_Burnage.\nREMOVE ADS\nVisual Example of a High R - Squared Value (0.79)\nHowever, if we plot Duration and Calorie_Burnage, the R-Squared increases. Here, we see that the data points are close to the linear regression function line:\nHere is the code in Python:\nExample\nSummary - Predicting Calorie_Burnage with Average_Pulse\nHow can we summarize the linear regression function with Average_Pulse as explanatory variable?\nCoefficient of 0.3296, which means that Average_Pulse has a very small effect on Calorie_Burnage.\nHigh P-value (0.824), which means that we cannot conclude a relationship between Average_Pulse and Calorie_Burnage.\nR-Squared value of 0, which means that the linear regression function line does not fit the data well.",
      "examples": [
        "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\nfull_health_data = pd.read_csv(\"data.csv\", header=0, sep=\",\")\n\nx = full_health_data[\"Duration\"]\ny = full_health_data [\"Calorie_Burnage\"]\n\nslope, intercept, r, p, std_err = stats.linregress(x, y)\n\ndef myfunc(x):\nreturn slope * x + intercept\n\nmymodel = list(map(myfunc, x))\n\nprint(mymodel)\n\nplt.scatter(x, y)\nplt.plot(x, mymodel)\nplt.ylim(ymin=0, ymax=2000)\nplt.xlim(xmin=0, xmax=200)\nplt.xlabel(\"Duration\")\nplt.ylabel (\"Calorie_Burnage\")\n\nplt.show()"
      ]
    },
    {
      "title": "Data Science - Linear Regression Case",
      "summary": "Case: Use Duration + Average_Pulse to Predict Calorie_Burnage\nCreate a Linear Regression Table with Average_Pulse and Duration as Explanatory Variables:\nExample\nExample Explained:\nImport the library statsmodels.formula.api as smf. Statsmodels is a statistical library in Python.\nUse the full_health_data set.\nCreate a model based on Ordinary Least Squares with smf.ols(). Notice that the explanatory variable must be written first in the parenthesis. Use the full_health_data data set.\nBy calling .fit(), you obtain the variable results. This holds a lot of information about the regression model.\nCall summary() to get the table with the results of linear regression.\nOutput:\nThe linear regression function can be rewritten mathematically as:\nRounded to two decimals:\nREMOVE ADS\nDefine the Linear Regression Function in Python\nDefine the linear regression function in Python to perform predictions.\nWhat is Calorie_Burnage if:\nAverage pulse is 110 and duration of the training session is 60 minutes?\nAverage pulse is 140 and duration of the training session is 45 minutes?\nAverage pulse is 175 and duration of the training session is 20 minutes?\nExample\nThe Answers:\nAverage pulse is 110 and duration of the training session is 60 minutes = 365 Calories\nAverage pulse is 140 and duration of the training session is 45 minutes = 372 Calories\nAverage pulse is 175 and duration of the training session is 20 minutes = 337 Calories\nAccess the Coefficients\nLook at the coefficients:\nCalorie_Burnage increases with 3.17 if Average_Pulse increases by one.\nCalorie_Burnage increases with 5.84 if Duration increases by one.\nAccess the P-Value\nLook at the P-value for each coefficient.\nP-value is 0.00 for Average_Pulse, Duration and the Intercept.\nThe P-value is statistically significant for all of the variables, as it is less than 0.05.\nSo here we can conclude that Average_Pulse and Duration has a relationship with Calorie_Burnage.\nAdjusted R-Squared\nThere is a problem with R-squared if we have more than one explanatory variable.\nR-squared will almost always increase if we add more variables, and will never decrease.\nThis is because we are adding more data points around the linear regression function.\nIf we add random variables that does not affect Calorie_Burnage, we risk to falsely conclude that the linear regression function is a good fit. Adjusted R-squared adjusts for this problem.\nIt is therefore better to look at the adjusted R-squared value if we have more than one explanatory variable.\nThe Adjusted R-squared is 0.814.\nThe value of R-Squared is always between 0 to 1 (0% to 100%).\nA high R-Squared value means that many data points are close to the linear regression function line.\nA low R-Squared value means that the linear regression function line does not fit the data well.\nConclusion: The model fits the data point well!\nCongratulations! You have now finished the final module of the data science library.",
      "examples": [
        "import pandas as pd\nimport statsmodels.formula.api as smf\n\nfull_health_data = pd.read_csv(\"data.csv\", header=0, sep=\",\")\n\nmodel = smf.ols('Calorie_Burnage ~ Average_Pulse + Duration', data = full_health_data)\nresults = model.fit()\nprint(results.summary())",
        "Calorie_Burnage = Average_Pulse * 3.1695 + Duration * 5.8424 - 334.5194",
        "Calorie_Burnage = Average_Pulse * 3.17 + Duration * 5.84 - 334.52",
        "def Predict_Calorie_Burnage(Average_Pulse, Duration):\nreturn(3.1695*Average_Pulse + 5.8434 * Duration - 334.5194)\n\nprint(Predict_Calorie_Burnage(110,60))\nprint(Predict_Calorie_Burnage(140,45))\nprint(Predict_Calorie_Burnage(175,20))"
      ]
    },
    {
      "title": "W3Schools Data Science Certificate",
      "summary": "W3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nW3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nWho Should Consider Getting Certified?\nAny student or professional within the digital industry.\nCertifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market.\nW3Schools is Trusted by Top Companies\nW3Schools has over two decades of experience with teaching coding online.\nOur certificates are recognized and valued by companies looking to employ skilled developers.\nSave Time and Money\nShow the world your coding skills by getting a certification.\nThe prices is a small fraction compared to the price of traditional education.\nDocument and validate your competence by getting certified!\nExam overview\nFee: 95 USD\nAchievable certification levels:\nIntermediate (40%)\nAdvanced (75%)\nProfessional (90%)\nNumber of questions:\nAdaptive, 60 on average\nRequirement to pass:\nMinimum 40% - Intermediate level\nTime limit: 60 minutes\nNumber of attempts to pass: 3\nExam deadline: None\nCertification Expiration: None\nFormat: Online, multiple choice\nRegister now »\nAdvance Faster in Your Career\nGetting a certificate proves your commitment to upgrading your skills.\nThe certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on.\nIt gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nKnowledge is power, especially in the current job market.\nDocumentation of your skills enables you to advance your career or helps you to start a new one.\nHow Does It Work?\nStudy for free at W3Schools.com\nStudy at your own speed\nTest your skills with W3Schools online quizzes\nApply for your certificate by paying an exam fee\nTake your exam online, at any time, and from any location\nGet Your Certificate and Share It With The World\nExample certificate:\nEach certificate gets a unique link that can be shared with others.\nValidate your certification with the link or QR code.\nCheck how it looks like in this Example.\nShare your certificate on Linked in the Certifications section in just one click!\nDocument Your Skills\nGetting a certificate proves your commitment to upgrade your skills, gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nGet Your Certificate »\nLooking to add multiple users?\nAre you an educator, manager or business owner looking for courses or certifications?\nWe are working with schools, companies and organizations from all over the world.\nGet courses and/or certifications for your team here.",
      "examples": []
    }
  ],
  "glossary": [
    "backend",
    "data science",
    "ds advanced",
    "ds dataframe",
    "ds functions",
    "ds home",
    "ds math",
    "ds python",
    "ds statistics",
    "exercises",
    "free",
    "javascript",
    "programs",
    "report error",
    "stat correlation",
    "stat percentiles",
    "stat variance",
    "w3.css",
    "w3schools spaces"
  ],
  "objectives": []
}