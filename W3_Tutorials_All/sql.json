{
  "course_name": "Sql",
  "description": "SQL is a standard language for storing, manipulating and retrieving data in databases. Our SQL tutorial will teach you how to use SQL in: MySQL, SQL Server, MS Access, Oracle, Sybase, Informix, Postgres, and other database systems. Tip: Sign in to track your progress - it's free. With our online SQL editor, you can edit the SQL statements, and click on a button to view the result. Click on the \"Try it Yourself\" button to see how it works. Many chapters in this tutorial end with an exercise where you can check your level of knowledge. See all SQL Exercises REMOVE ADS Learn by examples! This tutorial supplements all explanations with clarifying examples. See All SQL Examples Test your SQL skills at W3Schools! Start SQL Quiz! Sign Up for Free Note: This is an optional feature. You can study at W3Schools without creating an account. At W3Schools you will find a complete reference for keywords and functions:",
  "course_summary": [
    {
      "title": "Introduction to SQL",
      "summary": "SQL is a standard language for accessing and manipulating databases.\nWhat is SQL?\nSQL stands for Structured Query Language\nSQL lets you access and manipulate databases\nSQL became a standard of the American National Standards Institute (ANSI) in 1986, and of the International Organization for Standardization (ISO) in 1987\nWhat Can SQL do?\nSQL can execute queries against a database\nSQL can retrieve data from a database\nSQL can insert records in a database\nSQL can update records in a database\nSQL can delete records from a database\nSQL can create new databases\nSQL can create new tables in a database\nSQL can create stored procedures in a database\nSQL can create views in a database\nSQL can set permissions on tables, procedures, and views\nSQL is a Standard - BUT....\nAlthough SQL is an ANSI/ISO standard, there are different versions of the SQL language.\nHowever, to be compliant with the ANSI standard, they all support at least the major commands (such as SELECT, UPDATE, DELETE, INSERT, WHERE) in a similar manner.\nNote: Most of the SQL database programs also have their own proprietary extensions in addition to the SQL standard!\nUsing SQL in Your Web Site\nTo build a web site that shows data from a database, you will need:\nAn RDBMS database program (i.e. MS Access, SQL Server, MySQL)\nTo use a server-side scripting language, like PHP or ASP\nTo use SQL to get the data you want\nTo use HTML / CSS to style the page\nREMOVE ADS\nRDBMS\nRDBMS stands for Relational Database Management System.\nRDBMS is the basis for SQL, and for all modern database systems such as MS SQL Server, IBM DB2, Oracle, MySQL, and Microsoft Access.\nThe data in RDBMS is stored in database objects called tables. A table is a collection of related data entries and it consists of columns and rows.\nLook at the \"Customers\" table:\nExampleGet your own SQL Server\nEvery table is broken up into smaller entities called fields. The fields in the Customers table consist of CustomerID, CustomerName, ContactName, Address, City, PostalCode and Country. A field is a column in a table that is designed to maintain specific information about every record in the table.\nA record, also called a row, is each individual entry that exists in a table. For example, there are 91 records in the above Customers table. A record is a horizontal entity in a table.\nA column is a vertical entity in a table that contains all information associated with a specific field in a table.\nVideo: SQL Introduction",
      "examples": [
        "SELECT * FROM Customers;",
        "SELECT",
        "UPDATE",
        "DELETE",
        "INSERT",
        "WHERE"
      ]
    },
    {
      "title": "SQL Syntax",
      "summary": "SQL Statements\nMost of the actions you need to perform on a database are done with SQL statements.\nSQL statements consist of keywords that are easy to understand.\nThe following SQL statement returns all records from a table named \"Customers\":\nExampleGet your own SQL Server\nSelect all records from the Customers table:\nIn this tutorial we will teach you all about the different SQL statements.\nDatabase Tables\nA database most often contains one or more tables. Each table is identified by a name (e.g. \"Customers\" or \"Orders\"), and contain records (rows) with data.\nIn this tutorial we will use the well-known Northwind sample database (included in MS Access and MS SQL Server).\nBelow is a selection from the Customers table used in the examples:\nThe table above contains five records (one for each customer) and seven columns (CustomerID, CustomerName, ContactName, Address, City, PostalCode, and Country).\nREMOVE ADS\nKeep in Mind That...\nSQL keywords are NOT case sensitive: select is the same as SELECT\nIn this tutorial we will write all SQL keywords in upper-case.\nSemicolon after SQL Statements?\nSome database systems require a semicolon at the end of each SQL statement.\nSemicolon is the standard way to separate each SQL statement in database systems that allow more than one SQL statement to be executed in the same call to the server.\nIn this tutorial, we will use semicolon at the end of each SQL statement.\nSome of The Most Important SQL Commands\nSELECT - extracts data from a database\nUPDATE - updates data in a database\nDELETE - deletes data from a database\nINSERT INTO - inserts new data into a database\nCREATE DATABASE - creates a new database\nALTER DATABASE - modifies a database\nCREATE TABLE - creates a new table\nALTER TABLE - modifies a table\nDROP TABLE - deletes a table\nCREATE INDEX - creates an index (search key)\nDROP INDEX - deletes an index",
      "examples": [
        "SELECT * FROM Customers;",
        "select",
        "SELECT",
        "UPDATE",
        "DELETE",
        "INSERT INTO",
        "CREATE DATABASE",
        "ALTER DATABASE",
        "CREATE TABLE",
        "ALTER TABLE",
        "DROP TABLE",
        "CREATE INDEX",
        "DROP INDEX"
      ]
    },
    {
      "title": "SQL SELECT Statement",
      "summary": "The SQL SELECT Statement\nThe SELECT statement is used to select data from a database.\nExampleGet your own SQL Server\nReturn data from the Customers table:\nSyntax\nSELECT column1, column2, ...\nFROM table_name;\nHere, column1, column2, ... are the field names of the table you want to select data from.\nThe table_name represents the name of the table you want to select data from.\nDemo Database\nBelow is a selection from the Customers table used in the examples:\nREMOVE ADS\nSelect ALL columns\nIf you want to return all columns, without specifying every column name, you can use the SELECT * syntax:\nExample\nReturn all the columns from the Customers table:\nVideo: SQL SELECT Statement",
      "examples": [
        "SELECT CustomerName, City FROM Customers;",
        "SELECT * FROM Customers;",
        "SELECT",
        "SELECT column1, column2, ...\nFROM table_name;",
        "SELECT *"
      ]
    },
    {
      "title": "SQL SELECT DISTINCT Statement",
      "summary": "The SQL SELECT DISTINCT Statement\nThe SELECT DISTINCT statement is used to return only distinct (different) values.\nExampleGet your own SQL Server\nSelect all the different countries from the \"Customers\" table:\nInside a table, a column often contains many duplicate values; and sometimes you only want to list the different (distinct) values.\nSyntax\nSELECT DISTINCT column1, column2, ...\nFROM table_name;\nDemo Database\nBelow is a selection from the Customers table used in the examples:\nSELECT Example Without DISTINCT\nIf you omit the DISTINCT keyword, the SQL statement returns the \"Country\" value from all the records of the \"Customers\" table:\nExample\nREMOVE ADS\nCount Distinct\nBy using the DISTINCT keyword in a function called COUNT, we can return the number of different countries.\nExample\nNote: The COUNT(DISTINCT column_name) is not supported in Microsoft Access databases.\nHere is a workaround for MS Access:\nExample\nYou will learn about the COUNT function later in this tutorial.\nVideo: SQL SELECT DISTINCT Statement",
      "examples": [
        "SELECT DISTINCT Country FROM Customers;",
        "SELECT Country FROM Customers;",
        "SELECT COUNT(DISTINCT Country) FROM Customers;",
        "SELECT Count(*) AS DistinctCountries\nFROM (SELECT DISTINCT Country FROM Customers);",
        "SELECT DISTINCT",
        "SELECT DISTINCT column1, column2, ...\nFROM table_name;",
        "DISTINCT",
        "COUNT"
      ]
    },
    {
      "title": "SQL WHERE Clause",
      "summary": "The SQL WHERE Clause\nThe WHERE clause is used to filter records.\nIt is used to extract only those records that fulfill a specified condition.\nExampleGet your own SQL Server\nSelect all customers from Mexico:\nSyntax\nSELECT column1, column2, ...\nFROM table_name\nWHERE condition;\nNote: The WHERE clause is not only used in SELECT statements, it is also used in UPDATE, DELETE, etc.!\nDemo Database\nBelow is a selection from the Customers table used in the examples:\nREMOVE ADS\nText Fields vs. Numeric Fields\nSQL requires single quotes around text values (most database systems will also allow double quotes).\nHowever, numeric fields should not be enclosed in quotes:\nExample\nOperators in The WHERE Clause\nYou can use other operators than the = operator to filter the search.\nExample\nSelect all customers with a CustomerID greater than 80:\nThe following operators can be used in the WHERE clause:\nVideo: SQL WHERE Clause",
      "examples": [
        "SELECT * FROM Customers\nWHERE Country='Mexico';",
        "SELECT * FROM Customers\nWHERE CustomerID=1;",
        "SELECT * FROM Customers\nWHERE CustomerID > 80;",
        "WHERE",
        "SELECT column1, column2, ...\nFROM table_name\nWHERE condition;",
        "SELECT",
        "UPDATE",
        "DELETE",
        "="
      ]
    },
    {
      "title": "SQL ORDER BY Keyword",
      "summary": "The SQL ORDER BY\nThe ORDER BY keyword is used to sort the result-set in ascending or descending order.\nExampleGet your own SQL Server\nSort the products by price:\nSyntax\nSELECT column1, column2, ...\nFROM table_name\nORDER BY column1, column2, ... ASC|DESC;\nDemo Database\nBelow is a selection from the Products table used in the examples:\nREMOVE ADS\nDESC\nThe ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.\nExample\nSort the products from highest to lowest price:\nOrder Alphabetically\nFor string values the ORDER BY keyword will order alphabetically:\nExample\nSort the products alphabetically by ProductName:\nAlphabetically DESC\nTo sort the table reverse alphabetically, use the DESC keyword:\nExample\nSort the products by ProductName in reverse order:\nORDER BY Several Columns\nThe following SQL statement selects all customers from the \"Customers\" table, sorted by the \"Country\" and the \"CustomerName\" column. This means that it orders by Country, but if some rows have the same Country, it orders them by CustomerName:\nExample\nUsing Both ASC and DESC\nThe following SQL statement selects all customers from the \"Customers\" table, sorted ascending by the \"Country\" and descending by the \"CustomerName\" column:\nExample\nVideo: SQL ORDER BY Keyword",
      "examples": [
        "SELECT * FROM Products\nORDER BY Price;",
        "SELECT * FROM Products\nORDER BY Price DESC;",
        "SELECT * FROM Products\nORDER BY ProductName;",
        "SELECT * FROM Products\nORDER BY ProductName DESC;",
        "SELECT * FROM Customers\nORDER BY Country, CustomerName;",
        "SELECT * FROM Customers\nORDER BY Country ASC, CustomerName DESC;",
        "ORDER BY",
        "SELECT column1, column2, ...\nFROM table_name\nORDER BY column1, column2, ... ASC|DESC;",
        "DESC"
      ]
    },
    {
      "title": "SQL AND Operator",
      "summary": "The SQL AND Operator\nThe WHERE clause can contain one or many AND operators.\nThe AND operator is used to filter records based on more than one condition, like if you want to return all customers from Spain that starts with the letter 'G':\nExampleGet your own SQL Server\nSyntax\nSELECT column1, column2, ...\nFROM table_name\nWHERE condition1 AND condition2 AND condition3 ...;\nAND vs OR\nThe AND operator displays a record if all the conditions are TRUE.\nThe OR operator displays a record if any of the conditions are TRUE.\nDemo Database\nBelow is a selection from the Customers table used in the examples:\nREMOVE ADS\nAll Conditions Must Be True\nThe following SQL statement selects all fields from Customers where Country is \"Brazil\" AND City is \"Rio de Janeiro\" AND CustomerID is higher than 50:\nExample\nCombining AND and OR\nYou can combine the AND and OR operators.\nThe following SQL statement selects all customers from Spain that starts with a \"G\" or an \"R\".\nMake sure you use parenthesis to get the correct result.\nExample\nSelect all Spanish customers that starts with either \"G\" or \"R\":\nWithout parenthesis, the select statement will return all customers from Spain that starts with a \"G\", plus all customers that starts with an \"R\", regardless of the country value:\nExample\nSelect all customers that either:\nare from Spain and starts with either \"G\", or\nstarts with the letter \"R\":\nVideo: SQL AND Operator",
      "examples": [
        "SELECT *\nFROM Customers\nWHERE Country = 'Spain' AND CustomerName LIKE 'G%';",
        "SELECT * FROM Customers\nWHERE Country = 'Brazil'\nAND City = 'Rio de Janeiro'\nAND CustomerID > 50;",
        "SELECT * FROM Customers\nWHERE Country = 'Spain' AND (CustomerName LIKE 'G%' OR CustomerName LIKE 'R%');",
        "SELECT * FROM Customers\nWHERE Country = 'Spain' AND CustomerName LIKE 'G%' OR CustomerName LIKE 'R%';",
        "WHERE",
        "AND",
        "SELECT column1, column2, ...\nFROM table_name\nWHERE condition1 AND condition2 AND condition3 ...;",
        "OR",
        "Customers",
        "Country",
        "City",
        "CustomerID"
      ]
    },
    {
      "title": "SQL OR Operator",
      "summary": "The SQL OR Operator\nThe WHERE clause can contain one or more OR operators.\nThe OR operator is used to filter records based on more than one condition, like if you want to return all customers from Germany but also those from Spain:\nExampleGet your own SQL Server\nSelect all customers from Germany or Spain:\nSyntax\nSELECT column1, column2, ...\nFROM table_name\nWHERE condition1 OR condition2 OR condition3 ...;\nOR vs AND\nThe OR operator displays a record if any of the conditions are TRUE.\nThe AND operator displays a record if all the conditions are TRUE.\nDemo Database\nBelow is a selection from the Customers table used in the examples:\nREMOVE ADS\nAt Least One Condition Must Be True\nThe following SQL statement selects all fields from Customers where either City is \"Berlin\", CustomerName starts with the letter \"G\" or Country is \"Norway\":\nExample\nCombining AND and OR\nYou can combine the AND and OR operators.\nThe following SQL statement selects all customers from Spain that starts with a \"G\" or an \"R\".\nMake sure you use parenthesis to get the correct result.\nExample\nSelect all Spanish customers that starts with either \"G\" or \"R\":\nWithout parenthesis, the select statement will return all customers from Spain that starts with a \"G\", plus all customers that starts with an \"R\", regardless of the country value:\nExample\nSelect all customers that either:\nare from Spain and starts with either \"G\", or\nstarts with the letter \"R\":",
      "examples": [
        "SELECT *\nFROM Customers\nWHERE Country = 'Germany' OR Country = 'Spain';",
        "SELECT * FROM Customers\nWHERE City = 'Berlin' OR CustomerName LIKE 'G%' OR Country = 'Norway';",
        "SELECT * FROM Customers\nWHERE Country = 'Spain' AND (CustomerName LIKE 'G%' OR CustomerName LIKE 'R%');",
        "SELECT * FROM Customers\nWHERE Country = 'Spain' AND CustomerName LIKE 'G%' OR CustomerName LIKE 'R%';",
        "WHERE",
        "OR",
        "SELECT column1, column2, ...\nFROM table_name\nWHERE condition1 OR condition2 OR condition3 ...;",
        "AND",
        "City",
        "CustomerName",
        "Country"
      ]
    },
    {
      "title": "SQL NOT Operator",
      "summary": "The NOT Operator\nThe NOT operator is used in combination with other operators to give the opposite result, also called the negative result.\nIn the select statement below we want to return all customers that are NOT from Spain:\nExampleGet your own SQL Server\nSelect only the customers that are NOT from Spain:\nIn the example above, the NOT operator is used in combination with the = operator, but it can be used in combination with other comparison and/or logical operators. See examples below.\nSyntax\nSELECT column1, column2, ...\nFROM table_name\nWHERE NOT condition;\nDemo Database\nBelow is a selection from the Customers table used in the examples:\nREMOVE ADS\nNOT LIKE\nExample\nSelect customers that does not start with the letter 'A':\nNOT BETWEEN\nExample\nSelect customers with a customerID not between 10 and 60:\nNOT IN\nExample\nSelect customers that are not from Paris or London:\nNOT Greater Than\nExample\nSelect customers with a CustomerId not greater than 50:\nNOT Less Than\nExample\nSelect customers with a CustomerID not less than 50:\nVideo: SQL NOT Operator",
      "examples": [
        "SELECT * FROM Customers\nWHERE NOT Country = 'Spain';",
        "SELECT * FROM Customers\nWHERE CustomerName NOT LIKE 'A%';",
        "SELECT * FROM Customers\nWHERE CustomerID NOT BETWEEN 10 AND 60;",
        "SELECT * FROM Customers\nWHERE City NOT IN ('Paris', 'London');",
        "SELECT * FROM Customers\nWHERE NOT CustomerID > 50;",
        "SELECT * FROM Customers\nWHERE NOT CustomerId < 50;",
        "NOT",
        "=",
        "SELECT column1, column2, ...\nFROM table_name\nWHERE NOT condition;"
      ]
    },
    {
      "title": "SQL INSERT INTO Statement",
      "summary": "The SQL INSERT INTO Statement\nThe INSERT INTO statement is used to insert new records in a table.\nINSERT INTO Syntax\nIt is possible to write the INSERT INTO statement in two ways:\n1. Specify both the column names and the values to be inserted:\nINSERT INTO table_name (column1, column2, column3, ...)\nVALUES (value1, value2, value3, ...);\n2. If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query. However, make sure the order of the values is in the same order as the columns in the table. Here, the INSERT INTO syntax would be as follows:\nINSERT INTO table_name\nVALUES (value1, value2, value3, ...);\nDemo Database\nBelow is a selection from the Customers table used in the examples:\nREMOVE ADS\nINSERT INTO Example\nThe following SQL statement inserts a new record in the \"Customers\" table:\nExampleGet your own SQL Server\nThe selection from the \"Customers\" table will now look like this:\nDid you notice that we did not insert any number into the CustomerID field?\nThe CustomerID column is an auto-increment field and will be generated automatically when a new record is inserted into the table.\nInsert Data Only in Specified Columns\nIt is also possible to only insert data in specific columns.\nThe following SQL statement will insert a new record, but only insert data in the \"CustomerName\", \"City\", and \"Country\" columns (CustomerID will be updated automatically):\nExample\nThe selection from the \"Customers\" table will now look like this:\nInsert Multiple Rows\nIt is also possible to insert multiple rows in one statement.\nTo insert multiple rows of data, we use the same INSERT INTO statement, but with multiple values:\nExample\nMake sure you separate each set of values with a comma ,.\nThe selection from the \"Customers\" table will now look like this:\nVideo: SQL NOT Operator",
      "examples": [
        "INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)\nVALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');",
        "INSERT INTO Customers (CustomerName, City, Country)\nVALUES ('Cardinal', 'Stavanger', 'Norway');",
        "INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)\nVALUES\n('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway'),\n('Greasy Burger', 'Per Olsen', 'Gateveien 15', 'Sandnes', '4306', 'Norway'),\n('Tasty Tee', 'Finn Egan', 'Streetroad 19B', 'Liverpool', 'L1 0AA', 'UK');",
        "INSERT INTO",
        "INSERT INTO table_name (column1, column2, column3, ...)\nVALUES (value1, value2, value3, ...);",
        "INSERT INTO table_name\nVALUES (value1, value2, value3, ...);",
        ","
      ]
    },
    {
      "title": "SQL NULL Values",
      "summary": "What is a NULL Value?\nA field with a NULL value is a field with no value.\nIf a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be saved with a NULL value.\nNote: A NULL value is different from a zero value or a field that contains spaces. A field with a NULL value is one that has been left blank during record creation!\nHow to Test for NULL Values?\nIt is not possible to test for NULL values with comparison operators, such as =, <, or <>.\nWe will have to use the IS NULL and IS NOT NULL operators instead.\nIS NULL Syntax\nSELECT column_names\nFROM table_name\nWHERE column_name IS NULL;\nIS NOT NULL Syntax\nSELECT column_names\nFROM table_name\nWHERE column_name IS NOT NULL;\nDemo Database\nBelow is a selection from the Customers table used in the examples:\nREMOVE ADS\nThe IS NULL Operator\nThe IS NULL operator is used to test for empty values (NULL values).\nThe following SQL lists all customers with a NULL value in the \"Address\" field:\nExampleGet your own SQL Server\nTip: Always use IS NULL to look for NULL values.\nThe IS NOT NULL Operator\nThe IS NOT NULL operator is used to test for non-empty values (NOT NULL values).\nThe following SQL lists all customers with a value in the \"Address\" field:\nExample\nVideo: SQL NULL Values",
      "examples": [
        "SELECT CustomerName, ContactName, Address\nFROM Customers\nWHERE Address IS NULL;",
        "SELECT CustomerName, ContactName, Address\nFROM Customers\nWHERE Address IS NOT NULL;",
        "IS NULL",
        "IS NOT NULL",
        "SELECT column_names\nFROM table_name\nWHERE column_name IS NULL;",
        "SELECT column_names\nFROM table_name\nWHERE column_name IS NOT NULL;"
      ]
    },
    {
      "title": "SQL UPDATE Statement",
      "summary": "The SQL UPDATE Statement\nThe UPDATE statement is used to modify the existing records in a table.\nUPDATE Syntax\nUPDATE table_name\nSET column1 = value1, column2 = value2, ...\nWHERE condition;\nNote: Be careful when updating records in a table! Notice the WHERE clause in the UPDATE statement. The WHERE clause specifies which record(s) that should be updated. If you omit the WHERE clause, all records in the table will be updated!\nDemo Database\nBelow is a selection from the Customers table used in the examples:\nUPDATE Table\nThe following SQL statement updates the first customer (CustomerID = 1) with a new contact person and a new city.\nExampleGet your own SQL Server\nThe selection from the \"Customers\" table will now look like this:\nREMOVE ADS\nUPDATE Multiple Records\nIt is the WHERE clause that determines how many records will be updated.\nThe following SQL statement will update the ContactName to \"Juan\" for all records where country is \"Mexico\":\nExample\nThe selection from the \"Customers\" table will now look like this:\nUpdate Warning!\nBe careful when updating records. If you omit the WHERE clause, ALL records will be updated!\nExample\nThe selection from the \"Customers\" table will now look like this:",
      "examples": [
        "UPDATE Customers\nSET ContactName = 'Alfred Schmidt', City= 'Frankfurt'\nWHERE CustomerID = 1;",
        "UPDATE Customers\nSET ContactName='Juan'\nWHERE Country='Mexico';",
        "UPDATE Customers\nSET ContactName='Juan';",
        "UPDATE",
        "UPDATE table_name\nSET column1 = value1, column2 = value2, ...\nWHERE condition;",
        "WHERE"
      ]
    },
    {
      "title": "SQL DELETE Statement",
      "summary": "The SQL DELETE Statement\nThe DELETE statement is used to delete existing records in a table.\nDELETE Syntax\nDELETE FROM table_name WHERE condition;\nNote: Be careful when deleting records in a table! Notice the WHERE clause in the DELETE statement. The WHERE clause specifies which record(s) should be deleted. If you omit the WHERE clause, all records in the table will be deleted!\nDemo Database\nBelow is a selection from the Customers table used in the examples:\nREMOVE ADS\nSQL DELETE Example\nThe following SQL statement deletes the customer \"Alfreds Futterkiste\" from the \"Customers\" table:\nExampleGet your own SQL Server\nThe \"Customers\" table will now look like this:\nDelete All Records\nIt is possible to delete all rows in a table without deleting the table. This means that the table structure, attributes, and indexes will be intact:\nDELETE FROM table_name;\nThe following SQL statement deletes all rows in the \"Customers\" table, without deleting the table:\nExample\nDelete a Table\nTo delete the table completely, use the DROP TABLE statement:\nExample\nRemove the Customers table:",
      "examples": [
        "DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';",
        "DELETE FROM Customers;",
        "DROP TABLE Customers;",
        "DELETE",
        "DELETE FROM table_name WHERE condition;",
        "WHERE",
        "DELETE FROM table_name;",
        "DROP TABLE"
      ]
    },
    {
      "title": "SQL TOP, LIMIT, FETCH FIRST or ROWNUM Clause",
      "summary": "The SQL SELECT TOP Clause\nThe SELECT TOP clause is used to specify the number of records to return.\nThe SELECT TOP clause is useful on large tables with thousands of records. Returning a large number of records can impact performance.\nExampleGet your own SQL Server\nSelect only the first 3 records of the Customers table:\nNote: Not all database systems support the SELECT TOP clause. MySQL supports the LIMIT clause to select a limited number of records, while Oracle uses FETCH FIRST n ROWS ONLY and ROWNUM.\nSQL Server / MS Access Syntax:\nSELECT TOP number|percent column_name(s)\nFROM table_name\nWHERE condition;\nMySQL Syntax:\nSELECT column_name(s)\nFROM table_name\nWHERE condition\nLIMIT number;\nOracle 12 Syntax:\nSELECT column_name(s)\nFROM table_name\nORDER BY column_name(s)\nFETCH FIRST number ROWS ONLY;\nOlder Oracle Syntax:\nSELECT column_name(s)\nFROM table_name\nWHERE ROWNUM <= number;\nOlder Oracle Syntax (with ORDER BY):\nSELECT *\nFROM (SELECT column_name(s) FROM table_name ORDER BY column_name(s))\nWHERE ROWNUM <= number;\nDemo Database\nBelow is a selection from the Customers table used in the examples:\nREMOVE ADS\nLIMIT\nThe following SQL statement shows the equivalent example for MySQL:\nExample\nSelect the first 3 records of the Customers table:\nFETCH FIRST\nThe following SQL statement shows the equivalent example for Oracle:\nExample\nSelect the first 3 records of the Customers table:\nSQL TOP PERCENT Example\nThe following SQL statement selects the first 50% of the records from the \"Customers\" table (for SQL Server/MS Access):\nExample\nThe following SQL statement shows the equivalent example for Oracle:\nExample\nADD a WHERE CLAUSE\nThe following SQL statement selects the first three records from the \"Customers\" table, where the country is \"Germany\" (for SQL Server/MS Access):\nExample\nThe following SQL statement shows the equivalent example for MySQL:\nExample\nThe following SQL statement shows the equivalent example for Oracle:\nExample\nADD the ORDER BY Keyword\nAdd the ORDER BY keyword when you want to sort the result, and return the first 3 records of the sorted result.\nFor SQL Server and MS Access:\nExample\nSort the result reverse alphabetically by CustomerName, and return the first 3 records:\nThe following SQL statement shows the equivalent example for MySQL:\nExample\nThe following SQL statement shows the equivalent example for Oracle:\nExample",
      "examples": [
        "SELECT TOP 3 * FROM Customers;",
        "SELECT * FROM Customers\nLIMIT 3;",
        "SELECT * FROM Customers\nFETCH FIRST 3 ROWS ONLY;",
        "SELECT TOP 50 PERCENT * FROM Customers;",
        "SELECT * FROM Customers\nFETCH FIRST 50 PERCENT ROWS ONLY;",
        "SELECT TOP 3 * FROM Customers\nWHERE Country='Germany';",
        "SELECT * FROM Customers\nWHERE Country='Germany'\nLIMIT 3;",
        "SELECT * FROM Customers\nWHERE Country='Germany'\nFETCH FIRST 3 ROWS ONLY;",
        "SELECT TOP 3 * FROM Customers\nORDER BY CustomerName DESC;",
        "SELECT * FROM Customers\nORDER BY CustomerName DESC\nLIMIT 3;",
        "SELECT * FROM Customers\nORDER BY CustomerName DESC\nFETCH FIRST 3 ROWS ONLY;",
        "SELECT TOP",
        "LIMIT",
        "FETCH FIRST n ROWS ONLY",
        "ROWNUM",
        "SELECT TOP number|percent column_name(s)\nFROM table_name\nWHERE condition;",
        "SELECT column_name(s)\nFROM table_name\nWHERE condition\nLIMIT number;",
        "SELECT column_name(s)\nFROM table_name\nORDER BY column_name(s)\nFETCH FIRST number ROWS ONLY;",
        "SELECT column_name(s)\nFROM table_name\nWHERE ROWNUM <= number;",
        "SELECT *\nFROM (SELECT column_name(s) FROM table_name ORDER BY column_name(s))\nWHERE ROWNUM <= number;",
        "ORDER BY"
      ]
    },
    {
      "title": "SQL Aggregate Functions",
      "summary": "SQL Aggregate Functions\nAn aggregate function is a function that performs a calculation on a set of values, and returns a single value.\nAggregate functions are often used with the GROUP BY clause of the SELECT statement. The GROUP BY clause splits the result-set into groups of values and the aggregate function can be used to return a single value for each group.\nThe most commonly used SQL aggregate functions are:\nMIN() - returns the smallest value within the selected column\nMAX() - returns the largest value within the selected column\nCOUNT() - returns the number of rows in a set\nSUM() - returns the total sum of a numerical column\nAVG() - returns the average value of a numerical column\nAggregate functions ignore null values (except for COUNT(*)).\nWe will go through the aggregate functions above in the next chapters.",
      "examples": [
        "GROUP BY",
        "SELECT",
        "MIN()",
        "MAX()",
        "COUNT()",
        "SUM()",
        "AVG()",
        "COUNT(*)"
      ]
    },
    {
      "title": "SQL MIN() and MAX() Functions",
      "summary": "The SQL MIN() and MAX() Functions\nThe MIN() function returns the smallest value of the selected column.\nThe MAX() function returns the largest value of the selected column.\nMIN ExampleGet your own SQL Server\nFind the lowest price in the Price column:\nMAX Example\nFind the highest price in the Price column:\nSyntax\nSELECT MIN(column_name)\nFROM table_name\nWHERE condition;\nSELECT MAX(column_name)\nFROM table_name\nWHERE condition;\nDemo Database\nBelow is a selection from the Products table used in the examples:\nREMOVE ADS\nSet Column Name (Alias)\nWhen you use MIN() or MAX(), the returned column will not have a descriptive name. To give the column a descriptive name, use the AS keyword:\nExample\nUse MIN() with GROUP BY\nHere we use the MIN() function and the GROUP BY clause, to return the smallest price for each category in the Products table:\nExample\nYou will learn more about the GROUP BY clause later in this tutorial.",
      "examples": [
        "SELECT MIN(Price)\nFROM Products;",
        "SELECT MAX(Price)\nFROM Products;",
        "SELECT MIN(Price) AS SmallestPrice\nFROM Products;",
        "SELECT MIN(Price) AS SmallestPrice, CategoryID\nFROM Products\nGROUP BY CategoryID;",
        "MIN()",
        "MAX()",
        "SELECT MIN(column_name)\nFROM table_name\nWHERE condition;",
        "SELECT MAX(column_name)\nFROM table_name\nWHERE condition;",
        "AS",
        "GROUP BY"
      ]
    },
    {
      "title": "SQL COUNT() Function",
      "summary": "The SQL COUNT() Function\nThe COUNT() function returns the number of rows that matches a specified criterion.\nExampleGet your own SQL Server\nFind the total number of rows in the Products table:\nSyntax\nSELECT COUNT(column_name)\nFROM table_name\nWHERE condition;\nDemo Database\nBelow is a selection from the Products table used in the examples:\nREMOVE ADS\nSpecify Column\nYou can specify a column name instead of the asterix symbol (*).\nIf you specify a column name instead of (*), NULL values will not be counted.\nExample\nFind the number of products where the ProductName is not null:\nAdd a WHERE Clause\nYou can add a WHERE clause to specify conditions:\nExample\nFind the number of products where Price is higher than 20:\nIgnore Duplicates\nYou can ignore duplicates by using the DISTINCT keyword in the COUNT() function.\nIf DISTINCT is specified, rows with the same value for the specified column will be counted as one.\nExample\nHow many different prices are there in the Products table:\nUse an Alias\nGive the counted column a name by using the AS keyword.\nExample\nName the column \"Number of records\":\nUse COUNT() with GROUP BY\nHere we use the COUNT() function and the GROUP BY clause, to return the number of records for each category in the Products table:\nExample\nYou will learn more about the GROUP BY clause later in this tutorial.",
      "examples": [
        "SELECT COUNT(*)\nFROM Products;",
        "SELECT COUNT(ProductName)\nFROM Products;",
        "SELECT COUNT(ProductID)\nFROM Products\nWHERE Price > 20;",
        "SELECT COUNT(DISTINCT Price)\nFROM Products;",
        "SELECT COUNT(*) AS [Number of records]\nFROM Products;",
        "SELECT COUNT(*) AS [Number of records], CategoryID\nFROM Products\nGROUP BY CategoryID;",
        "COUNT()",
        "Products",
        "SELECT COUNT(column_name)\nFROM table_name\nWHERE condition;",
        "(*)",
        "ProductName",
        "WHERE",
        "Price",
        "DISTINCT",
        "AS",
        "GROUP BY"
      ]
    },
    {
      "title": "SQL SUM() Function",
      "summary": "The SQL SUM() Function\nThe SUM() function returns the total sum of a numeric column.\nExampleGet your own SQL Server\nReturn the sum of all Quantity fields in the OrderDetails table:\nSyntax\nSELECT SUM(column_name)\nFROM table_name\nWHERE condition;\nDemo Database\nBelow is a selection from the OrderDetails table used in the examples:\nREMOVE ADS\nAdd a WHERE Clause\nYou can add a WHERE clause to specify conditions:\nExample\nReturn the sum of the Quantity field for the product with ProductID 11:\nUse an Alias\nGive the summarized column a name by using the AS keyword.\nExample\nName the column \"total\":\nUse SUM() with GROUP BY\nHere we use the SUM() function and the GROUP BY clause, to return the Quantity for each OrderID in the OrderDetails table:\nExample\nYou will learn more about the GROUP BY clause later in this tutorial.\nSUM() With an Expression\nThe parameter inside the SUM() function can also be an expression.\nIf we assume that each product in the OrderDetails column costs 10 dollars, we can find the total earnings in dollars by multiply each quantity with 10:\nExample\nUse an expression inside the SUM() function:\nWe can also join the OrderDetails table to the Products table to find the actual amount, instead of assuming it is 10 dollars:\nExample\nJoin OrderDetails with Products, and use SUM() to find the total amount:\nYou will learn more about Joins later in this tutorial.",
      "examples": [
        "SELECT SUM(Quantity)\nFROM OrderDetails;",
        "SELECT SUM(Quantity)\nFROM OrderDetails\nWHERE ProductId = 11;",
        "SELECT SUM(Quantity) AS total\nFROM OrderDetails;",
        "SELECT OrderID, SUM(Quantity) AS [Total Quantity]\nFROM OrderDetails\nGROUP BY OrderID;",
        "SELECT SUM(Quantity * 10)\nFROM OrderDetails;",
        "SELECT SUM(Price * Quantity)\nFROM OrderDetails\nLEFT JOIN Products ON OrderDetails.ProductID = Products.ProductID;",
        "SUM()",
        "Quantity",
        "OrderDetails",
        "SELECT SUM(column_name)\nFROM table_name\nWHERE condition;",
        "WHERE",
        "ProductID",
        "AS",
        "GROUP BY",
        "OrderID",
        "Products"
      ]
    },
    {
      "title": "SQL AVG() Function",
      "summary": "The SQL AVG() Function\nThe AVG() function returns the average value of a numeric column.\nExampleGet your own SQL Server\nFind the average price of all products:\nNote: NULL values are ignored.\nSyntax\nSELECT AVG(column_name)\nFROM table_name\nWHERE condition;\nDemo Database\nBelow is a selection from the Products table used in the examples:\nREMOVE ADS\nAdd a WHERE Clause\nYou can add a WHERE clause to specify conditions:\nExample\nReturn the average price of products in category 1:\nUse an Alias\nGive the AVG column a name by using the AS keyword.\nExample\nName the column \"average price\":\nHigher Than Average\nTo list all records with a higher price than average, we can use the AVG() function in a sub query:\nExample\nReturn all products with a higher price than the average price:\nUse AVG() with GROUP BY\nHere we use the AVG() function and the GROUP BY clause, to return the average price for each category in the Products table:\nExample\nYou will learn more about the GROUP BY clause later in this tutorial.",
      "examples": [
        "SELECT AVG(Price)\nFROM Products;",
        "SELECT AVG(Price)\nFROM Products\nWHERE CategoryID = 1;",
        "SELECT AVG(Price) AS [average price]\nFROM Products;",
        "SELECT * FROM Products\nWHERE price > (SELECT AVG(price) FROM Products);",
        "SELECT AVG(Price) AS AveragePrice, CategoryID\nFROM Products\nGROUP BY CategoryID;",
        "AVG()",
        "SELECT AVG(column_name)\nFROM table_name\nWHERE condition;",
        "WHERE",
        "AS",
        "GROUP BY"
      ]
    },
    {
      "title": "SQL LIKE Operator",
      "summary": "The SQL LIKE Operator\nThe LIKE operator is used in a WHERE clause to search for a specified pattern in a column.\nThere are two wildcards often used in conjunction with the LIKE operator:\nThe percent sign % represents zero, one, or multiple characters\nThe underscore sign _ represents one, single character\nYou will learn more about wildcards in the next chapter.\nExampleGet your own SQL Server\nSelect all customers that starts with the letter \"a\":\nSyntax\nSELECT column1, column2, ...\nFROM table_name\nWHERE columnN LIKE pattern;\nDemo Database\nBelow is a selection from the Customers table used in the examples:\nThe _ Wildcard\nThe _ wildcard represents a single character.\nIt can be any character or number, but each _ represents one, and only one, character.\nExample\nReturn all customers from a city that starts with 'L' followed by one wildcard character, then 'nd' and then two wildcard characters:\nREMOVE ADS\nThe % Wildcard\nThe % wildcard represents any number of characters, even zero characters.\nExample\nReturn all customers from a city that contains the letter 'L':\nStarts With\nTo return records that starts with a specific letter or phrase, add the % at the end of the letter or phrase.\nExample\nReturn all customers that starts with 'La':\nTip: You can also combine any number of conditions using AND or OR operators.\nExample\nReturn all customers that starts with 'a' or starts with 'b':\nEnds With\nTo return records that ends with a specific letter or phrase, add the % at the beginning of the letter or phrase.\nExample\nReturn all customers that ends with 'a':\nTip: You can also combine \"starts with\" and \"ends with\":\nExample\nReturn all customers that starts with \"b\" and ends with \"s\":\nContains\nTo return records that contains a specific letter or phrase, add the % both before and after the letter or phrase.\nExample\nReturn all customers that contains the phrase 'or'\nCombine Wildcards\nAny wildcard, like % and _ , can be used in combination with other wildcards.\nExample\nReturn all customers that starts with \"a\" and are at least 3 characters in length:\nExample\nReturn all customers that have \"r\" in the second position:\nWithout Wildcard\nIf no wildcard is specified, the phrase has to have an exact match to return a result.\nExample\nReturn all customers from Spain:",
      "examples": [
        "SELECT * FROM Customers\nWHERE CustomerName LIKE 'a%';",
        "SELECT * FROM Customers\nWHERE city LIKE 'L_nd__';",
        "SELECT * FROM Customers\nWHERE city LIKE '%L%';",
        "SELECT * FROM Customers\nWHERE CustomerName LIKE 'La%';",
        "SELECT * FROM Customers\nWHERE CustomerName LIKE 'a%' OR CustomerName LIKE 'b%';",
        "SELECT * FROM Customers\nWHERE CustomerName LIKE '%a';",
        "SELECT * FROM Customers\nWHERE CustomerName LIKE 'b%s';",
        "SELECT * FROM Customers\nWHERE CustomerName LIKE '%or%';",
        "SELECT * FROM Customers\nWHERE CustomerName LIKE 'a__%';",
        "SELECT * FROM Customers\nWHERE CustomerName LIKE '_r%';",
        "SELECT * FROM Customers\nWHERE Country LIKE 'Spain';",
        "LIKE",
        "WHERE",
        "%",
        "_",
        "SELECT column1, column2, ...\nFROM table_name\nWHERE columnN LIKE pattern;",
        "AND",
        "OR"
      ]
    },
    {
      "title": "SQL Wildcards",
      "summary": "SQL Wildcard Characters\nA wildcard character is used to substitute one or more characters in a string.\nWildcard characters are used with the LIKE operator. The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.\nExampleGet your own SQL Server\nReturn all customers that starts with the letter 'a':\nWildcard Characters\n* Not supported in PostgreSQL and MySQL databases.\n** Supported only in Oracle databases.\nDemo Database\nBelow is a selection from the Customers table used in the examples:\nREMOVE ADS\nUsing the % Wildcard\nThe % wildcard represents any number of characters, even zero characters.\nExample\nReturn all customers that ends with the pattern 'es':\nExample\nReturn all customers that contains the pattern 'mer':\nUsing the _ Wildcard\nThe _ wildcard represents a single character.\nIt can be any character or number, but each _ represents one, and only one, character.\nExample\nReturn all customers with a City starting with any character, followed by \"ondon\":\nExample\nReturn all customers with a City starting with \"L\", followed by any 3 characters, ending with \"on\":\nUsing the [] Wildcard\nThe [] wildcard returns a result if any of the characters inside gets a match.\nExample\nReturn all customers starting with either \"b\", \"s\", or \"p\":\nUsing the - Wildcard\nThe - wildcard allows you to specify a range of characters inside the [] wildcard.\nExample\nReturn all customers starting with \"a\", \"b\", \"c\", \"d\", \"e\" or \"f\":\nCombine Wildcards\nAny wildcard, like % and _ , can be used in combination with other wildcards.\nExample\nReturn all customers that starts with \"a\" and are at least 3 characters in length:\nExample\nReturn all customers that have \"r\" in the second position:\nWithout Wildcard\nIf no wildcard is specified, the phrase has to have an exact match to return a result.\nExample\nReturn all customers from Spain:\nMicrosoft Access Wildcards\nThe Microsoft Access Database has some other wildcards:",
      "examples": [
        "SELECT * FROM Customers\nWHERE CustomerName LIKE 'a%';",
        "SELECT * FROM Customers\nWHERE CustomerName LIKE '%es';",
        "SELECT * FROM Customers\nWHERE CustomerName LIKE '%mer%';",
        "SELECT * FROM Customers\nWHERE City LIKE '_ondon';",
        "SELECT * FROM Customers\nWHERE City LIKE 'L___on';",
        "SELECT * FROM Customers\nWHERE CustomerName LIKE '[bsp]%';",
        "SELECT * FROM Customers\nWHERE CustomerName LIKE 'a__%';",
        "SELECT * FROM Customers\nWHERE CustomerName LIKE '_r%';",
        "SELECT * FROM Customers\nWHERE Country LIKE 'Spain';",
        "LIKE",
        "WHERE",
        "%",
        "_",
        "City",
        "[]",
        "-"
      ]
    },
    {
      "title": "SQL IN Operator",
      "summary": "The SQL IN Operator\nThe IN operator allows you to specify multiple values in a WHERE clause.\nThe IN operator is a shorthand for multiple OR conditions.\nExampleGet your own SQL Server\nReturn all customers from 'Germany', 'France', or 'UK'\nSyntax\nSELECT column_name(s)\nFROM table_name\nWHERE column_name IN (value1, value2, ...);\nDemo Database\nBelow is a selection from the Customers table used in the examples:\nREMOVE ADS\nNOT IN\nBy using the NOT keyword in front of the IN operator, you return all records that are NOT any of the values in the list.\nExample\nReturn all customers that are NOT from 'Germany', 'France', or 'UK':\nIN (SELECT)\nYou can also use IN with a subquery in the WHERE clause.\nWith a subquery you can return all records from the main query that are present in the result of the subquery.\nExample\nReturn all customers that have an order in the Orders table:\nNOT IN (SELECT)\nThe result in the example above returned 74 records, that means that there are 17 customers that haven't placed any orders.\nLet us check if that is correct, by using the NOT IN operator.\nExample\nReturn all customers that have NOT placed any orders in the Orders table:",
      "examples": [
        "SELECT * FROM Customers\nWHERE Country IN ('Germany', 'France', 'UK');",
        "SELECT * FROM Customers\nWHERE Country NOT IN ('Germany', 'France', 'UK');",
        "SELECT * FROM Customers\nWHERE CustomerID IN (SELECT CustomerID FROM Orders);",
        "SELECT * FROM Customers\nWHERE CustomerID NOT IN (SELECT CustomerID FROM Orders);",
        "IN",
        "WHERE",
        "OR",
        "SELECT column_name(s)\nFROM table_name\nWHERE column_name IN (value1, value2, ...);",
        "NOT",
        "NOT IN"
      ]
    },
    {
      "title": "SQL BETWEEN Operator",
      "summary": "The SQL BETWEEN Operator\nThe BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.\nThe BETWEEN operator is inclusive: begin and end values are included.\nExampleGet your own SQL Server\nSelects all products with a price between 10 and 20:\nSyntax\nSELECT column_name(s)\nFROM table_name\nWHERE column_name BETWEEN value1 AND value2;\nDemo Database\nBelow is a selection from the Products table used in the examples:\nREMOVE ADS\nNOT BETWEEN\nTo display the products outside the range of the previous example, use NOT BETWEEN:\nExample\nBETWEEN with IN\nThe following SQL statement selects all products with a price between 10 and 20. In addition, the CategoryID must be either 1,2, or 3:\nExample\nBETWEEN Text Values\nThe following SQL statement selects all products with a ProductName alphabetically between Carnarvon Tigers and Mozzarella di Giovanni:\nExample\nThe following SQL statement selects all products with a ProductName between Carnarvon Tigers and Chef Anton's Cajun Seasoning:\nExample\nNOT BETWEEN Text Values\nThe following SQL statement selects all products with a ProductName not between Carnarvon Tigers and Mozzarella di Giovanni:\nExample\nBETWEEN Dates\nThe following SQL statement selects all orders with an OrderDate between '01-July-1996' and '31-July-1996':\nExample\nOR:\nExample\nSample Table\nBelow is a selection from the Orders table used in the examples:",
      "examples": [
        "SELECT * FROM Products\nWHERE Price BETWEEN 10 AND 20;",
        "SELECT * FROM Products\nWHERE Price NOT BETWEEN 10 AND 20;",
        "SELECT * FROM Products\nWHERE Price BETWEEN 10 AND 20\nAND CategoryID IN (1,2,3);",
        "SELECT * FROM Products\nWHERE ProductName BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'\nORDER BY ProductName;",
        "SELECT * FROM Products\nWHERE ProductName BETWEEN \"Carnarvon Tigers\" AND \"Chef Anton's Cajun Seasoning\"\nORDER BY ProductName;",
        "SELECT * FROM Products\nWHERE ProductName NOT BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'\nORDER BY ProductName;",
        "SELECT * FROM Orders\nWHERE OrderDate BETWEEN #07/01/1996# AND #07/31/1996#;",
        "SELECT * FROM Orders\nWHERE OrderDate BETWEEN '1996-07-01' AND '1996-07-31';",
        "BETWEEN",
        "SELECT column_name(s)\nFROM table_name\nWHERE column_name BETWEEN value1 AND value2;",
        "NOT BETWEEN"
      ]
    },
    {
      "title": "SQL Aliases",
      "summary": "SQL Aliases\nSQL aliases are used to give a table, or a column in a table, a temporary name.\nAliases are often used to make column names more readable.\nAn alias only exists for the duration of that query.\nAn alias is created with the AS keyword.\nExampleGet your own SQL Server\nAS is Optional\nActually, in most database languages, you can skip the AS keyword and get the same result:\nExample\nSyntax\nWhen alias is used on column:\nSELECT column_name AS alias_name\nFROM table_name;\nWhen alias is used on table:\nSELECT column_name(s)\nFROM table_name AS alias_name;\nDemo Database\nBelow is a selection from the Customers and Orders tables used in the examples:\nCustomers\nOrders\nREMOVE ADS\nAlias for Columns\nThe following SQL statement creates two aliases, one for the CustomerID column and one for the CustomerName column:\nExample\nUsing Aliases With a Space Character\nIf you want your alias to contain one or more spaces, like \"My Great Products\", surround your alias with square brackets or double quotes.\nExample\nUsing [square brackets] for aliases with space characters:\nExample\nUsing \"double quotes\" for aliases with space characters:\nNote: Some database systems allows both [] and \"\", and some only allows one of them.\nConcatenate Columns\nThe following SQL statement creates an alias named \"Address\" that combine four columns (Address, PostalCode, City and Country):\nExample\nNote: To get the SQL statement above to work in MySQL use the following:\nMySQL Example\nNote: To get the SQL statement above to work in Oracle use the following:\nOracle Example\nAlias for Tables\nThe same rules applies when you want to use an alias for a table.\nExample\nRefer to the Customers table as Persons instead:\nIt might seem useless to use aliases on tables, but when you are using more than one table in your queries, it can make the SQL statements shorter.\nThe following SQL statement selects all the orders from the customer with CustomerID=4 (Around the Horn). We use the \"Customers\" and \"Orders\" tables, and give them the table aliases of \"c\" and \"o\" respectively (Here we use aliases to make the SQL shorter):\nExample\nThe following SQL statement is the same as above, but without aliases:\nExample\nAliases can be useful when:\nThere are more than one table involved in a query\nFunctions are used in the query\nColumn names are big or not very readable\nTwo or more columns are combined together",
      "examples": [
        "SELECT CustomerID AS ID\nFROM Customers;",
        "SELECT CustomerID ID\nFROM Customers;",
        "SELECT CustomerID AS ID, CustomerName AS Customer\nFROM Customers;",
        "SELECT ProductName AS [My Great Products]\nFROM Products;",
        "SELECT ProductName AS \"My Great Products\"\nFROM Products;",
        "SELECT CustomerName, Address + ', ' + PostalCode + ' ' + City + ', ' + Country AS Address\nFROM Customers;",
        "SELECT CustomerName, CONCAT(Address,', ',PostalCode,', ',City,', ',Country) AS Address\nFROM Customers;",
        "SELECT CustomerName, (Address || ', ' || PostalCode || ' ' || City || ', ' || Country) AS Address\nFROM Customers;",
        "SELECT * FROM Customers AS Persons;",
        "SELECT o.OrderID, o.OrderDate, c.CustomerName\nFROM Customers AS c, Orders AS o\nWHERE c.CustomerName='Around the Horn' AND c.CustomerID=o.CustomerID;",
        "SELECT Orders.OrderID, Orders.OrderDate, Customers.CustomerName\nFROM Customers, Orders\nWHERE Customers.CustomerName='Around the Horn' AND Customers.CustomerID=Orders.CustomerID;",
        "AS",
        "SELECT column_name AS alias_name\nFROM table_name;",
        "SELECT column_name(s)\nFROM table_name AS alias_name;",
        "My Great Products"
      ]
    },
    {
      "title": "SQL Joins",
      "summary": "SQL JOIN\nA JOIN clause is used to combine rows from two or more tables, based on a related column between them.\nLet's look at a selection from the \"Orders\" table:\nThen, look at a selection from the \"Customers\" table:\nNotice that the \"CustomerID\" column in the \"Orders\" table refers to the \"CustomerID\" in the \"Customers\" table. The relationship between the two tables above is the \"CustomerID\" column.\nThen, we can create the following SQL statement (that contains an INNER JOIN), that selects records that have matching values in both tables:\nExampleGet your own SQL Server\nand it will produce something like this:\nREMOVE ADS\nDifferent Types of SQL JOINs\nHere are the different types of the JOINs in SQL:\n(INNER) JOIN: Returns records that have matching values in both tables\nLEFT (OUTER) JOIN: Returns all records from the left table, and the matched records from the right table\nRIGHT (OUTER) JOIN: Returns all records from the right table, and the matched records from the left table\nFULL (OUTER) JOIN: Returns all records when there is a match in either left or right table",
      "examples": [
        "SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate\nFROM Orders\nINNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;",
        "JOIN",
        "INNER JOIN",
        "(INNER) JOIN",
        "LEFT (OUTER) JOIN",
        "RIGHT (OUTER) JOIN",
        "FULL (OUTER) JOIN"
      ]
    },
    {
      "title": "SQL INNER JOIN",
      "summary": "INNER JOIN\nThe INNER JOIN keyword selects records that have matching values in both tables.\nLet's look at a selection of the Products table:\nAnd a selection of the Categories table:\nWe will join the Products table with the Categories table, by using the CategoryID field from both tables:\nExampleGet your own SQL Server\nJoin Products and Categories with the INNER JOIN keyword:\nNote: The INNER JOIN keyword returns only rows with a match in both tables. Which means that if you have a product with no CategoryID, or with a CategoryID that is not present in the Categories table, that record would not be returned in the result.\nSyntax\nSELECT column_name(s)\nFROM table1\nINNER JOIN table2\nON table1.column_name = table2.column_name;\nREMOVE ADS\nNaming the Columns\nIt is a good practice to include the table name when specifying columns in the SQL statement.\nExample\nSpecify the table names:\nThe example above works without specifying table names, because none of the specified column names are present in both tables. If you try to include CategoryID in the SELECT statement, you will get an error if you do not specify the table name (because CategoryID is present in both tables).\nJOIN or INNER JOIN\nJOIN and INNER JOIN will return the same result.\nINNER is the default join type for JOIN, so when you write JOIN the parser actually writes INNER JOIN.\nExample\nJOIN is the same as INNER JOIN:\nJOIN Three Tables\nThe following SQL statement selects all orders with customer and shipper information:\nHere is the Shippers table:\nExample",
      "examples": [
        "SELECT ProductID, ProductName, CategoryName\nFROM Products\nINNER JOIN Categories ON Products.CategoryID = Categories.CategoryID;",
        "SELECT Products.ProductID, Products.ProductName, Categories.CategoryName\nFROM Products\nINNER JOIN Categories ON Products.CategoryID = Categories.CategoryID;",
        "SELECT Products.ProductID, Products.ProductName, Categories.CategoryName\nFROM Products\nJOIN Categories ON Products.CategoryID = Categories.CategoryID;",
        "SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName\nFROM ((Orders\nINNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)\nINNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);",
        "INNER JOIN",
        "CategoryID",
        "SELECT column_name(s)\nFROM table1\nINNER JOIN table2\nON table1.column_name = table2.column_name;",
        "SELECT",
        "JOIN",
        "INNER"
      ]
    },
    {
      "title": "SQL LEFT JOIN Keyword",
      "summary": "SQL LEFT JOIN Keyword\nThe LEFT JOIN keyword returns all records from the left table (table1), and the matching records from the right table (table2). The result is 0 records from the right side, if there is no match.\nLEFT JOIN Syntax\nNote: In some databases LEFT JOIN is called LEFT OUTER JOIN.\nDemo Database\nIn this tutorial we will use the well-known Northwind sample database.\nBelow is a selection from the \"Customers\" table:\nAnd a selection from the \"Orders\" table:\nSQL LEFT JOIN Example\nThe following SQL statement will select all customers, and any orders they might have:\nExampleGet your own SQL Server\nNote: The LEFT JOIN keyword returns all records from the left table (Customers), even if there are no matches in the right table (Orders).",
      "examples": [
        "SELECT column_name(s)\nFROM table1\nLEFT JOIN table2\nON table1.column_name = table2.column_name;",
        "SELECT Customers.CustomerName, Orders.OrderID\nFROM Customers\nLEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID\nORDER BY Customers.CustomerName;",
        "LEFT JOIN"
      ]
    },
    {
      "title": "SQL RIGHT JOIN Keyword",
      "summary": "SQL RIGHT JOIN Keyword\nThe RIGHT JOIN keyword returns all records from the right table (table2), and the matching records from the left table (table1). The result is 0 records from the left side, if there is no match.\nRIGHT JOIN Syntax\nNote: In some databases RIGHT JOIN is called RIGHT OUTER JOIN.\nDemo Database\nIn this tutorial we will use the well-known Northwind sample database.\nBelow is a selection from the \"Orders\" table:\nAnd a selection from the \"Employees\" table:\nSQL RIGHT JOIN Example\nThe following SQL statement will return all employees, and any orders they might have placed:\nExampleGet your own SQL Server\nNote: The RIGHT JOIN keyword returns all records from the right table (Employees), even if there are no matches in the left table (Orders).",
      "examples": [
        "SELECT column_name(s)\nFROM table1\nRIGHT JOIN table2\nON table1.column_name = table2.column_name;",
        "SELECT Orders.OrderID, Employees.LastName, Employees.FirstName\nFROM Orders\nRIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\nORDER BY Orders.OrderID;",
        "RIGHT JOIN",
        "RIGHT OUTER JOIN"
      ]
    },
    {
      "title": "SQL FULL OUTER JOIN Keyword",
      "summary": "SQL FULL OUTER JOIN Keyword\nThe FULL OUTER JOIN keyword returns all records when there is a match in left (table1) or right (table2) table records.\nTip: FULL OUTER JOIN and FULL JOIN are the same.\nFULL OUTER JOIN Syntax\nNote: FULL OUTER JOIN can potentially return very large result-sets!\nDemo Database\nIn this tutorial we will use the well-known Northwind sample database.\nBelow is a selection from the \"Customers\" table:\nAnd a selection from the \"Orders\" table:\nREMOVE ADS\nSQL FULL OUTER JOIN Example\nThe following SQL statement selects all customers, and all orders:\nA selection from the result set may look like this:\nNote: The FULL OUTER JOIN keyword returns all matching records from both tables whether the other table matches or not. So, if there are rows in \"Customers\" that do not have matches in \"Orders\", or if there are rows in \"Orders\" that do not have matches in \"Customers\", those rows will be listed as well.",
      "examples": [
        "SELECT column_name(s)\nFROM table1\nFULL OUTER JOIN table2\nON table1.column_name = table2.column_name\nWHERE condition;",
        "SELECT Customers.CustomerName, Orders.OrderID\nFROM Customers\nFULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID\nORDER BY Customers.CustomerName;",
        "FULL OUTER JOIN",
        "FULL JOIN"
      ]
    },
    {
      "title": "SQL Self Join",
      "summary": "SQL Self Join\nA self join is a regular join, but the table is joined with itself.\nSelf Join Syntax\nT1 and T2 are different table aliases for the same table.\nDemo Database\nIn this tutorial we will use the well-known Northwind sample database.\nBelow is a selection from the \"Customers\" table:\nSQL Self Join Example\nThe following SQL statement matches customers that are from the same city:\nExampleGet your own SQL Server",
      "examples": [
        "SELECT column_name(s)\nFROM table1 T1, table1 T2\nWHERE condition;",
        "SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City\nFROM Customers A, Customers B\nWHERE A.CustomerID <> B.CustomerID\nAND A.City = B.City\nORDER BY A.City;"
      ]
    },
    {
      "title": "SQL UNION Operator",
      "summary": "The SQL UNION Operator\nThe UNION operator is used to combine the result-set of two or more SELECT statements.\nThe UNION operator automatically removes duplicate rows from the result set.\nRequirements for UNION:\nEvery SELECT statement within UNION must have the same number of columns\nThe columns must also have similar data types\nThe columns in every SELECT statement must also be in the same order\nUNION Syntax\nNote: The column names in the result-set are usually equal to the column names in the first SELECT statement.\nDemo Database\nIn this tutorial we will use the well-known Northwind sample database.\nBelow is a selection from the \"Customers\" table:\nAnd a selection from the \"Suppliers\" table:\nREMOVE ADS\nSQL UNION Example\nThe following SQL statement returns the cities (only distinct values) from both the \"Customers\" and the \"Suppliers\" table:\nExampleGet your own SQL Server\nNote: If some customers or suppliers have the same city, each city will only be listed once, because UNION selects only distinct values. Use UNION ALL to also select duplicate values!\nSQL UNION With WHERE\nThe following SQL statement returns the German cities (only distinct values) from both the \"Customers\" and the \"Suppliers\" table:\nExample\nAnother UNION Example\nThe following SQL statement lists all customers and suppliers:\nExample\nNotice the \"AS Type\" above - it is an alias. SQL Aliases are used to give a table or a column a temporary name. An alias only exists for the duration of the query. So, here we have created a temporary column named \"Type\", that list whether the contact person is a \"Customer\" or a \"Supplier\".",
      "examples": [
        "SELECT column_name(s) FROM table1\nUNION\nSELECT column_name(s) FROM table2;",
        "SELECT City FROM Customers\nUNION\nSELECT City FROM Suppliers\nORDER BY City;",
        "SELECT City, Country FROM Customers\nWHERE Country='Germany'\nUNION\nSELECT City, Country FROM Suppliers\nWHERE Country='Germany'\nORDER BY City;",
        "SELECT 'Customer' AS Type, ContactName, City, Country\nFROM Customers\nUNION\nSELECT 'Supplier', ContactName, City, Country\nFROM Suppliers;",
        "UNION",
        "SELECT",
        "UNION ALL"
      ]
    },
    {
      "title": "SQL UNION ALL Operator",
      "summary": "The SQL UNION ALL Operator\nThe UNION ALL operator is used to combine the result-set of two or more SELECT statements.\nThe UNION ALL operator includes all rows from each statement, including any duplicates.\nRequirements for UNION ALL:\nEvery SELECT statement within UNION ALL must have the same number of columns\nThe columns must also have similar data types\nThe columns in every SELECT statement must also be in the same order\nUNION ALL Syntax\nWhile the UNION operator removes duplicate values by default, the UNION ALL includes duplicate values:\nNote: The column names in the result-set are usually equal to the column names in the first SELECT statement.\nDemo Database\nIn this tutorial we will use the well-known Northwind sample database.\nBelow is a selection from the \"Customers\" table:\nAnd a selection from the \"Suppliers\" table:\nREMOVE ADS\nSQL UNION ALL Example\nThe following SQL statement returns the cities (duplicate values also) from both the \"Customers\" and the \"Suppliers\" table:\nExampleGet your own SQL Server\nSQL UNION ALL With WHERE\nThe following SQL statement returns the German cities (duplicate values also) from both the \"Customers\" and the \"Suppliers\" table:\nExample",
      "examples": [
        "SELECT column_name(s) FROM table1\nUNION ALL\nSELECT column_name(s) FROM table2;",
        "SELECT City FROM Customers\nUNION ALL\nSELECT City FROM Suppliers\nORDER BY City;",
        "SELECT City, Country FROM Customers\nWHERE Country='Germany'\nUNION ALL\nSELECT City, Country FROM Suppliers\nWHERE Country='Germany'\nORDER BY City;",
        "UNION ALL",
        "SELECT",
        "UNION"
      ]
    },
    {
      "title": "SQL GROUP BY Statement",
      "summary": "The SQL GROUP BY Statement\nThe GROUP BY statement groups rows that have the same values into summary rows, like \"find the number of customers in each country\".\nThe GROUP BY statement is often used with aggregate functions (COUNT(), MAX(), MIN(), SUM(), AVG()) to group the result-set by one or more columns.\nGROUP BY Syntax\nDemo Database\nBelow is a selection from the \"Customers\" table in the Northwind sample database:\nREMOVE ADS\nSQL GROUP BY Examples\nThe following SQL statement lists the number of customers in each country:\nExampleGet your own SQL Server\nThe following SQL statement lists the number of customers in each country, sorted high to low:\nExample\nDemo Database\nBelow is a selection from the \"Orders\" table in the Northwind sample database:\nAnd a selection from the \"Shippers\" table:\nGROUP BY With JOIN Example\nThe following SQL statement lists the number of orders sent by each shipper:\nExample",
      "examples": [
        "SELECT column_name(s)\nFROM table_name\nWHERE condition\nGROUP BY column_name(s)\nORDER BY column_name(s);",
        "SELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country;",
        "SELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country\nORDER BY COUNT(CustomerID) DESC;",
        "SELECT Shippers.ShipperName, COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders\nLEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID\nGROUP BY ShipperName;",
        "GROUP BY",
        "COUNT()",
        "MAX()",
        "MIN()",
        "SUM()",
        "AVG()"
      ]
    },
    {
      "title": "SQL HAVING Clause",
      "summary": "The SQL HAVING Clause\nThe HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions.\nHAVING Syntax\nDemo Database\nBelow is a selection from the \"Customers\" table in the Northwind sample database:\nSQL HAVING Examples\nThe following SQL statement lists the number of customers in each country. Only include countries with more than 5 customers:\nExampleGet your own SQL Server\nThe following SQL statement lists the number of customers in each country, sorted high to low (Only include countries with more than 5 customers):\nExample\nREMOVE ADS\nDemo Database\nBelow is a selection from the \"Orders\" table in the Northwind sample database:\nAnd a selection from the \"Employees\" table:\nMore HAVING Examples\nThe following SQL statement lists the employees that have registered more than 10 orders:\nExample\nThe following SQL statement lists if the employees \"Davolio\" or \"Fuller\" have registered more than 25 orders:\nExample",
      "examples": [
        "SELECT column_name(s)\nFROM table_name\nWHERE condition\nGROUP BY column_name(s)\nHAVING condition\nORDER BY column_name(s);",
        "SELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country\nHAVING COUNT(CustomerID) > 5;",
        "SELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country\nHAVING COUNT(CustomerID) > 5\nORDER BY COUNT(CustomerID) DESC;",
        "SELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders\nFROM (Orders\nINNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID)\nGROUP BY LastName\nHAVING COUNT(Orders.OrderID) > 10;",
        "SELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders\nFROM Orders\nINNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\nWHERE LastName = 'Davolio' OR LastName = 'Fuller'\nGROUP BY LastName\nHAVING COUNT(Orders.OrderID) > 25;",
        "HAVING",
        "WHERE"
      ]
    },
    {
      "title": "SQL EXISTS Operator",
      "summary": "The SQL EXISTS Operator\nThe EXISTS operator is used to test for the existence of any record in a subquery.\nThe EXISTS operator returns TRUE if the subquery returns one or more records.\nEXISTS Syntax\nDemo Database\nBelow is a selection from the \"Products\" table in the Northwind sample database:\nAnd a selection from the \"Suppliers\" table:\nREMOVE ADS\nSQL EXISTS Examples\nThe following SQL statement returns TRUE and lists the suppliers with a product price less than 20:\nExampleGet your own SQL Server\nThe following SQL statement returns TRUE and lists the suppliers with a product price equal to 22:\nExample",
      "examples": [
        "SELECT column_name(s)\nFROM table_name\nWHERE EXISTS\n(SELECT column_name FROM table_name WHERE condition);",
        "SELECT SupplierName\nFROM Suppliers\nWHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price < 20);",
        "EXISTS"
      ]
    },
    {
      "title": "SQL ANY and ALL Operators",
      "summary": "The SQL ANY and ALL Operators\nThe ANY and ALL operators allow you to perform a comparison between a single column value and a range of other values.\nThe SQL ANY Operator\nThe ANY operator:\nreturns a boolean value as a result\nreturns TRUE if ANY of the subquery values meet the condition\nANY means that the condition will be true if the operation is true for any of the values in the range.\nANY Syntax\nNote: The operator must be a standard comparison operator (=, <>, !=, >, >=, <, or <=).\nThe SQL ALL Operator\nThe ALL operator:\nreturns a boolean value as a result\nreturns TRUE if ALL of the subquery values meet the condition\nis used with SELECT, WHERE and HAVING statements\nALL means that the condition will be true only if the operation is true for all values in the range.\nALL Syntax With SELECT\nALL Syntax With WHERE or HAVING\nNote: The operator must be a standard comparison operator (=, <>, !=, >, >=, <, or <=).\nDemo Database\nBelow is a selection from the \"Products\" table in the Northwind sample database:\nAnd a selection from the \"OrderDetails\" table:\nREMOVE ADS\nSQL ANY Examples\nThe following SQL statement lists the ProductName if it finds ANY records in the OrderDetails table has Quantity equal to 10 (this will return TRUE because the Quantity column has some values of 10):\nExampleGet your own SQL Server\nThe following SQL statement lists the ProductName if it finds ANY records in the OrderDetails table has Quantity larger than 99 (this will return TRUE because the Quantity column has some values larger than 99):\nExample\nThe following SQL statement lists the ProductName if it finds ANY records in the OrderDetails table has Quantity larger than 1000 (this will return FALSE because the Quantity column has no values larger than 1000):\nExample\nSQL ALL Examples\nThe following SQL statement lists ALL the product names:\nExample\nThe following SQL statement lists the ProductName if ALL the records in the OrderDetails table has Quantity equal to 10. This will of course return FALSE because the Quantity column has many different values (not only the value of 10):\nExample",
      "examples": [
        "SELECT column_name(s)\nFROM table_name\nWHERE column_name operator ANY\n(SELECT column_name\nFROM table_name\nWHERE condition);",
        "SELECT ALL column_name(s)\nFROM table_name\nWHERE condition;",
        "SELECT ProductName\nFROM Products\nWHERE ProductID = ANY\n(SELECT ProductID\nFROM OrderDetails\nWHERE Quantity = 10);",
        "SELECT ProductName\nFROM Products\nWHERE ProductID = ANY\n(SELECT ProductID\nFROM OrderDetails\nWHERE Quantity > 1000);",
        "SELECT ALL ProductName\nFROM Products\nWHERE TRUE;",
        "ANY",
        "ALL",
        "SELECT",
        "WHERE",
        "HAVING"
      ]
    },
    {
      "title": "SQL SELECT INTO Statement",
      "summary": "The SQL SELECT INTO Statement\nThe SELECT INTO statement copies data from one table into a new table.\nSELECT INTO Syntax\nCopy all columns into a new table:\nCopy only some columns into a new table:\nThe new table will be created with the column-names and types as defined in the old table. You can create new column names using the AS clause.\nSQL SELECT INTO Examples\nThe following SQL statement creates a backup copy of Customers:\nThe following SQL statement uses the IN clause to copy the table into a new table in another database:\nThe following SQL statement copies only a few columns into a new table:\nThe following SQL statement copies only the German customers into a new table:\nThe following SQL statement copies data from more than one table into a new table:\nTip: SELECT INTO can also be used to create a new, empty table using the schema of another. Just add a WHERE clause that causes the query to return no data:",
      "examples": [
        "SELECT *\nINTO newtable [IN externaldb]\nFROM oldtable\nWHERE condition;",
        "SELECT column1, column2, column3, ...\nINTO newtable [IN externaldb]\nFROM oldtable\nWHERE condition;",
        "SELECT * INTO CustomersBackup2017\nFROM Customers;",
        "SELECT * INTO CustomersBackup2017 IN 'Backup.mdb'\nFROM Customers;",
        "SELECT CustomerName, ContactName INTO CustomersBackup2017\nFROM Customers;",
        "SELECT * INTO CustomersGermany\nFROM Customers\nWHERE Country = 'Germany';",
        "SELECT Customers.CustomerName, Orders.OrderID\nINTO CustomersOrderBackup2017\nFROM Customers\nLEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID;",
        "SELECT * INTO newtable\nFROM oldtable\nWHERE 1 = 0;",
        "SELECT INTO",
        "AS",
        "IN",
        "WHERE"
      ]
    },
    {
      "title": "SQL INSERT INTO SELECT Statement",
      "summary": "The SQL INSERT INTO SELECT Statement\nThe INSERT INTO SELECT statement copies data from one table and inserts it into another table.\nThe INSERT INTO SELECT statement requires that the data types in source and target tables match.\nNote: The existing records in the target table are unaffected.\nINSERT INTO SELECT Syntax\nCopy all columns from one table to another table:\nCopy only some columns from one table into another table:\nDemo Database\nIn this tutorial we will use the well-known Northwind sample database.\nBelow is a selection from the \"Customers\" table:\nAnd a selection from the \"Suppliers\" table:\nREMOVE ADS\nSQL INSERT INTO SELECT Examples\nExampleGet your own SQL Server\nCopy \"Suppliers\" into \"Customers\" (the columns that are not filled with data, will contain NULL):\nExample\nCopy \"Suppliers\" into \"Customers\" (fill all columns):\nExample\nCopy only the German suppliers into \"Customers\":",
      "examples": [
        "INSERT INTO table2\nSELECT * FROM table1\nWHERE condition;",
        "INSERT INTO table2 (column1, column2, column3, ...)\nSELECT column1, column2, column3, ...\nFROM table1\nWHERE condition;",
        "INSERT INTO Customers (CustomerName, City, Country)\nSELECT SupplierName, City, Country FROM Suppliers;",
        "INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)\nSELECT SupplierName, ContactName, Address, City, PostalCode, Country FROM Suppliers;",
        "INSERT INTO Customers (CustomerName, City, Country)\nSELECT SupplierName, City, Country FROM Suppliers\nWHERE Country='Germany';",
        "INSERT INTO SELECT"
      ]
    },
    {
      "title": "SQL CASE Expression",
      "summary": "The SQL CASE Expression\nThe CASE expression goes through conditions and returns a value when the first condition is met (like an if-then-else statement). So, once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the ELSE clause.\nIf there is no ELSE part and no conditions are true, it returns NULL.\nCASE Syntax\nDemo Database\nBelow is a selection from the \"OrderDetails\" table in the Northwind sample database:\nREMOVE ADS\nSQL CASE Examples\nThe following SQL goes through conditions and returns a value when the first condition is met:\nExampleGet your own SQL Server\nThe following SQL will order the customers by City. However, if City is NULL, then order by Country:\nExample",
      "examples": [
        "CASE\nWHEN condition1 THEN result1\nWHEN condition2 THEN result2\nWHEN conditionN THEN resultN\nELSE result\nEND;",
        "SELECT OrderID, Quantity,\nCASE\nWHEN Quantity > 30 THEN 'The quantity is greater than 30'\nWHEN Quantity = 30 THEN 'The quantity is 30'\nELSE 'The quantity is under 30'\nEND AS QuantityText\nFROM OrderDetails;",
        "SELECT CustomerName, City, Country\nFROM Customers\nORDER BY\n(CASE\nWHEN City IS NULL THEN Country\nELSE City\nEND);",
        "CASE",
        "ELSE"
      ]
    },
    {
      "title": "SQL NULL Functions",
      "summary": "SQL IFNULL(), ISNULL(), COALESCE(), and NVL() Functions\nLook at the following \"Products\" table:\nSuppose that the \"UnitsOnOrder\" column is optional, and may contain NULL values.\nLook at the following SELECT statement:\nIn the example above, if any of the \"UnitsOnOrder\" values are NULL, the result will be NULL.\nSolutions\nMySQL\nThe MySQL IFNULL() function lets you return an alternative value if an expression is NULL:\nor we can use the COALESCE() function, like this:\nSQL Server\nThe SQL Server ISNULL() function lets you return an alternative value when an expression is NULL:\nor we can use the COALESCE() function, like this:\nMS Access\nThe MS Access IsNull() function returns TRUE (-1) if the expression is a null value, otherwise FALSE (0):\nOracle\nThe Oracle NVL() function achieves the same result:\nor we can use the COALESCE() function, like this:",
      "examples": [
        "SELECT ProductName, UnitPrice * (UnitsInStock + UnitsOnOrder)\nFROM Products;",
        "SELECT ProductName, UnitPrice * (UnitsInStock + IFNULL(UnitsOnOrder, 0))\nFROM Products;",
        "SELECT ProductName, UnitPrice * (UnitsInStock + COALESCE(UnitsOnOrder, 0))\nFROM Products;",
        "SELECT ProductName, UnitPrice * (UnitsInStock + ISNULL(UnitsOnOrder, 0))\nFROM Products;",
        "SELECT ProductName, UnitPrice * (UnitsInStock + IIF(IsNull(UnitsOnOrder), 0, UnitsOnOrder))\nFROM Products;",
        "SELECT ProductName, UnitPrice * (UnitsInStock + NVL(UnitsOnOrder, 0))\nFROM Products;",
        "IFNULL()",
        "COALESCE()",
        "ISNULL()",
        "IsNull()",
        "NVL()"
      ]
    },
    {
      "title": "SQL Stored Procedures for SQL Server",
      "summary": "What is a Stored Procedure?\nA stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again.\nSo if you have an SQL query that you write over and over again, save it as a stored procedure, and then just call it to execute it.\nYou can also pass parameters to a stored procedure, so that the stored procedure can act based on the parameter value(s) that is passed.\nStored Procedure Syntax\nExecute a Stored Procedure\nDemo Database\nBelow is a selection from the \"Customers\" table in the Northwind sample database:\nStored Procedure Example\nThe following SQL statement creates a stored procedure named \"SelectAllCustomers\" that selects all records from the \"Customers\" table:\nExampleGet your own SQL Server\nExecute the stored procedure above as follows:\nExample\nREMOVE ADS\nStored Procedure With One Parameter\nThe following SQL statement creates a stored procedure that selects Customers from a particular City from the \"Customers\" table:\nExample\nExecute the stored procedure above as follows:\nExample\nStored Procedure With Multiple Parameters\nSetting up multiple parameters is very easy. Just list each parameter and the data type separated by a comma as shown below.\nThe following SQL statement creates a stored procedure that selects Customers from a particular City with a particular PostalCode from the \"Customers\" table:\nExample\nExecute the stored procedure above as follows:\nExample",
      "examples": [
        "CREATE PROCEDURE procedure_name\nAS\nsql_statement\nGO;",
        "EXEC procedure_name;",
        "CREATE PROCEDURE SelectAllCustomers\nAS\nSELECT * FROM Customers\nGO;",
        "EXEC SelectAllCustomers;",
        "CREATE PROCEDURE SelectAllCustomers @City nvarchar(30)\nAS\nSELECT * FROM Customers WHERE City = @City\nGO;",
        "EXEC SelectAllCustomers @City = 'London';",
        "CREATE PROCEDURE SelectAllCustomers @City nvarchar(30), @PostalCode nvarchar(10)\nAS\nSELECT * FROM Customers WHERE City = @City AND PostalCode = @PostalCode\nGO;",
        "EXEC SelectAllCustomers @City = 'London', @PostalCode = 'WA1 1DP';"
      ]
    },
    {
      "title": "SQL Comments",
      "summary": "SQL Comments\nComments are used to explain sections of SQL statements, or to prevent execution of SQL statements.\nNote: Comments are not supported in Microsoft Access databases!\nSingle Line Comments\nSingle line comments start with --.\nAny text between -- and the end of the line will be ignored (will not be executed).\nThe following example uses a single-line comment as an explanation:\nExampleGet your own SQL Server\nThe following example uses a single-line comment to ignore the end of a line:\nExample\nThe following example uses a single-line comment to ignore a statement:\nExample\nREMOVE ADS\nMulti-line Comments\nMulti-line comments start with /* and end with */.\nAny text between /* and */ will be ignored.\nThe following example uses a multi-line comment as an explanation:\nExample\nThe following example uses a multi-line comment to ignore many statements:\nExample\nTo ignore just a part of a statement, also use the /* */ comment.\nThe following example uses a comment to ignore part of a line:\nExample\nThe following example uses a comment to ignore part of a statement:\nExample",
      "examples": [
        "-- Select all:\nSELECT * FROM Customers;",
        "SELECT * FROM Customers -- WHERE City='Berlin';",
        "-- SELECT * FROM Customers;\nSELECT * FROM Products;",
        "/*Select all the columns\nof all the records\nin the Customers table:*/\nSELECT * FROM Customers;",
        "/*SELECT * FROM Customers;\nSELECT * FROM Products;\nSELECT * FROM Orders;\nSELECT * FROM Categories;*/\nSELECT * FROM Suppliers;",
        "SELECT CustomerName, /*City,*/ Country FROM Customers;",
        "SELECT * FROM Customers WHERE (CustomerName LIKE 'L%'\nOR CustomerName LIKE 'R%' /*OR CustomerName LIKE 'S%'\nOR CustomerName LIKE 'T%'*/ OR CustomerName LIKE 'W%')\nAND Country='USA'\nORDER BY CustomerName;",
        "--",
        "/*",
        "*/"
      ]
    },
    {
      "title": "SQL Operators",
      "summary": "SQL Arithmetic Operators\nSQL Bitwise Operators\nSQL Comparison Operators\nREMOVE ADS\nSQL Compound Operators\nSQL Logical Operators",
      "examples": []
    },
    {
      "title": "SQL CREATE DATABASE Statement",
      "summary": "The SQL CREATE DATABASE Statement\nThe CREATE DATABASE statement is used to create a new SQL database.\nSyntax\nCREATE DATABASE Example\nThe following SQL statement creates a database called \"testDB\":\nExampleGet your own SQL Server\nTip: Make sure you have admin privilege before creating any database. Once a database is created, you can check it in the list of databases with the following SQL command: SHOW DATABASES;",
      "examples": [
        "CREATE DATABASE databasename;",
        "CREATE DATABASE testDB;",
        "CREATE DATABASE",
        "SHOW DATABASES"
      ]
    },
    {
      "title": "SQL DROP DATABASE Statement",
      "summary": "The SQL DROP DATABASE Statement\nThe DROP DATABASE statement is used to drop an existing SQL database.\nSyntax\nNote: Be careful before dropping a database. Deleting a database will result in loss of complete information stored in the database!\nDROP DATABASE Example\nThe following SQL statement drops the existing database \"testDB\":\nExampleGet your own SQL Server\nTip: Make sure you have admin privilege before dropping any database. Once a database is dropped, you can check it in the list of databases with the following SQL command: SHOW DATABASES;",
      "examples": [
        "DROP DATABASE databasename;",
        "DROP DATABASE testDB;",
        "DROP DATABASE",
        "SHOW DATABASES"
      ]
    },
    {
      "title": "SQL BACKUP DATABASE for SQL Server",
      "summary": "The SQL BACKUP DATABASE Statement\nThe BACKUP DATABASE statement is used in SQL Server to create a full back up of an existing SQL database.\nSyntax\nThe SQL BACKUP WITH DIFFERENTIAL Statement\nA differential back up only backs up the parts of the database that have changed since the last full database backup.\nSyntax\nBACKUP DATABASE Example\nThe following SQL statement creates a full back up of the existing database \"testDB\" to the D disk:\nExampleGet your own SQL Server\nTip: Always back up the database to a different drive than the actual database. Then, if you get a disk crash, you will not lose your backup file along with the database.\nREMOVE ADS\nBACKUP WITH DIFFERENTIAL Example\nThe following SQL statement creates a differential back up of the database \"testDB\":\nExample\nTip: A differential back up reduces the back up time (since only the changes are backed up).",
      "examples": [
        "BACKUP DATABASE databasename\nTO DISK = 'filepath';",
        "BACKUP DATABASE databasename\nTO DISK = 'filepath'\nWITH DIFFERENTIAL;",
        "BACKUP DATABASE testDB\nTO DISK = 'D:\\backups\\testDB.bak';",
        "BACKUP DATABASE testDB\nTO DISK = 'D:\\backups\\testDB.bak'\nWITH DIFFERENTIAL;",
        "BACKUP DATABASE"
      ]
    },
    {
      "title": "SQL CREATE TABLE Statement",
      "summary": "The SQL CREATE TABLE Statement\nThe CREATE TABLE statement is used to create a new table in a database.\nSyntax\nThe column parameters specify the names of the columns of the table.\nThe datatype parameter specifies the type of data the column can hold (e.g. varchar, integer, date, etc.).\nTip: For an overview of the available data types, go to our complete Data Types Reference.\nSQL CREATE TABLE Example\nThe following example creates a table called \"Persons\" that contains five columns: PersonID, LastName, FirstName, Address, and City:\nExampleGet your own SQL Server\nThe PersonID column is of type int and will hold an integer.\nThe LastName, FirstName, Address, and City columns are of type varchar and will hold characters, and the maximum length for these fields is 255 characters.\nThe empty \"Persons\" table will now look like this:\nTip: The empty \"Persons\" table can now be filled with data with the SQL INSERT INTO statement.\nREMOVE ADS\nCreate Table Using Another Table\nA copy of an existing table can also be created using CREATE TABLE.\nThe new table gets the same column definitions. All columns or specific columns can be selected.\nIf you create a new table using an existing table, the new table will be filled with the existing values from the old table.\nSyntax\nThe following SQL creates a new table called \"TestTable\" (which is a copy of the \"Customers\" table):\nExample",
      "examples": [
        "CREATE TABLE table_name (\ncolumn1 datatype,\ncolumn2 datatype,\ncolumn3 datatype,\n....\n);",
        "CREATE TABLE Persons (\nPersonID int,\nLastName varchar(255),\nFirstName varchar(255),\nAddress varchar(255),\nCity varchar(255)\n);",
        "CREATE TABLE new_table_name AS\nSELECT column1, column2,...\nFROM existing_table_name\nWHERE ....;",
        "CREATE TABLE TestTable AS\nSELECT customername, contactname\nFROM customers;",
        "CREATE TABLE"
      ]
    },
    {
      "title": "SQL DROP TABLE Statement",
      "summary": "The SQL DROP TABLE Statement\nThe DROP TABLE statement is used to drop an existing table in a database.\nSyntax\nNote: Be careful before dropping a table. Deleting a table will result in loss of complete information stored in the table!\nSQL DROP TABLE Example\nThe following SQL statement drops the existing table \"Shippers\":\nExampleGet your own SQL Server\nSQL TRUNCATE TABLE\nThe TRUNCATE TABLE statement is used to delete the data inside a table, but not the table itself.\nSyntax",
      "examples": [
        "DROP TABLE table_name;",
        "DROP TABLE Shippers;",
        "TRUNCATE TABLE table_name;",
        "DROP TABLE",
        "TRUNCATE TABLE"
      ]
    },
    {
      "title": "SQL ALTER TABLE Statement",
      "summary": "SQL ALTER TABLE Statement\nThe ALTER TABLE statement is used to add, delete, or modify columns in an existing table.\nThe ALTER TABLE statement is also used to add and drop various constraints on an existing table.\nALTER TABLE - ADD Column\nTo add a column in a table, use the following syntax:\nThe following SQL adds an \"Email\" column to the \"Customers\" table:\nExampleGet your own SQL Server\nALTER TABLE - DROP COLUMN\nTo delete a column in a table, use the following syntax (notice that some database systems don't allow deleting a column):\nThe following SQL deletes the \"Email\" column from the \"Customers\" table:\nExample\nALTER TABLE - RENAME COLUMN\nTo rename a column in a table, use the following syntax:\nTo rename a column in a table in SQL Server, use the following syntax:\nSQL Server:\nALTER TABLE - ALTER/MODIFY DATATYPE\nTo change the data type of a column in a table, use the following syntax:\nSQL Server / MS Access:\nMy SQL / Oracle (prior version 10G):\nOracle 10G and later:\nREMOVE ADS\nSQL ALTER TABLE Example\nLook at the \"Persons\" table:\nNow we want to add a column named \"DateOfBirth\" in the \"Persons\" table.\nWe use the following SQL statement:\nNotice that the new column, \"DateOfBirth\", is of type date and is going to hold a date. The data type specifies what type of data the column can hold. For a complete reference of all the data types available in MS Access, MySQL, and SQL Server, go to our complete Data Types reference.\nThe \"Persons\" table will now look like this:\nChange Data Type Example\nNow we want to change the data type of the column named \"DateOfBirth\" in the \"Persons\" table.\nWe use the following SQL statement:\nNotice that the \"DateOfBirth\" column is now of type year and is going to hold a year in a two- or four-digit format.\nDROP COLUMN Example\nNext, we want to delete the column named \"DateOfBirth\" in the \"Persons\" table.\nWe use the following SQL statement:\nThe \"Persons\" table will now look like this:",
      "examples": [
        "ALTER TABLE table_name\nADD column_name datatype;",
        "ALTER TABLE Customers\nADD Email varchar(255);",
        "ALTER TABLE table_name\nDROP COLUMN column_name;",
        "ALTER TABLE Customers\nDROP COLUMN Email;",
        "ALTER TABLE table_name\nRENAME COLUMN old_name to new_name;",
        "EXEC sp_rename 'table_name.old_name',  'new_name', 'COLUMN';",
        "ALTER TABLE table_name\nALTER COLUMN column_name datatype;",
        "ALTER TABLE table_name\nMODIFY COLUMN column_name datatype;",
        "ALTER TABLE table_name\nMODIFY column_name datatype;",
        "ALTER TABLE Persons\nADD DateOfBirth date;",
        "ALTER TABLE Persons\nALTER COLUMN DateOfBirth year;",
        "ALTER TABLE Persons\nDROP COLUMN DateOfBirth;",
        "ALTER TABLE"
      ]
    },
    {
      "title": "SQL Constraints",
      "summary": "SQL constraints are used to specify rules for data in a table.\nSQL Create Constraints\nConstraints can be specified when the table is created with the CREATE TABLE statement, or after the table is created with the ALTER TABLE statement.\nSyntax\nSQL Constraints\nSQL constraints are used to specify rules for the data in a table.\nConstraints are used to limit the type of data that can go into a table. This ensures the accuracy and reliability of the data in the table. If there is any violation between the constraint and the data action, the action is aborted.\nConstraints can be column level or table level. Column level constraints apply to a column, and table level constraints apply to the whole table.\nThe following constraints are commonly used in SQL:\nNOT NULL - Ensures that a column cannot have a NULL value\nUNIQUE - Ensures that all values in a column are different\nPRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table\nFOREIGN KEY - Prevents actions that would destroy links between tables\nCHECK - Ensures that the values in a column satisfies a specific condition\nDEFAULT - Sets a default value for a column if no value is specified\nCREATE INDEX - Used to create and retrieve data from the database very quickly",
      "examples": [
        "CREATE TABLE table_name (\ncolumn1 datatype constraint,\ncolumn2 datatype constraint,\ncolumn3 datatype constraint,\n....\n);",
        "CREATE TABLE",
        "ALTER TABLE",
        "NOT NULL",
        "UNIQUE",
        "PRIMARY KEY",
        "FOREIGN KEY",
        "CHECK",
        "DEFAULT",
        "CREATE INDEX"
      ]
    },
    {
      "title": "SQL NOT NULL Constraint",
      "summary": "SQL NOT NULL Constraint\nBy default, a column can hold NULL values.\nThe NOT NULL constraint enforces a column to NOT accept NULL values.\nThis enforces a field to always contain a value, which means that you cannot insert a new record, or update a record without adding a value to this field.\nSQL NOT NULL on CREATE TABLE\nThe following SQL ensures that the \"ID\", \"LastName\", and \"FirstName\" columns will NOT accept NULL values when the \"Persons\" table is created:\nExampleGet your own SQL Server\nSQL NOT NULL on ALTER TABLE\nTo create a NOT NULL constraint on the \"Age\" column when the \"Persons\" table is already created, use the following SQL:\nSQL Server / MS Access:\nMy SQL / Oracle (prior version 10G):\nOracle 10G and later:",
      "examples": [
        "CREATE TABLE Persons (\nID int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255) NOT NULL,\nAge int\n);",
        "ALTER TABLE Persons\nALTER COLUMN Age int NOT NULL;",
        "ALTER TABLE Persons\nMODIFY COLUMN Age int NOT NULL;",
        "ALTER TABLE Persons\nMODIFY Age int NOT NULL;",
        "NOT NULL"
      ]
    },
    {
      "title": "SQL UNIQUE Constraint",
      "summary": "SQL UNIQUE Constraint\nThe UNIQUE constraint ensures that all values in a column are different.\nBoth the UNIQUE and PRIMARY KEY constraints provide a guarantee for uniqueness for a column or set of columns.\nA PRIMARY KEY constraint automatically has a UNIQUE constraint.\nHowever, you can have many UNIQUE constraints per table, but only one PRIMARY KEY constraint per table.\nSQL UNIQUE Constraint on CREATE TABLE\nThe following SQL creates a UNIQUE constraint on the \"ID\" column when the \"Persons\" table is created:\nSQL Server / Oracle / MS Access:\nMySQL:\nTo name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax:\nMySQL / SQL Server / Oracle / MS Access:\nREMOVE ADS\nSQL UNIQUE Constraint on ALTER TABLE\nTo create a UNIQUE constraint on the \"ID\" column when the table is already created, use the following SQL:\nMySQL / SQL Server / Oracle / MS Access:\nTo name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax:\nMySQL / SQL Server / Oracle / MS Access:\nDROP a UNIQUE Constraint\nTo drop a UNIQUE constraint, use the following SQL:\nMySQL:\nSQL Server / Oracle / MS Access:",
      "examples": [
        "CREATE TABLE Persons (\nID int NOT NULL UNIQUE,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAge int\n);",
        "CREATE TABLE Persons (\nID int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAge int,\nUNIQUE (ID)\n);",
        "CREATE TABLE Persons (\nID int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAge int,\nCONSTRAINT UC_Person UNIQUE (ID,LastName)\n);",
        "ALTER TABLE Persons\nADD UNIQUE (ID);",
        "ALTER TABLE Persons\nADD CONSTRAINT UC_Person UNIQUE (ID,LastName);",
        "ALTER TABLE Persons\nDROP INDEX UC_Person;",
        "ALTER TABLE Persons\nDROP CONSTRAINT UC_Person;",
        "UNIQUE",
        "PRIMARY KEY"
      ]
    },
    {
      "title": "SQL PRIMARY KEY Constraint",
      "summary": "SQL PRIMARY KEY Constraint\nThe PRIMARY KEY constraint is used to uniquely identify each record in a table.\nPrimary keys must contain unique values, and cannot contain NULL values.\nEach table can have only ONE primary key. The primary key can be a single column or a combination of columns.\nSQL PRIMARY KEY on CREATE TABLE\nThe following SQL creates a PRIMARY KEY on the \"ID\" column when the \"Persons\" table is created:\nMySQL:\nSQL Server / Oracle / MS Access:\nTo define a PRIMARY KEY constraint on multiple columns, use the following SQL syntax:\nMySQL / SQL Server / Oracle / MS Access:\nNote: In the example above there is one PRIMARY KEY (PK_Person). However, the value of the primary key is made up of two columns (ID + LastName).\nREMOVE ADS\nSQL PRIMARY KEY on ALTER TABLE\nTo create a PRIMARY KEY constraint on the \"ID\" column when the table is already created, use the following SQL:\nMySQL / SQL Server / Oracle / MS Access:\nTo define a PRIMARY KEY constraint on multiple columns, use the following SQL syntax:\nMySQL / SQL Server / Oracle / MS Access:\nNote: If you use ALTER TABLE to add a primary key, the primary key column(s) must have been declared with NOT NULL, when the table was first created.\nDROP a PRIMARY KEY Constraint\nTo drop a PRIMARY KEY constraint, use the following SQL:\nMySQL:\nSQL Server / Oracle / MS Access:",
      "examples": [
        "CREATE TABLE Persons (\nID int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAge int,\nPRIMARY KEY (ID)\n);",
        "CREATE TABLE Persons (\nID int NOT NULL PRIMARY KEY,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAge int\n);",
        "CREATE TABLE Persons (\nID int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAge int,\nCONSTRAINT PK_Person PRIMARY KEY (ID,LastName)\n);",
        "ALTER TABLE Persons\nADD PRIMARY KEY (ID);",
        "ALTER TABLE Persons\nADD CONSTRAINT PK_Person PRIMARY KEY (ID,LastName);",
        "ALTER TABLE Persons\nDROP PRIMARY KEY;",
        "ALTER TABLE Persons\nDROP CONSTRAINT PK_Person;",
        "PRIMARY KEY",
        "ALTER TABLE"
      ]
    },
    {
      "title": "SQL FOREIGN KEY Constraint",
      "summary": "SQL FOREIGN KEY Constraint\nThe FOREIGN KEY constraint is used to prevent actions that would destroy links between tables.\nA FOREIGN KEY is a field (or collection of fields) in one table, that refers to the PRIMARY KEY in another table.\nThe table with the foreign key is called the child table, and the table with the primary key is called the referenced or parent table.\nLook at the following two tables:\nPersons Table\nOrders Table\nNotice that the \"PersonID\" column in the \"Orders\" table points to the \"PersonID\" column in the \"Persons\" table.\nThe \"PersonID\" column in the \"Persons\" table is the PRIMARY KEY in the \"Persons\" table.\nThe \"PersonID\" column in the \"Orders\" table is a FOREIGN KEY in the \"Orders\" table.\nThe FOREIGN KEY constraint prevents invalid data from being inserted into the foreign key column, because it has to be one of the values contained in the parent table.\nREMOVE ADS\nSQL FOREIGN KEY on CREATE TABLE\nThe following SQL creates a FOREIGN KEY on the \"PersonID\" column when the \"Orders\" table is created:\nMySQL:\nSQL Server / Oracle / MS Access:\nTo allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax:\nMySQL / SQL Server / Oracle / MS Access:\nSQL FOREIGN KEY on ALTER TABLE\nTo create a FOREIGN KEY constraint on the \"PersonID\" column when the \"Orders\" table is already created, use the following SQL:\nMySQL / SQL Server / Oracle / MS Access:\nTo allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax:\nMySQL / SQL Server / Oracle / MS Access:\nDROP a FOREIGN KEY Constraint\nTo drop a FOREIGN KEY constraint, use the following SQL:\nMySQL:\nSQL Server / Oracle / MS Access:",
      "examples": [
        "CREATE TABLE Orders (\nOrderID int NOT NULL,\nOrderNumber int NOT NULL,\nPersonID int,\nPRIMARY KEY (OrderID),\nFOREIGN KEY (PersonID) REFERENCES Persons(PersonID)\n);",
        "CREATE TABLE Orders (\nOrderID int NOT NULL PRIMARY KEY,\nOrderNumber int NOT NULL,\nPersonID int FOREIGN KEY REFERENCES Persons(PersonID)\n);",
        "CREATE TABLE Orders (\nOrderID int NOT NULL,\nOrderNumber int NOT NULL,\nPersonID int,\nPRIMARY KEY (OrderID),\nCONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID)\nREFERENCES Persons(PersonID)\n);",
        "ALTER TABLE Orders\nADD FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);",
        "ALTER TABLE Orders\nADD CONSTRAINT FK_PersonOrder\nFOREIGN KEY (PersonID) REFERENCES Persons(PersonID);",
        "ALTER TABLE Orders\nDROP FOREIGN KEY FK_PersonOrder;",
        "ALTER TABLE Orders\nDROP CONSTRAINT FK_PersonOrder;",
        "FOREIGN KEY",
        "PRIMARY KEY"
      ]
    },
    {
      "title": "SQL CHECK Constraint",
      "summary": "SQL CHECK Constraint\nThe CHECK constraint is used to limit the value range that can be placed in a column.\nIf you define a CHECK constraint on a column it will allow only certain values for this column.\nIf you define a CHECK constraint on a table it can limit the values in certain columns based on values in other columns in the row.\nSQL CHECK on CREATE TABLE\nThe following SQL creates a CHECK constraint on the \"Age\" column when the \"Persons\" table is created. The CHECK constraint ensures that the age of a person must be 18, or older:\nMySQL:\nSQL Server / Oracle / MS Access:\nTo allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax:\nMySQL / SQL Server / Oracle / MS Access:\nREMOVE ADS\nSQL CHECK on ALTER TABLE\nTo create a CHECK constraint on the \"Age\" column when the table is already created, use the following SQL:\nMySQL / SQL Server / Oracle / MS Access:\nTo allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax:\nMySQL / SQL Server / Oracle / MS Access:\nDROP a CHECK Constraint\nTo drop a CHECK constraint, use the following SQL:\nSQL Server / Oracle / MS Access:\nMySQL:",
      "examples": [
        "CREATE TABLE Persons (\nID int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAge int,\nCHECK (Age>=18)\n);",
        "CREATE TABLE Persons (\nID int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAge int CHECK (Age>=18)\n);",
        "CREATE TABLE Persons (\nID int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAge int,\nCity varchar(255),\nCONSTRAINT CHK_Person CHECK (Age>=18 AND City='Sandnes')\n);",
        "ALTER TABLE Persons\nADD CHECK (Age>=18);",
        "ALTER TABLE Persons\nADD CONSTRAINT CHK_PersonAge CHECK (Age>=18 AND City='Sandnes');",
        "ALTER TABLE Persons\nDROP CONSTRAINT CHK_PersonAge;",
        "ALTER TABLE Persons\nDROP CHECK CHK_PersonAge;",
        "CHECK"
      ]
    },
    {
      "title": "SQL DEFAULT Constraint",
      "summary": "SQL DEFAULT Constraint\nThe DEFAULT constraint is used to set a default value for a column.\nThe default value will be added to all new records, if no other value is specified.\nSQL DEFAULT on CREATE TABLE\nThe following SQL sets a DEFAULT value for the \"City\" column when the \"Persons\" table is created:\nMy SQL / SQL Server / Oracle / MS Access:\nThe DEFAULT constraint can also be used to insert system values, by using functions like GETDATE():\nREMOVE ADS\nSQL DEFAULT on ALTER TABLE\nTo create a DEFAULT constraint on the \"City\" column when the table is already created, use the following SQL:\nMySQL:\nSQL Server:\nMS Access:\nOracle:\nDROP a DEFAULT Constraint\nTo drop a DEFAULT constraint, use the following SQL:\nMySQL:\nSQL Server / Oracle / MS Access:",
      "examples": [
        "CREATE TABLE Persons (\nID int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAge int,\nCity varchar(255) DEFAULT 'Sandnes'\n);",
        "CREATE TABLE Orders (\nID int NOT NULL,\nOrderNumber int NOT NULL,\nOrderDate date DEFAULT GETDATE()\n);",
        "ALTER TABLE Persons\nALTER City SET DEFAULT 'Sandnes';",
        "ALTER TABLE Persons\nADD CONSTRAINT df_City\nDEFAULT 'Sandnes' FOR City;",
        "ALTER TABLE Persons\nALTER COLUMN City SET DEFAULT 'Sandnes';",
        "ALTER TABLE Persons\nMODIFY City DEFAULT 'Sandnes';",
        "ALTER TABLE Persons\nALTER City DROP DEFAULT;",
        "ALTER TABLE Persons\nALTER COLUMN City DROP DEFAULT;",
        "DEFAULT",
        "GETDATE()"
      ]
    },
    {
      "title": "SQL CREATE INDEX Statement",
      "summary": "SQL CREATE INDEX Statement\nThe CREATE INDEX statement is used to create indexes in tables.\nIndexes are used to retrieve data from the database more quickly than otherwise. The users cannot see the indexes, they are just used to speed up searches/queries.\nNote: Updating a table with indexes takes more time than updating a table without (because the indexes also need an update). So, only create indexes on columns that will be frequently searched against.\nCREATE INDEX Syntax\nCreates an index on a table. Duplicate values are allowed:\nCREATE UNIQUE INDEX Syntax\nCreates a unique index on a table. Duplicate values are not allowed:\nNote: The syntax for creating indexes varies among different databases. Therefore: Check the syntax for creating indexes in your database.\nCREATE INDEX Example\nThe SQL statement below creates an index named \"idx_lastname\" on the \"LastName\" column in the \"Persons\" table:\nIf you want to create an index on a combination of columns, you can list the column names within the parentheses, separated by commas:\nREMOVE ADS\nDROP INDEX Statement\nThe DROP INDEX statement is used to delete an index in a table.\nMS Access:\nSQL Server:\nDB2/Oracle:\nMySQL:",
      "examples": [
        "CREATE INDEX index_name\nON table_name (column1, column2, ...);",
        "CREATE UNIQUE INDEX index_name\nON table_name (column1, column2, ...);",
        "CREATE INDEX idx_lastname\nON Persons (LastName);",
        "CREATE INDEX idx_pname\nON Persons (LastName, FirstName);",
        "DROP INDEX index_name ON table_name;",
        "DROP INDEX table_name.index_name;",
        "DROP INDEX index_name;",
        "ALTER TABLE table_name\nDROP INDEX index_name;",
        "CREATE INDEX",
        "DROP INDEX"
      ]
    },
    {
      "title": "SQL AUTO INCREMENT Field",
      "summary": "AUTO INCREMENT Field\nAuto-increment allows a unique number to be generated automatically when a new record is inserted into a table.\nOften this is the primary key field that we would like to be created automatically every time a new record is inserted.\nSyntax for MySQL\nThe following SQL statement defines the \"Personid\" column to be an auto-increment primary key field in the \"Persons\" table:\nMySQL uses the AUTO_INCREMENT keyword to perform an auto-increment feature.\nBy default, the starting value for AUTO_INCREMENT is 1, and it will increment by 1 for each new record.\nTo let the AUTO_INCREMENT sequence start with another value, use the following SQL statement:\nTo insert a new record into the \"Persons\" table, we will NOT have to specify a value for the \"Personid\" column (a unique value will be added automatically):\nThe SQL statement above would insert a new record into the \"Persons\" table. The \"Personid\" column would be assigned a unique value. The \"FirstName\" column would be set to \"Lars\" and the \"LastName\" column would be set to \"Monsen\".\nSyntax for SQL Server\nThe following SQL statement defines the \"Personid\" column to be an auto-increment primary key field in the \"Persons\" table:\nThe MS SQL Server uses the IDENTITY keyword to perform an auto-increment feature.\nIn the example above, the starting value for IDENTITY is 1, and it will increment by 1 for each new record.\nTip: To specify that the \"Personid\" column should start at value 10 and increment by 5, change it to IDENTITY(10,5).\nTo insert a new record into the \"Persons\" table, we will NOT have to specify a value for the \"Personid\" column (a unique value will be added automatically):\nThe SQL statement above would insert a new record into the \"Persons\" table. The \"Personid\" column would be assigned a unique value. The \"FirstName\" column would be set to \"Lars\" and the \"LastName\" column would be set to \"Monsen\".\nREMOVE ADS\nSyntax for Access\nThe following SQL statement defines the \"Personid\" column to be an auto-increment primary key field in the \"Persons\" table:\nThe MS Access uses the AUTOINCREMENT keyword to perform an auto-increment feature.\nBy default, the starting value for AUTOINCREMENT is 1, and it will increment by 1 for each new record.\nTip: To specify that the \"Personid\" column should start at value 10 and increment by 5, change the autoincrement to AUTOINCREMENT(10,5).\nTo insert a new record into the \"Persons\" table, we will NOT have to specify a value for the \"Personid\" column (a unique value will be added automatically):\nThe SQL statement above would insert a new record into the \"Persons\" table. The \"Personid\" column would be assigned a unique value. The \"FirstName\" column would be set to \"Lars\" and the \"LastName\" column would be set to \"Monsen\".\nSyntax for Oracle\nIn Oracle the code is a little bit more tricky.\nYou will have to create an auto-increment field with the sequence object (this object generates a number sequence).\nUse the following CREATE SEQUENCE syntax:\nThe code above creates a sequence object called seq_person, that starts with 1 and will increment by 1. It will also cache up to 10 values for performance. The cache option specifies how many sequence values will be stored in memory for faster access.\nTo insert a new record into the \"Persons\" table, we will have to use the nextval function (this function retrieves the next value from seq_person sequence):\nThe SQL statement above would insert a new record into the \"Persons\" table. The \"Personid\" column would be assigned the next number from the seq_person sequence. The \"FirstName\" column would be set to \"Lars\" and the \"LastName\" column would be set to \"Monsen\".",
      "examples": [
        "CREATE TABLE Persons (\nPersonid int NOT NULL AUTO_INCREMENT,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAge int,\nPRIMARY KEY (Personid)\n);",
        "ALTER TABLE Persons AUTO_INCREMENT=100;",
        "INSERT INTO Persons (FirstName,LastName)\nVALUES ('Lars','Monsen');",
        "CREATE TABLE Persons (\nPersonid int IDENTITY(1,1) PRIMARY KEY,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAge int\n);",
        "CREATE TABLE Persons (\nPersonid AUTOINCREMENT PRIMARY KEY,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAge int\n);",
        "CREATE SEQUENCE seq_person\nMINVALUE 1\nSTART WITH 1\nINCREMENT BY 1\nCACHE 10;",
        "INSERT INTO Persons (Personid,FirstName,LastName)\nVALUES (seq_person.nextval,'Lars','Monsen');",
        "AUTO_INCREMENT",
        "IDENTITY",
        "IDENTITY(10,5)",
        "AUTOINCREMENT",
        "AUTOINCREMENT(10,5)",
        "CREATE SEQUENCE"
      ]
    },
    {
      "title": "SQL Working With Dates",
      "summary": "SQL Dates\nThe most difficult part when working with dates is to be sure that the format of the date you are trying to insert, matches the format of the date column in the database.\nAs long as your data contains only the date portion, your queries will work as expected. However, if a time portion is involved, it gets more complicated.\nSQL Date Data Types\nMySQL comes with the following data types for storing a date or a date/time value in the database:\nDATE - format YYYY-MM-DD\nDATETIME - format: YYYY-MM-DD HH:MI:SS\nTIMESTAMP - format: YYYY-MM-DD HH:MI:SS\nYEAR - format YYYY or YY\nSQL Server comes with the following data types for storing a date or a date/time value in the database:\nDATE - format YYYY-MM-DD\nDATETIME - format: YYYY-MM-DD HH:MI:SS\nSMALLDATETIME - format: YYYY-MM-DD HH:MI:SS\nTIMESTAMP - format: a unique number\nNote: The date types are chosen for a column when you create a new table in your database!\nSQL Working with Dates\nLook at the following table:\nOrders Table\nNow we want to select the records with an OrderDate of \"2008-11-11\" from the table above.\nWe use the following SELECT statement:\nThe result-set will look like this:\nNote: Two dates can easily be compared if there is no time component involved!\nNow, assume that the \"Orders\" table looks like this (notice the added time-component in the \"OrderDate\" column):\nIf we use the same SELECT statement as above:\nwe will get no result! This is because the query is looking only for dates with no time portion.\nTip: To keep your queries simple and easy to maintain, do not use time-components in your dates, unless you have to!",
      "examples": [
        "SELECT * FROM Orders WHERE OrderDate='2008-11-11'",
        "DATE",
        "DATETIME",
        "TIMESTAMP",
        "YEAR",
        "SMALLDATETIME",
        "SELECT"
      ]
    },
    {
      "title": "SQL Views",
      "summary": "SQL CREATE VIEW Statement\nIn SQL, a view is a virtual table based on the result-set of an SQL statement.\nA view contains rows and columns, just like a real table. The fields in a view are fields from one or more real tables in the database.\nYou can add SQL statements and functions to a view and present the data as if the data were coming from one single table.\nA view is created with the CREATE VIEW statement.\nCREATE VIEW Syntax\nNote: A view always shows up-to-date data! The database engine recreates the view, every time a user queries it.\nSQL CREATE VIEW Examples\nThe following SQL creates a view that shows all customers from Brazil:\nExampleGet your own SQL Server\nWe can query the view above as follows:\nExample\nThe following SQL creates a view that selects every product in the \"Products\" table with a price higher than the average price:\nExample\nWe can query the view above as follows:\nExample\nREMOVE ADS\nSQL Updating a View\nA view can be updated with the CREATE OR REPLACE VIEW statement.\nSQL CREATE OR REPLACE VIEW Syntax\nThe following SQL adds the \"City\" column to the \"Brazil Customers\" view:\nExample\nSQL Dropping a View\nA view is deleted with the DROP VIEW statement.\nSQL DROP VIEW Syntax\nThe following SQL drops the \"Brazil Customers\" view:\nExample",
      "examples": [
        "CREATE VIEW view_name AS\nSELECT column1, column2, ...\nFROM table_name\nWHERE condition;",
        "CREATE VIEW [Brazil Customers] AS\nSELECT CustomerName, ContactName\nFROM Customers\nWHERE Country = 'Brazil';",
        "SELECT * FROM [Brazil Customers];",
        "CREATE VIEW [Products Above Average Price] AS\nSELECT ProductName, Price\nFROM Products\nWHERE Price > (SELECT AVG(Price) FROM Products);",
        "SELECT * FROM [Products Above Average Price];",
        "CREATE OR REPLACE VIEW view_name AS\nSELECT column1, column2, ...\nFROM table_name\nWHERE condition;",
        "CREATE OR REPLACE VIEW [Brazil Customers] AS\nSELECT CustomerName, ContactName, City\nFROM Customers\nWHERE Country = 'Brazil';",
        "DROP VIEW view_name;",
        "DROP VIEW [Brazil Customers];",
        "CREATE VIEW",
        "CREATE OR REPLACE VIEW",
        "DROP VIEW"
      ]
    },
    {
      "title": "SQL Injection",
      "summary": "SQL Injection\nSQL injection is a code injection technique that might destroy your database.\nSQL injection is one of the most common web hacking techniques.\nSQL injection is the placement of malicious code in SQL statements, via web page input.\nSQL in Web Pages\nSQL injection usually occurs when you ask a user for input, like their username/userid, and instead of a name/id, the user gives you an SQL statement that you will unknowingly run on your database.\nLook at the following example which creates a SELECT statement by adding a variable (txtUserId) to a select string. The variable is fetched from user input (getRequestString):\nExampleGet your own SQL Server\nThe rest of this chapter describes the potential dangers of using user input in SQL statements.\nSQL Injection Based on 1=1 is Always True\nLook at the example above again. The original purpose of the code was to create an SQL statement to select a user, with a given user id.\nIf there is nothing to prevent a user from entering \"wrong\" input, the user can enter some \"smart\" input like this:\nUserId:\nThen, the SQL statement will look like this:\nThe SQL above is valid and will return ALL rows from the \"Users\" table, since OR 1=1 is always TRUE.\nDoes the example above look dangerous? What if the \"Users\" table contains names and passwords?\nThe SQL statement above is much the same as this:\nA hacker might get access to all the user names and passwords in a database, by simply inserting 105 OR 1=1 into the input field.\nREMOVE ADS\nSQL Injection Based on \"\"=\"\" is Always True\nHere is an example of a user login on a web site:\nUsername:\nPassword:\nExample\nResult\nA hacker might get access to user names and passwords in a database by simply inserting \" OR \"\"=\" into the user name or password text box:\nUser Name:\nPassword:\nThe code at the server will create a valid SQL statement like this:\nResult\nThe SQL above is valid and will return all rows from the \"Users\" table, since OR \"\"=\"\" is always TRUE.\nSQL Injection Based on Batched SQL Statements\nMost databases support batched SQL statement.\nA batch of SQL statements is a group of two or more SQL statements, separated by semicolons.\nThe SQL statement below will return all rows from the \"Users\" table, then delete the \"Suppliers\" table.\nExample\nLook at the following example:\nExample\nAnd the following input:\nUser id:\nThe valid SQL statement would look like this:\nResult\nUse SQL Parameters for Protection\nTo protect a web site from SQL injection, you can use SQL parameters.\nSQL parameters are values that are added to an SQL query at execution time, in a controlled manner.\nASP.NET Razor Example\nNote that parameters are represented in the SQL statement by a @ marker.\nThe SQL engine checks each parameter to ensure that it is correct for its column and are treated literally, and not as part of the SQL to be executed.\nAnother Example\nExamples\nThe following examples shows how to build parameterized queries in some common web languages.\nSELECT STATEMENT IN ASP.NET:\nINSERT INTO STATEMENT IN ASP.NET:\nINSERT INTO STATEMENT IN PHP:",
      "examples": [
        "txtUserId = getRequestString(\"UserId\");\ntxtSQL = \"SELECT * FROM Users WHERE UserId = \" + txtUserId;",
        "SELECT * FROM Users WHERE UserId = 105 OR 1=1;",
        "SELECT UserId, Name, Password FROM Users WHERE UserId = 105 or 1=1;",
        "uName = getRequestString(\"username\");\nuPass = getRequestString(\"userpassword\");\n\nsql = 'SELECT * FROM Users WHERE Name =\"' + uName + '\" AND Pass =\"' + uPass + '\"'",
        "SELECT * FROM Users WHERE Name =\"John Doe\" AND Pass =\"myPass\"",
        "SELECT * FROM Users WHERE Name =\"\" or \"\"=\"\" AND Pass =\"\" or \"\"=\"\"",
        "SELECT * FROM Users; DROP TABLE Suppliers",
        "SELECT * FROM Users WHERE UserId = 105; DROP TABLE Suppliers;",
        "txtUserId = getRequestString(\"UserId\");\ntxtSQL = \"SELECT * FROM Users WHERE UserId = @0\";\ndb.Execute(txtSQL,txtUserId);",
        "txtNam = getRequestString(\"CustomerName\");\ntxtAdd = getRequestString(\"Address\");\ntxtCit = getRequestString(\"City\");\ntxtSQL = \"INSERT INTO Customers (CustomerName,Address,City) Values(@0,@1,@2)\";\ndb.Execute(txtSQL,txtNam,txtAdd,txtCit);",
        "txtUserId = getRequestString(\"UserId\");\nsql = \"SELECT * FROM Customers WHERE CustomerId = @0\";\ncommand = new SqlCommand(sql);\ncommand.Parameters.AddWithValue(\"@0\",txtUserId);\ncommand.ExecuteReader();",
        "txtNam = getRequestString(\"CustomerName\");\ntxtAdd = getRequestString(\"Address\");\ntxtCit = getRequestString(\"City\");\ntxtSQL = \"INSERT INTO Customers (CustomerName,Address,City) Values(@0,@1,@2)\";\ncommand = new SqlCommand(txtSQL);\ncommand.Parameters.AddWithValue(\"@0\",txtNam);\ncommand.Parameters.AddWithValue(\"@1\",txtAdd);\ncommand.Parameters.AddWithValue(\"@2\",txtCit);\ncommand.ExecuteNonQuery();",
        "$stmt = $dbh->prepare(\"INSERT INTO Customers (CustomerName,Address,City)\nVALUES (:nam, :add, :cit)\");\n$stmt->bindParam(':nam', $txtNam);\n$stmt->bindParam(':add', $txtAdd);\n$stmt->bindParam(':cit', $txtCit);\n$stmt->execute();",
        "SELECT"
      ]
    },
    {
      "title": "SQL Hosting",
      "summary": "SQL Hosting\nIf you want your web site to be able to store and retrieve data from a database, your web server should have access to a database-system that uses the SQL language.\nIf your web server is hosted by an Internet Service Provider (ISP), you will have to look for SQL hosting plans.\nThe most common SQL hosting databases are MS SQL Server, Oracle, MySQL, and MS Access.\nMS SQL Server\nMicrosoft's SQL Server is a popular database software for database-driven web sites with high traffic.\nSQL Server is a very powerful, robust and full featured SQL database system.\nOracle\nOracle is also a popular database software for database-driven web sites with high traffic.\nOracle is a very powerful, robust and full featured SQL database system.\nMySQL\nMySQL is also a popular database software for web sites.\nMySQL is a very powerful, robust and full featured SQL database system.\nMySQL is an inexpensive alternative to the expensive Microsoft and Oracle solutions.\nMS Access\nWhen a web site requires only a simple database, Microsoft Access can be a solution.\nMS Access is not well suited for very high-traffic, and not as powerful as MySQL, SQL Server, or Oracle.",
      "examples": []
    },
    {
      "title": "SQL Data Types for MySQL, SQL Server, and MS Access",
      "summary": "The data type of a column defines what value the column can hold: integer, character, money, date and time, binary, and so on.\nSQL Data Types\nEach column in a database table is required to have a name and a data type.\nAn SQL developer must decide what type of data that will be stored inside each column when creating a table. The data type is a guideline for SQL to understand what type of data is expected inside of each column, and it also identifies how SQL will interact with the stored data.\nNote: Data types might have different names in different database. And even if the name is the same, the size and other details may be different! Always check the documentation!\nMySQL Data Types (Version 8.0)\nIn MySQL there are three main data types: string, numeric, and date and time.\nString Data Types\nNumeric Data Types\nNote: All the numeric data types may have an extra option: UNSIGNED or ZEROFILL. If you add the UNSIGNED option, MySQL disallows negative values for the column. If you add the ZEROFILL option, MySQL automatically also adds the UNSIGNED attribute to the column.\nDate and Time Data Types\nREMOVE ADS\nMS SQL Server Data Types\nString Data Types\nNumeric Data Types\nAllows numbers from -10^38 +1 to 10^38 –1.\nThe p parameter indicates the maximum total number of digits that can be stored (both to the left and to the right of the decimal point). p must be a value from 1 to 38. Default is 18.\nThe s parameter indicates the maximum number of digits stored to the right of the decimal point. s must be a value from 0 to p. Default value is 0\nAllows numbers from -10^38 +1 to 10^38 –1.\nThe p parameter indicates the maximum total number of digits that can be stored (both to the left and to the right of the decimal point). p must be a value from 1 to 38. Default is 18.\nThe s parameter indicates the maximum number of digits stored to the right of the decimal point. s must be a value from 0 to p. Default value is 0\nThe n parameter indicates whether the field should hold 4 or 8 bytes. float(24) holds a 4-byte field and float(53) holds an 8-byte field. Default value of n is 53.\nDate and Time Data Types\nOther Data Types\nMS Access Data Types",
      "examples": []
    },
    {
      "title": "SQL Keywords Reference",
      "summary": "This SQL keywords reference contains the reserved words in SQL.\nSQL Keywords",
      "examples": []
    },
    {
      "title": "SQL ADD Keyword",
      "summary": "ADD\nThe ADD command is used to add a column in an existing table.\nExampleGet your own SQL Server\nAdd an \"Email\" column to the \"Customers\" table:",
      "examples": [
        "ALTER TABLE Customers\nADD Email varchar(255);",
        "ADD"
      ]
    },
    {
      "title": "SQL ADD CONSTRAINT Keyword",
      "summary": "ADD CONSTRAINT\nThe ADD CONSTRAINT command is used to create a constraint after a table is already created.\nThe following SQL adds a constraint named \"PK_Person\" that is a PRIMARY KEY constraint on multiple columns (ID and LastName):\nExampleGet your own SQL Server",
      "examples": [
        "ALTER TABLE Persons\nADD CONSTRAINT PK_Person PRIMARY KEY (ID,LastName);",
        "ADD CONSTRAINT"
      ]
    },
    {
      "title": "SQL ALL Keyword",
      "summary": "ALL\nThe ALL command returns true if all of the subquery values meet the condition.\nThe following SQL statement returns TRUE and lists the productnames if ALL the records in the OrderDetails table has quantity = 10:\nExampleGet your own SQL Server",
      "examples": [
        "SELECT ProductName\nFROM Products\nWHERE ProductID = ALL (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);",
        "ALL"
      ]
    },
    {
      "title": "SQL ALTER Keyword",
      "summary": "ALTER TABLE\nThe ALTER TABLE command adds, deletes, or modifies columns in a table.\nThe ALTER TABLE command also adds and deletes various constraints in a table.\nThe following SQL adds an \"Email\" column to the \"Customers\" table:\nExampleGet your own SQL Server\nThe following SQL deletes the \"Email\" column from the \"Customers\" table:\nExample\nALTER COLUMN\nThe ALTER COLUMN command is used to change the data type of a column in a table.\nThe following SQL changes the data type of the column named \"BirthDate\" in the \"Employees\" table to type year:\nExample",
      "examples": [
        "ALTER TABLE Customers\nADD Email varchar(255);",
        "ALTER TABLE Customers\nDROP COLUMN Email;",
        "ALTER TABLE Employees\nALTER COLUMN BirthDate year;",
        "ALTER TABLE",
        "ALTER COLUMN"
      ]
    },
    {
      "title": "SQL ALTER COLUMN Keyword",
      "summary": "ALTER COLUMN\nThe ALTER COLUMN command is used to change the data type of a column in a table.\nThe following SQL changes the data type of the column named \"BirthDate\" in the \"Employees\" table to type year:\nExampleGet your own SQL Server",
      "examples": [
        "ALTER TABLE Employees\nALTER COLUMN BirthDate year;",
        "ALTER COLUMN"
      ]
    },
    {
      "title": "SQL ALTER TABLE Keyword",
      "summary": "ALTER TABLE\nThe ALTER TABLE command adds, deletes, or modifies columns in a table.\nThe ALTER TABLE command also adds and deletes various constraints in a table.\nThe following SQL adds an \"Email\" column to the \"Customers\" table:\nExampleGet your own SQL Server\nThe following SQL deletes the \"Email\" column from the \"Customers\" table:\nExample",
      "examples": [
        "ALTER TABLE Customers\nADD Email varchar(255);",
        "ALTER TABLE Customers\nDROP COLUMN Email;",
        "ALTER TABLE"
      ]
    },
    {
      "title": "SQL AND Keyword",
      "summary": "AND\nThe AND command is used with WHERE to only include rows where both conditions is true.\nThe following SQL statement selects all fields from \"Customers\" where country is \"Germany\" AND city is \"Berlin\":\nExampleGet your own SQL Server",
      "examples": [
        "SELECT * FROM Customers\nWHERE Country='Germany' AND City='Berlin';",
        "AND"
      ]
    },
    {
      "title": "SQL ANY Keyword",
      "summary": "ANY\nThe ANY command returns true if any of the subquery values meet the condition.\nThe following SQL statement returns TRUE and lists the productnames if it finds ANY records in the OrderDetails table where quantity = 10:\nExampleGet your own SQL Server\nThe following SQL statement returns TRUE and lists the productnames if it finds ANY records in the OrderDetails table where quantity > 99:\nExample",
      "examples": [
        "SELECT ProductName\nFROM Products\nWHERE ProductID = ANY (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);",
        "ANY"
      ]
    },
    {
      "title": "SQL AS Keyword",
      "summary": "AS\nThe AS command is used to rename a column or table with an alias.\nAn alias only exists for the duration of the query.\nAlias for Columns\nThe following SQL statement creates two aliases, one for the CustomerID column and one for the CustomerName column:\nExampleGet your own SQL Server\nThe following SQL statement creates two aliases. Notice that it requires double quotation marks or square brackets if the alias name contains spaces:\nExample\nThe following SQL statement creates an alias named \"Address\" that combine four columns (Address, PostalCode, City and Country):\nExample\nNote: To get the SQL statement above to work in MySQL use the following:\nAlias for Tables\nThe following SQL statement selects all the orders from the customer with CustomerID=4 (Around the Horn). We use the \"Customers\" and \"Orders\" tables, and give them the table aliases of \"c\" and \"o\" respectively (Here we use aliases to make the SQL shorter):\nExample",
      "examples": [
        "SELECT CustomerID AS ID, CustomerName AS Customer\nFROM Customers;",
        "SELECT CustomerName AS Customer, ContactName AS [Contact Person]\nFROM Customers;",
        "SELECT CustomerName, Address + ', ' + PostalCode + ' ' + City + ', ' + Country AS Address\nFROM Customers;",
        "SELECT CustomerName, CONCAT(Address,', ',PostalCode,', ',City,', ',Country) AS Address\nFROM Customers;",
        "SELECT o.OrderID, o.OrderDate, c.CustomerName\nFROM Customers AS c, Orders AS o\nWHERE c.CustomerName=\"Around the Horn\" AND c.CustomerID=o.CustomerID;",
        "AS"
      ]
    },
    {
      "title": "SQL ASC Keyword",
      "summary": "ASC\nThe ASC command is used to sort the data returned in ascending order.\nThe following SQL statement selects all the columns from the \"Customers\" table, sorted by the \"CustomerName\" column:\nExampleGet your own SQL Server",
      "examples": [
        "SELECT * FROM Customers\nORDER BY CustomerName ASC;",
        "ASC"
      ]
    },
    {
      "title": "SQL BACKUP DATABASE Keyword",
      "summary": "BACKUP DATABASE\nThe BACKUP DATABASE command is used in SQL Server to create a full back up of an existing SQL database.\nThe following SQL statement creates a full back up of the existing database \"testDB\" to the D disk:\nExampleGet your own SQL Server\nTip: Always back up the database to a different drive than the actual database. If you get a disk crash, you will not lose your backup file along with the database.\nA differential back up only backs up the parts of the database that have changed since the last full database backup.\nThe following SQL statement creates a differential back up of the database \"testDB\":\nExample\nTip: A differential back up reduces the back up time (since only the changes are backed up).",
      "examples": [
        "BACKUP DATABASE testDB\nTO DISK = 'D:\\backups\\testDB.bak';",
        "BACKUP DATABASE testDB\nTO DISK = 'D:\\backups\\testDB.bak'\nWITH DIFFERENTIAL;",
        "BACKUP DATABASE"
      ]
    },
    {
      "title": "SQL BETWEEN Keyword",
      "summary": "BETWEEN\nThe BETWEEN command is used to select values within a given range. The values can be numbers, text, or dates.\nThe BETWEEN command is inclusive: begin and end values are included.\nThe following SQL statement selects all products with a price BETWEEN 10 and 20:\nExampleGet your own SQL Server\nTo display the products outside the range of the previous example, use NOT BETWEEN:\nExample\nThe following SQL statement selects all products with a ProductName BETWEEN 'Carnarvon Tigers' and 'Mozzarella di Giovanni':\nExample",
      "examples": [
        "SELECT * FROM Products\nWHERE Price BETWEEN 10 AND 20;",
        "SELECT * FROM Products\nWHERE Price NOT BETWEEN 10 AND 20;",
        "SELECT * FROM Products\nWHERE ProductName BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'\nORDER BY ProductName;",
        "BETWEEN"
      ]
    },
    {
      "title": "SQL CASE Keyword",
      "summary": "CASE\nThe CASE command is used is to create different output based on conditions.\nThe following SQL goes through several conditions and returns a value when the specified condition is met:\nExampleGet your own SQL Server\nThe following SQL will order the customers by City. However, if City is NULL, then order by Country:\nExample",
      "examples": [
        "SELECT OrderID, Quantity,\nCASE\nWHEN Quantity > 30 THEN 'The quantity is greater than 30'\nWHEN Quantity = 30 THEN 'The quantity is 30'\nELSE 'The quantity is under 30'\nEND\nFROM OrderDetails;",
        "SELECT CustomerName, City, Country\nFROM Customers\nORDER BY\n(CASE\nWHEN City IS NULL THEN Country\nELSE City\nEND);",
        "CASE"
      ]
    },
    {
      "title": "SQL CHECK Keyword",
      "summary": "CHECK\nThe CHECK constraint limits the value that can be placed in a column.\nSQL CHECK on CREATE TABLE\nThe following SQL creates a CHECK constraint on the \"Age\" column when the \"Persons\" table is created. The CHECK constraint ensures that you can not have any person below 18 years:\nMySQL:\nSQL Server / Oracle / MS Access:\nTo allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax:\nMySQL / SQL Server / Oracle / MS Access:\nSQL CHECK on ALTER TABLE\nTo create a CHECK constraint on the \"Age\" column when the table is already created, use the following SQL:\nMySQL / SQL Server / Oracle / MS Access:\nTo allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax:\nMySQL / SQL Server / Oracle / MS Access:\nDROP a CHECK Constraint\nTo drop a CHECK constraint, use the following SQL:\nSQL Server / Oracle / MS Access:\nMySQL:",
      "examples": [
        "CREATE TABLE Persons (\nAge int,\nCHECK (Age>=18)\n);",
        "CREATE TABLE Persons (\nAge int CHECK (Age>=18)\n);",
        "CREATE TABLE Persons (\nAge int,\nCity varchar(255),\nCONSTRAINT CHK_Person CHECK (Age>=18 AND City='Sandnes')\n);",
        "ALTER TABLE Persons\nADD CHECK (Age>=18);",
        "ALTER TABLE Persons\nADD CONSTRAINT CHK_PersonAge CHECK (Age>=18 AND City='Sandnes');",
        "ALTER TABLE Persons\nDROP CONSTRAINT CHK_PersonAge;",
        "ALTER TABLE Persons\nDROP CHECK CHK_PersonAge;",
        "CHECK"
      ]
    },
    {
      "title": "SQL COLUMN Keyword",
      "summary": "ALTER COLUMN\nThe ALTER COLUMN command is used to change the data type of a column in a table.\nThe following SQL changes the data type of the column named \"BirthDate\" in the \"Employees\" table to type year:\nExampleGet your own SQL Server\nDROP COLUMN\nThe DROP COLUMN command is used to delete a column in an existing table.\nThe following SQL deletes the \"ContactName\" column from the \"Customers\" table:\nExample",
      "examples": [
        "ALTER TABLE Employees\nALTER COLUMN BirthDate year;",
        "ALTER TABLE Customers\nDROP COLUMN ContactName;",
        "ALTER COLUMN",
        "DROP COLUMN"
      ]
    },
    {
      "title": "SQL CONSTRAINT Keyword",
      "summary": "ADD CONSTRAINT\nThe ADD CONSTRAINT command is used to create a constraint after a table is already created.\nThe following SQL adds a constraint named \"PK_Person\" that is a PRIMARY KEY constraint on multiple columns (ID and LastName):\nExampleGet your own SQL Server\nDROP CONSTRAINT\nThe DROP CONSTRAINT command is used to delete a UNIQUE, PRIMARY KEY, FOREIGN KEY, or CHECK constraint.\nDROP a UNIQUE Constraint\nTo drop a UNIQUE constraint, use the following SQL:\nSQL Server / Oracle / MS Access:\nMySQL:\nDROP a PRIMARY KEY Constraint\nTo drop a PRIMARY KEY constraint, use the following SQL:\nSQL Server / Oracle / MS Access:\nMySQL:\nDROP a FOREIGN KEY Constraint\nTo drop a FOREIGN KEY constraint, use the following SQL:\nSQL Server / Oracle / MS Access:\nMySQL:\nDROP a CHECK Constraint\nTo drop a CHECK constraint, use the following SQL:\nSQL Server / Oracle / MS Access:\nMySQL:",
      "examples": [
        "ALTER TABLE Persons\nADD CONSTRAINT PK_Person PRIMARY KEY (ID,LastName);",
        "ALTER TABLE Persons\nDROP CONSTRAINT UC_Person;",
        "ALTER TABLE Persons\nDROP INDEX UC_Person;",
        "ALTER TABLE Persons\nDROP CONSTRAINT PK_Person;",
        "ALTER TABLE Persons\nDROP PRIMARY KEY;",
        "ALTER TABLE Orders\nDROP CONSTRAINT FK_PersonOrder;",
        "ALTER TABLE Orders\nDROP FOREIGN KEY FK_PersonOrder;",
        "ALTER TABLE Persons\nDROP CONSTRAINT CHK_PersonAge;",
        "ALTER TABLE Persons\nDROP CHECK CHK_PersonAge;",
        "ADD CONSTRAINT",
        "DROP CONSTRAINT"
      ]
    },
    {
      "title": "SQL CREATE Keyword",
      "summary": "CREATE DATABASE\nThe CREATE DATABASE command is used is to create a new SQL database.\nThe following SQL creates a database called \"testDB\":\nExampleGet your own SQL Server\nTip: Make sure you have admin privilege before creating any database. Once a database is created, you can check it in the list of databases with the following SQL command: SHOW DATABASES;\nCREATE TABLE\nThe CREATE TABLE command creates a new table in the database.\nThe following SQL creates a table called \"Persons\" that contains five columns: PersonID, LastName, FirstName, Address, and City:\nExample\nCREATE TABLE Using Another Table\nThe following SQL creates a new table called \"TestTables\" (which is a copy of two columns of the \"Customers\" table):\nExample\nCREATE INDEX\nThe CREATE INDEX command is used to create indexes in tables (allows duplicate values).\nIndexes are used to retrieve data from the database very fast. The users cannot see the indexes, they are just used to speed up searches/queries.\nThe following SQL creates an index named \"idx_lastname\" on the \"LastName\" column in the \"Persons\" table:\nIf you want to create an index on a combination of columns, you can list the column names within the parentheses, separated by commas:\nNote: The syntax for creating indexes varies among different databases. Therefore: Check the syntax for creating indexes in your database.\nNote: Updating a table with indexes takes more time than updating a table without (because the indexes also need an update). So, only create indexes on columns that will be frequently searched against.\nCREATE UNIQUE INDEX\nThe CREATE UNIQUE INDEX command creates a unique index on a table (no duplicate values allowed)\nThe following SQL creates an index named \"uidx_pid\" on the \"PersonID\" column in the \"Persons\" table:\nCREATE VIEW\nThe CREATE VIEW command creates a view.\nA view is a virtual table based on the result set of an SQL statement.\nThe following SQL creates a view that selects all customers from Brazil:\nExample\nCREATE OR REPLACE VIEW\nThe CREATE OR REPLACE VIEW command updates a view.\nThe following SQL adds the \"City\" column to the \"Brazil Customers\" view:\nExample\nQuery The View\nWe can query the view above as follows:\nExample\nCREATE PROCEDURE\nThe CREATE PROCEDURE command is used to create a stored procedure.\nA stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again.\nThe following SQL creates a stored procedure named \"SelectAllCustomers\" that selects all records from the \"Customers\" table:\nExample\nExecute the stored procedure above as follows:\nExample",
      "examples": [
        "CREATE DATABASE testDB;",
        "CREATE TABLE Persons (\nPersonID int,\nLastName varchar(255),\nFirstName varchar(255),\nAddress varchar(255),\nCity varchar(255)\n);",
        "CREATE TABLE TestTable AS\nSELECT customername, contactname\nFROM customers;",
        "CREATE INDEX idx_lastname\nON Persons (LastName);",
        "CREATE INDEX idx_pname\nON Persons (LastName, FirstName);",
        "CREATE UNIQUE INDEX uidx_pid\nON Persons (PersonID);",
        "CREATE VIEW [Brazil Customers] AS\nSELECT CustomerName, ContactName\nFROM Customers\nWHERE Country = \"Brazil\";",
        "CREATE OR REPLACE VIEW [Brazil Customers] AS\nSELECT CustomerName, ContactName, City\nFROM Customers\nWHERE Country = \"Brazil\";",
        "SELECT * FROM [Brazil Customers];",
        "CREATE PROCEDURE SelectAllCustomers\nAS\nSELECT * FROM Customers\nGO;",
        "EXEC SelectAllCustomers;",
        "CREATE DATABASE",
        "CREATE TABLE",
        "CREATE INDEX",
        "CREATE UNIQUE INDEX",
        "CREATE VIEW",
        "CREATE OR REPLACE VIEW",
        "CREATE PROCEDURE"
      ]
    },
    {
      "title": "SQL CREATE DATABASE Keyword",
      "summary": "CREATE DATABASE\nThe CREATE DATABASE command is used is to create a new SQL database.\nThe following SQL creates a database called \"testDB\":\nExampleGet your own SQL Server\nTip: Make sure you have admin privilege before creating any database. Once a database is created, you can check it in the list of databases with the following SQL command: SHOW DATABASES;",
      "examples": [
        "CREATE DATABASE testDB;",
        "CREATE DATABASE"
      ]
    },
    {
      "title": "SQL CREATE INDEX Keyword",
      "summary": "CREATE INDEX\nThe CREATE INDEX command is used to create indexes in tables (allows duplicate values).\nIndexes are used to retrieve data from the database very fast. The users cannot see the indexes, they are just used to speed up searches/queries.\nThe following SQL creates an index named \"idx_lastname\" on the \"LastName\" column in the \"Persons\" table:\nIf you want to create an index on a combination of columns, you can list the column names within the parentheses, separated by commas:\nNote: The syntax for creating indexes varies among different databases. Therefore: Check the syntax for creating indexes in your database.\nNote: Updating a table with indexes takes more time than updating a table without (because the indexes also need an update). So, only create indexes on columns that will be frequently searched against.",
      "examples": [
        "CREATE INDEX idx_lastname\nON Persons (LastName);",
        "CREATE INDEX idx_pname\nON Persons (LastName, FirstName);",
        "CREATE INDEX"
      ]
    },
    {
      "title": "SQL CREATE OR REPLACE VIEW Keyword",
      "summary": "CREATE OR REPLACE VIEW\nThe CREATE OR REPLACE VIEW command updates a view.\nThe following SQL adds the \"City\" column to the \"Brazil Customers\" view:\nExampleGet your own SQL Server\nQuery The View\nWe can query the view above as follows:\nExample",
      "examples": [
        "CREATE OR REPLACE VIEW [Brazil Customers] AS\nSELECT CustomerName, ContactName, City\nFROM Customers\nWHERE Country = \"Brazil\";",
        "SELECT * FROM [Brazil Customers];",
        "CREATE OR REPLACE VIEW"
      ]
    },
    {
      "title": "SQL CREATE TABLE Keyword",
      "summary": "CREATE TABLE\nThe CREATE TABLE command creates a new table in the database.\nThe following SQL creates a table called \"Persons\" that contains five columns: PersonID, LastName, FirstName, Address, and City:\nExampleGet your own SQL Server\nCREATE TABLE Using Another Table\nThe following SQL creates a new table called \"TestTables\" (which is a copy of two columns of the \"Customers\" table):\nExample",
      "examples": [
        "CREATE TABLE Persons (\nPersonID int,\nLastName varchar(255),\nFirstName varchar(255),\nAddress varchar(255),\nCity varchar(255)\n);",
        "CREATE TABLE TestTable AS\nSELECT customername, contactname\nFROM customers;",
        "CREATE TABLE"
      ]
    },
    {
      "title": "SQL CREATE PROCEDURE Keyword",
      "summary": "CREATE PROCEDURE\nThe CREATE PROCEDURE command is used to create a stored procedure.\nA stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again.\nThe following SQL creates a stored procedure named \"SelectAllCustomers\" that selects all records from the \"Customers\" table:\nExampleGet your own SQL Server\nExecute the stored procedure above as follows:\nExample",
      "examples": [
        "CREATE PROCEDURE SelectAllCustomers\nAS\nSELECT * FROM Customers\nGO;",
        "EXEC SelectAllCustomers;",
        "CREATE PROCEDURE"
      ]
    },
    {
      "title": "SQL CREATE UNIQUE INDEX Keyword",
      "summary": "CREATE UNIQUE INDEX\nThe CREATE UNIQUE INDEX command creates a unique index on a table (no duplicate values allowed)\nIndexes are used to retrieve data from the database very fast. The users cannot see the indexes, they are just used to speed up searches/queries.\nThe following SQL creates an index named \"uidx_pid\" on the \"PersonID\" column in the \"Persons\" table:\nNote: The syntax for creating indexes varies among different databases. Therefore: Check the syntax for creating indexes in your database.\nNote: Updating a table with indexes takes more time than updating a table without (because the indexes also need an update). So, only create indexes on columns that will be frequently searched against.",
      "examples": [
        "CREATE UNIQUE INDEX uidx_pid\nON Persons (PersonID);",
        "CREATE UNIQUE INDEX"
      ]
    },
    {
      "title": "SQL CREATE VIEW Keyword",
      "summary": "CREATE VIEW\nThe CREATE VIEW command creates a view.\nA view is a virtual table based on the result set of an SQL statement.\nThe following SQL creates a view that selects all customers from Brazil:\nExampleGet your own SQL Server\nQuery The View\nWe can query the view above as follows:\nExample",
      "examples": [
        "CREATE VIEW [Brazil Customers] AS\nSELECT CustomerName, ContactName\nFROM Customers\nWHERE Country = \"Brazil\";",
        "SELECT * FROM [Brazil Customers];",
        "CREATE VIEW"
      ]
    },
    {
      "title": "SQL DATABASE Keyword",
      "summary": "CREATE DATABASE\nThe CREATE DATABASE command is used is to create a new SQL database.\nThe following SQL creates a database called \"testDB\":\nExampleGet your own SQL Server\nTip: Make sure you have admin privilege before creating any database. Once a database is created, you can check it in the list of databases with the following SQL command: SHOW DATABASES;\nDROP DATABASE\nThe DROP DATABASE command is used is to delete an existing SQL database.\nThe following SQL drops a database named \"testDB\":\nExample\nNote: Be careful before dropping a database. Deleting a database will result in loss of complete information stored in the database!",
      "examples": [
        "CREATE DATABASE testDB;",
        "DROP DATABASE testDB;",
        "CREATE DATABASE",
        "DROP DATABASE"
      ]
    },
    {
      "title": "SQL DEFAULT Keyword",
      "summary": "DEFAULT\nThe DEFAULT constraint provides a default value for a column.\nThe default value will be added to all new records if no other value is specified.\nSQL DEFAULT on CREATE TABLE\nThe following SQL sets a DEFAULT value for the \"City\" column when the \"Persons\" table is created:\nMy SQL / SQL Server / Oracle / MS Access:\nThe DEFAULT constraint can also be used to insert system values, by using functions like GETDATE():\nSQL DEFAULT on ALTER TABLE\nTo create a DEFAULT constraint on the \"City\" column when the table is already created, use the following SQL:\nMySQL:\nSQL Server:\nMS Access:\nOracle:\nDROP a DEFAULT Constraint\nTo drop a DEFAULT constraint, use the following SQL:\nMySQL:\nSQL Server / Oracle / MS Access:",
      "examples": [
        "CREATE TABLE Persons (\nCity varchar(255) DEFAULT 'Sandnes'\n);",
        "CREATE TABLE Orders (\nOrderDate date DEFAULT GETDATE()\n);",
        "ALTER TABLE Persons\nALTER City SET DEFAULT 'Sandnes';",
        "ALTER TABLE Persons\nADD CONSTRAINT df_City\nDEFAULT 'Sandnes' FOR City;",
        "ALTER TABLE Persons\nALTER COLUMN City SET DEFAULT 'Sandnes';",
        "ALTER TABLE Persons\nMODIFY City DEFAULT 'Sandnes';",
        "ALTER TABLE Persons\nALTER City DROP DEFAULT;",
        "ALTER TABLE Persons\nALTER COLUMN City DROP DEFAULT;",
        "DEFAULT"
      ]
    },
    {
      "title": "SQL DELETE Keyword",
      "summary": "DELETE\nThe DELETE command is used to delete existing records in a table.\nThe following SQL statement deletes the customer \"Alfreds Futterkiste\" from the \"Customers\" table:\nExampleGet your own SQL Server\nNote: Be careful when deleting records in a table! Notice the WHERE clause in the DELETE statement. The WHERE clause specifies which record(s) should be deleted. If you omit the WHERE clause, all records in the table will be deleted!\nIt is possible to delete all rows in a table without deleting the table. This means that the table structure, attributes, and indexes will be intact:\nThe following SQL statement deletes all rows in the \"Customers\" table, without deleting the table. This means that the table structure, attributes, and indexes will be intact:\nExample",
      "examples": [
        "DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';",
        "DELETE FROM Customers;",
        "DELETE"
      ]
    },
    {
      "title": "SQL DESC Keyword",
      "summary": "DESC\nThe DESC command is used to sort the data returned in descending order.\nThe following SQL statement selects all the columns from the \"Customers\" table, sorted descending by the \"CustomerName\" column:\nExampleGet your own SQL Server",
      "examples": [
        "SELECT * FROM Customers\nORDER BY CustomerName DESC;",
        "DESC"
      ]
    },
    {
      "title": "SQL SELECT DISTINCT Keyword",
      "summary": "SELECT DISTINCT\nThe SELECT DISTINCT command returns only distinct (different) values in the result set.\nThe following SQL statement selects only the DISTINCT values from the \"Country\" column in the \"Customers\" table:\nExampleGet your own SQL Server",
      "examples": [
        "SELECT DISTINCT Country FROM Customers;",
        "SELECT DISTINCT"
      ]
    },
    {
      "title": "SQL DROP Keyword",
      "summary": "DROP COLUMN\nThe DROP COLUMN command is used to delete a column in an existing table.\nThe following SQL deletes the \"ContactName\" column from the \"Customers\" table:\nExampleGet your own SQL Server\nDROP a UNIQUE Constraint\nTo drop a UNIQUE constraint, use the following SQL:\nSQL Server / Oracle / MS Access:\nMySQL:\nDROP a PRIMARY KEY Constraint\nTo drop a PRIMARY KEY constraint, use the following SQL:\nSQL Server / Oracle / MS Access:\nMySQL:\nDROP a FOREIGN KEY Constraint\nTo drop a FOREIGN KEY constraint, use the following SQL:\nSQL Server / Oracle / MS Access:\nMySQL:\nDROP a CHECK Constraint\nTo drop a CHECK constraint, use the following SQL:\nSQL Server / Oracle / MS Access:\nMySQL:\nDROP DEFAULT\nThe DROP DEFAULT command is used to delete a DEFAULT constraint.\nTo drop a DEFAULT constraint, use the following SQL:\nSQL Server / Oracle / MS Access:\nMySQL:\nDROP INDEX\nThe DROP INDEX command is used to delete an index in a table.\nMS Access:\nSQL Server:\nDB2/Oracle:\nMySQL:\nDROP DATABASE\nThe DROP DATABASE command is used is to delete an existing SQL database.\nThe following SQL drops a database named \"testDB\":\nExample\nNote: Be careful before dropping a database. Deleting a database will result in loss of complete information stored in the database!\nDROP TABLE\nThe DROP TABLE command deletes a table in the database.\nThe following SQL deletes the table \"Shippers\":\nExample\nNote: Be careful before deleting a table. Deleting a table results in loss of all information stored in the table!\nDROP VIEW\nThe DROP VIEW command deletes a view.\nThe following SQL drops the \"Brazil Customers\" view:\nExample",
      "examples": [
        "ALTER TABLE Customers\nDROP COLUMN ContactName;",
        "ALTER TABLE Persons\nDROP CONSTRAINT UC_Person;",
        "ALTER TABLE Persons\nDROP INDEX UC_Person;",
        "ALTER TABLE Persons\nDROP CONSTRAINT PK_Person;",
        "ALTER TABLE Persons\nDROP PRIMARY KEY;",
        "ALTER TABLE Orders\nDROP CONSTRAINT FK_PersonOrder;",
        "ALTER TABLE Orders\nDROP FOREIGN KEY FK_PersonOrder;",
        "ALTER TABLE Persons\nDROP CONSTRAINT CHK_PersonAge;",
        "ALTER TABLE Persons\nDROP CHECK CHK_PersonAge;",
        "ALTER TABLE Persons\nALTER COLUMN City DROP DEFAULT;",
        "ALTER TABLE Persons\nALTER City DROP DEFAULT;",
        "DROP INDEX index_name ON table_name;",
        "DROP INDEX table_name.index_name;",
        "DROP INDEX index_name;",
        "ALTER TABLE table_name\nDROP INDEX index_name;",
        "DROP DATABASE testDB;",
        "DROP TABLE Shippers;",
        "DROP VIEW [Brazil Customers];",
        "DROP COLUMN",
        "DROP DEFAULT",
        "DROP INDEX",
        "DROP DATABASE",
        "DROP TABLE",
        "DROP VIEW"
      ]
    },
    {
      "title": "SQL DROP COLUMN Keyword",
      "summary": "DROP COLUMN\nThe DROP COLUMN command is used to delete a column in an existing table.\nThe following SQL deletes the \"ContactName\" column from the \"Customers\" table:\nExampleGet your own SQL Server",
      "examples": [
        "ALTER TABLE Customers\nDROP COLUMN ContactName;",
        "DROP COLUMN"
      ]
    },
    {
      "title": "SQL DROP CONSTRAINT Keyword",
      "summary": "DROP CONSTRAINT\nThe DROP CONSTRAINT command is used to delete a UNIQUE, PRIMARY KEY, FOREIGN KEY, or CHECK constraint.\nDROP a UNIQUE Constraint\nTo drop a UNIQUE constraint, use the following SQL:\nSQL Server / Oracle / MS Access:\nMySQL:\nDROP a PRIMARY KEY Constraint\nTo drop a PRIMARY KEY constraint, use the following SQL:\nSQL Server / Oracle / MS Access:\nMySQL:\nDROP a FOREIGN KEY Constraint\nTo drop a FOREIGN KEY constraint, use the following SQL:\nSQL Server / Oracle / MS Access:\nMySQL:\nDROP a CHECK Constraint\nTo drop a CHECK constraint, use the following SQL:\nSQL Server / Oracle / MS Access:\nMySQL:",
      "examples": [
        "ALTER TABLE Persons\nDROP CONSTRAINT UC_Person;",
        "ALTER TABLE Persons\nDROP INDEX UC_Person;",
        "ALTER TABLE Persons\nDROP CONSTRAINT PK_Person;",
        "ALTER TABLE Persons\nDROP PRIMARY KEY;",
        "ALTER TABLE Orders\nDROP CONSTRAINT FK_PersonOrder;",
        "ALTER TABLE Orders\nDROP FOREIGN KEY FK_PersonOrder;",
        "ALTER TABLE Persons\nDROP CONSTRAINT CHK_PersonAge;",
        "ALTER TABLE Persons\nDROP CHECK CHK_PersonAge;",
        "DROP CONSTRAINT"
      ]
    },
    {
      "title": "SQL DROP DATABASE Keyword",
      "summary": "DROP DATABASE\nThe DROP DATABASE command is used to delete an existing SQL database.\nThe following SQL drops a database named \"testDB\":\nExampleGet your own SQL Server\nNote: Be careful before dropping a database. Deleting a database will result in loss of complete information stored in the database!",
      "examples": [
        "DROP DATABASE testDB;",
        "DROP DATABASE"
      ]
    },
    {
      "title": "SQL DROP DEFAULT Keyword",
      "summary": "DROP DEFAULT\nThe DROP DEFAULT command is used to delete a DEFAULT constraint.\nTo drop a DEFAULT constraint, use the following SQL:\nSQL Server / Oracle / MS Access:\nMySQL:",
      "examples": [
        "ALTER TABLE Persons\nALTER COLUMN City DROP DEFAULT;",
        "ALTER TABLE Persons\nALTER City DROP DEFAULT;",
        "DROP DEFAULT"
      ]
    },
    {
      "title": "SQL DROP INDEX Keyword",
      "summary": "DROP INDEX\nThe DROP INDEX command is used to delete an index in a table.\nMS Access:\nSQL Server:\nDB2/Oracle:\nMySQL:",
      "examples": [
        "DROP INDEX index_name ON table_name;",
        "DROP INDEX table_name.index_name;",
        "DROP INDEX index_name;",
        "ALTER TABLE table_name\nDROP INDEX index_name;",
        "DROP INDEX"
      ]
    },
    {
      "title": "SQL DROP TABLE and TRUNCATE TABLE Keywords",
      "summary": "DROP TABLE\nThe DROP TABLE command deletes a table in the database.\nThe following SQL deletes the table \"Shippers\":\nExampleGet your own SQL Server\nNote: Be careful before deleting a table. Deleting a table results in loss of all information stored in the table!\nTRUNCATE TABLE\nThe TRUNCATE TABLE command deletes the data inside a table, but not the table itself.\nThe following SQL truncates the table \"Categories\":\nExample",
      "examples": [
        "DROP TABLE Shippers;",
        "TRUNCATE TABLE Categories;",
        "DROP TABLE",
        "TRUNCATE TABLE"
      ]
    },
    {
      "title": "SQL DROP VIEW Keyword",
      "summary": "DROP VIEW\nThe DROP VIEW command deletes a view.\nThe following SQL drops the \"Brazil Customers\" view:\nExampleGet your own SQL Server",
      "examples": [
        "DROP VIEW [Brazil Customers];",
        "DROP VIEW"
      ]
    },
    {
      "title": "SQL EXEC Keyword",
      "summary": "EXEC\nThe EXEC command is used to execute a stored procedure.\nThe following SQL executes a stored procedure named \"SelectAllCustomers\":\nExampleGet your own SQL Server",
      "examples": [
        "EXEC SelectAllCustomers;",
        "EXEC"
      ]
    },
    {
      "title": "SQL EXISTS Keyword",
      "summary": "EXISTS\nThe EXISTS command tests for the existence of any record in a subquery, and returns true if the subquery returns one or more records.\nThe following SQL lists the suppliers with a product price less than 20:\nExampleGet your own SQL Server\nThe following SQL lists the suppliers with a product price equal to 22:\nExample",
      "examples": [
        "SELECT SupplierName\nFROM Suppliers\nWHERE EXISTS (SELECT ProductName FROM Products WHERE SupplierId = Suppliers.supplierId AND Price < 20);",
        "EXISTS"
      ]
    },
    {
      "title": "SQL FOREIGN KEY Keyword",
      "summary": "FOREIGN KEY\nThe FOREIGN KEY constraint is a key used to link two tables together.\nA FOREIGN KEY is a field (or collection of fields) in one table that refers to the PRIMARY KEY in another table.\nSQL FOREIGN KEY on CREATE TABLE\nThe following SQL creates a FOREIGN KEY on the \"PersonID\" column when the \"Orders\" table is created:\nMySQL:\nSQL Server / Oracle / MS Access:\nTo allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax:\nMySQL / SQL Server / Oracle / MS Access:\nSQL FOREIGN KEY on ALTER TABLE\nTo create a FOREIGN KEY constraint on the \"PersonID\" column when the \"Orders\" table is already created, use the following SQL:\nMySQL / SQL Server / Oracle / MS Access:\nTo allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax:\nMySQL / SQL Server / Oracle / MS Access:\nDROP a FOREIGN KEY Constraint\nTo drop a FOREIGN KEY constraint, use the following SQL:\nMySQL:\nSQL Server / Oracle / MS Access:",
      "examples": [
        "CREATE TABLE Orders (\nOrderID int NOT NULL,\nOrderNumber int NOT NULL,\nPersonID int,\nPRIMARY KEY (OrderID),\nFOREIGN KEY (PersonID) REFERENCES Persons(PersonID)\n);",
        "CREATE TABLE Orders (\nOrderID int NOT NULL PRIMARY KEY,\nOrderNumber int NOT NULL,\nPersonID int FOREIGN KEY REFERENCES Persons(PersonID)\n);",
        "CREATE TABLE Orders (\nOrderID int NOT NULL,\nOrderNumber int NOT NULL,\nPersonID int,\nPRIMARY KEY (OrderID),\nCONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID)\nREFERENCES Persons(PersonID)\n);",
        "ALTER TABLE Orders\nADD FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);",
        "ALTER TABLE Orders\nADD CONSTRAINT FK_PersonOrder\nFOREIGN KEY (PersonID) REFERENCES Persons(PersonID);",
        "ALTER TABLE Orders\nDROP FOREIGN KEY FK_PersonOrder;",
        "ALTER TABLE Orders\nDROP CONSTRAINT FK_PersonOrder;",
        "FOREIGN KEY"
      ]
    },
    {
      "title": "SQL FROM Keyword",
      "summary": "FROM\nThe FROM command is used to specify which table to select or delete data from.\nThe following SQL statement selects the \"CustomerName\" and \"City\" columns from the \"Customers\" table:\nExampleGet your own SQL Server\nThe following SQL statement selects all the columns from the \"Customers\" table:\nExample\nThe following SQL statement deletes the customer \"Alfreds Futterkiste\" from the \"Customers\" table:\nExample",
      "examples": [
        "SELECT CustomerName, City FROM Customers;",
        "SELECT * FROM Customers;",
        "DELETE FROM Customers\nWHERE CustomerName='Alfreds Futterkiste';",
        "FROM"
      ]
    },
    {
      "title": "SQL FULL OUTER JOIN Keyword",
      "summary": "FULL OUTER JOIN\nThe FULL OUTER JOIN command returns all rows when there is a match in either left table or right table.\nThe following SQL statement selects all customers, and all orders:\nNote: The FULL OUTER JOIN keyword returns all the rows from the left table (Customers), and all the rows from the right table (Orders). If there are rows in \"Customers\" that do not have matches in \"Orders\", or if there are rows in \"Orders\" that do not have matches in \"Customers\", those rows will be listed as well.",
      "examples": [
        "SELECT Customers.CustomerName, Orders.OrderID\nFROM Customers\nFULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID\nORDER BY Customers.CustomerName;",
        "FULL OUTER JOIN"
      ]
    },
    {
      "title": "SQL GROUP BY Keyword",
      "summary": "GROUP BY\nThe GROUP BY command is used to group the result set (used with aggregate functions: COUNT, MAX, MIN, SUM, AVG).\nThe following SQL lists the number of customers in each country:\nExampleGet your own SQL Server\nThe following SQL lists the number of customers in each country, sorted high to low:\nExample",
      "examples": [
        "SELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country;",
        "SELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country\nORDER BY COUNT(CustomerID) DESC;",
        "GROUP BY"
      ]
    },
    {
      "title": "SQL HAVING Keyword",
      "summary": "HAVING\nThe HAVING command is used instead of WHERE with aggregate functions.\nThe following SQL lists the number of customers in each country. Only include countries with more than 5 customers:\nExampleGet your own SQL Server\nThe following SQL lists the number of customers in each country, sorted high to low (Only include countries with more than 5 customers):\nExample",
      "examples": [
        "SELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country\nHAVING COUNT(CustomerID) > 5;",
        "SELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country\nHAVING COUNT(CustomerID) > 5\nORDER BY COUNT(CustomerID) DESC;",
        "HAVING"
      ]
    },
    {
      "title": "SQL IN Keyword",
      "summary": "IN\nThe IN command allows you to specify multiple values in a WHERE clause.\nThe IN operator is a shorthand for multiple OR conditions.\nThe following SQL selects all customers that are located in \"Germany\", \"France\" and \"UK\":\nExampleGet your own SQL Server\nThe following SQL selects all customers that are NOT located in \"Germany\", \"France\" or \"UK\":\nExample\nThe following SQL selects all customers that are from the same countries as the suppliers:\nExample",
      "examples": [
        "SELECT * FROM Customers\nWHERE Country IN ('Germany', 'France', 'UK');",
        "SELECT * FROM Customers\nWHERE Country NOT IN ('Germany', 'France', 'UK');",
        "SELECT * FROM Customers\nWHERE Country IN (SELECT Country FROM Suppliers);",
        "IN"
      ]
    },
    {
      "title": "SQL INDEX Keyword",
      "summary": "CREATE INDEX\nThe CREATE INDEX command is used to create indexes in tables (allows duplicate values).\nIndexes are used to retrieve data from the database very fast. The users cannot see the indexes, they are just used to speed up searches/queries.\nThe following SQL creates an index named \"idx_lastname\" on the \"LastName\" column in the \"Persons\" table:\nIf you want to create an index on a combination of columns, you can list the column names within the parentheses, separated by commas:\nNote: The syntax for creating indexes varies among different databases. Therefore: Check the syntax for creating indexes in your database.\nNote: Updating a table with indexes takes more time than updating a table without (because the indexes also need an update). So, only create indexes on columns that will be frequently searched against.\nDROP INDEX\nThe DROP INDEX command is used to delete an index in a table.\nMS Access:\nSQL Server:\nDB2/Oracle:\nMySQL:",
      "examples": [
        "CREATE INDEX idx_lastname\nON Persons (LastName);",
        "CREATE INDEX idx_pname\nON Persons (LastName, FirstName);",
        "DROP INDEX index_name ON table_name;",
        "DROP INDEX table_name.index_name;",
        "DROP INDEX index_name;",
        "ALTER TABLE table_name\nDROP INDEX index_name;",
        "CREATE INDEX",
        "DROP INDEX"
      ]
    },
    {
      "title": "SQL INNER JOIN Keyword",
      "summary": "INNER JOIN\nThe INNER JOIN command returns rows that have matching values in both tables.\nThe following SQL selects all orders with customer information:\nExampleGet your own SQL Server\nNote: The INNER JOIN keyword selects all rows from both tables as long as there is a match between the columns. If there are records in the \"Orders\" table that do not have matches in \"Customers\", these orders will not be shown!\nThe following SQL statement selects all orders with customer and shipper information:\nExample",
      "examples": [
        "SELECT Orders.OrderID, Customers.CustomerName\nFROM Orders\nINNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;",
        "SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName\nFROM ((Orders\nINNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)\nINNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);",
        "INNER JOIN"
      ]
    },
    {
      "title": "SQL INSERT INTO Keyword",
      "summary": "INSERT INTO\nThe INSERT INTO command is used to insert new rows in a table.\nThe following SQL inserts a new record in the \"Customers\" table:\nExampleGet your own SQL Server\nThe following SQL will insert a new record, but only insert data in the \"CustomerName\", \"City\", and \"Country\" columns (CustomerID will be updated automatically):\nExample",
      "examples": [
        "INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)\nVALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');",
        "INSERT INTO Customers (CustomerName, City, Country)\nVALUES ('Cardinal', 'Stavanger', 'Norway');",
        "INSERT INTO"
      ]
    },
    {
      "title": "SQL INSERT INTO SELECT Keyword",
      "summary": "INSERT INTO SELECT\nThe INSERT INTO SELECT command copies data from one table and inserts it into another table.\nThe following SQL copies \"Suppliers\" into \"Customers\" (the columns that are not filled with data, will contain NULL):\nExampleGet your own SQL Server\nThe following SQL copies \"Suppliers\" into \"Customers\" (fill all columns):\nExample\nThe following SQL copies only the German suppliers into \"Customers\":\nExample",
      "examples": [
        "INSERT INTO Customers (CustomerName, City, Country)\nSELECT SupplierName, City, Country FROM Suppliers;",
        "INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)\nSELECT SupplierName, ContactName, Address, City, PostalCode, Country FROM Suppliers;",
        "INSERT INTO Customers (CustomerName, City, Country)\nSELECT SupplierName, City, Country FROM Suppliers\nWHERE Country='Germany';",
        "INSERT INTO SELECT"
      ]
    },
    {
      "title": "SQL IS NULL Keyword",
      "summary": "IS NULL\nThe IS NULL command is used to test for empty values (NULL values).\nThe following SQL lists all customers with a NULL value in the \"Address\" field:\nExampleGet your own SQL Server\nNote: A NULL value is different from a zero value or a field that contains spaces. A field with a NULL value is one that has been left blank during record creation!\nTip: Always use IS NULL to look for NULL values.",
      "examples": [
        "SELECT CustomerName, ContactName, Address\nFROM Customers\nWHERE Address IS NULL;",
        "IS NULL"
      ]
    },
    {
      "title": "SQL IS NOT NULL Keyword",
      "summary": "IS NOT NULL\nThe IS NOT NULL command is used to test for non-empty values (NOT NULL values).\nThe following SQL lists all customers with a value in the \"Address\" field:\nExampleGet your own SQL Server",
      "examples": [
        "SELECT CustomerName, ContactName, Address\nFROM Customers\nWHERE Address IS NOT NULL;",
        "IS NOT NULL"
      ]
    },
    {
      "title": "SQL JOIN Keyword",
      "summary": "INNER JOIN\nThe INNER JOIN command returns rows that have matching values in both tables.\nThe following SQL selects all orders with customer information:\nExampleGet your own SQL Server\nNote: The INNER JOIN keyword selects all rows from both tables as long as there is a match between the columns. If there are records in the \"Orders\" table that do not have matches in \"Customers\", these orders will not be shown!\nThe following SQL statement selects all orders with customer and shipper information:\nExample\nLEFT JOIN\nThe LEFT JOIN command returns all rows from the left table, and the matching rows from the right table. The result is NULL from the right side, if there is no match.\nThe following SQL will select all customers, and any orders they might have:\nExample\nNote: The LEFT JOIN keyword returns all records from the left table (Customers), even if there are no matches in the right table (Orders).\nRIGHT JOIN\nThe RIGHT JOIN command returns all rows from the right table, and the matching records from the left table. The result is NULL from the left side, when there is no match.\nThe following SQL will return all employees, and any orders they might have placed:\nExample\nNote: The RIGHT JOIN keyword returns all records from the right table (Employees), even if there are no matches in the left table (Orders).\nFULL OUTER JOIN\nThe FULL OUTER JOIN command returns all rows when there is a match in either left table or right table.\nThe following SQL statement selects all customers, and all orders:\nNote: The FULL OUTER JOIN keyword returns all the rows from the left table (Customers), and all the rows from the right table (Orders). If there are rows in \"Customers\" that do not have matches in \"Orders\", or if there are rows in \"Orders\" that do not have matches in \"Customers\", those rows will be listed as well.",
      "examples": [
        "SELECT Orders.OrderID, Customers.CustomerName\nFROM Orders\nINNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;",
        "SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName\nFROM ((Orders\nINNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)\nINNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);",
        "SELECT Customers.CustomerName, Orders.OrderID\nFROM Customers\nLEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID\nORDER BY Customers.CustomerName;",
        "SELECT Orders.OrderID, Employees.LastName, Employees.FirstName\nFROM Orders\nRIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\nORDER BY Orders.OrderID;",
        "SELECT Customers.CustomerName, Orders.OrderID\nFROM Customers\nFULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID\nORDER BY Customers.CustomerName;",
        "INNER JOIN",
        "LEFT JOIN",
        "RIGHT JOIN",
        "FULL OUTER JOIN"
      ]
    },
    {
      "title": "SQL LEFT JOIN Keyword",
      "summary": "LEFT JOIN\nThe LEFT JOIN command returns all rows from the left table, and the matching rows from the right table. The result is NULL from the right side, if there is no match.\nThe following SQL will select all customers, and any orders they might have:\nExampleGet your own SQL Server\nNote: The LEFT JOIN keyword returns all records from the left table (Customers), even if there are no matches in the right table (Orders).",
      "examples": [
        "SELECT Customers.CustomerName, Orders.OrderID\nFROM Customers\nLEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID\nORDER BY Customers.CustomerName;",
        "LEFT JOIN"
      ]
    },
    {
      "title": "SQL LIKE Keyword",
      "summary": "LIKE\nThe LIKE command is used in a WHERE clause to search for a specified pattern in a column.\nYou can use two wildcards with LIKE:\n% - Represents zero, one, or multiple characters\n_ - Represents a single character (MS Access uses a question mark (?) instead)\nThe following SQL selects all customers with a CustomerName starting with \"a\":\nExampleGet your own SQL Server\nThe following SQL selects all customers with a CustomerName ending with \"a\":\nExample\nThe following SQL selects all customers with a CustomerName that have \"or\" in any position:\nExample\nThe following SQL statement selects all customers with a CustomerName that starts with \"a\" and are at least 3 characters in length:\nExample",
      "examples": [
        "SELECT * FROM Customers\nWHERE CustomerName LIKE 'a%';",
        "SELECT * FROM Customers\nWHERE CustomerName LIKE '%a';",
        "SELECT * FROM Customers\nWHERE CustomerName LIKE '%or%';",
        "SELECT * FROM Customers\nWHERE CustomerName LIKE 'a__%';",
        "LIKE"
      ]
    },
    {
      "title": "SQL SELECT TOP, LIMIT and ROWNUM Keywords",
      "summary": "SELECT TOP, LIMIT and ROWNUM\nThe LIMIT, SELECT TOP or ROWNUM command is used to specify the number of records to return.\nNote: SQL Server uses SELECT TOP. MySQL uses LIMIT, and Oracle uses ROWNUM.\nThe following SQL statement selects the first three records from the \"Customers\" table (SQL SERVER):\nExampleGet your own SQL Server\nThe following SQL statement shows the equivalent example using the LIMIT clause (MySQL):\nExample\nThe following SQL statement shows the equivalent example using ROWNUM (Oracle):\nExample",
      "examples": [
        "SELECT TOP 3 * FROM Customers;",
        "SELECT * FROM Customers\nLIMIT 3;",
        "SELECT * FROM Customers\nWHERE ROWNUM <= 3;",
        "LIMIT",
        "SELECT TOP",
        "ROWNUM"
      ]
    },
    {
      "title": "SQL NOT Keyword",
      "summary": "NOT\nThe NOT command is used with WHERE to only include rows where a condition is not true.\nThe following SQL statement selects all fields from \"Customers\" where country is NOT \"Germany\":\nExampleGet your own SQL Server",
      "examples": [
        "SELECT * FROM Customers\nWHERE NOT Country='Germany';",
        "NOT"
      ]
    },
    {
      "title": "SQL NOT NULL Keyword",
      "summary": "NOT NULL\nThe NOT NULL constraint enforces a column to not accept NULL values, which means that you cannot insert or update a record without adding a value to this field.\nThe following SQL ensures that the \"ID\", \"LastName\", and \"FirstName\" columns will NOT accept NULL values:\nExampleGet your own SQL Server\nThe following SQL creates a NOT NULL constraint on the \"Age\" column when the \"Persons\" table is already created:",
      "examples": [
        "CREATE TABLE Persons (\nID int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255) NOT NULL,\nAge int\n);",
        "ALTER TABLE Persons\nMODIFY Age int NOT NULL;",
        "NOT NULL"
      ]
    },
    {
      "title": "SQL OR Keyword",
      "summary": "OR\nThe OR command is used with WHERE to include rows where either condition is true.\nThe following SQL statement selects all fields from \"Customers\" where city is \"Berlin\" OR city is \"München\":\nExampleGet your own SQL Server",
      "examples": [
        "SELECT * FROM Customers\nWHERE City='Berlin' OR City='München';",
        "OR"
      ]
    },
    {
      "title": "SQL ORDER BY Keyword",
      "summary": "ORDER BY\nThe ORDER BY command is used to sort the result set in ascending or descending order.\nThe ORDER BY command sorts the result set in ascending order by default. To sort the records in descending order, use the DESC keyword.\nThe following SQL statement selects all the columns from the \"Customers\" table, sorted by the \"CustomerName\" column:\nExampleGet your own SQL Server\nASC\nThe ASC command is used to sort the data returned in ascending order.\nThe following SQL statement selects all the columns from the \"Customers\" table, sorted by the \"CustomerName\" column:\nExample\nDESC\nThe DESC command is used to sort the data returned in descending order.\nThe following SQL statement selects all the columns from the \"Customers\" table, sorted descending by the \"CustomerName\" column:\nExample",
      "examples": [
        "SELECT * FROM Customers\nORDER BY CustomerName;",
        "SELECT * FROM Customers\nORDER BY CustomerName ASC;",
        "SELECT * FROM Customers\nORDER BY CustomerName DESC;",
        "ORDER BY",
        "DESC",
        "ASC"
      ]
    },
    {
      "title": "SQL FULL OUTER JOIN Keyword",
      "summary": "FULL OUTER JOIN\nThe FULL OUTER JOIN command returns all rows when there is a match in either left table or right table.\nThe following SQL statement selects all customers, and all orders:\nNote: The FULL OUTER JOIN keyword returns all the rows from the left table (Customers), and all the rows from the right table (Orders). If there are rows in \"Customers\" that do not have matches in \"Orders\", or if there are rows in \"Orders\" that do not have matches in \"Customers\", those rows will be listed as well.",
      "examples": [
        "SELECT Customers.CustomerName, Orders.OrderID\nFROM Customers\nFULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID\nORDER BY Customers.CustomerName;",
        "FULL OUTER JOIN"
      ]
    },
    {
      "title": "SQL PRIMARY KEY Keyword",
      "summary": "PRIMARY KEY\nThe PRIMARY KEY constraint uniquely identifies each record in a table.\nA table can have only one primary key, which may consist of one single or of multiple fields.\nSQL PRIMARY KEY on CREATE TABLE\nThe following SQL creates a PRIMARY KEY on the \"ID\" column when the \"Persons\" table is created:\nMySQL:\nSQL Server / Oracle / MS Access:\nTo allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax:\nMySQL / SQL Server / Oracle / MS Access:\nNote: In the example above there is only ONE PRIMARY KEY (PK_Person). However, the VALUE of the primary key is made up of TWO COLUMNS (ID + LastName).\nSQL PRIMARY KEY on ALTER TABLE\nTo create a PRIMARY KEY constraint on the \"ID\" column when the table is already created, use the following SQL:\nMySQL / SQL Server / Oracle / MS Access:\nTo allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax:\nMySQL / SQL Server / Oracle / MS Access:\nNote: If you use the ALTER TABLE statement to add a primary key, the primary key column(s) must already have been declared to not contain NULL values (when the table was first created).\nDROP a PRIMARY KEY Constraint\nTo drop a PRIMARY KEY constraint, use the following SQL:\nMySQL:\nSQL Server / Oracle / MS Access:",
      "examples": [
        "CREATE TABLE Persons (\nID int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAge int,\nPRIMARY KEY (ID)\n);",
        "CREATE TABLE Persons (\nID int NOT NULL PRIMARY KEY,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAge int\n);",
        "CREATE TABLE Persons (\nID int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAge int,\nCONSTRAINT PK_Person PRIMARY KEY (ID,LastName)\n);",
        "ALTER TABLE Persons\nADD PRIMARY KEY (ID);",
        "ALTER TABLE Persons\nADD CONSTRAINT PK_Person PRIMARY KEY (ID,LastName);",
        "ALTER TABLE Persons\nDROP PRIMARY KEY;",
        "ALTER TABLE Persons\nDROP CONSTRAINT PK_Person;",
        "PRIMARY KEY"
      ]
    },
    {
      "title": "SQL CREATE PROCEDURE Keyword",
      "summary": "CREATE PROCEDURE\nThe CREATE PROCEDURE command is used to create a stored procedure.\nA stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again.\nThe following SQL creates a stored procedure named \"SelectAllCustomers\" that selects all records from the \"Customers\" table:\nExampleGet your own SQL Server\nExecute the stored procedure above as follows:\nExample",
      "examples": [
        "CREATE PROCEDURE SelectAllCustomers\nAS\nSELECT * FROM Customers\nGO;",
        "EXEC SelectAllCustomers;",
        "CREATE PROCEDURE"
      ]
    },
    {
      "title": "SQL RIGHT JOIN Keyword",
      "summary": "RIGHT JOIN\nThe RIGHT JOIN command returns all rows from the right table, and the matching records from the left table. The result is NULL from the left side, when there is no match.\nThe following SQL will return all employees, and any orders they might have placed:\nExampleGet your own SQL Server\nNote: The RIGHT JOIN keyword returns all records from the right table (Employees), even if there are no matches in the left table (Orders).",
      "examples": [
        "SELECT Orders.OrderID, Employees.LastName, Employees.FirstName\nFROM Orders\nRIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\nORDER BY Orders.OrderID;",
        "RIGHT JOIN"
      ]
    },
    {
      "title": "SQL SELECT TOP, LIMIT and ROWNUM Keywords",
      "summary": "SELECT TOP, LIMIT and ROWNUM\nThe LIMIT, SELECT TOP or ROWNUM command is used to specify the number of records to return.\nNote: SQL Server uses SELECT TOP. MySQL uses LIMIT, and Oracle uses ROWNUM.\nThe following SQL statement selects the first three records from the \"Customers\" table (SQL SERVER):\nExampleGet your own SQL Server\nThe following SQL statement shows the equivalent example using the LIMIT clause (MySQL):\nExample\nThe following SQL statement shows the equivalent example using ROWNUM (Oracle):\nExample",
      "examples": [
        "SELECT TOP 3 * FROM Customers;",
        "SELECT * FROM Customers\nLIMIT 3;",
        "SELECT * FROM Customers\nWHERE ROWNUM <= 3;",
        "LIMIT",
        "SELECT TOP",
        "ROWNUM"
      ]
    },
    {
      "title": "SQL SELECT Keyword",
      "summary": "SELECT\nThe SELECT command is used to select data from a database. The data returned is stored in a result table, called the result set.\nThe following SQL statement selects the \"CustomerName\" and \"City\" columns from the \"Customers\" table:\nExampleGet your own SQL Server\nThe following SQL statement selects all the columns from the \"Customers\" table:\nExample",
      "examples": [
        "SELECT CustomerName, City FROM Customers;",
        "SELECT * FROM Customers;",
        "SELECT"
      ]
    },
    {
      "title": "SQL SELECT DISTINCT Keyword",
      "summary": "SELECT DISTINCT\nThe SELECT DISTINCT command returns only distinct (different) values in the result set.\nThe following SQL statement selects only the DISTINCT values from the \"Country\" column in the \"Customers\" table:\nExampleGet your own SQL Server",
      "examples": [
        "SELECT DISTINCT Country FROM Customers;",
        "SELECT DISTINCT"
      ]
    },
    {
      "title": "SQL SELECT INTO Keyword",
      "summary": "SELECT INTO\nThe SELECT INTO command copies data from one table and inserts it into a new table.\nThe following SQL statement creates a backup copy of Customers:\nThe following SQL statement uses the IN clause to copy the table into a new table in another database:\nThe following SQL statement copies only a few columns into a new table:\nThe following SQL statement copies only the German customers into a new table:\nThe following SQL statement copies data from more than one table into a new table:",
      "examples": [
        "SELECT * INTO CustomersBackup2017\nFROM Customers;",
        "SELECT * INTO CustomersBackup2017 IN 'Backup.mdb'\nFROM Customers;",
        "SELECT CustomerName, ContactName INTO CustomersBackup2017\nFROM Customers;",
        "SELECT * INTO CustomersGermany\nFROM Customers\nWHERE Country = 'Germany';",
        "SELECT Customers.CustomerName, Orders.OrderID\nINTO CustomersOrderBackup2017\nFROM Customers\nLEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID;",
        "SELECT INTO"
      ]
    },
    {
      "title": "SQL SELECT TOP, LIMIT and ROWNUM Keywords",
      "summary": "SELECT TOP, LIMIT and ROWNUM\nThe LIMIT, SELECT TOP or ROWNUM command is used to specify the number of records to return.\nNote: SQL Server uses SELECT TOP. MySQL uses LIMIT, and Oracle uses ROWNUM.\nThe following SQL statement selects the first three records from the \"Customers\" table (SQL SERVER):\nExampleGet your own SQL Server\nThe following SQL statement shows the equivalent example using the LIMIT clause (MySQL):\nExample\nThe following SQL statement shows the equivalent example using ROWNUM (Oracle):\nExample",
      "examples": [
        "SELECT TOP 3 * FROM Customers;",
        "SELECT * FROM Customers\nLIMIT 3;",
        "SELECT * FROM Customers\nWHERE ROWNUM <= 3;",
        "LIMIT",
        "SELECT TOP",
        "ROWNUM"
      ]
    },
    {
      "title": "SQL SET Keyword",
      "summary": "SET\nThe SET command is used with UPDATE to specify which columns and values that should be updated in a table.\nThe following SQL updates the first customer (CustomerID = 1) with a new ContactName and a new City:\nExampleGet your own SQL Server\nThe following SQL will update the \"ContactName\" field to \"Juan\" for all records where Country is \"Mexico\":\nExample\nNote: Be careful when updating records in a table! Notice the WHERE clause in the UPDATE statement. The WHERE clause specifies which record(s) that should be updated. If you omit the WHERE clause, all records in the table will be updated!",
      "examples": [
        "UPDATE Customers\nSET ContactName = 'Alfred Schmidt', City= 'Frankfurt'\nWHERE CustomerID = 1;",
        "UPDATE Customers\nSET ContactName='Juan'\nWHERE Country='Mexico';",
        "SET"
      ]
    },
    {
      "title": "SQL TABLE Keyword",
      "summary": "CREATE TABLE\nThe CREATE TABLE command creates a new table in the database.\nThe following SQL creates a table called \"Persons\" that contains five columns: PersonID, LastName, FirstName, Address, and City:\nExampleGet your own SQL Server\nCREATE TABLE Using Another Table\nA copy of an existing table can also be created using CREATE TABLE.\nThe following SQL creates a new table called \"TestTables\" (which is a copy of the \"Customers\" table):\nExample\nALTER TABLE\nThe ALTER TABLE command adds, deletes, or modifies columns in a table.\nThe ALTER TABLE command also adds and deletes various constraints in a table.\nThe following SQL adds an \"Email\" column to the \"Customers\" table:\nExample\nThe following SQL deletes the \"Email\" column from the \"Customers\" table:\nExample\nDROP TABLE\nThe DROP TABLE command deletes a table in the database.\nThe following SQL deletes the table \"Shippers\":\nExample\nNote: Be careful before deleting a table. Deleting a table results in loss of all information stored in the table!\nTRUNCATE TABLE\nThe TRUNCATE TABLE command deletes the data inside a table, but not the table itself.\nThe following SQL truncates the table \"Categories\":\nExample",
      "examples": [
        "CREATE TABLE Persons (\nPersonID int,\nLastName varchar(255),\nFirstName varchar(255),\nAddress varchar(255),\nCity varchar(255)\n);",
        "CREATE TABLE TestTable AS\nSELECT customername, contactname\nFROM customers;",
        "ALTER TABLE Customers\nADD Email varchar(255);",
        "ALTER TABLE Customers\nDROP COLUMN Email;",
        "DROP TABLE Shippers;",
        "TRUNCATE TABLE Categories;",
        "CREATE TABLE",
        "ALTER TABLE",
        "DROP TABLE",
        "TRUNCATE TABLE"
      ]
    },
    {
      "title": "SQL SELECT TOP, LIMIT and ROWNUM Keywords",
      "summary": "SELECT TOP, LIMIT and ROWNUM\nThe LIMIT, SELECT TOP or ROWNUM command is used to specify the number of records to return.\nNote: SQL Server uses SELECT TOP. MySQL uses LIMIT, and Oracle uses ROWNUM.\nThe following SQL statement selects the first three records from the \"Customers\" table (SQL SERVER):\nExampleGet your own SQL Server\nThe following SQL statement shows the equivalent example using the LIMIT clause (MySQL):\nExample\nThe following SQL statement shows the equivalent example using ROWNUM (Oracle):\nExample",
      "examples": [
        "SELECT TOP 3 * FROM Customers;",
        "SELECT * FROM Customers\nLIMIT 3;",
        "SELECT * FROM Customers\nWHERE ROWNUM <= 3;",
        "LIMIT",
        "SELECT TOP",
        "ROWNUM"
      ]
    },
    {
      "title": "SQL DROP TABLE and TRUNCATE TABLE Keywords",
      "summary": "DROP TABLE\nThe DROP TABLE command deletes a table in the database.\nThe following SQL deletes the table \"Shippers\":\nExampleGet your own SQL Server\nNote: Be careful before deleting a table. Deleting a table results in loss of all information stored in the table!\nTRUNCATE TABLE\nThe TRUNCATE TABLE command deletes the data inside a table, but not the table itself.\nThe following SQL truncates the table \"Categories\":\nExample",
      "examples": [
        "DROP TABLE Shippers;",
        "TRUNCATE TABLE Categories;",
        "DROP TABLE",
        "TRUNCATE TABLE"
      ]
    },
    {
      "title": "SQL UNION Keyword",
      "summary": "UNION\nThe UNION command combines the result set of two or more SELECT statements (only distinct values)\nThe following SQL statement returns the cities (only distinct values) from both the \"Customers\" and the \"Suppliers\" table:\nExampleGet your own SQL Server",
      "examples": [
        "SELECT City FROM Customers\nUNION\nSELECT City FROM Suppliers\nORDER BY City;",
        "UNION"
      ]
    },
    {
      "title": "SQL UNION ALL Keyword",
      "summary": "UNION ALL\nThe UNION ALL command combines the result set of two or more SELECT statements (allows duplicate values).\nThe following SQL statement returns the cities (duplicate values also) from both the \"Customers\" and the \"Suppliers\" table:\nExampleGet your own SQL Server",
      "examples": [
        "SELECT City FROM Customers\nUNION ALL\nSELECT City FROM Suppliers\nORDER BY City;",
        "UNION ALL"
      ]
    },
    {
      "title": "SQL UNIQUE Keyword",
      "summary": "UNIQUE\nThe UNIQUE constraint ensures that all values in a column are unique.\nSQL UNIQUE Constraint on CREATE TABLE\nThe following SQL creates a UNIQUE constraint on the \"ID\" column when the \"Persons\" table is created:\nSQL Server / Oracle / MS Access:\nMySQL:\nTo name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax:\nMySQL / SQL Server / Oracle / MS Access:\nSQL UNIQUE Constraint on ALTER TABLE\nTo create a UNIQUE constraint on the \"ID\" column when the table is already created, use the following SQL:\nMySQL / SQL Server / Oracle / MS Access:\nTo name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax:\nMySQL / SQL Server / Oracle / MS Access:\nDROP a UNIQUE Constraint\nTo drop a UNIQUE constraint, use the following SQL:\nMySQL:\nSQL Server / Oracle / MS Access:",
      "examples": [
        "CREATE TABLE Persons (\nID int NOT NULL UNIQUE,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAge int\n);",
        "CREATE TABLE Persons (\nID int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAge int,\nUNIQUE (ID)\n);",
        "CREATE TABLE Persons (\nID int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAge int,\nCONSTRAINT UC_Person UNIQUE (ID,LastName)\n);",
        "ALTER TABLE Persons\nADD UNIQUE (ID);",
        "ALTER TABLE Persons\nADD CONSTRAINT UC_Person UNIQUE (ID,LastName);",
        "ALTER TABLE Persons\nDROP INDEX UC_Person;",
        "ALTER TABLE Persons\nDROP CONSTRAINT UC_Person;",
        "UNIQUE"
      ]
    },
    {
      "title": "SQL UPDATE Keyword",
      "summary": "UPDATE\nThe UPDATE command is used to update existing rows in a table.\nThe following SQL statement updates the first customer (CustomerID = 1) with a new contact person and a new city.\nExampleGet your own SQL Server\nThe following SQL statement will update the contactname to \"Juan\" for all records where country is \"Mexico\":\nExample\nNote: Be careful when updating records in a table! Notice the WHERE clause in the UPDATE statement. The WHERE clause specifies which record(s) that should be updated. If you omit the WHERE clause, all records in the table will be updated!",
      "examples": [
        "UPDATE Customers\nSET ContactName = 'Alfred Schmidt', City= 'Frankfurt'\nWHERE CustomerID = 1;",
        "UPDATE Customers\nSET ContactName='Juan'\nWHERE Country='Mexico';",
        "UPDATE"
      ]
    },
    {
      "title": "SQL VALUES Keyword",
      "summary": "VALUES\nThe VALUES command specifies the values of an INSERT INTO statement.\nThe following SQL inserts a new record in the \"Customers\" table:\nExampleGet your own SQL Server\nThe following SQL will insert a new record, but only insert data in the \"CustomerName\", \"City\", and \"Country\" columns (CustomerID will be updated automatically):\nExample",
      "examples": [
        "INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)\nVALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');",
        "INSERT INTO Customers (CustomerName, City, Country)\nVALUES ('Cardinal', 'Stavanger', 'Norway');",
        "VALUES"
      ]
    },
    {
      "title": "SQL VIEW Keyword",
      "summary": "CREATE VIEW\nIn SQL, a view is a virtual table based on the result set of an SQL statement.\nThe CREATE VIEW command creates a view.\nThe following SQL creates a view that selects all customers from Brazil:\nExampleGet your own SQL Server\nQuery The View\nWe can query the view above as follows:\nExample\nCREATE OR REPLACE VIEW\nThe CREATE OR REPLACE VIEW command updates a view.\nThe following SQL adds the \"City\" column to the \"Brazil Customers\" view:\nExample\nDROP VIEW\nThe DROP VIEW command deletes a view.\nThe following SQL drops the \"Brazil Customers\" view:\nExample",
      "examples": [
        "CREATE VIEW [Brazil Customers] AS\nSELECT CustomerName, ContactName\nFROM Customers\nWHERE Country = \"Brazil\";",
        "SELECT * FROM [Brazil Customers];",
        "CREATE OR REPLACE VIEW [Brazil Customers] AS\nSELECT CustomerName, ContactName, City\nFROM Customers\nWHERE Country = \"Brazil\";",
        "DROP VIEW [Brazil Customers];",
        "CREATE VIEW",
        "CREATE OR REPLACE VIEW",
        "DROP VIEW"
      ]
    },
    {
      "title": "SQL WHERE Keyword",
      "summary": "SELECT\nThe WHERE command filters a result set to include only records that fulfill a specified condition.\nThe following SQL statement selects all the customers from \"Mexico\" in the \"Customers\" table:\nExampleGet your own SQL Server\nSQL requires single quotes around text values (most database systems will also allow double quotes).\nHowever, numeric fields should not be enclosed in quotes:\nExample\nNote: The WHERE clause is not only used in SELECT statement, it is also used in UPDATE, DELETE statement, etc.!\nThe following operators can be used in the WHERE clause:",
      "examples": [
        "SELECT * FROM Customers\nWHERE Country='Mexico';",
        "SELECT * FROM Customers\nWHERE CustomerID=1;",
        "WHERE"
      ]
    },
    {
      "title": "MySQL Functions",
      "summary": "MySQL has many built-in functions.\nThis reference contains string, numeric, date, and some advanced functions in MySQL.\nMySQL String Functions\nREMOVE ADS\nMySQL Numeric Functions\nMySQL Date Functions\nMySQL Advanced Functions",
      "examples": []
    },
    {
      "title": "MySQL ASCII() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the ASCII value of the first character in \"CustomerName\":\nDefinition and Usage\nThe ASCII() function returns the ASCII value for the specific character.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT ASCII(CustomerName) AS NumCodeOfFirstChar\nFROM Customers;",
        "ASCII(character)"
      ]
    },
    {
      "title": "MySQL CHAR_LENGTH() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the length of the string:\nDefinition and Usage\nThe CHAR_LENGTH() function return the length of a string (in characters).\nNote: This function is equal to the CHARACTER_LENGTH() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the length of the text in the \"CustomerName\" column:",
      "examples": [
        "SELECT CHAR_LENGTH(\"SQL Tutorial\") AS LengthOfString;",
        "CHAR_LENGTH(string)",
        "SELECT CHAR_LENGTH(CustomerName) AS LengthOfName\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL CHARACTER_LENGTH() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the length of the string:\nDefinition and Usage\nThe CHARACTER_LENGTH() function return the length of a string (in characters).\nNote: This function is equal to the CHAR_LENGTH() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the length of the text in the \"CustomerName\" column:",
      "examples": [
        "SELECT CHARACTER_LENGTH(\"SQL Tutorial\") AS LengthOfString;",
        "CHARACTER_LENGTH(string)",
        "SELECT CHARACTER_LENGTH(CustomerName) AS LengthOfName\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL CONCAT() Function",
      "summary": "ExampleGet your own SQL Server\nAdd several strings together:\nDefinition and Usage\nThe CONCAT() function adds two or more expressions together.\nNote: Also look at the CONCAT_WS() function.\nSyntax\nParameter Values\nNote: If any of the expressions is a NULL value, it returns NULL\nTechnical Details\nMore Examples\nExample\nAdd three columns into one \"Address\" column:",
      "examples": [
        "SELECT CONCAT(\"SQL \", \"Tutorial \", \"is \", \"fun!\") AS ConcatenatedString;",
        "CONCAT(expression1, expression2, expression3,...)",
        "SELECT CONCAT(Address, \" \", PostalCode, \" \", City) AS Address\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL CONCAT_WS() Function",
      "summary": "ExampleGet your own SQL Server\nAdd several expressions together, and add a \"-\" separator between them:\nDefinition and Usage\nThe CONCAT_WS() function adds two or more expressions together with a separator.\nNote: Also look at the CONCAT() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nAdd three columns (and add a space between them) into one \"Address\" column:",
      "examples": [
        "SELECT CONCAT_WS(\"-\", \"SQL\", \"Tutorial\", \"is\", \"fun!\") AS ConcatenatedString;",
        "CONCAT_WS(separator, expression1, expression2, expression3,...)",
        "SELECT CONCAT_WS(\" \", Address, PostalCode, City) AS Address\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL FIELD() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the index position of  \"q\" in the string list:\nDefinition and Usage\nThe FIELD() function returns the index position of a value in a list of values.\nThis function performs a case-insensitive search.\nNote: If the specified value is not found in the list of values, this function will return 0. If value is NULL, this function will return 0.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the index position of \"c\" in the string list:\nExample\nReturn the index position of \"Q\" in the string list:\nExample\nReturn the index position of 5 in the numeric list:",
      "examples": [
        "SELECT FIELD(\"q\", \"s\", \"q\", \"l\");",
        "FIELD(value, val1, val2, val3, ...)",
        "SELECT FIELD(\"c\", \"a\", \"b\");",
        "SELECT FIELD(\"Q\", \"s\", \"q\", \"l\");",
        "SELECT FIELD(5, 0, 1, 2, 3, 4, 5);"
      ]
    },
    {
      "title": "MySQL FIND_IN_SET() Function",
      "summary": "ExampleGet your own SQL Server\nSearch for \"q\" within the list of strings:\nDefinition and Usage\nThe FIND_IN_SET() function returns the position of a string within a list of strings.\nSyntax\nParameter Values\nReturn Values\nIf string is not found in string_list, this function returns 0\nIf string or string_list is NULL, this function returns NULL\nIf string_list is an empty string (\"\"), this function returns 0\nTechnical Details\nMore Examples\nExample\nSearch for \"a\" within the list of strings:\nExample\nSearch for \"q\" within the list of strings (string list is NULL):",
      "examples": [
        "SELECT FIND_IN_SET(\"q\", \"s,q,l\");",
        "FIND_IN_SET(string, string_list)",
        "SELECT FIND_IN_SET(\"a\", \"s,q,l\");",
        "SELECT FIND_IN_SET(\"q\", null);"
      ]
    },
    {
      "title": "MySQL FORMAT() Function",
      "summary": "ExampleGet your own SQL Server\nFormat the number as \"#,###,###.##\" (and round with two decimal places):\nDefinition and Usage\nThe FORMAT() function formats a number to a format like \"#,###,###.##\", rounded to a specified number of decimal places, then it returns the result as a string.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nFormat the number as a format of \"#,###,###.##\" (and round with 0 decimal places):",
      "examples": [
        "SELECT FORMAT(250500.5634, 2);",
        "FORMAT(number, decimal_places)",
        "SELECT FORMAT(250500.5634, 0);"
      ]
    },
    {
      "title": "MySQL INSERT() Function",
      "summary": "ExampleGet your own SQL Server\nInsert the string \"Example\" into the string \"W3Schools.com\". Replace the first nine characters:\nDefinition and Usage\nThe INSERT() function inserts a string within a string at the specified position and for a certain number of characters.\nSyntax\nParameter Values\nReturn Values\nIf position is outside the length of string, this function returns string\nIf number is higher than the length of the rest of the string, this function replaces string from position until the end of string\nTechnical Details\nMore Examples\nExample\nInsert the string \"no\" into the string \"W3Schools.com\". Replace three characters, starting from position 11:",
      "examples": [
        "SELECT INSERT(\"W3Schools.com\", 1, 9, \"Example\");",
        "INSERT(string, position, number, string2)",
        "SELECT INSERT(\"W3Schools.com\", 11, 3, \"no\");"
      ]
    },
    {
      "title": "MySQL INSTR() Function",
      "summary": "ExampleGet your own SQL Server\nSearch for \"3\" in string \"W3Schools.com\", and return position:\nDefinition and Usage\nThe INSTR() function returns the position of the first occurrence of a string in another string.\nThis function performs a case-insensitive search.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nSearch for \"COM\" in string \"W3Schools.com\", and return position:\nExample\nSearch for \"a\" in CustomerName column, and return position:",
      "examples": [
        "SELECT INSTR(\"W3Schools.com\", \"3\") AS MatchPosition;",
        "INSTR(string1, string2)",
        "SELECT INSTR(\"W3Schools.com\", \"COM\") AS MatchPosition;",
        "SELECT INSTR(CustomerName, \"a\")\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL LCASE() Function",
      "summary": "ExampleGet your own SQL Server\nConvert the text to lower-case:\nDefinition and Usage\nThe LCASE() function converts a string to lower-case.\nNote: The LOWER() function is a synonym for the LCASE() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert the text in \"CustomerName\" to lower-case:",
      "examples": [
        "SELECT LCASE(\"SQL Tutorial is FUN!\");",
        "LCASE(text)",
        "SELECT LCASE(CustomerName) AS LowercaseCustomerName\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL LEFT() Function",
      "summary": "ExampleGet your own SQL Server\nExtract 3 characters from a string (starting from left):\nDefinition and Usage\nThe LEFT() function extracts a number of characters from a string (starting from left).\nTip: Also look at the RIGHT() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nExtract 5 characters from the text in the \"CustomerName\" column (starting from left):",
      "examples": [
        "SELECT LEFT(\"SQL Tutorial\", 3) AS ExtractString;",
        "LEFT(string, number_of_chars)",
        "SELECT LEFT(CustomerName, 5) AS ExtractString\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL LENGTH() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the length of the string, in bytes:\nDefinition and Usage\nThe LENGTH() function returns the length of a string (in bytes).\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the length of the text in the \"CustomerName\" column, in bytes:",
      "examples": [
        "SELECT LENGTH(\"SQL Tutorial\") AS LengthOfString;",
        "LENGTH(string)",
        "SELECT LENGTH(CustomerName) AS LengthOfName\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL LOCATE() Function",
      "summary": "ExampleGet your own SQL Server\nSearch for \"3\" in string \"W3Schools.com\", and return position:\nDefinition and Usage\nThe LOCATE() function returns the position of the first occurrence of a substring in a string.\nIf the substring is not found within the original string, this function returns 0.\nThis function performs a case-insensitive search.\nNote: This function is equal to the POSITION() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nSearch for \"com\" in string \"W3Schools.com\" (start at position 3), and return position:\nExample\nSearch for \"a\" in CustomerName column, and return position:",
      "examples": [
        "SELECT LOCATE(\"3\", \"W3Schools.com\") AS MatchPosition;",
        "LOCATE(substring, string, start)",
        "SELECT LOCATE(\"com\", \"W3Schools.com\", 3) AS MatchPosition;",
        "SELECT LOCATE(\"a\", CustomerName)\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL LOWER() Function",
      "summary": "ExampleGet your own SQL Server\nConvert the text to lower-case:\nDefinition and Usage\nThe LOWER() function converts a string to lower-case.\nNote: The LCASE() function is equal to the LOWER() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert the text in \"CustomerName\" to lower-case:",
      "examples": [
        "SELECT LOWER(\"SQL Tutorial is FUN!\");",
        "LOWER(text)",
        "SELECT LOWER(CustomerName) AS LowercaseCustomerName\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL LPAD() Function",
      "summary": "ExampleGet your own SQL Server\nLeft-pad the string with \"ABC\", to a total length of 20:\nDefinition and Usage\nThe LPAD() function left-pads a string with another string, to a certain length.\nNote: Also look at the RPAD() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nLeft-pad the text in \"CustomerName\" with \"ABC\", to a total length of 30:",
      "examples": [
        "SELECT LPAD(\"SQL Tutorial\", 20, \"ABC\");",
        "LPAD(string, length, lpad_string)",
        "SELECT LPAD(CustomerName, 30, \"ABC\") AS LeftPadCustomerName\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL LTRIM() Function",
      "summary": "ExampleGet your own SQL Server\nRemove leading spaces from a string:\nDefinition and Usage\nThe LTRIM() function removes leading spaces from a string.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT LTRIM(\"     SQL Tutorial\") AS LeftTrimmedString;",
        "LTRIM(string)"
      ]
    },
    {
      "title": "MySQL MID() Function",
      "summary": "ExampleGet your own SQL Server\nExtract a substring from a string (start at position 5, extract 3 characters):\nDefinition and Usage\nThe MID() function extracts a substring from a string (starting at any position).\nNote: The position of the first character in the string is 1.\nNote: The position of the last character in the string is -1.\nNote: The MID() and SUBSTR() functions equals the SUBSTRING() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nExtract a substring from the text in a column (start at position 2, extract 5 characters):\nExample\nExtract a substring from a string (start from the end, at position -5, extract 5 characters):",
      "examples": [
        "SELECT MID(\"SQL Tutorial\", 5, 3) AS ExtractString;",
        "MID(string, start, length)",
        "SELECT MID(CustomerName, 2, 5) AS ExtractString\nFROM Customers;",
        "SELECT MID(\"SQL Tutorial\", -5, 5) AS ExtractString;"
      ]
    },
    {
      "title": "MySQL POSITION() Function",
      "summary": "ExampleGet your own SQL Server\nSearch for \"3\" in string \"W3Schools.com\", and return position:\nDefinition and Usage\nThe POSITION() function returns the position of the first occurrence of a substring in a string.\nIf the substring is not found within the original string, this function returns 0.\nThis function performs a case-insensitive search.\nNote: The LOCATE() function is equal to the POSITION() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nSearch for \"COM\" in string \"W3Schools.com\", and return position:\nExample\nSearch for \"a\" in CustomerName column, and return position:",
      "examples": [
        "SELECT POSITION(\"3\" IN \"W3Schools.com\") AS MatchPosition;",
        "POSITION(substring IN string)",
        "SELECT POSITION(\"COM\" IN \"W3Schools.com\") AS MatchPosition;",
        "SELECT POSITION(\"a\" IN CustomerName)\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL REPEAT() Function",
      "summary": "ExampleGet your own SQL Server\nRepeat a string 3 times:\nDefinition and Usage\nThe REPEAT() function repeats a string as many times as specified.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nRepeat the text in CustomerName 2 times:\nExample\nRepeat the string 0 times:",
      "examples": [
        "SELECT REPEAT(\"SQL Tutorial\", 3);",
        "REPEAT(string, number)",
        "SELECT REPEAT(CustomerName, 2)\nFROM Customers;",
        "SELECT REPEAT(\"SQL Tutorial\", 0);"
      ]
    },
    {
      "title": "MySQL REPLACE() Function",
      "summary": "ExampleGet your own SQL Server\nReplace \"SQL\" with \"HTML\":\nDefinition and Usage\nThe REPLACE() function replaces all occurrences of a substring within a string, with a new substring.\nNote: This function performs a case-sensitive replacement.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReplace \"X\" with \"M\":\nExample\nReplace \"X\" with \"m\":\nExample\nReplace \"x\" with \"m\":",
      "examples": [
        "SELECT REPLACE(\"SQL Tutorial\", \"SQL\", \"HTML\");",
        "REPLACE(string, from_string, new_string)",
        "SELECT REPLACE(\"XYZ FGH XYZ\", \"X\", \"M\");",
        "SELECT REPLACE(\"XYZ FGH XYZ\", \"X\", \"m\");",
        "SELECT REPLACE(\"XYZ FGH XYZ\", \"x\", \"m\");"
      ]
    },
    {
      "title": "MySQL REVERSE() Function",
      "summary": "ExampleGet your own SQL Server\nReverse a string:\nDefinition and Usage\nThe REVERSE() function reverses a string and returns the result.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReverse the text in CustomerName:",
      "examples": [
        "SELECT REVERSE(\"SQL Tutorial\");",
        "REVERSE(string)",
        "SELECT REVERSE(CustomerName)\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL RIGHT() Function",
      "summary": "ExampleGet your own SQL Server\nExtract 4 characters from a string (starting from right):\nDefinition and Usage\nThe RIGHT() function extracts a number of characters from a string (starting from right).\nTip: Also look at the LEFT() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nExtract 5 characters from the text in the \"CustomerName\" column (starting from right):",
      "examples": [
        "SELECT RIGHT(\"SQL Tutorial is cool\", 4) AS ExtractString;",
        "RIGHT(string, number_of_chars)",
        "SELECT RIGHT(CustomerName, 5) AS ExtractString\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL RPAD() Function",
      "summary": "ExampleGet your own SQL Server\nRight-pad the string with \"ABC\", to a total length of 20:\nDefinition and Usage\nThe RPAD() function right-pads a string with another string, to a certain length.\nNote: Also look at the LPAD() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nRight-pad the text in \"CustomerName\" with \"ABC\", to a total length of 30:",
      "examples": [
        "SELECT RPAD(\"SQL Tutorial\", 20, \"ABC\");",
        "RPAD(string, length, rpad_string)",
        "SELECT RPAD(CustomerName, 30, \"ABC\") AS RightPadCustomerName\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL RTRIM() Function",
      "summary": "ExampleGet your own SQL Server\nRemove trailing spaces from a string:\nDefinition and Usage\nThe RTRIM() function removes trailing spaces from a string.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT RTRIM(\"SQL Tutorial     \") AS RightTrimmedString;",
        "RTRIM(string)"
      ]
    },
    {
      "title": "MySQL SPACE() Function",
      "summary": "ExampleGet your own SQL Server\nReturn a string with 10 space characters:\nDefinition and Usage\nThe SPACE() function returns a string of the specified number of space characters.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT SPACE(10);",
        "SPACE(number)"
      ]
    },
    {
      "title": "MySQL STRCMP() Function",
      "summary": "ExampleGet your own SQL Server\nCompare two strings:\nDefinition and Usage\nThe STRCMP() function compares two strings.\nSyntax\nParameter Values\nReturn Values\nIf string1 = string2, this function returns 0\nIf string1 < string2, this function returns -1\nIf string1 > string2, this function returns 1\nTechnical Details\nMore Examples\nExample\nCompare two strings:",
      "examples": [
        "SELECT STRCMP(\"SQL Tutorial\", \"SQL Tutorial\");",
        "STRCMP(string1, string2)",
        "SELECT STRCMP(\"SQL Tutorial\", \"HTML Tutorial\");"
      ]
    },
    {
      "title": "MySQL SUBSTR() Function",
      "summary": "ExampleGet your own SQL Server\nExtract a substring from a string (start at position 5, extract 3 characters):\nDefinition and Usage\nThe SUBSTR() function extracts a substring from a string (starting at any position).\nNote: The position of the first character in the string is 1.\nNote: The position of the last character in the string is -1.\nNote: The SUBSTR() and MID() functions equals to the SUBSTRING() function.\nSyntax\nOR:\nParameter Values\nTechnical Details\nMore Examples\nExample\nExtract a substring from the text in a column (start at position 2, extract 5 characters):\nExample\nExtract a substring from a string (start from the end, at position -5, extract 5 characters):",
      "examples": [
        "SELECT SUBSTR(\"SQL Tutorial\", 5, 3) AS ExtractString;",
        "SUBSTR(string, start, length)",
        "SUBSTR(string FROM start FOR length)",
        "SELECT SUBSTR(CustomerName, 2, 5) AS ExtractString\nFROM Customers;",
        "SELECT SUBSTR(\"SQL Tutorial\", -5, 5) AS ExtractString;"
      ]
    },
    {
      "title": "MySQL SUBSTRING() Function",
      "summary": "ExampleGet your own SQL Server\nExtract a substring from a string (start at position 1, extract 3 characters):\nDefinition and Usage\nThe SUBSTRING() function extracts a substring from a string (starting at any position).\nNote: The position of the first character in the string is 1.\nNote: The position of the last character in the string is -1.\nNote: The SUBSTR() and MID() functions equals to the SUBSTRING() function.\nSyntax\nOR:\nParameter Values\nTechnical Details\nMore Examples\nExample\nExtract a substring from the text in a column (start at position 2, extract 5 characters):\nExample\nExtract a substring from a string (start from the end, at position -5, extract 5 characters):",
      "examples": [
        "SELECT SUBSTRING(\"SQL Tutorial\", 1, 3) AS ExtractString;",
        "SUBSTRING(string, start, length)",
        "SUBSTRING(string FROM start FOR length)",
        "SELECT SUBSTRING(CustomerName, 2, 5) AS ExtractString\nFROM Customers;",
        "SELECT SUBSTRING(\"SQL Tutorial\", -5, 5) AS ExtractString;"
      ]
    },
    {
      "title": "MySQL SUBSTRING_INDEX() Function",
      "summary": "ExampleGet your own SQL Server\nReturn a substring of a string before a specified number of delimiter occurs:\nDefinition and Usage\nThe SUBSTRING_INDEX() function returns a substring of a string before a specified number of delimiter occurs.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn a substring of a string before a specified number of delimiter occurs:",
      "examples": [
        "SELECT SUBSTRING_INDEX(\"www.w3schools.com\", \".\", 1);",
        "SUBSTRING_INDEX(string, delimiter, number)",
        "SELECT SUBSTRING_INDEX(\"www.w3schools.com\", \".\", 2);"
      ]
    },
    {
      "title": "MySQL TRIM() Function",
      "summary": "ExampleGet your own SQL Server\nRemove leading and trailing spaces from a string:\nDefinition and Usage\nThe TRIM() function removes leading and trailing spaces from a string.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT TRIM('    SQL Tutorial    ') AS TrimmedString;",
        "TRIM(string)"
      ]
    },
    {
      "title": "MySQL UCASE() Function",
      "summary": "ExampleGet your own SQL Server\nConvert the text to upper-case:\nDefinition and Usage\nThe UCASE() function converts a string to upper-case.\nNote: This function is equal to the UPPER() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert the text in \"CustomerName\" to upper-case:",
      "examples": [
        "SELECT UCASE(\"SQL Tutorial is FUN!\");",
        "UCASE(text)",
        "SELECT UCASE(CustomerName) AS UppercaseCustomerName\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL UPPER() Function",
      "summary": "ExampleGet your own SQL Server\nConvert the text to upper-case:\nDefinition and Usage\nThe UPPER() function converts a string to upper-case.\nNote: This function is equal to the UCASE() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert the text in \"CustomerName\" to upper-case:",
      "examples": [
        "SELECT UPPER(\"SQL Tutorial is FUN!\");",
        "UPPER(text)",
        "SELECT UPPER(CustomerName) AS UppercaseCustomerName\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL ABS() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the absolute value of a number:\nDefinition and Usage\nThe ABS() function returns the absolute (positive) value of a number.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT ABS(-243.5);",
        "ABS(number)"
      ]
    },
    {
      "title": "MySQL ACOS() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the arc cosine of a number:\nDefinition and Usage\nThe ACOS() function returns the arc cosine of a number.\nThe specified number must be between -1 to 1, otherwise this function returns NULL.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the arc cosine of a number:",
      "examples": [
        "SELECT ACOS(0.25);",
        "ACOS(number)",
        "SELECT ACOS(-0.8);"
      ]
    },
    {
      "title": "MySQL ASIN() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the arc sine of a number:\nDefinition and Usage\nThe ASIN() function returns the arc sine of a number.\nThe specified number must be between -1 to 1, otherwise this function returns NULL.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the arc sine of a number:",
      "examples": [
        "SELECT ASIN(0.25);",
        "ASIN(number)",
        "SELECT ASIN(-0.8);"
      ]
    },
    {
      "title": "MySQL ATAN() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the arc tangent of a number:\nDefinition and Usage\nThe ATAN() function returns the arc tangent of one or two numbers.\nSyntax\nOR:\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the arc tangent of two values:",
      "examples": [
        "SELECT ATAN(2.5);",
        "ATAN(number)",
        "ATAN(a, b)",
        "SELECT ATAN(-0.8, 2);"
      ]
    },
    {
      "title": "MySQL ATAN2() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the arc tangent of two values:\nDefinition and Usage\nThe ATAN2() function returns the arc tangent of two numbers.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the arc tangent of two values:",
      "examples": [
        "SELECT ATAN2(0.50, 1);",
        "ATAN2(a, b)",
        "SELECT ATAN2(-0.8, 2);"
      ]
    },
    {
      "title": "MySQL AVG() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the average value for the \"Price\" column in the \"Products\" table:\nDefinition and Usage\nThe AVG() function returns the average value of an expression.\nNote: NULL values are ignored.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nSelect the records that have a price above the average price:",
      "examples": [
        "SELECT AVG(Price) AS AveragePrice FROM Products;",
        "AVG(expression)",
        "SELECT * FROM Products\nWHERE Price > (SELECT AVG(Price) FROM Products);"
      ]
    },
    {
      "title": "MySQL CEIL() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the smallest integer value that is greater than or equal to 25.75:\nDefinition and Usage\nThe CEIL() function returns the smallest integer value that is bigger than or equal to a number.\nNote: This function is equal to the CEILING() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the smallest integer value that is greater than or equal to 25:",
      "examples": [
        "SELECT CEIL(25.75);",
        "CEIL(number)",
        "SELECT CEIL(25);"
      ]
    },
    {
      "title": "MySQL CEILING() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the smallest integer value that is greater than or equal to 25.75:\nDefinition and Usage\nThe CEILING() function returns the smallest integer value that is bigger than or equal to a number.\nNote: This function is equal to the CEIL() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the smallest integer value that is greater than or equal to 25:",
      "examples": [
        "SELECT CEILING(25.75);",
        "CEILING(number)",
        "SELECT CEILING(25);"
      ]
    },
    {
      "title": "MySQL COS() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the cosine of a number:\nDefinition and Usage\nThe COS() function returns the cosine of a number.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the cosine of a number:",
      "examples": [
        "SELECT COS(2);",
        "COS(number)",
        "SELECT COS(PI());"
      ]
    },
    {
      "title": "MySQL COT() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the cotangent of a number:\nDefinition and Usage\nThe COT() function returns the cotangent of a number.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the cotangent of a number:",
      "examples": [
        "SELECT COT(6);",
        "COT(number)",
        "SELECT COT(-2);"
      ]
    },
    {
      "title": "MySQL COUNT() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the number of products in the \"Products\" table:\nDefinition and Usage\nThe COUNT() function returns the number of records returned by a select query.\nNote: NULL values are not counted.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT COUNT(ProductID) AS NumberOfProducts FROM Products;",
        "COUNT(expression)"
      ]
    },
    {
      "title": "MySQL DEGREES() Function",
      "summary": "ExampleGet your own SQL Server\nConvert the radian value into degrees:\nDefinition and Usage\nThe DEGREES() function converts a value in radians to degrees.\nNote: See also the RADIANS() and PI() functions.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert the radian value into degrees:",
      "examples": [
        "SELECT DEGREES(1.5);",
        "DEGREES(number)",
        "SELECT DEGREES(PI()*2);"
      ]
    },
    {
      "title": "MySQL DIV Function",
      "summary": "ExampleGet your own SQL Server\nInteger division (10/5):\nDefinition and Usage\nThe DIV function is used for integer division (x is divided by y). An integer value is returned.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nInteger division (8/3):",
      "examples": [
        "SELECT 10 DIV 5;",
        "x DIV y",
        "SELECT 8 DIV 3;"
      ]
    },
    {
      "title": "MySQL EXP() Function",
      "summary": "ExampleGet your own SQL Server\nReturn e raised to the power of 1:\nDefinition and Usage\nThe EXP() function returns e raised to the power of the specified number.\nThe constant e (2.718281...), is the base of natural logarithms.\nTip: Also look at the LOG() and LN() functions.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn e raised to the power of 2:",
      "examples": [
        "SELECT EXP(1);",
        "EXP(number)",
        "SELECT EXP(2);"
      ]
    },
    {
      "title": "MySQL FLOOR() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the largest integer value that is less than or equal to 25.75:\nDefinition and Usage\nThe FLOOR() function returns the largest integer value that is smaller than or equal to a number.\nNote: Also look at the ROUND(), CEIL(), CEILING(), TRUNCATE(), and DIV functions.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the largest integer value that is less than or equal to 25:",
      "examples": [
        "SELECT FLOOR(25.75);",
        "FLOOR(number)",
        "SELECT FLOOR(25);"
      ]
    },
    {
      "title": "MySQL GREATEST() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the greatest value of the list of arguments:\nDefinition and Usage\nThe GREATEST() function returns the greatest value of the list of arguments.\nNote: See also the LEAST() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the greatest value of the list of arguments:",
      "examples": [
        "SELECT GREATEST(3, 12, 34, 8, 25);",
        "GREATEST(arg1, arg2, arg3, ...)",
        "SELECT GREATEST(\"w3Schools.com\", \"microsoft.com\", \"apple.com\");"
      ]
    },
    {
      "title": "MySQL LEAST() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the smallest value of the list of arguments:\nDefinition and Usage\nThe LEAST() function returns the smallest value of the list of arguments.\nNote: See also the GREATEST() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the smallest value of the list of arguments:",
      "examples": [
        "SELECT LEAST(3, 12, 34, 8, 25);",
        "LEAST(arg1, arg2, arg3, ...)",
        "SELECT LEAST(\"w3Schools.com\", \"microsoft.com\", \"apple.com\");"
      ]
    },
    {
      "title": "MySQL LN() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the natural logarithm of 2:\nDefinition and Usage\nThe LN() function returns the natural logarithm of a number.\nNote: See also the LOG() and EXP() functions.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the natural logarithm of 1:",
      "examples": [
        "SELECT LN(2);",
        "LN(number)",
        "SELECT LN(1);"
      ]
    },
    {
      "title": "MySQL LOG() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the natural logarithm of 2:\nDefinition and Usage\nThe LOG() function returns the natural logarithm of a specified number, or the logarithm of the number to the specified base.\nNote: See also the LN() and EXP() functions.\nSyntax\nOR:\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the natural logarithm of 4 to a specified base (2):",
      "examples": [
        "SELECT LOG(2);",
        "LOG(number)",
        "LOG(base, number)",
        "SELECT LOG(2, 4);"
      ]
    },
    {
      "title": "MySQL LOG10() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the base-10 logarithm of 2:\nDefinition and Usage\nThe LOG10() function returns the natural logarithm of a number to base-10.\nNote: See also the LOG() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the base-10 logarithm of 4.5:",
      "examples": [
        "SELECT LOG10(2);",
        "LOG10(number)",
        "SELECT LOG10(4.5);"
      ]
    },
    {
      "title": "MySQL LOG2() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the base-2 logarithm of 6:\nDefinition and Usage\nThe LOG2() function returns the natural logarithm of a number to base-2.\nNote: See also the LOG() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the base-2 logarithm of 64:",
      "examples": [
        "SELECT LOG2(6);",
        "LOG2(number)",
        "SELECT LOG2(64);"
      ]
    },
    {
      "title": "MySQL MAX() Function",
      "summary": "ExampleGet your own SQL Server\nFind the price of the most expensive product in the \"Products\" table:\nDefinition and Usage\nThe MAX() function returns the maximum value in a set of values.\nNote: See also the MIN() function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT MAX(Price) AS LargestPrice FROM Products;",
        "MAX(expression)"
      ]
    },
    {
      "title": "MySQL MIN() Function",
      "summary": "ExampleGet your own SQL Server\nFind the price of the cheapest product in the \"Products\" table:\nDefinition and Usage\nThe MIN() function returns the minimum value in a set of values.\nNote: See also the MAX() function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT MIN(Price) AS SmallestPrice FROM Products;",
        "MIN(expression)"
      ]
    },
    {
      "title": "MySQL MOD() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the remainder of 18/4:\nDefinition and Usage\nThe MOD() function returns the remainder of a number divided by another number.\nSyntax\nOR:\nOR:\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the remainder of 18/4:\nExample\nReturn the remainder of 18/4:",
      "examples": [
        "SELECT MOD(18, 4);",
        "MOD(x, y)",
        "x MOD y",
        "x % y",
        "SELECT 18 MOD 4;",
        "SELECT 18 % 4;"
      ]
    },
    {
      "title": "MySQL PI() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the value of PI:\nDefinition and Usage\nThe PI() function returns the value of PI.\nNote: See also the DEGREES() and RADIANS() functions.\nSyntax\nTechnical Details",
      "examples": [
        "SELECT PI();",
        "PI()"
      ]
    },
    {
      "title": "MySQL POW() Function",
      "summary": "ExampleGet your own SQL Server\nReturn 4 raised to the second power:\nDefinition and Usage\nThe POW() function returns the value of a number raised to the power of another number.\nNote: This function is equal to the POWER() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn 8 raised to the third power:",
      "examples": [
        "SELECT POW(4, 2);",
        "POW(x, y)",
        "SELECT POW(8, 3);"
      ]
    },
    {
      "title": "MySQL POWER() Function",
      "summary": "ExampleGet your own SQL Server\nReturn 4 raised to the second power:\nDefinition and Usage\nThe POWER() function returns the value of a number raised to the power of another number.\nNote: This function is equal to the POW() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn 8 raised to the third power:",
      "examples": [
        "SELECT POWER(4, 2);",
        "POWER(x, y)",
        "SELECT POWER(8, 3);"
      ]
    },
    {
      "title": "MySQL RADIANS() Function",
      "summary": "ExampleGet your own SQL Server\nConvert a degree value into radians:\nDefinition and Usage\nThe RADIANS() function converts a degree value into radians.\nNote: See also the DEGREES() and PI() functions.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert a degree value into radians:",
      "examples": [
        "SELECT RADIANS(180);",
        "RADIANS(number)",
        "SELECT RADIANS(-45);"
      ]
    },
    {
      "title": "MySQL RAND() Function",
      "summary": "ExampleGet your own SQL Server\nReturn a random decimal number (no seed value - so it returns a completely random number >= 0 and <1):\nDefinition and Usage\nThe RAND() function returns a random number between 0 (inclusive) and 1 (exclusive).\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn a random decimal number (with seed value of 6):\nExample\nReturn a random decimal number >= 5 and <10:\nExample\nReturn a random number >= 5 and <=10:",
      "examples": [
        "SELECT RAND();",
        "RAND(seed)",
        "SELECT RAND(6);",
        "SELECT RAND()*(10-5)+5;",
        "SELECT FLOOR(RAND()*(10-5+1)+5);"
      ]
    },
    {
      "title": "MySQL ROUND() Function",
      "summary": "ExampleGet your own SQL Server\nRound the number to 2 decimal places:\nDefinition and Usage\nThe ROUND() function rounds a number to a specified number of decimal places.\nNote: See also the FLOOR(), CEIL(), CEILING(), and TRUNCATE() functions.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nRound the number to 0 decimal places:\nExample\nRound the Price column (to 1 decimal) in the \"Products\" table:",
      "examples": [
        "SELECT ROUND(135.375, 2);",
        "ROUND(number, decimals)",
        "SELECT ROUND(345.156, 0);",
        "SELECT ProductName, Price, ROUND(Price, 1) AS RoundedPrice\nFROM Products;"
      ]
    },
    {
      "title": "MySQL SIGN() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the sign of a number:\nDefinition and Usage\nThe SIGN() function returns the sign of a number.\nThis function will return one of the following:\nIf number > 0, it returns 1\nIf number = 0, it returns 0\nIf number < 0, it returns -1\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the sign of a number:",
      "examples": [
        "SELECT SIGN(255.5);",
        "SIGN(number)",
        "SELECT SIGN(-12);"
      ]
    },
    {
      "title": "MySQL SIN() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the sine of a number:\nDefinition and Usage\nThe SIN() function returns the sine of a number.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the sine of a number:",
      "examples": [
        "SELECT SIN(2);",
        "SIN(number)",
        "SELECT SIN(-1);"
      ]
    },
    {
      "title": "MySQL SQRT() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the square root of a number:\nDefinition and Usage\nThe SQRT() function returns the square root of a number.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the square root of a number:",
      "examples": [
        "SELECT SQRT(64);",
        "SQRT(number)",
        "SELECT SQRT(13);"
      ]
    },
    {
      "title": "MySQL SUM() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the sum of the \"Quantity\" field in the \"OrderDetails\" table:\nDefinition and Usage\nThe SUM() function calculates the sum of a set of values.\nNote: NULL values are ignored.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT SUM(Quantity) AS TotalItemsOrdered FROM OrderDetails;",
        "SUM(expression)"
      ]
    },
    {
      "title": "MySQL TAN() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the tangent of a number:\nDefinition and Usage\nThe TAN() function returns the tangent of a number.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the tangent of a number:",
      "examples": [
        "SELECT TAN(1.75);",
        "TAN(number)",
        "SELECT TAN(-3);"
      ]
    },
    {
      "title": "MySQL TRUNCATE() Function",
      "summary": "ExampleGet your own SQL Server\nReturn a number truncated to 2 decimal places:\nDefinition and Usage\nThe TRUNCATE() function truncates a number to the specified number of decimal places.\nNote: See also the FLOOR(), CEIL(), CEILING(), and ROUND() functions.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn a number truncated to 0 decimal places:",
      "examples": [
        "SELECT TRUNCATE(135.375, 2);",
        "TRUNCATE(number, decimals)",
        "SELECT TRUNCATE(345.156, 0);"
      ]
    },
    {
      "title": "MySQL ADDDATE() Function",
      "summary": "ExampleGet your own SQL Server\nAdd 10 days to a date and return the date:\nDefinition and Usage\nThe ADDDATE() function adds a time/date interval to a date and then returns the date.\nSyntax\nOR:\nParameter Values\nMICROSECOND\nSECOND\nMINUTE\nHOUR\nDAY\nWEEK\nMONTH\nQUARTER\nYEAR\nSECOND_MICROSECOND\nMINUTE_MICROSECOND\nMINUTE_SECOND\nHOUR_MICROSECOND\nHOUR_SECOND\nHOUR_MINUTE\nDAY_MICROSECOND\nDAY_SECOND\nDAY_MINUTE\nDAY_HOUR\nYEAR_MONTH\nTechnical Details\nMore Examples\nExample\nAdd 15 minutes to a date and return the date:\nExample\nSubtract 3 hours to a date and return the date:\nExample\nSubtract 2 months to a date and return the date:",
      "examples": [
        "SELECT ADDDATE(\"2017-06-15\", INTERVAL 10 DAY);",
        "ADDDATE(date, INTERVAL value addunit)",
        "ADDDATE(date, days)",
        "SELECT ADDDATE(\"2017-06-15 09:34:21\", INTERVAL 15 MINUTE);",
        "SELECT ADDDATE(\"2017-06-15 09:34:21\", INTERVAL -3 HOUR);",
        "SELECT ADDDATE(\"2017-06-15\", INTERVAL -2 MONTH);"
      ]
    },
    {
      "title": "MySQL ADDTIME() Function",
      "summary": "ExampleGet your own SQL Server\nAdd 2 seconds to a time and return the datetime:\nDefinition and Usage\nThe ADDTIME() function adds a time interval to a time/datetime and then returns the time/datetime.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nAdd 5 seconds and 3 microseconds to a time and return the datetime:\nExample\nAdd 2 hours, 10 minutes, 5 seconds, and 3 microseconds to a time and return the datetime:\nExample\nAdd 5 days, 2 hours, 10 minutes, 5 seconds, and 3 microseconds to a time and return the datetime:\nExample\nAdd 2 hours, 10 minutes, 5 seconds, and 3 microseconds to a time and return the time:",
      "examples": [
        "SELECT ADDTIME(\"2017-06-15 09:34:21\", \"2\");",
        "ADDTIME(datetime, addtime)",
        "SELECT ADDTIME(\"2017-06-15 09:34:21.000001\", \"5.000003\");",
        "SELECT ADDTIME(\"2017-06-15 09:34:21.000001\", \"2:10:5.000003\");",
        "SELECT ADDTIME(\"2017-06-15 09:34:21.000001\", \"5 2:10:5.000003\");",
        "SELECT ADDTIME(\"09:34:21.000001\", \"2:10:5.000003\");"
      ]
    },
    {
      "title": "MySQL CURDATE() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the current date:\nDefinition and Usage\nThe CURDATE() function returns the current date.\nNote: The date is returned as \"YYYY-MM-DD\" (string) or as YYYYMMDD (numeric).\nNote: This function equals the CURRENT_DATE() function.\nSyntax\nTechnical Details\nMore Examples\nExample\nReturn the current date + 1:",
      "examples": [
        "SELECT CURDATE();",
        "CURDATE()",
        "SELECT CURDATE() + 1;"
      ]
    },
    {
      "title": "MySQL CURRENT_DATE() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the current date:\nDefinition and Usage\nThe CURRENT_DATE() function returns the current date.\nNote: The date is returned as \"YYYY-MM-DD\" (string) or as YYYYMMDD (numeric).\nNote: This function equals the CURDATE() function.\nSyntax\nTechnical Details\nMore Examples\nExample\nReturn the current date + 1:",
      "examples": [
        "SELECT CURRENT_DATE();",
        "CURRENT_DATE()",
        "SELECT CURRENT_DATE() + 1;"
      ]
    },
    {
      "title": "MySQL CURRENT_TIME() Function",
      "summary": "ExampleGet your own SQL Server\nReturn current time:\nDefinition and Usage\nThe CURRENT_TIME() function returns the current time.\nNote: The time is returned as \"HH-MM-SS\" (string) or as HHMMSS.uuuuuu (numeric).\nNote: This function equals the CURTIME() function.\nSyntax\nTechnical Details\nMore Examples\nExample\nReturn current time + 1:",
      "examples": [
        "SELECT CURRENT_TIME();",
        "CURRENT_TIME()",
        "SELECT CURRENT_TIME() + 1;"
      ]
    },
    {
      "title": "MySQL CURRENT_TIMESTAMP() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the current date and time:\nDefinition and Usage\nThe CURRENT_TIMESTAMP() function returns the current date and time.\nNote: The date and time is returned as \"YYYY-MM-DD HH-MM-SS\" (string) or as YYYYMMDDHHMMSS.uuuuuu (numeric).\nSyntax\nTechnical Details\nMore Examples\nExample\nReturn the current date and time + 1:",
      "examples": [
        "SELECT CURRENT_TIMESTAMP();",
        "CURRENT_TIMESTAMP()",
        "SELECT CURRENT_TIMESTAMP() + 1;"
      ]
    },
    {
      "title": "MySQL CURTIME() Function",
      "summary": "ExampleGet your own SQL Server\nReturn current time:\nDefinition and Usage\nThe CURTIME() function returns the current time.\nNote: The time is returned as \"HH-MM-SS\" (string) or as HHMMSS.uuuuuu (numeric).\nNote: This function equals the CURRENT_TIME() function.\nSyntax\nTechnical Details\nMore Examples\nExample\nReturn current time + 1:",
      "examples": [
        "SELECT CURTIME();",
        "CURTIME()",
        "SELECT CURTIME() + 1;"
      ]
    },
    {
      "title": "MySQL DATE() Function",
      "summary": "ExampleGet your own SQL Server\nExtract the date part:\nDefinition and Usage\nThe DATE() function extracts the date part from a datetime expression.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nExtract the date part:\nExample\nExtract the date part (will return NULL):\nExample\nExtract the date part:",
      "examples": [
        "SELECT DATE(\"2017-06-15\");",
        "DATE(expression)",
        "SELECT DATE(\"2017-06-15 09:34:21\");",
        "SELECT DATE(\"The date is 2017-06-15\");",
        "SELECT DATE(OrderDate) FROM Orders;"
      ]
    },
    {
      "title": "MySQL DATEDIFF() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the number of days between two date values:\nDefinition and Usage\nThe DATEDIFF() function returns the number of days between two date values.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the number of days between two date values:\nExample\nReturn the number of days between two date values:",
      "examples": [
        "SELECT DATEDIFF(\"2017-06-25\", \"2017-06-15\");",
        "DATEDIFF(date1, date2)",
        "SELECT DATEDIFF(\"2017-06-25 09:34:21\", \"2017-06-15 15:25:35\");",
        "SELECT DATEDIFF(\"2017-01-01\", \"2016-12-24\");"
      ]
    },
    {
      "title": "MySQL DATE_ADD() Function",
      "summary": "ExampleGet your own SQL Server\nAdd 10 days to a date and return the date:\nDefinition and Usage\nThe DATE_ADD() function adds a time/date interval to a date and then returns the date.\nSyntax\nParameter Values\nMICROSECOND\nSECOND\nMINUTE\nHOUR\nDAY\nWEEK\nMONTH\nQUARTER\nYEAR\nSECOND_MICROSECOND\nMINUTE_MICROSECOND\nMINUTE_SECOND\nHOUR_MICROSECOND\nHOUR_SECOND\nHOUR_MINUTE\nDAY_MICROSECOND\nDAY_SECOND\nDAY_MINUTE\nDAY_HOUR\nYEAR_MONTH\nTechnical Details\nMore Examples\nExample\nAdd 15 minutes to a date and return the date:\nExample\nSubtract 3 hours to a date and return the date:\nExample\nSubtract 2 months to a date and return the date:",
      "examples": [
        "SELECT DATE_ADD(\"2017-06-15\", INTERVAL 10 DAY);",
        "DATE_ADD(date, INTERVAL value addunit)",
        "SELECT DATE_ADD(\"2017-06-15 09:34:21\", INTERVAL 15 MINUTE);",
        "SELECT DATE_ADD(\"2017-06-15 09:34:21\", INTERVAL -3 HOUR);",
        "SELECT DATE_ADD(\"2017-06-15\", INTERVAL -2 MONTH);"
      ]
    },
    {
      "title": "MySQL DATE_FORMAT() Function",
      "summary": "ExampleGet your own SQL Server\nFormat a date:\nDefinition and Usage\nThe DATE_FORMAT() function formats a date as specified.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nFormat a date:\nExample\nFormat a date:\nExample\nFormat a date:",
      "examples": [
        "SELECT DATE_FORMAT(\"2017-06-15\", \"%Y\");",
        "DATE_FORMAT(date, format)",
        "SELECT DATE_FORMAT(\"2017-06-15\", \"%M %d %Y\");",
        "SELECT DATE_FORMAT(\"2017-06-15\", \"%W %M %e %Y\");",
        "SELECT DATE_FORMAT(BirthDate, \"%W %M %e %Y\") FROM Employees;"
      ]
    },
    {
      "title": "MySQL DATE_SUB() Function",
      "summary": "ExampleGet your own SQL Server\nSubtract 10 days from a date and return the date:\nDefinition and Usage\nThe DATE_SUB() function subtracts a time/date interval from a date and then returns the date.\nSyntax\nParameter Values\nMICROSECOND\nSECOND\nMINUTE\nHOUR\nDAY\nWEEK\nMONTH\nQUARTER\nYEAR\nSECOND_MICROSECOND\nMINUTE_MICROSECOND\nMINUTE_SECOND\nHOUR_MICROSECOND\nHOUR_SECOND\nHOUR_MINUTE\nDAY_MICROSECOND\nDAY_SECOND\nDAY_MINUTE\nDAY_HOUR\nYEAR_MONTH\nTechnical Details\nMore Examples\nExample\nSubtract 15 minutes from a date and return the date:\nExample\nSubtract 3 hours from a date and return the date:\nExample\nAdd 2 months to a date and return the date:",
      "examples": [
        "SELECT DATE_SUB(\"2017-06-15\", INTERVAL 10 DAY);",
        "DATE_SUB(date, INTERVAL value interval)",
        "SELECT DATE_SUB(\"2017-06-15 09:34:21\", INTERVAL 15 MINUTE);",
        "SELECT DATE_SUB(\"2017-06-15 09:34:21\", INTERVAL 3 HOUR);",
        "SELECT DATE_SUB(\"2017-06-15\", INTERVAL -2 MONTH);"
      ]
    },
    {
      "title": "MySQL DAY() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the day of the month for a date:\nDefinition and Usage\nThe DAY() function returns the day of the month for a given date (a number from 1 to 31).\nNote: This function equals the DAYOFMONTH() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the day of the month for a date:\nExample\nReturn the day of the month for the current system date:",
      "examples": [
        "SELECT DAY(\"2017-06-15\");",
        "DAY(date)",
        "SELECT DAY(\"2017-06-15 09:34:21\");",
        "SELECT DAY(CURDATE());"
      ]
    },
    {
      "title": "MySQL DAYNAME() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the weekday name for a date:\nDefinition and Usage\nThe DAYNAME() function returns the weekday name for a given date.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the weekday name for a date:\nExample\nReturn the weekday name for the current system date:",
      "examples": [
        "SELECT DAYNAME(\"2017-06-15\");",
        "DAYNAME(date)",
        "SELECT DAYNAME(\"2017-06-15 09:34:21\");",
        "SELECT DAYNAME(CURDATE());"
      ]
    },
    {
      "title": "MySQL DAYOFMONTH() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the day of the month for a date:\nDefinition and Usage\nThe DAYOFMONTH() function returns the day of the month for a given date (a number from 1 to 31).\nNote: This function equals the DAY() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the day of the month for a date:\nExample\nReturn the day of the month for the current system date:",
      "examples": [
        "SELECT DAYOFMONTH(\"2017-06-15\");",
        "DAYOFMONTH(date)",
        "SELECT DAYOFMONTH(\"2017-06-15 09:34:21\");",
        "SELECT DAYOFMONTH(CURDATE());"
      ]
    },
    {
      "title": "MySQL DAYOFWEEK() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the weekday index for a date:\nDefinition and Usage\nThe DAYOFWEEK() function returns the weekday index for a given date (a number from 1 to 7).\nNote: 1=Sunday, 2=Monday, 3=Tuesday, 4=Wednesday, 5=Thursday, 6=Friday, 7=Saturday.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the weekday index for a date:\nExample\nReturn the weekday index for the current system date:",
      "examples": [
        "SELECT DAYOFWEEK(\"2017-06-15\");",
        "DAYOFWEEK(date)",
        "SELECT DAYOFWEEK(\"2017-06-15 09:34:21\");",
        "SELECT DAYOFWEEK(CURDATE());"
      ]
    },
    {
      "title": "MySQL DAYOFYEAR() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the day of the year for a date:\nDefinition and Usage\nThe DAYOFYEAR() function returns the day of the year for a given date (a number from 1 to 366).\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the day of the year for a date:\nExample\nReturn the day of the year for the current system date:",
      "examples": [
        "SELECT DAYOFYEAR(\"2017-06-15\");",
        "DAYOFYEAR(date)",
        "SELECT DAYOFYEAR(\"2017-01-01\");",
        "SELECT DAYOFYEAR(CURDATE());"
      ]
    },
    {
      "title": "MySQL EXTRACT() Function",
      "summary": "ExampleGet your own SQL Server\nExtract the month from a date:\nDefinition and Usage\nThe EXTRACT() function extracts a part from a given date.\nSyntax\nParameter Values\nMICROSECOND\nSECOND\nMINUTE\nHOUR\nDAY\nWEEK\nMONTH\nQUARTER\nYEAR\nSECOND_MICROSECOND\nMINUTE_MICROSECOND\nMINUTE_SECOND\nHOUR_MICROSECOND\nHOUR_SECOND\nHOUR_MINUTE\nDAY_MICROSECOND\nDAY_SECOND\nDAY_MINUTE\nDAY_HOUR\nYEAR_MONTH\nTechnical Details\nMore Examples\nExample\nExtract the week from a date:\nExample\nExtract the minute from a datetime:\nExample\nExtract the year and month from a datetime:",
      "examples": [
        "SELECT EXTRACT(MONTH FROM \"2017-06-15\");",
        "EXTRACT(part FROM date)",
        "SELECT EXTRACT(WEEK FROM \"2017-06-15\");",
        "SELECT EXTRACT(MINUTE FROM \"2017-06-15 09:34:21\");",
        "SELECT EXTRACT(YEAR_MONTH FROM \"2017-06-15 09:34:21\");"
      ]
    },
    {
      "title": "MySQL FROM_DAYS() Function",
      "summary": "ExampleGet your own SQL Server\nReturn a date from a numeric representation of the day:\nDefinition and Usage\nThe FROM_DAYS() function returns a date from a numeric datevalue.\nThe FROM_DAYS() function is to be used only with dates within the Gregorian calendar.\nNote: This function is the opposite of the TO_DAYS() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn a date from a numeric representation of the day:",
      "examples": [
        "SELECT FROM_DAYS(685467);",
        "FROM_DAYS(number)",
        "SELECT FROM_DAYS(780500);"
      ]
    },
    {
      "title": "MySQL HOUR() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the hour part of a datetime:\nDefinition and Usage\nThe HOUR() function returns the hour part for a given date (from 0 to 838).\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the hour part of a datetime:",
      "examples": [
        "SELECT HOUR(\"2017-06-20 09:34:00\");",
        "HOUR(datetime)",
        "SELECT HOUR(\"838:59:59\");"
      ]
    },
    {
      "title": "MySQL LAST_DAY() Function",
      "summary": "ExampleGet your own SQL Server\nExtract the last day of the month for the given date:\nDefinition and Usage\nThe LAST_DAY() function extracts the last day of the month for a given date.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nExtract the last day of the month for the given date:",
      "examples": [
        "SELECT LAST_DAY(\"2017-06-20\");",
        "LAST_DAY(date)",
        "SELECT LAST_DAY(\"2017-02-10 09:34:00\");"
      ]
    },
    {
      "title": "MySQL LOCALTIME() Function",
      "summary": "ExampleGet your own SQL Server\nReturn current date and time:\nDefinition and Usage\nThe LOCALTIME() function returns the current date and time.\nNote: The date and time is returned as \"YYYY-MM-DD HH-MM-SS\" (string) or as YYYYMMDDHHMMSS.uuuuuu (numeric).\nSyntax\nTechnical Details\nMore Examples\nExample\nReturn current date and time + 1:",
      "examples": [
        "SELECT LOCALTIME();",
        "LOCALTIME()",
        "SELECT LOCALTIME() + 1;"
      ]
    },
    {
      "title": "MySQL LOCALTIMESTAMP() Function",
      "summary": "ExampleGet your own SQL Server\nReturn current date and time:\nDefinition and Usage\nThe LOCALTIMESTAMP() function returns the current date and time.\nNote: The date and time is returned as \"YYYY-MM-DD HH-MM-SS\" (string) or as YYYYMMDDHHMMSS.uuuuuu (numeric).\nSyntax\nTechnical Details\nMore Examples\nExample\nReturn current date and time + 1:",
      "examples": [
        "SELECT LOCALTIMESTAMP();",
        "LOCALTIMESTAMP()",
        "SELECT LOCALTIMESTAMP() + 1;"
      ]
    },
    {
      "title": "MySQL MAKEDATE() Function",
      "summary": "ExampleGet your own SQL Server\nCreate and return a date based on  a year and a number of days value:\nDefinition and Usage\nThe MAKEDATE() function creates and returns a date based on a year and a number of days value.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nCreate and return a date based on  a year and a number of days value:\nExample\nCreate and return a date based on  a year and a number of days value:\nExample\nCreate and return a date based on  a year and a number of days value:",
      "examples": [
        "SELECT MAKEDATE(2017, 3);",
        "MAKEDATE(year, day)",
        "SELECT MAKEDATE(2017, 175);",
        "SELECT MAKEDATE(2017, 100);",
        "SELECT MAKEDATE(2017, 366);"
      ]
    },
    {
      "title": "MySQL MAKETIME() Function",
      "summary": "ExampleGet your own SQL Server\nCreate and return a time value based on an hour, minute, and second value:\nDefinition and Usage\nThe MAKETIME() function creates and returns a time based on an hour, minute, and second value.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nCreate and return a time value based on an hour, minute, and second value:\nExample\nCreate and return a time value based on an hour, minute, and second value:\nExample\nCreate and return a time value based on an hour, minute, and second value:",
      "examples": [
        "SELECT MAKETIME(11, 35, 4);",
        "MAKETIME(hour, minute, second)",
        "SELECT MAKETIME(16, 1, 0);",
        "SELECT MAKETIME(21, 59, 59);",
        "SELECT MAKETIME(838, 59, 59);"
      ]
    },
    {
      "title": "MySQL MICROSECOND() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the microsecond part of a datetime:\nDefinition and Usage\nThe MICROSECOND() function returns the microsecond part of a time/datetime (from 0 to 999999).\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the microsecond part of a time value:",
      "examples": [
        "SELECT MICROSECOND(\"2017-06-20 09:34:00.000023\");",
        "MICROSECOND(datetime)",
        "SELECT MICROSECOND(\"23:59:59.000045\");"
      ]
    },
    {
      "title": "MySQL MINUTE() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the minute part of a datetime value:\nDefinition and Usage\nThe MINUTE() function returns the minute part of a time/datetime (from 0 to 59).\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the minute part of a time value:",
      "examples": [
        "SELECT MINUTE(\"2017-06-20 09:34:00\");",
        "MINUTE(datetime)",
        "SELECT MINUTE(\"23:59:59\");"
      ]
    },
    {
      "title": "MySQL MONTH() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the month part of a date:\nDefinition and Usage\nThe MONTH() function returns the month part for a given date (a number from 1 to 12).\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the month part of a date:\nExample\nReturn the month part of the current system date:",
      "examples": [
        "SELECT MONTH(\"2017-06-15\");",
        "MONTH(date)",
        "SELECT MONTH(\"2017-06-15 09:34:21\");",
        "SELECT MONTH(CURDATE());"
      ]
    },
    {
      "title": "MySQL MONTHNAME() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the name of the month for a date:\nDefinition and Usage\nThe MONTHNAME() function returns the name of the month for a given date.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the name of the month for a date:\nExample\nReturn the name of the month for the current system date:",
      "examples": [
        "SELECT MONTHNAME(\"2017-06-15\");",
        "MONTHNAME(date)",
        "SELECT MONTHNAME(\"2017-06-15 09:34:21\");",
        "SELECT MONTHNAME(CURDATE());"
      ]
    },
    {
      "title": "MySQL NOW() Function",
      "summary": "ExampleGet your own SQL Server\nReturn current date and time:\nDefinition and Usage\nThe NOW() function returns the current date and time.\nNote: The date and time is returned as \"YYYY-MM-DD HH-MM-SS\" (string) or as YYYYMMDDHHMMSS.uuuuuu (numeric).\nSyntax\nTechnical Details\nMore Examples\nExample\nReturn current date and time + 1:",
      "examples": [
        "SELECT NOW();",
        "NOW()",
        "SELECT NOW() + 1;"
      ]
    },
    {
      "title": "MySQL PERIOD_ADD() Function",
      "summary": "ExampleGet your own SQL Server\nAdd a specified number of months to a period:\nDefinition and Usage\nThe PERIOD_ADD() function adds a specified number of months to a period.\nThe PERIOD_ADD() function will return the result formatted as YYYYMM.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nAdd a specified number of months to a period:\nExample\nAdd a specified number of months to a period:",
      "examples": [
        "SELECT PERIOD_ADD(201703, 5);",
        "PERIOD_ADD(period, number)",
        "SELECT PERIOD_ADD(201703, 15);",
        "SELECT PERIOD_ADD(201703, -2);"
      ]
    },
    {
      "title": "MySQL PERIOD_DIFF() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the difference between two periods:\nDefinition and Usage\nThe PERIOD_DIFF() function returns the difference between two periods. The result will be in months.\nNote: period1 and period2 should be in the same format.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the difference between two periods:\nExample\nReturn the difference between two periods:",
      "examples": [
        "SELECT PERIOD_DIFF(201710, 201703);",
        "PERIOD_DIFF(period1, period2)",
        "SELECT PERIOD_DIFF(201703, 201803);",
        "SELECT PERIOD_DIFF(1703, 1612);"
      ]
    },
    {
      "title": "MySQL QUARTER() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the quarter of the year for the date:\nDefinition and Usage\nThe QUARTER() function returns the quarter of the year for a given date value (a number from 1 to 4).\nJanuary-March returns 1\nApril-June returns 2\nJuly-Sep returns 3\nOct-Dec returns 4\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the quarter of the year for the date:\nExample\nReturn the quarter of the year for the date:",
      "examples": [
        "SELECT QUARTER(\"2017-06-15\");",
        "QUARTER(date)",
        "SELECT QUARTER(\"2017-01-01 09:34:21\");",
        "SELECT QUARTER(CURDATE());"
      ]
    },
    {
      "title": "MySQL SECOND() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the seconds part of a datetime value:\nDefinition and Usage\nThe SECOND() function returns the seconds part of a time/datetime (from 0 to 59).\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the seconds part of a time value:",
      "examples": [
        "SELECT SECOND(\"2017-06-20 09:34:00.000023\");",
        "SECOND(datetime)",
        "SELECT SECOND(\"23:59:59\");"
      ]
    },
    {
      "title": "MySQL SEC_TO_TIME() Function",
      "summary": "ExampleGet your own SQL Server\nReturn a time value based on a specified seconds value:\nDefinition and Usage\nThe SEC_TO_TIME() function returns a time value (in format HH:MM:SS) based on the specified seconds.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn a time value based on a specified seconds value:",
      "examples": [
        "SELECT SEC_TO_TIME(1);",
        "SEC_TO_TIME(seconds)",
        "SELECT SEC_TO_TIME(-6897);"
      ]
    },
    {
      "title": "MySQL STR_TO_DATE() Function",
      "summary": "ExampleGet your own SQL Server\nReturn a date based on a string and a format:\nDefinition and Usage\nThe STR_TO_DATE() function returns a date based on a string and a format.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn a date based on a string and a format:\nExample\nReturn a date based on a string and a format:\nExample\nReturn a date based on a string and a format:",
      "examples": [
        "SELECT STR_TO_DATE(\"August 10 2017\", \"%M %d %Y\");",
        "STR_TO_DATE(string, format)",
        "SELECT STR_TO_DATE(\"August,5,2017\", \"%M %e %Y\");",
        "SELECT STR_TO_DATE(\"Monday, August 14, 2017\", \"%W %M %e %Y\");",
        "SELECT STR_TO_DATE(\"2017,8,14 10,40,10\", \"%Y,%m,%d %h,%i,%s\");"
      ]
    },
    {
      "title": "MySQL SUBDATE() Function",
      "summary": "ExampleGet your own SQL Server\nSubtract 10 days from a date and return the date:\nDefinition and Usage\nThe SUBDATE() function subtracts a time/date interval from a date and then returns the date.\nSyntax\nOR:\nParameter Values\nMICROSECOND\nSECOND\nMINUTE\nHOUR\nDAY\nWEEK\nMONTH\nQUARTER\nYEAR\nSECOND_MICROSECOND\nMINUTE_MICROSECOND\nMINUTE_SECOND\nHOUR_MICROSECOND\nHOUR_SECOND\nHOUR_MINUTE\nDAY_MICROSECOND\nDAY_SECOND\nDAY_MINUTE\nDAY_HOUR\nYEAR_MONTH\nTechnical Details\nMore Examples\nExample\nSubtract 15 minutes from a date and return the date:\nExample\nSubtract 3 hours from a date and return the date:\nExample\nAdd 2 months to a date and return the date:",
      "examples": [
        "SELECT SUBDATE(\"2017-06-15\", INTERVAL 10 DAY);",
        "SUBDATE(date, INTERVAL value unit)",
        "SUBDATE(date, days)",
        "SELECT SUBDATE(\"2017-06-15 09:34:21\", INTERVAL 15 MINUTE);",
        "SELECT SUBDATE(\"2017-06-15 09:34:21\", INTERVAL 3 HOUR);",
        "SELECT SUBDATE(\"2017-06-15\", INTERVAL -2 MONTH);"
      ]
    },
    {
      "title": "MySQL SUBTIME() Function",
      "summary": "ExampleGet your own SQL Server\nSubtract 5.000001 seconds and return the datetime:\nDefinition and Usage\nThe SUBTIME() function subtracts time from a time/datetime expression and then returns the new time/datetime.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nSubtract 3 hours, 2 minutes, 5.000001 seconds and return the datetime:\nExample\nSubtract 5 seconds and return the time:\nExample\nSubtract 3 minutes and return the time:\nExample\nAdd 3 hours, 2 minutes, and 5 seconds, and return the time:",
      "examples": [
        "SELECT SUBTIME(\"2017-06-15 10:24:21.000004\", \"5.000001\");",
        "SUBTIME(datetime, time_interval)",
        "SELECT SUBTIME(\"2017-06-15 10:24:21.000004\", \"3:2:5.000001\");",
        "SELECT SUBTIME(\"10:24:21\", \"5\");",
        "SELECT SUBTIME(\"10:24:21\", \"300\");",
        "SELECT SUBTIME(\"10:24:21\", \"-3:2:5\");"
      ]
    },
    {
      "title": "MySQL SYSDATE() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the current date and time:\nDefinition and Usage\nThe SYSDATE() function returns the current date and time.\nNote: The date and time is returned as \"YYYY-MM-DD HH:MM:SS\" (string) or as YYYYMMDDHHMMSS (numeric).\nSyntax\nTechnical Details\nMore Examples\nExample\nReturn the current date and time + 1:",
      "examples": [
        "SELECT SYSDATE();",
        "SYSDATE()",
        "SELECT SYSDATE() + 1;"
      ]
    },
    {
      "title": "MySQL TIME() Function",
      "summary": "ExampleGet your own SQL Server\nExtract the time part from a time expression:\nDefinition and Usage\nThe TIME() function extracts the time part from a given time/datetime.\nNote: This function returns \"00:00:00\" if expression is not a datetime/time, or NULL if expression is NULL.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nExtract the time part from the datetime expression:\nExample\nExtract the time part from the datetime expression:\nExample\nExtract the time part from NULL:",
      "examples": [
        "SELECT TIME(\"19:30:10\");",
        "TIME(expression)",
        "SELECT TIME(\"2017-08-15 19:30:10\");",
        "SELECT TIME(\"2017-08-15 19:30:10.000001\");",
        "SELECT TIME(NULL);"
      ]
    },
    {
      "title": "MySQL TIME_FORMAT() Function",
      "summary": "ExampleGet your own SQL Server\nFormat a time:\nDefinition and Usage\nThe TIME_FORMAT() function formats a time by a specified format.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nFormat a time:\nExample\nFormat a time:\nExample\nFormat a time:",
      "examples": [
        "SELECT TIME_FORMAT(\"19:30:10\", \"%H %i %s\");",
        "TIME_FORMAT(time, format)",
        "SELECT TIME_FORMAT(\"19:30:10\", \"%h %i %s %p\");",
        "SELECT TIME_FORMAT(\"19:30:10\", \"%r\");",
        "SELECT TIME_FORMAT(\"19:30:10\", \"%T\");"
      ]
    },
    {
      "title": "MySQL TIME_TO_SEC() Function",
      "summary": "ExampleGet your own SQL Server\nConvert a time value into seconds:\nDefinition and Usage\nThe TIME_TO_SEC() function converts a time value into seconds.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert a time value into seconds:\nExample\nConvert a time value into seconds:\nExample\nConvert a time value into seconds:",
      "examples": [
        "SELECT TIME_TO_SEC(\"19:30:10\");",
        "TIME_TO_SEC(time)",
        "SELECT TIME_TO_SEC(\"00:00:05\");",
        "SELECT TIME_TO_SEC(\"03:30:00.999999\");",
        "SELECT TIME_TO_SEC(\"-03:30:00\");"
      ]
    },
    {
      "title": "MySQL TIMEDIFF() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the difference between two time expressions:\nDefinition and Usage\nThe TIMEDIFF() function returns the difference between two time/datetime expressions.\nNote: time1 and time2 should be in the same format, and the calculation is time1 - time2.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the difference between two datetime expressions:",
      "examples": [
        "SELECT TIMEDIFF(\"13:10:11\", \"13:10:10\");",
        "TIMEDIFF(time1, time2)",
        "SELECT TIMEDIFF(\"2017-06-25 13:10:11\", \"2017-06-15 13:10:10\");"
      ]
    },
    {
      "title": "MySQL TIMESTAMP() Function",
      "summary": "ExampleGet your own SQL Server\nReturn a datetime value based on the arguments:\nDefinition and Usage\nThe TIMESTAMP() function returns a datetime value based on a date or datetime value.\nNote: If there are specified two arguments with this function, it first adds the second argument to the first, and then returns a datetime value.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn a datetime value based on the arguments:",
      "examples": [
        "SELECT TIMESTAMP(\"2017-07-23\",  \"13:10:11\");",
        "TIMESTAMP(expression, time)",
        "SELECT TIMESTAMP(\"2017-07-23\");"
      ]
    },
    {
      "title": "MySQL TO_DAYS() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the number of days between the date and year 0:\nDefinition and Usage\nThe TO_DAYS() function returns the number of days between a date and year 0 (date \"0000-00-00\").\nThe TO_DAYS() function can be used only with dates within the Gregorian calendar.\nNote: This function is the opposite of the FROM_DAYS() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the number of days between the date and year 0:",
      "examples": [
        "SELECT TO_DAYS(\"2017-06-20\");",
        "TO_DAYS(date)",
        "SELECT TO_DAYS(\"2017-06-20 09:34:00\");"
      ]
    },
    {
      "title": "MySQL WEEK() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the week number for a date:\nDefinition and Usage\nThe WEEK() function returns the week number for a given date (a number from 0 to 53).\nSyntax\nParameter Values\nOptional. Specifies what day the week starts on. Can be one of the following:\n0 - First day of week is Sunday\n1 - First day of week is Monday and the first week of the year has more than 3 days\n2 - First day of week is Sunday\n3 - First day of week is Monday and the first week of the year has more than 3 days\n4 - First day of week is Sunday and the first week of the year has more than 3 days\n5 - First day of week is Monday\n6 - First day of week is Sunday and the first week of the year has more than 3 days\n7 - First day of week is Monday\nTechnical Details\nMore Examples\nExample\nReturn the week number for a date:\nExample\nReturn the week number for the current system date:",
      "examples": [
        "SELECT WEEK(\"2017-06-15\");",
        "WEEK(date, firstdayofweek)",
        "SELECT WEEK(\"2017-10-25\");",
        "SELECT WEEK(CURDATE());"
      ]
    },
    {
      "title": "MySQL WEEKDAY() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the weekday number for a date:\nDefinition and Usage\nThe WEEKDAY() function returns the weekday number for a given date.\nNote: 0 = Monday, 1 = Tuesday, 2 = Wednesday, 3 = Thursday, 4 = Friday, 5 = Saturday, 6 = Sunday.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the weekday number for a date:\nExample\nReturn the weekday number for the current system date:",
      "examples": [
        "SELECT WEEKDAY(\"2017-06-15\");",
        "WEEKDAY(date)",
        "SELECT WEEKDAY(\"2017-01-01\");",
        "SELECT WEEKDAY(CURDATE());"
      ]
    },
    {
      "title": "MySQL WEEKOFYEAR() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the week number for a date:\nDefinition and Usage\nThe WEEKOFYEAR() function returns the week number for a given date (a number from 1 to 53).\nNote: This function assumes that the first day of the week is Monday and the first week of the year has more than 3 days.\nTip: Also look at the WEEK() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the week number for a date:\nExample\nReturn the week number for the current system date:",
      "examples": [
        "SELECT WEEKOFYEAR(\"2017-06-15\");",
        "WEEKOFYEAR(date)",
        "SELECT WEEKOFYEAR(\"2017-01-01\");",
        "SELECT WEEKOFYEAR(CURDATE());"
      ]
    },
    {
      "title": "MySQL YEAR() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the year part of a date:\nDefinition and Usage\nThe YEAR() function returns the year part for a given date (a number from 1000 to 9999).\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the year part of a date:\nExample\nReturn the year part of the current system date:",
      "examples": [
        "SELECT YEAR(\"2017-06-15\");",
        "YEAR(date)",
        "SELECT YEAR(\"2017-06-15 09:34:21\");",
        "SELECT YEAR(CURDATE());"
      ]
    },
    {
      "title": "MySQL YEARWEEK() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the year and week number for a date:\nDefinition and Usage\nThe YEARWEEK() function returns the year and week number (a number from 0 to 53) for a given date.\nSyntax\nParameter Values\nOptional. Specifies what day the week starts on. Can be one of the following:\n0 - First day of week is Sunday\n1 - First day of week is Monday and the first week has more than 3 days\n2 - First day of week is Sunday\n3 - First day of week is Monday and the first week has more than 3 days\n4 - First day of week is Sunday and the first week has more than 3 days\n5 - First day of week is Monday\n6 - First day of week is Sunday and the first week has more than 3 days\n7 - First day of week is Monday\nTechnical Details\nMore Examples\nExample\nReturn the year and week number for a date:\nExample\nReturn the year and week number for the current system date:",
      "examples": [
        "SELECT YEARWEEK(\"2017-06-15\");",
        "YEARWEEK(date, firstdayofweek)",
        "SELECT YEARWEEK(\"2017-10-25\");",
        "SELECT YEARWEEK(CURDATE());"
      ]
    },
    {
      "title": "MySQL BIN() Function",
      "summary": "ExampleGet your own SQL Server\nReturn a binary representation of 15:\nDefinition and Usage\nThe BIN() function returns a binary representation of a number, as a string value.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn a binary representation of 111:\nExample\nReturn a binary representation of 8:",
      "examples": [
        "SELECT BIN(15);",
        "BIN(number)",
        "SELECT BIN(111);",
        "SELECT BIN(8);"
      ]
    },
    {
      "title": "MySQL BINARY Function",
      "summary": "ExampleGet your own SQL Server\nConvert a value to a binary string:\nDefinition and Usage\nThe BINARY function converts a value to a binary string.\nThis function is equivalent to using CAST(value AS BINARY).\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nHere MySQL performs a character-by-character comparison of  \"HELLO\" and \"hello\" and return 1 (because on a character-by-character basis, they are equivalent):\nExample\nHere MySQL performs a byte-by-byte comparison of  \"HELLO\" and \"hello\" and return 0 (because on a byte-by-byte basis, they are NOT equivalent):",
      "examples": [
        "SELECT BINARY \"W3Schools.com\";",
        "BINARY value",
        "SELECT \"HELLO\" = \"hello\";",
        "SELECT BINARY \"HELLO\" = \"hello\";"
      ]
    },
    {
      "title": "MySQL CASE Function",
      "summary": "ExampleGet your own SQL Server\nGo through conditions and return a value when the first condition is met:\nDefinition and Usage\nThe CASE statement goes through conditions and return a value when the first condition is met (like an IF-THEN-ELSE statement). So, once a condition is true, it will stop reading and return the result.\nIf no conditions are true, it will return the value in the ELSE clause.\nIf there is no ELSE part and no conditions are true, it returns NULL.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nThe following SQL will order the customers by City. However, if City is NULL, then order by Country:\nExample",
      "examples": [
        "SELECT OrderID, Quantity,\nCASE\nWHEN Quantity > 30 THEN \"The quantity is greater than 30\"\nWHEN Quantity = 30 THEN \"The quantity is 30\"\nELSE \"The quantity is under 30\"\nEND\nFROM OrderDetails;",
        "CASE\nWHEN condition1 THEN result1\nWHEN condition2 THEN result2\nWHEN conditionN THEN resultN\nELSE result\nEND;",
        "SELECT CustomerName, City, Country\nFROM Customers\nORDER BY\n(CASE\nWHEN City IS NULL THEN Country\nELSE City\nEND);"
      ]
    },
    {
      "title": "MySQL CAST() Function",
      "summary": "ExampleGet your own SQL Server\nConvert a value to a DATE datatype:\nDefinition and Usage\nThe CAST() function converts a value (of any type) into the specified datatype.\nTip: See also the CONVERT() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert a value to a CHAR datatype:\nExample\nConvert a value to a TIME datatype:\nExample\nConvert a value to a SIGNED datatype:",
      "examples": [
        "SELECT CAST(\"2017-08-29\" AS DATE);",
        "CAST(value AS datatype)",
        "SELECT CAST(150 AS CHAR);",
        "SELECT CAST(\"14:06:10\" AS TIME);",
        "SELECT CAST(5-10 AS SIGNED);"
      ]
    },
    {
      "title": "MySQL COALESCE() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the first non-null value in a list:\nDefinition and Usage\nThe COALESCE() function returns the first non-null value in a list.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the first non-null value in a list:",
      "examples": [
        "SELECT COALESCE(NULL, NULL, NULL, 'W3Schools.com', NULL, 'Example.com');",
        "COALESCE(val1, val2, ...., val_n)",
        "SELECT COALESCE(NULL, 1, 2, 'W3Schools.com');"
      ]
    },
    {
      "title": "MySQL CONNECTION_ID() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the unique connection ID for the current connection:\nDefinition and Usage\nThe CONNECTION_ID() function returns the unique connection ID for the current connection.\nSyntax\nTechnical Details",
      "examples": [
        "SELECT CONNECTION_ID();",
        "CONNECTION_ID()"
      ]
    },
    {
      "title": "MySQL CONV() Function",
      "summary": "ExampleGet your own SQL Server\nConvert a number from numeric base system 10 to numeric base system 2:\nDefinition and Usage\nThe CONV() function converts a number from one numeric base system to another, and returns the result as a string value.\nNote: This function returns NULL if any of the parameters are NULL.\nTip: Also look at the BIN() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert a number from numeric base system 2 to numeric base system 10:\nExample\nConvert a number from numeric base system 10 to numeric base system 16:",
      "examples": [
        "SELECT CONV(15, 10, 2);",
        "CONV(number, from_base, to_base)",
        "SELECT CONV(1111, 2, 10);",
        "SELECT CONV(88, 10, 16);"
      ]
    },
    {
      "title": "MySQL CONVERT() Function",
      "summary": "ExampleGet your own SQL Server\nConvert a value to a DATE datatype:\nDefinition and Usage\nThe CONVERT() function converts a value into the specified datatype or character set.\nTip: Also look at the CAST() function.\nSyntax\nOR:\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert a value to a CHAR datatype:\nExample\nConvert a value to a TIME datatype:\nExample\nConvert a value to LATIN1 character set:",
      "examples": [
        "SELECT CONVERT(\"2017-08-29\", DATE);",
        "CONVERT(value, type)",
        "CONVERT(value USING charset)",
        "SELECT CONVERT(150, CHAR);",
        "SELECT CONVERT(\"14:06:10\", TIME);",
        "SELECT CONVERT(\"W3Schools.com\" USING latin1);"
      ]
    },
    {
      "title": "MySQL CURRENT_USER() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the user name and host name for the MySQL account:\nDefinition and Usage\nThe CURRENT_USER() function returns the user name and host name for the MySQL account that the server used to authenticate the current client.\nThe result is returned as a string in the UTF8 character set.\nTip: See also the USER() function.\nSyntax\nTechnical Details",
      "examples": [
        "SELECT CURRENT_USER();",
        "CURRENT_USER()"
      ]
    },
    {
      "title": "MySQL DATABASE() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the name of the current (default) database:\nDefinition and Usage\nThe DATABASE() function returns the name of the current database.\nIf there is no current database, this function returns NULL or \"\".\nSyntax\nTechnical Details",
      "examples": [
        "SELECT DATABASE();",
        "DATABASE()"
      ]
    },
    {
      "title": "MySQL IF() Function",
      "summary": "ExampleGet your own SQL Server\nReturn \"YES\" if the condition is TRUE, or \"NO\" if the condition is FALSE:\nDefinition and Usage\nThe IF() function returns a value if a condition is TRUE, or another value if a condition is FALSE.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn 5 if the condition is TRUE, or 10 if the condition is FALSE:\nExample\nTest whether two strings are the same and return \"YES\" if they are, or \"NO\" if not:\nExample\nReturn \"MORE\" if the condition is TRUE, or \"LESS\" if the condition is FALSE:",
      "examples": [
        "SELECT IF(500<1000, \"YES\", \"NO\");",
        "IF(condition, value_if_true, value_if_false)",
        "SELECT IF(500<1000, 5, 10);",
        "SELECT IF(STRCMP(\"hello\",\"bye\") = 0, \"YES\", \"NO\");",
        "SELECT OrderID, Quantity, IF(Quantity>10, \"MORE\", \"LESS\")\nFROM OrderDetails;"
      ]
    },
    {
      "title": "MySQL IFNULL() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the specified value IF the expression is NULL, otherwise return the expression:\nDefinition and Usage\nThe IFNULL() function returns a specified value if the expression is NULL.\nIf the expression is NOT NULL, this function returns the expression.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the specified value IF the expression is NULL, otherwise return the expression:\nExample\nReturn the specified value IF the expression is NULL, otherwise return the expression:",
      "examples": [
        "SELECT IFNULL(NULL, \"W3Schools.com\");",
        "IFNULL(expression, alt_value)",
        "SELECT IFNULL(\"Hello\", \"W3Schools.com\");",
        "SELECT IFNULL(NULL, 500);"
      ]
    },
    {
      "title": "MySQL ISNULL() Function",
      "summary": "ExampleGet your own SQL Server\nTest whether an expression is NULL:\nDefinition and Usage\nThe ISNULL() function returns 1 or 0 depending on whether an expression is NULL.\nIf expression is NULL, this function returns 1. Otherwise, it returns 0.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nTest whether an expression is NULL:\nExample\nTest whether an expression is NULL:\nExample\nTest whether an expression is NULL:",
      "examples": [
        "SELECT ISNULL(NULL);",
        "ISNULL(expression)",
        "SELECT ISNULL(\"\");",
        "SELECT ISNULL(350);",
        "SELECT ISNULL(\"Hello world!\");"
      ]
    },
    {
      "title": "MySQL LAST_INSERT_ID() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the AUTO_INCREMENT id of the last row that has been inserted in a table:\nDefinition and Usage\nThe LAST_INSERT_ID() function returns the AUTO_INCREMENT id of the last row that has been inserted in a table.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT LAST_INSERT_ID();",
        "LAST_INSERT_ID(expression)"
      ]
    },
    {
      "title": "MySQL NULLIF() Function",
      "summary": "ExampleGet your own SQL Server\nCompare two expressions:\nDefinition and Usage\nThe NULLIF() function compares two expressions and returns NULL if they are equal. Otherwise, the first expression is returned.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nCompare two expressions:\nExample\nCompare two expressions:\nExample\nCompare two expressions:",
      "examples": [
        "SELECT NULLIF(25, 25);",
        "NULLIF(expr1, expr2)",
        "SELECT NULLIF(25, \"Hello\");",
        "SELECT NULLIF(\"Hello\", \"world\");",
        "SELECT NULLIF(\"2017-08-25\", \"2017-08-25\");"
      ]
    },
    {
      "title": "MySQL SESSION_USER() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the current user name and host name for the MySQL connection:\nDefinition and Usage\nThe SESSION_USER() function returns the current user name and host name for the MySQL connection.\nNote: This function is equal to the SYSTEM_USER() and the USER() function.\nSyntax\nTechnical Details",
      "examples": [
        "SELECT SESSION_USER();",
        "SESSION_USER()"
      ]
    },
    {
      "title": "MySQL SYSTEM_USER() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the current user name and host name for the MySQL connection:\nDefinition and Usage\nThe SYSTEM_USER() function returns the current user name and host name for the MySQL connection.\nNote: This function is equal to the SESSION_USER() function and the USER() function.\nSyntax\nTechnical Details",
      "examples": [
        "SELECT SYSTEM_USER();",
        "SYSTEM_USER()"
      ]
    },
    {
      "title": "MySQL USER() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the current user name and host name for the MySQL connection:\nDefinition and Usage\nThe USER() function returns the current user name and host name for the MySQL connection.\nNote: This function is equal to the SESSION_USER() function and the SYSTEM_USER() function.\nTip: Also look at the CURRENT_USER() function.\nSyntax\nTechnical Details",
      "examples": [
        "SELECT USER();",
        "USER()"
      ]
    },
    {
      "title": "MySQL VERSION() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the current version of the MySQL database:\nDefinition and Usage\nThe VERSION() function returns the current version of the MySQL database, as a string.\nSyntax\nTechnical Details",
      "examples": [
        "SELECT VERSION();",
        "VERSION()"
      ]
    },
    {
      "title": "SQL Server Functions",
      "summary": "SQL Server has many built-in functions.\nThis reference contains string, numeric, date, conversion, and some advanced functions in SQL Server.\nSQL Server String Functions\nREMOVE ADS\nSQL Server Math/Numeric Functions\nSQL Server Date Functions\nSQL Server Advanced Functions",
      "examples": []
    },
    {
      "title": "SQL Server ASCII() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the ASCII value of the first character in \"CustomerName\":\nDefinition and Usage\nThe ASCII() function returns the ASCII value for the specific character.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT ASCII(CustomerName) AS NumCodeOfFirstChar\nFROM Customers;",
        "ASCII(character)"
      ]
    },
    {
      "title": "SQL Server CHAR() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the character based on the number code 65:\nDefinition and Usage\nThe CHAR() function returns the character based on the ASCII code.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT CHAR(65) AS CodeToCharacter;",
        "CHAR(code)"
      ]
    },
    {
      "title": "SQL Server CHARINDEX() Function",
      "summary": "ExampleGet your own SQL Server\nSearch for \"t\" in string \"Customer\", and return position:\nDefinition and Usage\nThe CHARINDEX() function searches for a substring in a string, and returns the position.\nIf the substring is not found, this function returns 0.\nNote: This function performs a case-insensitive search.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nSearch for \"OM\" in string \"Customer\", and return position:\nExample\nSearch for \"mer\" in string \"Customer\", and return position (start in position 3):",
      "examples": [
        "SELECT CHARINDEX('t', 'Customer') AS MatchPosition;",
        "CHARINDEX(substring, string, start)",
        "SELECT CHARINDEX('OM', 'Customer') AS MatchPosition;",
        "SELECT CHARINDEX('mer', 'Customer', 3) AS MatchPosition;"
      ]
    },
    {
      "title": "SQL Server CONCAT() Function",
      "summary": "ExampleGet your own SQL Server\nAdd two strings together:\nDefinition and Usage\nThe CONCAT() function adds two or more strings together.\nNote: See also Concat with the + operator and CONCAT_WS().\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nAdd 3 strings together:\nExample\nAdd strings together (separate each string with a space character):",
      "examples": [
        "SELECT CONCAT('W3Schools', '.com');",
        "CONCAT(string1, string2, ...., string_n)",
        "SELECT CONCAT('SQL', ' is', ' fun!');",
        "SELECT CONCAT('SQL', ' ', 'is', ' ', 'fun!');"
      ]
    },
    {
      "title": "SQL Server Concat With +",
      "summary": "ExampleGet your own SQL Server\nAdd 2 strings together:\nDefinition and Usage\nThe + operator allows you to add two or more strings together.\nNote: See also the CONCAT() and CONCAT_WS() functions.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nAdd 3 strings together:\nExample\nAdd strings together (separate each string with a space character):",
      "examples": [
        "SELECT 'W3Schools' + '.com';",
        "string1 + string2 + string_n",
        "SELECT 'SQL' + ' is' + ' fun!';",
        "SELECT 'SQL' + ' ' + 'is' + ' ' + 'fun!';"
      ]
    },
    {
      "title": "SQL Server CONCAT_WS() Function",
      "summary": "ExampleGet your own SQL Server\nAdd strings together. Use '.' to separate the concatenated string values:\nDefinition and Usage\nThe CONCAT_WS() function adds two or more strings together with a separator.\nNote: See also CONCAT() and Concat with the + operator.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nAdd strings together. Use '-' to separate the concatenated string values:",
      "examples": [
        "SELECT CONCAT_WS('.', 'www', 'W3Schools', 'com');",
        "CONCAT_WS(separator, string1, string2, ...., string_n)",
        "SELECT CONCAT_WS('-', 'SQL', ' is', ' fun!');"
      ]
    },
    {
      "title": "SQL Server DATALENGTH() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the length of an expression (in bytes):\nDefinition and Usage\nThe DATALENGTH() function returns the number of bytes used to represent an expression.\nNote: The DATALENGTH() function counts both leading and trailing spaces when calculating the length of the expression.\nTip: Also see the LEN() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the length of an expression (in bytes) (counts both leading and trailing spaces):\nExample\nReturn the length of an expression (in bytes):",
      "examples": [
        "SELECT DATALENGTH('W3Schools.com');",
        "DATALENGTH(expression)",
        "SELECT DATALENGTH('   W3Schools.com   ');",
        "SELECT DATALENGTH('2017-08');"
      ]
    },
    {
      "title": "SQL Server DIFFERENCE() Function",
      "summary": "ExampleGet your own SQL Server\nCompares two SOUNDEX values, and return an integer:\nDefinition and Usage\nThe DIFFERENCE() function compares two SOUNDEX values, and returns an integer. The integer value indicates the match for the two SOUNDEX values, from 0 to 4.\n0 indicates weak or no similarity between the SOUNDEX values. 4 indicates strong similarity or identically SOUNDEX values.\nTip: Also look at the SOUNDEX() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nCompares two SOUNDEX values, and return an integer:",
      "examples": [
        "SELECT DIFFERENCE('Juice', 'Jucy');",
        "DIFFERENCE(expression, expression)",
        "SELECT DIFFERENCE('Juice', 'Banana');"
      ]
    },
    {
      "title": "SQL Server FORMAT() Function",
      "summary": "ExampleGet your own SQL Server\nFormat a date:\nDefinition and Usage\nThe FORMAT() function formats a value with the specified format (and an optional culture in SQL Server 2017).\nUse the FORMAT() function to format date/time values and number values. For general data type conversions, use CAST() or CONVERT().\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nFormat a number:",
      "examples": [
        "DECLARE @d DATETIME = '12/01/2018';\nSELECT FORMAT (@d, 'd', 'en-US') AS 'US English Result',\nFORMAT (@d, 'd', 'no') AS 'Norwegian Result',\nFORMAT (@d, 'd', 'zu') AS 'Zulu Result';",
        "FORMAT(value, format, culture)",
        "SELECT FORMAT(123456789, '##-##-#####');"
      ]
    },
    {
      "title": "SQL Server LEFT() Function",
      "summary": "ExampleGet your own SQL Server\nExtract 3 characters from a string (starting from left):\nDefinition and Usage\nThe LEFT() function extracts a number of characters from a string (starting from left).\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nExtract 5 characters from the text in the \"CustomerName\" column (starting from left):\nExample\nExtract 100 characters from a string (starting from left):",
      "examples": [
        "SELECT LEFT('SQL Tutorial', 3) AS ExtractString;",
        "LEFT(string, number_of_chars)",
        "SELECT LEFT(CustomerName, 5) AS ExtractString\nFROM Customers;",
        "SELECT LEFT('SQL Tutorial', 100) AS ExtractString;"
      ]
    },
    {
      "title": "SQL Server LEN() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the length of a string:\nDefinition and Usage\nThe LEN() function returns the length of a string.\nNote: Trailing spaces at the end of the string is not included when calculating the length. However, leading spaces at the start of the string is included when calculating the length.\nTip: Also look at the DATALENGTH() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the length of a string (counts leading spaces, but not trailing spaces):\nExample\nReturn the length of a string:",
      "examples": [
        "SELECT LEN('W3Schools.com');",
        "LEN(string)",
        "SELECT LEN(' W3Schools.com ');",
        "SELECT LEN('2017-08');"
      ]
    },
    {
      "title": "SQL Server LOWER() Function",
      "summary": "ExampleGet your own SQL Server\nConvert the text to lower-case:\nDefinition and Usage\nThe LOWER() function converts a string to lower-case.\nNote: Also look at the UPPER() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert the text in \"CustomerName\" to lower-case:",
      "examples": [
        "SELECT LOWER('SQL Tutorial is FUN!');",
        "LOWER(text)",
        "SELECT LOWER(CustomerName) AS LowercaseCustomerName\nFROM Customers;"
      ]
    },
    {
      "title": "SQL Server LTRIM() Function",
      "summary": "ExampleGet your own SQL Server\nRemove leading spaces from a string:\nDefinition and Usage\nThe LTRIM() function removes leading spaces from a string.\nNote: Also look at the RTRIM() function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT LTRIM('     SQL Tutorial') AS LeftTrimmedString;",
        "LTRIM(string)"
      ]
    },
    {
      "title": "SQL Server NCHAR() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the Unicode character based on the number code 65:\nDefinition and Usage\nThe NCHAR() function returns the Unicode character based on the number code.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT NCHAR(65) AS NumberCodeToUnicode;",
        "NCHAR(number_code)"
      ]
    },
    {
      "title": "SQL Server PATINDEX() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the position of a pattern in a string:\nDefinition and Usage\nThe PATINDEX() function returns the position of a pattern in a string.\nIf the pattern is not found, this function returns 0.\nNote: The search is case-insensitive and the first position in string is 1.\nSyntax\nParameter Values\n% - Match any string of any length (including 0 length)\n_ - Match one single character\n[] - Match any characters in the brackets, e.g. [xyz]\n[^] - Match any character not in the brackets, e.g. [^xyz]\nTechnical Details\nMore Examples\nExample\nReturn the position of a pattern in a string:\nExample\nReturn the position of a pattern in a string:\nExample\nReturn the position of a pattern in a string:",
      "examples": [
        "SELECT PATINDEX('%schools%', 'W3Schools.com');",
        "PATINDEX(%pattern%, string)",
        "SELECT PATINDEX('%s%com%', 'W3Schools.com');",
        "SELECT PATINDEX('%[ol]%', 'W3Schools.com');",
        "SELECT PATINDEX('%[z]%', 'W3Schools.com');"
      ]
    },
    {
      "title": "SQL Server QUOTENAME() Function",
      "summary": "ExampleGet your own SQL Server\nReturn a Unicode string with bracket delimiters (default):\nDefinition and Usage\nThe QUOTENAME() function returns a Unicode string with delimiters added to make the string a valid SQL Server delimited identifier.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn a Unicode string with parenthesis delimiters:",
      "examples": [
        "SELECT QUOTENAME('abcdef');",
        "QUOTENAME(string, quote_char)",
        "SELECT QUOTENAME('abcdef', '()');"
      ]
    },
    {
      "title": "SQL Server REPLACE() Function",
      "summary": "ExampleGet your own SQL Server\nReplace \"T\" with \"M\":\nDefinition and Usage\nThe REPLACE() function replaces all occurrences of a substring within a string, with a new substring.\nNote: The search is case-insensitive.\nTip: Also look at the STUFF() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReplace \"SQL\" with \"HTML\":\nExample\nReplace \"a\" with \"c\":",
      "examples": [
        "SELECT REPLACE('SQL Tutorial', 'T', 'M');",
        "REPLACE(string, old_string, new_string)",
        "SELECT REPLACE('SQL Tutorial', 'SQL', 'HTML');",
        "SELECT REPLACE('ABC ABC ABC', 'a', 'c');"
      ]
    },
    {
      "title": "SQL Server REPLICATE() Function",
      "summary": "ExampleGet your own SQL Server\nRepeat a string:\nDefinition and Usage\nThe REPLICATE() function repeats a string a specified number of times.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nRepeat the text in CustomerName two times:",
      "examples": [
        "SELECT REPLICATE('SQL Tutorial', 5);",
        "REPLICATE(string, integer)",
        "SELECT REPLICATE(CustomerName, 2)\nFROM Customers;"
      ]
    },
    {
      "title": "SQL Server REVERSE() Function",
      "summary": "ExampleGet your own SQL Server\nReverse a string:\nDefinition and Usage\nThe REVERSE() function reverses a string and returns the result.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReverse the text in CustomerName:",
      "examples": [
        "SELECT REVERSE('SQL Tutorial');",
        "REVERSE(string)",
        "SELECT REVERSE(CustomerName)\nFROM Customers;"
      ]
    },
    {
      "title": "SQL Server RIGHT() Function",
      "summary": "ExampleGet your own SQL Server\nExtract 3 characters from a string (starting from right):\nDefinition and Usage\nThe RIGHT() function extracts a number of characters from a string (starting from right).\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nExtract 5 characters from the text in the \"CustomerName\" column (starting from right):\nExample\nExtract 100 characters from a string (starting from right):",
      "examples": [
        "SELECT RIGHT('SQL Tutorial', 3) AS ExtractString;",
        "RIGHT(string, number_of_chars)",
        "SELECT RIGHT(CustomerName, 5) AS ExtractString\nFROM Customers;",
        "SELECT RIGHT('SQL Tutorial', 100) AS ExtractString;"
      ]
    },
    {
      "title": "SQL Server RTRIM() Function",
      "summary": "ExampleGet your own SQL Server\nRemove trailing spaces from a string:\nDefinition and Usage\nThe RTRIM() function removes trailing spaces from a string.\nNote: Also look at the LTRIM() function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT RTRIM('SQL Tutorial     ') AS RightTrimmedString;",
        "RTRIM(string)"
      ]
    },
    {
      "title": "SQL Server SOUNDEX() Function",
      "summary": "ExampleGet your own SQL Server\nEvaluate the similarity of two strings, and return a four-character code:\nDefinition and Usage\nThe SOUNDEX() function returns a four-character code to evaluate the similarity of two expressions.\nNote: The SOUNDEX() converts the string to a four-character code based on how the string sounds when spoken.\nTip: Also look at the DIFFERENCE() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nEvaluate the similarity of two strings, and return a four-character code:",
      "examples": [
        "SELECT SOUNDEX('Juice'), SOUNDEX('Jucy');",
        "SOUNDEX(expression)",
        "SELECT SOUNDEX('Juice'), SOUNDEX('Banana');"
      ]
    },
    {
      "title": "SQL Server SPACE() Function",
      "summary": "ExampleGet your own SQL Server\nReturn a string with 10 spaces:\nDefinition and Usage\nThe SPACE() function returns a string of the specified number of space characters.\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT SPACE(10);",
        "SPACE(number)"
      ]
    },
    {
      "title": "SQL Server STR() Function",
      "summary": "ExampleGet your own SQL Server\nReturn a number as a string:\nDefinition and Usage\nThe STR() function returns a number as a string.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn a number as a string:\nExample\nReturn a number as a string:",
      "examples": [
        "SELECT STR(185);",
        "STR(number, length, decimals)",
        "SELECT STR(185.5);",
        "SELECT STR(185.476, 6, 2);"
      ]
    },
    {
      "title": "SQL Server STUFF() Function",
      "summary": "ExampleGet your own SQL Server\nDelete 3 characters from a string, starting in position 1, and then insert \"HTML\" in position 1:\nDefinition and Usage\nThe STUFF() function deletes a part of a string and then inserts another part into the string, starting at a specified position.\nTip: Also look at the REPLACE() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nDelete 1 character from a string, starting in position 13, and then insert \" is fun!\" in position 13:",
      "examples": [
        "SELECT STUFF('SQL Tutorial', 1, 3, 'HTML');",
        "STUFF(string, start, length, new_string)",
        "SELECT STUFF('SQL Tutorial!', 13, 1, ' is fun!');"
      ]
    },
    {
      "title": "SQL Server SUBSTRING() Function",
      "summary": "ExampleGet your own SQL Server\nExtract 3 characters from a string, starting in position 1:\nDefinition and Usage\nThe SUBSTRING() function extracts some characters from a string.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nExtract 5 characters from the \"CustomerName\" column, starting in position 1:\nExample\nExtract 100 characters from a string, starting in position 1:",
      "examples": [
        "SELECT SUBSTRING('SQL Tutorial', 1, 3) AS ExtractString;",
        "SUBSTRING(string, start, length)",
        "SELECT SUBSTRING(CustomerName, 1, 5) AS ExtractString\nFROM Customers;",
        "SELECT SUBSTRING('SQL Tutorial', 1, 100) AS ExtractString;"
      ]
    },
    {
      "title": "SQL Server TRANSLATE() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the string from the first argument AFTER the characters specified in the second argument are translated into the characters specified in the third argument:\nDefinition and Usage\nThe TRANSLATE() function returns the string from the first argument after the characters specified in the second argument are translated into the characters specified in the third argument.\nNote: The TRANSLATE() function will return an error if characters and translations have different lengths.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the string from the first argument AFTER the characters specified in the second argument are translated into the characters specified in the third argument:",
      "examples": [
        "SELECT TRANSLATE('Monday', 'Monday', 'Sunday'); // Results in Sunday",
        "TRANSLATE(string, characters, translations)",
        "SELECT TRANSLATE('3*[2+1]/{8-4}', '[]{}', '()()'); // Results in 3*(2+1)/(8-4)"
      ]
    },
    {
      "title": "SQL Server TRIM() Function",
      "summary": "ExampleGet your own SQL Server\nRemove leading and trailing spaces from a string:\nDefinition and Usage\nThe TRIM() function removes the space character OR other specified characters from the start or end of a string.\nBy default, the TRIM() function removes leading and trailing spaces from a string.\nNote: Also look at the LTRIM() and RTRIM() functions.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nRemove characters and spaces from a string:",
      "examples": [
        "SELECT TRIM('     SQL Tutorial!     ') AS TrimmedString;",
        "TRIM([characters FROM ]string)",
        "SELECT TRIM('#! ' FROM '    #SQL Tutorial!    ') AS TrimmedString;"
      ]
    },
    {
      "title": "SQL Server UNICODE() Function",
      "summary": "ExampleGet your own SQL Server\nReturn an integer value (the Unicode value), for the first character of the input expression:\nDefinition and Usage\nThe UNICODE() function returns an integer value (the Unicode value), for the first character of the input expression.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn an integer value (the Unicode value), for the first character of the input expression:",
      "examples": [
        "SELECT UNICODE('Atlanta');",
        "UNICODE(character_expression)",
        "SELECT UNICODE(CustomerName) AS UnicodeOfFirstChar\nFROM Customers;"
      ]
    },
    {
      "title": "SQL Server UPPER() Function",
      "summary": "ExampleGet your own SQL Server\nConvert the text to upper-case:\nDefinition and Usage\nThe UPPER() function converts a string to upper-case.\nNote: Also look at the LOWER() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert the text in \"CustomerName\" to upper-case:",
      "examples": [
        "SELECT UPPER('SQL Tutorial is FUN!');",
        "UPPER(text)",
        "SELECT UPPER(CustomerName) AS UppercaseCustomerName\nFROM Customers;"
      ]
    },
    {
      "title": "SQL Server ABS() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the absolute value of a number:\nDefinition and Usage\nThe ABS() function returns the absolute value of a number.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT Abs(-243.5) AS AbsNum;",
        "ABS(number)"
      ]
    },
    {
      "title": "SQL Server ACOS() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the arc cosine of a number:\nDefinition and Usage\nThe ACOS() function returns the arc cosine of a number.\nThe specified number must be between -1 to 1, otherwise this function returns NULL.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the arc cosine of a number:",
      "examples": [
        "SELECT ACOS(0.25);",
        "ACOS(number)",
        "SELECT ACOS(-0.8);"
      ]
    },
    {
      "title": "SQL Server ASIN() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the arc sine of a number:\nDefinition and Usage\nThe ASIN() function returns the arc sine of a number.\nThe specified number must be between -1 to 1, otherwise this function returns NULL.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the arc sine of a number:",
      "examples": [
        "SELECT ASIN(0.25);",
        "ASIN(number)",
        "SELECT ASIN(-0.8);"
      ]
    },
    {
      "title": "SQL Server ATAN() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the arc tangent of a number:\nDefinition and Usage\nThe ATAN() function returns the arc tangent of a number.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the arc tangent of a number:",
      "examples": [
        "SELECT ATAN(2.5);",
        "ATAN(number)",
        "SELECT ATAN(-45.01);"
      ]
    },
    {
      "title": "SQL Server ATN2() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the arc tangent of two values:\nDefinition and Usage\nThe ATN2() function returns the arc tangent of two numbers.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the arc tangent of two values:",
      "examples": [
        "SELECT ATN2(0.50, 1);",
        "ATN2(a, b)",
        "SELECT ATN2(-0.8, 2);"
      ]
    },
    {
      "title": "SQL Server AVG() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the average value for the \"Price\" column in the \"Products\" table:\nDefinition and Usage\nThe AVG() function returns the average value of an expression.\nNote: NULL values are ignored.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nSelect all the products that have a price above the average price:",
      "examples": [
        "SELECT AVG(Price) AS AveragePrice FROM Products;",
        "AVG(expression)",
        "SELECT * FROM Products\nWHERE Price > (SELECT AVG(Price) FROM Products);"
      ]
    },
    {
      "title": "SQL Server CEILING() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the smallest integer value that is greater than or equal to a number:\nDefinition and Usage\nThe CEILING() function returns the smallest integer value that is larger than or equal to a number.\nTip: Also look at the FLOOR() and ROUND() functions.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the smallest integer value that is greater than or equal to a number:\nExample\nReturn the smallest integer value that is greater than or equal to a number:",
      "examples": [
        "SELECT CEILING(25.75) AS CeilValue;",
        "CEILING(number)",
        "SELECT CEILING(25) AS CeilValue;",
        "SELECT CEILING(-13.5) AS CeilValue;"
      ]
    },
    {
      "title": "SQL Server COUNT() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the number of products in the \"Products\" table:\nDefinition and Usage\nThe COUNT() function returns the number of records returned by a select query.\nNote: NULL values are not counted.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT COUNT(ProductID) AS NumberOfProducts FROM Products;",
        "COUNT(expression)"
      ]
    },
    {
      "title": "SQL Server COS() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the cosine of a number:\nDefinition and Usage\nThe COS() function returns the cosine of a number.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the cosine of a number:",
      "examples": [
        "SELECT COS(2);",
        "COS(number)",
        "SELECT COS(PI());"
      ]
    },
    {
      "title": "SQL Server COT() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the cotangent of a number:\nDefinition and Usage\nThe COT() function returns the cotangent of a number.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the cotangent of a number:",
      "examples": [
        "SELECT COT(6);",
        "COT(number)",
        "SELECT COT(-2);"
      ]
    },
    {
      "title": "SQL Server DEGREES() Function",
      "summary": "ExampleGet your own SQL Server\nConvert a radian value into degrees:\nDefinition and Usage\nThe DEGREES() function converts a value in radians to degrees.\nNote: See also the RADIANS() and PI() functions.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert a radian value into degrees:",
      "examples": [
        "SELECT DEGREES(1.5);",
        "DEGREES(number)",
        "SELECT DEGREES(PI()*2);"
      ]
    },
    {
      "title": "SQL Server EXP() Function",
      "summary": "ExampleGet your own SQL Server\nReturn e raised to the power of 1:\nDefinition and Usage\nThe EXP() function returns e raised to the power of a specified number.\nThe constant e (2.718281...), is the base of natural logarithms.\nNote: See also the LOG() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn e raised to the power of 2:",
      "examples": [
        "SELECT EXP(1);",
        "EXP(number)",
        "SELECT EXP(2);"
      ]
    },
    {
      "title": "SQL Server FLOOR() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the largest integer value that is equal to or less than 25.75:\nDefinition and Usage\nThe FLOOR() function returns the largest integer value that is smaller than or equal to a number.\nTip: Also look at the CEILING() and ROUND() functions.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the largest integer value that is equal to or less than 25:\nExample\nReturn the largest integer value that is equal to or less than -13.5:",
      "examples": [
        "SELECT FLOOR(25.75) AS FloorValue;",
        "FLOOR(number)",
        "SELECT FLOOR(25) AS FloorValue;",
        "SELECT FLOOR(-13.5) AS FloorValue;"
      ]
    },
    {
      "title": "SQL Server LOG() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the natural logarithm of 2:\nDefinition and Usage\nThe LOG() function returns the natural logarithm of a specified number, or the logarithm of the number to the specified base.\nFrom SQL Server 2012, you can also change the base of the logarithm to another value by using the optional base parameter.\nNote: Also look at the EXP() function.\nSyntax\nOR:\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the natural logarithm of 2 to a specified base (4):",
      "examples": [
        "SELECT LOG(2);",
        "LOG(number, base) -- Syntax for SQL Server",
        "LOG(number) -- Syntax for Azure SQL Database, Azure SQL Data Warehouse, Parallel Data Warehouse",
        "SELECT LOG(2, 4);"
      ]
    },
    {
      "title": "SQL Server LOG10() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the base-10 logarithm of 2:\nDefinition and Usage\nThe LOG10() function returns the natural logarithm of a number to base 10.\nNote: Also look at the LOG() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the base-10 logarithm of 4.5:",
      "examples": [
        "SELECT LOG10(2);",
        "LOG10(number)",
        "SELECT LOG10(4.5);"
      ]
    },
    {
      "title": "SQL Server MAX() Function",
      "summary": "ExampleGet your own SQL Server\nFind the price of the most expensive product in the \"Products\" table:\nDefinition and Usage\nThe MAX() function returns the maximum value in a set of values.\nNote: Also look at the MIN() function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT MAX(Price) AS LargestPrice FROM Products;",
        "MAX(expression)"
      ]
    },
    {
      "title": "SQL Server MIN() Function",
      "summary": "ExampleGet your own SQL Server\nFind the price of the cheapest product in the \"Products\" table:\nDefinition and Usage\nThe MIN() function returns the minimum value in a set of values.\nNote: Also look at the MAX() function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT MIN(Price) AS SmallestPrice FROM Products;",
        "MIN(expression)"
      ]
    },
    {
      "title": "SQL Server PI() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the value of PI:\nDefinition and Usage\nThe PI() function returns the value of PI.\nNote: Also look at the DEGREES() and RADIANS() functions.\nSyntax\nTechnical Details",
      "examples": [
        "SELECT PI();",
        "PI()"
      ]
    },
    {
      "title": "SQL Server POWER() Function",
      "summary": "ExampleGet your own SQL Server\nReturn 4 raised to the second power:\nDefinition and Usage\nThe POWER() function returns the value of a number raised to the power of another number.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn 8 raised to the third power:",
      "examples": [
        "SELECT POWER(4, 2);",
        "POWER(a, b)",
        "SELECT POWER(8, 3);"
      ]
    },
    {
      "title": "SQL Server RADIANS() Function",
      "summary": "ExampleGet your own SQL Server\nConvert a degree value into radians:\nDefinition and Usage\nThe RADIANS() function converts a degree value into radians.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert a degree value into radians:",
      "examples": [
        "SELECT RADIANS(180);",
        "RADIANS(number)",
        "SELECT RADIANS(-45);"
      ]
    },
    {
      "title": "SQL Server RAND() Function",
      "summary": "ExampleGet your own SQL Server\nReturn a random decimal number (no seed value - so it returns a completely random number >= 0 and <1):\nDefinition and Usage\nThe RAND() function returns a random number between 0 (inclusive) and 1 (exclusive).\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn a random decimal number (with seed value of 6):\nExample\nReturn a random decimal number >= 5 and <10:\nExample\nReturn a random number >= 5 and <=10:",
      "examples": [
        "SELECT RAND();",
        "RAND(seed)",
        "SELECT RAND(6);",
        "SELECT RAND()*(10-5)+5;",
        "SELECT FLOOR(RAND()*(10-5+1)+5);"
      ]
    },
    {
      "title": "SQL Server ROUND() Function",
      "summary": "ExampleGet your own SQL Server\nRound the number to 2 decimal places:\nDefinition and Usage\nThe ROUND() function rounds a number to a specified number of decimal places.\nTip: Also look at the FLOOR() and CEILING() functions.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nRound the number to 2 decimal places, and also use the operation parameter:\nExample\nRound the number to -1 decimal place:",
      "examples": [
        "SELECT ROUND(235.415, 2) AS RoundValue;",
        "ROUND(number, decimals, operation)",
        "SELECT ROUND(235.415, 2, 1) AS RoundValue;",
        "SELECT ROUND(235.415, -1) AS RoundValue;"
      ]
    },
    {
      "title": "SQL Server SIGN() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the sign of a number:\nDefinition and Usage\nThe SIGN() function returns the sign of a number.\nThis function will return one of the following:\nIf number > 0, it returns 1\nIf number = 0, it returns 0\nIf number < 0, it returns -1\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the sign of a number:",
      "examples": [
        "SELECT SIGN(255.5);",
        "SIGN(number)",
        "SELECT SIGN(-12);"
      ]
    },
    {
      "title": "SQL Server SIN() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the sine of a number:\nDefinition and Usage\nThe SIN() function returns the sine of a number.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the sine of a number:",
      "examples": [
        "SELECT SIN(2);",
        "SIN(number)",
        "SELECT SIN(-1);"
      ]
    },
    {
      "title": "SQL Server SQRT() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the square root of a number:\nDefinition and Usage\nThe SQRT() function returns the square root of a number.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the square root of a number:",
      "examples": [
        "SELECT SQRT(64);",
        "SQRT(number)",
        "SELECT SQRT(13);"
      ]
    },
    {
      "title": "SQL Server SQUARE() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the square of a number:\nDefinition and Usage\nThe SQUARE() function returns the square of a number.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the square of a number:",
      "examples": [
        "SELECT SQUARE(64);",
        "SQUARE(number)",
        "SELECT SQUARE(13);"
      ]
    },
    {
      "title": "SQL Server SUM() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the sum of the \"Quantity\" field in the \"OrderDetails\" table:\nDefinition and Usage\nThe SUM() function calculates the sum of a set of values.\nNote: NULL values are ignored.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT SUM(Quantity) AS TotalItemsOrdered FROM OrderDetails;",
        "SUM(expression)"
      ]
    },
    {
      "title": "SQL Server TAN() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the tangent of a number:\nDefinition and Usage\nThe TAN() function returns the tangent of a number.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the tangent of a number:",
      "examples": [
        "SELECT TAN(1.75);",
        "TAN(number)",
        "SELECT TAN(-3);"
      ]
    },
    {
      "title": "SQL Server CURRENT_TIMESTAMP Function",
      "summary": "ExampleGet your own SQL Server\nReturn the current date and time:\nDefinition and Usage\nThe CURRENT_TIMESTAMP function returns the current date and time, in a 'YYYY-MM-DD hh:mm:ss.mmm' format.\nTip: Also look at the GETDATE() function.\nSyntax\nTechnical Details",
      "examples": [
        "SELECT CURRENT_TIMESTAMP;",
        "CURRENT_TIMESTAMP"
      ]
    },
    {
      "title": "SQL Server DATEADD() Function",
      "summary": "ExampleGet your own SQL Server\nAdd one year to a date, then return the date:\nDefinition and Usage\nThe DATEADD() function adds a time/date interval to a date and then returns the date.\nSyntax\nParameter Values\nyear, yyyy, yy = Year\nquarter, qq, q = Quarter\nmonth, mm, m = month\ndayofyear, dy, y = Day of the year\nday, dd, d = Day\nweek, ww, wk = Week\nweekday, dw, w = Weekday\nhour, hh = hour\nminute, mi, n = Minute\nsecond, ss, s = Second\nmillisecond, ms = Millisecond\nTechnical Details\nMore Examples\nExample\nAdd two months to a date, then return the date:\nExample\nSubtract two months from a date, then return the date:\nExample\nAdd 18 years to the date in the BirthDate column, then return the date:",
      "examples": [
        "SELECT DATEADD(year, 1, '2017/08/25') AS DateAdd;",
        "DATEADD(interval, number, date)",
        "SELECT DATEADD(month, 2, '2017/08/25') AS DateAdd;",
        "SELECT DATEADD(month, -2, '2017/08/25') AS DateAdd;",
        "SELECT LastName, BirthDate, DATEADD(year, 18, BirthDate) AS DateAdd FROM Employees;"
      ]
    },
    {
      "title": "SQL Server DATEDIFF() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the difference between two date values, in years:\nDefinition and Usage\nThe DATEDIFF() function returns the difference between two dates, as an integer.\nSyntax\nParameter Values\nyear, yyyy, yy = Year\nquarter, qq, q = Quarter\nmonth, mm, m = month\ndayofyear = Day of the year\nday, dy, y = Day\nweek, ww, wk = Week\nweekday, dw, w = Weekday\nhour, hh = hour\nminute, mi, n = Minute\nsecond, ss, s = Second\nmillisecond, ms = Millisecond\nTechnical Details\nMore Examples\nExample\nReturn the difference between two date values, in months:\nExample\nReturn the difference between two date values, in hours:",
      "examples": [
        "SELECT DATEDIFF(year, '2017/08/25', '2011/08/25') AS DateDiff;",
        "DATEDIFF(interval, date1, date2)",
        "SELECT DATEDIFF(month, '2017/08/25', '2011/08/25') AS DateDiff;",
        "SELECT DATEDIFF(hour, '2017/08/25 07:00', '2017/08/25 12:45') AS DateDiff;"
      ]
    },
    {
      "title": "SQL Server DATEFROMPARTS() Function",
      "summary": "ExampleGet your own SQL Server\nReturn a date from its parts:\nDefinition and Usage\nThe DATEFROMPARTS() function returns a date from the specified parts (year, month, and day values).\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT DATEFROMPARTS(2018, 10, 31) AS DateFromParts;",
        "DATEFROMPARTS(year, month, day)"
      ]
    },
    {
      "title": "SQL Server DATENAME() Function",
      "summary": "ExampleGet your own SQL Server\nReturn a specified part of a date:\nDefinition and Usage\nThe DATENAME() function returns a specified part of a date.\nThis function returns the result as a string value.\nSyntax\nParameter Values\nyear, yyyy, yy = Year\nquarter, qq, q = Quarter\nmonth, mm, m = month\ndayofyear = Day of the year\nday, dy, y = Day\nweek, ww, wk = Week\nweekday, dw, w = Weekday\nhour, hh = hour\nminute, mi, n = Minute\nsecond, ss, s = Second\nmillisecond, ms = Millisecond\nTechnical Details\nMore Examples\nExample\nReturn a specified part of a date:\nExample\nReturn a specified part of a date:\nExample\nReturn a specified part of a date:\nExample\nReturn a specified part of a date:",
      "examples": [
        "SELECT DATENAME(year, '2017/08/25') AS DatePartString;",
        "DATENAME(interval, date)",
        "SELECT DATENAME(yy, '2017/08/25') AS DatePartString;",
        "SELECT DATENAME(month, '2017/08/25') AS DatePartString;",
        "SELECT DATENAME(hour, '2017/08/25 08:36') AS DatePartString;",
        "SELECT DATENAME(minute, '2017/08/25 08:36') AS DatePartString;"
      ]
    },
    {
      "title": "SQL Server DATEPART() Function",
      "summary": "ExampleGet your own SQL Server\nReturn a specified part of a date:\nDefinition and Usage\nThe DATEPART() function returns a specified part of a date.\nThis function returns the result as an integer value.\nSyntax\nParameter Values\nyear, yyyy, yy = Year\nquarter, qq, q = Quarter\nmonth, mm, m = month\ndayofyear, dy, y = Day of the year\nday, dd, d = Day of the month\nweek, ww, wk = Week\nweekday, dw, w = Weekday\nhour, hh = hour\nminute, mi, n = Minute\nsecond, ss, s = Second\nmillisecond, ms = Millisecond\nmicrosecond, mcs = Microsecond\nnanosecond, ns = Nanosecond\ntzoffset, tz = Timezone offset\niso_week, isowk, isoww = ISO week\nTechnical Details\nMore Examples\nExample\nReturn a specified part of a date:\nExample\nReturn a specified part of a date:\nExample\nReturn a specified part of a date:\nExample\nReturn a specified part of a date:",
      "examples": [
        "SELECT DATEPART(year, '2017/08/25') AS DatePartInt;",
        "DATEPART(interval, date)",
        "SELECT DATEPART(yy, '2017/08/25') AS DatePartInt;",
        "SELECT DATEPART(month, '2017/08/25') AS DatePartInt;",
        "SELECT DATEPART(hour, '2017/08/25 08:36') AS DatePartInt;",
        "SELECT DATEPART(minute, '2017/08/25 08:36') AS DatePartInt;"
      ]
    },
    {
      "title": "SQL Server DAY() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the day of the month for a date:\nDefinition and Usage\nThe DAY() function returns the day of the month (from 1 to 31) for a specified date.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the day of the month for a date:",
      "examples": [
        "SELECT DAY('2017/08/25') AS DayOfMonth;",
        "DAY(date)",
        "SELECT DAY('2017/08/13 09:08') AS DayOfMonth;"
      ]
    },
    {
      "title": "SQL Server GETDATE() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the current database system date and time:\nDefinition and Usage\nThe GETDATE() function returns the current database system date and time, in a 'YYYY-MM-DD hh:mm:ss.mmm' format.\nTip: Also look at the CURRENT_TIMESTAMP function.\nSyntax\nTechnical Details",
      "examples": [
        "SELECT GETDATE();",
        "GETDATE()"
      ]
    },
    {
      "title": "SQL Server GETUTCDATE() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the current UTC date and time:\nDefinition and Usage\nThe GETUTCDATE() function returns the current database system UTC date and time, in a 'YYYY-MM-DD hh:mm:ss.mmm' format.\nSyntax\nTechnical Details",
      "examples": [
        "SELECT GETUTCDATE();",
        "GETUTCDATE()"
      ]
    },
    {
      "title": "SQL Server ISDATE() Function",
      "summary": "ExampleGet your own SQL Server\nCheck if the expression is a valid date:\nDefinition and Usage\nThe ISDATE() function checks an expression and returns 1 if it is a valid date, otherwise 0.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nCheck if the expression is a valid date:\nExample\nCheck if the expression is a valid date:",
      "examples": [
        "SELECT ISDATE('2017-08-25');",
        "ISDATE(expression)",
        "SELECT ISDATE('2017');",
        "SELECT ISDATE('Hello world!');"
      ]
    },
    {
      "title": "SQL Server MONTH() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the month part of a date:\nDefinition and Usage\nThe MONTH() function returns the month part for a specified date (a number from 1 to 12).\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the month part of a date:",
      "examples": [
        "SELECT MONTH('2017/08/25') AS Month;",
        "MONTH(date)",
        "SELECT MONTH('2017/05/25 09:08') AS Month;"
      ]
    },
    {
      "title": "SQL Server SYSDATETIME() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the date and time of the SQL Server:\nDefinition and Usage\nThe SYSDATETIME() function returns the date and time of the computer where the SQL Server is running.\nSyntax\nTechnical Details",
      "examples": [
        "SELECT SYSDATETIME() AS SysDateTime;",
        "SYSDATETIME()"
      ]
    },
    {
      "title": "SQL Server YEAR() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the year part of a date:\nDefinition and Usage\nThe YEAR() function returns the year part for a specified date.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the year part of a date:",
      "examples": [
        "SELECT YEAR('2017/08/25') AS Year;",
        "YEAR(date)",
        "SELECT YEAR('1998/05/25 09:08') AS Year;"
      ]
    },
    {
      "title": "SQL Server CAST() Function",
      "summary": "ExampleGet your own SQL Server\nConvert a value to an int datatype:\nDefinition and Usage\nThe CAST() function converts a value (of any type) into a specified datatype.\nTip: Also look at the CONVERT() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert a value to a varchar datatype:\nExample\nConvert a value to a datetime datatype:",
      "examples": [
        "SELECT CAST(25.65 AS int);",
        "CAST(expression AS datatype(length))",
        "SELECT CAST(25.65 AS varchar);",
        "SELECT CAST('2017-08-25' AS datetime);"
      ]
    },
    {
      "title": "SQL Server COALESCE() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the first non-null value in a list:\nDefinition and Usage\nThe COALESCE() function returns the first non-null value in a list.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the first non-null value in a list:",
      "examples": [
        "SELECT COALESCE(NULL, NULL, NULL, 'W3Schools.com', NULL, 'Example.com');",
        "COALESCE(val1, val2, ...., val_n)",
        "SELECT COALESCE(NULL, 1, 2, 'W3Schools.com');"
      ]
    },
    {
      "title": "SQL Server CONVERT() Function",
      "summary": "ExampleGet your own SQL Server\nConvert an expression to int:\nDefinition and Usage\nThe CONVERT() function converts a value (of any type) into a specified datatype.\nTip: Also look at the CAST() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert an expression from one data type to another (varchar):\nExample\nConvert an expression from one data type to another (datetime):\nExample\nConvert an expression from one data type to another (varchar):",
      "examples": [
        "SELECT CONVERT(int, 25.65);",
        "CONVERT(data_type(length), expression, style)",
        "SELECT CONVERT(varchar, 25.65);",
        "SELECT CONVERT(datetime, '2017-08-25');",
        "SELECT CONVERT(varchar, '2017-08-25', 101);"
      ]
    },
    {
      "title": "SQL Server CURRENT_USER Function",
      "summary": "ExampleGet your own SQL Server\nReturn the name of the current user in the SQL Server database:\nDefinition and Usage\nThe CURRENT_USER function returns the name of the current user in the SQL Server database.\nSyntax\nTechnical Details",
      "examples": [
        "SELECT CURRENT_USER;",
        "CURRENT_USER"
      ]
    },
    {
      "title": "SQL Server IIF() Function",
      "summary": "ExampleGet your own SQL Server\nReturn \"YES\" if the condition is TRUE, or \"NO\" if the condition is FALSE:\nDefinition and Usage\nThe IIF() function returns a value if a condition is TRUE, or another value if a condition is FALSE.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn 5 if the condition is TRUE, or 10 if the condition is FALSE:\nExample\nTest whether two strings are the same and return \"YES\" if they are, or \"NO\" if not:\nExample\nReturn \"MORE\" if the condition is TRUE, or \"LESS\" if the condition is FALSE:",
      "examples": [
        "SELECT IIF(500<1000, 'YES', 'NO');",
        "IIF(condition, value_if_true, value_if_false)",
        "SELECT IIF(500<1000, 5, 10);",
        "SELECT IIF('hello' = 'bye', 'YES', 'NO');",
        "SELECT OrderID, Quantity, IIF(Quantity>10, 'MORE', 'LESS')\nFROM OrderDetails;"
      ]
    },
    {
      "title": "SQL Server ISNULL() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the specified value IF the expression is NULL, otherwise return the expression:\nDefinition and Usage\nThe ISNULL() function returns a specified value if the expression is NULL.\nIf the expression is NOT NULL, this function returns the expression.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the specified value IF the expression is NULL, otherwise return the expression:\nExample\nReturn the specified value IF the expression is NULL, otherwise return the expression:",
      "examples": [
        "SELECT ISNULL(NULL, 'W3Schools.com');",
        "ISNULL(expression, value)",
        "SELECT ISNULL('Hello', 'W3Schools.com');",
        "SELECT ISNULL(NULL, 500);"
      ]
    },
    {
      "title": "SQL Server ISNUMERIC() Function",
      "summary": "ExampleGet your own SQL Server\nTests whether the expression is numeric:\nDefinition and Usage\nThe ISNUMERIC() function tests whether an expression is numeric.\nThis function returns 1 if the expression is numeric, otherwise it returns 0.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nTests whether the expression is numeric:\nExample\nTests whether the expression is numeric:\nExample\nTests whether the expression is numeric:\nExample\nTests whether the expression is numeric:",
      "examples": [
        "SELECT ISNUMERIC(4567);",
        "ISNUMERIC(expression)",
        "SELECT ISNUMERIC('4567');",
        "SELECT ISNUMERIC('Hello world!');",
        "SELECT ISNUMERIC(20*3);",
        "SELECT ISNUMERIC('2017-08-25');"
      ]
    },
    {
      "title": "SQL Server NULLIF() Function",
      "summary": "ExampleGet your own SQL Server\nCompare two expressions:\nDefinition and Usage\nThe NULLIF() function returns NULL if two expressions are equal, otherwise it returns the first expression.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nCompare two expressions:\nExample\nCompare two expressions:\nExample\nCompare two expressions:",
      "examples": [
        "SELECT NULLIF(25, 25);",
        "NULLIF(expr1, expr2)",
        "SELECT NULLIF('Hello', 'Hello');",
        "SELECT NULLIF('Hello', 'world');",
        "SELECT NULLIF('2017-08-25', '2017-08-25');"
      ]
    },
    {
      "title": "SQL Server SESSION_USER Function",
      "summary": "ExampleGet your own SQL Server\nReturn the user name of the current user:\nDefinition and Usage\nThe SESSION_USER function returns the name of the current user in the SQL Server database.\nSyntax\nTechnical Details",
      "examples": [
        "SELECT SESSION_USER;",
        "SESSION_USER"
      ]
    },
    {
      "title": "SQL Server SESSIONPROPERTY() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the session settings for a specified option:\nDefinition and Usage\nThe SESSIONPROPERTY() function returns the session settings for a specified option.\nSyntax\nParameter Values\nANSI_NULLS\nANSI_PADDING\nANSI_WARNINGS\nARITHABORT\nCONCAT_NULL_YIELDS_NULL\nNUMERIC_ROUNDABOUT\nQUOTED_IDENTIFIER\nTechnical Details",
      "examples": [
        "SELECT SESSIONPROPERTY('ANSI_NULLS');",
        "SESSIONPROPERTY(option)"
      ]
    },
    {
      "title": "SQL Server SYSTEM_USER Function",
      "summary": "ExampleGet your own SQL Server\nReturn the login name information for the current user:\nDefinition and Usage\nThe SYSTEM_USER function returns the login name for the current user.\nSyntax\nTechnical Details",
      "examples": [
        "SELECT SYSTEM_USER;",
        "SYSTEM_USER"
      ]
    },
    {
      "title": "SQL Server USER_NAME() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the database user name (will return the current user since no id is specified):\nDefinition and Usage\nThe USER_NAME() function returns the database user name based on the specified id.\nIf no id is specified, this function will return the name of the current user.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the database user name with id 1:",
      "examples": [
        "SELECT USER_NAME();",
        "USER_NAME(id_number)",
        "SELECT USER_NAME(1);"
      ]
    },
    {
      "title": "MS Access Functions",
      "summary": "MS Access has many built-in functions.\nThis reference contains the string, numeric, and date functions in MS Access.\nMS Access String Functions\nREMOVE ADS\nMS Access Numeric Functions\nMS Access Date Functions\nMS Access Some Other Functions",
      "examples": []
    },
    {
      "title": "MS Access Asc() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the ASCII value of the first character in \"CustomerName\":\nDefinition and Usage\nThe Asc() function returns the ASCII value for the specific character.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT Asc(CustomerName) AS NumCodeOfFirstChar\nFROM Customers;",
        "Asc(character)"
      ]
    },
    {
      "title": "MS Access Chr() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the character based on the number code 65:\nDefinition and Usage\nThe Chr() function returns the character for the specified ASCII number code.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT Chr(65) AS CodeToCharacter;",
        "Chr(code)"
      ]
    },
    {
      "title": "MS Access Concat With &",
      "summary": "ExampleGet your own SQL Server\nAdd 3 columns together into one \"Address\" column:\nDefinition and Usage\nThe & operator allows you to add two or more strings together.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT Address & \", \" & PostalCode & \", \" & City AS Address\nFROM Customers;",
        "string1 & string2 & string_n"
      ]
    },
    {
      "title": "MS Access CurDir() Function",
      "summary": "ExampleGet your own SQL Server\nResult:\nDefinition and Usage\nThe CurDir() function returns the full path for a specified drive.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "CurDir()\nCurDir(\"D\")",
        "C:\\Documents and Settings\\user\\My Documents\nD:\\",
        "CurDir(drive)"
      ]
    },
    {
      "title": "MS Access Format() Function",
      "summary": "ExampleGet your own SQL Server\nFormat the \"Price\" column to Currency:\nDefinition and Usage\nThe Format() function formats a value with the specified format.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT Format(Price, \"Currency\") AS FormattedPrice\nFROM Products;",
        "Format(value, format)"
      ]
    },
    {
      "title": "MS Access InStr() Function",
      "summary": "ExampleGet your own SQL Server\nSearch for \"t\" in string \"Customer\", and return position:\nDefinition and Usage\nThe InStr() function gets the position of the first occurrence of a string in another.\nThis function performs a case-insensitive search.\nSyntax\nParameter Values\nReturn Values\nIf string2 is not found within string1, this function returns 0\nIf string1 is zero-length, this function returns 0\nIf string1 is null, this function returns null\nIf string2 is zero-length, this function returns the value in the start parameter\nIf start is > than the length of string2, this function returns 0\nTechnical Details",
      "examples": [
        "SELECT InStr(\"Customer\", \"t\") AS MatchPosition;",
        "InStr(start, string1, string2, compare)"
      ]
    },
    {
      "title": "MS Access InstrRev() Function",
      "summary": "ExampleGet your own SQL Server\nSearch for \"t\" in string \"Customer\" (start from the end of the string) and return position:\nDefinition and Usage\nThe InstrRev() function gets the position of the first occurrence of a string in another, from the end of string.\nThis function performs a case-insensitive search.\nSyntax\nParameter Values\nReturn Values\nIf string2 is not found within string1, this function returns 0\nIf string2 is zero-length, this function returns the value in the start parameter\nIf string1 is zero-length, this function returns 0\nIf string1 is null, this function returns null\nIf start is > than the length of string2, this function returns 0\nTechnical Details",
      "examples": [
        "SELECT InstrRev(\"Customer\", \"t\") AS MatchPosition;",
        "InstrRev(string1, string2, start, compare)"
      ]
    },
    {
      "title": "MS Access LCase() Function",
      "summary": "ExampleGet your own SQL Server\nConvert the text in \"CustomerName\" to lower-case:\nDefinition and Usage\nThe LCase() function converts a string to lower-case.\nTip: Also look at the UCase() function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT LCASE(CustomerName) AS LowercaseCustomerName\nFROM Customers;",
        "LCase(text)"
      ]
    },
    {
      "title": "MS Access Left() Function",
      "summary": "ExampleGet your own SQL Server\nExtract 3 characters from a string (starting from left):\nDefinition and Usage\nThe Left() function extracts a number of characters from a string (starting from left).\nNote: See also the Right() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nExtract 5 characters from the text in the \"CustomerName\" column (starting from left):",
      "examples": [
        "SELECT Left(\"SQL Tutorial\", 3) AS ExtractString;",
        "Left(string, number_of_chars)",
        "SELECT Left(CustomerName, 5) AS ExtractString\nFROM Customers;"
      ]
    },
    {
      "title": "MS Access Len() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the length of a string:\nDefinition and Usage\nThe Len() function returns the length of a string.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the length of the text in the \"CustomerName\" column:",
      "examples": [
        "SELECT Len(\"SQL Tutorial\") AS LengthOfString;",
        "Len(string/varname)",
        "SELECT Len(CustomerName) AS LengthOfString\nFROM Customers;"
      ]
    },
    {
      "title": "MS Access LTrim() Function",
      "summary": "ExampleGet your own SQL Server\nRemove leading spaces from a string:\nDefinition and Usage\nThe LTrim() function removes leading spaces from a string.\nNote: See also the RTrim() function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT LTrim(\"    SQL Tutorial\") AS LeftTrimmedString;",
        "LTrim(string)"
      ]
    },
    {
      "title": "MS Access Mid() Function",
      "summary": "ExampleGet your own SQL Server\nExtract characters from a string, starting at position 3:\nDefinition and Usage\nThe Mid() function extracts some characters from a string (starting at any position).\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nExtract characters from the text in a column (start at position 4, and extract 6 characters):",
      "examples": [
        "SELECT Mid(\"SQL Tutorial\", 3) AS ExtractString;",
        "Mid(string, start, length)",
        "SELECT Mid(CustomerName, 4, 6) AS ExtractString\nFROM Customers;"
      ]
    },
    {
      "title": "MS Access Replace() Function",
      "summary": "ExampleGet your own SQL Server\nReplace \"i\" with \"a\" in the string:\nDefinition and Usage\nThe Replace() function replaces a substring within a string, with another substring, a specified number of times.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT Replace(\"My name is Willy Wonka\", \"i\", \"a\") AS ReplaceString;",
        "Replace(string1, find, replacement, start, count, compare)"
      ]
    },
    {
      "title": "MS Access Right() Function",
      "summary": "ExampleGet your own SQL Server\nExtract 4 characters from a string (starting from right):\nDefinition and Usage\nThe Right() function extracts a number of characters from a string (starting from right).\nNote: See also the Left() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nExtract 5 characters from the text in the \"CustomerName\" column (starting from right):",
      "examples": [
        "SELECT Right(\"SQL Tutorial is cool\", 4) AS ExtractString;",
        "Right(string, number_of_chars)",
        "SELECT Right(CustomerName, 5) AS ExtractString\nFROM Customers;"
      ]
    },
    {
      "title": "MS Access RTrim() Function",
      "summary": "ExampleGet your own SQL Server\nRemove trailing spaces from a string:\nDefinition and Usage\nThe RTrim() function removes trailing spaces from a string.\nNote: See also the LTrim() function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT RTrim(\"SQL Tutorial    \") AS RightTrimmedString;",
        "RTrim(string)"
      ]
    },
    {
      "title": "MS Access Space() Function",
      "summary": "ExampleGet your own SQL Server\nReturn a string with 5 spaces:\nDefinition and Usage\nThe Space() function returns a string of the specified number of space characters.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT Space(5) AS SpaceString;",
        "Space(number)"
      ]
    },
    {
      "title": "MS Access Split() Function",
      "summary": "ExampleGet your own SQL Server\nSplit strings:\nDefinition and Usage\nThe Split() function splits a string into an array of strings.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT Split(\"SQL Tutorial is fun!\") AS SplitString;\nResult: {\"SQL\", \"Tutorial\", \"is\", \"fun!\"}\n\nSELECT Split (\"red:green:yellow:blue\", \":\", 2) AS SplitString;\nResult: {\"red\", \"green\"}",
        "Split(string, separator, limit, compare)"
      ]
    },
    {
      "title": "MS Access Str() Function",
      "summary": "ExampleGet your own SQL Server\nReturn a number as a string:\nDefinition and Usage\nThe Str() function returns a number as a string.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT Str(42) AS ConvertToString;",
        "Str(number)"
      ]
    },
    {
      "title": "MS Access StrComp() Function",
      "summary": "ExampleGet your own SQL Server\nCompare two strings:\nDefinition and Usage\nThe StrComp() function compares two strings.\nThe result is returned as an integer based on the comparison:\nIf string1 = string2, this function returns 0\nIf string1 < string2, this function returns -1\nIf string1 > string2, this function returns 1\nIf string1 or string2 is null, this function returns null\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nCompare two strings:\nExample\nCompare two strings:",
      "examples": [
        "SELECT StrComp(\"SQL Tutorial\", \"SQL Tutorial\") AS CompString;",
        "StrComp(string1, string2, compare)",
        "SELECT StrComp(\"SQL Tutorial\", \"SQL\") AS CompString;",
        "SELECT StrComp(\"SQL\", \"SQL Tutorial\") AS CompString;"
      ]
    },
    {
      "title": "MS Access StrConv() Function",
      "summary": "ExampleGet your own SQL Server\nConvert a string:\nDefinition and Usage\nThe StrConv() function returns a converted string.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert a string:\nExample\nConvert a string:",
      "examples": [
        "SELECT StrConv(\"SQL Tutorial is cool\", 1) AS ConvertedString;",
        "StrConv(string1, conversion, LCID)",
        "SELECT StrConv(\"SQL Tutorial is cool\", 2) AS ConvertedString;",
        "SELECT StrConv(\"SQL Tutorial is cool\", 3) AS ConvertedString;"
      ]
    },
    {
      "title": "MS Access StrReverse() Function",
      "summary": "ExampleGet your own SQL Server\nReverse a string:\nDefinition and Usage\nThe StrReverse() function reverses a string and returns the result.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT StrReverse(\"SQL Tutorial\") AS StringReverse;",
        "StrReverse(string)"
      ]
    },
    {
      "title": "MS Access Trim() Function",
      "summary": "ExampleGet your own SQL Server\nRemove leading and trailing spaces from a string:\nDefinition and Usage\nThe Trim() function removes both leading and trailing spaces from a string.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT Trim(\"    SQL Tutorial    \") AS TrimmedString;",
        "Trim(string)"
      ]
    },
    {
      "title": "MS Access UCase() Function",
      "summary": "ExampleGet your own SQL Server\nConvert the text in \"CustomerName\" to upper-case:\nDefinition and Usage\nThe UCase() function converts a string to upper-case.\nTip: Also look at the LCase() function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT UCASE(CustomerName) AS UppercaseCustomerName\nFROM Customers;",
        "UCase(text)"
      ]
    },
    {
      "title": "MS Access Abs() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the absolute value of a number:\nDefinition and Usage\nThe Abs() function returns the absolute (positive) value of a number.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT Abs(-243.5) AS AbsNum;",
        "Abs(number)"
      ]
    },
    {
      "title": "MS Access Atn() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the arc tangent of a number:\nDefinition and Usage\nThe Atn() function returns the arc tangent of a number.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT Atn(5) AS AtnNum;",
        "Atn(number)"
      ]
    },
    {
      "title": "MS Access Avg() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the average value for the \"Price\" column in the \"Products\" table:\nDefinition and Usage\nThe Avg() function returns the average value of an expression.\nNote: NULL values are ignored.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nSelect all the products that have a price above the average price:",
      "examples": [
        "SELECT Avg(Price) AS AveragePrice FROM Products;",
        "Avg(expression)",
        "SELECT * FROM Products\nWHERE Price > (SELECT Avg(Price) FROM Products);"
      ]
    },
    {
      "title": "MS Access Cos() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the cosine of an angle:\nDefinition and Usage\nThe Cos() function returns the cosine of an angle.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT Cos(5) AS CosNum;",
        "Cos(number)"
      ]
    },
    {
      "title": "MS Access Count() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the number of products in the \"Products\" table:\nDefinition and Usage\nThe Count() function returns the number of records returned by a select query.\nNote: NULL values are not counted.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT Count(ProductID) AS NumberOfProducts FROM Products;",
        "Count(expression)"
      ]
    },
    {
      "title": "MS Access Exp() Function",
      "summary": "ExampleGet your own SQL Server\nReturn e raised to the 5th power:\nDefinition and Usage\nThe Exp() function returns e raised to the power of a specified number.\nThe constant e (2.718281�), is the base of natural logarithms.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT Exp(5) AS ExpNum;",
        "Exp(number)"
      ]
    },
    {
      "title": "MS Access Fix() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the integer part of a number:\nDefinition and Usage\nThe Fix() function returns the integer part of a number.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the integer part of the \"Price\" column:",
      "examples": [
        "SELECT Fix(756.43) AS FixNum;",
        "Fix(number)",
        "SELECT Fix(Price) AS FixNum FROM Products;"
      ]
    },
    {
      "title": "MS Access Format() Function",
      "summary": "ExampleGet your own SQL Server\nFormat a numeric expression to percent:\nDefinition and Usage\nThe Format() function formats a numeric value with the specified format.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nFormat the \"Price\" column to currency:",
      "examples": [
        "SELECT Format(0.5, \"Percent\") AS FormattedNum;",
        "Format(value, format)",
        "SELECT Format(Price, \"Currency\") AS FormattedPrice\nFROM Products;"
      ]
    },
    {
      "title": "MS Access Int() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the integer part of a number:\nDefinition and Usage\nThe Int() function returns the integer part of a number.\nNote: If number is negative, this function returns the first negative integer less than or equal to number.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the integer part of the \"Price\" column:",
      "examples": [
        "SELECT Int(756.43) AS IntNum;",
        "Int(number)",
        "SELECT Int(Price) AS IntNum FROM Products;"
      ]
    },
    {
      "title": "MS Access Max() Function",
      "summary": "ExampleGet your own SQL Server\nFind the price of the most expensive product in the \"Products\" table:\nDefinition and Usage\nThe Max() function returns the maximum value in a set of values.\nNote: See also the Min() function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT Max(Price) AS LargestPrice FROM Products;",
        "Max(expression)"
      ]
    },
    {
      "title": "MS Access Min() Function",
      "summary": "ExampleGet your own SQL Server\nFind the price of the cheapest product in the \"Products\" table:\nDefinition and Usage\nThe Min() function returns the minimum value in a set of values.\nNote: See also the Max() function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT Min(Price) AS SmallestPrice FROM Products;",
        "Min(expression)"
      ]
    },
    {
      "title": "MS Access Randomize() Function",
      "summary": "Definition and Usage\nThe Randomize() function initializes the random number generator (used by Rnd()) with a seed.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "Randomize(seed)"
      ]
    },
    {
      "title": "MS Access Rnd Function",
      "summary": "ExampleGet your own SQL Server\nReturn one random number between 1 and 10, and another random number between 100 and 499:\nDefinition and Usage\nThe Rnd function returns a random number.\nNote: If you do not call the Randomize() function before calling the Rnd function, the Rnd function may return the same random number each time!\nSyntax\nTo return a random integer less than 1, but greater than or equal to zero:\nTo return a random integer in a given range, use this formula:\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT Int((10 - 1 + 1) * Rnd + 1) AS RandNumBetween1and10,\nInt((499 - 100 + 1) * Rnd + 100) AS RandNumBetween100and499;",
        "Rnd",
        "Int((upperbound - lowerbound + 1) * Rnd + lowerbound)"
      ]
    },
    {
      "title": "MS Access Round() Function",
      "summary": "ExampleGet your own SQL Server\nRound the Price column to 1 decimal in the \"Products\" table:\nDefinition and Usage\nThe Round() function rounds a number to a specified number of decimal places.\nNote: If the expression ends with a 5, this function rounds so that the last digit is an even number. Here are some examples:\nRound(34.55, 1) - Result: 34.6 (rounds up)\nRound(34.65, 1) - Result: 34.6 (rounds down)\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT ProductName, Price, Round(Price, 1) AS RoundedPrice\nFROM Products;",
        "Round(expression, decimal_places)"
      ]
    },
    {
      "title": "MS Access Sgn() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the sign of a number:\nDefinition and Usage\nThe Sgn() function returns the sign of a number.\nThis function will return one of the following:\nIf number > 0, it returns 1\nIf number = 0, it returns 0\nIf number < 0, it returns -1\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT Sgn(243.5) AS SgnNum;",
        "Sgn(number)"
      ]
    },
    {
      "title": "MS Access Sqr() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the square root of a number:\nDefinition and Usage\nThe Sqr() function returns the square root of a number.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT Sqr(64) AS SqrNum;",
        "Sqr(number)"
      ]
    },
    {
      "title": "MS Access Sum() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the sum of the \"Quantity\" field in the \"OrderDetails\" table:\nDefinition and Usage\nThe Sum() function calculates the sum of a set of values.\nNote: NULL values are ignored.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT Sum(Quantity) AS TotalItemsOrdered FROM OrderDetails;",
        "Sum(expression)"
      ]
    },
    {
      "title": "MS Access Val() Function",
      "summary": "ExampleGet your own SQL Server\nRead a string and return the numbers found in the string:\nDefinition and Usage\nThe Val() function reads a string and returns the numbers found in the string.\nNote: This function stops reading once it encounters a NON-numeric character.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT Val(PostalCode) FROM Customers;",
        "Val(string)"
      ]
    },
    {
      "title": "MS Access Date() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the current system date:\nDefinition and Usage\nThe Date() function returns the current system date.\nSyntax\nParameter Values\nNone.\nTechnical Details",
      "examples": [
        "SELECT CustomerName, Date() AS CurrentDate\nFROM Customers;",
        "Date()"
      ]
    },
    {
      "title": "MS Access DateAdd() Function",
      "summary": "ExampleGet your own SQL Server\nAdd two years to a specified date:\nDefinition and Usage\nThe DateAdd() function adds a time/date interval to a date and then returns the date.\nSyntax\nParameter Values\nyyyy = Year\nq = Quarter\nm = month\ny = Day of the year\nd = Day\nw = Weekday\nww = Week\nh = hour\nn = Minute\ns = Second\nTechnical Details\nMore Examples\nExample\nAdd one year to the current system date:\nExample\nAdd 6 months to the employees' birth date:",
      "examples": [
        "SELECT DateAdd(\"yyyy\", 2, #22/11/2017#);",
        "DateAdd(interval, number, date)",
        "SELECT DateAdd(\"yyyy\", 1, Date());",
        "SELECT LastName, DateAdd(\"m\", 6, BirthDate) FROM Employees;"
      ]
    },
    {
      "title": "MS Access DateDiff() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the difference between two dates, in years:\nDefinition and Usage\nThe DateDiff() function returns the difference between two dates.\nSyntax\nParameter Values\nyyyy = Year\nq = Quarter\nm = month\ny = Day of the year\nd = Day\nw = Weekday\nww = Week\nh = hour\nn = Minute\ns = Second\n0 = Use the NLS API setting\n1 = Sunday (this is default)\n2 = Monday\n3 = Tuesday\n4 = Wednesday\n5 = Thursday\n6 = Friday\n7 = Saturday\n0 = Use the NLS API setting\n1 = Use the first week that includes Jan 1st (default)\n2 = Use the first week in the year that has at least 4 days\n3 = Use the first full week of the year\nTechnical Details\nMore Examples\nExample\nReturn the difference between two dates, in months:\nExample\nReturn the difference between a specified date and today's date, in days:",
      "examples": [
        "SELECT DateDiff(\"yyyy\", #13/01/1998#, #09/05/2017#);",
        "DateDiff(datepart, date1, date2, firstdayofweek, firstweekofyear)",
        "SELECT DateDiff(\"m\", #13/01/1998#, #09/05/2017#);",
        "SELECT DateDiff(\"d\", #13/01/1998#, Date());"
      ]
    },
    {
      "title": "MS Access DatePart() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the year part of the specified date:\nDefinition and Usage\nThe DatePart() function returns a specified part of a date, as an integer.\nSyntax\nParameter Values\nyyyy = Year\nq = Quarter\nm = month\ny = Day of the year\nd = Day\nw = Weekday\nww = Week\nh = hour\nn = Minute\ns = Second\n0 = Use the NLS API setting\n1 = Sunday (default)\n2 = Monday\n3 = Tuesday\n4 = Wednesday\n5 = Thursday\n6 = Friday\n7 = Saturday\n0 = Use the NLS API setting\n1 = Use the first week that includes Jan 1st (default)\n2 = Use the first week in the year that has at least 4 days\n3 = Use the first full week of the year\nTechnical Details\nMore Examples\nExample\nReturn the month part of the specified date:\nExample\nReturn the weekday of today's date:",
      "examples": [
        "SELECT DatePart(\"yyyy\", #09/05/2017#);",
        "DatePart(datepart, date, firstdayofweek, firstweekofyear)",
        "SELECT DatePart(\"m\", #09/05/2017#);",
        "SELECT DatePart(\"w\", Date());"
      ]
    },
    {
      "title": "MS Access DateSerial() Function",
      "summary": "ExampleGet your own SQL Server\nReturn a date from it's parts:\nDefinition and Usage\nThe DateSerial() function returns a date from the specified parts (year, month, and day values).\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn a date from it's parts:",
      "examples": [
        "SELECT DateSerial(2017, 4, 20);",
        "DateSerial(year, month, day)",
        "SELECT DateSerial(2017-10, 4-1, 20-5);"
      ]
    },
    {
      "title": "MS Access DateValue() Function",
      "summary": "ExampleGet your own SQL Server\nReturn a date based on the given string:\nDefinition and Usage\nThe DateValue() function returns a date based on a string.\nNote: If the given string does not include a year component, this function will use the current year.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn a date based on the given string (without year component):",
      "examples": [
        "SELECT DateValue(\"May 17, 2017\");",
        "DateValue(string_date)",
        "SELECT DateValue(\"May 17\");"
      ]
    },
    {
      "title": "MS Access Day() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the day of the month for the date:\nDefinition and Usage\nThe Day() function returns the day of the month for a given date.\nThis function returns an integer between 1 and 31.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the day of the month for today's date:\nExample\nReturn the day of the month for the \"BirthDay\" column in \"Employees\":",
      "examples": [
        "SELECT Day(#05/17/2017#);",
        "Day(date)",
        "SELECT Day(Date());",
        "SELECT Day(BirthDate) FROM Employees;"
      ]
    },
    {
      "title": "MS Access Format() Function",
      "summary": "ExampleGet your own SQL Server\nFormat the \"BirthDate\" column to a long date:\nDefinition and Usage\nThe Format() function formats a date value with the specified format.\nSyntax\nParameter Values\n0 = Use the NLS API setting\n1 = Sunday (this is default)\n2 = Monday\n3 = Tuesday\n4 = Wednesday\n5 = Thursday\n6 = Friday\n7 = Saturday\n0 = Use the NLS API setting\n1 = Use the first week that includes Jan 1st (default)\n2 = Use the first week in the year that has at least 4 days\n3 = Use the first full week of the year\nTechnical Details",
      "examples": [
        "SELECT Format(BirthDate, \"Long Date\") AS FormattedBirthDate\nFROM Employees;",
        "Format(value, format, firstdayofweek, firstweekofyear)"
      ]
    },
    {
      "title": "MS Access Hour() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the hour for a specified time:\nDefinition and Usage\nThe Hour() function returns the hour part of a time/datetime.\nThis function returns an integer between 0 and 23.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the hour for the current time:\nExample\nReturn the hour for a specified datetime:",
      "examples": [
        "SELECT Hour(#14:48:23#);",
        "Hour(time)",
        "SELECT Hour(Now());",
        "SELECT Hour(#24/10/2016 11:18:34 PM#);"
      ]
    },
    {
      "title": "MS Access Minute() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the minute part of a specified time:\nDefinition and Usage\nThe Minute() function returns the minute part of a time/datetime.\nThis function returns an integer between 0 and 59.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the minute part of the current time:\nExample\nReturn the minute part of a specified datetime:",
      "examples": [
        "SELECT Minute(#14:48:23#);",
        "Minute(time)",
        "SELECT Minute(Now());",
        "SELECT Minute(#24/10/2016 11:18:34 PM#);"
      ]
    },
    {
      "title": "MS Access Month() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the month part for a specified date:\nDefinition and Usage\nThe Month() function returns the month part for a given date.\nThis function returns an integer between 1 and 12.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the month part of today's date:\nExample\nReturn the month part of the \"BirthDay\" column in \"Employees\":",
      "examples": [
        "SELECT Month(#05/17/2017#);",
        "Month(date)",
        "SELECT Month(Date());",
        "SELECT Month(BirthDate) FROM Employees;"
      ]
    },
    {
      "title": "MS Access MonthName() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the name of the month based on a number:\nDefinition and Usage\nThe MonthName() function returns the name of the month based on a number.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the abbreviated name of the month based on a number:",
      "examples": [
        "SELECT MonthName(3);",
        "MonthName(number, abbreviate)",
        "SELECT WeekdayName(3, true);"
      ]
    },
    {
      "title": "MS Access Now() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the computer system's current date and time:\nDefinition and Usage\nThe Now() function returns the current date and time based on the computer's system date and time.\nSyntax\nParameter Values\nNone.\nTechnical Details",
      "examples": [
        "SELECT CustomerName, Now() AS CurrentDateTime\nFROM Customers;",
        "Now()"
      ]
    },
    {
      "title": "MS Access Second() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the seconds part of a specified time:\nDefinition and Usage\nThe Second() function returns the seconds part of a time/datetime.\nThis function returns an integer between 0 and 59.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the seconds part of the current time:\nExample\nReturn the seconds part of a specified datetime:",
      "examples": [
        "SELECT Second(#14:48:23#);",
        "Second(time)",
        "SELECT Second(Now());",
        "SELECT Second(#24/10/2016 11:18:34 PM#);"
      ]
    },
    {
      "title": "MS Access Time() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the current system time:\nDefinition and Usage\nThe Time() function returns the current system time.\nSyntax\nParameter Values\nNone.\nTechnical Details",
      "examples": [
        "SELECT CustomerName, Time() AS CurrentTime\nFROM Customers;",
        "Time()"
      ]
    },
    {
      "title": "MS Access TimeSerial() Function",
      "summary": "ExampleGet your own SQL Server\nReturn a time from it's parts:\nDefinition and Usage\nThe TimeSerial() function returns a time from the specified parts (hour, minute, and second value).\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn a time from it's parts:",
      "examples": [
        "SELECT TimeSerial(15, 9, 20);",
        "TimeSerial(hour, minute, second)",
        "SELECT TimeSerial(12-2, 40-5, 20-5);"
      ]
    },
    {
      "title": "MS Access TimeValue() Function",
      "summary": "ExampleGet your own SQL Server\nReturn a time based on the given string:\nDefinition and Usage\nThe TimeValue() function returns a time based on a string.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn a time based on the given string:",
      "examples": [
        "SELECT TimeValue(\"17:15:38\");",
        "TimeValue(string)",
        "SELECT TimeValue(\"5:15:38 PM\");"
      ]
    },
    {
      "title": "MS Access Weekday() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the weekday number for a date:\nDefinition and Usage\nThe Weekday() function returns the weekday number for a given date.\nThis function returns an integer between 1 and 7.\nSyntax\nParameter Values\n0 = Use the NLS API setting\n1 = Sunday (default)\n2 = Monday\n3 = Tuesday\n4 = Wednesday\n5 = Thursday\n6 = Friday\n7 = Saturday\nTechnical Details\nMore Examples\nExample\nReturn the weekday number for the current date:\nExample\nReturn the weekday number for the specified date, setting Monday as the first day of week:",
      "examples": [
        "SELECT Weekday(#05/17/2017#);",
        "Weekday(date, firstdayofweek)",
        "SELECT Weekday(Date());",
        "SELECT Weekday(#05/17/2017#, 2);"
      ]
    },
    {
      "title": "MS Access WeekdayName() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the weekday name based on a number:\nDefinition and Usage\nThe WeekdayName() function returns the weekday name based on a number.\nSyntax\nParameter Values\n0 = Use the NLS API setting\n1 = Sunday (default)\n2 = Monday\n3 = Tuesday\n4 = Wednesday\n5 = Thursday\n6 = Friday\n7 = Saturday\nTechnical Details\nMore Examples\nExample\nReturn the abbreviated weekday name based on a number:\nExample\nReturn the abbreviated weekday name based on a number, and let Monday be the first day of week:",
      "examples": [
        "SELECT WeekdayName(3);",
        "WeekdayName(number, abbreviate, firstdayofweek)",
        "SELECT WeekdayName(3, true);",
        "SELECT WeekdayName(3, true, 2);"
      ]
    },
    {
      "title": "MS Access Year() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the year part of a specified date:\nDefinition and Usage\nThe Year() function returns the year part of a given date.\nThis function returns an integer between 100 and 9999.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the year part of today's date:\nExample\nReturn the year part of the \"BirthDate\" column in \"Employees\":",
      "examples": [
        "SELECT Year(#05/17/2017#);",
        "Year(date)",
        "SELECT Year(Date());",
        "SELECT Year(BirthDate) FROM Employees;"
      ]
    },
    {
      "title": "MS Access CurrentUser() Function",
      "summary": "ExampleGet your own SQL Server\nReturn the name of the current database user:\nDefinition and Usage\nThe CurrentUser() function returns the name of the current database user.\nSyntax\nTechnical Details",
      "examples": [
        "SELECT CurrentUser();",
        "CurrentUser()"
      ]
    },
    {
      "title": "MS Access Environ() Function",
      "summary": "ExampleGet your own SQL Server\nReturn a string that contains the value of an operating system environment variable:\nDefinition and Usage\nThe Environ() function returns a string that contains the value of an operating system environment variable.\nSyntax\nOR:\nParameter Values\nTechnical Details",
      "examples": [
        "SELECT Environ(1);",
        "Environ(number)",
        "Environ(string)"
      ]
    },
    {
      "title": "MS Access IsDate() Function",
      "summary": "ExampleGet your own SQL Server\nCheck whether the expression can be converted to a date:\nDefinition and Usage\nThe IsDate() function checks whether an expression can be converted to a date.\nThis function returns a Boolean value. TRUE (-1) indicates that the expression is a valid date, and FALSE (0) indicates that the expression is not a valid date.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn TRUE if the expression is a valid date, otherwise FALSE:\nExample\nReturn TRUE if the expression is a valid date, otherwise FALSE:\nExample\nReturn TRUE if the expression is a valid date, otherwise FALSE:",
      "examples": [
        "SELECT IsDate(Now());",
        "IsDate(expression)",
        "SELECT IsDate(\"Hello\");",
        "SELECT IsDate(\"August 25, 2017\");",
        "SELECT IsDate(#25/8/2017#);"
      ]
    },
    {
      "title": "MS Access IsNull() Function",
      "summary": "ExampleGet your own SQL Server\nCheck whether the expression is a Null value:\nDefinition and Usage\nThe IsNull() function checks whether an expression contains Null (no data).\nThis function returns a Boolean value. TRUE (-1) indicates that the expression is a Null value, and FALSE (0) indicates that the expression is not a Null value.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn TRUE if the expression is a null value, otherwise FALSE:\nExample\nReturn TRUE if the expression is a null value, otherwise FALSE:",
      "examples": [
        "SELECT IsNull(null);",
        "IsNull(expression)",
        "SELECT IsNull(\"Hello\");",
        "SELECT IsNull(0);"
      ]
    },
    {
      "title": "MS Access IsNumeric() Function",
      "summary": "ExampleGet your own SQL Server\nCheck whether the expression is a valid number:\nDefinition and Usage\nThe IsNumeric() function checks whether an expression is a valid number.\nThis function returns a Boolean value. TRUE (-1) indicates that the expression is a valid number, and FALSE (0) indicates that the expression is not a valid number.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn TRUE if the expression is a valid number, otherwise FALSE:\nExample\nReturn TRUE if the expression is a valid number, otherwise FALSE:",
      "examples": [
        "SELECT IsNumeric(1030);",
        "IsNumeric(expression)",
        "SELECT IsNumeric(\"Hello\");",
        "SELECT IsNumeric(\"1030\");"
      ]
    },
    {
      "title": "SQL Quick Reference from W3Schools",
      "summary": "or\nALTER TABLE table_name\nDROP COLUMN column_name\nor\nSELECT column_name\nFROM table_name  AS table_alias\nor\nCREATE UNIQUE INDEX index_name\nON table_name (column_name)\nor\nDELETE FROM table_name\n(Note: Deletes the entire table!!)\nDELETE * FROM table_name\n(Note: Deletes the entire table!!)\nor\nINSERT INTO table_name\n(column1, column2, column3,...)\nVALUES (value1, value2, value3,....)\nor\nSELECT column_name(s)\nINTO new_table_name [IN externaldatabase]\nFROM old_table_name\nSource : https://www.w3schools.com/sql/sql_quickref.asp",
      "examples": []
    },
    {
      "title": "SQL Examples",
      "summary": "SQL Syntax\nExample Explained\nSQL SELECT\nExamples Explained\nSQL SELECT DISTINCT\nExamples Explained\nSQL WHERE\nExamples Explained\nSQL AND, OR and NOT Operators\nExamples Explained\nSQL ORDER BY\nExamples Explained\nSQL NULL Values\nExamples Explained\nGet Certified!\nSQL SELECT TOP\nExamples Explained\nSQL MIN() and MAX()\nExamples Explained\nSQL COUNT, AVG() and SUM()\nExamples Explained\nSQL LIKE\nExamples Explained\nSQL Wildcards\nExamples Explained\nSQL IN\nExamples Explained\nSQL BETWEEN\nExamples Explained\nSQL Aliases\nExamples Explained\nSQL Joins\nExamples Explained\nSQL UNION\nExamples Explained\nSQL GROUP BY\nExamples Explained\nSQL HAVING\nExamples Explained\nSQL EXISTS\nExample Explained\nSQL ANY and ALL\nExamples Explained\nSQL CASE\nExamples Explained\nSQL Comments\nExamples Explained\nSQL Database\nSQL Database tutorials can be found here:\nKickstart your career\nGet certified by completing the SQL course",
      "examples": []
    },
    {
      "title": "SQL Online Editor (Compiler)",
      "summary": "SQL Editor\nWith our online SQL editor, you can edit SQL statements, and view the result in your browser.\nExample\nClick on the \"Try it Yourself\" button to see how it works.\nPublish Your Code\nIf you want to create your own website, or web applications with a SQL Database, check out W3Schools Spaces.\nW3Schools Spaces is a website-building tool that enables you to create and share your website.\nIn addition to a server, you get a SQL Database where you can store and access your data.\nIt's easy to use and doesn't require any setup.\nThe code editor is packed with features to help you achieve more:\nTemplates: Start from scratch or use a template\nCloud-based: no installations required. You only need your browser\nTerminal & Log: debug and troubleshoot your code easily\nFile Navigator: switch between files inside the code editor\nAnd much more!\nLearn Faster\nPractice is key to mastering coding, and the best way to put your SQL knowledge into practice is by getting practical with code.\nUse W3Schools Spaces to build, test and deploy code.\nThe code editor lets you write and practice different types of computer languages.\nNew languages are added all the time:\nIf you don't know SQL, we suggest that you read our SQL Tutorial from scratch.\nEasy Package Management\nGet an overview of your packages and easily add or delete frameworks and libraries. Then, with just one click, you can make changes to your packages without manual installation.\nBuild Powerful Websites\nYou can use the code editor in W3School Spaces to build frontend or full-stack websites from scratch.\nOr you can use the 60+ templates available and save time:\nCreate your Spaces account today and explore them all!\nShare Your Website With The World\nHost and publish your websites in no time with W3School Spaces.\nW3Schools subdomain and SSL certificate are included for free with W3School Spaces. An SSL certificate makes your website safe and secure. It also helps people trust your website and makes it easier to find it online.\nWant a custom domain for your website?\nYou can buy a domain or transfer an existing one and connect it to your space.\nHow Does It Work?\nGet started in a few clicks with W3School Spaces.",
      "examples": [
        "SELECT * FROM Customers;"
      ]
    },
    {
      "title": "SQL Quiz",
      "summary": "You can test your SQL skills with W3Schools' Quiz.\nThe Test\nThe test contains 25 questions and there is no time limit.\nThe test is not official, it's just a nice way to see how much you know, or don't know, about SQL.\nCount Your Score\nYou will get 1 point for each correct answer. At the end of the Quiz, your total score will be displayed. Maximum score is 25 points.\nStart the Quiz\nGood luck!\nStart the SQL Quiz ❯\nIf you don't know SQL, we suggest that you read our SQL Tutorial from scratch.\nKickstart your career\nGet certified by completing the SQL course",
      "examples": []
    },
    {
      "title": "SQL Exercises",
      "summary": "Exercises\nTest your SQL skills with exercises from all categories:\nSyntax\nSelect\nSelect Distinct\nWhere\nOrder By\nAnd\nOr\nNot\nInsert Into\nNull Values\nUpdate\nDelete\nSelect Top\nMin and Max\nCount\nSum\nAvg\nLike\nWildcards\nIn\nBetween\nAliases\nJoins\nInner Join\nLeft Join\nRight Join\nFull Join\nSelf Join\nUnion\nGroup By\nHaving\nExists\nAny, All\nSelect Into\nInsert Into Select\nCASE Expression\nNULL Functions\nStored Procedures\nComments\nOperators\nCreate Database\nDrop Database\nBackup Database\nCreate Table\nDrop Table\nAlter Table\nConstraints\nNot Null\nUnique\nPrimary Key\nForeign Key\nCheck\nDefault\nCreate Index\nAuto Increment\nDates\nView\nInjection\nHosting\nData Types\nLog in to track your progress\nIf you haven't already, sign up to become a W3Schooler, and get points for every exercise you complete.\nAs a logged on W3Schools user you will have access to many features like having your own web page, track your learning progress, receive personal guided paths, and more.\nThe Exercise\nThe exercises are a mix of \"multiple choice\" and \"fill in the blanks\" questions. There are between 3 and 9 questions in each catergory. The answer can be found in the corresponding tutorial chapter. If you're stuck, or answer wrong, you can try again or hit the \"Show Answer\" button to see the correct answer.\nKickstart your career\nGet certified by completing the SQL course",
      "examples": []
    },
    {
      "title": "SQL Server Create SQL Server Powerful Code Editor Practice Makes Perfect kAI",
      "summary": "Coding Skills\nAI Tutor\nProjects\nSecurely\nChoose your Plan\nBy subscribing to a plan you support the W3Schools mission to make\nlearning available to everyone - no matter their background.\n$0 /Forever\nThis is for you that are beginning to explore coding and web development\nTrack your progress\nSet your goals\nBuild and host 1 static website\n100 credits/month\nAccess various AI features like W3Schools kAI coding tutor and interview preparation.\nNo support\n$14.99 /Month\nThis is for you that want to learn and reach your goals faster. Build fullstack projects, ad free experience.\nAd-free experience\nUnlimited challenges\nUnlimited practice tests\nBuild and host 15 static websites\nBuild and host 1 full stack server\nChoose from 75+ templates\n10000 credits/month\nAccess various AI features like W3Schools kAI coding tutor and interview preparation.\nCancel anytime\nFor teachers\nSpend less time on admin tasks while engaging your students. Help them learn, practice and collaborate. All in one place.\nAd-free for focused learning\nDashboard to manage your classroom\nStudy plans for structured learning\nTrack progress with insights\nInteractive code challenges and projects\nAccess to all courses and certification exams\nSpaces for building and publishing projects\n25% OFF\nYou can also buy a domain or connect an existing one.\nSave Time with Templates\nJust landed in Spaces\nLearn to code more effectively\nand intelligently with kAI - AI tutor\nHi! I'm kAI, W3Schools AI Tutor...\nFeel free to ask me any coding-related questions, and I'll do my best to assist you.\nI can help you checking your code for errors, improving your code's structure, explaining coding concepts in a clear and understandable way, and more...\nI can even create complete websites for you based on your input, so what are you waiting for?\nSuper Simple to Share\nIncluded for free in all plans\nWant custom domains?\nHow it works\nCoding Made Easy\nCloud-based\nTerminal & Log\nHow To Libraries\nDatabase\nFile Navigator\nPackage Manager\nAnalytics\nEnvironment Manager\nSave Time & Money.\nAll Your Files in One Place.\nFix Your Code Faster.\nGet Full Data Visibility.\nIncreased Control and Security.\nFind What You Need Quicker.\nGet Traffic Insights.\nGet Inspired\nFrequently Asked Questions\nWith Basic Spaces, you can build frontend websites. Whereas with Fullstack Spaces, you can build frontend and backend websites.\nBasic Spaces include HTML, CSS, and Javascript. Full Stack Spaces include everything in Basic Spaces plus PHP, Python, React.js, Vue.js, Node.js, Handlebars, and Django.\nYour subscription will be automatically renewed every month.\nYour access to all the benefits for the paid period of time will continue. However, the subscription will not be renewed automatically.\nTo subscribe W3Schools accounts for multiple users, you can contact sales@w3schools.com",
      "examples": []
    },
    {
      "title": "SQL Syllabus",
      "summary": "Introduction\nThe W3Schools SQL Tutorial is comprehensive and beginner-friendly.\nIt will give you a fundamental knowledge of SQL.\nIt is designed for beginners and requires no prior experience with programming.\nThe content has been carefully made to be bite-sized, simple, and easy to understand.\nThe content has been proven by millions of users over the years. It is updated and improved frequently.\nThe syllabus outline and its sequence are structured so you can learn SQL step by step, from the introduction to creating your first application with SQL.\nGet Started With SQL »\nLearning Outcomes\nUnderstand what SQL is and why you would use it.\nCreate and manage databases and tables.\nInsert, update, and delete data in tables.\nUse SELECT with filters (WHERE) and sorting (ORDER BY) to get data.\nUse JOIN to combine data from multiple tables.\nUse functions like SUM, AVG, and COUNT to group data and add them up.\nCreate table relationships with foreign keys.\nUse SQL functions like MIN, MAX, and COUNT.\nUnderstand subqueries and indexes.\nManage user permissions and data security.\nNote: Are you a teacher teaching SQL? W3Schools Academy is a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more about Academy here.\nWhich Subjects Are SQL Relevant For?\nInformation Technology (IT):\nSQL is used to run and manage databases and IT systems.\nComputer Science (CS):\nLearn database management and data structures.\nData Science:\nSQL is foundational for data analysis and handling of big data.\nMathematics:\nOrganize and analyze data.\nBusiness and Management:\nSQL supports reporting and data-driven decision making.\nEconomics and Finance:\nPulling raw data from databases. Financial data management, reporting, and risk analysis.\nStatistics:\nCollecting and processing of large data sets.\nScience (Biology, Chemistry, and more):\nHandling, research, and analysis of experimental data.\nRetail and E-commerce:\nAnalysis of inventory, supply chain management, and sales. Customer database management.\nOther (Healthcare, Education, Engineering):\nUser record systems, data analysis, quality control, and data monitoring.\nSQL is a language that is essential in any subject working with data.\nGet Started\nActivities\nIn this tutorial we offer different activities for you to learn SQL for free:\nLessons\nExercises\nQuizzes\nSign in to Track Progress\nYou can also create a free account to track your progress.\nAs a signed-in user, you get access to features such as:\nLearning paths\nSandbox and lab environments\nAchievements\nAnd much more!\nSign Up - It's free\nOverview of the Modules\nSQL Introduction\nSQL Syntax\nSQL SELECT\nSQL SELECT DISTINCT\nSQL WHERE\nSQL ORDER BY\nSQL AND, OR, NOT\nSQL INSERT INTO\nSQL NULL Values\nSQL UPDATE\nSQL DELETE\nSQL SELECT TOP\nAggregate Functions\nSQL MIN and MAX\nSQL COUNT, AVG, SUM\nSQL LIKE\nSQL Wildcards\nSQL IN\nSQL BETWEEN\nSQL Aliases\nSQL Joins\nSQL INNER JOIN\nSQL LEFT JOIN\nSQL RIGHT JOIN\nSQL FULL JOIN\nSQL Self Join\nSQL UNION\nSQL GROUP BY\nSQL HAVING\nSQL EXISTS\nSQL ANY and ALL\nSQL SELECT INTO\nSQL INSERT INTO SELECT\nSQL CASE\nSQL NULL Functions\nSQL Stored Procedures\nSQL Comments\nSQL Operators\nSQL Database\nSQL Drop DB\nSQL Backup DB\nSQL CREATE TABLE\nSQL Drop Table\nSQL Alter Table\nSQL Constraints\nSQL Unique\nSQL Primary Key\nSQL CHECK Constraint\nSQL Default Constraint\nSQL Create Index Statement\nSQL Auto Increment\nSQL Dates\nSQL Views\nSQL Injections\nSQL Hosting\nSQL Data Types\nGet Started\nSandbox and Lab Environment\nSQL, like any other coding language, is best learned by working hands-on with code.\nWith our online SQL editor, you can edit the SQL statements, and view the result in your browser:\nExampleGet your own SQL Server\nIf you want to explore more and host your project, we have a feature called Spaces that allows you to build, test and deploy static websites for free.\nHere you get a secure sandbox environment called Spaces, where you can practice coding and test projects in real-time.\nSpaces allow you to test, build, and deploy code. This includes a W3Schools subdomain, hosting, and secure SSL certificates.\nSpaces require no installation and run directly in the browser.\nFeatures include:\nCollaboration\nFile navigator\nTerminal & log\nPackage manager\nDatabase\nEnvironment manager\nAnalytics\nCreate a Spaces Account\nSQL Certification\nW3Schools offers an end-of-pathway certification program.\nHere you can take exams to get certified.\nThe SQL exam is a test that summarizes the W3Schools SQL syllabus.\nAfter passing the exam you get the \"Certified SQL Developer\" Certification.\nThere are two different types of certifications:\nNon-adaptive\nAdaptive\nThe non-adaptive is pass or no pass.\nThe adaptive certification is adaptive and graded; students will get a grade from intermediate, advanced to professional.\nBuy Certificate »\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach SQL?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo »",
      "examples": [
        "SELECT * FROM Customers;"
      ]
    },
    {
      "title": "SQL Study Plan",
      "summary": "Introduction\nThe SQL study plan helps you teach your students SQL step-by-step.\nCreating a study plan for SQL is easy.\nYou can use a pre-built study plan or customize it.\nStudents have different skill levels. The study plans can be customized to ensure that everyone is challenged.\nSave time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of SQL to the final exam.\nW3Schools Academy\nThis study plan is a feature of W3Schools Academy.\nW3Schools Academy is a platform that has everything you need to teach coding, all in one place.\nIt offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom.\nYou need to have an active subscription to access the study plan feature. There are two different subscription tiers:\nEssentials ($1.99 / month per student)\nFull Access ($5.99 / month per student)\nCalculate your price and order here.\nLearn More »\nAcademy also offer other features such as:\nManaging your classroom\nTracking of student progress and reports\nLabs, assignments, and code challenges (prebuilt challenges or create your own ones)\nAuto-grading\nTeaching materials\nCertification exams\nGet a free demo »\nTeacher Materials\nW3Schools has everything you need to teach SQL.\nThe SQL training materials is available for you to include and use in your study plan:\nW3Schools SQL Tutorial\nSQL Exercises\nSQL Quiz\nSQL Challenges (Coding challenges)\nSQL Certification Exam (End of Pathway Exam)\nSQL Syllabus\nWith the SQL Syllabus, your students will start with the basics, like understanding databases and writing simple queries, and move to more advanced topics, like joining tables, using aggregate functions, and managing database structures. Each chapter has examples, try-it-yourself sections, exercises, and quizzes to make learning easy, interactive, and fun.\nRead more about SQL Syllabus.\nStudy Plan Overview\nThe study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level.\nLearning Paths\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nInteractive Content\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTimeline and Pace\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nTrack Student Progress\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nEnd of Pathway Exam\nThe SQL study plan aligns with the SQL Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the SQL Tutorial.\nYou get reports of the students' results.\nThe SQL study plan aligns with the SQL Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the SQL Tutorial.\nYou get reports of the students' results.\nAccessibility\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nLearn More »\nSample Study Plan\nYou choose the timeline and pace of your study plans.\nSchools have different preferences.\nSome would like more intensive pace, e.g. 4 weeks, others 12 or more weeks.\nIt is completely up to you.\nFor example, this is how a 4-week SQL study plan could look like:\nWeek 1: Basic Syntax, Queries\nWeek 2: Data Manipulation, Functions and operators\nWeek 3: Joins, Database Design, Constraints and keys\nWeek 4: SQL Certification Exam\nImage of Sample SQL study plan:\nReady to get started?\nStart with SQL Study Plans today.\nGet Started »\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach SQL programming?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo »",
      "examples": []
    },
    {
      "title": "W3Schools SQL Bootcamp SQL Bootcamp",
      "summary": "Learn More\nWhat You Will Learn\nPython\nHow to write scripts for automating tasks.\nHow to create and serve web applications.\nHow to write programs for mathematical and scientific computing.\nHow to use object-oriented programming and third-party libraries.\nHow to build secure and reliable applications.\nSQL\nHow to store, change and retrieve data in databases with SQL.\nHow to use SQL in: MySQL, SQL Server, MS Access, Oracle, Sybase, Informix, Postgres, and other database systems.\nNumPy\nHow NumPy can be used for arrays in statistics and math.\nPandas\nHow Pandas can be used for data analysis.\nR\nHow to use R for managing different types of data.\nHow to use R for statistical data analysis.\nHow to use R to visualize data with plots and diagrams.\nSelf-paced Data Analytics Program\nStart learning Data Analytics with the W3Schools program and lay the foundations of your programming skills. This program is a great foundation for you that wants to get started with Data Analytics. It covers Python, SQL, NumPy, Pandas, R, and Data Science.\nPython is a popular object oriented programming language.\nSQL is a standard language for storing, manipulating and retrieving data in databases.\nNumPy is a Python library for using arrays in statistics and math.\nPandas is a Python library for data analysis.\nR is a language for statistical computing and graphics. It provides an environment for data manipulation, calculation and visualization.\nThis is a structured and interactive version of the w3schools Python, SQL, NumPy, Pandas, R, and Data Science Tutorial together with the w3schools certification.\nThe program is a set of self-paced courses with text based modules, practical interactive examples and exercises to check your understanding as you progress. Complete the modules and the final certification exams to get the w3schools certification.\nWhat You Get\n7x Certifications:\nCertified Python Developer\nCertified SQL Developer\nNumpy Fundamentals\nPandas Fundamentals\nR Fundamentals\nData Science Fundamentals\nCertified Data Analyst\nThe Certified Data Analyst certification is granted when all the above certifications are obtained!\nCertificate of Completion\nYou get sharable certificates that can be added to your CV, Resume or LinkedIn.\nCheck out what it looks like in this example!\nThree Reasons to Join the Program\nLearn More\nHow it Works\nStep 1. Course enrollment\nEnroll by paying the enrollment fee and gain access to the course and final exam. There is no deadline to take the exam. All questions in the exam are based on W3Schools content.\nStep 2. Complete the course learning modules\nThe courses are self-paced with text based modules, practical interactive examples and exercises to check your understanding as you progress. Complete the learning modules to unlock the final exam.\nStep 3. Take the exams\nThe exams are taken at the end of each course after finishing the course learning modules. Immediately after completing the exam, you will be informed of your score and of your pass/fail status. You will get three attempts to pass each exam. You can use the new attempts to improve your score. The best result of the attempts will count.\nStep 4: Become certified\nPass the exams and get your certifications and your Certified Developer titles! Each certificate gets a unique link that can be shared with others. Validate your certificates with a link or a QR code.\nLearn More",
      "examples": []
    },
    {
      "title": "W3Schools SQL Certificate",
      "summary": "W3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nW3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nWho Should Consider Getting Certified?\nAny student or professional within the digital industry.\nCertifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market.\nW3Schools is Trusted by Top Companies\nW3Schools has over two decades of experience with teaching coding online.\nOur certificates are recognized and valued by companies looking to employ skilled developers.\nSave Time and Money\nShow the world your coding skills by getting a certification.\nThe prices is a small fraction compared to the price of traditional education.\nDocument and validate your competence by getting certified!\nExam overview\nFee: 95 USD\nAchievable certification levels:\nIntermediate (40%)\nAdvanced (75%)\nProfessional (90%)\nNumber of questions:\nAdaptive, 60 on average\nRequirement to pass:\nMinimum 40% - Intermediate level\nTime limit: 60 minutes\nNumber of attempts to pass: 3\nExam deadline: None\nCertification Expiration: None\nFormat: Online, multiple choice\nRegister now »\nAdvance Faster in Your Career\nGetting a certificate proves your commitment to upgrading your skills.\nThe certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on.\nIt gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nKnowledge is power, especially in the current job market.\nDocumentation of your skills enables you to advance your career or helps you to start a new one.\nHow Does It Work?\nStudy for free at W3Schools.com\nStudy at your own speed\nTest your skills with W3Schools online quizzes\nApply for your certificate by paying an exam fee\nTake your exam online, at any time, and from any location\nGet Your Certificate and Share It With The World\nExample certificate:\nEach certificate gets a unique link that can be shared with others.\nValidate your certification with the link or QR code.\nCheck how it looks like in this Example.\nShare your certificate on Linked in the Certifications section in just one click!\nDocument Your Skills\nGetting a certificate proves your commitment to upgrade your skills, gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nGet Your Certificate »\nLooking to add multiple users?\nAre you an educator, manager or business owner looking for courses or certifications?\nWe are working with schools, companies and organizations from all over the world.\nGet courses and/or certifications for your team here.",
      "examples": []
    },
    {
      "title": "SQL Training",
      "summary": "Introduction: SQL is a standard language for storing, manipulating and retrieving data in databases.\nW3Schools offers an SQL training course that covers SQL foundations and more.\nThe course includes the W3Schools Certified SQL Developer certification.\nThe SQL training is relevant for companies and schools that want to certify their employees or students.\nOrganizations can track learner progress, get insights and manage everything from licenses to certificates with W3Schools Academy.\nRemember that you can always learn for free on W3Schools with the SQL Tutorial.\n*Academy is available for companies and schools only.\nGet analytics to track learner progress and results.\nFlexible timelines and pacing to match busy schedules.\nCertifications that are trusted by leading organizations worldwide\nSQL Training with W3Schools\nW3Schools has been training millions of learners since 1998.\nGovernments, schools, and organizations worldwide trust W3Schools to train employees and students.\nW3Schools training materials and content have been well-proven over the years and are updated regularly.\nWith the W3Schools Academy pricing model, it is now one of the worlds most affordable quality SQL training options there is.\nLearning Outcomes\nThe Certificate Course includes all the training materials to pass the Certified SQL Developer certification exam.\nNo prerequisites are required to take the course.\nThe learners will be able to:\nUnderstand what SQL is and why you would use it.\nCreate and manage databases and tables.\nInsert, update, and delete data in tables.\nUse SELECT with filters (WHERE) and sorting (ORDER BY) to get data.\nUse JOIN to combine data from multiple tables.\nUse functions like SUM, AVG, and COUNT to group data and add them up.\nCreate table relationships with foreign keys.\nUse SQL functions like MIN, MAX, and COUNT.\nUnderstand subqueries and indexes.\nManage user permissions and data security.\nIf you are not a company or school, you can still buy the course for personal use.\nRead more about W3Schools courses here: W3Schools Courses\nCertified SQL Developer\nAfter completing the training modules the learner will take the end of pathway exam.\nWhen the learner passes the exam, the learner will get the Certified SQL Developer certification.\nThe exam is a multiple choice exam with 60 questions and a duration of 60 minutes.\nImage of a SQL Certificate:\nThe certificate does not expire and is valid for lifetime.\nIt is shareable and can be added to your CV or LinkedIn profile.\nYou can read more about the certificate here: SQL Certificate\nTrack Learner Progress\nAs an employer or a school you can track learner progress and results.\nAssign courses to learners with ease and get them started in no time.\nWith W3Schools Academy you can manage everything from licenses to certificates.\nIt will give you everything you need to train your employees or students in different technologies.\nImage of class overview in Academy:\nYou can read more about the Academy here: W3Schools Academy\nNote: If you don't want to track progress, there is an option to give them access to the course without any management.\nInteractive Learning\nThe course is designed to be interactive and fun to learn.\nThe learner will engage with different learning activities to keep them engaged.\nThis includes quizzes, code exercises, challenges, and a final exam.\nStay engaged with hands-on coding challenges that help you practice and test what you've learned.\nImage of one of the activity types in the course, a SQL Challenge:\nSQL is best learned by doing, and this is why we have included a lot of challenges in the course.\nYou will get access to hundreds of coding challenges\nGet instant feedback with auto-grading\nReceive personalized guidance with manual grading\nWork on exercises ranging from simple to complex\nYou can read more about the different types of activities here: Coding Exercises\nTraining Course Overview\nHow to Get Started\nPurchase W3Schools Academy access for your organization\nCreate a class and invite your learners\nAssign the SQL course to your class\nMonitor learner progress through the admin dashboard\nReview analytics and certification results\nAre you ready to start training your employees today?\nBuy Access to Academy Now »",
      "examples": []
    }
  ],
  "glossary": [
    "abs",
    "acos",
    "add",
    "add constraint",
    "adddate",
    "addtime",
    "all",
    "alter",
    "alter column",
    "alter table",
    "any",
    "as",
    "asc",
    "ascii",
    "asin",
    "atan",
    "atan2",
    "atn",
    "atn2",
    "avg",
    "backend",
    "backup database",
    "between",
    "bin",
    "binary",
    "case",
    "cast",
    "ceil",
    "ceiling",
    "char",
    "char length",
    "character length",
    "charindex",
    "check",
    "chr",
    "coalesce",
    "column",
    "concat",
    "concat ws",
    "connection id",
    "constraint",
    "conv",
    "convert",
    "cos",
    "cot",
    "count",
    "create",
    "create database",
    "create index",
    "create procedure",
    "create table",
    "create view",
    "curdate",
    "curdir",
    "current date",
    "current time",
    "current timestamp",
    "current user",
    "currentuser",
    "curtime",
    "database",
    "datalength",
    "date",
    "date add",
    "date format",
    "date sub",
    "dateadd",
    "datediff",
    "datefromparts",
    "datename",
    "datepart",
    "dateserial",
    "datevalue",
    "day",
    "dayname",
    "dayofmonth",
    "dayofweek",
    "dayofyear",
    "degrees",
    "delete",
    "desc",
    "difference",
    "distinct",
    "div",
    "drop",
    "drop column",
    "drop constraint",
    "drop database",
    "drop default",
    "drop index",
    "drop table",
    "drop view",
    "environ",
    "exec",
    "exercises",
    "exists",
    "exp",
    "extract",
    "field",
    "fix",
    "floor",
    "foreign key",
    "format",
    "free",
    "getdate",
    "getutcdate",
    "greatest",
    "group by",
    "having",
    "hour",
    "if",
    "ifnull",
    "iif",
    "in",
    "index",
    "inner join",
    "insert",
    "instr",
    "instrrev",
    "int",
    "is null",
    "isdate",
    "isnull",
    "isnumeric",
    "javascript",
    "join",
    "last day",
    "lcase",
    "least",
    "left",
    "left join",
    "len",
    "length",
    "like",
    "limit",
    "ln",
    "localtime",
    "localtimestamp",
    "locate",
    "log",
    "log10",
    "log2",
    "lower",
    "lpad",
    "ltrim",
    "makedate",
    "maketime",
    "max",
    "microsecond",
    "mid",
    "min",
    "minute",
    "mod",
    "month",
    "monthname",
    "mysql functions",
    "nchar",
    "not",
    "not null",
    "note",
    "now",
    "nullif",
    "or",
    "order by",
    "outer join",
    "patindex",
    "period add",
    "period diff",
    "pi",
    "position",
    "pow",
    "power",
    "primary key",
    "procedure",
    "programs",
    "quarter",
    "quotename",
    "radians",
    "rand",
    "randomize",
    "references",
    "repeat",
    "replace",
    "replicate",
    "report error",
    "reverse",
    "right",
    "right join",
    "rnd",
    "round",
    "rownum",
    "rpad",
    "rtrim",
    "second",
    "select",
    "select distinct",
    "select top",
    "session user",
    "sessionproperty",
    "set",
    "sgn",
    "sign",
    "sin",
    "soundex",
    "space",
    "split",
    "sql aliases",
    "sql avg",
    "sql between",
    "sql bootcamp",
    "sql case",
    "sql check",
    "sql comments",
    "sql constraints",
    "sql count",
    "sql database",
    "sql dates",
    "sql default",
    "sql delete",
    "sql editor",
    "sql exercises",
    "sql exists",
    "sql having",
    "sql home",
    "sql hosting",
    "sql in",
    "sql index",
    "sql injection",
    "sql intro",
    "sql joins",
    "sql keywords",
    "sql like",
    "sql not",
    "sql operators",
    "sql or",
    "sql quiz",
    "sql references",
    "sql select",
    "sql server",
    "sql sum",
    "sql syllabus",
    "sql syntax",
    "sql training",
    "sql union",
    "sql unique",
    "sql update",
    "sql views",
    "sql where",
    "sql wildcards",
    "sqr",
    "sqrt",
    "square",
    "str",
    "strcmp",
    "strcomp",
    "strconv",
    "strreverse",
    "stuff",
    "subdate",
    "substr",
    "substring",
    "substring index",
    "subtime",
    "sum",
    "sysdate",
    "sysdatetime",
    "system user",
    "table",
    "tan",
    "time",
    "time format",
    "timediff",
    "timeserial",
    "timestamp",
    "timevalue",
    "to days",
    "top",
    "translate",
    "trim",
    "truncate",
    "truncate table",
    "ucase",
    "unicode",
    "union",
    "union all",
    "unique",
    "update",
    "upper",
    "user",
    "user name",
    "val",
    "values",
    "version",
    "view",
    "w3schools spaces",
    "week",
    "weekday",
    "weekdayname",
    "weekofyear",
    "where",
    "year",
    "yearweek"
  ]
}