{
  "language": "C#",
  "tutorials": [
    {
      "title": "C# Tutorial",
      "code": [
        {
          "text": "using System; namespace HelloWorld { class Program { static void Main(string[] args) { Console.WriteLine(\"Hello World!\"); } } }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-using\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword keyword-namespace\">namespace</span> <span class=\"token namespace\">HelloWorld</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/index.php"
      }
    },
    {
      "title": "C# Get Started",
      "code": [
        {
          "text": "using System; namespace HelloWorld { class Program { static void Main(string[] args) { Console.WriteLine(\"Hello World!\"); } } }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-using\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword keyword-namespace\">namespace</span> <span class=\"token namespace\">HelloWorld</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_getstarted.php"
      }
    },
    {
      "title": "C# Syntax",
      "code": [
        {
          "text": "using System; namespace HelloWorld { class Program { static void Main(string[] args) { Console.WriteLine(\"Hello World!\"); } } }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-using\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword keyword-namespace\">namespace</span> <span class=\"token namespace\">HelloWorld</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_syntax.php"
      }
    },
    {
      "title": "C# Output",
      "code": [
        {
          "text": "Console.WriteLine(\"Hello World!\");",
          "html": "<code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "Console.WriteLine(\"Hello World!\"); Console.WriteLine(\"I am Learning C#\"); Console.WriteLine(\"It is awesome!\");",
          "html": "<code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am Learning C#\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"It is awesome!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>"
        },
        {
          "text": "Console.WriteLine(3 + 3);",
          "html": "<code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>"
        },
        {
          "text": "Console.Write(\"Hello World! \"); Console.Write(\"I will print on the same line.\");",
          "html": "<code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World! \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I will print on the same line.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_output.php"
      }
    },
    {
      "title": "C# Comments",
      "code": [
        {
          "text": "// This is a comment Console.WriteLine(\"Hello World!\");",
          "html": "<code class=\"language-csharp\"><span class=\"token comment\">// This is a comment</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "Console.WriteLine(\"Hello World!\"); // This is a comment",
          "html": "<code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// This is a comment</span>\n</code>"
        },
        {
          "text": "/* The code below will print the words Hello World to the screen, and it is amazing */ Console.WriteLine(\"Hello World!\");",
          "html": "<code class=\"language-csharp\"><span class=\"token comment\">/* The code below will print the words Hello World\nto the screen, and it is amazing */</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n</code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_comments.php"
      }
    },
    {
      "title": "C# Variables",
      "code": [
        {
          "text": "type variableName = value;",
          "html": "<code class=\"language-java\">type variableName <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "string name = \"John\"; Console.WriteLine(name);",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "int myNum = 15; Console.WriteLine(myNum);",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> myNum <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "int myNum; myNum = 15; Console.WriteLine(myNum);",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> myNum<span class=\"token punctuation\">;</span>\nmyNum <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "int myNum = 15; myNum = 20; // myNum is now 20 Console.WriteLine(myNum);",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> myNum <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\nmyNum <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// myNum is now 20</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>"
        },
        {
          "text": "int myNum = 5; double myDoubleNum = 5.99D; char myLetter = 'D'; bool myBool = true; string myText = \"Hello\";",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> myNum <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-double\">double</span></span> myDoubleNum <span class=\"token operator\">=</span> <span class=\"token number\">5.99D</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-char\">char</span></span> myLetter <span class=\"token operator\">=</span> <span class=\"token char\">'D'</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-bool\">bool</span></span> myBool <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> myText <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\n</code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_variables.php"
      }
    },
    {
      "title": "C# Constants",
      "code": [
        {
          "text": "const int myNum = 15; myNum = 20; // error",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-const\"><strong>const</strong></span> <span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> myNum <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\nmyNum <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span>\n</code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_variables_constants.php"
      }
    },
    {
      "title": "C# Display Variables",
      "code": [
        {
          "text": "string name = \"John\"; Console.WriteLine(\"Hello \" + name);",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "string firstName = \"John \"; string lastName = \"Doe\"; string fullName = firstName + lastName; Console.WriteLine(fullName);",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> firstName <span class=\"token operator\">=</span> <span class=\"token string\">\"John \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> lastName <span class=\"token operator\">=</span> <span class=\"token string\">\"Doe\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> fullName <span class=\"token operator\">=</span> firstName <span class=\"token operator\">+</span> lastName<span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>fullName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "int x = 5; int y = 6; Console.WriteLine(x + y); // Print the value of x + y",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> y <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Print the value of x + y</span>\n</code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_variables_display.php"
      }
    },
    {
      "title": "C# Multiple Variables",
      "code": [
        {
          "text": "int x = 5, y = 6, z = 50; Console.WriteLine(x + y + z);",
          "html": "<code class=\"language-java\"><span class=\"token keyword keyword-int\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> z <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Console<span class=\"token punctuation\">.</span>WriteLine</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "int x, y, z; x = y = z = 50; Console.WriteLine(x + y + z);",
          "html": "<code class=\"language-java\"><span class=\"token keyword keyword-int\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">;</span>\nx <span class=\"token operator\">=</span> y <span class=\"token operator\">=</span> z <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Console<span class=\"token punctuation\">.</span>WriteLine</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_variables_multiple.php"
      }
    },
    {
      "title": "C# Identifiers",
      "code": [
        {
          "text": "// Good int minutesPerHour = 60; // OK, but not so easy to understand what m actually is int m = 60;",
          "html": "<code class=\"language-csharp\"><span class=\"token comment\">// Good</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> minutesPerHour <span class=\"token operator\">=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// OK, but not so easy to understand what <strong>m</strong> actually is</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> m <span class=\"token operator\">=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n</code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_variables_identifiers.php"
      }
    },
    {
      "title": "C# Data Types",
      "code": [
        {
          "text": "int myNum = 5; // Integer (whole number) double myDoubleNum = 5.99D; // Floating point number char myLetter = 'D'; // Character bool myBool = true; // Boolean string myText = \"Hello\"; // String",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> myNum <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// Integer (whole number)</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-double\">double</span></span> myDoubleNum <span class=\"token operator\">=</span> <span class=\"token number\">5.99D</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Floating point number</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-char\">char</span></span> myLetter <span class=\"token operator\">=</span> <span class=\"token char\">'D'</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// Character</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-bool\">bool</span></span> myBool <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// Boolean</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> myText <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// String</span>\n</code>"
        },
        {
          "text": "int myNum = 100000; Console.WriteLine(myNum);",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> myNum <span class=\"token operator\">=</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "long myNum = 15000000000L; Console.WriteLine(myNum);",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-long\">long</span></span> myNum <span class=\"token operator\">=</span> <span class=\"token number\">15000000000L</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "float myNum = 5.75F; Console.WriteLine(myNum);",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-float\">float</span></span> myNum <span class=\"token operator\">=</span> <span class=\"token number\">5.75F</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "double myNum = 19.99D; Console.WriteLine(myNum);",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-double\">double</span></span> myNum <span class=\"token operator\">=</span> <span class=\"token number\">19.99D</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "float f1 = 35e3F; double d1 = 12E4D; Console.WriteLine(f1); Console.WriteLine(d1);",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-float\">float</span></span> f1 <span class=\"token operator\">=</span> <span class=\"token number\">35e3F</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-double\">double</span></span> d1 <span class=\"token operator\">=</span> <span class=\"token number\">12E4D</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "bool isCSharpFun = true; bool isFishTasty = false; Console.WriteLine(isCSharpFun); // Outputs True Console.WriteLine(isFishTasty); // Outputs False",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-bool\">bool</span></span> isCSharpFun <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-bool\">bool</span></span> isFishTasty <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>isCSharpFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Outputs True</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>isFishTasty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Outputs False</span>\n</code>"
        },
        {
          "text": "char myGrade = 'B'; Console.WriteLine(myGrade);",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-char\">char</span></span> myGrade <span class=\"token operator\">=</span> <span class=\"token char\">'B'</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myGrade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "string greeting = \"Hello World\"; Console.WriteLine(greeting);",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_data_types.php"
      }
    },
    {
      "title": "C# Type Casting",
      "code": [
        {
          "text": "int myInt = 9; double myDouble = myInt; // Automatic casting: int to double Console.WriteLine(myInt); // Outputs 9 Console.WriteLine(myDouble); // Outputs 9",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> myInt <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-double\">double</span></span> myDouble <span class=\"token operator\">=</span> myInt<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// Automatic casting: int to double</span>\n\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myInt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// Outputs 9</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myDouble<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Outputs 9</span>\n</code>"
        },
        {
          "text": "double myDouble = 9.78; int myInt = (int) myDouble; // Manual casting: double to int Console.WriteLine(myDouble); // Outputs 9.78 Console.WriteLine(myInt); // Outputs 9",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-double\">double</span></span> myDouble <span class=\"token operator\">=</span> <span class=\"token number\">9.78</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> myInt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-int\">int</span><span class=\"token punctuation\">)</span> myDouble<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Manual casting: double to int</span>\n\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myDouble<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Outputs 9.78</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myInt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// Outputs 9</span>\n</code>"
        },
        {
          "text": "int myInt = 10; double myDouble = 5.25; bool myBool = true; Console.WriteLine(Convert.ToString(myInt)); // convert int to string Console.WriteLine(Convert.ToDouble(myInt)); // convert int to double Console.WriteLine(Convert.ToInt32(myDouble)); // convert double to int Console.WriteLine(Convert.ToString(myBool)); // convert bool to string",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> myInt <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-double\">double</span></span> myDouble <span class=\"token operator\">=</span> <span class=\"token number\">5.25</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-bool\">bool</span></span> myBool <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span>myInt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// convert int to string</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToDouble</span><span class=\"token punctuation\">(</span>myInt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// convert int to double</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToInt32</span><span class=\"token punctuation\">(</span>myDouble<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// convert double to int</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span>myBool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// convert bool to string</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_type_casting.php"
      }
    },
    {
      "title": "C# User Input",
      "code": [
        {
          "text": "// Type your username and press enter Console.WriteLine(\"Enter username:\"); // Create a string variable and get user input from the keyboard and store it in the variable string userName = Console.ReadLine(); // Print the value of the variable (userName), which will display the input value Console.WriteLine(\"Username is: \" + userName);",
          "html": "<code class=\"language-csharp\"><span class=\"token comment\">// Type your username and press enter</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter username:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create a string variable and get user input from the keyboard and store it in the variable</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> userName <span class=\"token operator\">=</span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Print the value of the variable (userName), which will display the input value</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Username is: \"</span> <span class=\"token operator\">+</span> userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>"
        },
        {
          "text": "Console.WriteLine(\"Enter your age:\"); int age = Console.ReadLine(); Console.WriteLine(\"Your age is: \" + age);",
          "html": "<code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter your age:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> age <span class=\"token operator\">=</span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your age is: \"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>"
        },
        {
          "text": "Console.WriteLine(\"Enter your age:\"); int age = Convert.ToInt32(Console.ReadLine()); Console.WriteLine(\"Your age is: \" + age);",
          "html": "<code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter your age:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> age <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToInt32</span><span class=\"token punctuation\">(</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your age is: \"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_user_input.php"
      }
    },
    {
      "title": "C# Operators",
      "code": [
        {
          "text": "int x = 100 + 50;",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> x <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token operator\">+</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "int sum1 = 100 + 50; // 150 (100 + 50) int sum2 = sum1 + 250; // 400 (150 + 250) int sum3 = sum2 + sum2; // 800 (400 + 400)",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> sum1 <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token operator\">+</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 150 (100 + 50)</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> sum2 <span class=\"token operator\">=</span> sum1 <span class=\"token operator\">+</span> <span class=\"token number\">250</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 400 (150 + 250)</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> sum3 <span class=\"token operator\">=</span> sum2 <span class=\"token operator\">+</span> sum2<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 800 (400 + 400)</span>\n</code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_operators.php"
      }
    },
    {
      "title": "C# Assignment Operators",
      "code": [
        {
          "text": "int x = 10;",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "int x = 10; x += 5;",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nx <span class=\"token operator\">+=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n</code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_operators_assignment.php"
      }
    },
    {
      "title": "C# Comparison Operators",
      "code": [
        {
          "text": "int x = 5; int y = 3; Console.WriteLine(x > y); // returns True because 5 is greater than 3",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> y <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&gt;</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns True because 5 is greater than 3</span>\n</code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_operators_comparison.php"
      }
    },
    {
      "title": "C# Math",
      "code": [
        {
          "text": "Math.Max(5, 10);",
          "html": "<code class=\"language-csharp\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "Math.Sqrt(64);",
          "html": "<code class=\"language-csharp\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">Sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "Math.Abs(-4.7);",
          "html": "<code class=\"language-csharp\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">4.7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "Math.Round(9.99);",
          "html": "<code class=\"language-csharp\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">Round</span><span class=\"token punctuation\">(</span><span class=\"token number\">9.99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_math.php"
      }
    },
    {
      "title": "C# Strings",
      "code": [
        {
          "text": "string greeting = \"Hello\";",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "string greeting2 = \"Nice to meet you!\";",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> greeting2 <span class=\"token operator\">=</span> <span class=\"token string\">\"Nice to meet you!\"</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "string txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; Console.WriteLine(\"The length of the txt string is: \" + txt.Length);",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> txt <span class=\"token operator\">=</span> <span class=\"token string\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The length of the txt string is: \"</span> <span class=\"token operator\">+</span> txt<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "string txt = \"Hello World\"; Console.WriteLine(txt.ToUpper()); // Outputs \"HELLO WORLD\" Console.WriteLine(txt.ToLower()); // Outputs \"hello world\"",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> txt <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>txt<span class=\"token punctuation\">.</span><span class=\"token function\">ToUpper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Outputs \"HELLO WORLD\"</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>txt<span class=\"token punctuation\">.</span><span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Outputs \"hello world\"</span>\n</code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_strings.php"
      }
    },
    {
      "title": "C# String Concatenation",
      "code": [
        {
          "text": "string firstName = \"John \"; string lastName = \"Doe\"; string name = firstName + lastName; Console.WriteLine(name);",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> firstName <span class=\"token operator\">=</span> <span class=\"token string\">\"John \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> lastName <span class=\"token operator\">=</span> <span class=\"token string\">\"Doe\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> name <span class=\"token operator\">=</span> firstName <span class=\"token operator\">+</span> lastName<span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "string firstName = \"John \"; string lastName = \"Doe\"; string name = string.Concat(firstName, lastName); Console.WriteLine(name);",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> firstName <span class=\"token operator\">=</span> <span class=\"token string\">\"John \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> lastName <span class=\"token operator\">=</span> <span class=\"token string\">\"Doe\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> name <span class=\"token operator\">=</span> <span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Concat</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">,</span> lastName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "int x = 10; int y = 20; int z = x + y; // z will be 30 (an integer/number)",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> y <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> z <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// z will be 30 (an integer/number)</span>\n</code>"
        },
        {
          "text": "string x = \"10\"; string y = \"20\"; string z = x + y; // z will be 1020 (a string)",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"10\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> y <span class=\"token operator\">=</span> <span class=\"token string\">\"20\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> z <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// z will be 1020 (a string)</span>\n</code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_strings_concat.php"
      }
    },
    {
      "title": "C# String Interpolation",
      "code": [
        {
          "text": "string firstName = \"John\"; string lastName = \"Doe\"; string name = $\"My full name is: {firstName} {lastName}\"; Console.WriteLine(name);",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> firstName <span class=\"token operator\">=</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> lastName <span class=\"token operator\">=</span> <span class=\"token string\">\"Doe\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> name <span class=\"token operator\">=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"My full name is: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">firstName</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">lastName</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_strings_interpol.php"
      }
    },
    {
      "title": "C# Access Strings",
      "code": [
        {
          "text": "string myString = \"Hello\"; Console.WriteLine(myString[0]); // Outputs \"H\"",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> myString <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myString<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Outputs \"H\"</span>\n</code>"
        },
        {
          "text": "string myString = \"Hello\"; Console.WriteLine(myString.IndexOf(\"e\")); // Outputs \"1\"",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> myString <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myString<span class=\"token punctuation\">.</span><span class=\"token function\">IndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"e\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Outputs \"1\"</span>\n</code>"
        },
        {
          "text": "// Full name string name = \"John Doe\"; // Location of the letter D int charPos = name.IndexOf(\"D\"); // Get last name string lastName = name.Substring(charPos); // Print the result Console.WriteLine(lastName);",
          "html": "<code class=\"language-csharp\"><span class=\"token comment\">// Full name</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"John Doe\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Location of the letter D</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> charPos <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">IndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Get last name</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> lastName <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span>charPos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Print the result</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>lastName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_strings_access.php"
      }
    },
    {
      "title": "C# Special Characters",
      "code": [
        {
          "text": "string txt = \"We are the so-called \"Vikings\" from the north.\";",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> txt <span class=\"token operator\">=</span> <span class=\"token string\">\"We are the so-called \"</span>Vikings<span class=\"token string\">\" from the north.\"</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "string txt = \"We are the so-called \\\"Vikings\\\" from the north.\";",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> txt <span class=\"token operator\">=</span> <span class=\"token string\">\"We are the so-called \\\"Vikings\\\" from the north.\"</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "string txt = \"It\\'s alright.\";",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> txt <span class=\"token operator\">=</span> <span class=\"token string\">\"It\\'s alright.\"</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "string txt = \"The character \\\\ is called backslash.\";",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> txt <span class=\"token operator\">=</span> <span class=\"token string\">\"The character \\\\ is called backslash.\"</span><span class=\"token punctuation\">;</span>\n</code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_strings_chars.php"
      }
    },
    {
      "title": "C# Booleans",
      "code": [
        {
          "text": "bool isCSharpFun = true; bool isFishTasty = false; Console.WriteLine(isCSharpFun); // Outputs True Console.WriteLine(isFishTasty); // Outputs False",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-bool\">bool</span></span> isCSharpFun <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-bool\">bool</span></span> isFishTasty <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>isCSharpFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Outputs True</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>isFishTasty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Outputs False</span>\n</code>"
        },
        {
          "text": "int x = 10; int y = 9; Console.WriteLine(x > y); // returns True, because 10 is higher than 9",
          "html": "<code class=\"language-java\"><span class=\"token keyword keyword-int\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-int\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Console<span class=\"token punctuation\">.</span>WriteLine</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&gt;</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns True, because 10 is higher than 9</span>\n</code>"
        },
        {
          "text": "Console.WriteLine(10 > 9); // returns True, because 10 is higher than 9",
          "html": "<code class=\"language-java\"><span class=\"token class-name\">Console<span class=\"token punctuation\">.</span>WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns True, because 10 is higher than 9</span>\n</code>"
        },
        {
          "text": "int x = 10; Console.WriteLine(x == 10); // returns True, because the value of x is equal to 10",
          "html": "<code class=\"language-java\"><span class=\"token keyword keyword-int\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Console<span class=\"token punctuation\">.</span>WriteLine</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns True, because the value of x is equal to 10</span>\n</code>"
        },
        {
          "text": "Console.WriteLine(10 == 15); // returns False, because 10 is not equal to 15",
          "html": "<code class=\"language-java\"><span class=\"token class-name\">Console<span class=\"token punctuation\">.</span>WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns False, because 10 is not equal to 15</span>\n</code>"
        },
        {
          "text": "int myAge = 25; int votingAge = 18; Console.WriteLine(myAge >= votingAge);",
          "html": "<code class=\"language-java\"><span class=\"token keyword keyword-int\">int</span> myAge <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-int\">int</span> votingAge <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Console<span class=\"token punctuation\">.</span>WriteLine</span><span class=\"token punctuation\">(</span>myAge <span class=\"token operator\">&gt;=</span> votingAge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>"
        },
        {
          "text": "int myAge = 25; int votingAge = 18; if (myAge >= votingAge) { Console.WriteLine(\"Old enough to vote!\"); } else { Console.WriteLine(\"Not old enough to vote.\"); }",
          "html": "<code class=\"language-java\"><span class=\"token keyword keyword-int\">int</span> myAge <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-int\">int</span> votingAge <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>myAge <span class=\"token operator\">&gt;=</span> votingAge<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Console<span class=\"token punctuation\">.</span>WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Old enough to vote!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n<span class=\"token keyword keyword-else\">else</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Console<span class=\"token punctuation\">.</span>WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not old enough to vote.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_booleans.php"
      }
    },
    {
      "title": "C# If ... Else",
      "code": [
        {
          "text": "if (condition) { // block of code to be executed if the condition is True }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><em>condition</em><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"><em>// block of code to be executed if the condition is True</em></span>\n<span class=\"token punctuation\">}</span>\n</code>"
        },
        {
          "text": "if (20 > 18) { Console.WriteLine(\"20 is greater than 18\"); }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">20</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"20 is greater than 18\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code>"
        },
        {
          "text": "int x = 20; int y = 18; if (x > y) { Console.WriteLine(\"x is greater than y\"); }",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> x <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> y <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&gt;</span> y<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x is greater than y\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_conditions.php"
      }
    },
    {
      "title": "C# The else Statement",
      "code": [
        {
          "text": "if (condition) { // block of code to be executed if the condition is True } else { // block of code to be executed if the condition is False }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><em>condition</em><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"><em>// block of code to be executed if the condition is True</em></span>\n<span class=\"token punctuation\">}</span> \n<span class=\"token keyword keyword-else\">else</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"><em>// block of code to be executed if the condition is False</em></span>\n<span class=\"token punctuation\">}</span>\n</code>"
        },
        {
          "text": "int time = 20; if (time < 18) { Console.WriteLine(\"Good day.\"); } else { Console.WriteLine(\"Good evening.\"); } // Outputs \"Good evening.\"",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> time <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>time <span class=\"token operator\">&lt;</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Good day.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n<span class=\"token keyword keyword-else\">else</span> \n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Good evening.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Outputs \"Good evening.\"</span>\n<div aria-hidden=\"true\" data-range=\"6\" class=\" line-highlight\" data-start=\"6\" style=\"top: 120px; width: 639px;\"> \n</div></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_conditions_else.php"
      }
    },
    {
      "title": "C# The else if Statement",
      "code": [
        {
          "text": "if (condition1) { // block of code to be executed if condition1 is True } else if (condition2) { // block of code to be executed if the condition1 is false and condition2 is True } else { // block of code to be executed if the condition1 is false and condition2 is False }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><em>condition1</em><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"><em>// block of code to be executed if condition1 is True</em></span>\n<span class=\"token punctuation\">}</span> \n<span class=\"token keyword keyword-else\">else</span> <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><em>condition2</em><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"><em>// block of code to be executed if the condition1 is false and condition2 is True</em></span>\n<span class=\"token punctuation\">}</span> \n<span class=\"token keyword keyword-else\">else</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"><em>// block of code to be executed if the condition1 is false and condition2 is False</em></span>\n<span class=\"token punctuation\">}</span>\n</code>"
        },
        {
          "text": "int time = 22; if (time < 10) { Console.WriteLine(\"Good morning.\"); } else if (time < 20) { Console.WriteLine(\"Good day.\"); } else { Console.WriteLine(\"Good evening.\"); } // Outputs \"Good evening.\"",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> time <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>time <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Good morning.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n<span class=\"token keyword keyword-else\">else</span> <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>time <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Good day.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n<span class=\"token keyword keyword-else\">else</span> \n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Good evening.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Outputs \"Good evening.\"</span>\n<div aria-hidden=\"true\" data-range=\"6\" class=\" line-highlight\" data-start=\"6\" style=\"top: 120px; width: 639px;\"> \n</div></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_conditions_elseif.php"
      }
    },
    {
      "title": "C# Short Hand If...Else",
      "code": [
        {
          "text": "variable = (condition) ? expressionTrue : expressionFalse;",
          "html": "<code class=\"language-csharp\"><em>variable</em> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><em>condition</em><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <em>expressionTrue</em> <span class=\"token punctuation\">:</span> <em> expressionFalse</em><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "int time = 20; if (time < 18) { Console.WriteLine(\"Good day.\"); } else { Console.WriteLine(\"Good evening.\"); }",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> time <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>time <span class=\"token operator\">&lt;</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Good day.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n<span class=\"token keyword keyword-else\">else</span> \n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Good evening.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code>"
        },
        {
          "text": "int time = 20; string result = (time < 18) ? \"Good day.\" : \"Good evening.\"; Console.WriteLine(result);",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> time <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>time <span class=\"token operator\">&lt;</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token string\">\"Good day.\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"Good evening.\"</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_conditions_shorthand.php"
      }
    },
    {
      "title": "C# Switch",
      "code": [
        {
          "text": "switch(expression) { case x: // code block break; case y: // code block break; default: // code block break; }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-switch\">switch</span><span class=\"token punctuation\">(</span><em>expression</em><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-case\">case</span> x<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"><em>// code block</em></span>\n    <span class=\"token keyword keyword-break\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword keyword-case\">case</span> y<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"><em>// code block</em></span>\n    <span class=\"token keyword keyword-break\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword keyword-default\">default</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"><em>// code block</em></span>\n    <span class=\"token keyword keyword-break\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code>"
        },
        {
          "text": "int day = 4; switch (day) { case 1: Console.WriteLine(\"Monday\"); break; case 2: Console.WriteLine(\"Tuesday\"); break; case 3: Console.WriteLine(\"Wednesday\"); break; case 4: Console.WriteLine(\"Thursday\"); break; case 5: Console.WriteLine(\"Friday\"); break; case 6: Console.WriteLine(\"Saturday\"); break; case 7: Console.WriteLine(\"Sunday\"); break; } // Outputs \"Thursday\" (day 4)",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> day <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-switch\">switch</span> <span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-case\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Monday\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-break\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword keyword-case\">case</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tuesday\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-break\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword keyword-case\">case</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wednesday\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-break\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword keyword-case\">case</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thursday\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-break\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword keyword-case\">case</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Friday\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-break\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword keyword-case\">case</span> <span class=\"token number\">6</span><span class=\"token punctuation\">:</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Saturday\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-break\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword keyword-case\">case</span> <span class=\"token number\">7</span><span class=\"token punctuation\">:</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sunday\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-break\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Outputs \"Thursday\" (day 4)</span>\n</code>"
        },
        {
          "text": "int day = 4; switch (day) { case 6: Console.WriteLine(\"Today is Saturday.\"); break; case 7: Console.WriteLine(\"Today is Sunday.\"); break; default: Console.WriteLine(\"Looking forward to the Weekend.\"); break; } // Outputs \"Looking forward to the Weekend.\"",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> day <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-switch\">switch</span> <span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-case\">case</span> <span class=\"token number\">6</span><span class=\"token punctuation\">:</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Today is Saturday.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-break\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword keyword-case\">case</span> <span class=\"token number\">7</span><span class=\"token punctuation\">:</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Today is Sunday.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-break\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword keyword-default\">default</span><span class=\"token punctuation\">:</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Looking forward to the Weekend.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-break\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Outputs \"Looking forward to the Weekend.\"</span>\n<div aria-hidden=\"true\" data-range=\"10\" class=\" line-highlight\" data-start=\"10\" style=\"top: 216px; width: 639px;\"> \n</div></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_switch.php"
      }
    },
    {
      "title": "C# While Loop",
      "code": [
        {
          "text": "while (condition) { // code block to be executed }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-while\">while</span> <span class=\"token punctuation\">(</span><em>condition</em><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n<i>  <span class=\"token comment\">// code block to be executed</span></i><span class=\"token comment\"/>\n<span class=\"token punctuation\">}</span>\n</code>"
        },
        {
          "text": "int i = 0; while (i < 5) { Console.WriteLine(i); i++; }",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-while\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code>"
        },
        {
          "text": "do { // code block to be executed } while (condition);",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-do\">do</span> \n<span class=\"token punctuation\">{</span>\n<i>  <span class=\"token comment\">// code block to be executed</span>\n</i><span class=\"token punctuation\">}</span>\n<span class=\"token keyword keyword-while\">while</span> <span class=\"token punctuation\">(</span><em>condition</em><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "int i = 0;\ndo { Console.WriteLine(i); i++; } while (i < 5);",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token keyword keyword-do\"><br/>do</span> \n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword keyword-while\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_while_loop.php"
      }
    },
    {
      "title": "C# For Loop",
      "code": [
        {
          "text": "for (statement 1; statement 2; statement 3) { // code block to be executed }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">(</span><i>statement <span class=\"token number\">1</span></i><span class=\"token number\"/><span class=\"token punctuation\">;</span><i> statement <span class=\"token number\">2</span></i><span class=\"token number\"/><span class=\"token punctuation\">;</span><i> statement <span class=\"token number\">3</span></i><span class=\"token number\"/><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"><i>// code block to be executed</i></span>\n<span class=\"token punctuation\">}</span></code>"
        },
        {
          "text": "for (int i = 0; i < 5; i++) { Console.WriteLine(i); }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code>"
        },
        {
          "text": "for (int i = 0; i <= 10; i = i + 2) { Console.WriteLine(i); }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code>"
        },
        {
          "text": "// Outer loop for (int i = 1; i <= 2; ++i) { Console.WriteLine(\"Outer: \" + i); // Executes 2 times // Inner loop for (int j = 1; j <= 3; j++) { Console.WriteLine(\" Inner: \" + j); // Executes 6 times (2 * 3) } }",
          "html": "<code class=\"language-csharp\"><span class=\"token comment\">// Outer loop</span>\n<span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Outer: \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Executes 2 times</span>\n\n  <span class=\"token comment\">// Inner loop</span>\n  <span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" Inner: \"</span> <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Executes 6 times (2 * 3)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_for_loop.php"
      }
    },
    {
      "title": "C# Foreach Loop",
      "code": [
        {
          "text": "foreach (type variableName in arrayName) { // code block to be executed }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-foreach\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><em>type</em></span> <em>variableName</em> <span class=\"token keyword keyword-in\">in</span> <em>arrayName</em><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"><i>// code block to be executed</i></span>\n<span class=\"token punctuation\">}</span>\n</code>"
        },
        {
          "text": "string[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; foreach (string i in cars) { Console.WriteLine(i); }",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> cars <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Volvo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"BMW\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mazda\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-foreach\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> i <span class=\"token keyword keyword-in\">in</span> cars<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_foreach_loop.php"
      }
    },
    {
      "title": "C# Break and Continue",
      "code": [
        {
          "text": "for (int i = 0; i < 10; i++) { if (i == 4) { break; } Console.WriteLine(i); }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-break\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<div aria-hidden=\"true\" data-range=\"5\" class=\" line-highlight\" data-start=\"5\" style=\"top: 96px; width: 639px;\"> \n</div></code>"
        },
        {
          "text": "for (int i = 0; i < 10; i++) { if (i == 4) { continue; } Console.WriteLine(i); }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-continue\">continue</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<div aria-hidden=\"true\" data-range=\"5\" class=\" line-highlight\" data-start=\"5\" style=\"top: 96px; width: 639px;\"> \n</div></code>"
        },
        {
          "text": "int i = 0; while (i < 10) { Console.WriteLine(i); i++; if (i == 4) { break; } }",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-while\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-break\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<div aria-hidden=\"true\" data-range=\"8\" class=\" line-highlight\" data-start=\"8\" style=\"top: 168px; width: 639px;\"> \n</div></code>"
        },
        {
          "text": "int i = 0; while (i < 10) { if (i == 4) { i++; continue; } Console.WriteLine(i); i++; }",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-while\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-continue\">continue</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<div aria-hidden=\"true\" data-range=\"7\" class=\" line-highlight\" data-start=\"7\" style=\"top: 144px; width: 639px;\"> \n</div></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_break.php"
      }
    },
    {
      "title": "C# Arrays",
      "code": [
        {
          "text": "string[] cars;",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> cars<span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "string[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> cars <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Volvo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"BMW\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mazda\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "int[] myNum = {10, 20, 30, 40};",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> myNum <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "string[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; Console.WriteLine(cars[0]); // Outputs Volvo",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> cars <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Volvo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"BMW\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mazda\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>cars<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Outputs Volvo</span>\n</code>"
        },
        {
          "text": "cars[0] = \"Opel\";",
          "html": "<code class=\"language-csharp\">cars<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Opel\"</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "string[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; cars[0] = \"Opel\"; Console.WriteLine(cars[0]); // Now outputs Opel instead of Volvo",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> cars <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Volvo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"BMW\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mazda\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ncars<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Opel\"</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>cars<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Now outputs Opel instead of Volvo</span>\n</code>"
        },
        {
          "text": "// Create an array of four elements, and add values later string[] cars = new string[4]; // Create an array of four elements and add values right away string[] cars = new string[4] {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; // Create an array of four elements without specifying the size string[] cars = new string[] {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; // Create an array of four elements, omitting the new keyword, and without specifying the size string[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};",
          "html": "<code class=\"language-csharp\"><span class=\"token comment\">// Create an array of four elements, and add values later</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> cars <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword keyword-string\">string</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create an array of four elements and add values right away </span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> cars <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword keyword-string\">string</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Volvo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"BMW\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mazda\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create an array of four elements without specifying the size </span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> cars <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Volvo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"BMW\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mazda\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create an array of four elements, omitting the new keyword, and without specifying the size</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> cars <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Volvo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"BMW\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mazda\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "// Declare an array string[] cars; // Add values, using new cars = new string[] {\"Volvo\", \"BMW\", \"Ford\"};\n// Add values without using new (this will cause an error) cars = {\"Volvo\", \"BMW\", \"Ford\"};",
          "html": "<code class=\"language-csharp\"><span class=\"token comment\">// Declare an array</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> cars<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Add values, using new</span>\ncars <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Volvo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"BMW\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"/><div style=\"background-color:#ffdddd!important;color:grey!important;margin-bottom:-16px\"><span class=\"token comment\">// Add values without using new (this will cause an error)</span>\ncars <span class=\"token operator\"><span style=\"color:grey!important\">=</span></span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Volvo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"BMW\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></div><span class=\"token punctuation\"/>\n</code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_arrays.php"
      }
    },
    {
      "title": "C# Loop Through Arrays",
      "code": [
        {
          "text": "string[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; for (int i = 0; i < cars.Length; i++) { Console.WriteLine(cars[i]); }",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> cars <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Volvo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"BMW\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mazda\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> cars<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>cars<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<div aria-hidden=\"true\" data-range=\"2\" class=\" line-highlight\" data-start=\"2\" style=\"top: 24px; width: 639px;\"> \n</div></code>"
        },
        {
          "text": "foreach (type variableName in arrayName) { // code block to be executed }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-foreach\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><em>type</em></span> <em>variableName</em> <span class=\"token keyword keyword-in\">in</span> <em>arrayName</em><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"><i>// code block to be executed</i></span>\n<span class=\"token punctuation\">}</span>\n</code>"
        },
        {
          "text": "string[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; foreach (string i in cars) { Console.WriteLine(i); }",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> cars <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Volvo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"BMW\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mazda\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-foreach\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> i <span class=\"token keyword keyword-in\">in</span> cars<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<div aria-hidden=\"true\" data-range=\"2\" class=\" line-highlight\" data-start=\"2\" style=\"top: 24px; width: 639px;\"> \n</div></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_arrays_loop.php"
      }
    },
    {
      "title": "C# Sort Arrays",
      "code": [
        {
          "text": "// Sort a string string[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; Array.Sort(cars); foreach (string i in cars) { Console.WriteLine(i); }",
          "html": "<code class=\"language-csharp\"><span class=\"token comment\">// Sort a string</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> cars <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Volvo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"BMW\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mazda\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nArray<span class=\"token punctuation\">.</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span>cars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-foreach\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> i <span class=\"token keyword keyword-in\">in</span> cars<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<div aria-hidden=\"true\" data-range=\"3\" class=\" line-highlight\" data-start=\"3\" style=\"top: 48px; width: 639px;\"> \n</div></code>"
        },
        {
          "text": "// Sort an int int[] myNumbers = {5, 1, 8, 9}; Array.Sort(myNumbers); foreach (int i in myNumbers) { Console.WriteLine(i); }",
          "html": "<code class=\"language-csharp\"><span class=\"token comment\">// Sort an int</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> myNumbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nArray<span class=\"token punctuation\">.</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span>myNumbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-foreach\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> i <span class=\"token keyword keyword-in\">in</span> myNumbers<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><div aria-hidden=\"true\" data-range=\"3\" class=\" line-highlight\" data-start=\"3\" style=\"top: 48px; width: 639px;\"> \n</div></code>"
        },
        {
          "text": "using System; using System.Linq; namespace MyApplication { class Program { static void Main(string[] args) { int[] myNumbers = {5, 1, 8, 9}; Console.WriteLine(myNumbers.Max()); // returns the largest value Console.WriteLine(myNumbers.Min()); // returns the smallest value Console.WriteLine(myNumbers.Sum()); // returns the sum of elements } } }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-using\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-using\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword keyword-namespace\">namespace</span> <span class=\"token namespace\">MyApplication</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> myNumbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myNumbers<span class=\"token punctuation\">.</span><span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// returns the largest value</span>\n      Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myNumbers<span class=\"token punctuation\">.</span><span class=\"token function\">Min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// returns the smallest value</span>\n      Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myNumbers<span class=\"token punctuation\">.</span><span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// returns the sum of elements</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<div aria-hidden=\"true\" data-range=\"2\" class=\" line-highlight\" data-start=\"2\" style=\"top: 24px; width: 674px;\"> \n</div><div aria-hidden=\"true\" data-range=\"11\" class=\" line-highlight\" data-start=\"11\" style=\"top: 240px; width: 674px;\"> \n</div><div aria-hidden=\"true\" data-range=\"12\" class=\" line-highlight\" data-start=\"12\" style=\"top: 264px; width: 674px;\"> \n</div><div aria-hidden=\"true\" data-range=\"13\" class=\" line-highlight\" data-start=\"13\" style=\"top: 288px; width: 674px;\"> \n</div></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_arrays_sort.php"
      }
    },
    {
      "title": "C# Multidimensional Arrays",
      "code": [
        {
          "text": "int[,] numbers = { {1, 4, 2}, {3, 6, 8} };",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span></span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code>"
        },
        {
          "text": "int[,] numbers = { {1, 4, 2}, {3, 6, 8} }; Console.WriteLine(numbers[0, 2]); // Outputs 2",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span></span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Outputs 2</span></code>"
        },
        {
          "text": "int[,] numbers = { {1, 4, 2}, {3, 6, 8} }; numbers[0, 0] = 5; // Change value to 5 Console.WriteLine(numbers[0, 0]); // Outputs 5 instead of 1",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span></span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nnumbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Change value to 5</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Outputs 5 instead of 1</span></code>"
        },
        {
          "text": "int[,] numbers = { {1, 4, 2}, {3, 6, 8} }; foreach (int i in numbers) { Console.WriteLine(i); }",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span></span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword keyword-foreach\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> i <span class=\"token keyword keyword-in\">in</span> numbers<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> </code>"
        },
        {
          "text": "int[,] numbers = { {1, 4, 2}, {3, 6, 8} }; for (int i = 0; i < numbers.GetLength(0); i++) { for (int j = 0; j < numbers.GetLength(1); j++) { Console.WriteLine(numbers[i, j]); } }",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span></span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">GetLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span> \n  <span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">GetLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span> \n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>  </code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_arrays_multi.php"
      }
    },
    {
      "title": "C# Methods",
      "code": [
        {
          "text": "class Program { static void MyMethod() { // code to be executed } }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// code to be executed</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><div aria-hidden=\"true\" data-range=\"3\" class=\" line-highlight\" data-start=\"3\" style=\"top: 48px; width: 639px;\"> \n</div></code>"
        },
        {
          "text": "static void MyMethod() { Console.WriteLine(\"I just got executed!\"); } static void Main(string[] args) { MyMethod(); } // Outputs \"I just got executed!\"",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I just got executed!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Outputs \"I just got executed!\"</span>\n<div aria-hidden=\"true\" data-range=\"8\" class=\" line-highlight\" data-start=\"8\" style=\"top: 168px; width: 639px;\"> \n</div></code>"
        },
        {
          "text": "static void MyMethod() { Console.WriteLine(\"I just got executed!\"); } static void Main(string[] args) { MyMethod(); MyMethod(); MyMethod(); } // I just got executed! // I just got executed! // I just got executed!",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I just got executed!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// I just got executed!</span>\n<span class=\"token comment\">// I just got executed!</span>\n<span class=\"token comment\">// I just got executed!</span>\n<div aria-hidden=\"true\" data-range=\"8\" class=\" line-highlight\" data-start=\"8\" style=\"top: 168px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"9\" class=\" line-highlight\" data-start=\"9\" style=\"top: 192px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"10\" class=\" line-highlight\" data-start=\"10\" style=\"top: 216px; width: 639px;\"> \n</div></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_methods.php"
      }
    },
    {
      "title": "C# Method Parameters",
      "code": [
        {
          "text": "static void MyMethod(string fname) { Console.WriteLine(fname + \" Refsnes\"); } static void Main(string[] args) { MyMethod(\"Liam\"); MyMethod(\"Jenny\"); MyMethod(\"Anja\"); } // Liam Refsnes // Jenny Refsnes // Anja Refsnes",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> fname<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>fname <span class=\"token operator\">+</span> <span class=\"token string\">\" Refsnes\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Liam\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jenny\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Anja\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Liam Refsnes</span>\n<span class=\"token comment\">// Jenny Refsnes</span>\n<span class=\"token comment\">// Anja Refsnes</span>\n<div aria-hidden=\"true\" data-range=\"1\" class=\" line-highlight\" data-start=\"1\" style=\"top: 0px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"3\" class=\" line-highlight\" data-start=\"3\" style=\"top: 48px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"10\" class=\" line-highlight\" data-start=\"10\" style=\"top: 216px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"8\" class=\" line-highlight\" data-start=\"8\" style=\"top: 168px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"9\" class=\" line-highlight\" data-start=\"9\" style=\"top: 192px; width: 639px;\"> \n</div></code>"
        },
        {
          "text": "static void MyMethod(string fname, int age) { Console.WriteLine(fname + \" is \" + age); } static void Main(string[] args) { MyMethod(\"Liam\", 5); MyMethod(\"Jenny\", 8); MyMethod(\"Anja\", 31); } // Liam is 5 // Jenny is 8 // Anja is 31",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> fname<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> age<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>fname <span class=\"token operator\">+</span> <span class=\"token string\">\" is \"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Liam\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jenny\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Anja\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Liam is 5</span>\n<span class=\"token comment\">// Jenny is 8</span>\n<span class=\"token comment\">// Anja is 31</span>\n<div aria-hidden=\"true\" data-range=\"1\" class=\" line-highlight\" data-start=\"1\" style=\"top: 0px; width: 639px;\"> \n</div></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_method_parameters.php"
      }
    },
    {
      "title": "C# Default Parameter Value",
      "code": [
        {
          "text": "static void MyMethod(string country = \"Norway\") { Console.WriteLine(country); } static void Main(string[] args) { MyMethod(\"Sweden\"); MyMethod(\"India\"); MyMethod(); MyMethod(\"USA\"); } // Sweden // India // Norway // USA",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> country <span class=\"token operator\">=</span> <span class=\"token string\">\"Norway\"</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>country<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sweden\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"India\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"USA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Sweden</span>\n<span class=\"token comment\">// India</span>\n<span class=\"token comment\">// Norway</span>\n<span class=\"token comment\">// USA</span>\n<div aria-hidden=\"true\" data-range=\"1\" class=\" line-highlight\" data-start=\"1\" style=\"top: 0px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"10\" class=\" line-highlight\" data-start=\"10\" style=\"top: 216px; width: 639px;\"> \n</div></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_method_parameters_default.php"
      }
    },
    {
      "title": "C# Return Values",
      "code": [
        {
          "text": "static int MyMethod(int x) { return 5 + x; } static void Main(string[] args) { Console.WriteLine(MyMethod(3)); } // Outputs 8 (5 + 3)",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-int\">int</span></span> <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> x<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-return\">return</span> <span class=\"token number\">5</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Outputs 8 (5 + 3)</span>\n<div aria-hidden=\"true\" data-range=\"1\" class=\" line-highlight\" data-start=\"1\" style=\"top: 0px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"3\" class=\" line-highlight\" data-start=\"3\" style=\"top: 48px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"8\" class=\" line-highlight\" data-start=\"8\" style=\"top: 168px; width: 639px;\"> \n</div></code>"
        },
        {
          "text": "static int MyMethod(int x, int y) { return x + y; } static void Main(string[] args) { Console.WriteLine(MyMethod(5, 3)); } // Outputs 8 (5 + 3)",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-int\">int</span></span> <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> y<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-return\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Outputs 8 (5 + 3)</span>\n<div aria-hidden=\"true\" data-range=\"1\" class=\" line-highlight\" data-start=\"1\" style=\"top: 0px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"3\" class=\" line-highlight\" data-start=\"3\" style=\"top: 48px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"8\" class=\" line-highlight\" data-start=\"8\" style=\"top: 168px; width: 639px;\"> \n</div></code>"
        },
        {
          "text": "static int MyMethod(int x, int y) { return x + y; } static void Main(string[] args) { int z = MyMethod(5, 3); Console.WriteLine(z); } // Outputs 8 (5 + 3)",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-int\">int</span></span> <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> y<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-return\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> z <span class=\"token operator\">=</span> <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Outputs 8 (5 + 3)</span>\n<div aria-hidden=\"true\" data-range=\"8\" class=\" line-highlight\" data-start=\"8\" style=\"top: 168px; width: 639px;\"> \n</div></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_method_parameters_return.php"
      }
    },
    {
      "title": "C# Named Arguments",
      "code": [
        {
          "text": "static void MyMethod(string child1, string child2, string child3) { Console.WriteLine(\"The youngest child is: \" + child3); } static void Main(string[] args) { MyMethod(child3: \"John\", child1: \"Liam\", child2: \"Liam\"); } // The youngest child is: John",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> child1<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> child2<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> child3<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The youngest child is: \"</span> <span class=\"token operator\">+</span> child3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token named-parameter punctuation\">child3</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">child1</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Liam\"</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">child2</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Liam\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// The youngest child is: John</span>\n<div aria-hidden=\"true\" data-range=\"1\" class=\" line-highlight\" data-start=\"1\" style=\"top: 0px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"8\" class=\" line-highlight\" data-start=\"8\" style=\"top: 168px; width: 639px;\"> \n</div></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_method_parameters_named_args.php"
      }
    },
    {
      "title": "C# Method Overloading",
      "code": [
        {
          "text": "int MyMethod(int x) float MyMethod(float x) double MyMethod(double x, double y)",
          "html": "<code class=\"language-csharp\"><span class=\"token return-type class-name\"><span class=\"token keyword keyword-int\">int</span></span> <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> x<span class=\"token punctuation\">)</span>\n<span class=\"token return-type class-name\"><span class=\"token keyword keyword-float\">float</span></span> <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-float\">float</span></span> x<span class=\"token punctuation\">)</span>\n<span class=\"token return-type class-name\"><span class=\"token keyword keyword-double\">double</span></span> <span class=\"token function\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-double\">double</span></span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword keyword-double\">double</span></span> y<span class=\"token punctuation\">)</span></code>"
        },
        {
          "text": "static int PlusMethodInt(int x, int y) { return x + y; } static double PlusMethodDouble(double x, double y) { return x + y; } static void Main(string[] args) { int myNum1 = PlusMethodInt(8, 5); double myNum2 = PlusMethodDouble(4.3, 6.26); Console.WriteLine(\"Int: \" + myNum1); Console.WriteLine(\"Double: \" + myNum2); }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-int\">int</span></span> <span class=\"token function\">PlusMethodInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-return\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-double\">double</span></span> <span class=\"token function\">PlusMethodDouble</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-double\">double</span></span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword keyword-double\">double</span></span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-return\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> myNum1 <span class=\"token operator\">=</span> <span class=\"token function\">PlusMethodInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\"><span class=\"token keyword keyword-double\">double</span></span> myNum2 <span class=\"token operator\">=</span> <span class=\"token function\">PlusMethodDouble</span><span class=\"token punctuation\">(</span><span class=\"token number\">4.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6.26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Int: \"</span> <span class=\"token operator\">+</span> myNum1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Double: \"</span> <span class=\"token operator\">+</span> myNum2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code>"
        },
        {
          "text": "static int PlusMethod(int x, int y) { return x + y; } static double PlusMethod(double x, double y) { return x + y; } static void Main(string[] args) { int myNum1 = PlusMethod(8, 5); double myNum2 = PlusMethod(4.3, 6.26); Console.WriteLine(\"Int: \" + myNum1); Console.WriteLine(\"Double: \" + myNum2); }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-int\">int</span></span> <span class=\"token function\">PlusMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-return\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-double\">double</span></span> <span class=\"token function\">PlusMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-double\">double</span></span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword keyword-double\">double</span></span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-return\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> myNum1 <span class=\"token operator\">=</span> <span class=\"token function\">PlusMethod</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\"><span class=\"token keyword keyword-double\">double</span></span> myNum2 <span class=\"token operator\">=</span> <span class=\"token function\">PlusMethod</span><span class=\"token punctuation\">(</span><span class=\"token number\">4.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6.26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Int: \"</span> <span class=\"token operator\">+</span> myNum1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Double: \"</span> <span class=\"token operator\">+</span> myNum2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><div aria-hidden=\"true\" data-range=\"1\" class=\" line-highlight\" data-start=\"1\" style=\"top: 0px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"6\" class=\" line-highlight\" data-start=\"6\" style=\"top: 120px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"13\" class=\" line-highlight\" data-start=\"13\" style=\"top: 288px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"14\" class=\" line-highlight\" data-start=\"14\" style=\"top: 312px; width: 639px;\"> \n</div></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_method_overloading.php"
      }
    },
    {
      "title": "C# Classes and Objects",
      "code": [
        {
          "text": "class Car { string color = \"red\"; }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Car</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> color <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code>"
        },
        {
          "text": "class Car { string color = \"red\"; static void Main(string[] args) { Car myObj = new Car(); Console.WriteLine(myObj.color); } }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Car</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> color <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Car</span> <strong>myObj</strong> <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><div aria-hidden=\"true\" data-range=\"7\" class=\" line-highlight\" data-start=\"7\" style=\"top: 144px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"8\" class=\" line-highlight\" data-start=\"8\" style=\"top: 168px; width: 639px;\"> \n</div></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_classes.php"
      }
    },
    {
      "title": "C# Multiple Classes and Objects",
      "code": [
        {
          "text": "class Car { string color = \"red\"; static void Main(string[] args) { Car myObj1 = new Car(); Car myObj2 = new Car(); Console.WriteLine(myObj1.color); Console.WriteLine(myObj2.color); } }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Car</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> color <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Car</span> myObj1 <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Car</span> myObj2 <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myObj1<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myObj2<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><div aria-hidden=\"true\" data-range=\"7\" class=\" line-highlight\" data-start=\"7\" style=\"top: 144px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"8\" class=\" line-highlight\" data-start=\"8\" style=\"top: 168px; width: 639px;\"> \n</div></code>"
        },
        {
          "text": "class Car { public string color = \"red\"; }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Car</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> color <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code>"
        },
        {
          "text": "class Program { static void Main(string[] args) { Car myObj = new Car(); Console.WriteLine(myObj.color); } }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Car</span> myObj <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_classes_multi.php"
      }
    },
    {
      "title": "C# Class Members",
      "code": [
        {
          "text": "// The class class MyClass { // Class members string color = \"red\"; // field int maxSpeed = 200; // field public void fullThrottle() // method { Console.WriteLine(\"The car is going as fast as it can!\"); } }",
          "html": "<code class=\"language-java\"><span class=\"token comment\">// The class</span>\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">MyClass</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Class members</span>\n  string color <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// field</span>\n  <span class=\"token keyword keyword-int\">int</span> maxSpeed <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// field</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-void\">void</span> <span class=\"token function\">fullThrottle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// method</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Console<span class=\"token punctuation\">.</span>WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The car is going as fast as it can!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code>"
        },
        {
          "text": "class Car { string color = \"red\"; int maxSpeed = 200; static void Main(string[] args) { Car myObj = new Car(); Console.WriteLine(myObj.color); Console.WriteLine(myObj.maxSpeed); } }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Car</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> color <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> maxSpeed <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Car</span> <strong>myObj</strong> <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">.</span>maxSpeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><div aria-hidden=\"true\" data-range=\"8\" class=\" line-highlight\" data-start=\"8\" style=\"top: 168px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"9\" class=\" line-highlight\" data-start=\"9\" style=\"top: 192px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"10\" class=\" line-highlight\" data-start=\"10\" style=\"top: 216px; width: 639px;\"> \n</div></code>"
        },
        {
          "text": "class Car { string color; int maxSpeed; static void Main(string[] args) { Car myObj = new Car(); myObj.color = \"red\"; myObj.maxSpeed = 200; Console.WriteLine(myObj.color); Console.WriteLine(myObj.maxSpeed); } }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Car</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> color<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> maxSpeed<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Car</span> <strong>myObj</strong> <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    myObj<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">;</span>\n    myObj<span class=\"token punctuation\">.</span>maxSpeed <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">.</span>maxSpeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><div aria-hidden=\"true\" data-range=\"9\" class=\" line-highlight\" data-start=\"9\" style=\"top: 192px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"10\" class=\" line-highlight\" data-start=\"10\" style=\"top: 216px; width: 639px;\"> \n</div></code>"
        },
        {
          "text": "class Car { string model; string color; int year; static void Main(string[] args) { Car Ford = new Car(); Ford.model = \"Mustang\"; Ford.color = \"red\"; Ford.year = 1969; Car Opel = new Car(); Opel.model = \"Astra\"; Opel.color = \"white\"; Opel.year = 2005; Console.WriteLine(Ford.model); Console.WriteLine(Opel.model); } }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Car</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> model<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> color<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> year<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Car</span> Ford <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Ford<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> <span class=\"token string\">\"Mustang\"</span><span class=\"token punctuation\">;</span>\n    Ford<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">;</span>\n    Ford<span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> <span class=\"token number\">1969</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Car</span> Opel <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Opel<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> <span class=\"token string\">\"Astra\"</span><span class=\"token punctuation\">;</span>\n    Opel<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">;</span>\n    Opel<span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> <span class=\"token number\">2005</span><span class=\"token punctuation\">;</span>\n\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Ford<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Opel<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><div aria-hidden=\"true\" data-range=\"9\" class=\" line-highlight\" data-start=\"9\" style=\"top: 192px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"10\" class=\" line-highlight\" data-start=\"10\" style=\"top: 216px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"11\" class=\" line-highlight\" data-start=\"11\" style=\"top: 240px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"12\" class=\" line-highlight\" data-start=\"12\" style=\"top: 264px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"14\" class=\" line-highlight\" data-start=\"14\" style=\"top: 312px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"15\" class=\" line-highlight\" data-start=\"15\" style=\"top: 336px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"16\" class=\" line-highlight\" data-start=\"16\" style=\"top: 360px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"17\" class=\" line-highlight\" data-start=\"17\" style=\"top: 384px; width: 639px;\"> \n</div></code>"
        },
        {
          "text": "class Car { string color; // field int maxSpeed; // field public void fullThrottle() // method { Console.WriteLine(\"The car is going as fast as it can!\"); } static void Main(string[] args) { Car myObj = new Car(); myObj.fullThrottle(); // Call the method } }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Car</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> color<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// field</span>\n  <span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> maxSpeed<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// field</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">fullThrottle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// method</span>\n  <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The car is going as fast as it can!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Car</span> <strong>myObj</strong> <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    myObj<span class=\"token punctuation\">.</span><span class=\"token function\">fullThrottle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Call the method</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><div aria-hidden=\"true\" data-range=\"5\" class=\" line-highlight\" data-start=\"5\" style=\"top: 96px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"13\" class=\" line-highlight\" data-start=\"13\" style=\"top: 288px; width: 639px;\"> \n</div></code>"
        },
        {
          "text": "class Car { public string model; public string color; public int year; public void fullThrottle() { Console.WriteLine(\"The car is going as fast as it can!\"); } }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Car</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> model<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> color<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> year<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">fullThrottle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The car is going as fast as it can!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code>"
        },
        {
          "text": "class Program { static void Main(string[] args) { Car Ford = new Car(); Ford.model = \"Mustang\"; Ford.color = \"red\"; Ford.year = 1969; Car Opel = new Car(); Opel.model = \"Astra\"; Opel.color = \"white\"; Opel.year = 2005; Console.WriteLine(Ford.model); Console.WriteLine(Opel.model); } }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Car</span> Ford <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Ford<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> <span class=\"token string\">\"Mustang\"</span><span class=\"token punctuation\">;</span>\n    Ford<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">;</span>\n    Ford<span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> <span class=\"token number\">1969</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Car</span> Opel <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Opel<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> <span class=\"token string\">\"Astra\"</span><span class=\"token punctuation\">;</span>\n    Opel<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">;</span>\n    Opel<span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> <span class=\"token number\">2005</span><span class=\"token punctuation\">;</span>\n\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Ford<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Opel<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_class_members.php"
      }
    },
    {
      "title": "C# Constructors",
      "code": [
        {
          "text": "// Create a Car class class Car { public string model; // Create a field // Create a class constructor for the Car class public Car() { model = \"Mustang\"; // Set the initial value for model } static void Main(string[] args) { Car Ford = new Car(); // Create an object of the Car Class (this will call the constructor) Console.WriteLine(Ford.model); // Print the value of model } } // Outputs \"Mustang\"",
          "html": "<code class=\"language-csharp\"><span class=\"token comment\">// Create a Car class</span>\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Car</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> model<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Create a field</span>\n\n  <span class=\"token comment\">// Create a <strong>class constructor</strong> for the Car class</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    model <span class=\"token operator\">=</span> <span class=\"token string\">\"Mustang\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Set the initial value for model</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Car</span> Ford <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Create an object of the Car Class (this will <strong>call the constructor</strong>)</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Ford<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Print the value of model</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Outputs \"Mustang\"</span>\n<div aria-hidden=\"true\" data-range=\"7\" class=\" line-highlight\" data-start=\"7\" style=\"top: 144px; width: 877px;\"> \n</div></code>"
        },
        {
          "text": "class Car { public string model; // Create a class constructor with a parameter public Car(string modelName) { model = modelName; } static void Main(string[] args) { Car Ford = new Car(\"Mustang\"); Console.WriteLine(Ford.model); } } // Outputs \"Mustang\"",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Car</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> model<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Create a class constructor with a parameter</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> modelName<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    model <span class=\"token operator\">=</span> modelName<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Car</span> Ford <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mustang\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Ford<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Outputs \"Mustang\"</span>\n<div aria-hidden=\"true\" data-range=\"6\" class=\" line-highlight\" data-start=\"6\" style=\"top: 120px; width: 639px;\"> \n</div></code>"
        },
        {
          "text": "class Car { public string model; public string color; public int year; // Create a class constructor with multiple parameters public Car(string modelName, string modelColor, int modelYear) { model = modelName; color = modelColor; year = modelYear; } static void Main(string[] args) { Car Ford = new Car(\"Mustang\", \"Red\", 1969); Console.WriteLine(Ford.color + \" \" + Ford.year + \" \" + Ford.model); } } // Outputs Red 1969 Mustang",
          "html": "<code class=\"language-java\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Car</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> string model<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword keyword-public\">public</span> string color<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-int\">int</span> year<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Create a class constructor with multiple parameters</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span>string modelName<span class=\"token punctuation\">,</span> string modelColor<span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-int\">int</span> modelYear<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    model <span class=\"token operator\">=</span> modelName<span class=\"token punctuation\">;</span>\n    color <span class=\"token operator\">=</span> modelColor<span class=\"token punctuation\">;</span>\n    year <span class=\"token operator\">=</span> modelYear<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token keyword keyword-void\">void</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Car</span> <span class=\"token class-name\">Ford</span> <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mustang\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Red\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1969</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Console<span class=\"token punctuation\">.</span>WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ford</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Ford</span><span class=\"token punctuation\">.</span>year <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Ford</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// Outputs Red 1969 Mustang</span>\n<div aria-hidden=\"true\" data-range=\"8\" class=\" line-highlight\" data-start=\"8\" style=\"top: 168px; width: 657px;\"> \n</div></code>"
        },
        {
          "text": "class Program { static void Main(string[] args) { Car Ford = new Car(); Ford.model = \"Mustang\"; Ford.color = \"red\"; Ford.year = 1969; Car Opel = new Car(); Opel.model = \"Astra\"; Opel.color = \"white\"; Opel.year = 2005; Console.WriteLine(Ford.model); Console.WriteLine(Opel.model); } }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Car</span> Ford <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Ford<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> <span class=\"token string\">\"Mustang\"</span><span class=\"token punctuation\">;</span>\n    Ford<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">;</span>\n    Ford<span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> <span class=\"token number\">1969</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Car</span> Opel <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Opel<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> <span class=\"token string\">\"Astra\"</span><span class=\"token punctuation\">;</span>\n    Opel<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">;</span>\n    Opel<span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> <span class=\"token number\">2005</span><span class=\"token punctuation\">;</span>\n\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Ford<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Opel<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code>"
        },
        {
          "text": "class Program { static void Main(string[] args) { Car Ford = new Car(\"Mustang\", \"Red\", 1969); Car Opel = new Car(\"Astra\", \"White\", 2005); Console.WriteLine(Ford.model); Console.WriteLine(Opel.model); } }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Car</span> Ford <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mustang\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Red\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1969</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Car</span> Opel <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Astra\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"White\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2005</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Ford<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Opel<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_constructors.php"
      }
    },
    {
      "title": "C# Access Modifiers",
      "code": [
        {
          "text": "public string color;",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-public\"><strong>public</strong></span> <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> color<span class=\"token punctuation\">;</span>\n</code>"
        },
        {
          "text": "class Car { private string model = \"Mustang\"; static void Main(string[] args) { Car myObj = new Car(); Console.WriteLine(myObj.model); } }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Car</span>\n</code>{<code class=\"language-csharp\">\n  <span class=\"token keyword keyword-private\">private</span> <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> model <span class=\"token operator\">=</span> <span class=\"token string\">\"Mustang\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n  </code>{<code class=\"language-csharp\">\n    <span class=\"token class-name\">Car</span> myObj <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  </code>}<code class=\"language-csharp\">\n</code>}"
        },
        {
          "text": "class Car { private string model = \"Mustang\"; } class Program { static void Main(string[] args) { Car myObj = new Car(); Console.WriteLine(myObj.model); } }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Car</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-private\">private</span> <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> model <span class=\"token operator\">=</span> <span class=\"token string\">\"Mustang\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Car</span> myObj <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<div aria-hidden=\"true\" data-range=\"3\" class=\" line-highlight\" data-start=\"3\" style=\"top: 48px; width: 639px;\"> \n</div></code>"
        },
        {
          "text": "class Car { public string model = \"Mustang\"; } class Program { static void Main(string[] args) { Car myObj = new Car(); Console.WriteLine(myObj.model); } }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Car</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> model <span class=\"token operator\">=</span> <span class=\"token string\">\"Mustang\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Car</span> myObj <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<div aria-hidden=\"true\" data-range=\"3\" class=\" line-highlight\" data-start=\"3\" style=\"top: 48px; width: 639px;\"> \n</div></code>"
        },
        {
          "text": "class Car { string model; // private string year; // private }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Car</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> model<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// private</span>\n  <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> year<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// private</span>\n<span class=\"token punctuation\">}</span>\n<div aria-hidden=\"true\" data-range=\"3\" class=\" line-highlight\" data-start=\"3\" style=\"top: 48px; width: 639px;\"> \n</div></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_access_modifiers.php"
      }
    },
    {
      "title": "C# Properties (Get and Set)",
      "code": [
        {
          "text": "class Person { private string name; // field public string Name // property { get { return name; } // get method set { name = value; } // set method } }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-private\">private</span> <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// field</span>\n\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-string\">string</span> Name   <span class=\"token comment\">// property</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-get\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword keyword-return\">return</span> name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>   <span class=\"token comment\">// get method</span>\n    <span class=\"token keyword keyword-set\">set</span> <span class=\"token punctuation\">{</span> name <span class=\"token operator\">=</span> <span class=\"token keyword keyword-value\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>  <span class=\"token comment\">// set method</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><div aria-hidden=\"true\" data-range=\"5\" class=\" line-highlight\" data-start=\"5\" style=\"top: 96px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"7\" class=\" line-highlight\" data-start=\"7\" style=\"top: 144px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"8\" class=\" line-highlight\" data-start=\"8\" style=\"top: 168px; width: 639px;\"> \n</div></code>"
        },
        {
          "text": "class Person { private string name; // field public string Name // property { get { return name; } set { name = value; } } } class Program { static void Main(string[] args) { Person myObj = new Person(); myObj.Name = \"Liam\"; Console.WriteLine(myObj.Name); } }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-private\">private</span> <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// field</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-string\">string</span> Name   <span class=\"token comment\">// property</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-get\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword keyword-return\">return</span> name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword keyword-set\">set</span> <span class=\"token punctuation\">{</span> name <span class=\"token operator\">=</span> <span class=\"token keyword keyword-value\">value</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Person</span> myObj <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    myObj<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Liam\"</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<div aria-hidden=\"true\" data-range=\"3\" class=\" line-highlight\" data-start=\"3\" style=\"top: 48px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"4\" class=\" line-highlight\" data-start=\"4\" style=\"top: 72px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"6\" class=\" line-highlight\" data-start=\"6\" style=\"top: 120px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"7\" class=\" line-highlight\" data-start=\"7\" style=\"top: 144px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"16\" class=\" line-highlight\" data-start=\"16\" style=\"top: 360px; width: 639px;\"> \n</div></code>"
        },
        {
          "text": "class Person { public string Name // property { get; set; } } class Program { static void Main(string[] args) { Person myObj = new Person(); myObj.Name = \"Liam\"; Console.WriteLine(myObj.Name); } }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-string\">string</span> Name  <span class=\"token comment\">// property</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token keyword keyword-get\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword keyword-set\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Person</span> myObj <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    myObj<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Liam\"</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<div aria-hidden=\"true\" data-range=\"3\" class=\" line-highlight\" data-start=\"3\" style=\"top: 48px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"4\" class=\" line-highlight\" data-start=\"4\" style=\"top: 72px; width: 639px;\"> \n</div></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_properties.php"
      }
    },
    {
      "title": "C# Inheritance",
      "code": [
        {
          "text": "class Vehicle // base class (parent) { public string brand = \"Ford\"; // Vehicle field public void honk() // Vehicle method { Console.WriteLine(\"Tuut, tuut!\"); } } class Car : Vehicle // derived class (child) { public string modelName = \"Mustang\"; // Car field } class Program { static void Main(string[] args) { // Create a myCar object Car myCar = new Car(); // Call the honk() method (From the Vehicle class) on the myCar object myCar.honk(); // Display the value of the brand field (from the Vehicle class) and the value of the modelName from the Car class Console.WriteLine(myCar.brand + \" \" + myCar.modelName); } }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Vehicle</span>  <span class=\"token comment\">// base class (parent) </span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> brand <span class=\"token operator\">=</span> <span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Vehicle field</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">honk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>             <span class=\"token comment\">// Vehicle method </span>\n  <span class=\"token punctuation\">{</span>                    \n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tuut, tuut!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Vehicle</span></span>  <span class=\"token comment\">// derived class (child)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> modelName <span class=\"token operator\">=</span> <span class=\"token string\">\"Mustang\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Car field</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Create a myCar object</span>\n    <span class=\"token class-name\">Car</span> myCar <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Call the honk() method (From the Vehicle class) on the myCar object</span>\n    myCar<span class=\"token punctuation\">.</span><span class=\"token function\">honk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Display the value of the brand field (from the Vehicle class) and the value of the modelName from the Car class</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myCar<span class=\"token punctuation\">.</span>brand <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> myCar<span class=\"token punctuation\">.</span>modelName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<div aria-hidden=\"true\" data-range=\"10\" class=\" line-highlight\" data-start=\"10\" style=\"top: 216px; width: 1070px;\"> \n</div></code>"
        },
        {
          "text": "sealed class Vehicle { ... } class Car : Vehicle { ... }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-sealed\">sealed</span> <span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Vehicle</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Vehicle</span></span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n</code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_inheritance.php"
      }
    },
    {
      "title": "C# Polymorphism",
      "code": [
        {
          "text": "class Animal // Base class (parent) { public void animalSound() { Console.WriteLine(\"The animal makes a sound\"); } } class Pig : Animal // Derived class (child) { public void animalSound() { Console.WriteLine(\"The pig says: wee wee\"); } } class Dog : Animal // Derived class (child) { public void animalSound() { Console.WriteLine(\"The dog says: bow wow\"); } }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Animal</span>  <span class=\"token comment\">// Base class (parent) </span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The animal makes a sound\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Pig</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Animal</span></span>  <span class=\"token comment\">// Derived class (child) </span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The pig says: wee wee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Animal</span></span>  <span class=\"token comment\">// Derived class (child) </span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The dog says: bow wow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><div aria-hidden=\"true\" data-range=\"3\" class=\" line-highlight\" data-start=\"3\" style=\"top: 48px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"11\" class=\" line-highlight\" data-start=\"11\" style=\"top: 240px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"19\" class=\" line-highlight\" data-start=\"19\" style=\"top: 432px; width: 639px;\"> \n</div></code>"
        },
        {
          "text": "class Animal // Base class (parent) { public void animalSound() { Console.WriteLine(\"The animal makes a sound\"); } } class Pig : Animal // Derived class (child) { public void animalSound() { Console.WriteLine(\"The pig says: wee wee\"); } } class Dog : Animal // Derived class (child) { public void animalSound() { Console.WriteLine(\"The dog says: bow wow\"); } } class Program { static void Main(string[] args) { Animal myAnimal = new Animal(); // Create a Animal object Animal myPig = new Pig(); // Create a Pig object Animal myDog = new Dog(); // Create a Dog object myAnimal.animalSound(); myPig.animalSound(); myDog.animalSound(); } }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Animal</span>  <span class=\"token comment\">// Base class (parent) </span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The animal makes a sound\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Pig</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Animal</span></span>  <span class=\"token comment\">// Derived class (child) </span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The pig says: wee wee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Animal</span></span>  <span class=\"token comment\">// Derived class (child) </span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The dog says: bow wow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Animal</span> myAnimal <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Create a Animal object</span>\n    <span class=\"token class-name\">Animal</span> myPig <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Pig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Create a Pig object</span>\n    <span class=\"token class-name\">Animal</span> myDog <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Create a Dog object</span>\n\n    myAnimal<span class=\"token punctuation\">.</span><span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    myPig<span class=\"token punctuation\">.</span><span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    myDog<span class=\"token punctuation\">.</span><span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><div aria-hidden=\"true\" data-range=\"3\" class=\" line-highlight\" data-start=\"3\" style=\"top: 48px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"11\" class=\" line-highlight\" data-start=\"11\" style=\"top: 240px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"19\" class=\" line-highlight\" data-start=\"19\" style=\"top: 432px; width: 639px;\"> \n</div></code>"
        },
        {
          "text": "class Animal // Base class (parent) { public virtual void animalSound() { Console.WriteLine(\"The animal makes a sound\"); } } class Pig : Animal // Derived class (child) { public override void animalSound() { Console.WriteLine(\"The pig says: wee wee\"); } } class Dog : Animal // Derived class (child) { public override void animalSound() { Console.WriteLine(\"The dog says: bow wow\"); } } class Program { static void Main(string[] args) { Animal myAnimal = new Animal(); // Create a Animal object Animal myPig = new Pig(); // Create a Pig object Animal myDog = new Dog(); // Create a Dog object myAnimal.animalSound(); myPig.animalSound(); myDog.animalSound(); } }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Animal</span>  <span class=\"token comment\">// Base class (parent) </span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-virtual\"><strong>virtual</strong></span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The animal makes a sound\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Pig</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Animal</span></span>  <span class=\"token comment\">// Derived class (child) </span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-override\"><strong>override</strong></span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The pig says: wee wee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Animal</span></span>  <span class=\"token comment\">// Derived class (child) </span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-override\"><strong>override</strong></span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The dog says: bow wow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Animal</span> myAnimal <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Create a Animal object</span>\n    <span class=\"token class-name\">Animal</span> myPig <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Pig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Create a Pig object</span>\n    <span class=\"token class-name\">Animal</span> myDog <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Create a Dog object</span>\n\n    myAnimal<span class=\"token punctuation\">.</span><span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    myPig<span class=\"token punctuation\">.</span><span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    myDog<span class=\"token punctuation\">.</span><span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><div aria-hidden=\"true\" data-range=\"3\" class=\" line-highlight\" data-start=\"3\" style=\"top: 48px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"11\" class=\" line-highlight\" data-start=\"11\" style=\"top: 240px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"19\" class=\" line-highlight\" data-start=\"19\" style=\"top: 432px; width: 639px;\"> \n</div></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_polymorphism.php"
      }
    },
    {
      "title": "C# Abstraction",
      "code": [
        {
          "text": "abstract class Animal { public abstract void animalSound(); public void sleep() { Console.WriteLine(\"Zzz\"); } }",
          "html": "<code class=\"language-java\"><span class=\"token keyword keyword-abstract\">abstract</span> <span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Animal</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-abstract\">abstract</span> <span class=\"token keyword keyword-void\">void</span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-void\">void</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Console<span class=\"token punctuation\">.</span>WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Zzz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<div aria-hidden=\"true\" data-range=\"1\" class=\" line-highlight\" data-start=\"1\" style=\"top: 0px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"2\" class=\" line-highlight\" data-start=\"2\" style=\"top: 24px; width: 639px;\"> \n</div></code>"
        },
        {
          "text": "Animal myObj = new Animal(); // Will generate an error (Cannot create an instance of the abstract class or interface 'Animal')",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\">Animal</span> myObj <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Will generate an error (Cannot create an instance of the abstract class or interface 'Animal')</span>\n</code>"
        },
        {
          "text": "// Abstract class abstract class Animal { // Abstract method (does not have a body) public abstract void animalSound(); // Regular method public void sleep() { Console.WriteLine(\"Zzz\"); } } // Derived class (inherit from Animal) class Pig : Animal { public override void animalSound() { // The body of animalSound() is provided here Console.WriteLine(\"The pig says: wee wee\"); } } class Program { static void Main(string[] args) { Pig myPig = new Pig(); // Create a Pig object myPig.animalSound(); // Call the abstract method myPig.sleep(); // Call the regular method } }",
          "html": "<code class=\"language-csharp\"><span class=\"token comment\">// Abstract class</span>\n<span class=\"token keyword keyword-abstract\">abstract</span> <span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Animal</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Abstract method (does not have a body)</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-abstract\">abstract</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Regular method</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Zzz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Derived class (inherit from Animal)</span>\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Pig</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Animal</span></span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-override\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The body of animalSound() is provided here</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The pig says: wee wee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Pig</span> myPig <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Pig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Create a Pig object</span>\n    myPig<span class=\"token punctuation\">.</span><span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Call the abstract method</span>\n    myPig<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Call the regular method</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><div aria-hidden=\"true\" data-range=\"2\" class=\" line-highlight\" data-start=\"2\" style=\"top: 24px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"5\" class=\" line-highlight\" data-start=\"5\" style=\"top: 96px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"14\" class=\" line-highlight\" data-start=\"14\" style=\"top: 312px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"16\" class=\" line-highlight\" data-start=\"16\" style=\"top: 360px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"19\" class=\" line-highlight\" data-start=\"19\" style=\"top: 432px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"28\" class=\" line-highlight\" data-start=\"28\" style=\"top: 648px; width: 639px;\"> \n</div></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_abstract.php"
      }
    },
    {
      "title": "C# Interface",
      "code": [
        {
          "text": "// interface interface Animal { void animalSound(); // interface method (does not have a body) void run(); // interface method (does not have a body) }",
          "html": "<code class=\"language-java\"><span class=\"token comment\">// interface</span>\n<span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\">Animal</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-void\">void</span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// interface method (does not have a body)</span>\n  <span class=\"token keyword keyword-void\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// interface method (does not have a body)</span>\n<span class=\"token punctuation\">}</span>\n<div aria-hidden=\"true\" data-range=\"2\" class=\" line-highlight\" data-start=\"2\" style=\"top: 24px; width: 639px;\"> \n</div></code>"
        },
        {
          "text": "// Interface interface IAnimal { void animalSound(); // interface method (does not have a body) } // Pig \"implements\" the IAnimal interface class Pig : IAnimal { public void animalSound() { // The body of animalSound() is provided here Console.WriteLine(\"The pig says: wee wee\"); } } class Program { static void Main(string[] args) { Pig myPig = new Pig(); // Create a Pig object myPig.animalSound(); } }",
          "html": "<code class=\"language-java\"><span class=\"token comment\">// Interface</span>\n<span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\">IAnimal</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-void\">void</span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// interface method (does not have a body)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Pig \"implements\" the IAnimal interface</span>\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Pig</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">IAnimal</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-void\">void</span> <span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The body of animalSound() is provided here</span>\n    <span class=\"token class-name\">Console<span class=\"token punctuation\">.</span>WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The pig says: wee wee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token keyword keyword-void\">void</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Pig</span> myPig <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token class-name\">Pig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Create a Pig object</span>\n    myPig<span class=\"token punctuation\">.</span><span class=\"token function\">animalSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><div aria-hidden=\"true\" data-range=\"2\" class=\" line-highlight\" data-start=\"2\" style=\"top: 24px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"8\" class=\" line-highlight\" data-start=\"8\" style=\"top: 168px; width: 639px;\"> \n</div></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_interface.php"
      }
    },
    {
      "title": "C# Multiple Interfaces",
      "code": [
        {
          "text": "interface IFirstInterface { void myMethod(); // interface method } interface ISecondInterface { void myOtherMethod(); // interface method } // Implement multiple interfaces class DemoClass : IFirstInterface, ISecondInterface { public void myMethod() { Console.WriteLine(\"Some text..\"); } public void myOtherMethod() { Console.WriteLine(\"Some other text...\"); } } class Program { static void Main(string[] args) { DemoClass myObj = new DemoClass(); myObj.myMethod(); myObj.myOtherMethod(); } }",
          "html": "<code class=\"language-java\"><span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\">IFirstInterface</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-void\">void</span> <span class=\"token function\">myMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// interface method</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\">ISecondInterface</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-void\">void</span> <span class=\"token function\">myOtherMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// interface method</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Implement multiple interfaces</span>\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">DemoClass</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">IFirstInterface</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ISecondInterface</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-void\">void</span> <span class=\"token function\">myMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Console<span class=\"token punctuation\">.</span>WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Some text..\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-void\">void</span> <span class=\"token function\">myOtherMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Console<span class=\"token punctuation\">.</span>WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Some other text...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token keyword keyword-void\">void</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">DemoClass</span> myObj <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token class-name\">DemoClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    myObj<span class=\"token punctuation\">.</span><span class=\"token function\">myMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    myObj<span class=\"token punctuation\">.</span><span class=\"token function\">myOtherMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><div aria-hidden=\"true\" data-range=\"12\" class=\" line-highlight\" data-start=\"12\" style=\"top: 264px; width: 639px;\"> \n</div></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_interface_multi.php"
      }
    },
    {
      "title": "C# Enum",
      "code": [
        {
          "text": "enum Level { Low, Medium, High }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-enum\">enum</span> <span class=\"token class-name\">Level</span> \n<span class=\"token punctuation\">{</span>\n  Low<span class=\"token punctuation\">,</span>\n  Medium<span class=\"token punctuation\">,</span>\n  High\n<span class=\"token punctuation\">}</span>\n</code>"
        },
        {
          "text": "Level myVar = Level.Medium; Console.WriteLine(myVar);",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\">Level</span> myVar <span class=\"token operator\">=</span> Level<span class=\"token punctuation\">.</span>Medium<span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>"
        },
        {
          "text": "class Program { enum Level { Low, Medium, High } static void Main(string[] args) { Level myVar = Level.Medium; Console.WriteLine(myVar); } }",
          "html": "<code class=\"language-java\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-enum\">enum</span> <span class=\"token class-name\">Level</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Low</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Medium</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">High</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword keyword-static\">static</span> <span class=\"token keyword keyword-void\">void</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Level</span> myVar <span class=\"token operator\">=</span> <span class=\"token class-name\">Level<span class=\"token punctuation\">.</span>Medium</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Console<span class=\"token punctuation\">.</span>WriteLine</span><span class=\"token punctuation\">(</span>myVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code>"
        },
        {
          "text": "enum Months { January, // 0 February, // 1 March, // 2 April, // 3 May, // 4 June, // 5 July // 6 } static void Main(string[] args) { int myNum = (int) Months.April; Console.WriteLine(myNum); }",
          "html": "<code class=\"language-java\"><span class=\"token keyword keyword-enum\">enum</span> <span class=\"token class-name\">Months</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">January</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 0</span>\n  <span class=\"token class-name\">February</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 1</span>\n  <span class=\"token class-name\">March</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">// 2</span>\n  <span class=\"token class-name\">April</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">// 3</span>\n  <span class=\"token class-name\">May</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\">// 4</span>\n  <span class=\"token class-name\">June</span><span class=\"token punctuation\">,</span>       <span class=\"token comment\">// 5</span>\n  <span class=\"token class-name\">July</span>        <span class=\"token comment\">// 6</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-static\">static</span> <span class=\"token keyword keyword-void\">void</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-int\">int</span> myNum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-int\">int</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Months<span class=\"token punctuation\">.</span>April</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Console<span class=\"token punctuation\">.</span>WriteLine</span><span class=\"token punctuation\">(</span>myNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code>"
        },
        {
          "text": "enum Months { January, // 0 February, // 1 March=6, // 6 April, // 7 May, // 8 June, // 9 July // 10 } static void Main(string[] args) { int myNum = (int) Months.April; Console.WriteLine(myNum); }",
          "html": "<code class=\"language-java\"><span class=\"token keyword keyword-enum\">enum</span> <span class=\"token class-name\">Months</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">January</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 0</span>\n  <span class=\"token class-name\">February</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 1</span>\n  <span class=\"token class-name\">March</span><span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 6</span>\n  <span class=\"token class-name\">April</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">// 7</span>\n  <span class=\"token class-name\">May</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\">// 8</span>\n  <span class=\"token class-name\">June</span><span class=\"token punctuation\">,</span>       <span class=\"token comment\">// 9</span>\n  <span class=\"token class-name\">July</span>        <span class=\"token comment\">// 10</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-static\">static</span> <span class=\"token keyword keyword-void\">void</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-int\">int</span> myNum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-int\">int</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Months<span class=\"token punctuation\">.</span>April</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Console<span class=\"token punctuation\">.</span>WriteLine</span><span class=\"token punctuation\">(</span>myNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code>"
        },
        {
          "text": "enum Level { Low, Medium, High } static void Main(string[] args) { Level myVar = Level.Medium; switch(myVar) { case Level.Low: Console.WriteLine(\"Low level\"); break; case Level.Medium: Console.WriteLine(\"Medium level\"); break; case Level.High: Console.WriteLine(\"High level\"); break; } }",
          "html": "<code class=\"language-java\"><span class=\"token keyword keyword-enum\">enum</span> <span class=\"token class-name\">Level</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Low</span><span class=\"token punctuation\">,</span>\n  <span class=\"token class-name\">Medium</span><span class=\"token punctuation\">,</span>\n  <span class=\"token class-name\">High</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-static\">static</span> <span class=\"token keyword keyword-void\">void</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Level</span> myVar <span class=\"token operator\">=</span> <span class=\"token class-name\">Level<span class=\"token punctuation\">.</span>Medium</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword keyword-switch\">switch</span><span class=\"token punctuation\">(</span>myVar<span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-case\">case</span> <span class=\"token class-name\">Level<span class=\"token punctuation\">.</span>Low</span><span class=\"token operator\">:</span>\n      <span class=\"token class-name\">Console<span class=\"token punctuation\">.</span>WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Low level\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword keyword-break\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-case\">case</span> <span class=\"token class-name\">Level<span class=\"token punctuation\">.</span>Medium</span><span class=\"token operator\">:</span>\n       <span class=\"token class-name\">Console<span class=\"token punctuation\">.</span>WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Medium level\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword keyword-break\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-case\">case</span> <span class=\"token class-name\">Level<span class=\"token punctuation\">.</span>High</span><span class=\"token operator\">:</span>\n      <span class=\"token class-name\">Console<span class=\"token punctuation\">.</span>WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"High level\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword keyword-break\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_enums.php"
      }
    },
    {
      "title": "C# Files",
      "code": [
        {
          "text": "using System.IO; // include the System.IO namespace File.SomeFileMethod(); // use the file class with methods",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-using\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// include the System.IO namespace</span>\n\nFile<span class=\"token punctuation\">.</span><span class=\"token function\"><em>SomeFileMethod</em></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// use the file class with methods</span>\n</code>"
        },
        {
          "text": "using System.IO; // include the System.IO namespace string writeText = \"Hello World!\"; // Create a text string File.WriteAllText(\"filename.txt\", writeText); // Create a file and write the content of writeText to it string readText = File.ReadAllText(\"filename.txt\"); // Read the contents of the file Console.WriteLine(readText); // Output the content",
          "html": "<code class=\"language-java\">using <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token constant\">IO</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// include the System.IO namespace</span>\n\nstring writeText <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Create a text string</span>\n<span class=\"token class-name\">File<span class=\"token punctuation\">.</span>WriteAllText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filename.txt\"</span><span class=\"token punctuation\">,</span> writeText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Create a file and write the content of writeText to it</span>\n\nstring readText <span class=\"token operator\">=</span> <span class=\"token class-name\">File<span class=\"token punctuation\">.</span>ReadAllText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filename.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Read the contents of the file</span>\n<span class=\"token class-name\">Console<span class=\"token punctuation\">.</span>WriteLine</span><span class=\"token punctuation\">(</span>readText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Output the content</span>\n</code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_files.php"
      }
    },
    {
      "title": "C# Exceptions - Try..Catch",
      "code": [
        {
          "text": "try { // Block of code to try } catch (Exception e) { // Block of code to handle errors }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-try\">try</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//  </span><em><span class=\"token comment\">Block of code to try</span>\n</em><span class=\"token punctuation\">}</span>\n<span class=\"token keyword keyword-catch\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//  </span><em><span class=\"token comment\">Block of code to handle errors</span>\n</em><span class=\"token punctuation\">}</span></code>"
        },
        {
          "text": "int[] myNumbers = {1, 2, 3}; Console.WriteLine(myNumbers[10]); // error!",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> myNumbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myNumbers<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error!</span></code>"
        },
        {
          "text": "try { int[] myNumbers = {1, 2, 3}; Console.WriteLine(myNumbers[10]); } catch (Exception e) { Console.WriteLine(e.Message); }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-try\">try</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> myNumbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myNumbers<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword keyword-catch\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code>"
        },
        {
          "text": "try { int[] myNumbers = {1, 2, 3}; Console.WriteLine(myNumbers[10]); } catch (Exception e) { Console.WriteLine(\"Something went wrong.\"); }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-try\">try</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> myNumbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myNumbers<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword keyword-catch\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Something went wrong.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code>"
        },
        {
          "text": "try { int[] myNumbers = {1, 2, 3}; Console.WriteLine(myNumbers[10]); } catch (Exception e) { Console.WriteLine(\"Something went wrong.\"); } finally { Console.WriteLine(\"The 'try catch' is finished.\"); }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-try\">try</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> myNumbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>myNumbers<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword keyword-catch\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Something went wrong.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword keyword-finally\">finally</span>\n<span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The 'try catch' is finished.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code>"
        },
        {
          "text": "static void checkAge(int age) { if (age < 18) { throw new ArithmeticException(\"Access denied - You must be at least 18 years old.\"); } else { Console.WriteLine(\"Access granted - You are old enough!\"); } } static void Main(string[] args) { checkAge(15); }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">checkAge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> age<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>age <span class=\"token operator\">&lt;</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-throw\">throw</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">ArithmeticException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access denied - You must be at least 18 years old.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword keyword-else\">else</span>\n  <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access granted - You are old enough!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">checkAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code>"
        },
        {
          "text": "checkAge(20);",
          "html": "<code class=\"language-csharp\"><span class=\"token function\">checkAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_exceptions.php"
      }
    },
    {
      "title": "C# How To Add Two Numbers",
      "code": [
        {
          "text": "int x = 5; int y = 6; int sum = x + y; Console.WriteLine(sum); // Print the sum of x + y",
          "html": "<code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> y <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> sum <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Print the sum of x + y</span>\n</code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_howto_add_two_numbers.php"
      }
    },
    {
      "title": "C# Syllabus",
      "code": [
        {
          "text": "using System; namespace HelloWorld { class Program { static void Main(string[] args) { Console.WriteLine(\"Hello World!\"); } } }",
          "html": "<code class=\"language-csharp\"><span class=\"token keyword keyword-using\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword keyword-namespace\">namespace</span> <span class=\"token namespace\">HelloWorld</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/cs/cs_syllabus.php"
      }
    }
  ]
}