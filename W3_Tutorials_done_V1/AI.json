{
  "language": "AI",
  "tutorials": [
    {
      "title": "Machine Learning in JavaScript",
      "code": [
        {
          "text": "<img id=\"myImage\" src=\"pic1.jpg\" width=\"100%\">\n\n<script>\nconst classifier = ml5.imageClassifier('MobileNet');\nclassifier.classify(document.getElementById(\"myImage\"), gotResult);\nfunction gotResult(error, results)\n{ ... }\n</script>",
          "html": "<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>img<span class=\"attributecolor\" style=\"color:green\"> id<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"myImage\"</span> src<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"pic1.jpg\"</span> width<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"100%\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/><br/>\n<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>script<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"jscolor\" style=\"color:black\"><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> classifier =  ml5.<span class=\"jspropertycolor\" style=\"color:black\">imageClassifier</span>(<span class=\"jsstringcolor\" style=\"color:green\">'MobileNet'</span>);<br/>\nclassifier.<span class=\"jspropertycolor\" style=\"color:black\">classify</span>(document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"myImage\"</span>), gotResult);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> gotResult(error, results)<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>{ .<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/> }<br/>\n</span><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/script<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><br/>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_javascript.asp"
      }
    },
    {
      "title": "Linear Graphs",
      "code": [
        {
          "text": "const xValues = [];\nconst yValues = [];\n\n// Generate values\nfor (let x = 0; x <= 10; x += 1) {\nxValues.push(x);\nyValues.push(x);\n}\n\n// Define Data\nconst data = [{\nx: xValues,\ny: yValues,\nmode: \"lines\"\n}];\n\n// Define Layout\nconst layout = {title: \"y = x\"};\n\n// Display using Plotly\nPlotly.newPlot(\"myPlot\", data, layout);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xValues = [];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yValues = [];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Generate values<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; x &lt;= <span class=\"jsnumbercolor\" style=\"color:#905\">10</span>; x += <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  xValues.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(x);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  yValues.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(x);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Define Data<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> data = [{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  x: xValues,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  y: yValues,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  mode: <span class=\"jsstringcolor\" style=\"color:green\">\"lines\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Define Layout<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> layout = {title: <span class=\"jsstringcolor\" style=\"color:green\">\"y = x\"</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Display using Plotly<br/></span>\nPlotly.<span class=\"jspropertycolor\" style=\"color:black\">newPlot</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"myPlot\"</span>, data, layout);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "let slope = 1.2;\nconst xValues = [];\nconst yValues = [];\n\n// Generate values\nfor (let x = 0; x <= 10; x += 1) {\nxValues.push(x);\nyValues.push(x * slope);\n}\n\n// Define Data\nconst data = [{\nx: xValues,\ny: yValues,\nmode: \"lines\"\n}];\n// Define Layout\nconst layout = {title: \"Slope=\" + slope};\n\n// Display using Plotly\nPlotly.newPlot(\"myPlot\", data, layout);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> slope = <span class=\"jsnumbercolor\" style=\"color:#905\">1.2</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xValues = [];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yValues = [];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Generate values<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; x &lt;= <span class=\"jsnumbercolor\" style=\"color:#905\">10</span>; x += <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  xValues.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(x);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  yValues.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(x * slope);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Define Data<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> data = [{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  x: xValues,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  y: yValues,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  mode: <span class=\"jsstringcolor\" style=\"color:green\">\"lines\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Define Layout<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> layout = {title: <span class=\"jsstringcolor\" style=\"color:green\">\"Slope=\"</span> + slope};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Display using Plotly<br/></span>\nPlotly.<span class=\"jspropertycolor\" style=\"color:black\">newPlot</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"myPlot\"</span>, data, layout);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "let slope = 1.2;\nlet intercept = 7;\nconst xValues = [];\nconst yValues = [];\n\n// Generate values\nfor (let x = 0; x <= 10; x += 1) {\nxValues.push(x);\nyValues.push(x * slope + intercept);\n}\n\n// Define Data\nconst data = [{\nx: xValues,\ny: yValues,\nmode: \"lines\"\n}];\n\n// Define Layout\nconst layout = {title: \"Slope=\" + slope + \" Intercept=\" + intercept};\n\n// Display using Plotly\nPlotly.newPlot(\"myPlot\", data, layout);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> slope = <span class=\"jsnumbercolor\" style=\"color:#905\">1.2</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> intercept = <span class=\"jsnumbercolor\" style=\"color:#905\">7</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xValues = [];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yValues = [];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Generate values<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; x &lt;= <span class=\"jsnumbercolor\" style=\"color:#905\">10</span>; x += <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  xValues.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(x);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  yValues.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(x * slope + intercept);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Define Data<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> data = [{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  x: xValues,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  y: yValues,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  mode: <span class=\"jsstringcolor\" style=\"color:green\">\"lines\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Define Layout<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> layout = {title: <span class=\"jsstringcolor\" style=\"color:green\">\"Slope=\"</span> + slope + <span class=\"jsstringcolor\" style=\"color:green\">\" Intercept=\"</span> + intercept};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Display using Plotly<br/></span>\nPlotly.<span class=\"jspropertycolor\" style=\"color:black\">newPlot</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"myPlot\"</span>, data, layout);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_linear_graphs.asp"
      }
    },
    {
      "title": "Scatter Plots",
      "code": [
        {
          "text": "const xArray = [50,60,70,80,90,100,110,120,130,140,150];\nconst yArray = [7,8,8,9,9,9,10,11,14,14,15];\n\n// Define Data\nconst data = [{\nx: xArray,\ny: yArray,\nmode:\"markers\"\n}];\n\n// Define Layout\nconst layout = {\nxaxis: {range: [40, 160], title: \"Square Meters\"},\nyaxis: {range: [5, 16], title: \"Price in Millions\"},\ntitle: \"House Prices vs. Size\"\n};\n\n// Display with Plotly\nPlotly.newPlot(\"myPlot\", data, layout);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xArray = [<span class=\"jsnumbercolor\" style=\"color:#905\">50</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">60</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">70</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">80</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">90</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">100</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">110</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">120</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">130</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">140</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">150</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yArray = [<span class=\"jsnumbercolor\" style=\"color:#905\">7</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">10</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">11</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">15</span>];<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Define Data<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> data = [{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  x: xArray,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  y: yArray,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  mode:<span class=\"jsstringcolor\" style=\"color:green\">\"markers\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}];<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Define Layout<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> layout = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  xaxis: {range: [<span class=\"jsnumbercolor\" style=\"color:#905\">40</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">160</span>], title: <span class=\"jsstringcolor\" style=\"color:green\">\"Square Meters\"</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  yaxis: {range: [<span class=\"jsnumbercolor\" style=\"color:#905\">5</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">16</span>], title: <span class=\"jsstringcolor\" style=\"color:green\">\"Price in Millions\"</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  title: <span class=\"jsstringcolor\" style=\"color:green\">\"House Prices vs. Size\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Display with Plotly<br/></span>\nPlotly.<span class=\"jspropertycolor\" style=\"color:black\">newPlot</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"myPlot\"</span>, data, layout);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const xArray = [50,60,70,80,90,100,110,120,130,140,150];\nconst yArray = [7,8,8,9,9,9,10,11,14,14,15];\n\n// Define Data\nconst data = [{\nx: xArray,\ny:yArray,\nmode:\"lines\"\n}];\n\n// Define Layout\nconst layout = {\nxaxis: {range: [40, 160], title: \"Square Meters\"},\nyaxis: {range: [5, 16], title: \"Price in Millions\"},\ntitle: \"House Prices vs Size\"\n};\n\n// Display with Plotly\nPlotly.newPlot(\"myPlot\", data, layout);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xArray = [<span class=\"jsnumbercolor\" style=\"color:#905\">50</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">60</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">70</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">80</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">90</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">100</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">110</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">120</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">130</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">140</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">150</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yArray = [<span class=\"jsnumbercolor\" style=\"color:#905\">7</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">10</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">11</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">15</span>];<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Define Data<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> data = [{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  x: xArray,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  y:yArray,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  mode:<span class=\"jsstringcolor\" style=\"color:green\">\"lines\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Define Layout<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> layout = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  xaxis: {range: [<span class=\"jsnumbercolor\" style=\"color:#905\">40</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">160</span>], title: <span class=\"jsstringcolor\" style=\"color:green\">\"Square Meters\"</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  yaxis: {range: [<span class=\"jsnumbercolor\" style=\"color:#905\">5</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">16</span>], title: <span class=\"jsstringcolor\" style=\"color:green\">\"Price in Millions\"</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  title: <span class=\"jsstringcolor\" style=\"color:green\">\"House Prices vs Size\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Display with Plotly<br/></span>\nPlotly.<span class=\"jspropertycolor\" style=\"color:black\">newPlot</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"myPlot\"</span>, data, layout);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_scatter_plots.asp"
      }
    },
    {
      "title": "Perceptrons",
      "code": [
        {
          "text": "const threshold = 1.5;\nconst inputs = [1, 0, 1, 0, 1];\nconst weights = [0.7, 0.6, 0.5, 0.3, 0.4];\n\nlet sum = 0;\nfor (let i = 0; i < inputs.length; i++) {\nsum += inputs[i] * weights[i];\n}\n\nconst activate = (sum > 1.5);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> threshold = <span class=\"jsnumbercolor\" style=\"color:#905\">1.5</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> inputs = [<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> weights = [<span class=\"jsnumbercolor\" style=\"color:#905\">0.7</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0.6</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0.5</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0.3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0.4</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> sum = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; inputs.<span class=\"jspropertycolor\" style=\"color:black\">length</span>; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  sum += inputs[i] * weights[i];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> activate = (sum &gt; <span class=\"jsnumbercolor\" style=\"color:#905\">1.5</span>);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_perceptrons.asp"
      }
    },
    {
      "title": "Pattern Recognition",
      "code": [
        {
          "text": "const plotter = new XYPlotter(\"myCanvas\");\nplotter.transformXY();\n\nconst xMax = plotter.xMax;\nconst yMax = plotter.yMax;\nconst xMin = plotter.xMin;\nconst yMin = plotter.yMin;",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> plotter = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> XYPlotter(<span class=\"jsstringcolor\" style=\"color:green\">\"myCanvas\"</span>);<br/>\nplotter.<span class=\"jspropertycolor\" style=\"color:black\">transformXY</span>();<br/><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xMax = plotter.<span class=\"jspropertycolor\" style=\"color:black\">xMax</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yMax = plotter.<span class=\"jspropertycolor\" style=\"color:black\">yMax</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xMin = plotter.<span class=\"jspropertycolor\" style=\"color:black\">xMin</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yMin = plotter.<span class=\"jspropertycolor\" style=\"color:black\">yMin</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const numPoints = 500;\nconst xPoints = [];\nconst yPoints = [];\nfor (let i = 0; i < numPoints; i++) {\nxPoints[i] = Math.random() * xMax;\nyPoints[i] = Math.random() * yMax;\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> numPoints = <span class=\"jsnumbercolor\" style=\"color:#905\">500</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xPoints = [];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yPoints = [];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; numPoints; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  xPoints[i] = Math.<span class=\"jspropertycolor\" style=\"color:black\">random</span>() * xMax;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  yPoints[i] = Math.<span class=\"jspropertycolor\" style=\"color:black\">random</span>() * yMax;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "function f(x) {\nreturn x * 1.2 + 50;\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> f(x) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> x * <span class=\"jsnumbercolor\" style=\"color:#905\">1.2</span> + <span class=\"jsnumbercolor\" style=\"color:#905\">50</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "let desired = [];\nfor (let i = 0; i < numPoints; i++) {\ndesired[i] = 0;\nif (yPoints[i] > f(xPoints[i])) {desired[i] = 1;}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> desired = [];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; numPoints; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  desired[i] = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (yPoints[i] &gt; f(xPoints[i])) {desired[i] = <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>;}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "for (let i = 0; i < numPoints; i++) {\nlet color = \"blue\";\nif (desired[i]) color = \"black\";\nplotter.plotPoint(xPoints[i], yPoints[i], color);\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; numPoints; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> color = <span class=\"jsstringcolor\" style=\"color:green\">\"blue\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (desired[i]) color = <span class=\"jsstringcolor\" style=\"color:green\">\"black\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  plotter.<span class=\"jspropertycolor\" style=\"color:black\">plotPoint</span>(xPoints[i], yPoints[i], color);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_recognition.asp"
      }
    },
    {
      "title": "Training a Perceptron",
      "code": [
        {
          "text": "// Perceptron Object\nfunction Perceptron(no, learningRate = 0.00001) {\n\n// Set Initial Values\nthis.learnc = learningRate;\nthis.bias = 1;\n\n// Compute Random Weights\nthis.weights = [];\nfor (let i = 0; i <= no; i++) {\nthis.weights[i] = Math.random() * 2 - 1;\n}\n\n// End Perceptron Object\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Perceptron Object<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> Perceptron(no, learningRate = <span class=\"jsnumbercolor\" style=\"color:#905\">0.00001</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Set Initial Values<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">learnc</span> = learningRate;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">bias</span> = <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Compute Random Weights<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">weights</span> = [];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt;= no; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">weights</span>[i] = Math.<span class=\"jspropertycolor\" style=\"color:black\">random</span>() * <span class=\"jsnumbercolor\" style=\"color:#905\">2</span> - <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// End Perceptron Object<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "this.activate = function(inputs) {\nlet sum = 0;\nfor (let i = 0; i < inputs.length; i++) {\nsum += inputs[i] * this.weights[i];\n}\nif (sum > 0) {return 1} else {return 0}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">activate</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>(inputs) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> sum = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; inputs.<span class=\"jspropertycolor\" style=\"color:black\">length</span>; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    sum += inputs[i] * <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">weights</span>[i];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (sum &gt; <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>) {<span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>} <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> {<span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "this.train = function(inputs, desired) {\ninputs.push(this.bias);\nlet guess = this.activate(inputs);\nlet error = desired - guess;\nif (error != 0) {\nfor (let i = 0; i < inputs.length; i++) {\nthis.weights[i] += this.learnc * error * inputs[i];\n}\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">train</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>(inputs, desired) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  inputs.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">bias</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> guess = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">activate</span>(inputs);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> error = desired - guess;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (error != <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; inputs.<span class=\"jspropertycolor\" style=\"color:black\">length</span>; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">weights</span>[i] += <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">learnc</span> * error * inputs[i];<br/>         <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// Perceptron Object\nfunction Perceptron(no, learningRate = 0.00001) {\n\n// Set Initial Values\nthis.learnc = learningRate;\nthis.bias = 1;\n\n// Compute Random Weights\nthis.weights = [];\nfor (let i = 0; i <= no; i++) {\nthis.weights[i] = Math.random() * 2 - 1;\n}\n\n// Activate Function\nthis.activate = function(inputs) {\nlet sum = 0;\nfor (let i = 0; i < inputs.length; i++) {\nsum += inputs[i] * this.weights[i];\n}\nif (sum > 0) {return 1} else {return 0}\n}\n\n// Train Function\nthis.train = function(inputs, desired) {\ninputs.push(this.bias);\nlet guess = this.activate(inputs);\nlet error = desired - guess;\nif (error != 0) {\nfor (let i = 0; i < inputs.length; i++) {\nthis.weights[i] += this.learnc * error * inputs[i];\n}\n}\n}\n\n// End Perceptron Object\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Perceptron Object<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> Perceptron(no, learningRate = <span class=\"jsnumbercolor\" style=\"color:#905\">0.00001</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Set Initial Values<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">learnc</span> = learningRate;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">bias</span> = <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Compute Random Weights<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">weights</span> = [];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt;= no; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">weights</span>[i] = Math.<span class=\"jspropertycolor\" style=\"color:black\">random</span>() * <span class=\"jsnumbercolor\" style=\"color:#905\">2</span> - <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Activate Function<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">activate</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>(inputs) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> sum = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; inputs.<span class=\"jspropertycolor\" style=\"color:black\">length</span>; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    sum += inputs[i] * <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">weights</span>[i];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (sum &gt; <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>) {<span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>} <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> {<span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Train Function<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">train</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>(inputs, desired) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  inputs.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">bias</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> guess = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">activate</span>(inputs);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> error = desired - guess;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (error != <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; inputs.<span class=\"jspropertycolor\" style=\"color:black\">length</span>; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">weights</span>[i] += <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">learnc</span> * error * inputs[i];<br/>         <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// End Perceptron Object<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "<script src=\"myperceptron.js\"></script>",
          "html": "<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>script<span class=\"attributecolor\" style=\"color:green\"> src<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"myperceptron.js\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"jscolor\" style=\"color:black\"/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/script<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span>"
        },
        {
          "text": "// Initiate Values\nconst numPoints = 500;\nconst learningRate = 0.00001;\n\n// Create a Plotter\nconst plotter = new XYPlotter(\"myCanvas\");\nplotter.transformXY();\nconst xMax = plotter.xMax;\nconst yMax = plotter.yMax;\nconst xMin = plotter.xMin;\nconst yMin = plotter.yMin;\n\n// Create Random XY Points\nconst xPoints = [];\nconst yPoints = [];\nfor (let i = 0; i < numPoints; i++) {\nxPoints[i] = Math.random() * xMax;\nyPoints[i] = Math.random() * yMax;\n}\n\n// Line Function\nfunction f(x) {\nreturn x * 1.2 + 50;\n}\n\n//Plot the Line\nplotter.plotLine(xMin, f(xMin), xMax, f(xMax), \"black\");\n\n// Compute Desired Answers\nconst desired = [];\nfor (let i = 0; i < numPoints; i++) {\ndesired[i] = 0;\nif (yPoints[i] > f(xPoints[i])) {desired[i] = 1}\n}\n\n// Create a Perceptron\nconst ptron = new Perceptron(2, learningRate);\n\n// Train the Perceptron\nfor (let j = 0; j <= 10000; j++) {\nfor (let i = 0; i < numPoints; i++) {\nptron.train([xPoints[i], yPoints[i]], desired[i]);\n}\n}\n\n// Display the Result\nfor (let i = 0; i < numPoints; i++) {\nconst x = xPoints[i];\nconst y = yPoints[i];\nlet guess = ptron.activate([x, y, ptron.bias]);\nlet color = \"black\";\nif (guess == 0) color = \"blue\";\nplotter.plotPoint(x, y, color);\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Initiate Values<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> numPoints = <span class=\"jsnumbercolor\" style=\"color:#905\">500</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> learningRate = <span class=\"jsnumbercolor\" style=\"color:#905\">0.00001</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Create a Plotter<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> plotter = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> XYPlotter(<span class=\"jsstringcolor\" style=\"color:green\">\"myCanvas\"</span>);<br/>\nplotter.<span class=\"jspropertycolor\" style=\"color:black\">transformXY</span>();<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xMax = plotter.<span class=\"jspropertycolor\" style=\"color:black\">xMax</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yMax = plotter.<span class=\"jspropertycolor\" style=\"color:black\">yMax</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xMin = plotter.<span class=\"jspropertycolor\" style=\"color:black\">xMin</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yMin = plotter.<span class=\"jspropertycolor\" style=\"color:black\">yMin</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Create Random XY Points<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xPoints = [];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yPoints = [];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; numPoints; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  xPoints[i] = Math.<span class=\"jspropertycolor\" style=\"color:black\">random</span>() * xMax;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  yPoints[i] = Math.<span class=\"jspropertycolor\" style=\"color:black\">random</span>() * yMax;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Line Function<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> f(x) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> x * <span class=\"jsnumbercolor\" style=\"color:#905\">1.2</span> + <span class=\"jsnumbercolor\" style=\"color:#905\">50</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">//Plot the Line<br/></span>\nplotter.<span class=\"jspropertycolor\" style=\"color:black\">plotLine</span>(xMin, f(xMin), xMax, f(xMax), <span class=\"jsstringcolor\" style=\"color:green\">\"black\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Compute Desired Answers<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> desired = [];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; numPoints; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  desired[i] = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (yPoints[i] &gt; f(xPoints[i])) {desired[i] = <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Create a Perceptron<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> ptron = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Perceptron(<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, learningRate);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Train the Perceptron<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> j = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; j &lt;= <span class=\"jsnumbercolor\" style=\"color:#905\">10000</span>; j++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; numPoints; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    ptron.<span class=\"jspropertycolor\" style=\"color:black\">train</span>([xPoints[i], yPoints[i]], desired[i]);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Display the Result<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; numPoints; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> x = xPoints[i];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> y = yPoints[i];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> guess = ptron.<span class=\"jspropertycolor\" style=\"color:black\">activate</span>([x, y, ptron.<span class=\"jspropertycolor\" style=\"color:black\">bias</span>]);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> color = <span class=\"jsstringcolor\" style=\"color:green\">\"black\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (guess == <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>) color = <span class=\"jsstringcolor\" style=\"color:green\">\"blue\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  plotter.<span class=\"jspropertycolor\" style=\"color:black\">plotPoint</span>(x, y, color);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_training.asp"
      }
    },
    {
      "title": "Testing a Perceptron",
      "code": [
        {
          "text": "// Test Against Unknown Data\nconst counter = 500;\nfor (let i = 0; i < counter; i++) {\nlet x = Math.random() * xMax;\nlet y = Math.random() * yMax;\nlet guess = ptron.activate([x, y, ptron.bias]);\nlet color = \"black\";\nif (guess == 0) color = \"blue\";\nplotter.plotPoint(x, y, color);\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Test Against Unknown Data<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> counter = <span class=\"jsnumbercolor\" style=\"color:#905\">500</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; counter; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x = Math.<span class=\"jspropertycolor\" style=\"color:black\">random</span>() * xMax;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> y = Math.<span class=\"jspropertycolor\" style=\"color:black\">random</span>() * yMax;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> guess = ptron.<span class=\"jspropertycolor\" style=\"color:black\">activate</span>([x, y, ptron.<span class=\"jspropertycolor\" style=\"color:black\">bias</span>]);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> color = <span class=\"jsstringcolor\" style=\"color:green\">\"black\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (guess == <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>) color = <span class=\"jsstringcolor\" style=\"color:green\">\"blue\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  plotter.<span class=\"jspropertycolor\" style=\"color:black\">plotPoint</span>(x, y, color);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// Test Against Unknown Data\nconst counter = 500;\nlet errors = 0;\nfor (let i = 0; i < counter; i++) {\nlet x = Math.random() * xMax;\nlet y = Math.random() * yMax;\nlet guess = ptron.activate([x, y, ptron.bias]);\nlet color = \"black\";\nif (guess == 0) color = \"blue\";\nplotter.plotPoint(x, y, color);\nif ((y > f(x) && guess == 0) || (y < f(x) && guess == 1)) {errors++}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Test Against Unknown Data<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> counter = <span class=\"jsnumbercolor\" style=\"color:#905\">500</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> errors = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; counter; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x = Math.<span class=\"jspropertycolor\" style=\"color:black\">random</span>() * xMax;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> y = Math.<span class=\"jspropertycolor\" style=\"color:black\">random</span>() * yMax;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> guess = ptron.<span class=\"jspropertycolor\" style=\"color:black\">activate</span>([x, y, ptron.<span class=\"jspropertycolor\" style=\"color:black\">bias</span>]);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> color = <span class=\"jsstringcolor\" style=\"color:green\">\"black\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (guess == <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>) color = <span class=\"jsstringcolor\" style=\"color:green\">\"blue\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  plotter.<span class=\"jspropertycolor\" style=\"color:black\">plotPoint</span>(x, y, color);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> ((y &gt; f(x) &amp;&amp; guess == <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>) || (y &lt; f(x) &amp;&amp; guess == <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>)) {errors++}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_perceptron_testing.asp"
      }
    },
    {
      "title": "Machine Learning",
      "code": [
        {
          "text": "function Trainer(xArray, yArray) {\nthis.xArr = xArray;\nthis.yArr = yArray;\nthis.points = this.xArr.length;\nthis.learnc = 0.00001;\nthis.weight = 0;\nthis.bias = 1;\nthis.cost;",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> Trainer(xArray, yArray) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">xArr</span> = xArray;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">yArr</span> = yArray;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">points</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">xArr</span>.<span class=\"jspropertycolor\" style=\"color:black\">length</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">learnc</span> = <span class=\"jsnumbercolor\" style=\"color:#905\">0.00001</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">weight</span> = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">bias</span> = <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">cost</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "this.costError = function() {\ntotal = 0;\nfor (let i = 0; i < this.points; i++) {\ntotal += (this.yArr[i] - (this.weight * this.xArr[i] + this.bias)) **2;\n}\nreturn total / this.points;\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">costError</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  total = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">points</span>; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    total += (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">yArr</span>[i] - (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">weight</span> * <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">xArr</span>[i] + <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">bias</span>)) **<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> total / <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">points</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "this.train = function(iter) {\nfor (let i = 0; i < iter; i++) {\nthis.updateWeights();\n}\nthis.cost = this.costError();\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">train</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>(iter) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; iter; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">updateWeights</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">cost</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">costError</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "this.updateWeights = function() {\nlet wx;\nlet w_deriv = 0;\nlet b_deriv = 0;\nfor (let i = 0; i < this.points; i++) {\nwx = this.yArr[i] - (this.weight * this.xArr[i] + this.bias);\nw_deriv += -2 * wx * this.xArr[i];\nb_deriv += -2 * wx;\n}\nthis.weight -= (w_deriv / this.points) * this.learnc;\nthis.bias -= (b_deriv / this.points) * this.learnc;\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">updateWeights</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> wx;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> w_deriv = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> b_deriv = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">points</span>; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    wx = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">yArr</span>[i] - (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">weight</span> * <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">xArr</span>[i] + <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">bias</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    w_deriv += -<span class=\"jsnumbercolor\" style=\"color:#905\">2</span> * wx * <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">xArr</span>[i];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    b_deriv += -<span class=\"jsnumbercolor\" style=\"color:#905\">2</span> * wx;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">weight</span> -= (w_deriv / <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">points</span>) * <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">learnc</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">bias</span> -= (b_deriv / <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">points</span>) * <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">learnc</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "function Trainer(xArray, yArray) {\nthis.xArr = xArray;\nthis.yArr = yArray;\nthis.points = this.xArr.length;\nthis.learnc = 0.00001;\nthis.weight = 0;\nthis.bias = 1;\nthis.cost;\n\n// Cost Function\nthis.costError = function() {\ntotal = 0;\nfor (let i = 0; i < this.points; i++) {\ntotal += (this.yArr[i] - (this.weight * this.xArr[i] + this.bias)) **2;\n}\nreturn total / this.points;\n}\n\n// Train Function\nthis.train = function(iter) {\nfor (let i = 0; i < iter; i++) {\nthis.updateWeights();\n}\nthis.cost = this.costError();\n}\n\n// Update Weights Function\nthis.updateWeights = function() {\nlet wx;\nlet w_deriv = 0;\nlet b_deriv = 0;\nfor (let i = 0; i < this.points; i++) {\nwx = this.yArr[i] - (this.weight * this.xArr[i] + this.bias);\nw_deriv += -2 * wx * this.xArr[i];\nb_deriv += -2 * wx;\n}\nthis.weight -= (w_deriv / this.points) * this.learnc;\nthis.bias -= (b_deriv / this.points) * this.learnc;\n}\n\n} // End Trainer Object",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> Trainer(xArray, yArray) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">xArr</span> = xArray;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">yArr</span> = yArray;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">points</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">xArr</span>.<span class=\"jspropertycolor\" style=\"color:black\">length</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">learnc</span> = <span class=\"jsnumbercolor\" style=\"color:#905\">0.00001</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">weight</span> = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">bias</span> = <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">cost</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Cost Function<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">costError</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  total = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">points</span>; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    total += (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">yArr</span>[i] - (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">weight</span> * <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">xArr</span>[i] + <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">bias</span>)) **<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> total / <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">points</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Train Function<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">train</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>(iter) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; iter; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">updateWeights</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">cost</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">costError</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Update Weights Function<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">updateWeights</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> wx;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> w_deriv = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> b_deriv = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">points</span>; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    wx = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">yArr</span>[i] - (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">weight</span> * <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">xArr</span>[i] + <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">bias</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    w_deriv += -<span class=\"jsnumbercolor\" style=\"color:#905\">2</span> * wx * <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">xArr</span>[i];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    b_deriv += -<span class=\"jsnumbercolor\" style=\"color:#905\">2</span> * wx;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">weight</span> -= (w_deriv / <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">points</span>) * <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">learnc</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">bias</span> -= (b_deriv / <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">points</span>) * <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">learnc</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>} <span class=\"commentcolor\" style=\"color:slategray\">// End Trainer Object\n </span></span>"
        },
        {
          "text": "<script src=\"myailib.js\"></script>",
          "html": "<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>script<span class=\"attributecolor\" style=\"color:green\"> src<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"myailib.js\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"jscolor\" style=\"color:black\"/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/script<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_learning.asp"
      }
    },
    {
      "title": "Linear Regressions",
      "code": [
        {
          "text": "const xArray = [50,60,70,80,90,100,110,120,130,140,150];\nconst yArray = [7,8,8,9,9,9,10,11,14,14,15];\n\n// Define Data\nconst data = [{\nx:xArray,\ny:yArray,\nmode: \"markers\"\n}];\n\n// Define Layout\nconst layout = {\nxaxis: {range: [40, 160], title: \"Square Meters\"},\nyaxis: {range: [5, 16], title: \"Price in Millions\"},\ntitle: \"House Prices vs. Size\"\n};\n\nPlotly.newPlot(\"myPlot\", data, layout);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xArray = [<span class=\"jsnumbercolor\" style=\"color:#905\">50</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">60</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">70</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">80</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">90</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">100</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">110</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">120</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">130</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">140</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">150</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yArray = [<span class=\"jsnumbercolor\" style=\"color:#905\">7</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">10</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">11</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">15</span>];<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Define Data<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> data = [{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  x:xArray,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  y:yArray,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  mode: <span class=\"jsstringcolor\" style=\"color:green\">\"markers\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}];<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Define Layout<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> layout = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  xaxis: {range: [<span class=\"jsnumbercolor\" style=\"color:#905\">40</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">160</span>], title: <span class=\"jsstringcolor\" style=\"color:green\">\"Square Meters\"</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  yaxis: {range: [<span class=\"jsnumbercolor\" style=\"color:#905\">5</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">16</span>], title: <span class=\"jsstringcolor\" style=\"color:green\">\"Price in Millions\"</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  title: <span class=\"jsstringcolor\" style=\"color:green\">\"House Prices vs. Size\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><br/>\nPlotly.<span class=\"jspropertycolor\" style=\"color:black\">newPlot</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"myPlot\"</span>, data, layout);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const xArray = [50,60,70,80,90,100,110,120,130,140,150];\nconst yArray = [7,8,8,9,9,9,9,10,11,14,14,15];\n\nconst data = [\n{x:xArray, y:yArray, mode:\"markers\"},\n{x:[50,150], y:[7,15], mode:\"line\"}\n];\n\nconst layout = {\nxaxis: {range: [40, 160], title: \"Square Meters\"},\nyaxis: {range: [5, 16], title: \"Price in Millions\"},\ntitle: \"House Prices vs. Size\"\n};\n\nPlotly.newPlot(\"myPlot\", data, layout);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xArray = [<span class=\"jsnumbercolor\" style=\"color:#905\">50</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">60</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">70</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">80</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">90</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">100</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">110</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">120</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">130</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">140</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">150</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yArray = [<span class=\"jsnumbercolor\" style=\"color:#905\">7</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">10</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">11</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">15</span>];<br/><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> data = [<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {x:xArray, y:yArray, mode:<span class=\"jsstringcolor\" style=\"color:green\">\"markers\"</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {x:[<span class=\"jsnumbercolor\" style=\"color:#905\">50</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">150</span>], y:[<span class=\"jsnumbercolor\" style=\"color:#905\">7</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">15</span>], mode:<span class=\"jsstringcolor\" style=\"color:green\">\"line\"</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>];<br/><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> layout = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  xaxis: {range: [<span class=\"jsnumbercolor\" style=\"color:#905\">40</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">160</span>], title: <span class=\"jsstringcolor\" style=\"color:green\">\"Square Meters\"</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  yaxis: {range: [<span class=\"jsnumbercolor\" style=\"color:#905\">5</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">16</span>], title: <span class=\"jsstringcolor\" style=\"color:green\">\"Price in Millions\"</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  title: <span class=\"jsstringcolor\" style=\"color:green\">\"House Prices vs. Size\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><br/>\nPlotly.<span class=\"jspropertycolor\" style=\"color:black\">newPlot</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"myPlot\"</span>, data, layout);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const xArray = [50,60,70,80,90,100,110,120,130,140,150];\nconst yArray = [7,8,8,9,9,9,10,11,14,14,15];\n\n// Calculate Slope\nlet xSum = xArray.reduce(function(a, b){return a + b;}, 0);\nlet ySum = yArray.reduce(function(a, b){return a + b;}, 0);\nlet slope = ySum / xSum;\n\n// Generate values\nconst xValues = [];\nconst yValues = [];\nfor (let x = 50; x <= 150; x += 1) {\nxValues.push(x);\nyValues.push(x * slope);\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xArray = [<span class=\"jsnumbercolor\" style=\"color:#905\">50</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">60</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">70</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">80</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">90</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">100</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">110</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">120</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">130</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">140</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">150</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yArray = [<span class=\"jsnumbercolor\" style=\"color:#905\">7</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">10</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">11</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">15</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Calculate Slope<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> xSum = xArray.<span class=\"jspropertycolor\" style=\"color:black\">reduce</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>(a, b){<span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> a + b;}, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> ySum = yArray.<span class=\"jspropertycolor\" style=\"color:black\">reduce</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>(a, b){<span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> a + b;}, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> slope = ySum / xSum;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Generate values<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xValues = [];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yValues = [];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x = <span class=\"jsnumbercolor\" style=\"color:#905\">50</span>; x &lt;= <span class=\"jsnumbercolor\" style=\"color:#905\">150</span>; x += <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  xValues.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(x);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  yValues.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(x * slope);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span> </span>"
        },
        {
          "text": "const xArray = [50,60,70,80,90,100,110,120,130,140,150];\nconst yArray = [7,8,8,9,9,9,10,11,14,14,15];\n\n// Calculate Sums\nlet xSum=0, ySum=0 , xxSum=0, xySum=0;\nlet count = xArray.length;\nfor (let i = 0, len = count; i < count; i++) {\nxSum += xArray[i];\nySum += yArray[i];\nxxSum += xArray[i] * xArray[i];\nxySum += xArray[i] * yArray[i];\n}\n\n// Calculate slope and intercept\nlet slope = (count * xySum - xSum * ySum) / (count * xxSum - xSum * xSum);\nlet intercept = (ySum / count) - (slope * xSum) / count;\n\n// Generate values\nconst xValues = [];\nconst yValues = [];\nfor (let x = 50; x <= 150; x += 1) {\nxValues.push(x);\nyValues.push(x * slope + intercept);\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xArray = [<span class=\"jsnumbercolor\" style=\"color:#905\">50</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">60</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">70</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">80</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">90</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">100</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">110</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">120</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">130</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">140</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">150</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yArray = [<span class=\"jsnumbercolor\" style=\"color:#905\">7</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">10</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">11</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">15</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Calculate Sums<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> xSum=<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, ySum=<span class=\"jsnumbercolor\" style=\"color:#905\">0</span> , xxSum=<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, xySum=<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> count = xArray.<span class=\"jspropertycolor\" style=\"color:black\">length</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, len = count; i &lt; count; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  xSum += xArray[i];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  ySum += yArray[i];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  xxSum += xArray[i] * xArray[i];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  xySum += xArray[i] * yArray[i];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Calculate slope and intercept<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> slope = (count * xySum - xSum * ySum) / (count * xxSum - xSum * xSum);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> intercept = (ySum <span class=\"jsregexpcolor\" style=\"color:#e90\">/ count) - (slope * xSum) /</span> count;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Generate values<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xValues = [];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yValues = [];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x = <span class=\"jsnumbercolor\" style=\"color:#905\">50</span>; x &lt;= <span class=\"jsnumbercolor\" style=\"color:#905\">150</span>; x += <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  xValues.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(x);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  yValues.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(x * slope + intercept);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_regressions.asp"
      }
    },
    {
      "title": "Brain.js",
      "code": [
        {
          "text": "// Create a Neural Network\nconst network = new brain.NeuralNetwork();\n\n// Train the Network with 4 input objects\nnetwork.train([\n{input:[0,0], output:{zero:1}},\n{input:[0,1], output:{one:1}},\n{input:[1,0], output:{one:1},\n{input:[1,1], output:{zero:1},\n]);\n\n// What is the expected output of [1,0]?\nresult = network.run([1,0]);\n\n// Display the probability for \"zero\" and \"one\"\n... result[\"one\"] + \" \" + result[\"zero\"];",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Create a Neural Network<br/></span><span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> network = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> brain.<span class=\"jspropertycolor\" style=\"color:black\">NeuralNetwork</span>();<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Train the Network with 4 input objects<br/></span>\nnetwork.<span class=\"jspropertycolor\" style=\"color:black\">train</span>([<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {input:[<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>], output:{zero:<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>}},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {input:[<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>], output:{one:<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>}},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {input:[<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>], output:{one:<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {input:[<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>], output:{zero:<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>]);<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// What is the expected output of [1,0]?<br/></span>\nresult = network.<span class=\"jspropertycolor\" style=\"color:black\">run</span>([<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>]);<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Display the probability for \"zero\" and \"one\"<br/></span>\n.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/> result[<span class=\"jsstringcolor\" style=\"color:green\">\"one\"</span>] + <span class=\"jsstringcolor\" style=\"color:green\">\" \"</span> + result[<span class=\"jsstringcolor\" style=\"color:green\">\"zero\"</span>];<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// Create a Neural Network\nconst net = new brain.NeuralNetwork();\n\n// Train the Network with 4 input objects\nnet.train([\n// White RGB(255, 255, 255)\n{input:[255/255, 255/255, 255/255], output:{light:1}},\n// Light grey (192,192,192)\n{input:[192/255, 192/255, 192/255], output:{light:1}},\n// Darkgrey (64, 64, 64)\n{ input:[65/255, 65/255, 65/255], output:{dark:1}},\n// Black (0, 0, 0)\n{ input:[0, 0, 0], output:{dark:1}},\n]);\n\n// What is the expected output of Dark Blue (0, 0, 128)?\nlet result = net.run([0, 0, 128/255]);\n\n// Display the probability of \"dark\" and \"light\"\n... result[\"dark\"] + \" \" + result[\"light\"];",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Create a Neural Network<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> net = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> brain.<span class=\"jspropertycolor\" style=\"color:black\">NeuralNetwork</span>();<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Train the Network with 4 input objects<br/></span>\nnet.<span class=\"jspropertycolor\" style=\"color:black\">train</span>([<br/><span class=\"commentcolor\" style=\"color:slategray\">// White RGB(255, 255, 255)<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>{input:[<span class=\"jsnumbercolor\" style=\"color:#905\">255</span>/<span class=\"jsnumbercolor\" style=\"color:#905\">255</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">255</span>/<span class=\"jsnumbercolor\" style=\"color:#905\">255</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">255</span>/<span class=\"jsnumbercolor\" style=\"color:#905\">255</span>], output:{light:<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>}},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Light grey (192,192,192)<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>{input:[<span class=\"jsnumbercolor\" style=\"color:#905\">192</span>/<span class=\"jsnumbercolor\" style=\"color:#905\">255</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">192</span>/<span class=\"jsnumbercolor\" style=\"color:#905\">255</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">192</span>/<span class=\"jsnumbercolor\" style=\"color:#905\">255</span>], output:{light:<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>}},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Darkgrey (64, 64, 64)<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>{ input:[<span class=\"jsnumbercolor\" style=\"color:#905\">65</span>/<span class=\"jsnumbercolor\" style=\"color:#905\">255</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">65</span>/<span class=\"jsnumbercolor\" style=\"color:#905\">255</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">65</span>/<span class=\"jsnumbercolor\" style=\"color:#905\">255</span>], output:{dark:<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>}},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Black (0, 0, 0)<br/></span>{ input:[<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>], output:{dark:<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>}},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>]);<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// What is the expected output of Dark Blue (0, 0, 128)?<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> result = net.<span class=\"jspropertycolor\" style=\"color:black\">run</span>([<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">128</span>/<span class=\"jsnumbercolor\" style=\"color:#905\">255</span>]);<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Display the probability of \"dark\" and \"light\"<br/></span>\n.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/> result[<span class=\"jsstringcolor\" style=\"color:green\">\"dark\"</span>] + <span class=\"jsstringcolor\" style=\"color:green\">\" \"</span> + result[<span class=\"jsstringcolor\" style=\"color:green\">\"light\"</span>];<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_brainjs.asp"
      }
    },
    {
      "title": "TensorFlow.js Tutorial",
      "code": [
        {
          "text": "<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@3.6.0/dist/tf.min.js\"></script>",
          "html": "<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>script<span class=\"attributecolor\" style=\"color:green\"> src<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@3.6.0/dist/tf.min.js\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"jscolor\" style=\"color:black\"/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/script<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span>"
        },
        {
          "text": "<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs\"></script>",
          "html": "<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>script<span class=\"attributecolor\" style=\"color:green\"> src<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"jscolor\" style=\"color:black\"/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/script<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span>"
        },
        {
          "text": "const myArr = [[1, 2, 3, 4]];\nconst tensorA = tf.tensor(myArr);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> myArr = [[<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>]];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorA = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>(myArr);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const myArr = [[1, 2], [3, 4]];\nconst tensorA = tf.tensor(myArr);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> myArr = [[<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>]];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorA = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>(myArr);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const myArr = [[1, 2], [3, 4], [5, 6]];\nconst tensorA = tf.tensor(myArr);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> myArr = [[<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">5</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">6</span>]];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorA = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>(myArr);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const myArr = [1, 2, 3, 4]:\nconst shape = [2, 2];\nconst tensorA = tf.tensor(myArr, shape);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> myArr = [<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>]:<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> shape = [<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorA = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>(myArr, shape);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const tensorA = tf.tensor([1, 2, 3, 4], [2, 2]);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorA = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>([<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>]);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const myArr = [[1, 2], [3, 4]];\nconst shape = [2, 2];\nconst tensorA = tf.tensor(myArr, shape);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> myArr = [[<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>]];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> shape = [<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorA = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>(myArr, shape);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const myArr = [[1, 2], [3, 4]];\nconst shape = [2, 2];\nconst tensorA = tf.tensor(myArr, shape);\ntensorA.data().then(data => display(data));\n\nfunction display(data) {\ndocument.getElementById(\"demo\").innerHTML = data;\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> myArr = [[<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>]];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> shape = [<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorA = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>(myArr, shape);<br/>\ntensorA.<span class=\"jspropertycolor\" style=\"color:black\">data</span>().<span class=\"jskeywordcolor\" style=\"color:#005cc5\">then</span>(data =&gt; display(data));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> display(data) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"demo\"</span>).<span class=\"jspropertycolor\" style=\"color:black\">innerHTML</span> = data;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const myArr = [[1, 2], [3, 4]];\nconst shape = [2, 2];\nconst tensorA = tf.tensor(myArr, shape);\ntensorA.array().then(array => display(array[0]));\n\nfunction display(data) {\ndocument.getElementById(\"demo\").innerHTML = data;\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> myArr = [[<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>]];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> shape = [<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorA = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>(myArr, shape);<br/>\ntensorA.<span class=\"jspropertycolor\" style=\"color:black\">array</span>().<span class=\"jskeywordcolor\" style=\"color:#005cc5\">then</span>(array =&gt; display(array[<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>]));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> display(data) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"demo\"</span>).<span class=\"jspropertycolor\" style=\"color:black\">innerHTML</span> = data;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const myArr = [1, 2, 3, 4];\nconst shape = [2, 2];\nconst tensorA = tf.tensor(myArr, shape);\n\ndocument.getElementById(\"demo\").innerHTML = tensorA.rank;",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> myArr = [<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> shape = [<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorA = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>(myArr, shape);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\ndocument.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"demo\"</span>).<span class=\"jspropertycolor\" style=\"color:black\">innerHTML</span> = tensorA.<span class=\"jspropertycolor\" style=\"color:black\">rank</span>;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const myArr = [1, 2, 3, 4];\nconst shape = [2, 2];\nconst tensorA = tf.tensor(myArr, shape);\n\ndocument.getElementById(\"demo\").innerHTML = tensorA.shape;",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> myArr = [<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> shape = [<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorA = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>(myArr, shape);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\ndocument.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"demo\"</span>).<span class=\"jspropertycolor\" style=\"color:black\">innerHTML</span> = tensorA.<span class=\"jspropertycolor\" style=\"color:black\">shape</span>;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const myArr = [1, 2, 3, 4];\nconst shape = [2, 2];\nconst tensorA = tf.tensor(myArr, shape, \"int32\");",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> myArr = [<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> shape = [<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorA = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>(myArr, shape, <span class=\"jsstringcolor\" style=\"color:green\">\"int32\"</span>);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_tensorflow_intro.asp"
      }
    },
    {
      "title": "TensorFlow Operations",
      "code": [
        {
          "text": "const tensorA = tf.tensor([[1, 2], [3, 4], [5, 6]]);\nconst tensorB = tf.tensor([[1,-1], [2,-2], [3,-3]]);\n\n// Tensor Addition\nconst tensorNew = tensorA.add(tensorB);\n\n// Result: [ [2, 1], [5, 2], [8, 3] ]",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorA = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>([[<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">5</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">6</span>]]);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorB = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>([[<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>,-<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>,-<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>,-<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>]]);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Tensor Addition<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorNew = tensorA.<span class=\"jspropertycolor\" style=\"color:black\">add</span>(tensorB);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Result: [ [2, 1], [5, 2], [8, 3] ]<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const tensorA = tf.tensor([[1, 2], [3, 4], [5, 6]]);\nconst tensorB = tf.tensor([[1,-1], [2,-2], [3,-3]]);\n\n// Tensor Subtraction\nconst tensorNew = tensorA.sub(tensorB);\n\n// Result: [ [0, 3], [1, 6], [2, 9] ]",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorA = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>([[<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">5</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">6</span>]]);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorB = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>([[<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>,-<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>,-<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>,-<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>]]);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Tensor Subtraction<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorNew = tensorA.<span class=\"jspropertycolor\" style=\"color:black\">sub</span>(tensorB);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Result: [ [0, 3], [1, 6], [2, 9] ]<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const tensorA = tf.tensor([1, 2, 3, 4]);\nconst tensorB = tf.tensor([4, 4, 2, 2]);\n\n// Tensor Multiplication\nconst tensorNew = tensorA.mul(tensorB);\n\n// Result: [ 4, 8, 6, 8 ]",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorA = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>([<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>]);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorB = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>([<span class=\"jsnumbercolor\" style=\"color:#905\">4</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>]);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Tensor Multiplication<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorNew = tensorA.<span class=\"jspropertycolor\" style=\"color:black\">mul</span>(tensorB);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Result: [ 4, 8, 6, 8 ]<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const tensorA = tf.tensor([2, 4, 6, 8]);\nconst tensorB = tf.tensor([1, 2, 2, 2]);\n\n// Tensor Division\nconst tensorNew = tensorA.div(tensorB);\n\n// Result: [ 2, 2, 3, 4 ]",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorA = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>([<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">6</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">8</span>]);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorB = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>([<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>]);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Tensor Division<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorNew = tensorA.<span class=\"jspropertycolor\" style=\"color:black\">div</span>(tensorB);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Result: [ 2, 2, 3, 4 ]<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const tensorA = tf.tensor([1, 2, 3, 4]);\n\n// Tensor Square\nconst tensorNew = tensorA.square();\n\n// Result [ 1, 4, 9, 16 ]",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorA = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>([<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>]);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Tensor Square<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorNew = tensorA.<span class=\"jspropertycolor\" style=\"color:black\">square</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Result [ 1, 4, 9, 16 ]<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const tensorA = tf.tensor([[1, 2], [3, 4]]);\nconst tensorB = tensorA.reshape([4, 1]);\n\n// Result: [ [1], [2], [3], [4] ]",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorA = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>([[<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>]]);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorB = tensorA.<span class=\"jspropertycolor\" style=\"color:black\">reshape</span>([<span class=\"jsnumbercolor\" style=\"color:#905\">4</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>]);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Result: [ [1], [2], [3], [4] ]\n </span></span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_tensorflow_operations.asp"
      }
    },
    {
      "title": "TensorFlow Models",
      "code": [
        {
          "text": "y = 1.2 * x + 5;",
          "html": "<span class=\"jscolor\" style=\"color:black\">\ny = <span class=\"jsnumbercolor\" style=\"color:#905\">1.2</span> * x + <span class=\"jsnumbercolor\" style=\"color:#905\">5</span>;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// Create Training Data\nconst xs = tf.tensor([0, 1, 2, 3, 4]);\nconst ys = xs.mul(1.2).add(5);\n\n// Define a Linear Regression Model\nconst model = tf.sequential();\nmodel.add(tf.layers.dense({units:1, inputShape:[1]}));\n\n// Specify Loss and Optimizer\nmodel.compile({loss:'meanSquaredError', optimizer:'sgd'});\n\n// Train the Model\nmodel.fit(xs, ys, {epochs:500}).then(() => {myFunction()});\n\n// Use the Model\nfunction myFunction() {\nconst xMax = 10;\nconst xArr = [];\nconst yArr = [];\nfor (let x = 0; x <= xMax; x++) {\nlet result = model.predict(tf.tensor([Number(x)]));\nresult.data().then(y => {\nxArr.push(x);\nyArr.push(Number(y));\nif (x == xMax) {plot(xArr, yArr)};\n});\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Create Training Data<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xs = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>([<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>]);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> ys = xs.<span class=\"jspropertycolor\" style=\"color:black\">mul</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">1.2</span>).<span class=\"jspropertycolor\" style=\"color:black\">add</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">5</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Define a Linear Regression Model<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> model = tf.<span class=\"jspropertycolor\" style=\"color:black\">sequential</span>();<br/>\nmodel.<span class=\"jspropertycolor\" style=\"color:black\">add</span>(tf.<span class=\"jspropertycolor\" style=\"color:black\">layers</span>.<span class=\"jspropertycolor\" style=\"color:black\">dense</span>({units:<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, inputShape:[<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>]}));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Specify Loss and Optimizer<br/></span>\nmodel.<span class=\"jspropertycolor\" style=\"color:black\">compile</span>({loss:<span class=\"jsstringcolor\" style=\"color:green\">'meanSquaredError'</span>, optimizer:<span class=\"jsstringcolor\" style=\"color:green\">'sgd'</span>});<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Train the Model<br/></span>\nmodel.<span class=\"jspropertycolor\" style=\"color:black\">fit</span>(xs, ys, {epochs:<span class=\"jsnumbercolor\" style=\"color:#905\">500</span>}).<span class=\"jskeywordcolor\" style=\"color:#005cc5\">then</span>(() =&gt; {myFunction()});<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Use the Model<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> myFunction() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xMax = <span class=\"jsnumbercolor\" style=\"color:#905\">10</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xArr = [];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yArr = [];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; x &lt;= xMax; x++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> result = model.<span class=\"jspropertycolor\" style=\"color:black\">predict</span>(tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>([Number(x)]));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    result.<span class=\"jspropertycolor\" style=\"color:black\">data</span>().<span class=\"jskeywordcolor\" style=\"color:#005cc5\">then</span>(y =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      xArr.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(x);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      yArr.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(Number(y));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (x == xMax) {plot(xArr, yArr)};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const xs = tf.tensor([0, 1, 2, 3, 4]);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xs = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>([<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>]);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const ys = xs.mul(1.2).add(5);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> ys = xs.<span class=\"jspropertycolor\" style=\"color:black\">mul</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">1.2</span>).<span class=\"jspropertycolor\" style=\"color:black\">add</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">5</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "model.add(tf.layers.dense({units:1, inputShape:[1]}));",
          "html": "<span class=\"jscolor\" style=\"color:black\">\nmodel.<span class=\"jspropertycolor\" style=\"color:black\">add</span>(tf.<span class=\"jspropertycolor\" style=\"color:black\">layers</span>.<span class=\"jspropertycolor\" style=\"color:black\">dense</span>({units:<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, inputShape:[<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>]}));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "model.compile({loss:'meanSquaredError', optimizer:'sgd'});",
          "html": "<span class=\"jscolor\" style=\"color:black\">\nmodel.<span class=\"jspropertycolor\" style=\"color:black\">compile</span>({loss:<span class=\"jsstringcolor\" style=\"color:green\">'meanSquaredError'</span>, optimizer:<span class=\"jsstringcolor\" style=\"color:green\">'sgd'</span>});<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "model.fit(xs, ys, {epochs:500}).then(() => {myFunction()});",
          "html": "<span class=\"jscolor\" style=\"color:black\">\nmodel.<span class=\"jspropertycolor\" style=\"color:black\">fit</span>(xs, ys, {epochs:<span class=\"jsnumbercolor\" style=\"color:#905\">500</span>}).<span class=\"jskeywordcolor\" style=\"color:#005cc5\">then</span>(() =&gt; {myFunction()});<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "function myFunction() {\nconst xMax = 10;\nconst xArr = [];\nconst yArr = [];\nfor (let x = 0; x <= xMax; x++) {\nlet result = model.predict(tf.tensor([Number(x)]));\nresult.data().then(y => {\nxArr.push(x);\nyArr.push(Number(y));\nif (x == xMax) {plot(xArr, yArr)};\n});\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> myFunction() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xMax = <span class=\"jsnumbercolor\" style=\"color:#905\">10</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xArr = [];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yArr = [];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; x &lt;= xMax; x++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> result = model.<span class=\"jspropertycolor\" style=\"color:black\">predict</span>(tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>([Number(x)]));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    result.<span class=\"jspropertycolor\" style=\"color:black\">data</span>().<span class=\"jskeywordcolor\" style=\"color:#005cc5\">then</span>(y =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      xArr.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(x);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      yArr.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(Number(y));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (x == xMax) {plot(xArr, yArr)};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "function myFunction() {\nconst xMax = 10;\nconst xArr = [];\nconst yArr = [];\nfor (let x = 0; x <= xMax; x++) {\nlet result = model.predict(tf.tensor([Number(x)]));\nresult.data().then(y => {\nxArr.push(x);\nyArr.push(Number(y));\nif (x == xMax) {display(xArr, yArr)};\n});\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> myFunction() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xMax = <span class=\"jsnumbercolor\" style=\"color:#905\">10</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xArr = [];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yArr = [];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; x &lt;= xMax; x++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> result = model.<span class=\"jspropertycolor\" style=\"color:black\">predict</span>(tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>([Number(x)]));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    result.<span class=\"jspropertycolor\" style=\"color:black\">data</span>().<span class=\"jskeywordcolor\" style=\"color:#005cc5\">then</span>(y =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      xArr.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(x);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      yArr.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(Number(y));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (x == xMax) {display(xArr, yArr)};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_tensorflow_model.asp"
      }
    },
    {
      "title": "TensorFlow.js Visor",
      "code": [
        {
          "text": "<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-vis\"></script>",
          "html": "<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>script<span class=\"attributecolor\" style=\"color:green\"> src<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-vis\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"jscolor\" style=\"color:black\"/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/script<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span>"
        },
        {
          "text": "const surface = document.getElementById('demo');\nconst series = ['First', 'Second'];\n\nconst serie1 = [];\nconst serie2 = [];\nfor (let i = 0; i < 100; i++) {\nserie1[i] = {x:i, y:Math.random() * 100};\nserie2[i] = {x:i, y:Math.random() * 100};\n}\n\nconst data = {values: [serie1, serie2], series}\n\ntfvis.render.scatterplot(surface, data);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> surface = document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">'demo'</span>);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> series = [<span class=\"jsstringcolor\" style=\"color:green\">'First'</span>, <span class=\"jsstringcolor\" style=\"color:green\">'Second'</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> serie1 = [];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> serie2 = [];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; <span class=\"jsnumbercolor\" style=\"color:#905\">100</span>; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  serie1[i] = {x:i, y:Math.<span class=\"jspropertycolor\" style=\"color:black\">random</span>() * <span class=\"jsnumbercolor\" style=\"color:#905\">100</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  serie2[i] = {x:i, y:Math.<span class=\"jspropertycolor\" style=\"color:black\">random</span>() * <span class=\"jsnumbercolor\" style=\"color:#905\">100</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> data = {values: [serie1, serie2], series}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\ntfvis.<span class=\"jspropertycolor\" style=\"color:black\">render</span>.<span class=\"jspropertycolor\" style=\"color:black\">scatterplot</span>(surface, data);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const series = ['First', 'Second'];\n\nconst serie1 = [];\nconst serie2 = [];\nfor (let i = 0; i < 100; i++) {\nserie1[i] = {x:i, y:Math.random() * 100};\nserie2[i] = {x:i, y:Math.random() * 100};\n}\n\nconst data = {values: [serie1, serie2], series}\n\ntfvis.render.scatterplot({name: \"my Plots\"}, data);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> series = [<span class=\"jsstringcolor\" style=\"color:green\">'First'</span>, <span class=\"jsstringcolor\" style=\"color:green\">'Second'</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> serie1 = [];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> serie2 = [];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; <span class=\"jsnumbercolor\" style=\"color:#905\">100</span>; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  serie1[i] = {x:i, y:Math.<span class=\"jspropertycolor\" style=\"color:black\">random</span>() * <span class=\"jsnumbercolor\" style=\"color:#905\">100</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  serie2[i] = {x:i, y:Math.<span class=\"jspropertycolor\" style=\"color:black\">random</span>() * <span class=\"jsnumbercolor\" style=\"color:#905\">100</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> data = {values: [serie1, serie2], series}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\ntfvis.<span class=\"jspropertycolor\" style=\"color:black\">render</span>.<span class=\"jspropertycolor\" style=\"color:black\">scatterplot</span>({name: <span class=\"jsstringcolor\" style=\"color:green\">\"my Plots\"</span>}, data);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const surface = document.getElementById('demo');\nconst data = [\n{index: 0, value: 100},\n{index: 1, value: 200},\n{index: 2, value: 150},\n{index: 2, value: 250},\n];\n\ntfvis.render.barchart(surface, data);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> surface = document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">'demo'</span>);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> data = [<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {index: <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, value: <span class=\"jsnumbercolor\" style=\"color:#905\">100</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {index: <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, value: <span class=\"jsnumbercolor\" style=\"color:#905\">200</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {index: <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, value: <span class=\"jsnumbercolor\" style=\"color:#905\">150</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {index: <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, value: <span class=\"jsnumbercolor\" style=\"color:#905\">250</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\ntfvis.<span class=\"jspropertycolor\" style=\"color:black\">render</span>.<span class=\"jspropertycolor\" style=\"color:black\">barchart</span>(surface, data);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const data = [\n{index: 0, value: 100},\n{index: 1, value: 200},\n{index: 2, value: 150},\n{index: 2, value: 250},\n];\n\ntfvis.render.barchart({name:\"my Graphs\"}, data);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> data = [<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {index: <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, value: <span class=\"jsnumbercolor\" style=\"color:#905\">100</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {index: <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, value: <span class=\"jsnumbercolor\" style=\"color:#905\">200</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {index: <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, value: <span class=\"jsnumbercolor\" style=\"color:#905\">150</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {index: <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, value: <span class=\"jsnumbercolor\" style=\"color:#905\">250</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\ntfvis.<span class=\"jspropertycolor\" style=\"color:black\">render</span>.<span class=\"jspropertycolor\" style=\"color:black\">barchart</span>({name:<span class=\"jsstringcolor\" style=\"color:green\">\"my Graphs\"</span>}, data);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const surface = document.getElementById('demo');\n\nlet values = [\n{x: 1, y: 20},\n{x: 2, y: 30},\n{x: 3, y: 5},\n{x: 4, y: 12}\n];\n\ntfvis.render.linechart(surface, {values});",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> surface = document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">'demo'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> values = [<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {x: <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, y: <span class=\"jsnumbercolor\" style=\"color:#905\">20</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {x: <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, y: <span class=\"jsnumbercolor\" style=\"color:#905\">30</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {x: <span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, y: <span class=\"jsnumbercolor\" style=\"color:#905\">5</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {x: <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>, y: <span class=\"jsnumbercolor\" style=\"color:#905\">12</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\ntfvis.<span class=\"jspropertycolor\" style=\"color:black\">render</span>.<span class=\"jspropertycolor\" style=\"color:black\">linechart</span>(surface, {values});<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "let values = [\n{x: 1, y: 20},\n{x: 2, y: 30},\n{x: 3, y: 5},\n{x: 4, y: 12}\n];\n\ntfvis.render.linechart({name: 'my Lines'}, {values});",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> values = [<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {x: <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, y: <span class=\"jsnumbercolor\" style=\"color:#905\">20</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {x: <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, y: <span class=\"jsnumbercolor\" style=\"color:#905\">30</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {x: <span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, y: <span class=\"jsnumbercolor\" style=\"color:#905\">5</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {x: <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>, y: <span class=\"jsnumbercolor\" style=\"color:#905\">12</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\ntfvis.<span class=\"jspropertycolor\" style=\"color:black\">render</span>.<span class=\"jspropertycolor\" style=\"color:black\">linechart</span>({name: <span class=\"jsstringcolor\" style=\"color:green\">'my Lines'</span>}, {values});<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_tensorflow_visor.asp"
      }
    },
    {
      "title": "Example 1 Data",
      "code": [
        {
          "text": "{\n\"Name\": \"chevrolet chevelle malibu\",\n\"Miles_per_Gallon\": 18,\n\"Cylinders\": 8,\n\"Displacement\": 307,\n\"Horsepower\": 130,\n\"Weight_in_lbs\": 3504,\n\"Acceleration\": 12,\n\"Year\": \"1970-01-01\",\n\"Origin\": \"USA\"\n},\n{\n\"Name\": \"buick skylark 320\",\n\"Miles_per_Gallon\": 15,\n\"Cylinders\": 8,\n\"Displacement\": 350,\n\"Horsepower\": 165,\n\"Weight_in_lbs\": 3693,\n\"Acceleration\": 11.5,\n\"Year\": \"1970-01-01\",\n\"Origin\": \"USA\"\n},",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"Name\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"chevrolet chevelle malibu\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"Miles_per_Gallon\"</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">18</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"Cylinders\"</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"Displacement\"</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">307</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"Horsepower\"</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">130</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"Weight_in_lbs\"</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">3504</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"Acceleration\"</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">12</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"Year\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"1970-01-01\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"Origin\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"USA\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"Name\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"buick skylark 320\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"Miles_per_Gallon\"</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">15</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"Cylinders\"</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"Displacement\"</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">350</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"Horsepower\"</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">165</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"Weight_in_lbs\"</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">3693</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"Acceleration\"</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">11.5</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"Year\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"1970-01-01\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"Origin\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"USA\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "function extractData(obj) {\nreturn {x:obj.Horsepower, y:obj.Miles_per_Gallon};\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> extractData(obj) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> {x:obj.<span class=\"jspropertycolor\" style=\"color:black\">Horsepower</span>, y:obj.<span class=\"jspropertycolor\" style=\"color:black\">Miles_per_Gallon</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "function removeErrors(obj) {\nreturn obj.x != null && obj.y != null;\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> removeErrors(obj) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> obj.<span class=\"jspropertycolor\" style=\"color:black\">x</span> != <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span> &amp;&amp; obj.<span class=\"jspropertycolor\" style=\"color:black\">y</span> != <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "async function runTF() {\nconst jsonData = await fetch(\"cardata.json\");\nlet values = await jsonData.json();\nvalues = values.map(extractData).filter(removeErrors);\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> runTF() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> jsonData = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> fetch(<span class=\"jsstringcolor\" style=\"color:green\">\"cardata.json\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> values = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> jsonData.<span class=\"jspropertycolor\" style=\"color:black\">json</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  values = values.<span class=\"jspropertycolor\" style=\"color:black\">map</span>(extractData).<span class=\"jspropertycolor\" style=\"color:black\">filter</span>(removeErrors);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "function tfPlot(values, surface) {\ntfvis.render.scatterplot(surface,\n{values:values, series:['Original','Predicted']},\n{xLabel:'Horsepower', yLabel:'MPG'});\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> tfPlot(values, surface) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  tfvis.<span class=\"jspropertycolor\" style=\"color:black\">render</span>.<span class=\"jspropertycolor\" style=\"color:black\">scatterplot</span>(surface,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    {values:values, series:[<span class=\"jsstringcolor\" style=\"color:green\">'Original'</span>,<span class=\"jsstringcolor\" style=\"color:green\">'Predicted'</span>]},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    {xLabel:<span class=\"jsstringcolor\" style=\"color:green\">'Horsepower'</span>, yLabel:<span class=\"jsstringcolor\" style=\"color:green\">'MPG'</span>});<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_tensorflow_data.asp"
      }
    },
    {
      "title": "Example 1 Model",
      "code": [
        {
          "text": "tf.util.shuffle(data);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\ntf.<span class=\"jspropertycolor\" style=\"color:black\">util</span>.<span class=\"jspropertycolor\" style=\"color:black\">shuffle</span>(data);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// Map x values to Tensor inputs\nconst inputs = values.map(obj => obj.x);\n// Map y values to Tensor labels\nconst labels = values.map(obj => obj.y);\n\n// Convert inputs and labels to 2d tensors\nconst inputTensor = tf.tensor2d(inputs, [inputs.length, 1]);\nconst labelTensor = tf.tensor2d(labels, [labels.length, 1]);",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Map x values to Tensor inputs<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> inputs = values.<span class=\"jspropertycolor\" style=\"color:black\">map</span>(obj =&gt; obj.<span class=\"jspropertycolor\" style=\"color:black\">x</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Map y values to Tensor labels<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> labels = values.<span class=\"jspropertycolor\" style=\"color:black\">map</span>(obj =&gt; obj.<span class=\"jspropertycolor\" style=\"color:black\">y</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Convert inputs and labels to 2d tensors<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> inputTensor = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor2d</span>(inputs, [inputs.<span class=\"jspropertycolor\" style=\"color:black\">length</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>]);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> labelTensor = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor2d</span>(labels, [labels.<span class=\"jspropertycolor\" style=\"color:black\">length</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>]);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const inputMin = inputTensor.min();\nconst inputMax = inputTensor.max();\nconst labelMin = labelTensor.min();\nconst labelMax = labelTensor.max();\nconst nmInputs = inputTensor.sub(inputMin).div(inputMax.sub(inputMin));\nconst nmLabels = labelTensor.sub(labelMin).div(labelMax.sub(labelMin));",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> inputMin = inputTensor.<span class=\"jspropertycolor\" style=\"color:black\">min</span>();<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> inputMax = inputTensor.<span class=\"jspropertycolor\" style=\"color:black\">max</span>();<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> labelMin = labelTensor.<span class=\"jspropertycolor\" style=\"color:black\">min</span>();<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> labelMax = labelTensor.<span class=\"jspropertycolor\" style=\"color:black\">max</span>();<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> nmInputs = inputTensor.<span class=\"jspropertycolor\" style=\"color:black\">sub</span>(inputMin).<span class=\"jspropertycolor\" style=\"color:black\">div</span>(inputMax.<span class=\"jspropertycolor\" style=\"color:black\">sub</span>(inputMin));<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> nmLabels = labelTensor.<span class=\"jspropertycolor\" style=\"color:black\">sub</span>(labelMin).<span class=\"jspropertycolor\" style=\"color:black\">div</span>(labelMax.<span class=\"jspropertycolor\" style=\"color:black\">sub</span>(labelMin));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const model = tf.sequential();\nmodel.add(tf.layers.dense({inputShape: [1], units: 1, useBias: true}));\nmodel.add(tf.layers.dense({units: 1, useBias: true}));",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> model = tf.<span class=\"jspropertycolor\" style=\"color:black\">sequential</span>();<br/>\nmodel.<span class=\"jspropertycolor\" style=\"color:black\">add</span>(tf.<span class=\"jspropertycolor\" style=\"color:black\">layers</span>.<span class=\"jspropertycolor\" style=\"color:black\">dense</span>({inputShape: [<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>], units: <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, useBias: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>}));<br/>\nmodel.<span class=\"jspropertycolor\" style=\"color:black\">add</span>(tf.<span class=\"jspropertycolor\" style=\"color:black\">layers</span>.<span class=\"jspropertycolor\" style=\"color:black\">dense</span>({units: <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, useBias: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>}));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "model.compile({loss: 'meanSquaredError', optimizer:'sgd'});",
          "html": "<span class=\"jscolor\" style=\"color:black\">\nmodel.<span class=\"jspropertycolor\" style=\"color:black\">compile</span>({loss: <span class=\"jsstringcolor\" style=\"color:green\">'meanSquaredError'</span>, optimizer:<span class=\"jsstringcolor\" style=\"color:green\">'sgd'</span>});<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_tensorflow_modelling.asp"
      }
    },
    {
      "title": "Example 1 Training",
      "code": [
        {
          "text": "async function trainModel(model, inputs, labels, surface) {\nconst batchSize = 25;\nconst epochs = 50;\nconst callbacks = tfvis.show.fitCallbacks(surface, ['loss'], {callbacks:['onEpochEnd']})\nreturn await model.fit(inputs, labels,\n{batchSize, epochs, shuffle:true, callbacks:callbacks}\n);\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> trainModel(model, inputs, labels, surface) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> batchSize = <span class=\"jsnumbercolor\" style=\"color:#905\">25</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> epochs = <span class=\"jsnumbercolor\" style=\"color:#905\">50</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> callbacks = tfvis.<span class=\"jspropertycolor\" style=\"color:black\">show</span>.<span class=\"jspropertycolor\" style=\"color:black\">fitCallbacks</span>(surface, [<span class=\"jsstringcolor\" style=\"color:green\">'loss'</span>], {callbacks:[<span class=\"jsstringcolor\" style=\"color:green\">'onEpochEnd'</span>]})<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> model.<span class=\"jspropertycolor\" style=\"color:black\">fit</span>(inputs, labels,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    {batchSize, epochs, shuffle:<span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>, callbacks:callbacks}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  );<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "let unX = tf.linspace(0, 1, 100);\nlet unY = model.predict(unX.reshape([100, 1]));\n\nconst unNormunX = unX.mul(inputMax.sub(inputMin)).add(inputMin);\nconst unNormunY = unY.mul(labelMax.sub(labelMin)).add(labelMin);\n\nunX = unNormunX.dataSync();\nunY = unNormunY.dataSync();",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> unX = tf.<span class=\"jspropertycolor\" style=\"color:black\">linspace</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">100</span>);<br/>      \n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> unY = model.<span class=\"jspropertycolor\" style=\"color:black\">predict</span>(unX.<span class=\"jspropertycolor\" style=\"color:black\">reshape</span>([<span class=\"jsnumbercolor\" style=\"color:#905\">100</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>]));<br/>  <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>    \n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> unNormunX = unX.<span class=\"jspropertycolor\" style=\"color:black\">mul</span>(inputMax.<span class=\"jspropertycolor\" style=\"color:black\">sub</span>(inputMin)).<span class=\"jspropertycolor\" style=\"color:black\">add</span>(inputMin);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> unNormunY = unY.<span class=\"jspropertycolor\" style=\"color:black\">mul</span>(labelMax.<span class=\"jspropertycolor\" style=\"color:black\">sub</span>(labelMin)).<span class=\"jspropertycolor\" style=\"color:black\">add</span>(labelMin);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\nunX = unNormunX.<span class=\"jspropertycolor\" style=\"color:black\">dataSync</span>();<br/>\nunY = unNormunY.<span class=\"jspropertycolor\" style=\"color:black\">dataSync</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const predicted = Array.from(unX).map((val, i) => {\nreturn {x: val, y: unY[i]}\n});\n\n// Plot the Result\ntfPlot([values, predicted], surface1)",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> predicted = Array.<span class=\"jspropertycolor\" style=\"color:black\">from</span>(unX).<span class=\"jspropertycolor\" style=\"color:black\">map</span>((val, i) =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> {x: val, y: unY[i]}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Plot the Result<br/></span>\ntfPlot([values, predicted], surface1)<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_tensorflow_training.asp"
      }
    },
    {
      "title": "Example 2 Data",
      "code": [
        {
          "text": "{\n\"Avg. Area Income\": 79545.45857,\n\"Avg. Area House Age\": 5.682861322,\n\"Avg. AreaNumberofRooms\": 7.009188143,\n\"Avg. Area Number of Bedrooms\": 4.09,\n\"Area Population\": 23086.8005,\n\"Price\": 1059033.558,\n},\n{\n\"Avg. Area Income\": 79248.64245,\n\"Avg. Area House Age\": 6.002899808,\n\"Avg. AreaNumberofRooms\": 6.730821019,\n\"Avg. Area Number of Bedrooms\": 3.09,\n\"Area Population\": 40173.07217,\n\"Price\": 1505890.915,\n},",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jsstringcolor\" style=\"color:green\">\"Avg. Area Income\"</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">79545.45857</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jsstringcolor\" style=\"color:green\">\"Avg. Area House Age\"</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">5.682861322</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jsstringcolor\" style=\"color:green\">\"Avg. AreaNumberofRooms\"</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">7.009188143</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jsstringcolor\" style=\"color:green\">\"Avg. Area Number of Bedrooms\"</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">4.09</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jsstringcolor\" style=\"color:green\">\"Area Population\"</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">23086.8005</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jsstringcolor\" style=\"color:green\">\"Price\"</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">1059033.558</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jsstringcolor\" style=\"color:green\">\"Avg. Area Income\"</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">79248.64245</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jsstringcolor\" style=\"color:green\">\"Avg. Area House Age\"</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">6.002899808</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jsstringcolor\" style=\"color:green\">\"Avg. AreaNumberofRooms\"</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">6.730821019</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jsstringcolor\" style=\"color:green\">\"Avg. Area Number of Bedrooms\"</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">3.09</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jsstringcolor\" style=\"color:green\">\"Area Population\"</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">40173.07217</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jsstringcolor\" style=\"color:green\">\"Price\"</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">1505890.915</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>},<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "function extractData(obj) {\nreturn {x:obj.Horsepower, y:obj.Miles_per_Gallon};\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> extractData(obj) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> {x:obj.<span class=\"jspropertycolor\" style=\"color:black\">Horsepower</span>, y:obj.<span class=\"jspropertycolor\" style=\"color:black\">Miles_per_Gallon</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "function removeErrors(obj) {\nreturn obj.x != null && obj.y != null;\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> removeErrors(obj) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> obj.<span class=\"jspropertycolor\" style=\"color:black\">x</span> != <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span> &amp;&amp; obj.<span class=\"jspropertycolor\" style=\"color:black\">y</span> != <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "async function runTF() {\nconst jsonData = await fetch(\"cardata.json\");\nlet values = await jsonData.json();\nvalues = values.map(extractData).filter(removeErrors);\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> runTF() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> jsonData = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> fetch(<span class=\"jsstringcolor\" style=\"color:green\">\"cardata.json\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> values = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> jsonData.<span class=\"jspropertycolor\" style=\"color:black\">json</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  values = values.<span class=\"jspropertycolor\" style=\"color:black\">map</span>(extractData).<span class=\"jspropertycolor\" style=\"color:black\">filter</span>(removeErrors);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "function tfPlot(values, surface) {\ntfvis.render.scatterplot(surface,\n{values:values, series:['Original','Predicted']},\n{xLabel:'Rooms', yLabel:'Price',});\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> tfPlot(values, surface) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  tfvis.<span class=\"jspropertycolor\" style=\"color:black\">render</span>.<span class=\"jspropertycolor\" style=\"color:black\">scatterplot</span>(surface,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    {values:values, series:[<span class=\"jsstringcolor\" style=\"color:green\">'Original'</span>,<span class=\"jsstringcolor\" style=\"color:green\">'Predicted'</span>]},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    {xLabel:<span class=\"jsstringcolor\" style=\"color:green\">'Rooms'</span>, yLabel:<span class=\"jsstringcolor\" style=\"color:green\">'Price'</span>,});<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_tensorflow_ex2_data.asp"
      }
    },
    {
      "title": "Example 2 Model",
      "code": [
        {
          "text": "tf.util.shuffle(data);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\ntf.<span class=\"jspropertycolor\" style=\"color:black\">util</span>.<span class=\"jspropertycolor\" style=\"color:black\">shuffle</span>(data);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// Map x values to Tensor inputs\nconst inputs = values.map(obj => obj.x);\n// Map y values to Tensor labels\nconst labels = values.map(obj => obj.y);\n\n// Convert inputs and labels to 2d tensors\nconst inputTensor = tf.tensor2d(inputs, [inputs.length, 1]);\nconst labelTensor = tf.tensor2d(labels, [labels.length, 1]);",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Map x values to Tensor inputs<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> inputs = values.<span class=\"jspropertycolor\" style=\"color:black\">map</span>(obj =&gt; obj.<span class=\"jspropertycolor\" style=\"color:black\">x</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Map y values to Tensor labels<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> labels = values.<span class=\"jspropertycolor\" style=\"color:black\">map</span>(obj =&gt; obj.<span class=\"jspropertycolor\" style=\"color:black\">y</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Convert inputs and labels to 2d tensors<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> inputTensor = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor2d</span>(inputs, [inputs.<span class=\"jspropertycolor\" style=\"color:black\">length</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>]);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> labelTensor = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor2d</span>(labels, [labels.<span class=\"jspropertycolor\" style=\"color:black\">length</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>]);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const inputMin = inputTensor.min();\nconst inputMax = inputTensor.max();\nconst labelMin = labelTensor.min();\nconst labelMax = labelTensor.max();\nconst nmInputs = inputTensor.sub(inputMin).div(inputMax.sub(inputMin));\nconst nmLabels = labelTensor.sub(labelMin).div(labelMax.sub(labelMin));",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> inputMin = inputTensor.<span class=\"jspropertycolor\" style=\"color:black\">min</span>();<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> inputMax = inputTensor.<span class=\"jspropertycolor\" style=\"color:black\">max</span>();<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> labelMin = labelTensor.<span class=\"jspropertycolor\" style=\"color:black\">min</span>();<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> labelMax = labelTensor.<span class=\"jspropertycolor\" style=\"color:black\">max</span>();<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> nmInputs = inputTensor.<span class=\"jspropertycolor\" style=\"color:black\">sub</span>(inputMin).<span class=\"jspropertycolor\" style=\"color:black\">div</span>(inputMax.<span class=\"jspropertycolor\" style=\"color:black\">sub</span>(inputMin));<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> nmLabels = labelTensor.<span class=\"jspropertycolor\" style=\"color:black\">sub</span>(labelMin).<span class=\"jspropertycolor\" style=\"color:black\">div</span>(labelMax.<span class=\"jspropertycolor\" style=\"color:black\">sub</span>(labelMin));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const model = tf.sequential();\nmodel.add(tf.layers.dense({inputShape: [1], units: 1, useBias: true}));\nmodel.add(tf.layers.dense({units: 1, useBias: true}));",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> model = tf.<span class=\"jspropertycolor\" style=\"color:black\">sequential</span>();<br/>\nmodel.<span class=\"jspropertycolor\" style=\"color:black\">add</span>(tf.<span class=\"jspropertycolor\" style=\"color:black\">layers</span>.<span class=\"jspropertycolor\" style=\"color:black\">dense</span>({inputShape: [<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>], units: <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, useBias: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>}));<br/>\nmodel.<span class=\"jspropertycolor\" style=\"color:black\">add</span>(tf.<span class=\"jspropertycolor\" style=\"color:black\">layers</span>.<span class=\"jspropertycolor\" style=\"color:black\">dense</span>({units: <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, useBias: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>}));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "model.compile({loss: 'meanSquaredError', optimizer:'sgd'});",
          "html": "<span class=\"jscolor\" style=\"color:black\">\nmodel.<span class=\"jspropertycolor\" style=\"color:black\">compile</span>({loss: <span class=\"jsstringcolor\" style=\"color:green\">'meanSquaredError'</span>, optimizer:<span class=\"jsstringcolor\" style=\"color:green\">'sgd'</span>});<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_tensorflow_ex2_model.asp"
      }
    },
    {
      "title": "Example 2 Training",
      "code": [
        {
          "text": "async function trainModel(model, inputs, labels, surface) {\nconst batchSize = 25;\nconst epochs = 100;\nconst callbacks = tfvis.show.fitCallbacks(surface, ['loss'], {callbacks:['onEpochEnd']})\nreturn await model.fit(inputs, labels,\n{batchSize, epochs, shuffle:true, callbacks:callbacks}\n);\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> trainModel(model, inputs, labels, surface) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> batchSize = <span class=\"jsnumbercolor\" style=\"color:#905\">25</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> epochs = <span class=\"jsnumbercolor\" style=\"color:#905\">100</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> callbacks = tfvis.<span class=\"jspropertycolor\" style=\"color:black\">show</span>.<span class=\"jspropertycolor\" style=\"color:black\">fitCallbacks</span>(surface, [<span class=\"jsstringcolor\" style=\"color:green\">'loss'</span>], {callbacks:[<span class=\"jsstringcolor\" style=\"color:green\">'onEpochEnd'</span>]})<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> model.<span class=\"jspropertycolor\" style=\"color:black\">fit</span>(inputs, labels,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    {batchSize, epochs, shuffle:<span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>, callbacks:callbacks}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  );<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "let unX = tf.linspace(0, 1, 100);\nlet unY = model.predict(unX.reshape([100, 1]));\n\nconst unNormunX = unX.mul(inputMax.sub(inputMin)).add(inputMin);\nconst unNormunY = unY.mul(labelMax.sub(labelMin)).add(labelMin);\n\nunX = unNormunX.dataSync();\nunY = unNormunY.dataSync();",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> unX = tf.<span class=\"jspropertycolor\" style=\"color:black\">linspace</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">100</span>);<br/>      \n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> unY = model.<span class=\"jspropertycolor\" style=\"color:black\">predict</span>(unX.<span class=\"jspropertycolor\" style=\"color:black\">reshape</span>([<span class=\"jsnumbercolor\" style=\"color:#905\">100</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>]));<br/>  <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>    \n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> unNormunX = unX.<span class=\"jspropertycolor\" style=\"color:black\">mul</span>(inputMax.<span class=\"jspropertycolor\" style=\"color:black\">sub</span>(inputMin)).<span class=\"jspropertycolor\" style=\"color:black\">add</span>(inputMin);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> unNormunY = unY.<span class=\"jspropertycolor\" style=\"color:black\">mul</span>(labelMax.<span class=\"jspropertycolor\" style=\"color:black\">sub</span>(labelMin)).<span class=\"jspropertycolor\" style=\"color:black\">add</span>(labelMin);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\nunX = unNormunX.<span class=\"jspropertycolor\" style=\"color:black\">dataSync</span>();<br/>\nunY = unNormunY.<span class=\"jspropertycolor\" style=\"color:black\">dataSync</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const predicted = Array.from(unX).map((val, i) => {\nreturn {x: val, y: unY[i]}\n});\n\n// Plot the Result\ntfPlot([values, predicted], surface1)",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> predicted = Array.<span class=\"jspropertycolor\" style=\"color:black\">from</span>(unX).<span class=\"jspropertycolor\" style=\"color:black\">map</span>((val, i) =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> {x: val, y: unY[i]}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Plot the Result<br/></span>\ntfPlot([values, predicted], surface1)<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_tensorflow_ex2_training.asp"
      }
    },
    {
      "title": "HTML Canvas",
      "code": [
        {
          "text": "const xArray = [50,60,70,80,90,100,110,120,130,140,150];\nconst yArray = [7,8,8,9,9,9,10,11,14,14,15];\n\n// Plot Scatter\nctx.fillStyle = \"red\";\nfor (let i = 0; i < xArray.length-1; i++) {\nlet x = xArray[i]*400/150;\nlet y = yArray[i]*400/15;\nctx.beginPath();\nctx.ellipse(x, y, 2, 3, 0, 0, Math.PI * 2);\nctx.fill();\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xArray = [<span class=\"jsnumbercolor\" style=\"color:#905\">50</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">60</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">70</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">80</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">90</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">100</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">110</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">120</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">130</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">140</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">150</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yArray = [<span class=\"jsnumbercolor\" style=\"color:#905\">7</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">10</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">11</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">15</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Plot Scatter<br/></span>\nctx.<span class=\"jspropertycolor\" style=\"color:black\">fillStyle</span> = <span class=\"jsstringcolor\" style=\"color:green\">\"red\"</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; xArray.<span class=\"jspropertycolor\" style=\"color:black\">length</span>-<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x = xArray[i]*<span class=\"jsnumbercolor\" style=\"color:#905\">400</span>/<span class=\"jsnumbercolor\" style=\"color:#905\">150</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> y = yArray[i]*<span class=\"jsnumbercolor\" style=\"color:#905\">400</span>/<span class=\"jsnumbercolor\" style=\"color:#905\">15</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  ctx.<span class=\"jspropertycolor\" style=\"color:black\">beginPath</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  ctx.<span class=\"jspropertycolor\" style=\"color:black\">ellipse</span>(x, y, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, Math.<span class=\"jspropertycolor\" style=\"color:black\">PI</span> * <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  ctx.<span class=\"jspropertycolor\" style=\"color:black\">fill</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const xMax = canvas.height = canvas.width;\nconst slope = 1.2;\nconst intercept = 70;\n\n// Plot Line\nctx.beginPath();\nctx.moveTo(0, intercept);\nctx.lineTo(xMax, xMax * slope + intercept);\nctx.stroke();",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xMax = canvas.<span class=\"jspropertycolor\" style=\"color:black\">height</span> = canvas.<span class=\"jspropertycolor\" style=\"color:black\">width</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> slope = <span class=\"jsnumbercolor\" style=\"color:#905\">1.2</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> intercept = <span class=\"jsnumbercolor\" style=\"color:#905\">70</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Plot Line<br/></span>\nctx.<span class=\"jspropertycolor\" style=\"color:black\">beginPath</span>();<br/>\nctx.<span class=\"jspropertycolor\" style=\"color:black\">moveTo</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, intercept);<br/>\nctx.<span class=\"jspropertycolor\" style=\"color:black\">lineTo</span>(xMax, xMax * slope + intercept);<br/>\nctx.<span class=\"jspropertycolor\" style=\"color:black\">stroke</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "let xMax = canvas.height;\nlet yMax = canvas.width;\nlet slope = 1.2;\nlet intercept = 70;\n\nconst xArray = [50,60,70,80,90,100,110,120,130,140,150];\nconst yArray = [7,8,8,9,9,9,10,11,14,14,15];\n\n// Plot Scatter\nctx.fillStyle = \"red\";\nfor (let i = 0; i < xArray.length-1; i++) {\nlet x = xArray[i] * xMax/150;\nlet y = yArray[i] * yMax/15;\nctx.beginPath();\nctx.ellipse(x, y, 2, 3, 0, 0, Math.PI * 2);\nctx.fill();\n}\n\n// Plot Line\nctx.beginPath();\nctx.moveTo(0, intercept);\nctx.lineTo(xMax, xMax * slope + intercept);\nctx.stroke();",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> xMax = canvas.<span class=\"jspropertycolor\" style=\"color:black\">height</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> yMax = canvas.<span class=\"jspropertycolor\" style=\"color:black\">width</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> slope = <span class=\"jsnumbercolor\" style=\"color:#905\">1.2</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> intercept = <span class=\"jsnumbercolor\" style=\"color:#905\">70</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xArray = [<span class=\"jsnumbercolor\" style=\"color:#905\">50</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">60</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">70</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">80</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">90</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">100</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">110</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">120</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">130</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">140</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">150</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yArray = [<span class=\"jsnumbercolor\" style=\"color:#905\">7</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">10</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">11</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">15</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Plot Scatter<br/></span>\nctx.<span class=\"jspropertycolor\" style=\"color:black\">fillStyle</span> = <span class=\"jsstringcolor\" style=\"color:green\">\"red\"</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; xArray.<span class=\"jspropertycolor\" style=\"color:black\">length</span>-<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x = xArray[i] * xMax/<span class=\"jsnumbercolor\" style=\"color:#905\">150</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> y = yArray[i] * yMax/<span class=\"jsnumbercolor\" style=\"color:#905\">15</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  ctx.<span class=\"jspropertycolor\" style=\"color:black\">beginPath</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  ctx.<span class=\"jspropertycolor\" style=\"color:black\">ellipse</span>(x, y, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, Math.<span class=\"jspropertycolor\" style=\"color:black\">PI</span> * <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  ctx.<span class=\"jspropertycolor\" style=\"color:black\">fill</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Plot Line<br/></span>\nctx.<span class=\"jspropertycolor\" style=\"color:black\">beginPath</span>();<br/>\nctx.<span class=\"jspropertycolor\" style=\"color:black\">moveTo</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, intercept);<br/>\nctx.<span class=\"jspropertycolor\" style=\"color:black\">lineTo</span>(xMax, xMax * slope + intercept);<br/>\nctx.<span class=\"jspropertycolor\" style=\"color:black\">stroke</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "function XYPlotter(id) {\n\nthis.canvas = document.getElementById(id);\nthis.ctx = this.canvas.getContext(\"2d\");\nthis.xMin = 0;\nthis.yMin = 0;\nthis.xMax = this.canvas.width;\nthis.yMax = this.canvas.height;\n.\n.",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> XYPlotter(id) {<br/><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">canvas</span> = document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(id);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">ctx</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">canvas</span>.<span class=\"jspropertycolor\" style=\"color:black\">getContext</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"2d\"</span>);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">xMin</span> = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">yMin</span> = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">xMax</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">canvas</span>.<span class=\"jspropertycolor\" style=\"color:black\">width</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">yMax</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">canvas</span>.<span class=\"jspropertycolor\" style=\"color:black\">height</span>;<br/>\n.<span class=\"jspropertycolor\" style=\"color:black\"/><br/>\n.<span class=\"jspropertycolor\" style=\"color:black\"/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "this.plotLine = function(x0, y0, x, y, color) {\nthis.ctx.moveTo(x0, y0);\nthis.ctx.lineTo(x, y);\nthis.ctx.strokeStyle = color;\nthis.ctx.stroke();\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">plotLine</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>(x0, y0, x, y, color) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">ctx</span>.<span class=\"jspropertycolor\" style=\"color:black\">moveTo</span>(x0, y0);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">ctx</span>.<span class=\"jspropertycolor\" style=\"color:black\">lineTo</span>(x, y);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">ctx</span>.<span class=\"jspropertycolor\" style=\"color:black\">strokeStyle</span> = color;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">ctx</span>.<span class=\"jspropertycolor\" style=\"color:black\">stroke</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "this.transformXY = function() {\nthis.ctx.transform(1, 0, 0, -1, 0, this.canvas.height)\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">transformXY</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">ctx</span>.<span class=\"jspropertycolor\" style=\"color:black\">transform</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, -<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">canvas</span>.<span class=\"jspropertycolor\" style=\"color:black\">height</span>)<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "this.plotPoints = function(n, xArr, yArr, color, radius = 3) {\nfor (let i = 0; i < n; i++) {\nthis.ctx.fillStyle = color;\nthis.ctx.beginPath();\nthis.ctx.ellipse(xArr[i], yArr[i], radius, radius, 0, 0, Math.PI * 2);\nthis.ctx.fill();\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">plotPoints</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>(n, xArr, yArr, color, radius = <span class=\"jsnumbercolor\" style=\"color:#905\">3</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; n; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">ctx</span>.<span class=\"jspropertycolor\" style=\"color:black\">fillStyle</span> = color;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">ctx</span>.<span class=\"jspropertycolor\" style=\"color:black\">beginPath</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">ctx</span>.<span class=\"jspropertycolor\" style=\"color:black\">ellipse</span>(xArr[i], yArr[i], radius, radius, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, Math.<span class=\"jspropertycolor\" style=\"color:black\">PI</span> * <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">ctx</span>.<span class=\"jspropertycolor\" style=\"color:black\">fill</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// Create a Plotter\nlet myPlotter = new XYPlotter(\"myCanvas\");\n\n// Create random XY Points\nnumPoints = 500;\nconst xPoints = Array(numPoints).fill(0).map(function(){return Math.random() * myPlotter.xMax});\nconst yPoints = Array(numPoints).fill(0).map(function(){return Math.random() * myPlotter.yMax});\n\n// Plot the Points\nmyPlotter.plotPoints(numPoints, xPoints, yPoints, \"blue\");",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Create a Plotter<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> myPlotter = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> XYPlotter(<span class=\"jsstringcolor\" style=\"color:green\">\"myCanvas\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Create random XY Points<br/></span>\nnumPoints = <span class=\"jsnumbercolor\" style=\"color:#905\">500</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xPoints = Array(numPoints).<span class=\"jspropertycolor\" style=\"color:black\">fill</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>).<span class=\"jspropertycolor\" style=\"color:black\">map</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>(){<span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> Math.<span class=\"jspropertycolor\" style=\"color:black\">random</span>() * myPlotter.<span class=\"jspropertycolor\" style=\"color:black\">xMax</span>});<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yPoints = Array(numPoints).<span class=\"jspropertycolor\" style=\"color:black\">fill</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>).<span class=\"jspropertycolor\" style=\"color:black\">map</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>(){<span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> Math.<span class=\"jspropertycolor\" style=\"color:black\">random</span>() * myPlotter.<span class=\"jspropertycolor\" style=\"color:black\">yMax</span>});<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Plot the Points<br/></span>\nmyPlotter.<span class=\"jspropertycolor\" style=\"color:black\">plotPoints</span>(numPoints, xPoints, yPoints, <span class=\"jsstringcolor\" style=\"color:green\">\"blue\"</span>);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "function XYPlotter(id) {\n\nthis.canvas = document.getElementById(id);\nthis.ctx = this.canvas.getContext(\"2d\");\nthis.xMin = 0;\nthis.yMin = 0;\nthis.xMax = this.canvas.width;\nthis.yMax = this.canvas.height;\n\n// Plot Line Function\nthis.plotLine = function(x0, y0, x, y, color) {\nthis.ctx.moveTo(x0, y0);\nthis.ctx.lineTo(x, y);\nthis.ctx.strokeStyle = color;\nthis.ctx.stroke();\n}\n\n// Transform XY Function\nthis.transformXY = function() {\nthis.ctx.transform(1, 0, 0, -1, 0, this.canvas.height)\n}\n\n// Pot Points Function\nthis.plotPoints = function(n, xArr, yArr, color, radius = 3) {\nfor (let i = 0; i < n; i++) {\nthis.ctx.fillStyle = color;\nthis.ctx.beginPath();\nthis.ctx.ellipse(xArr[i], yArr[i], radius, radius, 0, 0, Math.PI * 2);\nthis.ctx.fill();\n}\n}\n\n} // End Plotter Object",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> XYPlotter(id) {<br/><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">canvas</span> = document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(id);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">ctx</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">canvas</span>.<span class=\"jspropertycolor\" style=\"color:black\">getContext</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"2d\"</span>);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">xMin</span> = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">yMin</span> = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">xMax</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">canvas</span>.<span class=\"jspropertycolor\" style=\"color:black\">width</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">yMax</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">canvas</span>.<span class=\"jspropertycolor\" style=\"color:black\">height</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Plot Line Function<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">plotLine</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>(x0, y0, x, y, color) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">ctx</span>.<span class=\"jspropertycolor\" style=\"color:black\">moveTo</span>(x0, y0);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">ctx</span>.<span class=\"jspropertycolor\" style=\"color:black\">lineTo</span>(x, y);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">ctx</span>.<span class=\"jspropertycolor\" style=\"color:black\">strokeStyle</span> = color;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">ctx</span>.<span class=\"jspropertycolor\" style=\"color:black\">stroke</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Transform XY Function<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">transformXY</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">ctx</span>.<span class=\"jspropertycolor\" style=\"color:black\">transform</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, -<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">canvas</span>.<span class=\"jspropertycolor\" style=\"color:black\">height</span>)<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Pot Points Function<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">plotPoints</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>(n, xArr, yArr, color, radius = <span class=\"jsnumbercolor\" style=\"color:#905\">3</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; n; i++) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">ctx</span>.<span class=\"jspropertycolor\" style=\"color:black\">fillStyle</span> = color;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">ctx</span>.<span class=\"jspropertycolor\" style=\"color:black\">beginPath</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">ctx</span>.<span class=\"jspropertycolor\" style=\"color:black\">ellipse</span>(xArr[i], yArr[i], radius, radius, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, Math.<span class=\"jspropertycolor\" style=\"color:black\">PI</span> * <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">ctx</span>.<span class=\"jspropertycolor\" style=\"color:black\">fill</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>} <span class=\"commentcolor\" style=\"color:slategray\">// End Plotter Object\n </span></span>"
        },
        {
          "text": "<script src=\"myplotlib.js\"></script>",
          "html": "<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>script<span class=\"attributecolor\" style=\"color:green\"> src<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"myplotlib.js\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"jscolor\" style=\"color:black\"/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/script<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_canvas.asp"
      }
    },
    {
      "title": "Plotly.js",
      "code": [
        {
          "text": "const xArray = [50,60,70,80,90,100,110,120,130,140,150];\nconst yArray = [7,8,8,9,9,9,10,11,14,14,15];\n\n// Define Data\nconst data = [{\nx: xArray,\ny: yArray,\nmode:\"markers\",\ntype:\"scatter\"\n}];\n\n// Define Layout\nconst layout = {\nxaxis: {range: [40, 160], title: \"Square Meters\"},\nyaxis: {range: [5, 16], title: \"Price in Millions\"},\ntitle: \"House Prices vs. Size\"\n};\n\nPlotly.newPlot(\"myPlot\", data, layout);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xArray = [<span class=\"jsnumbercolor\" style=\"color:#905\">50</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">60</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">70</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">80</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">90</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">100</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">110</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">120</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">130</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">140</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">150</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yArray = [<span class=\"jsnumbercolor\" style=\"color:#905\">7</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">10</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">11</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">15</span>];<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Define Data<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> data = [{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  x: xArray,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  y: yArray,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  mode:<span class=\"jsstringcolor\" style=\"color:green\">\"markers\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type:<span class=\"jsstringcolor\" style=\"color:green\">\"scatter\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}];<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Define Layout<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> layout = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  xaxis: {range: [<span class=\"jsnumbercolor\" style=\"color:#905\">40</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">160</span>], title: <span class=\"jsstringcolor\" style=\"color:green\">\"Square Meters\"</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  yaxis: {range: [<span class=\"jsnumbercolor\" style=\"color:#905\">5</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">16</span>], title: <span class=\"jsstringcolor\" style=\"color:green\">\"Price in Millions\"</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  title: <span class=\"jsstringcolor\" style=\"color:green\">\"House Prices vs. Size\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><br/>\nPlotly.<span class=\"jspropertycolor\" style=\"color:black\">newPlot</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"myPlot\"</span>, data, layout);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const xArray = [50,60,70,80,90,100,110,120,130,140,150];\nconst yArray = [7,8,8,9,9,9,10,11,14,14,15];\n\n// Define Data\nconst data = [{\nx: xArray,\ny: yArray,\nmode: \"lines\",\ntype: \"scatter\"\n}];\n\n// Define Layout\nconst layout = {\nxaxis: {range: [40, 160], title: \"Square Meters\"},\nyaxis: {range: [5, 16], title: \"Price in Millions\"},\ntitle: \"House Prices vs Size\"\n};\n\n// Display using Plotly\nPlotly.newPlot(\"myPlot\", data, layout);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xArray = [<span class=\"jsnumbercolor\" style=\"color:#905\">50</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">60</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">70</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">80</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">90</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">100</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">110</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">120</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">130</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">140</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">150</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yArray = [<span class=\"jsnumbercolor\" style=\"color:#905\">7</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">10</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">11</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">15</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Define Data<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> data = [{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  x: xArray,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  y: yArray,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  mode: <span class=\"jsstringcolor\" style=\"color:green\">\"lines\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type: <span class=\"jsstringcolor\" style=\"color:green\">\"scatter\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Define Layout<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> layout = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  xaxis: {range: [<span class=\"jsnumbercolor\" style=\"color:#905\">40</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">160</span>], title: <span class=\"jsstringcolor\" style=\"color:green\">\"Square Meters\"</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  yaxis: {range: [<span class=\"jsnumbercolor\" style=\"color:#905\">5</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">16</span>], title: <span class=\"jsstringcolor\" style=\"color:green\">\"Price in Millions\"</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  title: <span class=\"jsstringcolor\" style=\"color:green\">\"House Prices vs Size\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Display using Plotly<br/></span>\nPlotly.<span class=\"jspropertycolor\" style=\"color:black\">newPlot</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"myPlot\"</span>, data, layout);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "let exp = \"x + 17\";\n\n// Generate values\nconst xValues = [];\nconst yValues = [];\nfor (let x = 0; x <= 10; x += 1) {\nyValues.push(eval(exp));\nxValues.push(x);\n}\n\n// Define Data\nconst data = [{\nx: xValues,\ny: yValues,\nmode: \"lines\"\n}];\n\n// Define Layout\nconst layout = {title: \"y = \" + exp};\n\n// Display using Plotly\nPlotly.newPlot(\"myPlot\", data, layout);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> exp = <span class=\"jsstringcolor\" style=\"color:green\">\"x + 17\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Generate values<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xValues = [];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yValues = [];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; x &lt;= <span class=\"jsnumbercolor\" style=\"color:#905\">10</span>; x += <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  yValues.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">eval</span>(exp));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  xValues.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(x);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Define Data<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> data = [{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  x: xValues,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  y: yValues,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  mode: <span class=\"jsstringcolor\" style=\"color:green\">\"lines\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Define Layout<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> layout = {title: <span class=\"jsstringcolor\" style=\"color:green\">\"y = \"</span> + exp};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Display using Plotly<br/></span>\nPlotly.<span class=\"jspropertycolor\" style=\"color:black\">newPlot</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"myPlot\"</span>, data, layout);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "let exp1 = \"x\";\nlet exp2 = \"1.5*x\";\nlet exp3 = \"1.5*x + 7\";\n\n// Generate values\n\nconst x1Values = [];\nconst x2Values = [];\nconst x3Values = [];\nconst y1Values = [];\nconst y2Values = [];\nconst y3Values = [];\n\nfor (let x = 0; x <= 10; x += 1) {\nx1Values.push(x);\nx2Values.push(x);\nx3Values.push(x);\ny1Values.push(eval(exp1));\ny2Values.push(eval(exp2));\ny3Values.push(eval(exp3));\n}\n\n// Define Data\nconst data = [\n{x: x1Values, y: y1Values, mode:\"lines\"},\n{x: x2Values, y: y2Values, mode:\"lines\"},\n{x: x3Values, y: y3Values, mode:\"lines\"}\n];\n\n// Define Layout\nconst layout = {title: \"[y=\" + exp1 + \"] [y=\" + exp2 + \"] [y=\" + exp3 + \"]\"};\n\n// Display using Plotly\nPlotly.newPlot(\"myPlot\", data, layout);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> exp1 = <span class=\"jsstringcolor\" style=\"color:green\">\"x\"</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> exp2 = <span class=\"jsstringcolor\" style=\"color:green\">\"1.5*x\"</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> exp3 = <span class=\"jsstringcolor\" style=\"color:green\">\"1.5*x + 7\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Generate values<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> x1Values = [];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> x2Values = [];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> x3Values = [];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> y1Values = [];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> y2Values = [];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> y3Values = [];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; x &lt;= <span class=\"jsnumbercolor\" style=\"color:#905\">10</span>; x += <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  x1Values.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(x);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  x2Values.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(x);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  x3Values.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(x);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  y1Values.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">eval</span>(exp1));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  y2Values.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">eval</span>(exp2));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  y3Values.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">eval</span>(exp3));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Define Data<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> data = [<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {x: x1Values, y: y1Values, mode:<span class=\"jsstringcolor\" style=\"color:green\">\"lines\"</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {x: x2Values, y: y2Values, mode:<span class=\"jsstringcolor\" style=\"color:green\">\"lines\"</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {x: x3Values, y: y3Values, mode:<span class=\"jsstringcolor\" style=\"color:green\">\"lines\"</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Define Layout<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> layout = {title: <span class=\"jsstringcolor\" style=\"color:green\">\"[y=\"</span> + exp1 + <span class=\"jsstringcolor\" style=\"color:green\">\"]  [y=\"</span> + exp2 + <span class=\"jsstringcolor\" style=\"color:green\">\"]  [y=\"</span> + exp3 + <span class=\"jsstringcolor\" style=\"color:green\">\"]\"</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Display using Plotly<br/></span>\nPlotly.<span class=\"jspropertycolor\" style=\"color:black\">newPlot</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"myPlot\"</span>, data, layout);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const xArray = [\"Italy\",\"France\",\"Spain\",\"USA\",\"Argentina\"];\nconst yArray = [55, 49, 44, 24, 15];\n\nconst data = [{\nx: xArray,\ny: yArray,\ntype: \"bar\"  }];\nconst layout = {title:\"World Wide Wine Production\"};\n\nPlotly.newPlot(\"myPlot\", data, layout);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xArray = [<span class=\"jsstringcolor\" style=\"color:green\">\"Italy\"</span>,<span class=\"jsstringcolor\" style=\"color:green\">\"France\"</span>,<span class=\"jsstringcolor\" style=\"color:green\">\"Spain\"</span>,<span class=\"jsstringcolor\" style=\"color:green\">\"USA\"</span>,<span class=\"jsstringcolor\" style=\"color:green\">\"Argentina\"</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yArray = [<span class=\"jsnumbercolor\" style=\"color:#905\">55</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">49</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">44</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">24</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">15</span>];<br/><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> data = [{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  x: xArray,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  y: yArray,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type: <span class=\"jsstringcolor\" style=\"color:green\">\"bar\"</span> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> layout = {title:<span class=\"jsstringcolor\" style=\"color:green\">\"World Wide Wine Production\"</span>};<br/><br/>\nPlotly.<span class=\"jspropertycolor\" style=\"color:black\">newPlot</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"myPlot\"</span>, data, layout);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const xArray = [55, 49, 44, 24, 15];\nconst yArray = [\"Italy\",\"France\",\"Spain\",\"USA\",\"Argentina\"];\n\nconst data = [{\nx: xArray,\ny: yArray,\ntype: \"bar\",\norientation: \"h\"\n}];\n\nconst layout = {title:\"World Wide Wine Production\"};\n\nPlotly.newPlot(\"myPlot\", data, layout);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xArray = [<span class=\"jsnumbercolor\" style=\"color:#905\">55</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">49</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">44</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">24</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">15</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yArray = [<span class=\"jsstringcolor\" style=\"color:green\">\"Italy\"</span>,<span class=\"jsstringcolor\" style=\"color:green\">\"France\"</span>,<span class=\"jsstringcolor\" style=\"color:green\">\"Spain\"</span>,<span class=\"jsstringcolor\" style=\"color:green\">\"USA\"</span>,<span class=\"jsstringcolor\" style=\"color:green\">\"Argentina\"</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> data = [{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  x: xArray,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  y: yArray,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type: <span class=\"jsstringcolor\" style=\"color:green\">\"bar\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  orientation: <span class=\"jsstringcolor\" style=\"color:green\">\"h\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> layout = {title:<span class=\"jsstringcolor\" style=\"color:green\">\"World Wide Wine Production\"</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\nPlotly.<span class=\"jspropertycolor\" style=\"color:black\">newPlot</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"myPlot\"</span>, data, layout);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const data = [{\nlabels: xArray,\nvalues: yArray,\ntype: \"pie\"\n}];",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> data = [{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  labels: xArray,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  values: yArray,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type: <span class=\"jsstringcolor\" style=\"color:green\">\"pie\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}];<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const data = [{\nlabels: xArray,\nvalues: yArray,\nhole: .4,\ntype: \"pie\"\n}];",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> data = [{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  labels: xArray,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  values: yArray,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  hole: <span class=\"jsnumbercolor\" style=\"color:#905\">.4</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type: <span class=\"jsstringcolor\" style=\"color:green\">\"pie\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "let exp = \"Math.sin(x)\";\n\n// Generate values\nconst xValues = [];\nconst yValues = [];\nfor (let x = 0; x <= 10; x += 0.1) {\nyValues.push(eval(exp));\nxValues.push(x);\n}\n\n// Display using Plotly\nconst data = [{x:xValues, y:yValues, mode:\"lines\"}];\nconst layout = {title: \"y = \" + exp};\nPlotly.newPlot(\"myPlot\", data, layout);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> exp = <span class=\"jsstringcolor\" style=\"color:green\">\"Math.sin(x)\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Generate values<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xValues = [];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yValues = [];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; x &lt;= <span class=\"jsnumbercolor\" style=\"color:#905\">10</span>; x += <span class=\"jsnumbercolor\" style=\"color:#905\">0.1</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  yValues.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">eval</span>(exp));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  xValues.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(x);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Display using Plotly<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> data = [{x:xValues, y:yValues, mode:<span class=\"jsstringcolor\" style=\"color:green\">\"lines\"</span>}];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> layout = {title: <span class=\"jsstringcolor\" style=\"color:green\">\"y = \"</span> + exp};<br/>\nPlotly.<span class=\"jspropertycolor\" style=\"color:black\">newPlot</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"myPlot\"</span>, data, layout);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_plotly.asp"
      }
    },
    {
      "title": "Chart.js",
      "code": [
        {
          "text": "<script\nsrc=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js\">\n</script>",
          "html": "<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>script<span class=\"attributecolor\" style=\"color:green\"><br/>\nsrc<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"jscolor\" style=\"color:black\"><br/>\n</span><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/script<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span>"
        },
        {
          "text": "<canvas id=\"myChart\" style=\"width:100%;max-width:700px\"></canvas>",
          "html": "<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>canvas<span class=\"attributecolor\" style=\"color:green\"> id<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"myChart\"</span> style<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"width:100%;max-width:700px\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/canvas<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span>"
        },
        {
          "text": "const myChart = new Chart(\"myChart\", {\ntype: \"scatter\",\ndata: {},\noptions: {}\n});",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> myChart = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Chart(<span class=\"jsstringcolor\" style=\"color:green\">\"myChart\"</span>, {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type: <span class=\"jsstringcolor\" style=\"color:green\">\"scatter\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  data: {},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  options: {}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const myChart = new Chart(\"myChart\", {\ntype: \"line\",\ndata: {},\noptions: {}\n});",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> myChart = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Chart(<span class=\"jsstringcolor\" style=\"color:green\">\"myChart\"</span>, {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type: <span class=\"jsstringcolor\" style=\"color:green\">\"line\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  data: {},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  options: {}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const myChart = new Chart(\"myChart\", {\ntype: \"bar\",\ndata: {},\noptions: {}\n});",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> myChart = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Chart(<span class=\"jsstringcolor\" style=\"color:green\">\"myChart\"</span>, {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type: <span class=\"jsstringcolor\" style=\"color:green\">\"bar\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  data: {},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  options: {}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const xyValues = [\n{x:50, y:7},\n{x:60, y:8},\n{x:70, y:8},\n{x:80, y:9},\n{x:90, y:9},\n{x:100, y:9},\n{x:110, y:10},\n{x:120, y:11},\n{x:130, y:14},\n{x:140, y:14},\n{x:150, y:15}\n];\n\nnew Chart(\"myChart\", {\ntype: \"scatter\",\ndata: {\ndatasets: [{\npointRadius: 4,\npointBackgroundColor: \"rgba(0,0,255,1)\",\ndata: xyValues\n}]\n},\noptions:{...}\n});",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xyValues = [<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {x:<span class=\"jsnumbercolor\" style=\"color:#905\">50</span>, y:<span class=\"jsnumbercolor\" style=\"color:#905\">7</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {x:<span class=\"jsnumbercolor\" style=\"color:#905\">60</span>, y:<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {x:<span class=\"jsnumbercolor\" style=\"color:#905\">70</span>, y:<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {x:<span class=\"jsnumbercolor\" style=\"color:#905\">80</span>, y:<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {x:<span class=\"jsnumbercolor\" style=\"color:#905\">90</span>, y:<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {x:<span class=\"jsnumbercolor\" style=\"color:#905\">100</span>, y:<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {x:<span class=\"jsnumbercolor\" style=\"color:#905\">110</span>, y:<span class=\"jsnumbercolor\" style=\"color:#905\">10</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {x:<span class=\"jsnumbercolor\" style=\"color:#905\">120</span>, y:<span class=\"jsnumbercolor\" style=\"color:#905\">11</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {x:<span class=\"jsnumbercolor\" style=\"color:#905\">130</span>, y:<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {x:<span class=\"jsnumbercolor\" style=\"color:#905\">140</span>, y:<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {x:<span class=\"jsnumbercolor\" style=\"color:#905\">150</span>, y:<span class=\"jsnumbercolor\" style=\"color:#905\">15</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Chart(<span class=\"jsstringcolor\" style=\"color:green\">\"myChart\"</span>, {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type: <span class=\"jsstringcolor\" style=\"color:green\">\"scatter\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  data: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    datasets: [{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      pointRadius: <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      pointBackgroundColor: <span class=\"jsstringcolor\" style=\"color:green\">\"rgba(0,0,255,1)\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      data: xyValues<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }]<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  options:{.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const xValues = [50,60,70,80,90,100,110,120,130,140,150];\nconst yValues = [7,8,8,9,9,9,10,11,14,14,15];\n\nnew Chart(\"myChart\", {\ntype: \"line\",\ndata: {\nlabels: xValues,\ndatasets: [{\nbackgroundColor:\"rgba(0,0,255,1.0)\",\nborderColor: \"rgba(0,0,255,0.1)\",\ndata: yValues\n}]\n},\noptions:{...}\n});",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xValues = [<span class=\"jsnumbercolor\" style=\"color:#905\">50</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">60</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">70</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">80</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">90</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">100</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">110</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">120</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">130</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">140</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">150</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yValues = [<span class=\"jsnumbercolor\" style=\"color:#905\">7</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">10</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">11</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">15</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Chart(<span class=\"jsstringcolor\" style=\"color:green\">\"myChart\"</span>, {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type: <span class=\"jsstringcolor\" style=\"color:green\">\"line\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  data: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    labels: xValues,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    datasets: [{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      backgroundColor:<span class=\"jsstringcolor\" style=\"color:green\">\"rgba(0,0,255,1.0)\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      borderColor: <span class=\"jsstringcolor\" style=\"color:green\">\"rgba(0,0,255,0.1)\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      data: yValues<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }]<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  options:{.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "borderColor: \"rgba(0,0,0,0)\",",
          "html": "<span class=\"jscolor\" style=\"color:black\">\nborderColor: <span class=\"jsstringcolor\" style=\"color:green\">\"rgba(0,0,0,0)\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const xValues = [100,200,300,400,500,600,700,800,900,1000];\n\nnew Chart(\"myChart\", {\ntype: \"line\",\ndata: {\nlabels: xValues,\ndatasets: [{\ndata: [860,1140,1060,1060,1070,1110,1330,2210,7830,2478],\nborderColor: \"red\",\nfill: false\n},{\ndata: [1600,1700,1700,1900,2000,2700,4000,5000,6000,7000],\nborderColor: \"green\",\nfill: false\n},{\ndata: [300,700,2000,5000,6000,4000,2000,1000,200,100],\nborderColor: \"blue\",\nfill: false\n}]\n},\noptions: {\nlegend: {display: false}\n}\n});",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xValues = [<span class=\"jsnumbercolor\" style=\"color:#905\">100</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">200</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">300</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">400</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">500</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">600</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">700</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">800</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">900</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">1000</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Chart(<span class=\"jsstringcolor\" style=\"color:green\">\"myChart\"</span>, {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type: <span class=\"jsstringcolor\" style=\"color:green\">\"line\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  data: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    labels: xValues,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    datasets: [{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      data: [<span class=\"jsnumbercolor\" style=\"color:#905\">860</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">1140</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">1060</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">1060</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">1070</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">1110</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">1330</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">2210</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">7830</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">2478</span>],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      borderColor: <span class=\"jsstringcolor\" style=\"color:green\">\"red\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      fill: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">false</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    },{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      data: [<span class=\"jsnumbercolor\" style=\"color:#905\">1600</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">1700</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">1700</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">1900</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">2000</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">2700</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">4000</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">5000</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">6000</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">7000</span>],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      borderColor: <span class=\"jsstringcolor\" style=\"color:green\">\"green\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      fill: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">false</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    },{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      data: [<span class=\"jsnumbercolor\" style=\"color:#905\">300</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">700</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">2000</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">5000</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">6000</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">4000</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">2000</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">1000</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">200</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">100</span>],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      borderColor: <span class=\"jsstringcolor\" style=\"color:green\">\"blue\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      fill: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">false</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }]<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  options: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    legend: {display: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">false</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const xValues = [];\nconst yValues = [];\ngenerateData(\"x * 2 + 7\", 0, 10, 0.5);\n\nnew Chart(\"myChart\", {\ntype: \"line\",\ndata: {\nlabels: xValues,\ndatasets: [{\nfill: false,\npointRadius: 1,\nborderColor: \"rgba(255,0,0,0.5)\",\ndata: yValues\n}]\n},\noptions: {...}\n});\n\nfunction generateData(value, i1, i2, step = 1) {\nfor (let x = i1; x <= i2; x += step) {\nyValues.push(eval(value));\nxValues.push(x);\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> xValues = [];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yValues = [];<br/>\ngenerateData(<span class=\"jsstringcolor\" style=\"color:green\">\"x * 2 + 7\"</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">10</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0.5</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Chart(<span class=\"jsstringcolor\" style=\"color:green\">\"myChart\"</span>, {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type: <span class=\"jsstringcolor\" style=\"color:green\">\"line\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  data: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    labels: xValues,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    datasets: [{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      fill: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">false</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      pointRadius: <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      borderColor: <span class=\"jsstringcolor\" style=\"color:green\">\"rgba(255,0,0,0.5)\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      data: yValues<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }]<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  options: {.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> generateData(value, i1, i2, step = <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x = i1; x &lt;= i2; x += step) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    yValues.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">eval</span>(value));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    xValues.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(x);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "generateData(\"Math.sin(x)\", 0, 10, 0.5);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\ngenerateData(<span class=\"jsstringcolor\" style=\"color:green\">\"Math.sin(x)\"</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">10</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0.5</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "var xValues = [\"Italy\", \"France\", \"Spain\", \"USA\", \"Argentina\"];\nvar yValues = [55, 49, 44, 24, 15];\nvar barColors = [\"red\", \"green\",\"blue\",\"orange\",\"brown\"];\n\nnew Chart(\"myChart\", {\ntype: \"bar\",\ndata: {\nlabels: xValues,\ndatasets: [{\nbackgroundColor: barColors,\ndata: yValues\n}]\n},\noptions: {...}\n});",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> xValues = [<span class=\"jsstringcolor\" style=\"color:green\">\"Italy\"</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"France\"</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"Spain\"</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"USA\"</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"Argentina\"</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> yValues = [<span class=\"jsnumbercolor\" style=\"color:#905\">55</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">49</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">44</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">24</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">15</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> barColors = [<span class=\"jsstringcolor\" style=\"color:green\">\"red\"</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"green\"</span>,<span class=\"jsstringcolor\" style=\"color:green\">\"blue\"</span>,<span class=\"jsstringcolor\" style=\"color:green\">\"orange\"</span>,<span class=\"jsstringcolor\" style=\"color:green\">\"brown\"</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Chart(<span class=\"jsstringcolor\" style=\"color:green\">\"myChart\"</span>, {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type: <span class=\"jsstringcolor\" style=\"color:green\">\"bar\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  data: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    labels: xValues,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    datasets: [{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      backgroundColor: barColors,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      data: yValues<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }]<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  options: {.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "var barColors = [\"blue\"];",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> barColors = [<span class=\"jsstringcolor\" style=\"color:green\">\"blue\"</span>];<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "var barColors =\"red\";",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> barColors =<span class=\"jsstringcolor\" style=\"color:green\">\"red\"</span>;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "var barColors = [\n\"rgba(0,0,255,1.0)\",\n\"rgba(0,0,255,0.8)\",\n\"rgba(0,0,255,0.6)\",\n\"rgba(0,0,255,0.4)\",\n\"rgba(0,0,255,0.2)\",\n];",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> barColors = [<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"rgba(0,0,255,1.0)\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"rgba(0,0,255,0.8)\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"rgba(0,0,255,0.6)\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"rgba(0,0,255,0.4)\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"rgba(0,0,255,0.2)\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>];<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "type: \"horizontalBar\",",
          "html": "<span class=\"jscolor\" style=\"color:black\">\ntype: <span class=\"jsstringcolor\" style=\"color:green\">\"horizontalBar\"</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "new Chart(\"myChart\", {\ntype: \"pie\",\ndata: {\nlabels: xValues,\ndatasets: [{\nbackgroundColor: barColors,\ndata: yValues\n}]\n},\noptions: {\ntitle: {\ndisplay: true,\ntext: \"World Wide Wine Production\"\n}\n}\n});",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Chart(<span class=\"jsstringcolor\" style=\"color:green\">\"myChart\"</span>, {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type: <span class=\"jsstringcolor\" style=\"color:green\">\"pie\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  data: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    labels: xValues,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    datasets: [{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      backgroundColor: barColors,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      data: yValues<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }]<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  options: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    title: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      display: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      text: <span class=\"jsstringcolor\" style=\"color:green\">\"World Wide Wine Production\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "type: \"doughnut\";",
          "html": "<span class=\"jscolor\" style=\"color:black\">\ntype: <span class=\"jsstringcolor\" style=\"color:green\">\"doughnut\"</span>;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_chartjs.asp"
      }
    },
    {
      "title": "Google Chart",
      "code": [
        {
          "text": "<script\nsrc=\"https://www.gstatic.com/charts/loader.js\">\n</script>",
          "html": "<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>script<span class=\"attributecolor\" style=\"color:green\"><br/>\nsrc<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"https://www.gstatic.com/charts/loader.js\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"jscolor\" style=\"color:black\"><br/>\n</span><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/script<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span>"
        },
        {
          "text": "<div id=\"myChart\" style=\"max-width:700px; height:400px\"></div>",
          "html": "<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>div<span class=\"attributecolor\" style=\"color:green\"> id<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"myChart\"</span> style<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"max-width:700px; height:400px\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/div<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span>"
        },
        {
          "text": "1 google.charts.load('current',{packages:['corechart']});\n\n2 google.charts.setOnLoadCallback(drawChart);",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n1</span> google.<span class=\"jspropertycolor\" style=\"color:black\">charts</span>.<span class=\"jspropertycolor\" style=\"color:black\">load</span>(<span class=\"jsstringcolor\" style=\"color:green\">'current'</span>,{packages:[<span class=\"jsstringcolor\" style=\"color:green\">'corechart'</span>]});<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n2</span> google.<span class=\"jspropertycolor\" style=\"color:black\">charts</span>.<span class=\"jspropertycolor\" style=\"color:black\">setOnLoadCallback</span>(drawChart);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "function drawChart() {\n// Set Data\nconst data = google.visualization.arrayToDataTable([\n['Price', 'Size'],\n[50,7],[60,8],[70,8],[80,9],[90,9],[100,9],\n[110,10],[120,11],[130,14],[140,14],[150,15]\n]);\n// Set Options\nconst options = {\ntitle: 'House Prices vs Size',\nhAxis: {title: 'Square Meters'},\nvAxis: {title: 'Price in Millions'},\nlegend: 'none'\n};\n// Draw Chart\nconst chart = new google.visualization.LineChart(document.getElementById('myChart'));\nchart.draw(data, options);\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> drawChart() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Set Data<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> data = google.<span class=\"jspropertycolor\" style=\"color:black\">visualization</span>.<span class=\"jspropertycolor\" style=\"color:black\">arrayToDataTable</span>([<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  [<span class=\"jsstringcolor\" style=\"color:green\">'Price'</span>, <span class=\"jsstringcolor\" style=\"color:green\">'Size'</span>],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  [<span class=\"jsnumbercolor\" style=\"color:#905\">50</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">7</span>],[<span class=\"jsnumbercolor\" style=\"color:#905\">60</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>],[<span class=\"jsnumbercolor\" style=\"color:#905\">70</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>],[<span class=\"jsnumbercolor\" style=\"color:#905\">80</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>],[<span class=\"jsnumbercolor\" style=\"color:#905\">90</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>],[<span class=\"jsnumbercolor\" style=\"color:#905\">100</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  [<span class=\"jsnumbercolor\" style=\"color:#905\">110</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">10</span>],[<span class=\"jsnumbercolor\" style=\"color:#905\">120</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">11</span>],[<span class=\"jsnumbercolor\" style=\"color:#905\">130</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>],[<span class=\"jsnumbercolor\" style=\"color:#905\">140</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>],[<span class=\"jsnumbercolor\" style=\"color:#905\">150</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">15</span>]<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  ]);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Set Options<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> options = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  title: <span class=\"jsstringcolor\" style=\"color:green\">'House Prices vs Size'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  hAxis: {title: <span class=\"jsstringcolor\" style=\"color:green\">'Square Meters'</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  vAxis: {title: <span class=\"jsstringcolor\" style=\"color:green\">'Price in Millions'</span>},<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  legend: <span class=\"jsstringcolor\" style=\"color:green\">'none'</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Draw Chart<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> chart = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> google.<span class=\"jspropertycolor\" style=\"color:black\">visualization</span>.<span class=\"jspropertycolor\" style=\"color:black\">LineChart</span>(document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">'myChart'</span>));<br/>\nchart.<span class=\"jspropertycolor\" style=\"color:black\">draw</span>(data, options);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const chart = new google.visualization.LineChart(document.getElementById('myChart'));",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> chart = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> google.<span class=\"jspropertycolor\" style=\"color:black\">visualization</span>.<span class=\"jspropertycolor\" style=\"color:black\">LineChart</span>(document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">'myChart'</span>));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "function drawChart() {\n\nconst data = google.visualization.arrayToDataTable([\n['Contry', 'Mhl'],\n['Italy', 55],\n['France', 49],\n['Spain', 44],\n['USA', 24],\n['Argentina', 15]\n]);\n\nconst options = {\ntitle: 'World Wide Wine Production'\n};\n\nconst chart = new google.visualization.BarChart(document.getElementById('myChart'));\nchart.draw(data, options);\n\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> drawChart() {<br/><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> data = google.<span class=\"jspropertycolor\" style=\"color:black\">visualization</span>.<span class=\"jspropertycolor\" style=\"color:black\">arrayToDataTable</span>([<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  [<span class=\"jsstringcolor\" style=\"color:green\">'Contry'</span>, <span class=\"jsstringcolor\" style=\"color:green\">'Mhl'</span>],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  [<span class=\"jsstringcolor\" style=\"color:green\">'Italy'</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">55</span>],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  [<span class=\"jsstringcolor\" style=\"color:green\">'France'</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">49</span>],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  [<span class=\"jsstringcolor\" style=\"color:green\">'Spain'</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">44</span>],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  [<span class=\"jsstringcolor\" style=\"color:green\">'USA'</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">24</span>],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  [<span class=\"jsstringcolor\" style=\"color:green\">'Argentina'</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">15</span>]<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>]);<br/><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> options = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  title: <span class=\"jsstringcolor\" style=\"color:green\">'World Wide Wine Production'</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> chart = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> google.<span class=\"jspropertycolor\" style=\"color:black\">visualization</span>.<span class=\"jspropertycolor\" style=\"color:black\">BarChart</span>(document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">'myChart'</span>));<br/>\nchart.<span class=\"jspropertycolor\" style=\"color:black\">draw</span>(data, options);<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const chart = new google.visualization.PieChart(document.getElementById('myChart'));",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> chart = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> google.<span class=\"jspropertycolor\" style=\"color:black\">visualization</span>.<span class=\"jspropertycolor\" style=\"color:black\"/><b>PieChart</b>(document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">'myChart'</span>));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const options = {\ntitle: 'World Wide Wine Production',\nis3D: true\n};",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> options = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  title: <span class=\"jsstringcolor\" style=\"color:green\">'World Wide Wine Production'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <b>is3D: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span></b><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_google_chart.asp"
      }
    },
    {
      "title": "D3.js",
      "code": [
        {
          "text": "<script src=\"//d3js.org/d3.v3.min.js\"></script>",
          "html": "<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>script<span class=\"attributecolor\" style=\"color:green\"> src<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"//d3js.org/d3.v3.min.js\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"jscolor\" style=\"color:black\"/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/script<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span>"
        },
        {
          "text": "d3.select(\"body\").append(\"p\").text(\"Hello World!\");",
          "html": "d3.select(\"body\").append(\"p\").text(\"Hello World!\");"
        },
        {
          "text": "// Set Dimensions\nconst xSize = 500;\nconst ySize = 500;\nconst margin = 40;\nconst xMax = xSize - margin*2;\nconst yMax = ySize - margin*2;\n\n// Create Random Points\nconst numPoints = 100;\nconst data = [];\nfor (let i = 0; i < numPoints; i++) {\ndata.push([Math.random() * xMax, Math.random() * yMax]);\n}\n\n// Append SVG Object to the Page\nconst svg = d3.select(\"#myPlot\")\n.append(\"svg\")\n.append(\"g\")\n.attr(\"transform\",\"translate(\" + margin + \",\" + margin + \")\");\n\n// X Axis\nconst x = d3.scaleLinear()\n.domain([0, 500])\n.range([0, xMax]);\n\nsvg.append(\"g\")\n.attr(\"transform\", \"translate(0,\" + yMax + \")\")\n.call(d3.axisBottom(x));\n\n// Y Axis\nconst y = d3.scaleLinear()\n.domain([0, 500])\n.range([ yMax, 0]);\n\nsvg.append(\"g\")\n.call(d3.axisLeft(y));\n\n// Dots\nsvg.append('g')\n.selectAll(\"dot\")\n.data(data).enter()\n.append(\"circle\")\n.attr(\"cx\", function (d) { return d[0] } )\n.attr(\"cy\", function (d) { return d[1] } )\n.attr(\"r\", 3)\n.style(\"fill\", \"Red\");",
          "html": "// Set Dimensions<br/>\nconst xSize = 500;<br/>\nconst ySize = 500;<br/>\nconst margin = 40;<br/>\nconst xMax = xSize - margin*2;<br/>\nconst yMax = ySize - margin*2;<br/>\n<br/>\n// Create Random Points<br/>\nconst numPoints = 100;<br/>\nconst data = [];<br/>\nfor (let i = 0; i &lt; numPoints; i++) {<br/>\n  data.push([Math.random() * xMax, Math.random() * yMax]);<br/>\n}<br/>\n<br/>\n// Append SVG Object to the Page<br/>\nconst svg = d3.select(\"#myPlot\")<br/>\n  .append(\"svg\")<br/>\n  .append(\"g\")<br/>\n  .attr(\"transform\",\"translate(\" + margin + \",\" + margin + \")\");<br/>\n<br/>\n// X Axis<br/>\nconst x = d3.scaleLinear()<br/>\n  .domain([0, 500])<br/>\n  .range([0, xMax]);<br/>\n<br/>\nsvg.append(\"g\")<br/>\n  .attr(\"transform\", \"translate(0,\" + yMax + \")\")<br/>\n  .call(d3.axisBottom(x));<br/>\n<br/>\n// Y Axis<br/>\nconst y = d3.scaleLinear()<br/>\n  .domain([0, 500])<br/>\n  .range([ yMax, 0]);<br/>\n<br/>\nsvg.append(\"g\")<br/>\n  .call(d3.axisLeft(y));<br/>\n<br/>\n// Dots<br/>\nsvg.append('g')<br/>\n  .selectAll(\"dot\")<br/>\n  .data(data).enter()<br/>\n  .append(\"circle\")<br/>\n  .attr(\"cx\", function (d) { return d[0] } )<br/>\n  .attr(\"cy\", function (d) { return d[1] } )<br/>\n  .attr(\"r\", 3)<br/>\n  .style(\"fill\", \"Red\");<br/>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_d3js.asp"
      }
    },
    {
      "title": "The History of Languages",
      "code": [
        {
          "text": "I'm going on holiday in my new car.\nVado in vacanza con la mia macchina nuova.\nMe voy de vacaciones en mi auto nuevo.\nIch fahre mit meinem neuen Auto in den Urlaub.",
          "html": "I'm going on holiday in my new car.<br/>\nVado in vacanza con la mia macchina nuova.<br/>\nMe voy de vacaciones en mi auto nuevo.<br/>\nIch fahre mit meinem neuen Auto in den Urlaub.<br/>"
        },
        {
          "text": "var points = [40, 100, 1, 5, 25, 10];\npoints.sort(function(a, b){return a - b});",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> points = [<span class=\"jsnumbercolor\" style=\"color:#905\">40</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">100</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">5</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">25</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">10</span>];<br/>\npoints.<span class=\"jspropertycolor\" style=\"color:black\">sort</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>(a, b){<span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> a - b});<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_history_languages.asp"
      }
    },
    {
      "title": "Linear Algebra",
      "code": [
        {
          "text": "const myScalar = 1;\nlet x = 1;\nvar y = 1;",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> myScalar = <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x = <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">var</span> y = <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const myArray = [50,60,70,80,90,100,110,120,130,140,150];\nmyArray.length;   // the length of myArray is 11",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> myArray = [<span class=\"jsnumbercolor\" style=\"color:#905\">50</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">60</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">70</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">80</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">90</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">100</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">110</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">120</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">130</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">140</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">150</span>];<br/>\nmyArray.<span class=\"jspropertycolor\" style=\"color:black\">length</span>;   <span class=\"commentcolor\" style=\"color:slategray\">// the length of myArray is 11\n </span></span>"
        },
        {
          "text": "const myArray = [[1,2],[3,4],[5,6]];",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> myArray = [[<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>],[<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">4</span>],[<span class=\"jsnumbercolor\" style=\"color:#905\">5</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">6</span>]];<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_algebra.asp"
      }
    },
    {
      "title": "Matrices",
      "code": [
        {
          "text": "const scalar = 1;",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> scalar = <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const array = [ 1, 2, 3 ];",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> array = [ <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">3</span> ];<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const matrix = [ [1,2],[3,4],[5,6] ];",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> matrix = [ [<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>],[<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">4</span>],[<span class=\"jsnumbercolor\" style=\"color:#905\">5</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">6</span>] ];<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const vector = [ [1],[2],[3] ];",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> vector = [ [<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>],[<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>],[<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>] ];<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const vector = [ 1, 2, 3 ];",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> vector = [ <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">3</span> ];<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjs/9.3.2/math.js\"></script>",
          "html": "<span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>script<span class=\"attributecolor\" style=\"color:green\"> src<span class=\"attributevaluecolor\" style=\"color:#005cc5\">=\"https://cdnjs.cloudflare.com/ajax/libs/mathjs/9.3.2/math.js\"</span></span><span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span><span class=\"jscolor\" style=\"color:black\"/><span class=\"tagnamecolor\" style=\"color:#905\"><span class=\"tagcolor\" style=\"color:#999\">&lt;</span>/script<span class=\"tagcolor\" style=\"color:#999\">&gt;</span></span>"
        },
        {
          "text": "const mA = math.matrix([[1, 2], [3, 4], [5, 6]]);\nconst mB = math.matrix([[1,-1], [2,-2], [3,-3]]);\n\n// Matrix Addition\nconst matrixAdd = math.add(mA, mB);\n\n// Result [ [2, 1], [5, 2], [8, 3] ]",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> mA = math.<span class=\"jspropertycolor\" style=\"color:black\">matrix</span>([[<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">5</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">6</span>]]);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> mB = math.<span class=\"jspropertycolor\" style=\"color:black\">matrix</span>([[<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>,-<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>,-<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>,-<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>]]);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Matrix Addition<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> matrixAdd = math.<span class=\"jspropertycolor\" style=\"color:black\">add</span>(mA, mB);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Result [ [2, 1], [5, 2], [8, 3] ]<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const mA = math.matrix([[1, 2], [3, 4], [5, 6]]);\nconst mB = math.matrix([[1,-1], [2,-2], [3,-3]]);\n\n// Matrix Subtraction\nconst matrixSub = math.subtract(mA, mB);\n\n// Result [ [0, 3], [1, 6], [2, 9] ]",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> mA = math.<span class=\"jspropertycolor\" style=\"color:black\">matrix</span>([[<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">5</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">6</span>]]);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> mB = math.<span class=\"jspropertycolor\" style=\"color:black\">matrix</span>([[<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>,-<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>,-<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>,-<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>]]);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Matrix Subtraction<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> matrixSub = math.<span class=\"jspropertycolor\" style=\"color:black\">subtract</span>(mA, mB);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Result [ [0, 3], [1, 6], [2, 9] ]<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const mA = math.matrix([[1, 2], [3, 4], [5, 6]]);\n\n// Matrix Multiplication\nconst matrixMult = math.multiply(2, mA);\n\n// Result [ [2, 4], [6, 8], [10, 12] ]",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> mA = math.<span class=\"jspropertycolor\" style=\"color:black\">matrix</span>([[<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">5</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">6</span>]]);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Matrix Multiplication<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> matrixMult = math.<span class=\"jspropertycolor\" style=\"color:black\">multiply</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, mA);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Result [ [2, 4], [6, 8], [10, 12] ]<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const mA = math.matrix([[0, 2], [4, 6], [8, 10]]);\n\n// Matrix Division\nconst matrixDiv = math.divide(mA, 2);\n\n// Result [ [0, 1], [2, 3], [4, 5] ]",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> mA = math.<span class=\"jspropertycolor\" style=\"color:black\">matrix</span>([[<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">4</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">6</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">10</span>]]);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Matrix Division<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> matrixDiv = math.<span class=\"jspropertycolor\" style=\"color:black\">divide</span>(mA, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Result [ [0, 1], [2, 3], [4, 5] ]<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const mA = math.matrix([1, 2, 3]);\nconst mB = math.matrix([[1, 4, 7], [2, 5, 8], [3, 6, 9]]);\n\n// Matrix Multiplication\nconst matrixMult = math.multiply(mA, mB);\n\n// Result [14, 32, 50]",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> mA = math.<span class=\"jspropertycolor\" style=\"color:black\">matrix</span>([<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">3</span>]);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> mB = math.<span class=\"jspropertycolor\" style=\"color:black\">matrix</span>([[<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">7</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">5</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">8</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">6</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">9</span>]]);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Matrix Multiplication<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> matrixMult = math.<span class=\"jspropertycolor\" style=\"color:black\">multiply</span>(mA, mB);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Result [14, 32, 50]<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const mA = math.matrix([3, 4, 2]);\nconst mB = math.matrix([[120, 90, 60], [80, 70, 40], [60, 40, 20]);\n\n// Matrix Multiplication\nconst matrixMult = math.multiply(mA, mB);\n\n// Result [800, 630, 380]",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> mA = math.<span class=\"jspropertycolor\" style=\"color:black\">matrix</span>([<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>]);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> mB = math.<span class=\"jspropertycolor\" style=\"color:black\">matrix</span>([[<span class=\"jsnumbercolor\" style=\"color:#905\">120</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">90</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">60</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">80</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">70</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">40</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">60</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">40</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">20</span>]);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Matrix Multiplication<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> matrixMult = math.<span class=\"jspropertycolor\" style=\"color:black\">multiply</span>(mA, mB);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Result [800, 630, 380]<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_matrices.asp"
      }
    },
    {
      "title": "Tensors",
      "code": [
        {
          "text": "const scalar = 1;",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> scalar = <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const array = [ 1, 2, 3 ];",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> array = [ <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">3</span> ];<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const matrix = [ [1,2],[3,4],[5,6] ];",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> matrix = [ [<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>],[<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">4</span>],[<span class=\"jsnumbercolor\" style=\"color:#905\">5</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">6</span>] ];<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const vector = [ [1],[2],[3] ];",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> vector = [ [<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>],[<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>],[<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>] ];<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const vector = [ 1, 2, 3 ];",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> vector = [ <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">3</span> ];<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const tensor = [ [1,2,3],[4,5,6],[7,8,9] ];",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensor = [ [<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>],[<span class=\"jsnumbercolor\" style=\"color:#905\">4</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">5</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">6</span>],[<span class=\"jsnumbercolor\" style=\"color:#905\">7</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>] ];<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const tensorA = tf.tensor([[1, 2], [3, 4], [5, 6]]);\nconst tensorB = tf.tensor([[1,-1], [2,-2], [3,-3]]);\n\n// Tensor Addition\nconst tensorAdd = tensorA.add(tensorB);\n\n// Result [ [2, 1], [5, 2], [8, 3] ]",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorA = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>([[<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">5</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">6</span>]]);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorB = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>([[<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>,-<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>,-<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>,-<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>]]);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Tensor Addition<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorAdd = tensorA.<span class=\"jspropertycolor\" style=\"color:black\">add</span>(tensorB);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Result [ [2, 1], [5, 2], [8, 3] ]<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const tensorA = tf.tensor([[1, 2], [3, 4], [5, 6]]);\nconst tensorB = tf.tensor([[1,-1], [2,-2], [3,-3]]);\n\n// Tensor Subtraction\nconst tensorSub = tensorA.sub(tensorB);\n\n// Result [ [0, 3], [1, 6], [2, 9] ]",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorA = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>([[<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">5</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">6</span>]]);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorB = tf.<span class=\"jspropertycolor\" style=\"color:black\">tensor</span>([[<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>,-<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>,-<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>], [<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>,-<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>]]);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/> <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Tensor Subtraction<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> tensorSub = tensorA.<span class=\"jspropertycolor\" style=\"color:black\">sub</span>(tensorB);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Result [ [0, 3], [1, 6], [2, 9] ]<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_tensors.asp"
      }
    },
    {
      "title": "Descriptive Statistics",
      "code": [
        {
          "text": "let mean = (7+8+8+9+9+9+10+11+14+14+15)/11;",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> mean = (<span class=\"jsnumbercolor\" style=\"color:#905\">7</span>+<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>+<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>+<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>+<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>+<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>+<span class=\"jsnumbercolor\" style=\"color:#905\">10</span>+<span class=\"jsnumbercolor\" style=\"color:#905\">11</span>+<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>+<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>+<span class=\"jsnumbercolor\" style=\"color:#905\">15</span>)/<span class=\"jsnumbercolor\" style=\"color:#905\">11</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const values = [7,8,8,9,9,9,10,11,14,14,15];\nlet mean = math.mean(values);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> values = [<span class=\"jsnumbercolor\" style=\"color:#905\">7</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">10</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">11</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">15</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> mean = math.<span class=\"jspropertycolor\" style=\"color:black\">mean</span>(values);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "99,86,87,88,111,86,103,87,94,78,77,85,86",
          "html": "99,86,87,88,111,86,103,87,94,78,77,85,86"
        },
        {
          "text": "77,78,85,86,86,86,87,87,88,94,99,103,111",
          "html": "77,78,85,86,86,86,<span class=\"w3-xlarge\">87</span>,87,88,94,99,103,111"
        },
        {
          "text": "const speed = [99,86,87,88,111,86,103,87,94,78,77,85,86];\nlet median = math.median(speed);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> speed = [<span class=\"jsnumbercolor\" style=\"color:#905\">99</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">86</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">87</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">88</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">111</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">86</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">103</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">87</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">94</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">78</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">77</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">85</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">86</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> median = math.<span class=\"jspropertycolor\" style=\"color:black\">median</span>(speed);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "77,78,85,86,86,86,87,87,88,94,99,103",
          "html": "77,78,85,86,86,<span class=\"w3-xlarge\">86,87</span>,87,88,94,99,103"
        },
        {
          "text": "(86 + 87) / 2 = 86.5",
          "html": "(86 + 87) / 2 = 86.5"
        },
        {
          "text": "const speed = [99,86,87,88,86,103,87,94,78,77,85,86];\nlet median = math.median(speed);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> speed = [<span class=\"jsnumbercolor\" style=\"color:#905\">99</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">86</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">87</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">88</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">86</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">103</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">87</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">94</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">78</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">77</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">85</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">86</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> median = math.<span class=\"jspropertycolor\" style=\"color:black\">median</span>(speed);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "99,86,87,88,111,86,103,87,94,78,77,85,86",
          "html": "99,<span class=\"w3-xlarge\">86</span>,87,88,111,<span class=\"w3-xlarge\">86</span>,103,87,94,78,77,85,<span class=\"w3-xlarge\">86</span>"
        },
        {
          "text": "const speed = [99,86,87,88,86,103,87,94,78,77,85,86];\nlet mode = math.mode(speed);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> speed = [<span class=\"jsnumbercolor\" style=\"color:#905\">99</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">86</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">87</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">88</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">86</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">103</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">87</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">94</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">78</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">77</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">85</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">86</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> mode = math.<span class=\"jspropertycolor\" style=\"color:black\">mode</span>(speed);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "99,86,87,88,111,86,103,87,94,78,300,85,86",
          "html": "99,86,87,88,111,86,103,87,94,78,<span class=\"w3-xlarge\">300</span>,85,86"
        },
        {
          "text": "const values = [99,86,87,88,111,86,103,87,94,78,300,85,86];\nlet mean = math.mean(values);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> values = [<span class=\"jsnumbercolor\" style=\"color:#905\">99</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">86</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">87</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">88</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">111</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">86</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">103</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">87</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">94</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">78</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">300</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">85</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">86</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> mean = math.<span class=\"jspropertycolor\" style=\"color:black\">mean</span>(values);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_statistics_descriptive.asp"
      }
    },
    {
      "title": "Statistic Variability (Spread)",
      "code": [
        {
          "text": "// Calculate the Mean (m)\nlet m = (7+8+8+9+9+9+10+11+14+14+15)/11;\n\n// Calculate the Sum of Squares (ss)\nlet ss = (7-m)**2 + (8-m)**2 + (8-m)**2 + (9-m)**2 + (9-m)**2 + (9-m)**2 + (9-m)**2 + (10-m)**2 + (11-m)**2 + (14-m)**2 + (15-m)**2;\n\n// Calculate the Variance\nlet variance = ss / 11;",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Calculate the Mean (m)<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> m = (<span class=\"jsnumbercolor\" style=\"color:#905\">7</span>+<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>+<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>+<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>+<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>+<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>+<span class=\"jsnumbercolor\" style=\"color:#905\">10</span>+<span class=\"jsnumbercolor\" style=\"color:#905\">11</span>+<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>+<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>+<span class=\"jsnumbercolor\" style=\"color:#905\">15</span>)/<span class=\"jsnumbercolor\" style=\"color:#905\">11</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Calculate the Sum of Squares (ss)<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> ss = (<span class=\"jsnumbercolor\" style=\"color:#905\">7</span>-m)**<span class=\"jsnumbercolor\" style=\"color:#905\">2</span> + (<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>-m)**<span class=\"jsnumbercolor\" style=\"color:#905\">2</span> + (<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>-m)**<span class=\"jsnumbercolor\" style=\"color:#905\">2</span> + (<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>-m)**<span class=\"jsnumbercolor\" style=\"color:#905\">2</span> + (<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>-m)**<span class=\"jsnumbercolor\" style=\"color:#905\">2</span> + (<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>-m)**<span class=\"jsnumbercolor\" style=\"color:#905\">2</span> + (<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>-m)**<span class=\"jsnumbercolor\" style=\"color:#905\">2</span> + (<span class=\"jsnumbercolor\" style=\"color:#905\">10</span>-m)**<span class=\"jsnumbercolor\" style=\"color:#905\">2</span> + (<span class=\"jsnumbercolor\" style=\"color:#905\">11</span>-m)**<span class=\"jsnumbercolor\" style=\"color:#905\">2</span> + (<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>-m)**<span class=\"jsnumbercolor\" style=\"color:#905\">2</span> + (<span class=\"jsnumbercolor\" style=\"color:#905\">15</span>-m)**<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Calculate the Variance<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> variance = ss / <span class=\"jsnumbercolor\" style=\"color:#905\">11</span>;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const values = [7,8,8,9,9,9,10,11,14,14,15];\nlet variance = math.variance(values, \"uncorrected\");",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> values = [<span class=\"jsnumbercolor\" style=\"color:#905\">7</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">10</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">11</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">15</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> variance = math.<span class=\"jspropertycolor\" style=\"color:black\">variance</span>(values, <span class=\"jsstringcolor\" style=\"color:green\">\"uncorrected\"</span>);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// Calculate the Mean (m)\nlet m = (7+8+8+9+9+9+10+11+14+15)/11;\n\n// Calculate the Sum of Squares (ss)\nlet ss = (7-m)**2 + (8-m)**2 + (8-m)**2 + (9-m)**2 + (9-m)**2 + (9-m)**2 + (9-m)**2 + (10-m)**2 + (11-m)**2 + (14-m)**2 + (15-m)**2;\n\n// Calculate the Variance\nlet variance = ss / 11;\n\n// Calculate the Standard Deviation\nlet std = Math.sqrt(variance);",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Calculate the Mean (m)<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> m = (<span class=\"jsnumbercolor\" style=\"color:#905\">7</span>+<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>+<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>+<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>+<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>+<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>+<span class=\"jsnumbercolor\" style=\"color:#905\">10</span>+<span class=\"jsnumbercolor\" style=\"color:#905\">11</span>+<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>+<span class=\"jsnumbercolor\" style=\"color:#905\">15</span>)/<span class=\"jsnumbercolor\" style=\"color:#905\">11</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Calculate the Sum of Squares (ss)<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> ss = (<span class=\"jsnumbercolor\" style=\"color:#905\">7</span>-m)**<span class=\"jsnumbercolor\" style=\"color:#905\">2</span> + (<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>-m)**<span class=\"jsnumbercolor\" style=\"color:#905\">2</span> + (<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>-m)**<span class=\"jsnumbercolor\" style=\"color:#905\">2</span> + (<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>-m)**<span class=\"jsnumbercolor\" style=\"color:#905\">2</span> + (<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>-m)**<span class=\"jsnumbercolor\" style=\"color:#905\">2</span> + (<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>-m)**<span class=\"jsnumbercolor\" style=\"color:#905\">2</span> + (<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>-m)**<span class=\"jsnumbercolor\" style=\"color:#905\">2</span> + (<span class=\"jsnumbercolor\" style=\"color:#905\">10</span>-m)**<span class=\"jsnumbercolor\" style=\"color:#905\">2</span> + (<span class=\"jsnumbercolor\" style=\"color:#905\">11</span>-m)**<span class=\"jsnumbercolor\" style=\"color:#905\">2</span> + (<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>-m)**<span class=\"jsnumbercolor\" style=\"color:#905\">2</span> + (<span class=\"jsnumbercolor\" style=\"color:#905\">15</span>-m)**<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Calculate the Variance<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> variance = ss / <span class=\"jsnumbercolor\" style=\"color:#905\">11</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Calculate the Standard Deviation<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> std = Math.<span class=\"jspropertycolor\" style=\"color:black\">sqrt</span>(variance);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const values = [7,8,8,9,9,9,9,10,11,14,15];\nlet std = math.std(values, \"uncorrected\");",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> values = [<span class=\"jsnumbercolor\" style=\"color:#905\">7</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">8</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">9</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">10</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">11</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">14</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">15</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> std = math.<span class=\"jspropertycolor\" style=\"color:black\">std</span>(values, <span class=\"jsstringcolor\" style=\"color:green\">\"uncorrected\"</span>);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_variance.asp"
      }
    },
    {
      "title": "Probability",
      "code": [
        {
          "text": "let p = Math.pow(1/6, 3);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> p = Math.<span class=\"jspropertycolor\" style=\"color:black\">pow</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>/<span class=\"jsnumbercolor\" style=\"color:#905\">6</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">3</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "let p = Math.pow(1/6, 3) * 6;",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> p = Math.<span class=\"jspropertycolor\" style=\"color:black\">pow</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>/<span class=\"jsnumbercolor\" style=\"color:#905\">6</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">3</span>) * <span class=\"jsnumbercolor\" style=\"color:#905\">6</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/ai/ai_probability.asp"
      }
    }
  ]
}