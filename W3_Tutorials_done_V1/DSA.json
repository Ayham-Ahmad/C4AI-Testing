{
  "language": "DSA",
  "tutorials": [
    {
      "title": "DSA Tutorial",
      "code": [
        {
          "text": "my_array = [7, 12, 9, 4, 11] minVal = my_array[0] for i in my_array: if i < minVal: minVal = i print('Lowest value:',minVal)",
          "html": "<code class=\"language-python\">my_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span>\nminVal <span class=\"token operator\">=</span> my_array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> my_array<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> i <span class=\"token operator\">&lt;</span> minVal<span class=\"token punctuation\">:</span>\n        minVal <span class=\"token operator\">=</span> i\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Lowest value:'</span><span class=\"token punctuation\">,</span>minVal<span class=\"token punctuation\">)</span>\n</code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/index.php"
      }
    },
    {
      "title": "A Simple Algorithm",
      "code": [
        {
          "text": "prev2 = 0 prev1 = 1 print(prev2) print(prev1) for fibo in range(18): newFibo = prev1 + prev2 print(newFibo) prev2 = prev1 prev1 = newFibo",
          "html": "<code class=\"language-python\">prev2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nprev1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>prev2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>prev1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-for\">for</span> fibo <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    newFibo <span class=\"token operator\">=</span> prev1 <span class=\"token operator\">+</span> prev2\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>newFibo<span class=\"token punctuation\">)</span>\n    prev2 <span class=\"token operator\">=</span> prev1\n    prev1 <span class=\"token operator\">=</span> newFibo</code>"
        },
        {
          "text": "print(0) print(1) count = 2 def fibonacci(prev1, prev2): global count if count <= 19: newFibo = prev1 + prev2 print(newFibo) prev2 = prev1 prev1 = newFibo count += 1 fibonacci(prev1, prev2) else: return fibonacci(1,0)",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ncount <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>prev1<span class=\"token punctuation\">,</span> prev2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-global\">global</span> count\n    <span class=\"token keyword keyword-if\">if</span> count <span class=\"token operator\">&lt;=</span> <span class=\"token number\">19</span><span class=\"token punctuation\">:</span>\n        newFibo <span class=\"token operator\">=</span> prev1 <span class=\"token operator\">+</span> prev2\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>newFibo<span class=\"token punctuation\">)</span>\n        prev2 <span class=\"token operator\">=</span> prev1\n        prev1 <span class=\"token operator\">=</span> newFibo\n        count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        fibonacci<span class=\"token punctuation\">(</span>prev1<span class=\"token punctuation\">,</span> prev2<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span>\n\nfibonacci<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code>"
        },
        {
          "text": "def F(n): if n <= 1: return n else: return F(n - 1) + F(n - 2) print(F(19))",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">F</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> n\n    <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> F<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> F<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">(</span><span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_algo_simple.php"
      }
    },
    {
      "title": "DSA Arrays",
      "code": [
        {
          "text": "my_array = [7, 12, 9, 4, 11]",
          "html": "<code class=\"language-python\">my_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "my_array = [7, 12, 9, 4, 11] print( my_array[0] )",
          "html": "<code class=\"language-python\">my_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span> my_array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span></code>"
        },
        {
          "text": "my_array = [7, 12, 9, 4, 11] minVal = my_array[0] # Step 1 for i in my_array: # Step 2 if i < minVal: # Step 3 minVal = i print('Lowest value: ',minVal) # Step 4",
          "html": "<code class=\"language-python\">my_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span>\nminVal <span class=\"token operator\">=</span> my_array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\"># Step 1</span>\n\n<span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> my_array<span class=\"token punctuation\">:</span>      <span class=\"token comment\"># Step 2</span>\n    <span class=\"token keyword keyword-if\">if</span> i <span class=\"token operator\">&lt;</span> minVal<span class=\"token punctuation\">:</span>      <span class=\"token comment\"># Step 3</span>\n        minVal <span class=\"token operator\">=</span> i\n        \n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Lowest value: '</span><span class=\"token punctuation\">,</span>minVal<span class=\"token punctuation\">)</span> <span class=\"token comment\"># Step 4</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_data_arrays.php"
      }
    },
    {
      "title": "DSA Bubble Sort",
      "code": [
        {
          "text": "my_array = [64, 34, 25, 12, 22, 11, 90, 5] n = len(my_array) for i in range(n-1): for j in range(n-i-1): if my_array[j] > my_array[j+1]: my_array[j], my_array[j+1] = my_array[j+1], my_array[j] print(\"Sorted array:\", my_array)",
          "html": "<code class=\"language-python\">my_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n\nn <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>my_array<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-for\">for</span> j <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> my_array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> my_array<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            my_array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> my_array<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> my_array<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> my_array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sorted array:\"</span><span class=\"token punctuation\">,</span> my_array<span class=\"token punctuation\">)</span></code>"
        },
        {
          "text": "my_array = [7, 3, 9, 12, 11]",
          "html": "<code class=\"language-python\">my_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "my_array = [7, 3, 9, 12, 11] n = len(my_array) for i in range(n-1): swapped = False for j in range(n-i-1): if my_array[j] > my_array[j+1]: my_array[j], my_array[j+1] = my_array[j+1], my_array[j] swapped = True if not swapped: break print(\"Sorted array:\", my_array)",
          "html": "<code class=\"language-python\">my_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span>\n\nn <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>my_array<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    swapped <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n    <span class=\"token keyword keyword-for\">for</span> j <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> my_array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> my_array<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            my_array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> my_array<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> my_array<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> my_array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n            swapped <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> swapped<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-break\">break</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sorted array:\"</span><span class=\"token punctuation\">,</span> my_array<span class=\"token punctuation\">)</span><div aria-hidden=\"true\" data-range=\"5\" class=\" line-highlight\" data-start=\"5\" style=\"top: 96px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"9-11\" class=\" line-highlight\" data-start=\"9\" data-end=\"11\" style=\"top: 192px; width: 639px;\"> \n \n \n</div></code>"
        },
        {
          "text": "[7, 12, 9, 11, 3]",
          "html": "<code class=\"w3-white language-python\"><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "[\n7, 12,\n9, 11, 3]",
          "html": "<code class=\"w3-white language-python\"><span class=\"token punctuation\">[</span><span class=\"token number\"/><mark class=\"dsa_mark\"><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span></mark><span class=\"token punctuation\"/> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_algo_bubblesort.php"
      }
    },
    {
      "title": "DSA Selection Sort",
      "code": [
        {
          "text": "my_array = [64, 34, 25, 5, 22, 11, 90, 12] n = len(my_array) for i in range(n-1): min_index = i for j in range(i+1, n): if my_array[j] < my_array[min_index]: min_index = j min_value = my_array.pop(min_index) my_array.insert(i, min_value) print(\"Sorted array:\", my_array)",
          "html": "<code class=\"language-python\">my_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span>\n\nn <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>my_array<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    min_index <span class=\"token operator\">=</span> i\n    <span class=\"token keyword keyword-for\">for</span> j <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> my_array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> my_array<span class=\"token punctuation\">[</span>min_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            min_index <span class=\"token operator\">=</span> j\n    min_value <span class=\"token operator\">=</span> my_array<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>min_index<span class=\"token punctuation\">)</span>\n    my_array<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> min_value<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sorted array:\"</span><span class=\"token punctuation\">,</span> my_array<span class=\"token punctuation\">)</span></code>"
        },
        {
          "text": "[ 7, 12, 9, 11, 3]",
          "html": "<code class=\"w3-white language-python\"><span class=\"token punctuation\">[</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "[ 7, 12, 9, 11,\n3\n]",
          "html": "<code class=\"w3-white language-python\"><span class=\"token punctuation\">[</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span><mark class=\"dsa_mark\"> <span class=\"token number\">3</span></mark><span class=\"token number\"/><span class=\"token punctuation\">]</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_algo_selectionsort.php"
      }
    },
    {
      "title": "DSA Insertion Sort",
      "code": [
        {
          "text": "my_array = [64, 34, 25, 12, 22, 11, 90, 5] n = len(my_array) for i in range(1,n): insert_index = i current_value = my_array.pop(i) for j in range(i-1, -1, -1): if my_array[j] > current_value: insert_index = j my_array.insert(insert_index, current_value) print(\"Sorted array:\", my_array)",
          "html": "<code class=\"language-python\">my_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n\nn <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>my_array<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    insert_index <span class=\"token operator\">=</span> i\n    current_value <span class=\"token operator\">=</span> my_array<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-for\">for</span> j <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> my_array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> current_value<span class=\"token punctuation\">:</span>\n            insert_index <span class=\"token operator\">=</span> j\n    my_array<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span>insert_index<span class=\"token punctuation\">,</span> current_value<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sorted array:\"</span><span class=\"token punctuation\">,</span> my_array<span class=\"token punctuation\">)</span>\n</code>"
        },
        {
          "text": "my_array = [64, 34, 25, 12, 22, 11, 90, 5] n = len(my_array) for i in range(1,n): insert_index = i current_value = my_array[i] for j in range(i-1, -1, -1): if my_array[j] > current_value: my_array[j+1] = my_array[j] insert_index = j else: break my_array[insert_index] = current_value print(\"Sorted array:\", my_array)",
          "html": "<code class=\"language-python\">my_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n\nn <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>my_array<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    insert_index <span class=\"token operator\">=</span> i\n    current_value <span class=\"token operator\">=</span> my_array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword keyword-for\">for</span> j <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> my_array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> current_value<span class=\"token punctuation\">:</span>\n            my_array<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> my_array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n            insert_index <span class=\"token operator\">=</span> j\n        <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-break\">break</span>\n    my_array<span class=\"token punctuation\">[</span>insert_index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> current_value\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sorted array:\"</span><span class=\"token punctuation\">,</span> my_array<span class=\"token punctuation\">)</span><div aria-hidden=\"true\" data-range=\"6\" class=\" line-highlight\" data-start=\"6\" style=\"top: 120px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"9\" class=\" line-highlight\" data-start=\"9\" style=\"top: 192px; width: 639px;\"> \n</div><div aria-hidden=\"true\" data-range=\"11-13\" class=\" line-highlight\" data-start=\"11\" data-end=\"13\" style=\"top: 240px; width: 639px;\"> \n \n \n</div></code>"
        },
        {
          "text": "[ 7, 12, 9, 11, 3]",
          "html": "<code class=\"w3-white language-python\"><span class=\"token punctuation\">[</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "[\n7\n, 12, 9, 11, 3]",
          "html": "<code class=\"w3-white language-python\"><span class=\"token punctuation\">[</span><mark class=\"dsa_mark\"> <span class=\"token number\">7</span></mark><span class=\"token number\"/><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "[ 7, 9, 12, > 11, 3]",
          "html": "<code class=\"w3-white language-python\"><span class=\"token punctuation\">[</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_algo_insertionsort.php"
      }
    },
    {
      "title": "DSA Quicksort",
      "code": [
        {
          "text": "def partition(array, low, high): pivot = array[high] i = low - 1 for j in range(low, high): if array[j] <= pivot: i += 1 array[i], array[j] = array[j], array[i] array[i+1], array[high] = array[high], array[i+1] return i+1 def quicksort(array, low=0, high=None): if high is None: high = len(array) - 1 if low < high: pivot_index = partition(array, low, high) quicksort(array, low, pivot_index-1) quicksort(array, pivot_index+1, high) my_array = [64, 34, 25, 12, 22, 11, 90, 5] quicksort(my_array) print(\"Sorted array:\", my_array)",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> low<span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    pivot <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span>\n    i <span class=\"token operator\">=</span> low <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword keyword-for\">for</span> j <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>low<span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> pivot<span class=\"token punctuation\">:</span>\n            i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\n    array<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword keyword-return\">return</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">quicksort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> low<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> high<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> high <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        high <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword keyword-if\">if</span> low <span class=\"token operator\">&lt;</span> high<span class=\"token punctuation\">:</span>\n        pivot_index <span class=\"token operator\">=</span> partition<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> low<span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span>\n        quicksort<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> low<span class=\"token punctuation\">,</span> pivot_index<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        quicksort<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> pivot_index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span>\n\nmy_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\nquicksort<span class=\"token punctuation\">(</span>my_array<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sorted array:\"</span><span class=\"token punctuation\">,</span> my_array<span class=\"token punctuation\">)</span>\n</code>"
        },
        {
          "text": "[ 11, 9, 12, 7, 3]",
          "html": "<code class=\"w3-white language-python\"><span class=\"token punctuation\">[</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "[ 11, 9, 12, 7,\n3\n]",
          "html": "<code class=\"w3-white language-python\"><span class=\"token punctuation\">[</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span><mark class=\"dsa_mark\"> <span class=\"token number\">3</span></mark><span class=\"token number\"/><span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "[\n3\n, 9, 12, 7,\n11\n]",
          "html": "<code class=\"w3-white language-python\"><span class=\"token punctuation\">[</span><mark class=\"dsa_mark\"> <span class=\"token number\">3</span></mark><span class=\"token number\"/><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span><mark class=\"dsa_mark\"> <span class=\"token number\">11</span></mark><span class=\"token number\"/><span class=\"token punctuation\">]</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_algo_quicksort.php"
      }
    },
    {
      "title": "DSA Counting Sort",
      "code": [
        {
          "text": "def countingSort(arr): max_val = max(arr) count = [0] * (max_val + 1) while len(arr) > 0: num = arr.pop(0) count[num] += 1 for i in range(len(count)): while count[i] > 0: arr.append(i) count[i] -= 1 return arr unsortedArr = [4, 2, 2, 6, 3, 3, 1, 6, 5, 2, 3] sortedArr = countingSort(unsortedArr) print(\"Sorted array:\", sortedArr)",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">countingSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    max_val <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n    count <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>max_val <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-while\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        num <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        count<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-while\">while</span> count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            arr<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n            count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword keyword-return\">return</span> arr\n\nunsortedArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nsortedArr <span class=\"token operator\">=</span> countingSort<span class=\"token punctuation\">(</span>unsortedArr<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sorted array:\"</span><span class=\"token punctuation\">,</span> sortedArr<span class=\"token punctuation\">)</span>\n</code>"
        },
        {
          "text": "myArray = [ 2, 3, 0, 2, 3, 2]",
          "html": "<code class=\"w3-white language-python\">myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "myArray = [ 2, 3, 0, 2, 3, 2]\ncountArray = [ 0, 0, 0, 0]",
          "html": "<code class=\"w3-white language-python\">myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span></code><br/>\n  <code class=\"w3-white language-python\">countArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "myArray = [\n2\n, 3, 0, 2, 3, 2]\ncountArray = [ 0, 0,\n1\n, 0]",
          "html": "<code class=\"w3-white language-python\">myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><mark class=\"dsa_mark\"> <span class=\"token number\">2</span></mark><span class=\"token number\"/><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span></code><br/>\n  <code class=\"w3-white language-python\">countArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><mark class=\"dsa_mark\"> <span class=\"token number\">1</span></mark><span class=\"token number\"/><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "myArray = [\n3\n, 0, 2, 3, 2]\ncountArray = [ 0, 0, 1,\n1\n]",
          "html": "<code class=\"w3-white language-python\">myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><mark class=\"dsa_mark\"> <span class=\"token number\">3</span></mark><span class=\"token number\"/><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span></code><br/>\n  <code class=\"w3-white language-python\">countArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><mark class=\"dsa_mark\"> <span class=\"token number\">1</span></mark><span class=\"token number\"/><span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "myArray = [\n0\n, 2, 3, 2]\ncountArray = [\n1\n, 0, 1, 1]",
          "html": "<code class=\"w3-white language-python\">myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><mark class=\"dsa_mark\"> <span class=\"token number\">0</span></mark><span class=\"token number\"/><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span></code><br/>\n  <code class=\"w3-white language-python\">countArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><mark class=\"dsa_mark\"> <span class=\"token number\">1</span></mark><span class=\"token number\"/><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "myArray = [ ]\ncountArray = [\n1, 0, 3, 2\n]",
          "html": "<code class=\"w3-white language-python\">myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span></code><br/>\n  <code class=\"w3-white language-python\">countArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><mark class=\"dsa_mark\"> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span></mark><span class=\"token number\"/><span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "myArray = [\n0\n]\ncountArray = [\n0\n, 0, 3, 2]",
          "html": "<code class=\"w3-white language-python\">myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><mark class=\"dsa_mark\"> <span class=\"token number\">0</span></mark><span class=\"token number\"/><span class=\"token punctuation\">]</span></code><br/>\n  <code class=\"w3-white language-python\">countArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><mark class=\"dsa_mark\"> <span class=\"token number\">0</span></mark><span class=\"token number\"/><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "myArray = [ 0]\ncountArray = [ 0,\n0\n, 3, 2]",
          "html": "<code class=\"w3-white language-python\">myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span></code><br/>\n  <code class=\"w3-white language-python\">countArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><mark class=\"dsa_mark\"> <span class=\"token number\">0</span></mark><span class=\"token number\"/><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "myArray = [0, 2, 2, 2,\n3, 3\n]\ncountArray = [ 0, 0, 0,\n0\n]",
          "html": "<code class=\"w3-white language-python\">myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span><mark class=\"dsa_mark\"> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span></mark><span class=\"token number\"/><span class=\"token punctuation\">]</span></code><br/>\n  <code class=\"w3-white language-python\">countArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><mark class=\"dsa_mark\"> <span class=\"token number\">0</span></mark><span class=\"token number\"/><span class=\"token punctuation\">]</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_algo_countingsort.php"
      }
    },
    {
      "title": "DSA Radix Sort",
      "code": [
        {
          "text": "myArray = [170, 45, 75, 90, 802, 24, 2, 66] print(\"Original array:\", myArray) radixArray = [[], [], [], [], [], [], [], [], [], []] maxVal = max(myArray) exp = 1 while maxVal // exp > 0: while len(myArray) > 0: val = myArray.pop() radixIndex = (val // exp) % 10 radixArray[radixIndex].append(val) for bucket in radixArray: while len(bucket) > 0: val = bucket.pop() myArray.append(val) exp *= 10 print(\"Sorted array:\", myArray)",
          "html": "<code class=\"language-python\">myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">170</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">802</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">66</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Original array:\"</span><span class=\"token punctuation\">,</span> myArray<span class=\"token punctuation\">)</span>\nradixArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\nmaxVal <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>myArray<span class=\"token punctuation\">)</span>\nexp <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword keyword-while\">while</span> maxVal <span class=\"token operator\">//</span> exp <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword keyword-while\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>myArray<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        val <span class=\"token operator\">=</span> myArray<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        radixIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">//</span> exp<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span>\n        radixArray<span class=\"token punctuation\">[</span>radixIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-for\">for</span> bucket <span class=\"token keyword keyword-in\">in</span> radixArray<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-while\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>bucket<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            val <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            myArray<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n\n    exp <span class=\"token operator\">*=</span> <span class=\"token number\">10</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sorted array:\"</span><span class=\"token punctuation\">,</span> myArray<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"7\" class=\" line-highlight\" style=\"top: 146px; height: 24px; width: 639px;\"/><div aria-hidden=\"true\" data-range=\"11\" class=\" line-highlight\" style=\"top: 242px; height: 24px; width: 639px;\"/>"
        },
        {
          "text": "def bubbleSort(arr): n = len(arr) for i in range(n): for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] def radixSortWithBubbleSort(arr): max_val = max(arr) exp = 1 while max_val // exp > 0: radixArray = [[],[],[],[],[],[],[],[],[],[]] for num in arr: radixIndex = (num // exp) % 10 radixArray[radixIndex].append(num) for bucket in radixArray: bubbleSort(bucket) i = 0 for bucket in radixArray: for num in bucket: arr[i] = num i += 1 exp *= 10 myArray = [170, 45, 75, 90, 802, 24, 2, 66] print(\"Original array:\", myArray) radixSortWithBubbleSort(myArray) print(\"Sorted array:\", myArray)",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-for\">for</span> j <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n                \n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">radixSortWithBubbleSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    max_val <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n    exp <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    \n    <span class=\"token keyword keyword-while\">while</span> max_val <span class=\"token operator\">//</span> exp <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        radixArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n        \n        <span class=\"token keyword keyword-for\">for</span> num <span class=\"token keyword keyword-in\">in</span> arr<span class=\"token punctuation\">:</span>\n            radixIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">//</span> exp<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span>\n            radixArray<span class=\"token punctuation\">[</span>radixIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword keyword-for\">for</span> bucket <span class=\"token keyword keyword-in\">in</span> radixArray<span class=\"token punctuation\">:</span>\n            bubbleSort<span class=\"token punctuation\">(</span>bucket<span class=\"token punctuation\">)</span>\n        \n        i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword keyword-for\">for</span> bucket <span class=\"token keyword keyword-in\">in</span> radixArray<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-for\">for</span> num <span class=\"token keyword keyword-in\">in</span> bucket<span class=\"token punctuation\">:</span>\n                arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> num\n                i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        \n        exp <span class=\"token operator\">*=</span> <span class=\"token number\">10</span>\n\nmyArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">170</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">802</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">66</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Original array:\"</span><span class=\"token punctuation\">,</span> myArray<span class=\"token punctuation\">)</span>\nradixSortWithBubbleSort<span class=\"token punctuation\">(</span>myArray<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sorted array:\"</span><span class=\"token punctuation\">,</span> myArray<span class=\"token punctuation\">)</span>\n<div aria-hidden=\"true\" data-range=\"1-6\" class=\" line-highlight\" data-start=\"1\" data-end=\"6\" style=\"top: 0px; width: 639px;\"> \n \n \n \n \n \n</div><div aria-hidden=\"true\" data-range=\"20\" class=\" line-highlight\" data-start=\"20\" style=\"top: 456px; width: 639px;\"> \n</div></code>"
        },
        {
          "text": "myArray = [ 33, 45, 40, 25, 17, 24]\nradixArray = [ [], [], [], [], [], [], [], [], [], [] ]",
          "html": "<code class=\"w3-white language-python\">myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">]</span></code><br/>\n  <code class=\"w3-white language-python\">radixArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "myArray = [ 3\n3\n, 4\n5\n, 4\n0\n, 2\n5\n, 1\n7\n, 2\n4\n]\nradixArray = [ [], [], [], [], [], [], [], [], [], [] ]",
          "html": "<code class=\"w3-white language-python\">myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">3<mark class=\"dsa_mark\">3</mark></span><span class=\"token punctuation\">,</span> <span class=\"token number\">4<mark class=\"dsa_mark\">5</mark></span><span class=\"token punctuation\">,</span> <span class=\"token number\">4<mark class=\"dsa_mark\">0</mark></span><span class=\"token punctuation\">,</span> <span class=\"token number\">2<mark class=\"dsa_mark\">5</mark></span><span class=\"token punctuation\">,</span> <span class=\"token number\">1<mark class=\"dsa_mark\">7</mark></span><span class=\"token punctuation\">,</span> <span class=\"token number\">2<mark class=\"dsa_mark\">4</mark></span><span class=\"token punctuation\">]</span></code><br/>\n  <code class=\"w3-white language-python\">radixArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "myArray = [ ]\nradixArray = [ [4\n0\n], [], [], [3\n3\n], [2\n4\n], [4\n5\n, 2\n5\n], [], [1\n7\n], [], [] ]",
          "html": "<code class=\"w3-white language-python\">myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span></code><br/>\n  <code class=\"w3-white language-python\">radixArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4<mark class=\"dsa_mark\">0</mark></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3<mark class=\"dsa_mark\">3</mark></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2<mark class=\"dsa_mark\">4</mark></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4<mark class=\"dsa_mark\">5</mark></span><span class=\"token punctuation\">,</span> <span class=\"token number\">2<mark class=\"dsa_mark\">5</mark></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1<mark class=\"dsa_mark\">7</mark></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "myArray = [\n4\n0,\n3\n3,\n2\n4,\n4\n5,\n2\n5,\n1\n7 ]\nradixArray = [ [], [], [], [], [], [], [], [], [], [] ]",
          "html": "<code class=\"w3-white language-python\">myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\"><mark class=\"dsa_mark\">4</mark>0</span><span class=\"token punctuation\">,</span> <span class=\"token number\"><mark class=\"dsa_mark\">3</mark>3</span><span class=\"token punctuation\">,</span> <span class=\"token number\"><mark class=\"dsa_mark\">2</mark>4</span><span class=\"token punctuation\">,</span> <span class=\"token number\"><mark class=\"dsa_mark\">4</mark>5</span><span class=\"token punctuation\">,</span> <span class=\"token number\"><mark class=\"dsa_mark\">2</mark>5</span><span class=\"token punctuation\">,</span> <span class=\"token number\"><mark class=\"dsa_mark\">1</mark>7</span> <span class=\"token punctuation\">]</span></code><br/>\n  <code class=\"w3-white language-python\">radixArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_algo_radixsort.php"
      }
    },
    {
      "title": "DSA Merge Sort",
      "code": [
        {
          "text": "def mergeSort(arr): if len(arr) <= 1: return arr mid = len(arr) // 2 leftHalf = arr[:mid] rightHalf = arr[mid:] sortedLeft = mergeSort(leftHalf) sortedRight = mergeSort(rightHalf) return merge(sortedLeft, sortedRight) def merge(left, right): result = [] i = j = 0 while i < len(left) and j < len(right): if left[i] < right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 result.extend(left[i:]) result.extend(right[j:]) return result unsortedArr = [3, 7, 6, -10, 15, 23.5, 55, -13] sortedArr = mergeSort(unsortedArr) print(\"Sorted array:\", sortedArr)",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> arr\n\n    mid <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n    leftHalf <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>mid<span class=\"token punctuation\">]</span>\n    rightHalf <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n    sortedLeft <span class=\"token operator\">=</span> mergeSort<span class=\"token punctuation\">(</span>leftHalf<span class=\"token punctuation\">)</span>\n    sortedRight <span class=\"token operator\">=</span> mergeSort<span class=\"token punctuation\">(</span>rightHalf<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-return\">return</span> merge<span class=\"token punctuation\">(</span>sortedLeft<span class=\"token punctuation\">,</span> sortedRight<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    i <span class=\"token operator\">=</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword keyword-while\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-and\">and</span> j <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> left<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n            result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            j <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    result<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    result<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-return\">return</span> result\n\nunsortedArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span>\nsortedArr <span class=\"token operator\">=</span> mergeSort<span class=\"token punctuation\">(</span>unsortedArr<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sorted array:\"</span><span class=\"token punctuation\">,</span> sortedArr<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"6-7\" class=\" line-highlight\" style=\"top: 122px; height: 48px; width: 639px;\"/><div aria-hidden=\"true\" data-range=\"26-27\" class=\" line-highlight\" style=\"top: 602px; height: 48px; width: 639px;\"/>"
        },
        {
          "text": "def merge(left, right): result = [] i = j = 0 while i < len(left) and j < len(right): if left[i] < right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 result.extend(left[i:]) result.extend(right[j:]) return result def mergeSort(arr): step = 1 # Starting with sub-arrays of length 1 length = len(arr) while step < length: for i in range(0, length, 2 * step): left = arr[i:i + step] right = arr[i + step:i + 2 * step] merged = merge(left, right) # Place the merged array back into the original array for j, val in enumerate(merged): arr[i + j] = val step *= 2 # Double the sub-array length for the next iteration return arr unsortedArr = [3, 7, 6, -10, 15, 23.5, 55, -13] sortedArr = mergeSort(unsortedArr) print(\"Sorted array:\", sortedArr)",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    i <span class=\"token operator\">=</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    \n    <span class=\"token keyword keyword-while\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-and\">and</span> j <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> left<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n            result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            j <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            \n    result<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    result<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword keyword-return\">return</span> result\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    step <span class=\"token operator\">=</span> <span class=\"token number\">1</span>  <span class=\"token comment\"># Starting with sub-arrays of length 1</span>\n    length <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword keyword-while\">while</span> step <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            left <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i <span class=\"token operator\">+</span> step<span class=\"token punctuation\">]</span>\n            right <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> step<span class=\"token punctuation\">:</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> step<span class=\"token punctuation\">]</span>\n            \n            merged <span class=\"token operator\">=</span> merge<span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span>\n            \n            <span class=\"token comment\"># Place the merged array back into the original array</span>\n            <span class=\"token keyword keyword-for\">for</span> j<span class=\"token punctuation\">,</span> val <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>merged<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                arr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val\n                \n        step <span class=\"token operator\">*=</span> <span class=\"token number\">2</span>  <span class=\"token comment\"># Double the sub-array length for the next iteration</span>\n        \n    <span class=\"token keyword keyword-return\">return</span> arr\n\nunsortedArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span>\nsortedArr <span class=\"token operator\">=</span> mergeSort<span class=\"token punctuation\">(</span>unsortedArr<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sorted array:\"</span><span class=\"token punctuation\">,</span> sortedArr<span class=\"token punctuation\">)</span>\n<div aria-hidden=\"true\" data-range=\"22-33\" class=\" line-highlight\" data-start=\"22\" data-end=\"33\" style=\"top: 504px; width: 657px;\"> \n \n \n \n \n \n \n \n \n \n \n \n</div></code>"
        },
        {
          "text": "[ 12, 8, 9, 3, 11, 5, 4]\n[ 12, 8, 9] [ 3, 11, 5, 4]\n[ 12] [ 8, 9] [ 3, 11, 5, 4]\n[ 12] [ 8] [ 9] [ 3, 11, 5, 4]",
          "html": "<code class=\"w3-white language-python\"><span class=\"token punctuation\">[</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span></code><br/>\n  <code class=\"w3-white language-python\"><span class=\"token punctuation\">[</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span></code><br/>\n  <code class=\"w3-white language-python\"><span class=\"token punctuation\">[</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span></code><br/>\n  <code class=\"w3-white language-python\"><span class=\"token punctuation\">[</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "[ 12] [\n8\n,\n9\n] [ 3, 11, 5, 4]",
          "html": "<code class=\"w3-white language-python\"><span class=\"token punctuation\">[</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><mark class=\"dsa_mark\"> <span class=\"token number\">8</span></mark><span class=\"token number\"/><span class=\"token punctuation\">,</span><mark class=\"dsa_mark\"> <span class=\"token number\">9</span></mark><span class=\"token number\"/><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "[\n8\n,\n9\n,\n12\n] [ 3, 11, 5, 4]",
          "html": "<code class=\"w3-white language-python\"><span class=\"token punctuation\">[</span><mark class=\"dsa_mark\"> <span class=\"token number\">8</span></mark><span class=\"token number\"/><span class=\"token punctuation\">,</span><mark class=\"dsa_mark\"> <span class=\"token number\">9</span></mark><span class=\"token number\"/><span class=\"token punctuation\">,</span><mark class=\"dsa_mark\"> <span class=\"token number\">12</span></mark><span class=\"token number\"/><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "[ 8, 9, 12] [ 3, 11, 5, 4]\n[ 8, 9, 12] [ 3, 11] [ 5, 4]\n[ 8, 9, 12] [ 3] [ 11] [ 5, 4]",
          "html": "<code class=\"w3-white language-python\"><span class=\"token punctuation\">[</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span></code><br/>\n  <code class=\"w3-white language-python\"><span class=\"token punctuation\">[</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span></code><br/>\n  <code class=\"w3-white language-python\"><span class=\"token punctuation\">[</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span></code><br/>"
        },
        {
          "text": "[ 8, 9, 12] [ 3, 11] [\n5\n] [\n4\n]\n[ 8, 9, 12] [ 3, 11] [\n4\n,\n5\n]",
          "html": "<code class=\"w3-white language-python\"><span class=\"token punctuation\">[</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><mark class=\"dsa_mark\"> <span class=\"token number\">5</span></mark><span class=\"token number\"/><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><mark class=\"dsa_mark\"> <span class=\"token number\">4</span></mark><span class=\"token number\"/><span class=\"token punctuation\">]</span></code><br/>\n  <code class=\"w3-white language-python\"><span class=\"token punctuation\">[</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><mark class=\"dsa_mark\"> <span class=\"token number\">4</span></mark><span class=\"token number\"/><span class=\"token punctuation\">,</span><mark class=\"dsa_mark\"> <span class=\"token number\">5</span></mark><span class=\"token number\"/><span class=\"token punctuation\">]</span></code><br/>"
        },
        {
          "text": "Before [\n8\n, 9, 12] [\n3\n, 4, 5, 11]\nAfter: [\n3\n,\n8\n, 9, 12] [ 4, 5, 11]",
          "html": "<code class=\"w3-white language-python\">Before <span class=\"token punctuation\">[</span><mark class=\"dsa_mark\"> <span class=\"token number\">8</span></mark><span class=\"token number\"/><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><mark class=\"dsa_mark\"> <span class=\"token number\">3</span></mark><span class=\"token number\"/><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span></code><br/>\n  <code class=\"w3-white language-python\">After<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><mark class=\"dsa_mark\"> <span class=\"token number\">3</span></mark><span class=\"token number\"/><span class=\"token punctuation\">,</span><mark class=\"dsa_mark\"> <span class=\"token number\">8</span></mark><span class=\"token number\"/><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span></code><br/>"
        },
        {
          "text": "Before [ 3, 4, 5,\n8\n,\n9\n, 12] [\n11\n]\nAfter: [ 3, 4, 5,\n8\n,\n9\n, 12] [\n11\n]",
          "html": "<code class=\"w3-white language-python\">Before <span class=\"token punctuation\">[</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span><mark class=\"dsa_mark\"> <span class=\"token number\">8</span></mark><span class=\"token number\"/><span class=\"token punctuation\">,</span><mark class=\"dsa_mark\"> <span class=\"token number\">9</span></mark><span class=\"token number\"/><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><mark class=\"dsa_mark\"> <span class=\"token number\">11</span></mark><span class=\"token number\"/><span class=\"token punctuation\">]</span></code><br/>\n  <code class=\"w3-white language-python\">After<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span><mark class=\"dsa_mark\"> <span class=\"token number\">8</span></mark><span class=\"token number\"/><span class=\"token punctuation\">,</span><mark class=\"dsa_mark\"> <span class=\"token number\">9</span></mark><span class=\"token number\"/><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><mark class=\"dsa_mark\"> <span class=\"token number\">11</span></mark><span class=\"token number\"/><span class=\"token punctuation\">]</span></code><br/>"
        },
        {
          "text": "Before [ 3, 4, 5, 8, 9,\n12\n] [\n11\n]\nAfter: [ 3, 4, 5, 8, 9,\n11\n,\n12\n]",
          "html": "<code class=\"w3-white language-python\">Before <span class=\"token punctuation\">[</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span><mark class=\"dsa_mark\"> <span class=\"token number\">12</span></mark><span class=\"token number\"/><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><mark class=\"dsa_mark\"> <span class=\"token number\">11</span></mark><span class=\"token number\"/><span class=\"token punctuation\">]</span></code><br/>\n  <code class=\"w3-white language-python\">After<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span><mark class=\"dsa_mark\"> <span class=\"token number\">11</span></mark><span class=\"token number\"/><span class=\"token punctuation\">,</span><mark class=\"dsa_mark\"> <span class=\"token number\">12</span></mark><span class=\"token number\"/><span class=\"token punctuation\">]</span></code><br/>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_algo_mergesort.php"
      }
    },
    {
      "title": "DSA Linear Search",
      "code": [
        {
          "text": "def linearSearch(arr, targetVal): for i in range(len(arr)): if arr[i] == targetVal: return i return -1 arr = [3, 7, 2, 9, 5] targetVal = 9 result = linearSearch(arr, targetVal) if result != -1: print(\"Value\",targetVal,\"found at index\",result) else: print(\"Value\",targetVal,\"not found\")",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">linearSearch</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> targetVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> targetVal<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-return\">return</span> i\n    <span class=\"token keyword keyword-return\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\narr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\ntargetVal <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\n\nresult <span class=\"token operator\">=</span> linearSearch<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> targetVal<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-if\">if</span> result <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value\"</span><span class=\"token punctuation\">,</span>targetVal<span class=\"token punctuation\">,</span><span class=\"token string\">\"found at index\"</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value\"</span><span class=\"token punctuation\">,</span>targetVal<span class=\"token punctuation\">,</span><span class=\"token string\">\"not found\"</span><span class=\"token punctuation\">)</span></code>"
        },
        {
          "text": "[ 12, 8, 9, 11, 5, 11]",
          "html": "<code class=\"w3-white language-python\"><span class=\"token punctuation\">[</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "[\n12\n, 8, 9, 11, 5, 11]",
          "html": "<code class=\"w3-white language-python\"><span class=\"token punctuation\">[</span><mark class=\"dsa_mark\"> <span class=\"token number\">12</span></mark><span class=\"token number\"/><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_algo_linearsearch.php"
      }
    },
    {
      "title": "DSA Binary Search",
      "code": [
        {
          "text": "def binarySearch(arr, targetVal): left = 0 right = len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == targetVal: return mid if arr[mid] < targetVal: left = mid + 1 else: right = mid - 1 return -1 myArray = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19] myTarget = 15 result = binarySearch(myArray, myTarget) if result != -1: print(\"Value\",myTarget,\"found at index\", result) else: print(\"Target not found in array.\")",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> targetVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    left <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    right <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword keyword-while\">while</span> left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">:</span>\n        mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n\n        <span class=\"token keyword keyword-if\">if</span> arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> targetVal<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-return\">return</span> mid\n        \n        <span class=\"token keyword keyword-if\">if</span> arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> targetVal<span class=\"token punctuation\">:</span>\n            left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n            right <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword keyword-return\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\nmyArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">]</span>\nmyTarget <span class=\"token operator\">=</span> <span class=\"token number\">15</span>\n\nresult <span class=\"token operator\">=</span> binarySearch<span class=\"token punctuation\">(</span>myArray<span class=\"token punctuation\">,</span> myTarget<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-if\">if</span> result <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value\"</span><span class=\"token punctuation\">,</span>myTarget<span class=\"token punctuation\">,</span><span class=\"token string\">\"found at index\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Target not found in array.\"</span><span class=\"token punctuation\">)</span></code>"
        },
        {
          "text": "[ 2, 3, 7, 7, 11, 15, 25]",
          "html": "<code class=\"w3-white language-python\"><span class=\"token punctuation\">[</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "[ 2, 3, 7,\n7\n, 11, 15, 25]",
          "html": "<code class=\"w3-white language-python\"><span class=\"token punctuation\">[</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span><mark class=\"dsa_mark\"> <span class=\"token number\">7</span></mark><span class=\"token number\"/><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">]</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_algo_binarysearch.php"
      }
    },
    {
      "title": "DSA Linked Lists in Memory",
      "code": [
        {
          "text": "#include <stdio.h> int main() { int myVal = 13; printf(\"Value of integer 'myVal': %d\\n\", myVal); printf(\"Size of integer 'myVal': %lu bytes\\n\", sizeof(myVal)); // 4 bytes printf(\"Address to 'myVal': %p\\n\", &myVal); printf(\"Size of the address to 'myVal': %lu bytes\\n\", sizeof(&myVal)); // 8 bytes return 0; }",
          "html": "<code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token keyword keyword-int\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword keyword-int\">int</span> myVal <span class=\"token operator\">=</span> <span class=\"token number\">13</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value of integer 'myVal': %d\\n\"</span><span class=\"token punctuation\">,</span> myVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Size of integer 'myVal': %lu bytes\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-sizeof\">sizeof</span><span class=\"token punctuation\">(</span>myVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4 bytes</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Address to 'myVal': %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>myVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Size of the address to 'myVal': %lu bytes\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-sizeof\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>myVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 8 bytes</span>\n\n    <span class=\"token keyword keyword-return\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code>"
        },
        {
          "text": "#include <stdio.h> #include <stdlib.h> typedef struct Node { int data; struct Node* next; } Node; Node* createNode(int data) { Node* newNode = (Node*)malloc(sizeof(Node)); if (!newNode) { printf(\"Memory allocation failed!\\n\"); exit(1); } newNode->data = data; newNode->next = NULL; return newNode; } void printList(Node* node) { while (node) { printf(\"%d -> \", node->data); node = node->next; } printf(\"null\\n\"); } int main() { Node* node1 = createNode(3); Node* node2 = createNode(5); Node* node3 = createNode(13); Node* node4 = createNode(2); node1->next = node2; node2->next = node3; node3->next = node4; printList(node1); // Free the memory free(node1); free(node2); free(node3); free(node4); return 0; }",
          "html": "<code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"token keyword keyword-typedef\">typedef</span> <span class=\"token keyword keyword-struct\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-int\">int</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-struct\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> Node<span class=\"token punctuation\">;</span>\n\nNode<span class=\"token operator\">*</span> <span class=\"token function\">createNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-int\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Node<span class=\"token operator\">*</span> newNode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-sizeof\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>newNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Memory allocation failed!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    newNode<span class=\"token operator\">-&gt;</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    newNode<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-return\">return</span> newNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-void\">void</span> <span class=\"token function\">printList</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-while\">while</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d -&gt; \"</span><span class=\"token punctuation\">,</span> node<span class=\"token operator\">-&gt;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        node <span class=\"token operator\">=</span> node<span class=\"token operator\">-&gt;</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword keyword-int\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Node<span class=\"token operator\">*</span> node1 <span class=\"token operator\">=</span> <span class=\"token function\">createNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Node<span class=\"token operator\">*</span> node2 <span class=\"token operator\">=</span> <span class=\"token function\">createNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Node<span class=\"token operator\">*</span> node3 <span class=\"token operator\">=</span> <span class=\"token function\">createNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Node<span class=\"token operator\">*</span> node4 <span class=\"token operator\">=</span> <span class=\"token function\">createNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    node1<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> node2<span class=\"token punctuation\">;</span>\n    node2<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> node3<span class=\"token punctuation\">;</span>\n    node3<span class=\"token operator\">-&gt;</span>next <span class=\"token operator\">=</span> node4<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printList</span><span class=\"token punctuation\">(</span>node1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Free the memory</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>node1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>node2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>node3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>node4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword keyword-return\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code>"
        },
        {
          "text": "class Node: def __init__(self, data): self.data = data self.next = None node1 = Node(3) node2 = Node(5) node3 = Node(13) node4 = Node(2) node1.next = node2 node2.next = node3 node3.next = node4 currentNode = node1 while currentNode: print(currentNode.data, end=\" -> \") currentNode = currentNode.next print(\"null\")",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    \nnode1 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nnode2 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nnode3 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span>\nnode4 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\nnode1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node2\nnode2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node3\nnode3<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node4\n\ncurrentNode <span class=\"token operator\">=</span> node1\n<span class=\"token keyword keyword-while\">while</span> currentNode<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">)</span>\n    currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_theory_linkedlists_memory.php"
      }
    },
    {
      "title": "DSA Linked Lists Types",
      "code": [
        {
          "text": "class Node: def __init__(self, data): self.data = data self.next = None node1 = Node(3) node2 = Node(5) node3 = Node(13) node4 = Node(2) node1.next = node2 node2.next = node3 node3.next = node4 currentNode = node1 while currentNode: print(currentNode.data, end=\" -> \") currentNode = currentNode.next print(\"null\")",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    \nnode1 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nnode2 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nnode3 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span>\nnode4 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\nnode1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node2\nnode2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node3\nnode3<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node4\n\ncurrentNode <span class=\"token operator\">=</span> node1\n<span class=\"token keyword keyword-while\">while</span> currentNode<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">)</span>\n    currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span></code>"
        },
        {
          "text": "class Node: def __init__(self, data): self.data = data self.next = None self.prev = None node1 = Node(3) node2 = Node(5) node3 = Node(13) node4 = Node(2) node1.next = node2 node2.prev = node1 node2.next = node3 node3.prev = node2 node3.next = node4 node4.prev = node3 print(\"\\nTraversing forward:\") currentNode = node1 while currentNode: print(currentNode.data, end=\" -> \") currentNode = currentNode.next print(\"null\") print(\"\\nTraversing backward:\") currentNode = node4 while currentNode: print(currentNode.data, end=\" -> \") currentNode = currentNode.prev print(\"null\")",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    \nnode1 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nnode2 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nnode3 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span>\nnode4 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\nnode1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node2\n\nnode2<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> node1\nnode2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node3\n\nnode3<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> node2\nnode3<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node4\n\nnode4<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> node3\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nTraversing forward:\"</span><span class=\"token punctuation\">)</span>\ncurrentNode <span class=\"token operator\">=</span> node1\n<span class=\"token keyword keyword-while\">while</span> currentNode<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">)</span>\n    currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nTraversing backward:\"</span><span class=\"token punctuation\">)</span>\ncurrentNode <span class=\"token operator\">=</span> node4\n<span class=\"token keyword keyword-while\">while</span> currentNode<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">)</span>\n    currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>prev\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span></code>"
        },
        {
          "text": "class Node: def __init__(self, data): self.data = data self.next = None node1 = Node(3) node2 = Node(5) node3 = Node(13) node4 = Node(2) node1.next = node2 node2.next = node3 node3.next = node4 node4.next = node1 currentNode = node1 startNode = node1 print(currentNode.data, end=\" -> \") currentNode = currentNode.next while currentNode != startNode: print(currentNode.data, end=\" -> \") currentNode = currentNode.next print(\"...\")",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    \nnode1 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nnode2 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nnode3 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span>\nnode4 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\nnode1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node2\nnode2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node3\nnode3<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node4\nnode4<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node1\n\ncurrentNode <span class=\"token operator\">=</span> node1\nstartNode <span class=\"token operator\">=</span> node1\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">)</span> \ncurrentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> \n\n<span class=\"token keyword keyword-while\">while</span> currentNode <span class=\"token operator\">!=</span> startNode<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">)</span>\n    currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"14\" class=\" line-highlight\" style=\"top: 314px; height: 24px; width: 639px;\"/><div aria-hidden=\"true\" data-range=\"17\" class=\" line-highlight\" style=\"top: 386px; height: 24px; width: 639px;\"/>"
        },
        {
          "text": "class Node: def __init__(self, data): self.data = data self.next = None self.prev = None node1 = Node(3) node2 = Node(5) node3 = Node(13) node4 = Node(2) node1.next = node2 node1.prev = node4 node2.prev = node1 node2.next = node3 node3.prev = node2 node3.next = node4 node4.prev = node3 node4.next = node1 print(\"\\nTraversing forward:\") currentNode = node1 startNode = node1 print(currentNode.data, end=\" -> \") currentNode = currentNode.next while currentNode != startNode: print(currentNode.data, end=\" -> \") currentNode = currentNode.next print(\"...\") print(\"\\nTraversing backward:\") currentNode = node4 startNode = node4 print(currentNode.data, end=\" -> \") currentNode = currentNode.prev while currentNode != startNode: print(currentNode.data, end=\" -> \") currentNode = currentNode.prev print(\"...\")",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\nnode1 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nnode2 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nnode3 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span>\nnode4 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\nnode1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node2\nnode1<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> node4\n\nnode2<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> node1\nnode2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node3\n\nnode3<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> node2\nnode3<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node4\n\nnode4<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> node3\nnode4<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node1\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nTraversing forward:\"</span><span class=\"token punctuation\">)</span>\ncurrentNode <span class=\"token operator\">=</span> node1\nstartNode <span class=\"token operator\">=</span> node1\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">)</span>\ncurrentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n<span class=\"token keyword keyword-while\">while</span> currentNode <span class=\"token operator\">!=</span> startNode<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">)</span>\n    currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nTraversing backward:\"</span><span class=\"token punctuation\">)</span>\ncurrentNode <span class=\"token operator\">=</span> node4\nstartNode <span class=\"token operator\">=</span> node4\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">)</span>\ncurrentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>prev\n\n<span class=\"token keyword keyword-while\">while</span> currentNode <span class=\"token operator\">!=</span> startNode<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">)</span>\n    currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>prev\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"13\" class=\" line-highlight\" style=\"top: 290px; height: 24px; width: 639px;\"/><div aria-hidden=\"true\" data-range=\"22\" class=\" line-highlight\" style=\"top: 506px; height: 24px; width: 639px;\"/><div aria-hidden=\"true\" data-range=\"26\" class=\" line-highlight\" style=\"top: 602px; height: 24px; width: 639px;\"/>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_data_linkedlists_types.php"
      }
    },
    {
      "title": "DSA Linked Lists Operations",
      "code": [
        {
          "text": "class Node: def __init__(self, data): self.data = data self.next = None def traverseAndPrint(head): currentNode = head while currentNode: print(currentNode.data, end=\" -> \") currentNode = currentNode.next print(\"null\") node1 = Node(7) node2 = Node(11) node3 = Node(3) node4 = Node(2) node5 = Node(9) node1.next = node2 node2.next = node3 node3.next = node4 node4.next = node5 traverseAndPrint(node1)",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">traverseAndPrint</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    currentNode <span class=\"token operator\">=</span> head\n    <span class=\"token keyword keyword-while\">while</span> currentNode<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">)</span>\n        currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span>\n\nnode1 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\nnode2 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\nnode3 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nnode4 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nnode5 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n\nnode1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node2\nnode2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node3\nnode3<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node4\nnode4<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node5\n\ntraverseAndPrint<span class=\"token punctuation\">(</span>node1<span class=\"token punctuation\">)</span></code>"
        },
        {
          "text": "class Node: def __init__(self, data): self.data = data self.next = None def findLowestValue(head): minValue = head.data currentNode = head.next while currentNode: if currentNode.data < minValue: minValue = currentNode.data currentNode = currentNode.next return minValue node1 = Node(7) node2 = Node(11) node3 = Node(3) node4 = Node(2) node5 = Node(9) node1.next = node2 node2.next = node3 node3.next = node4 node4.next = node5 print(\"The lowest value in the linked list is:\", findLowestValue(node1))",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">findLowestValue</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    minValue <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>data\n    currentNode <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n    <span class=\"token keyword keyword-while\">while</span> currentNode<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> currentNode<span class=\"token punctuation\">.</span>data <span class=\"token operator\">&lt;</span> minValue<span class=\"token punctuation\">:</span>\n            minValue <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>data\n        currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n    <span class=\"token keyword keyword-return\">return</span> minValue\n\nnode1 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\nnode2 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\nnode3 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nnode4 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nnode5 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n\nnode1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node2\nnode2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node3\nnode3<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node4\nnode4<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node5\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The lowest value in the linked list is:\"</span><span class=\"token punctuation\">,</span> findLowestValue<span class=\"token punctuation\">(</span>node1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><div aria-hidden=\"true\" data-range=\"7\" class=\" line-highlight\" data-start=\"7\" style=\"top: 144px; width: 665px;\"> \n</div><div aria-hidden=\"true\" data-range=\"10-11\" class=\" line-highlight\" data-start=\"10\" data-end=\"11\" style=\"top: 216px; width: 665px;\"> \n \n</div></code>"
        },
        {
          "text": "class Node: def __init__(self, data): self.data = data self.next = None def traverseAndPrint(head): currentNode = head while currentNode: print(currentNode.data, end=\" -> \") currentNode = currentNode.next print(\"null\") def deleteSpecificNode(head, nodeToDelete): if head == nodeToDelete: return head.next currentNode = head while currentNode.next and currentNode.next != nodeToDelete: currentNode = currentNode.next if currentNode.next is None: return head currentNode.next = currentNode.next.next return head node1 = Node(7) node2 = Node(11) node3 = Node(3) node4 = Node(2) node5 = Node(9) node1.next = node2 node2.next = node3 node3.next = node4 node4.next = node5 print(\"Before deletion:\") traverseAndPrint(node1) # Delete node4 node1 = deleteSpecificNode(node1, node4) print(\"\\nAfter deletion:\") traverseAndPrint(node1)",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">traverseAndPrint</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    currentNode <span class=\"token operator\">=</span> head\n    <span class=\"token keyword keyword-while\">while</span> currentNode<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">)</span>\n        currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">deleteSpecificNode</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> nodeToDelete<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword keyword-if\">if</span> head <span class=\"token operator\">==</span> nodeToDelete<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n    currentNode <span class=\"token operator\">=</span> head\n    <span class=\"token keyword keyword-while\">while</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token keyword keyword-and\">and</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">!=</span> nodeToDelete<span class=\"token punctuation\">:</span>\n        currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n    <span class=\"token keyword keyword-if\">if</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> head\n\n    currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n    <span class=\"token keyword keyword-return\">return</span> head\n\nnode1 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\nnode2 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\nnode3 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nnode4 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nnode5 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n\nnode1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node2\nnode2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node3\nnode3<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node4\nnode4<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node5\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before deletion:\"</span><span class=\"token punctuation\">)</span>\ntraverseAndPrint<span class=\"token punctuation\">(</span>node1<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Delete node4</span>\nnode1 <span class=\"token operator\">=</span> deleteSpecificNode<span class=\"token punctuation\">(</span>node1<span class=\"token punctuation\">,</span> node4<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nAfter deletion:\"</span><span class=\"token punctuation\">)</span>\ntraverseAndPrint<span class=\"token punctuation\">(</span>node1<span class=\"token punctuation\">)</span><div aria-hidden=\"true\" data-range=\"13-27\" class=\" line-highlight\" data-start=\"13\" data-end=\"27\" style=\"top: 288px; width: 639px;\"> \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n</div></code>"
        },
        {
          "text": "class Node: def __init__(self, data): self.data = data self.next = None def traverseAndPrint(head): currentNode = head while currentNode: print(currentNode.data, end=\" -> \") currentNode = currentNode.next print(\"null\") def insertNodeAtPosition(head, newNode, position): if position == 1: newNode.next = head return newNode currentNode = head for _ in range(position - 2): if currentNode is None: break currentNode = currentNode.next newNode.next = currentNode.next currentNode.next = newNode return head node1 = Node(7) node2 = Node(3) node3 = Node(2) node4 = Node(9) node1.next = node2 node2.next = node3 node3.next = node4 print(\"Original list:\") traverseAndPrint(node1) # Insert a new node with value 97 at position 2 newNode = Node(97) node1 = insertNodeAtPosition(node1, newNode, 2) print(\"\\nAfter insertion:\") traverseAndPrint(node1)",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">traverseAndPrint</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    currentNode <span class=\"token operator\">=</span> head\n    <span class=\"token keyword keyword-while\">while</span> currentNode<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">)</span>\n        currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">insertNodeAtPosition</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> position <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        newNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> head\n        <span class=\"token keyword keyword-return\">return</span> newNode\n    \n    currentNode <span class=\"token operator\">=</span> head\n    <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> currentNode <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-break\">break</span>\n        currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n    newNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n    currentNode<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> newNode\n    <span class=\"token keyword keyword-return\">return</span> head\n\nnode1 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\nnode2 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nnode3 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nnode4 <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n\nnode1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node2\nnode2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node3\nnode3<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node4\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Original list:\"</span><span class=\"token punctuation\">)</span>\ntraverseAndPrint<span class=\"token punctuation\">(</span>node1<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Insert a new node with value 97 at position 2</span>\nnewNode <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span><span class=\"token number\">97</span><span class=\"token punctuation\">)</span>\nnode1 <span class=\"token operator\">=</span> insertNodeAtPosition<span class=\"token punctuation\">(</span>node1<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nAfter insertion:\"</span><span class=\"token punctuation\">)</span>\ntraverseAndPrint<span class=\"token punctuation\">(</span>node1<span class=\"token punctuation\">)</span><div aria-hidden=\"true\" data-range=\"13-27\" class=\" line-highlight\" data-start=\"13\" data-end=\"27\" style=\"top: 288px; width: 639px;\"> \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n</div></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_algo_linkedlists_operations.php"
      }
    },
    {
      "title": "DSA Stacks",
      "code": [
        {
          "text": "stack = [] # Push stack.append('A') stack.append('B') stack.append('C') print(\"Stack: \", stack) # Pop element = stack.pop() print(\"Pop: \", element) # Peek topElement = stack[-1] print(\"Peek: \", topElement) # isEmpty isEmpty = not bool(stack) print(\"isEmpty: \", isEmpty) # Size print(\"Size: \",len(stack))",
          "html": "<code class=\"language-python\">stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># Push</span>\nstack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\nstack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\nstack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stack: \"</span><span class=\"token punctuation\">,</span> stack<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Pop</span>\nelement <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pop: \"</span><span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Peek</span>\ntopElement <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Peek: \"</span><span class=\"token punctuation\">,</span> topElement<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># isEmpty</span>\nisEmpty <span class=\"token operator\">=</span> <span class=\"token keyword keyword-not\">not</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"isEmpty: \"</span><span class=\"token punctuation\">,</span> isEmpty<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Size</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Size: \"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code>"
        },
        {
          "text": "class Stack: def __init__(self): self.stack = [] def push(self, element): self.stack.append(element) def pop(self): if self.isEmpty(): return \"Stack is empty\" return self.stack.pop() def peek(self): if self.isEmpty(): return \"Stack is empty\" return self.stack[-1] def isEmpty(self): return len(self.stack) == 0 def size(self): return len(self.stack) # Create a stack myStack = Stack() myStack.push('A') myStack.push('B') myStack.push('C') print(\"Stack: \", myStack.stack) print(\"Pop: \", myStack.pop()) print(\"Peek: \", myStack.peek()) print(\"isEmpty: \", myStack.isEmpty()) print(\"Size: \", myStack.size())",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-return\">return</span> <span class=\"token string\">\"Stack is empty\"</span>\n        <span class=\"token keyword keyword-return\">return</span> self<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-return\">return</span> <span class=\"token string\">\"Stack is empty\"</span>\n        <span class=\"token keyword keyword-return\">return</span> self<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Create a stack</span>\nmyStack <span class=\"token operator\">=</span> Stack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmyStack<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\nmyStack<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\nmyStack<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stack: \"</span><span class=\"token punctuation\">,</span> myStack<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pop: \"</span><span class=\"token punctuation\">,</span> myStack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Peek: \"</span><span class=\"token punctuation\">,</span> myStack<span class=\"token punctuation\">.</span>peek<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"isEmpty: \"</span><span class=\"token punctuation\">,</span> myStack<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Size: \"</span><span class=\"token punctuation\">,</span> myStack<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code>"
        },
        {
          "text": "class Node: def __init__(self, value): self.value = value self.next = None class Stack: def __init__(self): self.head = None self.size = 0 def push(self, value): new_node = Node(value) if self.head: new_node.next = self.head self.head = new_node self.size += 1 def pop(self): if self.isEmpty(): return \"Stack is empty\" popped_node = self.head self.head = self.head.next self.size -= 1 return popped_node.value def peek(self): if self.isEmpty(): return \"Stack is empty\" return self.head.value def isEmpty(self): return self.size == 0 def stackSize(self): return self.size myStack = Stack() myStack.push('A') myStack.push('B') myStack.push('C') print(\"Pop: \", myStack.pop()) print(\"Peek: \", myStack.peek()) print(\"isEmpty: \", myStack.isEmpty()) print(\"Size: \", myStack.stackSize())",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        new_node <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">:</span>\n            new_node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> new_node\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-return\">return</span> <span class=\"token string\">\"Stack is empty\"</span>\n        popped_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword keyword-return\">return</span> popped_node<span class=\"token punctuation\">.</span>value\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-return\">return</span> <span class=\"token string\">\"Stack is empty\"</span>\n        <span class=\"token keyword keyword-return\">return</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>value\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">stackSize</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> self<span class=\"token punctuation\">.</span>size\n\nmyStack <span class=\"token operator\">=</span> Stack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmyStack<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\nmyStack<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\nmyStack<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pop: \"</span><span class=\"token punctuation\">,</span> myStack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Peek: \"</span><span class=\"token punctuation\">,</span> myStack<span class=\"token punctuation\">.</span>peek<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"isEmpty: \"</span><span class=\"token punctuation\">,</span> myStack<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Size: \"</span><span class=\"token punctuation\">,</span> myStack<span class=\"token punctuation\">.</span>stackSize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_data_stacks.php"
      }
    },
    {
      "title": "DSA Queues",
      "code": [
        {
          "text": "queue = [] # Enqueue queue.append('A') queue.append('B') queue.append('C') print(\"Queue: \", queue) # Dequeue element = queue.pop(0) print(\"Dequeue: \", element) # Peek frontElement = queue[0] print(\"Peek: \", frontElement) # isEmpty isEmpty = not bool(queue) print(\"isEmpty: \", isEmpty) # Size print(\"Size: \", len(queue))",
          "html": "<code class=\"language-python\">queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># Enqueue</span>\nqueue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\nqueue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\nqueue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Queue: \"</span><span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Dequeue</span>\nelement <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dequeue: \"</span><span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Peek</span>\nfrontElement <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Peek: \"</span><span class=\"token punctuation\">,</span> frontElement<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># isEmpty</span>\nisEmpty <span class=\"token operator\">=</span> <span class=\"token keyword keyword-not\">not</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"isEmpty: \"</span><span class=\"token punctuation\">,</span> isEmpty<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Size</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Size: \"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code>"
        },
        {
          "text": "class Queue: def __init__(self): self.queue = [] def enqueue(self, element): self.queue.append(element) def dequeue(self): if self.isEmpty(): return \"Queue is empty\" return self.queue.pop(0) def peek(self): if self.isEmpty(): return \"Queue is empty\" return self.queue[0] def isEmpty(self): return len(self.queue) == 0 def size(self): return len(self.queue) # Create a queue myQueue = Queue() myQueue.enqueue('A') myQueue.enqueue('B') myQueue.enqueue('C') print(\"Queue: \", myQueue.queue) print(\"Dequeue: \", myQueue.dequeue()) print(\"Peek: \", myQueue.peek()) print(\"isEmpty: \", myQueue.isEmpty()) print(\"Size: \", myQueue.size())",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-return\">return</span> <span class=\"token string\">\"Queue is empty\"</span>\n        <span class=\"token keyword keyword-return\">return</span> self<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-return\">return</span> <span class=\"token string\">\"Queue is empty\"</span>\n        <span class=\"token keyword keyword-return\">return</span> self<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Create a queue</span>\nmyQueue <span class=\"token operator\">=</span> Queue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmyQueue<span class=\"token punctuation\">.</span>enqueue<span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\nmyQueue<span class=\"token punctuation\">.</span>enqueue<span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\nmyQueue<span class=\"token punctuation\">.</span>enqueue<span class=\"token punctuation\">(</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Queue: \"</span><span class=\"token punctuation\">,</span> myQueue<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dequeue: \"</span><span class=\"token punctuation\">,</span> myQueue<span class=\"token punctuation\">.</span>dequeue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Peek: \"</span><span class=\"token punctuation\">,</span> myQueue<span class=\"token punctuation\">.</span>peek<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"isEmpty: \"</span><span class=\"token punctuation\">,</span> myQueue<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Size: \"</span><span class=\"token punctuation\">,</span> myQueue<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code>"
        },
        {
          "text": "class Node: def __init__(self, data): self.data = data self.next = None class Queue: def __init__(self): self.front = None self.rear = None self.length = 0 def enqueue(self, element): new_node = Node(element) if self.rear is None: self.front = self.rear = new_node self.length += 1 return self.rear.next = new_node self.rear = new_node self.length += 1 def dequeue(self): if self.isEmpty(): return \"Queue is empty\" temp = self.front self.front = temp.next self.length -= 1 if self.front is None: self.rear = None return temp.data def peek(self): if self.isEmpty(): return \"Queue is empty\" return self.front.data def isEmpty(self): return self.length == 0 def size(self): return self.length def printQueue(self): temp = self.front while temp: print(temp.data, end=\" \") temp = temp.next print() # Create a queue myQueue = Queue() myQueue.enqueue('A') myQueue.enqueue('B') myQueue.enqueue('C') print(\"Queue: \", end=\"\") myQueue.printQueue() print(\"Dequeue: \", myQueue.dequeue()) print(\"Peek: \", myQueue.peek()) print(\"isEmpty: \", myQueue.isEmpty()) print(\"Size: \", myQueue.size())",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>front <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>rear <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        new_node <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>rear <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>front <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>rear <span class=\"token operator\">=</span> new_node\n            self<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword keyword-return\">return</span>\n        self<span class=\"token punctuation\">.</span>rear<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> new_node\n        self<span class=\"token punctuation\">.</span>rear <span class=\"token operator\">=</span> new_node\n        self<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-return\">return</span> <span class=\"token string\">\"Queue is empty\"</span>\n        temp <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>front\n        self<span class=\"token punctuation\">.</span>front <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        self<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>front <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>rear <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword keyword-return\">return</span> temp<span class=\"token punctuation\">.</span>data\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-return\">return</span> <span class=\"token string\">\"Queue is empty\"</span>\n        <span class=\"token keyword keyword-return\">return</span> self<span class=\"token punctuation\">.</span>front<span class=\"token punctuation\">.</span>data\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> self<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> self<span class=\"token punctuation\">.</span>length\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">printQueue</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        temp <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>front\n        <span class=\"token keyword keyword-while\">while</span> temp<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n            temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Create a queue</span>\nmyQueue <span class=\"token operator\">=</span> Queue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmyQueue<span class=\"token punctuation\">.</span>enqueue<span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\nmyQueue<span class=\"token punctuation\">.</span>enqueue<span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\nmyQueue<span class=\"token punctuation\">.</span>enqueue<span class=\"token punctuation\">(</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Queue: \"</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\nmyQueue<span class=\"token punctuation\">.</span>printQueue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dequeue: \"</span><span class=\"token punctuation\">,</span> myQueue<span class=\"token punctuation\">.</span>dequeue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Peek: \"</span><span class=\"token punctuation\">,</span> myQueue<span class=\"token punctuation\">.</span>peek<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"isEmpty: \"</span><span class=\"token punctuation\">,</span> myQueue<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Size: \"</span><span class=\"token punctuation\">,</span> myQueue<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_data_queues.php"
      }
    },
    {
      "title": "DSA Hash Tables",
      "code": [
        {
          "text": "my_array = ['Pete', 'Jones', 'Lisa', 'Bob', 'Siri']",
          "html": "<code class=\"language-python\">my_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Pete'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Jones'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Lisa'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Siri'</span><span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "my_hash_set = [None,None,None,None,None,None,None,None,None,None]",
          "html": "<code class=\"language-python\">my_hash_set <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "def hash_function(value): sum_of_chars = 0 for char in value: sum_of_chars += ord(char) return sum_of_chars % 10 print(\"'Bob' has hash code:\",hash_function('Bob'))",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">hash_function</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sum_of_chars <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword keyword-for\">for</span> char <span class=\"token keyword keyword-in\">in</span> value<span class=\"token punctuation\">:</span>\n        sum_of_chars <span class=\"token operator\">+=</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-return\">return</span> sum_of_chars <span class=\"token operator\">%</span> <span class=\"token number\">10</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'Bob' has hash code:\"</span><span class=\"token punctuation\">,</span>hash_function<span class=\"token punctuation\">(</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code>"
        },
        {
          "text": "my_hash_set = [None,None,None,None,None,'Bob',None,None,None,None]",
          "html": "<code class=\"language-python\">my_hash_set <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "my_hash_set = [None,'Jones',None,'Lisa',None,'Bob',None,'Siri','Pete',None]",
          "html": "<code class=\"language-python\">my_hash_set <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Jones'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Lisa'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Siri'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Pete'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "my_hash_set = [None,'Jones',None,'Lisa',None,'Bob',None,'Siri','Pete',None] def hash_function(value): sum_of_chars = 0 for char in value: sum_of_chars += ord(char) return sum_of_chars % 10 def contains(name): index = hash_function(name) return my_hash_set[index] == name print(\"'Pete' is in the Hash Set:\",contains('Pete'))",
          "html": "<code class=\"language-python\">my_hash_set <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Jones'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Lisa'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Siri'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Pete'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">hash_function</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sum_of_chars <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword keyword-for\">for</span> char <span class=\"token keyword keyword-in\">in</span> value<span class=\"token punctuation\">:</span>\n        sum_of_chars <span class=\"token operator\">+=</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-return\">return</span> sum_of_chars <span class=\"token operator\">%</span> <span class=\"token number\">10</span>\n    \n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    index <span class=\"token operator\">=</span> hash_function<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-return\">return</span> my_hash_set<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> name\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'Pete' is in the Hash Set:\"</span><span class=\"token punctuation\">,</span>contains<span class=\"token punctuation\">(</span><span class=\"token string\">'Pete'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code>"
        },
        {
          "text": "my_hash_set = [ [None], ['Jones'], [None], ['Lisa', 'Stuart'], [None], ['Bob'], [None], ['Siri'], ['Pete'], [None] ]",
          "html": "<code class=\"language-python\">my_hash_set <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'Jones'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'Lisa'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Stuart'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'Siri'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'Pete'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "my_hash_set = [ [None], ['Jones'], [None], ['Lisa'], [None], ['Bob'], [None], ['Siri'], ['Pete'], [None] ] def hash_function(value): return sum(ord(char) for char in value) % 10 def add(value): index = hash_function(value) bucket = my_hash_set[index] if value not in bucket: bucket.append(value) def contains(value): index = hash_function(value) bucket = my_hash_set[index] return value in bucket add('Stuart') print(my_hash_set) print('Contains Stuart:',contains('Stuart'))",
          "html": "<code class=\"language-python\">my_hash_set <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'Jones'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'Lisa'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'Siri'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'Pete'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">hash_function</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-return\">return</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-for\">for</span> char <span class=\"token keyword keyword-in\">in</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span>\n    \n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    index <span class=\"token operator\">=</span> hash_function<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    bucket <span class=\"token operator\">=</span> my_hash_set<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword keyword-if\">if</span> value <span class=\"token keyword keyword-not\">not</span> <span class=\"token keyword keyword-in\">in</span> bucket<span class=\"token punctuation\">:</span>\n        bucket<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        \n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    index <span class=\"token operator\">=</span> hash_function<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    bucket <span class=\"token operator\">=</span> my_hash_set<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword keyword-return\">return</span> value <span class=\"token keyword keyword-in\">in</span> bucket\n\nadd<span class=\"token punctuation\">(</span><span class=\"token string\">'Stuart'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>my_hash_set<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Contains Stuart:'</span><span class=\"token punctuation\">,</span>contains<span class=\"token punctuation\">(</span><span class=\"token string\">'Stuart'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_theory_hashtables.php"
      }
    },
    {
      "title": "DSA Hash Sets",
      "code": [
        {
          "text": "class SimpleHashSet: def __init__(self, size=100): self.size = size self.buckets = [[] for _ in range(size)] # A list of buckets, each is a list (to handle collisions) def hash_function(self, value): # Simple hash function: sum of character codes modulo the number of buckets return sum(ord(char) for char in value) % self.size def add(self, value): # Add a value if it's not already present index = self.hash_function(value) bucket = self.buckets[index] if value not in bucket: bucket.append(value) def contains(self, value): # Check if a value exists in the set index = self.hash_function(value) bucket = self.buckets[index] return value in bucket def remove(self, value): # Remove a value index = self.hash_function(value) bucket = self.buckets[index] if value in bucket: bucket.remove(value) def print_set(self): # Print all elements in the hash set print(\"Hash Set Contents:\") for index, bucket in enumerate(self.buckets): print(f\"Bucket {index}: {bucket}\")",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">SimpleHashSet</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>buckets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># A list of buckets, each is a list (to handle collisions)</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">hash_function</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Simple hash function: sum of character codes modulo the number of buckets</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-for\">for</span> char <span class=\"token keyword keyword-in\">in</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>size\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Add a value if it's not already present</span>\n        index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>hash_function<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        bucket <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword keyword-if\">if</span> value <span class=\"token keyword keyword-not\">not</span> <span class=\"token keyword keyword-in\">in</span> bucket<span class=\"token punctuation\">:</span>\n            bucket<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Check if a value exists in the set</span>\n        index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>hash_function<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        bucket <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword keyword-return\">return</span> value <span class=\"token keyword keyword-in\">in</span> bucket\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Remove a value</span>\n        index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>hash_function<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        bucket <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword keyword-if\">if</span> value <span class=\"token keyword keyword-in\">in</span> bucket<span class=\"token punctuation\">:</span>\n            bucket<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">print_set</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Print all elements in the hash set</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hash Set Contents:\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> index<span class=\"token punctuation\">,</span> bucket <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Bucket </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>bucket<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code>"
        },
        {
          "text": "class SimpleHashSet: def __init__(self, size=100): self.size = size self.buckets = [[] for _ in range(size)] # A list of buckets, each is a list (to handle collisions) def hash_function(self, value): # Simple hash function: sum of character codes modulo the number of buckets return sum(ord(char) for char in value) % self.size def add(self, value): # Add a value if it's not already present index = self.hash_function(value) bucket = self.buckets[index] if value not in bucket: bucket.append(value) def contains(self, value): # Check if a value exists in the set index = self.hash_function(value) bucket = self.buckets[index] return value in bucket def remove(self, value): # Remove a value index = self.hash_function(value) bucket = self.buckets[index] if value in bucket: bucket.remove(value) def print_set(self): # Print all elements in the hash set print(\"Hash Set Contents:\") for index, bucket in enumerate(self.buckets): print(f\"Bucket {index}: {bucket}\") # Creating the Hash Set from the simulation hash_set = SimpleHashSet(size=10) hash_set.add(\"Charlotte\") hash_set.add(\"Thomas\") hash_set.add(\"Jens\") hash_set.add(\"Peter\") hash_set.add(\"Lisa\") hash_set.add(\"Adele\") hash_set.add(\"Michaela\") hash_set.add(\"Bob\") hash_set.print_set() print(\"\\n'Peter' is in the set:\",hash_set.contains('Peter')) print(\"Removing 'Peter'\") hash_set.remove('Peter') print(\"'Peter' is in the set:\",hash_set.contains('Peter')) print(\"'Adele' has hash code:\",hash_set.hash_function('Adele'))",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">SimpleHashSet</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>buckets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># A list of buckets, each is a list (to handle collisions)</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">hash_function</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Simple hash function: sum of character codes modulo the number of buckets</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-for\">for</span> char <span class=\"token keyword keyword-in\">in</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>size\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Add a value if it's not already present</span>\n        index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>hash_function<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        bucket <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword keyword-if\">if</span> value <span class=\"token keyword keyword-not\">not</span> <span class=\"token keyword keyword-in\">in</span> bucket<span class=\"token punctuation\">:</span>\n            bucket<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Check if a value exists in the set</span>\n        index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>hash_function<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        bucket <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword keyword-return\">return</span> value <span class=\"token keyword keyword-in\">in</span> bucket\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Remove a value</span>\n        index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>hash_function<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        bucket <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword keyword-if\">if</span> value <span class=\"token keyword keyword-in\">in</span> bucket<span class=\"token punctuation\">:</span>\n            bucket<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">print_set</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Print all elements in the hash set</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hash Set Contents:\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> index<span class=\"token punctuation\">,</span> bucket <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Bucket </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>bucket<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Creating the Hash Set from the simulation</span>\nhash_set <span class=\"token operator\">=</span> SimpleHashSet<span class=\"token punctuation\">(</span>size<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\nhash_set<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">\"Charlotte\"</span><span class=\"token punctuation\">)</span>\nhash_set<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">\"Thomas\"</span><span class=\"token punctuation\">)</span>\nhash_set<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">\"Jens\"</span><span class=\"token punctuation\">)</span>\nhash_set<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">\"Peter\"</span><span class=\"token punctuation\">)</span>\nhash_set<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">\"Lisa\"</span><span class=\"token punctuation\">)</span>\nhash_set<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">\"Adele\"</span><span class=\"token punctuation\">)</span>\nhash_set<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">\"Michaela\"</span><span class=\"token punctuation\">)</span>\nhash_set<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span>\n\nhash_set<span class=\"token punctuation\">.</span>print_set<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n'Peter' is in the set:\"</span><span class=\"token punctuation\">,</span>hash_set<span class=\"token punctuation\">.</span>contains<span class=\"token punctuation\">(</span><span class=\"token string\">'Peter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Removing 'Peter'\"</span><span class=\"token punctuation\">)</span>\nhash_set<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">'Peter'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'Peter' is in the set:\"</span><span class=\"token punctuation\">,</span>hash_set<span class=\"token punctuation\">.</span>contains<span class=\"token punctuation\">(</span><span class=\"token string\">'Peter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'Adele' has hash code:\"</span><span class=\"token punctuation\">,</span>hash_set<span class=\"token punctuation\">.</span>hash_function<span class=\"token punctuation\">(</span><span class=\"token string\">'Adele'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_data_hashsets.php"
      }
    },
    {
      "title": "DSA Hash Maps",
      "code": [
        {
          "text": "class SimpleHashMap: def __init__(self, size=100): self.size = size self.buckets = [[] for _ in range(size)] # A list of buckets, each is a list (to handle collisions) def hash_function(self, key): # Sum only the numerical values of the key, ignoring non-numeric characters numeric_sum = sum(int(char) for char in key if char.isdigit()) return numeric_sum % 10 # Perform modulo 10 on the sum def put(self, key, value): # Add or update a key-value pair index = self.hash_function(key) bucket = self.buckets[index] for i, (k, v) in enumerate(bucket): if k == key: bucket[i] = (key, value) # Update existing key return bucket.append((key, value)) # Add new key-value pair if not found def get(self, key): # Retrieve a value by key index = self.hash_function(key) bucket = self.buckets[index] for k, v in bucket: if k == key: return v return None # Key not found def remove(self, key): # Remove a key-value pair index = self.hash_function(key) bucket = self.buckets[index] for i, (k, v) in enumerate(bucket): if k == key: del bucket[i] # Remove the key-value pair return def print_map(self): # Print all key-value pairs in the hash map print(\"Hash Map Contents:\") for index, bucket in enumerate(self.buckets): print(f\"Bucket {index}: {bucket}\")",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">SimpleHashMap</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>buckets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># A list of buckets, each is a list (to handle collisions)</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">hash_function</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Sum only the numerical values of the key, ignoring non-numeric characters</span>\n        numeric_sum <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-for\">for</span> char <span class=\"token keyword keyword-in\">in</span> key <span class=\"token keyword keyword-if\">if</span> char<span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-return\">return</span> numeric_sum <span class=\"token operator\">%</span> <span class=\"token number\">10</span>  <span class=\"token comment\"># Perform modulo 10 on the sum</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Add or update a key-value pair</span>\n        index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>hash_function<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n        bucket <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword keyword-for\">for</span> i<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>bucket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> k <span class=\"token operator\">==</span> key<span class=\"token punctuation\">:</span>\n                bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Update existing key</span>\n                <span class=\"token keyword keyword-return\">return</span>\n        bucket<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Add new key-value pair if not found</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Retrieve a value by key</span>\n        index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>hash_function<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n        bucket <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword keyword-for\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword keyword-in\">in</span> bucket<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> k <span class=\"token operator\">==</span> key<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-return\">return</span> v\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">None</span>  <span class=\"token comment\"># Key not found</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Remove a key-value pair</span>\n        index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>hash_function<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n        bucket <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword keyword-for\">for</span> i<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>bucket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> k <span class=\"token operator\">==</span> key<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-del\">del</span> bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># Remove the key-value pair</span>\n                <span class=\"token keyword keyword-return\">return</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">print_map</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Print all key-value pairs in the hash map</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hash Map Contents:\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> index<span class=\"token punctuation\">,</span> bucket <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Bucket </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>bucket<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code>"
        },
        {
          "text": "class SimpleHashMap: def __init__(self, size=100): self.size = size self.buckets = [[] for _ in range(size)] # A list of buckets, each is a list (to handle collisions) def hash_function(self, key): # Sum only the numerical values of the key, ignoring non-numeric characters numeric_sum = sum(int(char) for char in key if char.isdigit()) return numeric_sum % 10 # Perform modulo 10 on the sum def put(self, key, value): # Add or update a key-value pair index = self.hash_function(key) bucket = self.buckets[index] for i, (k, v) in enumerate(bucket): if k == key: bucket[i] = (key, value) # Update existing key return bucket.append((key, value)) # Add new key-value pair if not found def get(self, key): # Retrieve a value by key index = self.hash_function(key) bucket = self.buckets[index] for k, v in bucket: if k == key: return v return None # Key not found def remove(self, key): # Remove a key-value pair index = self.hash_function(key) bucket = self.buckets[index] for i, (k, v) in enumerate(bucket): if k == key: del bucket[i] # Remove the key-value pair return def print_map(self): # Print all key-value pairs in the hash map print(\"Hash Map Contents:\") for index, bucket in enumerate(self.buckets): print(f\"Bucket {index}: {bucket}\") # Creating the Hash Map from the simulation hash_map = SimpleHashMap(size=10) # Adding some entries hash_map.put(\"123-4567\", \"Charlotte\") hash_map.put(\"123-4568\", \"Thomas\") hash_map.put(\"123-4569\", \"Jens\") hash_map.put(\"123-4570\", \"Peter\") hash_map.put(\"123-4571\", \"Lisa\") hash_map.put(\"123-4672\", \"Adele\") hash_map.put(\"123-4573\", \"Michaela\") hash_map.put(\"123-6574\", \"Bob\") hash_map.print_map() # Demonstrating retrieval print(\"\\nName associated with '123-4570':\", hash_map.get(\"123-4570\")) print(\"Updating the name for '123-4570' to 'James'\") hash_map.put(\"123-4570\",\"James\") # Checking if Peter is still there print(\"Name associated with '123-4570':\", hash_map.get(\"123-4570\"))",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">SimpleHashMap</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>buckets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># A list of buckets, each is a list (to handle collisions)</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">hash_function</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Sum only the numerical values of the key, ignoring non-numeric characters</span>\n        numeric_sum <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-for\">for</span> char <span class=\"token keyword keyword-in\">in</span> key <span class=\"token keyword keyword-if\">if</span> char<span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-return\">return</span> numeric_sum <span class=\"token operator\">%</span> <span class=\"token number\">10</span>  <span class=\"token comment\"># Perform modulo 10 on the sum</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Add or update a key-value pair</span>\n        index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>hash_function<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n        bucket <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword keyword-for\">for</span> i<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>bucket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> k <span class=\"token operator\">==</span> key<span class=\"token punctuation\">:</span>\n                bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Update existing key</span>\n                <span class=\"token keyword keyword-return\">return</span>\n        bucket<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Add new key-value pair if not found</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Retrieve a value by key</span>\n        index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>hash_function<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n        bucket <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword keyword-for\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword keyword-in\">in</span> bucket<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> k <span class=\"token operator\">==</span> key<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-return\">return</span> v\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">None</span>  <span class=\"token comment\"># Key not found</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Remove a key-value pair</span>\n        index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>hash_function<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n        bucket <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword keyword-for\">for</span> i<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>bucket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> k <span class=\"token operator\">==</span> key<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-del\">del</span> bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>  <span class=\"token comment\"># Remove the key-value pair</span>\n                <span class=\"token keyword keyword-return\">return</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">print_map</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Print all key-value pairs in the hash map</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hash Map Contents:\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> index<span class=\"token punctuation\">,</span> bucket <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Bucket </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>bucket<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Creating the Hash Map from the simulation</span>\nhash_map <span class=\"token operator\">=</span> SimpleHashMap<span class=\"token punctuation\">(</span>size<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Adding some entries</span>\nhash_map<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"123-4567\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Charlotte\"</span><span class=\"token punctuation\">)</span>\nhash_map<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"123-4568\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Thomas\"</span><span class=\"token punctuation\">)</span>\nhash_map<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"123-4569\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jens\"</span><span class=\"token punctuation\">)</span>\nhash_map<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"123-4570\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Peter\"</span><span class=\"token punctuation\">)</span>\nhash_map<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"123-4571\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lisa\"</span><span class=\"token punctuation\">)</span>\nhash_map<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"123-4672\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Adele\"</span><span class=\"token punctuation\">)</span>\nhash_map<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"123-4573\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Michaela\"</span><span class=\"token punctuation\">)</span>\nhash_map<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"123-6574\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span>\n\nhash_map<span class=\"token punctuation\">.</span>print_map<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Demonstrating retrieval</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nName associated with '123-4570':\"</span><span class=\"token punctuation\">,</span> hash_map<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"123-4570\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Updating the name for '123-4570' to 'James'\"</span><span class=\"token punctuation\">)</span>\nhash_map<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">\"123-4570\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"James\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Checking if Peter is still there</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name associated with '123-4570':\"</span><span class=\"token punctuation\">,</span> hash_map<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"123-4570\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_data_hashmaps.php"
      }
    },
    {
      "title": "DSA Binary Trees",
      "code": [
        {
          "text": "class TreeNode: def __init__(self, data): self.data = data self.left = None self.right = None root = TreeNode('R') nodeA = TreeNode('A') nodeB = TreeNode('B') nodeC = TreeNode('C') nodeD = TreeNode('D') nodeE = TreeNode('E') nodeF = TreeNode('F') nodeG = TreeNode('G') root.left = nodeA root.right = nodeB nodeA.left = nodeC nodeA.right = nodeD nodeB.left = nodeE nodeB.right = nodeF nodeF.left = nodeG # Test print(\"root.right.left.data:\", root.right.left.data)",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\nroot <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token string\">'R'</span><span class=\"token punctuation\">)</span>\nnodeA <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\nnodeB <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\nnodeC <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\nnodeD <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\nnodeE <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span>\nnodeF <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token string\">'F'</span><span class=\"token punctuation\">)</span>\nnodeG <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token string\">'G'</span><span class=\"token punctuation\">)</span>\n\nroot<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> nodeA\nroot<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> nodeB\n\nnodeA<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> nodeC\nnodeA<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> nodeD\n\nnodeB<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> nodeE\nnodeB<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> nodeF\n\nnodeF<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> nodeG\n\n<span class=\"token comment\"># Test</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root.right.left.data:\"</span><span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_data_binarytrees.php"
      }
    },
    {
      "title": "DSA Pre-order Traversal",
      "code": [
        {
          "text": "def preOrderTraversal(node): if node is None: return print(node.data, end=\", \") preOrderTraversal(node.left) preOrderTraversal(node.right)",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">preOrderTraversal</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> node <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span>\n    preOrderTraversal<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    preOrderTraversal<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/></span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_algo_binarytrees_preorder.php"
      }
    },
    {
      "title": "DSA In-order Traversal",
      "code": [
        {
          "text": "def inOrderTraversal(node): if node is None: return inOrderTraversal(node.left) print(node.data, end=\", \") inOrderTraversal(node.right)",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">inOrderTraversal</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> node <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span>\n    inOrderTraversal<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span>\n    inOrderTraversal<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/></span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_algo_binarytrees_inorder.php"
      }
    },
    {
      "title": "DSA Post-order Traversal",
      "code": [
        {
          "text": "def postOrderTraversal(node): if node is None: return postOrderTraversal(node.left) postOrderTraversal(node.right) print(node.data, end=\", \")",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">postOrderTraversal</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> node <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span>\n    postOrderTraversal<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    postOrderTraversal<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/></span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_algo_binarytrees_postorder.php"
      }
    },
    {
      "title": "DSA Array Implementation",
      "code": [
        {
          "text": "binary_tree_array = ['R', 'A', 'B', 'C', 'D', 'E', 'F', None, None, None, None, None, None, 'G'] def left_child_index(index): return 2 * index + 1 def right_child_index(index): return 2 * index + 2 def get_data(index): if 0 <= index < len(binary_tree_array): return binary_tree_array[index] return None right_child = right_child_index(0) left_child_of_right_child = left_child_index(right_child) data = get_data(left_child_of_right_child) print(\"root.right.left.data:\", data)",
          "html": "<code class=\"language-python\">binary_tree_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">left_child_index</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-return\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">right_child_index</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-return\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> index <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">get_data</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> index <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>binary_tree_array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> binary_tree_array<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">None</span>\n\nright_child <span class=\"token operator\">=</span> right_child_index<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nleft_child_of_right_child <span class=\"token operator\">=</span> left_child_index<span class=\"token punctuation\">(</span>right_child<span class=\"token punctuation\">)</span>\ndata <span class=\"token operator\">=</span> get_data<span class=\"token punctuation\">(</span>left_child_of_right_child<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root.right.left.data:\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code>"
        },
        {
          "text": "binary_tree_array = ['R', 'A', 'B', 'C', 'D', 'E', 'F']",
          "html": "<code class=\"language-python\">binary_tree_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/></span></code>"
        },
        {
          "text": "binary_tree_array = ['R', 'A', 'B', 'C', 'D', 'E', 'F', None, None, None, None, None, None, 'G'] def left_child_index(index): return 2 * index + 1 def right_child_index(index): return 2 * index + 2 def pre_order(index): if index >= len(binary_tree_array) or binary_tree_array[index] is None: return [] return [binary_tree_array[index]] + pre_order(left_child_index(index)) + pre_order(right_child_index(index)) def in_order(index): if index >= len(binary_tree_array) or binary_tree_array[index] is None: return [] return in_order(left_child_index(index)) + [binary_tree_array[index]] + in_order(right_child_index(index)) def post_order(index): if index >= len(binary_tree_array) or binary_tree_array[index] is None: return [] return post_order(left_child_index(index)) + post_order(right_child_index(index)) + [binary_tree_array[index]] print(\"Pre-order Traversal:\", pre_order(0)) print(\"In-order Traversal:\", in_order(0)) print(\"Post-order Traversal:\", post_order(0))",
          "html": "<code class=\"language-python\">binary_tree_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">left_child_index</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-return\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">right_child_index</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-return\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> index <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">pre_order</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> index <span class=\"token operator\">&gt;=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>binary_tree_array<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-or\">or</span> binary_tree_array<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">[</span>binary_tree_array<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> pre_order<span class=\"token punctuation\">(</span>left_child_index<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pre_order<span class=\"token punctuation\">(</span>right_child_index<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">in_order</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> index <span class=\"token operator\">&gt;=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>binary_tree_array<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-or\">or</span> binary_tree_array<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword keyword-return\">return</span> in_order<span class=\"token punctuation\">(</span>left_child_index<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>binary_tree_array<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> in_order<span class=\"token punctuation\">(</span>right_child_index<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">post_order</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> index <span class=\"token operator\">&gt;=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>binary_tree_array<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-or\">or</span> binary_tree_array<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword keyword-return\">return</span> post_order<span class=\"token punctuation\">(</span>left_child_index<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> post_order<span class=\"token punctuation\">(</span>right_child_index<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>binary_tree_array<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pre-order Traversal:\"</span><span class=\"token punctuation\">,</span> pre_order<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"In-order Traversal:\"</span><span class=\"token punctuation\">,</span> in_order<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Post-order Traversal:\"</span><span class=\"token punctuation\">,</span> post_order<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_data_binarytrees_arrayImpl.php"
      }
    },
    {
      "title": "DSA Binary Search Trees",
      "code": [
        {
          "text": "class TreeNode: def __init__(self, data): self.data = data self.left = None self.right = None def inOrderTraversal(node): if node is None: return inOrderTraversal(node.left) print(node.data, end=\", \") inOrderTraversal(node.right) root = TreeNode(13) node7 = TreeNode(7) node15 = TreeNode(15) node3 = TreeNode(3) node8 = TreeNode(8) node14 = TreeNode(14) node19 = TreeNode(19) node18 = TreeNode(18) root.left = node7 root.right = node15 node7.left = node3 node7.right = node8 node15.left = node14 node15.right = node19 node19.left = node18 # Traverse inOrderTraversal(root)",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">inOrderTraversal</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> node <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span>\n    inOrderTraversal<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span>\n    inOrderTraversal<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n\nroot <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span>\nnode7 <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\nnode15 <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span>\nnode3 <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nnode8 <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\nnode14 <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span>\nnode19 <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token number\">19</span><span class=\"token punctuation\">)</span>\nnode18 <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n\nroot<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node7\nroot<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node15\n\nnode7<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node3\nnode7<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node8\n\nnode15<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node14\nnode15<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node19\n\nnode19<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node18\n\n<span class=\"token comment\"># Traverse</span>\ninOrderTraversal<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span></code>"
        },
        {
          "text": "def search(node, target): if node is None: return None elif node.data == target: return node elif target < node.data: return search(node.left, target) else: return search(node.right, target)",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> node <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">None</span> \n    <span class=\"token keyword keyword-elif\">elif</span> node<span class=\"token punctuation\">.</span>data <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> node\n    <span class=\"token keyword keyword-elif\">elif</span> target <span class=\"token operator\">&lt;</span> node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> search<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> search<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span></code>"
        },
        {
          "text": "def insert(node, data): if node is None: return TreeNode(data) else: if data < node.data: node.left = insert(node.left, data) elif data > node.data: node.right = insert(node.right, data) return node",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> node <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> TreeNode<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> data <span class=\"token operator\">&lt;</span> node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">:</span>\n            node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> insert<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-elif\">elif</span> data <span class=\"token operator\">&gt;</span> node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">:</span>\n            node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> insert<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-return\">return</span> node</code>"
        },
        {
          "text": "def minValueNode(node): current = node while current.left is not None: current = current.left return current",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">minValueNode</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    current <span class=\"token operator\">=</span> node\n    <span class=\"token keyword keyword-while\">while</span> current<span class=\"token punctuation\">.</span>left <span class=\"token keyword keyword-is\">is</span> <span class=\"token keyword keyword-not\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>left\n    <span class=\"token keyword keyword-return\">return</span> current</code>"
        },
        {
          "text": "def delete(node, data): if not node: return None if data < node.data: node.left = delete(node.left, data) elif data > node.data: node.right = delete(node.right, data) else: # Node with only one child or no child if not node.left: temp = node.right node = None return temp elif not node.right: temp = node.left node = None return temp # Node with two children, get the in-order successor node.data = minValueNode(node.right).data node.right = delete(node.right, node.data) return node",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> node<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token keyword keyword-if\">if</span> data <span class=\"token operator\">&lt;</span> node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">:</span>\n        node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> delete<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-elif\">elif</span> data <span class=\"token operator\">&gt;</span> node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">:</span>\n        node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> delete<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Node with only one child or no child</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">:</span>\n            temp <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right\n            node <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n            <span class=\"token keyword keyword-return\">return</span> temp\n        <span class=\"token keyword keyword-elif\">elif</span> <span class=\"token keyword keyword-not\">not</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">:</span>\n            temp <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left\n            node <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n            <span class=\"token keyword keyword-return\">return</span> temp\n\n        <span class=\"token comment\"># Node with two children, get the in-order successor</span>\n        node<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> minValueNode<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>data\n        node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> delete<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-return\">return</span> node<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_data_binarysearchtrees.php"
      }
    },
    {
      "title": "DSA AVL Trees",
      "code": [
        {
          "text": "class TreeNode: def __init__(self, data): self.data = data self.left = None self.right = None self.height = 1 def getHeight(node): if not node: return 0 return node.height def getBalance(node): if not node: return 0 return getHeight(node.left) - getHeight(node.right) def rightRotate(y): print('Rotate right on node',y.data) x = y.left T2 = x.right x.right = y y.left = T2 y.height = 1 + max(getHeight(y.left), getHeight(y.right)) x.height = 1 + max(getHeight(x.left), getHeight(x.right)) return x def leftRotate(x): print('Rotate left on node',x.data) y = x.right T2 = y.left y.left = x x.right = T2 x.height = 1 + max(getHeight(x.left), getHeight(x.right)) y.height = 1 + max(getHeight(y.left), getHeight(y.right)) return y def insert(node, data): if not node: return TreeNode(data) if data < node.data: node.left = insert(node.left, data) elif data > node.data: node.right = insert(node.right, data) # Update the balance factor and balance the tree node.height = 1 + max(getHeight(node.left), getHeight(node.right)) balance = getBalance(node) # Balancing the tree # Left Left if balance > 1 and getBalance(node.left) >= 0: return rightRotate(node) # Left Right if balance > 1 and getBalance(node.left) < 0: node.left = leftRotate(node.left) return rightRotate(node) # Right Right if balance < -1 and getBalance(node.right) <= 0: return leftRotate(node) # Right Left if balance < -1 and getBalance(node.right) > 0: node.right = rightRotate(node.right) return leftRotate(node) return node def inOrderTraversal(node): if node is None: return inOrderTraversal(node.left) print(node.data, end=\", \") inOrderTraversal(node.right) # Inserting nodes root = None letters = ['C', 'B', 'E', 'A', 'D', 'H', 'G', 'F'] for letter in letters: root = insert(root, letter) inOrderTraversal(root)",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> node<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword keyword-return\">return</span> node<span class=\"token punctuation\">.</span>height\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> node<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword keyword-return\">return</span> getHeight<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> getHeight<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">rightRotate</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Rotate right on node'</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> y<span class=\"token punctuation\">.</span>left\n    T2 <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>right\n    x<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> y\n    y<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> T2\n    y<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>getHeight<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> getHeight<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    x<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>getHeight<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> getHeight<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-return\">return</span> x\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">leftRotate</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Rotate left on node'</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>right\n    T2 <span class=\"token operator\">=</span> y<span class=\"token punctuation\">.</span>left\n    y<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> x\n    x<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> T2\n    x<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>getHeight<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> getHeight<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    y<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>getHeight<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> getHeight<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-return\">return</span> y\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> node<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> TreeNode<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-if\">if</span> data <span class=\"token operator\">&lt;</span> node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">:</span>\n        node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> insert<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-elif\">elif</span> data <span class=\"token operator\">&gt;</span> node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">:</span>\n        node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> insert<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Update the balance factor and balance the tree</span>\n    node<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>getHeight<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> getHeight<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    balance <span class=\"token operator\">=</span> getBalance<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Balancing the tree</span>\n    <span class=\"token comment\"># Left Left</span>\n    <span class=\"token keyword keyword-if\">if</span> balance <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span> <span class=\"token keyword keyword-and\">and</span> getBalance<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> rightRotate<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Left Right</span>\n    <span class=\"token keyword keyword-if\">if</span> balance <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span> <span class=\"token keyword keyword-and\">and</span> getBalance<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> leftRotate<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-return\">return</span> rightRotate<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Right Right</span>\n    <span class=\"token keyword keyword-if\">if</span> balance <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword keyword-and\">and</span> getBalance<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> leftRotate<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Right Left</span>\n    <span class=\"token keyword keyword-if\">if</span> balance <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword keyword-and\">and</span> getBalance<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> rightRotate<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-return\">return</span> leftRotate<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-return\">return</span> node\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">inOrderTraversal</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> node <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span>\n    inOrderTraversal<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span>\n    inOrderTraversal<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Inserting nodes</span>\nroot <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\nletters <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'H'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword keyword-for\">for</span> letter <span class=\"token keyword keyword-in\">in</span> letters<span class=\"token punctuation\">:</span>\n    root <span class=\"token operator\">=</span> insert<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> letter<span class=\"token punctuation\">)</span>\n\ninOrderTraversal<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span></code>"
        },
        {
          "text": "def minValueNode(node): current = node while current.left is not None: current = current.left return current def delete(node, data): if not node: return node if data < node.data: node.left = delete(node.left, data) elif data > node.data: node.right = delete(node.right, data) else: if node.left is None: temp = node.right node = None return temp elif node.right is None: temp = node.left node = None return temp temp = minValueNode(node.right) node.data = temp.data node.right = delete(node.right, temp.data) if node is None: return node # Update the balance factor and balance the tree node.height = 1 + max(getHeight(node.left), getHeight(node.right)) balance = getBalance(node) # Balancing the tree # Left Left if balance > 1 and getBalance(node.left) >= 0: return rightRotate(node) # Left Right if balance > 1 and getBalance(node.left) < 0: node.left = leftRotate(node.left) return rightRotate(node) # Right Right if balance < -1 and getBalance(node.right) <= 0: return leftRotate(node) # Right Left if balance < -1 and getBalance(node.right) > 0: node.right = rightRotate(node.right) return leftRotate(node) return node",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">minValueNode</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    current <span class=\"token operator\">=</span> node\n    <span class=\"token keyword keyword-while\">while</span> current<span class=\"token punctuation\">.</span>left <span class=\"token keyword keyword-is\">is</span> <span class=\"token keyword keyword-not\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>left\n    <span class=\"token keyword keyword-return\">return</span> current\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> node<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> node\n\n    <span class=\"token keyword keyword-if\">if</span> data <span class=\"token operator\">&lt;</span> node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">:</span>\n        node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> delete<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-elif\">elif</span> data <span class=\"token operator\">&gt;</span> node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">:</span>\n        node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> delete<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> node<span class=\"token punctuation\">.</span>left <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            temp <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right\n            node <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n            <span class=\"token keyword keyword-return\">return</span> temp\n        <span class=\"token keyword keyword-elif\">elif</span> node<span class=\"token punctuation\">.</span>right <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            temp <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left\n            node <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n            <span class=\"token keyword keyword-return\">return</span> temp\n\n        temp <span class=\"token operator\">=</span> minValueNode<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n        node<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>data\n        node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> delete<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-if\">if</span> node <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> node\n\n    <span class=\"token comment\"># Update the balance factor and balance the tree</span>\n    node<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>getHeight<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> getHeight<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    balance <span class=\"token operator\">=</span> getBalance<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Balancing the tree</span>\n    <span class=\"token comment\"># Left Left</span>\n    <span class=\"token keyword keyword-if\">if</span> balance <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span> <span class=\"token keyword keyword-and\">and</span> getBalance<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> rightRotate<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Left Right</span>\n    <span class=\"token keyword keyword-if\">if</span> balance <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span> <span class=\"token keyword keyword-and\">and</span> getBalance<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> leftRotate<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-return\">return</span> rightRotate<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Right Right</span>\n    <span class=\"token keyword keyword-if\">if</span> balance <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword keyword-and\">and</span> getBalance<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> leftRotate<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Right Left</span>\n    <span class=\"token keyword keyword-if\">if</span> balance <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword keyword-and\">and</span> getBalance<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> rightRotate<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-return\">return</span> leftRotate<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-return\">return</span> node\n</code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_data_avltrees.php"
      }
    },
    {
      "title": "DSA Graphs Implementation",
      "code": [
        {
          "text": "vertexData = [ 'A', 'B', 'C', 'D']",
          "html": "<code class=\"language-python\">vertexData <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">]</span></code>"
        },
        {
          "text": "vertexData = ['A', 'B', 'C', 'D'] adjacency_matrix = [ [0, 1, 1, 1], # Edges for A [1, 0, 1, 0], # Edges for B [1, 1, 0, 0], # Edges for C [1, 0, 0, 0] # Edges for D ] def print_adjacency_matrix(matrix): print(\"\\nAdjacency Matrix:\") for row in matrix: print(row) print('vertexData:',vertexData) print_adjacency_matrix(adjacency_matrix)",
          "html": "<code class=\"language-python\">vertexData <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">]</span>\n\nadjacency_matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># Edges for A</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># Edges for B</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># Edges for C</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>   <span class=\"token comment\"># Edges for D</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">print_adjacency_matrix</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nAdjacency Matrix:\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-for\">for</span> row <span class=\"token keyword keyword-in\">in</span> matrix<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vertexData:'</span><span class=\"token punctuation\">,</span>vertexData<span class=\"token punctuation\">)</span>\nprint_adjacency_matrix<span class=\"token punctuation\">(</span>adjacency_matrix<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code>"
        },
        {
          "text": "def print_connections(matrix, vertices): print(\"\\nConnections for each vertex:\") for i in range(len(vertices)): print(f\"{vertices[i]}: \", end=\"\") for j in range(len(vertices)): if matrix[i][j]: # if there is a connection print(vertices[j], end=\" \") print() # new line",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">print_connections</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">,</span> vertices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nConnections for each vertex:\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>vertices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>vertices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">: \"</span></span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> j <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>vertices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># if there is a connection</span>\n                <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>vertices<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># new line</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/></span></code>"
        },
        {
          "text": "class Graph: def __init__(self, size): self.adj_matrix = [[0] * size for _ in range(size)] self.size = size self.vertex_data = [''] * size def add_edge(self, u, v): if 0 <= u < self.size and 0 <= v < self.size: self.adj_matrix[u][v] = 1 self.adj_matrix[v][u] = 1 def add_vertex_data(self, vertex, data): if 0 <= vertex < self.size: self.vertex_data[vertex] = data def print_graph(self): print(\"Adjacency Matrix:\") for row in self.adj_matrix: print(' '.join(map(str, row))) print(\"\\nVertex Data:\") for vertex, data in enumerate(self.vertex_data): print(f\"Vertex {vertex}: {data}\") g = Graph(4) g.add_vertex_data(0, 'A') g.add_vertex_data(1, 'B') g.add_vertex_data(2, 'C') g.add_vertex_data(3, 'D') g.add_edge(0, 1) # A - B g.add_edge(0, 2) # A - C g.add_edge(0, 3) # A - D g.add_edge(1, 2) # B - C g.print_graph()",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>vertex_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size  \n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> u <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size <span class=\"token keyword keyword-and\">and</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> v <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_vertex_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> vertex <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">print_graph</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Adjacency Matrix:\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> row <span class=\"token keyword keyword-in\">in</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nVertex Data:\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> vertex<span class=\"token punctuation\">,</span> data <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Vertex </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>vertex<span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\ng <span class=\"token operator\">=</span> Graph<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A - B</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A - C</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A - D</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># B - C</span>\n\ng<span class=\"token punctuation\">.</span>print_graph<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"9\" class=\" line-highlight\" style=\"top: 194px; height: 24px; width: 639px;\"/><div aria-hidden=\"true\" data-range=\"10\" class=\" line-highlight\" style=\"top: 218px; height: 24px; width: 639px;\"/><div aria-hidden=\"true\" data-range=\"29-32\" class=\" line-highlight\" style=\"top: 674px; height: 96px; width: 639px;\"/>"
        },
        {
          "text": "class Graph: def __init__(self, size): self.adj_matrix = [[None] * size for _ in range(size)] self.size = size self.vertex_data = [''] * size def add_edge(self, u, v, weight): if 0 <= u < self.size and 0 <= v < self.size: self.adj_matrix[u][v] = weight\nself.adj_matrix[v][u] = weight\ndef add_vertex_data(self, vertex, data): if 0 <= vertex < self.size: self.vertex_data[vertex] = data def print_graph(self): print(\"Adjacency Matrix:\") for row in self.adj_matrix: print(' '.join(map(lambda x: str(x) if x is not None else '0', row))) print(\"\\nVertex Data:\") for vertex, data in enumerate(self.vertex_data): print(f\"Vertex {vertex}: {data}\") g = Graph(4) g.add_vertex_data(0, 'A') g.add_vertex_data(1, 'B') g.add_vertex_data(2, 'C') g.add_vertex_data(3, 'D') g.add_edge(0, 1, 3) # A -> B with weight 3 g.add_edge(0, 2, 2) # A -> C with weight 2 g.add_edge(3, 0, 4) # D -> A with weight 4 g.add_edge(2, 1, 1) # C -> B with weight 1 g.print_graph()",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>vertex_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size  \n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> u <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size <span class=\"token keyword keyword-and\">and</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> v <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight\n            <del>self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight</del>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_vertex_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> vertex <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">print_graph</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Adjacency Matrix:\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> row <span class=\"token keyword keyword-in\">in</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-lambda\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-if\">if</span> x <span class=\"token keyword keyword-is\">is</span> <span class=\"token keyword keyword-not\">not</span> <span class=\"token boolean\">None</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nVertex Data:\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> vertex<span class=\"token punctuation\">,</span> data <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Vertex </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>vertex<span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\ng <span class=\"token operator\">=</span> Graph<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A -&gt; B with weight 3</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A -&gt; C with weight 2</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># D -&gt; A with weight 4</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C -&gt; B with weight 1</span>\n\ng<span class=\"token punctuation\">.</span>print_graph<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"3\" class=\" line-highlight\" style=\"top: 50px; height: 24px; width: 789px;\"/><div aria-hidden=\"true\" data-range=\"7\" class=\" line-highlight\" style=\"top: 146px; height: 24px; width: 789px;\"/><div aria-hidden=\"true\" data-range=\"10\" class=\" line-highlight\" style=\"top: 218px; height: 24px; width: 789px;\"/>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_data_graphs_implementation.php"
      }
    },
    {
      "title": "DSA Graphs Traversal",
      "code": [
        {
          "text": "class Graph: def __init__(self, size): self.adj_matrix = [[0] * size for _ in range(size)] self.size = size self.vertex_data = [''] * size def add_edge(self, u, v): if 0 <= u < self.size and 0 <= v < self.size: self.adj_matrix[u][v] = 1 self.adj_matrix[v][u] = 1 def add_vertex_data(self, vertex, data): if 0 <= vertex < self.size: self.vertex_data[vertex] = data def print_graph(self): print(\"Adjacency Matrix:\") for row in self.adj_matrix: print(' '.join(map(str, row))) print(\"\\nVertex Data:\") for vertex, data in enumerate(self.vertex_data): print(f\"Vertex {vertex}: {data}\") def dfs_util(self, v, visited): visited[v] = True print(self.vertex_data[v], end=' ') for i in range(self.size): if self.adj_matrix[v][i] == 1 and not visited[i]: self.dfs_util(i, visited) def dfs(self, start_vertex_data): visited = [False] * self.size start_vertex = self.vertex_data.index(start_vertex_data) self.dfs_util(start_vertex, visited) g = Graph(7) g.add_vertex_data(0, 'A') g.add_vertex_data(1, 'B') g.add_vertex_data(2, 'C') g.add_vertex_data(3, 'D') g.add_vertex_data(4, 'E') g.add_vertex_data(5, 'F') g.add_vertex_data(6, 'G') g.add_edge(3, 0) # D - A g.add_edge(0, 2) # A - C g.add_edge(0, 3) # A - D g.add_edge(0, 4) # A - E g.add_edge(4, 2) # E - C g.add_edge(2, 5) # C - F g.add_edge(2, 1) # C - B g.add_edge(2, 6) # C - G g.add_edge(1, 5) # B - F g.print_graph() print(\"\\nDepth First Search starting from vertex D:\") g.dfs('D')",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>vertex_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size  \n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> u <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size <span class=\"token keyword keyword-and\">and</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> v <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_vertex_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> vertex <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">print_graph</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Adjacency Matrix:\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> row <span class=\"token keyword keyword-in\">in</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nVertex Data:\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> vertex<span class=\"token punctuation\">,</span> data <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Vertex </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>vertex<span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">dfs_util</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword keyword-and\">and</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>dfs_util<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> start_vertex_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        start_vertex <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>start_vertex_data<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>dfs_util<span class=\"token punctuation\">(</span>start_vertex<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span>\n\ng <span class=\"token operator\">=</span> Graph<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># D - A</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A - C</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A - D</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A - E</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># E - C</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C - F</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C - B</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C - G</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># B - F</span>\n\ng<span class=\"token punctuation\">.</span>print_graph<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nDepth First Search starting from vertex D:\"</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"24-35\" class=\" line-highlight\" style=\"top: 554px; height: 288px; width: 640px;\"/><div aria-hidden=\"true\" data-range=\"60\" class=\" line-highlight\" style=\"top: 1418px; height: 24px; width: 640px;\"/>"
        },
        {
          "text": "def bfs(self, start_vertex_data): queue = [self.vertex_data.index(start_vertex_data)] visited = [False] * self.size visited[queue[0]] = True while queue: current_vertex = queue.pop(0) print(self.vertex_data[current_vertex], end=' ') for i in range(self.size): if self.adj_matrix[current_vertex][i] == 1 and not visited[i]: queue.append(i) visited[i] = True",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> start_vertex_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>start_vertex_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n    visited<span class=\"token punctuation\">[</span>queue<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n          \n    <span class=\"token keyword keyword-while\">while</span> queue<span class=\"token punctuation\">:</span>\n        current_vertex <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>current_vertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n      \n        <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>current_vertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword keyword-and\">and</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n                visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code>"
        },
        {
          "text": "def add_edge(self, u, v): if 0 <= u < self.size and 0 <= v < self.size: self.adj_matrix[u][v] = 1\nself.adj_matrix[v][u] = 1",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> u <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size <span class=\"token keyword keyword-and\">and</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> v <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <del>self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></del><span class=\"token number\"/>\n</code>"
        },
        {
          "text": "class Graph: def __init__(self, size): self.adj_matrix = [[0] * size for _ in range(size)] self.size = size self.vertex_data = [''] * size def add_edge(self, u, v): if 0 <= u < self.size and 0 <= v < self.size: self.adj_matrix[u][v] = 1 #self.adj_matrix[v][u] = 1 def add_vertex_data(self, vertex, data): if 0 <= vertex < self.size: self.vertex_data[vertex] = data def print_graph(self): print(\"Adjacency Matrix:\") for row in self.adj_matrix: print(' '.join(map(str, row))) print(\"\\nVertex Data:\") for vertex, data in enumerate(self.vertex_data): print(f\"Vertex {vertex}: {data}\") def dfs_util(self, v, visited): visited[v] = True print(self.vertex_data[v], end=' ') for i in range(self.size): if self.adj_matrix[v][i] == 1 and not visited[i]: self.dfs_util(i, visited) def dfs(self, start_vertex_data): visited = [False] * self.size start_vertex = self.vertex_data.index(start_vertex_data) self.dfs_util(start_vertex, visited) def bfs(self, start_vertex_data): queue = [self.vertex_data.index(start_vertex_data)] visited = [False] * self.size visited[queue[0]] = True while queue: current_vertex = queue.pop(0) print(self.vertex_data[current_vertex], end=' ') for i in range(self.size): if self.adj_matrix[current_vertex][i] == 1 and not visited[i]: queue.append(i) visited[i] = True g = Graph(7) g.add_vertex_data(0, 'A') g.add_vertex_data(1, 'B') g.add_vertex_data(2, 'C') g.add_vertex_data(3, 'D') g.add_vertex_data(4, 'E') g.add_vertex_data(5, 'F') g.add_vertex_data(6, 'G') g.add_edge(3, 0) # D -> A g.add_edge(3, 4) # D -> E g.add_edge(4, 0) # E -> A g.add_edge(0, 2) # A -> C g.add_edge(2, 5) # C -> F g.add_edge(2, 6) # C -> G g.add_edge(5, 1) # F -> B g.add_edge(1, 2) # B -> C g.print_graph() print(\"\\nDepth First Search starting from vertex D:\") g.dfs('D') print(\"\\n\\nBreadth First Search starting from vertex D:\") g.bfs('D')",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>vertex_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size  \n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> u <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size <span class=\"token keyword keyword-and\">and</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> v <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n            <span class=\"token comment\">#self.adj_matrix[v][u] = 1</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_vertex_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> vertex <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">print_graph</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Adjacency Matrix:\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> row <span class=\"token keyword keyword-in\">in</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nVertex Data:\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> vertex<span class=\"token punctuation\">,</span> data <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Vertex </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>vertex<span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">dfs_util</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword keyword-and\">and</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>dfs_util<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> start_vertex_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n\n        start_vertex <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>start_vertex_data<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>dfs_util<span class=\"token punctuation\">(</span>start_vertex<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span>\n        \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> start_vertex_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>start_vertex_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        visited<span class=\"token punctuation\">[</span>queue<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        \n        <span class=\"token keyword keyword-while\">while</span> queue<span class=\"token punctuation\">:</span>\n            current_vertex <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>current_vertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n            \n            <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>current_vertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword keyword-and\">and</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n                    visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\ng <span class=\"token operator\">=</span> Graph<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># D -&gt; A</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># D -&gt; E</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># E -&gt; A</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A -&gt; C</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C -&gt; F</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C -&gt; G</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># F -&gt; B</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># B -&gt; C</span>\n\ng<span class=\"token punctuation\">.</span>print_graph<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nDepth First Search starting from vertex D:\"</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\nBreadth First Search starting from vertex D:\"</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>bfs<span class=\"token punctuation\">(</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\n</code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_traversal.php"
      }
    },
    {
      "title": "DSA Graphs Cycle Detection",
      "code": [
        {
          "text": "class Graph: def __init__(self, size): self.adj_matrix = [[0] * size for _ in range(size)] self.size = size self.vertex_data = [''] * size def add_edge(self, u, v): if 0 <= u < self.size and 0 <= v < self.size: self.adj_matrix[u][v] = 1 self.adj_matrix[v][u] = 1 def add_vertex_data(self, vertex, data): if 0 <= vertex < self.size: self.vertex_data[vertex] = data def print_graph(self): print(\"Adjacency Matrix:\") for row in self.adj_matrix: print(' '.join(map(str, row))) print(\"\\nVertex Data:\") for vertex, data in enumerate(self.vertex_data): print(f\"Vertex {vertex}: {data}\") def dfs_util(self, v, visited, parent): visited[v] = True for i in range(self.size): if self.adj_matrix[v][i] == 1: if not visited[i]: if self.dfs_util(i, visited, v): return True elif parent != i: return True return False def is_cyclic(self): visited = [False] * self.size for i in range(self.size): if not visited[i]: if self.dfs_util(i, visited, -1): return True return False g = Graph(7) g.add_vertex_data(0, 'A') g.add_vertex_data(1, 'B') g.add_vertex_data(2, 'C') g.add_vertex_data(3, 'D') g.add_vertex_data(4, 'E') g.add_vertex_data(5, 'F') g.add_vertex_data(6, 'G') g.add_edge(3, 0) # D - A g.add_edge(0, 2) # A - C g.add_edge(0, 3) # A - D g.add_edge(0, 4) # A - E g.add_edge(4, 2) # E - C g.add_edge(2, 5) # C - F g.add_edge(2, 1) # C - B g.add_edge(2, 6) # C - G g.add_edge(1, 5) # B - F g.print_graph() print(\"\\nGraph has cycle:\", g.is_cyclic())",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>vertex_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size  \n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> u <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size <span class=\"token keyword keyword-and\">and</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> v <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_vertex_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> vertex <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">print_graph</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Adjacency Matrix:\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> row <span class=\"token keyword keyword-in\">in</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nVertex Data:\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> vertex<span class=\"token punctuation\">,</span> data <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Vertex </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>vertex<span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">dfs_util</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n        <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>dfs_util<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">True</span>\n                <span class=\"token keyword keyword-elif\">elif</span> parent <span class=\"token operator\">!=</span> i<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">is_cyclic</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>dfs_util<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">False</span>\n\ng <span class=\"token operator\">=</span> Graph<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># D - A</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A - C</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A - D</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A - E</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># E - C</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C - F</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C - B</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C - G</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># B - F</span>\n\ng<span class=\"token punctuation\">.</span>print_graph<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nGraph has cycle:\"</span><span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">.</span>is_cyclic<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"24-34\" class=\" line-highlight\" style=\"top: 554px; height: 264px; width: 639px;\"/><div aria-hidden=\"true\" data-range=\"36-42\" class=\" line-highlight\" style=\"top: 842px; height: 168px; width: 639px;\"/><div aria-hidden=\"true\" data-range=\"66\" class=\" line-highlight\" style=\"top: 1562px; height: 24px; width: 639px;\"/>"
        },
        {
          "text": "class Graph: # ...... def add_edge(self, u, v): if 0 <= u < self.size and 0 <= v < self.size: self.adj_matrix[u][v] = 1\nself.adj_matrix[v][u] = 1\n# ...... def dfs_util(self, v, visited, recStack): visited[v] = True recStack[v] = True print(\"Current vertex:\",self.vertex_data[v]) for i in range(self.size): if self.adj_matrix[v][i] == 1: if not visited[i]: if self.dfs_util(i, visited, recStack): return True elif recStack[i]: return True recStack[v] = False return False def is_cyclic(self): visited = [False] * self.size recStack = [False] * self.size for i in range(self.size): if not visited[i]: print() #new line if self.dfs_util(i, visited, recStack): return True return False g = Graph(7) # ...... g.add_edge(3, 0) # D -> A g.add_edge(0, 2) # A -> C g.add_edge(2, 1) # C -> B g.add_edge(2, 4) # C -> E g.add_edge(1, 5) # B -> F g.add_edge(4, 0) # E -> A g.add_edge(2, 6) # C -> G g.print_graph() print(\"Graph has cycle:\", g.is_cyclic())",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># ......</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> u <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size <span class=\"token keyword keyword-and\">and</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> v <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n            <del>self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></del><span class=\"token number\"/>\n    <span class=\"token comment\"># ......</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">dfs_util</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> recStack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        recStack<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Current vertex:\"</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>dfs_util<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> recStack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">True</span>\n                <span class=\"token keyword keyword-elif\">elif</span> recStack<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">True</span>\n        \n        recStack<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">is_cyclic</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        recStack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#new line</span>\n                <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>dfs_util<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> recStack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">False</span>\n\ng <span class=\"token operator\">=</span> Graph<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># ......</span>\n\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># D -&gt; A</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A -&gt; C</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C -&gt; B</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C -&gt; E</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># B -&gt; F</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># E -&gt; A</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C -&gt; G</span>\n\ng<span class=\"token punctuation\">.</span>print_graph<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Graph has cycle:\"</span><span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">.</span>is_cyclic<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"6\" class=\" line-highlight\" style=\"top: 122px; height: 24px; width: 639px;\"/><div aria-hidden=\"true\" data-range=\"26\" class=\" line-highlight\" style=\"top: 602px; height: 24px; width: 639px;\"/><div aria-hidden=\"true\" data-range=\"14-19\" class=\" line-highlight\" style=\"top: 314px; height: 144px; width: 639px;\"/>"
        },
        {
          "text": "class Graph: def __init__(self, size): self.adj_matrix = [[0] * size for _ in range(size)] self.size = size self.vertex_data = [''] * size self.parent = [i for i in range(size)] # Union-Find array def add_edge(self, u, v): if 0 <= u < self.size and 0 <= v < self.size: self.adj_matrix[u][v] = 1 self.adj_matrix[v][u] = 1 def add_vertex_data(self, vertex, data): if 0 <= vertex < self.size: self.vertex_data[vertex] = data def find(self, i): if self.parent[i] == i: return i return self.find(self.parent[i]) def union(self, x, y): x_root = self.find(x) y_root = self.find(y) print('Union:',self.vertex_data[x],'+',self.vertex_data[y]) self.parent[x_root] = y_root print(self.parent,'\\n') def is_cyclic(self): for i in range(self.size): for j in range(i + 1, self.size): if self.adj_matrix[i][j]: x = self.find(i) y = self.find(j) if x == y: return True self.union(x, y) return False g = Graph(7) g.add_vertex_data(0, 'A') g.add_vertex_data(1, 'B') g.add_vertex_data(2, 'C') g.add_vertex_data(3, 'D') g.add_vertex_data(4, 'E') g.add_vertex_data(5, 'F') g.add_vertex_data(6, 'G') g.add_edge(1, 0) # B - A g.add_edge(0, 3) # A - D g.add_edge(0, 2) # A - C g.add_edge(2, 3) # C - D g.add_edge(3, 4) # D - E g.add_edge(3, 5) # D - F g.add_edge(3, 6) # D - G g.add_edge(4, 5) # E - F print(\"Graph has cycle:\", g.is_cyclic())",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>vertex_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size\n        self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># Union-Find array</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> u <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size <span class=\"token keyword keyword-and\">and</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> v <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_vertex_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> vertex <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> i<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-return\">return</span> i\n        <span class=\"token keyword keyword-return\">return</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x_root <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        y_root <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Union:'</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">'+'</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>x_root<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> y_root\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">,</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">is_cyclic</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-for\">for</span> j <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n                    y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword keyword-if\">if</span> x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">True</span>\n                    self<span class=\"token punctuation\">.</span>union<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">False</span>\n\ng <span class=\"token operator\">=</span> Graph<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># B - A</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A - D</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A - C</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C - D</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># D - E</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># D - F</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># D - G</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># E - F</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Graph has cycle:\"</span><span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">.</span>is_cyclic<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"6\" class=\" line-highlight\" style=\"top: 122px; height: 24px; width: 666px;\"/><div aria-hidden=\"true\" data-range=\"17-38\" class=\" line-highlight\" style=\"top: 386px; height: 528px; width: 666px;\"/>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_cycledetection.php"
      }
    },
    {
      "title": "DSA Dijkstra's Algorithm",
      "code": [
        {
          "text": "distances = [inf, inf, inf, 0, inf, inf, inf] #vertices [ A , B , C , D, E , F , G ]",
          "html": "<code class=\"language-python\">distances <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>inf<span class=\"token punctuation\">,</span> inf<span class=\"token punctuation\">,</span> inf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> inf<span class=\"token punctuation\">,</span> inf<span class=\"token punctuation\">,</span> inf<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#vertices   [ A ,  B ,  C , D,  E ,  F ,  G ]</span>\n</code>"
        },
        {
          "text": "class Graph: def __init__(self, size): self.adj_matrix = [[0] * size for _ in range(size)] self.size = size self.vertex_data = [''] * size def add_edge(self, u, v, weight): if 0 <= u < self.size and 0 <= v < self.size: self.adj_matrix[u][v] = weight self.adj_matrix[v][u] = weight # For undirected graph def add_vertex_data(self, vertex, data): if 0 <= vertex < self.size: self.vertex_data[vertex] = data",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>vertex_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> u <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size <span class=\"token keyword keyword-and\">and</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> v <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight  <span class=\"token comment\"># For undirected graph</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_vertex_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> vertex <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"3-5\" class=\" line-highlight\" style=\"top: 50px; height: 72px; width: 657px;\"/><div aria-hidden=\"true\" data-range=\"7-10\" class=\" line-highlight\" style=\"top: 146px; height: 96px; width: 657px;\"/><div aria-hidden=\"true\" data-range=\"12-14\" class=\" line-highlight\" style=\"top: 266px; height: 72px; width: 657px;\"/>"
        },
        {
          "text": "def dijkstra(self, start_vertex_data): start_vertex = self.vertex_data.index(start_vertex_data) distances = [float('inf')] * self.size distances[start_vertex] = 0 visited = [False] * self.size for _ in range(self.size): min_distance = float('inf') u = None for i in range(self.size): if not visited[i] and distances[i] < min_distance: min_distance = distances[i] u = i if u is None: break visited[u] = True for v in range(self.size): if self.adj_matrix[u][v] != 0 and not visited[v]: alt = distances[u] + self.adj_matrix[u][v] if alt < distances[v]: distances[v] = alt return distances",
          "html": "<code class=\"language-python\">    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> start_vertex_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        start_vertex <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>start_vertex_data<span class=\"token punctuation\">)</span>\n        distances <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        distances<span class=\"token punctuation\">[</span>start_vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n\n        <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            min_distance <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span>\n            u <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n            <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-and\">and</span> distances<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> min_distance<span class=\"token punctuation\">:</span>\n                    min_distance <span class=\"token operator\">=</span> distances<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n                    u <span class=\"token operator\">=</span> i\n\n            <span class=\"token keyword keyword-if\">if</span> u <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-break\">break</span>\n\n            visited<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n            <span class=\"token keyword keyword-for\">for</span> v <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token keyword keyword-and\">and</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    alt <span class=\"token operator\">=</span> distances<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>\n                    <span class=\"token keyword keyword-if\">if</span> alt <span class=\"token operator\">&lt;</span> distances<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                        distances<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> alt\n\n        <span class=\"token keyword keyword-return\">return</span> distances<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"18-20\" class=\" line-highlight\" style=\"top: 50px; height: 72px; width: 657px;\"/><div aria-hidden=\"true\" data-range=\"23-28\" class=\" line-highlight\" style=\"top: 170px; height: 144px; width: 657px;\"/><div aria-hidden=\"true\" data-range=\"30-31\" class=\" line-highlight\" style=\"top: 338px; height: 48px; width: 657px;\"/><div aria-hidden=\"true\" data-range=\"33\" class=\" line-highlight\" style=\"top: 410px; height: 24px; width: 657px;\"/><div aria-hidden=\"true\" data-range=\"35-39\" class=\" line-highlight\" style=\"top: 458px; height: 120px; width: 657px;\"/>"
        },
        {
          "text": "class Graph: def __init__(self, size): self.adj_matrix = [[0] * size for _ in range(size)] self.size = size self.vertex_data = [''] * size def add_edge(self, u, v, weight): if 0 <= u < self.size and 0 <= v < self.size: self.adj_matrix[u][v] = weight self.adj_matrix[v][u] = weight # For undirected graph def add_vertex_data(self, vertex, data): if 0 <= vertex < self.size: self.vertex_data[vertex] = data def dijkstra(self, start_vertex_data): start_vertex = self.vertex_data.index(start_vertex_data) distances = [float('inf')] * self.size distances[start_vertex] = 0 visited = [False] * self.size for _ in range(self.size): min_distance = float('inf') u = None for i in range(self.size): if not visited[i] and distances[i] < min_distance: min_distance = distances[i] u = i if u is None: break visited[u] = True for v in range(self.size): if self.adj_matrix[u][v] != 0 and not visited[v]: alt = distances[u] + self.adj_matrix[u][v] if alt < distances[v]: distances[v] = alt return distances g = Graph(7) g.add_vertex_data(0, 'A') g.add_vertex_data(1, 'B') g.add_vertex_data(2, 'C') g.add_vertex_data(3, 'D') g.add_vertex_data(4, 'E') g.add_vertex_data(5, 'F') g.add_vertex_data(6, 'G') g.add_edge(3, 0, 4) # D - A, weight 5 g.add_edge(3, 4, 2) # D - E, weight 2 g.add_edge(0, 2, 3) # A - C, weight 3 g.add_edge(0, 4, 4) # A - E, weight 4 g.add_edge(4, 2, 4) # E - C, weight 4 g.add_edge(4, 6, 5) # E - G, weight 5 g.add_edge(2, 5, 5) # C - F, weight 5 g.add_edge(2, 1, 2) # C - B, weight 2 g.add_edge(1, 5, 2) # B - F, weight 2 g.add_edge(6, 5, 5) # G - F, weight 5 # Dijkstra's algorithm from D to all vertices print(\"\\nDijkstra's Algorithm starting from vertex D:\") distances = g.dijkstra('D') for i, d in enumerate(distances): print(f\"Distance from D to {g.vertex_data[i]}: {d}\")",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>vertex_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> u <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size <span class=\"token keyword keyword-and\">and</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> v <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight  <span class=\"token comment\"># For undirected graph</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_vertex_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> vertex <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> start_vertex_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        start_vertex <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>start_vertex_data<span class=\"token punctuation\">)</span>\n        distances <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        distances<span class=\"token punctuation\">[</span>start_vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n\n        <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            min_distance <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span>\n            u <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n            <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-and\">and</span> distances<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> min_distance<span class=\"token punctuation\">:</span>\n                    min_distance <span class=\"token operator\">=</span> distances<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n                    u <span class=\"token operator\">=</span> i\n\n            <span class=\"token keyword keyword-if\">if</span> u <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-break\">break</span>\n\n            visited<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n            <span class=\"token keyword keyword-for\">for</span> v <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token keyword keyword-and\">and</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    alt <span class=\"token operator\">=</span> distances<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>\n                    <span class=\"token keyword keyword-if\">if</span> alt <span class=\"token operator\">&lt;</span> distances<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                        distances<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> alt\n\n        <span class=\"token keyword keyword-return\">return</span> distances\n\ng <span class=\"token operator\">=</span> Graph<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># D - A, weight 5</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># D - E, weight 2</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A - C, weight 3</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A - E, weight 4</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># E - C, weight 4</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># E - G, weight 5</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C - F, weight 5</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C - B, weight 2</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># B - F, weight 2</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># G - F, weight 5</span>\n\n<span class=\"token comment\"># Dijkstra's algorithm from D to all vertices</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nDijkstra's Algorithm starting from vertex D:\"</span><span class=\"token punctuation\">)</span>\ndistances <span class=\"token operator\">=</span> g<span class=\"token punctuation\">.</span>dijkstra<span class=\"token punctuation\">(</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-for\">for</span> i<span class=\"token punctuation\">,</span> d <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>distances<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Distance from D to </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>g<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>d<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code>"
        },
        {
          "text": "class Graph: def __init__(self, size): self.adj_matrix = [[0] * size for _ in range(size)] self.size = size self.vertex_data = [''] * size def add_edge(self, u, v, weight): if 0 <= u < self.size and 0 <= v < self.size: self.adj_matrix[u][v] = weight #self.adj_matrix[v][u] = weight For undirected graph def add_vertex_data(self, vertex, data): if 0 <= vertex < self.size: self.vertex_data[vertex] = data def dijkstra(self, start_vertex_data): start_vertex = self.vertex_data.index(start_vertex_data) distances = [float('inf')] * self.size distances[start_vertex] = 0 visited = [False] * self.size for _ in range(self.size): min_distance = float('inf') u = None for i in range(self.size): if not visited[i] and distances[i] < min_distance: min_distance = distances[i] u = i if u is None: break visited[u] = True for v in range(self.size): if self.adj_matrix[u][v] != 0 and not visited[v]: alt = distances[u] + self.adj_matrix[u][v] if alt < distances[v]: distances[v] = alt return distances g = Graph(7) g.add_vertex_data(0, 'A') g.add_vertex_data(1, 'B') g.add_vertex_data(2, 'C') g.add_vertex_data(3, 'D') g.add_vertex_data(4, 'E') g.add_vertex_data(5, 'F') g.add_vertex_data(6, 'G') g.add_edge(3, 0, 4) # D -> A, weight 5 g.add_edge(3, 4, 2) # D -> E, weight 2 g.add_edge(0, 2, 3) # A -> C, weight 3 g.add_edge(0, 4, 4) # A -> E, weight 4 g.add_edge(4, 2, 4) # E -> C, weight 4 g.add_edge(4, 6, 5) # E -> G, weight 5 g.add_edge(2, 5, 5) # C -> F, weight 5 g.add_edge(1, 2, 2) # B -> C, weight 2 g.add_edge(1, 5, 2) # B -> F, weight 2 g.add_edge(6, 5, 5) # G -> F, weight 5 # Dijkstra's algorithm from D to all vertices print(\"Dijkstra's Algorithm starting from vertex D:\\n\") distances = g.dijkstra('D') for i, d in enumerate(distances): print(f\"Shortest distance from D to {g.vertex_data[i]}: {d}\")",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>vertex_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> u <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size <span class=\"token keyword keyword-and\">and</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> v <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight\n            <span class=\"token comment\">#self.adj_matrix[v][u] = weight   For undirected graph</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_vertex_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> vertex <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> start_vertex_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        start_vertex <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>start_vertex_data<span class=\"token punctuation\">)</span>\n        distances <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        distances<span class=\"token punctuation\">[</span>start_vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n\n        <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            min_distance <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span>\n            u <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n            <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-and\">and</span> distances<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> min_distance<span class=\"token punctuation\">:</span>\n                    min_distance <span class=\"token operator\">=</span> distances<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n                    u <span class=\"token operator\">=</span> i\n\n            <span class=\"token keyword keyword-if\">if</span> u <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-break\">break</span>\n\n            visited<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n            <span class=\"token keyword keyword-for\">for</span> v <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token keyword keyword-and\">and</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    alt <span class=\"token operator\">=</span> distances<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>\n                    <span class=\"token keyword keyword-if\">if</span> alt <span class=\"token operator\">&lt;</span> distances<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                        distances<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> alt\n\n        <span class=\"token keyword keyword-return\">return</span> distances\n\ng <span class=\"token operator\">=</span> Graph<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># D -&gt; A, weight 5</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># D -&gt; E, weight 2</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A -&gt; C, weight 3</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A -&gt; E, weight 4</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># E -&gt; C, weight 4</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># E -&gt; G, weight 5</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C -&gt; F, weight 5</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># B -&gt; C, weight 2</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># B -&gt; F, weight 2</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># G -&gt; F, weight 5</span>\n\n<span class=\"token comment\"># Dijkstra's algorithm from D to all vertices</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dijkstra's Algorithm starting from vertex D:\\n\"</span><span class=\"token punctuation\">)</span>\ndistances <span class=\"token operator\">=</span> g<span class=\"token punctuation\">.</span>dijkstra<span class=\"token punctuation\">(</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-for\">for</span> i<span class=\"token punctuation\">,</span> d <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>distances<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Shortest distance from D to </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>g<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>d<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"10\" class=\" line-highlight\" style=\"top: 218px; height: 24px; width: 657px;\"/>"
        },
        {
          "text": "class Graph: # ... (rest of the Graph class) def dijkstra(self, start_vertex_data): start_vertex = self.vertex_data.index(start_vertex_data) distances = [float('inf')] * self.size predecessors = [None] * self.size distances[start_vertex] = 0 visited = [False] * self.size for _ in range(self.size): min_distance = float('inf') u = None for i in range(self.size): if not visited[i] and distances[i] < min_distance: min_distance = distances[i] u = i if u is None: break visited[u] = True for v in range(self.size): if self.adj_matrix[u][v] != 0 and not visited[v]: alt = distances[u] + self.adj_matrix[u][v] if alt < distances[v]: distances[v] = alt predecessors[v] = u return distances, predecessors def get_path(self, predecessors, start_vertex, end_vertex): path = [] current = self.vertex_data.index(end_vertex) while current is not None: path.insert(0, self.vertex_data[current]) current = predecessors[current] if current == self.vertex_data.index(start_vertex): path.insert(0, start_vertex) break return '->'.join(path) # Join the vertices with '->' g = Graph(7) # ... (rest of the graph setup) # Dijkstra's algorithm from D to all vertices print(\"Dijkstra's Algorithm starting from vertex D:\\n\") distances, predecessors = g.dijkstra('D') for i, d in enumerate(distances): path = g.get_path(predecessors, 'D', g.vertex_data[i]) print(f\"{path}, Distance: {d}\")",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># ... (rest of the Graph class)</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> start_vertex_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        start_vertex <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>start_vertex_data<span class=\"token punctuation\">)</span>\n        distances <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        predecessors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        distances<span class=\"token punctuation\">[</span>start_vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n\n        <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            min_distance <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span>\n            u <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n            <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-and\">and</span> distances<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> min_distance<span class=\"token punctuation\">:</span>\n                    min_distance <span class=\"token operator\">=</span> distances<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n                    u <span class=\"token operator\">=</span> i\n\n            <span class=\"token keyword keyword-if\">if</span> u <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-break\">break</span>\n\n            visited<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n            <span class=\"token keyword keyword-for\">for</span> v <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token keyword keyword-and\">and</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    alt <span class=\"token operator\">=</span> distances<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>\n                    <span class=\"token keyword keyword-if\">if</span> alt <span class=\"token operator\">&lt;</span> distances<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                        distances<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> alt\n                        predecessors<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> u\n\n        <span class=\"token keyword keyword-return\">return</span> distances<span class=\"token punctuation\">,</span> predecessors\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">get_path</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> predecessors<span class=\"token punctuation\">,</span> start_vertex<span class=\"token punctuation\">,</span> end_vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        current <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>end_vertex<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-while\">while</span> current <span class=\"token keyword keyword-is\">is</span> <span class=\"token keyword keyword-not\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            path<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            current <span class=\"token operator\">=</span> predecessors<span class=\"token punctuation\">[</span>current<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword keyword-if\">if</span> current <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>start_vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                path<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> start_vertex<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword keyword-break\">break</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token string\">'-&gt;'</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Join the vertices with '-&gt;'</span>\n\ng <span class=\"token operator\">=</span> Graph<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># ... (rest of the graph setup)</span>\n\n<span class=\"token comment\"># Dijkstra's algorithm from D to all vertices</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dijkstra's Algorithm starting from vertex D:\\n\"</span><span class=\"token punctuation\">)</span>\ndistances<span class=\"token punctuation\">,</span> predecessors <span class=\"token operator\">=</span> g<span class=\"token punctuation\">.</span>dijkstra<span class=\"token punctuation\">(</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-for\">for</span> i<span class=\"token punctuation\">,</span> d <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>distances<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    path <span class=\"token operator\">=</span> g<span class=\"token punctuation\">.</span>get_path<span class=\"token punctuation\">(</span>predecessors<span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>path<span class=\"token punctuation\">}</span></span><span class=\"token string\">, Distance: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>d<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"7\" class=\" line-highlight\" style=\"top: 146px; height: 24px; width: 657px;\"/><div aria-hidden=\"true\" data-range=\"29\" class=\" line-highlight\" style=\"top: 674px; height: 24px; width: 657px;\"/><div aria-hidden=\"true\" data-range=\"33-42\" class=\" line-highlight\" style=\"top: 770px; height: 240px; width: 657px;\"/>"
        },
        {
          "text": "class Graph: # ... (existing methods) def dijkstra(self, start_vertex_data, end_vertex_data): start_vertex = self.vertex_data.index(start_vertex_data) end_vertex = self.vertex_data.index(end_vertex_data) distances = [float('inf')] * self.size predecessors = [None] * self.size distances[start_vertex] = 0 visited = [False] * self.size for _ in range(self.size): min_distance = float('inf') u = None for i in range(self.size): if not visited[i] and distances[i] < min_distance: min_distance = distances[i] u = i if u is None or u == end_vertex: print(f\"Breaking out of loop. Current vertex: {self.vertex_data[u]}\") print(f\"Distances: {distances}\") break visited[u] = True print(f\"Visited vertex: {self.vertex_data[u]}\") for v in range(self.size): if self.adj_matrix[u][v] != 0 and not visited[v]: alt = distances[u] + self.adj_matrix[u][v] if alt < distances[v]: distances[v] = alt predecessors[v] = u return distances[end_vertex], self.get_path(predecessors, start_vertex_data, end_vertex_data) # Example usage g = Graph(7) # ... (rest of the graph setup) distance, path = g.dijkstra('D', 'F') print(f\"Path: {path}, Distance: {distance}\")",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># ... (existing methods)</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> start_vertex_data<span class=\"token punctuation\">,</span> end_vertex_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        start_vertex <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>start_vertex_data<span class=\"token punctuation\">)</span>\n        end_vertex <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>end_vertex_data<span class=\"token punctuation\">)</span>\n        distances <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        predecessors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        distances<span class=\"token punctuation\">[</span>start_vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n\n        <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            min_distance <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span>\n            u <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n            <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-and\">and</span> distances<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> min_distance<span class=\"token punctuation\">:</span>\n                    min_distance <span class=\"token operator\">=</span> distances<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n                    u <span class=\"token operator\">=</span> i\n\n            <span class=\"token keyword keyword-if\">if</span> u <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span> <span class=\"token keyword keyword-or\">or</span> u <span class=\"token operator\">==</span> end_vertex<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Breaking out of loop. Current vertex: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Distances: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>distances<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword keyword-break\">break</span>\n\n            visited<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Visited vertex: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword keyword-for\">for</span> v <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token keyword keyword-and\">and</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    alt <span class=\"token operator\">=</span> distances<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>\n                    <span class=\"token keyword keyword-if\">if</span> alt <span class=\"token operator\">&lt;</span> distances<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                        distances<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> alt\n                        predecessors<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> u\n\n        <span class=\"token keyword keyword-return\">return</span> distances<span class=\"token punctuation\">[</span>end_vertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>get_path<span class=\"token punctuation\">(</span>predecessors<span class=\"token punctuation\">,</span> start_vertex_data<span class=\"token punctuation\">,</span> end_vertex_data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Example usage</span>\ng <span class=\"token operator\">=</span> Graph<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># ... (rest of the graph setup)</span>\ndistance<span class=\"token punctuation\">,</span> path <span class=\"token operator\">=</span> g<span class=\"token punctuation\">.</span>dijkstra<span class=\"token punctuation\">(</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Path: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>path<span class=\"token punctuation\">}</span></span><span class=\"token string\">, Distance: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>distance<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"20-23\" class=\" line-highlight\" style=\"top: 458px; height: 96px; width: 965px;\"/>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_dijkstra.php"
      }
    },
    {
      "title": "DSA Bellman-Ford Algorithm",
      "code": [
        {
          "text": "class Graph: def __init__(self, size): self.adj_matrix = [[0] * size for _ in range(size)] self.size = size self.vertex_data = [''] * size def add_edge(self, u, v, weight): if 0 <= u < self.size and 0 <= v < self.size: self.adj_matrix[u][v] = weight #self.adj_matrix[v][u] = weight # For undirected graph def add_vertex_data(self, vertex, data): if 0 <= vertex < self.size: self.vertex_data[vertex] = data",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>vertex_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> u <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size <span class=\"token keyword keyword-and\">and</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> v <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight\n            <span class=\"token comment\">#self.adj_matrix[v][u] = weight  # For undirected graph</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_vertex_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> vertex <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code>"
        },
        {
          "text": "def bellman_ford(self, start_vertex_data): start_vertex = self.vertex_data.index(start_vertex_data) distances = [float('inf')] * self.size distances[start_vertex] = 0 for i in range(self.size - 1): for u in range(self.size): for v in range(self.size): if self.adj_matrix[u][v] != 0: if distances[u] + self.adj_matrix[u][v] < distances[v]: distances[v] = distances[u] + self.adj_matrix[u][v] print(f\"Relaxing edge {self.vertex_data[u]}-{self.vertex_data[v]}, Updated distance to {self.vertex_data[v]}: {distances[v]}\") return distances",
          "html": "<code class=\"language-python\">    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">bellman_ford</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> start_vertex_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        start_vertex <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>start_vertex_data<span class=\"token punctuation\">)</span>\n        distances <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        distances<span class=\"token punctuation\">[</span>start_vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n        <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-for\">for</span> u <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-for\">for</span> v <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword keyword-if\">if</span> distances<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> distances<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                            distances<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> distances<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>\n                            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Relaxing edge </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, Updated distance to </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>distances<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword keyword-return\">return</span> distances<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"18-19\" class=\" line-highlight\" style=\"top: 50px; height: 48px; width: 1432px;\"/><div aria-hidden=\"true\" data-range=\"21-26\" class=\" line-highlight\" style=\"top: 122px; height: 144px; width: 1432px;\"/>"
        },
        {
          "text": "class Graph: def __init__(self, size): self.adj_matrix = [[0] * size for _ in range(size)] self.size = size self.vertex_data = [''] * size def add_edge(self, u, v, weight): if 0 <= u < self.size and 0 <= v < self.size: self.adj_matrix[u][v] = weight #self.adj_matrix[v][u] = weight # For undirected graph def add_vertex_data(self, vertex, data): if 0 <= vertex < self.size: self.vertex_data[vertex] = data def bellman_ford(self, start_vertex_data): start_vertex = self.vertex_data.index(start_vertex_data) distances = [float('inf')] * self.size distances[start_vertex] = 0 for i in range(self.size - 1): for u in range(self.size): for v in range(self.size): if self.adj_matrix[u][v] != 0: if distances[u] + self.adj_matrix[u][v] < distances[v]: distances[v] = distances[u] + self.adj_matrix[u][v] print(f\"Relaxing edge {self.vertex_data[u]}-{self.vertex_data[v]}, Updated distance to {self.vertex_data[v]}: {distances[v]}\") return distances g = Graph(5) g.add_vertex_data(0, 'A') g.add_vertex_data(1, 'B') g.add_vertex_data(2, 'C') g.add_vertex_data(3, 'D') g.add_vertex_data(4, 'E') g.add_edge(3, 0, 4) # D -> A, weight 4 g.add_edge(3, 2, 7) # D -> C, weight 7 g.add_edge(3, 4, 3) # D -> E, weight 3 g.add_edge(0, 2, 4) # A -> C, weight 4 g.add_edge(2, 0, -3) # C -> A, weight -3 g.add_edge(0, 4, 5) # A -> E, weight 5 g.add_edge(4, 2, 3) # E -> C, weight 3 g.add_edge(1, 2, -4) # B -> C, weight -4 g.add_edge(4, 1, 2) # E -> B, weight 2 # Running the Bellman-Ford algorithm from D to all vertices print(\"\\nThe Bellman-Ford Algorithm starting from vertex D:\") distances = g.bellman_ford('D') for i, d in enumerate(distances): print(f\"Distance from D to {g.vertex_data[i]}: {d}\")",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>vertex_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> u <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size <span class=\"token keyword keyword-and\">and</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> v <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight\n            <span class=\"token comment\">#self.adj_matrix[v][u] = weight  # For undirected graph</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_vertex_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> vertex <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">bellman_ford</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> start_vertex_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        start_vertex <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>start_vertex_data<span class=\"token punctuation\">)</span>\n        distances <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        distances<span class=\"token punctuation\">[</span>start_vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n        <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-for\">for</span> u <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-for\">for</span> v <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword keyword-if\">if</span> distances<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> distances<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                            distances<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> distances<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>\n                            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Relaxing edge </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, Updated distance to </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>distances<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword keyword-return\">return</span> distances\n\ng <span class=\"token operator\">=</span> Graph<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># D -&gt; A, weight 4</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># D -&gt; C, weight 7</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># D -&gt; E, weight 3</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A -&gt; C, weight 4</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># C -&gt; A, weight -3</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A -&gt; E, weight 5</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># E -&gt; C, weight 3</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># B -&gt; C, weight -4</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># E -&gt; B, weight 2</span>\n\n<span class=\"token comment\"># Running the Bellman-Ford algorithm from D to all vertices</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nThe Bellman-Ford Algorithm starting from vertex D:\"</span><span class=\"token punctuation\">)</span>\ndistances <span class=\"token operator\">=</span> g<span class=\"token punctuation\">.</span>bellman_ford<span class=\"token punctuation\">(</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-for\">for</span> i<span class=\"token punctuation\">,</span> d <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>distances<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Distance from D to </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>g<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>d<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code>"
        },
        {
          "text": "def bellman_ford(self, start_vertex_data): start_vertex = self.vertex_data.index(start_vertex_data) distances = [float('inf')] * self.size distances[start_vertex] = 0 for i in range(self.size - 1): for u in range(self.size): for v in range(self.size): if self.adj_matrix[u][v] != 0: if distances[u] + self.adj_matrix[u][v] < distances[v]: distances[v] = distances[u] + self.adj_matrix[u][v] print(f\"Relaxing edge {self.vertex_data[u]}->{self.vertex_data[v]}, Updated distance to {self.vertex_data[v]}: {distances[v]}\") # Negative cycle detection for u in range(self.size): for v in range(self.size): if self.adj_matrix[u][v] != 0: if distances[u] + self.adj_matrix[u][v] < distances[v]: return (True, None) # Indicate a negative cycle was found return (False, distances) # Indicate no negative cycle and return distances",
          "html": "<code class=\"language-python\">    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">bellman_ford</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> start_vertex_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        start_vertex <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>start_vertex_data<span class=\"token punctuation\">)</span>\n        distances <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        distances<span class=\"token punctuation\">[</span>start_vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n        <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-for\">for</span> u <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-for\">for</span> v <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword keyword-if\">if</span> distances<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> distances<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                            distances<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> distances<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>\n                            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Relaxing edge </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">-&gt;</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, Updated distance to </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>distances<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Negative cycle detection</span>\n        <span class=\"token keyword keyword-for\">for</span> u <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-for\">for</span> v <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword keyword-if\">if</span> distances<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> distances<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Indicate a negative cycle was found</span>\n\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> distances<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Indicate no negative cycle and return distances</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"29-34\" class=\" line-highlight\" style=\"top: 314px; height: 144px; width: 1440px;\"/><div aria-hidden=\"true\" data-range=\"36\" class=\" line-highlight\" style=\"top: 482px; height: 24px; width: 1440px;\"/>"
        },
        {
          "text": "class Graph: def __init__(self, size): self.adj_matrix = [[0] * size for _ in range(size)] self.size = size self.vertex_data = [''] * size def add_edge(self, u, v, weight): if 0 <= u < self.size and 0 <= v < self.size: self.adj_matrix[u][v] = weight #self.adj_matrix[v][u] = weight # For undirected graph def add_vertex_data(self, vertex, data): if 0 <= vertex < self.size: self.vertex_data[vertex] = data def bellman_ford(self, start_vertex_data): start_vertex = self.vertex_data.index(start_vertex_data) distances = [float('inf')] * self.size predecessors = [None] * self.size distances[start_vertex] = 0 for i in range(self.size - 1): for u in range(self.size): for v in range(self.size): if self.adj_matrix[u][v] != 0: if distances[u] + self.adj_matrix[u][v] < distances[v]: distances[v] = distances[u] + self.adj_matrix[u][v] predecessors[v] = u print(f\"Relaxing edge {self.vertex_data[u]}->{self.vertex_data[v]}, Updated distance to {self.vertex_data[v]}: {distances[v]}\") # Negative cycle detection for u in range(self.size): for v in range(self.size): if self.adj_matrix[u][v] != 0: if distances[u] + self.adj_matrix[u][v] < distances[v]: return (True, None, None) # Indicate a negative cycle was found return (False, distances, predecessors) # Indicate no negative cycle and return distances def get_path(self, predecessors, start_vertex, end_vertex): path = [] current = self.vertex_data.index(end_vertex) while current is not None: path.insert(0, self.vertex_data[current]) current = predecessors[current] if current == self.vertex_data.index(start_vertex): path.insert(0, start_vertex) break return '->'.join(path) g = Graph(5) g.add_vertex_data(0, 'A') g.add_vertex_data(1, 'B') g.add_vertex_data(2, 'C') g.add_vertex_data(3, 'D') g.add_vertex_data(4, 'E') g.add_edge(3, 0, 4) # D -> A, weight 4 g.add_edge(3, 2, 7) # D -> C, weight 7 g.add_edge(3, 4, 3) # D -> E, weight 3 g.add_edge(0, 2, 4) # A -> C, weight 4 g.add_edge(2, 0, -3) # C -> A, weight -3 g.add_edge(0, 4, 5) # A -> E, weight 5 g.add_edge(4, 2, 3) # E -> C, weight 3 g.add_edge(1, 2, -4) # B -> C, weight -4 g.add_edge(4, 1, 2) # E -> B, weight 2 # Running the Bellman-Ford algorithm from D to all vertices print(\"\\nThe Bellman-Ford Algorithm starting from vertex D:\") negative_cycle, distances, predecessors = g.bellman_ford('D') if not negative_cycle: for i, d in enumerate(distances): if d != float('inf'): path = g.get_path(predecessors, 'D', g.vertex_data[i]) print(f\"{path}, Distance: {d}\") else: print(f\"No path from D to {g.vertex_data[i]}, Distance: Infinity\") else: print(\"Negative weight cycle detected. Cannot compute shortest paths.\")",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>vertex_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> u <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size <span class=\"token keyword keyword-and\">and</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> v <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight\n            <span class=\"token comment\">#self.adj_matrix[v][u] = weight  # For undirected graph</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_vertex_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> vertex <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">bellman_ford</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> start_vertex_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        start_vertex <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>start_vertex_data<span class=\"token punctuation\">)</span>\n        distances <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        predecessors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        distances<span class=\"token punctuation\">[</span>start_vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n        <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-for\">for</span> u <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-for\">for</span> v <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword keyword-if\">if</span> distances<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> distances<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                            distances<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> distances<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>\n                            predecessors<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> u\n                            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Relaxing edge </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">-&gt;</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, Updated distance to </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>distances<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Negative cycle detection</span>\n        <span class=\"token keyword keyword-for\">for</span> u <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-for\">for</span> v <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-if\">if</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword keyword-if\">if</span> distances<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> distances<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Indicate a negative cycle was found</span>\n\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> distances<span class=\"token punctuation\">,</span> predecessors<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Indicate no negative cycle and return distances</span>\n    \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">get_path</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> predecessors<span class=\"token punctuation\">,</span> start_vertex<span class=\"token punctuation\">,</span> end_vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        current <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>end_vertex<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-while\">while</span> current <span class=\"token keyword keyword-is\">is</span> <span class=\"token keyword keyword-not\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            path<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            current <span class=\"token operator\">=</span> predecessors<span class=\"token punctuation\">[</span>current<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword keyword-if\">if</span> current <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>start_vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                path<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> start_vertex<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword keyword-break\">break</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token string\">'-&gt;'</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n\ng <span class=\"token operator\">=</span> Graph<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># D -&gt; A, weight 4</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># D -&gt; C, weight 7</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># D -&gt; E, weight 3</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A -&gt; C, weight 4</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># C -&gt; A, weight -3</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A -&gt; E, weight 5</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># E -&gt; C, weight 3</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># B -&gt; C, weight -4</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># E -&gt; B, weight 2</span>\n\n<span class=\"token comment\"># Running the Bellman-Ford algorithm from D to all vertices</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nThe Bellman-Ford Algorithm starting from vertex D:\"</span><span class=\"token punctuation\">)</span>\nnegative_cycle<span class=\"token punctuation\">,</span> distances<span class=\"token punctuation\">,</span> predecessors <span class=\"token operator\">=</span> g<span class=\"token punctuation\">.</span>bellman_ford<span class=\"token punctuation\">(</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> negative_cycle<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-for\">for</span> i<span class=\"token punctuation\">,</span> d <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>distances<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> d <span class=\"token operator\">!=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            path <span class=\"token operator\">=</span> g<span class=\"token punctuation\">.</span>get_path<span class=\"token punctuation\">(</span>predecessors<span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>path<span class=\"token punctuation\">}</span></span><span class=\"token string\">, Distance: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>d<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"No path from D to </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>g<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, Distance: Infinity\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Negative weight cycle detected. Cannot compute shortest paths.\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"19\" class=\" line-highlight\" style=\"top: 434px; height: 24px; width: 1440px;\"/><div aria-hidden=\"true\" data-range=\"28\" class=\" line-highlight\" style=\"top: 650px; height: 24px; width: 1440px;\"/><div aria-hidden=\"true\" data-range=\"40-49\" class=\" line-highlight\" style=\"top: 938px; height: 240px; width: 1440px;\"/>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_bellmanford.php"
      }
    },
    {
      "title": "DSA Prim's Algorithm",
      "code": [
        {
          "text": "parents = [-1, 0, -1, 0, 3, 3, -1, -1] #vertices [ A, B, C, D, E, F, G, H]",
          "html": "<code class=\"language-python\">parents <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#vertices [ A,  B,  C,  D,  E,  F,  G,  H]</span>\n</code>"
        },
        {
          "text": "in_mst = [ true, false, false, true, false, false, false, false] #vertices [ A, B, C, D, E, F, G, H]",
          "html": "<code class=\"language-python\"> in_mst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span>  true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#vertices [    A,     B,     C,     D,     E,     F,     G,     H]</span>\n</code>"
        },
        {
          "text": "class Graph: def __init__(self, size): self.adj_matrix = [[0] * size for _ in range(size)] self.size = size self.vertex_data = [''] * size def add_edge(self, u, v, weight): if 0 <= u < self.size and 0 <= v < self.size: self.adj_matrix[u][v] = weight self.adj_matrix[v][u] = weight # For undirected graph def add_vertex_data(self, vertex, data): if 0 <= vertex < self.size: self.vertex_data[vertex] = data",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>vertex_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> u <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size <span class=\"token keyword keyword-and\">and</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> v <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight  <span class=\"token comment\"># For undirected graph</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_vertex_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> vertex <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"3-5\" class=\" line-highlight\" style=\"top: 50px; height: 72px; width: 657px;\"/><div aria-hidden=\"true\" data-range=\"7-10\" class=\" line-highlight\" style=\"top: 146px; height: 96px; width: 657px;\"/><div aria-hidden=\"true\" data-range=\"12-14\" class=\" line-highlight\" style=\"top: 266px; height: 72px; width: 657px;\"/>"
        },
        {
          "text": "def prims_algorithm(self): in_mst = [False] * self.size key_values = [float('inf')] * self.size parents = [-1] * self.size key_values[0] = 0 # Starting vertex print(\"Edge \\tWeight\") for _ in range(self.size): u = min((v for v in range(self.size) if not in_mst[v]), key=lambda v: key_values[v]) in_mst[u] = True if parents[u] != -1: # Skip printing for the first vertex since it has no parent print(f\"{self.vertex_data[parents[u]]}-{self.vertex_data[u]} \\t{self.adj_matrix[u][parents[u]]}\") for v in range(self.size): if 0 < self.adj_matrix[u][v] < key_values[v] and not in_mst[v]: key_values[v] = self.adj_matrix[u][v] parents[v] = u",
          "html": "<code class=\"language-python\">    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">prims_algorithm</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        in_mst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        key_values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        parents <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n\n        key_values<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># Starting vertex</span>\n\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Edge \\tWeight\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            u <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v <span class=\"token keyword keyword-for\">for</span> v <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> in_mst<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token keyword keyword-lambda\">lambda</span> v<span class=\"token punctuation\">:</span> key_values<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n            in_mst<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n            <span class=\"token keyword keyword-if\">if</span> parents<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># Skip printing for the first vertex since it has no parent</span>\n                <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>parents<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> \\t</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>parents<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword keyword-for\">for</span> v <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> key_values<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-and\">and</span> <span class=\"token keyword keyword-not\">not</span> in_mst<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    key_values<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>\n                    parents<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> u<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"17-19\" class=\" line-highlight\" style=\"top: 26px; height: 72px; width: 1071px;\"/><div aria-hidden=\"true\" data-range=\"21\" class=\" line-highlight\" style=\"top: 122px; height: 24px; width: 1071px;\"/><div aria-hidden=\"true\" data-range=\"25\" class=\" line-highlight\" style=\"top: 218px; height: 24px; width: 1071px;\"/><div aria-hidden=\"true\" data-range=\"32-35\" class=\" line-highlight\" style=\"top: 386px; height: 96px; width: 1071px;\"/>"
        },
        {
          "text": "class Graph: def __init__(self, size): self.adj_matrix = [[0] * size for _ in range(size)] self.size = size self.vertex_data = [''] * size def add_edge(self, u, v, weight): if 0 <= u < self.size and 0 <= v < self.size: self.adj_matrix[u][v] = weight self.adj_matrix[v][u] = weight # For undirected graph def add_vertex_data(self, vertex, data): if 0 <= vertex < self.size: self.vertex_data[vertex] = data def prims_algorithm(self): in_mst = [False] * self.size key_values = [float('inf')] * self.size parents = [-1] * self.size key_values[0] = 0 # Starting vertex print(\"Edge \\tWeight\") for _ in range(self.size): u = min((v for v in range(self.size) if not in_mst[v]), key=lambda v: key_values[v]) in_mst[u] = True if parents[u] != -1: # Skip printing for the first vertex since it has no parent print(f\"{self.vertex_data[parents[u]]}-{self.vertex_data[u]} \\t{self.adj_matrix[u][parents[u]]}\") for v in range(self.size): if 0 < self.adj_matrix[u][v] < key_values[v] and not in_mst[v]: key_values[v] = self.adj_matrix[u][v] parents[v] = u g = Graph(8) g.add_vertex_data(0, 'A') g.add_vertex_data(1, 'B') g.add_vertex_data(2, 'C') g.add_vertex_data(3, 'D') g.add_vertex_data(4, 'E') g.add_vertex_data(5, 'F') g.add_vertex_data(6, 'G') g.add_vertex_data(7, 'H') g.add_edge(0, 1, 4) # A - B g.add_edge(0, 3, 3) # A - D g.add_edge(1, 2, 3) # B - C g.add_edge(1, 3, 5) # B - D g.add_edge(1, 4, 6) # B - E g.add_edge(2, 4, 4) # C - E g.add_edge(2, 7, 2) # C - H g.add_edge(3, 4, 7) # D - E g.add_edge(3, 5, 4) # D - F g.add_edge(4, 5, 5) # E - F g.add_edge(4, 6, 3) # E - G g.add_edge(5, 6, 7) # F - G g.add_edge(6, 7, 5) # G - H print(\"Prim's Algorithm MST:\") g.prims_algorithm()",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>vertex_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> u <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size <span class=\"token keyword keyword-and\">and</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> v <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight\n            self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight  <span class=\"token comment\"># For undirected graph</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_vertex_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> vertex <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">prims_algorithm</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        in_mst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        key_values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        parents <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n\n        key_values<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># Starting vertex</span>\n\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Edge \\tWeight\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            u <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v <span class=\"token keyword keyword-for\">for</span> v <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> in_mst<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token keyword keyword-lambda\">lambda</span> v<span class=\"token punctuation\">:</span> key_values<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n            in_mst<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n            <span class=\"token keyword keyword-if\">if</span> parents<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># Skip printing for the first vertex since it has no parent</span>\n                <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>parents<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> \\t</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>parents<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword keyword-for\">for</span> v <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> key_values<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-and\">and</span> <span class=\"token keyword keyword-not\">not</span> in_mst<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    key_values<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>\n                    parents<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> u\n\ng <span class=\"token operator\">=</span> Graph<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'H'</span><span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A - B</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A - D</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># B - C</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># B - D</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># B - E</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C - E</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C - H</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># D - E</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># D - F</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># E - F</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># E - G</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># F - G</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># G - H</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Prim's Algorithm MST:\"</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>prims_algorithm<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"32\" class=\" line-highlight\" style=\"top: 746px; height: 24px; width: 1071px;\"/>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_algo_mst_prim.php"
      }
    },
    {
      "title": "DSA Kruskal's Algorithm",
      "code": [
        {
          "text": "class Graph: def __init__(self, size): self.size = size self.edges = [] # For storing edges as (weight, u, v) self.vertex_data = [''] * size # Store vertex names def add_edge(self, u, v, weight): if 0 <= u < self.size and 0 <= v < self.size: self.edges.append((weight, u, v)) # Add edge with weight def add_vertex_data(self, vertex, data): if 0 <= vertex < self.size: self.vertex_data[vertex] = data",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>edges <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># For storing edges as (weight, u, v)</span>\n        self<span class=\"token punctuation\">.</span>vertex_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size  <span class=\"token comment\"># Store vertex names</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> u <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size <span class=\"token keyword keyword-and\">and</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> v <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>weight<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Add edge with weight</span>\n            \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_vertex_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> vertex <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"8\" class=\" line-highlight\" style=\"top: 170px; height: 24px; width: 684px;\"/><div aria-hidden=\"true\" data-range=\"12\" class=\" line-highlight\" style=\"top: 266px; height: 24px; width: 684px;\"/>"
        },
        {
          "text": "def find(self, parent, i): if parent[i] == i: return i return self.find(parent, parent[i]) def union(self, parent, rank, x, y): xroot = self.find(parent, x) yroot = self.find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1",
          "html": "<code class=\"language-python\">    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> i<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-return\">return</span> i\n        <span class=\"token keyword keyword-return\">return</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> rank<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        xroot <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n        yroot <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-if\">if</span> rank<span class=\"token punctuation\">[</span>xroot<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> rank<span class=\"token punctuation\">[</span>yroot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            parent<span class=\"token punctuation\">[</span>xroot<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> yroot\n        <span class=\"token keyword keyword-elif\">elif</span> rank<span class=\"token punctuation\">[</span>xroot<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> rank<span class=\"token punctuation\">[</span>yroot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            parent<span class=\"token punctuation\">[</span>yroot<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> xroot\n        <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n            parent<span class=\"token punctuation\">[</span>yroot<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> xroot\n            rank<span class=\"token punctuation\">[</span>xroot<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"15-18\" class=\" line-highlight\" style=\"top: 2px; height: 96px; width: 639px;\"/><div aria-hidden=\"true\" data-range=\"20-29\" class=\" line-highlight\" style=\"top: 122px; height: 240px; width: 639px;\"/>"
        },
        {
          "text": "def kruskals_algorithm(self): result = [] # MST i = 0 # edge counter self.edges = sorted(self.edges, key=lambda item: item[2]) parent, rank = [], [] for node in range(self.size): parent.append(node) rank.append(0) while i < len(self.edges): u, v, weight = self.edges[i] i += 1 x = self.find(parent, u) y = self.find(parent, v) if x != y: result.append((u, v, weight)) self.union(parent, rank, x, y) print(\"Edge \\tWeight\") for u, v, weight in result: print(f\"{self.vertex_data[u]}-{self.vertex_data[v]} \\t{weight}\")",
          "html": "<code class=\"language-python\">    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">kruskals_algorithm</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># MST</span>\n        i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\"># edge counter</span>\n\n        self<span class=\"token punctuation\">.</span>edges <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token keyword keyword-lambda\">lambda</span> item<span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        parent<span class=\"token punctuation\">,</span> rank <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword keyword-for\">for</span> node <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            parent<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n            rank<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword keyword-while\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> weight <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n            i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n            x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">)</span>\n            y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword keyword-if\">if</span> x <span class=\"token operator\">!=</span> y<span class=\"token punctuation\">:</span>\n                result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                self<span class=\"token punctuation\">.</span>union<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> rank<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Edge \\tWeight\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> weight <span class=\"token keyword keyword-in\">in</span> result<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> \\t</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>weight<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"35\" class=\" line-highlight\" style=\"top: 98px; height: 24px; width: 745px;\"/><div aria-hidden=\"true\" data-range=\"40-41\" class=\" line-highlight\" style=\"top: 218px; height: 48px; width: 745px;\"/><div aria-hidden=\"true\" data-range=\"44-45\" class=\" line-highlight\" style=\"top: 314px; height: 48px; width: 745px;\"/><div aria-hidden=\"true\" data-range=\"47-51\" class=\" line-highlight\" style=\"top: 386px; height: 120px; width: 745px;\"/>"
        },
        {
          "text": "class Graph: def __init__(self, size): self.size = size self.edges = [] # For storing edges as (weight, u, v) self.vertex_data = [''] * size # Store vertex names def add_edge(self, u, v, weight): if 0 <= u < self.size and 0 <= v < self.size: self.edges.append((u, v, weight)) # Add edge with weight def add_vertex_data(self, vertex, data): if 0 <= vertex < self.size: self.vertex_data[vertex] = data def find(self, parent, i): if parent[i] == i: return i return self.find(parent, parent[i]) def union(self, parent, rank, x, y): xroot = self.find(parent, x) yroot = self.find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskals_algorithm(self): result = [] # MST i = 0 # edge counter self.edges = sorted(self.edges, key=lambda item: item[2]) parent, rank = [], [] for node in range(self.size): parent.append(node) rank.append(0) while i < len(self.edges): u, v, weight = self.edges[i] i += 1 x = self.find(parent, u) y = self.find(parent, v) if x != y: result.append((u, v, weight)) self.union(parent, rank, x, y) print(\"Edge \\tWeight\") for u, v, weight in result: print(f\"{self.vertex_data[u]}-{self.vertex_data[v]} \\t{weight}\") g = Graph(7) g.add_vertex_data(0, 'A') g.add_vertex_data(1, 'B') g.add_vertex_data(2, 'C') g.add_vertex_data(3, 'D') g.add_vertex_data(4, 'E') g.add_vertex_data(5, 'F') g.add_vertex_data(6, 'G') g.add_edge(0, 1, 4) #A-B, 4 g.add_edge(0, 6, 10) #A-G, 10 g.add_edge(0, 2, 9) #A-C, 9 g.add_edge(1, 2, 8) #B-C, 8 g.add_edge(2, 3, 5) #C-D, 5 g.add_edge(2, 4, 2) #C-E, 2 g.add_edge(2, 6, 7) #C-G, 7 g.add_edge(3, 4, 3) #D-E, 3 g.add_edge(3, 5, 7) #D-F, 7 g.add_edge(4, 6, 6) #E-G, 6 g.add_edge(5, 6, 11) #F-G, 11 print(\"Kruskal's Algorithm MST:\") g.kruskals_algorithm()",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>edges <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># For storing edges as (weight, u, v)</span>\n        self<span class=\"token punctuation\">.</span>vertex_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size  <span class=\"token comment\"># Store vertex names</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> u <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size <span class=\"token keyword keyword-and\">and</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> v <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Add edge with weight</span>\n            \n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_vertex_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> vertex <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> i<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-return\">return</span> i\n        <span class=\"token keyword keyword-return\">return</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> rank<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        xroot <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n        yroot <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-if\">if</span> rank<span class=\"token punctuation\">[</span>xroot<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> rank<span class=\"token punctuation\">[</span>yroot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            parent<span class=\"token punctuation\">[</span>xroot<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> yroot\n        <span class=\"token keyword keyword-elif\">elif</span> rank<span class=\"token punctuation\">[</span>xroot<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> rank<span class=\"token punctuation\">[</span>yroot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            parent<span class=\"token punctuation\">[</span>yroot<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> xroot\n        <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n            parent<span class=\"token punctuation\">[</span>yroot<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> xroot\n            rank<span class=\"token punctuation\">[</span>xroot<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">kruskals_algorithm</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># MST</span>\n        i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># edge counter</span>\n\n        self<span class=\"token punctuation\">.</span>edges <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token keyword keyword-lambda\">lambda</span> item<span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        parent<span class=\"token punctuation\">,</span> rank <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword keyword-for\">for</span> node <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            parent<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n            rank<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword keyword-while\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> weight <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n            i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            \n            x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">)</span>\n            y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword keyword-if\">if</span> x <span class=\"token operator\">!=</span> y<span class=\"token punctuation\">:</span>\n                result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                self<span class=\"token punctuation\">.</span>union<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> rank<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Edge \\tWeight\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> weight <span class=\"token keyword keyword-in\">in</span> result<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> \\t</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>weight<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\ng <span class=\"token operator\">=</span> Graph<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#A-B,  4</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#A-G, 10</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#A-C,  9</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#B-C,  8</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#C-D,  5</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#C-E,  2</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#C-G,  7</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#D-E,  3</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#D-F,  7</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#E-G,  6</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#F-G, 11</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Kruskal's Algorithm MST:\"</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>kruskals_algorithm<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"32\" class=\" line-highlight\" style=\"top: 746px; height: 24px; width: 745px;\"/>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_algo_mst_kruskal.php"
      }
    },
    {
      "title": "DSA Ford-Fulkerson Algorithm",
      "code": [
        {
          "text": "class Graph: def __init__(self, size): self.adj_matrix = [[0] * size for _ in range(size)] self.size = size self.vertex_data = [''] * size def add_edge(self, u, v, c): self.adj_matrix[u][v] = c def add_vertex_data(self, vertex, data): if 0 <= vertex < self.size: self.vertex_data[vertex] = data",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>vertex_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_vertex_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> vertex <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"3-5\" class=\" line-highlight\" style=\"top: 50px; height: 72px; width: 639px;\"/><div aria-hidden=\"true\" data-range=\"7-8\" class=\" line-highlight\" style=\"top: 146px; height: 48px; width: 639px;\"/><div aria-hidden=\"true\" data-range=\"10-12\" class=\" line-highlight\" style=\"top: 218px; height: 72px; width: 639px;\"/>"
        },
        {
          "text": "def dfs(self, s, t, visited=None, path=None): if visited is None: visited = [False] * self.size if path is None: path = [] visited[s] = True path.append(s) if s == t: return path for ind, val in enumerate(self.adj_matrix[s]): if not visited[ind] and val > 0: result_path = self.dfs(ind, t, visited, path.copy()) if result_path: return result_path return None",
          "html": "<code class=\"language-python\">    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> visited<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> path<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> visited <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        <span class=\"token keyword keyword-if\">if</span> path <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        visited<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword keyword-if\">if</span> s <span class=\"token operator\">==</span> t<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-return\">return</span> path\n\n        <span class=\"token keyword keyword-for\">for</span> ind<span class=\"token punctuation\">,</span> val <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>ind<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-and\">and</span> val <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                result_path <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>ind<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword keyword-if\">if</span> result_path<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword keyword-return\">return</span> result_path\n\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">None</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"15-18\" class=\" line-highlight\" style=\"top: 26px; height: 96px; width: 675px;\"/><div aria-hidden=\"true\" data-range=\"20-21\" class=\" line-highlight\" style=\"top: 146px; height: 48px; width: 675px;\"/><div aria-hidden=\"true\" data-range=\"23-24\" class=\" line-highlight\" style=\"top: 218px; height: 48px; width: 675px;\"/><div aria-hidden=\"true\" data-range=\"26-30\" class=\" line-highlight\" style=\"top: 290px; height: 120px; width: 675px;\"/><div aria-hidden=\"true\" data-range=\"32\" class=\" line-highlight\" style=\"top: 434px; height: 24px; width: 675px;\"/>"
        },
        {
          "text": "def fordFulkerson(self, source, sink): max_flow = 0 path = self.dfs(source, sink) while path: path_flow = float(\"Inf\") for i in range(len(path) - 1): u, v = path[i], path[i + 1] path_flow = min(path_flow, self.adj_matrix[u][v]) for i in range(len(path) - 1): u, v = path[i], path[i + 1] self.adj_matrix[u][v] -= path_flow self.adj_matrix[v][u] += path_flow max_flow += path_flow path_names = [self.vertex_data[node] for node in path] print(\"Path:\", \" -> \".join(path_names), \", Flow:\", path_flow) path = self.dfs(source, sink) return max_flow",
          "html": "<code class=\"language-python\">    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">fordFulkerson</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> sink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        max_flow <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n        path <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> sink<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-while\">while</span> path<span class=\"token punctuation\">:</span>\n            path_flow <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inf\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                u<span class=\"token punctuation\">,</span> v <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n                path_flow <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>path_flow<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                u<span class=\"token punctuation\">,</span> v <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n                self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> path_flow\n                self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> path_flow\n\n            max_flow <span class=\"token operator\">+=</span> path_flow\n\n            path_names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-for\">for</span> node <span class=\"token keyword keyword-in\">in</span> path<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Path:\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>path_names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\", Flow:\"</span><span class=\"token punctuation\">,</span> path_flow<span class=\"token punctuation\">)</span>\n\n            path <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> sink<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword keyword-return\">return</span> max_flow<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"37\" class=\" line-highlight\" style=\"top: 74px; height: 24px; width: 719px;\"/><div aria-hidden=\"true\" data-range=\"39-42\" class=\" line-highlight\" style=\"top: 122px; height: 96px; width: 719px;\"/><div aria-hidden=\"true\" data-range=\"44-47\" class=\" line-highlight\" style=\"top: 242px; height: 96px; width: 719px;\"/><div aria-hidden=\"true\" data-range=\"49\" class=\" line-highlight\" style=\"top: 362px; height: 24px; width: 719px;\"/><div aria-hidden=\"true\" data-range=\"51-52\" class=\" line-highlight\" style=\"top: 410px; height: 48px; width: 719px;\"/>"
        },
        {
          "text": "class Graph: def __init__(self, size): self.adj_matrix = [[0] * size for _ in range(size)] self.size = size self.vertex_data = [''] * size def add_edge(self, u, v, c): self.adj_matrix[u][v] = c def add_vertex_data(self, vertex, data): if 0 <= vertex < self.size: self.vertex_data[vertex] = data def dfs(self, s, t, visited=None, path=None): if visited is None: visited = [False] * self.size if path is None: path = [] visited[s] = True path.append(s) if s == t: return path for ind, val in enumerate(self.adj_matrix[s]): if not visited[ind] and val > 0: result_path = self.dfs(ind, t, visited, path.copy()) if result_path: return result_path return None def fordFulkerson(self, source, sink): max_flow = 0 path = self.dfs(source, sink) while path: path_flow = float(\"Inf\") for i in range(len(path) - 1): u, v = path[i], path[i + 1] path_flow = min(path_flow, self.adj_matrix[u][v]) for i in range(len(path) - 1): u, v = path[i], path[i + 1] self.adj_matrix[u][v] -= path_flow self.adj_matrix[v][u] += path_flow max_flow += path_flow path_names = [self.vertex_data[node] for node in path] print(\"Path:\", \" -> \".join(path_names), \", Flow:\", path_flow) path = self.dfs(source, sink) return max_flow g = Graph(6) vertex_names = ['s', 'v1', 'v2', 'v3', 'v4', 't'] for i, name in enumerate(vertex_names): g.add_vertex_data(i, name) g.add_edge(0, 1, 3) # s -> v1, cap: 3 g.add_edge(0, 2, 7) # s -> v2, cap: 7 g.add_edge(1, 3, 3) # v1 -> v3, cap: 3 g.add_edge(1, 4, 4) # v1 -> v4, cap: 4 g.add_edge(2, 1, 5) # v2 -> v1, cap: 5 g.add_edge(2, 4, 3) # v2 -> v4, cap: 3 g.add_edge(3, 4, 3) # v3 -> v4, cap: 3 g.add_edge(3, 5, 2) # v3 -> t, cap: 2 g.add_edge(4, 5, 6) # v4 -> t, cap: 6 source = 0; sink = 5 print(\"The maximum possible flow is %d \" % g.fordFulkerson(source, sink))",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>vertex_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_vertex_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> vertex <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> visited<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> path<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> visited <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        <span class=\"token keyword keyword-if\">if</span> path <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        visited<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword keyword-if\">if</span> s <span class=\"token operator\">==</span> t<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-return\">return</span> path\n\n        <span class=\"token keyword keyword-for\">for</span> ind<span class=\"token punctuation\">,</span> val <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>ind<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-and\">and</span> val <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                result_path <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>ind<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword keyword-if\">if</span> result_path<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword keyword-return\">return</span> result_path\n\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">fordFulkerson</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> sink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        max_flow <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n        path <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> sink<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-while\">while</span> path<span class=\"token punctuation\">:</span>\n            path_flow <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inf\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                u<span class=\"token punctuation\">,</span> v <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n                path_flow <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>path_flow<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                u<span class=\"token punctuation\">,</span> v <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n                self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> path_flow\n                self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> path_flow\n\n            max_flow <span class=\"token operator\">+=</span> path_flow\n\n            path_names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-for\">for</span> node <span class=\"token keyword keyword-in\">in</span> path<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Path:\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>path_names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\", Flow:\"</span><span class=\"token punctuation\">,</span> path_flow<span class=\"token punctuation\">)</span>\n\n            path <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> sink<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword keyword-return\">return</span> max_flow\n\ng <span class=\"token operator\">=</span> Graph<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\nvertex_names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'v1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'v2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'v3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'v4'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'t'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword keyword-for\">for</span> i<span class=\"token punctuation\">,</span> name <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>vertex_names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    g<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># s  -&gt; v1, cap: 3</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># s  -&gt; v2, cap: 7</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># v1 -&gt; v3, cap: 3</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># v1 -&gt; v4, cap: 4</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># v2 -&gt; v1, cap: 5</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># v2 -&gt; v4, cap: 3</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># v3 -&gt; v4, cap: 3</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># v3 -&gt; t,  cap: 2</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># v4 -&gt; t,  cap: 6</span>\n\nsource <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> sink <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The maximum possible flow is %d \"</span> <span class=\"token operator\">%</span> g<span class=\"token punctuation\">.</span>fordFulkerson<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> sink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_fordfulkerson.php"
      }
    },
    {
      "title": "DSA Edmonds-Karp Algorithm",
      "code": [
        {
          "text": "class Graph: def __init__(self, size): self.adj_matrix = [[0] * size for _ in range(size)] self.size = size self.vertex_data = [''] * size def add_edge(self, u, v, c): self.adj_matrix[u][v] = c def add_vertex_data(self, vertex, data): if 0 <= vertex < self.size: self.vertex_data[vertex] = data",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>vertex_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_vertex_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> vertex <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"3-5\" class=\" line-highlight\" style=\"top: 50px; height: 72px; width: 639px;\"/><div aria-hidden=\"true\" data-range=\"7-8\" class=\" line-highlight\" style=\"top: 146px; height: 48px; width: 639px;\"/><div aria-hidden=\"true\" data-range=\"10-12\" class=\" line-highlight\" style=\"top: 218px; height: 72px; width: 639px;\"/>"
        },
        {
          "text": "def bfs(self, s, t, parent): visited = [False] * self.size queue = [] # Using list as a queue queue.append(s) visited[s] = True while queue: u = queue.pop(0) # Pop from the start of the list for ind, val in enumerate(self.adj_matrix[u]): if not visited[ind] and val > 0: queue.append(ind) visited[ind] = True parent[ind] = u return visited[t]",
          "html": "<code class=\"language-python\">    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># Using list as a queue</span>\n        queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n        visited<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n        <span class=\"token keyword keyword-while\">while</span> queue<span class=\"token punctuation\">:</span>\n            u <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Pop from the start of the list</span>\n\n            <span class=\"token keyword keyword-for\">for</span> ind<span class=\"token punctuation\">,</span> val <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>ind<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-and\">and</span> val <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>ind<span class=\"token punctuation\">)</span>\n                    visited<span class=\"token punctuation\">[</span>ind<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n                    parent<span class=\"token punctuation\">[</span>ind<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> u\n\n        <span class=\"token keyword keyword-return\">return</span> visited<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"15-18\" class=\" line-highlight\" style=\"top: 26px; height: 96px; width: 639px;\"/><div aria-hidden=\"true\" data-range=\"20-21\" class=\" line-highlight\" style=\"top: 146px; height: 48px; width: 639px;\"/><div aria-hidden=\"true\" data-range=\"23-27\" class=\" line-highlight\" style=\"top: 218px; height: 120px; width: 639px;\"/><div aria-hidden=\"true\" data-range=\"29\" class=\" line-highlight\" style=\"top: 362px; height: 24px; width: 639px;\"/>"
        },
        {
          "text": "def edmonds_karp(self, source, sink): parent = [-1] * self.size max_flow = 0 while self.bfs(source, sink, parent): path_flow = float(\"Inf\") s = sink while(s != source): path_flow = min(path_flow, self.adj_matrix[parent[s]][s]) s = parent[s] max_flow += path_flow v = sink while(v != source): u = parent[v] self.adj_matrix[u][v] -= path_flow self.adj_matrix[v][u] += path_flow v = parent[v] path = [] v = sink while(v != source): path.append(v) v = parent[v] path.append(source) path.reverse() path_names = [self.vertex_data[node] for node in path] print(\"Path:\", \" -> \".join(path_names), \", Flow:\", path_flow) return max_flow",
          "html": "<code class=\"language-python\">    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">edmonds_karp</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> sink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        max_flow <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n        <span class=\"token keyword keyword-while\">while</span> self<span class=\"token punctuation\">.</span>bfs<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> sink<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            path_flow <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inf\"</span><span class=\"token punctuation\">)</span>\n            s <span class=\"token operator\">=</span> sink\n            <span class=\"token keyword keyword-while\">while</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">!=</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                path_flow <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>path_flow<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                s <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span>\n\n            max_flow <span class=\"token operator\">+=</span> path_flow\n            v <span class=\"token operator\">=</span> sink\n            <span class=\"token keyword keyword-while\">while</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">!=</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                u <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>\n                self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> path_flow\n                self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> path_flow\n                v <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>\n\n            path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n            v <span class=\"token operator\">=</span> sink\n            <span class=\"token keyword keyword-while\">while</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">!=</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n                v <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>\n            path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span>\n            path<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            path_names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-for\">for</span> node <span class=\"token keyword keyword-in\">in</span> path<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Path:\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>path_names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\", Flow:\"</span><span class=\"token punctuation\">,</span> path_flow<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword keyword-return\">return</span> max_flow<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"35-40\" class=\" line-highlight\" style=\"top: 98px; height: 144px; width: 719px;\"/><div aria-hidden=\"true\" data-range=\"42\" class=\" line-highlight\" style=\"top: 266px; height: 24px; width: 719px;\"/><div aria-hidden=\"true\" data-range=\"44-48\" class=\" line-highlight\" style=\"top: 314px; height: 120px; width: 719px;\"/>"
        },
        {
          "text": "class Graph: def __init__(self, size): self.adj_matrix = [[0] * size for _ in range(size)] self.size = size self.vertex_data = [''] * size def add_edge(self, u, v, c): self.adj_matrix[u][v] = c def add_vertex_data(self, vertex, data): if 0 <= vertex < self.size: self.vertex_data[vertex] = data def bfs(self, s, t, parent): visited = [False] * self.size queue = [] # Using list as a queue queue.append(s) visited[s] = True while queue: u = queue.pop(0) # Pop from the start of the list for ind, val in enumerate(self.adj_matrix[u]): if not visited[ind] and val > 0: queue.append(ind) visited[ind] = True parent[ind] = u return visited[t] def edmonds_karp(self, source, sink): parent = [-1] * self.size max_flow = 0 while self.bfs(source, sink, parent): path_flow = float(\"Inf\") s = sink while(s != source): path_flow = min(path_flow, self.adj_matrix[parent[s]][s]) s = parent[s] max_flow += path_flow v = sink while(v != source): u = parent[v] self.adj_matrix[u][v] -= path_flow self.adj_matrix[v][u] += path_flow v = parent[v] path = [] v = sink while(v != source): path.append(v) v = parent[v] path.append(source) path.reverse() path_names = [self.vertex_data[node] for node in path] print(\"Path:\", \" -> \".join(path_names), \", Flow:\", path_flow) return max_flow # Example usage: g = Graph(6) vertex_names = ['s', 'v1', 'v2', 'v3', 'v4', 't'] for i, name in enumerate(vertex_names): g.add_vertex_data(i, name) g.add_edge(0, 1, 3) # s -> v1, cap: 3 g.add_edge(0, 2, 7) # s -> v2, cap: 7 g.add_edge(1, 3, 3) # v1 -> v3, cap: 3 g.add_edge(1, 4, 4) # v1 -> v4, cap: 4 g.add_edge(2, 1, 5) # v2 -> v1, cap: 5 g.add_edge(2, 4, 3) # v2 -> v4, cap: 3 g.add_edge(3, 4, 3) # v3 -> v4, cap: 3 g.add_edge(3, 5, 2) # v3 -> t, cap: 2 g.add_edge(4, 5, 6) # v4 -> t, cap: 6 source = 0; sink = 5 print(\"The maximum possible flow is %d \" % g.edmonds_karp(source, sink))",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>vertex_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> size\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">add_vertex_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> vertex <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>vertex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># Using list as a queue</span>\n        queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n        visited<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n        <span class=\"token keyword keyword-while\">while</span> queue<span class=\"token punctuation\">:</span>\n            u <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Pop from the start of the list</span>\n\n            <span class=\"token keyword keyword-for\">for</span> ind<span class=\"token punctuation\">,</span> val <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>ind<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-and\">and</span> val <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>ind<span class=\"token punctuation\">)</span>\n                    visited<span class=\"token punctuation\">[</span>ind<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n                    parent<span class=\"token punctuation\">[</span>ind<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> u\n\n        <span class=\"token keyword keyword-return\">return</span> visited<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">edmonds_karp</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> sink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>size\n        max_flow <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n        <span class=\"token keyword keyword-while\">while</span> self<span class=\"token punctuation\">.</span>bfs<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> sink<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            path_flow <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inf\"</span><span class=\"token punctuation\">)</span>\n            s <span class=\"token operator\">=</span> sink\n            <span class=\"token keyword keyword-while\">while</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">!=</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                path_flow <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>path_flow<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                s <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span>\n\n            max_flow <span class=\"token operator\">+=</span> path_flow\n            v <span class=\"token operator\">=</span> sink\n            <span class=\"token keyword keyword-while\">while</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">!=</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                u <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>\n                self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> path_flow\n                self<span class=\"token punctuation\">.</span>adj_matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> path_flow\n                v <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>\n\n            path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n            v <span class=\"token operator\">=</span> sink\n            <span class=\"token keyword keyword-while\">while</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">!=</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n                v <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>\n            path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span>\n            path<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            path_names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>vertex_data<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-for\">for</span> node <span class=\"token keyword keyword-in\">in</span> path<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Path:\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" -&gt; \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>path_names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\", Flow:\"</span><span class=\"token punctuation\">,</span> path_flow<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword keyword-return\">return</span> max_flow\n\n<span class=\"token comment\"># Example usage:</span>\ng <span class=\"token operator\">=</span> Graph<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\nvertex_names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'v1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'v2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'v3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'v4'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'t'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword keyword-for\">for</span> i<span class=\"token punctuation\">,</span> name <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>vertex_names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    g<span class=\"token punctuation\">.</span>add_vertex_data<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># s  -&gt; v1, cap: 3</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># s  -&gt; v2, cap: 7</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># v1 -&gt; v3, cap: 3</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># v1 -&gt; v4, cap: 4</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># v2 -&gt; v1, cap: 5</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># v2 -&gt; v4, cap: 3</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># v3 -&gt; v4, cap: 3</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># v3 -&gt; t,  cap: 2</span>\ng<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># v4 -&gt; t,  cap: 6</span>\n\nsource <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> sink <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The maximum possible flow is %d \"</span> <span class=\"token operator\">%</span> g<span class=\"token punctuation\">.</span>edmonds_karp<span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> sink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_algo_graphs_edmondskarp.php"
      }
    },
    {
      "title": "The Euclidean Algorithm",
      "code": [
        {
          "text": "def gcd_division(a, b): while b != 0: remainder = a % b print(f\"{a} = {a//b} * {b} + {remainder}\") a = b b = remainder return a a = 120 b = 25 print(\"The Euclidean algorithm using division:\\n\") print(f\"The GCD of {a} and {b} is: {gcd_division(a, b)}\")",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">gcd_division</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-while\">while</span> b <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        remainder <span class=\"token operator\">=</span> a <span class=\"token operator\">%</span> b\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">}</span></span><span class=\"token string\"> = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>a<span class=\"token operator\">//</span>b<span class=\"token punctuation\">}</span></span><span class=\"token string\"> * </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>b<span class=\"token punctuation\">}</span></span><span class=\"token string\"> + </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>remainder<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        a <span class=\"token operator\">=</span> b\n        b <span class=\"token operator\">=</span> remainder\n    <span class=\"token keyword keyword-return\">return</span> a\n\na <span class=\"token operator\">=</span> <span class=\"token number\">120</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">25</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The Euclidean algorithm using division:\\n\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"The GCD of </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">}</span></span><span class=\"token string\"> and </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>b<span class=\"token punctuation\">}</span></span><span class=\"token string\"> is: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>gcd_division<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code>"
        },
        {
          "text": "def gcd_subtraction(a, b): while a != b: if a > b: print(f\"{a} - {b} = {a-b}\") a = a - b else: print(f\"{b} - {a} = {b-a}\") b = b - a return a a = 120 b = 25 print(\"The Euclidean algorithm using subtraction:\\n\") print(f\"The GCD of {a} and {b} is: {gcd_subtraction(a, b)}\")",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">gcd_subtraction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-while\">while</span> a <span class=\"token operator\">!=</span> b<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> a <span class=\"token operator\">&gt;</span> b<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">}</span></span><span class=\"token string\"> - </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>b<span class=\"token punctuation\">}</span></span><span class=\"token string\"> = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>a<span class=\"token operator\">-</span>b<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            a <span class=\"token operator\">=</span> a <span class=\"token operator\">-</span> b\n        <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>b<span class=\"token punctuation\">}</span></span><span class=\"token string\"> - </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">}</span></span><span class=\"token string\"> = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>b<span class=\"token operator\">-</span>a<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            b <span class=\"token operator\">=</span> b <span class=\"token operator\">-</span> a\n    <span class=\"token keyword keyword-return\">return</span> a\n\na <span class=\"token operator\">=</span> <span class=\"token number\">120</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">25</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The Euclidean algorithm using subtraction:\\n\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"The GCD of </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">}</span></span><span class=\"token string\"> and </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>b<span class=\"token punctuation\">}</span></span><span class=\"token string\"> is: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>gcd_subtraction<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_ref_euclidean_algorithm.php"
      }
    },
    {
      "title": "Huffman Coding",
      "code": [
        {
          "text": "class Node: def __init__(self, char=None, freq=0): self.char = char self.freq = freq self.left = None self.right = None nodes = [] def calculate_frequencies(word): frequencies = {} for char in word: if char not in frequencies: freq = word.count(char) frequencies[char] = freq nodes.append(Node(char, freq)) def build_huffman_tree(): while len(nodes) > 1: nodes.sort(key=lambda x: x.freq) left = nodes.pop(0) right = nodes.pop(0) merged = Node(freq=left.freq + right.freq) merged.left = left merged.right = right nodes.append(merged) return nodes[0] def generate_huffman_codes(node, current_code, codes): if node is None: return if node.char is not None: codes[node.char] = current_code generate_huffman_codes(node.left, current_code + '0', codes) generate_huffman_codes(node.right, current_code + '1', codes) def huffman_encoding(word): global nodes nodes = [] calculate_frequencies(word) root = build_huffman_tree() codes = {} generate_huffman_codes(root, '', codes) return codes word = \"lossless\" codes = huffman_encoding(word) encoded_word = ''.join(codes[char] for char in word) print(\"Word:\", word) print(\"Huffman code:\", encoded_word) print(\"Conversion table:\", codes)",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> char<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> freq<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>char <span class=\"token operator\">=</span> char\n        self<span class=\"token punctuation\">.</span>freq <span class=\"token operator\">=</span> freq\n        self<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\nnodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">calculate_frequencies</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    frequencies <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword keyword-for\">for</span> char <span class=\"token keyword keyword-in\">in</span> word<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> char <span class=\"token keyword keyword-not\">not</span> <span class=\"token keyword keyword-in\">in</span> frequencies<span class=\"token punctuation\">:</span>\n            freq <span class=\"token operator\">=</span> word<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span>\n            frequencies<span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> freq\n            nodes<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">,</span> freq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">build_huffman_tree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-while\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        nodes<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span><span class=\"token keyword keyword-lambda\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">.</span>freq<span class=\"token punctuation\">)</span>\n        left <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        right <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        \n        merged <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>freq<span class=\"token operator\">=</span>left<span class=\"token punctuation\">.</span>freq <span class=\"token operator\">+</span> right<span class=\"token punctuation\">.</span>freq<span class=\"token punctuation\">)</span>\n        merged<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left\n        merged<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right\n        \n        nodes<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>merged<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-return\">return</span> nodes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">generate_huffman_codes</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> current_code<span class=\"token punctuation\">,</span> codes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> node <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span>\n\n    <span class=\"token keyword keyword-if\">if</span> node<span class=\"token punctuation\">.</span>char <span class=\"token keyword keyword-is\">is</span> <span class=\"token keyword keyword-not\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        codes<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>char<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> current_code\n\n    generate_huffman_codes<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> current_code <span class=\"token operator\">+</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> codes<span class=\"token punctuation\">)</span>\n    generate_huffman_codes<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> current_code <span class=\"token operator\">+</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> codes<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">huffman_encoding</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-global\">global</span> nodes\n    nodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    calculate_frequencies<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span>\n    root <span class=\"token operator\">=</span> build_huffman_tree<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    codes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    generate_huffman_codes<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> codes<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-return\">return</span> codes\n\nword <span class=\"token operator\">=</span> <span class=\"token string\">\"lossless\"</span>\ncodes <span class=\"token operator\">=</span> huffman_encoding<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span>\nencoded_word <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>codes<span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-for\">for</span> char <span class=\"token keyword keyword-in\">in</span> word<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Word:\"</span><span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Huffman code:\"</span><span class=\"token punctuation\">,</span> encoded_word<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Conversion table:\"</span><span class=\"token punctuation\">,</span> codes<span class=\"token punctuation\">)</span></code>"
        },
        {
          "text": "class Node: def __init__(self, char=None, freq=0): self.char = char self.freq = freq self.left = None self.right = None nodes = [] def calculate_frequencies(word): frequencies = {} for char in word: if char not in frequencies: freq = word.count(char) frequencies[char] = freq nodes.append(Node(char, freq)) def build_huffman_tree(): while len(nodes) > 1: nodes.sort(key=lambda x: x.freq) left = nodes.pop(0) right = nodes.pop(0) merged = Node(freq=left.freq + right.freq) merged.left = left merged.right = right nodes.append(merged) return nodes[0] def generate_huffman_codes(node, current_code, codes): if node is None: return if node.char is not None: codes[node.char] = current_code generate_huffman_codes(node.left, current_code + '0', codes) generate_huffman_codes(node.right, current_code + '1', codes) def huffman_encoding(word): global nodes nodes = [] calculate_frequencies(word) root = build_huffman_tree() codes = {} generate_huffman_codes(root, '', codes) return codes def huffman_decoding(encoded_word, codes): current_code = '' decoded_chars = [] # Invert the codes dictionary to get the reverse mapping code_to_char = {v: k for k, v in codes.items()} for bit in encoded_word: current_code += bit if current_code in code_to_char: decoded_chars.append(code_to_char[current_code]) current_code = '' return ''.join(decoded_chars) word = \"lossless\" codes = huffman_encoding(word) encoded_word = ''.join(codes[char] for char in word) decoded_word = huffman_decoding(encoded_word, codes) print(\"Initial word:\", word) print(\"Huffman code:\", encoded_word) print(\"Conversion table:\", codes) print(\"Decoded word:\", decoded_word)",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> char<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> freq<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>char <span class=\"token operator\">=</span> char\n        self<span class=\"token punctuation\">.</span>freq <span class=\"token operator\">=</span> freq\n        self<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\nnodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">calculate_frequencies</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    frequencies <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword keyword-for\">for</span> char <span class=\"token keyword keyword-in\">in</span> word<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> char <span class=\"token keyword keyword-not\">not</span> <span class=\"token keyword keyword-in\">in</span> frequencies<span class=\"token punctuation\">:</span>\n            freq <span class=\"token operator\">=</span> word<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span>\n            frequencies<span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> freq\n            nodes<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">,</span> freq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">build_huffman_tree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-while\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        nodes<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span><span class=\"token keyword keyword-lambda\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">.</span>freq<span class=\"token punctuation\">)</span>\n        left <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        right <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        \n        merged <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>freq<span class=\"token operator\">=</span>left<span class=\"token punctuation\">.</span>freq <span class=\"token operator\">+</span> right<span class=\"token punctuation\">.</span>freq<span class=\"token punctuation\">)</span>\n        merged<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left\n        merged<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right\n        \n        nodes<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>merged<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-return\">return</span> nodes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">generate_huffman_codes</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> current_code<span class=\"token punctuation\">,</span> codes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> node <span class=\"token keyword keyword-is\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span>\n\n    <span class=\"token keyword keyword-if\">if</span> node<span class=\"token punctuation\">.</span>char <span class=\"token keyword keyword-is\">is</span> <span class=\"token keyword keyword-not\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        codes<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>char<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> current_code\n\n    generate_huffman_codes<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> current_code <span class=\"token operator\">+</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> codes<span class=\"token punctuation\">)</span>\n    generate_huffman_codes<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> current_code <span class=\"token operator\">+</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> codes<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">huffman_encoding</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-global\">global</span> nodes\n    nodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    calculate_frequencies<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span>\n    root <span class=\"token operator\">=</span> build_huffman_tree<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    codes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    generate_huffman_codes<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> codes<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-return\">return</span> codes\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">huffman_decoding</span><span class=\"token punctuation\">(</span>encoded_word<span class=\"token punctuation\">,</span> codes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    current_code <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    decoded_chars <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># Invert the codes dictionary to get the reverse mapping</span>\n    code_to_char <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>v<span class=\"token punctuation\">:</span> k <span class=\"token keyword keyword-for\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword keyword-in\">in</span> codes<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword keyword-for\">for</span> bit <span class=\"token keyword keyword-in\">in</span> encoded_word<span class=\"token punctuation\">:</span>\n        current_code <span class=\"token operator\">+=</span> bit\n        <span class=\"token keyword keyword-if\">if</span> current_code <span class=\"token keyword keyword-in\">in</span> code_to_char<span class=\"token punctuation\">:</span>\n            decoded_chars<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>code_to_char<span class=\"token punctuation\">[</span>current_code<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            current_code <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n\n    <span class=\"token keyword keyword-return\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>decoded_chars<span class=\"token punctuation\">)</span>\n\nword <span class=\"token operator\">=</span> <span class=\"token string\">\"lossless\"</span>\ncodes <span class=\"token operator\">=</span> huffman_encoding<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span>\nencoded_word <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>codes<span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-for\">for</span> char <span class=\"token keyword keyword-in\">in</span> word<span class=\"token punctuation\">)</span>\ndecoded_word <span class=\"token operator\">=</span> huffman_decoding<span class=\"token punctuation\">(</span>encoded_word<span class=\"token punctuation\">,</span> codes<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Initial word:\"</span><span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Huffman code:\"</span><span class=\"token punctuation\">,</span> encoded_word<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Conversion table:\"</span><span class=\"token punctuation\">,</span> codes<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Decoded word:\"</span><span class=\"token punctuation\">,</span> decoded_word<span class=\"token punctuation\">)</span>\n<div aria-hidden=\"true\" data-range=\"51-64\" class=\" line-highlight\" data-start=\"51\" data-end=\"64\" style=\"top: 1200px; width: 639px;\"> \n \n \n \n \n \n \n \n \n \n \n \n \n \n</div></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_ref_huffman_coding.php"
      }
    },
    {
      "title": "DSA The Traveling Salesman Problem",
      "code": [
        {
          "text": "from itertools import permutations def calculate_distance(route, distances): total_distance = 0 for i in range(len(route) - 1): total_distance += distances[route[i]][route[i + 1]] total_distance += distances[route[-1]][route[0]] return total_distance def brute_force_tsp(distances): n = len(distances) cities = list(range(1, n)) shortest_route = None min_distance = float('inf') for perm in permutations(cities): current_route = [0] + list(perm) current_distance = calculate_distance(current_route, distances) if current_distance < min_distance: min_distance = current_distance shortest_route = current_route shortest_route.append(0) return shortest_route, min_distance distances = [ [0, 2, 2, 5, 9, 3], [2, 0, 4, 6, 7, 8], [2, 4, 0, 8, 6, 3], [5, 6, 8, 0, 4, 9], [9, 7, 6, 4, 0, 10], [3, 8, 3, 9, 10, 0] ] route, total_distance = brute_force_tsp(distances) print(\"Route:\", route) print(\"Total distance:\", total_distance)",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-from\">from</span> itertools <span class=\"token keyword keyword-import\">import</span> permutations\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">calculate_distance</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">,</span> distances<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    total_distance <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        total_distance <span class=\"token operator\">+=</span> distances<span class=\"token punctuation\">[</span>route<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>route<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    total_distance <span class=\"token operator\">+=</span> distances<span class=\"token punctuation\">[</span>route<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>route<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword keyword-return\">return</span> total_distance\n\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">brute_force_tsp</span><span class=\"token punctuation\">(</span>distances<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>distances<span class=\"token punctuation\">)</span>\n    cities <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    shortest_route <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    min_distance <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword keyword-for\">for</span> perm <span class=\"token keyword keyword-in\">in</span> permutations<span class=\"token punctuation\">(</span>cities<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        current_route <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>perm<span class=\"token punctuation\">)</span>\n        current_distance <span class=\"token operator\">=</span> calculate_distance<span class=\"token punctuation\">(</span>current_route<span class=\"token punctuation\">,</span> distances<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword keyword-if\">if</span> current_distance <span class=\"token operator\">&lt;</span> min_distance<span class=\"token punctuation\">:</span>\n            min_distance <span class=\"token operator\">=</span> current_distance\n            shortest_route <span class=\"token operator\">=</span> current_route\n    \n    shortest_route<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-return\">return</span> shortest_route<span class=\"token punctuation\">,</span> min_distance\n\ndistances <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span>\n\nroute<span class=\"token punctuation\">,</span> total_distance <span class=\"token operator\">=</span> brute_force_tsp<span class=\"token punctuation\">(</span>distances<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Route:\"</span><span class=\"token punctuation\">,</span> route<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total distance:\"</span><span class=\"token punctuation\">,</span> total_distance<span class=\"token punctuation\">)</span></code>"
        },
        {
          "text": "def nearest_neighbor_tsp(distances): n = len(distances) visited = [False] * n route = [0] visited[0] = True total_distance = 0 for _ in range(1, n): last = route[-1] nearest = None min_dist = float('inf') for i in range(n): if not visited[i] and distances[last][i] < min_dist: min_dist = distances[last][i] nearest = i route.append(nearest) visited[nearest] = True total_distance += min_dist total_distance += distances[route[-1]][0] route.append(0) return route, total_distance distances = [ [0, 2, 2, 5, 9, 3], [2, 0, 4, 6, 7, 8], [2, 4, 0, 8, 6, 3], [5, 6, 8, 0, 4, 9], [9, 7, 6, 4, 0, 10], [3, 8, 3, 9, 10, 0] ] route, total_distance = nearest_neighbor_tsp(distances) print(\"Route:\", route) print(\"Total distance:\", total_distance)",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">nearest_neighbor_tsp</span><span class=\"token punctuation\">(</span>distances<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>distances<span class=\"token punctuation\">)</span>\n    visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> n\n    route <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    visited<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    total_distance <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        last <span class=\"token operator\">=</span> route<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        nearest <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        min_dist <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token keyword keyword-not\">not</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-and\">and</span> distances<span class=\"token punctuation\">[</span>last<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> min_dist<span class=\"token punctuation\">:</span>\n                min_dist <span class=\"token operator\">=</span> distances<span class=\"token punctuation\">[</span>last<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n                nearest <span class=\"token operator\">=</span> i\n        route<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>nearest<span class=\"token punctuation\">)</span>\n        visited<span class=\"token punctuation\">[</span>nearest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        total_distance <span class=\"token operator\">+=</span> min_dist\n\n    total_distance <span class=\"token operator\">+=</span> distances<span class=\"token punctuation\">[</span>route<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    route<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-return\">return</span> route<span class=\"token punctuation\">,</span> total_distance\n\ndistances <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span>\n\nroute<span class=\"token punctuation\">,</span> total_distance <span class=\"token operator\">=</span> nearest_neighbor_tsp<span class=\"token punctuation\">(</span>distances<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Route:\"</span><span class=\"token punctuation\">,</span> route<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total distance:\"</span><span class=\"token punctuation\">,</span> total_distance<span class=\"token punctuation\">)</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_ref_traveling_salesman.php"
      }
    },
    {
      "title": "DSA The 0/1 Knapsack Problem",
      "code": [
        {
          "text": "def knapsack_brute_force(capacity, n): print(f\"knapsack_brute_force({capacity},{n})\") if n == 0 or capacity == 0: return 0 elif weights[n-1] > capacity: return knapsack_brute_force(capacity, n-1) else: include_item = values[n-1] + knapsack_brute_force(capacity-weights[n-1], n-1) exclude_item = knapsack_brute_force(capacity, n-1) return max(include_item, exclude_item) values = [300, 200, 400, 500] weights = [2, 1, 5, 3] capacity = 10 n = len(values) print(\"\\nMaximum value in Knapsack =\", knapsack_brute_force(capacity, n))",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">knapsack_brute_force</span><span class=\"token punctuation\">(</span>capacity<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"knapsack_brute_force(</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>capacity<span class=\"token punctuation\">}</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">}</span></span><span class=\"token string\">)\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-if\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword keyword-or\">or</span> capacity <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword keyword-elif\">elif</span> weights<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> capacity<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> knapsack_brute_force<span class=\"token punctuation\">(</span>capacity<span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n        include_item <span class=\"token operator\">=</span> values<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> knapsack_brute_force<span class=\"token punctuation\">(</span>capacity<span class=\"token operator\">-</span>weights<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        exclude_item <span class=\"token operator\">=</span> knapsack_brute_force<span class=\"token punctuation\">(</span>capacity<span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>include_item<span class=\"token punctuation\">,</span> exclude_item<span class=\"token punctuation\">)</span>\n\nvalues <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">]</span>\nweights <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\ncapacity <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nn <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nMaximum value in Knapsack =\"</span><span class=\"token punctuation\">,</span> knapsack_brute_force<span class=\"token punctuation\">(</span>capacity<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"2-4\" class=\" line-highlight\" style=\"top: 26px; height: 72px; width: 825px;\"/><div aria-hidden=\"true\" data-range=\"6-7\" class=\" line-highlight\" style=\"top: 122px; height: 48px; width: 825px;\"/><div aria-hidden=\"true\" data-range=\"10-12\" class=\" line-highlight\" style=\"top: 218px; height: 72px; width: 825px;\"/>"
        },
        {
          "text": "def knapsack_memoization(capacity, n): print(f\"knapsack_memoization({n}, {capacity})\") if memo[n][capacity] is not None: print(f\"Using memo for ({n}, {capacity})\") return memo[n][capacity] if n == 0 or capacity == 0: result = 0 elif weights[n-1] > capacity: result = knapsack_memoization(capacity, n-1) else: include_item = values[n-1] + knapsack_memoization(capacity-weights[n-1], n-1) exclude_item = knapsack_memoization(capacity, n-1) result = max(include_item, exclude_item) memo[n][capacity] = result return result values = [300, 200, 400, 500] weights = [2, 1, 5, 3] capacity = 10 n = len(values) memo = [[None]*(capacity + 1) for _ in range(n + 1)] print(\"\\nMaximum value in Knapsack =\", knapsack_memoization(capacity, n))",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">knapsack_memoization</span><span class=\"token punctuation\">(</span>capacity<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"knapsack_memoization(</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>capacity<span class=\"token punctuation\">}</span></span><span class=\"token string\">)\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-if\">if</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-is\">is</span> <span class=\"token keyword keyword-not\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Using memo for (</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>capacity<span class=\"token punctuation\">}</span></span><span class=\"token string\">)\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-return\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword keyword-if\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword keyword-or\">or</span> capacity <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword keyword-elif\">elif</span> weights<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> capacity<span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> knapsack_memoization<span class=\"token punctuation\">(</span>capacity<span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n        include_item <span class=\"token operator\">=</span> values<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> knapsack_memoization<span class=\"token punctuation\">(</span>capacity<span class=\"token operator\">-</span>weights<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        exclude_item <span class=\"token operator\">=</span> knapsack_memoization<span class=\"token punctuation\">(</span>capacity<span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        result <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>include_item<span class=\"token punctuation\">,</span> exclude_item<span class=\"token punctuation\">)</span>\n\n    memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result\n    <span class=\"token keyword keyword-return\">return</span> result\n\nvalues <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">]</span>\nweights <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\ncapacity <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nn <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span>\n\nmemo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>capacity <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nMaximum value in Knapsack =\"</span><span class=\"token punctuation\">,</span> knapsack_memoization<span class=\"token punctuation\">(</span>capacity<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"3-5\" class=\" line-highlight\" style=\"top: 50px; height: 72px; width: 825px;\"/><div aria-hidden=\"true\" data-range=\"16\" class=\" line-highlight\" style=\"top: 362px; height: 24px; width: 825px;\"/><div aria-hidden=\"true\" data-range=\"24\" class=\" line-highlight\" style=\"top: 554px; height: 24px; width: 825px;\"/>"
        },
        {
          "text": "def knapsack_tabulation(): n = len(values) tab = [[0]*(capacity + 1) for y in range(n + 1)] for i in range(1, n+1): for w in range(1, capacity+1): if weights[i-1] <= w: include_item = values[i-1] + tab[i-1][w-weights[i-1]] exclude_item = tab[i-1][w] tab[i][w] = max(include_item, exclude_item) else: tab[i][w] = tab[i-1][w] for row in tab: print(row) return tab[n][capacity] values = [300, 200, 400, 500] weights = [2, 1, 5, 3] capacity = 10 print(\"\\nMaximum value in Knapsack =\", knapsack_tabulation())",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">knapsack_tabulation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span>\n    tab <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>capacity <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-for\">for</span> y <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-for\">for</span> w <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> capacity<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> weights<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> w<span class=\"token punctuation\">:</span>\n                include_item <span class=\"token operator\">=</span> values<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> tab<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token operator\">-</span>weights<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n                exclude_item <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span>\n                tab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>include_item<span class=\"token punctuation\">,</span> exclude_item<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n                tab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword keyword-for\">for</span> row <span class=\"token keyword keyword-in\">in</span> tab<span class=\"token punctuation\">:</span>\n    \t  <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-return\">return</span> tab<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span>\n\nvalues <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">]</span>\nweights <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\ncapacity <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nMaximum value in Knapsack =\"</span><span class=\"token punctuation\">,</span> knapsack_tabulation<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"7-10\" class=\" line-highlight\" style=\"top: 146px; height: 96px; width: 684px;\"/><div aria-hidden=\"true\" data-range=\"12\" class=\" line-highlight\" style=\"top: 266px; height: 24px; width: 684px;\"/>"
        },
        {
          "text": "def knapsack_tabulation(): n = len(values) tab = [[0] * (capacity + 1) for _ in range(n + 1)] for i in range(1, n + 1): for w in range(1, capacity + 1): if weights[i-1] <= w: include_item = values[i-1] + tab[i-1][w - weights[i-1]] exclude_item = tab[i-1][w] tab[i][w] = max(include_item, exclude_item) else: tab[i][w] = tab[i-1][w] for row in tab: print(row) items_included = [] w = capacity for i in range(n, 0, -1): if tab[i][w] != tab[i-1][w]: items_included.append(i-1) w -= weights[i-1] print(\"\\nItems included:\", items_included) return tab[n][capacity] values = [300, 200, 400, 500] weights = [2, 1, 5, 3] capacity = 10 print(\"\\nMaximum value in Knapsack =\", knapsack_tabulation())",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">knapsack_tabulation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span>\n    tab <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>capacity <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-for\">for</span> _ <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-for\">for</span> w <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> capacity <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword keyword-if\">if</span> weights<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> w<span class=\"token punctuation\">:</span>\n                include_item <span class=\"token operator\">=</span> values<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> tab<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w <span class=\"token operator\">-</span> weights<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n                exclude_item <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span>\n                tab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>include_item<span class=\"token punctuation\">,</span> exclude_item<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n                tab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword keyword-for\">for</span> row <span class=\"token keyword keyword-in\">in</span> tab<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span>\n\n    items_included <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    w <span class=\"token operator\">=</span> capacity\n    <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-if\">if</span> tab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> tab<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            items_included<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            w <span class=\"token operator\">-=</span> weights<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nItems included:\"</span><span class=\"token punctuation\">,</span> items_included<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword keyword-return\">return</span> tab<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span>\n\nvalues <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">]</span>\nweights <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\ncapacity <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nMaximum value in Knapsack =\"</span><span class=\"token punctuation\">,</span> knapsack_tabulation<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/><span/></span></code><div aria-hidden=\"true\" data-range=\"17-24\" class=\" line-highlight\" style=\"top: 386px; height: 192px; width: 701px;\"/>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_ref_knapsack.php"
      }
    },
    {
      "title": "Memoization",
      "code": [
        {
          "text": "def F(n): print('Computing F('+str(n)+')') if n <= 1: return n else: return F(n - 1) + F(n - 2) print('F(6) = ',F(6))",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">F</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Computing F('</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">')'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-if\">if</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> n\n    <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> F<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> F<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'F(6) = '</span><span class=\"token punctuation\">,</span>F<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code>"
        },
        {
          "text": "def F(n): if memo[n] != None: # Already computed return memo[n] else: # Computation needed print('Computing F('+str(n)+')') if n <= 1: memo[n] = n else: memo[n] = F(n - 1) + F(n - 2) return memo[n] memo = [None]*7 print('F(6) = ',F(6)) print('memo = ',memo)",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">F</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># Already computed</span>\n        <span class=\"token keyword keyword-return\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># Computation needed</span>\n        <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Computing F('</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">')'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-if\">if</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> n\n        <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n            memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> F<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> F<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-return\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> \n\nmemo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">7</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'F(6) = '</span><span class=\"token punctuation\">,</span>F<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'memo = '</span><span class=\"token punctuation\">,</span>memo<span class=\"token punctuation\">)</span></code>"
        },
        {
          "text": "computation_count = 0 def F(n): global computation_count computation_count += 1 if n <= 1: return n else: return F(n - 1) + F(n - 2) computation_count_mem = 0 def F_mem(n): if memo[n] != None: # Already computed return memo[n] else: # Computation needed global computation_count_mem computation_count_mem += 1 if n <= 1: memo[n] = n else: memo[n] = F_mem(n - 1) + F_mem(n - 2) return memo[n] print('F(30) = ',F(30)) print(f'Number of computations: {computation_count}') print('\\nUsing memoization:') memo = [None]*31 print('F(30) = ',F_mem(30)) print(f'Number of computations with memoiztion: {computation_count_mem}')",
          "html": "<code class=\"language-python\">computation_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">F</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-global\">global</span> computation_count\n    computation_count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword keyword-if\">if</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> n\n    <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword keyword-return\">return</span> F<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> F<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        \ncomputation_count_mem <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">F_mem</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># Already computed</span>\n        <span class=\"token keyword keyword-return\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># Computation needed</span>\n        <span class=\"token keyword keyword-global\">global</span> computation_count_mem\n        computation_count_mem <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword keyword-if\">if</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> n\n        <span class=\"token keyword keyword-else\">else</span><span class=\"token punctuation\">:</span>\n            memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> F_mem<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> F_mem<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword keyword-return\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> \n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'F(30) = '</span><span class=\"token punctuation\">,</span>F<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Number of computations: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>computation_count<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\nUsing memoization:'</span><span class=\"token punctuation\">)</span>\nmemo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">31</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'F(30) = '</span><span class=\"token punctuation\">,</span>F_mem<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Number of computations with memoiztion: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>computation_count_mem<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></code>"
        },
        {
          "text": "class TreeNode: def __init__(self, data): self.data = data self.left = None self.right = None self.height = 1",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">1</span><div aria-hidden=\"true\" data-range=\"6\" class=\" line-highlight\" data-start=\"6\" style=\"top: 120px; width: 639px;\"> \n</div></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_ref_memoization.php"
      }
    },
    {
      "title": "Tabulation",
      "code": [
        {
          "text": "def fibonacci_tabulation(n): if n == 0: return 0 elif n == 1: return 1 F = [0] * (n + 1) F[0] = 0 F[1] = 1 for i in range(2, n + 1): F[i] = F[i - 1] + F[i - 2] print(F) return F[n] n = 10 result = fibonacci_tabulation(n) print(f\"\\nThe {n}th Fibonacci number is {result}\")",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">fibonacci_tabulation</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token keyword keyword-return\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword keyword-elif\">elif</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token keyword keyword-return\">return</span> <span class=\"token number\">1</span>\n\n    F <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    F<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span> \n    F<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        F<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> F<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> F<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword keyword-return\">return</span> F<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>\n  \nn <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nresult <span class=\"token operator\">=</span> fibonacci_tabulation<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"\\nThe </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">}</span></span><span class=\"token string\">th Fibonacci number is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_ref_tabulation.php"
      }
    },
    {
      "title": "Dynamic Programming",
      "code": [
        {
          "text": "def nth_fibo(n): if n==0: return 0 if n==1: return 1 F = [None] * (n + 1) F[0] = 0 F[1] = 1 for i in range(2, n + 1): F[i] = F[i - 1] + F[i - 2] return F[n] n = 6 result = nth_fibo(n) print(f\"The {n}th Fibonacci number is {result}\")",
          "html": "<code class=\"language-python\"><span class=\"token keyword keyword-def\">def</span> <span class=\"token function\">nth_fibo</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> n<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token keyword keyword-return\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword keyword-if\">if</span> n<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token keyword keyword-return\">return</span> <span class=\"token number\">1</span>\n\n    F <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    F<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    F<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        F<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> F<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> F<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword keyword-return\">return</span> F<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>\n\nn <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\nresult <span class=\"token operator\">=</span> nth_fibo<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"The </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">}</span></span><span class=\"token string\">th Fibonacci number is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_ref_dynamic_programming.php"
      }
    },
    {
      "title": "DSA Syllabus",
      "code": [
        {
          "text": "my_array = [7, 12, 9, 4, 11] minVal = my_array[0] for i in my_array: if i < minVal: minVal = i print('Lowest value:',minVal)",
          "html": "<code class=\"language-python\">my_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span>\nminVal <span class=\"token operator\">=</span> my_array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword keyword-for\">for</span> i <span class=\"token keyword keyword-in\">in</span> my_array<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword keyword-if\">if</span> i <span class=\"token operator\">&lt;</span> minVal<span class=\"token punctuation\">:</span>\n        minVal <span class=\"token operator\">=</span> i\n\n<span class=\"token keyword keyword-print\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Lowest value:'</span><span class=\"token punctuation\">,</span>minVal<span class=\"token punctuation\">)</span>\n</code>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/dsa/dsa_syllabus.php"
      }
    }
  ]
}