{
  "language": "TYPESCRIPT",
  "tutorials": [
    {
      "title": "TypeScript Tutorial",
      "code": [
        {
          "text": "console.log('Hello World!');",
          "html": "<span class=\"javacolor\" style=\"color:black\">\nconsole.<span class=\"javapropertycolor\" style=\"color:black\">log</span>(<span class=\"javastringcolor\" style=\"color:green\">'Hello World!'</span>);<br/><span class=\"javanumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/index.php"
      }
    },
    {
      "title": "TypeScript Getting Started",
      "code": [
        {
          "text": "npm install typescript --save-dev",
          "html": "<span class=\"jscolor\" style=\"color:black\">\nnpm install typescript --save-dev\n </span>"
        },
        {
          "text": "added 1 package, and audited 2 packages in 2s\nfound 0 vulnerabilities",
          "html": "added 1 package, and audited 2 packages in 2s<br/>\nfound 0 vulnerabilities"
        },
        {
          "text": "npx tsc",
          "html": "<span class=\"jscolor\" style=\"color:black\">\nnpx tsc\n </span>"
        },
        {
          "text": "Version 4.5.5\ntsc: The TypeScript Compiler - Version 4.5.5",
          "html": "Version 4.5.5<br/>\ntsc: The TypeScript Compiler - Version 4.5.5"
        },
        {
          "text": "npx tsc --init",
          "html": "<span class=\"jscolor\" style=\"color:black\">\nnpx tsc --init\n </span>"
        },
        {
          "text": "Created a new tsconfig.json with:\nTS\ntarget: es2016\nmodule: commonjs\nstrict: true\nesModuleInterop: true\nskipLibCheck: true\nforceConsistentCasingInFileNames: true",
          "html": "Created a new tsconfig.json with:<br/>\nTS<br/>\n  target: es2016<br/>\n  module: commonjs<br/>\n  strict: true<br/>\n  esModuleInterop: true<br/>\n  skipLibCheck: true<br/>\n  forceConsistentCasingInFileNames: true"
        },
        {
          "text": "{\n\"include\": [\"src\"],\n\"compilerOptions\": {\n\"outDir\": \"./build\"\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"include\"</span>: [<span class=\"jsstringcolor\" style=\"color:green\">\"src\"</span>],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"compilerOptions\"</span>: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"outDir\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"./build\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "function greet(name: string): string {\nreturn `Hello, ${name}!`;\n}\n\nconst message: string = greet(\"World\");\nconsole.log(message);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> greet(name: string): string {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsstringtempcolor\" style=\"color:#f50\">`Hello, ${name}!`</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> message: string = greet(<span class=\"jsstringcolor\" style=\"color:green\">\"World\"</span>);<br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(message);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "npx tsc hello.ts",
          "html": "<span class=\"jscolor\" style=\"color:black\">\nnpx tsc hello.<span class=\"jspropertycolor\" style=\"color:black\">ts\n</span> </span>"
        },
        {
          "text": "function greet(name) {\nreturn \"Hello, \".concat(name, \"!\");\n}\n\nconst message = greet(\"World\");\nconsole.log(message);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> greet(name) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsstringcolor\" style=\"color:green\">\"Hello, \"</span>.<span class=\"jspropertycolor\" style=\"color:black\">concat</span>(name, <span class=\"jsstringcolor\" style=\"color:green\">\"!\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> message = greet(<span class=\"jsstringcolor\" style=\"color:green\">\"World\"</span>);<br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(message);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "node hello.js",
          "html": "<span class=\"jscolor\" style=\"color:black\">\nnode hello.<span class=\"jspropertycolor\" style=\"color:black\">js\n</span> </span>"
        },
        {
          "text": "Hello, World!",
          "html": "Hello, World!"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_getstarted.php"
      }
    },
    {
      "title": "TypeScript Simple Types",
      "code": [
        {
          "text": "let isActive: boolean = true;\nlet hasPermission = false; // TypeScript infers 'boolean' type",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> isActive: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> hasPermission = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">false</span>; <span class=\"commentcolor\" style=\"color:slategray\">// TypeScript infers 'boolean' type\n </span></span>"
        },
        {
          "text": "let decimal: number = 6;\nlet hex: number = 0xf00d;       // Hexadecimal\nlet binary: number = 0b1010;     // Binary\nlet octal: number = 0o744;      // Octal\nlet float: number = 3.14;      // Floating point",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> decimal: number = <span class=\"jsnumbercolor\" style=\"color:#905\">6</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> hex: number = <span class=\"jsnumbercolor\" style=\"color:#905\">0xf00d</span>;       <span class=\"commentcolor\" style=\"color:slategray\">// Hexadecimal<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> binary: number = <span class=\"jsnumbercolor\" style=\"color:#905\">0b1010</span>;     <span class=\"commentcolor\" style=\"color:slategray\">// Binary<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> octal: number = <span class=\"jsnumbercolor\" style=\"color:#905\">0o744</span>;      <span class=\"commentcolor\" style=\"color:slategray\">// Octal<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">float</span>: number = <span class=\"jsnumbercolor\" style=\"color:#905\">3.14</span>;      <span class=\"commentcolor\" style=\"color:slategray\">// Floating point\n </span></span>"
        },
        {
          "text": "let color: string = \"blue\";\nlet fullName: string = 'John Doe';\nlet age: number = 30;\nlet sentence: string = `Hello, my name is ${fullName} and I'll be ${age + 1} next year.`;",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> color: string = <span class=\"jsstringcolor\" style=\"color:green\">\"blue\"</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> fullName: string = <span class=\"jsstringcolor\" style=\"color:green\">'John Doe'</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> age: number = <span class=\"jsnumbercolor\" style=\"color:#905\">30</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> sentence: string = <span class=\"jsstringtempcolor\" style=\"color:#f50\">`Hello, my name is ${fullName} and I'll be ${age + 1} next year.`</span>;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const bigNumber: bigint = 9007199254740991n;\nconst hugeNumber = BigInt(9007199254740991); // Alternative syntax",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> bigNumber: bigint = 9007199254740991n;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> hugeNumber = BigInt(<span class=\"jsnumbercolor\" style=\"color:#905\">9007199254740991</span>); <span class=\"commentcolor\" style=\"color:slategray\">// Alternative syntax\n </span></span>"
        },
        {
          "text": "const uniqueKey: symbol = Symbol('description');\nconst obj = {\n[uniqueKey]: 'This is a unique property'\n};\nconsole.log(obj[uniqueKey]); // \"This is a unique property\"",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> uniqueKey: symbol = Symbol(<span class=\"jsstringcolor\" style=\"color:green\">'description'</span>);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> obj = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  [uniqueKey]: <span class=\"jsstringcolor\" style=\"color:green\">'This is a unique property'</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(obj[uniqueKey]); <span class=\"commentcolor\" style=\"color:slategray\">// \"This is a unique property\"\n </span></span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_simple_types.php"
      }
    },
    {
      "title": "TypeScript Explicit Types and Inference",
      "code": [
        {
          "text": "// String\ngreeting: string = \"Hello, TypeScript!\";\n\n// Number\nuserCount: number = 42;\n\n// Boolean\nisLoading: boolean = true;\n\n// Array of numbers\nscores: number[] = [100, 95, 98];",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// String<br/></span>\ngreeting: string = <span class=\"jsstringcolor\" style=\"color:green\">\"Hello, TypeScript!\"</span>;<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Number<br/></span>\nuserCount: number = <span class=\"jsnumbercolor\" style=\"color:#905\">42</span>;<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Boolean<br/></span>\nisLoading: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>;<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Array of numbers<br/></span>\nscores: number[] = [<span class=\"jsnumbercolor\" style=\"color:#905\">100</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">95</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">98</span>];<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// Function with explicit parameter and return types\nfunction greet(name: string): string {\nreturn `Hello, ${name}!`;\n}\n\n// TypeScript will ensure you pass the correct argument type\ngreet(\"Alice\"); // OK\ngreet(42);     // Error: Argument of type '42' is not assignable to parameter of type 'string'",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Function with explicit parameter and return types<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> greet(name: string): string {<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsstringtempcolor\" style=\"color:#f50\">`Hello, ${name}!`</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// TypeScript will ensure you pass the correct argument type<br/></span>\ngreet(<span class=\"jsstringcolor\" style=\"color:green\">\"Alice\"</span>); <span class=\"commentcolor\" style=\"color:slategray\">// OK<br/></span>\ngreet(<span class=\"jsnumbercolor\" style=\"color:#905\">42</span>);     <span class=\"commentcolor\" style=\"color:slategray\">// Error: Argument of type '42' is not assignable to parameter of type 'string'\n </span></span>"
        },
        {
          "text": "// TypeScript infers 'string'\nlet username = \"alice\";\n\n// TypeScript infers 'number'\nlet score = 100;\n\n// TypeScript infers 'boolean[]'\nlet flags = [true, false, true];\n\n// TypeScript infers return type as 'number'\nfunction add(a: number, b: number) {\nreturn a + b;\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// TypeScript infers 'string'<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> username = <span class=\"jsstringcolor\" style=\"color:green\">\"alice\"</span>;<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// TypeScript infers 'number'<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> score = <span class=\"jsnumbercolor\" style=\"color:#905\">100</span>;<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// TypeScript infers 'boolean[]'<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> flags = [<span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">false</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>];<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// TypeScript infers return type as 'number'<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> add(a: number, b: number) {<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> a + b;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// TypeScript infers the shape of the object\nconst user = {\nname: \"Alice\",\nage: 30,\nisAdmin: true\n};\n\n// TypeScript knows these properties exist\nconsole.log(user.name);  // OK\nconsole.log(user.email); // Error: Property 'email' does not exist",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// TypeScript infers the shape of the object<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> user = {<br/>\nname: <span class=\"jsstringcolor\" style=\"color:green\">\"Alice\"</span>,<br/>\nage: <span class=\"jsnumbercolor\" style=\"color:#905\">30</span>,<br/>\nisAdmin: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// TypeScript knows these properties exist<br/></span>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(user.<span class=\"jspropertycolor\" style=\"color:black\">name</span>);  <span class=\"commentcolor\" style=\"color:slategray\">// OK<br/></span>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(user.<span class=\"jspropertycolor\" style=\"color:black\">email</span>); <span class=\"commentcolor\" style=\"color:slategray\">// Error: Property 'email' does not exist\n </span></span>"
        },
        {
          "text": "let username: string = \"alice\";\nusername = 42; // Error: Type 'number' is not assignable to type 'string'",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> username: string = <span class=\"jsstringcolor\" style=\"color:green\">\"alice\"</span>;<br/>\nusername = <span class=\"jsnumbercolor\" style=\"color:#905\">42</span>; <span class=\"commentcolor\" style=\"color:slategray\">// Error: Type 'number' is not assignable to type 'string'\n </span></span>"
        },
        {
          "text": "let score = 100;  // TypeScript infers 'number'\nscore = \"high\";  // Error: Type 'string' is not assignable to type 'number'",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> score = <span class=\"jsnumbercolor\" style=\"color:#905\">100</span>;  <span class=\"commentcolor\" style=\"color:slategray\">// TypeScript infers 'number'<br/></span>\nscore = <span class=\"jsstringcolor\" style=\"color:green\">\"high\"</span>;  <span class=\"commentcolor\" style=\"color:slategray\">// Error: Type 'string' is not assignable to type 'number'\n </span></span>"
        },
        {
          "text": "// This is valid JavaScript but can lead to bugs\nfunction add(a, b) {\nreturn a + b;\n}\n\nconsole.log(add(\"5\", 3)); // Returns \"53\" (string concatenation)",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// This is valid JavaScript but can lead to bugs<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> add(a, b) {<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> a + b;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(add(<span class=\"jsstringcolor\" style=\"color:green\">\"5\"</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">3</span>)); <span class=\"commentcolor\" style=\"color:slategray\">// Returns \"53\" (string concatenation)\n </span></span>"
        },
        {
          "text": "function add(a: number, b: number): number {\nreturn a + b;\n}\n\nconsole.log(add(\"5\", 3)); // Error: Argument of type 'string' is not assignable to parameter of type 'number'",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> add(a: number, b: number): number {<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> a + b;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(add(<span class=\"jsstringcolor\" style=\"color:green\">\"5\"</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">3</span>)); <span class=\"commentcolor\" style=\"color:slategray\">// Error: Argument of type 'string' is not assignable to parameter of type 'number'\n </span></span>"
        },
        {
          "text": "// 1. JSON.parse returns 'any' because the structure isn't known at compile time\nconst data = JSON.parse('{ \"name\": \"Alice\", \"age\": 30 }');\n\n// 2. Variables declared without initialization\nlet something;  // Type is 'any'\nsomething = 'hello';\nsomething = 42;  // No error",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// 1. JSON.parse returns 'any' because the structure isn't known at compile time<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> data = JSON.<span class=\"jspropertycolor\" style=\"color:black\">parse</span>(<span class=\"jsstringcolor\" style=\"color:green\">'{ \"name\": \"Alice\", \"age\": 30 }'</span>);<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// 2. Variables declared without initialization<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> something;  <span class=\"commentcolor\" style=\"color:slategray\">// Type is 'any'<br/></span>\nsomething = <span class=\"jsstringcolor\" style=\"color:green\">'hello'</span>;<br/>\nsomething = <span class=\"jsnumbercolor\" style=\"color:#905\">42</span>;  <span class=\"commentcolor\" style=\"color:slategray\">// No error\n </span></span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_explicit_inference.php"
      }
    },
    {
      "title": "TypeScript Special Types",
      "code": [
        {
          "text": "let u = true;\nu = \"string\"; // Error: Type 'string' is not assignable to type 'boolean'.\nMath.round(u); // Error: Argument of type 'boolean' is not assignable to parameter of type 'number'.",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> u = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>;<br/>\nu = <span class=\"jsstringcolor\" style=\"color:green\">\"string\"</span>; <span class=\"commentcolor\" style=\"color:slategray\">// Error: Type 'string' is not assignable to type 'boolean'.<br/></span>\nMath.<span class=\"jspropertycolor\" style=\"color:black\">round</span>(u); <span class=\"commentcolor\" style=\"color:slategray\">// Error: Argument of type 'boolean' is not assignable to parameter of type 'number'.\n </span></span>"
        },
        {
          "text": "let v: any = true;\nv = \"string\"; // no error as it can be \"any\" type\nMath.round(v); // no error as it can be \"any\" type",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> v: any = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>;<br/>\nv = <span class=\"jsstringcolor\" style=\"color:green\">\"string\"</span>; <span class=\"commentcolor\" style=\"color:slategray\">// no error as it can be \"any\" type<br/></span>\nMath.<span class=\"jspropertycolor\" style=\"color:black\">round</span>(v); <span class=\"commentcolor\" style=\"color:slategray\">// no error as it can be \"any\" type\n </span></span>"
        },
        {
          "text": "let w: unknown = 1;\nw = \"string\"; // no error\nw = {\nrunANonExistentMethod: () => {\nconsole.log(\"I think therefore I am\");\n}\n} as { runANonExistentMethod: () => void}\n// How can we avoid the error for the code commented out below when we don't know the type?\n// w.runANonExistentMethod(); // Error: Object is of type 'unknown'.\nif(typeof w === 'object' && w !== null) {\n(w as { runANonExistentMethod: Function }).runANonExistentMethod();\n}\n// Although we have to cast multiple times we can do a check in the if to secure our type and have a safer casting",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> w: unknown = <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>;<br/>\nw = <span class=\"jsstringcolor\" style=\"color:green\">\"string\"</span>; <span class=\"commentcolor\" style=\"color:slategray\">// no error<br/></span>\nw = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  runANonExistentMethod: () =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"I think therefore I am\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>} as { runANonExistentMethod: () =&gt; <span class=\"jskeywordcolor\" style=\"color:#005cc5\">void</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// How can we avoid the error for the code commented out below when we don't know the type?<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// w.runANonExistentMethod(); // Error: Object is of type 'unknown'.<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> w === <span class=\"jsstringcolor\" style=\"color:green\">'object'</span> &amp;&amp; w !== <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  (w as { runANonExistentMethod: Function }).<span class=\"jspropertycolor\" style=\"color:black\">runANonExistentMethod</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Although we have to cast multiple times we can do a check in the if to secure our type and have a safer casting\n </span></span>"
        },
        {
          "text": "function processValue(value: unknown) {\nif (typeof value === 'string') {\n// value is now treated as string\nconsole.log(value.toUpperCase());\n} else if (Array.isArray(value)) {\n// value is now treated as any[]\nconsole.log(value.length);\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> processValue(value: unknown) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> value === <span class=\"jsstringcolor\" style=\"color:green\">'string'</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"commentcolor\" style=\"color:slategray\">// value is now treated as string<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(value.<span class=\"jspropertycolor\" style=\"color:black\">toUpperCase</span>());<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (Array.<span class=\"jspropertycolor\" style=\"color:black\">isArray</span>(value)) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"commentcolor\" style=\"color:slategray\">// value is now treated as any[]<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(value.<span class=\"jspropertycolor\" style=\"color:black\">length</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "function throwError(message: string): never {\nthrow new Error(message);\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> throwError(message: string): never {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Error(message);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "type Shape = Circle | Square | Triangle;\n\nfunction getArea(shape: Shape): number {\nswitch (shape.kind) {\ncase 'circle':\nreturn Math.PI * shape.radius ** 2;\ncase 'square':\nreturn shape.sideLength ** 2;\ndefault:\n// TypeScript knows this should never happen\nconst _exhaustiveCheck: never = shape;\nreturn _exhaustiveCheck;\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    type Shape = Circle | Square | Triangle;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> getArea(shape: Shape): number {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">switch</span> (shape.<span class=\"jspropertycolor\" style=\"color:black\">kind</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">case</span> <span class=\"jsstringcolor\" style=\"color:green\">'circle'</span>:<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> Math.<span class=\"jspropertycolor\" style=\"color:black\">PI</span> * shape.<span class=\"jspropertycolor\" style=\"color:black\">radius</span> ** <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">case</span> <span class=\"jsstringcolor\" style=\"color:green\">'square'</span>:<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> shape.<span class=\"jspropertycolor\" style=\"color:black\">sideLength</span> ** <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">default</span>:<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"commentcolor\" style=\"color:slategray\">// TypeScript knows this should never happen<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> _exhaustiveCheck: never = shape;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> _exhaustiveCheck;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "let x: never = true; // Error: Type 'boolean' is not assignable to type 'never'.",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x: never = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>; <span class=\"commentcolor\" style=\"color:slategray\">// Error: Type 'boolean' is not assignable to type 'never'.\n   </span></span>"
        },
        {
          "text": "let y: undefined = undefined;\nlet z: null = null;",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> y: undefined = undefined;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> z: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span>;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Optional parameter (implicitly `string | undefined`)\nfunction greet(name?: string) {\nreturn `Hello, ${name || 'stranger'}`;\n}\n\n// Optional property in an interface\ninterface User {\nname: string;\nage?: number; // Same as `number | undefined` }",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Optional parameter (implicitly `string | undefined`)<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> greet(name?: string) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsstringtempcolor\" style=\"color:#f50\">`Hello, ${name || 'stranger'}`</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Optional property in an interface<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> User {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      age?: number;  <span class=\"commentcolor\" style=\"color:slategray\">// Same as `number | undefined`\n    }\n   </span></span>"
        },
        {
          "text": "// Nullish coalescing (??) - only uses default if value is null or undefined\nconst value = input ?? 'default';\n\n// Optional chaining (?.) - safely access nested properties\nconst street = user?.address?.street;",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Nullish coalescing (??) - only uses default if value is null or undefined<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> value = input ?? <span class=\"jsstringcolor\" style=\"color:green\">'default'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Optional chaining (?.) - safely access nested properties<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> street = user?.<span class=\"jspropertycolor\" style=\"color:black\">address?</span>.<span class=\"jspropertycolor\" style=\"color:black\">street</span>;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "{\n\"compilerOptions\": {\n\"strictNullChecks\": true\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"compilerOptions\"</span>: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jsstringcolor\" style=\"color:green\">\"strictNullChecks\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_special_types.php"
      }
    },
    {
      "title": "TypeScript Arrays",
      "code": [
        {
          "text": "const names: string[] = [];\nnames.push(\"Dylan\"); // no error\n// names.push(3); // Error: Argument of type 'number' is not assignable to parameter of type 'string'.",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> names: string[] = [];<br/>\nnames.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"Dylan\"</span>); <span class=\"commentcolor\" style=\"color:slategray\">// no error<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// names.push(3); // Error: Argument of type 'number' is not assignable to parameter of type 'string'.\n </span></span>"
        },
        {
          "text": "const names: readonly string[] = [\"Dylan\"];\nnames.push(\"Jack\"); // Error: Property 'push' does not exist on type 'readonly string[]'.\n// try removing the readonly modifier and see if it works?",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> names: readonly string[] = [<span class=\"jsstringcolor\" style=\"color:green\">\"Dylan\"</span>];<br/>\nnames.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"Jack\"</span>); <span class=\"commentcolor\" style=\"color:slategray\">// Error: Property 'push' does not exist on type 'readonly string[]'. <br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// try removing the readonly modifier and see if it works?\n </span></span>"
        },
        {
          "text": "const numbers = [1, 2, 3]; // inferred to type number[]\nnumbers.push(4); // no error\n// comment line below out to see the successful assignment\nnumbers.push(\"2\"); // Error: Argument of type 'string' is not assignable to parameter of type 'number'.\nlet head: number = numbers[0]; // no error",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> numbers = [<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">3</span>]; <span class=\"commentcolor\" style=\"color:slategray\">// inferred to type number[]<br/></span>\nnumbers.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">4</span>); <span class=\"commentcolor\" style=\"color:slategray\">// no error<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// comment line below out to see the successful assignment <br/></span>\nnumbers.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"2\"</span>); <span class=\"commentcolor\" style=\"color:slategray\">// Error: Argument of type 'string' is not assignable to parameter of type 'number'.<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> head: number = numbers[<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>]; <span class=\"commentcolor\" style=\"color:slategray\">// no error\n </span></span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_arrays.php"
      }
    },
    {
      "title": "TypeScript Tuples",
      "code": [
        {
          "text": "// define our tuple\nlet ourTuple: [number, boolean, string];\n\n// initialize correctly\nourTuple = [5, false, 'Coding God was here'];",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// define our tuple<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> ourTuple: [number, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>, string];<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// initialize correctly<br/></span>\nourTuple = [<span class=\"jsnumbercolor\" style=\"color:#905\">5</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">false</span>, <span class=\"jsstringcolor\" style=\"color:green\">'Coding God was here'</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// define our tuple\nlet ourTuple: [number, boolean, string];\n\n// initialized incorrectly which throws an error\nourTuple = [false, 'Coding God was mistaken', 5];",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// define our tuple<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> ourTuple: [number, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>, string];<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// initialized incorrectly which throws an error<br/></span>\nourTuple = [<span class=\"jskeywordcolor\" style=\"color:#005cc5\">false</span>, <span class=\"jsstringcolor\" style=\"color:green\">'Coding God was mistaken'</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">5</span>];<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// define our tuple\nlet ourTuple: [number, boolean, string];\n// initialize correctly\nourTuple = [5, false, 'Coding God was here'];\n// We have no type safety in our tuple for indexes 3+\nourTuple.push('Something new and wrong');\nconsole.log(ourTuple);",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"commentcolor\" style=\"color:slategray\">// define our tuple<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> ourTuple: [number, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>, string];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// initialize correctly<br/></span>\nourTuple = [<span class=\"jsnumbercolor\" style=\"color:#905\">5</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">false</span>, <span class=\"jsstringcolor\" style=\"color:green\">'Coding God was here'</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// We have no type safety in our tuple for indexes 3+<br/></span>\nourTuple.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Something new and wrong'</span>);<br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(ourTuple);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// define our readonly tuple\nconst ourReadonlyTuple: readonly [number, boolean, string] = [5, true, 'The Real Coding God'];\n// throws error as it is readonly.\nourReadonlyTuple.push('Coding God took a day off');",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"commentcolor\" style=\"color:slategray\">// define our readonly tuple<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> ourReadonlyTuple: readonly [number, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>, string] = [<span class=\"jsnumbercolor\" style=\"color:#905\">5</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>, <span class=\"jsstringcolor\" style=\"color:green\">'The Real Coding God'</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// throws error as it is readonly.<br/></span>\nourReadonlyTuple.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Coding God took a day off'</span>);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const graph: [x: number, y: number] = [55.2, 41.3];",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> graph: [x: number, y: number] = [<span class=\"jsnumbercolor\" style=\"color:#905\">55.2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">41.3</span>];<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const graph: [number, number] = [55.2, 41.3];\nconst [x, y] = graph;",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> graph: [number, number] = [<span class=\"jsnumbercolor\" style=\"color:#905\">55.2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">41.3</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> [x, y] = graph;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_tuples.php"
      }
    },
    {
      "title": "TypeScript Object Types",
      "code": [
        {
          "text": "const car: { type: string, model: string, year: number } = {\ntype: \"Toyota\",\nmodel: \"Corolla\",\nyear: 2009\n};",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> car: { type: string, model: string, year: number } = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type: <span class=\"jsstringcolor\" style=\"color:green\">\"Toyota\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  model: <span class=\"jsstringcolor\" style=\"color:green\">\"Corolla\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  year: <span class=\"jsnumbercolor\" style=\"color:#905\">2009</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const car = {\ntype: \"Toyota\",\n};\ncar.type = \"Ford\"; // no error\ncar.type = 2; // Error: Type 'number' is not assignable to type 'string'.",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> car = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type: <span class=\"jsstringcolor\" style=\"color:green\">\"Toyota\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/>\ncar.<span class=\"jspropertycolor\" style=\"color:black\">type</span> = <span class=\"jsstringcolor\" style=\"color:green\">\"Ford\"</span>; <span class=\"commentcolor\" style=\"color:slategray\">// no error<br/></span>\ncar.<span class=\"jspropertycolor\" style=\"color:black\">type</span> = <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>; <span class=\"commentcolor\" style=\"color:slategray\">// Error: Type 'number' is not assignable to type 'string'.<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const car: { type: string, mileage: number } = { // Error: Property 'mileage' is missing in type '{ type: string; }' but required in type '{ type: string; mileage: number; }'.\ntype: \"Toyota\",\n};\ncar.mileage = 2000;",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> car: { type: string, mileage: number } = { <span class=\"commentcolor\" style=\"color:slategray\">// Error: Property 'mileage' is missing in type '{ type: string;\n}' but required in type '{ type: string; mileage: number; }'.<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type: <span class=\"jsstringcolor\" style=\"color:green\">\"Toyota\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/>\ncar.<span class=\"jspropertycolor\" style=\"color:black\">mileage</span> = <span class=\"jsnumbercolor\" style=\"color:#905\">2000</span>;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const car: { type: string, mileage?: number } = { // no error\ntype: \"Toyota\"\n};\ncar.mileage = 2000;",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> car: { type: string, mileage?: number } = { <span class=\"commentcolor\" style=\"color:slategray\">// no error<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type: <span class=\"jsstringcolor\" style=\"color:green\">\"Toyota\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/>\ncar.<span class=\"jspropertycolor\" style=\"color:black\">mileage</span> = <span class=\"jsnumbercolor\" style=\"color:#905\">2000</span>;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const nameAgeMap: { [index: string]: number } = {};\nnameAgeMap.Jack = 25; // no error\nnameAgeMap.Mark = \"Fifty\"; // Error: Type 'string' is not assignable to type 'number'.",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> nameAgeMap: { [index: string]: number } = {};<br/>\nnameAgeMap.<span class=\"jspropertycolor\" style=\"color:black\">Jack</span> = <span class=\"jsnumbercolor\" style=\"color:#905\">25</span>; <span class=\"commentcolor\" style=\"color:slategray\">// no error<br/></span>\nnameAgeMap.<span class=\"jspropertycolor\" style=\"color:black\">Mark</span> = <span class=\"jsstringcolor\" style=\"color:green\">\"Fifty\"</span>; <span class=\"commentcolor\" style=\"color:slategray\">// Error: Type 'string' is not assignable to type 'number'.\n </span></span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_object_types.php"
      }
    },
    {
      "title": "TypeScript Enums",
      "code": [
        {
          "text": "enum CardinalDirections {\nNorth,\nEast,\nSouth,\nWest\n}\nlet currentDirection = CardinalDirections.North;\n// logs 0\nconsole.log(currentDirection);\n// throws error as 'North' is not a valid enum\ncurrentDirection = 'North'; // Error: \"North\" is not assignable to type 'CardinalDirections'.",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">enum</span> CardinalDirections {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  North,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  East,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  South,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  West<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> currentDirection = CardinalDirections.<span class=\"jspropertycolor\" style=\"color:black\">North</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// logs 0<br/></span>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(currentDirection);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// throws error as 'North' is not a valid enum<br/></span>\ncurrentDirection = <span class=\"jsstringcolor\" style=\"color:green\">'North'</span>; <span class=\"commentcolor\" style=\"color:slategray\">// Error: \"North\" is not assignable to type 'CardinalDirections'.\n </span></span>"
        },
        {
          "text": "enum CardinalDirections {\nNorth = 1,\nEast,\nSouth,\nWest\n}\n// logs 1\nconsole.log(CardinalDirections.North);\n// logs 4\nconsole.log(CardinalDirections.West);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">enum</span> CardinalDirections {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  North = <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  East,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  South,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  West<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// logs 1<br/></span>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(CardinalDirections.<span class=\"jspropertycolor\" style=\"color:black\">North</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// logs 4<br/></span>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(CardinalDirections.<span class=\"jspropertycolor\" style=\"color:black\">West</span>);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "enum StatusCodes {\nNotFound = 404,\nSuccess = 200,\nAccepted = 202,\nBadRequest = 400\n}\n// logs 404\nconsole.log(StatusCodes.NotFound);\n// logs 200\nconsole.log(StatusCodes.Success);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">enum</span> StatusCodes {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  NotFound = <span class=\"jsnumbercolor\" style=\"color:#905\">404</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  Success = <span class=\"jsnumbercolor\" style=\"color:#905\">200</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  Accepted = <span class=\"jsnumbercolor\" style=\"color:#905\">202</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  BadRequest = <span class=\"jsnumbercolor\" style=\"color:#905\">400</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// logs 404<br/></span>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(StatusCodes.<span class=\"jspropertycolor\" style=\"color:black\">NotFound</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// logs 200<br/></span>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(StatusCodes.<span class=\"jspropertycolor\" style=\"color:black\">Success</span>);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "enum CardinalDirections {\nNorth = 'North',\nEast = \"East\",\nSouth = \"South\",\nWest = \"West\"\n};\n// logs \"North\"\nconsole.log(CardinalDirections.North);\n// logs \"West\"\nconsole.log(CardinalDirections.West);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">enum</span> CardinalDirections {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  North = <span class=\"jsstringcolor\" style=\"color:green\">'North'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  East = <span class=\"jsstringcolor\" style=\"color:green\">\"East\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  South = <span class=\"jsstringcolor\" style=\"color:green\">\"South\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  West = <span class=\"jsstringcolor\" style=\"color:green\">\"West\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// logs \"North\"<br/></span>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(CardinalDirections.<span class=\"jspropertycolor\" style=\"color:black\">North</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// logs \"West\"<br/></span>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(CardinalDirections.<span class=\"jspropertycolor\" style=\"color:black\">West</span>);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_enums.php"
      }
    },
    {
      "title": "TypeScript Type Aliases and Interfaces",
      "code": [
        {
          "text": "type CarYear = number\ntype CarType = string\ntype CarModel = string\ntype Car = {\nyear: CarYear,\ntype: CarType,\nmodel: CarModel\n}\n\nconst carYear: CarYear = 2001\nconst carType: CarType = \"Toyota\"\nconst carModel: CarModel = \"Corolla\"\nconst car: Car = {\nyear: carYear,\ntype: carType,\nmodel: carModel\n};",
          "html": "<span class=\"jscolor\" style=\"color:black\">\ntype CarYear = number<br/>\ntype CarType = string<br/>\ntype CarModel = string<br/>\ntype Car = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  year: CarYear,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type: CarType,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  model: CarModel<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> carYear: CarYear = <span class=\"jsnumbercolor\" style=\"color:#905\">2001</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> carType: CarType = <span class=\"jsstringcolor\" style=\"color:green\">\"Toyota\"</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> carModel: CarModel = <span class=\"jsstringcolor\" style=\"color:green\">\"Corolla\"</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> car: Car = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  year: carYear,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type: carType,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  model: carModel<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "type Animal = { name: string };\ntype Bear = Animal & { honey: boolean };\nconst bear: Bear = { name: \"Winnie\", honey: true };\n\ntype Status = \"success\" | \"error\";\nlet response: Status = \"success\";",
          "html": "<span class=\"jscolor\" style=\"color:black\">\ntype Animal = { name: string };<br/>\ntype Bear = Animal &amp; { honey: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span> };<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> bear: Bear = { name: <span class=\"jsstringcolor\" style=\"color:green\">\"Winnie\"</span>, honey: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span> };<br/><br/>\ntype Status = <span class=\"jsstringcolor\" style=\"color:green\">\"success\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"error\"</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> response: Status = <span class=\"jsstringcolor\" style=\"color:green\">\"success\"</span>;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "interface Rectangle {\nheight: number,\nwidth: number\n}\n\nconst rectangle: Rectangle = {\nheight: 20,\nwidth: 10\n};",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Rectangle {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  height: number,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  width: number<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> rectangle: Rectangle = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  height: <span class=\"jsnumbercolor\" style=\"color:#905\">20</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  width: <span class=\"jsnumbercolor\" style=\"color:#905\">10</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "interface Animal { name: string; } interface Animal { age: number; } const dog: Animal = { name: \"Fido\", age: 5 };",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Animal { name: string; }\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Animal { age: number; }\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> dog: Animal = { name: <span class=\"jsstringcolor\" style=\"color:green\">\"Fido\"</span>, age: <span class=\"jsnumbercolor\" style=\"color:#905\">5</span> };<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "interface Rectangle {\nheight: number,\nwidth: number\n}\n\ninterface ColoredRectangle extends Rectangle {\ncolor: string\n}\n\nconst coloredRectangle: ColoredRectangle = {\nheight: 20,\nwidth: 10,\ncolor: \"red\"\n};",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Rectangle {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  height: number,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  width: number<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> ColoredRectangle <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> Rectangle {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  color: string<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> coloredRectangle: ColoredRectangle = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  height: <span class=\"jsnumbercolor\" style=\"color:#905\">20</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  width: <span class=\"jsnumbercolor\" style=\"color:#905\">10</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  color: <span class=\"jsstringcolor\" style=\"color:green\">\"red\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_aliases_and_interfaces.php"
      }
    },
    {
      "title": "TypeScript Union Types",
      "code": [
        {
          "text": "function printStatusCode(code: string | number) {\nconsole.log(`My status code is ${code}.`)\n}\nprintStatusCode(404);\nprintStatusCode('404');",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> printStatusCode(code: string | number) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`My status code is ${code}.`</span>)<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/>\nprintStatusCode(<span class=\"jsnumbercolor\" style=\"color:#905\">404</span>);<br/>\nprintStatusCode(<span class=\"jsstringcolor\" style=\"color:green\">'404'</span>);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "function printStatusCode(code: string | number) {\nconsole.log(`My status code is ${code.toUpperCase()}.`) // error: Property 'toUpperCase' does not exist on type 'string | number'. Property 'toUpperCase' does not exist on type 'number'\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> printStatusCode(code: string | number) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`My status code is ${code.toUpperCase()}.`</span>) <span class=\"commentcolor\" style=\"color:slategray\">// error: Property 'toUpperCase' does not exist on type 'string | number'. Property 'toUpperCase' does not exist on type 'number'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_union_types.php"
      }
    },
    {
      "title": "TypeScript Functions",
      "code": [
        {
          "text": "// the `: number` here specifies that this function returns a number\nfunction getTime(): number {\nreturn new Date().getTime();\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// the `: number` here specifies that this function returns a number<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> getTime(): number {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Date().<span class=\"jspropertycolor\" style=\"color:black\">getTime</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "function printHello(): void {\nconsole.log('Hello!');\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> printHello(): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">void</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Hello!'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "function multiply(a: number, b: number) {\nreturn a * b;\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> multiply(a: number, b: number) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> a * b;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// the `?` operator here marks parameter `c` as optional\nfunction add(a: number, b: number, c?: number) {\nreturn a + b + (c || 0);\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// the `?` operator here marks parameter `c` as optional<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> add(a: number, b: number, c?: number) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> a + b + (c || <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "function pow(value: number, exponent: number = 10) {\nreturn value ** exponent;\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> pow(value: number, exponent: number = <span class=\"jsnumbercolor\" style=\"color:#905\">10</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> value ** exponent;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "function divide({ dividend, divisor }: { dividend: number, divisor: number }) {\nreturn dividend / divisor;\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> divide({ dividend, divisor }: { dividend: number, divisor: number }) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> dividend / divisor;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "function add(a: number, b: number, ...rest: number[]) {\nreturn a + b + rest.reduce((p, c) => p + c, 0);\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> add(a: number, b: number, .<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\">rest</span>: number[]) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> a + b + rest.<span class=\"jspropertycolor\" style=\"color:black\">reduce</span>((p, c) =&gt; p + c, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "type Negate = (value: number) => number;\n\n// in this function, the parameter `value` automatically gets assigned the type `number` from the type `Negate`\nconst negateFunction: Negate = (value) => value * -1;",
          "html": "<span class=\"jscolor\" style=\"color:black\">\ntype Negate = (value: number) =&gt; number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// in this function, the parameter `value` automatically gets assigned the type `number` from the type `Negate`<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> negateFunction: Negate = (value) =&gt; value * -<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_functions.php"
      }
    },
    {
      "title": "TypeScript Casting",
      "code": [
        {
          "text": "let x: unknown = 'hello';\nconsole.log((x as string).length);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x: unknown = <span class=\"jsstringcolor\" style=\"color:green\">'hello'</span>;<br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>((x as string).<span class=\"jspropertycolor\" style=\"color:black\">length</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "let x: unknown = 4;\nconsole.log((x as string).length); // prints undefined since numbers don't have a length",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x: unknown = <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>;<br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>((x as string).<span class=\"jspropertycolor\" style=\"color:black\">length</span>); <span class=\"commentcolor\" style=\"color:slategray\">// prints undefined since numbers don't have a length\n </span></span>"
        },
        {
          "text": "console.log((4 as string).length); // Error: Conversion of type 'number' to type 'string' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.",
          "html": "<span class=\"jscolor\" style=\"color:black\">\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>((<span class=\"jsnumbercolor\" style=\"color:#905\">4</span> as string).<span class=\"jspropertycolor\" style=\"color:black\">length</span>); <span class=\"commentcolor\" style=\"color:slategray\">// Error: Conversion of type 'number' to type 'string' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.\n </span></span>"
        },
        {
          "text": "let x: unknown = 'hello';\nconsole.log((<string>x).length);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x: unknown = <span class=\"jsstringcolor\" style=\"color:green\">'hello'</span>;<br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>((&lt;string&gt;x).<span class=\"jspropertycolor\" style=\"color:black\">length</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "let x = 'hello';\nconsole.log(((x as unknown) as number).length); // x is not actually a number so this will return undefined",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> x = <span class=\"jsstringcolor\" style=\"color:green\">'hello'</span>;<br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(((x as unknown) as number).<span class=\"jspropertycolor\" style=\"color:black\">length</span>); <span class=\"commentcolor\" style=\"color:slategray\">// x is not actually a number so this will return undefined\n </span></span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_casting.php"
      }
    },
    {
      "title": "TypeScript Classes",
      "code": [
        {
          "text": "class Person {\nname: string;\n}\n\nconst person = new Person();\nperson.name = \"Jane\";",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> Person {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> person = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Person();<br/>\nperson.<span class=\"jspropertycolor\" style=\"color:black\">name</span> = <span class=\"jsstringcolor\" style=\"color:green\">\"Jane\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "class Person {\nprivate name: string;\n\npublic constructor(name: string) {\nthis.name = name;\n}\n\npublic getName(): string {\nreturn this.name;\n}\n}\n\nconst person = new Person(\"Jane\");\nconsole.log(person.getName()); // person.name isn't accessible from outside the class since it's private",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> Person {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">private</span> name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> constructor(name: string) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">name</span> = name;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> getName(): string {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">name</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> person = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Person(<span class=\"jsstringcolor\" style=\"color:green\">\"Jane\"</span>);<br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(person.<span class=\"jspropertycolor\" style=\"color:black\">getName</span>()); <span class=\"commentcolor\" style=\"color:slategray\">// person.name isn't accessible from outside the class since it's private<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "class Person {\n// name is a private member variable\npublic constructor(private name: string) {}\n\npublic getName(): string {\nreturn this.name;\n}\n}\n\nconst person = new Person(\"Jane\");\nconsole.log(person.getName());",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> Person {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// name is a private member variable<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> constructor(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">private</span> name: string) {}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> getName(): string {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">name</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> person = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Person(<span class=\"jsstringcolor\" style=\"color:green\">\"Jane\"</span>);<br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(person.<span class=\"jspropertycolor\" style=\"color:black\">getName</span>());<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "class Person {\nprivate readonly name: string;\n\npublic constructor(name: string) {\n// name cannot be changed after this initial definition, which has to be either at its declaration or in the constructor.\nthis.name = name;\n}\n\npublic getName(): string {\nreturn this.name;\n}\n}\n\nconst person = new Person(\"Jane\");\nconsole.log(person.getName());",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> Person {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">private</span> readonly name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> constructor(name: string) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// name cannot be changed after this initial definition, which has to be either at its declaration or in the constructor.<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">name</span> = name;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> getName(): string {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">name</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> person = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Person(<span class=\"jsstringcolor\" style=\"color:green\">\"Jane\"</span>);<br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(person.<span class=\"jspropertycolor\" style=\"color:black\">getName</span>());<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "interface Shape {\ngetArea: () => number;\n}\n\nclass Rectangle implements Shape {\npublic constructor(protected readonly width: number, protected readonly height: number) {}\n\npublic getArea(): number {\nreturn this.width * this.height;\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Shape {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  getArea: () =&gt; number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> Rectangle <span class=\"jskeywordcolor\" style=\"color:#005cc5\">implements</span> Shape {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> constructor(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">protected</span> readonly width: number, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">protected</span> readonly height: number) {}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> getArea(): number {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">width</span> * <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">height</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "interface Shape {\ngetArea: () => number;\n}\n\nclass Rectangle implements Shape {\npublic constructor(protected readonly width: number, protected readonly height: number) {}\n\npublic getArea(): number {\nreturn this.width * this.height;\n}\n}\n\nclass Square extends Rectangle {\npublic constructor(width: number) {\nsuper(width, width);\n}\n\n// getArea gets inherited from Rectangle\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Shape {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  getArea: () =&gt; number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> Rectangle <span class=\"jskeywordcolor\" style=\"color:#005cc5\">implements</span> Shape {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> constructor(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">protected</span> readonly width: number, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">protected</span> readonly height: number) {}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> getArea(): number {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">width</span> * <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">height</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> Square <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> Rectangle {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> constructor(width: number) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">super</span>(width, width);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// getArea gets inherited from Rectangle<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "interface Shape {\ngetArea: () => number;\n}\n\nclass Rectangle implements Shape {\n// using protected for these members allows access from classes that extend from this class, such as Square\npublic constructor(protected readonly width: number, protected readonly height: number) {}\n\npublic getArea(): number {\nreturn this.width * this.height;\n}\n\npublic toString(): string {\nreturn `Rectangle[width=${this.width}, height=${this.height}]`;\n}\n}\n\nclass Square extends Rectangle {\npublic constructor(width: number) {\nsuper(width, width);\n}\n\n// this toString replaces the toString from Rectangle\npublic override toString(): string {\nreturn `Square[width=${this.width}]`;\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Shape {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  getArea: () =&gt; number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> Rectangle <span class=\"jskeywordcolor\" style=\"color:#005cc5\">implements</span> Shape {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// using protected for these members allows access from classes that extend from this class, such as Square<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> constructor(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">protected</span> readonly width: number, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">protected</span> readonly height: number) {}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> getArea(): number {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">width</span> * <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">height</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> toString(): string {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsstringtempcolor\" style=\"color:#f50\">`Rectangle[width=${this.width}, height=${this.height}]`</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> Square <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> Rectangle {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> constructor(width: number) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">super</span>(width, width);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// this toString replaces the toString from Rectangle<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> override toString(): string {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsstringtempcolor\" style=\"color:#f50\">`Square[width=${this.width}]`</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "abstract class Polygon {\npublic abstract getArea(): number;\n\npublic toString(): string {\nreturn `Polygon[area=${this.getArea()}]`;\n}\n}\n\nclass Rectangle extends Polygon {\npublic constructor(protected readonly width: number, protected readonly height: number) {\nsuper();\n}\n\npublic getArea(): number {\nreturn this.width * this.height;\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">abstract</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> Polygon {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">abstract</span> getArea(): number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> toString(): string {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsstringtempcolor\" style=\"color:#f50\">`Polygon[area=${this.getArea()}]`</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> Rectangle <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> Polygon {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> constructor(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">protected</span> readonly width: number, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">protected</span> readonly height: number) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">super</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> getArea(): number {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">width</span> * <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">height</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_classes.php"
      }
    },
    {
      "title": "TypeScript Basic Generics",
      "code": [
        {
          "text": "function createPair<S, T>(v1: S, v2: T): [S, T] {\nreturn [v1, v2];\n}\nconsole.log(createPair<string, number>('hello', 42)); // ['hello', 42]",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> createPair&lt;S, T&gt;(v1: S, v2: T): [S, T] {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> [v1, v2];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(createPair&lt;string, number&gt;(<span class=\"jsstringcolor\" style=\"color:green\">'hello'</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">42</span>)); <span class=\"commentcolor\" style=\"color:slategray\">// ['hello', 42]<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "class NamedValue<T> {\nprivate _value: T | undefined;\n\nconstructor(private name: string) {}\n\npublic setValue(value: T) {\nthis._value = value;\n}\n\npublic getValue(): T | undefined {\nreturn this._value;\n}\n\npublic toString(): string {\nreturn `${this.name}: ${this._value}`;\n}\n}\n\nlet value = new NamedValue<number>('myNumber');\nvalue.setValue(10);\nconsole.log(value.toString()); // myNumber: 10",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> NamedValue&lt;T&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">private</span> _value: T | undefined;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  constructor(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">private</span> name: string) {}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> setValue(value: T) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">_value</span> = value;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> getValue(): T | undefined {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">_value</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> toString(): string {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsstringtempcolor\" style=\"color:#f50\">`${this.name}: ${this._value}`</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> value = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> NamedValue&lt;number&gt;(<span class=\"jsstringcolor\" style=\"color:green\">'myNumber'</span>);<br/>\nvalue.<span class=\"jspropertycolor\" style=\"color:black\">setValue</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">10</span>);<br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(value.<span class=\"jspropertycolor\" style=\"color:black\">toString</span>()); <span class=\"commentcolor\" style=\"color:slategray\">// myNumber: 10<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "type Wrapped<T> = { value: T };\n\nconst wrappedValue: Wrapped<number> = { value: 10 };",
          "html": "<span class=\"jscolor\" style=\"color:black\">\ntype Wrapped&lt;T&gt; = { value: T };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> wrappedValue: Wrapped&lt;number&gt; = { value: <span class=\"jsnumbercolor\" style=\"color:#905\">10</span> };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "class NamedValue<T = string> {\nprivate _value: T | undefined;\n\nconstructor(private name: string) {}\n\npublic setValue(value: T) {\nthis._value = value;\n}\n\npublic getValue(): T | undefined {\nreturn this._value;\n}\n\npublic toString(): string {\nreturn `${this.name}: ${this._value}`;\n}\n}\n\nlet value = new NamedValue('myNumber');\nvalue.setValue('myValue');\nconsole.log(value.toString()); // myNumber: myValue",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> NamedValue&lt;T = string&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">private</span> _value: T | undefined;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  constructor(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">private</span> name: string) {}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> setValue(value: T) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">_value</span> = value;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> getValue(): T | undefined {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">_value</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> toString(): string {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsstringtempcolor\" style=\"color:#f50\">`${this.name}: ${this._value}`</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> value = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> NamedValue(<span class=\"jsstringcolor\" style=\"color:green\">'myNumber'</span>);<br/>\nvalue.<span class=\"jspropertycolor\" style=\"color:black\">setValue</span>(<span class=\"jsstringcolor\" style=\"color:green\">'myValue'</span>);<br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(value.<span class=\"jspropertycolor\" style=\"color:black\">toString</span>()); <span class=\"commentcolor\" style=\"color:slategray\">// myNumber: myValue<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "function createLoggedPair<S extends string | number, T extends string | number>(v1: S, v2: T): [S, T] {\nconsole.log(`creating pair: v1='${v1}', v2='${v2}'`);\nreturn [v1, v2];\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> createLoggedPair&lt;S <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> string | number, T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> string | number&gt;(v1: S, v2: T): [S, T] {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`creating pair: v1='${v1}', v2='${v2}'`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> [v1, v2];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_basic_generics.php"
      }
    },
    {
      "title": "TypeScript Utility Types",
      "code": [
        {
          "text": "interface Point {\nx: number;\ny: number;\n}\n\nlet pointPart: Partial<Point> = {}; // `Partial` allows x and y to be optional\npointPart.x = 10;",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Point {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  x: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  y: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> pointPart: Partial&lt;Point&gt; = {}; <span class=\"commentcolor\" style=\"color:slategray\">// `Partial` allows x and y to be optional<br/></span>pointPart.<span class=\"jspropertycolor\" style=\"color:black\">x</span> = <span class=\"jsnumbercolor\" style=\"color:#905\">10</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "interface Car {\nmake: string;\nmodel: string;\nmileage?: number;\n}\n\nlet myCar: Required<Car> = {\nmake: 'Ford',\nmodel: 'Focus',\nmileage: 12000 // `Required` forces mileage to be defined\n};",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Car {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  make: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  model: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  mileage?: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> myCar: Required&lt;Car&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  make: <span class=\"jsstringcolor\" style=\"color:green\">'Ford'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  model: <span class=\"jsstringcolor\" style=\"color:green\">'Focus'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  mileage: <span class=\"jsnumbercolor\" style=\"color:#905\">12000</span> <span class=\"commentcolor\" style=\"color:slategray\">// `Required` forces mileage to be defined<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "const nameAgeMap: Record<string, number> = {\n'Alice': 21,\n'Bob': 25\n};",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> nameAgeMap: Record&lt;string, number&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">'Alice'</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">21</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">'Bob'</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">25</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "interface Person {\nname: string;\nage: number;\nlocation?: string;\n}\n\nconst bob: Omit<Person, 'age' | 'location'> = {\nname: 'Bob'\n// `Omit` has removed age and location from the type and they can't be defined here\n};",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Person {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  age: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  location?: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> bob: Omit&lt;Person, <span class=\"jsstringcolor\" style=\"color:green\">'age'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'location'</span>&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: <span class=\"jsstringcolor\" style=\"color:green\">'Bob'</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// `Omit` has removed age and location from the type and they can't be defined here<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "interface Person {\nname: string;\nage: number;\nlocation?: string;\n}\n\nconst bob: Pick<Person, 'name'> = {\nname: 'Bob'\n// `Pick` has only kept name, so age and location were removed from the type and they can't be defined here\n};",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Person {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  age: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  location?: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> bob: Pick&lt;Person, <span class=\"jsstringcolor\" style=\"color:green\">'name'</span>&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: <span class=\"jsstringcolor\" style=\"color:green\">'Bob'</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// `Pick` has only kept name, so age and location were removed from the type and they can't be defined here<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "type Primitive = string | number | boolean\nconst value: Exclude<Primitive, string> = true; // a string cannot be used here since Exclude removed it from the type.",
          "html": "<span class=\"jscolor\" style=\"color:black\">\ntype Primitive = string | number | <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> value: Exclude&lt;Primitive, string&gt; = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>; <span class=\"commentcolor\" style=\"color:slategray\">// a string cannot be used here since Exclude removed it from the type.<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "type PointGenerator = () => { x: number; y: number; };\nconst point: ReturnType<PointGenerator> = {\nx: 10,\ny: 20\n};",
          "html": "<span class=\"jscolor\" style=\"color:black\">\ntype PointGenerator = () =&gt; { x: number; y: number; };<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> point: ReturnType&lt;PointGenerator&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  x: <span class=\"jsnumbercolor\" style=\"color:#905\">10</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  y: <span class=\"jsnumbercolor\" style=\"color:#905\">20</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "type PointPrinter = (p: { x: number; y: number; }) => void;\nconst point: Parameters<PointPrinter>[0] = {\nx: 10,\ny: 20\n};",
          "html": "<span class=\"jscolor\" style=\"color:black\">\ntype PointPrinter = (p: { x: number; y: number; }) =&gt; <span class=\"jskeywordcolor\" style=\"color:#005cc5\">void</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> point: Parameters&lt;PointPrinter&gt;[<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>] = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  x: <span class=\"jsnumbercolor\" style=\"color:#905\">10</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  y: <span class=\"jsnumbercolor\" style=\"color:#905\">20</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "interface Person {\nname: string;\nage: number;\n}\nconst person: Readonly<Person> = {\nname: \"Dylan\",\nage: 35,\n};\nperson.name = 'Israel'; // prog.ts(11,8): error TS2540: Cannot assign to 'name' because it is a read-only property.",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Person {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  age: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/>\n\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> person: Readonly&lt;Person&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: <span class=\"jsstringcolor\" style=\"color:green\">\"Dylan\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  age: <span class=\"jsnumbercolor\" style=\"color:#905\">35</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/>\n\nperson.<span class=\"jspropertycolor\" style=\"color:black\">name</span> = <span class=\"jsstringcolor\" style=\"color:green\">'Israel'</span>; <span class=\"commentcolor\" style=\"color:slategray\">// prog.ts(11,8): error TS2540: Cannot assign to 'name' because it is a read-only property.<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_utility_types.php"
      }
    },
    {
      "title": "TypeScript Keyof",
      "code": [
        {
          "text": "interface Person {\nname: string;\nage: number;\n}\n// `keyof Person` here creates a union type of \"name\" and \"age\", other strings will not be allowed\nfunction printPersonProperty(person: Person, property: keyof Person) {\nconsole.log(`Printing person property ${property}: \"${person[property]}\"`);\n}\nlet person = {\nname: \"Max\",\nage: 27\n};\nprintPersonProperty(person, \"name\"); // Printing person property name: \"Max\"",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Person {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  age: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// `keyof Person` here creates a union type of \"name\" and \"age\", other strings will not be allowed<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> printPersonProperty(person: Person, property: keyof Person) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Printing person property ${property}: \"${person[property]}\"`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> person = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: <span class=\"jsstringcolor\" style=\"color:green\">\"Max\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  age: <span class=\"jsnumbercolor\" style=\"color:#905\">27</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/>\nprintPersonProperty(person, <span class=\"jsstringcolor\" style=\"color:green\">\"name\"</span>); <span class=\"commentcolor\" style=\"color:slategray\">// Printing person property name: \"Max\"<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "type StringMap = { [key: string]: unknown };\n// `keyof StringMap` resolves to `string` here\nfunction createStringPair(property: keyof StringMap, value: string): StringMap {\nreturn { [property]: value };\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\ntype StringMap = { [key: string]: unknown };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// `keyof StringMap` resolves to `string` here<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> createStringPair(property: keyof StringMap, value: string): StringMap {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> { [property]: value };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_keyof.php"
      }
    },
    {
      "title": "TypeScript Null & Undefined",
      "code": [
        {
          "text": "let value: string | undefined | null = null;\nvalue = 'hello';\nvalue = undefined;",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> value: string | undefined | <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span>;<br/>\nvalue = <span class=\"jsstringcolor\" style=\"color:green\">'hello'</span>;<br/>\nvalue = undefined;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "interface House {\nsqft: number;\nyard?: {\nsqft: number;\n};\n}\nfunction printYardSize(house: House) {\nconst yardSize = house.yard?.sqft;\nif (yardSize === undefined) {\nconsole.log('No yard');\n} else {\nconsole.log(`Yard is ${yardSize} sqft`);\n}\n}\n\nlet home: House = {\nsqft: 500\n};\n\nprintYardSize(home); // Prints 'No yard'",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> House {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  sqft: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  yard?: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    sqft: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> printYardSize(house: House) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> yardSize = house.<span class=\"jspropertycolor\" style=\"color:black\">yard?</span>.<span class=\"jspropertycolor\" style=\"color:black\">sqft</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (yardSize === undefined) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringcolor\" style=\"color:green\">'No yard'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Yard is ${yardSize} sqft`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> home: House = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  sqft: <span class=\"jsnumbercolor\" style=\"color:#905\">500</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\nprintYardSize(home); <span class=\"commentcolor\" style=\"color:slategray\">// Prints 'No yard'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "function printMileage(mileage: number | null | undefined) {\nconsole.log(`Mileage: ${mileage ?? 'Not Available'}`);\n}\n\nprintMileage(null); // Prints 'Mileage: Not Available'\nprintMileage(0); // Prints 'Mileage: 0'",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> printMileage(mileage: number | <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span> | undefined) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Mileage: ${mileage ?? 'Not Available'}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\nprintMileage(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span>); <span class=\"commentcolor\" style=\"color:slategray\">// Prints 'Mileage: Not Available'<br/></span>\nprintMileage(<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>); <span class=\"commentcolor\" style=\"color:slategray\">// Prints 'Mileage: 0'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "function getValue(): string | undefined {\nreturn 'hello';\n}\nlet value = getValue();\nconsole.log('value length: ' + value!.length);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> getValue(): string | undefined {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsstringcolor\" style=\"color:green\">'hello'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> value = getValue();<br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringcolor\" style=\"color:green\">'value length: '</span> + value!.<span class=\"jspropertycolor\" style=\"color:black\">length</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "let array: number[] = [1, 2, 3];\nlet value = array[0]; // with `noUncheckedIndexedAccess` this has the type `number | undefined`",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> array: number[] = [<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">3</span>];<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> value = array[<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>]; <span class=\"commentcolor\" style=\"color:slategray\">// with `noUncheckedIndexedAccess` this has the type `number | undefined`<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_null.php"
      }
    },
    {
      "title": "TypeScript Definitely Typed",
      "code": [
        {
          "text": "npm install --save-dev @types/jquery",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      npm install --save-dev @types/jquery\n     </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_definitely_typed.php"
      }
    },
    {
      "title": "TypeScript 5.x Updates",
      "code": [
        {
          "text": "type Color = \"red\" | \"green\" | \"blue\";\ntype HexColor<T extends Color> = `#${string}`;\n\n// Usage:\nlet myColor: HexColor<\"blue\"> = \"#0000FF\";",
          "html": "<span class=\"jscolor\" style=\"color:black\">\ntype Color = <span class=\"jsstringcolor\" style=\"color:green\">\"red\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"green\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"blue\"</span>; <br/>\ntype HexColor&lt;T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> Color&gt; = <span class=\"jsstringtempcolor\" style=\"color:#f50\">`#${string}`</span>;<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Usage:<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> myColor: HexColor&lt;<span class=\"jsstringcolor\" style=\"color:green\">\"blue\"</span>&gt; = <span class=\"jsstringcolor\" style=\"color:green\">\"#0000FF\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "type DynamicObject = { [key: `dynamic_${string}`]: string };\n\n// Usage:\nlet obj: DynamicObject = { dynamic_key: \"value\" };",
          "html": "<span class=\"jscolor\" style=\"color:black\">\ntype DynamicObject = { [key: <span class=\"jsstringtempcolor\" style=\"color:#f50\">`dynamic_${string}`</span>]: string };<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Usage: <br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> obj: DynamicObject = { dynamic_key: <span class=\"jsstringcolor\" style=\"color:green\">\"value\"</span> };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_5_updates.php"
      }
    },
    {
      "title": "TypeScript Configuration",
      "code": [
        {
          "text": "{\n\"compilerOptions\": {\n\"target\": \"es6\",\n\"module\": \"commonjs\"\n},\n\"include\": [\"src/**/*\"]\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"compilerOptions\"</span>: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"target\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"es6\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"module\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"commonjs\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"include\"</span>: [<span class=\"jsstringcolor\" style=\"color:green\">\"src/**/*\"</span>]<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "{\n\"compilerOptions\": {\n\"target\": \"es2020\",\n\"module\": \"esnext\",\n\"strict\": true,\n\"baseUrl\": \".\",\n\"paths\": {\n\"@app/*\": [\"src/app/*\"]\n},\n\"outDir\": \"dist\",\n\"esModuleInterop\": true\n},\n\"include\": [\"src\"],\n\"exclude\": [\"node_modules\", \"dist\"]\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"compilerOptions\"</span>: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"target\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"es2020\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"module\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"esnext\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"strict\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"baseUrl\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\".\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"paths\"</span>: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"@app/*\"</span>: [<span class=\"jsstringcolor\" style=\"color:green\">\"src/app/*\"</span>]<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"outDir\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"dist\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"esModuleInterop\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"include\"</span>: [<span class=\"jsstringcolor\" style=\"color:green\">\"src\"</span>],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"exclude\"</span>: [<span class=\"jsstringcolor\" style=\"color:green\">\"node_modules\"</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"dist\"</span>]<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "tsc --init",
          "html": "<span class=\"jscolor\" style=\"color:black\">\ntsc --init\n </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_config.php"
      }
    },
    {
      "title": "TypeScript with Node.js",
      "code": [
        {
          "text": "mkdir my-ts-node-app\ncd my-ts-node-app\nnpm init -y\nnpm install typescript @types/node --save-dev\nnpx tsc --init",
          "html": "mkdir my-ts-node-app<br/>\ncd my-ts-node-app<br/>\nnpm init -y<br/>\nnpm install typescript @types/node --save-dev<br/>\nnpx tsc --init"
        },
        {
          "text": "mkdir src\n# later add files like: src/server.ts, src/middleware/auth.ts",
          "html": "mkdir src<br/>\n# later add files like: src/server.ts, src/middleware/auth.ts"
        },
        {
          "text": "{\n\"compilerOptions\": {\n\"target\": \"ES2020\",\n\"module\": \"commonjs\",\n\"outDir\": \"./dist\",\n\"rootDir\": \"./src\",\n\"strict\": true,\n\"esModuleInterop\": true,\n\"skipLibCheck\": true,\n\"forceConsistentCasingInFileNames\": true,\n\"moduleResolution\": \"node\",\n\"resolveJsonModule\": true,\n\"sourceMap\": true\n},\n\"include\": [\"src/**/*\"],\n\"exclude\": [\"node_modules\"]\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"compilerOptions\"</span>: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"target\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"ES2020\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"module\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"commonjs\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"outDir\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"./dist\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"rootDir\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"./src\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"strict\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"esModuleInterop\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"skipLibCheck\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"forceConsistentCasingInFileNames\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"moduleResolution\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"node\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"resolveJsonModule\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"sourceMap\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"include\"</span>: [<span class=\"jsstringcolor\" style=\"color:green\">\"src/**/*\"</span>],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"exclude\"</span>: [<span class=\"jsstringcolor\" style=\"color:green\">\"node_modules\"</span>]<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "npm install express body-parser\nnpm install --save-dev ts-node nodemon @types/express",
          "html": "<span class=\"jscolor\" style=\"color:black\">\nnpm install express body-parser<br/>\nnpm install --save-dev ts-node nodemon @types/express\n </span>"
        },
        {
          "text": "my-ts-node-app/\nsrc/\nserver.ts\nmiddleware/\nauth.ts\nentity/\nUser.ts\nconfig/\ndatabase.ts\ndist/\nnode_modules/\npackage.json\ntsconfig.json",
          "html": "my-ts-node-app/<br/>\n  src/<br/>\n    server.ts<br/>\n    middleware/<br/>\n      auth.ts<br/>\n    entity/<br/>\n      User.ts<br/>\n    config/<br/>\n      database.ts<br/>\n  dist/<br/>\n  node_modules/<br/>\n  package.json<br/>\n  tsconfig.json"
        },
        {
          "text": "import express, { Request, Response, NextFunction } from 'express';\nimport { json } from 'body-parser';\n\ninterface User {\nid: number;\nusername: string;\nemail: string;\n}\n\n// Initialize Express app\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Middleware\napp.use(json());\n\n// In-memory database\nconst users: User[] = [\n{ id: 1, username: 'user1', email: 'user1@example.com' },\n{ id: 2, username: 'user2', email: 'user2@example.com' }\n];\n\n// Routes\napp.get('/api/users', (req: Request, res: Response) => {\nres.json(users);\n});\n\napp.get('/api/users/:id', (req: Request, res: Response) => {\nconst user = users.find(u => u.id === parseInt(req.params.id));\nif (!user) return res.status(404).json({ message: 'User not found' });\nres.json(user);\n});\n\napp.post('/api/users', (req: Request, res: Response) => {\nconst { username, email } = req.body;\n\nif (!username || !email) {\nreturn res.status(400).json({ message: 'Username and email are required' });\n}\n\nconst newUser: User = {\nid: users.length + 1,\nusername,\nemail\n};\n\nusers.push(newUser);\nres.status(201).json(newUser);\n});\n\n// Error handling middleware\napp.use((err: Error, req: Request, res: Response, next: NextFunction) => {\nconsole.error(err.stack);\nres.status(500).json({ message: 'Something went wrong!' });\n});\n\n// Start server\napp.listen(PORT, () => {\nconsole.log(`Server is running on http://localhost:${PORT}`);\n});",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">import</span> express, { Request, Response, NextFunction } from <span class=\"jsstringcolor\" style=\"color:green\">'express'</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">import</span> { json } from <span class=\"jsstringcolor\" style=\"color:green\">'body-parser'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> User {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  id: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  username: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  email: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Initialize Express app<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> app = express();<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> PORT = process.<span class=\"jspropertycolor\" style=\"color:black\">env</span>.<span class=\"jspropertycolor\" style=\"color:black\">PORT</span> || <span class=\"jsnumbercolor\" style=\"color:#905\">3000</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Middleware<br/></span>\napp.<span class=\"jspropertycolor\" style=\"color:black\">use</span>(json());<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// In-memory database<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> users: User[] = [<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  { id: <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, username: <span class=\"jsstringcolor\" style=\"color:green\">'user1'</span>, email: <span class=\"jsstringcolor\" style=\"color:green\">'user1@example.com'</span> },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  { id: <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, username: <span class=\"jsstringcolor\" style=\"color:green\">'user2'</span>, email: <span class=\"jsstringcolor\" style=\"color:green\">'user2@example.com'</span> }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Routes<br/></span>\napp.<span class=\"jspropertycolor\" style=\"color:black\">get</span>(<span class=\"jsstringcolor\" style=\"color:green\">'/api/users'</span>, (req: Request, res: Response) =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  res.<span class=\"jspropertycolor\" style=\"color:black\">json</span>(users);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\napp.<span class=\"jspropertycolor\" style=\"color:black\">get</span>(<span class=\"jsstringcolor\" style=\"color:green\">'/api/users/:id'</span>, (req: Request, res: Response) =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> user = users.<span class=\"jspropertycolor\" style=\"color:black\">find</span>(u =&gt; u.<span class=\"jspropertycolor\" style=\"color:black\">id</span> === parseInt(req.<span class=\"jspropertycolor\" style=\"color:black\">params</span>.<span class=\"jspropertycolor\" style=\"color:black\">id</span>));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (!user) <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> res.<span class=\"jspropertycolor\" style=\"color:black\">status</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">404</span>).<span class=\"jspropertycolor\" style=\"color:black\">json</span>({ message: <span class=\"jsstringcolor\" style=\"color:green\">'User not found'</span> });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  res.<span class=\"jspropertycolor\" style=\"color:black\">json</span>(user);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\napp.<span class=\"jspropertycolor\" style=\"color:black\">post</span>(<span class=\"jsstringcolor\" style=\"color:green\">'/api/users'</span>, (req: Request, res: Response) =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> { username, email } = req.<span class=\"jspropertycolor\" style=\"color:black\">body</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (!username || !email) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> res.<span class=\"jspropertycolor\" style=\"color:black\">status</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">400</span>).<span class=\"jspropertycolor\" style=\"color:black\">json</span>({ message: <span class=\"jsstringcolor\" style=\"color:green\">'Username and email are required'</span> });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> newUser: User = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    id: users.<span class=\"jspropertycolor\" style=\"color:black\">length</span> + <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    username,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    email<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  users.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(newUser);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  res.<span class=\"jspropertycolor\" style=\"color:black\">status</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">201</span>).<span class=\"jspropertycolor\" style=\"color:black\">json</span>(newUser);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Error handling middleware<br/></span>\napp.<span class=\"jspropertycolor\" style=\"color:black\">use</span>((err: Error, req: Request, res: Response, next: NextFunction) =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(err.<span class=\"jspropertycolor\" style=\"color:black\">stack</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  res.<span class=\"jspropertycolor\" style=\"color:black\">status</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">500</span>).<span class=\"jspropertycolor\" style=\"color:black\">json</span>({ message: <span class=\"jsstringcolor\" style=\"color:green\">'Something went wrong!'</span> });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Start server<br/></span>\napp.<span class=\"jspropertycolor\" style=\"color:black\">listen</span>(PORT, () =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Server is running on http://localhost:${PORT}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "import { Request, Response, NextFunction } from 'express';\n\n// Extend the Express Request type to include custom properties\ndeclare global {\nnamespace Express {\ninterface Request {\nuser?: { id: number; role: string };\n}\n}\n}\n\nexport const authenticate = (req: Request, res: Response, next: NextFunction) => {\nconst token = req.header('Authorization')?.replace('Bearer ', '');\n\nif (!token) {\nreturn res.status(401).json({ message: 'No token provided' });\n}\n\ntry {\n// In a real app, verify the JWT token here\nconst decoded = { id: 1, role: 'admin' }; // Mock decoded token\nreq.user = decoded;\nnext();\n} catch (error) {\nres.status(401).json({ message: 'Invalid token' });\n}\n};\n\nexport const authorize = (roles: string[]) => {\nreturn (req: Request, res: Response, next: NextFunction) => {\nif (!req.user) {\nreturn res.status(401).json({ message: 'Not authenticated' });\n}\n\nif (!roles.includes(req.user.role)) {\nreturn res.status(403).json({ message: 'Not authorized' });\n}\n\nnext();\n};\n};",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">import</span> { Request, Response, NextFunction } from <span class=\"jsstringcolor\" style=\"color:green\">'express'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Extend the Express Request type to include custom properties<br/></span>\ndeclare global {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  namespace Express {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Request {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      user?: { id: number; role: string };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> authenticate = (req: Request, res: Response, next: NextFunction) =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> token = req.<span class=\"jspropertycolor\" style=\"color:black\">header</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Authorization'</span>)?.<span class=\"jspropertycolor\" style=\"color:black\">replace</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Bearer '</span>, <span class=\"jsstringcolor\" style=\"color:green\">''</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (!token) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> res.<span class=\"jspropertycolor\" style=\"color:black\">status</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">401</span>).<span class=\"jspropertycolor\" style=\"color:black\">json</span>({ message: <span class=\"jsstringcolor\" style=\"color:green\">'No token provided'</span> });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// In a real app, verify the JWT token here<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> decoded = { id: <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, role: <span class=\"jsstringcolor\" style=\"color:green\">'admin'</span> }; <span class=\"commentcolor\" style=\"color:slategray\">// Mock decoded token<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    req.<span class=\"jspropertycolor\" style=\"color:black\">user</span> = decoded;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    next();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span> (error) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    res.<span class=\"jspropertycolor\" style=\"color:black\">status</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">401</span>).<span class=\"jspropertycolor\" style=\"color:black\">json</span>({ message: <span class=\"jsstringcolor\" style=\"color:green\">'Invalid token'</span> });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> authorize = (roles: string[]) =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> (req: Request, res: Response, next: NextFunction) =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (!req.<span class=\"jspropertycolor\" style=\"color:black\">user</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> res.<span class=\"jspropertycolor\" style=\"color:black\">status</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">401</span>).<span class=\"jspropertycolor\" style=\"color:black\">json</span>({ message: <span class=\"jsstringcolor\" style=\"color:green\">'Not authenticated'</span> });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (!roles.<span class=\"jspropertycolor\" style=\"color:black\">includes</span>(req.<span class=\"jspropertycolor\" style=\"color:black\">user</span>.<span class=\"jspropertycolor\" style=\"color:black\">role</span>)) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> res.<span class=\"jspropertycolor\" style=\"color:black\">status</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">403</span>).<span class=\"jspropertycolor\" style=\"color:black\">json</span>({ message: <span class=\"jsstringcolor\" style=\"color:green\">'Not authorized'</span> });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    next();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// src/server.ts\nimport { authenticate, authorize } from './middleware/auth';\n\napp.get('/api/admin', authenticate, authorize(['admin']), (req, res) => {\nres.json({ message: `Hello admin ${req.user?.id}` });\n});",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// src/server.ts<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">import</span> { authenticate, authorize } from <span class=\"jsstringcolor\" style=\"color:green\">'./middleware/auth'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\napp.<span class=\"jspropertycolor\" style=\"color:black\">get</span>(<span class=\"jsstringcolor\" style=\"color:green\">'/api/admin'</span>, authenticate, authorize([<span class=\"jsstringcolor\" style=\"color:green\">'admin'</span>]), (req, res) =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  res.<span class=\"jspropertycolor\" style=\"color:black\">json</span>({ message: <span class=\"jsstringtempcolor\" style=\"color:#f50\">`Hello admin ${req.user?.id}`</span> });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "import { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn, UpdateDateColumn } from 'typeorm';\n\n@Entity('users')\nexport class User {\n@PrimaryGeneratedColumn()\nid: number;\n\n@Column({ unique: true })\nusername: string;\n\n@Column({ unique: true })\nemail: string;\n\n@Column({ select: false })\npassword: string;\n\n@Column({ default: 'user' })\nrole: string;\n\n@CreateDateColumn()\ncreatedAt: Date;\n\n@UpdateDateColumn()\nupdatedAt: Date;\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">import</span> { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn, UpdateDateColumn } from <span class=\"jsstringcolor\" style=\"color:green\">'typeorm'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n@Entity(<span class=\"jsstringcolor\" style=\"color:green\">'users'</span>)<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> User {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  @PrimaryGeneratedColumn()<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  id: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  @Column({ unique: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span> })<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  username: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  @Column({ unique: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span> })<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  email: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  @Column({ select: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">false</span> })<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  password: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  @Column({ <span class=\"jskeywordcolor\" style=\"color:#005cc5\">default</span>: <span class=\"jsstringcolor\" style=\"color:green\">'user'</span> })<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  role: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  @CreateDateColumn()<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  createdAt: Date;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  @UpdateDateColumn()<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  updatedAt: Date;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "import 'reflect-metadata';\nimport { DataSource } from 'typeorm';\nimport { User } from '../entity/User';\n\nexport const AppDataSource = new DataSource({\ntype: 'postgres',\nhost: process.env.DB_HOST || 'localhost',\nport: parseInt(process.env.DB_PORT || '5432'),\nusername: process.env.DB_USERNAME || 'postgres',\npassword: process.env.DB_PASSWORD || 'postgres',\ndatabase: process.env.DB_NAME || 'mydb',\nsynchronize: process.env.NODE_ENV !== 'production',\nlogging: false,\nentities: [User],\nmigrations: [],\nsubscribers: [],\n});",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">import</span> <span class=\"jsstringcolor\" style=\"color:green\">'reflect-metadata'</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">import</span> { DataSource } from <span class=\"jsstringcolor\" style=\"color:green\">'typeorm'</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">import</span> { User } from <span class=\"jsstringcolor\" style=\"color:green\">'../entity/User'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> AppDataSource = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> DataSource({<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type: <span class=\"jsstringcolor\" style=\"color:green\">'postgres'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  host: process.<span class=\"jspropertycolor\" style=\"color:black\">env</span>.<span class=\"jspropertycolor\" style=\"color:black\">DB_HOST</span> || <span class=\"jsstringcolor\" style=\"color:green\">'localhost'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  port: parseInt(process.<span class=\"jspropertycolor\" style=\"color:black\">env</span>.<span class=\"jspropertycolor\" style=\"color:black\">DB_PORT</span> || <span class=\"jsstringcolor\" style=\"color:green\">'5432'</span>),<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  username: process.<span class=\"jspropertycolor\" style=\"color:black\">env</span>.<span class=\"jspropertycolor\" style=\"color:black\">DB_USERNAME</span> || <span class=\"jsstringcolor\" style=\"color:green\">'postgres'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  password: process.<span class=\"jspropertycolor\" style=\"color:black\">env</span>.<span class=\"jspropertycolor\" style=\"color:black\">DB_PASSWORD</span> || <span class=\"jsstringcolor\" style=\"color:green\">'postgres'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  database: process.<span class=\"jspropertycolor\" style=\"color:black\">env</span>.<span class=\"jspropertycolor\" style=\"color:black\">DB_NAME</span> || <span class=\"jsstringcolor\" style=\"color:green\">'mydb'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  synchronize: process.<span class=\"jspropertycolor\" style=\"color:black\">env</span>.<span class=\"jspropertycolor\" style=\"color:black\">NODE_ENV</span> !== <span class=\"jsstringcolor\" style=\"color:green\">'production'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  logging: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">false</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  entities: [User],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  migrations: [],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  subscribers: [],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// src/server.ts\nimport { AppDataSource } from './config/database';\n\nAppDataSource.initialize()\n.then(() => {\napp.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));\n})\n.catch((err) => {\nconsole.error('DB init error', err);\nprocess.exit(1);\n});",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// src/server.ts<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">import</span> { AppDataSource } from <span class=\"jsstringcolor\" style=\"color:green\">'./config/database'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\nAppDataSource.<span class=\"jspropertycolor\" style=\"color:black\">initialize</span>()<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  .<span class=\"jskeywordcolor\" style=\"color:#005cc5\">then</span>(() =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  app.<span class=\"jspropertycolor\" style=\"color:black\">listen</span>(PORT, () =&gt; console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Server running on http://localhost:${PORT}`</span>));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  })<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  .<span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span>((err) =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(<span class=\"jsstringcolor\" style=\"color:green\">'DB init error'</span>, err);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  process.<span class=\"jspropertycolor\" style=\"color:black\">exit</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  });<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "{\n\"scripts\": {\n\"build\": \"tsc\",\n\"start\": \"node dist/server.js\",\n\"dev\": \"nodemon --exec ts-node src/server.ts\",\n\"watch\": \"tsc -w\",\n\"test\": \"jest --config jest.config.js\"\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"scripts\"</span>: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"build\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"tsc\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"start\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"node dist/server.js\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"dev\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"nodemon --exec ts-node src/server.ts\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"watch\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"tsc -w\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"test\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"jest --config jest.config.js\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "npm run dev",
          "html": "npm run dev"
        },
        {
          "text": "npm run build\nnpm start",
          "html": "npm run build<br/>\nnpm start"
        },
        {
          "text": "node --enable-source-maps dist/server.js",
          "html": "node --enable-source-maps dist/server.js"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_nodejs.php"
      }
    },
    {
      "title": "TypeScript with React",
      "code": [
        {
          "text": "npm create vite@latest my-app -- --template react-ts\ncd my-app\nnpm install\nnpm run dev",
          "html": "npm create vite@latest my-app -- --template react-ts<br/>\ncd my-app<br/>\nnpm install<br/>\nnpm run dev"
        },
        {
          "text": "{\n\"compilerOptions\": {\n\"target\": \"ES2020\",\n\"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n\"module\": \"ESNext\",\n\"moduleResolution\": \"Node\",\n\"jsx\": \"react-jsx\",\n\"strict\": true,\n\"skipLibCheck\": true,\n\"noEmit\": true,\n\"resolveJsonModule\": true,\n\"allowSyntheticDefaultImports\": true,\n\"esModuleInterop\": true,\n\"forceConsistentCasingInFileNames\": true\n},\n\"include\": [\"src\"]\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"compilerOptions\"</span>: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"target\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"ES2020\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"lib\"</span>: [<span class=\"jsstringcolor\" style=\"color:green\">\"ES2020\"</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"DOM\"</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"DOM.Iterable\"</span>],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"module\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"ESNext\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"moduleResolution\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"Node\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"jsx\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"react-jsx\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"strict\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"skipLibCheck\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"noEmit\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"resolveJsonModule\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"allowSyntheticDefaultImports\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"esModuleInterop\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"forceConsistentCasingInFileNames\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"include\"</span>: [<span class=\"jsstringcolor\" style=\"color:green\">\"src\"</span>]<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// Greeting.tsx\ntype GreetingProps = {\nname: string;\nage?: number;\n};\n\nexport function Greeting({ name, age }: GreetingProps) {\nreturn (\n<div>\n<h2>Hello, {name}!</h2>\n{age !== undefined && <p>You are {age} years old</p>}\n</div>\n);\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Greeting.tsx<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> type GreetingProps = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   age?: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> Greeting({ name, age }: GreetingProps) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> (<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>     &lt;div&gt;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>       &lt;h2&gt;Hello, {name}!&lt;/h2&gt;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>       {age !== undefined &amp;&amp; &lt;p&gt;You are {age} years old&lt;/p&gt;}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>     &lt;/div&gt;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   );<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Input change\nfunction NameInput() {\nfunction handleChange(e: React.ChangeEvent<HTMLInputElement>) {\nconsole.log(e.target.value);\n}\nreturn <input onChange={handleChange} />;\n}\n\n// Button click\nfunction SaveButton() {\nfunction handleClick(e: React.MouseEvent<HTMLButtonElement>) {\ne.preventDefault();\n}\nreturn <button onClick={handleClick}>Save</button>;\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Input change<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> NameInput() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> handleChange(e: React.<span class=\"jspropertycolor\" style=\"color:black\">ChangeEvent</span>&lt;HTMLInputElement&gt;) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>     console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(e.<span class=\"jspropertycolor\" style=\"color:black\">target</span>.<span class=\"jspropertycolor\" style=\"color:black\">value</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> &lt;input onChange={handleChange} /&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">// Button click<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> SaveButton() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> handleClick(e: React.<span class=\"jspropertycolor\" style=\"color:black\">MouseEvent</span>&lt;HTMLButtonElement&gt;) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>     e.<span class=\"jspropertycolor\" style=\"color:black\">preventDefault</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> &lt;button onClick={handleClick}&gt;Save&lt;/button&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "const [count, setCount] = React.useState<number>(0);\nconst [status, setStatus] = React.useState<'idle' | 'loading' | 'error'>('idle');\n\ntype User = { id: string; name: string };\nconst [user, setUser] = React.useState<User | null>(null);",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> [count, setCount] = React.<span class=\"jspropertycolor\" style=\"color:black\">useState</span>&lt;number&gt;(<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> [status, setStatus] = React.<span class=\"jspropertycolor\" style=\"color:black\">useState</span>&lt;<span class=\"jsstringcolor\" style=\"color:green\">'idle'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'loading'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'error'</span>&gt;(<span class=\"jsstringcolor\" style=\"color:green\">'idle'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> type User = { id: string; name: string };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> [user, setUser] = React.<span class=\"jspropertycolor\" style=\"color:black\">useState</span>&lt;User | <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span>&gt;(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "function FocusInput() {\nconst inputRef = React.useRef<HTMLInputElement>(null);\nreturn <input ref={inputRef} onFocus={() => inputRef.current?.select()} />;\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> FocusInput() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> inputRef = React.<span class=\"jspropertycolor\" style=\"color:black\">useRef</span>&lt;HTMLInputElement&gt;(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> &lt;input ref={inputRef} onFocus={() =&gt; inputRef.<span class=\"jspropertycolor\" style=\"color:black\">current?</span>.<span class=\"jspropertycolor\" style=\"color:black\">select</span>()} /&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "type CardProps = { title: string; children?: React.ReactNode };\nfunction Card({ title, children }: CardProps) {\nreturn (\n<div>\n<h2>{title}</h2>\n{children}\n</div>\n);\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> type CardProps = { title: string; children?: React.<span class=\"jspropertycolor\" style=\"color:black\">ReactNode</span> };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> Card({ title, children }: CardProps) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> (<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>     &lt;div&gt;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>       &lt;h2&gt;{title}&lt;/h2&gt;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>       {children}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>     &lt;/div&gt;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   );<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "async function fetchJson<T>(url: string): Promise<T> {\nconst res = await fetch(url);\nif (!res.ok) throw new Error('Network error');\nreturn res.json() as Promise<T>;\n}\n\n// Usage inside an async function/component effect\nasync function loadPosts() {\ntype Post = { id: number; title: string };\nconst posts = await fetchJson<Post[]>(\"/api/posts\");\nconsole.log(posts);\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> fetchJson&lt;T&gt;(url: string): Promise&lt;T&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> res = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> fetch(url);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (!res.<span class=\"jspropertycolor\" style=\"color:black\">ok</span>) <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Error(<span class=\"jsstringcolor\" style=\"color:green\">'Network error'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> res.<span class=\"jspropertycolor\" style=\"color:black\">json</span>() as Promise&lt;T&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"commentcolor\" style=\"color:slategray\">// Usage inside an async function/component effect<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> loadPosts() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   type Post = { id: number; title: string };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> posts = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> fetchJson&lt;Post[]&gt;(<span class=\"jsstringcolor\" style=\"color:green\">\"/api/posts\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(posts);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "type Theme = 'light' | 'dark';\nconst ThemeContext = React.createContext<{ theme: Theme; toggle(): void } | null>(null);\n\nfunction ThemeProvider({ children }: { children: React.ReactNode }) {\nconst [theme, setTheme] = React.useState<Theme>('light');\nconst value = { theme, toggle: () => setTheme(t => (t === 'light' ? 'dark' : 'light')) };\nreturn <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>;\n}\n\nfunction useTheme() {\nconst ctx = React.useContext(ThemeContext);\nif (!ctx) throw new Error('useTheme must be used within ThemeProvider');\nreturn ctx;\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> type Theme = <span class=\"jsstringcolor\" style=\"color:green\">'light'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'dark'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> ThemeContext = React.<span class=\"jspropertycolor\" style=\"color:black\">createContext</span>&lt;{ theme: Theme; toggle(): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">void</span> } | <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span>&gt;(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> ThemeProvider({ children }: { children: React.<span class=\"jspropertycolor\" style=\"color:black\">ReactNode</span> }) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> [theme, setTheme] = React.<span class=\"jspropertycolor\" style=\"color:black\">useState</span>&lt;Theme&gt;(<span class=\"jsstringcolor\" style=\"color:green\">'light'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> value = { theme, toggle: () =&gt; setTheme(t =&gt; (t === <span class=\"jsstringcolor\" style=\"color:green\">'light'</span> ? <span class=\"jsstringcolor\" style=\"color:green\">'dark'</span> : <span class=\"jsstringcolor\" style=\"color:green\">'light'</span>)) };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> &lt;ThemeContext.<span class=\"jspropertycolor\" style=\"color:black\">Provider</span> value={value}&gt;{children}&lt;/ThemeContext.<span class=\"jspropertycolor\" style=\"color:black\">Provider</span>&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> useTheme() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> ctx = React.<span class=\"jspropertycolor\" style=\"color:black\">useContext</span>(ThemeContext);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (!ctx) <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Error(<span class=\"jsstringcolor\" style=\"color:green\">'useTheme must be used within ThemeProvider'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> ctx;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// src/vite-env.d.ts\n/// <reference types=\"vite/client\" />",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// src/vite-env.d.ts<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"jsregexpcolor\" style=\"color:#e90\">///</span> &lt;reference types=<span class=\"jsstringcolor\" style=\"color:green\">\"vite/client\"</span> /&gt;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "{\n\"compilerOptions\": {\n\"types\": [\"vite/client\"]\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"compilerOptions\"</span>: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"types\"</span>: [<span class=\"jsstringcolor\" style=\"color:green\">\"vite/client\"</span>]<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "{\n\"compilerOptions\": {\n\"baseUrl\": \".\",\n\"paths\": {\n\"@/*\": [\"src/*\"]\n\n}\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"compilerOptions\"</span>: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"baseUrl\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\".\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"paths\"</span>: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jsstringcolor\" style=\"color:green\">\"@/*\"</span>: [<span class=\"jsstringcolor\" style=\"color:green\">\"src/*\"</span>]<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_react.php"
      }
    },
    {
      "title": "TypeScript Tooling",
      "code": [
        {
          "text": "# Install ESLint with TypeScript support\nnpm install --save-dev eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin",
          "html": "# Install ESLint with TypeScript support<br/>\nnpm install --save-dev eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin"
        },
        {
          "text": "// .eslintrc.json\n{\n\"root\": true,\n\"parser\": \"@typescript-eslint/parser\",\n\"plugins\": [\"@typescript-eslint\"],\n\"extends\": [\n\"eslint:recommended\",\n\"plugin:@typescript-eslint/recommended\",\n\"plugin:@typescript-eslint/recommended-requiring-type-checking\"\n],\n\"parserOptions\": {\n\"project\": \"./tsconfig.json\",\n\"ecmaVersion\": 2020,\n\"sourceType\": \"module\"\n},\n\"rules\": {\n\"@typescript-eslint/explicit-function-return-type\": \"warn\",\n\"@typescript-eslint/no-explicit-any\": \"warn\",\n\"@typescript-eslint/no-unused-vars\": [\"error\", { \"argsIgnorePattern\": \"^_\" }]\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// .eslintrc.json<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"root\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"parser\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"@typescript-eslint/parser\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"plugins\"</span>: [<span class=\"jsstringcolor\" style=\"color:green\">\"@typescript-eslint\"</span>],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"extends\"</span>: [<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"eslint:recommended\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"plugin:@typescript-eslint/recommended\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"plugin:@typescript-eslint/recommended-requiring-type-checking\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  ],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"parserOptions\"</span>: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"project\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"./tsconfig.json\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"ecmaVersion\"</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">2020</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"sourceType\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"module\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"rules\"</span>: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"@typescript-eslint/explicit-function-return-type\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"warn\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"@typescript-eslint/no-explicit-any\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"warn\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"@typescript-eslint/no-unused-vars\"</span>: [<span class=\"jsstringcolor\" style=\"color:green\">\"error\"</span>, { <span class=\"jsstringcolor\" style=\"color:green\">\"argsIgnorePattern\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"^_\"</span> }]<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// package.json\n{\n\"scripts\": {\n\"lint\": \"eslint . --ext .ts,.tsx\",\n\"lint:fix\": \"eslint . --ext .ts,.tsx --fix\",\n\"type-check\": \"tsc --noEmit\"\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// package.json<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"scripts\"</span>: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"lint\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"eslint . --ext .ts,.tsx\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"lint:fix\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"eslint . --ext .ts,.tsx --fix\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"type-check\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"tsc --noEmit\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "# Install Prettier and related packages\nnpm install --save-dev prettier eslint-config-prettier eslint-plugin-prettier",
          "html": "# Install Prettier and related packages<br/>\nnpm install --save-dev prettier eslint-config-prettier eslint-plugin-prettier"
        },
        {
          "text": "// .prettierrc\n{\n\"semi\": true,\n\"singleQuote\": true,\n\"tabWidth\": 2,\n\"printWidth\": 100,\n\"trailingComma\": \"es5\",\n\"bracketSpacing\": true,\n\"arrowParens\": \"avoid\"\n}\n\n// .prettierignore\nnode_modules\nbuild\ndist\n.next\n.vscode",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// .prettierrc<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"semi\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"singleQuote\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"tabWidth\"</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"printWidth\"</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">100</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"trailingComma\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"es5\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"bracketSpacing\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"arrowParens\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"avoid\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// .prettierignore<br/></span>\nnode_modules<br/>\nbuild<br/>\ndist<br/>\n.<span class=\"jspropertycolor\" style=\"color:black\">next</span><br/>\n.<span class=\"jspropertycolor\" style=\"color:black\">vscode</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// .eslintrc.json\n{\n\"extends\": [\n// ... other configs\n\"plugin:prettier/recommended\" // Must be last in the array\n]\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// .eslintrc.json<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"extends\"</span>: [<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// ... other configs<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"plugin:prettier/recommended\"</span> <span class=\"commentcolor\" style=\"color:slategray\">// Must be last in the array<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  ]<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "npm install --save-dev eslint-config-prettier eslint-plugin-prettier\n# In your .eslintrc.js or .eslintrc.json, add:\n{\n\"extends\": [\"plugin:prettier/recommended\"]\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\nnpm install --save-dev eslint-config-prettier eslint-plugin-prettier<br/>\n# In your .<span class=\"jspropertycolor\" style=\"color:black\">eslintrc</span>.<span class=\"jspropertycolor\" style=\"color:black\">js</span> or .<span class=\"jspropertycolor\" style=\"color:black\">eslintrc</span>.<span class=\"jspropertycolor\" style=\"color:black\">json</span>, add:<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"extends\"</span>: [<span class=\"jsstringcolor\" style=\"color:green\">\"plugin:prettier/recommended\"</span>]<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "# Create a new project with React + TypeScript\nnpm create vite@latest my-app -- --template react-ts\n\n# Navigate to project directory\ncd my-app\n\n# Install dependencies\nnpm install\n\n# Start development server\nnpm run dev",
          "html": "# Create a new project with React + TypeScript<br/>\nnpm create vite@latest my-app -- --template react-ts<br/>\n<br/>\n# Navigate to project directory<br/>\ncd my-app<br/>\n<br/>\n# Install dependencies<br/>\nnpm install<br/>\n<br/>\n# Start development server<br/>\nnpm run dev"
        },
        {
          "text": "// webpack.config.js\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\nentry: './src/index.tsx',\nmodule: {\nrules: [\n{\ntest: /\\.(ts|tsx)$/,\nuse: 'ts-loader',\nexclude: /node_modules/,\n},\n{\ntest: /\\.css$/,\nuse: ['style-loader', 'css-loader'],\n},\n],\n},\nresolve: {\nextensions: ['.tsx', '.ts', '.js'],\n},\noutput: {\nfilename: 'bundle.js',\npath: path.resolve(__dirname, 'dist'),\n},\nplugins: [\nnew HtmlWebpackPlugin({\ntemplate: './public/index.html',\n}),\n],\ndevServer: {\nstatic: path.join(__dirname, 'dist'),\ncompress: true,\nport: 3000,\nhot: true,\n},\n};",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// webpack.config.js<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> path = require(<span class=\"jsstringcolor\" style=\"color:green\">'path'</span>);<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> HtmlWebpackPlugin = require(<span class=\"jsstringcolor\" style=\"color:green\">'html-webpack-plugin'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\nmodule.<span class=\"jspropertycolor\" style=\"color:black\">exports</span> = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  entry: <span class=\"jsstringcolor\" style=\"color:green\">'./src/index.tsx'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  module: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    rules: [<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        test: <span class=\"jsregexpcolor\" style=\"color:#e90\">/\\.(ts|tsx)$/</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        use: <span class=\"jsstringcolor\" style=\"color:green\">'ts-loader'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        exclude: <span class=\"jsregexpcolor\" style=\"color:#e90\">/node_modules/</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        test: <span class=\"jsregexpcolor\" style=\"color:#e90\">/\\.css$/</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        use: [<span class=\"jsstringcolor\" style=\"color:green\">'style-loader'</span>, <span class=\"jsstringcolor\" style=\"color:green\">'css-loader'</span>],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    ],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  resolve: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    extensions: [<span class=\"jsstringcolor\" style=\"color:green\">'.tsx'</span>, <span class=\"jsstringcolor\" style=\"color:green\">'.ts'</span>, <span class=\"jsstringcolor\" style=\"color:green\">'.js'</span>],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  output: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    filename: <span class=\"jsstringcolor\" style=\"color:green\">'bundle.js'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    path: path.<span class=\"jspropertycolor\" style=\"color:black\">resolve</span>(__dirname, <span class=\"jsstringcolor\" style=\"color:green\">'dist'</span>),<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  plugins: [<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> HtmlWebpackPlugin({<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      template: <span class=\"jsstringcolor\" style=\"color:green\">'./public/index.html'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }),<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  ],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  devServer: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">static</span>: path.<span class=\"jspropertycolor\" style=\"color:black\">join</span>(__dirname, <span class=\"jsstringcolor\" style=\"color:green\">'dist'</span>),<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    compress: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    port: <span class=\"jsnumbercolor\" style=\"color:#905\">3000</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    hot: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// tsconfig.json\n{\n\"compilerOptions\": {\n\"target\": \"es2020\",\n\"module\": \"esnext\",\n\"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n\"allowJs\": true,\n\"skipLibCheck\": true,\n\"esModuleInterop\": true,\n\"allowSyntheticDefaultImports\": true,\n\"strict\": true,\n\"forceConsistentCasingInFileNames\": true,\n\"moduleResolution\": \"node\",\n\"resolveJsonModule\": true,\n\"isolatedModules\": true,\n\"noEmit\": true,\n\"jsx\": \"react-jsx\",\n\"baseUrl\": \".\",\n\"paths\": {\n\"@/*\": [\"src/*\"]\n}\n},\n\"include\": [\"src\"],\n\"exclude\": [\"node_modules\"]\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// tsconfig.json<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"compilerOptions\"</span>: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"target\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"es2020\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"module\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"esnext\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"lib\"</span>: [<span class=\"jsstringcolor\" style=\"color:green\">\"dom\"</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"dom.iterable\"</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"esnext\"</span>],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"allowJs\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"skipLibCheck\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"esModuleInterop\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"allowSyntheticDefaultImports\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"strict\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"forceConsistentCasingInFileNames\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"moduleResolution\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"node\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"resolveJsonModule\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"isolatedModules\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"noEmit\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"jsx\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"react-jsx\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"baseUrl\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\".\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"paths\"</span>: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"@/*\"</span>: [<span class=\"jsstringcolor\" style=\"color:green\">\"src/*\"</span>]<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"include\"</span>: [<span class=\"jsstringcolor\" style=\"color:green\">\"src\"</span>],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"exclude\"</span>: [<span class=\"jsstringcolor\" style=\"color:green\">\"node_modules\"</span>]<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// .vscode/settings.json\n{\n\"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n\"editor.formatOnSave\": true,\n\"editor.codeActionsOnSave\": {\n\"source.fixAll.eslint\": true,\n\"source.organizeImports\": true\n},\n\"eslint.validate\": [\"javascript\", \"javascriptreact\", \"typescript\", \"typescriptreact\"],\n\"typescript.tsdk\": \"node_modules/typescript/lib\",\n\"typescript.preferences.importModuleSpecifier\": \"non-relative\"\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// .vscode/settings.json<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"editor.defaultFormatter\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"esbenp.prettier-vscode\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"editor.formatOnSave\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"editor.codeActionsOnSave\"</span>: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"source.fixAll.eslint\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"source.organizeImports\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"eslint.validate\"</span>: [<span class=\"jsstringcolor\" style=\"color:green\">\"javascript\"</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"javascriptreact\"</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"typescript\"</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"typescriptreact\"</span>],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"typescript.tsdk\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"node_modules/typescript/lib\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"typescript.preferences.importModuleSpecifier\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"non-relative\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// .vscode/launch.json\n{\n\"version\": \"0.2.0\",\n\"configurations\": [\n{\n\"type\": \"chrome\",\n\"request\": \"launch\",\n\"name\": \"Launch Chrome against localhost\",\n\"url\": \"http://localhost:3000\",\n\"webRoot\": \"${workspaceFolder}\",\n\"sourceMaps\": true,\n\"sourceMapPathOverrides\": {\n\"webpack:///./~/*\": \"${workspaceFolder}/node_modules/*\",\n\"webpack:///./*\": \"${workspaceFolder}/src/*\"\n}\n},\n{\n\"type\": \"node\",\n\"request\": \"launch\",\n\"name\": \"Debug Tests\",\n\"runtimeExecutable\": \"${workspaceRoot}/node_modules/.bin/jest\",\n\"args\": [\"--runInBand\", \"--watchAll=false\"],\n\"console\": \"integratedTerminal\",\n\"internalConsoleOptions\": \"neverOpen\",\n\"sourceMaps\": true\n}\n]\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// .vscode/launch.json<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"version\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"0.2.0\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"configurations\"</span>: [<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"type\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"chrome\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"request\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"launch\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"name\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"Launch Chrome against localhost\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"url\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"http://localhost:3000\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"webRoot\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"${workspaceFolder}\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"sourceMaps\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"sourceMapPathOverrides\"</span>: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jsstringcolor\" style=\"color:green\">\"webpack:///./~/*\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"${workspaceFolder}/node_modules/*\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jsstringcolor\" style=\"color:green\">\"webpack:///./*\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"${workspaceFolder}/src/*\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"type\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"node\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"request\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"launch\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"name\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"Debug Tests\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"runtimeExecutable\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"${workspaceRoot}/node_modules/.bin/jest\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"args\"</span>: [<span class=\"jsstringcolor\" style=\"color:green\">\"--runInBand\"</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"--watchAll=false\"</span>],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"console\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"integratedTerminal\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"internalConsoleOptions\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"neverOpen\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"sourceMaps\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  ]<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "# Install testing dependencies\nnpm install --save-dev jest @types/jest ts-jest @testing-library/react @testing-library/jest-dom @testing-library/user-event",
          "html": "# Install testing dependencies<br/>\nnpm install --save-dev jest @types/jest ts-jest @testing-library/react @testing-library/jest-dom @testing-library/user-event"
        },
        {
          "text": "// jest.config.js\nmodule.exports = {\npreset: 'ts-jest',\ntestEnvironment: 'jsdom',\nsetupFilesAfterEnv: ['@testing-library/jest-dom'],\nmoduleNameMapper: {\n'^@/(.*)$': '\n/src/$1'\n,\n'\\\\\\.(css|less|scss|sass)$': 'identity-obj-proxy',\n},\ntransform: {\n'^.+\\\\\\.tsx?$': 'ts-jest',\n},\ntestMatch: ['**/__tests__/**/*.test.(ts|tsx)'],\n};",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// jest.config.js<br/></span>\nmodule.<span class=\"jspropertycolor\" style=\"color:black\">exports</span> = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  preset: <span class=\"jsstringcolor\" style=\"color:green\">'ts-jest'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  testEnvironment: <span class=\"jsstringcolor\" style=\"color:green\">'jsdom'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  setupFilesAfterEnv: [<span class=\"jsstringcolor\" style=\"color:green\">'@testing-library/jest-dom'</span>],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  moduleNameMapper: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">'^@/(.*)$'</span>: <span class=\"jsstringcolor\" style=\"color:green\">'<rootdir>/src/$1'</rootdir></span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">'\\\\\\.(css|less|scss|sass)$'</span>: <span class=\"jsstringcolor\" style=\"color:green\">'identity-obj-proxy'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  transform: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">'^.+\\\\\\.tsx?$'</span>: <span class=\"jsstringcolor\" style=\"color:green\">'ts-jest'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  testMatch: [<span class=\"jsstringcolor\" style=\"color:green\">'**/__tests__/**/*.test.(ts|tsx)'</span>],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/>\n </span>"
        },
        {
          "text": "// src/__tests__/Button.test.tsx\nimport React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport Button from '../components/Button';\n\ndescribe('Button', () => {\nit('renders button with correct text', () => {\nrender(<Button>Click me</Button>);\nexpect(screen.getByRole('button', { name: /click me/i })).toBeInTheDocument();\n});\n\nit('calls onClick when clicked', () => {\nconst handleClick = jest.fn();\nrender(<Button onClick={handleClick}>Click me</Button>);\n\nfireEvent.click(screen.getByRole('button'));\nexpect(handleClick).toHaveBeenCalledTimes(1);\n});\n});",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// src/__tests__/Button.test.tsx<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">import</span> React from <span class=\"jsstringcolor\" style=\"color:green\">'react'</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">import</span> { render, screen, fireEvent } from <span class=\"jsstringcolor\" style=\"color:green\">'@testing-library/react'</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">import</span> <span class=\"jsstringcolor\" style=\"color:green\">'@testing-library/jest-dom'</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">import</span> Button from <span class=\"jsstringcolor\" style=\"color:green\">'../components/Button'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\ndescribe(<span class=\"jsstringcolor\" style=\"color:green\">'Button'</span>, () =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  it(<span class=\"jsstringcolor\" style=\"color:green\">'renders button with correct text'</span>, () =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    render(&lt;Button&gt;Click me&lt;/Button&gt;);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    expect(screen.<span class=\"jspropertycolor\" style=\"color:black\">getByRole</span>(<span class=\"jsstringcolor\" style=\"color:green\">'button'</span>, { name: <span class=\"jsregexpcolor\" style=\"color:#e90\">/click me/i</span> })).<span class=\"jspropertycolor\" style=\"color:black\">toBeInTheDocument</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  it(<span class=\"jsstringcolor\" style=\"color:green\">'calls onClick when clicked'</span>, () =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> handleClick = jest.<span class=\"jspropertycolor\" style=\"color:black\">fn</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    render(&lt;Button onClick={handleClick}&gt;Click me&lt;/Button&gt;);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    fireEvent.<span class=\"jspropertycolor\" style=\"color:black\">click</span>(screen.<span class=\"jspropertycolor\" style=\"color:black\">getByRole</span>(<span class=\"jsstringcolor\" style=\"color:green\">'button'</span>));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    expect(handleClick).<span class=\"jspropertycolor\" style=\"color:black\">toHaveBeenCalledTimes</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_tooling.php"
      }
    },
    {
      "title": "TypeScript Advanced Types",
      "code": [
        {
          "text": "// Convert all properties to boolean\ntype Flags<T> = {\n[K in keyof T]: boolean;\n};\n\ninterface User {\nid: number;\nname: string;\nemail: string;\n}\n\ntype UserFlags = Flags<User>;\n// Equivalent to:\n// {\n//   id: boolean;\n//   name: boolean;\n//   email: boolean;\n// }",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Convert all properties to boolean<br/></span>\ntype Flags&lt;T&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  [K <span class=\"jskeywordcolor\" style=\"color:#005cc5\">in</span> keyof T]: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> User {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  id: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  email: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\ntype UserFlags = Flags&lt;User&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Equivalent to:<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// {<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">//   id: boolean;<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">//   name: boolean;<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">//   email: boolean;<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// }<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// Make all properties optional\ninterface Todo {\ntitle: string;\ndescription: string;\ncompleted: boolean;\n}\n\ntype OptionalTodo = {\n[K in keyof Todo]?: Todo[K];\n};\n\n// Remove 'readonly' and '?' modifiers\ntype Concrete<T> = {\n-readonly [K in keyof T]-?: T[K];\n};\n\n// Add 'readonly' and 'required' to all properties\ntype ReadonlyRequired<T> = {\n+readonly [K in keyof T]-?: T[K];\n};",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Make all properties optional<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Todo {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  title: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  description: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  completed: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\ntype OptionalTodo = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  [K <span class=\"jskeywordcolor\" style=\"color:#005cc5\">in</span> keyof Todo]?: Todo[K];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Remove 'readonly' and '?' modifiers<br/></span>\ntype Concrete&lt;T&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  -readonly [K <span class=\"jskeywordcolor\" style=\"color:#005cc5\">in</span> keyof T]-?: T[K];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Add 'readonly' and 'required' to all properties<br/></span>\ntype ReadonlyRequired&lt;T&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  +readonly [K <span class=\"jskeywordcolor\" style=\"color:#005cc5\">in</span> keyof T]-?: T[K];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// Add prefix to all property names\ntype Getters<T> = {\n[K in keyof T as `get${Capitalize<string & K>}`]: () => T[K];\n};\n\ntype UserGetters = Getters<User>;\n// {\n//   getId: () => number;\n//   getName: () => string;\n//   getEmail: () => string;\n// }\n\n// Filter out properties\ntype MethodsOnly<T> = {\n[K in keyof T as T[K] extends Function ? K : never]: T[K];\n};",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Add prefix to all property names<br/></span>\ntype Getters&lt;T&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  [K <span class=\"jskeywordcolor\" style=\"color:#005cc5\">in</span> keyof T as <span class=\"jsstringtempcolor\" style=\"color:#f50\">`get${Capitalize&lt;string &amp; K&gt;}`</span>]: () =&gt; T[K];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\ntype UserGetters = Getters&lt;User&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// {<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">//   getId: () =&gt; number;<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">//   getName: () =&gt; string;<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">//   getEmail: () =&gt; string;<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// }<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Filter out properties<br/></span>\ntype MethodsOnly&lt;T&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  [K <span class=\"jskeywordcolor\" style=\"color:#005cc5\">in</span> keyof T as T[K] <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> Function ? K : never]: T[K];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "type IsString<T> = T extends string ? true : false;\n\ntype A = IsString<string>;    // true\ntype B = IsString<number>;    // false\ntype C = IsString<'hello'>;    // true\ntype D = IsString<string | number>; // boolean\n\n// Extract array element type\ntype ArrayElement<T> = T extends (infer U)[] ? U : never;\ntype Numbers = ArrayElement<number[]>; // number",
          "html": "<span class=\"jscolor\" style=\"color:black\">\ntype IsString&lt;T&gt; = T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> string ? <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span> : <span class=\"jskeywordcolor\" style=\"color:#005cc5\">false</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\ntype A = IsString&lt;string&gt;;    <span class=\"commentcolor\" style=\"color:slategray\">// true<br/></span>\ntype B = IsString&lt;number&gt;;    <span class=\"commentcolor\" style=\"color:slategray\">// false<br/></span>\ntype C = IsString&lt;<span class=\"jsstringcolor\" style=\"color:green\">'hello'</span>&gt;;    <span class=\"commentcolor\" style=\"color:slategray\">// true<br/></span>\ntype D = IsString&lt;string | number&gt;; <span class=\"commentcolor\" style=\"color:slategray\">// boolean<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Extract array element type<br/></span>\ntype ArrayElement&lt;T&gt; = T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> (infer U)[] ? U : never;<br/>\ntype Numbers = ArrayElement&lt;number[]&gt;; <span class=\"commentcolor\" style=\"color:slategray\">// number<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// Get return type of a function\ntype ReturnType<T> = T extends (...args: any[]) => infer R ? R : any;\n\n// Get parameter types as a tuple\ntype Parameters<T> = T extends (...args: infer P) => any ? P : never;\n\n// Get constructor parameter types\ntype ConstructorParameters<T extends new (...args: any) => any> =\nT extends new (...args: infer P) => any ? P : never;\n\n// Get instance type from a constructor\ntype InstanceType<T extends new (...args: any) => any> =\nT extends new (...args: any) => infer R ? R : any;",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Get return type of a function<br/></span>\ntype ReturnType&lt;T&gt; = T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> (.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\">args</span>: any[]) =&gt; infer R ? R : any;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Get parameter types as a tuple<br/></span>\ntype Parameters&lt;T&gt; = T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> (.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\">args</span>: infer P) =&gt; any ? P : never;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Get constructor parameter types<br/></span>\ntype ConstructorParameters&lt;T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> (.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\">args</span>: any) =&gt; any&gt; =<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> (.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\">args</span>: infer P) =&gt; any ? P : never;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Get instance type from a constructor<br/></span>\ntype InstanceType&lt;T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> (.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\">args</span>: any) =&gt; any&gt; =<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> (.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\">args</span>: any) =&gt; infer R ? R : any;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// Without distribution\ntype ToArrayNonDist<T> = T extends any ? T[] : never;\ntype StrOrNumArr = ToArrayNonDist<string | number>; // (string | number)[]\n\n// With distribution\ntype ToArray<T> = [T] extends [any] ? T[] : never;\ntype StrOrNumArr2 = ToArray<string | number>; // string[] | number[]\n\n// Filter out non-string types\ntype FilterStrings<T> = T extends string ? T : never;\ntype Letters = FilterStrings<'a' | 'b' | 1 | 2 | 'c'>; // 'a' | 'b' | 'c'",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Without distribution<br/></span>\ntype ToArrayNonDist&lt;T&gt; = T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> any ? T[] : never;<br/>\ntype StrOrNumArr = ToArrayNonDist&lt;string | number&gt;; <span class=\"commentcolor\" style=\"color:slategray\">// (string | number)[]<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// With distribution<br/></span>\ntype ToArray&lt;T&gt; = [T] <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> [any] ? T[] : never;<br/>\ntype StrOrNumArr2 = ToArray&lt;string | number&gt;; <span class=\"commentcolor\" style=\"color:slategray\">// string[] | number[]<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Filter out non-string types<br/></span>\ntype FilterStrings&lt;T&gt; = T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> string ? T : never;<br/>\ntype Letters = FilterStrings&lt;<span class=\"jsstringcolor\" style=\"color:green\">'a'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'b'</span> | <span class=\"jsnumbercolor\" style=\"color:#905\">1</span> | <span class=\"jsnumbercolor\" style=\"color:#905\">2</span> | <span class=\"jsstringcolor\" style=\"color:green\">'c'</span>&gt;; <span class=\"commentcolor\" style=\"color:slategray\">// 'a' | 'b' | 'c'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "type Greeting = `Hello, ${string}`;\n\nconst validGreeting: Greeting = 'Hello, World!';\nconst invalidGreeting: Greeting = 'Hi there!'; // Error\n\n// With unions\ntype Color = 'red' | 'green' | 'blue';\ntype Size = 'small' | 'medium' | 'large';\n\ntype Style = `${Color}-${Size}`;\n// 'red-small' | 'red-medium' | 'red-large' |\n// 'green-small' | 'green-medium' | 'green-large' |\n// 'blue-small' | 'blue-medium' | 'blue-large'",
          "html": "<span class=\"jscolor\" style=\"color:black\">\ntype Greeting = <span class=\"jsstringtempcolor\" style=\"color:#f50\">`Hello, ${string}`</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> validGreeting: Greeting = <span class=\"jsstringcolor\" style=\"color:green\">'Hello, World!'</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> invalidGreeting: Greeting = <span class=\"jsstringcolor\" style=\"color:green\">'Hi there!'</span>; <span class=\"commentcolor\" style=\"color:slategray\">// Error<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// With unions<br/></span>\ntype Color = <span class=\"jsstringcolor\" style=\"color:green\">'red'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'green'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'blue'</span>;<br/>\ntype Size = <span class=\"jsstringcolor\" style=\"color:green\">'small'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'medium'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'large'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\ntype Style = <span class=\"jsstringtempcolor\" style=\"color:#f50\">`${Color}-${Size}`</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// 'red-small' | 'red-medium' | 'red-large' |<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// 'green-small' | 'green-medium' | 'green-large' |<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// 'blue-small' | 'blue-medium' | 'blue-large'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// Built-in string manipulation types\ntype T1 = Uppercase<'hello'>;  // 'HELLO'\ntype T2 = Lowercase<'WORLD'>;  // 'world'\ntype T3 = Capitalize<'typescript'>;  // 'Typescript'\ntype T4 = Uncapitalize<'TypeScript'>;  // 'typeScript'\n\n// Create an event handler type\ntype EventType = 'click' | 'change' | 'keydown';\ntype EventHandler = `on${Capitalize<EventType>}`;\n// 'onClick' | 'onChange' | 'onKeydown'",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Built-in string manipulation types<br/></span>\ntype T1 = Uppercase&lt;<span class=\"jsstringcolor\" style=\"color:green\">'hello'</span>&gt;;  <span class=\"commentcolor\" style=\"color:slategray\">// 'HELLO'<br/></span>\ntype T2 = Lowercase&lt;<span class=\"jsstringcolor\" style=\"color:green\">'WORLD'</span>&gt;;  <span class=\"commentcolor\" style=\"color:slategray\">// 'world'<br/></span>\ntype T3 = Capitalize&lt;<span class=\"jsstringcolor\" style=\"color:green\">'typescript'</span>&gt;;  <span class=\"commentcolor\" style=\"color:slategray\">// 'Typescript'<br/></span>\ntype T4 = Uncapitalize&lt;<span class=\"jsstringcolor\" style=\"color:green\">'TypeScript'</span>&gt;;  <span class=\"commentcolor\" style=\"color:slategray\">// 'typeScript'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Create an event handler type<br/></span>\ntype EventType = <span class=\"jsstringcolor\" style=\"color:green\">'click'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'change'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'keydown'</span>;<br/>\ntype EventHandler = <span class=\"jsstringtempcolor\" style=\"color:#f50\">`on${Capitalize&lt;EventType&gt;}`</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// 'onClick' | 'onChange' | 'onKeydown'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// Extract route parameters\ntype ExtractRouteParams<T> =\nT extends `${string}:${infer Param}/${infer Rest}`\n? { [K in Param | keyof ExtractRouteParams<`${Rest}`>]: string }\n: T extends `${string}:${infer Param}`\n? { [K in Param]: string }\n: {};\n\ntype Params = ExtractRouteParams<'/users/:userId/posts/:postId'>;\n// { userId: string; postId: string; }\n\n// Create a type-safe event emitter\ntype EventMap = {\nclick: { x: number; y: number };\nchange: string;\nkeydown: { key: string; code: number };\n};\n\ntype EventHandlers = {\n[K in keyof EventMap as `on${Capitalize<K>}`]: (event: EventMap[K]) => void;\n};",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Extract route parameters<br/></span>\ntype ExtractRouteParams&lt;T&gt; =<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> <span class=\"jsstringtempcolor\" style=\"color:#f50\">`${string}:${infer Param}/${infer Rest}`</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    ? { [K <span class=\"jskeywordcolor\" style=\"color:#005cc5\">in</span> Param | keyof ExtractRouteParams&lt;<span class=\"jsstringtempcolor\" style=\"color:#f50\">`${Rest}`</span>&gt;]: string }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    : T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> <span class=\"jsstringtempcolor\" style=\"color:#f50\">`${string}:${infer Param}`</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    ? { [K <span class=\"jskeywordcolor\" style=\"color:#005cc5\">in</span> Param]: string }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    : {};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\ntype Params = ExtractRouteParams&lt;<span class=\"jsstringcolor\" style=\"color:green\">'/users/:userId/posts/:postId'</span>&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// { userId: string; postId: string; }<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Create a type-safe event emitter<br/></span>\ntype EventMap = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  click: { x: number; y: number };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  change: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  keydown: { key: string; code: number };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\ntype EventHandlers = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  [K <span class=\"jskeywordcolor\" style=\"color:#005cc5\">in</span> keyof EventMap as <span class=\"jsstringtempcolor\" style=\"color:#f50\">`on${Capitalize&lt;K&gt;}`</span>]: (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">event</span>: EventMap[K]) =&gt; <span class=\"jskeywordcolor\" style=\"color:#005cc5\">void</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// Basic types\ninterface User {\nid: number;\nname: string;\nemail: string;\ncreatedAt: Date;\n}\n\n// Make all properties optional\ntype PartialUser = Partial<User>;\n\n// make all properties required\ntype RequiredUser = Required<PartialUser>;\n\n// make all properties read-only\ntype ReadonlyUser = Readonly<User>;\n\n// pick specific properties\ntype UserPreview = Pick<User, 'id' | 'name'>;\n\n// omit specific properties\ntype UserWithoutEmail = Omit<User, 'email'>;\n\n// extract property types\ntype UserId = User['id']; // number\ntype UserKeys = keyof User; // 'id' | 'name' | 'email' | 'createdAt'",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Basic types<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> User {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  id: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  email: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  createdAt: Date;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Make all properties optional<br/></span>\ntype PartialUser = Partial&lt;User&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// make all properties required<br/></span>\ntype RequiredUser = Required&lt;PartialUser&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// make all properties read-only<br/></span>\ntype ReadonlyUser = Readonly&lt;User&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// pick specific properties<br/></span>\ntype UserPreview = Pick&lt;User, <span class=\"jsstringcolor\" style=\"color:green\">'id'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'name'</span>&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// omit specific properties<br/></span>\ntype UserWithoutEmail = Omit&lt;User, <span class=\"jsstringcolor\" style=\"color:green\">'email'</span>&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// extract property types<br/></span>\ntype UserId = User[<span class=\"jsstringcolor\" style=\"color:green\">'id'</span>]; <span class=\"commentcolor\" style=\"color:slategray\">// number<br/></span>\ntype UserKeys = keyof User; <span class=\"commentcolor\" style=\"color:slategray\">// 'id' | 'name' | 'email' | 'createdAt'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// Create a type that excludes null and undefined\ntype NonNullable<T> = T extends null | undefined ? never : T;\n\n// Exclude types from a union\ntype Numbers = 1 | 2 | 3 | 'a' | 'b';\ntype JustNumbers = Exclude<Numbers, string>; // 1 | 2 | 3\n\n// Extract types from a union\ntype JustStrings = Extract<Numbers, string>; // 'a' | 'b'\n\n// Get the type that is not in the second type\ntype A = { a: string; b: number; c: boolean };\ntype B = { a: string; b: number };\ntype C = Omit<A, keyof B>; // { c: boolean }\n\n// Create a type with all properties as mutable\ntype Mutable<T> = {\n-readonly [K in keyof T]: T[K];\n};",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Create a type that excludes null and undefined<br/></span>\ntype NonNullable&lt;T&gt; = T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span> | undefined ? never : T;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Exclude types from a union<br/></span>\ntype Numbers = <span class=\"jsnumbercolor\" style=\"color:#905\">1</span> | <span class=\"jsnumbercolor\" style=\"color:#905\">2</span> | <span class=\"jsnumbercolor\" style=\"color:#905\">3</span> | <span class=\"jsstringcolor\" style=\"color:green\">'a'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'b'</span>;<br/>\ntype JustNumbers = Exclude&lt;Numbers, string&gt;; <span class=\"commentcolor\" style=\"color:slategray\">// 1 | 2 | 3<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Extract types from a union<br/></span>\ntype JustStrings = Extract&lt;Numbers, string&gt;; <span class=\"commentcolor\" style=\"color:slategray\">// 'a' | 'b'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Get the type that is not in the second type<br/></span>\ntype A = { a: string; b: number; c: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span> };<br/>\ntype B = { a: string; b: number };<br/>\ntype C = Omit&lt;A, keyof B&gt;; <span class=\"commentcolor\" style=\"color:slategray\">// { c: boolean }<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Create a type with all properties as mutable<br/></span>\ntype Mutable&lt;T&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  -readonly [K <span class=\"jskeywordcolor\" style=\"color:#005cc5\">in</span> keyof T]: T[K];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// Simple binary tree\ntype BinaryTree<T> = {\nvalue: T;\nleft?: BinaryTree<T>;\nright?: BinaryTree<T>;\n};\n\n// JSON-like data structure\ntype JSONValue =\n| string\n| number\n| boolean\n| null\n| JSONValue[]\n| { [key: string]: JSONValue };\n\n// Nested comments\ntype Comment = {\nid: number;\ncontent: string;\nreplies: Comment[];\ncreatedAt: Date;\n};",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Simple binary tree<br/></span>\ntype BinaryTree&lt;T&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  value: T;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  left?: BinaryTree&lt;T&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  right?: BinaryTree&lt;T&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// JSON-like data structure<br/></span>\ntype JSONValue =<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  | string<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  | number<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  | <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  | <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  | JSONValue[]<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  | { [key: string]: JSONValue };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Nested comments<br/></span>\ntype Comment = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  id: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  content: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  replies: Comment[];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  createdAt: Date;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// Type for a linked list\ntype LinkedList<T> = {\nvalue: T;\nnext: LinkedList<T> | null;\n};\n\n// Type for a directory structure\ntype File = {\ntype: 'file';\nname: string;\nsize: number;\n};\n\ntype Directory = {\ntype: 'directory';\nname: string;\nchildren: (File | Directory)[];\n};\n\n// Type for a state machine\ntype State = {\nvalue: string;\ntransitions: {\n[event: string]: State;\n};\n};\n\n// Type for a recursive function\ntype RecursiveFunction<T> = (x: T | RecursiveFunction<T>) => void;",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Type for a linked list<br/></span>\ntype LinkedList&lt;T&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  value: T;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  next: LinkedList&lt;T&gt; | <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Type for a directory structure<br/></span>\ntype File = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type: <span class=\"jsstringcolor\" style=\"color:green\">'file'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  size: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\ntype Directory = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type: <span class=\"jsstringcolor\" style=\"color:green\">'directory'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  children: (File | Directory)[];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Type for a state machine<br/></span>\ntype State = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  value: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  transitions: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    [<span class=\"jskeywordcolor\" style=\"color:#005cc5\">event</span>: string]: State;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Type for a recursive function<br/></span>\ntype RecursiveFunction&lt;T&gt; = (x: T | RecursiveFunction&lt;T&gt;) =&gt; <span class=\"jskeywordcolor\" style=\"color:#005cc5\">void</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_advanced_types.php"
      }
    },
    {
      "title": "TypeScript Type Guards",
      "code": [
        {
          "text": "// Simple type guard with typeof\nfunction formatValue(value: string | number): string {\nif (typeof value === 'string') {\n// TypeScript knows value is string here\nreturn value.trim().toUpperCase();\n} else {\n// TypeScript knows value is number here\nreturn value.toFixed(2);\n}\n}\n\n// Example usage\nconst result1 = formatValue('  hello  ');  // \"HELLO\"\nconst result2 = formatValue(42.1234);      // \"42.12\"",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Simple type guard with typeof<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> formatValue(value: string | number): string {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> value === <span class=\"jsstringcolor\" style=\"color:green\">'string'</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// TypeScript knows value is string here<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> value.<span class=\"jspropertycolor\" style=\"color:black\">trim</span>().<span class=\"jspropertycolor\" style=\"color:black\">toUpperCase</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// TypeScript knows value is number here<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> value.<span class=\"jspropertycolor\" style=\"color:black\">toFixed</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Example usage<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> result1 = formatValue(<span class=\"jsstringcolor\" style=\"color:green\">'  hello  '</span>);  <span class=\"commentcolor\" style=\"color:slategray\">// \"HELLO\"<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> result2 = formatValue(<span class=\"jsnumbercolor\" style=\"color:#905\">42.1234</span>);      <span class=\"commentcolor\" style=\"color:slategray\">// \"42.12\"<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "class Bird {\nfly() {\nconsole.log(\"Flying...\");\n}\n}\n\nclass Fish {\nswim() {\nconsole.log(\"Swimming...\");\n}\n}\n\nfunction move(animal: Bird | Fish) {\nif (animal instanceof Bird) {\n// TypeScript knows animal is Bird here\nanimal.fly();\n} else {\n// TypeScript knows animal is Fish here\nanimal.swim();\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> Bird {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  fly() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"Flying...\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> Fish {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  swim() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"Swimming...\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> move(animal: Bird | Fish) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (animal <span class=\"jskeywordcolor\" style=\"color:#005cc5\">instanceof</span> Bird) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// TypeScript knows animal is Bird here<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    animal.<span class=\"jspropertycolor\" style=\"color:black\">fly</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// TypeScript knows animal is Fish here<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    animal.<span class=\"jspropertycolor\" style=\"color:black\">swim</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "interface Car {\nmake: string;\nmodel: string;\nyear: number;\n}\n\ninterface Motorcycle {\nmake: string;\nmodel: string;\nyear: number;\ntype: \"sport\" | \"cruiser\";\n}\n\n// Type predicate function\nfunction isCar(vehicle: Car | Motorcycle): vehicle is Car {\nreturn (vehicle as Motorcycle).type === undefined;\n}\n\nfunction displayVehicleInfo(vehicle: Car | Motorcycle) {\nconsole.log(`Make: ${vehicle.make}, Model: ${vehicle.model}, Year: ${vehicle.year}`);\n\nif (isCar(vehicle)) {\n// TypeScript knows vehicle is Car here\nconsole.log(\"This is a car\");\n} else {\n// TypeScript knows vehicle is Motorcycle here\nconsole.log(`This is a ${vehicle.type} motorcycle`);\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Car {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  make: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  model: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  year: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Motorcycle {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  make: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  model: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  year: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type: <span class=\"jsstringcolor\" style=\"color:green\">\"sport\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"cruiser\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Type predicate function<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> isCar(vehicle: Car | Motorcycle): vehicle is Car {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> (vehicle as Motorcycle).<span class=\"jspropertycolor\" style=\"color:black\">type</span> === undefined;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> displayVehicleInfo(vehicle: Car | Motorcycle) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Make: ${vehicle.make}, Model: ${vehicle.model}, Year: ${vehicle.year}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (isCar(vehicle)) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// TypeScript knows vehicle is Car here<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"This is a car\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// TypeScript knows vehicle is Motorcycle here<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`This is a ${vehicle.type} motorcycle`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "interface Circle {\nkind: \"circle\";\nradius: number;\n}\n\ninterface Square {\nkind: \"square\";\nsideLength: number;\n}\n\ntype Shape = Circle | Square;\n\nfunction calculateArea(shape: Shape) {\nswitch (shape.kind) {\ncase \"circle\":\n// TypeScript knows shape is Circle here\nreturn Math.PI * shape.radius ** 2;\ncase \"square\":\n// TypeScript knows shape is Square here\nreturn shape.sideLength ** 2;\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Circle {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  kind: <span class=\"jsstringcolor\" style=\"color:green\">\"circle\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  radius: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Square {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  kind: <span class=\"jsstringcolor\" style=\"color:green\">\"square\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  sideLength: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\ntype Shape = Circle | Square;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> calculateArea(shape: Shape) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">switch</span> (shape.<span class=\"jspropertycolor\" style=\"color:black\">kind</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">case</span> <span class=\"jsstringcolor\" style=\"color:green\">\"circle\"</span>:<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"commentcolor\" style=\"color:slategray\">// TypeScript knows shape is Circle here<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> Math.<span class=\"jspropertycolor\" style=\"color:black\">PI</span> * shape.<span class=\"jspropertycolor\" style=\"color:black\">radius</span> ** <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">case</span> <span class=\"jsstringcolor\" style=\"color:green\">\"square\"</span>:<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"commentcolor\" style=\"color:slategray\">// TypeScript knows shape is Square here<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> shape.<span class=\"jspropertycolor\" style=\"color:black\">sideLength</span> ** <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "interface Dog {\nbark(): void;\n}\n\ninterface Cat {\nmeow(): void;\n}\n\nfunction makeSound(animal: Dog | Cat) {\nif (\"bark\" in animal) {\n// TypeScript knows animal is Dog here\nanimal.bark();\n} else {\n// TypeScript knows animal is Cat here\nanimal.meow();\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Dog {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  bark(): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">void</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Cat {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  meow(): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">void</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> makeSound(animal: Dog | Cat) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (<span class=\"jsstringcolor\" style=\"color:green\">\"bark\"</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">in</span> animal) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// TypeScript knows animal is Dog here<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    animal.<span class=\"jspropertycolor\" style=\"color:black\">bark</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// TypeScript knows animal is Cat here<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    animal.<span class=\"jspropertycolor\" style=\"color:black\">meow</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// Type assertion function\nfunction assertIsString(value: unknown): asserts value is string {\nif (typeof value !== 'string') {\nthrow new Error('Value is not a string');\n}\n}\n\n// Type assertion function with custom error\nfunction assert(condition: unknown, message: string): asserts condition {\nif (!condition) {\nthrow new Error(message);\n}\n}\n\n// Usage\nfunction processInput(input: unknown) {\nassertIsString(input);\n// input is now typed as string\nconsole.log(input.toUpperCase());\n}\n\n// With custom error\nfunction processNumber(value: unknown): number {\nassert(typeof value === 'number', 'Value must be a number');\n// value is now typed as number\nreturn value * 2;\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Type assertion function<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> assertIsString(value: unknown): asserts value is string {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> value !== <span class=\"jsstringcolor\" style=\"color:green\">'string'</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Error(<span class=\"jsstringcolor\" style=\"color:green\">'Value is not a string'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Type assertion function with custom error<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> assert(condition: unknown, message: string): asserts condition {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (!condition) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Error(message);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Usage<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> processInput(input: unknown) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  assertIsString(input);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// input is now typed as string<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(input.<span class=\"jspropertycolor\" style=\"color:black\">toUpperCase</span>());<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// With custom error<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> processNumber(value: unknown): number {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  assert(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> value === <span class=\"jsstringcolor\" style=\"color:green\">'number'</span>, <span class=\"jsstringcolor\" style=\"color:green\">'Value must be a number'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// value is now typed as number<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> value * <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_type_guards.php"
      }
    },
    {
      "title": "TypeScript Conditional Types",
      "code": [
        {
          "text": "type IsString<T> = T extends string ? true : false;\n\n// Usage examples\ntype Result1 = IsString<string>; // true\ntype Result2 = IsString<number>; // false\ntype Result3 = IsString<\"hello\">; // true (literal types extend their base types)\n\n// We can use this with variables too\nlet a: IsString<string>; // a has type 'true'\nlet b: IsString<number>; // b has type 'false'",
          "html": "<span class=\"jscolor\" style=\"color:black\">\ntype IsString&lt;T&gt; = T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> string ? <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span> : <span class=\"jskeywordcolor\" style=\"color:#005cc5\">false</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Usage examples<br/></span>\ntype Result1 = IsString&lt;string&gt;;  <span class=\"commentcolor\" style=\"color:slategray\">// true<br/></span>\ntype Result2 = IsString&lt;number&gt;;  <span class=\"commentcolor\" style=\"color:slategray\">// false<br/></span>\ntype Result3 = IsString&lt;<span class=\"jsstringcolor\" style=\"color:green\">\"hello\"</span>&gt;; <span class=\"commentcolor\" style=\"color:slategray\">// true (literal types extend their base types)<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// We can use this with variables too<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> a: IsString&lt;string&gt;; <span class=\"commentcolor\" style=\"color:slategray\">// a has type 'true'<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> b: IsString&lt;number&gt;; <span class=\"commentcolor\" style=\"color:slategray\">// b has type 'false'\n </span></span>"
        },
        {
          "text": "type ToArray<T> = T extends any ? T[] : never;\n\n// When used with a union type, it applies to each member of the union\ntype StringOrNumberArray = ToArray<string | number>;\n// This becomes ToArray<string> | ToArray<number>\n// Which becomes string[] | number[]\n\n// We can also extract specific types from a union\ntype ExtractString<T> = T extends string ? T : never;\ntype StringsOnly = ExtractString<string | number | boolean | \"hello\">;\n// Result: string | \"hello\"",
          "html": "<span class=\"jscolor\" style=\"color:black\">\ntype ToArray&lt;T&gt; = T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> any ? T[] : never;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// When used with a union type, it applies to each member of the union<br/></span>\ntype StringOrNumberArray = ToArray&lt;string | number&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// This becomes ToArray&lt;string&gt; | ToArray&lt;number&gt;<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Which becomes string[] | number[]<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// We can also extract specific types from a union<br/></span>\ntype ExtractString&lt;T&gt; = T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> string ? T : never;<br/>\ntype StringsOnly = ExtractString&lt;string | number | <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"hello\"</span>&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Result: string | \"hello\"\n </span></span>"
        },
        {
          "text": "// Extract the return type of a function type\ntype ReturnType<T> = T extends (...args: any[]) => infer R ? R : never;\n\n// Examples\nfunction greet() { return \"Hello, world!\"; }\nfunction getNumber() { return 42; }\n\ntype GreetReturnType = ReturnType<typeof greet>; // string\ntype NumberReturnType = ReturnType<typeof getNumber>; // number\n\n// Extract element type from array\ntype ElementType<T> = T extends (infer U)[] ? U : never;\ntype NumberArrayElement = ElementType<number[]>; // number\ntype StringArrayElement = ElementType<string[]>; // string",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Extract the return type of a function type<br/></span>\ntype ReturnType&lt;T&gt; = T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> (.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\">args</span>: any[]) =&gt; infer R ? R : never;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Examples<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> greet() { <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsstringcolor\" style=\"color:green\">\"Hello, world!\"</span>; }<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> getNumber() { <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsnumbercolor\" style=\"color:#905\">42</span>; }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\ntype GreetReturnType = ReturnType&lt;<span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> greet&gt;;   <span class=\"commentcolor\" style=\"color:slategray\">// string<br/></span>\ntype NumberReturnType = ReturnType&lt;<span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> getNumber&gt;; <span class=\"commentcolor\" style=\"color:slategray\">// number<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Extract element type from array<br/></span>\ntype ElementType&lt;T&gt; = T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> (infer U)[] ? U : never;<br/>\ntype NumberArrayElement = ElementType&lt;number[]&gt;; <span class=\"commentcolor\" style=\"color:slategray\">// number<br/></span>\ntype StringArrayElement = ElementType&lt;string[]&gt;; <span class=\"commentcolor\" style=\"color:slategray\">// string\n </span></span>"
        },
        {
          "text": "// Extract<T, U> - Extracts types from T that are assignable to U\ntype OnlyStrings = Extract<string | number | boolean, string>; // string\n\n// Exclude<T, U> - Excludes types from T that are assignable to U\ntype NoStrings = Exclude<string | number | boolean, string>; // number | boolean\n\n// NonNullable<T> - Removes null and undefined from T\ntype NotNull = NonNullable<string | null | undefined>; // string\n\n// Parameters<T> - Extracts parameter types from a function type\ntype Params = Parameters<(a: string, b: number) => void>; // [string, number]\n\n// ReturnType<T> - Extracts the return type from a function type\ntype Return = ReturnType<() => string>; // string",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Extract&lt;T, U&gt; - Extracts types from T that are assignable to U<br/></span>\ntype OnlyStrings = Extract&lt;string | number | <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>, string&gt;; <span class=\"commentcolor\" style=\"color:slategray\">// string<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Exclude&lt;T, U&gt; - Excludes types from T that are assignable to U<br/></span>\ntype NoStrings = Exclude&lt;string | number | <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>, string&gt;; <span class=\"commentcolor\" style=\"color:slategray\">// number | boolean<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// NonNullable&lt;T&gt; - Removes null and undefined from T<br/></span>\ntype NotNull = NonNullable&lt;string | <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span> | undefined&gt;; <span class=\"commentcolor\" style=\"color:slategray\">// string<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Parameters&lt;T&gt; - Extracts parameter types from a function type<br/></span>\ntype Params = Parameters&lt;(a: string, b: number) =&gt; <span class=\"jskeywordcolor\" style=\"color:#005cc5\">void</span>&gt;; <span class=\"commentcolor\" style=\"color:slategray\">// [string, number]<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// ReturnType&lt;T&gt; - Extracts the return type from a function type<br/></span>\ntype Return = ReturnType&lt;() =&gt; string&gt;; <span class=\"commentcolor\" style=\"color:slategray\">// string\n </span></span>"
        },
        {
          "text": "// Deeply unwrap Promise types\ntype UnwrapPromise<T> = T extends Promise<infer U> ? UnwrapPromise<U> : T;\n\n// Examples\ntype A = UnwrapPromise<Promise<string>>; // string\ntype B = UnwrapPromise<Promise<Promise<number>>>; // number\ntype C = UnwrapPromise<boolean>; // boolean",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Deeply unwrap Promise types<br/></span>\ntype UnwrapPromise&lt;T&gt; = T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> Promise&lt;infer U&gt; ? UnwrapPromise&lt;U&gt; : T;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Examples<br/></span>\ntype A = UnwrapPromise&lt;Promise&lt;string&gt;&gt;;           <span class=\"commentcolor\" style=\"color:slategray\">// string<br/></span>\ntype B = UnwrapPromise&lt;Promise&lt;Promise&lt;number&gt;&gt;&gt;;   <span class=\"commentcolor\" style=\"color:slategray\">// number<br/></span>\ntype C = UnwrapPromise&lt;<span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>&gt;;                   <span class=\"commentcolor\" style=\"color:slategray\">// boolean\n </span></span>"
        },
        {
          "text": "type TypeName<T> =\nT extends string ? \"string\" :\nT extends number ? \"number\" :\nT extends boolean ? \"boolean\" :\nT extends undefined ? \"undefined\" :\nT extends Function ? \"function\" :\n\"object\";\n\n// Usage\ntype T0 = TypeName<string>; // \"string\"\ntype T1 = TypeName<42>; // \"number\"\ntype T2 = TypeName<true>; // \"boolean\"\ntype T3 = TypeName<() => void>; // \"function\"\ntype T4 = TypeName<Date[]>; // \"object\"",
          "html": "<span class=\"jscolor\" style=\"color:black\">\ntype TypeName&lt;T&gt; =<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> string  ? <span class=\"jsstringcolor\" style=\"color:green\">\"string\"</span> :<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> number  ? <span class=\"jsstringcolor\" style=\"color:green\">\"number\"</span> :<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span> ? <span class=\"jsstringcolor\" style=\"color:green\">\"boolean\"</span> :<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> undefined ? <span class=\"jsstringcolor\" style=\"color:green\">\"undefined\"</span> :<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> Function ? <span class=\"jsstringcolor\" style=\"color:green\">\"function\"</span> :<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"object\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Usage<br/></span>\ntype T0 = TypeName&lt;string&gt;;      <span class=\"commentcolor\" style=\"color:slategray\">// \"string\"<br/></span>\ntype T1 = TypeName&lt;<span class=\"jsnumbercolor\" style=\"color:#905\">42</span>&gt;;         <span class=\"commentcolor\" style=\"color:slategray\">// \"number\"<br/></span>\ntype T2 = TypeName&lt;<span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>&gt;;       <span class=\"commentcolor\" style=\"color:slategray\">// \"boolean\"<br/></span>\ntype T3 = TypeName&lt;() =&gt; <span class=\"jskeywordcolor\" style=\"color:#005cc5\">void</span>&gt;; <span class=\"commentcolor\" style=\"color:slategray\">// \"function\"<br/></span>\ntype T4 = TypeName&lt;Date[]&gt;;     <span class=\"commentcolor\" style=\"color:slategray\">// \"object\"\n </span></span>"
        },
        {
          "text": "// A function that returns different types based on input type\nfunction processValue<T>(value: T): T extends string\n? string\n: T extends number\n? number\n: T extends boolean\n? boolean\n: never {\n\nif (typeof value === \"string\") {\nreturn value.toUpperCase() as any; // Type assertion needed due to limitations\n} else if (typeof value === \"number\") {\nreturn (value * 2) as any;\n} else if (typeof value === \"boolean\") {\nreturn (!value) as any;\n} else {\nthrow new Error(\"Unsupported type\");\n}\n}\n\n// Usage\nconst stringResult = processValue(\"hello\"); // Returns \"HELLO\" (type is string)\nconst numberResult = processValue(10); // Returns 20 (type is number)\nconst boolResult = processValue(true); // Returns false (type is boolean)",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// A function that returns different types based on input type<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> processValue&lt;T&gt;(value: T): T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> string<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  ? string<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  : T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> number<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  ? number<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  : T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  ? <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  : never {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> value === <span class=\"jsstringcolor\" style=\"color:green\">\"string\"</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> value.<span class=\"jspropertycolor\" style=\"color:black\">toUpperCase</span>() as any; <span class=\"commentcolor\" style=\"color:slategray\">// Type assertion needed due to limitations<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> value === <span class=\"jsstringcolor\" style=\"color:green\">\"number\"</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> (value * <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>) as any;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> value === <span class=\"jsstringcolor\" style=\"color:green\">\"boolean\"</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> (!value) as any;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Error(<span class=\"jsstringcolor\" style=\"color:green\">\"Unsupported type\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Usage<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> stringResult = processValue(<span class=\"jsstringcolor\" style=\"color:green\">\"hello\"</span>); <span class=\"commentcolor\" style=\"color:slategray\">// Returns \"HELLO\" (type is string)<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> numberResult = processValue(<span class=\"jsnumbercolor\" style=\"color:#905\">10</span>);      <span class=\"commentcolor\" style=\"color:slategray\">// Returns 20 (type is number)<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> boolResult = processValue(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>);      <span class=\"commentcolor\" style=\"color:slategray\">// Returns false (type is boolean)<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_conditional_types.php"
      }
    },
    {
      "title": "TypeScript Mapped Types",
      "code": [
        {
          "text": "// Small example\ntype Person = { name: string; age: number };\ntype PartialPerson = { [P in keyof Person]?: Person[P] };\ntype ReadonlyPerson = { readonly [P in keyof Person]: Person[P] };",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Small example<br/></span>\ntype Person = { name: string; age: number };<br/>\ntype PartialPerson = { [P in keyof Person]?: Person[P] };<br/>\ntype ReadonlyPerson = { readonly [P in keyof Person]: Person[P] };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// Define an object type\ninterface Person {\nname: string;\nage: number;\nemail: string;\n}\n\n// Create a mapped type that makes all properties optional\ntype PartialPerson = {\n[P in keyof Person]?: Person[P];\n};\n\n// Usage\nconst partialPerson: PartialPerson = {\nname: \"John\"\n// age and email are optional\n};\n\n// Create a mapped type that makes all properties readonly\ntype ReadonlyPerson = {\nreadonly [P in keyof Person]: Person[P];\n};\n\n// Usage\nconst readonlyPerson: ReadonlyPerson = {\nname: \"Alice\",\nage: 30,\nemail: \"alice@example.com\"\n};\n\n// readonlyPerson.age = 31; // Error: Cannot assign to 'age' because it is a read-only property",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Define an object type<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Person {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  age: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  email: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Create a mapped type that makes all properties optional<br/></span>\ntype PartialPerson = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  [P <span class=\"jskeywordcolor\" style=\"color:#005cc5\">in</span> keyof Person]?: Person[P];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Usage<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> partialPerson: PartialPerson = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: <span class=\"jsstringcolor\" style=\"color:green\">\"John\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// age and email are optional<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Create a mapped type that makes all properties readonly<br/></span>\ntype ReadonlyPerson = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  readonly [P <span class=\"jskeywordcolor\" style=\"color:#005cc5\">in</span> keyof Person]: Person[P];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Usage<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> readonlyPerson: ReadonlyPerson = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: <span class=\"jsstringcolor\" style=\"color:green\">\"Alice\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  age: <span class=\"jsnumbercolor\" style=\"color:#905\">30</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  email: <span class=\"jsstringcolor\" style=\"color:green\">\"alice@example.com\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// readonlyPerson.age = 31; // Error: Cannot assign to 'age' because it is a read-only property\n </span></span>"
        },
        {
          "text": "interface User {\nid: number;\nname: string;\nemail: string;\nisAdmin: boolean;\n}\n\n// Partial<T> - Makes all properties optional\ntype PartialUser = Partial<User>;\n// Equivalent to: { id?: number; name?: string; email?: string; isAdmin?: boolean; }\n\n// Required<T> - Makes all properties required\ntype RequiredUser = Required<Partial<User>>;\n// Equivalent to: { id: number; name: string; email: string; isAdmin: boolean; }\n\n// Readonly<T> - Makes all properties readonly\ntype ReadonlyUser = Readonly<User>;\n// Equivalent to: { readonly id: number; readonly name: string; ... }\n\n// Pick<T, K> - Creates a type with a subset of properties from T\ntype UserCredentials = Pick<User, \"email\" | \"id\">;\n// Equivalent to: { email: string; id: number; }\n\n// Omit<T, K> - Creates a type by removing specified properties from T\ntype PublicUser = Omit<User, \"id\" | \"isAdmin\">;\n// Equivalent to: { name: string; email: string; }\n\n// Record<K, T> - Creates a type with specified keys and value types\ntype UserRoles = Record<\"admin\" | \"user\" | \"guest\", string>;\n// Equivalent to: { admin: string; user: string; guest: string; }",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> User {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  id: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  email: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  isAdmin: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Partial&lt;T&gt; - Makes all properties optional<br/></span>\ntype PartialUser = Partial&lt;User&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Equivalent to: { id?: number; name?: string; email?: string; isAdmin?: boolean; }<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Required&lt;T&gt; - Makes all properties required<br/></span>\ntype RequiredUser = Required&lt;Partial&lt;User&gt;&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Equivalent to: { id: number; name: string; email: string; isAdmin: boolean; }<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Readonly&lt;T&gt; - Makes all properties readonly<br/></span>\ntype ReadonlyUser = Readonly&lt;User&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Equivalent to: { readonly id: number; readonly name: string; ... }<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Pick&lt;T, K&gt; - Creates a type with a subset of properties from T<br/></span>\ntype UserCredentials = Pick&lt;User, <span class=\"jsstringcolor\" style=\"color:green\">\"email\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"id\"</span>&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Equivalent to: { email: string; id: number; }<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Omit&lt;T, K&gt; - Creates a type by removing specified properties from T<br/></span>\ntype PublicUser = Omit&lt;User, <span class=\"jsstringcolor\" style=\"color:green\">\"id\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"isAdmin\"</span>&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Equivalent to: { name: string; email: string; }<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Record&lt;K, T&gt; - Creates a type with specified keys and value types<br/></span>\ntype UserRoles = Record&lt;<span class=\"jsstringcolor\" style=\"color:green\">\"admin\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"user\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"guest\"</span>, string&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Equivalent to: { admin: string; user: string; guest: string; }\n </span></span>"
        },
        {
          "text": "// Base interface\ninterface Product {\nid: number;\nname: string;\nprice: number;\ninStock: boolean;\n}\n\n// Create a mapped type to convert all properties to string type\ntype StringifyProperties<T> = {\n[P in keyof T]: string;\n};\n\n// Usage\ntype StringProduct = StringifyProperties<Product>;\n// Equivalent to: { id: string; name: string; price: string; inStock: string; }\n\n// Create a mapped type that adds validation functions for each property\ntype Validator<T> = {\n[P in keyof T]: (value: T[P]) => boolean;\n};\n\n// Usage\nconst productValidator: Validator<Product> = {\nid: (id) => id > 0,\nname: (name) => name.length > 0,\nprice: (price) => price >= 0,\ninStock: (inStock) => typeof inStock === \"boolean\"\n};",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Base interface<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Product {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  id: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  price: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  inStock: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Create a mapped type to convert all properties to string type<br/></span>\ntype StringifyProperties&lt;T&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  [P <span class=\"jskeywordcolor\" style=\"color:#005cc5\">in</span> keyof T]: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Usage<br/></span>\ntype StringProduct = StringifyProperties&lt;Product&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Equivalent to: { id: string; name: string; price: string; inStock: string; }<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Create a mapped type that adds validation functions for each property<br/></span>\ntype Validator&lt;T&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  [P <span class=\"jskeywordcolor\" style=\"color:#005cc5\">in</span> keyof T]: (value: T[P]) =&gt; <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Usage<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> productValidator: Validator&lt;Product&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  id: (id) =&gt; id &gt; <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: (name) =&gt; name.<span class=\"jspropertycolor\" style=\"color:black\">length</span> &gt; <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  price: (price) =&gt; price &gt;= <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  inStock: (inStock) =&gt; <span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> inStock === <span class=\"jsstringcolor\" style=\"color:green\">\"boolean\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// Base interface with some readonly and optional properties\ninterface Configuration {\nreadonly apiKey: string;\nreadonly apiUrl: string;\ntimeout?: number;\nretries?: number;\n}\n\n// Remove readonly modifier from all properties\ntype Mutable<T> = {\n-readonly [P in keyof T]: T[P];\n};\n\n// Usage\ntype MutableConfig = Mutable<Configuration>;\n// Equivalent to: { apiKey: string; apiUrl: string; timeout?: number; retries?: number; }\n\n// Make all optional properties required\ntype RequiredProps<T> = {\n[P in keyof T]-?: T[P];\n};\n\n// Usage\ntype RequiredConfig = RequiredProps<Configuration>;\n// Equivalent to: { readonly apiKey: string; readonly apiUrl: string; timeout: number; retries: number; }",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Base interface with some readonly and optional properties<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Configuration {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  readonly apiKey: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  readonly apiUrl: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  timeout?: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  retries?: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Remove readonly modifier from all properties<br/></span>\ntype Mutable&lt;T&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  -readonly [P <span class=\"jskeywordcolor\" style=\"color:#005cc5\">in</span> keyof T]: T[P];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Usage<br/></span>\ntype MutableConfig = Mutable&lt;Configuration&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Equivalent to: { apiKey: string; apiUrl: string; timeout?: number; retries?: number; }<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Make all optional properties required<br/></span>\ntype RequiredProps&lt;T&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  [P <span class=\"jskeywordcolor\" style=\"color:#005cc5\">in</span> keyof T]-?: T[P];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Usage<br/></span>\ntype RequiredConfig = RequiredProps&lt;Configuration&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Equivalent to: { readonly apiKey: string; readonly apiUrl: string; timeout: number; retries: number; }\n </span></span>"
        },
        {
          "text": "// Base interface\ninterface ApiResponse {\ndata: unknown;\nstatus: number;\nmessage: string;\ntimestamp: number;\n}\n\n// Conditional mapped type: Convert each numeric property to a formatted string\ntype FormattedResponse<T> = {\n[P in keyof T]: T[P] extends number ? string : T[P];\n};\n\n// Usage\ntype FormattedApiResponse = FormattedResponse<ApiResponse>;\n// Equivalent to: { data: unknown; status: string; message: string; timestamp: string; }\n\n// Another example: Filter for only string properties\ntype StringPropsOnly<T> = {\n[P in keyof T as T[P] extends string ? P : never]: T[P];\n};\n\n// Usage\ntype ApiResponseStringProps = StringPropsOnly<ApiResponse>;\n// Equivalent to: { message: string; }",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Base interface<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> ApiResponse {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  data: unknown;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  status: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  message: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  timestamp: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Conditional mapped type: Convert each numeric property to a formatted string<br/></span>\ntype FormattedResponse&lt;T&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  [P <span class=\"jskeywordcolor\" style=\"color:#005cc5\">in</span> keyof T]: T[P] <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> number ? string : T[P];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Usage<br/></span>\ntype FormattedApiResponse = FormattedResponse&lt;ApiResponse&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Equivalent to: { data: unknown; status: string; message: string; timestamp: string; }<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Another example: Filter for only string properties<br/></span>\ntype StringPropsOnly&lt;T&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  [P <span class=\"jskeywordcolor\" style=\"color:#005cc5\">in</span> keyof T as T[P] <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> string ? P : never]: T[P];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Usage<br/></span>\ntype ApiResponseStringProps = StringPropsOnly&lt;ApiResponse&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Equivalent to: { message: string; }\n </span></span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_mapped_types.php"
      }
    },
    {
      "title": "TypeScript Type Inference",
      "code": [
        {
          "text": "// TypeScript infers these variable types\nlet name = \"Alice\"; // inferred as string\nlet age = 30; // inferred as number\nlet isActive = true; // inferred as boolean\nlet numbers = [1, 2, 3]; // inferred as number[]\nlet mixed = [1, \"two\", true]; // inferred as (string | number | boolean)[]\n\n// Using the inferred types\nname.toUpperCase(); // Works because name is inferred as string\nage.toFixed(2); // Works because age is inferred as number\n// name.toFixed(2); // Error: Property 'toFixed' does not exist on type 'string'",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// TypeScript infers these variable types<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> name = <span class=\"jsstringcolor\" style=\"color:green\">\"Alice\"</span>;           <span class=\"commentcolor\" style=\"color:slategray\">// inferred as string<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> age = <span class=\"jsnumbercolor\" style=\"color:#905\">30</span>;                 <span class=\"commentcolor\" style=\"color:slategray\">// inferred as number<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> isActive = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>;          <span class=\"commentcolor\" style=\"color:slategray\">// inferred as boolean<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> numbers = [<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">3</span>];      <span class=\"commentcolor\" style=\"color:slategray\">// inferred as number[]<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> mixed = [<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"two\"</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>]; <span class=\"commentcolor\" style=\"color:slategray\">// inferred as (string | number | boolean)[]<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Using the inferred types<br/></span>\nname.<span class=\"jspropertycolor\" style=\"color:black\">toUpperCase</span>();  <span class=\"commentcolor\" style=\"color:slategray\">// Works because name is inferred as string<br/></span>\nage.<span class=\"jspropertycolor\" style=\"color:black\">toFixed</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>);      <span class=\"commentcolor\" style=\"color:slategray\">// Works because age is inferred as number<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// name.toFixed(2);  // Error: Property 'toFixed' does not exist on type 'string'\n </span></span>"
        },
        {
          "text": "// Return type is inferred as string\nfunction greet(name: string) {\nreturn `Hello, ${name}!`;\n}\n\n// Return type is inferred as number\nfunction add(a: number, b: number) {\nreturn a + b;\n}\n\n// Return type is inferred as string | number\nfunction getValue(key: string) {\nif (key === \"name\") {\nreturn \"Alice\";\n} else {\nreturn 42;\n}\n}\n// Using the inferred return types\nlet greeting = greet(\"Bob\"); // inferred as string\nlet sum = add(5, 3); // inferred as number\nlet value = getValue(\"age\"); // inferred as string | number",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Return type is inferred as string<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> greet(name: string) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsstringtempcolor\" style=\"color:#f50\">`Hello, ${name}!`</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Return type is inferred as number<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> add(a: number, b: number) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> a + b;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Return type is inferred as string | number<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> getValue(key: string) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (key === <span class=\"jsstringcolor\" style=\"color:green\">\"name\"</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsstringcolor\" style=\"color:green\">\"Alice\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsnumbercolor\" style=\"color:#905\">42</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Using the inferred return types<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> greeting = greet(<span class=\"jsstringcolor\" style=\"color:green\">\"Bob\"</span>);     <span class=\"commentcolor\" style=\"color:slategray\">// inferred as string<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> sum = add(<span class=\"jsnumbercolor\" style=\"color:#905\">5</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">3</span>);             <span class=\"commentcolor\" style=\"color:slategray\">// inferred as number<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> value = getValue(<span class=\"jsstringcolor\" style=\"color:green\">\"age\"</span>);     <span class=\"commentcolor\" style=\"color:slategray\">// inferred as string | number<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// The type of the callback parameter is inferred from the array method context\nconst names = [\"Alice\", \"Bob\", \"Charlie\"];\n\n// Parameter 'name' is inferred as string\nnames.forEach(name => {\nconsole.log(name.toUpperCase());\n});\n\n// Parameter 'name' is inferred as string, and the return type is inferred as number\nconst nameLengths = names.map(name => {\nreturn name.length;\n});\n\n// nameLengths is inferred as number[]\n\n// Parameter types in event handlers are also inferred\ndocument.addEventListener(\"click\", event => {\n// 'event' is inferred as MouseEvent\nconsole.log(event.clientX, event.clientY);\n});",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// The type of the callback parameter is inferred from the array method context<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> names = [<span class=\"jsstringcolor\" style=\"color:green\">\"Alice\"</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"Bob\"</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"Charlie\"</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Parameter 'name' is inferred as string<br/></span>\nnames.<span class=\"jspropertycolor\" style=\"color:black\">forEach</span>(name =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(name.<span class=\"jspropertycolor\" style=\"color:black\">toUpperCase</span>());<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Parameter 'name' is inferred as string, and the return type is inferred as number<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> nameLengths = names.<span class=\"jspropertycolor\" style=\"color:black\">map</span>(name =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> name.<span class=\"jspropertycolor\" style=\"color:black\">length</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// nameLengths is inferred as number[]<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Parameter types in event handlers are also inferred<br/></span>\ndocument.<span class=\"jspropertycolor\" style=\"color:black\">addEventListener</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"click\"</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">event</span> =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// 'event' is inferred as MouseEvent<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">event</span>.<span class=\"jspropertycolor\" style=\"color:black\">clientX</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">event</span>.<span class=\"jspropertycolor\" style=\"color:black\">clientY</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// TypeScript infers the type of this object\nconst user = {\nid: 1,\nname: \"Alice\",\nemail: \"alice@example.com\",\nactive: true,\ndetails: {\nage: 30,\naddress: {\ncity: \"New York\",\ncountry: \"USA\"\n}\n}\n};\n\n// Accessing inferred properties\nconsole.log(user.name.toUpperCase());\nconsole.log(user.details.age.toFixed(0));\nconsole.log(user.details.address.city.toLowerCase());\n\n// Type errors would be caught\n// console.log(user.age); // Error: Property 'age' does not exist on type '...'\n// console.log(user.details.name); // Error: Property 'name' does not exist on type '...'\n// console.log(user.details.address.zip); // Error: Property 'zip' does not exist on type '...'",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// TypeScript infers the type of this object<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> user = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  id: <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: <span class=\"jsstringcolor\" style=\"color:green\">\"Alice\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  email: <span class=\"jsstringcolor\" style=\"color:green\">\"alice@example.com\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  active: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  details: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    age: <span class=\"jsnumbercolor\" style=\"color:#905\">30</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    address: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      city: <span class=\"jsstringcolor\" style=\"color:green\">\"New York\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      country: <span class=\"jsstringcolor\" style=\"color:green\">\"USA\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Accessing inferred properties<br/></span>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(user.<span class=\"jspropertycolor\" style=\"color:black\">name</span>.<span class=\"jspropertycolor\" style=\"color:black\">toUpperCase</span>());<br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(user.<span class=\"jspropertycolor\" style=\"color:black\">details</span>.<span class=\"jspropertycolor\" style=\"color:black\">age</span>.<span class=\"jspropertycolor\" style=\"color:black\">toFixed</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>));<br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(user.<span class=\"jspropertycolor\" style=\"color:black\">details</span>.<span class=\"jspropertycolor\" style=\"color:black\">address</span>.<span class=\"jspropertycolor\" style=\"color:black\">city</span>.<span class=\"jspropertycolor\" style=\"color:black\">toLowerCase</span>());<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Type errors would be caught<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// console.log(user.age);                 // Error: Property 'age' does not exist on type '...'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// console.log(user.details.name);        // Error: Property 'name' does not exist on type '...'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// console.log(user.details.address.zip); // Error: Property 'zip' does not exist on type '...'\n </span></span>"
        },
        {
          "text": "// Regular type inference (widens to string)\nlet name = \"Alice\";  // type: string\n\n// Const assertion (narrows to literal type)\nconst nameConst = \"Alice\" as const;  // type: \"Alice\"\n\n// With objects\nconst user = {\nid: 1,\nname: \"Alice\",\nroles: [\"admin\", \"user\"] as const  // readonly tuple\n} as const;\n\n// user.name = \"Bob\";  // Error: Cannot assign to 'name' because it is a read-only property",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Regular type inference (widens to string)<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> name = <span class=\"jsstringcolor\" style=\"color:green\">\"Alice\"</span>;  <span class=\"commentcolor\" style=\"color:slategray\">// type: string<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Const assertion (narrows to literal type)<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> nameConst = <span class=\"jsstringcolor\" style=\"color:green\">\"Alice\"</span> as <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span>;  <span class=\"commentcolor\" style=\"color:slategray\">// type: \"Alice\"<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// With objects<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> user = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  id: <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: <span class=\"jsstringcolor\" style=\"color:green\">\"Alice\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  roles: [<span class=\"jsstringcolor\" style=\"color:green\">\"admin\"</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"user\"</span>] as <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span>  <span class=\"commentcolor\" style=\"color:slategray\">// readonly tuple<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>} as <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// user.name = \"Bob\";  // Error: Cannot assign to 'name' because it is a read-only property<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "function processValue(value: string | number) {\n// Type is narrowed to string in this block\nif (typeof value === \"string\") {\nconsole.log(value.toUpperCase());\n}\n// Type is narrowed to number here\nelse {\nconsole.log(value.toFixed(2));\n}\n}\n\n// Discriminated unions\ninterface Circle { kind: \"circle\"; radius: number; }\ninterface Square { kind: \"square\"; size: number; }\ntype Shape = Circle | Square;\n\nfunction area(shape: Shape) {\n// Type is narrowed based on 'kind' property\nswitch (shape.kind) {\ncase \"circle\":\nreturn Math.PI * shape.radius ** 2;\ncase \"square\":\nreturn shape.size ** 2;\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> processValue(value: string | number) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Type is narrowed to string in this block<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> value === <span class=\"jsstringcolor\" style=\"color:green\">\"string\"</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(value.<span class=\"jspropertycolor\" style=\"color:black\">toUpperCase</span>());<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Type is narrowed to number here<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(value.<span class=\"jspropertycolor\" style=\"color:black\">toFixed</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Discriminated unions<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Circle { kind: <span class=\"jsstringcolor\" style=\"color:green\">\"circle\"</span>; radius: number; }<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Square { kind: <span class=\"jsstringcolor\" style=\"color:green\">\"square\"</span>; size: number; }<br/>\ntype Shape = Circle | Square;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> area(shape: Shape) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Type is narrowed based on 'kind' property<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">switch</span> (shape.<span class=\"jspropertycolor\" style=\"color:black\">kind</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">case</span> <span class=\"jsstringcolor\" style=\"color:green\">\"circle\"</span>:<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> Math.<span class=\"jspropertycolor\" style=\"color:black\">PI</span> * shape.<span class=\"jspropertycolor\" style=\"color:black\">radius</span> ** <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">case</span> <span class=\"jsstringcolor\" style=\"color:green\">\"square\"</span>:<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> shape.<span class=\"jspropertycolor\" style=\"color:black\">size</span> ** <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// 1. Let TypeScript infer simple types\nlet message = \"Hello\"; // Good: no need for explicit type here\n\n// 2. Provide explicit types for function parameters\nfunction formatName(firstName: string, lastName: string) {\nreturn `${firstName} ${lastName}`;\n}\n\n// 3. Consider adding return type annotations for complex functions\nfunction processData(input: string[]): { count: number; items: string[] } {\nreturn {\ncount: input.length,\nitems: input.map(item => item.trim())\n};\n}\n\n// 4. Use explicit type annotations for empty arrays or objects\nconst emptyArray: string[] = []; // Without annotation, inferred as any[]\nconst configOptions: Record<string, unknown> = {}; // Without annotation, inferred as {}\n\n// 5. Use type assertions when TypeScript cannot infer correctly\nconst canvas = document.getElementById(\"main-canvas\") as HTMLCanvasElement;",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// 1. Let TypeScript infer simple types<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> message = <span class=\"jsstringcolor\" style=\"color:green\">\"Hello\"</span>;  <span class=\"commentcolor\" style=\"color:slategray\">// Good: no need for explicit type here<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// 2. Provide explicit types for function parameters<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> formatName(firstName: string, lastName: string) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsstringtempcolor\" style=\"color:#f50\">`${firstName} ${lastName}`</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// 3. Consider adding return type annotations for complex functions<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> processData(input: string[]): { count: number; items: string[] } {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    count: input.<span class=\"jspropertycolor\" style=\"color:black\">length</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    items: input.<span class=\"jspropertycolor\" style=\"color:black\">map</span>(item =&gt; item.<span class=\"jspropertycolor\" style=\"color:black\">trim</span>())<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// 4. Use explicit type annotations for empty arrays or objects<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> emptyArray: string[] = [];  <span class=\"commentcolor\" style=\"color:slategray\">// Without annotation, inferred as any[]<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> configOptions: Record&lt;string, unknown&gt; = {};  <span class=\"commentcolor\" style=\"color:slategray\">// Without annotation, inferred as {}<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// 5. Use type assertions when TypeScript cannot infer correctly<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> canvas = document.<span class=\"jspropertycolor\" style=\"color:black\">getElementById</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"main-canvas\"</span>) as HTMLCanvasElement;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// Good: Explicit type for complex return values\nfunction processData(input: string[]): { results: string[]; count: number } {\nreturn {\nresults: input.map(processItem),\ncount: input.length\n};\n}\n\n// Good: Explicit type for empty arrays\nconst items: Array<{ id: number; name: string }> = [];\n\n// Good: Explicit type for configuration objects\nconst config: {\napiUrl: string;\nretries: number;\ntimeout: number;\n} = {\napiUrl: \"https://api.example.com\",\nretries: 3,\ntimeout: 5000\n};",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Good: Explicit type for complex return values<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> processData(input: string[]): { results: string[]; count: number } {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    results: input.<span class=\"jspropertycolor\" style=\"color:black\">map</span>(processItem),<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    count: input.<span class=\"jspropertycolor\" style=\"color:black\">length</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Good: Explicit type for empty arrays<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> items: Array&lt;{ id: number; name: string }&gt; = [];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Good: Explicit type for configuration objects<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> config: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  apiUrl: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  retries: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  timeout: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>} = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  apiUrl: <span class=\"jsstringcolor\" style=\"color:green\">\"https://api.example.com\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  retries: <span class=\"jsnumbercolor\" style=\"color:#905\">3</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  timeout: <span class=\"jsnumbercolor\" style=\"color:#905\">5000</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_type_inference.php"
      }
    },
    {
      "title": "TypeScript Literal Types",
      "code": [
        {
          "text": "// A variable with a string literal type\nlet direction: \"north\" | \"south\" | \"east\" | \"west\";\n\n// Valid assignments\ndirection = \"north\";\ndirection = \"south\";\n\n// Invalid assignments would cause errors\n// direction = \"northeast\"; // Error: Type '\"northeast\"' is not assignable to type '\"north\" | \"south\" | \"east\" | \"west\"'\n// direction = \"up\"; // Error: Type '\"up\"' is not assignable to type '\"north\" | \"south\" | \"east\" | \"west\"'\n\n// Using string literal types in functions\nfunction move(direction: \"north\" | \"south\" | \"east\" | \"west\") {\nconsole.log(`Moving ${direction}`);\n}\n\nmove(\"east\"); // Valid\n// move(\"up\"); // Error: Argument of type '\"up\"' is not assignable to parameter of type...",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// A variable with a string literal type<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> direction: <span class=\"jsstringcolor\" style=\"color:green\">\"north\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"south\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"east\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"west\"</span>;<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Valid assignments<br/></span>\ndirection = <span class=\"jsstringcolor\" style=\"color:green\">\"north\"</span>;<br/>\ndirection = <span class=\"jsstringcolor\" style=\"color:green\">\"south\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Invalid assignments would cause errors<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// direction = \"northeast\"; // Error: Type '\"northeast\"' is not assignable to type '\"north\" | \"south\" | \"east\" | \"west\"'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// direction = \"up\";        // Error: Type '\"up\"' is not assignable to type '\"north\" | \"south\" | \"east\" | \"west\"'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Using string literal types in functions<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> move(direction: <span class=\"jsstringcolor\" style=\"color:green\">\"north\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"south\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"east\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"west\"</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Moving ${direction}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\nmove(<span class=\"jsstringcolor\" style=\"color:green\">\"east\"</span>);  <span class=\"commentcolor\" style=\"color:slategray\">// Valid<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// move(\"up\");  // Error: Argument of type '\"up\"' is not assignable to parameter of type...\n </span></span>"
        },
        {
          "text": "// A variable with a numeric literal type\nlet diceRoll: 1 | 2 | 3 | 4 | 5 | 6;\n\n// Valid assignments\ndiceRoll = 1;\ndiceRoll = 6;\n\n// Invalid assignments would cause errors\n// diceRoll = 0; // Error: Type '0' is not assignable to type '1 | 2 | 3 | 4 | 5 | 6'\n// diceRoll = 7; // Error: Type '7' is not assignable to type '1 | 2 | 3 | 4 | 5 | 6'\n// diceRoll = 2.5; // Error: Type '2.5' is not assignable to type '1 | 2 | 3 | 4 | 5 | 6'\n\n// Using numeric literal types in functions\nfunction rollDice(): 1 | 2 | 3 | 4 | 5 | 6 {\nreturn Math.floor(Math.random() * 6) + 1 as 1 | 2 | 3 | 4 | 5 | 6;\n}\n\nconst result = rollDice();\nconsole.log(`You rolled a ${result}`);",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// A variable with a numeric literal type<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> diceRoll: <span class=\"jsnumbercolor\" style=\"color:#905\">1</span> | <span class=\"jsnumbercolor\" style=\"color:#905\">2</span> | <span class=\"jsnumbercolor\" style=\"color:#905\">3</span> | <span class=\"jsnumbercolor\" style=\"color:#905\">4</span> | <span class=\"jsnumbercolor\" style=\"color:#905\">5</span> | <span class=\"jsnumbercolor\" style=\"color:#905\">6</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Valid assignments<br/></span>\ndiceRoll = <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>;<br/>\ndiceRoll = <span class=\"jsnumbercolor\" style=\"color:#905\">6</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Invalid assignments would cause errors<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// diceRoll = 0;      // Error: Type '0' is not assignable to type '1 | 2 | 3 | 4 | 5 | 6'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// diceRoll = 7;      // Error: Type '7' is not assignable to type '1 | 2 | 3 | 4 | 5 | 6'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// diceRoll = 2.5;    // Error: Type '2.5' is not assignable to type '1 | 2 | 3 | 4 | 5 | 6'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Using numeric literal types in functions<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> rollDice(): <span class=\"jsnumbercolor\" style=\"color:#905\">1</span> | <span class=\"jsnumbercolor\" style=\"color:#905\">2</span> | <span class=\"jsnumbercolor\" style=\"color:#905\">3</span> | <span class=\"jsnumbercolor\" style=\"color:#905\">4</span> | <span class=\"jsnumbercolor\" style=\"color:#905\">5</span> | <span class=\"jsnumbercolor\" style=\"color:#905\">6</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> Math.<span class=\"jspropertycolor\" style=\"color:black\">floor</span>(Math.<span class=\"jspropertycolor\" style=\"color:black\">random</span>() * <span class=\"jsnumbercolor\" style=\"color:#905\">6</span>) + <span class=\"jsnumbercolor\" style=\"color:#905\">1</span> as <span class=\"jsnumbercolor\" style=\"color:#905\">1</span> | <span class=\"jsnumbercolor\" style=\"color:#905\">2</span> | <span class=\"jsnumbercolor\" style=\"color:#905\">3</span> | <span class=\"jsnumbercolor\" style=\"color:#905\">4</span> | <span class=\"jsnumbercolor\" style=\"color:#905\">5</span> | <span class=\"jsnumbercolor\" style=\"color:#905\">6</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> result = rollDice();<br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`You rolled a ${result}`</span>);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// A type that can only be the literal value 'true'\ntype YesOnly = true;\n\n// A function that must return true\nfunction alwaysSucceed(): true {\n// Always returns the literal value 'true'\nreturn true;\n}\n\n// Boolean literal combined with other types\ntype SuccessFlag = true | \"success\" | 1;\ntype FailureFlag = false | \"failure\" | 0;\n\nfunction processResult(result: SuccessFlag | FailureFlag) {\nif (result === true || result === \"success\" || result === 1) {\nconsole.log(\"Operation succeeded\");\n} else {\nconsole.log(\"Operation failed\");\n}\n}\n\nprocessResult(true); // \"Operation succeeded\"\nprocessResult(\"success\"); // \"Operation succeeded\"\nprocessResult(1); // \"Operation succeeded\"\nprocessResult(false); // \"Operation failed\"",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// A type that can only be the literal value 'true'<br/></span>\ntype YesOnly = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// A function that must return true<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> alwaysSucceed(): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Always returns the literal value 'true'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Boolean literal combined with other types<br/></span>\ntype SuccessFlag = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"success\"</span> | <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>;<br/>\ntype FailureFlag = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">false</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"failure\"</span> | <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> processResult(result: SuccessFlag | FailureFlag) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (result === <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span> || result === <span class=\"jsstringcolor\" style=\"color:green\">\"success\"</span> || result === <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"Operation succeeded\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"Operation failed\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\nprocessResult(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>);      <span class=\"commentcolor\" style=\"color:slategray\">// \"Operation succeeded\"<br/></span>\nprocessResult(<span class=\"jsstringcolor\" style=\"color:green\">\"success\"</span>); <span class=\"commentcolor\" style=\"color:slategray\">// \"Operation succeeded\"<br/></span>\nprocessResult(<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>);         <span class=\"commentcolor\" style=\"color:slategray\">// \"Operation succeeded\"<br/></span>\nprocessResult(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">false</span>);     <span class=\"commentcolor\" style=\"color:slategray\">// \"Operation failed\"\n </span></span>"
        },
        {
          "text": "// Object with literal property values\ntype HTTPSuccess = {\nstatus: 200 | 201 | 204;\nstatusText: \"OK\" | \"Created\" | \"No Content\";\ndata: any;\n};\n\ntype HTTPError = {\nstatus: 400 | 401 | 403 | 404 | 500;\nstatusText: \"Bad Request\" | \"Unauthorized\" | \"Forbidden\" | \"Not Found\" | \"Internal Server Error\";\nerror: string;\n};\n\ntype HTTPResponse = HTTPSuccess | HTTPError;\n\nfunction handleResponse(response: HTTPResponse) {\nif (response.status >= 200 && response.status < 300) {\nconsole.log(`Success: ${response.statusText}`);\nconsole.log(response.data);\n} else {\nconsole.log(`Error ${response.status}: ${response.statusText}`);\nconsole.log(`Message: ${response.error}`);\n}\n}\n\n// Example usage\nconst successResponse: HTTPSuccess = {\nstatus: 200,\nstatusText: \"OK\",\ndata: { username: \"john_doe\", email: \"john@example.com\" }\n};\n\nconst errorResponse: HTTPError = {\nstatus: 404,\nstatusText: \"Not Found\",\nerror: \"User not found in database\"\n};\n\nhandleResponse(successResponse);\nhandleResponse(errorResponse);",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Object with literal property values<br/></span>\ntype HTTPSuccess = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  status: <span class=\"jsnumbercolor\" style=\"color:#905\">200</span> | <span class=\"jsnumbercolor\" style=\"color:#905\">201</span> | <span class=\"jsnumbercolor\" style=\"color:#905\">204</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  statusText: <span class=\"jsstringcolor\" style=\"color:green\">\"OK\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"Created\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"No Content\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  data: any;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\ntype HTTPError = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  status: <span class=\"jsnumbercolor\" style=\"color:#905\">400</span> | <span class=\"jsnumbercolor\" style=\"color:#905\">401</span> | <span class=\"jsnumbercolor\" style=\"color:#905\">403</span> | <span class=\"jsnumbercolor\" style=\"color:#905\">404</span> | <span class=\"jsnumbercolor\" style=\"color:#905\">500</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  statusText: <span class=\"jsstringcolor\" style=\"color:green\">\"Bad Request\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"Unauthorized\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"Forbidden\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"Not Found\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"Internal Server Error\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  error: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\ntype HTTPResponse = HTTPSuccess | HTTPError;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> handleResponse(response: HTTPResponse) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (response.<span class=\"jspropertycolor\" style=\"color:black\">status</span> &gt;= <span class=\"jsnumbercolor\" style=\"color:#905\">200</span> &amp;&amp; response.<span class=\"jspropertycolor\" style=\"color:black\">status</span> &lt; <span class=\"jsnumbercolor\" style=\"color:#905\">300</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Success: ${response.statusText}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(response.<span class=\"jspropertycolor\" style=\"color:black\">data</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Error ${response.status}: ${response.statusText}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Message: ${response.error}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Example usage<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> successResponse: HTTPSuccess = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  status: <span class=\"jsnumbercolor\" style=\"color:#905\">200</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  statusText: <span class=\"jsstringcolor\" style=\"color:green\">\"OK\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  data: { username: <span class=\"jsstringcolor\" style=\"color:green\">\"john_doe\"</span>, email: <span class=\"jsstringcolor\" style=\"color:green\">\"john@example.com\"</span> }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> errorResponse: HTTPError = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  status: <span class=\"jsnumbercolor\" style=\"color:#905\">404</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  statusText: <span class=\"jsstringcolor\" style=\"color:green\">\"Not Found\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  error: <span class=\"jsstringcolor\" style=\"color:green\">\"User not found in database\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\nhandleResponse(successResponse);<br/>\nhandleResponse(errorResponse);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// Basic template literals\ntype Direction = \"north\" | \"south\" | \"east\" | \"west\";\ntype Distance = \"1km\" | \"5km\" | \"10km\";\n\n// Using template literals to combine them\ntype DirectionAndDistance = `${Direction}-${Distance}`;\n// \"north-1km\" | \"north-5km\" | \"north-10km\" | \"south-1km\" | ...\n\nlet route: DirectionAndDistance;\nroute = \"north-5km\"; // Valid\nroute = \"west-10km\"; // Valid\n// route = \"north-2km\"; // Error\n// route = \"5km-north\"; // Error\n\n// Advanced string manipulation\ntype EventType = \"click\" | \"hover\" | \"scroll\";\ntype EventTarget = \"button\" | \"link\" | \"div\";\ntype EventName = `on${Capitalize<EventType>}${Capitalize<EventTarget>}`;\n// \"onClickButton\" | \"onClickLink\" | \"onClickDiv\" | ...\n\n// Dynamic property access\ntype User = {\nid: number;\nname: string;\nemail: string;\ncreatedAt: Date;\n};\n\ntype GetterName<T> = `get${Capitalize<string & keyof T>}`;\ntype UserGetters = {\n[K in keyof User as GetterName<User>]: () => User[K];\n};\n// { getId: () => number; getName: () => string; ... }\n\n// String pattern matching\ntype ExtractRouteParams<T extends string> =\nT extends `${string}:${infer Param}/${infer Rest}`\n? Param | ExtractRouteParams<Rest>\n: T extends `${string}:${infer Param}`\n? Param\n: never;\n\ntype Params = ExtractRouteParams<\"/users/:userId/posts/:postId\">; // \"userId\" | \"postId\"\n\n// CSS units and values\ntype CssUnit = 'px' | 'em' | 'rem' | '%' | 'vh' | 'vw';\ntype CssValue = `${number}${CssUnit}`;\n\nlet width: CssValue = '100px'; // Valid\nlet height: CssValue = '50%'; // Valid\n// let margin: CssValue = '10'; // Error\n// let padding: CssValue = '2ex'; // Error\n\n// API versioning\ntype ApiVersion = 'v1' | 'v2' | 'v3';\ntype Endpoint = 'users' | 'products' | 'orders';\ntype HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE';\n\ntype ApiUrl = `https://api.example.com/${ApiVersion}/${Endpoint}`;\n\n// Complex example: Dynamic SQL query builder\ntype Table = 'users' | 'products' | 'orders';\ntype Column<T extends Table> =\nT extends 'users' ? 'id' | 'name' | 'email' | 'created_at' :\nT extends 'products' ? 'id' | 'name' | 'price' | 'in_stock' :\nT extends 'orders' ? 'id' | 'user_id' | 'total' | 'status' : never;\n\ntype WhereCondition<T extends Table> = {\n[K in Column<T>]?: {\nequals?: any;\nnotEquals?: any;\nin?: any[];\n};\n};\n\nfunction query<T extends Table>(\ntable: T,\nwhere?: WhereCondition<T>\n): `SELECT * FROM ${T}${string}` {\n// Implementation would build the query\nreturn `SELECT * FROM ${table}` as const;\n}\n\n// Usage\nconst userQuery = query('users', {\nname: { equals: 'John' },\ncreated_at: { in: ['2023-01-01', '2023-12-31'] }\n});\n// Type: \"SELECT * FROM users WHERE ...\"",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Basic template literals<br/></span>\ntype Direction = <span class=\"jsstringcolor\" style=\"color:green\">\"north\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"south\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"east\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"west\"</span>;<br/>\ntype Distance = <span class=\"jsstringcolor\" style=\"color:green\">\"1km\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"5km\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"10km\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Using template literals to combine them<br/></span>\ntype DirectionAndDistance = <span class=\"jsstringtempcolor\" style=\"color:#f50\">`${Direction}-${Distance}`</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// \"north-1km\" | \"north-5km\" | \"north-10km\" | \"south-1km\" | ...<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> route: DirectionAndDistance;<br/>\nroute = <span class=\"jsstringcolor\" style=\"color:green\">\"north-5km\"</span>;   <span class=\"commentcolor\" style=\"color:slategray\">// Valid<br/></span>\nroute = <span class=\"jsstringcolor\" style=\"color:green\">\"west-10km\"</span>;   <span class=\"commentcolor\" style=\"color:slategray\">// Valid<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// route = \"north-2km\";   // Error<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// route = \"5km-north\";   // Error<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Advanced string manipulation<br/></span>\ntype EventType = <span class=\"jsstringcolor\" style=\"color:green\">\"click\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"hover\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"scroll\"</span>;<br/>\ntype EventTarget = <span class=\"jsstringcolor\" style=\"color:green\">\"button\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"link\"</span> | <span class=\"jsstringcolor\" style=\"color:green\">\"div\"</span>;<br/>\ntype EventName = <span class=\"jsstringtempcolor\" style=\"color:#f50\">`on${Capitalize&lt;EventType&gt;}${Capitalize&lt;EventTarget&gt;}`</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// \"onClickButton\" | \"onClickLink\" | \"onClickDiv\" | ...<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Dynamic property access<br/></span>\ntype User = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  id: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  email: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  createdAt: Date;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\ntype GetterName&lt;T&gt; = <span class=\"jsstringtempcolor\" style=\"color:#f50\">`get${Capitalize&lt;string &amp; keyof T&gt;}`</span>;<br/>\ntype UserGetters = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  [K <span class=\"jskeywordcolor\" style=\"color:#005cc5\">in</span> keyof User as GetterName&lt;User&gt;]: () =&gt; User[K];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// { getId: () =&gt; number; getName: () =&gt; string; ... }<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// String pattern matching<br/></span>\ntype ExtractRouteParams&lt;T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> string&gt; =<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> <span class=\"jsstringtempcolor\" style=\"color:#f50\">`${string}:${infer Param}/${infer Rest}`</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    ? Param | ExtractRouteParams&lt;Rest&gt;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    : T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> <span class=\"jsstringtempcolor\" style=\"color:#f50\">`${string}:${infer Param}`</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      ? Param<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    : never;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\ntype Params = ExtractRouteParams&lt;<span class=\"jsstringcolor\" style=\"color:green\">\"/users/:userId/posts/:postId\"</span>&gt;;  <span class=\"commentcolor\" style=\"color:slategray\">// \"userId\" | \"postId\"<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// CSS units and values<br/></span>\ntype CssUnit = <span class=\"jsstringcolor\" style=\"color:green\">'px'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'em'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'rem'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'%'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'vh'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'vw'</span>;<br/>\ntype CssValue = <span class=\"jsstringtempcolor\" style=\"color:#f50\">`${number}${CssUnit}`</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> width: CssValue = <span class=\"jsstringcolor\" style=\"color:green\">'100px'</span>;    <span class=\"commentcolor\" style=\"color:slategray\">// Valid<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> height: CssValue = <span class=\"jsstringcolor\" style=\"color:green\">'50%'</span>;     <span class=\"commentcolor\" style=\"color:slategray\">// Valid<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// let margin: CssValue = '10';   // Error<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// let padding: CssValue = '2ex'; // Error<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// API versioning<br/></span>\ntype ApiVersion = <span class=\"jsstringcolor\" style=\"color:green\">'v1'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'v2'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'v3'</span>;<br/>\ntype Endpoint = <span class=\"jsstringcolor\" style=\"color:green\">'users'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'products'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'orders'</span>;<br/>\ntype HttpMethod = <span class=\"jsstringcolor\" style=\"color:green\">'GET'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'POST'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'PUT'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'DELETE'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\ntype ApiUrl = <span class=\"jsstringtempcolor\" style=\"color:#f50\">`https://api.example.com/${ApiVersion}/${Endpoint}`</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Complex example: Dynamic SQL query builder<br/></span>\ntype Table = <span class=\"jsstringcolor\" style=\"color:green\">'users'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'products'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'orders'</span>;<br/>\ntype Column&lt;T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> Table&gt; =<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> <span class=\"jsstringcolor\" style=\"color:green\">'users'</span> ? <span class=\"jsstringcolor\" style=\"color:green\">'id'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'name'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'email'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'created_at'</span> :<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> <span class=\"jsstringcolor\" style=\"color:green\">'products'</span> ? <span class=\"jsstringcolor\" style=\"color:green\">'id'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'name'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'price'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'in_stock'</span> :<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> <span class=\"jsstringcolor\" style=\"color:green\">'orders'</span> ? <span class=\"jsstringcolor\" style=\"color:green\">'id'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'user_id'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'total'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'status'</span> : never;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\ntype WhereCondition&lt;T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> Table&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  [K <span class=\"jskeywordcolor\" style=\"color:#005cc5\">in</span> Column&lt;T&gt;]?: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    equals?: any;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    notEquals?: any;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">in</span>?: any[];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> query&lt;T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> Table&gt;(<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  table: T,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  where?: WhereCondition&lt;T&gt;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>): <span class=\"jsstringtempcolor\" style=\"color:#f50\">`SELECT * FROM ${T}${string}`</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Implementation would build the query<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsstringtempcolor\" style=\"color:#f50\">`SELECT * FROM ${table}`</span> as <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Usage<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> userQuery = query(<span class=\"jsstringcolor\" style=\"color:green\">'users'</span>, {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: { equals: <span class=\"jsstringcolor\" style=\"color:green\">'John'</span> },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  created_at: { <span class=\"jskeywordcolor\" style=\"color:#005cc5\">in</span>: [<span class=\"jsstringcolor\" style=\"color:green\">'2023-01-01'</span>, <span class=\"jsstringcolor\" style=\"color:green\">'2023-12-31'</span>] }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Type: \"SELECT * FROM users WHERE ...\"<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_literal_types.php"
      }
    },
    {
      "title": "TypeScript Namespaces",
      "code": [
        {
          "text": "namespace Validation {\n// Everything inside this block belongs to the Validation namespace\n\n// Export things you want to make available outside the namespace\nexport interface StringValidator {\nisValid(s: string): boolean;\n}\n\n// This is private to the namespace (not exported)\nconst lettersRegexp = /^[A-Za-z]+$/;\n\n// Exported class - available outside the namespace\nexport class LettersValidator implements StringValidator {\nisValid(s: string): boolean {\nreturn lettersRegexp.test(s);\n}\n}\n\n// Another exported class\nexport class ZipCodeValidator implements StringValidator {\nisValid(s: string): boolean {\nreturn /^[0-9]+$/.test(s) && s.length === 5;\n}\n}\n}\n\n// Using the namespace members\nlet letterValidator = new Validation.LettersValidator();\nlet zipCodeValidator = new Validation.ZipCodeValidator();\n\nconsole.log(letterValidator.isValid(\"Hello\")); // true\nconsole.log(letterValidator.isValid(\"Hello123\")); // false\n\nconsole.log(zipCodeValidator.isValid(\"12345\")); // true\nconsole.log(zipCodeValidator.isValid(\"1234\")); // false - wrong length",
          "html": "<span class=\"jscolor\" style=\"color:black\">\nnamespace Validation {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Everything inside this block belongs to the Validation namespace<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Export things you want to make available outside the namespace<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> StringValidator {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    isValid(s: string): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// This is private to the namespace (not exported)<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> lettersRegexp = <span class=\"jsregexpcolor\" style=\"color:#e90\">/^[A-Za-z]+$/</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Exported class - available outside the namespace<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> LettersValidator <span class=\"jskeywordcolor\" style=\"color:#005cc5\">implements</span> StringValidator {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    isValid(s: string): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> lettersRegexp.<span class=\"jspropertycolor\" style=\"color:black\">test</span>(s);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Another exported class<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> ZipCodeValidator <span class=\"jskeywordcolor\" style=\"color:#005cc5\">implements</span> StringValidator {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    isValid(s: string): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsregexpcolor\" style=\"color:#e90\">/^[0-9]+$/</span>.<span class=\"jspropertycolor\" style=\"color:black\">test</span>(s) &amp;&amp; s.<span class=\"jspropertycolor\" style=\"color:black\">length</span> === <span class=\"jsnumbercolor\" style=\"color:#905\">5</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Using the namespace members<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> letterValidator = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Validation.<span class=\"jspropertycolor\" style=\"color:black\">LettersValidator</span>();<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> zipCodeValidator = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Validation.<span class=\"jspropertycolor\" style=\"color:black\">ZipCodeValidator</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(letterValidator.<span class=\"jspropertycolor\" style=\"color:black\">isValid</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"Hello\"</span>)); <span class=\"commentcolor\" style=\"color:slategray\">// true<br/></span>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(letterValidator.<span class=\"jspropertycolor\" style=\"color:black\">isValid</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"Hello123\"</span>)); <span class=\"commentcolor\" style=\"color:slategray\">// false<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(zipCodeValidator.<span class=\"jspropertycolor\" style=\"color:black\">isValid</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"12345\"</span>)); <span class=\"commentcolor\" style=\"color:slategray\">// true<br/></span>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(zipCodeValidator.<span class=\"jspropertycolor\" style=\"color:black\">isValid</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"1234\"</span>)); <span class=\"commentcolor\" style=\"color:slategray\">// false - wrong length\n </span></span>"
        },
        {
          "text": "namespace App {\nexport namespace Utils {\nexport function log(msg: string): void {\nconsole.log(`[LOG]: ${msg}`);\n}\n\nexport function error(msg: string): void {\nconsole.error(`[ERROR]: ${msg}`);\n}\n}\n\nexport namespace Models {\nexport interface User {\nid: number;\nname: string;\nemail: string;\n}\n\nexport class UserService {\ngetUser(id: number): User {\nreturn { id, name: \"John Doe\", email: \"john@example.com\" };\n}\n}\n}\n}\n\n// Using nested namespaces\nApp.Utils.log(\"Application starting\");\n\nconst userService = new App.Models.UserService();\nconst user = userService.getUser(1);\n\nApp.Utils.log(`User loaded: ${user.name}`);\n\n// This would be a type error in TypeScript\n// App.log(\"directly accessing log\"); // Error - log is not a direct member of App",
          "html": "<span class=\"jscolor\" style=\"color:black\">\nnamespace App {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> namespace Utils {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> log(msg: string): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">void</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`[LOG]: ${msg}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> error(msg: string): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">void</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`[ERROR]: ${msg}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> namespace Models {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> User {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      id: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      email: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> UserService {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      getUser(id: number): User {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> { id, name: <span class=\"jsstringcolor\" style=\"color:green\">\"John Doe\"</span>, email: <span class=\"jsstringcolor\" style=\"color:green\">\"john@example.com\"</span> };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Using nested namespaces<br/></span>\nApp.<span class=\"jspropertycolor\" style=\"color:black\">Utils</span>.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"Application starting\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> userService = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> App.<span class=\"jspropertycolor\" style=\"color:black\">Models</span>.<span class=\"jspropertycolor\" style=\"color:black\">UserService</span>();<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> user = userService.<span class=\"jspropertycolor\" style=\"color:black\">getUser</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\nApp.<span class=\"jspropertycolor\" style=\"color:black\">Utils</span>.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`User loaded: ${user.name}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// This would be a type error in TypeScript<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// App.log(\"directly accessing log\"); // Error - log is not a direct member of App\n </span></span>"
        },
        {
          "text": "namespace VeryLongNamespace {\nexport namespace DeeplyNested {\nexport namespace Components {\nexport class Button {\ndisplay(): void {\nconsole.log(\"Button displayed\");\n}\n}\nexport class TextField {\ndisplay(): void {\nconsole.log(\"TextField displayed\");\n}\n}\n}\n}\n}\n\n// Without alias - very verbose\nconst button1 = new VeryLongNamespace.DeeplyNested.Components.Button();\nbutton1.display();\n\n// With namespace alias\nimport Components = VeryLongNamespace.DeeplyNested.Components;\nconst button2 = new Components.Button();\nbutton2.display();\n\n// With specific member alias\nimport Button = VeryLongNamespace.DeeplyNested.Components.Button;\nconst button3 = new Button();\nbutton3.display();",
          "html": "<span class=\"jscolor\" style=\"color:black\">\nnamespace VeryLongNamespace {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> namespace DeeplyNested {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> namespace Components {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> Button {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        display(): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">void</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"Button displayed\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> TextField {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        display(): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">void</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"TextField displayed\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Without alias - very verbose<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> button1 = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> VeryLongNamespace.<span class=\"jspropertycolor\" style=\"color:black\">DeeplyNested</span>.<span class=\"jspropertycolor\" style=\"color:black\">Components</span>.<span class=\"jspropertycolor\" style=\"color:black\">Button</span>();<br/>\nbutton1.<span class=\"jspropertycolor\" style=\"color:black\">display</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// With namespace alias<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">import</span> Components = VeryLongNamespace.<span class=\"jspropertycolor\" style=\"color:black\">DeeplyNested</span>.<span class=\"jspropertycolor\" style=\"color:black\">Components</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> button2 = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Components.<span class=\"jspropertycolor\" style=\"color:black\">Button</span>();<br/>\nbutton2.<span class=\"jspropertycolor\" style=\"color:black\">display</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// With specific member alias<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">import</span> Button = VeryLongNamespace.<span class=\"jspropertycolor\" style=\"color:black\">DeeplyNested</span>.<span class=\"jspropertycolor\" style=\"color:black\">Components</span>.<span class=\"jspropertycolor\" style=\"color:black\">Button</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> button3 = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Button();<br/>\nbutton3.<span class=\"jspropertycolor\" style=\"color:black\">display</span>();<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "namespace Validation {\nexport interface StringValidator {\nisValid(s: string): boolean;\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\nnamespace Validation {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> StringValidator {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    isValid(s: string): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "/// <reference path=\"validators.ts\" />\nnamespace Validation {\nconst lettersRegexp = /^[A-Za-z]+$/;\n\nexport class LettersValidator implements StringValidator {\nisValid(s: string): boolean {\nreturn lettersRegexp.test(s);\n}\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"jsregexpcolor\" style=\"color:#e90\">///</span> &lt;reference path=<span class=\"jsstringcolor\" style=\"color:green\">\"validators.ts\"</span> /&gt;<br/>\nnamespace Validation {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> lettersRegexp = <span class=\"jsregexpcolor\" style=\"color:#e90\">/^[A-Za-z]+$/</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> LettersValidator <span class=\"jskeywordcolor\" style=\"color:#005cc5\">implements</span> StringValidator {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    isValid(s: string): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> lettersRegexp.<span class=\"jspropertycolor\" style=\"color:black\">test</span>(s);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "/// <reference path=\"validators.ts\" />\nnamespace Validation {\nconst zipCodeRegexp = /^[0-9]+$/;\n\nexport class ZipCodeValidator implements StringValidator {\nisValid(s: string): boolean {\nreturn zipCodeRegexp.test(s) && s.length === 5;\n}\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"jsregexpcolor\" style=\"color:#e90\">///</span> &lt;reference path=<span class=\"jsstringcolor\" style=\"color:green\">\"validators.ts\"</span> /&gt;<br/>\nnamespace Validation {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> zipCodeRegexp = <span class=\"jsregexpcolor\" style=\"color:#e90\">/^[0-9]+$/</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> ZipCodeValidator <span class=\"jskeywordcolor\" style=\"color:#005cc5\">implements</span> StringValidator {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    isValid(s: string): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> zipCodeRegexp.<span class=\"jspropertycolor\" style=\"color:black\">test</span>(s) &amp;&amp; s.<span class=\"jspropertycolor\" style=\"color:black\">length</span> === <span class=\"jsnumbercolor\" style=\"color:#905\">5</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "/// <reference path=\"validators.ts\" />\n/// <reference path=\"letters-validator.ts\" />\n/// <reference path=\"zipcode-validator.ts\" />\n\n// Now you can use the validators from multiple files\nlet validators: { [s: string]: Validation.StringValidator } = {};\nvalidators[\"letters\"] = new Validation.LettersValidator();\nvalidators[\"zipcode\"] = new Validation.ZipCodeValidator();\n\n// Some samples to validate\nlet strings = [\"Hello\", \"98052\", \"101\"];\n\n// Validate each\nstrings.forEach(s => {\nfor (let name in validators) {\nconsole.log(`\"${s}\" - ${validators[name].isValid(s) ? \"matches\" : \"does not match\"} ${name}`);\n}\n});",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"jsregexpcolor\" style=\"color:#e90\">///</span> &lt;reference path=<span class=\"jsstringcolor\" style=\"color:green\">\"validators.ts\"</span> /&gt;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"jsregexpcolor\" style=\"color:#e90\">///</span> &lt;reference path=<span class=\"jsstringcolor\" style=\"color:green\">\"letters-validator.ts\"</span> /&gt;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"jsregexpcolor\" style=\"color:#e90\">///</span> &lt;reference path=<span class=\"jsstringcolor\" style=\"color:green\">\"zipcode-validator.ts\"</span> /&gt;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Now you can use the validators from multiple files<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> validators: { [s: string]: Validation.<span class=\"jspropertycolor\" style=\"color:black\">StringValidator</span> } = {};<br/>\nvalidators[<span class=\"jsstringcolor\" style=\"color:green\">\"letters\"</span>] = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Validation.<span class=\"jspropertycolor\" style=\"color:black\">LettersValidator</span>();<br/>\nvalidators[<span class=\"jsstringcolor\" style=\"color:green\">\"zipcode\"</span>] = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Validation.<span class=\"jspropertycolor\" style=\"color:black\">ZipCodeValidator</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Some samples to validate<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> strings = [<span class=\"jsstringcolor\" style=\"color:green\">\"Hello\"</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"98052\"</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"101\"</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Validate each<br/></span>\nstrings.<span class=\"jspropertycolor\" style=\"color:black\">forEach</span>(s =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> name <span class=\"jskeywordcolor\" style=\"color:#005cc5\">in</span> validators) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`\"${s}\" - ${validators[name].isValid(s) ? \"matches\" : \"does not match\"} ${name}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "tsc --outFile sample.js main.ts",
          "html": "<span class=\"jscolor\" style=\"color:black\">\ntsc --outFile sample.<span class=\"jspropertycolor\" style=\"color:black\">js</span> main.<span class=\"jspropertycolor\" style=\"color:black\">ts\n</span> </span>"
        },
        {
          "text": "// Original namespace\ndeclare namespace Express {\ninterface Request {\nuser?: { id: number; name: string };\n}\ninterface Response {\njson(data: any): void;\n}\n}\n\n// Later in your application (e.g., in a .d.ts file)\ndeclare namespace Express {\n// Augment the Request interface\ninterface Request {\n// Add custom properties\nrequestTime?: number;\n// Add methods\nlog(message: string): void;\n}\n\n// Add new types\ninterface UserSession {\nuserId: number;\nexpires: Date;\n}\n}\n\n// Usage in your application\nconst app = express();\n\napp.use((req: Express.Request, res: Express.Response, next) => {\n// Augmented properties and methods are available\nreq.requestTime = Date.now();\nreq.log('Request started');\nnext();\n});",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Original namespace<br/></span>\ndeclare namespace Express {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Request {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    user?: { id: number; name: string };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Response {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    json(data: any): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">void</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Later in your application (e.g., in a .d.ts file)<br/></span>\ndeclare namespace Express {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Augment the Request interface<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Request {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Add custom properties<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    requestTime?: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Add methods<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    log(message: string): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">void</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Add new types<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> UserSession {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    userId: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    expires: Date;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Usage in your application<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> app = express();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\napp.<span class=\"jspropertycolor\" style=\"color:black\">use</span>((req: Express.<span class=\"jspropertycolor\" style=\"color:black\">Request</span>, res: Express.<span class=\"jspropertycolor\" style=\"color:black\">Response</span>, next) =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Augmented properties and methods are available<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  req.<span class=\"jspropertycolor\" style=\"color:black\">requestTime</span> = Date.<span class=\"jspropertycolor\" style=\"color:black\">now</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  req.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Request started'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  next();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// Generic namespace example\nnamespace DataStorage {\nexport interface Repository<T> {\ngetAll(): T[];\ngetById(id: number): T | undefined;\nadd(item: T): void;\nupdate(id: number, item: T): boolean;\ndelete(id: number): boolean;\n}\n\n// Concrete implementation\nexport class InMemoryRepository<T> implements Repository<T> {\nprivate items: T[] = [];\n\ngetAll(): T[] {\nreturn [...this.items];\n}\n\ngetById(id: number): T | undefined {\nreturn this.items[id];\n}\n\nadd(item: T): void {\nthis.items.push(item);\n}\n\nupdate(id: number, item: T): boolean {\nif (id >= 0 && id < this.items.length) {\nthis.items[id] = item;\nreturn true;\n}\nreturn false;\n}\n\ndelete(id: number): boolean {\nif (id >= 0 && id < this.items.length) {\nthis.items.splice(id, 1);\nreturn true;\n}\nreturn false;\n}\n}\n}\n\n// Usage\ninterface User {\nid: number;\nname: string;\nemail: string;\n}\n\nconst userRepo = new DataStorage.InMemoryRepository<User>();\nuserRepo.add({ id: 1, name: 'John Doe', email: 'john@example.com' });\nconst allUsers = userRepo.getAll();",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Generic namespace example<br/></span>\nnamespace DataStorage {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Repository&lt;T&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    getAll(): T[];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    getById(id: number): T | undefined;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    add(item: T): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">void</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    update(id: number, item: T): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">delete</span>(id: number): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Concrete implementation<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> InMemoryRepository&lt;T&gt; <span class=\"jskeywordcolor\" style=\"color:#005cc5\">implements</span> Repository&lt;T&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">private</span> items: T[] = [];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    getAll(): T[] {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> [.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">items</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    getById(id: number): T | undefined {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">items</span>[id];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    add(item: T): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">void</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">items</span>.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(item);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    update(id: number, item: T): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (id &gt;= <span class=\"jsnumbercolor\" style=\"color:#905\">0</span> &amp;&amp; id &lt; <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">items</span>.<span class=\"jspropertycolor\" style=\"color:black\">length</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">items</span>[id] = item;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">false</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">delete</span>(id: number): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (id &gt;= <span class=\"jsnumbercolor\" style=\"color:#905\">0</span> &amp;&amp; id &lt; <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">items</span>.<span class=\"jspropertycolor\" style=\"color:black\">length</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">items</span>.<span class=\"jspropertycolor\" style=\"color:black\">splice</span>(id, <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">false</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Usage<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> User {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  id: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  email: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> userRepo = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> DataStorage.<span class=\"jspropertycolor\" style=\"color:black\">InMemoryRepository</span>&lt;User&gt;();<br/>\nuserRepo.<span class=\"jspropertycolor\" style=\"color:black\">add</span>({ id: <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, name: <span class=\"jsstringcolor\" style=\"color:green\">'John Doe'</span>, email: <span class=\"jsstringcolor\" style=\"color:green\">'john@example.com'</span> });<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> allUsers = userRepo.<span class=\"jspropertycolor\" style=\"color:black\">getAll</span>();<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// Before: Using namespaces\nnamespace MyApp {\nexport namespace Services {\nexport class UserService {\ngetUser(id: number) { /* ... */ }\n}\n}\n}\n\n// After: Using ES modules\n// services/UserService.ts\nexport class UserService {\ngetUser(id: number) { /* ... */ }\n}\n\n// app.ts\nimport { UserService } from './services/UserService';\nconst userService = new UserService();",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Before: Using namespaces<br/></span>\nnamespace MyApp {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> namespace Services {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> UserService {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      getUser(id: number) { <span class=\"jsregexpcolor\" style=\"color:#e90\">/* ... */</span> }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// After: Using ES modules<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// services/UserService.ts<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> UserService {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  getUser(id: number) { <span class=\"jsregexpcolor\" style=\"color:#e90\">/* ... */</span> }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// app.ts<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">import</span> { UserService } from <span class=\"jsstringcolor\" style=\"color:green\">'./services/UserService'</span>;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> userService = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> UserService();<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_namespaces.php"
      }
    },
    {
      "title": "TypeScript Index Signatures",
      "code": [
        {
          "text": "// This interface represents an object with string keys and string values\ninterface StringDictionary {\n[key: string]: string;\n}\n\n// Creating a compliant object\nconst names: StringDictionary = {\nfirstName: \"Alice\",\nlastName: \"Smith\",\n\"100\": \"One Hundred\"\n};\n\n// Accessing properties\nconsole.log(names[\"firstName\"]); // \"Alice\"\nconsole.log(names[\"lastName\"]); // \"Smith\"\nconsole.log(names[\"100\"]); // \"One Hundred\"\n\n// Adding new properties dynamically\nnames[\"age\"] = \"30\";\n\n// This would cause an error\n// names[\"age\"] = 30; // Error: Type 'number' is not assignable to type 'string'",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// This interface represents an object with string keys and string values<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> StringDictionary {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  [key: string]: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Creating a compliant object<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> names: StringDictionary = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  firstName: <span class=\"jsstringcolor\" style=\"color:green\">\"Alice\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  lastName: <span class=\"jsstringcolor\" style=\"color:green\">\"Smith\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsstringcolor\" style=\"color:green\">\"100\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"One Hundred\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Accessing properties<br/></span>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(names[<span class=\"jsstringcolor\" style=\"color:green\">\"firstName\"</span>]); <span class=\"commentcolor\" style=\"color:slategray\">// \"Alice\"<br/></span>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(names[<span class=\"jsstringcolor\" style=\"color:green\">\"lastName\"</span>]); <span class=\"commentcolor\" style=\"color:slategray\">// \"Smith\"<br/></span>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(names[<span class=\"jsstringcolor\" style=\"color:green\">\"100\"</span>]); <span class=\"commentcolor\" style=\"color:slategray\">// \"One Hundred\"<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Adding new properties dynamically<br/></span>\nnames[<span class=\"jsstringcolor\" style=\"color:green\">\"age\"</span>] = <span class=\"jsstringcolor\" style=\"color:green\">\"30\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// This would cause an error<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// names[\"age\"] = 30; // Error: Type 'number' is not assignable to type 'string'\n </span></span>"
        },
        {
          "text": "// Object with number indexes\ninterface NumberDictionary {\n[index: number]: any;\n}\n\nconst scores: NumberDictionary = {\n0: \"Zero\",\n1: 100,\n2: true\n};\n\nconsole.log(scores[0]); // \"Zero\"\nconsole.log(scores[1]); // 100\nconsole.log(scores[2]); // true\n\n// Adding a complex object\nscores[3] = { passed: true };",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Object with number indexes<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> NumberDictionary {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  [index: number]: any;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> scores: NumberDictionary = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"Zero\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>: <span class=\"jsnumbercolor\" style=\"color:#905\">100</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(scores[<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>]); <span class=\"commentcolor\" style=\"color:slategray\">// \"Zero\"<br/></span>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(scores[<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>]); <span class=\"commentcolor\" style=\"color:slategray\">// 100<br/></span>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(scores[<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>]); <span class=\"commentcolor\" style=\"color:slategray\">// true<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Adding a complex object<br/></span>\nscores[<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>] = { passed: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span> };<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "interface UserInfo {\nname: string; // Required property with specific name\nage: number;  // Required property with specific name\n[key: string]: string | number; // All other properties must be string or number\n}\n\nconst user: UserInfo = {\nname: \"Alice\", // Required\nage: 30,      // Required\naddress: \"123 Main St\", // Optional\nzipCode: 12345 // Optional\n};\n\n// This would cause an error\n// const invalidUser: UserInfo = {\n//  name: \"Bob\",\n//  age: \"thirty\", // Error: Type 'string' is not assignable to type 'number'\n//  isAdmin: true  // Error: Type 'boolean' is not assignable to type 'string | number'\n// };",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> UserInfo {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: string; <span class=\"commentcolor\" style=\"color:slategray\">// Required property with specific name<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  age: number;  <span class=\"commentcolor\" style=\"color:slategray\">// Required property with specific name<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  [key: string]: string | number; <span class=\"commentcolor\" style=\"color:slategray\">// All other properties must be string or number<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> user: UserInfo = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: <span class=\"jsstringcolor\" style=\"color:green\">\"Alice\"</span>, <span class=\"commentcolor\" style=\"color:slategray\">// Required<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  age: <span class=\"jsnumbercolor\" style=\"color:#905\">30</span>,      <span class=\"commentcolor\" style=\"color:slategray\">// Required<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  address: <span class=\"jsstringcolor\" style=\"color:green\">\"123 Main St\"</span>, <span class=\"commentcolor\" style=\"color:slategray\">// Optional<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  zipCode: <span class=\"jsnumbercolor\" style=\"color:#905\">12345</span> <span class=\"commentcolor\" style=\"color:slategray\">// Optional<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// This would cause an error<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// const invalidUser: UserInfo = {<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">//  name: \"Bob\",<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">//  age: \"thirty\", // Error: Type 'string' is not assignable to type 'number'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">//  isAdmin: true  // Error: Type 'boolean' is not assignable to type 'string | number'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// };\n </span></span>"
        },
        {
          "text": "interface ReadOnlyStringArray {\nreadonly [index: number]: string;\n}\n\nconst names: ReadOnlyStringArray = [\"Alice\", \"Bob\", \"Charlie\"];\n\nconsole.log(names[0]); // \"Alice\"\n\n// This would cause an error\n// names[0] = \"Andrew\"; // Error: Index signature in type 'ReadOnlyStringArray' only permits reading",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> ReadOnlyStringArray {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  readonly [index: number]: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> names: ReadOnlyStringArray = [<span class=\"jsstringcolor\" style=\"color:green\">\"Alice\"</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"Bob\"</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"Charlie\"</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(names[<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>]); <span class=\"commentcolor\" style=\"color:slategray\">// \"Alice\"<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// This would cause an error<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// names[0] = \"Andrew\"; // Error: Index signature in type 'ReadOnlyStringArray' only permits reading\n </span></span>"
        },
        {
          "text": "// Type for API responses with dynamic keys\ninterface ApiResponse<T> {\ndata: {\n[resourceType: string]: T[];  // e.g., { \"users\": User[], \"posts\": Post[] }\n};\nmeta: {\npage: number;\ntotal: number;\n[key: string]: any;  // Allow additional metadata\n};\n}\n\n// Example usage with a users API\ninterface User {\nid: number;\nname: string;\nemail: string;\n}\n\n// Mock API response\nconst apiResponse: ApiResponse<User> = {\ndata: {\nusers: [\n{ id: 1, name: \"Alice\", email: \"alice@example.com\" },\n{ id: 2, name: \"Bob\", email: \"bob@example.com\" }\n]\n},\nmeta: {\npage: 1,\ntotal: 2,\ntimestamp: \"2023-01-01T00:00:00Z\"\n}\n};\n\n// Accessing the data\nconst users = apiResponse.data.users;\nconsole.log(users[0].name);  // \"Alice\"",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Type for API responses with dynamic keys<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> ApiResponse&lt;T&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  data: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    [resourceType: string]: T[];  <span class=\"commentcolor\" style=\"color:slategray\">// e.g., { \"users\": User[], \"posts\": Post[] }<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  meta: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    page: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    total: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    [key: string]: any;  <span class=\"commentcolor\" style=\"color:slategray\">// Allow additional metadata<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Example usage with a users API<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> User {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  id: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  email: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Mock API response<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> apiResponse: ApiResponse&lt;User&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  data: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    users: [<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      { id: <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, name: <span class=\"jsstringcolor\" style=\"color:green\">\"Alice\"</span>, email: <span class=\"jsstringcolor\" style=\"color:green\">\"alice@example.com\"</span> },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      { id: <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, name: <span class=\"jsstringcolor\" style=\"color:green\">\"Bob\"</span>, email: <span class=\"jsstringcolor\" style=\"color:green\">\"bob@example.com\"</span> }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    ]<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  meta: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    page: <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    total: <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    timestamp: <span class=\"jsstringcolor\" style=\"color:green\">\"2023-01-01T00:00:00Z\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Accessing the data<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> users = apiResponse.<span class=\"jspropertycolor\" style=\"color:black\">data</span>.<span class=\"jspropertycolor\" style=\"color:black\">users</span>;<br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(users[<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>].<span class=\"jspropertycolor\" style=\"color:black\">name</span>);  <span class=\"commentcolor\" style=\"color:slategray\">// \"Alice\"\n </span></span>"
        },
        {
          "text": "interface ConflictingTypes {\n[key: string]: number;\nname: string; // Error: not assignable to string index type 'number'\n}\n\ninterface FixedTypes {\n[key: string]: number | string;\nname: string;  // OK\nage: number;   // OK\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> ConflictingTypes {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    [key: string]: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    name: string; <span class=\"commentcolor\" style=\"color:slategray\">// Error: not assignable to string index type 'number'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> FixedTypes {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    [key: string]: number | string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    name: string;  <span class=\"commentcolor\" style=\"color:slategray\">// OK<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    age: number;   <span class=\"commentcolor\" style=\"color:slategray\">// OK<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Index signature\ninterface StringMap {\n[key: string]: string;\n}\n\n// Record\ntype StringRecord = Record<string, string>;",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Index signature<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> StringMap {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  [key: string]: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Record<br/></span>\ntype StringRecord = Record&lt;string, string&gt;;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_index_signatures.php"
      }
    },
    {
      "title": "TypeScript Declaration Merging",
      "code": [
        {
          "text": "// First declaration\ninterface Person {\nname: string;\nage: number;\n}\n\n// Second declaration with the same name\ninterface Person {\naddress: string;\nemail: string;\n}\n\n// TypeScript merges them into:\n// interface Person {\n// name: string;\n// age: number;\n// address: string;\n// email: string;\n// }\n\nconst person: Person = {\nname: \"John\",\nage: 30,\naddress: \"123 Main St\",\nemail: \"john@example.com\"\n};\n\nconsole.log(person);",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// First declaration<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Person {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  age: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Second declaration with the same name<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Person {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  address: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  email: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// TypeScript merges them into:<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// interface Person {<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">//   name: string;<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">//   age: number;<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">//   address: string;<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">//   email: string;<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// }<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> person: Person = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: <span class=\"jsstringcolor\" style=\"color:green\">\"John\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  age: <span class=\"jsnumbercolor\" style=\"color:#905\">30</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  address: <span class=\"jsstringcolor\" style=\"color:green\">\"123 Main St\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  email: <span class=\"jsstringcolor\" style=\"color:green\">\"john@example.com\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(person);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// Function overloads\nfunction processValue(value: string): string;\nfunction processValue(value: number): number;\nfunction processValue(value: boolean): boolean;\n\n// Implementation that handles all overloads\nfunction processValue(value: string | number | boolean): string | number | boolean {\nif (typeof value === \"string\") {\nreturn value.toUpperCase();\n} else if (typeof value === \"number\") {\nreturn value * 2;\n} else {\nreturn !value;\n}\n}\n\n// Using the function with different types\nconsole.log(processValue(\"hello\")); // \"HELLO\"\nconsole.log(processValue(10)); // 20\nconsole.log(processValue(true)); // false",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Function overloads<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> processValue(value: string): string;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> processValue(value: number): number;<br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> processValue(value: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Implementation that handles all overloads<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> processValue(value: string | number | <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>): string | number | <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> value === <span class=\"jsstringcolor\" style=\"color:green\">\"string\"</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> value.<span class=\"jspropertycolor\" style=\"color:black\">toUpperCase</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> value === <span class=\"jsstringcolor\" style=\"color:green\">\"number\"</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> value * <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> !value;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Using the function with different types<br/></span>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(processValue(<span class=\"jsstringcolor\" style=\"color:green\">\"hello\"</span>));  <span class=\"commentcolor\" style=\"color:slategray\">// \"HELLO\"<br/></span>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(processValue(<span class=\"jsnumbercolor\" style=\"color:#905\">10</span>));       <span class=\"commentcolor\" style=\"color:slategray\">// 20<br/></span>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(processValue(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>));     <span class=\"commentcolor\" style=\"color:slategray\">// false\n </span></span>"
        },
        {
          "text": "namespace Validation {\nexport interface StringValidator {\nisValid(s: string): boolean;\n}\n}\n\nnamespace Validation {\nexport interface NumberValidator {\nisValid(n: number): boolean;\n}\n\nexport class ZipCodeValidator implements StringValidator {\nisValid(s: string): boolean {\nreturn s.length === 5 && /^\\d+$/.test(s);\n}\n}\n}\n\n// After merging:\n// namespace Validation {\n// export interface StringValidator { isValid(s: string): boolean; }\n// export interface NumberValidator { isValid(n: number): boolean; }\n// export class ZipCodeValidator implements StringValidator { ... }\n// }\n\n// Using the merged namespace\nconst zipValidator = new Validation.ZipCodeValidator();\n\nconsole.log(zipValidator.isValid(\"12345\")); // true\nconsole.log(zipValidator.isValid(\"1234\")); // false\nconsole.log(zipValidator.isValid(\"abcde\")); // false",
          "html": "<span class=\"jscolor\" style=\"color:black\">\nnamespace Validation {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> StringValidator {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    isValid(s: string): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\nnamespace Validation {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> NumberValidator {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    isValid(n: number): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> ZipCodeValidator <span class=\"jskeywordcolor\" style=\"color:#005cc5\">implements</span> StringValidator {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    isValid(s: string): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> s.<span class=\"jspropertycolor\" style=\"color:black\">length</span> === <span class=\"jsnumbercolor\" style=\"color:#905\">5</span> &amp;&amp; <span class=\"jsregexpcolor\" style=\"color:#e90\">/^\\d+$/</span>.<span class=\"jspropertycolor\" style=\"color:black\">test</span>(s);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// After merging:<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// namespace Validation {<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">//   export interface StringValidator { isValid(s: string): boolean; }<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">//   export interface NumberValidator { isValid(n: number): boolean; }<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">//   export class ZipCodeValidator implements StringValidator { ... }<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// }<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Using the merged namespace<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> zipValidator = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Validation.<span class=\"jspropertycolor\" style=\"color:black\">ZipCodeValidator</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(zipValidator.<span class=\"jspropertycolor\" style=\"color:black\">isValid</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"12345\"</span>));  <span class=\"commentcolor\" style=\"color:slategray\">// true<br/></span>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(zipValidator.<span class=\"jspropertycolor\" style=\"color:black\">isValid</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"1234\"</span>));   <span class=\"commentcolor\" style=\"color:slategray\">// false<br/></span>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(zipValidator.<span class=\"jspropertycolor\" style=\"color:black\">isValid</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"abcde\"</span>));  <span class=\"commentcolor\" style=\"color:slategray\">// false\n </span></span>"
        },
        {
          "text": "// Interface declaration\ninterface Cart {\ncalculateTotal(): number;\n}\n\n// Class declaration with same name\nclass Cart {\nitems: { name: string; price: number }[] = [];\n\naddItem(name: string, price: number): void {\nthis.items.push({ name, price });\n}\n\n// Must implement the interface method\ncalculateTotal(): number {\nreturn this.items.reduce((sum, item) => sum + item.price, 0);\n}\n}\n\n// Using the merged class and interface\nconst cart = new Cart();\ncart.addItem(\"Book\", 15.99);\ncart.addItem(\"Coffee Mug\", 8.99);\n\nconsole.log(`Total: $${cart.calculateTotal().toFixed(2)}`);",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Interface declaration<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Cart {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  calculateTotal(): number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Class declaration with same name<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> Cart {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  items: { name: string; price: number }[] = [];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  addItem(name: string, price: number): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">void</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">items</span>.<span class=\"jspropertycolor\" style=\"color:black\">push</span>({ name, price });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Must implement the interface method<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    calculateTotal(): number {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">items</span>.<span class=\"jspropertycolor\" style=\"color:black\">reduce</span>((sum, item) =&gt; sum + item.<span class=\"jspropertycolor\" style=\"color:black\">price</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Using the merged class and interface<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> cart = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Cart();<br/>\ncart.<span class=\"jspropertycolor\" style=\"color:black\">addItem</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"Book\"</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">15.99</span>);<br/>\ncart.<span class=\"jspropertycolor\" style=\"color:black\">addItem</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"Coffee Mug\"</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">8.99</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Total: $${cart.calculateTotal().toFixed(2)}`</span>);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// First part of the enum\nenum Direction {\nNorth,\nSouth\n}\n\n// Second part of the enum\nenum Direction {\nEast = 2,\nWest = 3\n}\n\n// After merging:\n// enum Direction {\n// North = 0,\n// South = 1,\n// East = 2,\n// West = 3\n// }\n\nconsole.log(Direction.North); // 0\nconsole.log(Direction.South); // 1\nconsole.log(Direction.East); // 2\nconsole.log(Direction.West); // 3\n\n// Can also access by value\nconsole.log(Direction[0]); // \"North\"\nconsole.log(Direction[2]); // \"East\"",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// First part of the enum<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">enum</span> Direction {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  North,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  South<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Second part of the enum<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">enum</span> Direction {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  East = <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  West = <span class=\"jsnumbercolor\" style=\"color:#905\">3</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// After merging:<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// enum Direction {<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">//   North = 0,<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">//   South = 1,<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">//   East = 2,<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">//   West = 3<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// }<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(Direction.<span class=\"jspropertycolor\" style=\"color:black\">North</span>);  <span class=\"commentcolor\" style=\"color:slategray\">// 0<br/></span>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(Direction.<span class=\"jspropertycolor\" style=\"color:black\">South</span>);  <span class=\"commentcolor\" style=\"color:slategray\">// 1<br/></span>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(Direction.<span class=\"jspropertycolor\" style=\"color:black\">East</span>);   <span class=\"commentcolor\" style=\"color:slategray\">// 2<br/></span>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(Direction.<span class=\"jspropertycolor\" style=\"color:black\">West</span>);   <span class=\"commentcolor\" style=\"color:slategray\">// 3<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Can also access by value<br/></span>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(Direction[<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>]);     <span class=\"commentcolor\" style=\"color:slategray\">// \"North\"<br/></span>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(Direction[<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>]);     <span class=\"commentcolor\" style=\"color:slategray\">// \"East\"\n </span></span>"
        },
        {
          "text": "// Original library definition\n// Imagine this comes from a third-party library\ndeclare namespace LibraryModule {\nexport interface User {\nid: number;\nname: string;\n}\nexport function getUser(id: number): User;\n}\n\n// Augmenting with additional functionality (your code)\ndeclare namespace LibraryModule {\n// Add new interface\nexport interface UserPreferences {\ntheme: string;\nnotifications: boolean;\n}\n\n// Add new property to existing interface\nexport interface User {\npreferences?: UserPreferences;\n}\n\n// Add new function\nexport function getUserPreferences(userId: number): UserPreferences;\n}\n\n// Using the augmented module\nconst user = LibraryModule.getUser(123);\nconsole.log(user.preferences?.theme);\n\nconst prefs = LibraryModule.getUserPreferences(123);\nconsole.log(prefs.notifications);",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Original library definition<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Imagine this comes from a third-party library<br/></span>\ndeclare namespace LibraryModule {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> User {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    id: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> getUser(id: number): User;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Augmenting with additional functionality (your code)<br/></span>\ndeclare namespace LibraryModule {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Add new interface<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> UserPreferences {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    theme: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    notifications: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Add new property to existing interface<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> User {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    preferences?: UserPreferences;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Add new function<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> getUserPreferences(userId: number): UserPreferences;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Using the augmented module<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> user = LibraryModule.<span class=\"jspropertycolor\" style=\"color:black\">getUser</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">123</span>);<br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(user.<span class=\"jspropertycolor\" style=\"color:black\">preferences?</span>.<span class=\"jspropertycolor\" style=\"color:black\">theme</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> prefs = LibraryModule.<span class=\"jspropertycolor\" style=\"color:black\">getUserPreferences</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">123</span>);<br/>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(prefs.<span class=\"jspropertycolor\" style=\"color:black\">notifications</span>);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_declaration_merging.php"
      }
    },
    {
      "title": "TypeScript Async Programming",
      "code": [
        {
          "text": "// Create a typed Promise that resolves to a string\nconst fetchGreeting = (): Promise<string> => {\nreturn new Promise((resolve, reject) => {\nsetTimeout(() => {\nconst success = Math.random() > 0.5;\nif (success) {\nresolve(\"Hello, TypeScript!\");\n} else {\nreject(new Error(\"Failed to fetch greeting\"));\n}\n}, 1000);\n});\n};\n\n// Using the Promise with proper type inference\nfetchGreeting()\n.then((greeting) => {\n// TypeScript knows 'greeting' is a string\nconsole.log(greeting.toUpperCase());\n})\n.catch((error: Error) => {\nconsole.error(\"Error:\", error.message);\n});",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Create a typed Promise that resolves to a string<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> fetchGreeting = (): Promise&lt;string&gt; =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Promise((resolve, reject) =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        setTimeout(() =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> success = Math.<span class=\"jspropertycolor\" style=\"color:black\">random</span>() &gt; <span class=\"jsnumbercolor\" style=\"color:#905\">0.5</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (success) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            resolve(<span class=\"jsstringcolor\" style=\"color:green\">\"Hello, TypeScript!\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            reject(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Error(<span class=\"jsstringcolor\" style=\"color:green\">\"Failed to fetch greeting\"</span>));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        }, <span class=\"jsnumbercolor\" style=\"color:#905\">1000</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    };<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Using the Promise with proper type inference<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    fetchGreeting()<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      .<span class=\"jskeywordcolor\" style=\"color:#005cc5\">then</span>((greeting) =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"commentcolor\" style=\"color:slategray\">// TypeScript knows 'greeting' is a string<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(greeting.<span class=\"jspropertycolor\" style=\"color:black\">toUpperCase</span>());<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      })<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      .<span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span>((error: Error) =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(<span class=\"jsstringcolor\" style=\"color:green\">\"Error:\"</span>, error.<span class=\"jspropertycolor\" style=\"color:black\">message</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      });<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Define types for our API response\ninterface User {\nid: number;\nname: string;\nemail: string;\nrole: 'admin' | 'user' | 'guest';\n}\n\n// Function that returns a Promise of User array\nasync function fetchUsers(): Promise<User[]> {\nconsole.log('Fetching users...');\n// Simulate API call\nawait new Promise(resolve => setTimeout(resolve, 1000));\nreturn [\n{ id: 1, name: 'Alice', email: 'alice@example.com', role: 'admin' },\n{ id: 2, name: 'Bob', email: 'bob@example.com', role: 'user' }\n];\n}\n\n// Async function to process users\nasync function processUsers() {\ntry {\n// TypeScript knows users is User[]\nconst users = await fetchUsers();\nconsole.log(`Fetched ${users.length} users`);\n\n// Type-safe property access\nconst adminEmails = users\n.filter(user => user.role === 'admin')\n.map(user => user.email);\n\nconsole.log('Admin emails:', adminEmails);\nreturn users;\n} catch (error) {\nif (error instanceof Error) {\nconsole.error('Failed to process users:', error.message);\n} else {\nconsole.error('An unknown error occurred');\n}\nthrow error; // Re-throw to let caller handle\n}\n}\n\n// Execute the async function\nprocessUsers()\n.then(users => console.log('Processing complete'))\n.catch(err => console.error('Processing failed:', err));",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Define types for our API response<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> User {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      id: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      email: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      role: <span class=\"jsstringcolor\" style=\"color:green\">'admin'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'user'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'guest'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Function that returns a Promise of User array<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> fetchUsers(): Promise&lt;User[]&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Fetching users...'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"commentcolor\" style=\"color:slategray\">// Simulate API call<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Promise(resolve =&gt; setTimeout(resolve, <span class=\"jsnumbercolor\" style=\"color:#905\">1000</span>));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> [<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        { id: <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, name: <span class=\"jsstringcolor\" style=\"color:green\">'Alice'</span>, email: <span class=\"jsstringcolor\" style=\"color:green\">'alice@example.com'</span>, role: <span class=\"jsstringcolor\" style=\"color:green\">'admin'</span> },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        { id: <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, name: <span class=\"jsstringcolor\" style=\"color:green\">'Bob'</span>, email: <span class=\"jsstringcolor\" style=\"color:green\">'bob@example.com'</span>, role: <span class=\"jsstringcolor\" style=\"color:green\">'user'</span> }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      ];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Async function to process users<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> processUsers() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"commentcolor\" style=\"color:slategray\">// TypeScript knows users is User[]<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> users = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> fetchUsers();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Fetched ${users.length} users`</span>);<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"commentcolor\" style=\"color:slategray\">// Type-safe property access<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> adminEmails = users<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          .<span class=\"jspropertycolor\" style=\"color:black\">filter</span>(user =&gt; user.<span class=\"jspropertycolor\" style=\"color:black\">role</span> === <span class=\"jsstringcolor\" style=\"color:green\">'admin'</span>)<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          .<span class=\"jspropertycolor\" style=\"color:black\">map</span>(user =&gt; user.<span class=\"jspropertycolor\" style=\"color:black\">email</span>);<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Admin emails:'</span>, adminEmails);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> users;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span> (error) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (error <span class=\"jskeywordcolor\" style=\"color:#005cc5\">instanceof</span> Error) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Failed to process users:'</span>, error.<span class=\"jspropertycolor\" style=\"color:black\">message</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(<span class=\"jsstringcolor\" style=\"color:green\">'An unknown error occurred'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> error; <span class=\"commentcolor\" style=\"color:slategray\">// Re-throw to let caller handle<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Execute the async function<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    processUsers()<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      .<span class=\"jskeywordcolor\" style=\"color:#005cc5\">then</span>(users =&gt; console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Processing complete'</span>))<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      .<span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span>(err =&gt; console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Processing failed:'</span>, err));<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "async function getString(): string { } // Error: must return Promise\nasync function getString(): Promise<string> { } // Correct",
          "html": "async function getString(): string { }        // Error: must return Promise<br/>\n    async function getString(): Promise&lt;string&gt; { } // Correct"
        },
        {
          "text": "interface Product {\nid: number;\nname: string;\nprice: number;\n}\n\nasync function fetchProduct(id: number): Promise<Product> {\nconsole.log(`Fetching product ${id}...`);\nawait new Promise(resolve => setTimeout(resolve, Math.random() * 1000));\nreturn { id, name: `Product ${id}`, price: Math.floor(Math.random() * 100) };\n}\n\nasync function fetchMultipleProducts() {\ntry {\n// Start all fetches in parallel\nconst [product1, product2, product3] = await Promise.all([\nfetchProduct(1),\nfetchProduct(2),\nfetchProduct(3)\n]);\n\nconst total = [product1, product2, product3]\n.reduce((sum, product) => sum + product.price, 0);\nconsole.log(`Total price: $${total.toFixed(2)}`);\n} catch (error) {\nconsole.error('Error fetching products:', error);\n}\n}\n\nfetchMultipleProducts();",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Product {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      id: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      price: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> fetchProduct(id: number): Promise&lt;Product&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Fetching product ${id}...`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Promise(resolve =&gt; setTimeout(resolve, Math.<span class=\"jspropertycolor\" style=\"color:black\">random</span>() * <span class=\"jsnumbercolor\" style=\"color:#905\">1000</span>));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> { id, name: <span class=\"jsstringtempcolor\" style=\"color:#f50\">`Product ${id}`</span>, price: Math.<span class=\"jspropertycolor\" style=\"color:black\">floor</span>(Math.<span class=\"jspropertycolor\" style=\"color:black\">random</span>() * <span class=\"jsnumbercolor\" style=\"color:#905\">100</span>) };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> fetchMultipleProducts() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"commentcolor\" style=\"color:slategray\">// Start all fetches in parallel<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> [product1, product2, product3] = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> Promise.<span class=\"jspropertycolor\" style=\"color:black\">all</span>([<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          fetchProduct(<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>),<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          fetchProduct(<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>),<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          fetchProduct(<span class=\"jsnumbercolor\" style=\"color:#905\">3</span>)<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        ]);<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> total = [product1, product2, product3]<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          .<span class=\"jspropertycolor\" style=\"color:black\">reduce</span>((sum, product) =&gt; sum + product.<span class=\"jspropertycolor\" style=\"color:black\">price</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Total price: $${total.toFixed(2)}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span> (error) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Error fetching products:'</span>, error);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span>    fetchMultipleProducts();<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Define a type for the callback\ntype FetchCallback = (error: Error | null, data?: string) => void;\n\n// Function that takes a typed callback\nfunction fetchDataWithCallback(url: string, callback: FetchCallback): void {\n// Simulate async operation\nsetTimeout(() => {\ntry {\n// Simulate successful response\ncallback(null, \"Response data\");\n} catch (error) {\ncallback(error instanceof Error ? error : new Error('Unknown error'));\n}\n}, 1000);\n}\n\n// Using the callback function\nfetchDataWithCallback('https://api.example.com', (error, data) => {\nif (error) {\nconsole.error('Error:', error.message);\nreturn;\n}\n\n// TypeScript knows data is a string (or undefined)\nif (data) {\nconsole.log(data.toUpperCase());\n}\n});",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Define a type for the callback<br/></span>\ntype FetchCallback = (error: Error | <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span>, data?: string) =&gt; <span class=\"jskeywordcolor\" style=\"color:#005cc5\">void</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Function that takes a typed callback<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> fetchDataWithCallback(url: string, callback: FetchCallback): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">void</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Simulate async operation<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  setTimeout(() =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"commentcolor\" style=\"color:slategray\">// Simulate successful response<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      callback(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"Response data\"</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span> (error) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      callback(error <span class=\"jskeywordcolor\" style=\"color:#005cc5\">instanceof</span> Error ? error : <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Error(<span class=\"jsstringcolor\" style=\"color:green\">'Unknown error'</span>));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }, <span class=\"jsnumbercolor\" style=\"color:#905\">1000</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Using the callback function<br/></span>\nfetchDataWithCallback(<span class=\"jsstringcolor\" style=\"color:green\">'https://api.example.com'</span>, (error, data) =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (error) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Error:'</span>, error.<span class=\"jspropertycolor\" style=\"color:black\">message</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// TypeScript knows data is a string (or undefined)<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (data) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(data.<span class=\"jspropertycolor\" style=\"color:black\">toUpperCase</span>());<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>});<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// Different types of promises\nconst fetchUser = (id: number): Promise<{ id: number; name: string }> =>\nPromise.resolve({ id, name: `User ${id}` });\n\nconst fetchPosts = (userId: number): Promise<Array<{ id: number; title: string }>> =>\nPromise.resolve([     { id: 1, title: 'Post 1' },\n{ id: 2, title: 'Post 2' }\n]);\n\nconst fetchStats = (userId: number): Promise<{ views: number; likes: number }> =>\nPromise.resolve({ views: 100, likes: 25 });\n\n// Run all in parallel\nasync function loadUserDashboard(userId: number) {\ntry {\nconst [user, posts, stats] = await Promise.all([\nfetchUser(userId),\nfetchPosts(userId),\nfetchStats(userId)\n]);\n\n// TypeScript knows the types of user, posts, and stats\nconsole.log(`User: ${user.name}`);\nconsole.log(`Posts: ${posts.length}`);\nconsole.log(`Likes: ${stats.likes}`);\n\nreturn { user, posts, stats };\n} catch (error) {\nconsole.error('Failed to load dashboard:', error);\nthrow error;\n}\n}\n\n// Execute with a user ID\nloadUserDashboard(1);",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Different types of promises<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> fetchUser = (id: number): Promise&lt;{ id: number; name: string }&gt; =&gt;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      Promise.<span class=\"jspropertycolor\" style=\"color:black\">resolve</span>({ id, name: <span class=\"jsstringtempcolor\" style=\"color:#f50\">`User ${id}`</span> });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> fetchPosts = (userId: number): Promise&lt;Array&lt;{ id: number; title: string }&gt;&gt; =&gt;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      Promise.<span class=\"jspropertycolor\" style=\"color:black\">resolve</span>([<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        { id: <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, title: <span class=\"jsstringcolor\" style=\"color:green\">'Post 1'</span> },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        { id: <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, title: <span class=\"jsstringcolor\" style=\"color:green\">'Post 2'</span> }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      ]);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> fetchStats = (userId: number): Promise&lt;{ views: number; likes: number }&gt; =&gt;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      Promise.<span class=\"jspropertycolor\" style=\"color:black\">resolve</span>({ views: <span class=\"jsnumbercolor\" style=\"color:#905\">100</span>, likes: <span class=\"jsnumbercolor\" style=\"color:#905\">25</span> });<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Run all in parallel<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> loadUserDashboard(userId: number) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> [user, posts, stats] = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> Promise.<span class=\"jspropertycolor\" style=\"color:black\">all</span>([<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          fetchUser(userId),<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          fetchPosts(userId),<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          fetchStats(userId)<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        ]);<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"commentcolor\" style=\"color:slategray\">// TypeScript knows the types of user, posts, and stats<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`User: ${user.name}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Posts: ${posts.length}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Likes: ${stats.likes}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> { user, posts, stats };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span> (error) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Failed to load dashboard:'</span>, error);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> error;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Execute with a user ID<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    loadUserDashboard(<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Helper function for timeout\nconst timeout = (ms: number): Promise<never> =>\nnew Promise((_, reject) =>\nsetTimeout(() => reject(new Error(`Timeout after ${ms}ms`)), ms)\n);\n\n// Simulate API call with timeout\nasync function fetchWithTimeout<T>(\npromise: Promise<T>,\ntimeoutMs: number = 5000\n): Promise<T> {\nreturn Promise.race([\npromise,\ntimeout(timeoutMs).then(() => {\nthrow new Error(`Request timed out after ${timeoutMs}ms`);\n}),\n]);\n}\n\n// Usage example\nasync function fetchUserData() {\ntry {\nconst response = await fetchWithTimeout(\nfetch('https://api.example.com/user/1'),\n3000 // 3 second timeout\n);\nconst data = await response.json();\nreturn data;\n} catch (error) {\nconsole.error('Error:', (error as Error).message);\nthrow error;\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Helper function for timeout<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> timeout = (ms: number): Promise&lt;never&gt; =&gt;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Promise((_, reject) =&gt;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        setTimeout(() =&gt; reject(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Error(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Timeout after ${ms}ms`</span>)), ms)<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      );<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Simulate API call with timeout<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> fetchWithTimeout&lt;T&gt;(<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      promise: Promise&lt;T&gt;,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      timeoutMs: number = <span class=\"jsnumbercolor\" style=\"color:#905\">5000</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    ): Promise&lt;T&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> Promise.<span class=\"jspropertycolor\" style=\"color:black\">race</span>([<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        promise,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        timeout(timeoutMs).<span class=\"jskeywordcolor\" style=\"color:#005cc5\">then</span>(() =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Error(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Request timed out after ${timeoutMs}ms`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        }),<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      ]);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Usage example<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> fetchUserData() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> response = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> fetchWithTimeout(<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          fetch(<span class=\"jsstringcolor\" style=\"color:green\">'https://api.example.com/user/1'</span>),<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jsnumbercolor\" style=\"color:#905\">3000</span> <span class=\"commentcolor\" style=\"color:slategray\">// 3 second timeout<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        );<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> data = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> response.<span class=\"jspropertycolor\" style=\"color:black\">json</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> data;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span> (error) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Error:'</span>, (error as Error).<span class=\"jspropertycolor\" style=\"color:black\">message</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> error;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Simulate multiple API calls with different outcomes\nconst fetchData = async (id: number) => {\n// Randomly fail some requests\nif (Math.random() > 0.7) {\nthrow new Error(`Failed to fetch data for ID ${id}`);\n}\nreturn { id, data: `Data for ${id}` };\n};\n\n// Process multiple items with individual error handling\nasync function processBatch(ids: number[]) {\nconst promises = ids.map(id =>\nfetchData(id)\n.then(value => ({ status: 'fulfilled' as const, value }))\n.catch(reason => ({ status: 'rejected' as const, reason }))\n);\n\n// Wait for all to complete\nconst results = await Promise.allSettled(promises);\n\n// Process results\nconst successful = results\n.filter((result): result is PromiseFulfilledResult<{ status: 'fulfilled', value: any }> =>\nresult.status === 'fulfilled' &&\nresult.value.status === 'fulfilled'\n)\n.map(r => r.value.value);\n\nconst failed = results\n.filter((result): result is PromiseRejectedResult |\nPromiseFulfilledResult<{ status: 'rejected', reason: any }> => {\nif (result.status === 'rejected') return true;\nreturn result.value.status === 'rejected';\n});\n\nconsole.log(`Successfully processed: ${successful.length}`);\nconsole.log(`Failed: ${failed.length}`);\n\nreturn { successful, failed };\n}\n\n// Process a batch of IDs\nprocessBatch([1, 2, 3, 4, 5]);",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Simulate multiple API calls with different outcomes<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> fetchData = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> (id: number) =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"commentcolor\" style=\"color:slategray\">// Randomly fail some requests<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (Math.<span class=\"jspropertycolor\" style=\"color:black\">random</span>() &gt; <span class=\"jsnumbercolor\" style=\"color:#905\">0.7</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Error(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Failed to fetch data for ID ${id}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> { id, data: <span class=\"jsstringtempcolor\" style=\"color:#f50\">`Data for ${id}`</span> };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    };<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Process multiple items with individual error handling<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> processBatch(ids: number[]) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> promises = ids.<span class=\"jspropertycolor\" style=\"color:black\">map</span>(id =&gt; <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        fetchData(id)<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          .<span class=\"jskeywordcolor\" style=\"color:#005cc5\">then</span>(value =&gt; ({ status: <span class=\"jsstringcolor\" style=\"color:green\">'fulfilled'</span> as <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span>, value }))<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          .<span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span>(reason =&gt; ({ status: <span class=\"jsstringcolor\" style=\"color:green\">'rejected'</span> as <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span>, reason }))<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      );<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"commentcolor\" style=\"color:slategray\">// Wait for all to complete<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> results = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> Promise.<span class=\"jspropertycolor\" style=\"color:black\">allSettled</span>(promises);<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"commentcolor\" style=\"color:slategray\">// Process results<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> successful = results<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        .<span class=\"jspropertycolor\" style=\"color:black\">filter</span>((result): result is PromiseFulfilledResult&lt;{ status: <span class=\"jsstringcolor\" style=\"color:green\">'fulfilled'</span>, value: any }&gt; =&gt; <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          result.<span class=\"jspropertycolor\" style=\"color:black\">status</span> === <span class=\"jsstringcolor\" style=\"color:green\">'fulfilled'</span> &amp;&amp; <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          result.<span class=\"jspropertycolor\" style=\"color:black\">value</span>.<span class=\"jspropertycolor\" style=\"color:black\">status</span> === <span class=\"jsstringcolor\" style=\"color:green\">'fulfilled'</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        )<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        .<span class=\"jspropertycolor\" style=\"color:black\">map</span>(r =&gt; r.<span class=\"jspropertycolor\" style=\"color:black\">value</span>.<span class=\"jspropertycolor\" style=\"color:black\">value</span>);<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> failed = results<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        .<span class=\"jspropertycolor\" style=\"color:black\">filter</span>((result): result is PromiseRejectedResult | <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          PromiseFulfilledResult&lt;{ status: <span class=\"jsstringcolor\" style=\"color:green\">'rejected'</span>, reason: any }&gt; =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (result.<span class=\"jspropertycolor\" style=\"color:black\">status</span> === <span class=\"jsstringcolor\" style=\"color:green\">'rejected'</span>) <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> result.<span class=\"jspropertycolor\" style=\"color:black\">value</span>.<span class=\"jspropertycolor\" style=\"color:black\">status</span> === <span class=\"jsstringcolor\" style=\"color:green\">'rejected'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        });<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Successfully processed: ${successful.length}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Failed: ${failed.length}`</span>);<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> { successful, failed };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Process a batch of IDs<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    processBatch([<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">5</span>]);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Base error class for our application\nclass AppError extends Error {\nconstructor(\nmessage: string,\npublic readonly code: string,\npublic readonly details?: unknown\n) {\nsuper(message);\nthis.name = this.constructor.name;\nError.captureStackTrace?.(this, this.constructor);\n}\n}\n\n// Specific error types\nclass NetworkError extends AppError {\nconstructor(message: string, details?: unknown) {\nsuper(message, 'NETWORK_ERROR', details);\n}\n}\n\nclass ValidationError extends AppError {\nconstructor(\npublic readonly field: string,\nmessage: string\n) {\nsuper(message, 'VALIDATION_ERROR', { field });\n}\n}\n\nclass NotFoundError extends AppError {\nconstructor(resource: string, id: string | number) {\nsuper(\n`${resource} with ID ${id} not found`,\n'NOT_FOUND',\n{ resource, id }\n);\n}\n}\n\n// Usage example\nasync function fetchUserData(userId: string): Promise<{ id: string; name: string }> {\ntry {\n// Simulate API call\nconst response = await fetch(`/api/users/${userId}`);\n\nif (!response.ok) {\nif (response.status === 404) {\nthrow new NotFoundError('User', userId);\n} else if (response.status >= 500) {\nthrow new NetworkError('Server error', { status: response.status });\n} else {\nthrow new Error(`HTTP error! status: ${response.status}`);\n}\n}\n\nconst data = await response.json();\n\n// Validate response data\nif (!data.name) {\nthrow new ValidationError('name', 'Name is required');\n}\n\nreturn data;\n} catch (error) {\nif (error instanceof AppError) {\n// Already one of our custom errors\nthrow error;\n}\n// Wrap unexpected errors\nthrow new AppError(\n'Failed to fetch user data',\n'UNEXPECTED_ERROR',\n{ cause: error }\n);\n}\n}\n\n// Error handling in the application\nasync function displayUserProfile(userId: string) {\ntry {\nconst user = await fetchUserData(userId);\nconsole.log('User profile:', user);\n} catch (error) {\nif (error instanceof NetworkError) {\nconsole.error('Network issue:', error.message);\n// Show retry UI\n} else if (error instanceof ValidationError) {\nconsole.error('Validation failed:', error.message);\n// Highlight the invalid field\n} else if (error instanceof NotFoundError) {\nconsole.error('Not found:', error.message);\n// Show 404 page\n} else {\nconsole.error('Unexpected error:', error);\n// Show generic error message\n}\n}\n}\n\n// Execute with example data\ndisplayUserProfile('123');",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Base error class for our application<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> AppError <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> Error {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      constructor(<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        message: string,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> readonly code: string,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> readonly details?: unknown<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      ) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">super</span>(message);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">name</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">constructor</span>.<span class=\"jspropertycolor\" style=\"color:black\">name</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        Error.<span class=\"jspropertycolor\" style=\"color:black\">captureStackTrace?</span>.<span class=\"jspropertycolor\" style=\"color:black\"/>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">constructor</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Specific error types<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> NetworkError <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> AppError {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      constructor(message: string, details?: unknown) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">super</span>(message, <span class=\"jsstringcolor\" style=\"color:green\">'NETWORK_ERROR'</span>, details);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> ValidationError <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> AppError {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      constructor(<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> readonly field: string,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        message: string<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      ) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">super</span>(message, <span class=\"jsstringcolor\" style=\"color:green\">'VALIDATION_ERROR'</span>, { field });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> NotFoundError <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> AppError {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      constructor(resource: string, id: string | number) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">super</span>(<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jsstringtempcolor\" style=\"color:#f50\">`${resource} with ID ${id} not found`</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jsstringcolor\" style=\"color:green\">'NOT_FOUND'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          { resource, id }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        );<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Usage example<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> fetchUserData(userId: string): Promise&lt;{ id: string; name: string }&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"commentcolor\" style=\"color:slategray\">// Simulate API call<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> response = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> fetch(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`/api/users/${userId}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (!response.<span class=\"jspropertycolor\" style=\"color:black\">ok</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (response.<span class=\"jspropertycolor\" style=\"color:black\">status</span> === <span class=\"jsnumbercolor\" style=\"color:#905\">404</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> NotFoundError(<span class=\"jsstringcolor\" style=\"color:green\">'User'</span>, userId);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>           } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (response.<span class=\"jspropertycolor\" style=\"color:black\">status</span> &gt;= <span class=\"jsnumbercolor\" style=\"color:#905\">500</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> NetworkError(<span class=\"jsstringcolor\" style=\"color:green\">'Server error'</span>, { status: response.<span class=\"jspropertycolor\" style=\"color:black\">status</span> });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>           } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Error(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`HTTP error! status: ${response.status}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>           }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> data = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> response.<span class=\"jspropertycolor\" style=\"color:black\">json</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"commentcolor\" style=\"color:slategray\">// Validate response data<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (!data.<span class=\"jspropertycolor\" style=\"color:black\">name</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> ValidationError(<span class=\"jsstringcolor\" style=\"color:green\">'name'</span>, <span class=\"jsstringcolor\" style=\"color:green\">'Name is required'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> data;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span> (error) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (error <span class=\"jskeywordcolor\" style=\"color:#005cc5\">instanceof</span> AppError) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"commentcolor\" style=\"color:slategray\">// Already one of our custom errors<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> error;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"commentcolor\" style=\"color:slategray\">// Wrap unexpected errors<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> AppError(<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jsstringcolor\" style=\"color:green\">'Failed to fetch user data'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jsstringcolor\" style=\"color:green\">'UNEXPECTED_ERROR'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          { cause: error }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        );<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Error handling in the application<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> displayUserProfile(userId: string) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> user = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> fetchUserData(userId);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringcolor\" style=\"color:green\">'User profile:'</span>, user);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span> (error) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (error <span class=\"jskeywordcolor\" style=\"color:#005cc5\">instanceof</span> NetworkError) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Network issue:'</span>, error.<span class=\"jspropertycolor\" style=\"color:black\">message</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"commentcolor\" style=\"color:slategray\">// Show retry UI<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (error <span class=\"jskeywordcolor\" style=\"color:#005cc5\">instanceof</span> ValidationError) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Validation failed:'</span>, error.<span class=\"jspropertycolor\" style=\"color:black\">message</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"commentcolor\" style=\"color:slategray\">// Highlight the invalid field<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (error <span class=\"jskeywordcolor\" style=\"color:#005cc5\">instanceof</span> NotFoundError) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Not found:'</span>, error.<span class=\"jspropertycolor\" style=\"color:black\">message</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"commentcolor\" style=\"color:slategray\">// Show 404 page<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Unexpected error:'</span>, error);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"commentcolor\" style=\"color:slategray\">// Show generic error message<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Execute with example data<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    displayUserProfile(<span class=\"jsstringcolor\" style=\"color:green\">'123'</span>);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Async generator function\nasync function* generateNumbers(): AsyncGenerator<number, void, unknown> {\nlet i = 0;\nwhile (i < 5) {\n// Simulate async operation\nawait new Promise(resolve => setTimeout(resolve, 1000));\nyield i++;\n}\n}\n\n// Using the async generator\nasync function consumeNumbers() {\nfor await (const num of generateNumbers()) {\n// TypeScript knows num is a number\nconsole.log(num * 2);\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Async generator function<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>* generateNumbers(): AsyncGenerator&lt;number, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">void</span>, unknown&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">while</span> (i &lt; <span class=\"jsnumbercolor\" style=\"color:#905\">5</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Simulate async operation<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Promise(resolve =&gt; setTimeout(resolve, <span class=\"jsnumbercolor\" style=\"color:#905\">1000</span>));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">yield</span> i++;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Using the async generator<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> consumeNumbers() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> num of generateNumbers()) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// TypeScript knows num is a number<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(num * <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_async.php"
      }
    },
    {
      "title": "TypeScript Decorators",
      "code": [
        {
          "text": "{\n\"compilerOptions\": {\n\"target\": \"ES2020\",\n\"module\": \"commonjs\",\n\"experimentalDecorators\": true,\n\"emitDecoratorMetadata\": true,\n\"strictPropertyInitialization\": false\n},\n\"include\": [\"src/**/*.ts\"]\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"compilerOptions\"</span>: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jsstringcolor\" style=\"color:green\">\"target\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"ES2020\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jsstringcolor\" style=\"color:green\">\"module\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"commonjs\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jsstringcolor\" style=\"color:green\">\"experimentalDecorators\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jsstringcolor\" style=\"color:green\">\"emitDecoratorMetadata\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jsstringcolor\" style=\"color:green\">\"strictPropertyInitialization\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">false</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"include\"</span>: [<span class=\"jsstringcolor\" style=\"color:green\">\"src/**/*.ts\"</span>]<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "class=\"code-comment\">// A simple class decorator that logs class definition\nfunction logClass(constructor: Function) {\nconsole.log(`Class ${constructor.name} was defined at ${new Date().toISOString()}`);\n}\n\nclass=\"code-comment\">// Applying the decorator\n@logClass\nclass UserService {\ngetUsers() {\nreturn ['Alice', 'Bob', 'Charlie'];\n}\n}\n\nclass=\"code-comment\">// Output when the file is loaded: \"Class UserService was defined at [timestamp]\"",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// A simple class decorator that logs class definition</span><br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> logClass(constructor: Function) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Class ${constructor.name} was defined at ${new Date().toISOString()}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Applying the decorator</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    @logClass<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> UserService {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      getUsers() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> [<span class=\"jsstringcolor\" style=\"color:green\">'Alice'</span>, <span class=\"jsstringcolor\" style=\"color:green\">'Bob'</span>, <span class=\"jsstringcolor\" style=\"color:green\">'Charlie'</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Output when the file is loaded: \"Class UserService was defined at [timestamp]\"</span>"
        },
        {
          "text": "class=\"code-comment\">// A decorator that adds a version property and logs instantiation\nfunction versioned(version: string) {\nreturn function (constructor: Function) {\nclass=\"code-comment\">// Add a static property\nconstructor.prototype.version = version;\nclass=\"code-comment\">// Store the original constructor\nconst original = constructor;\nclass=\"code-comment\">// Create a new constructor that wraps the original\nconst newConstructor: any = function (...args: any[]) {\nconsole.log(`Creating instance of ${original.name} v${version}`);\nreturn new original(...args);\n};\nclass=\"code-comment\">// Copy prototype so instanceof works\nnewConstructor.prototype = original.prototype;\nreturn newConstructor;\n};\n}\n\nclass=\"code-comment\">// Applying the decorator with a version\n@versioned('1.0.0')\nclass ApiClient {\nfetchData() {\nconsole.log('Fetching data...');\n}\n}\n\nconst client = new ApiClient();\nconsole.log((client as any).version); class=\"code-comment\">// Outputs: 1.0.0\nclient.fetchData();",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// A decorator that adds a version property and logs instantiation</span><br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> versioned(version: string) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> (constructor: Function) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Add a static property</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        constructor.<span class=\"jspropertycolor\" style=\"color:black\">prototype</span>.<span class=\"jspropertycolor\" style=\"color:black\">version</span> = version;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Store the original constructor</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> original = constructor;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Create a new constructor that wraps the original</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> newConstructor: any = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> (.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\">args</span>: any[]) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Creating instance of ${original.name} v${version}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> original(.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\">args</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Copy prototype so instanceof works</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        newConstructor.<span class=\"jspropertycolor\" style=\"color:black\">prototype</span> = original.<span class=\"jspropertycolor\" style=\"color:black\">prototype</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> newConstructor;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Applying the decorator with a version</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    @versioned(<span class=\"jsstringcolor\" style=\"color:green\">'1.0.0'</span>)<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> ApiClient {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      fetchData() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Fetching data...'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> client = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> ApiClient();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>((client as any).<span class=\"jspropertycolor\" style=\"color:black\">version</span>); <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Outputs: 1.0.0</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    client.<span class=\"jspropertycolor\" style=\"color:black\">fetchData</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>"
        },
        {
          "text": "function sealed(constructor: Function) {\nconsole.log(`Sealing ${constructor.name}...`);\nObject.seal(constructor);\nObject.seal(constructor.prototype);\n}\n\n@sealed\nclass Greeter {\ngreeting: string;\nconstructor(message: string) {\nthis.greeting = message;\n}\ngreet() {\nreturn `Hello, ${this.greeting}`;\n}\n}\n\nclass=\"code-comment\">// This will throw an error in strict mode\n// Greeter.prototype.newMethod = function() {}; // Error: Cannot add property newMethod",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> sealed(constructor: Function) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Sealing ${constructor.name}...`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      Object.<span class=\"jspropertycolor\" style=\"color:black\">seal</span>(constructor);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      Object.<span class=\"jspropertycolor\" style=\"color:black\">seal</span>(constructor.<span class=\"jspropertycolor\" style=\"color:black\">prototype</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    @sealed<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> Greeter {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      greeting: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      constructor(message: string) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">greeting</span> = message;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      greet() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsstringtempcolor\" style=\"color:#f50\">`Hello, ${this.greeting}`</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// This will throw an error in strict mode</span><br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Greeter.prototype.newMethod = function() {}; <span class=\"code-comment\">// Error: Cannot add property newMethod</span>\n   </span>"
        },
        {
          "text": "class=\"code-comment\">// Method decorator to measure execution time\nfunction measureTime(   target: any,   propertyKey: string,   descriptor: PropertyDescriptor ) {\nconst originalMethod = descriptor.value;\ndescriptor.value = function (...args: any[]) {\nconst start = performance.now();\nconst result = originalMethod.apply(this, args);\nconst end = performance.now();\nconsole.log(`${propertyKey} executed in ${(end - start).toFixed(2)}ms`);\nreturn result;\n};\nreturn descriptor;\n}\n\nclass=\"code-comment\">// Using the decorator\nclass DataProcessor {\n@measureTime\nprocessData(data: number[]): number[] {\nclass=\"code-comment\">// Simulate processing time\nfor (let i = 0; i < 100000000; i++) { /* processing */ }\nreturn data.map(x => x * 2);\n}\n}\n\nclass=\"code-comment\">// When called, it will log the execution time\nconst processor = new DataProcessor();\nprocessor.processData([1, 2, 3, 4, 5]);",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Method decorator to measure execution time</span><br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> measureTime(<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      target: any,<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      propertyKey: string,<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      descriptor: PropertyDescriptor\n    ) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> originalMethod = descriptor.<span class=\"jspropertycolor\" style=\"color:black\">value</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      descriptor.<span class=\"jspropertycolor\" style=\"color:black\">value</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> (.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\">args</span>: any[]) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> start = performance.<span class=\"jspropertycolor\" style=\"color:black\">now</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> result = originalMethod.<span class=\"jspropertycolor\" style=\"color:black\">apply</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>, args);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> end = performance.<span class=\"jspropertycolor\" style=\"color:black\">now</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`${propertyKey} executed in ${(end - start).toFixed(2)}ms`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> result;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> descriptor;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Using the decorator</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> DataProcessor {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      @measureTime<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      processData(data: number[]): number[] {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Simulate processing time</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> i = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>; i &lt; <span class=\"jsnumbercolor\" style=\"color:#905\">100000000</span>; i++) { <span class=\"jsregexpcolor\" style=\"color:#e90\">/* processing */</span> }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> data.<span class=\"jspropertycolor\" style=\"color:black\">map</span>(x =&gt; x * <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// When called, it will log the execution time</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> processor = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> DataProcessor();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    processor.<span class=\"jspropertycolor\" style=\"color:black\">processData</span>([<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">3</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">4</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">5</span>]);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>"
        },
        {
          "text": "class=\"code-comment\">// User roles\ntype UserRole = 'admin' | 'editor' | 'viewer';\n\nclass=\"code-comment\">// Current user context (simplified)\nconst currentUser = {   id: 1,   name: 'John Doe',   roles: ['viewer'] as UserRole[] };\n\nclass=\"code-comment\">// Decorator factory for role-based access control\nfunction AllowedRoles(...allowedRoles: UserRole[]) {\nreturn function (\ntarget: any,\npropertyKey: string,\ndescriptor: PropertyDescriptor\n) {\nconst originalMethod = descriptor.value;\ndescriptor.value = function (...args: any[]) {\nconst hasPermission = allowedRoles.some(role =>\ncurrentUser.roles.includes(role)       );\nif (!hasPermission) {\nthrow new Error(\n`User ${currentUser.name} is not authorized to call ${propertyKey}`\n);\n}\nreturn originalMethod.apply(this, args);\n};\nreturn descriptor;\n};\n}\n\nclass=\"code-comment\">// Using the decorator\nclass DocumentService {\n@AllowedRoles('admin', 'editor')\ndeleteDocument(id: string) {\nconsole.log(`Document ${id} deleted`);\n}\n@AllowedRoles('admin', 'editor', 'viewer')\nviewDocument(id: string) {\nconsole.log(`Viewing document ${id}`);\n}\n}\n\nclass=\"code-comment\">// Usage\nconst docService = new DocumentService();\ntry {\ndocService.viewDocument('doc123'); class=\"code-comment\">// Works - viewer role is allowed\ndocService.deleteDocument('doc123'); class=\"code-comment\">// Throws error - viewer cannot delete\n} catch (error) {\nconsole.error(error.message);\n}\nclass=\"code-comment\">// Change user role to admin\ncurrentUser.roles = ['admin'];\ndocService.deleteDocument('doc123'); class=\"code-comment\">// Now works - admin can delete",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// User roles</span><br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    type UserRole = <span class=\"jsstringcolor\" style=\"color:green\">'admin'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'editor'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'viewer'</span>;<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Current user context (simplified)</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> currentUser = {<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      id: <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      name: <span class=\"jsstringcolor\" style=\"color:green\">'John Doe'</span>,<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      roles: [<span class=\"jsstringcolor\" style=\"color:green\">'viewer'</span>] as UserRole[]<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    };<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Decorator factory for role-based access control</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> AllowedRoles(.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\">allowedRoles</span>: UserRole[]) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> (<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        target: any,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        propertyKey: string,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        descriptor: PropertyDescriptor<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      ) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> originalMethod = descriptor.<span class=\"jspropertycolor\" style=\"color:black\">value</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        descriptor.<span class=\"jspropertycolor\" style=\"color:black\">value</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> (.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\">args</span>: any[]) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> hasPermission = allowedRoles.<span class=\"jspropertycolor\" style=\"color:black\">some</span>(role =&gt; <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            currentUser.<span class=\"jspropertycolor\" style=\"color:black\">roles</span>.<span class=\"jspropertycolor\" style=\"color:black\">includes</span>(role)<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          );<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (!hasPermission) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Error(<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>              <span class=\"jsstringtempcolor\" style=\"color:#f50\">`User ${currentUser.name} is not authorized to call ${propertyKey}`</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            );<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> originalMethod.<span class=\"jspropertycolor\" style=\"color:black\">apply</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>, args);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> descriptor;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Using the decorator</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> DocumentService {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      @AllowedRoles(<span class=\"jsstringcolor\" style=\"color:green\">'admin'</span>, <span class=\"jsstringcolor\" style=\"color:green\">'editor'</span>)<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      deleteDocument(id: string) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Document ${id} deleted`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      @AllowedRoles(<span class=\"jsstringcolor\" style=\"color:green\">'admin'</span>, <span class=\"jsstringcolor\" style=\"color:green\">'editor'</span>, <span class=\"jsstringcolor\" style=\"color:green\">'viewer'</span>)<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      viewDocument(id: string) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Viewing document ${id}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Usage</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> docService = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> DocumentService();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      docService.<span class=\"jspropertycolor\" style=\"color:black\">viewDocument</span>(<span class=\"jsstringcolor\" style=\"color:green\">'doc123'</span>); <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Works - viewer role is allowed</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      docService.<span class=\"jspropertycolor\" style=\"color:black\">deleteDocument</span>(<span class=\"jsstringcolor\" style=\"color:green\">'doc123'</span>); <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Throws error - viewer cannot delete</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span> (error) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(error.<span class=\"jspropertycolor\" style=\"color:black\">message</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Change user role to admin</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    currentUser.<span class=\"jspropertycolor\" style=\"color:black\">roles</span> = [<span class=\"jsstringcolor\" style=\"color:green\">'admin'</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    docService.<span class=\"jspropertycolor\" style=\"color:black\">deleteDocument</span>(<span class=\"jsstringcolor\" style=\"color:green\">'doc123'</span>); <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Now works - admin can delete</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>"
        },
        {
          "text": "function deprecated(message: string) {   return function (     target: any,     propertyKey: string,     descriptor: PropertyDescriptor   ) {     const originalMethod = descriptor.value;     descriptor.value = function (...args: any[]) {       console.warn(`Warning: ${propertyKey} is deprecated. ${message}`);       return originalMethod.apply(this, args);     };     return descriptor;   }; }\n\nclass PaymentService {   @deprecated('Use processPaymentV2 instead')   processPayment(amount: number, currency: string) {     console.log(`Processing payment of ${amount} ${currency}`);   }   processPaymentV2(amount: number, currency: string) {     console.log(`Processing payment v2 of ${amount} ${currency}`);   } }\n\nconst payment = new PaymentService();\npayment.processPayment(100, 'USD'); class=\"code-comment\">// Shows deprecation warning\npayment.processPaymentV2(100, 'USD'); class=\"code-comment\">// No warning",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> deprecated(message: string) {<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> (<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        target: any,<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        propertyKey: string,<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        descriptor: PropertyDescriptor\n      ) {<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> originalMethod = descriptor.<span class=\"jspropertycolor\" style=\"color:black\">value</span>;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        descriptor.<span class=\"jspropertycolor\" style=\"color:black\">value</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> (.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\">args</span>: any[]) {<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          console.<span class=\"jspropertycolor\" style=\"color:black\">warn</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Warning: ${propertyKey} is deprecated. ${message}`</span>);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> originalMethod.<span class=\"jspropertycolor\" style=\"color:black\">apply</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>, args);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        };<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> descriptor;<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      };<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> PaymentService {<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      @deprecated(<span class=\"jsstringcolor\" style=\"color:green\">'Use processPaymentV2 instead'</span>)<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      processPayment(amount: number, currency: string) {<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Processing payment of ${amount} ${currency}`</span>);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      processPaymentV2(amount: number, currency: string) {<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Processing payment v2 of ${amount} ${currency}`</span>);<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> payment = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> PaymentService();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    payment.<span class=\"jspropertycolor\" style=\"color:black\">processPayment</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">100</span>, <span class=\"jsstringcolor\" style=\"color:green\">'USD'</span>); <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Shows deprecation warning</span><br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    payment.<span class=\"jspropertycolor\" style=\"color:black\">processPaymentV2</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">100</span>, <span class=\"jsstringcolor\" style=\"color:green\">'USD'</span>); <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// No warning</span>"
        },
        {
          "text": "class=\"code-comment\">// Property decorator to format a string property\nfunction format(formatString: string) {\nreturn function (target: any, propertyKey: string) {\nlet value: string;\nconst getter = () => value;\nconst setter = (newVal: string) => {\nvalue = formatString.replace('{}', newVal);\n};\nObject.defineProperty(target, propertyKey, {\nget: getter,\nset: setter,\nenumerable: true,\nconfigurable: true\n});\n};\n}\n\nclass Greeter {\n@format('Hello, {}!')\ngreeting: string;\n}\n\nconst greeter = new Greeter();\ngreeter.greeting = 'World';\nconsole.log(greeter.greeting); class=\"code-comment\">// Outputs: Hello, World!",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Property decorator to format a string property</span><br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> format(formatString: string) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> (target: any, propertyKey: string) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> value: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> getter = () =&gt; value;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> setter = (newVal: string) =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          value = formatString.<span class=\"jspropertycolor\" style=\"color:black\">replace</span>(<span class=\"jsstringcolor\" style=\"color:green\">'{}'</span>, newVal);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        Object.<span class=\"jspropertycolor\" style=\"color:black\">defineProperty</span>(target, propertyKey, {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          get: getter,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          set: setter,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          enumerable: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          configurable: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> Greeter {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      @format(<span class=\"jsstringcolor\" style=\"color:green\">'Hello, {}!'</span>)<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      greeting: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> greeter = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Greeter();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    greeter.<span class=\"jspropertycolor\" style=\"color:black\">greeting</span> = <span class=\"jsstringcolor\" style=\"color:green\">'World'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(greeter.<span class=\"jspropertycolor\" style=\"color:black\">greeting</span>); <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Outputs: Hello, World!</span>"
        },
        {
          "text": "function logProperty(target: any, propertyKey: string) {\nlet value: any;\nconst getter = function() {\nconsole.log(`Getting ${propertyKey}: ${value}`);\nreturn value;\n};\n\nconst setter = function(newVal: any) {\nconsole.log(`Setting ${propertyKey} from ${value} to ${newVal}`);\nvalue = newVal;\n};\n\nObject.defineProperty(target, propertyKey, {\nget: getter,\nset: setter,\nenumerable: true,\nconfigurable: true\n});\n}\n\nclass Product {\n@logProperty\nname: string;\n@logProperty\nprice: number;\n\nconstructor(name: string, price: number) {\nthis.name = name;\nthis.price = price;\n}\n}\n\nconst product = new Product('Laptop', 999.99);\nproduct.price = 899.99; class=\"code-comment\">// Logs: Setting price from 999.99 to 899.99\nconsole.log(product.name); class=\"code-comment\">// Logs: Getting name: Laptop",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> logProperty(target: any, propertyKey: string) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> value: any;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> getter = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Getting ${propertyKey}: ${value}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> value;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      };<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> setter = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>(newVal: any) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Setting ${propertyKey} from ${value} to ${newVal}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        value = newVal;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      };<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      Object.<span class=\"jspropertycolor\" style=\"color:black\">defineProperty</span>(target, propertyKey, {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        get: getter,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        set: setter,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        enumerable: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        configurable: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> Product {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      @logProperty<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      @logProperty<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      price: number;<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      constructor(name: string, price: number) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">name</span> = name;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">price</span> = price;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> product = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Product(<span class=\"jsstringcolor\" style=\"color:green\">'Laptop'</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">999.99</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    product.<span class=\"jspropertycolor\" style=\"color:black\">price</span> = <span class=\"jsnumbercolor\" style=\"color:#905\">899.99</span>; <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Logs: Setting price from 999.99 to 899.99</span><br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(product.<span class=\"jspropertycolor\" style=\"color:black\">name</span>); <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Logs: Getting name: Laptop</span>"
        },
        {
          "text": "function required(target: any, propertyKey: string) {\nlet value: any;\n\nconst getter = function() {\nif (value === undefined) {\nthrow new Error(`Property ${propertyKey} is required`);\n}\nreturn value;\n};\n\nconst setter = function(newVal: any) {\nvalue = newVal;\n};\n\nObject.defineProperty(target, propertyKey, {\nget: getter,\nset: setter,\nenumerable: true,\nconfigurable: true\n});\n}\n\nclass User {\n@required\nusername: string;\n@required\nemail: string;\nage?: number;\n\nconstructor(username: string, email: string) {\nthis.username = username;\nthis.email = email;\n}\n}\n\nconst user1 = new User('johndoe', 'john@example.com'); class=\"code-comment\">// Works\n// const user2 = new User(undefined, 'test@example.com'); // Throws error: Property username is required\n// const user2 = new User('johndoe', undefined); // Throws error: Property email is required",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> required(target: any, propertyKey: string) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> value: any;<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> getter = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (value === undefined) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Error(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Property ${propertyKey} is required`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> value;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      };<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> setter = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>(newVal: any) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        value = newVal;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      };<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      Object.<span class=\"jspropertycolor\" style=\"color:black\">defineProperty</span>(target, propertyKey, {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        get: getter,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        set: setter,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        enumerable: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        configurable: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> User {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      @required<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      username: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      @required<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      email: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      age?: number;<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      constructor(username: string, email: string) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">username</span> = username;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">email</span> = email;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> user1 = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> User(<span class=\"jsstringcolor\" style=\"color:green\">'johndoe'</span>, <span class=\"jsstringcolor\" style=\"color:green\">'john@example.com'</span>); <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Works</span><br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// const user2 = new User(undefined, 'test@example.com'); <span class=\"code-comment\">// Throws error: Property username is required</span><br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// const user2 = new User('johndoe', undefined); <span class=\"code-comment\">// Throws error: Property email is required</span>\n   </span>"
        },
        {
          "text": "function validateParam(type: 'string' | 'number' | 'boolean') {\nreturn function (target: any, propertyKey: string | symbol, parameterIndex: number) {\nconst existingValidations: any[] = Reflect.getOwnMetadata('validations', target, propertyKey) || [];\nexistingValidations.push({ index: parameterIndex, type });\nReflect.defineMetadata('validations', existingValidations, target, propertyKey);\n};\n}\n\nfunction validate(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\nconst originalMethod = descriptor.value;\ndescriptor.value = function (...args: any[]) {\nconst validations: Array<{index: number, type: string}> =\nReflect.getOwnMetadata('validations', target, propertyKey) || [];\n\nfor (const validation of validations) {\nconst { index, type } = validation;\nconst param = args[index];\nlet isValid = false;\n\nswitch (type) {\ncase 'string':\nisValid = typeof param === 'string' && param.length > 0;\nbreak;\ncase 'number':\nisValid = typeof param === 'number' && !isNaN(param);\nbreak;\ncase 'boolean':\nisValid = typeof param === 'boolean';\n}\n\nif (!isValid) {\nthrow new Error(`Parameter at index ${index} failed ${type} validation`);\n}\n}\n\nreturn originalMethod.apply(this, args);\n};\nreturn descriptor;\n}\n\nclass UserService {\n@validate\ncreateUser(\n@validateParam('string') name: string,\n@validateParam('number') age: number,\n@validateParam('boolean') isActive: boolean\n) {\nconsole.log(`Creating user: ${name}, ${age}, ${isActive}`);\n}\n}\n\nconst service = new UserService();\nservice.createUser('John', 30, true); class=\"code-comment\">// Works\n// service.createUser('', 30, true); // Throws error: Parameter at index 0 failed string validation\n// service.createUser('John', 'thirty', true); // Throws error: Parameter at index 1 failed number validation",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> validateParam(type: <span class=\"jsstringcolor\" style=\"color:green\">'string'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'number'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'boolean'</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> (target: any, propertyKey: string | symbol, parameterIndex: number) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> existingValidations: any[] = Reflect.<span class=\"jspropertycolor\" style=\"color:black\">getOwnMetadata</span>(<span class=\"jsstringcolor\" style=\"color:green\">'validations'</span>, target, propertyKey) || [];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        existingValidations.<span class=\"jspropertycolor\" style=\"color:black\">push</span>({ index: parameterIndex, type });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        Reflect.<span class=\"jspropertycolor\" style=\"color:black\">defineMetadata</span>(<span class=\"jsstringcolor\" style=\"color:green\">'validations'</span>, existingValidations, target, propertyKey);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> validate(target: any, propertyKey: string, descriptor: PropertyDescriptor) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> originalMethod = descriptor.<span class=\"jspropertycolor\" style=\"color:black\">value</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      descriptor.<span class=\"jspropertycolor\" style=\"color:black\">value</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> (.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\">args</span>: any[]) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> validations: Array&lt;{index: number, type: string}&gt; = <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          Reflect.<span class=\"jspropertycolor\" style=\"color:black\">getOwnMetadata</span>(<span class=\"jsstringcolor\" style=\"color:green\">'validations'</span>, target, propertyKey) || [];<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> validation of validations) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> { index, type } = validation;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> param = args[index];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> isValid = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">false</span>;<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jskeywordcolor\" style=\"color:#005cc5\">switch</span> (type) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            <span class=\"jskeywordcolor\" style=\"color:#005cc5\">case</span> <span class=\"jsstringcolor\" style=\"color:green\">'string'</span>:<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>              isValid = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> param === <span class=\"jsstringcolor\" style=\"color:green\">'string'</span> &amp;&amp; param.<span class=\"jspropertycolor\" style=\"color:black\">length</span> &gt; <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>              <span class=\"jskeywordcolor\" style=\"color:#005cc5\">break</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            <span class=\"jskeywordcolor\" style=\"color:#005cc5\">case</span> <span class=\"jsstringcolor\" style=\"color:green\">'number'</span>:<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>              isValid = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> param === <span class=\"jsstringcolor\" style=\"color:green\">'number'</span> &amp;&amp; !isNaN(param);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>              <span class=\"jskeywordcolor\" style=\"color:#005cc5\">break</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            <span class=\"jskeywordcolor\" style=\"color:#005cc5\">case</span> <span class=\"jsstringcolor\" style=\"color:green\">'boolean'</span>:<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>              isValid = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> param === <span class=\"jsstringcolor\" style=\"color:green\">'boolean'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (!isValid) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Error(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Parameter at index ${index} failed ${type} validation`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> originalMethod.<span class=\"jspropertycolor\" style=\"color:black\">apply</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>, args);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> descriptor;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> UserService {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      @validate<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      createUser(<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        @validateParam(<span class=\"jsstringcolor\" style=\"color:green\">'string'</span>) name: string,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        @validateParam(<span class=\"jsstringcolor\" style=\"color:green\">'number'</span>) age: number,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        @validateParam(<span class=\"jsstringcolor\" style=\"color:green\">'boolean'</span>) isActive: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      ) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Creating user: ${name}, ${age}, ${isActive}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> service = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> UserService();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    service.<span class=\"jspropertycolor\" style=\"color:black\">createUser</span>(<span class=\"jsstringcolor\" style=\"color:green\">'John'</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">30</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>); <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Works</span><br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// service.createUser('', 30, true); <span class=\"code-comment\">// Throws error: Parameter at index 0 failed string validation</span><br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// service.createUser('John', 'thirty', true); <span class=\"code-comment\">// Throws error: Parameter at index 1 failed number validation</span>\n   </span>"
        },
        {
          "text": "class=\"code-comment\">// Decorator factory that accepts configuration\nfunction logWithConfig(config: { level: 'log' | 'warn' | 'error', message?: string }) {\nreturn function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\nconst originalMethod = descriptor.value;\ndescriptor.value = function (...args: any[]) {\nconst { level = 'log', message = 'Executing method' } = config;\nconsole[level](`${message}: ${propertyKey}`, { arguments: args });\nconst result = originalMethod.apply(this, args);\nconsole[level](`${propertyKey} completed`);\nreturn result;\n};\nreturn descriptor;\n};\n}\n\nclass PaymentService {\n@logWithConfig({ level: 'log', message: 'Processing payment' })\nprocessPayment(amount: number) {\nconsole.log(`Processing payment of $${amount}`);\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Decorator factory that accepts configuration</span><br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> logWithConfig(config: { level: <span class=\"jsstringcolor\" style=\"color:green\">'log'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'warn'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'error'</span>, message?: string }) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> (target: any, propertyKey: string, descriptor: PropertyDescriptor) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> originalMethod = descriptor.<span class=\"jspropertycolor\" style=\"color:black\">value</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        descriptor.<span class=\"jspropertycolor\" style=\"color:black\">value</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> (.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\">args</span>: any[]) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> { level = <span class=\"jsstringcolor\" style=\"color:green\">'log'</span>, message = <span class=\"jsstringcolor\" style=\"color:green\">'Executing method'</span> } = config;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          console[level](<span class=\"jsstringtempcolor\" style=\"color:#f50\">`${message}: ${propertyKey}`</span>, { <span class=\"jskeywordcolor\" style=\"color:#005cc5\">arguments</span>: args });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> result = originalMethod.<span class=\"jspropertycolor\" style=\"color:black\">apply</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>, args);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          console[level](<span class=\"jsstringtempcolor\" style=\"color:#f50\">`${propertyKey} completed`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> result;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> descriptor;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> PaymentService {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      @logWithConfig({ level: <span class=\"jsstringcolor\" style=\"color:green\">'log'</span>, message: <span class=\"jsstringcolor\" style=\"color:green\">'Processing payment'</span> })<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      processPayment(amount: number) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Processing payment of $${amount}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>"
        },
        {
          "text": "function first() {\nconsole.log('first(): factory evaluated');\nreturn function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\nconsole.log('first(): called');\n};\n}\n\nfunction second() {\nconsole.log('second(): factory evaluated');\nreturn function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\nconsole.log('second(): called');\n};\n}\n\nclass ExampleClass {\n@first()\n@second()\nmethod() {}\n}\n\n// Output:\n// second(): factory evaluated\n// first(): factory evaluated\n// first(): called\n// second(): called",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> first() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringcolor\" style=\"color:green\">'first(): factory evaluated'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> (target: any, propertyKey: string, descriptor: PropertyDescriptor) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringcolor\" style=\"color:green\">'first(): called'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> second() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringcolor\" style=\"color:green\">'second(): factory evaluated'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> (target: any, propertyKey: string, descriptor: PropertyDescriptor) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringcolor\" style=\"color:green\">'second(): called'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> ExampleClass {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      @first()<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      @second()<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      method() {}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Output:<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// second(): factory evaluated<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// first(): factory evaluated<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// first(): called<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// second(): called<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "class=\"code-comment\">// Simple decorator implementations (simplified for example)\nconst ROUTES: any[] = [];\n\nfunction Controller(prefix: string = '') {\nreturn function (constructor: Function) {\nconstructor.prototype.prefix = prefix;\n};\n}\n\nfunction Get(path: string = '') {\nreturn function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\nROUTES.push({\nmethod: 'get',\npath,\nhandler: descriptor.value,\ntarget: target.constructor\n});\n};\n}\n\nclass=\"code-comment\">// Using the decorators\n@Controller('/users')\nclass UserController {\n@Get('/')\ngetAllUsers() {\nreturn { users: [{ id: 1, name: 'John' }] };\n}\n\n@Get('/:id')\ngetUserById(id: string) {\nreturn { id, name: 'John' };\n}\n}\n\nclass=\"code-comment\">// Simulate route registration\nfunction registerRoutes() {\nROUTES.forEach(route => {\nconst prefix = route.target.prototype.prefix || '';\nconsole.log(`Registered ${route.method.toUpperCase()} ${prefix}${route.path}`);\n});\n}\n\nregisterRoutes();\n// Output:\n// Registered GET /users\n// Registered GET /users/:id",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Simple decorator implementations (simplified for example)</span><br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> ROUTES: any[] = [];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> Controller(prefix: string = <span class=\"jsstringcolor\" style=\"color:green\">''</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> (constructor: Function) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        constructor.<span class=\"jspropertycolor\" style=\"color:black\">prototype</span>.<span class=\"jspropertycolor\" style=\"color:black\">prefix</span> = prefix;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> Get(path: string = <span class=\"jsstringcolor\" style=\"color:green\">''</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> (target: any, propertyKey: string, descriptor: PropertyDescriptor) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        ROUTES.<span class=\"jspropertycolor\" style=\"color:black\">push</span>({<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          method: <span class=\"jsstringcolor\" style=\"color:green\">'get'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          path,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          handler: descriptor.<span class=\"jspropertycolor\" style=\"color:black\">value</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          target: target.<span class=\"jspropertycolor\" style=\"color:black\">constructor</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Using the decorators</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    @Controller(<span class=\"jsstringcolor\" style=\"color:green\">'/users'</span>)<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> UserController {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      @Get(<span class=\"jsstringcolor\" style=\"color:green\">'/'</span>)<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      getAllUsers() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> { users: [{ id: <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, name: <span class=\"jsstringcolor\" style=\"color:green\">'John'</span> }] };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      @Get(<span class=\"jsstringcolor\" style=\"color:green\">'/:id'</span>)<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      getUserById(id: string) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> { id, name: <span class=\"jsstringcolor\" style=\"color:green\">'John'</span> };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span>=<span class=\"jsstringcolor\" style=\"color:green\">\"code-comment\"</span>&gt;<span class=\"commentcolor\" style=\"color:slategray\">// Simulate route registration</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> registerRoutes() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      ROUTES.<span class=\"jspropertycolor\" style=\"color:black\">forEach</span>(route =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> prefix = route.<span class=\"jspropertycolor\" style=\"color:black\">target</span>.<span class=\"jspropertycolor\" style=\"color:black\">prototype</span>.<span class=\"jspropertycolor\" style=\"color:black\">prefix</span> || <span class=\"jsstringcolor\" style=\"color:green\">''</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Registered ${route.method.toUpperCase()} ${prefix}${route.path}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    registerRoutes();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Output:<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Registered GET /users<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Registered GET /users/:id<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>"
        },
        {
          "text": "function readonly(target: any, propertyKey: string) {\nObject.defineProperty(target, propertyKey, {\nwritable: false\n});\n}\n\nclass Person {\n@readonly\nname = \"John\";\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> readonly(target: any, propertyKey: string) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  Object.<span class=\"jspropertycolor\" style=\"color:black\">defineProperty</span>(target, propertyKey, {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    writable: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">false</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> Person {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  @readonly<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name = <span class=\"jsstringcolor\" style=\"color:green\">\"John\"</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>} </span>"
        },
        {
          "text": "function logParameter(target: any, propertyKey: string, parameterIndex: number) {\nconsole.log(`Parameter in ${propertyKey} at index ${parameterIndex}`);\n}\n\nclass Demo {\ngreet(@logParameter message: string) {\nreturn message;\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\">\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> logParameter(target: any, propertyKey: string, parameterIndex: number) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Parameter in ${propertyKey} at index ${parameterIndex}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> Demo {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  greet(@logParameter message: string) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> message;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>} </span>"
        },
        {
          "text": "{\n\"compilerOptions\": {\n\"experimentalDecorators\": true\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>{<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"compilerOptions\"</span>: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"experimentalDecorators\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_decorators.php"
      }
    },
    {
      "title": "TypeScript in JavaScript Projects (JSDoc)",
      "code": [
        {
          "text": "// @ts-check\n\n/**\n* Adds two numbers.\n* @param {number} a\n* @param {number} b\n* @returns {number}\n*/\nfunction add(a, b) {\nreturn a + b;\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// @ts-check<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">/**<br/>\n * Adds two numbers.<br/>\n * @param {number} a<br/>\n * @param {number} b<br/>\n * @returns {number}<br/>\n */</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> add(a, b) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> a + b;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// @ts-check\n\n/**\n* @param {{ firstName: string, lastName: string, age?: number }} person\n*/\nfunction greet(person) {\nreturn `Hello, ${person.firstName} ${person.lastName}`;\n}\n\ngreet({ firstName: 'John', lastName: 'Doe' }); // OK\ngreet({ firstName: 'Jane' }); // Error: Property 'lastName' is missing",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// @ts-check<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">/**<br/>\n * @param {{ firstName: string, lastName: string, age?: number }} person<br/>\n */</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> greet(person) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsstringtempcolor\" style=\"color:#f50\">`Hello, ${person.firstName} ${person.lastName}`</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\ngreet({ firstName: <span class=\"jsstringcolor\" style=\"color:green\">'John'</span>, lastName: <span class=\"jsstringcolor\" style=\"color:green\">'Doe'</span> }); <span class=\"commentcolor\" style=\"color:slategray\">// OK<br/></span>\ngreet({ firstName: <span class=\"jsstringcolor\" style=\"color:green\">'Jane'</span> }); <span class=\"commentcolor\" style=\"color:slategray\">// Error: Property 'lastName' is missing<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// @ts-check\n\n/**\n* @typedef {Object} User\n* @property {number} id - The user ID\n* @property {string} username - The username\n* @property {string} [email] - Optional email address\n* @property {('admin'|'user'|'guest')} role - User role\n* @property {() => string} getFullName - Method that returns full name\n*/\n\n/** @type {User} */\nconst currentUser = {\nid: 1,\nusername: 'johndoe',\nrole: 'admin',\ngetFullName() {\nreturn 'John Doe';\n}\n};\n\n// TypeScript will provide autocomplete for User properties\nconsole.log(currentUser.role);",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// @ts-check<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">/**<br/>\n * @typedef {Object} User<br/>\n * @property {number} id - The user ID<br/>\n * @property {string} username - The username<br/>\n * @property {string} [email] - Optional email address<br/>\n * @property {('admin'|'user'|'guest')} role - User role<br/>\n * @property {() =&gt; string} getFullName - Method that returns full name<br/>\n */</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"jsregexpcolor\" style=\"color:#e90\">/** @type {User} */</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> currentUser = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  id: <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  username: <span class=\"jsstringcolor\" style=\"color:green\">'johndoe'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  role: <span class=\"jsstringcolor\" style=\"color:green\">'admin'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  getFullName() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsstringcolor\" style=\"color:green\">'John Doe'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// TypeScript will provide autocomplete for User properties<br/></span>\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(currentUser.<span class=\"jspropertycolor\" style=\"color:black\">role</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// @ts-check\n\n/** @typedef {{ x: number, y: number }} Point */\n\n/**\n* @typedef {Point & { z: number }} Point3D\n*/\n\n/** @type {Point3D} */\nconst point3d = { x: 1, y: 2, z: 3 };\n\n// @ts-expect-error - missing z property\nconst point2d = { x: 1, y: 2 };",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// @ts-check<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"jsregexpcolor\" style=\"color:#e90\">/** @typedef {{ x: number, y: number }} Point */</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">/**<br/>\n * @typedef {Point &amp; { z: number }} Point3D<br/>\n */</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"jsregexpcolor\" style=\"color:#e90\">/** @type {Point3D} */</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> point3d = { x: <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, y: <span class=\"jsnumbercolor\" style=\"color:#905\">2</span>, z: <span class=\"jsnumbercolor\" style=\"color:#905\">3</span> };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// @ts-expect-error - missing z property<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> point2d = { x: <span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, y: <span class=\"jsnumbercolor\" style=\"color:#905\">2</span> };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// @ts-check\n\n/**\n* Calculates the area of a rectangle\n* @param {number} width - The width of the rectangle\n* @param {number} height - The height of the rectangle\n* @returns {number} The calculated area\n*/\nfunction calculateArea(width, height) {\nreturn width * height;\n}\n\n// TypeScript knows the parameter and return types\nconst area = calculateArea(10, 20);",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// @ts-check<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">/**<br/>\n * Calculates the area of a rectangle<br/>\n * @param {number} width - The width of the rectangle<br/>\n * @param {number} height - The height of the rectangle<br/>\n * @returns {number} The calculated area<br/>\n */</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> calculateArea(width, height) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> width * height;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// TypeScript knows the parameter and return types<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> area = calculateArea(<span class=\"jsnumbercolor\" style=\"color:#905\">10</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">20</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// @ts-check\n\n/**\n* @callback StringProcessor\n* @param {string} input\n* @returns {string}\n*/\n\n/**\n* @type {StringProcessor}\n*/\nconst toUpperCase = (str) => str.toUpperCase();\n\n/**\n* @param {string[]} strings\n* @param {StringProcessor} processor\n* @returns {string[]}\n*/\nfunction processStrings(strings, processor) {\nreturn strings.map(processor);\n}\n\nconst result = processStrings(['hello', 'world'], toUpperCase);\n// result will be ['HELLO', 'WORLD']",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// @ts-check<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">/**<br/>\n * @callback StringProcessor<br/>\n * @param {string} input<br/>\n * @returns {string}<br/>\n */</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">/**<br/>\n * @type {StringProcessor}<br/>\n */</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> toUpperCase = (str) =&gt; str.<span class=\"jspropertycolor\" style=\"color:black\">toUpperCase</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">/**<br/>\n * @param {string[]} strings<br/>\n * @param {StringProcessor} processor<br/>\n * @returns {string[]}<br/>\n */</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> processStrings(strings, processor) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> strings.<span class=\"jspropertycolor\" style=\"color:black\">map</span>(processor);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> result = processStrings([<span class=\"jsstringcolor\" style=\"color:green\">'hello'</span>, <span class=\"jsstringcolor\" style=\"color:green\">'world'</span>], toUpperCase);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// result will be ['HELLO', 'WORLD']<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// @ts-check\n\n/**\n* @overload\n* @param {string} a\n* @param {string} b\n* @returns {string}\n*/\n/**\n* @overload\n* @param {number} a\n* @param {number} b\n* @returns {number}\n*/\n/**\n* @param {string | number} a\n* @param {string | number} b\n* @returns {string | number}\n*/\nfunction add(a, b) {\nif (typeof a === 'string' || typeof b === 'string') {\nreturn String(a) + String(b);\n}\nreturn a + b;\n}\n\nconst strResult = add('Hello, ', 'World!'); // string\nconst numResult = add(10, 20); // number",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// @ts-check<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">/**<br/>\n * @overload<br/>\n * @param {string} a<br/>\n * @param {string} b<br/>\n * @returns {string}<br/>\n */</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">/**<br/>\n * @overload<br/>\n * @param {number} a<br/>\n * @param {number} b<br/>\n * @returns {number}<br/>\n */</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">/**<br/>\n * @param {string | number} a<br/>\n * @param {string | number} b<br/>\n * @returns {string | number}<br/>\n */</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> add(a, b) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> a === <span class=\"jsstringcolor\" style=\"color:green\">'string'</span> || <span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> b === <span class=\"jsstringcolor\" style=\"color:green\">'string'</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> String(a) + String(b);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> a + b;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> strResult = add(<span class=\"jsstringcolor\" style=\"color:green\">'Hello, '</span>, <span class=\"jsstringcolor\" style=\"color:green\">'World!'</span>); <span class=\"commentcolor\" style=\"color:slategray\">// string<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> numResult = add(<span class=\"jsnumbercolor\" style=\"color:#905\">10</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">20</span>);             <span class=\"commentcolor\" style=\"color:slategray\">// number<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// @ts-check\n\n/** @typedef {{ name: string, age: number }} Person */\n/** @typedef {Person & { employeeId: string }} Employee */\n/** @typedef {Person | { guestId: string, visitDate: Date }} Visitor */\n\n/** @type {Employee} */\nconst employee = {\nname: 'Alice',\nage: 30,\nemployeeId: 'E123'\n};\n\n/** @type {Visitor} */\nconst guest = {\nguestId: 'G456',\nvisitDate: new Date()\n};\n\n/**\n* @param {Visitor} visitor\n* @returns {string}\n*/\nfunction getVisitorId(visitor) {\nif ('guestId' in visitor) {\nreturn visitor.guestId; // TypeScript knows this is a guest\n}\nreturn visitor.name; // TypeScript knows this is a Person\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// @ts-check<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"jsregexpcolor\" style=\"color:#e90\">/** @typedef {{ name: string, age: number }} Person */</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"jsregexpcolor\" style=\"color:#e90\">/** @typedef {Person &amp; { employeeId: string }} Employee */</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"jsregexpcolor\" style=\"color:#e90\">/** @typedef {Person | { guestId: string, visitDate: Date }} Visitor */</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"jsregexpcolor\" style=\"color:#e90\">/** @type {Employee} */</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> employee = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name: <span class=\"jsstringcolor\" style=\"color:green\">'Alice'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  age: <span class=\"jsnumbercolor\" style=\"color:#905\">30</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  employeeId: <span class=\"jsstringcolor\" style=\"color:green\">'E123'</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"jsregexpcolor\" style=\"color:#e90\">/** @type {Visitor} */</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> guest = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  guestId: <span class=\"jsstringcolor\" style=\"color:green\">'G456'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  visitDate: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Date()<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">/**<br/>\n * @param {Visitor} visitor<br/>\n * @returns {string}<br/>\n */</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> getVisitorId(visitor) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (<span class=\"jsstringcolor\" style=\"color:green\">'guestId'</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">in</span> visitor) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> visitor.<span class=\"jspropertycolor\" style=\"color:black\">guestId</span>;  <span class=\"commentcolor\" style=\"color:slategray\">// TypeScript knows this is a guest<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> visitor.<span class=\"jspropertycolor\" style=\"color:black\">name</span>;      <span class=\"commentcolor\" style=\"color:slategray\">// TypeScript knows this is a Person<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// @ts-check\n\n/** * @template T * @typedef {[K in keyof T]: T[K] extends Function ? K : never}[keyof T] MethodNames */\n\n/** * @template T * @typedef {{ *   [K in keyof T as `get${'<' }Capitalize<string & K>{'>'}`]: () => T[K] * }} Getters */\n\n/** @type {Getters<{ name: string, age: number }> } */\nconst userGetters = {\ngetName: () => 'John',\ngetAge: () => 30\n};\n\n// TypeScript enforces the return types\nconst name = userGetters.getName(); // string\nconst age = userGetters.getAge(); // number",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// @ts-check<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">/**\n * @template T\n * @typedef {[K in keyof T]: T[K] extends Function ? K : never}[keyof T] MethodNames\n */</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">/**\n * @template T\n * @typedef {{ \n *   [K in keyof T as `get${'&lt;' }Capitalize&lt;string &amp; K&gt;{'&gt;'}`]: () =&gt; T[K] \n * }} Getters\n */</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"jsregexpcolor\" style=\"color:#e90\">/** @type {Getters&lt;{ name: string, age: number }&gt; } */</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> userGetters = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  getName: () =&gt; <span class=\"jsstringcolor\" style=\"color:green\">'John'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  getAge: () =&gt; <span class=\"jsnumbercolor\" style=\"color:#905\">30</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// TypeScript enforces the return types<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> name = userGetters.<span class=\"jspropertycolor\" style=\"color:black\">getName</span>(); <span class=\"commentcolor\" style=\"color:slategray\">// string<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> age = userGetters.<span class=\"jspropertycolor\" style=\"color:black\">getAge</span>();   <span class=\"commentcolor\" style=\"color:slategray\">// number<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// @ts-check\n\n// Importing types from TypeScript files\n/** @typedef {import('./types').User} User */\n\n// Importing types from node_modules\n/** @typedef {import('express').Request} ExpressRequest */\n\n// Importing with renaming\n/** @typedef {import('./api').default as ApiClient} ApiClient */",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// @ts-check<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Importing types from TypeScript files<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">/** @typedef {import('./types').User} User */</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Importing types from node_modules<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"jsregexpcolor\" style=\"color:#e90\">/** @typedef {import('express').Request} ExpressRequest */</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// Importing with renaming<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">/** @typedef {import('./api').default as ApiClient} ApiClient */</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// types.d.ts\ndeclare module 'my-module' {\nexport interface Config {\napiKey: string;\ntimeout?: number;\nretries?: number;\n}\n\nexport function initialize(config: Config): void;\nexport function fetchData<T = any>(url: string): Promise<T>;\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// types.d.ts<br/></span>\ndeclare module <span class=\"jsstringcolor\" style=\"color:green\">'my-module'</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> Config {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    apiKey: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    timeout?: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    retries?: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> initialize(config: Config): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">void</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> fetchData&lt;T = any&gt;(url: string): Promise&lt;T&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        },
        {
          "text": "// @ts-check\n\n/** @type {import('my-module').Config} */\nconst config = {\napiKey: '12345',\ntimeout: 5000\n};\n\n// TypeScript will provide autocomplete and type checking\nimport { initialize } from 'my-module';\ninitialize(config);",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// @ts-check<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"jsregexpcolor\" style=\"color:#e90\">/** @type {import('my-module').Config} */</span><br/>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> config = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  apiKey: <span class=\"jsstringcolor\" style=\"color:green\">'12345'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  timeout: <span class=\"jsnumbercolor\" style=\"color:#905\">5000</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span><span class=\"commentcolor\" style=\"color:slategray\">// TypeScript will provide autocomplete and type checking<br/></span>\n<span class=\"jskeywordcolor\" style=\"color:#005cc5\">import</span> { initialize } from <span class=\"jsstringcolor\" style=\"color:green\">'my-module'</span>;<br/>\ninitialize(config);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span> </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_jsdoc.php"
      }
    },
    {
      "title": "TypeScript Migration Guide",
      "code": [
        {
          "text": "# Create a new branch for the migration\ngit checkout -b typescript-migration\n\n# Commit your current state\ngit add .\ngit commit -m \"Pre-TypeScript migration state\"",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  # Create a <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> branch <span class=\"jskeywordcolor\" style=\"color:#005cc5\">for</span> the migration<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  git checkout -b typescript-migration<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  # Commit your current state<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  git add .<span class=\"jspropertycolor\" style=\"color:black\"/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  git commit -m <span class=\"jsstringcolor\" style=\"color:green\">\"Pre-TypeScript migration state\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "# Install TypeScript as a dev dependency\nnpm install --save-dev typescript @types/node",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  # Install TypeScript as a dev dependency<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  npm install --save-dev typescript @types/node<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "{\n\"compilerOptions\": {\n\"target\": \"ES2020\",\n\"module\": \"commonjs\",\n\"strict\": true,\n\"esModuleInterop\": true,\n\"skipLibCheck\": true,\n\"forceConsistentCasingInFileNames\": true,\n\"outDir\": \"./dist\",\n\"rootDir\": \"./src\"\n},\n\"include\": [\"src/**/*\"],\n\"exclude\": [\"node_modules\"]\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"compilerOptions\"</span>: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"target\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"ES2020\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"module\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"commonjs\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"strict\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"esModuleInterop\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"skipLibCheck\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"forceConsistentCasingInFileNames\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"outDir\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"./dist\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"rootDir\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"./src\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"include\"</span>: [<span class=\"jsstringcolor\" style=\"color:green\">\"src/**/*\"</span>],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"exclude\"</span>: [<span class=\"jsstringcolor\" style=\"color:green\">\"node_modules\"</span>]<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "{\n\"compilerOptions\": {\n\"allowJs\": true,\n\"checkJs\": true\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jsstringcolor\" style=\"color:green\">\"compilerOptions\"</span>: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jsstringcolor\" style=\"color:green\">\"allowJs\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jsstringcolor\" style=\"color:green\">\"checkJs\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>       </span>"
        },
        {
          "text": "# Rename all JS files to TS\nfind src -name \"*.js\" -exec sh -c 'mv \"$0\" \"${0%.js}.ts\"' {} \\;",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      # Rename all JS files to TS<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      find src -name <span class=\"jsstringcolor\" style=\"color:green\">\"*.js\"</span> -exec sh -c <span class=\"jsstringcolor\" style=\"color:green\">'mv \"$0\" \"${0%.js}.ts\"'</span> {} \\;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>       </span>"
        },
        {
          "text": "{\n\"compilerOptions\": {\n\"target\": \"ES2020\",\n\"module\": \"commonjs\",\n\"strict\": true,\n\"esModuleInterop\": true,\n\"skipLibCheck\": true,\n\"forceConsistentCasingInFileNames\": true,\n\"outDir\": \"./dist\",\n\"rootDir\": \"./src\",\n\"allowJs\": true,\n\"checkJs\": true,\n\"noEmit\": true\n},\n\"include\": [\"src/**/*\"],\n\"exclude\": [\"node_modules\", \"dist\"]\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"compilerOptions\"</span>: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"target\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"ES2020\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"module\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"commonjs\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"strict\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"esModuleInterop\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"skipLibCheck\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"forceConsistentCasingInFileNames\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"outDir\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"./dist\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"rootDir\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"./src\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"allowJs\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"checkJs\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"noEmit\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    },<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"include\"</span>: [<span class=\"jsstringcolor\" style=\"color:green\">\"src/**/*\"</span>],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"exclude\"</span>: [<span class=\"jsstringcolor\" style=\"color:green\">\"node_modules\"</span>, <span class=\"jsstringcolor\" style=\"color:green\">\"dist\"</span>]<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// @ts-check\n\n/** @type {string} */\nconst name = 'John';\n\n// TypeScript will catch this error\nname = 42; // Error: Type '42' is not assignable to type 'string'",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// @ts-check<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jsregexpcolor\" style=\"color:#e90\">/** @type {string} */</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> name = <span class=\"jsstringcolor\" style=\"color:green\">'John'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// TypeScript will catch this error<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  name = <span class=\"jsnumbercolor\" style=\"color:#905\">42</span>; <span class=\"commentcolor\" style=\"color:slategray\">// Error: Type '42' is not assignable to type 'string'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "# Rename a single file\nmv src/utils/helpers.js src/utils/helpers.ts\n\n# Or rename all files in a directory (use with caution)\nfind src/utils -name \"*.js\" -exec sh -c 'mv \"$0\" \"${0%.js}.ts\"' {} \\;",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  # Rename a single file<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  mv src/utils/helpers.<span class=\"jspropertycolor\" style=\"color:black\">js</span> src/utils/helpers.<span class=\"jspropertycolor\" style=\"color:black\">ts</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  # Or rename all files <span class=\"jskeywordcolor\" style=\"color:#005cc5\">in</span> a directory (use <span class=\"jskeywordcolor\" style=\"color:#005cc5\">with</span> caution)<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  find src/utils -name <span class=\"jsstringcolor\" style=\"color:green\">\"*.js\"</span> -exec sh -c <span class=\"jsstringcolor\" style=\"color:green\">'mv \"$0\" \"${0%.js}.ts\"'</span> {} \\;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Before\nfunction add(a, b) {\nreturn a + b;\n}\n\n// After\nfunction add(a: number, b: number): number {\nreturn a + b;\n}\n\n// With interface\ninterface User {\nid: number;\nname: string;\nemail?: string;\n}\n\nfunction getUser(id: number): User {\nreturn { id, name: 'John Doe' };\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Before<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> add(a, b) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> a + b;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// After<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> add(a: number, b: number): number {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> a + b;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// With interface<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> User {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    id: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    email?: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> getUser(id: number): User {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> { id, name: <span class=\"jsstringcolor\" style=\"color:green\">'John Doe'</span> };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "{\n\"scripts\": {\n\"build\": \"tsc\",\n\"dev\": \"tsc --watch\",\n\"test\": \"jest\"\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"scripts\"</span>: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"build\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"tsc\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"dev\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"tsc --watch\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"test\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"jest\"</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "npx ts-migrate-full .",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      npx ts-migrate-full .<span class=\"jspropertycolor\" style=\"color:black\"/><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>       </span>"
        },
        {
          "text": "npx typestat --init",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      npx typestat --init<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>       </span>"
        },
        {
          "text": "npm install --save-dev @types/react @types/node",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      npm install --save-dev @types/react @types/node<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>       </span>"
        },
        {
          "text": "// Use type inference where possible\nconst name = 'John'; // TypeScript infers 'string'\nconst age = 30; // TypeScript infers 'number'\n\n// Use union types for flexibility\ntype Status = 'active' | 'inactive' | 'pending';\n\n// Use type guards for runtime checks\nfunction isString(value: any): value is string {\nreturn typeof value === 'string';\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Use type inference where possible<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> name = <span class=\"jsstringcolor\" style=\"color:green\">'John'</span>;  <span class=\"commentcolor\" style=\"color:slategray\">// TypeScript infers 'string'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> age = <span class=\"jsnumbercolor\" style=\"color:#905\">30</span>;       <span class=\"commentcolor\" style=\"color:slategray\">// TypeScript infers 'number'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Use union types for flexibility<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type Status = <span class=\"jsstringcolor\" style=\"color:green\">'active'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'inactive'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'pending'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Use type guards for runtime checks<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> isString(value: any): value is string {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> value === <span class=\"jsstringcolor\" style=\"color:green\">'string'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Before\nconst user = {};\nuser.name = 'John'; // Error: Property 'name' does not exist",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Before<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> user = {};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  user.<span class=\"jspropertycolor\" style=\"color:black\">name</span> = <span class=\"jsstringcolor\" style=\"color:green\">'John'</span>;  <span class=\"commentcolor\" style=\"color:slategray\">// Error: Property 'name' does not exist<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Option 1: Index signature\ninterface User {\n[key: string]: any;\n}\nconst user: User = {};\nuser.name = 'John'; // OK\n\n// Option 2: Type assertion\nconst user = {} as { name: string };\nuser.name = 'John'; // OK",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Option 1: Index signature<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> User {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    [key: string]: any;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> user: User = {};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  user.<span class=\"jspropertycolor\" style=\"color:black\">name</span> = <span class=\"jsstringcolor\" style=\"color:green\">'John'</span>;  <span class=\"commentcolor\" style=\"color:slategray\">// OK<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Option 2: Type assertion<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> user = {} as { name: string };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  user.<span class=\"jspropertycolor\" style=\"color:black\">name</span> = <span class=\"jsstringcolor\" style=\"color:green\">'John'</span>;  <span class=\"commentcolor\" style=\"color:slategray\">// OK<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "class Counter {\ncount = 0;\nincrement() {\nsetTimeout(function() {\nthis.count++; // Error: 'this' is not defined\n}, 1000);\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> Counter {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    count = <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    increment() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      setTimeout(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">count</span>++;  <span class=\"commentcolor\" style=\"color:slategray\">// Error: 'this' is not defined<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }, <span class=\"jsnumbercolor\" style=\"color:#905\">1000</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Solution 1: Arrow function\nsetTimeout(() => {\nthis.count++; // 'this' is lexically scoped\n}, 1000);\n\n// Solution 2: Bind 'this'\nsetTimeout(function(this: Counter) {\nthis.count++;\n}.bind(this), 1000);",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Solution 1: Arrow function<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  setTimeout(() =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">count</span>++;  <span class=\"commentcolor\" style=\"color:slategray\">// 'this' is lexically scoped<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }, <span class=\"jsnumbercolor\" style=\"color:#905\">1000</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Solution 2: Bind 'this'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  setTimeout(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>: Counter) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">count</span>++;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }.<span class=\"jspropertycolor\" style=\"color:black\">bind</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>), <span class=\"jsnumbercolor\" style=\"color:#905\">1000</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_migration.php"
      }
    },
    {
      "title": "TypeScript Error Handling",
      "code": [
        {
          "text": "function divide(a: number, b: number): number {\nif (b === 0) {\nthrow new Error('Division by zero');\n}\nreturn a / b;\n}\n\ntry {\nconst result = divide(10, 0);\nconsole.log(result);\n} catch (error) {\nconsole.error('An error occurred:', error.message);\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> divide(a: number, b: number): number {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (b === <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Error(<span class=\"jsstringcolor\" style=\"color:green\">'Division by zero'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> a / b;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> result = divide(<span class=\"jsnumbercolor\" style=\"color:#905\">10</span>, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(result);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span> (error) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(<span class=\"jsstringcolor\" style=\"color:green\">'An error occurred:'</span>, error.<span class=\"jspropertycolor\" style=\"color:black\">message</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "class ValidationError extends Error {\nconstructor(message: string, public field?: string) {\nsuper(message);\nthis.name = 'ValidationError';\n// Restore prototype chain\nObject.setPrototypeOf(this, ValidationError.prototype);\n}\n}\n\nclass DatabaseError extends Error {\nconstructor(message: string, public code: number) {\nsuper(message);\nthis.name = 'DatabaseError';\nObject.setPrototypeOf(this, DatabaseError.prototype);\n}\n}\n\n// Usage\nfunction validateUser(user: any) {\nif (!user.name) {\nthrow new ValidationError('Name is required', 'name');\n}\nif (!user.email.includes('@')) {\nthrow new ValidationError('Invalid email format', 'email');\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> ValidationError <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> Error {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    constructor(message: string, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> field?: string) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">super</span>(message);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">name</span> = <span class=\"jsstringcolor\" style=\"color:green\">'ValidationError'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"commentcolor\" style=\"color:slategray\">// Restore prototype chain<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      Object.<span class=\"jspropertycolor\" style=\"color:black\">setPrototypeOf</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>, ValidationError.<span class=\"jspropertycolor\" style=\"color:black\">prototype</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> DatabaseError <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> Error {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    constructor(message: string, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> code: number) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">super</span>(message);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">name</span> = <span class=\"jsstringcolor\" style=\"color:green\">'DatabaseError'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      Object.<span class=\"jspropertycolor\" style=\"color:black\">setPrototypeOf</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>, DatabaseError.<span class=\"jspropertycolor\" style=\"color:black\">prototype</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Usage<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> validateUser(user: any) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (!user.<span class=\"jspropertycolor\" style=\"color:black\">name</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> ValidationError(<span class=\"jsstringcolor\" style=\"color:green\">'Name is required'</span>, <span class=\"jsstringcolor\" style=\"color:green\">'name'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (!user.<span class=\"jspropertycolor\" style=\"color:black\">email</span>.<span class=\"jspropertycolor\" style=\"color:black\">includes</span>(<span class=\"jsstringcolor\" style=\"color:green\">'@'</span>)) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> ValidationError(<span class=\"jsstringcolor\" style=\"color:green\">'Invalid email format'</span>, <span class=\"jsstringcolor\" style=\"color:green\">'email'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Type guards\nfunction isErrorWithMessage(error: unknown): error is { message: string } {\nreturn (\ntypeof error === 'object' &&\nerror !== null &&\n'message' in error &&\ntypeof (error as Record\n\"\"\n>).message === 'string'\n);\n}\n\nfunction isValidationError(error: unknown): error is ValidationError {\nreturn error instanceof ValidationError;\n}\n\n// Usage in catch block\ntry {\nvalidateUser({});\n} catch (error: unknown) {\nif (isValidationError(error)) {\nconsole.error(`Validation error in ${error.field}: ${error.message}`);\n} else if (isErrorWithMessage(error)) {\nconsole.error('An error occurred:', error.message);\n} else {\nconsole.error('An unknown error occurred');\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Type guards<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> isErrorWithMessage(error: unknown): error is { message: string } {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> (<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> error === <span class=\"jsstringcolor\" style=\"color:green\">'object'</span> &amp;&amp;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      error !== <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span> &amp;&amp;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">'message'</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">in</span> error &amp;&amp;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> (error as Record<string unknown=\"&lt;span\" class=\"jsstringcolor\" style=\"color:green\">\"\"</string></span>&gt;).<span class=\"jspropertycolor\" style=\"color:black\">message</span> === <span class=\"jsstringcolor\" style=\"color:green\">'string'</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    );<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> isValidationError(error: unknown): error is ValidationError {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> error <span class=\"jskeywordcolor\" style=\"color:#005cc5\">instanceof</span> ValidationError;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Usage in catch block<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    validateUser({});<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span> (error: unknown) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (isValidationError(error)) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Validation error in ${error.field}: ${error.message}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (isErrorWithMessage(error)) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(<span class=\"jsstringcolor\" style=\"color:green\">'An error occurred:'</span>, error.<span class=\"jspropertycolor\" style=\"color:black\">message</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(<span class=\"jsstringcolor\" style=\"color:green\">'An unknown error occurred'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>"
        },
        {
          "text": "function assertIsError(error: unknown): asserts error is Error {\nif (!(error instanceof Error)) {\nthrow new Error('Caught value is not an Error instance');\n}\n}\n\ntry {\n// ...\n} catch (error) {\nassertIsError(error);\nconsole.error(error.message); // TypeScript now knows error is Error\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> assertIsError(error: unknown): asserts error is Error {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (!(error <span class=\"jskeywordcolor\" style=\"color:#005cc5\">instanceof</span> Error)) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Error(<span class=\"jsstringcolor\" style=\"color:green\">'Caught value is not an Error instance'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// ...<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span> (error) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    assertIsError(error);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(error.<span class=\"jspropertycolor\" style=\"color:black\">message</span>); <span class=\"commentcolor\" style=\"color:slategray\">// TypeScript now knows error is Error<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "interface User {\nid: number;\nname: string;\nemail: string;\n}\n\n// Using async/await with try/catch\nasync function fetchUser(userId: number): Promise\n{\ntry {\nconst response = await fetch(`/api/users/${userId}`);\nif (!response.ok) {\nthrow new Error(`HTTP error! status: ${response.status}`);\n}\nreturn await response.json() as User;\n} catch (error) {\nif (error instanceof Error) {\nconsole.error('Failed to fetch user:', error.message);\n}\nthrow error; // Re-throw to allow caller to handle\n}\n}\n\n// Using Promise.catch() for error handling\nfunction fetchUserPosts(userId: number): Promise\n{\nreturn fetch(`/api/users/${userId}/posts`)\n.then(response => {\nif (!response.ok) {\nthrow new Error(`HTTP error! status: ${response.status}`);\n}\nreturn response.json();\n})\n.catch(error => {\nconsole.error('Failed to fetch posts:', error);\nreturn []; // Return empty array as fallback\n});\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> User {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    id: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    email: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Using async/await with try/catch<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> fetchUser(userId: number): Promise<user> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> response = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> fetch(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`/api/users/${userId}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (!response.<span class=\"jspropertycolor\" style=\"color:black\">ok</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Error(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`HTTP error! status: ${response.status}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> response.<span class=\"jspropertycolor\" style=\"color:black\">json</span>() as User;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span> (error) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (error <span class=\"jskeywordcolor\" style=\"color:#005cc5\">instanceof</span> Error) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Failed to fetch user:'</span>, error.<span class=\"jspropertycolor\" style=\"color:black\">message</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> error; <span class=\"commentcolor\" style=\"color:slategray\">// Re-throw to allow caller to handle<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Using Promise.catch() for error handling<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> fetchUserPosts(userId: number): Promise<post> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> fetch(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`/api/users/${userId}/posts`</span>)<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      .<span class=\"jskeywordcolor\" style=\"color:#005cc5\">then</span>(response =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (!response.<span class=\"jspropertycolor\" style=\"color:black\">ok</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Error(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`HTTP error! status: ${response.status}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> response.<span class=\"jspropertycolor\" style=\"color:black\">json</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      })<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      .<span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span>(error =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Failed to fetch posts:'</span>, error);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> []; <span class=\"commentcolor\" style=\"color:slategray\">// Return empty array as fallback<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  </post></user> </span>"
        },
        {
          "text": "// Bad: Unhandled promise rejection\nfetchData().then(data => console.log(data));\n\n// Good: Handle both success and error cases\nfetchData()\n.then(data => console.log('Success:', data))\n.catch(error => console.error('Error:', error));\n\n// Or use void for intentionally ignored errors\nvoid fetchData().catch(console.error);",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Bad: Unhandled promise rejection<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  fetchData().<span class=\"jskeywordcolor\" style=\"color:#005cc5\">then</span>(data =&gt; console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(data));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Good: Handle both success and error cases<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  fetchData()<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    .<span class=\"jskeywordcolor\" style=\"color:#005cc5\">then</span>(data =&gt; console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Success:'</span>, data))<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    .<span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span>(error =&gt; console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Error:'</span>, error));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Or use void for intentionally ignored errors<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">void</span> fetchData().<span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span>(console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "import React, { Component, ErrorInfo, ReactNode } from 'react';\n\ninterface ErrorBoundaryProps {\nchildren: ReactNode;\nfallback?: ReactNode;\n}\n\ninterface ErrorBoundaryState {\nhasError: boolean;\nerror?: Error;\n}\n\nclass ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {\npublic state: ErrorBoundaryState = {\nhasError: false\n};\n\npublic static getDerivedStateFromError(error: Error): ErrorBoundaryState {\nreturn { hasError: true, error };\n}\n\npublic componentDidCatch(error: Error, errorInfo: ErrorInfo) {\nconsole.error('Uncaught error:', error, errorInfo);\n// Log to error reporting service\n}\n\npublic render() {\nif (this.state.hasError) {\nreturn this.props.fallback || (\n<div className=\"error-boundary\">\n<h2>Something went wrong</h2>\n<p>{this.state.error?.message}</p>\n<button onClick={() => this.setState({ hasError: false })}>\nTry again\n</button>\n</div>\n);\n}\n\nreturn this.props.children;\n}\n}\n\n// Usage\nfunction App() {\nreturn (\n<ErrorBoundary fallback={<div>Oops! Something broke.</div>}>\n<MyComponent />\n</ErrorBoundary>\n);\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">import</span> React, { Component, ErrorInfo, ReactNode } from <span class=\"jsstringcolor\" style=\"color:green\">'react'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> ErrorBoundaryProps {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    children: ReactNode;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    fallback?: ReactNode;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> ErrorBoundaryState {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    hasError: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    error?: Error;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> ErrorBoundary <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> Component&lt;ErrorBoundaryProps, ErrorBoundaryState&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> state: ErrorBoundaryState = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      hasError: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">false</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">static</span> getDerivedStateFromError(error: Error): ErrorBoundaryState {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> { hasError: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>, error };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> componentDidCatch(error: Error, errorInfo: ErrorInfo) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Uncaught error:'</span>, error, errorInfo);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"commentcolor\" style=\"color:slategray\">// Log to error reporting service<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> render() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">state</span>.<span class=\"jspropertycolor\" style=\"color:black\">hasError</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">props</span>.<span class=\"jspropertycolor\" style=\"color:black\">fallback</span> || (<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          &lt;div className=<span class=\"jsstringcolor\" style=\"color:green\">\"error-boundary\"</span>&gt;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            &lt;h2&gt;Something went wrong&lt;/h2&gt;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            &lt;p&gt;{<span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">state</span>.<span class=\"jspropertycolor\" style=\"color:black\">error?</span>.<span class=\"jspropertycolor\" style=\"color:black\">message</span>}&lt;/p&gt;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            &lt;button onClick={() =&gt; <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">setState</span>({ hasError: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">false</span> })}&gt;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>              Try again<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>            &lt;/button&gt;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          &lt;/div&gt;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        );<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">props</span>.<span class=\"jspropertycolor\" style=\"color:black\">children</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Usage<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> App() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> (<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      &lt;ErrorBoundary fallback={&lt;div&gt;Oops! Something broke.<span class=\"jspropertycolor\" style=\"color:black\"/>&lt;/div&gt;}&gt;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        &lt;MyComponent /&gt;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      &lt;/ErrorBoundary&gt;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    );<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Bad: Silent failure\ntry { /* ... */ } catch { /* empty */ }\n\n// Good: At least log the error\ntry { /* ... */ } catch (error) {\nconsole.error('Operation failed:', error);\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Bad: Silent failure<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> { <span class=\"jsregexpcolor\" style=\"color:#e90\">/* ... */</span> } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span> { <span class=\"jsregexpcolor\" style=\"color:#e90\">/* empty */</span> }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Good: At least log the error<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> { <span class=\"jsregexpcolor\" style=\"color:#e90\">/* ... */</span> } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span> (error) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Operation failed:'</span>, error);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "class NetworkError extends Error {\nconstructor(public status: number, message: string) {\nsuper(message);\nthis.name = 'NetworkError';\n}\n}\n\nclass ValidationError extends Error {\nconstructor(public field: string, message: string) {\nsuper(message);\nthis.name = 'ValidationError';\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> NetworkError <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> Error {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    constructor(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> status: number, message: string) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">super</span>(message);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">name</span> = <span class=\"jsstringcolor\" style=\"color:green\">'NetworkError'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> ValidationError <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> Error {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    constructor(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">public</span> field: string, message: string) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">super</span>(message);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">name</span> = <span class=\"jsstringcolor\" style=\"color:green\">'ValidationError'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// In a data access layer\nasync function getUser(id: string): Promise\n{\nconst response = await fetch(`/api/users/${id}`);\nif (!response.ok) {\nthrow new NetworkError(response.status, 'Failed to fetch user');\n}\nreturn response.json();\n}\n\n// In a UI component\nasync function loadUser() {\ntry {\nconst user = await getUser('123');\nsetUser(user);\n} catch (error) {\nif (error instanceof NetworkError) {\nif (error.status === 404) {\nshowError('User not found');\n} else {\nshowError('Network error. Please try again later.');\n}\n} else {\nshowError('An unexpected error occurred');\n}\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// In a data access layer<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> getUser(id: string): Promise<user> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> response = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> fetch(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`/api/users/${id}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (!response.<span class=\"jspropertycolor\" style=\"color:black\">ok</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> NetworkError(response.<span class=\"jspropertycolor\" style=\"color:black\">status</span>, <span class=\"jsstringcolor\" style=\"color:green\">'Failed to fetch user'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> response.<span class=\"jspropertycolor\" style=\"color:black\">json</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// In a UI component<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> loadUser() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> user = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> getUser(<span class=\"jsstringcolor\" style=\"color:green\">'123'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      setUser(user);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span> (error) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (error <span class=\"jskeywordcolor\" style=\"color:#005cc5\">instanceof</span> NetworkError) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (error.<span class=\"jspropertycolor\" style=\"color:black\">status</span> === <span class=\"jsnumbercolor\" style=\"color:#905\">404</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          showError(<span class=\"jsstringcolor\" style=\"color:green\">'User not found'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>          showError(<span class=\"jsstringcolor\" style=\"color:green\">'Network error. Please try again later.'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        showError(<span class=\"jsstringcolor\" style=\"color:green\">'An unexpected error occurred'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  </user> </span>"
        },
        {
          "text": "// Bad: Unhandled promise rejection\nfetchData();\n\n// Good: Handle the rejection\nfetchData().catch(console.error);",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Bad: Unhandled promise rejection<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  fetchData();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Good: Handle the rejection<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  fetchData().<span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span>(console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Bad: Error is of type 'unknown'\ntry { /* ... */ } catch (error) {\nconsole.log(error.message); // Error: Property 'message' does not exist on type 'unknown'\n}\n\n// Good: Narrow the type\ntry { /* ... */ } catch (error) {\nif (error instanceof Error) {\nconsole.log(error.message); // OK\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Bad: Error is of type 'unknown'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> { <span class=\"jsregexpcolor\" style=\"color:#e90\">/* ... */</span> } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span> (error) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(error.<span class=\"jspropertycolor\" style=\"color:black\">message</span>); <span class=\"commentcolor\" style=\"color:slategray\">// Error: Property 'message' does not exist on type 'unknown'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Good: Narrow the type<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> { <span class=\"jsregexpcolor\" style=\"color:#e90\">/* ... */</span> } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span> (error) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (error <span class=\"jskeywordcolor\" style=\"color:#005cc5\">instanceof</span> Error) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(error.<span class=\"jspropertycolor\" style=\"color:black\">message</span>); <span class=\"commentcolor\" style=\"color:slategray\">// OK<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Bad: Error is silently ignored\nfunction saveData(data: Data) {\ntry {\ndatabase.save(data);\n} catch {\n// Ignore\n}\n}\n\n// Better: Log the error and/or notify the user\nfunction saveData(data: Data) {\ntry {\ndatabase.save(data);\n} catch (error) {\nconsole.error('Failed to save data:', error);\nshowError('Failed to save data. Please try again.');\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Bad: Error is silently ignored<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> saveData(data: Data) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      database.<span class=\"jspropertycolor\" style=\"color:black\">save</span>(data);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"commentcolor\" style=\"color:slategray\">// Ignore<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Better: Log the error and/or notify the user<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> saveData(data: Data) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      database.<span class=\"jspropertycolor\" style=\"color:black\">save</span>(data);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span> (error) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Failed to save data:'</span>, error);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      showError(<span class=\"jsstringcolor\" style=\"color:green\">'Failed to save data. Please try again.'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_error_handling.php"
      }
    },
    {
      "title": "TypeScript Best Practices",
      "code": [
        {
          "text": "// tsconfig.json\n{\n\"compilerOptions\": {\n/* Enable all strict type-checking options */\n\"strict\": true,\n/* Additional recommended settings */\n\"target\": \"ES2020\",\n\"module\": \"commonjs\",\n\"moduleResolution\": \"node\",\n\"esModuleInterop\": true,\n\"skipLibCheck\": true,\n\"forceConsistentCasingInFileNames\": true\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// tsconfig.json<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"compilerOptions\"</span>: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsregexpcolor\" style=\"color:#e90\">/* Enable all strict type-checking options */</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"strict\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsregexpcolor\" style=\"color:#e90\">/* Additional recommended settings */</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"target\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"ES2020\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"module\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"commonjs\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"moduleResolution\"</span>: <span class=\"jsstringcolor\" style=\"color:green\">\"node\"</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"esModuleInterop\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"skipLibCheck\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"forceConsistentCasingInFileNames\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "{\n\"compilerOptions\": {\n/* Additional strict checks */\n\"noImplicitAny\": true,\n\"strictNullChecks\": true,\n\"strictFunctionTypes\": true,\n\"strictBindCallApply\": true,\n\"strictPropertyInitialization\": true,\n\"noImplicitThis\": true,\n\"alwaysStrict\": true\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"compilerOptions\"</span>: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsregexpcolor\" style=\"color:#e90\">/* Additional strict checks */</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"noImplicitAny\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"strictNullChecks\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"strictFunctionTypes\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"strictBindCallApply\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"strictPropertyInitialization\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"noImplicitThis\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"alwaysStrict\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Bad: Redundant type annotation\nconst name: string = 'John';\n\n// Good: Let TypeScript infer the type\nconst name = 'John';\n\n// Bad: Redundant return type\nfunction add(a: number, b: number): number {\nreturn a + b;\n}\n\n// Good: Let TypeScript infer return type\nfunction add(a: number, b: number) {\nreturn a + b;\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Bad: Redundant type annotation<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> name: string = <span class=\"jsstringcolor\" style=\"color:green\">'John'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Good: Let TypeScript infer the type<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> name = <span class=\"jsstringcolor\" style=\"color:green\">'John'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Bad: Redundant return type<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> add(a: number, b: number): number {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> a + b;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Good: Let TypeScript infer return type<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> add(a: number, b: number) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> a + b;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Bad: No type information\nfunction processUser(user) {\nreturn user.name.toUpperCase();\n}\n\n// Good: Explicit parameter and return types\ninterface User {\nid: number;\nname: string;\nemail?: string; // Optional property\n}\n\nfunction processUser(user: User): string {\nreturn user.name.toUpperCase();\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Bad: No type information<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> processUser(user) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> user.<span class=\"jspropertycolor\" style=\"color:black\">name</span>.<span class=\"jspropertycolor\" style=\"color:black\">toUpperCase</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Good: Explicit parameter and return types<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> User {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    id: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    email?: string;  <span class=\"commentcolor\" style=\"color:slategray\">// Optional property<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> processUser(user: User): string {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> user.<span class=\"jspropertycolor\" style=\"color:black\">name</span>.<span class=\"jspropertycolor\" style=\"color:black\">toUpperCase</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Use interface for object shapes that can be extended/implemented\ninterface User {\nid: number;\nname: string;\n}\n\n// Extending an interface\ninterface AdminUser extends User {\npermissions: string[];\n}\n\n// Use type for unions, tuples, or mapped types\ntype UserRole = 'admin' | 'editor' | 'viewer';\n\n// Union types\ntype UserId = number | string;\n\n// Mapped types\ntype ReadonlyUser = Readonly<User>;\n\n// Tuple types\ntype Point = [number, number];",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Use interface for object shapes that can be extended/implemented<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> User {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    id: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Extending an interface<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> AdminUser <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> User {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    permissions: string[];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Use type for unions, tuples, or mapped types<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type UserRole = <span class=\"jsstringcolor\" style=\"color:green\">'admin'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'editor'</span> | <span class=\"jsstringcolor\" style=\"color:green\">'viewer'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Union types<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type UserId = number | string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Mapped types<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type ReadonlyUser = Readonly&lt;User&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Tuple types<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type Point = [number, number];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Bad: Loses type safety\nfunction logValue(value: any) {\nconsole.log(value.toUpperCase()); // No error until runtime\n}\n\n// Better: Use generic type parameter\nfunction logValue<T>(value: T) {\nconsole.log(String(value)); // Safer, but still not ideal\n}\n\n// Best: Be specific about expected types\nfunction logString(value: string) {\nconsole.log(value.toUpperCase()); // Type-safe\n}\n\n// When you need to accept any value but still be type-safe\nfunction logUnknown(value: unknown) {\nif (typeof value === 'string') {\nconsole.log(value.toUpperCase());\n} else {\nconsole.log(String(value));\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Bad: Loses type safety<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> logValue(value: any) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(value.<span class=\"jspropertycolor\" style=\"color:black\">toUpperCase</span>()); <span class=\"commentcolor\" style=\"color:slategray\">// No error until runtime<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Better: Use generic type parameter<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> logValue&lt;T&gt;(value: T) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(String(value)); <span class=\"commentcolor\" style=\"color:slategray\">// Safer, but still not ideal<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Best: Be specific about expected types<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> logString(value: string) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(value.<span class=\"jspropertycolor\" style=\"color:black\">toUpperCase</span>()); <span class=\"commentcolor\" style=\"color:slategray\">// Type-safe<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// When you need to accept any value but still be type-safe<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> logUnknown(value: unknown) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> value === <span class=\"jsstringcolor\" style=\"color:green\">'string'</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(value.<span class=\"jspropertycolor\" style=\"color:black\">toUpperCase</span>());<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      console.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(String(value));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// user/user.model.ts\nexport interface User {\nid: string;\nname: string;\nemail: string;\n}\n\n// user/user.service.ts\nimport { User } from './user.model';\n\nexport class UserService {\nprivate users: User[] = [];\n\naddUser(user: User) {\nthis.users.push(user);\n}\n\ngetUser(id: string): User | undefined {\nreturn this.users.find(user => user.id === id);\n}\n}\n\n// user/index.ts (barrel file)\nexport * from './user.model';\nexport * from './user.service';",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// user/user.model.ts<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> User {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    id: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    email: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// user/user.service.ts<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">import</span> { User } from <span class=\"jsstringcolor\" style=\"color:green\">'./user.model'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> UserService {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">private</span> users: User[] = [];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    addUser(user: User) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">users</span>.<span class=\"jspropertycolor\" style=\"color:black\">push</span>(user);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    getUser(id: string): User | undefined {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">users</span>.<span class=\"jspropertycolor\" style=\"color:black\">find</span>(user =&gt; user.<span class=\"jspropertycolor\" style=\"color:black\">id</span> === id);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// user/index.ts (barrel file)<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> * from <span class=\"jsstringcolor\" style=\"color:green\">'./user.model'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> * from <span class=\"jsstringcolor\" style=\"color:green\">'./user.service'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Good\nuser.service.ts // Service classes\nuser.model.ts // Type definitions\nuser.controller.ts // Controllers\nuser.component.ts // Components\nuser.utils.ts // Utility functions\nuser.test.ts // Test files\n\n// Bad\nUserService.ts // Avoid PascalCase for file names\nuser_service.ts // Avoid snake_case\nuserService.ts // Avoid camelCase for file names",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Good<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  user.<span class=\"jspropertycolor\" style=\"color:black\">service</span>.<span class=\"jspropertycolor\" style=\"color:black\">ts</span>      <span class=\"commentcolor\" style=\"color:slategray\">// Service classes<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  user.<span class=\"jspropertycolor\" style=\"color:black\">model</span>.<span class=\"jspropertycolor\" style=\"color:black\">ts</span>        <span class=\"commentcolor\" style=\"color:slategray\">// Type definitions<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  user.<span class=\"jspropertycolor\" style=\"color:black\">controller</span>.<span class=\"jspropertycolor\" style=\"color:black\">ts</span>   <span class=\"commentcolor\" style=\"color:slategray\">// Controllers<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  user.<span class=\"jspropertycolor\" style=\"color:black\">component</span>.<span class=\"jspropertycolor\" style=\"color:black\">ts</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Components<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  user.<span class=\"jspropertycolor\" style=\"color:black\">utils</span>.<span class=\"jspropertycolor\" style=\"color:black\">ts</span>        <span class=\"commentcolor\" style=\"color:slategray\">// Utility functions<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  user.<span class=\"jspropertycolor\" style=\"color:black\">test</span>.<span class=\"jspropertycolor\" style=\"color:black\">ts</span>         <span class=\"commentcolor\" style=\"color:slategray\">// Test files<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Bad<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  UserService.<span class=\"jspropertycolor\" style=\"color:black\">ts</span>       <span class=\"commentcolor\" style=\"color:slategray\">// Avoid PascalCase for file names<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  user_service.<span class=\"jspropertycolor\" style=\"color:black\">ts</span>      <span class=\"commentcolor\" style=\"color:slategray\">// Avoid snake_case<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  userService.<span class=\"jspropertycolor\" style=\"color:black\">ts</span>       <span class=\"commentcolor\" style=\"color:slategray\">// Avoid camelCase for file names<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Bad: No type information\nfunction process(user, notify) {\nnotify(user.name);\n}\n\n// Good: Explicit parameter and return types\nfunction processUser(\nuser: User,\nnotify: (message: string) => void\n): void {\nnotify(`Processing user: ${user.name}`);\n}\n\n// Use default parameters instead of conditionals\nfunction createUser(\nname: string,\nrole: UserRole = 'viewer',\nisActive: boolean = true\n): User {\nreturn { name, role, isActive };\n}\n\n// Use rest parameters for variable arguments\nfunction sum(...numbers: number[]): number {\nreturn numbers.reduce((total, num) => total + num, 0);\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Bad: No type information<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> process(user, notify) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    notify(user.<span class=\"jspropertycolor\" style=\"color:black\">name</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Good: Explicit parameter and return types<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> processUser(<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    user: User,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    notify: (message: string) =&gt; <span class=\"jskeywordcolor\" style=\"color:#005cc5\">void</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  ): <span class=\"jskeywordcolor\" style=\"color:#005cc5\">void</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    notify(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`Processing user: ${user.name}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Use default parameters instead of conditionals<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> createUser(<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    name: string,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    role: UserRole = <span class=\"jsstringcolor\" style=\"color:green\">'viewer'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    isActive: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span> = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  ): User {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> { name, role, isActive };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Use rest parameters for variable arguments<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> sum(.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\">numbers</span>: number[]): number {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> numbers.<span class=\"jspropertycolor\" style=\"color:black\">reduce</span>((total, num) =&gt; total + num, <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Bad: Too many responsibilities\nfunction processUserData(userData: any) {\n// Validation\nif (!userData || !userData.name) throw new Error('Invalid user data');\n\n// Data transformation\nconst processedData = {\n...userData,\nname: userData.name.trim(),\ncreatedAt: new Date()\n};\n\n// Side effect\nsaveToDatabase(processedData);\n\n// Notification\nsendNotification(processedData.email, 'Profile updated');\n\nreturn processedData;\n}\n\n// Better: Split into smaller, focused functions\nfunction validateUserData(data: unknown): UserData {\nif (!data || typeof data !== 'object') {\nthrow new Error('Invalid user data');\n}\nreturn data as UserData;\n}\n\nfunction processUserData(userData: UserData): ProcessedUserData {\nreturn {\n...userData,\nname: userData.name.trim(),\ncreatedAt: new Date()\n};\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Bad: Too many responsibilities<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> processUserData(userData: any) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Validation<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (!userData || !userData.<span class=\"jspropertycolor\" style=\"color:black\">name</span>) <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Error(<span class=\"jsstringcolor\" style=\"color:green\">'Invalid user data'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Data transformation<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> processedData = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      .<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\">userData</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      name: userData.<span class=\"jspropertycolor\" style=\"color:black\">name</span>.<span class=\"jspropertycolor\" style=\"color:black\">trim</span>(),<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      createdAt: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Date()<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Side effect<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    saveToDatabase(processedData);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Notification<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    sendNotification(processedData.<span class=\"jspropertycolor\" style=\"color:black\">email</span>, <span class=\"jsstringcolor\" style=\"color:green\">'Profile updated'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> processedData;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Better: Split into smaller, focused functions<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> validateUserData(data: unknown): UserData {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (!data || <span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> data !== <span class=\"jsstringcolor\" style=\"color:green\">'object'</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Error(<span class=\"jsstringcolor\" style=\"color:green\">'Invalid user data'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> data as UserData;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> processUserData(userData: UserData): ProcessedUserData {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      .<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\"/>.<span class=\"jspropertycolor\" style=\"color:black\">userData</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      name: userData.<span class=\"jspropertycolor\" style=\"color:black\">name</span>.<span class=\"jspropertycolor\" style=\"color:black\">trim</span>(),<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      createdAt: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Date()<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Bad: Not handling errors\nasync function fetchData() {\nconst response = await fetch('/api/data');\nreturn response.json();\n}\n\n// Good: Proper error handling\nasync function fetchData<T>(url: string): Promise<T> {\ntry {\nconst response = await fetch(url);\nif (!response.ok) {\nthrow new Error(`HTTP error! status: ${response.status}`);\n}\nreturn await response.json() as T;\n} catch (error) {\nconsole.error('Failed to fetch data:', error);\nthrow error; // Re-throw to allow caller to handle\n}\n}\n\n// Better: Use Promise.all for parallel operations\nasync function fetchMultipleData<T>(urls: string[]): Promise<T[]> {\ntry {\nconst promises = urls.map(url => fetchData<T>(url));\nreturn await Promise.all(promises);\n} catch (error) {\nconsole.error('One or more requests failed:', error);\nthrow error;\n}\n}\n\n// Example usage\ninterface User {\nid: string;\nname: string;\nemail: string;\n}\n\n// Fetch user data with proper typing\nasync function getUserData(userId: string): Promise<User> {\nreturn fetchData<User>(`/api/users/${userId}`);\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Bad: Not handling errors<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> fetchData() {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> response = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> fetch(<span class=\"jsstringcolor\" style=\"color:green\">'/api/data'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> response.<span class=\"jspropertycolor\" style=\"color:black\">json</span>();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Good: Proper error handling<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> fetchData&lt;T&gt;(url: string): Promise&lt;T&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> response = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> fetch(url);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (!response.<span class=\"jspropertycolor\" style=\"color:black\">ok</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Error(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`HTTP error! status: ${response.status}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> response.<span class=\"jspropertycolor\" style=\"color:black\">json</span>() as T;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span> (error) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Failed to fetch data:'</span>, error);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> error; <span class=\"commentcolor\" style=\"color:slategray\">// Re-throw to allow caller to handle<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Better: Use Promise.all for parallel operations<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> fetchMultipleData&lt;T&gt;(urls: string[]): Promise&lt;T[]&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">try</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> promises = urls.<span class=\"jspropertycolor\" style=\"color:black\">map</span>(url =&gt; fetchData&lt;T&gt;(url));<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> Promise.<span class=\"jspropertycolor\" style=\"color:black\">all</span>(promises);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">catch</span> (error) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      console.<span class=\"jspropertycolor\" style=\"color:black\">error</span>(<span class=\"jsstringcolor\" style=\"color:green\">'One or more requests failed:'</span>, error);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> error;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Example usage<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> User {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    id: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    email: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Fetch user data with proper typing<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> getUserData(userId: string): Promise&lt;User&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> fetchData&lt;User&gt;(<span class=\"jsstringtempcolor\" style=\"color:#f50\">`/api/users/${userId}`</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Bad: Nested async/await (callback hell)\nasync function processUser(userId: string) {\nconst user = await getUser(userId);\nif (user) {\nconst orders = await getOrders(user.id);\nif (orders.length > 0) {\nconst latestOrder = orders[0];\nconst items = await getOrderItems(latestOrder.id);\nreturn { user, latestOrder, items };\n}\n}\nreturn null;\n}\n\n// Better: Flatten the async/await chain\nasync function processUser(userId: string) {\nconst user = await getUser(userId);\nif (!user) return null;\n\nconst orders = await getOrders(user.id);\nif (orders.length === 0) return { user, latestOrder: null, items: [] };\n\nconst latestOrder = orders[0];\nconst items = await getOrderItems(latestOrder.id);\n\nreturn { user, latestOrder, items };\n}\n\n// Best: Use Promise.all for independent async operations\nasync function processUser(userId: string) {\nconst [user, orders] = await Promise.all([\ngetUser(userId),\ngetOrders(userId)\n]);\n\nif (!user) return null;\nif (orders.length === 0) return { user, latestOrder: null, items: [] };\n\nconst latestOrder = orders[0];\nconst items = await getOrderItems(latestOrder.id);\n\nreturn { user, latestOrder, items };\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Bad: Nested async/await (callback hell)<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> processUser(userId: string) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> user = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> getUser(userId);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (user) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> orders = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> getOrders(user.<span class=\"jspropertycolor\" style=\"color:black\">id</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (orders.<span class=\"jspropertycolor\" style=\"color:black\">length</span> &gt; <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> latestOrder = orders[<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> items = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> getOrderItems(latestOrder.<span class=\"jspropertycolor\" style=\"color:black\">id</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> { user, latestOrder, items };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Better: Flatten the async/await chain<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> processUser(userId: string) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> user = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> getUser(userId);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (!user) <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> orders = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> getOrders(user.<span class=\"jspropertycolor\" style=\"color:black\">id</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (orders.<span class=\"jspropertycolor\" style=\"color:black\">length</span> === <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>) <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> { user, latestOrder: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span>, items: [] };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> latestOrder = orders[<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> items = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> getOrderItems(latestOrder.<span class=\"jspropertycolor\" style=\"color:black\">id</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> { user, latestOrder, items };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Best: Use Promise.all for independent async operations<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> processUser(userId: string) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> [user, orders] = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> Promise.<span class=\"jspropertycolor\" style=\"color:black\">all</span>([<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      getUser(userId),<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      getOrders(userId)<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    ]);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (!user) <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (orders.<span class=\"jspropertycolor\" style=\"color:black\">length</span> === <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>) <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> { user, latestOrder: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span>, items: [] };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> latestOrder = orders[<span class=\"jsnumbercolor\" style=\"color:#905\">0</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> items = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> getOrderItems(latestOrder.<span class=\"jspropertycolor\" style=\"color:black\">id</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> { user, latestOrder, items };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Bad: Hard to test due to direct dependencies\nclass PaymentProcessor {\nasync processPayment(amount: number) {\nconst paymentGateway = new PaymentGateway();\nreturn paymentGateway.charge(amount);\n}\n}\n\n// Better: Use dependency injection\ninterface PaymentGateway {\ncharge(amount: number): Promise<boolean>;\n}\n\nclass PaymentProcessor {\nconstructor(private paymentGateway: PaymentGateway) {}\n\nasync processPayment(amount: number): Promise<boolean> {\nif (amount <= 0) {\nthrow new Error('Amount must be greater than zero');\n}\nreturn this.paymentGateway.charge(amount);\n}\n}\n\n// Test example with Jest\ndescribe('PaymentProcessor', () => {\nlet processor: PaymentProcessor;\nlet mockGateway: jest.Mocked<PaymentGateway>;\n\nbeforeEach(() => {\nmockGateway = {\ncharge: jest.fn()\n};\nprocessor = new PaymentProcessor(mockGateway);\n});\n\nit('should process a valid payment', async () => {\nmockGateway.charge.mockResolvedValue(true);\nconst result = await processor.processPayment(100);\nexpect(result).toBe(true);\nexpect(mockGateway.charge).toHaveBeenCalledWith(100);\n});\n\nit('should throw for invalid amount', async () => {\nawait expect(processor.processPayment(-50))\n.rejects\ntoThrow('Amount must be greater than zero');\n});\n});",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Bad: Hard to test due to direct dependencies<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> PaymentProcessor {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> processPayment(amount: number) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> paymentGateway = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> PaymentGateway();<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> paymentGateway.<span class=\"jspropertycolor\" style=\"color:black\">charge</span>(amount);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Better: Use dependency injection<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> PaymentGateway {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    charge(amount: number): Promise&lt;<span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">class</span> PaymentProcessor {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    constructor(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">private</span> paymentGateway: PaymentGateway) {}<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> processPayment(amount: number): Promise&lt;<span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (amount &lt;= <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Error(<span class=\"jsstringcolor\" style=\"color:green\">'Amount must be greater than zero'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">this</span>.<span class=\"jspropertycolor\" style=\"color:black\">paymentGateway</span>.<span class=\"jspropertycolor\" style=\"color:black\">charge</span>(amount);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Test example with Jest<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  describe(<span class=\"jsstringcolor\" style=\"color:green\">'PaymentProcessor'</span>, () =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> processor: PaymentProcessor;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">let</span> mockGateway: jest.<span class=\"jspropertycolor\" style=\"color:black\">Mocked</span>&lt;PaymentGateway&gt;;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    beforeEach(() =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      mockGateway = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        charge: jest.<span class=\"jspropertycolor\" style=\"color:black\">fn</span>()<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      processor = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> PaymentProcessor(mockGateway);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    it(<span class=\"jsstringcolor\" style=\"color:green\">'should process a valid payment'</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> () =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      mockGateway.<span class=\"jspropertycolor\" style=\"color:black\">charge</span>.<span class=\"jspropertycolor\" style=\"color:black\">mockResolvedValue</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> result = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> processor.<span class=\"jspropertycolor\" style=\"color:black\">processPayment</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">100</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      expect(result).<span class=\"jspropertycolor\" style=\"color:black\">toBe</span>(<span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      expect(mockGateway.<span class=\"jspropertycolor\" style=\"color:black\">charge</span>).<span class=\"jspropertycolor\" style=\"color:black\">toHaveBeenCalledWith</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">100</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    it(<span class=\"jsstringcolor\" style=\"color:green\">'should throw for invalid amount'</span>, <span class=\"jskeywordcolor\" style=\"color:#005cc5\">async</span> () =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">await</span> expect(processor.<span class=\"jspropertycolor\" style=\"color:black\">processPayment</span>(-<span class=\"jsnumbercolor\" style=\"color:#905\">50</span>))<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        .<span class=\"jspropertycolor\" style=\"color:black\">rejects</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>        toThrow(<span class=\"jsstringcolor\" style=\"color:green\">'Amount must be greater than zero'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  });<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Using @ts-expect-error to test for type errors\n// @ts-expect-error - Should not allow negative values\nconst invalidUser: User = { id: -1, name: 'Test' };\n\n// Using type assertions in tests\nfunction assertIsString(value: unknown): asserts value is string {\nif (typeof value !== 'string') {\nthrow new Error('Not a string');\n}\n}\n\n// Using utility types for testing\ntype IsString<T> = T extends string ? true : false;\ntype Test1 = IsString<string>; // true\ntype Test2 = IsString<number>; // false\n\n// Using tsd for type testing (install with: npm install --save-dev tsd)\n/*\nimport { expectType } from 'tsd';\n\nconst user = { id: 1, name: 'John' };\nexpectType<{ id: number; name: string }>(user);\nexpectType<string>(user.name);\n*/",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Using @ts-expect-error to test for type errors<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// @ts-expect-error - Should not allow negative values<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> invalidUser: User = { id: -<span class=\"jsnumbercolor\" style=\"color:#905\">1</span>, name: <span class=\"jsstringcolor\" style=\"color:green\">'Test'</span> };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Using type assertions in tests<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> assertIsString(value: unknown): asserts value is string {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> value !== <span class=\"jsstringcolor\" style=\"color:green\">'string'</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">throw</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">new</span> Error(<span class=\"jsstringcolor\" style=\"color:green\">'Not a string'</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Using utility types for testing<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type IsString&lt;T&gt; = T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> string ? <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span> : <span class=\"jskeywordcolor\" style=\"color:#005cc5\">false</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type Test1 = IsString&lt;string&gt;;  <span class=\"commentcolor\" style=\"color:slategray\">// true<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type Test2 = IsString&lt;number&gt;;  <span class=\"commentcolor\" style=\"color:slategray\">// false<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Using tsd for type testing (install with: npm install --save-dev tsd)<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">/*<br/>\n  import { expectType } from 'tsd';<br/>\n  <br/>\n  const user = { id: 1, name: 'John' };<br/>\n  expectType&lt;{ id: number; name: string }&gt;(user);<br/>\n  expectType&lt;string&gt;(user.name);<br/>\n  */</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Bad: Imports both type and value\nimport { User, fetchUser } from './api';\n\n// Good: Separate type and value imports\nimport type { User } from './api';\nimport { fetchUser } from './api';\n\n// Even better: Use type-only imports when possible\nimport type { User, UserSettings } from './types';\n\n// Type-only export\nexport type { User };\n\n// Runtime export\nexport { fetchUser };\n\n// In tsconfig.json, enable \"isolatedModules\": true\n// to ensure type-only imports are properly handled",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Bad: Imports both type and value<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">import</span> { User, fetchUser } from <span class=\"jsstringcolor\" style=\"color:green\">'./api'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Good: Separate type and value imports<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">import</span> type { User } from <span class=\"jsstringcolor\" style=\"color:green\">'./api'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">import</span> { fetchUser } from <span class=\"jsstringcolor\" style=\"color:green\">'./api'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Even better: Use type-only imports when possible<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">import</span> type { User, UserSettings } from <span class=\"jsstringcolor\" style=\"color:green\">'./types'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Type-only export<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> type { User };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Runtime export<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">export</span> { fetchUser };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// In tsconfig.json, enable \"isolatedModules\": true<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// to ensure type-only imports are properly handled<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Bad: Deeply nested mapped types can be slow\ntype DeepPartial<T> = {\n[P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];\n};\n\n// Better: Use built-in utility types when possible\ntype User = {\nid: string;\nprofile: {\nname: string;\nemail: string;\n};\npreferences?: {\nnotifications: boolean;\n};\n};\n\n// Instead of DeepPartial<User>, use Partial with type assertions\nconst updateUser = (updates: Partial<User>) => {\n// Implementation\n};\n\n// For complex types, consider using interfaces\ninterface UserProfile {\nname: string;\nemail: string;\n}\n\ninterface UserPreferences {\nnotifications: boolean;\n}\n\ninterface User {\nid: string;\nprofile: UserProfile;\npreferences?: UserPreferences;\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Bad: Deeply nested mapped types can be slow<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type DeepPartial&lt;T&gt; = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    [P <span class=\"jskeywordcolor\" style=\"color:#005cc5\">in</span> keyof T]?: T[P] <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> object ? DeepPartial&lt;T[P]&gt; : T[P];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Better: Use built-in utility types when possible<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type User = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    id: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    profile: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      email: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    preferences?: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      notifications: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Instead of DeepPartial&lt;User&gt;, use Partial with type assertions<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> updateUser = (updates: Partial&lt;User&gt;) =&gt; {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"commentcolor\" style=\"color:slategray\">// Implementation<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// For complex types, consider using interfaces<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> UserProfile {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    email: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> UserPreferences {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    notifications: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">boolean</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> User {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    id: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    profile: UserProfile;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    preferences?: UserPreferences;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Without const assertion (wider type)\nconst colors = ['red', 'green', 'blue'];\n// Type: string[]\n\n// With const assertion (narrower, more precise type)\nconst colors = ['red', 'green', 'blue'] as const;\n// Type: readonly [\"red\", \"green\", \"blue\"]\n\n// Extract union type from const array\ntype Color = typeof colors[number]; // \"red\" | \"green\" | \"blue\"\n\n// Objects with const assertions\nconst config = {\napiUrl: 'https://api.example.com',\ntimeout: 5000,\nfeatures: ['auth', 'notifications'],\n} as const;\n\n// Type is:\n// {\n// readonly apiUrl: \"https://api.example.com\";\n// readonly timeout: 5000;\n// readonly features: readonly [\"auth\", \"notifications\"];\n// }",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Without const assertion (wider type)<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> colors = [<span class=\"jsstringcolor\" style=\"color:green\">'red'</span>, <span class=\"jsstringcolor\" style=\"color:green\">'green'</span>, <span class=\"jsstringcolor\" style=\"color:green\">'blue'</span>];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Type: string[]<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// With const assertion (narrower, more precise type)<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> colors = [<span class=\"jsstringcolor\" style=\"color:green\">'red'</span>, <span class=\"jsstringcolor\" style=\"color:green\">'green'</span>, <span class=\"jsstringcolor\" style=\"color:green\">'blue'</span>] as <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Type: readonly [\"red\", \"green\", \"blue\"]<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Extract union type from const array<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  type Color = <span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> colors[number];  <span class=\"commentcolor\" style=\"color:slategray\">// \"red\" | \"green\" | \"blue\"<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Objects with const assertions<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> config = {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    apiUrl: <span class=\"jsstringcolor\" style=\"color:green\">'https://api.example.com'</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    timeout: <span class=\"jsnumbercolor\" style=\"color:#905\">5000</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    features: [<span class=\"jsstringcolor\" style=\"color:green\">'auth'</span>, <span class=\"jsstringcolor\" style=\"color:green\">'notifications'</span>],<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  } as <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Type is:<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// {<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">//   readonly apiUrl: \"https://api.example.com\";<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">//   readonly timeout: 5000;<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">//   readonly features: readonly [\"auth\", \"notifications\"];<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// }<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Bad: Loses all type safety\nfunction process(data: any) {\nreturn data.map(item => item.name);\n}\n\n// Better: Use generics for type safety\nfunction process<T extends { name: string }>(items: T[]) {\nreturn items.map(item => item.name);\n}\n\n// Best: Use specific types when possible\ninterface User {\nname: string;\nage: number;\n}\n\nfunction processUsers(users: User[]) {\nreturn users.map(user => user.name);\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Bad: Loses all type safety<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> process(data: any) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> data.<span class=\"jspropertycolor\" style=\"color:black\">map</span>(item =&gt; item.<span class=\"jspropertycolor\" style=\"color:black\">name</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Better: Use generics for type safety<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> process&lt;T <span class=\"jskeywordcolor\" style=\"color:#005cc5\">extends</span> { name: string }&gt;(items: T[]) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> items.<span class=\"jspropertycolor\" style=\"color:black\">map</span>(item =&gt; item.<span class=\"jspropertycolor\" style=\"color:black\">name</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Best: Use specific types when possible<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> User {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    name: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    age: number;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> processUsers(users: User[]) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> users.<span class=\"jspropertycolor\" style=\"color:black\">map</span>(user =&gt; user.<span class=\"jspropertycolor\" style=\"color:black\">name</span>);<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// tsconfig.json\n{\n\"compilerOptions\": {\n\"strict\": true,\n/* Additional strictness flags */\n\"noImplicitAny\": true,\n\"strictNullChecks\": true,\n\"strictFunctionTypes\": true,\n\"strictBindCallApply\": true,\n\"strictPropertyInitialization\": true,\n\"noImplicitThis\": true,\n\"alwaysStrict\": true\n}\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// tsconfig.json<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jsstringcolor\" style=\"color:green\">\"compilerOptions\"</span>: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"strict\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsregexpcolor\" style=\"color:#e90\">/* Additional strictness flags */</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"noImplicitAny\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"strictNullChecks\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"strictFunctionTypes\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"strictBindCallApply\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"strictPropertyInitialization\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"noImplicitThis\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span>,<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jsstringcolor\" style=\"color:green\">\"alwaysStrict\"</span>: <span class=\"jskeywordcolor\" style=\"color:#005cc5\">true</span><br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Redundant type annotation\nconst name: string = 'John';\n\n// Let TypeScript infer the type\nconst name = 'John'; // TypeScript knows it's a string\n\n// Redundant return type\nfunction add(a: number, b: number): number {\nreturn a + b;\n}\n\n// Let TypeScript infer the return type\nfunction add(a: number, b: number) {\nreturn a + b; // TypeScript infers number\n}",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Redundant type annotation<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> name: string = <span class=\"jsstringcolor\" style=\"color:green\">'John'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Let TypeScript infer the type<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> name = <span class=\"jsstringcolor\" style=\"color:green\">'John'</span>;  <span class=\"commentcolor\" style=\"color:slategray\">// TypeScript knows it's a string<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Redundant return type<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> add(a: number, b: number): number {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> a + b;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Let TypeScript infer the return type<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> add(a: number, b: number) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> a + b;  <span class=\"commentcolor\" style=\"color:slategray\">// TypeScript infers number<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Without type guard\nfunction process(input: string | number) {\nreturn input.toUpperCase(); // Error: toUpperCase doesn't exist on number\n}\n\n// With type guard\nfunction isString(value: unknown): value is string {\nreturn typeof value === 'string';\n}\n\nfunction process(input: string | number) {\nif (isString(input)) {\nreturn input.toUpperCase(); // TypeScript knows input is string here\n} else {\nreturn input.toFixed(2); // TypeScript knows input is number here\n}\n}\n\n// Built-in type guards\nif (typeof value === 'string') { /* value is string */ }\nif (value instanceof Date) { /* value is Date */ }\nif ('id' in user) { /* user has id property */ }",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Without type guard<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> process(input: string | number) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> input.<span class=\"jspropertycolor\" style=\"color:black\">toUpperCase</span>();  <span class=\"commentcolor\" style=\"color:slategray\">// Error: toUpperCase doesn't exist on number<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// With type guard<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> isString(value: unknown): value is string {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> value === <span class=\"jsstringcolor\" style=\"color:green\">'string'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> process(input: string | number) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (isString(input)) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> input.<span class=\"jspropertycolor\" style=\"color:black\">toUpperCase</span>();  <span class=\"commentcolor\" style=\"color:slategray\">// TypeScript knows input is string here<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    } <span class=\"jskeywordcolor\" style=\"color:#005cc5\">else</span> {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> input.<span class=\"jspropertycolor\" style=\"color:black\">toFixed</span>(<span class=\"jsnumbercolor\" style=\"color:#905\">2</span>);  <span class=\"commentcolor\" style=\"color:slategray\">// TypeScript knows input is number here<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Built-in type guards<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (<span class=\"jskeywordcolor\" style=\"color:#005cc5\">typeof</span> value === <span class=\"jsstringcolor\" style=\"color:green\">'string'</span>) { <span class=\"jsregexpcolor\" style=\"color:#e90\">/* value is string */</span> }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (value <span class=\"jskeywordcolor\" style=\"color:#005cc5\">instanceof</span> Date) { <span class=\"jsregexpcolor\" style=\"color:#e90\">/* value is Date */</span> }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (<span class=\"jsstringcolor\" style=\"color:green\">'id'</span> <span class=\"jskeywordcolor\" style=\"color:#005cc5\">in</span> user) { <span class=\"jsregexpcolor\" style=\"color:#e90\">/* user has id property */</span> }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        },
        {
          "text": "// Bad: Potential runtime error\nfunction getLength(str: string | null) {\nreturn str.length; // Error: Object is possibly 'null'\n}\n\n// Good: Null check\nfunction getLength(str: string | null) {\nif (str === null) return 0;\nreturn str.length;\n}\n\n// Better: Use optional chaining and nullish coalescing\nfunction getLength(str: string | null) {\nreturn str?.length ?? 0;\n}\n\n// For arrays\nconst names: string[] | undefined = [];\nconst count = names?.length ?? 0; // Safely handle undefined\n\n// For object properties\ninterface User {\nprofile?: {\nname?: string;\n};\n}\n\nconst user: User = {};\nconst name = user.profile?.name ?? 'Anonymous';",
          "html": "<span class=\"jscolor\" style=\"color:black\"><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Bad: Potential runtime error<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> getLength(str: string | <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> str.<span class=\"jspropertycolor\" style=\"color:black\">length</span>;  <span class=\"commentcolor\" style=\"color:slategray\">// Error: Object is possibly 'null'<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Good: Null check<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> getLength(str: string | <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">if</span> (str === <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span>) <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> str.<span class=\"jspropertycolor\" style=\"color:black\">length</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// Better: Use optional chaining and nullish coalescing<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">function</span> getLength(str: string | <span class=\"jskeywordcolor\" style=\"color:#005cc5\">null</span>) {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    <span class=\"jskeywordcolor\" style=\"color:#005cc5\">return</span> str?.<span class=\"jspropertycolor\" style=\"color:black\">length</span> ?? <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// For arrays<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> names: string[] | undefined = [];<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> count = names?.<span class=\"jspropertycolor\" style=\"color:black\">length</span> ?? <span class=\"jsnumbercolor\" style=\"color:#905\">0</span>;  <span class=\"commentcolor\" style=\"color:slategray\">// Safely handle undefined<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"commentcolor\" style=\"color:slategray\">// For object properties<br/></span><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">interface</span> User {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    profile?: {<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>      name?: string;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>    };<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  }<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> user: User = {};<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>  <span class=\"jskeywordcolor\" style=\"color:#005cc5\">const</span> name = user.<span class=\"jspropertycolor\" style=\"color:black\">profile?</span>.<span class=\"jspropertycolor\" style=\"color:black\">name</span> ?? <span class=\"jsstringcolor\" style=\"color:green\">'Anonymous'</span>;<br/><span class=\"jsnumbercolor\" style=\"color:#905\">\n</span>   </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_best_practices.php"
      }
    },
    {
      "title": "TypeScript Online Editor",
      "code": [
        {
          "text": "console.log('Hello World!');",
          "html": "<span class=\"jscolor\" style=\"color:black\">\nconsole.<span class=\"jspropertycolor\" style=\"color:black\">log</span>(<span class=\"jsstringcolor\" style=\"color:green\">'Hello World!'</span>); </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_editor.php"
      }
    },
    {
      "title": "TypeScript Syllabus",
      "code": [
        {
          "text": "console.log('Hello World!');",
          "html": "<span class=\"javacolor\" style=\"color:black\"><span class=\"javanumbercolor\" style=\"color:#905\">\n</span>      console.<span class=\"javapropertycolor\" style=\"color:black\">log</span>(<span class=\"javastringcolor\" style=\"color:green\">'Hello World!'</span>);<br/><span class=\"javanumbercolor\" style=\"color:#905\">\n</span>     </span>"
        }
      ],
      "metadata": {
        "url": "https://www.w3schools.com/typescript/typescript_syllabus.php"
      }
    }
  ]
}