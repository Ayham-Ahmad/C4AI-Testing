{
  "course_name": "Python",
  "description": "Python is a popular programming language. Python can be used on a server to create web applications. Tip: Sign in to track your progress - it's free. With our \"Try it Yourself\" editor, you can edit Python code and view the result. Click on the \"Try it Yourself\" button to see how it works. In our File Handling section you will learn how to open, read, write, and delete files. Python File Handling In our database section you will learn how to access and work with MySQL and MongoDB databases: Python MySQL Tutorial Python MongoDB Tutorial Many chapters in this tutorial end with an exercise where you can check your level of knowledge. See all Python Exercises REMOVE ADS Learn by examples! This tutorial supplements all explanations with clarifying examples. See All Python Examples Test your Python skills with a quiz. Python Quiz Sign Up for Free Note: This is an optional feature. You can study at W3Schools without creating an account.",
  "course_summary": [
    {
      "title": "Python Introduction",
      "summary": "What is Python?\nPython is a popular programming language. It was created by Guido van Rossum, and released in 1991.\nIt is used for:\nweb development (server-side),\nsoftware development,\nmathematics,\nsystem scripting.\nWhat can Python do?\nPython can be used on a server to create web applications.\nPython can be used alongside software to create workflows.\nPython can connect to database systems. It can also read and modify files.\nPython can be used to handle big data and perform complex mathematics.\nPython can be used for rapid prototyping, or for production-ready software development.\nWhy Python?\nPython works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).\nPython has a simple syntax similar to the English language.\nPython has syntax that allows developers to write programs with fewer lines than some other programming languages.\nPython runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.\nPython can be treated in a procedural way, an object-oriented way or a functional way.\nGood to know\nThe most recent major version of Python is Python 3, which we shall be using in this tutorial.\nIn this tutorial Python will be written in a text editor. It is possible to write Python in an Integrated Development Environment, such as Thonny, Pycharm, Netbeans or Eclipse which are particularly useful when managing larger collections of Python files.\nPython Syntax compared to other programming languages\nPython was designed for readability, and has some similarities to the English language with influence from mathematics.\nPython uses new lines to complete a command, as opposed to other programming languages which often use semicolons or parentheses.\nPython relies on indentation, using whitespace, to define scope; such as the scope of loops, functions and classes. Other programming languages often use curly-brackets for this purpose.\nExampleGet your own Python Server\nVideo: Python Introduction",
      "examples": [
        "print(\"Hello, World!\")"
      ]
    },
    {
      "title": "Python Getting Started",
      "summary": "Python Install\nMany PCs and Macs will have python already installed.\nTo check if you have python installed on a Windows PC, search in the start bar for Python or run the following on the Command Line (cmd.exe):\nTo check if you have python installed on a Linux or Mac, then on linux open the command line or on Mac open the Terminal and type:\nIf you find that you do not have Python installed on your computer, then you can download it for free from the following website: https://www.python.org/\nPython Quickstart\nPython is an interpreted programming language, this means that as a developer you write Python (.py) files in a text editor and then put those files into the python interpreter to be executed.\nLet's write our first Python file, called hello.py, which can be done in any text editor:\nhello.py:\nSimple as that. Save your file. Open your command line, navigate to the directory where you saved your file, and run:\nThe output should be:\nCongratulations, you have written and executed your first Python program.\nREMOVE ADS\nW3Schools' Python Editor\nWe have an online Python editor where you can execute your own Python code and see the result:\nExampleGet your own Python Server\nTry our online Python editor:\nThis editor will be used in the entire tutorial to demonstrate the different aspects of Python.\nPython Version\nTo check the Python version of the editor, you can find it by importing the sys module:\nExample\nCheck the Python version of the editor:\nYou will learn more about importing modules in our Python Modules chapter.\nThe Python Command Line\nTo test a short amount of code in python sometimes it is quickest and easiest not to write the code in a file. This is made possible because Python can be run as a command line itself.\nType the following on the Windows, Mac or Linux command line:\nFrom there you can write any python code, including our hello world example from earlier in the tutorial:\nWhich will write \"Hello, World!\" in the command line:\nWhenever you are done in the python command line, you can simply type the following to quit the python command line interface:\nVideo: Python Get Started",
      "examples": [
        "print(\"Hello, World!\")",
        "C:\\Users\\Your Name>python --version",
        "python --version",
        "C:\\Users\\Your Name>python hello.py",
        "Hello, World!",
        "import sys\n\nprint(sys.version)",
        "C:\\Users\\Your Name>python",
        "C:\\Users\\Your Name>py",
        "C:\\Users\\Your Name>python\nPython 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC v.1900 32 bit (Intel)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> print(\"Hello, World!\")",
        "C:\\Users\\Your Name>python\nPython 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC v.1900 32 bit (Intel)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> print(\"Hello, World!\")\nHello, World!",
        "exit()",
        "hello.py",
        "sys"
      ]
    },
    {
      "title": "Python Syntax",
      "summary": "Execute Python Syntax\nAs we learned in the previous page, Python syntax can be executed by writing directly in the Command Line:\nOr by creating a python file on the server, using the .py file extension, and running it in the Command Line:\nPython Indentation\nIndentation refers to the spaces at the beginning of a code line.\nWhere in other programming languages the indentation in code is for readability only, the indentation in Python is very important.\nPython uses indentation to indicate a block of code.\nExampleGet your own Python Server\nPython will give you an error if you skip the indentation:\nExample\nSyntax Error:\nThe number of spaces is up to you as a programmer, the most common use is four, but it has to be at least one.\nExample\nYou have to use the same number of spaces in the same block of code, otherwise Python will give you an error:\nExample\nSyntax Error:\nREMOVE ADS\nPython Variables\nIn Python, variables are created when you assign a value to it:\nExample\nVariables in Python:\nPython has no command for declaring a variable.\nYou will learn more about variables in the Python Variables chapter.\nComments\nPython has commenting capability for the purpose of in-code documentation.\nComments start with a #, and Python will render the rest of the line as a comment:\nExample\nComments in Python:\nVideo: Python Syntax",
      "examples": [
        ">>> print(\"Hello, World!\")\nHello, World!",
        "C:\\Users\\Your Name>python myfile.py",
        "if 5 > 2:\nprint(\"Five is greater than two!\")",
        "if 5 > 2:\nprint(\"Five is greater than two!\")\nif 5 > 2:\nprint(\"Five is greater than two!\")",
        "if 5 > 2:\nprint(\"Five is greater than two!\")\nprint(\"Five is greater than two!\")",
        "x = 5\ny = \"Hello, World!\"",
        "#This is a comment.\nprint(\"Hello, World!\")",
        "#"
      ]
    },
    {
      "title": "Python Comments",
      "summary": "Comments can be used to explain Python code.\nComments can be used to make the code more readable.\nComments can be used to prevent execution when testing code.\nCreating a Comment\nComments starts with a #, and Python will ignore them:\nExampleGet your own Python Server\nComments can be placed at the end of a line, and Python will ignore the rest of the line:\nExample\nA comment does not have to be text that explains the code, it can also be used to prevent Python from executing code:\nExample\nREMOVE ADS\nMultiline Comments\nPython does not really have a syntax for multiline comments.\nTo add a multiline comment you could insert a # for each line:\nExample\nOr, not quite as intended, you can use a multiline string.\nSince Python will ignore string literals that are not assigned to a variable, you can add a multiline string (triple quotes) in your code, and place your comment inside it:\nExample\nAs long as the string is not assigned to a variable, Python will read the code, but then ignore it, and you have made a multiline comment.\nVideo: Python Comments",
      "examples": [
        "#This is a comment\nprint(\"Hello, World!\")",
        "print(\"Hello, World!\") #This is a comment",
        "#print(\"Hello, World!\")\nprint(\"Cheers, Mate!\")",
        "#This is a comment\n#written in\n#more than just one line\nprint(\"Hello, World!\")",
        "\"\"\"\nThis is a comment\nwritten in\nmore than just one line\n\"\"\"\nprint(\"Hello, World!\")",
        "#"
      ]
    }
  ],
  "glossary": []
}