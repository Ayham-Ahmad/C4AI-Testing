{
  "course_name": "Php",
  "description": "PHP is a server scripting language, and a powerful tool for making dynamic and interactive Web pages. PHP is a widely-used, free, and efficient alternative to competitors such as Microsoft's ASP. Tip: Sign in to track your progress - it's free. With our online \"PHP Tryit\" editor, you can edit the PHP code, and click on a button to view the result. Click on the \"Try it Yourself\" button to see how it works. Many chapters in this tutorial end with an exercise where you can check your level of knowledge. See all PHP Exercises REMOVE ADS Learn by examples! This tutorial supplements all explanations with clarifying examples. See All PHP Examples Learn by taking a quiz! This quiz will give you a signal of how much you know, or do not know, about PHP. Start PHP Quiz! Sign Up for Free Note: This is an optional feature. You can study at W3Schools without creating an account. W3Schools' PHP reference contains different categories of all PHP functions, keywords and constants, along with examples.",
  "course_summary": [
    {
      "title": "PHP Introduction",
      "summary": "PHP code is executed on the server.\nWhat You Should Already Know\nBefore you continue you should have a basic understanding of the following:\nHTML\nCSS\nJavaScript\nIf you want to study these subjects first, find the tutorials on our Home page.\nWhat is PHP?\nPHP is an acronym for \"PHP: Hypertext Preprocessor\"\nPHP is a widely-used, open source scripting language\nPHP scripts are executed on the server\nPHP is free to download and use\nPHP is an amazing and popular language!\nIt is powerful enough to be at the core of the biggest blogging system on the web (WordPress)!\nIt is deep enough to run large social networks!\nIt is also easy enough to be a beginner's first server side language!\nWhat is a PHP File?\nPHP files can contain text, HTML, CSS, JavaScript, and PHP code\nPHP code is executed on the server, and the result is returned to the browser as plain HTML\nPHP files have extension \".php\"\nWhat Can PHP Do?\nPHP can generate dynamic page content\nPHP can create, open, read, write, delete, and close files on the server\nPHP can collect form data\nPHP can send and receive cookies\nPHP can add, delete, modify data in your database\nPHP can be used to control user-access\nPHP can encrypt data\nWith PHP you are not limited to output HTML. You can output images or PDF files. You can also output any text, such as XHTML and XML.\nREMOVE ADS\nWhy PHP?\nPHP runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)\nPHP is compatible with almost all servers used today (Apache, IIS, etc.)\nPHP supports a wide range of databases\nPHP is free. Download it from the official PHP resource: www.php.net\nPHP is easy to learn and runs efficiently on the server side\nWhat's new in PHP 7\nPHP 7 is much faster than the previous popular stable release (PHP 5.6)\nPHP 7 has improved Error Handling\nPHP 7 supports stricter Type Declarations for function arguments\nPHP 7 supports new operators (like the spaceship operator: <=>)",
      "examples": [
        ".php",
        "<=>"
      ]
    },
    {
      "title": "PHP Installation",
      "summary": "What Do I Need?\nTo start using PHP, you can:\nFind a web host with PHP and MySQL support\nInstall a web server on your own PC, and then install PHP and MySQL\nUse a Web Host With PHP Support\nIf your server has activated support for PHP you do not need to do anything.\nJust create some .php files, place them in your web directory, and the server will automatically parse them for you.\nYou do not need to compile anything or install any extra tools.\nBecause PHP is free, most web hosts offer PHP support.\nSet Up PHP on Your Own PC\nHowever, if your server does not support PHP, you must:\ninstall a web server\ninstall PHP\ninstall a database, such as MySQL\nThe official PHP website (PHP.net) has installation instructions for PHP: http://php.net/manual/en/install.php\nPHP Online Compiler / Editor\nWith w3schools' online PHP compiler, you can edit PHP code, and view the result in your browser.\nExample\nClick on the \"Try it Yourself\" button to see how it works.\nPHP Version\nTo check your php version you can use the phpversion() function:\nExampleGet your own PHP Server\nDisplay the PHP version:",
      "examples": [
        "echo phpversion();",
        "<?php\n$txt = \"PHP\";\necho \"I love $txt!\";\n?>",
        ".php",
        "I love PHP!",
        "phpversion()"
      ]
    },
    {
      "title": "PHP Syntax",
      "summary": "A PHP script is executed on the server, and the plain HTML result is sent back to the browser.\nBasic PHP Syntax\nA PHP script can be placed anywhere in the document.\nA PHP script starts with <?php and ends with ?>:\nThe default file extension for PHP files is \".php\".\nA PHP file normally contains HTML tags, and some PHP scripting code.\nBelow, we have an example of a simple PHP file, with a PHP script that uses a built-in PHP function \"echo\" to output the text \"Hello World!\" on a web page:\nExampleGet your own PHP Server\nA simple .php file with both HTML code and PHP code:\nNote: PHP statements end with a semicolon (;).\nREMOVE ADS\nPHP Case Sensitivity\nIn PHP, keywords (e.g. if, else, while, echo, etc.), classes, functions, and user-defined functions are not case-sensitive.\nIn the example below, all three echo statements below are equal and legal:\nExample\nECHO is the same as echo:\nNote: However; all variable names are case-sensitive!\nLook at the example below; only the first statement will display the value of the $color variable! This is because $color, $COLOR, and $coLOR are treated as three different variables:\nExample\n$COLOR is not same as $color:",
      "examples": [
        "<?php // PHP code goes here ?>",
        "<!DOCTYPE html> <html> <body> <h1>My first PHP page</h1> <?php echo \"Hello World!\"; ?> </body> </html>",
        "<!DOCTYPE html> <html> <body> <?php ECHO \"Hello World!<br>\"; echo \"Hello World!<br>\"; EcHo \"Hello World!<br>\"; ?> </body> </html>",
        "<!DOCTYPE html> <html> <body> <?php\n$color = \"red\"; echo \"My car is \" . $color . \"<br>\"; echo \"My house is \" . $COLOR . \"<br>\"; echo \"My boat is \" . $coLOR . \"<br>\"; ?> </body> </html>",
        "<?php",
        "?>",
        ".php",
        "echo",
        ";",
        "if",
        "else",
        "while",
        "ECHO",
        "$color",
        "$COLOR",
        "$coLOR"
      ]
    },
    {
      "title": "PHP Comments",
      "summary": "Comments in PHP\nA comment in PHP code is a line that is not executed as a part of the program. Its only purpose is to be read by someone who is looking at the code.\nComments can be used to:\nLet others understand your code\nRemind yourself of what you did - Most programmers have experienced coming back to their own work a year or two later and having to re-figure out what they did. Comments can remind you of what you were thinking when you wrote the code\nLeave out some parts of your code\nPHP supports several ways of commenting:\nExampleGet your own PHP Server\nSyntax for comments in PHP code:\nSingle Line Comments\nSingle line comments start with //.\nAny text between // and the end of the line will be ignored (will not be executed).\nYou can also use # for single line comments, but in this tutorial we will use //.\nThe following examples uses a single-line comment as an explanation:\nExample\nA comment before the code:\nExample\nA comment at the end of a line:\nComments to Ignore Code\nWe can use comments to prevent code lines from being executed:\nExample\nDo not display a welcome message:",
      "examples": [
        "// This is a single-line comment # This is also a single-line comment /* This is a multi-line comment */",
        "// Outputs a welcome message: echo \"Welcome Home!\";",
        "echo \"Welcome Home!\"; // Outputs a welcome message",
        "// echo \"Welcome Home!\";",
        "//",
        "#"
      ]
    },
    {
      "title": "PHP Multiline Comments",
      "summary": "Multi-line Comments\nMulti-line comments start with /* and end with */.\nAny text between /* and */ will be ignored.\nThe following example uses a multi-line comment as an explanation:\nExampleGet your own PHP Server\nMulti-line comment as an explanation:\nMulti-line Comments to Ignore Code\nWe can use multi-line comments to prevent blocks of code from being executed:\nExample\nMulti-line comment to ignore code:\nComments in the Middle of the Code\nThe multi-line comment syntax can also be used to prevent execution of parts inside a code-line:\nExample\nTheÂ  + 15 part will be ignored in the calculation:",
      "examples": [
        "/* The next statement will print a welcome message */ echo \"Welcome Home!\";",
        "/* echo \"Welcome to my home!\"; echo \"Mi casa su casa!\"; */ echo \"Hello!\";",
        "$x = 5 /* + 15 */ + 5; echo $x;",
        "/*",
        "*/",
        "+ 15"
      ]
    },
    {
      "title": "PHP Variables",
      "summary": "Variables are \"containers\" for storing information.\nCreating (Declaring) PHP Variables\nIn PHP, a variable starts with the $ sign, followed by the name of the variable:\nExampleGet your own PHP Server\nIn the example above, the variable $x will hold the value 5, and the variable $y will hold the value \"John\".\nNote: When you assign a text value to a variable, put quotes around the value.\nNote: Unlike other programming languages, PHP has no command for declaring a variable. It is created the moment you first assign a value to it.\nThink of variables as containers for storing data.\nPHP Variables\nA variable can have a short name (like $x and $y) or a more descriptive name ($age, $carname, $total_volume).\nRules for PHP variables:\nA variable starts with the $ sign, followed by the name of the variable\nA variable name must start with a letter or the underscore character\nA variable name cannot start with a number\nA variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )\nVariable names are case-sensitive ($age and $AGE are two different variables)\nRemember that PHP variable names are case-sensitive!\nREMOVE ADS\nOutput Variables\nThe PHP echo statement is often used to output data to the screen.\nThe following example will show how to output text and a variable:\nExample\nThe following example will produce the same output as the example above:\nExample\nThe following example will output the sum of two variables:\nExample\nNote: You will learn more about the echo statement and how to output data to the screen in the PHP Echo/Print chapter.\nPHP is a Loosely Typed Language\nIn the example above, notice that we did not have to tell PHP which data type the variable is.\nPHP automatically associates a data type to the variable, depending on its value. Since the data types are not set in a strict sense, you can do things like adding a string to an integer without causing an error.\nIn PHP 7, type declarations were added. This gives an option to specify the data type expected when declaring a function, and by enabling the strict requirement, it will throw a \"Fatal Error\" on a type mismatch.\nYou will learn more about strict and non-strict requirements, and data type declarations in the PHP Functions chapter.\nVariable Types\nPHP has no command for declaring a variable, and the data type depends on the value of the variable.\nExample\nPHP supports the following data types:\nString\nInteger\nFloat (floating point numbers - also called double)\nBoolean\nArray\nObject\nNULL\nResource\nGet the Type\nTo get the data type of a variable, use the var_dump() function.\nExample\nThe var_dump() function returns the data type and the value:\nExample\nSee what var_dump() returns for other data types:\nAssign String to a Variable\nAssigning a string to a variable is done with the variable name followed by an equal sign and the string:\nExample\nString variables can be declared either by using double or single quotes, but you should be aware of the differences. Learn more about the differences in the PHP Strings chapter.\nAssign Multiple Values\nYou can assign the same value to multiple variables in one line:\nExample\nAll three variables get the value \"Fruit\":",
      "examples": [
        "$x = 5; $y = \"John\";",
        "$txt = \"W3Schools.com\"; echo \"I love $txt!\";",
        "$txt = \"W3Schools.com\"; echo \"I love \" . $txt . \"!\";",
        "$x = 5; $y = 4; echo $x + $y;",
        "$x = 5; // $x is an integer $y = \"John\"; // $y is a string echo $x; echo $y;",
        "$x = 5; var_dump($x);",
        "var_dump(5); var_dump(\"John\"); var_dump(3.14); var_dump(true); var_dump([2, 3, 56]); var_dump(NULL);",
        "$x = \"John\"; echo $x;",
        "$x = $y = $z = \"Fruit\";",
        "$",
        "$x",
        "5",
        "$y",
        "\"John\"",
        "$age",
        "$carname",
        "$total_volume",
        "$AGE",
        "echo",
        "strict",
        "non-strict",
        "var_dump()"
      ]
    },
    {
      "title": "PHP Variables Scope",
      "summary": "PHP Variables Scope\nIn PHP, variables can be declared anywhere in the script.\nThe scope of a variable is the part of the script where the variable can be referenced/used.\nPHP has three different variable scopes:\nlocal\nglobal\nstatic\nGlobal and Local Scope\nA variable declared outside a function has a GLOBAL SCOPE and can only be accessed outside a function:\nExampleGet your own PHP Server\nVariable with global scope:\nA variable declared within a function has a LOCAL SCOPE and can only be accessed within that function:\nExample\nVariable with local scope:\nYou can have local variables with the same name in different functions, because local variables are only recognized by the function in which they are declared.\nREMOVE ADS\nPHP The global Keyword\nThe global keyword is used to access a global variable from within a function.\nTo do this, use the global keyword before the variables (inside the function):\nExample\nPHP also stores all global variables in an array called $GLOBALS[index]. The index holds the name of the variable. This array is also accessible from within functions and can be used to update global variables directly.\nThe example above can be rewritten like this:\nExample\nPHP The static Keyword\nNormally, when a function is completed/executed, all of its variables are deleted. However, sometimes we want a local variable NOT to be deleted. We need it for a further job.\nTo do this, use the static keyword when you first declare the variable:\nExample\nThen, each time the function is called, that variable will still have the information it contained from the last time the function was called.\nNote: The variable is still local to the function.",
      "examples": [
        "$x = 5; // global scope function myTest() { // using x inside this function will generate an error echo \"<p>Variable x inside function is: $x</p>\"; } myTest(); echo \"<p>Variable x outside function is: $x</p>\";",
        "function myTest() { $x = 5; // local scope echo \"<p>Variable x inside function is: $x</p>\"; } myTest(); // using x outside the function will generate an error echo \"<p>Variable x outside function is: $x</p>\";",
        "$x = 5; $y = 10; function myTest() { global $x, $y; $y = $x + $y; } myTest(); echo $y; // outputs 15",
        "$x = 5; $y = 10; function myTest() { $GLOBALS['y'] = $GLOBALS['x'] + $GLOBALS['y']; } myTest(); echo $y; // outputs 15",
        "function myTest() { static $x = 0; echo $x; $x++; } myTest(); myTest(); myTest();",
        "global",
        "$GLOBALS[index]",
        "index",
        "static"
      ]
    },
    {
      "title": "PHP echo and print Statements",
      "summary": "With PHP, there are two basic ways to output data to the screen: echo and print.\nPHP echo and print Statements\nBoth echo and print are used to output data to the screen.\nThe differences are small:\necho has no return value, while print has a return value of 1 so it can be used in expressions\necho can take multiple parameters, while print can take one argument\necho is marginally faster than print\nThe PHP echo Statement\nThe echo statement can be used with or without parentheses: echo or echo().\nExampleGet your own PHP Server\nDisplay Text\nThe following example shows how to output text with the echo command (notice that the text can contain HTML markup):\nExample\nDisplay Variables\nThe following example shows how to output text and variables with the echo statement:\nExample\nUsing Single Quotes\nStrings are surrounded by quotes, but there is a difference between single and double quotes in PHP.\nWhen using double quotes, variables can be inserted to the string as in the example above.\nWhen using single quotes, variables have to be inserted using the . operator, like this:\nExample\nREMOVE ADS\nThe PHP print Statement\nThe print statement can be used with or without parentheses: print or print().\nExample\nDisplay Text\nThe following example shows how to output text with the print command (notice that the text can contain HTML markup):\nExample\nDisplay Variables\nThe following example shows how to output text and variables with the print statement:\nExample\nUsing Single Quotes\nStrings are surrounded by quotes, but there is a difference between single and double quotes in PHP.\nWhen using double quotes, variables can be inserted to the string as in the example above.\nWhen using single quotes, variables have to be inserted using the . operator, like this:\nExample",
      "examples": [
        "echo \"Hello\"; //same as: echo(\"Hello\");",
        "echo \"<h2>PHP is Fun!</h2>\"; echo \"Hello world!<br>\"; echo \"I'm about to learn PHP!<br>\"; echo \"This \", \"string \", \"was \", \"made \", \"with multiple parameters.\";",
        "$txt1 = \"Learn PHP\"; $txt2 = \"W3Schools.com\"; echo \"<h2>$txt1</h2>\"; echo \"<p>Study PHP at $txt2</p>\";",
        "$txt1 = \"Learn PHP\"; $txt2 = \"W3Schools.com\"; echo '<h2>' . $txt1 . '</h2>'; echo '<p>Study PHP at ' . $txt2 . '</p>';",
        "print \"Hello\"; //same as: print(\"Hello\");",
        "print \"<h2>PHP is Fun!</h2>\"; print \"Hello world!<br>\"; print \"I'm about to learn PHP!\";",
        "$txt1 = \"Learn PHP\"; $txt2 = \"W3Schools.com\"; print \"<h2>$txt1</h2>\"; print \"<p>Study PHP at $txt2</p>\";",
        "$txt1 = \"Learn PHP\"; $txt2 = \"W3Schools.com\"; print '<h2>' . $txt1 . '</h2>'; print '<p>Study PHP at ' . $txt2 . '</p>';",
        "echo",
        "print",
        "echo()",
        ".",
        "print()"
      ]
    },
    {
      "title": "PHP Data Types",
      "summary": "PHP Data Types\nVariables can store data of different types, and different data types can do different things.\nPHP supports the following data types:\nString\nInteger\nFloat (floating point numbers - also called double)\nBoolean\nArray\nObject\nNULL\nResource\nGet the Data Type\nYou can get the data type of any object by using the var_dump() function.\nExampleGet your own PHP Server\nThe var_dump() function returns the data type and the value:\nPHP String\nA string is a sequence of characters, like \"Hello world!\".\nA string can be any text inside quotes. You can use single or double quotes:\nExample\nPHP Integer\nAn integer data type is a non-decimal number between -2,147,483,648 and 2,147,483,647.\nRules for integers:\nAn integer must have at least one digit\nAn integer must not have a decimal point\nAn integer can be either positive or negative\nIntegers can be specified in: decimal (base 10), hexadecimal (base 16), octal (base 8), or binary (base 2) notation\nIn the following example $x is an integer. The var_dump() function returns the data type and value:\nExample\nREMOVE ADS\nPHP Float\nA float (floating point number) is a number with a decimal point or a number in exponential form.\nIn the following example $x is a float. The var_dump() function returns the data type and value:\nExample\nPHP Boolean\nA Boolean represents two possible states: TRUE or FALSE.\nExample\nBooleans are often used in conditional testing.\nYou will learn more about conditional testing in the PHP If...Else chapter.\nPHP Array\nAn array stores multiple values in one single variable.\nIn the following example $cars is an array. The var_dump() function returns the data type and value:\nExample\nYou will learn a lot more about arrays in later chapters of this tutorial.\nPHP Object\nClasses and objects are the two main aspects of object-oriented programming.\nA class is a template for objects, and an object is an instance of a class.\nWhen the individual objects are created, they inherit all the properties and behaviors from the class, but each object will have different values for the properties.\nLet's assume we have a class named Car that can have properties like model, color, etc. We can define variables like $model, $color, and so on, to hold the values of these properties.\nWhen the individual objects (Volvo, BMW, Toyota, etc.) are created, they inherit all the properties and behaviors from the class, but each object will have different values for the properties.\nIf you create a __construct() function, PHP will automatically call this function when you create an object from a class.\nExample\nDo not worry if you do not understand the PHP Object syntax, you will learn more about that in the PHP Classes/Objects chapter.\nPHP NULL Value\nNull is a special data type which can have only one value: NULL.\nA variable of data type NULL is a variable that has no value assigned to it.\nTip: If a variable is created without a value, it is automatically assigned a value of NULL.\nVariables can also be emptied by setting the value to NULL:\nExample\nChange Data Type\nIf you assign an integer value to a variable, the type will automatically be an integer.\nIf you assign a string to the same variable, the type will change to a string:\nExample\nIf you want to change the data type of an existing variable, but not by changing the value, you can use casting.\nCasting allows you to change data type on variables:\nExample\nYou will learn more about casting in the PHP Casting Chapter.\nPHP Resource\nThe special resource type is not an actual data type. It is the storing of a reference to functions and resources external to PHP.\nA common example of using the resource data type is a database call.\nWe will not talk about the resource type here, since it is an advanced topic.",
      "examples": [
        "$x = 5; var_dump($x);",
        "$x = \"Hello world!\"; $y = 'Hello world!'; var_dump($x); echo \"<br>\"; var_dump($y);",
        "$x = 5985; var_dump($x);",
        "$x = 10.365; var_dump($x);",
        "$x = true; var_dump($x);",
        "$cars = array(\"Volvo\",\"BMW\",\"Toyota\"); var_dump($cars);",
        "class Car { public $color; public $model; public function __construct($color, $model) { $this->color = $color; $this->model = $model; } public function message() { return \"My car is a \" . $this->color . \" \" . $this->model . \"!\"; } } $myCar = new Car(\"red\", \"Volvo\"); var_dump($myCar);",
        "$x = \"Hello world!\"; $x = null; var_dump($x);",
        "$x = 5; var_dump($x); $x = \"Hello\"; var_dump($x);",
        "$x = 5; $x = (string) $x; var_dump($x);",
        "var_dump()",
        "$x",
        "$cars",
        "Car",
        "$model",
        "$color",
        "__construct()"
      ]
    },
    {
      "title": "PHP Strings",
      "summary": "A string is a sequence of characters, like \"Hello world!\".\nPHP Strings\nStrings in PHP are surrounded by either double quotation marks, or single quotation marks.\nExampleGet your own PHP Server\nNote There is a big difference between double quotes and single quotes in PHP.\nDouble quotes process special characters, single quotes does not.\nDouble or Single Quotes?\nYou can use double or single quotes, but you should be aware of the differences between the two.\nDouble quoted strings perform action on special characters.\nE.g. when there is a variable in the string, it returns the value of the variable:\nExample\nDouble quoted string literals perform operations for special characters:\nSingle quoted strings does not perform such actions, it returns the string like it was written, with the variable name:\nExample\nSingle quoted string literals returns the string as it is:\nREMOVE ADS\nString Length\nThe PHP strlen() function returns the length of a string.\nExample\nReturn the length of the string \"Hello world!\":\nWord Count\nThe PHP str_word_count() function counts the number of words in a string.\nExample\nCount the number of word in the string \"Hello world!\":\nSearch For Text Within a String\nThe PHP strpos() function searches for a specific text within a string.\nIf a match is found, the function returns the character position of the first match. If no match is found, it will return FALSE.\nExample\nSearch for the text \"world\" in the string \"Hello world!\":\nTip: The first character position in a string is 0 (not 1).\nComplete PHP String Reference\nFor a complete reference of all string functions, go to our complete PHP String Reference.",
      "examples": [
        "echo \"Hello\"; echo 'Hello';",
        "$x = \"John\"; echo \"Hello $x\";",
        "$x = \"John\"; echo 'Hello $x';",
        "echo strlen(\"Hello world!\");",
        "echo str_word_count(\"Hello world!\");",
        "echo strpos(\"Hello world!\", \"world\");",
        "strlen()",
        "str_word_count()",
        "strpos()"
      ]
    },
    {
      "title": "PHP - Modify Strings",
      "summary": "PHP has a set of built-in functions that you can use to modify strings.\nUpper Case\nThe PHP strtoupper() function returns a string in upper case.\nExampleGet your own PHP Server\nReturn the string in upper case:\nLower Case\nThe PHP strtolower() function returns a string in lower case.\nExample\nReturn the string in lower case:\nReplace String\nThe PHP str_replace() function replaces some characters with some other characters in a string.\nExample\nReplace the text \"World\" with \"Dolly\":\nREMOVE ADS\nReverse a String\nThe PHP strrev() function reverses a string.\nExample\nReverse the string \"Hello World!\":\nRemove Whitespace\nWhitespace is the space before and/or after the actual text, and very often you want to remove this space.\nThe PHP trim() function removes any whitespace from the beginning or the end.\nExample\nRemove any whitespace from the beginning or the end:\nConvert String into Array\nThe PHP explode() function splits a string into an array.\nThe first parameter of the explode() function represents the \"separator\". The \"separator\" specifies where to split the string.\nNote: The separator is required.\nExample\nSplit the string into an array. Use the space character as separator:\nComplete PHP String Reference\nFor a complete reference of all string functions, go to our complete PHP String Reference.",
      "examples": [
        "$x = \"Hello World!\"; echo strtoupper($x);",
        "$x = \"Hello World!\"; echo strtolower($x);",
        "$x = \"Hello World!\"; echo str_replace(\"World\", \"Dolly\", $x);",
        "$x = \"Hello World!\"; echo strrev($x);",
        "$x = \" Hello World! \"; echo trim($x);",
        "$x = \"Hello World!\"; $y = explode(\" \", $x); //Use the print_r() function to display the result: print_r($y); /* Result: Array ( [0] => Hello [1] => World! ) */",
        "strtoupper()",
        "strtolower()",
        "str_replace()",
        "strrev()",
        "trim()",
        "explode()"
      ]
    },
    {
      "title": "PHP - Concatenate Strings",
      "summary": "String Concatenation\nTo concatenate, or combine, two strings you can use the . operator:\nExampleGet your own PHP Server\nThe result of the example above is HelloWorld, without a space between the two words.\nYou can add a space character like this:\nExample\nAn easier and better way is by using the power of double quotes.\nBy surrounding the two variables in double quotes with a white space between them, the white space will also be present in the result:\nExample\nComplete PHP String Reference\nFor a complete reference of all string functions, go to our complete PHP String Reference.",
      "examples": [
        "$x = \"Hello\"; $y = \"World\"; $z = $x . $y; echo $z;",
        "$x = \"Hello\"; $y = \"World\"; $z = $x . \" \" . $y; echo $z;",
        "$x = \"Hello\"; $y = \"World\"; $z = \"$x $y\"; echo $z;",
        ".",
        "HelloWorld"
      ]
    },
    {
      "title": "PHP - Slicing Strings",
      "summary": "The PHP substr() function is used to extract a part of a string (slice a string).\nSlice a String\nYou can extract a part of a string by using the substr() function.\nSpecify the start index and the number of characters you want to return.\nExampleGet your own PHP Server\nStart the slice at index 6 and end the slice 5 positions later:\nNote The first character has index 0.\nSlice String to the End\nBy leaving out the length parameter, the range will go to the end:\nExample\nStart the slice at index 6 and go all the way to the end:\nSlice String From the End\nUse negative indexes will start the slice from the end of the string:\nExample\nGet the 3 characters, starting from the \"o\" in world (index -5):\nNote The last character has index -1.\nNegative Length\nUse negative length to specify how many characters to omit, starting from the end of the string:\nExample\nFrom the string \"Hi, how are you?\", get the characters starting from index 5, and continue until you reach the 3. character from the end (index -3).\nShould end up with \"ow are y\":\nComplete PHP String Reference\nFor a complete reference of all string functions, go to our complete PHP String Reference.",
      "examples": [
        "$x = \"Hello World!\"; echo substr($x, 6, 5);",
        "$x = \"Hello World!\"; echo substr($x, 6);",
        "$x = \"Hello World!\"; echo substr($x, -5, 3);",
        "$x = \"Hi, how are you?\"; echo substr($x, 5, -3);",
        "substr()"
      ]
    },
    {
      "title": "PHP - Escape Characters",
      "summary": "Escape Character\nTo insert characters that are illegal in a string, use an escape character.\nAn escape character is a backslash \\ followed by the character you want to insert.\nAn example of an illegal character is a double quote inside a string that is surrounded by double quotes:\nExampleGet your own PHP Server\nTo fix this problem, use the escape character \\\":\nExample\nEscape Characters\nOther escape characters used in PHP:",
      "examples": [
        "$x = \"We are the so-called \"Vikings\" from the north.\";",
        "$x = \"We are the so-called \\\"Vikings\\\" from the north.\";",
        "\\",
        "\\\""
      ]
    },
    {
      "title": "PHP Numbers",
      "summary": "In this chapter we will look in depth into Integers, Floats, and Number Strings.\nPHP Numbers\nThere are three main numeric types in PHP:\nInteger\nFloat\nNumber Strings\nIn addition, PHP has two more data types used for numbers:\nInfinity\nNaN\nVariables of numeric types are created when you assign a value to them:\nExampleGet your own PHP Server\nTo verify the type of any object in PHP, use the var_dump() function:\nExample\nPHP Integers\nThe PHP is_int() function is used to check if the type of a variable is integer.\nAn integer is a number without any decimal part: 2, 256, -256, 10358, -179567 are all integers.\nExample\nCheck if a variable is of type integer:\nAn integer data type is a non-decimal number between -2147483648 and 2147483647 in 32 bit systems, and between -9223372036854775808 and 9223372036854775807 in 64 bit systems. A value greater (or lower) than this, will be stored as float, because it exceeds the limit of an integer.\nNote: Another important thing to know is that even if 4 * 2.5 is 10, the result is stored as float, because one of the operands is a float (2.5).\nHere are some rules for integers:\nAn integer must have at least one digit\nAn integer must NOT have a decimal point\nAn integer can be either positive or negative\nIntegers can be specified in three formats: decimal (base 10), hexadecimal (base 16 - prefixed with 0x), octal (base 8 - prefixed with 0) or binary (base 2 - prefixed with 0b)\nPHP has the following predefined constants for integers:\nPHP_INT_MAX - The largest integer supported\nPHP_INT_MIN - The smallest integer supported\nPHP_INT_SIZE -Â  The size of an integer in bytes\nREMOVE ADS\nPHP Floats\nThe PHP is_float() function is used to check if the type of a variable is float.\nA float is a number with a decimal point or a number in exponential form: 2.0, 256.4, 10.358, 7.64E+5, 5.56E-5 are all floats.\nExample\nCheck if a variable is of type float:\nThe float data type can commonly store a value up to 1.7976931348623E+308 (platform dependent), and have a maximum precision of 14 digits.\nPHP has the following predefined constants for floats (from PHP 7.2):\nPHP_FLOAT_MAX - The largest representable floating point number\nPHP_FLOAT_MIN - The smallest representable positive floating point number\nPHP_FLOAT_DIG - The number of decimal digits that can be rounded into a float and back without precision loss\nPHP_FLOAT_EPSILON - The smallest representable positive number x, so that x + 1.0 != 1.0\nPHP Infinity\nThe PHP is_finite() function checks whether a value is finite or not.\nA value is finite if it is within the allowed range for a PHP float on this platform.\nThe PHP is_infinite() function checks whether a value is infinite or not.\nThe value is infinite if it is outside the allowed range for a PHP float on this platform.\nExample\nCheck if a numeric value is infinite:\nPHP NaN\nNaN stands for Not a Number.\nNaN is used for impossible mathematical operations.\nThe PHP is_nan() function is used to check if a value is not a number.\nExample\nInvalid calculation will return a NaN value:\nPHP Numerical Strings\nThe PHP is_numeric() function is used to check whether a variable is a number or a numeric string.\nThis function returns true if the variable is a number or a numeric string, false otherwise.\nExample\nCheck if the variable is numeric:\nNote: From PHP 7.0: The is_numeric() function will return FALSE for numeric strings in hexadecimal form (e.g. 0xf4c3b00c), as they are no longer considered as numeric strings.\nPHP Casting Strings and Floats to Integers\nSometimes you need to cast a numerical value into another data type.\nThe (int), (integer), and intval() functions are often used to convert a value to an integer.\nExample\nCast float and string to integer:\nLearn more about casting in the PHP Casting chapter.",
      "examples": [
        "$a = 5; $b = 5.34; $c = \"25\";",
        "var_dump($a); var_dump($b); var_dump($c);",
        "$x = 5985; var_dump(is_int($x)); $x = 59.85; var_dump(is_int($x));",
        "$x = 10.365; var_dump(is_float($x));",
        "$x = 1.9e411; var_dump(is_infinite($x));",
        "$x = acos(8); var_dump($x);",
        "$x = 5985; var_dump(is_numeric($x)); $x = \"5985\"; var_dump(is_numeric($x)); $x = \"59.85\" + 100; var_dump(is_numeric($x)); $x = \"Hello\"; var_dump(is_numeric($x));",
        "// Cast float to int $x = 23465.768; $int_cast = (int)$x; echo $int_cast; echo \"<br>\"; // Cast string to int $x = \"23465.768\"; $int_cast = (int)$x; echo $int_cast;",
        "Integer",
        "Float",
        "Number Strings",
        "Infinity",
        "NaN",
        "var_dump()",
        "is_int()",
        "PHP_INT_MAX",
        "PHP_INT_MIN",
        "PHP_INT_SIZE",
        "is_float()",
        "PHP_FLOAT_MAX",
        "PHP_FLOAT_MIN",
        "PHP_FLOAT_DIG",
        "PHP_FLOAT_EPSILON",
        "is_finite()",
        "is_infinite()",
        "is_nan()",
        "is_numeric()",
        "(int)",
        "(integer)",
        "intval()"
      ]
    },
    {
      "title": "PHP Casting",
      "summary": "Sometimes you need to change a variable from one data type into another, and sometimes you want a variable to have a specific data type. This can be done with casting.\nChange Data Type\nCasting in PHP is done with these statements:\n(string) - Converts to data type String\n(int) - Converts to data type Integer\n(float) - Converts to data type Float\n(bool) - Converts to data type Boolean\n(array) - Converts to data type Array\n(object) - Converts to data type Object\n(unset) - Converts to data type NULL\nCast to String\nTo cast to string, use the (string) statement:\nExampleGet your own PHP Server\nCast to Integer\nTo cast to integer, use the (int) statement:\nExample\nCast to Float\nTo cast to float, use the (float) statement:\nExample\nCast to Boolean\nTo cast to boolean, use the (bool) statement:\nExample\nIf a value is 0, NULL, false, or empty, the (bool) converts it into false, otherwise true.\nEven -1 converts to true.\nCast to Array\nTo cast to array, use the (array) statement:\nExample\nWhen converting into arrays, most data types converts into an indexed array with one element.\nNULL values converts to an empty array object.\nObjects converts into associative arrays where the property names becomes the keys and the property values becomes the values:\nExample\nConverting Objects into Arrays:\nCast to Object\nTo cast to object, use the (object) statement:\nExample\nWhen converting into objects, most data types converts into a object with one property, named \"scalar\", with the corresponding value.\nNULL values converts to an empty object.\nIndexed arrays converts into objects with the index number as property name and the value as property value.\nAssociative arrays converts into objects with the keys as property names and values as property values.\nExample\nConverting Arrays into Objects:\nCast to NULL\nTo cast to NULL, use the (unset) statement:\nExample",
      "examples": [
        "$a = 5; // Integer $b = 5.34; // Float $c = \"hello\"; // String $d = true; // Boolean $e = NULL; // NULL $a = (string) $a; $b = (string) $b; $c = (string) $c; $d = (string) $d; $e = (string) $e; //To verify the type of any object in PHP, use the var_dump() function: var_dump($a); var_dump($b); var_dump($c); var_dump($d); var_dump($e);",
        "$a = 5; // Integer $b = 5.34; // Float $c = \"25 kilometers\"; // String $d = \"kilometers 25\"; // String $e = \"hello\"; // String $f = true; // Boolean $g = NULL; // NULL $a = (int) $a; $b = (int) $b; $c = (int) $c; $d = (int) $d; $e = (int) $e; $f = (int) $f; $g = (int) $g;",
        "$a = 5; // Integer $b = 5.34; // Float $c = \"25 kilometers\"; // String $d = \"kilometers 25\"; // String $e = \"hello\"; // String $f = true; // Boolean $g = NULL; // NULL $a = (float) $a; $b = (float) $b; $c = (float) $c; $d = (float) $d; $e = (float) $e; $f = (float) $f; $g = (float) $g;",
        "$a = 5; // Integer $b = 5.34; // Float $c = 0; // Integer $d = -1; // Integer $e = 0.1; // Float $f = \"hello\"; // String $g = \"\"; // String $h = true; // Boolean $i = NULL; // NULL $a = (bool) $a; $b = (bool) $b; $c = (bool) $c; $d = (bool) $d; $e = (bool) $e; $f = (bool) $f; $g = (bool) $g; $h = (bool) $h; $i = (bool) $i;",
        "$a = 5; // Integer $b = 5.34; // Float $c = \"hello\"; // String $d = true; // Boolean $e = NULL; // NULL $a = (array) $a; $b = (array) $b; $c = (array) $c; $d = (array) $d; $e = (array) $e;",
        "class Car { public $color; public $model; public function __construct($color, $model) { $this->color = $color; $this->model = $model; } public function message() { return \"My car is a \" . $this->color . \" \" . $this->model . \"!\"; } } $myCar = new Car(\"red\", \"Volvo\"); $myCar = (array) $myCar; var_dump($myCar);",
        "$a = 5; // Integer $b = 5.34; // Float $c = \"hello\"; // String $d = true; // Boolean $e = NULL; // NULL $a = (object) $a; $b = (object) $b; $c = (object) $c; $d = (object) $d; $e = (object) $e;",
        "$a = array(\"Volvo\", \"BMW\", \"Toyota\"); // indexed array $b = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\"); // associative array $a = (object) $a; $b = (object) $b;",
        "(string)",
        "(int)",
        "(float)",
        "(bool)",
        "(array)",
        "(object)",
        "(unset)"
      ]
    },
    {
      "title": "PHP Math Functions",
      "summary": "PHP has a set of math functions that allows you to perform mathematical tasks on numbers.\nPHP pi() Function\nThe pi() function returns the value of PI:\nExampleGet your own PHP Server\nPHP min() and max() Functions\nThe min() and max() functions can be used to find the lowest or highest value in a list of arguments:\nExample\nPHP abs() Function\nThe abs() function returns the absolute (positive) value of a number:\nExample\nREMOVE ADS\nPHP sqrt() Function\nThe sqrt() function returns the square root of a number:\nExample\nPHP round() Function\nThe round() function rounds a floating-point number to its nearest integer:\nExample\nRandom Numbers\nThe PHP rand() function generates a random number:\nExample\nTo get more control over the random number, you can add the optional min and max parameters to specify the lowest integer and the highest integer to be returned.\nFor example, if you want a random integer between 10 and 100 (inclusive), use rand(10, 100):\nExample\nComplete PHP Math Reference\nFor a complete reference of all math functions, go to our complete PHP Math Reference.\nThe PHP math reference contains description and example of use, for each function.",
      "examples": [
        "echo(pi());",
        "echo(min(0, 150, 30, 20, -8, -200)); echo(max(0, 150, 30, 20, -8, -200));",
        "echo(abs(-6.7));",
        "echo(sqrt(64));",
        "echo(round(0.60)); echo(round(0.49));",
        "echo(rand());",
        "echo(rand(10, 100));",
        "pi()",
        "min()",
        "max()",
        "abs()",
        "sqrt()",
        "round()",
        "rand()",
        "rand(10, 100)"
      ]
    },
    {
      "title": "PHP Constants",
      "summary": "Constants are like variables, except that once they are defined they cannot be changed or undefined.\nPHP Constants\nA constant is an identifier (name) for a simple value. The value cannot be changed during the script.\nA valid constant name starts with a letter or underscore (no $ sign before the constant name).\nNote: Unlike variables, constants are automatically global across the entire script.\nCreate a PHP Constant\nTo create a constant, use the define() function.\nSyntax\nParameters:\nname: Specifies the name of the constant\nvalue: Specifies the value of the constant\nExampleGet your own PHP Server\nCreate a constant with a case-sensitive name:\nREMOVE ADS\nPHP const Keyword\nYou can also create a constant by using the const keyword.\nExample\nCreate a case-sensitive constant with the const keyword:\nconst vs. define()\nconst cannot be created inside another block scope, like inside a function or inside an if statement.\ndefine() can be created inside another block scope.\nPHP Constant Arrays\nFrom PHP7, you can create an Array constant using the define() function.\nExample\nCreate an Array constant:\nConstants are Global\nConstants are automatically global and can be used across the entire script.\nExample\nThis example uses a constant inside a function, even if it is defined outside the function:",
      "examples": [
        "define(name, value);",
        "define(\"GREETING\", \"Welcome to W3Schools.com!\"); echo GREETING;",
        "const MYCAR = \"Volvo\"; echo MYCAR;",
        "define(\"cars\", [ \"Alfa Romeo\", \"BMW\", \"Toyota\" ]); echo cars[0];",
        "define(\"GREETING\", \"Welcome to W3Schools.com!\"); function myTest() { echo GREETING; } myTest();",
        "define()",
        "const",
        "if"
      ]
    },
    {
      "title": "PHP Magic Constants",
      "summary": "PHP Predefined Constants\nPHP has nine predefined constants that change value depending on where they are used, also called the \"magic constants\".\nThese magic constants are written with a double underscore at the start and the end, except for the ClassName::class constant.\nPHP Magic Constants\nHere are the magic constants, with descriptions and examples:\nNote:\nThe magic constants are case-insensitive, meaning __LINE__ returns the same as __line__.",
      "examples": [
        "__LINE__",
        "__line__"
      ]
    },
    {
      "title": "PHP Operators",
      "summary": "PHP Operators\nOperators are used to perform operations on variables and values.\nPHP divides the operators in the following groups:\nArithmetic operators\nAssignment operators\nComparison operators\nIncrement/Decrement operators\nLogical operators\nString operators\nArray operators\nConditional assignment operators\nPHP Arithmetic Operators\nThe PHP arithmetic operators are used with numeric values to perform common arithmetical operations, such as addition, subtraction, multiplication etc.\nPHP Assignment Operators\nThe PHP assignment operators are used with numeric values to write a value to a variable.\nThe basic assignment operator in PHP is \"=\". It means that the left operand gets set to the value of the assignment expression on the right.\nREMOVE ADS\nPHP Comparison Operators\nThe PHP comparison operators are used to compare two values (number or string):\nPHP Increment / Decrement Operators\nThe PHP increment operators are used to increment a variable's value.\nThe PHP decrement operators are used to decrement a variable's value.\nPHP Logical Operators\nThe PHP logical operators are used to combine conditional statements.\nPHP String Operators\nPHP has two operators that are specially designed for strings.\nPHP Array Operators\nThe PHP array operators are used to compare arrays.\nPHP Conditional Assignment Operators\nThe PHP conditional assignment operators are used to set a value depending on conditions:",
      "examples": []
    },
    {
      "title": "PHP if Statements",
      "summary": "Conditional statements are used to perform different actions based on different conditions.\nPHP Conditional Statements\nVery often when you write code, you want to perform different actions for different conditions. You can use conditional statements in your code to do this.\nIn PHP we have the following conditional statements:\nif statement - executes some code if one condition is true\nif...else statement - executes some code if a condition is true and another code if that condition is false\nif...elseif...else statement - executes different codes for more than two conditions\nswitch statement - selects one of many blocks of code to be executed\nPHP - The if Statement\nThe if statement executes some code if one condition is true.\nSyntax\nExampleGet your own PHP Server\nOutput \"Have a good day!\" if 5 is larger than 3:\nWe can also use variables in the if statement:\nExample\nOutput \"Have a good day!\" if $t is less than 20:",
      "examples": [
        "if (5 > 3) { echo \"Have a good day!\"; }",
        "$t = 14; if ($t < 20) { echo \"Have a good day!\"; }",
        "if (condition) { // code to be executed if condition is true; }",
        "if",
        "if...else",
        "if...elseif...else",
        "switch",
        "$t"
      ]
    },
    {
      "title": "PHP if Operators",
      "summary": "PHP Comparison Operators\nAn if statement usually contain conditions that compare two values.\nExampleGet your own PHP Server\nCheck if $t is equal to 14:\nTo compare two values, we need to use a comparison operator.\nHere are the PHP comparison operators to use in if statements:\nPHP Logical Operators\nTo check more than one condition, we can use logical operators, like the && operator:\nExample\nCheck if $a is greater than $b, AND if $a is less than $c:\nHere are the PHP logical operators to use in if statements:\nWe can compare as many conditions as we like in one if statement:\nExample\nCheck if $a is either 2, 3, 4, 5, 6, or 7:",
      "examples": [
        "$t = 14; if ($t == 14) { echo \"Have a good day!\"; }",
        "$a = 200; $b = 33; $c = 500; if ($a > $b && $a < $c ) { echo \"Both conditions are true\"; }",
        "$a = 5; if ($a == 2 || $a == 3 || $a == 4 || $a == 5 || $a == 6 || $a == 7) { echo \"$a is a number between 2 and 7\"; }",
        "if",
        "$t",
        "&&",
        "$a",
        "$b",
        "$c"
      ]
    },
    {
      "title": "PHP if...else Statements",
      "summary": "PHP - The if...else Statement\nThe if...else statement executes some code if a condition is true and another code if that condition is false.\nSyntax\nExampleGet your own PHP Server\nOutput \"Have a good day!\" if the current time is less than 20, and \"Have a good night!\" otherwise:\nPHP - The if...elseif...else Statement\nThe if...elseif...else statement executes different codes for more than two conditions.\nSyntax\nExample\nOutput \"Have a good morning!\" if the current time is less than 10, and \"Have a good day!\" if the current time is less than 20. Otherwise it will output \"Have a good night!\":",
      "examples": [
        "$t = date(\"H\"); if ($t < \"20\") { echo \"Have a good day!\"; } else { echo \"Have a good night!\"; }",
        "$t = date(\"H\"); if ($t < \"10\") { echo \"Have a good morning!\"; } elseif ($t < \"20\") { echo \"Have a good day!\"; } else { echo \"Have a good night!\"; }",
        "if (condition) { // code to be executed if condition is true; } else { // code to be executed if condition is false; }",
        "if (condition) { code to be executed if this condition is true; } elseif (condition) { // code to be executed if first condition is false and this condition is true; } else { // code to be executed if all conditions are false; }",
        "if...else",
        "if...elseif...else"
      ]
    },
    {
      "title": "PHP Shorthand if Statements",
      "summary": "Short Hand If\nTo write shorter code, you can write if statements on one line.\nExampleGet your own PHP Server\nOne-line if statement:\nShort Hand If...Else\nif...else statements can also be written in one line, but the syntax is a bit different.\nExample\nOne-line if...else statement:\nThis technique is known as Ternary Operators, or Conditional Expressions.",
      "examples": [
        "$a = 5; if ($a < 10) $b = \"Hello\"; echo $b",
        "$a = 13; $b = $a < 10 ? \"Hello\" : \"Good Bye\"; echo $b;",
        "if",
        "if...else"
      ]
    },
    {
      "title": "PHP Nested if Statement",
      "summary": "Nested If\nYou can have if statements inside if statements, this is called nested if statements.\nExampleGet your own PHP Server\nA nested if statement:",
      "examples": [
        "$a = 13; if ($a > 10) { echo \"Above 10\"; if ($a > 20) { echo \" and also above 20\"; } else { echo \" but not above 20\"; } }",
        "if"
      ]
    },
    {
      "title": "PHP switch Statement",
      "summary": "The PHP switch statement is used to perform different actions based on different conditions.\nThe PHP switch Statement\nUse the switch statement to select one of many blocks of code to be executed.\nSyntax\nThis is how it works:\nThe expression is evaluated once\nThe value of the expression is compared with the values of each case\nIf there is a match, the associated block of code is executed\nThe break keyword breaks out of the switch block\nThe default code block is executed if there is no match\nExampleGet your own PHP Server\nREMOVE ADS\nThe PHP break Keyword\nWhen PHP reaches a break keyword, it breaks out of the switch block.\nThis will stop the execution of more code, and no more cases are tested.\nThe last block does not need a break, the block breaks (ends) there anyway.\nWarning: If you omit the break statement in a case that is not the last, and that case gets a match, the next case will also be executed even if the evaluation does not match the case!\nExample\nWhat happens if we remove the break statement from case \"red\"?\n$favcolor is red, so the code block from case \"red\" is executed, but since it has no break statement, the code block from case \"blue\" will also be executed:\nThe PHP default Keyword\nThe PHP default keyword specifies the code to run if there is no case match:\nExample\nIf no cases get a match, the default block is executed:\nThe default case does not have to be the last case in a switch block:\nExample\nPuttingÂ  the default block elsewhere than at the end of the break block is allowed, but not recommended.\nNote: If default is not the last block in the break block, remember to end the default block with a break statement.\nCommon Code Blocks\nIf you want multiple cases to use the same code block, you can specify the cases like this:\nExample\nMore than one case for each code block:",
      "examples": [
        "switch (expression) { case label1: //code block break; case label2: //code block; break; case label3: //code block break; default: //code block }",
        "$favcolor = \"red\"; switch ($favcolor) { case \"red\": echo \"Your favorite color is red!\"; break; case \"blue\": echo \"Your favorite color is blue!\"; break; case \"green\": echo \"Your favorite color is green!\"; break; default: echo \"Your favorite color is neither red, blue, nor green!\"; }",
        "$favcolor = \"red\"; switch ($favcolor) { case \"red\": echo \"Your favorite color is red!\"; case \"blue\": \"Your favorite color is blue!\"; break; case \"green\": echo \"Your favorite color is green!\"; break; default: echo \"Your favorite color is neither red, blue, nor green!\"; }",
        "$d = 4; switch ($d) { case 6: echo \"Today is Saturday\"; break; case 0: echo \"Today is Sunday\"; break; default: echo \"Looking forward to the Weekend\"; }",
        "$d = 4; switch ($d) { default: echo \"Looking forward to the Weekend\"; break; case 6: echo \"Today is Saturday\"; break; case 0: echo \"Today is Sunday\"; }",
        "$d = 3; switch ($d) { case 1: case 2: case 3: case 4: case 5: echo \"The weeks feels so long!\"; break; case 6: case 0: echo \"Weekends are the best!\"; break; default: echo \"Something went wrong\"; }",
        "switch",
        "break",
        "default",
        "$favcolor"
      ]
    },
    {
      "title": "PHP Loops",
      "summary": "In the following chapters you will learn how to repeat code by using loops in PHP.\nPHP Loops\nPHP loops are used to execute the same block of code again and again, as long as a certain condition is true.\nIn PHP, we have the following loop types:\nwhile - loops through a block of code as long as the specified condition is true\ndo...while - loops through a block of code once, and then repeats the loop as long as the specified condition is true\nfor - loops through a block of code a specified number of times\nforeach - loops through a block of code for each element in an array\nThe following chapters will explain and give examples of each loop type.",
      "examples": [
        "while",
        "do...while",
        "for",
        "foreach"
      ]
    },
    {
      "title": "PHP while Loop",
      "summary": "The PHP while loop - Loops through a block of code as long as the specified condition is true.\nThe PHP while Loop\nThe while loop executes a block of code as long as the specified condition is true.\nExampleGet your own PHP Server\nPrint $i as long as $i is less than 6:\nNote: remember to increment $i, or else the loop will continue forever.\nThe while loop does not run a specific number of times, but checks after each iteration if the condition is still true.\nThe condition does not have to be a counter, it could be the status of an operation or any condition that evaluates to either true or false.\nThe PHP break Statement\nWith the break statement we can stop the loop even if the condition is still true:\nExample\nStop the loop when $i is 3:\nREMOVE ADS\nThe PHP continue Statement\nWith the continue statement we can stop the current iteration, and continue with the next:\nExample\nStop, and jump to the next iteration if $i is 3:\nAlternative Syntax\nThe while loop syntax can also be written with the endwhile statement like this\nExample\nPrint $i as long as $i is less than 6:\nStep 10\nIf you want the while loop count to 100, but only by each 10, you can increase the counter by 10 instead 1 in each iteration:\nExample\nCount to 100 by tens:",
      "examples": [
        "$i = 1; while ($i < 6) { echo $i; $i++; }",
        "$i = 1; while ($i < 6) { if ($i == 3) break; echo $i; $i++; }",
        "$i = 0; while ($i < 6) { $i++; if ($i == 3) continue; echo $i; }",
        "$i = 1; while ($i < 6): echo $i; $i++; endwhile;",
        "$i = 0; while ($i < 100) { $i+=10; echo $i \"<br>\"; }",
        "while",
        "$i",
        "break",
        "continue",
        "endwhile"
      ]
    },
    {
      "title": "PHP do while Loop",
      "summary": "The PHP do...while loop - Loops through a block of code once, and then repeats the loop as long as the specified condition is true.\nThe PHP do...while Loop\nThe do...while loop will always execute the block of code at least once, it will then check the condition, and repeat the loop while the specified condition is true.\nExampleGet your own PHP Server\nPrint $i as long as $i is less than 6:\nNote: In a do...while loop the condition is tested AFTER executing the statements within the loop. This means that the do...while loop will execute its statements at least once, even if the condition is false. See example below.\nLet us see what happens if we set the $i variable to 8 instead of 1, before execute the same do...while loop again:\nExample\nSet $i = 8, then print $i as long as $i is less than 6:\nThe code will be executed once, even if the condition is never true.\nREMOVE ADS\nThe PHP break Statement\nWith the break statement we can stop the loop even if the condition is still true:\nExample\nStop the loop when $i is 3:\nThe PHP continue Statement\nWith the continue statement we can stop the current iteration, and continue with the next:\nExample\nStop, and jump to the next iteration if $i is 3:",
      "examples": [
        "$i = 1; do { echo $i; $i++; } while ($i < 6);",
        "$i = 8; do { echo $i; $i++; } while ($i < 6);",
        "$i = 1; do { if ($i == 3) break; echo $i; $i++; } while ($i < 6);",
        "$i = 0; do { $i++; if ($i == 3) continue; echo $i; } while ($i < 6);",
        "do...while",
        "$i",
        "$i = 8",
        "break",
        "continue"
      ]
    },
    {
      "title": "PHP for Loop",
      "summary": "The PHP for loop - Loops through a block of code a specified number of times.\nThe PHP for Loop\nThe for loop is used when you know how many times the script should run.\nSyntax\nThis is how it works:\nexpression1 is evaluated once\nexpression2 is evaluated before each iteration\nexpression3 is evaluated after each iteration\nExampleGet your own PHP Server\nPrint the numbers from 0 to 10:\nExample Explained\nThe first expression, $x = 0;, is evaluated once and sets a counter to 0.\nThe second expression, $x <= 10;, is evaluated before each iteration, and the code block is only executed if this expression evaluates to true. In this example the expression is true as long as $x is less than, or equal to, 10.\nThe third expression, $x++;, is evaluated after each iteration, and in this example, the expression increases the value of $x by one at each iteration.\nThe PHP break Statement\nWith the break statement we can stop the loop even if the condition is still true:\nExample\nStop the loop when $x is 3:\nREMOVE ADS\nThe PHP continue Statement\nWith the continue statement we can stop the current iteration, and continue with the next:\nExample\nStop, and jump to the next iteration if $x is 3:\nStep 10\nThis example counts to 100 by tens:\nExample",
      "examples": [
        "for ($x = 0; $x <= 10; $x++) { echo \"The number is: $x <br>\"; }",
        "for ($x = 0; $x <= 10; $x++) { if ($x == 3) break; echo \"The number is: $x <br>\"; }",
        "for ($x = 0; $x <= 10; $x++) { if ($x == 3) continue; echo \"The number is: $x <br>\"; }",
        "for ($x = 0; $x <= 100; $x+=10) { echo \"The number is: $x <br>\"; }",
        "for (expression1, expression2, expression3) { // code block }",
        "for",
        "$x = 0;",
        "$x <= 10;",
        "$x",
        "$x++;",
        "break",
        "continue"
      ]
    },
    {
      "title": "PHP foreach Loop",
      "summary": "The PHP foreach loop - Loops through a block of code for each element in an array or each property in an object.\nThe PHP foreach Loop on Arrays\nThe most common use of the foreach loop, is to loop through the items of an array.\nExampleGet your own PHP Server\nLoop through the items of an indexed array:\nFor every loop iteration, the value of the current array element is assigned to the variable $x. The iteration continues until it reaches the last array element.\nKeys and Values\nThe array above is an indexed array, where the first item has the key 0, the second has the key 1, and so on.\nAssociative arrays are different, associative arrays use named keys that you assign to them, and when looping through associative arrays, you might want to keep the key as well as the value.\nThis can be done by specifying both the key and value in the foreach definition, like this:\nExample\nPrint both the key and the value from the $members array:\nYou will learn more about arrays in the PHP Arrays chapter.\nREMOVE ADS\nThe PHP foreach Loop on Objects\nThe foreach loop can also be used to loop through properties of an object:\nExample\nPrint the property names and values of the $myCar object:\nYou will learn more about objects in the PHP Objects and Classes chapter.\nThe PHP break Statement\nWith the break statement we can stop the loop even if it has not reached the end:\nExample\nStop the loop if $x is \"blue\":\nThe PHP continue Statement\nWith the continue statement we can stop the current iteration, and continue with the next:\nExample\nStop, and jump to the next iteration if $x is \"blue\":\nPHP Foreach Loop Byref\nWhen looping through the array items, any changes done to the array item will, by default, NOT affect the original array:\nExample\nBy default, changing an array item will not affect the original array:\nBUT, by using the & character in the foreach declaration, the array item is assigned by reference, which results in any changes done to the array item will also be done to the original array:\nExample\nBy assigning the array items by reference, changes will affect the original array:\nAlternative Syntax\nThe foreach loop syntax can also be written with the endforeach statement like this\nExample\nLoop through the items of an indexed array:",
      "examples": [
        "$colors = array(\"red\", \"green\", \"blue\", \"yellow\"); foreach ($colors as $x) { echo \"$x <br>\"; }",
        "$members = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\"); foreach ($members as $x => $y) { echo \"$x : $y <br>\"; }",
        "class Car { public $color; public $model; public function __construct($color, $model) { $this->color = $color; $this->model = $model; } } $myCar = new Car(\"red\", \"Volvo\"); foreach ($myCar as $x => $y) { echo \"$x: $y <br>\"; }",
        "$colors = array(\"red\", \"green\", \"blue\", \"yellow\"); foreach ($colors as $x) { if ($x == \"blue\") break; echo \"$x <br>\"; }",
        "$colors = array(\"red\", \"green\", \"blue\", \"yellow\"); foreach ($colors as $x) { if ($x == \"blue\") continue; echo \"$x <br>\"; }",
        "$colors = array(\"red\", \"green\", \"blue\", \"yellow\"); foreach ($colors as $x) { if ($x == \"blue\") $x = \"pink\"; } var_dump($colors);",
        "$colors = array(\"red\", \"green\", \"blue\", \"yellow\"); foreach ($colors as &$x) { if ($x == \"blue\") $x = \"pink\"; } var_dump($colors);",
        "$colors = array(\"red\", \"green\", \"blue\", \"yellow\"); foreach ($colors as $x) : echo \"$x <br>\"; endforeach;",
        "foreach",
        "$x",
        "$members",
        "$myCar",
        "break",
        "continue",
        "&",
        "endforeach"
      ]
    },
    {
      "title": "PHP Break Statement",
      "summary": "The PHP break statement can be used to jump out of different kind of loops.\nBreak in For loop\nThe break statement can be used to jump out of a for loop.\nExampleGet your own PHP Server\nJump out of the loop when $x is 4:\nBreak in While Loop\nThe break statement can be used to jump out of a while loop.\nExample\nJump out of the loop when $x is 4:\nREMOVE ADS\nBreak in Do While Loop\nThe break statement can be used to jump out of a do...while loop.\nExample\nJump out of the loop when $i is 3:\nBreak in Foreach Loop\nThe break statement can be used to jump out of a foreach loop.\nExample\nJump out of the loop if $x is \"blue\":",
      "examples": [
        "for ($x = 0; $x < 10; $x++) { if ($x == 4) { break; } echo \"The number is: $x <br>\"; }",
        "$x = 0; while($x < 10) { if ($x == 4) { break; } echo \"The number is: $x <br>\"; $x++; }",
        "$i = 1; do { if ($i == 3) break; echo $i; $i++; } while ($i < 6);",
        "$colors = array(\"red\", \"green\", \"blue\", \"yellow\"); foreach ($colors as $x) { if ($x == \"blue\") break; echo \"$x <br>\"; }",
        "break",
        "for",
        "$x",
        "4",
        "while",
        "do...while",
        "$i",
        "foreach"
      ]
    },
    {
      "title": "PHP Continue Statement",
      "summary": "The PHP continue statement can be used to jump out of the current iteration of a loop, and continue with the next.\nContinue in For Loops\nThe continue statement stops the current iteration in the for loop and continue with the next.\nExampleGet your own PHP Server\nMove to next iteration if $x = 4:\nContinue in While Loop\nThe continue statement stops the current iteration in the while loop and continue with the next.\nExample\nMove to next iteration if $x = 4:\nREMOVE ADS\nContinue in Do While Loop\nThe continue statement stops the current iteration in the do...while loop and continue with the next.\nExample\nStop, and jump to the next iteration if $i is 3:\nContinue in Foreach Loop\nThe continue statement stops the current iteration in the foreach loop and continue with the next.\nExample\nStop, and jump to the next iteration if $x is \"blue\":",
      "examples": [
        "for ($x = 0; $x < 10; $x++) { if ($x == 4) { continue; } echo \"The number is: $x <br>\"; }",
        "$x = 0; while($x < 10) { if ($x == 4) { continue; } echo \"The number is: $x <br>\"; $x++; }",
        "$i = 0; do { $i++; if ($i == 3) continue; echo $i; } while ($i < 6);",
        "$colors = array(\"red\", \"green\", \"blue\", \"yellow\"); foreach ($colors as $x) { if ($x == \"blue\") continue; echo \"$x <br>\"; }",
        "continue",
        "for",
        "$x",
        "while",
        "do...while",
        "$i",
        "foreach"
      ]
    },
    {
      "title": "PHP Functions",
      "summary": "PHP Built-in Functions\nPHP has over 1000 built-in functions that can be called directly, from within a script, to perform a specific task.\nPlease check out our PHP reference for a complete overview of the PHP built-in functions.\nIn addition you can create your own custom functions!\nPHP User Defined Functions\nBesides the built-in PHP functions, it is possible to create your own functions.\nA function is a block of statements that can be used repeatedly in a program.\nA function will not execute automatically when a page loads.\nA function will be executed by a call to the function.\nCreate a Function\nA user-defined function declaration starts with the keyword function, followed by the name of the function:\nExampleGet your own PHP Server\nNote: A function name must start with a letter or an underscore. Function names are NOT case-sensitive.\nTip: Give the function a name that reflects what the function does!\nCall a Function\nTo call the function, just write its name followed by parentheses ():\nExample\nIn our example, we create a function named myMessage().\nThe opening curly brace { indicates the beginning of the function code, and the closing curly brace } indicates the end of the function.\nThe function outputs \"Hello world!\".\nREMOVE ADS\nPHP Function Arguments\nInformation can be passed to functions through arguments. An argument is just like a variable.\nArguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma.\nThe following example has a function with one argument ($fname). When the familyName() function is called, we also pass along a name, e.g. (\"Jani\"), and the name is used inside the function, which outputs several different first names, but an equal last name:\nExample\nThe following example has a function with two arguments ($fname, $year):\nExample\nPHP Default Argument Value\nThe following example shows how to use a default parameter. If we call the function setHeight() without arguments it takes the default value as argument:\nExample\nPHP Functions - Returning values\nTo let a function return a value, use the return statement:\nExample\nPassing Arguments by Reference\nIn PHP, arguments are usually passed by value, which means that a copy of the value is used in the function and the variable that was passed into the function cannot be changed.\nWhen a function argument is passed by reference, changes to the argument also change the variable that was passed in. To turn a function argument into a reference, the & operator is used:\nExample\nUse a pass-by-reference argument to update a variable:\nVariable Number of Arguments\nBy using the ... operator in front of the function parameter, the function accepts an unknown number of arguments. This is also called a variadic function.\nThe variadic function argument becomes an array.\nExample\nA function that do not know how many arguments it will get:\nYou can only have one argument with variable length, and it has to be the last argument.\nExample\nThe variadic argument must be the last argument:\nIf the variadic argument is not the last argument, you will get an error.\nExample\nHaving the ... operator on the first of two arguments, will raise an error:\nPHP is a Loosely Typed Language\nIn the examples above, notice that we did not have to tell PHP which data type the variable is.\nPHP automatically associates a data type to the variable, depending on its value. Since the data types are not set in a strict sense, you can do things like adding a string to an integer without causing an error.\nIn PHP 7, type declarations were added. This gives us an option to specify the expected data type when declaring a function, and by adding the strict declaration, it will throw a \"Fatal Error\" if the data type mismatches.\nIn the following example we try to send both a number and a string to the function without using strict:\nExample\nTo specify strict we need to set declare(strict_types=1);. This must be on the very first line of the PHP file.\nIn the following example we try to send both a number and a string to the function, but here we have added the strict declaration:\nExample\nThe strict declaration forces things to be used in the intended way.\nPHP Return Type Declarations\nPHP 7 also supports Type Declarations for the return statement. Like with the type declaration for function arguments, by enabling the strict requirement, it will throw a \"Fatal Error\" on a type mismatch.\nTo declare a type for the function return, add a colon ( : ) and the type right before the opening curly ( { )bracket when declaring the function.\nIn the following example we specify the return type for the function:\nExample\nYou can specify a different return type, than the argument types, but make sure the return is the correct type:\nExample",
      "examples": [
        "function myMessage() { echo \"Hello world!\"; }",
        "function myMessage() { echo \"Hello world!\"; } myMessage();",
        "function familyName($fname) { echo \"$fname Refsnes.<br>\"; } familyName(\"Jani\"); familyName(\"Hege\"); familyName(\"Stale\"); familyName(\"Kai Jim\"); familyName(\"Borge\");",
        "function familyName($fname, $year) { echo \"$fname Refsnes. Born in $year <br>\"; } familyName(\"Hege\", \"1975\"); familyName(\"Stale\", \"1978\"); familyName(\"Kai Jim\", \"1983\");",
        "function setHeight($minheight = 50) { echo \"The height is : $minheight <br>\"; } setHeight(350); setHeight(); // will use the default value of 50 setHeight(135); setHeight(80);",
        "function sum($x, $y) { $z = $x + $y; return $z; } echo \"5 + 10 = \" . sum(5, 10) . \"<br>\"; echo \"7 + 13 = \" . sum(7, 13) . \"<br>\"; echo \"2 + 4 = \" . sum(2, 4);",
        "function add_five(&$value) { $value += 5; } $num = 2; add_five($num); echo $num;",
        "function sumMyNumbers(...$x) { $n = 0; $len = count($x); for($i = 0; $i < $len; $i++) { $n += $x[$i]; } return $n; } $a = sumMyNumbers(5, 2, 6, 2, 7, 7); echo $a;",
        "function myFamily($lastname, ...$firstname) { $txt = \"\"; $len = count($firstname); for($i = 0; $i < $len; $i++) { $txt = $txt.\"Hi, $firstname[$i] $lastname.<br>\"; } return $txt; } $a = myFamily(\"Doe\", \"Jane\", \"John\", \"Joey\"); echo $a;",
        "function myFamily(...$firstname, $lastname) { $txt = \"\"; $len = count($firstname); for($i = 0; $i < $len; $i++) { $txt = $txt.\"Hi, $firstname[$i] $lastname.<br>\"; } return $txt; } $a = myFamily(\"Doe\", \"Jane\", \"John\", \"Joey\"); echo $a;",
        "function addNumbers(int $a, int $b) { return $a + $b; } echo addNumbers(5, \"5 days\"); // since strict is NOT enabled \"5 days\" is changed to int(5), and it will return 10",
        "<?php declare(strict_types=1); // strict requirement function addNumbers(int $a, int $b) { return $a + $b; } echo addNumbers(5, \"5 days\"); // since strict is enabled and \"5 days\" is not an integer, an error will be thrown ?>",
        "<?php declare(strict_types=1); // strict requirement function addNumbers(float $a, float $b) : float { return $a + $b; } echo addNumbers(1.2, 5.2); ?>",
        "<?php declare(strict_types=1); // strict requirement function addNumbers(float $a, float $b) : int { return (int)($a + $b); } echo addNumbers(1.2, 5.2);",
        "function",
        "()",
        "myMessage()",
        "{",
        "}",
        "($fname)",
        "familyName()",
        "(\"Jani\")",
        "($fname, $year)",
        "setHeight()",
        "return",
        "&",
        "...",
        "strict",
        "declare(strict_types=1);",
        ":"
      ]
    },
    {
      "title": "PHP Arrays",
      "summary": "An array stores multiple values in one single variable:\nExampleGet your own PHP Server\nWhat is an Array?\nAn array is a special variable that can hold many values under a single name, and you can access the values by referring to an index number or name.\nPHP Array Types\nIn PHP, there are three types of arrays:\nIndexed arrays - Arrays with a numeric index\nAssociative arrays - Arrays with named keys\nMultidimensional arrays - Arrays containing one or more arrays\nWorking With Arrays\nIn this tutorial you will learn how to work with arrays, including:\nCreate Arrays\nAccess Arrays\nUpdate Arrays\nAdd Array Items\nRemove Array Items\nSort Arrays\nArray Items\nArray items can be of any data type.\nThe most common are strings and numbers (int, float), but array items can also be objects, functions or even arrays.\nYou can have different data types in the same array.\nExample\nArray items of four different data types:\nArray Functions\nThe real strength of PHP arrays are the built-in array functions, like the count() function for counting array items:\nExample\nHow many items are in the $cars array:\nFor a complete reference of all array functions, go to our complete PHP Array Reference.",
      "examples": [
        "$cars = array(\"Volvo\", \"BMW\", \"Toyota\");",
        "$myArr = array(\"Volvo\", 15, [\"apples\", \"bananas\"], myFunction);",
        "$cars = array(\"Volvo\", \"BMW\", \"Toyota\"); echo count($cars);",
        "count()",
        "$cars"
      ]
    },
    {
      "title": "PHP Indexed Arrays",
      "summary": "PHP Indexed Arrays\nIn indexed arrays each item has an index number.\nBy default, the first item has index 0, the second item has item 1, etc.\nExampleGet your own PHP Server\nCreate and display an indexed array:\nAccess Indexed Arrays\nTo access an array item you can refer to the index number.\nExample\nDisplay the first array item:\nChange Value\nTo change the value of an array item, use the index number:\nExample\nChange the value of the second item:\nLoop Through an Indexed Array\nTo loop through and print all the values of an indexed array, you could use a foreach loop, like this:\nExample\nDisplay all array items:\nFor a complete reference of all array functions, go to our complete PHP Array Reference.\nREMOVE ADS\nIndex Number\nThe key of an indexed array is a number, by default the first item is 0 and the second is 1 etc., but there are exceptions.\nNew items get the next index number, meaning one higher than the highest existing index.\nSo if you have an array like this:\nAnd if you use the array_push() function to add a new item, the new item will get the index 3:\nExample\nBut if you have an array with random index numbers, like this:\nAnd if you use the array_push() function to add a new item, what will be the index number of the new item?\nExample",
      "examples": [
        "$cars = array(\"Volvo\", \"BMW\", \"Toyota\"); var_dump($cars);",
        "$cars = array(\"Volvo\", \"BMW\", \"Toyota\"); echo $cars[0];",
        "$cars = array(\"Volvo\", \"BMW\", \"Toyota\"); $cars[1] = \"Ford\"; var_dump($cars);",
        "$cars = array(\"Volvo\", \"BMW\", \"Toyota\"); foreach ($cars as $x) { echo \"$x <br>\"; }",
        "$cars[0] = \"Volvo\"; $cars[1] = \"BMW\"; $cars[2] = \"Toyota\";",
        "array_push($cars, \"Ford\"); var_dump($cars);",
        "$cars[5] = \"Volvo\"; $cars[7] = \"BMW\"; $cars[14] = \"Toyota\";",
        "foreach",
        "array_push()"
      ]
    },
    {
      "title": "PHP Associative Arrays",
      "summary": "PHP Associative Arrays\nAssociative arrays are arrays that use named keys that you assign to them.\nExampleGet your own PHP Server\nAccess Associative Arrays\nTo access an array item you can refer to the key name.\nExample\nDisplay the model of the car:\nChange Value\nTo change the value of an array item, use the key name:\nExample\nChange the year item:\nREMOVE ADS\nLoop Through an Associative Array\nTo loop through and print all the values of an associative array, you could use a foreach loop, like this:\nExample\nDisplay all array items, keys and values:\nFor a complete reference of all array functions, go to our complete PHP Array Reference.",
      "examples": [
        "$car = array(\"brand\"=>\"Ford\", \"model\"=>\"Mustang\", \"year\"=>1964); var_dump($car);",
        "$car = array(\"brand\"=>\"Ford\", \"model\"=>\"Mustang\", \"year\"=>1964); echo $car[\"model\"];",
        "$car = array(\"brand\"=>\"Ford\", \"model\"=>\"Mustang\", \"year\"=>1964); $car[\"year\"] = 2024; var_dump($car);",
        "$car = array(\"brand\"=>\"Ford\", \"model\"=>\"Mustang\", \"year\"=>1964); foreach ($car as $x => $y) { echo \"$x: $y <br>\"; }",
        "year",
        "foreach"
      ]
    },
    {
      "title": "PHP Create Arrays",
      "summary": "Create Array\nYou can create arrays by using the array() function:\nExampleGet your own PHP Server\nYou can also use a shorter syntax by using the [] brackets:\nExample\nMultiple Lines\nLine breaks are not important, so an array declaration can span multiple lines:\nExample\nTrailing Comma\nA comma after the last item is allowed:\nExample\nArray Keys\nWhen creating indexed arrays the keys are given automatically, starting at 0 and increased by 1 for each item, so the array above could also be created with keys:\nExample\nAs you can see, indexed arrays are the same as associative arrays, but associative arrays have names instead of numbers:\nExample\nDeclare Empty Array\nYou can declare an empty array first, and add items to it later:\nExample\nThe same goes for associative arrays, you can declare the array first, and then add items to it:\nExample\nMixing Array Keys\nYou can have arrays with both indexed and named keys:\nExample",
      "examples": [
        "$cars = array(\"Volvo\", \"BMW\", \"Toyota\");",
        "$cars = [\"Volvo\", \"BMW\", \"Toyota\"];",
        "$cars = [ \"Volvo\", \"BMW\", \"Toyota\" ];",
        "$cars = [ \"Volvo\", \"BMW\", \"Toyota\", ];",
        "$cars = [ 0 => \"Volvo\", 1 => \"BMW\", 2 =>\"Toyota\" ];",
        "$myCar = [ \"brand\" => \"Ford\", \"model\" => \"Mustang\", \"year\" => 1964 ];",
        "$cars = []; $cars[0] = \"Volvo\"; $cars[1] = \"BMW\"; $cars[2] = \"Toyota\";",
        "$myCar = []; $myCar[\"brand\"] = \"Ford\"; $myCar[\"model\"] = \"Mustang\"; $myCar[\"year\"] = 1964;",
        "$myArr = []; $myArr[0] = \"apples\"; $myArr[1] = \"bananas\"; $myArr[\"fruit\"] = \"cherries\";",
        "array()",
        "[]"
      ]
    },
    {
      "title": "PHP Access Arrays",
      "summary": "Access Array Item\nTo access an array item, you can refer to the index number for indexed arrays, and the key name for associative arrays.\nExampleGet your own PHP Server\nAccess an item by referring to its index number:\nNote: The first item has index 0.\nTo access items from an associative array, use the key name:\nExample\nAccess an item by referring to its key name:\nDouble or Single Quotes\nYou can use both double and single quotes when accessing an array:\nExample\nExcecute a Function Item\nArray items can be of any data type, including function.\nTo execute such a function, use the index number followed by parentheses ():\nExample\nExecute a function item:\nUse the key name when the function is an item in a associative array:\nExample\nExecute function by referring to the key name:\nLoop Through an Associative Array\nTo loop through and print all the values of an associative array, you can use a foreach loop, like this:\nExample\nDisplay all array items, keys and values:\nLoop Through an Indexed Array\nTo loop through and print all the values of an indexed array, you can use a foreach loop, like this:\nExample\nDisplay all array items:",
      "examples": [
        "$cars = array(\"Volvo\", \"BMW\", \"Toyota\"); echo $cars[2];",
        "$cars = array(\"brand\" => \"Ford\", \"model\" => \"Mustang\", \"year\" => 1964); echo $cars[\"year\"];",
        "echo $cars[\"model\"]; echo $cars['model'];",
        "function myFunction() { echo \"I come from a function!\"; } $myArr = array(\"Volvo\", 15, myFunction); $myArr[2]();",
        "function myFunction() { echo \"I come from a function!\"; } $myArr = array(\"car\" => \"Volvo\", \"age\" => 15, \"message\" => myFunction); $myArr[\"message\"]();",
        "$car = array(\"brand\"=>\"Ford\", \"model\"=>\"Mustang\", \"year\"=>1964); foreach ($car as $x => $y) { echo \"$x: $y <br>\"; }",
        "$cars = array(\"Volvo\", \"BMW\", \"Toyota\"); foreach ($cars as $x) { echo \"$x <br>\"; }",
        "()",
        "foreach"
      ]
    },
    {
      "title": "PHP Update Array Items",
      "summary": "Update Array Item\nTo update an existing array item, you can refer to the index number for indexed arrays, and the key name for associative arrays.\nExampleGet your own PHP Server\nChange the second array item from \"BMW\" to \"Ford\":\nNote: The first item has index 0.\nTo update items from an associative array, use the key name:\nExample\nUpdate the year to 2024:\nUpdate Array Items in a Foreach Loop\nThere are different techniques to use when changing item values in a foreach loop.\nOne way is to insert the & character in the assignment to assign the item value by reference, and thereby making sure that any changes done with the array item inside the loop will be done to the original array:\nExample\nChange ALL item values to \"Ford\":\nNote: Remember to add the unset() function after the loop. If omitted, the $x variable will remain as a reference to the last array item.\nTo demonstrate this, see what happens when we change the value of $x after the foreach loop:\nExample\nDemonstrate the consequence of forgetting the unset() function:",
      "examples": [
        "$cars = array(\"Volvo\", \"BMW\", \"Toyota\"); $cars[1] = \"Ford\";",
        "$cars = array(\"brand\" => \"Ford\", \"model\" => \"Mustang\", \"year\" => 1964); $cars[\"year\"] = 2024;",
        "$cars = array(\"Volvo\", \"BMW\", \"Toyota\"); foreach ($cars as &$x) { $x = \"Ford\"; } unset($x); var_dump($cars);",
        "$cars = array(\"Volvo\", \"BMW\", \"Toyota\"); foreach ($cars as &$x) { $x = \"Ford\"; } $x = \"ice cream\"; var_dump($cars);",
        "foreach",
        "&",
        "unset()",
        "$x"
      ]
    },
    {
      "title": "PHP Add Array Items",
      "summary": "Add Array Item\nTo add items to an existing array, you can use the bracket [] syntax.\nExampleGet your own PHP Server\nAdd one more item to the fruits array:\nAssociative Arrays\nTo add items to an associative array, or key/value array, use brackets [] for the key, and assign value with the = operator.\nExample\nAdd one item to the car array:\nAdd Multiple Array Items\nTo add multiple items to an existing array, use the array_push() function.\nExample\nAdd three item to the fruits array:\nAdd Multiple Items to Associative Arrays\nTo add multiple items to an existing array, you can use the += operator.\nExample\nAdd two items to the cars array:",
      "examples": [
        "$fruits = array(\"Apple\", \"Banana\", \"Cherry\"); $fruits[] = \"Orange\";",
        "$cars = array(\"brand\" => \"Ford\", \"model\" => \"Mustang\"); $cars[\"color\"] = \"Red\";",
        "$fruits = array(\"Apple\", \"Banana\", \"Cherry\"); array_push($fruits, \"Orange\", \"Kiwi\", \"Lemon\");",
        "$cars = array(\"brand\" => \"Ford\", \"model\" => \"Mustang\"); $cars += [\"color\" => \"red\", \"year\" => 1964];",
        "[]",
        "fruits",
        "=",
        "car",
        "array_push()",
        "+=",
        "cars"
      ]
    },
    {
      "title": "PHP Delete Array Items",
      "summary": "Remove Array Item\nTo remove an existing item from an array, you can use the array_splice() function.\nWith the array_splice() function you specify the index (where to start) and how many items you want to delete.\nExampleGet your own PHP Server\nRemove the second item:\nAfter the deletion, the array gets reindexed automatically, starting at index 0.\nUsing the unset Function\nYou can also use the unset() function to delete existing array items.\nNote: The unset() function does not re-index the array. So, if you remove an element at index 1, the other elements (e.g., at index 0, 2, 3, etc.) will keep their original indices, leading to a \"gap\" in the sequence of indices.\nExample\nRemove the second item:\nRemove Multiple Array Items\nTo remove multiple items, the array_splice() function takes a length parameter that allows you to specify the number of items to delete.\nExample\nRemove 2 items, starting a the second item (index 1):\nThe unset() function takes a unlimited number of arguments, and can therefore be used to delete multiple array items:\nExample\nRemove the first and the second item:\nRemove Item From an Associative Array\nTo remove items from an associative array, you can use the unset() function.\nSpecify the key of the item you want to delete.\nExample\nRemove the \"model\":\nUsing the array_diff Function\nYou can also use the array_diff() function to remove items from an associative array.\nThis function returns a new array, without the specified items.\nExample\nCreate a new array, without \"Mustang\" and \"1964\":\nNote: The array_diff() function takes values as parameters, and not keys.\nRemove the Last Item\nThe array_pop() function removes the last item of an array.\nExample\nRemove the last item:\nRemove the First Item\nThe array_shift() function removes the first item of an array.\nExample\nRemove the first item:",
      "examples": [
        "$cars = array(\"Volvo\", \"BMW\", \"Toyota\"); array_splice($cars, 1, 1);",
        "$cars = array(\"Volvo\", \"BMW\", \"Toyota\"); unset($cars[1]);",
        "$cars = array(\"Volvo\", \"BMW\", \"Toyota\"); unset($cars[0], $cars[1]);",
        "$cars = array(\"brand\" => \"Ford\", \"model\" => \"Mustang\", \"year\" => 1964); unset($cars[\"model\"]);",
        "$cars = array(\"brand\" => \"Ford\", \"model\" => \"Mustang\", \"year\" => 1964); $newarray = array_diff($cars, [\"Mustang\", 1964]);",
        "$cars = array(\"Volvo\", \"BMW\", \"Toyota\"); array_pop($cars);",
        "$cars = array(\"Volvo\", \"BMW\", \"Toyota\"); array_shift($cars);",
        "array_splice()",
        "unset()",
        "array_diff()",
        "array_pop()",
        "array_shift()"
      ]
    },
    {
      "title": "PHP Sorting Arrays",
      "summary": "The elements in an array can be sorted in alphabetical or numerical order, descending or ascending.\nPHP - Sort Functions For Arrays\nIn this chapter, we will go through the following PHP array sort functions:\nsort() - sort arrays in ascending order\nrsort() - sort arrays in descending order\nasort() - sort associative arrays in ascending order, according to the value\nksort() - sort associative arrays in ascending order, according to the key\narsort() - sort associative arrays in descending order, according to the value\nkrsort() - sort associative arrays in descending order, according to the key\nSort Array in Ascending Order - sort()\nThe sort() function sort arrays in ascending order.\nExampleGet your own PHP Server\nSort the elements of the $cars array in ascending alphabetical order:\nExample\nSort the elements of the $numbers array in ascending numerical order:\nREMOVE ADS\nSort Array in Descending Order - rsort()\nThe rsort() function sort arrays in descending order.\nExample\nSort the elements of the $cars array in descending alphabetical order:\nExample\nSort the elements of the $numbers array in descending numerical order:\nSort Array - asort()\nThe asort() function sort associative arrays in ascending order, according to the value.\nExample\nSort an associative array in ascending order, according to the value:\nSort Array - ksort()\nThe ksort() function sort associative arrays in ascending order, according to the key.\nExample\nSort an associative array in ascending order, according to the key:\nSort Array - arsort()\nThe arsort() function sort associative arrays in descending order, according to the value.\nExample\nSort an associative array in descending order, according to the value:\nSort Array - krsort()\nThe krsort() function sort associative arrays in descending order, according to the key.\nExample\nSort an associative array in descending order, according to the key:\nComplete PHP Array Reference\nFor a complete reference of all array functions, go to our complete PHP Array Reference.\nThe reference contains a brief description, and examples of use, for each function!",
      "examples": [
        "$cars = array(\"Volvo\", \"BMW\", \"Toyota\"); sort($cars);",
        "$numbers = array(4, 6, 2, 22, 11); sort($numbers);",
        "$cars = array(\"Volvo\", \"BMW\", \"Toyota\"); rsort($cars);",
        "$numbers = array(4, 6, 2, 22, 11); rsort($numbers);",
        "$age = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\"); asort($age);",
        "$age = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\"); arsort($age);",
        "sort()",
        "rsort()",
        "asort()",
        "ksort()",
        "arsort()",
        "krsort()",
        "$cars",
        "$numbers"
      ]
    },
    {
      "title": "PHP Multidimensional Arrays",
      "summary": "In the previous pages, we have described arrays that are a single list of key/value pairs.\nHowever, sometimes you want to store values with more than one key. For this, we have multidimensional arrays.\nPHP - Multidimensional Arrays\nA multidimensional array is an array containing one or more arrays.\nPHP supports multidimensional arrays that are two, three, four, five, or more levels deep. However, arrays more than three levels deep are hard to manage for most people.\nThe dimension of an array indicates the number of indices you need to select an element.\nFor a two-dimensional array you need two indices to select an element\nFor a three-dimensional array you need three indices to select an element\nPHP - Two-dimensional Arrays\nA two-dimensional array is an array of arrays (a three-dimensional array is an array of arrays of arrays).\nFirst, take a look at the following table:\nWe can store the data from the table above in a two-dimensional array, like this:\nNow the two-dimensional $cars array contains four arrays, and it has two indices: row and column.\nTo get access to the elements of the $cars array we must point to the two indices (row and column):\nExampleGet your own PHP Server\nWe can also put a for loop inside another for loop to get the elements of the $cars array (we still have to point to the two indices):\nExample\nComplete PHP Array Reference\nFor a complete reference of all array functions, go to our complete PHP Array Reference.\nThe reference contains a brief description, and examples of use, for each function!",
      "examples": [
        "echo $cars[0][0].\": In stock: \".$cars[0][1].\", sold: \".$cars[0][2].\".<br>\"; echo $cars[1][0].\": In stock: \".$cars[1][1].\", sold: \".$cars[1][2].\".<br>\"; echo $cars[2][0].\": In stock: \".$cars[2][1].\", sold: \".$cars[2][2].\".<br>\"; echo $cars[3][0].\": In stock: \".$cars[3][1].\", sold: \".$cars[3][2].\".<br>\";",
        "for ($row = 0; $row < 4; $row++) { echo \"<p><b>Row number $row</b></p>\"; echo \"<ul>\"; for ($col = 0; $col < 3; $col++) { echo \"<li>\".$cars[$row][$col].\"</li>\"; } echo \"</ul>\"; }",
        "$cars = array ( array(\"Volvo\",22,18), array(\"BMW\",15,13), array(\"Saab\",5,2), array(\"Land Rover\",17,15) );",
        "for"
      ]
    },
    {
      "title": "PHP Array Functions",
      "summary": "PHP Array Functions\nPHP has a set of built-in functions that you can use on arrays.",
      "examples": []
    },
    {
      "title": "PHP Global Variables - Superglobals",
      "summary": "Superglobals were introduced in PHP 4.1.0, and are built-in variables that are always available in all scopes.\nPHP Global Variables - Superglobals\nSome predefined variables in PHP are \"superglobals\", which means that they are always accessible, regardless of scope - and you can access them from any function, class or file without having to do anything special.\nThe PHP superglobal variables are:\n$GLOBALS\n$_SERVER\n$_REQUEST\n$_POST\n$_GET\n$_FILES\n$_ENV\n$_COOKIE\n$_SESSION\nThe next chapters will explain some of the superglobals, and the rest will be explained in later chapters.",
      "examples": [
        "$GLOBALS",
        "$_SERVER",
        "$_REQUEST",
        "$_POST",
        "$_GET",
        "$_FILES",
        "$_ENV",
        "$_COOKIE",
        "$_SESSION"
      ]
    },
    {
      "title": "PHP $GLOBALS",
      "summary": "$GLOBALS is an array that contains all global variables.\nGlobal Variables\nGlobal variables are variables that can be accessed from any scope.\nVariables of the outer most scope are automatically global variables, and can be used by any scope, e.g. inside a function.\nTo use a global variable inside a function you have to either define them as global with the global keyword, or refer to them by using the $GLOBALS syntax.\nExampleGet your own PHP Server\nRefer to the global variable $x inside a function:\nThis is different from other programming languages where global variables are available without specifically referring to them as global.\nExample\nIn PHP you get nothing (or an error) when referring to a global variable without the $GLOBALS syntax:\nYou can also refer to global variables inside functions by defining them as global with the global keyword.\nExample\nDefine $x as global inside a function:\nCreate Global Variables\nVariables created in the outer most scope are global variables either if they are created using the $GLOBALS syntax or not:\nExample\nVariables created inside a function belongs only to that function, but you can create global variables inside a function by using the $GLOBALS syntax:\nExample\nCreate a global variable from inside a function, and use it outside of the function:",
      "examples": [
        "$x = 75; function myfunction() { echo $GLOBALS['x']; } myfunction()",
        "$x = 75; function myfunction() { echo $x; } myfunction()",
        "$x = 75; function myfunction() { global $x; echo $x; } myfunction()",
        "$x = 100; echo $GLOBALS[\"x\"]; echo $x;",
        "function myfunction() { $GLOBALS[\"x\"] = 100; } myfunction(); echo $GLOBALS[\"x\"]; echo $x;",
        "$GLOBALS",
        "global",
        "$x"
      ]
    },
    {
      "title": "PHP - $_SERVER",
      "summary": "$_SERVER\n$_SERVER is a PHP super global variable which holds information about headers, paths, and script locations.\nThe example below shows how to use some of the elements in $_SERVER:\nExampleGet your own PHP Server\nThe following table lists the most important elements that can go inside $_SERVER:",
      "examples": [
        "echo $_SERVER['PHP_SELF']; echo $_SERVER['SERVER_NAME']; echo $_SERVER['HTTP_HOST']; echo $_SERVER['HTTP_REFERER']; echo $_SERVER['HTTP_USER_AGENT']; echo $_SERVER['SCRIPT_NAME'];",
        "$_SERVER"
      ]
    },
    {
      "title": "PHP - $_REQUEST",
      "summary": "$_REQUEST\n$_REQUEST is a PHP super global variable which contains submitted form data, and all cookie data.\nIn other words, $_REQUEST is an array containing data from $_GET, $_POST, and $_COOKIE.\nYou can access this data with the $_REQUEST keyword followed by the name of the form field, or cookie, like this:\nUsing $_REQUEST on $_POST Requests\nPOST request are usually data submitted from an HTML form.\nHere is an example of how a HTML form could look like:\nHTML form\nWhen a user clicks the submit button, the form data is sent to a PHP file specified in the action attribute of the <form> tag.\nIn the action file we can use the $_REQUEST variable to collect the value of the input field.\nPHP file\nIn the example below we have put the HTML form and PHP code in the same PHP file.\nWe have also added some extra lines for security.\nExampleGet your own PHP Server\nUsing $_REQUEST on $_GET Requests\nGET request can be form submissions as in the example above, with the method attribute of the HTML <form> element set to GET.\nGET requests can also be data from a query string (information added after a URL address).\nHere is an example of how an HTML hyperlink, with a query string could look like:\nHTML link\nWhen a user clicks the link, the query string data is sent to demo_phpfile.php.\nIn the PHP file we can use the $_REQUEST variable to collect the value of the query string.\nExample\nThe PHP file demo_phpfile.php:",
      "examples": [
        "$_REQUEST['firstname']",
        "<html> <body> <form method=\"post\" action=\"demo_request.php\"> Name: <input type=\"text\" name=\"fname\"> <input type=\"submit\"> </form> </body> </html>",
        "$name = $_REQUEST['fname']; echo $name;",
        "<html> <body> <form method=\"post\" action=\"<?php echo $_SERVER['PHP_SELF'];?>\"> Name: <input type=\"text\" name=\"fname\"> <input type=\"submit\"> </form> <?php if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") { $name = htmlspecialchars($_REQUEST['fname']); if (empty($name)) { echo \"Name is empty\"; } else { echo $name; } } ?> </body> </html>",
        "<html> <body> <a href=\"demo_phpfile.php?subject=PHP&web=W3schools.com\">Test $GET</a> </body> </html>",
        "<html> <body> <?php echo \"Study \" . $_REQUEST['subject'] . \" at \" . $_REQUEST['web']; ?> </body> </html>",
        "$_REQUEST",
        "$_GET",
        "$_POST",
        "$_COOKIE",
        "action",
        "<form>",
        "method",
        "GET",
        "demo_phpfile.php"
      ]
    },
    {
      "title": "PHP - $_POST",
      "summary": "PHP $_POST\n$_POST contains an array of variables received via the HTTP POST method.\nThere are two main ways to send variables via the HTTP Post method:\nHTML forms\nJavaScript HTTP requests\n$_POST in HTML Forms\nA HTML form submits information via the HTTP POST method if the form's method attribute is set to \"POST\".\nTo demonstrate this, we start by creating a simple HTML form:\nHTML Form\nWhen a user clicks the submit button, the form data is sent to a PHP file specified in the action attribute of the <form> tag.\nIn the action file we can use the $_POST variable to collect the value of the input field.\nPHP file\nIn the example below we have put the HTML form and PHP code in the same PHP file.\nWe have also added some extra lines for security.\nExampleGet your own PHP Server\n$_POST in JavaScript HTTP Requests\nWhen sending a HTTP request in JavaScript, you can specify that the HTTP method is POST.\nTo demonstrate this we start by creating a JavaScript function containing a HTTP request:\nJavaScript function\nThe code above will:\nIntiate a HTTP request\nSet the HTTP method to POST\nSet a valid request header\nCreate a function to execute when the request is done\nSend the HTTP request with a variable fname set to Mary\nLook at the function that will be executed when the request is done:\nIt will try to write a response from the operation in a HTML element with id=\"demo\".\nLet us make a HTML page with such element, and also a button that executes the function.\nIf we also add the the JavaScript, the page looks like this:\nExample\nHow to post and receive data from a HTTP request:\nIn the PHP file that receive this HTTP request (demo_ajax.php), we simply use the $_POST variable to retrieve the fname variable, and writes it as a response.\nPHP file",
      "examples": [
        "<html> <body> <form method=\"POST\" action=\"demo_request.php\"> Name: <input type=\"text\" name=\"fname\"> <input type=\"submit\"> </form> </body> </html>",
        "$name = $_POST['fname']; echo $name;",
        "<html> <body> <form method=\"POST\" action=\"<?php echo $_SERVER['PHP_SELF'];?>\"> Name: <input type=\"text\" name=\"fname\"> <input type=\"submit\"> </form> <?php if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") { $name = htmlspecialchars($_POST['fname']); if (empty($name)) { echo \"Name is empty\"; } else { echo $name; } } ?> </body> </html>",
        "function myfunction() { const xhttp = new XMLHttpRequest(); xhttp.open(\"POST\", \"demo_phpfile.php\"); xhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\"); xhttp.onload = function() { document.getElementById(\"demo\").innerHTML = this.responseText; } xhttp.send(\"fname=Mary\"); } }",
        "<html> <script> function myfunction() { const xhttp = new XMLHttpRequest(); xhttp.open(\"POST\", \"demo_ajax.php\"); xhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\"); xhttp.onload = function() { document.getElementById(\"demo\").innerHTML = this.responseText; } xhttp.send(\"fname=Mary\"); } } </script> <body> <button onclick=\"myfunction()\">Click me!</button> <h1 id=\"demo\"></h1> </body> </html>",
        "xhttp.onload = function() { document.getElementById(\"demo\").innerHTML = this.responseText; }",
        "method",
        "\"POST\"",
        "action",
        "<form>",
        "$_POST",
        "fname",
        "Mary",
        "id=\"demo\"",
        "demo_ajax.php"
      ]
    },
    {
      "title": "PHP Superglobal - $_GET",
      "summary": "PHP $_GET\n$_GET contains an array of variables received via the HTTP GET method.\nThere are two main ways to send variables via the HTTP GET method:\nQuery strings in the URL\nHTML Forms\nQuery string in the URL\nA query string is data added at the end of a URL. In the link below, everything after the ? sign is part of the query string:\nThe query string above contains two key/value pairs:\nIn the PHP file we can use the $_GET variable to collect the value of the query string.\nExampleGet your own PHP Server\nThe PHP file demo_phpfile.php:\n$_GET in HTML Forms\nA HTML form submits information via the HTTP GET method if the form's method attribute is set to \"GET\".\nTo demonstrate this, we start by creating a simple HTML form:\nHTML Form\nWhen a user clicks the submit button, the form data is sent to a PHP file specified in the action attribute of the <form> tag.\nThe form fields are sent to the PHP file, with your input, as query strings:\nIn the action file we can use the $_GET variable to collect the value of the input fields.\nExample\nPHP code inside the welcome_get.php page:\nThink SECURITY when processing PHP forms!\nThe example above does not contain any form validation, it just shows how you can send and retrieve form data.\nLearn more about processing PHP forms with security in mind in the Form Validation chapter.\nProper validation of form data is important to protect your form from hackers and spammers!",
      "examples": [
        "<html> <body> <?php echo \"Study \" . $_GET['subject'] . \" at \" . $_GET['web']; ?> </body> </html>",
        "<html> <body> <form action=\"welcome_get.php\" method=\"GET\"> Name: <input type=\"text\" name=\"name\"> E-mail: <input type=\"text\" name=\"email\"> <input type=\"submit\"> </form> </body> </html>",
        "<html> <body> Welcome <?php echo $_GET[\"name\"]; ?><br> Your email address is: <?php echo $_GET[\"email\"]; ?> </body> </html>",
        "<a href=\"demo_phpfile.php?subject=PHP&web=W3schools.com\">Test $GET</a>",
        "subject=PHP web=W3schools.com",
        "welcome_get.php?name=John&email=john@example.com",
        "?",
        "$_GET",
        "demo_phpfile.php",
        "method",
        "\"GET\"",
        "action",
        "<form>",
        "welcome_get.php"
      ]
    },
    {
      "title": "PHP Regular Expressions",
      "summary": "What is a Regular Expression?\nA regular expression is a sequence of characters that forms a search pattern. When you search for data in a text, you can use this search pattern to describe what you are searching for.\nA regular expression can be a single character, or a more complicated pattern.\nRegular expressions can be used to perform all types of text search and text replace operations.\nSyntax\nIn PHP, regular expressions are strings composed of delimiters, a pattern and optional modifiers.\nIn the example above, / is the delimiter, w3schools is the pattern that is being searched for, and i is a modifier that makes the search case-insensitive.\nThe delimiter can be any character that is not a letter, number, backslash or space. The most common delimiter is the forward slash (/), but when your pattern contains forward slashes it is convenient to choose other delimiters such as # or ~.\nRegular Expression Functions\nPHP provides a variety of functions that allow you to use regular expressions.\nThe most common functions are:\nUsing preg_match()\nThe preg_match() function will tell you whether a string contains matches of a pattern.\nExampleGet your own PHP Server\nUse a regular expression to do a case-insensitive search for \"w3schools\" in a string:\nUsing preg_match_all()\nThe preg_match_all() function will tell you how many matches were found for a pattern in a string.\nExample\nUse a regular expression to do a case-insensitive count of the number of occurrences of \"ain\" in a string:\nUsing preg_replace()\nThe preg_replace() function will replace all of the matches of the pattern in a string with another string.\nExample\nUse a case-insensitive regular expression to replace Microsoft with W3Schools in a string:\nREMOVE ADS\nRegular Expression Modifiers\nModifiers can change how a search is performed.\nRegular Expression Patterns\nBrackets are used to find a range of characters:\nMetacharacters\nMetacharacters are characters with a special meaning:\nQuantifiers\nQuantifiers define quantities:\nNote: If your expression needs to search for one of the special characters you can use a backslash ( \\ ) to escape them. For example, to search for one or more question marks you can use the following expression: $pattern = '/\\?+/';\nGrouping\nYou can use parentheses ( ) to apply quantifiers to entire patterns. They also can be used to select parts of the pattern to be used as a match.\nExample\nUse grouping to search for the word \"banana\" by looking for ba followed by two instances of na:\nComplete RegExp Reference\nFor a complete reference, go to our Complete PHP Regular Expression Reference.\nThe reference contains descriptions and examples of all Regular Expression functions.",
      "examples": [
        "$str = \"Visit W3Schools\"; $pattern = \"/w3schools/i\"; echo preg_match($pattern, $str);",
        "$str = \"The rain in SPAIN falls mainly on the plains.\"; $pattern = \"/ain/i\"; echo preg_match_all($pattern, $str);",
        "$str = \"Visit Microsoft!\"; $pattern = \"/microsoft/i\"; echo preg_replace($pattern, \"W3Schools\", $str);",
        "$str = \"Apples and bananas.\"; $pattern = \"/ba(na){2}/i\"; echo preg_match($pattern, $str);",
        "$exp = \"/w3schools/i\";",
        "/",
        "i",
        "preg_match()",
        "preg_match_all()",
        "preg_replace()",
        "( )"
      ]
    },
    {
      "title": "PHP Form Handling",
      "summary": "The PHP superglobals $_GET and $_POST are used to collect form-data.\nPHP - A Simple HTML Form\nThe example below displays a simple HTML form with two input fields and a submit button:\nExampleGet your own PHP Server\nWhen the user fills out the form above and clicks the submit button, the form data is sent for processing to a PHP file named \"welcome.php\". The form data is sent with the HTTP POST method.\nTo display the submitted data you could simply echo all the variables.\nThe \"welcome.php\" looks like this:\nThe output could be something like this:\nThe same result could also be achieved using the HTTP GET method:\nExample\nSame example, but the method is set to GET instead of POST:\nand \"welcome_get.php\" looks like this:\nThe code above is quite simple, and it does not include any validation.\nYou need to validate form data to protect your script from malicious code.\nThink SECURITY when processing PHP forms!\nThis page does not contain any form validation, it just shows how you can send and retrieve form data.\nHowever, the next pages will show how to process PHP forms with security in mind! Proper validation of form data is important to protect your form from hackers and spammers!\nREMOVE ADS\nGET vs. POST\nBoth GET and POST create an array (e.g. array( key1 => value1, key2 => value2, key3 => value3, ...)). This array holds key/value pairs, where keys are the names of the form controls and values are the input data from the user.\nBoth GET and POST are treated as $_GET and $_POST. These are superglobals, which means that they are always accessible, regardless of scope - and you can access them from any function, class or file without having to do anything special.\n$_GET is an array of variables passed to the current script via the URL parameters.\n$_POST is an array of variables passed to the current script via the HTTP POST method.\nWhen to use GET?\nInformation sent from a form with the GET method is visible to everyone (all variable names and values are displayed in the URL). GET also has limits on the amount of information to send. The limitation is about 2000 characters. However, because the variables are displayed in the URL, it is possible to bookmark the page. This can be useful in some cases.\nGET may be used for sending non-sensitive data.\nNote: GET should NEVER be used for sending passwords or other sensitive information!\nWhen to use POST?\nInformation sent from a form with the POST method is invisible to others (all names/values are embedded within the body of the HTTP request) and has no limits on the amount of information to send.\nMoreover POST supports advanced functionality such as support for multi-part binary input while uploading files to server.\nHowever, because the variables are not displayed in the URL, it is not possible to bookmark the page.\nDevelopers prefer POST for sending form data.\nNext, lets see how we can process PHP forms the secure way!",
      "examples": [
        "<html> <body> <form action=\"welcome.php\" method=\"POST\"> Name: <input type=\"text\" name=\"name\"><br> E-mail: <input type=\"text\" name=\"email\"><br> <input type=\"submit\"> </form> </body> </html>",
        "<html> <body> <form action=\"welcome_get.php\" method=\"GET\"> Name: <input type=\"text\" name=\"name\"><br> E-mail: <input type=\"text\" name=\"email\"><br> <input type=\"submit\"> </form> </body> </html>",
        "<html> <body> Welcome <?php echo $_POST[\"name\"]; ?><br> Your email address is: <?php echo $_POST[\"email\"]; ?> </body> </html>",
        "Welcome John Your email address is john.doe@example.com",
        "<html> <body> Welcome <?php echo $_GET[\"name\"]; ?><br> Your email address is: <?php echo $_GET[\"email\"]; ?> </body> </html>",
        "$_GET",
        "$_POST"
      ]
    },
    {
      "title": "PHP Form Validation",
      "summary": "This and the next chapters show how to use PHP to validate form data.\nPHP Form Validation\nThink SECURITY when processing PHP forms!\nThese pages will show how to process PHP forms with security in mind. Proper validation of form data is important to protect your form from hackers and spammers!\nThe HTML form we will be working at in these chapters, contains various input fields: required and optional text fields, radio buttons, and a submit button:\nThe validation rules for the form above are as follows:\nFirst we will look at the plain HTML code for the form:\nREMOVE ADS\nText Fields\nThe name, email, and website fields are text input elements, and the comment field is a textarea.\nThe HTML code looks like this:\nRadio Buttons\nThe gender fields are radio buttons and the HTML code looks like this:\nThe Form Element\nThe HTML code of the form looks like this:\nWhen the form is submitted, the form data is sent with method=\"post\".\nWhat is the $_SERVER[\"PHP_SELF\"] variable?\n\nThe $_SERVER[\"PHP_SELF\"] is a super global variable that returns the filename of the currently executing script.\nSo, the $_SERVER[\"PHP_SELF\"] sends the submitted form data to the page itself, instead of jumping to a different page. This way, the user will get error messages on the same page as the form.\nWhat is the htmlspecialchars() function?\n\nThe htmlspecialchars() function converts special characters into HTML entities. This means that it will replace HTML characters like < and > with &lt; and &gt;. This prevents attackers from exploiting the code by injecting HTML or Javascript code (Cross-site Scripting attacks) in forms.\nWarning!\nThe $_SERVER[\"PHP_SELF\"] variable can be used by hackers!\nIf PHP_SELF is used in your page then a user can enter a slash / and then some Cross Site Scripting (XSS) commands to execute.\nCross-site scripting (XSS) is a type of computer security vulnerability typically found in Web applications. XSS enables attackers to inject client-side script into Web pages viewed by other users.\nAssume we have the following form in a page named \"test_form.php\":\nNow, if a user enters the normal URL in the address bar like \"http://www.example.com/test_form.php\", the above code will be translated to:\nSo far, so good.\nHowever, consider that a user enters the following URL in the address bar:\nIn this case, the above code will be translated to:\nThis code adds a script tag and an alert command. And when the page loads, the JavaScript code will be executed (the user will see an alert box). This is just a simple and harmless example how the PHP_SELF variable can be exploited.\nBe aware of that any JavaScript code can be added inside the <script> tag! A hacker can redirect the user to a file on another server, and that file can hold malicious code that can alter the global variables or submit the form to another address to save the user data, for example.\nHow To Avoid $_SERVER[\"PHP_SELF\"] Exploits?\n$_SERVER[\"PHP_SELF\"] exploits can be avoided by using the htmlspecialchars() function.\nThe form code should look like this:\nThe htmlspecialchars() function converts special characters to HTML entities. Now if the user tries to exploit the PHP_SELF variable, it will result in the following output:\nThe exploit attempt fails, and no harm is done!\nValidate Form Data With PHP\nThe first thing we will do is to pass all variables through PHP's htmlspecialchars() function.\nWhen we use the htmlspecialchars() function; then if a user tries to submit the following in a text field:\n- this would not be executed, because it would be saved as HTML escaped code, like this:\nThe code is now safe to be displayed on a page or inside an e-mail.\nWe will also do two more things when the user submits the form:\nStrip unnecessary characters (extra space, tab, newline) from the user input data (with the PHP trim() function)\nRemove backslashes \\ from the user input data (with the PHP stripslashes() function)\nThe next step is to create a function that will do all the checking for us (which is much more convenient than writing the same code over and over again).\nWe will name the function test_input().\nNow, we can check each $_POST variable with the test_input() function, and the script looks like this:\nExampleGet your own PHP Server\nNotice that at the start of the script, we check whether the form has been submitted using $_SERVER[\"REQUEST_METHOD\"]. If the REQUEST_METHOD is POST, then the form has been submitted - and it should be validated. If it has not been submitted, skip the validation and display a blank form.\nHowever, in the example above, all input fields are optional. The script works fine even if the user does not enter any data.\nThe next step is to make input fields required and create error messages if needed.",
      "examples": [
        "// define variables and set to empty values $name = $email = $gender = $comment = $website = \"\"; if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") { $name = test_input($_POST[\"name\"]); $email = test_input($_POST[\"email\"]); $website = test_input($_POST[\"website\"]); $comment = test_input($_POST[\"comment\"]); $gender = test_input($_POST[\"gender\"]); } function test_input($data) { $data = trim($data); $data = stripslashes($data); $data = htmlspecialchars($data); return $data; }",
        "http://www.example.com/test_form.php/%22%3E%3Cscript%3Ealert('hacked')%3C/script%3E",
        "<script>location.href('http://www.hacked.com')</script>",
        "Name: <input type=\"text\" name=\"name\"> E-mail: <input type=\"text\" name=\"email\"> Website: <input type=\"text\" name=\"website\"> Comment: <textarea name=\"comment\" rows=\"5\" cols=\"40\"></textarea>",
        "Gender: <input type=\"radio\" name=\"gender\" value=\"female\">Female <input type=\"radio\" name=\"gender\" value=\"male\">Male <input type=\"radio\" name=\"gender\" value=\"other\">Other",
        "<form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]);?>\">",
        "<form method=\"post\" action=\"<?php echo $_SERVER[\"PHP_SELF\"];?>\">",
        "<form method=\"post\" action=\"test_form.php\">",
        "<form method=\"post\" action=\"test_form.php/\"><script>alert('hacked')</script>",
        "<form method=\"post\" action=\"test_form.php/&quot;&gt;&lt;script&gt;alert('hacked')&lt;/script&gt;\">",
        "&lt;script&gt;location.href('http://www.hacked.com')&lt;/script&gt;",
        "$_SERVER[\"PHP_SELF\"]",
        "htmlspecialchars()",
        "<",
        ">",
        "&lt;",
        "&gt;",
        "/",
        "trim()",
        "\\",
        "stripslashes()",
        "test_input()",
        "$_POST",
        "$_SERVER[\"REQUEST_METHOD\"]",
        "REQUEST_METHOD",
        "POST"
      ]
    },
    {
      "title": "PHP Forms - Required Fields",
      "summary": "This chapter shows how to make input fields required and create error messages if needed.\nPHP - Required Fields\nFrom the validation rules table on the previous page, we see that the \"Name\", \"E-mail\", and \"Gender\" fields are required. These fields cannot be empty and must be filled out in the HTML form.\nIn the previous chapter, all input fields were optional.\nIn the following code we have added some new variables: $nameErr, $emailErr, $genderErr, and $websiteErr. These error variables will hold error messages for the required fields. We have also added an if else statement for each $_POST variable. This checks if the $_POST variable is empty (with the PHP empty() function). If it is empty, an error message is stored in the different error variables, and if it is not empty, it sends the user input data through the test_input() function:\nREMOVE ADS\nPHP - Display The Error Messages\nThen in the HTML form, we add a little script after each required field, which generates the correct error message if needed (that is if the user tries to submit the form without filling out the required fields):\nExampleGet your own PHP Server\nThe next step is to validate the input data, that is \"Does the Name field contain only letters and whitespace?\", and \"Does the E-mail field contain a valid e-mail address syntax?\", and if filled out, \"Does the Website field contain a valid URL?\".",
      "examples": [
        "<form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]);?>\"> Name: <input type=\"text\" name=\"name\"> <span class=\"error\">* <?php echo $nameErr;?></span> <br><br> E-mail: <input type=\"text\" name=\"email\"> <span class=\"error\">* <?php echo $emailErr;?></span> <br><br> Website: <input type=\"text\" name=\"website\"> <span class=\"error\"><?php echo $websiteErr;?></span> <br><br> Comment: <textarea name=\"comment\" rows=\"5\" cols=\"40\"></textarea> <br><br> Gender: <input type=\"radio\" name=\"gender\" value=\"female\">Female <input type=\"radio\" name=\"gender\" value=\"male\">Male <input type=\"radio\" name=\"gender\" value=\"other\">Other <span class=\"error\">* <?php echo $genderErr;?></span> <br><br> <input type=\"submit\" name=\"submit\" value=\"Submit\"> </form>",
        "// define variables and set to empty values $nameErr = $emailErr = $genderErr = $websiteErr = \"\"; $name = $email = $gender = $comment = $website = \"\"; if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") { if (empty($_POST[\"name\"])) { $nameErr = \"Name is required\"; } else { $name = test_input($_POST[\"name\"]); } if (empty($_POST[\"email\"])) { $emailErr = \"Email is required\"; } else { $email = test_input($_POST[\"email\"]); } if (empty($_POST[\"website\"])) { $website = \"\"; } else { $website = test_input($_POST[\"website\"]); } if (empty($_POST[\"comment\"])) { $comment = \"\"; } else { $comment = test_input($_POST[\"comment\"]); } if (empty($_POST[\"gender\"])) { $genderErr = \"Gender is required\"; } else { $gender = test_input($_POST[\"gender\"]); } }",
        "$nameErr",
        "$emailErr",
        "$genderErr",
        "$websiteErr",
        "if else",
        "$_POST",
        "empty()",
        "test_input()"
      ]
    },
    {
      "title": "PHP Forms - Validate E-mail and URL",
      "summary": "This chapter shows how to validate names, e-mails, and URLs.\nPHP - Validate Name\nThe code below shows a simple way to check if the name field only contains letters, dashes, apostrophes and whitespaces. If the value of the name field is not valid, then store an error message:\nThe preg_match() function searches a string for pattern, returning true if the pattern exists, and false otherwise.\nPHP - Validate E-mail\nThe easiest and safest way to check whether an email address is well-formed is to use PHP's filter_var() function.\nIn the code below, if the e-mail address is not well-formed, then store an error message:\nPHP - Validate URL\nThe code below shows a way to check if a URL address syntax is valid (this regular expression also allows dashes in the URL). If the URL address syntax is not valid, then store an error message:\nREMOVE ADS\nPHP - Validate Name, E-mail, and URL\nNow, the script looks like this:\nExampleGet your own PHP Server\nThe next step is to show how to prevent the form from emptying all the input fields when the user submits the form.",
      "examples": [
        "// define variables and set to empty values $nameErr = $emailErr = $genderErr = $websiteErr = \"\"; $name = $email = $gender = $comment = $website = \"\"; if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") { if (empty($_POST[\"name\"])) { $nameErr = \"Name is required\"; } else { $name = test_input($_POST[\"name\"]); // check if name only contains letters and whitespace if (!preg_match(\"/^[a-zA-Z-' ]*$/\",$name)) { $nameErr = \"Only letters and white space allowed\"; } } if (empty($_POST[\"email\"])) { $emailErr = \"Email is required\"; } else { $email = test_input($_POST[\"email\"]); // check if e-mail address is well-formed if (!filter_var($email, FILTER_VALIDATE_EMAIL)) { $emailErr = \"Invalid email format\"; } } if (empty($_POST[\"website\"])) { $website = \"\"; } else { $website = test_input($_POST[\"website\"]); // check if URL address syntax is valid (this regular expression also allows dashes in the URL) if (!preg_match(\"/\\b(?:(?:https?|ftp):\\/\\/|www\\.)[-a-z0-9+&@#\\/%?=~_|!:,.;]*[-a-z0-9+&@#\\/%=~_|]/i\",$website)) { $websiteErr = \"Invalid URL\"; } } if (empty($_POST[\"comment\"])) { $comment = \"\"; } else { $comment = test_input($_POST[\"comment\"]); } if (empty($_POST[\"gender\"])) { $genderErr = \"Gender is required\"; } else { $gender = test_input($_POST[\"gender\"]); } }",
        "$name = test_input($_POST[\"name\"]); if (!preg_match(\"/^[a-zA-Z-' ]*$/\",$name)) { $nameErr = \"Only letters and white space allowed\"; }",
        "$email = test_input($_POST[\"email\"]); if (!filter_var($email, FILTER_VALIDATE_EMAIL)) { $emailErr = \"Invalid email format\"; }",
        "$website = test_input($_POST[\"website\"]); if (!preg_match(\"/\\b(?:(?:https?|ftp):\\/\\/|www\\.)[-a-z0-9+&@#\\/%?=~_|!:,.;]*[-a-z0-9+&@#\\/%=~_|]/i\",$website)) { $websiteErr = \"Invalid URL\"; }",
        "preg_match()",
        "filter_var()"
      ]
    },
    {
      "title": "PHP Complete Form Example",
      "summary": "This chapter shows how to keep the values in the input fields when the user hits the submit button.\nPHP - Keep The Values in The Form\nTo show the values in the input fields after the user hits the submit button, we add a little PHP script inside the value attribute of the following input fields: name, email, and website. In the comment textarea field, we put the script between the <textarea> and </textarea> tags. The little script outputs the value of the $name, $email, $website, and $comment variables.\nThen, we also need to show which radio button that was checked. For this, we must manipulate the checked attribute (not the value attribute for radio buttons):\nREMOVE ADS\nPHP - Complete Form Example\nHere is the complete code for the PHP Form Validation Example:\nExampleGet your own PHP Server",
      "examples": [
        "Name: <input type=\"text\" name=\"name\" value=\"<?php echo $name;?>\"> E-mail: <input type=\"text\" name=\"email\" value=\"<?php echo $email;?>\"> Website: <input type=\"text\" name=\"website\" value=\"<?php echo $website;?>\"> Comment: <textarea name=\"comment\" rows=\"5\" cols=\"40\"><?php echo $comment;?></textarea> Gender: <input type=\"radio\" name=\"gender\" <?php if (isset($gender) && $gender==\"female\") echo \"checked\";?> value=\"female\">Female <input type=\"radio\" name=\"gender\" <?php if (isset($gender) && $gender==\"male\") echo \"checked\";?> value=\"male\">Male <input type=\"radio\" name=\"gender\" <?php if (isset($gender) && $gender==\"other\") echo \"checked\";?> value=\"other\">Other",
        "<textarea>",
        "</textarea>",
        "$name",
        "$email",
        "$website",
        "$comment"
      ]
    },
    {
      "title": "PHP Date and Time",
      "summary": "The PHP date() function is used to format a date and/or a time.\nThe PHP Date() Function\nThe PHP date() function formats a timestamp to a more readable date and time.\nSyntax\nA timestamp is a sequence of characters, denoting the date and/or time at which a certain event occurred.\nGet a Date\nThe required format parameter of the date() function specifies how to format the date (or time).\nHere are some characters that are commonly used for dates:\nd - Represents the day of the month (01 to 31)\nm - Represents a month (01 to 12)\nY - Represents a year (in four digits)\nl (lowercase 'L') - Represents the day of the week\nOther characters, like\"/\", \".\", or \"-\" can also be inserted between the characters to add additional formatting.\nThe example below formats today's date in three different ways:\nExampleGet your own PHP Server\nREMOVE ADS\nPHP Tip - Automatic Copyright Year\nUse the date() function to automatically update the copyright year on your website:\nExample\nGet a Time\nHere are some characters that are commonly used for times:\nH - 24-hour format of an hour (00 to 23)\nh - 12-hour format of an hour with leading zeros (01 to 12)\ni - Minutes with leading zeros (00 to 59)\ns - Seconds with leading zeros (00 to 59)\na - Lowercase Ante meridiem and Post meridiem (am or pm)\nThe example below outputs the current time in the specified format:\nExample\nNote that the PHP date() function will return the current date/time of the server!\nGet Your Time Zone\nIf the time you got back from the code is not correct, it's probably because your server is in another country or set up for a different timezone.\nSo, if you need the time to be correct according to a specific location, you can set the timezone you want to use.\nThe example below sets the timezone to \"America/New_York\", then outputs the current time in the specified format:\nExample\nCreate a Date With mktime()\nThe optional timestamp parameter in the date() function specifies a timestamp. If omitted, the current date and time will be used (as in the examples above).\nThe PHP mktime() function returns the Unix timestamp for a date. The Unix timestamp contains the number of seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time specified.\nSyntax\nThe example below creates a date and time with the date() function from a number of parameters in the mktime() function:\nExample\nCreate a Date From a String With strtotime()\nThe PHP strtotime() function is used to convert a human readable date string into a Unix timestamp (the number of seconds since January 1 1970 00:00:00 GMT).\nSyntax\nThe example below creates a date and time from the strtotime() function:\nExample\nPHP is quite clever about converting a string to a date, so you can put in various values:\nExample\nHowever, strtotime() is not perfect, so remember to check the strings you put in there.\nMore Date Examples\nThe example below outputs the dates for the next six Saturdays:\nExample\nThe example below outputs the number of days until 4th of July:\nExample\nComplete PHP Date Reference\nFor a complete reference of all date functions, go to our complete PHP Date Reference.\nThe reference contains a brief description, and examples of use, for each function!",
      "examples": [
        "date(format,timestamp)",
        "<?php\necho \"Today is \" . date(\"Y/m/d\") . \"<br>\";\necho \"Today is \" . date(\"Y.m.d\") . \"<br>\";\necho \"Today is \" . date(\"Y-m-d\") . \"<br>\";\necho \"Today is \" . date(\"l\");\n?>",
        "&copy; 2010-<?php echo date(\"Y\");?>",
        "<?php\necho \"The time is \" . date(\"h:i:sa\");\n?>",
        "<?php\ndate_default_timezone_set(\"America/New_York\");\necho \"The time is \" . date(\"h:i:sa\");\n?>",
        "mktime(hour, minute, second, month, day, year)",
        "<?php\n$d=mktime(11, 14, 54, 8, 12, 2014);\necho \"Created date is \" . date(\"Y-m-d h:i:sa\", $d);\n?>",
        "strtotime(time, now)",
        "<?php\n$d=strtotime(\"10:30pm April 15 2014\");\necho \"Created date is \" . date(\"Y-m-d h:i:sa\", $d);\n?>",
        "<?php\n$d=strtotime(\"tomorrow\");\necho date(\"Y-m-d h:i:sa\", $d) . \"<br>\";\n\n$d=strtotime(\"next Saturday\");\necho date(\"Y-m-d h:i:sa\", $d) . \"<br>\";\n\n$d=strtotime(\"+3 Months\");\necho date(\"Y-m-d h:i:sa\", $d) . \"<br>\";\n?>",
        "<?php\n$startdate = strtotime(\"Saturday\");\n$enddate = strtotime(\"+6 weeks\", $startdate);\n\nwhile ($startdate < $enddate) {\necho date(\"M d\", $startdate) . \"<br>\";\n$startdate = strtotime(\"+1 week\", $startdate);\n}\n?>",
        "<?php\n$d1=strtotime(\"July 04\");\n$d2=ceil(($d1-time())/60/60/24);\necho \"There are \" . $d2 .\" days until 4th of July.\";\n?>",
        "date()",
        "mktime()",
        "strtotime()"
      ]
    },
    {
      "title": "PHP Include Files",
      "summary": "The include (or require) statement takes all the text/code/markup that exists in the specified file and copies it into the file that uses the include statement.\nIncluding files is very useful when you want to include the same PHP, HTML, or text on multiple pages of a website.\nPHP include and require Statements\nIt is possible to insert the content of one PHP file into another PHP file (before the server executes it), with the include or require statement.\nThe include and require statements are identical, except upon failure:\nrequire will produce a fatal error (E_COMPILE_ERROR) and stop the script\ninclude will only produce a warning (E_WARNING) and the script will continue\nSo, if you want the execution to go on and show users the output, even if the include file is missing, use the include statement. Otherwise, in case of FrameWork, CMS, or a complex PHP application coding, always use the require statement to include a key file to the flow of execution. This will help avoid compromising your application's security and integrity, just in-case one key file is accidentally missing.\nIncluding files saves a lot of work. This means that you can create a standard header, footer, or menu file for all your web pages. Then, when the header needs to be updated, you can only update the header include file.\nSyntax\nPHP include Examples\nExample 1\nAssume we have a standard footer file called \"footer.php\", that looks like this:\nTo include the footer file in a page, use the include statement:\nExampleGet your own PHP Server\nREMOVE ADS\nExample 2\nAssume we have a standard menu file called \"menu.php\":\nAll pages in the Web site should use this menu file. Here is how it can be done (we are using a <div> element so that the menu easily can be styled with CSS later):\nExample\nExample 3\nAssume we have a file called \"vars.php\", with some variables defined:\nThen, if we include the \"vars.php\" file, the variables can be used in the calling file:\nExample\nPHP include vs. require\nThe require statement is also used to include a file into the PHP code.\nHowever, there is one big difference between include and require; when a file is included with the include statement and PHP cannot find it, the script will continue to execute:\nExample\nIf we do the same example using the require statement, the echo statement will not be executed because the script execution dies after the require statement returned a fatal error:\nExample\nUse require when the file is required by the application.\nUse include when the file is not required and application should continue when file is not found.",
      "examples": [
        "include 'filename';\n\nor\n\nrequire 'filename';",
        "<?php\necho \"<p>Copyright &copy; 1999-\" . date(\"Y\") . \" W3Schools.com</p>\";\n?>",
        "<html>\n<body>\n\n<h1>Welcome to my home page!</h1>\n<p>Some text.</p>\n<p>Some more text.</p>\n<?php include 'footer.php';?>\n\n</body>\n</html>",
        "<?php\necho '<a href=\"/default.asp\">Home</a> -\n<a href=\"/html/default.asp\">HTML Tutorial</a> -\n<a href=\"/css/default.asp\">CSS Tutorial</a> -\n<a href=\"/js/default.asp\">JavaScript Tutorial</a> -\n<a href=\"default.asp\">PHP Tutorial</a>';\n?>",
        "<html>\n<body>\n\n<div class=\"menu\">\n<?php include 'menu.php';?>\n</div>\n\n<h1>Welcome to my home page!</h1>\n<p>Some text.</p>\n<p>Some more text.</p>\n\n</body>\n</html>",
        "<?php\n$color='red';\n$car='BMW';\n?>",
        "<html>\n<body>\n\n<h1>Welcome to my home page!</h1>\n<?php include 'vars.php';\necho \"I have a $color $car.\";\n?>\n\n</body>\n</html>",
        "<html>\n<body>\n\n<h1>Welcome to my home page!</h1>\n<?php include 'noFileExists.php';\necho \"I have a $color $car.\";\n?>\n\n</body>\n</html>",
        "include",
        "require"
      ]
    },
    {
      "title": "PHP File Handling",
      "summary": "File handling is an important part of any web application. You often need to open and process a file for different tasks.\nPHP Manipulating Files\nPHP has several functions for creating, reading, uploading, and editing files.\nBe careful when manipulating files!\nYou can do a lot of damage if you do something wrong. Common errors are: editing the wrong file, filling a hard-drive with garbage data, and deleting the content of a file by accident.\nPHP readfile() Function\nThe readfile() function reads a file and writes it to the output buffer.\nAssume we have a text file called \"webdictionary.txt\", stored on the server, that looks like this:\nThe PHP code to read the file and write it to the output buffer is as follows (the readfile() function returns the number of bytes read on success):\nExampleGet your own PHP Server\nThe readfile() function is useful if all you want to do is open up a file and read its contents.\nThe next chapters will teach you more about file handling.",
      "examples": [
        "AJAX = Asynchronous JavaScript and XML\nCSS = Cascading Style Sheets\nHTML = Hyper Text Markup Language\nPHP = PHP Hypertext Preprocessor\nSQL = Structured Query Language\nSVG = Scalable Vector Graphics\nXML = EXtensible Markup Language",
        "<?php\necho readfile(\"webdictionary.txt\");\n?>",
        "readfile()"
      ]
    },
    {
      "title": "PHP File Open/Read/Close",
      "summary": "In this chapter we will teach you how to open, read, and close a file on the server.\nPHP Open File - fopen()\nA better method to open files is with the fopen() function. This function gives you more options than the readfile() function.\nWe will use the text file, \"webdictionary.txt\", during the lessons:\nThe first parameter of fopen() contains the name of the file to be opened and the second parameter specifies in which mode the file should be opened. The following example also generates a message if the fopen() function is unable to open the specified file:\nExampleGet your own PHP Server\nTip: The fread() and the fclose() functions will be explained below.\nThe file may be opened in one of the following modes:\nREMOVE ADS\nPHP Read File - fread()\nThe fread() function reads from an open file.\nThe first parameter of fread() contains the name of the file to read from and the second parameter specifies the maximum number of bytes to read.\nThe following PHP code reads the \"webdictionary.txt\" file to the end:\nPHP Close File - fclose()\nThe fclose() function is used to close an open file.\nIt's a good programming practice to close all files after you have finished with them. You don't want an open file running around on your server taking up resources!\nThe fclose() requires the name of the file (or a variable that holds the filename) we want to close:\nPHP Read Single Line - fgets()\nThe fgets() function is used to read a single line from a file.\nThe example below outputs the first line of the \"webdictionary.txt\" file:\nExample\nNote: After a call to the fgets() function, the file pointer has moved to the next line.\nPHP Check End-Of-File - feof()\nThe feof() function checks if the \"end-of-file\" (EOF) has been reached.\nThe feof() function is useful for looping through data of unknown length.\nThe example below reads the \"webdictionary.txt\" file line by line, until end-of-file is reached:\nExample\nPHP Read Single Character - fgetc()\nThe fgetc() function is used to read a single character from a file.\nThe example below reads the \"webdictionary.txt\" file character by character, until end-of-file is reached:\nExample\nNote: After a call to the fgetc() function, the file pointer moves to the next character.\nComplete PHP Filesystem Reference\nFor a complete reference of filesystem functions, go to our complete PHP Filesystem Reference.",
      "examples": [
        "AJAX = Asynchronous JavaScript and XML\nCSS = Cascading Style Sheets\nHTML = Hyper Text Markup Language\nPHP = PHP Hypertext Preprocessor\nSQL = Structured Query Language\nSVG = Scalable Vector Graphics\nXML = EXtensible Markup Language",
        "<?php\n$myfile = fopen(\"webdictionary.txt\", \"r\") or die(\"Unable to open file!\");\necho fread($myfile,filesize(\"webdictionary.txt\"));\nfclose($myfile);\n?>",
        "fread($myfile,filesize(\"webdictionary.txt\"));",
        "<?php\n$myfile = fopen(\"webdictionary.txt\", \"r\");\n// some code to be executed....\nfclose($myfile);\n?>",
        "<?php\n$myfile = fopen(\"webdictionary.txt\", \"r\") or die(\"Unable to open file!\");\necho fgets($myfile);\nfclose($myfile);\n?>",
        "<?php\n$myfile = fopen(\"webdictionary.txt\", \"r\") or die(\"Unable to open file!\");\n// Output one line until end-of-file\nwhile(!feof($myfile)) {\necho fgets($myfile) . \"<br>\";\n}\nfclose($myfile);\n?>",
        "<?php\n$myfile = fopen(\"webdictionary.txt\", \"r\") or die(\"Unable to open file!\");\n// Output one character until end-of-file\nwhile(!feof($myfile)) {\necho fgetc($myfile);\n}\nfclose($myfile);\n?>",
        "fopen()",
        "readfile()",
        "fread()",
        "fclose()",
        "fgets()",
        "feof()",
        "fgetc()"
      ]
    },
    {
      "title": "PHP File Create/Write",
      "summary": "In this chapter we will teach you how to create and write to a file on the server.\nPHP Create File - fopen()\nThe fopen() function is also used to create a file. Maybe a little confusing, but in PHP, a file is created using the same function used to open files.\nIf you use fopen() on a file that does not exist, it will create it, given that the file is opened for writing (w) or appending (a).\nThe example below creates a new file called \"testfile.txt\". The file will be created in the same directory where the PHP code resides:\nExampleGet your own PHP Server\nPHP File Permissions\nIf you are having errors when trying to get this code to run, check that you have granted your PHP file access to write information to the hard drive.\nPHP Write to File - fwrite()\nThe fwrite() function is used to write to a file.\nThe first parameter of fwrite() contains the name of the file to write to and the second parameter is the string to be written.\nThe example below writes a couple of names into a new file called \"newfile.txt\":\nExample\nNotice that we wrote to the file \"newfile.txt\" twice. Each time we wrote to the file we sent the string $txt that first contained \"John Doe\" and second contained \"Jane Doe\". After we finished writing, we closed the file using the fclose() function.\nIf we open the \"newfile.txt\" file it would look like this:\nREMOVE ADS\nPHP Overwriting\nNow that \"newfile.txt\" contains some data we can show what happens when we open an existing file for writing. All the existing data will be ERASED and we start with an empty file.\nIn the example below we open our existing file \"newfile.txt\", and write some new data into it:\nExample\nIf we now open the \"newfile.txt\" file, both John and Jane have vanished, and only the data we just wrote is present:\nPHP Append Text\nYou can append data to a file by using the \"a\" mode. The \"a\" mode appends text to the end of the file, while the \"w\" mode overrides (and erases) the old content of the file.\nIn the example below we open our existing file \"newfile.txt\", and append some text to it:\nExample\nIf we now open the \"newfile.txt\" file, we will see that Donald Duck and Goofy Goof is appended to the end of the file:\nComplete PHP Filesystem Reference\nFor a complete reference of filesystem functions, go to our complete PHP Filesystem Reference.",
      "examples": [
        "$myfile = fopen(\"testfile.txt\", \"w\")",
        "<?php\n$myfile = fopen(\"newfile.txt\", \"w\") or die(\"Unable to open file!\");\n$txt = \"John Doe\\n\";\nfwrite($myfile, $txt);\n$txt = \"Jane Doe\\n\";\nfwrite($myfile, $txt);\nfclose($myfile);\n?>",
        "John Doe\nJane Doe",
        "<?php\n$myfile = fopen(\"newfile.txt\", \"w\") or die(\"Unable to open file!\");\n$txt = \"Mickey Mouse\\n\";\nfwrite($myfile, $txt);\n$txt = \"Minnie Mouse\\n\";\nfwrite($myfile, $txt);\nfclose($myfile);\n?>",
        "Mickey Mouse\nMinnie Mouse",
        "<?php\n$myfile = fopen(\"newfile.txt\", \"a\") or die(\"Unable to open file!\");\n$txt = \"Donald Duck\\n\";\nfwrite($myfile, $txt);\n$txt = \"Goofy Goof\\n\";\nfwrite($myfile, $txt);\nfclose($myfile);\n?>",
        "Mickey Mouse\nMinnie Mouse\nDonald Duck\nGoofy Goof",
        "fopen()",
        "fwrite()",
        "fclose()"
      ]
    },
    {
      "title": "PHP File Upload",
      "summary": "With PHP, it is easy to upload files to the server.\nHowever, with ease comes danger, so always be careful when allowing file uploads!\nConfigure The \"php.ini\" File\nFirst, ensure that PHP is configured to allow file uploads.\nIn your \"php.ini\" file, search for the file_uploads directive, and set it to On:\nCreate The HTML Form\nNext, create an HTML form that allow users to choose the image file they want to upload:\nSome rules to follow for the HTML form above:\nMake sure that the form uses method=\"post\"\nThe form also needs the following attribute: enctype=\"multipart/form-data\". It specifies which content-type to use when submitting the form\nWithout the requirements above, the file upload will not work.\nOther things to notice:\nThe type=\"file\" attribute of the <input> tag shows the input field as a file-select control, with a \"Browse\" button next to the input control\nThe form above sends data to a file called \"upload.php\", which we will create next.\nREMOVE ADS\nCreate The Upload File PHP Script\nThe \"upload.php\" file contains the code for uploading a file:\nPHP script explained:\n$target_dir = \"uploads/\" - specifies the directory where the file is going to be placed\n$target_file specifies the path of the file to be uploaded\n$uploadOk=1 is not used yet (will be used later)\n$imageFileType holds the file extension of the file (in lower case)\nNext, check if the image file is an actual image or a fake image\nNote: You will need to create a new directory called \"uploads\" in the directory where \"upload.php\" file resides. The uploaded files will be saved there.\nCheck if File Already Exists\nNow we can add some restrictions.\nFirst, we will check if the file already exists in the \"uploads\" folder. If it does, an error message is displayed, and $uploadOk is set to 0:\nLimit File Size\nThe file input field in our HTML form above is named \"fileToUpload\".\nNow, we want to check the size of the file. If the file is larger than 500KB, an error message is displayed, and $uploadOk is set to 0:\nLimit File Type\nThe code below only allows users to upload JPG, JPEG, PNG, and GIF files. All other file types gives an error message before setting $uploadOk to 0:\nComplete Upload File PHP Script\nThe complete \"upload.php\" file now looks like this:\nComplete PHP Filesystem Reference\nFor a complete reference of filesystem functions, go to our complete PHP Filesystem Reference.",
      "examples": [
        "file_uploads = On",
        "<!DOCTYPE html>\n<html>\n<body>\n\n<form action=\"upload.php\" method=\"post\" enctype=\"multipart/form-data\">\nSelect image to upload:\n<input type=\"file\" name=\"fileToUpload\" id=\"fileToUpload\">\n<input type=\"submit\" value=\"Upload Image\" name=\"submit\">\n</form>\n\n</body>\n</html>",
        "<?php\n$target_dir = \"uploads/\";\n$target_file = $target_dir . basename($_FILES[\"fileToUpload\"][\"name\"]);\n$uploadOk = 1;\n$imageFileType = strtolower(pathinfo($target_file,PATHINFO_EXTENSION));\n// Check if image file is a actual image or fake image\nif(isset($_POST[\"submit\"])) {\n$check = getimagesize($_FILES[\"fileToUpload\"][\"tmp_name\"]);\nif($check !== false) {\necho \"File is an image - \" . $check[\"mime\"] . \".\";\n$uploadOk = 1;\n} else {\necho \"File is not an image.\";\n$uploadOk = 0;\n}\n}\n?>",
        "// Check if file already exists\nif (file_exists($target_file)) {\necho \"Sorry, file already exists.\";\n$uploadOk = 0;\n}",
        "// Check file size\nif ($_FILES[\"fileToUpload\"][\"size\"] > 500000) {\necho \"Sorry, your file is too large.\";\n$uploadOk = 0;\n}",
        "// Allow certain file formats\nif($imageFileType != \"jpg\" && $imageFileType != \"png\" && $imageFileType != \"jpeg\"\n&& $imageFileType != \"gif\" ) {\necho \"Sorry, only JPG, JPEG, PNG & GIF files are allowed.\";\n$uploadOk = 0;\n}",
        "<?php\n$target_dir = \"uploads/\";\n$target_file = $target_dir . basename($_FILES[\"fileToUpload\"][\"name\"]);\n$uploadOk = 1;\n$imageFileType = strtolower(pathinfo($target_file,PATHINFO_EXTENSION));\n\n// Check if image file is a actual image or fake image\nif(isset($_POST[\"submit\"])) {\n$check = getimagesize($_FILES[\"fileToUpload\"][\"tmp_name\"]);\nif($check !== false) {\necho \"File is an image - \" . $check[\"mime\"] . \".\";\n$uploadOk = 1;\n} else {\necho \"File is not an image.\";\n$uploadOk = 0;\n}\n}\n\n// Check if file already exists\nif (file_exists($target_file)) {\necho \"Sorry, file already exists.\";\n$uploadOk = 0;\n}\n\n// Check file size\nif ($_FILES[\"fileToUpload\"][\"size\"] > 500000) {\necho \"Sorry, your file is too large.\";\n$uploadOk = 0;\n}\n\n// Allow certain file formats\nif($imageFileType != \"jpg\" && $imageFileType != \"png\" && $imageFileType != \"jpeg\"\n&& $imageFileType != \"gif\" ) {\necho \"Sorry, only JPG, JPEG, PNG & GIF files are allowed.\";\n$uploadOk = 0;\n}\n\n// Check if $uploadOk is set to 0 by an error\nif ($uploadOk == 0) {\necho \"Sorry, your file was not uploaded.\";\n// if everything is ok, try to upload file\n} else {\nif (move_uploaded_file($_FILES[\"fileToUpload\"][\"tmp_name\"], $target_file)) {\necho \"The file \". htmlspecialchars( basename( $_FILES[\"fileToUpload\"][\"name\"])). \" has been uploaded.\";\n} else {\necho \"Sorry, there was an error uploading your file.\";\n}\n}\n?>",
        "file_uploads"
      ]
    },
    {
      "title": "PHP Cookies",
      "summary": "What is a Cookie?\nA cookie is often used to identify a user. A cookie is a small file that the server embeds on the user's computer. Each time the same computer requests a page with a browser, it will send the cookie too. With PHP, you can both create and retrieve cookie values.\nCreate Cookies With PHP\nA cookie is created with the setcookie() function.\nSyntax\nOnly the name parameter is required. All other parameters are optional.\nPHP Create/Retrieve a Cookie\nThe following example creates a cookie named \"user\" with the value \"John Doe\". The cookie will expire after 30 days (86400 * 30). The \"/\" means that the cookie is available in entire website (otherwise, select the directory you prefer).\nWe then retrieve the value of the cookie \"user\" (using the global variable $_COOKIE). We also use the isset() function to find out if the cookie is set:\nExampleGet your own PHP Server\nNote: The setcookie() function must appear BEFORE the <html> tag.\nNote: The value of the cookie is automatically URLencoded when sending the cookie, and automatically decoded when received (to prevent URLencoding, use setrawcookie() instead).\nREMOVE ADS\nModify a Cookie Value\nTo modify a cookie, just set (again) the cookie using the setcookie() function:\nExample\nDelete a Cookie\nTo delete a cookie, use the setcookie() function with an expiration date in the past:\nExample\nCheck if Cookies are Enabled\nThe following example creates a small script that checks whether cookies are enabled. First, try to create a test cookie with the setcookie() function, then count the $_COOKIE array variable:\nExample\nComplete PHP Network Reference\nFor a complete reference of Network functions, go to our complete PHP Network Reference.",
      "examples": [
        "setcookie(name, value, expire, path, domain, secure, httponly);",
        "<?php\n$cookie_name = \"user\";\n$cookie_value = \"John Doe\";\nsetcookie($cookie_name, $cookie_value, time() + (86400 * 30), \"/\"); // 86400 = 1 day\n?>\n<html>\n<body>\n\n<?php\nif(!isset($_COOKIE[$cookie_name])) {\necho \"Cookie named '\" . $cookie_name . \"' is not set!\";\n} else {\necho \"Cookie '\" . $cookie_name . \"' is set!<br>\";\necho \"Value is: \" . $_COOKIE[$cookie_name];\n}\n?>\n\n</body>\n</html>",
        "<?php\n$cookie_name = \"user\";\n$cookie_value = \"Alex Porter\";\nsetcookie($cookie_name, $cookie_value, time() + (86400 * 30), \"/\");\n?>\n<html>\n<body>\n\n<?php\nif(!isset($_COOKIE[$cookie_name])) {\necho \"Cookie named '\" . $cookie_name . \"' is not set!\";\n} else {\necho \"Cookie '\" . $cookie_name . \"' is set!<br>\";\necho \"Value is: \" . $_COOKIE[$cookie_name];\n}\n?>\n\n</body>\n</html>",
        "<?php\n// set the expiration date to one hour ago\nsetcookie(\"user\", \"\", time() - 3600);\n?>\n<html>\n<body>\n\n<?php\necho \"Cookie 'user' is deleted.\";\n?>\n\n</body>\n</html>",
        "<?php\nsetcookie(\"test_cookie\", \"test\", time() + 3600, '/');\n?>\n<html>\n<body>\n\n<?php\nif(count($_COOKIE) > 0) {\necho \"Cookies are enabled.\";\n} else {\necho \"Cookies are disabled.\";\n}\n?>\n\n</body>\n</html>",
        "setcookie()",
        "isset()",
        "setrawcookie()"
      ]
    },
    {
      "title": "PHP Sessions",
      "summary": "A session is a way to store information (in variables) to be used across multiple pages.\nUnlike a cookie, the information is not stored on the users computer.\nWhat is a PHP Session?\nWhen you work with an application, you open it, do some changes, and then you close it. This is much like a Session. The computer knows who you are. It knows when you start the application and when you end. But on the internet there is one problem: the web server does not know who you are or what you do, because the HTTP address doesn't maintain state.\nSession variables solve this problem by storing user information to be used across multiple pages (e.g. username, favorite color, etc). By default, session variables last until the user closes the browser.\nSo; Session variables hold information about one single user, and are available to all pages in one application.\nTip: If you need a permanent storage, you may want to store the data in a database.\nStart a PHP Session\nA session is started with the session_start() function.\nSession variables are set with the PHP global variable: $_SESSION.\nNow, let's create a new page called \"demo_session1.php\". In this page, we start a new PHP session and set some session variables:\nExampleGet your own PHP Server\nNote: The session_start() function must be the very first thing in your document. Before any HTML tags.\nREMOVE ADS\nGet PHP Session Variable Values\nNext, we create another page called \"demo_session2.php\". From this page, we will access the session information we set on the first page (\"demo_session1.php\").\nNotice that session variables are not passed individually to each new page, instead they are retrieved from the session we open at the beginning of each page (session_start()).\nAlso notice that all session variable values are stored in the global $_SESSION variable:\nExample\nAnother way to show all the session variable values for a user session is to run the following code:\nExample\nHow does it work? How does it know it's me?\n\nMost sessions set a user-key on the user's computer that looks something like this: 765487cf34ert8dede5a562e4f3a7e12. Then, when a session is opened on another page, it scans the computer for a user-key. If there is a match, it accesses that session, if not, it starts a new session.\nModify a PHP Session Variable\nTo change a session variable, just overwrite it:\nExample\nDestroy a PHP Session\nTo remove all global session variables and destroy the session, use session_unset() and session_destroy():\nExample",
      "examples": [
        "<?php\n// Start the session\nsession_start();\n?>\n<!DOCTYPE html>\n<html>\n<body>\n\n<?php\n// Set session variables\n$_SESSION[\"favcolor\"] = \"green\";\n$_SESSION[\"favanimal\"] = \"cat\";\necho \"Session variables are set.\";\n?>\n\n</body>\n</html>",
        "<?php\nsession_start();\n?>\n<!DOCTYPE html>\n<html>\n<body>\n\n<?php\n// Echo session variables that were set on previous page\necho \"Favorite color is \" . $_SESSION[\"favcolor\"] . \".<br>\";\necho \"Favorite animal is \" . $_SESSION[\"favanimal\"] . \".\";\n?>\n\n</body>\n</html>",
        "<?php\nsession_start();\n?>\n<!DOCTYPE html>\n<html>\n<body>\n\n<?php\nprint_r($_SESSION);\n?>\n\n</body>\n</html>",
        "<?php\nsession_start();\n?>\n<!DOCTYPE html>\n<html>\n<body>\n\n<?php\n// to change a session variable, just overwrite it\n$_SESSION[\"favcolor\"] = \"yellow\";\nprint_r($_SESSION);\n?>\n\n</body>\n</html>",
        "<?php\nsession_start();\n?>\n<!DOCTYPE html>\n<html>\n<body>\n\n<?php\n// remove all session variables\nsession_unset();\n\n// destroy the session\nsession_destroy();\n?>\n\n</body>\n</html>",
        "session_start()",
        "session_unset()",
        "session_destroy()"
      ]
    },
    {
      "title": "PHP Filters",
      "summary": "Validating data = Determine if the data is in proper form.\nSanitizing data = Remove any illegal character from the data.\nThe PHP Filter Extension\nPHP filters are used to validate and sanitize external input.\nThe PHP filter extension has many of the functions needed for checking user input, and is designed to make data validation easier and quicker.\nThe filter_list() function can be used to list what the PHP filter extension offers:\nExampleGet your own PHP Server\nWhy Use PHP Filters?\nMany web applications receive external input. External input/data can be:\nUser input from a form\nCookies\nWeb services data\nServer variables\nDatabase query results\nYou should always validate external data!\nInvalid submitted data can lead to security problems and break your webpage!\nBy using PHP filters you can be sure your application gets the correct input!\nREMOVE ADS\nPHP filter_var() Function\nThe filter_var() function both validate and sanitize data.\nThe filter_var() function filters a single variable with a specified filter. It takes two pieces of data:\nThe variable you want to check\nThe type of check to use\nSanitize a String\nThe following example uses the filter_var() function to remove all HTML tags from a string:\nExample\nValidate an Integer\nThe following example uses the filter_var() function to check if the variable $int is an integer. If $int is an integer, the output of the code below will be: \"Integer is valid\". If $int is not an integer, the output will be: \"Integer is not valid\":\nExample\nTip: filter_var() and Problem With 0\nIn the example above, if $int was set to 0, the function above will return \"Integer is not valid\". To solve this problem, use the code below:\nExample\nValidate an IP Address\nThe following example uses the filter_var() function to check if the variable $ip is a valid IP address:\nExample\nSanitize and Validate an Email Address\nThe following example uses the filter_var() function to first remove all illegal characters from the $email variable, then check if it is a valid email address:\nExample\nSanitize and Validate a URL\nThe following example uses the filter_var() function to first remove all illegal characters from a URL, then check if $url is a valid URL:\nExample\nComplete PHP Filter Reference\nFor a complete reference of all filter functions, go to our complete PHP Filter Reference. Check each filter to see what options and flags are available.\nThe reference contains a brief description, and examples of use, for each function!",
      "examples": [
        "<table>\n<tr>\n<td>Filter Name</td>\n<td>Filter ID</td>\n</tr>\n<?php\nforeach (filter_list() as $id =>$filter) {\necho '<tr><td>' . $filter . '</td><td>' . filter_id($filter) . '</td></tr>';\n}\n?>\n</table>",
        "<?php\n$str = \"<h1>Hello World!</h1>\";\n$newstr = filter_var($str, FILTER_SANITIZE_STRING);\necho $newstr;\n?>",
        "<?php\n$int = 100;\n\nif (!filter_var($int, FILTER_VALIDATE_INT) === false) {\necho(\"Integer is valid\");\n} else {\necho(\"Integer is not valid\");\n}\n?>",
        "<?php\n$int = 0;\n\nif (filter_var($int, FILTER_VALIDATE_INT) === 0 || !filter_var($int, FILTER_VALIDATE_INT) === false) {\necho(\"Integer is valid\");\n} else {\necho(\"Integer is not valid\");\n}\n?>",
        "<?php\n$ip = \"127.0.0.1\";\n\nif (!filter_var($ip, FILTER_VALIDATE_IP) === false) {\necho(\"$ip is a valid IP address\");\n} else {\necho(\"$ip is not a valid IP address\");\n}\n?>",
        "<?php\n$email = \"john.doe@example.com\";\n\n// Remove all illegal characters from email\n$email = filter_var($email, FILTER_SANITIZE_EMAIL);\n\n// Validate e-mail\nif (!filter_var($email, FILTER_VALIDATE_EMAIL) === false) {\necho(\"$email is a valid email address\");\n} else {\necho(\"$email is not a valid email address\");\n}\n?>",
        "<?php\n$url = \"https://www.w3schools.com\";\n\n// Remove all illegal characters from a url\n$url = filter_var($url, FILTER_SANITIZE_URL);\n\n// Validate url\nif (!filter_var($url, FILTER_VALIDATE_URL) === false) {\necho(\"$url is a valid URL\");\n} else {\necho(\"$url is not a valid URL\");\n}\n?>",
        "filter_list()",
        "filter_var()"
      ]
    },
    {
      "title": "PHP Filters Advanced",
      "summary": "Validate an Integer Within a Range\nThe following example uses the filter_var() function to check if a variable is both of type INT, and between 1 and 200:\nExampleGet your own PHP Server\nValidate IPv6 Address\nThe following example uses the filter_var() function to check if the variable $ip is a valid IPv6 address:\nExample\nREMOVE ADS\nValidate URL - Must Contain QueryString\nThe following example uses the filter_var() function to check if the variable $url is a URL with a querystring:\nExample\nRemove Characters With ASCII Value > 127\nThe following example uses the filter_var() function to sanitize a string. It will both remove all HTML tags, and all characters with ASCII value > 127, from the string:\nExample\nComplete PHP Filter Reference\nFor a complete reference of all filter functions, go to our complete PHP Filter Reference. Check each filter to see what options and flags are available.\nThe reference contains a brief description, and examples of use, for each function!",
      "examples": [
        "<?php\n$int = 122;\n$min = 1;\n$max = 200;\n\nif (filter_var($int, FILTER_VALIDATE_INT, array(\"options\" => array(\"min_range\"=>$min, \"max_range\"=>$max))) === false) {\necho(\"Variable value is not within the legal range\");\n} else {\necho(\"Variable value is within the legal range\");\n}\n?>",
        "<?php\n$ip = \"2001:0db8:85a3:08d3:1319:8a2e:0370:7334\";\n\nif (!filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6) === false) {\necho(\"$ip is a valid IPv6 address\");\n} else {\necho(\"$ip is not a valid IPv6 address\");\n}\n?>",
        "<?php\n$url = \"https://www.w3schools.com\";\n\nif (!filter_var($url, FILTER_VALIDATE_URL, FILTER_FLAG_QUERY_REQUIRED) === false) {\necho(\"$url is a valid URL with a query string\");\n} else {\necho(\"$url is not a valid URL with a query string\");\n}\n?>",
        "<?php\n$str = \"<h1>Hello WorldÃÃÃ!</h1>\";\n\n$newstr = filter_var($str, FILTER_SANITIZE_STRING, FILTER_FLAG_STRIP_HIGH);\necho $newstr;\n?>",
        "filter_var()"
      ]
    },
    {
      "title": "PHP Callback Functions",
      "summary": "Callback Functions\nA callback function (often referred to as just \"callback\") is a function which is passed as an argument into another function.\nAny existing function can be used as a callback function. To use a function as a callback function, pass a string containing the name of the function as the argument of another function:\nExampleGet your own PHP Server\nPass a callback to PHP's array_map() function to calculate the length of every string in an array:\nStarting with version 7, PHP can pass anonymous functions as callback functions:\nExample\nUse an anonymous function as a callback for PHP's array_map() function:\nREMOVE ADS\nCallbacks in User Defined Functions\nUser-defined functions and methods can also take callback functions as arguments. To use callback functions inside a user-defined function or method, call it by adding parentheses to the variable and pass arguments as with normal functions:\nExample\nRun a callback from a user-defined function:",
      "examples": [
        "<?php\nfunction my_callback($item) {\nreturn strlen($item);\n}\n\n$strings = [\"apple\", \"orange\", \"banana\", \"coconut\"];\n$lengths = array_map(\"my_callback\", $strings);\nprint_r($lengths);\n?>",
        "<?php\n$strings = [\"apple\", \"orange\", \"banana\", \"coconut\"];\n$lengths = array_map( function($item) { return strlen($item); } , $strings);\nprint_r($lengths);\n?>",
        "<?php\nfunction exclaim($str) {\nreturn $str . \"! \";\n}\n\nfunction ask($str) {\nreturn $str . \"? \";\n}\n\nfunction printFormatted($str, $format) {\n// Calling the $format callback function\necho $format($str);\n}\n\n// Pass \"exclaim\" and \"ask\" as callback functions to printFormatted()\nprintFormatted(\"Hello world\", \"exclaim\");\nprintFormatted(\"Hello world\", \"ask\");\n?>",
        "array_map()"
      ]
    },
    {
      "title": "PHP and JSON",
      "summary": "What is JSON?\nJSON stands for JavaScript Object Notation, and is a syntax for storing and exchanging data.\nSince the JSON format is a text-based format, it can easily be sent to and from a server, and used as a data format by any programming language.\nPHP and JSON\nPHP has some built-in functions to handle JSON.\nFirst, we will look at the following two functions:\njson_encode()\njson_decode()\nPHP - json_encode()\nThe json_encode() function is used to encode a value to JSON format.\nExampleGet your own PHP Server\nThis example shows how to encode an associative array into a JSON object:\nExample\nThis example shows how to encode an indexed array into a JSON array:\nREMOVE ADS\nPHP - json_decode()\nThe json_decode() function is used to decode a JSON object into a PHP object or an associative array.\nExample\nThis example decodes JSON data into a PHP object:\nThe json_decode() function returns an object by default. The function has a second parameter, and when set to true, JSON objects are decoded into associative arrays.\nExample\nThis example decodes JSON data into a PHP associative array:\nPHP - Accessing the Decoded Values\nHere are two examples of how to access the decoded values from an object and from an associative array:\nExample\nThis example shows how to access the values from a PHP object:\nExample\nThis example shows how to access the values from a PHP associative array:\nPHP - Looping Through the Values\nYou can also loop through the values with a foreach loop:\nExample\nThis example shows how to loop through the values of a PHP object:\nExample\nThis example shows how to loop through the values of a PHP associative array:",
      "examples": [
        "<?php\n$age = array(\"Peter\"=>35, \"Ben\"=>37, \"Joe\"=>43);\n\necho json_encode($age);\n?>",
        "<?php\n$cars = array(\"Volvo\", \"BMW\", \"Toyota\");\n\necho json_encode($cars);\n?>",
        "<?php\n$jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}';\n\nvar_dump(json_decode($jsonobj));\n?>",
        "<?php\n$jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}';\n\nvar_dump(json_decode($jsonobj, true));\n?>",
        "<?php\n$jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}';\n\n$obj = json_decode($jsonobj);\n\necho $obj->Peter;\necho $obj->Ben;\necho $obj->Joe;\n?>",
        "<?php\n$jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}';\n\n$arr = json_decode($jsonobj, true);\n\necho $arr[\"Peter\"];\necho $arr[\"Ben\"];\necho $arr[\"Joe\"];\n?>",
        "<?php\n$jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}';\n\n$obj = json_decode($jsonobj);\n\nforeach($obj as $key => $value) {\necho $key . \" => \" . $value . \"<br>\";\n}\n?>",
        "<?php\n$jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}';\n\n$arr = json_decode($jsonobj, true);\n\nforeach($arr as $key => $value) {\necho $key . \" => \" . $value . \"<br>\";\n}\n?>"
      ]
    },
    {
      "title": "PHP Exceptions",
      "summary": "What is an Exception?\nAn exception is an object that describes an error or unexpected behaviour of a PHP script.\nExceptions are thrown by many PHP functions and classes.\nUser defined functions and classes can also throw exceptions.\nExceptions are a good way to stop a function when it comes across data that it cannot use.\nThrowing an Exception\nThe throw statement allows a user defined function or method to throw an exception. When an exception is thrown, the code following it will not be executed.\nIf an exception is not caught, a fatal error will occur with an \"Uncaught Exception\" message.\nLets try to throw an exception without catching it:\nExampleGet your own PHP Server\nThe result will look something like this:\nThe try...catch Statement\nTo avoid the error from the example above, we can use the try...catch statement to catch exceptions and continue the process.\nSyntax\nExample\nShow a message when an exception is thrown:\nThe catch block indicates what type of exception should be caught and the name of the variable which can be used to access the exception. In the example above, the type of exception is Exception and the variable name is $e.\nREMOVE ADS\nThe try...catch...finally Statement\nThe try...catch...finally statement can be used to catch exceptions. Code in the finally block will always run regardless of whether an exception was caught. If finally is present, the catch block is optional.\nSyntax\nExample\nShow a message when an exception is thrown and then indicate that the process has ended:\nExample\nOutput a string even if an exception was not caught:\nThe Exception Object\nThe Exception Object contains information about the error or unexpected behaviour that the function encountered.\nSyntax\nParameter Values\nMethods\nWhen catching an exception, the following table shows some of the methods that can be used to get information about the exception:\nExample\nOutput information about an exception that was thrown:\nComplete Exception Reference\nFor a complete reference, go to our Complete PHP Exception Reference.\nThe reference contains descriptions and examples of all Exception methods.",
      "examples": [
        "<?php\nfunction divide($dividend, $divisor) {\nif($divisor == 0) {\nthrow new Exception(\"Division by zero\");\n}\nreturn $dividend / $divisor;\n}\n\necho divide(5, 0);\n?>",
        "Fatal error: Uncaught Exception: Division by zero in C:\\webfolder\\test.php:4\nStack trace: #0 C:\\webfolder\\test.php(9):\ndivide(5, 0) #1 {main} thrown in C:\\webfolder\\test.php on line 4",
        "try {\ncode that can throw exceptions\n} catch(Exception $e) {\ncode that runs when an exception is caught\n}",
        "<?php\nfunction divide($dividend, $divisor) {\nif($divisor == 0) {\nthrow new Exception(\"Division by zero\");\n}\nreturn $dividend / $divisor;\n}\n\ntry {\necho divide(5, 0);\n} catch(Exception $e) {\necho \"Unable to divide.\";\n}\n?>",
        "try {\ncode that can throw exceptions\n} catch(Exception $e) {\ncode that runs when an exception is caught\n} finally {\ncode that always runs regardless of whether an exception was caught\n}",
        "<?php\nfunction divide($dividend, $divisor) {\nif($divisor == 0) {\nthrow new Exception(\"Division by zero\");\n}\nreturn $dividend / $divisor;\n}\n\ntry {\necho divide(5, 0);\n} catch(Exception $e) {\necho \"Unable to divide. \";\n} finally {\necho \"Process complete.\";\n}\n?>",
        "<?php\nfunction divide($dividend, $divisor) {\nif($divisor == 0) {\nthrow new Exception(\"Division by zero\");\n}\nreturn $dividend / $divisor;\n}\n\ntry {\necho divide(5, 0);\n} finally {\necho \"Process complete.\";\n}\n?>",
        "new Exception(message, code, previous)",
        "<?php\nfunction divide($dividend, $divisor) {\nif($divisor == 0) {\nthrow new Exception(\"Division by zero\", 1);\n}\nreturn $dividend / $divisor;\n}\n\ntry {\necho divide(5, 0);\n} catch(Exception $ex) {\n$code = $ex->getCode();\n$message = $ex->getMessage();\n$file = $ex->getFile();\n$line = $ex->getLine();\necho \"Exception thrown in $file on line $line: [Code $code]\n$message\";\n}\n?>",
        "throw",
        "try...catch",
        "Exception",
        "$e",
        "try...catch...finally",
        "finally",
        "catch"
      ]
    },
    {
      "title": "PHP - What is OOP?",
      "summary": "From PHP5, you can also write PHP code in an object-oriented style.\nObject-Oriented programming is faster and easier to execute.\nPHP What is OOP?\nOOP stands for Object-Oriented Programming.\nProcedural programming is about writing procedures or functions that perform operations on the data, while object-oriented programming is about creating objects that contain both data and functions.\nObject-oriented programming has several advantages over procedural programming:\nOOP is faster and easier to execute\nOOP provides a clear structure for the programs\nOOP helps to keep the PHP code DRY \"Don't Repeat Yourself\", and makes the code easier to maintain, modify and debug\nOOP makes it possible to create full reusable applications with less code and shorter development time\nTip: The \"Don't Repeat Yourself\" (DRY) principle is about reducing the repetition of code. You should extract out the codes that are common for the application, and place them at a single place and reuse them instead of repeating it.\nPHP - What are Classes and Objects?\nClasses and objects are the two main aspects of object-oriented programming.\nLook at the following illustration to see the difference between class and objects:\nclass\nFruit\nobjects\nApple\nBanana\nMango\nAnother example:\nclass\nCar\nobjects\nVolvo\nAudi\nToyota\nSo, a class is a template for objects, and an object is an instance of a class.\nWhen the individual objects are created, they inherit all the properties and behaviors from the class, but each object will have different values for the properties.\nLook at the next chapters to learn more about OOP.",
      "examples": []
    },
    {
      "title": "PHP OOP - Classes and Objects",
      "summary": "A class is a template for objects, and an object is an instance of class.\nOOP Case\nLet's assume we have a class named Fruit. A Fruit can have properties like name, color, weight, etc. We can define variables like $name, $color, and $weight to hold the values of these properties.\nWhen the individual objects (apple, banana, etc.) are created, they inherit all the properties and behaviors from the class, but each object will have different values for the properties.\nDefine a Class\nA class is defined by using the class keyword, followed by the name of the class and a pair of curly braces ({}). All its properties and methods go inside the braces:\nSyntaxGet your own PHP Server\nBelow we declare a class named Fruit consisting of two properties ($name and $color) and two methods set_name() and get_name() for setting and getting the $name property:\nNote: In a class, variables are called properties and functions are called methods!\nDefine Objects\nClasses are nothing without objects! We can create multiple objects from a class. Each object has all the properties and methods defined in the class, but they will have different property values.\nObjects of a class are created using the new keyword.\nIn the example below, $apple and $banana are instances of the class Fruit:\nExample\nIn the example below, we add two more methods to class Fruit, for setting and getting the $color property:\nExample\nREMOVE ADS\nPHP - The $this Keyword\nThe $this keyword refers to the current object, and is only available inside methods.\nLook at the following example:\nExample\nSo, where can we change the value of the $name property? There are two ways:\n1. Inside the class (by adding a set_name() method and use $this):\nExample\n2. Outside the class (by directly changing the property value):\nExample\nPHP - instanceof\nYou can use the instanceof keyword to check if an object belongs to a specific class:\nExample",
      "examples": [
        "<?php\nclass Fruit {\n// code goes here...\n}\n?>",
        "<?php\nclass Fruit {\n// Properties\npublic $name;\npublic $color;\n\n// Methods\nfunction set_name($name) {\n$this->name = $name;\n}\nfunction get_name() {\nreturn $this->name;\n}\n}\n?>",
        "<?php\nclass Fruit {\n// Properties\npublic $name;\npublic $color;\n\n// Methods\nfunction set_name($name) {\n$this->name = $name;\n}\nfunction get_name() {\nreturn $this->name;\n}\n}\n\n$apple = new Fruit();\n$banana = new Fruit();\n$apple->set_name('Apple');\n$banana->set_name('Banana');\n\necho $apple->get_name();\necho \"<br>\";\necho $banana->get_name();\n?>",
        "<?php\nclass Fruit {\n// Properties\npublic $name;\npublic $color;\n\n// Methods\nfunction set_name($name) {\n$this->name = $name;\n}\nfunction get_name() {\nreturn $this->name;\n}\nfunction set_color($color) {\n$this->color = $color;\n}\nfunction get_color() {\nreturn $this->color;\n}\n}\n\n$apple = new Fruit();\n$apple->set_name('Apple');\n$apple->set_color('Red');\necho \"Name: \" . $apple->get_name();\necho \"<br>\";\necho \"Color: \" . $apple->get_color();\n?>",
        "<?php\nclass Fruit {\npublic $name;\n}\n$apple = new Fruit();\n?>",
        "<?php\nclass Fruit {\npublic $name;\nfunction set_name($name) {\n$this->name = $name;\n}\n}\n$apple = new Fruit();\n$apple->set_name(\"Apple\");\n\necho $apple->name;\n?>",
        "<?php\nclass Fruit {\npublic $name;\n}\n$apple = new Fruit();\n$apple->name = \"Apple\";\n\necho $apple->name;\n?>",
        "<?php\n$apple = new Fruit();\nvar_dump($apple instanceof Fruit);\n?>",
        "class",
        "new",
        "instanceof"
      ]
    },
    {
      "title": "PHP OOP - Constructor",
      "summary": "PHP - The __construct() Function\nA constructor allows you to initialize an object's properties upon creation of the object.\nIf you create a __construct() function, PHP will automatically call this function when you create an object from a class.\nNotice that the construct function starts with two underscores (__)!\nWe see in the example below, that using a constructor saves us from calling the set_name() method which reduces the amount of code:\nExampleGet your own PHP Server\nAnother example:\nExample",
      "examples": [
        "<?php\nclass Fruit {\npublic $name;\npublic $color;\n\nfunction __construct($name) {\n$this->name = $name;\n}\nfunction get_name() {\nreturn $this->name;\n}\n}\n\n$apple = new Fruit(\"Apple\");\necho $apple->get_name();\n?>",
        "<?php\nclass Fruit {\npublic $name;\npublic $color;\n\nfunction __construct($name, $color) {\n$this->name = $name;\n$this->color = $color;\n}\nfunction get_name() {\nreturn $this->name;\n}\nfunction get_color() {\nreturn $this->color;\n}\n}\n\n$apple = new Fruit(\"Apple\", \"red\");\necho $apple->get_name();\necho \"<br>\";\necho $apple->get_color();\n?>",
        "__construct()"
      ]
    },
    {
      "title": "PHP OOP - Destructor",
      "summary": "PHP - The __destruct() Function\nA destructor is called when the object is destructed or the script is stopped or exited.\nIf you create a __destruct() function, PHP will automatically call this function at the end of the script.\nNotice that the destruct function starts with two underscores (__)!\nThe example below has a __construct() function that is automatically called when you create an object from a class, and a __destruct() function that is automatically called at the end of the script:\nExampleGet your own PHP Server\nAnother example:\nExample\nTip: As constructors and destructors helps reducing the amount of code, they are very useful!",
      "examples": [
        "<?php\nclass Fruit {\npublic $name;\npublic $color;\n\nfunction __construct($name) {\n$this->name = $name;\n}\nfunction __destruct() {\necho \"The fruit is {$this->name}.\";\n}\n}\n\n$apple = new Fruit(\"Apple\");\n?>",
        "<?php\nclass Fruit {\npublic $name;\npublic $color;\n\nfunction __construct($name, $color) {\n$this->name = $name;\n$this->color = $color;\n}\nfunction __destruct() {\necho \"The fruit is {$this->name} and the color is {$this->color}.\";\n}\n}\n\n$apple = new Fruit(\"Apple\", \"red\");\n?>",
        "__destruct()"
      ]
    },
    {
      "title": "PHP OOP - Access Modifiers",
      "summary": "PHP - Access Modifiers\nProperties and methods can have access modifiers which control where they can be accessed.\nThere are three access modifiers:\npublic - the property or method can be accessed from everywhere. This is default\nprotected - the property or method can be accessed within the class and by classes derived from that class\nprivate - the property or method can ONLY be accessed within the class\nIn the following example we have added three different access modifiers to three properties (name, color, and weight). Here, if you try to set the name property it will work fine (because the name property is public, and can be accessed from everywhere). However,Â if you try to set the color or weight property it will result in a fatal error (because the color and weight property are protected and private):\nExampleGet your own PHP Server\nIn the next example we have added access modifiers to two functions. Here, if you try to call the set_color() or the set_weight() function it will result in a fatal error (because the two functions are considered protected and private), even if all the properties are public:\nExample",
      "examples": [
        "<?php\nclass Fruit {\npublic $name;\nprotected $color;\nprivate $weight;\n}\n\n$mango = new Fruit();\n$mango->name = 'Mango'; // OK\n$mango->color = 'Yellow'; // ERROR\n$mango->weight = '300'; // ERROR\n?>",
        "<?php\nclass Fruit {\npublic $name;\npublic $color;\npublic $weight;\n\nfunction set_name($n) {Â  // a public function (default)\n$this->name = $n;\n}\nprotected function set_color($n) { // a protected function\n$this->color = $n;\n}\nprivate function set_weight($n) { // a private function\n$this->weight = $n;\n}\n}\n\n$mango = new Fruit();\n$mango->set_name('Mango'); // OK\n$mango->set_color('Yellow'); // ERROR\n$mango->set_weight('300'); // ERROR\n?>",
        "public",
        "protected",
        "private"
      ]
    },
    {
      "title": "PHP OOP - Inheritance",
      "summary": "PHP - What is Inheritance?\nInheritance in OOP = When a class derives from another class.\nThe child class will inherit all the public and protected properties and methods from the parent class. In addition, it can have its own properties and methods.\nAn inherited class is defined by using the extends keyword.\nLet's look at an example:\nExampleGet your own PHP Server\nExample Explained\nThe Strawberry class is inherited from the Fruit class.\nThis means that the Strawberry class can use the public $name and $color properties as well as the public __construct() and intro() methods from the Fruit class because of inheritance.\nThe Strawberry class also has its own method: message().\nREMOVE ADS\nPHP - Inheritance and the Protected Access Modifier\nIn the previous chapter we learned that protected properties or methods can be accessed within the class and by classes derived from that class. What does that mean?\nLet's look at an example:\nExample\nIn the example above we see that if we try to call a protected method (intro()) from outside the class, we will receive an error.\nThe public method will work fine!\nLet's look at another example:\nExample\nIn the example above we see that all works fine! It is because we call the protected method (intro()) from inside the derived class.\nPHP - Overriding Inherited Methods\nInherited methods can be overridden by redefining the methods (use the same name) in the child class.\nLook at the example below. The __construct() and intro() methods in the child class (Strawberry) will override the __construct() and intro() methods in the parent class (Fruit):\nExample\nPHP - The final Keyword\nThe final keyword can be used to prevent class inheritance or to prevent method overriding.\nThe following example shows how to prevent class inheritance:\nExample\nThe following example shows how to prevent method overriding:\nExample",
      "examples": [
        "<?php\nclass Fruit {\npublic $name;\npublic $color;\npublic function __construct($name, $color) {\n$this->name = $name;\n$this->color = $color;\n}\npublic function intro() {\necho \"The fruit is {$this->name} and the color is {$this->color}.\";\n}\n}\n\n// Strawberry is inherited from Fruit\nclass Strawberry extends Fruit {\npublic function message() {\necho \"Am I a fruit or a berry? \";\n}\n}\n$strawberry = new Strawberry(\"Strawberry\", \"red\");\n$strawberry->message();\n$strawberry->intro();\n?>",
        "<?php\nclass Fruit {\npublic $name;\npublic $color;\npublic function __construct($name, $color) {\n$this->name = $name;\n$this->color = $color;\n}\nprotected function intro() {\necho \"The fruit is {$this->name} and the color is {$this->color}.\";\n}\n}\n\nclass Strawberry extends Fruit {\npublic function message() {\necho \"Am I a fruit or a berry? \";\n}\n}\n\n// Try to call all three methods from outside class\n$strawberry = new Strawberry(\"Strawberry\", \"red\");Â  // OK. __construct() is public\n$strawberry->message(); // OK. message() is public\n$strawberry->intro(); // ERROR. intro() is protected\n?>",
        "<?php\nclass Fruit {\npublic $name;\npublic $color;\npublic function __construct($name, $color) {\n$this->name = $name;\n$this->color = $color;\n}\nprotected function intro() {\necho \"The fruit is {$this->name} and the color is {$this->color}.\";\n}\n}\n\nclass Strawberry extends Fruit {\npublic function message() {\necho \"Am I a fruit or a berry? \";\n// Call protected method from within derived class - OK\n$this -> intro();\n}\n}\n\n$strawberry = new Strawberry(\"Strawberry\", \"red\"); // OK. __construct() is public\n$strawberry->message(); // OK. message() is public and it calls intro() (which is protected) from within the derived class\n?>",
        "<?php\nclass Fruit {\npublic $name;\npublic $color;\npublic function __construct($name, $color) {\n$this->name = $name;\n$this->color = $color;\n}\npublic function intro() {\necho \"The fruit is {$this->name} and the color is {$this->color}.\";\n}\n}\n\nclass Strawberry extends Fruit {\npublic $weight;\npublic function __construct($name, $color, $weight) {\n$this->name = $name;\n$this->color = $color;\n$this->weight = $weight;\n}\npublic function intro() {\necho \"The fruit is {$this->name}, the color is {$this->color}, and the weight is {$this->weight} gram.\";\n}\n}\n\n$strawberry = new Strawberry(\"Strawberry\", \"red\", 50);\n$strawberry->intro();\n?>",
        "<?php\nfinal class Fruit {\n// some code\n}\n\n// will result in error\nclass Strawberry extends Fruit {\n// some code\n}\n?>",
        "<?php\nclass Fruit {\nfinal public function intro() {\n// some code\n}\n}\n\nclass Strawberry extends Fruit {\n// will result in error\npublic function intro() {\n// some code\n}\n}\n?>",
        "extends",
        "protected",
        "public",
        "final"
      ]
    },
    {
      "title": "PHP OOP - Class Constants",
      "summary": "PHP - Class Constants\nClass constants can be useful if you need to define some constant data within a class.\nA class constant is declared inside a class with the const keyword.\nA constant cannot be changed once it is declared.\nClass constants are case-sensitive. However, it is recommended to name the constants in all uppercase letters.\nWe can access a constant from outside the class by using the class name followed by the scope resolution operator (::) followed by the constant name, like here:\nExampleGet your own PHP Server\nOr, we can access a constant from inside the class by using the self keyword followed by the scope resolution operator (::) followedÂ by the constant name, like here:\nExample",
      "examples": [
        "<?php\nclass Goodbye {\nconst LEAVING_MESSAGE = \"Thank you for visiting W3Schools.com!\";\n}\n\necho Goodbye::LEAVING_MESSAGE;\n?>",
        "<?php\nclass Goodbye {\nconst LEAVING_MESSAGE = \"Thank you for visiting W3Schools.com!\";\npublic function byebye() {\necho self::LEAVING_MESSAGE;\n}\n}\n\n$goodbye = new Goodbye();\n$goodbye->byebye();\n?>",
        "const",
        "::",
        "self"
      ]
    },
    {
      "title": "PHP OOP - Abstract Classes",
      "summary": "PHP - What are Abstract Classes and Methods?\nAbstract classes and methods are when the parent class has a named method, but need its child class(es) to fill out the tasks.\nAn abstract class is a class that contains at least one abstract method. An abstract method is a method that is declared, but not implemented in the code.\nAn abstract class or method is defined with the abstract keyword:\nSyntaxGet your own PHP Server\nWhen inheriting from an abstract class, the child class method must be defined with the same name, and the same or a less restricted access modifier. So, if the abstract method is defined as protected, the child class method must be defined as either protected or public, but not private. Also, the type and number of required arguments must be the same. However, the child classes may have optional arguments in addition.\nSo, when a child class is inherited from an abstract class, we have the following rules:\nThe child class method must be defined with the same name and it redeclares the parent abstract method\nThe child class method must be defined with the same or a less restricted access modifier\nThe number of required arguments must be the same. However, the child class may have optional arguments in addition\nLet's look at an example:\nExample\nExample Explained\nThe Audi, Volvo, and Citroen classes are inherited from the Car class. This means that the Audi, Volvo, and Citroen classes can use the public $name property as well as the public __construct() method from the Car class because of inheritance.\nBut, intro() is an abstract method that should be defined in all the child classes and they should return a string.\nREMOVE ADS\nPHP - More Abstract Class Examples\nLet's look at another example where the abstract method has an argument:\nExample\nLet's look at another example where the abstract method has an argument, and the child class has two optional arguments that are not defined in the parent's abstract method:\nExample",
      "examples": [
        "<?php\nabstract class ParentClass {\nabstract public function someMethod1();\nabstract public function someMethod2($name, $color);\nabstract public function someMethod3() : string;\n}\n?>",
        "<?php\n// Parent class\nabstract class Car {\npublic $name;\npublic function __construct($name) {\n$this->name = $name;\n}\nabstract public function intro() : string;\n}\n\n// Child classes\nclass Audi extends Car {\npublic function intro() : string {\nreturn \"Choose German quality! I'm an $this->name!\";\n}\n}\n\nclass Volvo extends Car {\npublic function intro() : string {\nreturn \"Proud to be Swedish! I'm a $this->name!\";\n}\n}\n\nclass Citroen extends Car {\npublic function intro() : string {\nreturn \"French extravagance! I'm a $this->name!\";\n}\n}\n\n// Create objects from the child classes\n$audi = new audi(\"Audi\");\necho $audi->intro();\necho \"<br>\";\n\n$volvo = new volvo(\"Volvo\");\necho $volvo->intro();\necho \"<br>\";\n\n$citroen = new citroen(\"Citroen\");\necho $citroen->intro();\n?>",
        "<?php\nabstract class ParentClass {\n// Abstract method with an argument\nabstract protected function prefixName($name);\n}\n\nclass ChildClass extends ParentClass {\npublic function prefixName($name) {\nif ($name == \"John Doe\") {\n$prefix = \"Mr.\";\n} elseif ($name == \"Jane Doe\") {\n$prefix = \"Mrs.\";\n} else {\n$prefix = \"\";\n}\nreturn \"{$prefix} {$name}\";\n}\n}\n\n$class = new ChildClass;\necho $class->prefixName(\"John Doe\");\necho \"<br>\";\necho $class->prefixName(\"Jane Doe\");\n?>",
        "<?php\nabstract class ParentClass {\n// Abstract method with an argument\nabstract protected function prefixName($name);\n}\n\nclass ChildClass extends ParentClass {\n// The child class may define optional arguments that are not in the parent's abstract method\npublic function prefixName($name, $separator = \".\", $greet = \"Dear\") {\nif ($name == \"John Doe\") {\n$prefix = \"Mr\";\n} elseif ($name == \"Jane Doe\") {\n$prefix = \"Mrs\";\n} else {\n$prefix = \"\";\n}\nreturn \"{$greet} {$prefix}{$separator} {$name}\";\n}\n}\n\n$class = new ChildClass;\necho $class->prefixName(\"John Doe\");\necho \"<br>\";\necho $class->prefixName(\"Jane Doe\");\n?>",
        "abstract"
      ]
    },
    {
      "title": "PHP OOP - Interfaces",
      "summary": "PHP - What are Interfaces?\nInterfaces allow you to specify what methods a class should implement.\nInterfaces make it easy to use a variety of different classes in the same way. When one or more classes use the same interface, it is referred to as \"polymorphism\".\nInterfaces are declared with the interface keyword:\nSyntaxGet your own PHP Server\nPHP - Interfaces vs. Abstract Classes\nInterface are similar to abstract classes. The difference between interfaces and abstract classes are:\nInterfaces cannot have properties, while abstract classes can\nAll interface methods must be public, while abstract class methods is public or protected\nAll methods in an interface are abstract, so they cannot be implemented in code and the abstract keyword is not necessary\nClasses can implement an interface while inheriting from another class at the same time\nPHP - Using Interfaces\nTo implement an interface, a class must use the implements keyword.\nA class that implements an interface must implement all of the interface's methods.\nExample\nFrom the example above, let's say that we would like to write software which manages a group of animals. There are actions that all of the animals can do, but each animal does it in its own way.\nUsing interfaces, we can write some code which can work for all of the animals even if each animal behaves differently:\nExample\nExample Explained\nCat, Dog and Mouse are all classes that implement the Animal interface, which means that all of them are able to make a sound using the makeSound() method. Because of this, we can loop through all of the animals and tell them to make a sound even if we don't know what type of animal each one is.\nSince the interface does not tell the classes how to implement the method, each animal can make a sound in its own way.",
      "examples": [
        "<?php\ninterface InterfaceName {\npublic function someMethod1();\npublic function someMethod2($name, $color);\npublic function someMethod3() : string;\n}\n?>",
        "<?php\ninterface Animal {\npublic function makeSound();\n}\n\nclass Cat implements Animal {\npublic function makeSound() {\necho \"Meow\";\n}\n}\n\n$animal = new Cat();\n$animal->makeSound();\n?>",
        "<?php\n// Interface definition\ninterface Animal {\npublic function makeSound();\n}\n\n// Class definitions\nclass Cat implements Animal {\npublic function makeSound() {\necho \" Meow \";\n}\n}\n\nclass Dog implements Animal {\npublic function makeSound() {\necho \" Bark \";\n}\n}\n\nclass Mouse implements Animal {\npublic function makeSound() {\necho \" Squeak \";\n}\n}\n\n// Create a list of animals\n$cat = new Cat();\n$dog = new Dog();\n$mouse = new Mouse();\n$animals = array($cat, $dog, $mouse);\n\n// Tell the animals to make a sound\nforeach($animals as $animal) {\n$animal->makeSound();\n}\n?>",
        "interface",
        "implements",
        "makeSound()"
      ]
    },
    {
      "title": "PHP OOP - Traits",
      "summary": "PHP - What are Traits?\nPHP only supports single inheritance: a child class can inherit only from one single parent.\nSo, what if a class needs to inherit multiple behaviors? OOP traits solve this problem.\nTraits are used to declare methods that can be used in multiple classes. Traits can have methods and abstract methods that can be used in multiple classes, and the methods can have any access modifier (public, private, or protected).\nTraits are declared with the trait keyword:\nSyntaxGet your own PHP Server\nTo use a trait in a class, use the use keyword:\nSyntax\nLet's look at an example:\nExample\nExample Explained\nHere, we declare one trait: message1. Then, we create a class: Welcome. The class uses the trait, and all the methods in the trait will be available in the class.\nIf other classes need to use the msg1() function, simply use the message1 trait in those classes. This reduces code duplication, because there is no need to redeclare the same method over and over again.\nREMOVE ADS\nPHP - Using Multiple Traits\nLet's look at another example:\nExample\nExample Explained\nHere, we declare two traits: message1 and message2. Then, we create two classes: Welcome and Welcome2. The first class (Welcome) uses the message1 trait, and the second class (Welcome2) uses both message1 and message2 traits (multiple traits are separated by comma).",
      "examples": [
        "<?php\ntrait TraitName {\n// some code...\n}\n?>",
        "<?php\nclass MyClass {\nuse TraitName;\n}\n?>",
        "<?php\ntrait message1 {\npublic function msg1() {\necho \"OOP is fun! \";\n}\n}\n\nclass Welcome {\nuse message1;\n}\n\n$obj = new Welcome();\n$obj->msg1();\n?>",
        "<?php\ntrait message1 {\npublic function msg1() {\necho \"OOP is fun! \";\n}\n}\n\ntrait message2 {\npublic function msg2() {\necho \"OOP reduces code duplication!\";\n}\n}\n\nclass Welcome {\nuse message1;\n}\n\nclass Welcome2 {\nuse message1, message2;\n}\n\n$obj = new Welcome();\n$obj->msg1();\necho \"<br>\";\n\n$obj2 = new Welcome2();\n$obj2->msg1();\n$obj2->msg2();\n?>",
        "trait",
        "use"
      ]
    },
    {
      "title": "PHP OOP - Static Methods",
      "summary": "PHP - Static Methods\nStatic methods can be called directly - without creating an instance of the class first.\nStatic methods are declared with the static keyword:\nSyntaxGet your own PHP Server\nTo access a static method use the class name, double colon (::), and the method name:\nSyntax\nLet's look at an example:\nExample\nExample Explained\nHere, we declare a static method: welcome(). Then, we call the static method by using the class name, double colon (::), and the method name (without creating an instance of the class first).\nREMOVE ADS\nPHP - More on Static Methods\nA class can have both static and non-static methods. A static method can be accessed from a method in the same class using the self keyword and double colon (::):\nExample\nStatic methods can also be called from methods in other classes. To do this, the static method should be public:\nExample\nTo call a static method from a child class, use the parent keyword inside the child class. Here, the static method can be public or protected.\nExample",
      "examples": [
        "<?php\nclass ClassName {\npublic static function staticMethod() {\necho \"Hello World!\";\n}\n}\n?>",
        "ClassName::staticMethod();",
        "<?php\nclass greeting {\npublic static function welcome() {\necho \"Hello World!\";\n}\n}\n\n// Call static method\ngreeting::welcome();\n?>",
        "<?php\nclass greeting {\npublic static function welcome() {\necho \"Hello World!\";\n}\n\npublic function __construct() {\nself::welcome();\n}\n}\n\nnew greeting();\n?>",
        "<?php\nclass A {\npublic static function welcome() {\necho \"Hello World!\";\n}\n}\n\nclass B {\npublic function message() {\nA::welcome();\n}\n}\n\n$obj = new B();\necho $obj -> message();\n?>",
        "<?php\nclass domain {\nprotected static function getWebsiteName() {\nreturn \"W3Schools.com\";\n}\n}\n\nclass domainW3 extends domain {\npublic $websiteName;\npublic function __construct() {\n$this->websiteName = parent::getWebsiteName();\n}\n}\n\n$domainW3 = new domainW3;\necho $domainW3 -> websiteName;\n?>",
        "static",
        "self",
        "public",
        "parent",
        "protected"
      ]
    },
    {
      "title": "PHP OOP - Static Properties",
      "summary": "PHP - Static Properties\nStatic properties can be called directly - without creating an instance of a class.\nStatic properties are declared with the static keyword:\nSyntaxGet your own PHP Server\nTo access a static property use the class name, double colon (::), and the property name:\nSyntax\nLet's look at an example:\nExample\nExample Explained\nHere, we declare a static property: $value. Then, we echo the value of the static property by using the class name, double colon (::), and the property name (without creating a class first).\nREMOVE ADS\nPHP - More on Static Properties\nA class can have both static and non-static properties. A static property can be accessed from a method in the same class using the self keyword and double colon (::):\nExample\nTo call a static property from a child class, use the parent keyword inside the child class:\nExample",
      "examples": [
        "<?php\nclass ClassName {\npublic static $staticProp = \"W3Schools\";\n}\n?>",
        "ClassName::$staticProp;",
        "<?php\nclass pi {\npublic static $value = 3.14159;\n}\n\n// Get static property\necho pi::$value;\n?>",
        "<?php\nclass pi {\npublic static $value=3.14159;\npublic function staticValue() {\nreturn self::$value;\n}\n}\n\n$pi = new pi();\necho $pi->staticValue();\n?>",
        "<?php\nclass pi {\npublic static $value=3.14159;\n}\n\nclass x extends pi {\npublic function xStatic() {\nreturn parent::$value;\n}\n}\n\n// Get value of static property directly via child class\necho x::$value;\n\n// or get value of static property via xStatic() method\n$x = new x();\necho $x->xStatic();\n?>",
        "static",
        "self",
        "parent"
      ]
    },
    {
      "title": "PHP Namespaces",
      "summary": "PHP Namespaces\nNamespaces are qualifiers that solve two different problems:\nThey allow for better organization by grouping classes that work together to perform a task\nThey allow the same name to be used for more than one class\nFor example, you may have a set of classes which describe an HTML table, such as Table, Row and Cell while also having another set of classes to describe furniture, such as Table, Chair and Bed. Namespaces can be used to organize the classes into two different groups while also preventing the two classes Table and Table from being mixed up.\nDeclaring a Namespace\nNamespaces are declared at the beginning of a file using the namespace keyword:\nSyntaxGet your own PHP Server\nDeclare a namespace called Html:\nNote: A namespace declaration must be the first thing in the PHP file. The following code is invalid:\nConstants, classes and functions declared in this file will belong to the Html namespace:\nExample\nCreate a Table class in the Html namespace:\nFor further organization, it is possible to have nested namespaces:\nSyntax\nDeclare a namespace called Html inside a namespace called Code:\nREMOVE ADS\nUsing Namespaces\nAny code that follows a namespace declaration is operating inside the namespace, so classes that belong to the namespace can be instantiated without any qualifiers. To access classes from outside a namespace, the class needs to have the namespace attached to it.\nExample\nUse classes from the Html namespace:\nWhen many classes from the same namespace are being used at the same time, it is easier to use the namespace keyword:\nExample\nUse classes from the Html namespace without the need for the Html\\qualifier:\nNamespace Alias\nIt can be useful to give a namespace or class an alias to make it easier to write. This is done with the use keyword:\nExample\nGive a namespace an alias:\nExample\nGive a class an alias:",
      "examples": [
        "<?php\nnamespace Html;\n?>",
        "<?php\necho \"Hello World!\";\nnamespace Html;\n...\n?>",
        "<?php\nnamespace Html;\nclass Table {\npublic $title = \"\";\npublic $numRows = 0;\npublic function message() {\necho \"<p>Table '{$this->title}' has {$this->numRows} rows.</p>\";\n}\n}\n$table = new Table();\n$table->title = \"My table\";\n$table->numRows = 5;\n?>\n\n<!DOCTYPE html>\n<html>\n<body>\n\n<?php\n$table->message();\n?>\n\n</body>\n</html>",
        "<?php\nnamespace Code\\Html;\n?>",
        "<?php\n$table = new Html\\Table();\n$row = new Html\\Row();\n?>",
        "<?php\nnamespace Html;\n$table = new Table();\n$row = new Row();\n?>",
        "<?php\nuse Html as H;\n$table = new H\\Table();\n?>",
        "<?php\nuse Html\\Table as T;\n$table = new T();\n?>",
        "namespace",
        "use"
      ]
    },
    {
      "title": "PHP Iterables",
      "summary": "PHP - What is an Iterable?\nAn iterable is any value which can be looped through with a foreach() loop.\nThe iterable pseudo-type was introduced in PHP 7.1, and it can be used as a data type for function arguments and function return values.\nPHP - Using Iterables\nThe iterable keyword can be used as a data type of a function argument or as the return type of a function:\nExampleGet your own PHP Server\nUse an iterable function argument:\nExample\nReturn an iterable:\nREMOVE ADS\nPHP - Creating Iterables\nArrays\nAll arrays are iterables, so any array can be used as an argument of a function that requires an iterable.\nIterators\nAny object that implements the Iterator interface can be used as an argument of a function that requires an iterable.\nAn iterator contains a list of items and provides methods to loop through them. It keeps a pointer to one of the elements in the list. Each item in the list should have a key which can be used to find the item.\nAn iterator must have these methods:\ncurrent() - Returns the element that the pointer is currently pointing to. It can be any data type\nkey() Returns the key associated with the current element in the list. It can only be an integer, float, boolean or string\nnext() Moves the pointer to the next element in the list\nrewind() Moves the pointer to the first element in the list\nvalid() If the internal pointer is not pointing to any element (for example, if next() was called at the end of the list), this should return false. It returns true in any other case\nExample\nImplement the Iterator interface and use it as an iterable:",
      "examples": [
        "<?php\nfunction printIterable(iterable $myIterable) {\nforeach($myIterable as $item) {\necho $item;\n}\n}\n\n$arr = [\"a\", \"b\", \"c\"];\nprintIterable($arr);\n?>",
        "<?php\nfunction getIterable():iterable {\nreturn [\"a\", \"b\", \"c\"];\n}\n\n$myIterable = getIterable();\nforeach($myIterable as $item) {\necho $item;\n}\n?>",
        "<?php\n// Create an Iterator\nclass MyIterator implements Iterator {\nprivate $items = [];\nprivate $pointer = 0;\n\npublic function __construct($items) {\n// array_values() makes sure that the keys are numbers\n$this->items = array_values($items);\n}\n\npublic function current() {\nreturn $this->items[$this->pointer];\n}\n\npublic function key() {\nreturn $this->pointer;\n}\n\npublic function next() {\n$this->pointer++;\n}\n\npublic function rewind() {\n$this->pointer = 0;\n}\n\npublic function valid() {\n// count() indicates how many items are in the list\nreturn $this->pointer < count($this->items);\n}\n}\n\n// A function that uses iterables\nfunction printIterable(iterable $myIterable) {\nforeach($myIterable as $item) {\necho $item;\n}\n}\n\n// Use the iterator as an iterable\n$iterator = new MyIterator([\"a\", \"b\", \"c\"]);\nprintIterable($iterator);\n?>",
        "foreach()",
        "iterable",
        "Iterator",
        "current()",
        "key()",
        "next()",
        "rewind()",
        "valid()"
      ]
    },
    {
      "title": "PHP MySQL Database",
      "summary": "With PHP, you can connect to and manipulate databases.\nMySQL is the most popular database system used with PHP.\nWhat is MySQL?\nMySQL is a database system used on the web\nMySQL is a database system that runs on a server\nMySQL is ideal for both small and large applications\nMySQL is very fast, reliable, and easy to use\nMySQL uses standard SQL\nMySQL compiles on a number of platforms\nMySQL is free to download and use\nMySQL is developed, distributed, and supported by Oracle Corporation\nMySQL is named after co-founder Monty Widenius's daughter: My\nThe data in a MySQL database are stored in tables. A table is a collection of related data, and it consists of columns and rows.\nDatabases are useful for storing information categorically. A company may have a database with the following tables:\nEmployees\nProducts\nCustomers\nOrders\nPHP + MySQL Database System\nPHP combined with MySQL are cross-platform (you can develop in Windows and serve on a Unix platform)\nDatabase Queries\nA query is a question or a request.\nWe can query a database for specific information and have a recordset returned.\nLook at the following query (using standard SQL):\nThe query above selects all the data in the \"LastName\" column from the \"Employees\" table.\nTo learn more about SQL, please visit our SQL tutorial.\nDownload MySQL Database\nIf you don't have a PHP server with a MySQL Database, you can download it for free here: http://www.mysql.com\nFacts About MySQL Database\nMySQL is the de-facto standard database system for web sites with HUGE volumes of both data and end-users (like Facebook, Twitter, and Wikipedia).\nAnother great thing about MySQL is that it can be scaled down to support embedded database applications.\nLook at http://www.mysql.com/customers/ for an overview of companies using MySQL.",
      "examples": [
        "SELECT LastName FROM Employees"
      ]
    },
    {
      "title": "PHP Connect to MySQL",
      "summary": "PHP 5 and later can work with a MySQL database using:\nMySQLi extension (the \"i\" stands for improved)\nPDO (PHP Data Objects)\nEarlier versions of PHP used the MySQL extension. However, this extension was deprecated in 2012.\nShould I Use MySQLi or PDO?\nIf you need a short answer, it would be \"Whatever you like\".\nBoth MySQLi and PDO have their advantages:\nPDO will work on 12 different database systems, whereas MySQLi will only work with MySQL databases.\nSo, if you have to switch your project to use another database, PDO makes the process easy. You only have to change the connection string and a few queries. With MySQLi, you will need to rewrite the entire code - queries included.\nBoth are object-oriented, but MySQLi also offers a procedural API.\nBoth support Prepared Statements. Prepared Statements protect from SQL injection, and are very important for web application security.\nMySQL Examples in Both MySQLi and PDO Syntax\nIn this, and in the following chapters we demonstrate three ways of working with PHP and MySQL:\nMySQLi (object-oriented)\nMySQLi (procedural)\nPDO\nMySQLi Installation\nFor Linux and Windows: The MySQLi extension is automatically installed in most cases, when php5 mysql package is installed.\nFor installation details, go to: http://php.net/manual/en/mysqli.installation.php\nPDO Installation\nFor installation details, go to: http://php.net/manual/en/pdo.installation.php\nREMOVE ADS\nOpen a Connection to MySQL\nBefore we can access data in the MySQL database, we need to be able to connect to the server:\nExample (MySQLi Object-Oriented)Get your own PHP Server\nNote on the object-oriented example above:\n$connect_error was broken until PHP 5.2.9 and 5.3.0. If you need to ensure compatibility with PHP versions prior to 5.2.9 and 5.3.0, use the following code instead:\n\n// Check connection\nif (mysqli_connect_error()) {\ndie(\"Database connection failed: \" . mysqli_connect_error());\n}\nExample (MySQLi Procedural)\nExample (PDO)\nNote: In the PDO example above we have also specified a database (myDB). PDO require a valid database to connect to. If no database is specified, an exception is thrown.\nTip: A great benefit of PDO is that it has an exception class to handle any problems that may occur in our database queries. If an exception is thrown within the try{ } block, the script stops executing and flows directly to the first catch(){ } block.\nClose the Connection\nThe connection will be closed automatically when the script ends. To close the connection before, use the following:\nMySQLi Object-Oriented:\nMySQLi Procedural:\nPDO:",
      "examples": [
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password);\n\n// Check connection\nif ($conn->connect_error)Â {\ndie(\"Connection failed: \" . $conn->connect_error);\n}\necho \"Connected successfully\";\n?>",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n\n// Create connection\n$conn = mysqli_connect($servername, $username, $password);\n\n// Check connection\nif (!$conn)Â {\ndie(\"Connection failed: \" . mysqli_connect_error());\n}\necho \"Connected successfully\";\n?>",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n\ntry {\n$conn = new PDO(\"mysql:host=$servername;dbname=myDB\", $username, $password);\n// set the PDO error mode to exception\n$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\necho \"Connected successfully\";\n} catch(PDOException $e)Â {\necho \"Connection failed: \" . $e->getMessage();\n}\n?>",
        "$conn->close();",
        "mysqli_close($conn);",
        "$conn = null;"
      ]
    },
    {
      "title": "PHP Create a MySQL Database",
      "summary": "A database consists of one or more tables.\nYou will need special CREATE privileges to create or to delete a MySQL database.\nCreate a MySQL Database Using MySQLi and PDO\nThe CREATE DATABASE statement is used to create a database in MySQL.\nThe following examples create a database named \"myDB\":\nExample (MySQLi Object-oriented)Get your own PHP Server\nNote: When you create a new database, you must only specify the first three arguments to the mysqli object (servername, username and password).\n\nTip: If you have to use a specific port, add an empty string for the database-name argument, like this: new mysqli(\"localhost\", \"username\", \"password\", \"\", port)\nREMOVE ADS\nExample (MySQLi Procedural)\nNote: The following PDO example create a database named \"myDBPDO\":\nExample (PDO)\nTip: A great benefit of PDO is that it has exception class to handle any problems that may occur in our database queries. If an exception is thrown within the try{ } block, the script stops executing and flows directly to the first catch(){ } block. In the catch block above we echo the SQL statement and the generated error message.",
      "examples": [
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password);\n// Check connection\nif ($conn->connect_error)Â {\ndie(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Create database\n$sql = \"CREATE DATABASE myDB\";\nif ($conn->query($sql) === TRUE) {\necho \"Database created successfully\";\n} else {\necho \"Error creating database: \" . $conn->error;\n}\n\n$conn->close();\n?>",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n\n// Create connection\n$conn = mysqli_connect($servername, $username, $password);\n// Check connection\nif (!$conn)Â {\ndie(\"Connection failed: \" . mysqli_connect_error());\n}\n\n// Create database\n$sql = \"CREATE DATABASE myDB\";\nif (mysqli_query($conn, $sql)) {\necho \"Database created successfully\";\n} else {\necho \"Error creating database: \" . mysqli_error($conn);\n}\n\nmysqli_close($conn);\n?>",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n\ntry {\n$conn = new PDO(\"mysql:host=$servername\", $username, $password);\n// set the PDO error mode to exception\n$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n$sql = \"CREATE DATABASE myDBPDO\";\n// use exec() because no results are returned\n$conn->exec($sql);\necho \"Database created successfully<br>\";\n} catch(PDOException $e) {\necho $sql . \"<br>\" . $e->getMessage();\n}\n\n$conn = null;\n?>"
      ]
    },
    {
      "title": "PHP MySQL Create Table",
      "summary": "A database table has its own unique name and consists of columns and rows.\nCreate a MySQL Table Using MySQLi and PDO\nThe CREATE TABLE statement is used to create a table in MySQL.\nWe will create a table named \"MyGuests\", with five columns: \"id\", \"firstname\", \"lastname\", \"email\" and \"reg_date\":\nNotes on the table above:\nThe data type specifies what type of data the column can hold. For a complete reference of all the available data types, go to our Data Types reference.\nAfter the data type, you can specify other optional attributes for each column:\nNOT NULL - Each row must contain a value for that column, null values are not allowed\nDEFAULT value - Set a default value that is added when no other value is passed\nUNSIGNED - Used for number types, limits the stored data to positive numbers and zero\nAUTO INCREMENT - MySQL automatically increases the value of the field by 1 each time a new record is added\nPRIMARY KEY - Used to uniquely identify the rows in a table. The column with PRIMARY KEY setting is often an ID number, and is often used with AUTO_INCREMENT\nEach table should have a primary key column (in this case: the \"id\" column). Its value must be unique for each record in the table.\nThe following examples shows how to create the table in PHP:\nExample (MySQLi Object-oriented)Get your own PHP Server\nREMOVE ADS\nExample (MySQLi Procedural)\nExample (PDO)",
      "examples": [
        "CREATE TABLE MyGuests (\nid INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\nfirstname VARCHAR(30) NOT NULL,\nlastname VARCHAR(30) NOT NULL,\nemail VARCHAR(50),\nreg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n)",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error)Â {\ndie(\"Connection failed: \" . $conn->connect_error);\n}\n\n// sql to create table\n$sql = \"CREATE TABLE MyGuests (\nid INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\nfirstname VARCHAR(30) NOT NULL,\nlastname VARCHAR(30) NOT NULL,\nemail VARCHAR(50),\nreg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n)\";\n\nif ($conn->query($sql) === TRUE) {\necho \"Table MyGuests created successfully\";\n} else {\necho \"Error creating table: \" . $conn->error;\n}\n\n$conn->close();\n?>",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = mysqli_connect($servername, $username, $password, $dbname);\n// Check connection\nif (!$conn)Â {\ndie(\"Connection failed: \" . mysqli_connect_error());\n}\n\n// sql to create table\n$sql = \"CREATE TABLE MyGuests (\nid INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\nfirstname VARCHAR(30) NOT NULL,\nlastname VARCHAR(30) NOT NULL,\nemail VARCHAR(50),\nreg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n)\";\n\nif (mysqli_query($conn, $sql)) {\necho \"Table MyGuests created successfully\";\n} else {\necho \"Error creating table: \" . mysqli_error($conn);\n}\n\nmysqli_close($conn);\n?>",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDBPDO\";\n\ntry {\n$conn = new PDO(\"mysql:host=$servername;dbname=$dbname\", $username, $password);\n// set the PDO error mode to exception\n$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n// sql to create table\n$sql = \"CREATE TABLE MyGuests (\nid INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\nfirstname VARCHAR(30) NOT NULL,\nlastname VARCHAR(30) NOT NULL,\nemail VARCHAR(50),\nreg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n)\";\n\n// use exec() because no results are returned\n$conn->exec($sql);\necho \"Table MyGuests created successfully\";\n} catch(PDOException $e) {\necho $sql . \"<br>\" . $e->getMessage();\n}\n\n$conn = null;\n?>"
      ]
    },
    {
      "title": "PHP MySQL Insert Data",
      "summary": "Insert Data Into MySQL Using MySQLi and PDO\nAfter a database and a table have been created, we can start adding data in them.\nHere are some syntax rules to follow:\nThe SQL query must be quoted in PHP\nString values inside the SQL query must be quoted\nNumeric values must not be quoted\nThe word NULL must not be quoted\nThe INSERT INTO statement is used to add new records to a MySQL table:\nTo learn more about SQL, please visit our SQL tutorial.\nIn the previous chapter we created an empty table named \"MyGuests\" with five columns: \"id\", \"firstname\", \"lastname\", \"email\" and \"reg_date\". Now, let us fill the table with data.\nNote: If a column is AUTO_INCREMENT (like the \"id\" column) or TIMESTAMP with default update of current_timesamp (like the \"reg_date\" column), it is no need to be specified in the SQL query; MySQL will automatically add the value.\nThe following examples add a new record to the \"MyGuests\" table:\nExample (MySQLi Object-oriented)Get your own PHP Server\nREMOVE ADS\nExample (MySQLi Procedural)\nExample (PDO)",
      "examples": [
        "INSERT INTO table_name (column1, column2, column3,...)\nVALUES (value1, value2, value3,...)",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error)Â {\ndie(\"Connection failed: \" . $conn->connect_error);\n}\n\n$sql = \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('John', 'Doe', 'john@example.com')\";\n\nif ($conn->query($sql) === TRUE) {\necho \"New record created successfully\";\n} else {\necho \"Error: \" . $sql . \"<br>\" . $conn->error;\n}\n\n$conn->close();\n?>",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = mysqli_connect($servername, $username, $password, $dbname);\n// Check connection\nif (!$conn)Â {\ndie(\"Connection failed: \" . mysqli_connect_error());\n}\n\n$sql = \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('John', 'Doe', 'john@example.com')\";\n\nif (mysqli_query($conn, $sql)) {\necho \"New record created successfully\";\n} else {\necho \"Error: \" . $sql . \"<br>\" . mysqli_error($conn);\n}\n\nmysqli_close($conn);\n?>",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDBPDO\";\n\ntry {\n$conn = new PDO(\"mysql:host=$servername;dbname=$dbname\", $username, $password);\n// set the PDO error mode to exception\n$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n$sql = \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('John', 'Doe', 'john@example.com')\";\n// use exec() because no results are returned\n$conn->exec($sql);\necho \"New record created successfully\";\n} catch(PDOException $e) {\necho $sql . \"<br>\" . $e->getMessage();\n}\n\n$conn = null;\n?>"
      ]
    },
    {
      "title": "PHP MySQL Get Last Inserted ID",
      "summary": "Get ID of The Last Inserted Record\nIf we perform an INSERT or UPDATE on a table with an AUTO_INCREMENT field, we can get the ID of the last inserted/updated record immediately.\nIn the table \"MyGuests\", the \"id\" column is an AUTO_INCREMENT field:\nThe following examples are equal to the examples from the previous page (PHP Insert Data Into MySQL), except that we have added one single line of code to retrieve the ID of the last inserted record. We also echo the last inserted ID:\nExample (MySQLi Object-oriented)Get your own PHP Server\nREMOVE ADS\nExample (MySQLi Procedural)\nExample (PDO)",
      "examples": [
        "CREATE TABLE MyGuests (\nid INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\nfirstname VARCHAR(30) NOT NULL,\nlastname VARCHAR(30) NOT NULL,\nemail VARCHAR(50),\nreg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n)",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error)Â {\ndie(\"Connection failed: \" . $conn->connect_error);\n}\n\n$sql = \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('John', 'Doe', 'john@example.com')\";\n\nif ($conn->query($sql) === TRUE) {\n$last_id = $conn->insert_id;\necho \"New record created successfully. Last inserted ID is: \" . $last_id;\n} else {\necho \"Error: \" . $sql . \"<br>\" . $conn->error;\n}\n\n$conn->close();\n?>",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = mysqli_connect($servername, $username, $password, $dbname);\n// Check connection\nif (!$conn)Â {\ndie(\"Connection failed: \" . mysqli_connect_error());\n}\n\n$sql = \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('John', 'Doe', 'john@example.com')\";\n\nif (mysqli_query($conn, $sql)) {\n$last_id = mysqli_insert_id($conn);\necho \"New record created successfully. Last inserted ID is: \" . $last_id;\n} else {\necho \"Error: \" . $sql . \"<br>\" . mysqli_error($conn);\n}\n\nmysqli_close($conn);\n?>",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDBPDO\";\n\ntry {\n$conn = new PDO(\"mysql:host=$servername;dbname=$dbname\", $username, $password);\n// set the PDO error mode to exception\n$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n$sql = \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('John', 'Doe', 'john@example.com')\";\n// use exec() because no results are returned\n$conn->exec($sql);\n$last_id = $conn->lastInsertId();\necho \"New record created successfully. Last inserted ID is: \" . $last_id;\n} catch(PDOException $e) {\necho $sql . \"<br>\" . $e->getMessage();\n}\n\n$conn = null;\n?>"
      ]
    },
    {
      "title": "PHP MySQL Insert Multiple Records",
      "summary": "Insert Multiple Records Into MySQL Using MySQLi and PDO\nMultiple SQL statements must be executed with the multi_query() function.\nThe following examples add three new records to the \"MyGuests\" table:\nExample (MySQLi Object-oriented)Get your own PHP Server\nNote that each SQL statement must be separated by a semicolon.\nREMOVE ADS\nExample (MySQLi Procedural)\nThe PDO way is a little bit different:\nExample (PDO)",
      "examples": [
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error)Â {\ndie(\"Connection failed: \" . $conn->connect_error);\n}\n\n$sql = \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('John', 'Doe', 'john@example.com');\";\n$sql .= \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('Mary', 'Moe', 'mary@example.com');\";\n$sql .= \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('Julie', 'Dooley', 'julie@example.com')\";\n\nif ($conn->multi_query($sql) === TRUE) {\necho \"New records created successfully\";\n} else {\necho \"Error: \" . $sql . \"<br>\" . $conn->error;\n}\n\n$conn->close();\n?>",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = mysqli_connect($servername, $username, $password, $dbname);\n// Check connection\nif (!$conn)Â {\ndie(\"Connection failed: \" . mysqli_connect_error());\n}\n\n$sql = \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('John', 'Doe', 'john@example.com');\";\n$sql .= \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('Mary', 'Moe', 'mary@example.com');\";\n$sql .= \"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('Julie', 'Dooley', 'julie@example.com')\";\n\nif (mysqli_multi_query($conn, $sql)) {\necho \"New records created successfully\";\n} else {\necho \"Error: \" . $sql . \"<br>\" . mysqli_error($conn);\n}\n\nmysqli_close($conn);\n?>",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDBPDO\";\n\ntry {\n$conn = new PDO(\"mysql:host=$servername;dbname=$dbname\", $username, $password);\n// set the PDO error mode to exception\n$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n// begin the transaction\n$conn->beginTransaction();\n// our SQL statements\n$conn->exec(\"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('John', 'Doe', 'john@example.com')\");\n$conn->exec(\"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('Mary', 'Moe', 'mary@example.com')\");\n$conn->exec(\"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES ('Julie', 'Dooley', 'julie@example.com')\");\n\n// commit the transaction\n$conn->commit();\necho \"New records created successfully\";\n} catch(PDOException $e) {\n// roll back the transaction if something failed\n$conn->rollback();\necho \"Error: \" . $e->getMessage();\n}\n\n$conn = null;\n?>",
        "multi_query()"
      ]
    },
    {
      "title": "PHP MySQL Prepared Statements",
      "summary": "Prepared statements are very useful against SQL injections.\nPrepared Statements and Bound Parameters\nA prepared statement is a feature used to execute the same (or similar) SQL statements repeatedly with high efficiency.\nPrepared statements basically work like this:\nPrepare: An SQL statement template is created and sent to the database. Certain values are left unspecified, called parameters (labeled \"?\"). Example: INSERT INTO MyGuests VALUES(?, ?, ?)\nThe database parses, compiles, and performs query optimization on the SQL statement template, and stores the result without executing it\nExecute: At a later time, the application binds the values to the parameters, and the database executes the statement. The application may execute the statement as many times as it wants with different values\nCompared to executing SQL statements directly, prepared statements have three main advantages:\nPrepared statements reduce parsing time as the preparation on the query is done only once (although the statement is executed multiple times)\nBound parameters minimize bandwidth to the server as you need send only the parameters each time, and not the whole query\nPrepared statements are very useful against SQL injections, because parameter values, which are transmitted later using a different protocol, need not be correctly escaped. If the original statement template is not derived from external input, SQL injection cannot occur.\nPrepared Statements in MySQLi\nThe following example uses prepared statements and bound parameters in MySQLi:\nExample (MySQLi with Prepared Statements)Get your own PHP Server\nCode lines to explain from the example above:\nIn our SQL, we insert a question mark (?) where we want to substitute in an integer, string, double or blob value.\nThen, have a look at the bind_param() function:\nThis function binds the parameters to the SQL query and tells the database what the parameters are. The \"sss\" argument lists the types of data that the parameters are. The s character tells mysql that the parameter is a string.\nThe argument may be one of four types:\ni - integer\nd - double\ns - string\nb - BLOB\nWe must have one of these for each parameter.\nBy telling mysql what type of data to expect, we minimize the risk of SQL injections.\nNote: If we want to insert any data from external sources (like user input), it is very important that the data is sanitized and validated.\nREMOVE ADS\nPrepared Statements in PDO\nThe following example uses prepared statements and bound parameters in PDO:\nExample (PDO with Prepared Statements)",
      "examples": [
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n\n// Check connection\nif ($conn->connect_error) {\ndie(\"Connection failed: \" . $conn->connect_error);\n}\n\n// prepare and bind\n$stmt = $conn->prepare(\"INSERT INTO MyGuests (firstname, lastname, email) VALUES (?, ?, ?)\");\n$stmt->bind_param(\"sss\", $firstname, $lastname, $email);\n\n// set parameters and execute\n$firstname = \"John\";\n$lastname = \"Doe\";\n$email = \"john@example.com\";\n$stmt->execute();\n\n$firstname = \"Mary\";\n$lastname = \"Moe\";\n$email = \"mary@example.com\";\n$stmt->execute();\n\n$firstname = \"Julie\";\n$lastname = \"Dooley\";\n$email = \"julie@example.com\";\n$stmt->execute();\n\necho \"New records created successfully\";\n\n$stmt->close();\n$conn->close();\n?>",
        "\"INSERT INTO MyGuests (firstname, lastname, email) VALUES (?, ?, ?)\"",
        "$stmt->bind_param(\"sss\", $firstname, $lastname, $email);",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDBPDO\";\n\ntry {\n$conn = new PDO(\"mysql:host=$servername;dbname=$dbname\", $username, $password);\n// set the PDO error mode to exception\n$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n// prepare sql and bind parameters\n$stmt = $conn->prepare(\"INSERT INTO MyGuests (firstname, lastname, email)\nVALUES (:firstname, :lastname, :email)\");\n$stmt->bindParam(':firstname', $firstname);\n$stmt->bindParam(':lastname', $lastname);\n$stmt->bindParam(':email', $email);\n\n// insert a row\n$firstname = \"John\";\n$lastname = \"Doe\";\n$email = \"john@example.com\";\n$stmt->execute();\n\n// insert another row\n$firstname = \"Mary\";\n$lastname = \"Moe\";\n$email = \"mary@example.com\";\n$stmt->execute();\n\n// insert another row\n$firstname = \"Julie\";\n$lastname = \"Dooley\";\n$email = \"julie@example.com\";\n$stmt->execute();\n\necho \"New records created successfully\";\n} catch(PDOException $e) {\necho \"Error: \" . $e->getMessage();\n}\n$conn = null;\n?>"
      ]
    },
    {
      "title": "PHP MySQL Select Data",
      "summary": "Select Data From a MySQL Database\nThe SELECT statement is used to select data from one or more tables:\nor we can use the * character to select ALL columns from a table:\nTo learn more about SQL, please visit our SQL tutorial.\nSelect Data With MySQLi\nThe following example selects the id, firstname and lastname columns from the MyGuests table and displays it on the page:\nExample (MySQLi Object-oriented)Get your own PHP Server\nCode lines to explain from the example above:\nFirst, we set up an SQL query that selects the id, firstname and lastname columns from the MyGuests table. The next line of code runs the query and puts the resulting data into a variable called $result.\nThen, the function num_rows() checks if there are more than zero rows returned.\nIf there are more than zero rows returned, the function fetch_assoc() puts all the results into an associative array that we can loop through. The while() loop loops through the result set and outputs the data from the id, firstname and lastname columns.\nThe following example shows the same as the example above, in the MySQLi procedural way:\nExample (MySQLi Procedural)\nREMOVE ADS\nYou can also put the result in an HTML table:\nExample (MySQLi Object-oriented)\nSelect Data With PDO (+ Prepared Statements)\nThe following example uses prepared statements.\nIt selects the id, firstname and lastname columns from the MyGuests table and displays it in an HTML table:\nExample (PDO)",
      "examples": [
        "SELECT column_name(s) FROM table_name",
        "SELECT * FROM table_name",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error) {\ndie(\"Connection failed: \" . $conn->connect_error);\n}\n\n$sql = \"SELECT id, firstname, lastname FROM MyGuests\";\n$result = $conn->query($sql);\n\nif ($result->num_rows > 0) {\n// output data of each row\nwhile($row = $result->fetch_assoc()) {\necho \"id: \" . $row[\"id\"]. \" - Name: \" . $row[\"firstname\"]. \" \" . $row[\"lastname\"]. \"<br>\";\n}\n} else {\necho \"0 results\";\n}\n$conn->close();\n?>",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = mysqli_connect($servername, $username, $password, $dbname);\n// Check connection\nif (!$conn)Â {\ndie(\"Connection failed: \" . mysqli_connect_error());\n}\n\n$sql = \"SELECT id, firstname, lastname FROM MyGuests\";\n$result = mysqli_query($conn, $sql);\n\nif (mysqli_num_rows($result) > 0) {\n// output data of each row\nwhile($row = mysqli_fetch_assoc($result)) {\necho \"id: \" . $row[\"id\"]. \" - Name: \" . $row[\"firstname\"]. \" \" . $row[\"lastname\"]. \"<br>\";\n}\n} else {\necho \"0 results\";\n}\n\nmysqli_close($conn);\n?>",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error) {\ndie(\"Connection failed: \" . $conn->connect_error);\n}\n\n$sql = \"SELECT id, firstname, lastname FROM MyGuests\";\n$result = $conn->query($sql);\n\nif ($result->num_rows > 0) {\necho \"<table><tr><th>ID</th><th>Name</th></tr>\";\n// output data of each row\nwhile($row = $result->fetch_assoc()) {\necho \"<tr><td>\".$row[\"id\"].\"</td><td>\".$row[\"firstname\"].\" \".$row[\"lastname\"].\"</td></tr>\";\n}\necho \"</table>\";\n} else {\necho \"0 results\";\n}\n$conn->close();\n?>",
        "<?php\necho \"<table style='border: solid 1px black;'>\";\necho \"<tr><th>Id</th><th>Firstname</th><th>Lastname</th></tr>\";\n\nclass TableRows extends RecursiveIteratorIterator {\nfunction __construct($it) {\nparent::__construct($it, self::LEAVES_ONLY);\n}\n\nfunction current() {\nreturn \"<td style='width:150px;border:1px solid black;'>\" . parent::current(). \"</td>\";\n}\n\nfunction beginChildren() {\necho \"<tr>\";\n}\n\nfunction endChildren() {\necho \"</tr>\" . \"\\n\";\n}\n}\n\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDBPDO\";\n\ntry {\n$conn = new PDO(\"mysql:host=$servername;dbname=$dbname\", $username, $password);\n$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n$stmt = $conn->prepare(\"SELECT id, firstname, lastname FROM MyGuests\");\n$stmt->execute();\n\n// set the resulting array to associative\n$result = $stmt->setFetchMode(PDO::FETCH_ASSOC);\nforeach(new TableRows(new RecursiveArrayIterator($stmt->fetchAll())) as $k=>$v) {\necho $v;\n}\n} catch(PDOException $e) {\necho \"Error: \" . $e->getMessage();\n}\n$conn = null;\necho \"</table>\";\n?>",
        "num_rows()",
        "fetch_assoc()",
        "while()"
      ]
    },
    {
      "title": "PHP MySQL Use The WHERE Clause",
      "summary": "Select and Filter Data From a MySQL Database\nThe WHERE clause is used to filter records.\nThe WHERE clause is used to extract only those records that fulfill a specified condition.\nTo learn more about SQL, please visit our SQL tutorial.\nSelect and Filter Data With MySQLi\nThe following example selects the id, firstname and lastname columns from the MyGuests table where the lastname is \"Doe\", and displays it on the page:\nExample (MySQLi Object-oriented)Get your own PHP Server\nCode lines to explain from the example above:\nFirst, we set up the SQL query that selects the id, firstname and lastname columns from the MyGuests table where the lastname is \"Doe\". The next line of code runs the query and puts the resulting data into a variable called $result.\nThen, the function num_rows() checks if there are more than zero rows returned.\nIf there are more than zero rows returned, the function fetch_assoc() puts all the results into an associative array that we can loop through. The while() loop loops through the result set and outputs the data from the id, firstname and lastname columns.\nThe following example shows the same as the example above, in the MySQLi procedural way:\nExample (MySQLi Procedural)\nREMOVE ADS\nYou can also put the result in an HTML table:\nExample (MySQLi Object-oriented)\nSelect Data With PDO (+ Prepared Statements)\nThe following example uses prepared statements.\nIt selects the id, firstname and lastname columns from the MyGuests table where the lastname is \"Doe\", and displays it in an HTML table:\nExample (PDO)",
      "examples": [
        "SELECT column_name(s) FROM table_name WHERE column_name operator value",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error) {\ndie(\"Connection failed: \" . $conn->connect_error);\n}\n\n$sql = \"SELECT id, firstname, lastname FROM MyGuests WHERE lastname='Doe'\";\n$result = $conn->query($sql);\n\nif ($result->num_rows > 0) {\n// output data of each row\nwhile($row = $result->fetch_assoc()) {\necho \"id: \" . $row[\"id\"]. \" - Name: \" . $row[\"firstname\"]. \" \" . $row[\"lastname\"]. \"<br>\";\n}\n} else {\necho \"0 results\";\n}\n$conn->close();\n?>",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = mysqli_connect($servername, $username, $password, $dbname);\n// Check connection\nif (!$conn)Â {\ndie(\"Connection failed: \" . mysqli_connect_error());\n}\n\n$sql = \"SELECT id, firstname, lastname FROM MyGuests WHERE lastname='Doe'\";\n$result = mysqli_query($conn, $sql);\n\nif (mysqli_num_rows($result) > 0) {\n// output data of each row\nwhile($row = mysqli_fetch_assoc($result)) {\necho \"id: \" . $row[\"id\"]. \" - Name: \" . $row[\"firstname\"]. \" \" . $row[\"lastname\"]. \"<br>\";\n}\n} else {\necho \"0 results\";\n}\n\nmysqli_close($conn);\n?>",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error) {\ndie(\"Connection failed: \" . $conn->connect_error);\n}\n\n$sql = \"SELECT id, firstname, lastname FROM MyGuests WHERE lastname='Doe'\";\n$result = $conn->query($sql);\n\nif ($result->num_rows > 0) {\necho \"<table><tr><th>ID</th><th>Name</th></tr>\";\n// output data of each row\nwhile($row = $result->fetch_assoc()) {\necho \"<tr><td>\".$row[\"id\"].\"</td><td>\".$row[\"firstname\"].\" \".$row[\"lastname\"].\"</td></tr>\";\n}\necho \"</table>\";\n} else {\necho \"0 results\";\n}\n$conn->close();\n?>",
        "<?php\necho \"<table style='border: solid 1px black;'>\";\necho \"<tr><th>Id</th><th>Firstname</th><th>Lastname</th></tr>\";\n\nclass TableRows extends RecursiveIteratorIterator {\nfunction __construct($it) {\nparent::__construct($it, self::LEAVES_ONLY);\n}\n\nfunction current() {\nreturn \"<td style='width:150px;border:1px solid black;'>\" . parent::current(). \"</td>\";\n}\n\nfunction beginChildren() {\necho \"<tr>\";\n}\n\nfunction endChildren() {\necho \"</tr>\" . \"\\n\";\n}\n}\n\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDBPDO\";\n\ntry {\n$conn = new PDO(\"mysql:host=$servername;dbname=$dbname\", $username, $password);\n$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n$stmt = $conn->prepare(\"SELECT id, firstname, lastname FROM MyGuests WHERE lastname='Doe'\");\n$stmt->execute();\n\n// set the resulting array to associative\n$result = $stmt->setFetchMode(PDO::FETCH_ASSOC);\nforeach(new TableRows(new RecursiveArrayIterator($stmt->fetchAll())) as $k=>$v) {\necho $v;\n}\n}\ncatch(PDOException $e) {\necho \"Error: \" . $e->getMessage();\n}\n$conn = null;\necho \"</table>\";\n?>",
        "function num_rows()",
        "fetch_assoc()",
        "while()"
      ]
    },
    {
      "title": "PHP MySQL Use The ORDER BY Clause",
      "summary": "Select and Order Data From a MySQL Database\nThe ORDER BY clause is used to sort the result-set in ascending or descending order.\nThe ORDER BY clause sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.\nTo learn more about SQL, please visit our SQL tutorial.\nSelect and Order Data With MySQLi\nThe following example selects the id, firstname and lastname columns from the MyGuests table. The records will be ordered by the lastname column:\nExample (MySQLi Object-oriented)Get your own PHP Server\nCode lines to explain from the example above:\nFirst, we set up the SQL query that selects the id, firstname and lastname columns from the MyGuests table. The records will be ordered by the lastname column. The next line of code runs the query and puts the resulting data into a variable called $result.\nThen, the function num_rows() checks if there are more than zero rows returned.\nIf there are more than zero rows returned, the function fetch_assoc() puts all the results into an associative array that we can loop through. The while() loop loops through the result set and outputs the data from the id, firstname and lastname columns.\nThe following example shows the same as the example above, in the MySQLi procedural way:\nExample (MySQLi Procedural)\nREMOVE ADS\nYou can also put the result in an HTML table:\nExample (MySQLi Object-oriented)\nSelect Data With PDO (+ Prepared Statements)\nThe following example uses prepared statements.\nHere we select the id, firstname and lastname columns from the MyGuests table. The records will be ordered by the lastname column, and it will be displayed in an HTML table:\nExample (PDO)",
      "examples": [
        "SELECT column_name(s) FROM table_name ORDER BY column_name(s) ASC|DESC",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error) {\ndie(\"Connection failed: \" . $conn->connect_error);\n}\n\n$sql = \"SELECT id, firstname, lastname FROM MyGuests ORDER BY lastname\";\n$result = $conn->query($sql);\n\nif ($result->num_rows > 0) {\n// output data of each row\nwhile($row = $result->fetch_assoc()) {\necho \"id: \" . $row[\"id\"]. \" - Name: \" . $row[\"firstname\"]. \" \" . $row[\"lastname\"]. \"<br>\";\n}\n} else {\necho \"0 results\";\n}\n$conn->close();\n?>",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = mysqli_connect($servername, $username, $password, $dbname);\n// Check connection\nif (!$conn)Â {\ndie(\"Connection failed: \" . mysqli_connect_error());\n}\n\n$sql = \"SELECT id, firstname, lastname FROM MyGuests ORDER BY lastname\";\n$result = mysqli_query($conn, $sql);\n\nif (mysqli_num_rows($result) > 0) {\n// output data of each row\nwhile($row = mysqli_fetch_assoc($result)) {\necho \"id: \" . $row[\"id\"]. \" - Name: \" . $row[\"firstname\"]. \" \" . $row[\"lastname\"]. \"<br>\";\n}\n} else {\necho \"0 results\";\n}\n\nmysqli_close($conn);\n?>",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error) {\ndie(\"Connection failed: \" . $conn->connect_error);\n}\n\n$sql = \"SELECT id, firstname, lastname FROM MyGuests ORDER BY lastname\";\n$result = $conn->query($sql);\n\nif ($result->num_rows > 0) {\necho \"<table><tr><th>ID</th><th>Name</th></tr>\";\n// output data of each row\nwhile($row = $result->fetch_assoc()) {\necho \"<tr><td>\".$row[\"id\"].\"</td><td>\".$row[\"firstname\"].\" \".$row[\"lastname\"].\"</td></tr>\";\n}\necho \"</table>\";\n} else {\necho \"0 results\";\n}\n$conn->close();\n?>",
        "<?php\necho \"<table style='border: solid 1px black;'>\";\necho \"<tr><th>Id</th><th>Firstname</th><th>Lastname</th></tr>\";\n\nclass TableRows extends RecursiveIteratorIterator {\nfunction __construct($it) {\nparent::__construct($it, self::LEAVES_ONLY);\n}\n\nfunction current() {\nreturn \"<td style='width:150px;border:1px solid black;'>\" . parent::current(). \"</td>\";\n}\n\nfunction beginChildren() {\necho \"<tr>\";\n}\n\nfunction endChildren() {\necho \"</tr>\" . \"\\n\";\n}\n}\n\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDBPDO\";\n\ntry {\n$conn = new PDO(\"mysql:host=$servername;dbname=$dbname\", $username, $password);\n$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n$stmt = $conn->prepare(\"SELECT id, firstname, lastname FROM MyGuests ORDER BY lastname\");\n$stmt->execute();\n\n// set the resulting array to associative\n$result = $stmt->setFetchMode(PDO::FETCH_ASSOC);\nforeach(new TableRows(new RecursiveArrayIterator($stmt->fetchAll())) as $k=>$v) {\necho $v;\n}\n} catch(PDOException $e) {\necho \"Error: \" . $e->getMessage();\n}\n$conn = null;\necho \"</table>\";\n?>",
        "function num_rows()",
        "fetch_assoc()",
        "while()"
      ]
    },
    {
      "title": "PHP MySQL Delete Data",
      "summary": "Delete Data From a MySQL Table Using MySQLi and PDO\nThe DELETE statement is used to delete records from a table:\nNotice the WHERE clause in the DELETE syntax: The WHERE clause specifies which record or records that should be deleted. If you omit the WHERE clause, all records will be deleted!\nTo learn more about SQL, please visit our SQL tutorial.\nLet's look at the \"MyGuests\" table:\nThe following examples delete the record with id=3 in the \"MyGuests\" table:\nExample (MySQLi Object-oriented)Get your own PHP Server\nREMOVE ADS\nExample (MySQLi Procedural)\nExample (PDO)\nAfter the record is deleted, the table will look like this:",
      "examples": [
        "DELETE FROM table_name\nWHERE some_column = some_value",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error)Â {\ndie(\"Connection failed: \" . $conn->connect_error);\n}\n\n// sql to delete a record\n$sql = \"DELETE FROM MyGuests WHERE id=3\";\n\nif ($conn->query($sql) === TRUE) {\necho \"Record deleted successfully\";\n} else {\necho \"Error deleting record: \" . $conn->error;\n}\n\n$conn->close();\n?>",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = mysqli_connect($servername, $username, $password, $dbname);\n// Check connection\nif (!$conn)Â {\ndie(\"Connection failed: \" . mysqli_connect_error());\n}\n\n// sql to delete a record\n$sql = \"DELETE FROM MyGuests WHERE id=3\";\n\nif (mysqli_query($conn, $sql)) {\necho \"Record deleted successfully\";\n} else {\necho \"Error deleting record: \" . mysqli_error($conn);\n}\n\nmysqli_close($conn);\n?>",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDBPDO\";\n\ntry {\n$conn = new PDO(\"mysql:host=$servername;dbname=$dbname\", $username, $password);\n// set the PDO error mode to exception\n$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n// sql to delete a record\n$sql = \"DELETE FROM MyGuests WHERE id=3\";\n\n// use exec() because no results are returned\n$conn->exec($sql);\necho \"Record deleted successfully\";\n} catch(PDOException $e) {\necho $sql . \"<br>\" . $e->getMessage();\n}\n\n$conn = null;\n?>"
      ]
    },
    {
      "title": "PHP MySQL Update Data",
      "summary": "Update Data In a MySQL Table Using MySQLi and PDO\nThe UPDATE statement is used to update existing records in a table:\nNotice the WHERE clause in the UPDATE syntax: The WHERE clause specifies which record or records that should be updated. If you omit the WHERE clause, all records will be updated!\nTo learn more about SQL, please visit our SQL tutorial.\nLet's look at the \"MyGuests\" table:\nThe following examples update the record with id=2 in the \"MyGuests\" table:\nExample (MySQLi Object-oriented)Get your own PHP Server\nREMOVE ADS\nExample (MySQLi Procedural)\nExample (PDO)\nAfter the record is updated, the table will look like this:",
      "examples": [
        "UPDATE table_name\nSET column1=value, column2=value2,...\nWHERE some_column=some_value",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error)Â {\ndie(\"Connection failed: \" . $conn->connect_error);\n}\n\n$sql = \"UPDATE MyGuests SET lastname='Doe' WHERE id=2\";\n\nif ($conn->query($sql) === TRUE) {\necho \"Record updated successfully\";\n} else {\necho \"Error updating record: \" . $conn->error;\n}\n\n$conn->close();\n?>",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = mysqli_connect($servername, $username, $password, $dbname);\n// Check connection\nif (!$conn)Â {\ndie(\"Connection failed: \" . mysqli_connect_error());\n}\n\n$sql = \"UPDATE MyGuests SET lastname='Doe' WHERE id=2\";\n\nif (mysqli_query($conn, $sql)) {\necho \"Record updated successfully\";\n} else {\necho \"Error updating record: \" . mysqli_error($conn);\n}\n\nmysqli_close($conn);\n?>",
        "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDBPDO\";\n\ntry {\n$conn = new PDO(\"mysql:host=$servername;dbname=$dbname\", $username, $password);\n// set the PDO error mode to exception\n$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n$sql = \"UPDATE MyGuests SET lastname='Doe' WHERE id=2\";\n\n// Prepare statement\n$stmt = $conn->prepare($sql);\n\n// execute the query\n$stmt->execute();\n\n// echo a message to say the UPDATE succeeded\necho $stmt->rowCount() . \" records UPDATED successfully\";\n} catch(PDOException $e) {\necho $sql . \"<br>\" . $e->getMessage();\n}\n\n$conn = null;\n?>"
      ]
    },
    {
      "title": "PHP MySQL Limit Data Selections",
      "summary": "Limit Data Selections From a MySQL Database\nMySQL provides a LIMIT clause that is used to specify the number of records to return.\nThe LIMIT clause makes it easy to code multi page results or pagination with SQL, and is very useful on large tables. Returning a large number of records can impact on performance.\nAssume we wish to select all records from 1 - 30 (inclusive) from a table called \"Orders\". The SQL query would then look like this:\nWhen the SQL query above is run, it will return the first 30 records.\nWhat if we want to select records 16 - 25 (inclusive)?\nMysql also provides a way to handle this: by using OFFSET.\nThe SQL query below says \"return only 10 records, start on record 16 (OFFSET 15)\":\nYou could also use a shorter syntax to achieve the same result:\nNotice that the numbers are reversed when you use a comma.",
      "examples": [
        "$sql = \"SELECT * FROM Orders LIMIT 30\";",
        "$sql = \"SELECT * FROM Orders LIMIT 10 OFFSET 15\";",
        "$sql = \"SELECT * FROM Orders LIMIT 15, 10\";"
      ]
    },
    {
      "title": "PHP XML Parsers",
      "summary": "What is XML?\nThe XML language is a way to structure data for sharing across websites.\nSeveral web technologies like RSS Feeds and Podcasts are written in XML.\nXML is easy to create. It looks a lot like HTML, except that you make up your own tags.\nIf you want to learn more about XML, please visit our XML tutorial.\nWhat is an XML Parser?\nTo read and update, create and manipulate an XML document, you will need an XML parser.\nIn PHP there are two major types of XML parsers:\nTree-Based Parsers\nEvent-Based Parsers\nTree-Based Parsers\nTree-based parsers holds the entire document in Memory and transforms the XML document into a Tree structure. It analyzes the whole document, and provides access to the Tree elements (DOM).\nThis type of parser is a better option for smaller XML documents, but not for large XML document as it causes major performance issues.\nExample of tree-based parsers:\nSimpleXML\nDOM\nEvent-Based Parsers\nEvent-based parsers do not hold the entire document in Memory, instead, they read in one node at a time and allow you to interact with in real time. Once you move onto the next node, the old one is thrown away.\nThis type of parser is well suited for large XML documents. It parses faster and consumes less memory.\nExample of event-based parsers:\nXMLReader\nXML Expat Parser",
      "examples": []
    },
    {
      "title": "PHP SimpleXML Parser",
      "summary": "SimpleXML is a PHP extension that allows us to easily manipulate and get XML data.\nThe SimpleXML Parser\nSimpleXML is a tree-based parser.\nSimpleXML provides an easy way of getting an element's name, attributes and textual content if you know the XML document's structure or layout.\nSimpleXML turns an XML document into a data structure you can iterate through like a collection of arrays and objects.\nCompared to DOM or the Expat parser, SimpleXML takes a fewer lines of code to read text data from an element.\nInstallation\nFrom PHP 5, the SimpleXML functions are part of the PHP core. No installation is required to use these functions.\nPHP SimpleXML - Read From String\nThe PHP simplexml_load_string() function is used to read XML data from a string.\nAssume we have a variable that contains XML data, like this:\nThe example below shows how to use the simplexml_load_string() function to read XML data from a string:\nExampleGet your own PHP Server\nThe output of the code above will be:\nError Handling Tip: Use the libxml functionality to retrieve all XML errors when loading the document and then iterate over the errors. The following example tries to load a broken XML string:\nExample\nThe output of the code above will be:\nREMOVE ADS\nPHP SimpleXML - Read From File\nThe PHP simplexml_load_file() function is used to read XML data from a file.\nAssume we have an XML file called \"note.xml\", that looks like this:\nThe example below shows how to use the simplexml_load_file() function to read XML data from a file:\nExample\nThe output of the code above will be:\nTip: The next chapter shows how to get/retrieve node values from an XML file with SimpleXML!\nMore PHP SimpleXML\nFor more information about the PHP SimpleXML functions, visit our PHP SimpleXML Reference.",
      "examples": [
        "$myXMLData =\n\"<?xml version='1.0' encoding='UTF-8'?>\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>\";",
        "<?php\n$myXMLData =\n\"<?xml version='1.0' encoding='UTF-8'?>\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>\";\n\n$xml=simplexml_load_string($myXMLData) or die(\"Error: Cannot create object\");\nprint_r($xml);\n?>",
        "SimpleXMLElement Object ( [to] => Tove [from] => Jani [heading] => Reminder [body] => Don't forget me this weekend! )",
        "<?php\nlibxml_use_internal_errors(true);\n$myXMLData =\n\"<?xml version='1.0' encoding='UTF-8'?>\n<document>\n<user>John Doe</wronguser>\n<email>john@example.com</wrongemail>\n</document>\";\n\n$xml = simplexml_load_string($myXMLData);\nif ($xml === false) {\necho \"Failed loading XML: \";\nforeach(libxml_get_errors() as $error) {\necho \"<br>\", $error->message;\n}\n} else {\nprint_r($xml);\n}\n?>",
        "Failed loading XML:\nOpening and ending tag mismatch: user line 3 and wronguser\nOpening and ending tag mismatch: email line 4 and wrongemail",
        "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>",
        "<?php\n$xml=simplexml_load_file(\"note.xml\") or die(\"Error: Cannot create object\");\nprint_r($xml);\n?>",
        "simplexml_load_string()",
        "simplexml_load_file()"
      ]
    },
    {
      "title": "PHP SimpleXML - Get Node/Attribute Values",
      "summary": "SimpleXML is a PHP extension that allows us to easily manipulate and get XML data.\nPHP SimpleXML - Get Node Values\nGet the node values from the \"note.xml\" file:\nExampleGet your own PHP Server\nThe output of the code above will be:\nAnother XML File\nAssume we have an XML file called \"books.xml\", that looks like this:\nREMOVE ADS\nPHP SimpleXML - Get Node Values of Specific Elements\nThe following example gets the node value of the <title> element in the first and second <book> elements in the \"books.xml\" file:\nExample\nThe output of the code above will be:\nPHP SimpleXML - Get Node Values - Loop\nThe following example loops through all the <book> elements in the \"books.xml\" file, and gets the node values of the <title>, <author>, <year>, and <price> elements:\nExample\nThe output of the code above will be:\nPHP SimpleXML - Get Attribute Values\nThe following example gets the attribute value of the \"category\" attribute of the first <book> element and the attribute value of the \"lang\" attribute of the <title> element in the second <book> element:\nExample\nThe output of the code above will be:\nPHP SimpleXML - Get Attribute Values - Loop\nThe following example gets the attribute values of the <title> elements in the \"books.xml\" file:\nExample\nThe output of the code above will be:\nMore PHP SimpleXML\nFor more information about the PHP SimpleXML functions, visit our PHP SimpleXML Reference.",
      "examples": [
        "<?php\n$xml=simplexml_load_file(\"note.xml\") or die(\"Error: Cannot create object\");\necho $xml->to . \"<br>\";\necho $xml->from . \"<br>\";\necho $xml->heading . \"<br>\";\necho $xml->body;\n?>",
        "Tove\nJani\nReminder\nDon't forget me this weekend!",
        "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<bookstore>\n<book category=\"COOKING\">\n<title lang=\"en\">Everyday Italian</title>\n<author>Giada De Laurentiis</author>\n<year>2005</year>\n<price>30.00</price>\n</book>\n<book category=\"CHILDREN\">\n<title lang=\"en\">Harry Potter</title>\n<author>J K. Rowling</author>\n<year>2005</year>\n<price>29.99</price>\n</book>\n<book category=\"WEB\">\n<title lang=\"en-us\">XQuery Kick Start</title>\n<author>James McGovern</author>\n<year>2003</year>\n<price>49.99</price>\n</book>\n<book category=\"WEB\">\n<title lang=\"en-us\">Learning XML</title>\n<author>Erik T. Ray</author>\n<year>2003</year>\n<price>39.95</price>\n</book>\n</bookstore>",
        "<?php\n$xml=simplexml_load_file(\"books.xml\") or die(\"Error: Cannot create object\");\necho $xml->book[0]->title . \"<br>\";\necho $xml->book[1]->title;\n?>",
        "Everyday Italian\nHarry Potter",
        "<?php\n$xml=simplexml_load_file(\"books.xml\") or die(\"Error: Cannot create object\");\nforeach($xml->children() as $books) {\necho $books->title . \", \";\necho $books->author . \", \";\necho $books->year . \", \";\necho $books->price . \"<br>\";\n}\n?>",
        "Everyday Italian, Giada De Laurentiis, 2005, 30.00\nHarry Potter, J K. Rowling, 2005, 29.99\nXQuery Kick Start, James McGovern, 2003, 49.99\nLearning XML, Erik T. Ray, 2003, 39.95",
        "<?php\n$xml=simplexml_load_file(\"books.xml\") or die(\"Error: Cannot create object\");\necho $xml->book[0]['category'] . \"<br>\";\necho $xml->book[1]->title['lang'];\n?>",
        "COOKING\nen",
        "<?php\n$xml=simplexml_load_file(\"books.xml\") or die(\"Error: Cannot create object\");\nforeach($xml->children() as $books) {\necho $books->title['lang'];\necho \"<br>\";\n}\n?>",
        "en\nen\nen-us\nen-us"
      ]
    },
    {
      "title": "PHP XML Expat Parser",
      "summary": "The built-in XML Expat Parser makes it possible to process XML documents in PHP.\nThe XML Expat Parser\nThe Expat parser is an event-based parser.\nLook at the following XML fraction:\nAn event-based parser reports the XML above as a series of three events:\nStart element: from\nStart CDATA section, value: Jani\nClose element: from\nThe XML Expat Parser functions are part of the PHP core. There is no installation needed to use these functions.\nThe XML File\nThe XML file \"note.xml\" will be used in the example below:\nREMOVE ADS\nInitializing the XML Expat Parser\nWe want to initialize the XML Expat Parser in PHP, define some handlers for different XML events, and then parse the XML file.\nExampleGet your own PHP Server\nExample explained:\nInitialize the XML parser with the xml_parser_create() function\nCreate functions to use with the different event handlers\nAdd the xml_set_element_handler() function to specify which function will be executed when the parser encounters the opening and closing tags\nAdd the xml_set_character_data_handler() function to specify which function will execute when the parser encounters character data\nParse the file \"note.xml\" with the xml_parse() function\nIn case of an error, add xml_error_string() function to convert an XML error to a textual description\nCall the xml_parser_free() function to release the memory allocated with the xml_parser_create() function\nMore PHP XML Expat Parser\nFor more information about the PHP Expat functions, visit our PHP XML Parser Reference.",
      "examples": [
        "<from>Jani</from>",
        "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>",
        "<?php\n// Initialize the XML parser\n$parser=xml_parser_create();\n\n// Function to use at the start of an element\nfunction start($parser,$element_name,$element_attrs)Â {\nswitch($element_name)Â {\ncase \"NOTE\":\necho \"-- Note --<br>\";\nbreak;\ncase \"TO\":\necho \"To: \";\nbreak;\ncase \"FROM\":\necho \"From: \";\nbreak;\ncase \"HEADING\":\necho \"Heading: \";\nbreak;\ncase \"BODY\":\necho \"Message: \";\n}\n}\n\n// Function to use at the end of an element\nfunction stop($parser,$element_name)Â {\necho \"<br>\";\n}\n\n// Function to use when finding character data\nfunction char($parser,$data)Â {\necho $data;\n}\n\n// Specify element handler\nxml_set_element_handler($parser,\"start\",\"stop\");\n\n// Specify data handler\nxml_set_character_data_handler($parser,\"char\");\n\n// Open XML file\n$fp=fopen(\"note.xml\",\"r\");\n\n// Read data\nwhile ($data=fread($fp,4096))Â {\nxml_parse($parser,$data,feof($fp)) or\ndie (sprintf(\"XML Error: %s at line %d\",\nxml_error_string(xml_get_error_code($parser)),\nxml_get_current_line_number($parser)));\n}\n\n// Free the XML parser\nxml_parser_free($parser);\n?>",
        "xml_parser_create()",
        "xml_set_element_handler()",
        "xml_set_character_data_handler()",
        "xml_parse()",
        "xml_error_string()",
        "xml_parser_free()"
      ]
    },
    {
      "title": "PHP XML DOM Parser",
      "summary": "The built-in DOM parser makes it possible to process XML documents in PHP.\nThe XML DOM Parser\nThe DOM parser is a tree-based parser.\nLook at the following XML document fraction:\nThe DOM sees the XML above as a tree structure:\nLevel 1: XML Document\nLevel 2: Root element: <from>\nLevel 3: Text element: \"Jani\"\nInstallation\nThe DOM parser functions are part of the PHP core. There is no installation needed to use these functions.\nThe XML File\nThe XML file below (\"note.xml\") will be used in our example:\nREMOVE ADS\nLoad and Output XML\nWe want to initialize the XML parser, load the xml, and output it:\nThe output of the code above will be:\nIf you select \"View source\" in the browser window, you will see the following HTML:\nThe example above creates a DOMDocument-Object and loads the XML from \"note.xml\" into it.\nThen the saveXML() function puts the internal XML document into a string, so we can output it.\nLooping through XML\nWe want to initialize the XML parser, load the XML, and loop through all elements of the <note> element:\nThe output of the code above will be:\nIn the example above you see that there are empty text nodes between each element.\nWhen XML generates, it often contains white-spaces between the nodes. The XML DOM parser treats these as ordinary elements, and if you are not aware of them, they sometimes cause problems.\nIf you want to learn more about the XML DOM, please visit our XML tutorial.",
      "examples": [
        "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<from>Jani</from>",
        "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>",
        "<?php\n$xmlDoc = new DOMDocument();\n$xmlDoc->load(\"note.xml\");\n\nprint $xmlDoc->saveXML();\n?>",
        "Tove Jani Reminder Don't forget me this weekend!",
        "<?php\n$xmlDoc = new DOMDocument();\n$xmlDoc->load(\"note.xml\");\n\n$x = $xmlDoc->documentElement;\nforeach ($x->childNodes AS $item) {\nprint $item->nodeName . \" = \" . $item->nodeValue . \"<br>\";\n}\n?>",
        "#text =\nto = Tove\n#text =\nfrom = Jani\n#text =\nheading = Reminder\n#text =\nbody = Don't forget me this weekend!\n#text ="
      ]
    },
    {
      "title": "PHP - AJAX Introduction",
      "summary": "AJAX is about updating parts of a web page, without reloading the whole page.\nWhat is AJAX?\nAJAX = Asynchronous JavaScript and XML.\nAJAX is a technique for creating fast and dynamic web pages.\nAJAX allows web pages to be updated asynchronously by exchanging small amounts of data with the server behind the scenes. This means that it is possible to update parts of a web page, without reloading the whole page.\nClassic web pages, (which do not use AJAX) must reload the entire page if the content should change.\nExamples of applications using AJAX: Google Maps, Gmail, Youtube, and Facebook tabs.\nHow AJAX Works\nAJAX is Based on Internet Standards\nAJAX is based on internet standards, and uses a combination of:\nXMLHttpRequest object (to exchange data asynchronously with a server)\nJavaScript/DOM (to display/interact with the information)\nCSS (to style the data)\nXML (often used as the format for transferring data)\nAJAX applications are browser- and platform-independent!\nGoogle Suggest\nAJAX was made popular in 2005 by Google, with Google Suggest.\nGoogle Suggest is using AJAX to create a very dynamic web interface: When you start typing in Google's search box, a JavaScript sends the letters off to a server and the server returns a list of suggestions.\nStart Using AJAX Today\nIn our PHP tutorial, we will demonstrate how AJAX can update parts of a web page, without reloading the whole page. The server script will be written in PHP.\nIf you want to learn more about AJAX, visit our AJAX tutorial.",
      "examples": []
    },
    {
      "title": "PHP - AJAX and PHP",
      "summary": "AJAX is used to create more interactive applications.\nAJAX PHP Example\nThe following example will demonstrate how a web page can communicate with a web server while a user type characters in an input field:\nExampleGet your own PHP Server\nStart typing a name in the input field below:\nSuggestions:\nExample Explained\nIn the example above, when a user types a character in the input field, a function called showHint() is executed.\nThe function is triggered by the onkeyup event.\nHere is the HTML code:\nExample\nCode explanation:\nFirst, check if the input field is empty (str.length == 0). If it is, clear the content of the txtHint placeholder and exit the function.\nHowever, if the input field is not empty, do the following:\nCreate an XMLHttpRequest object\nCreate the function to be executed when the server response is ready\nSend the request off to a PHP file (gethint.php) on the server\nNotice that q parameter is added to the url (gethint.php?q=\" + str)\nAnd the str variable holds the content of the input field\nREMOVE ADS\nThe PHP File - \"gethint.php\"\nThe PHP file checks an array of names, and returns the corresponding name(s) to the browser:",
      "examples": [
        "<html> <head> <script> function showHint(str) { if (str.length == 0) { document.getElementById(\"txtHint\").innerHTML = \"\"; return; } else { var xmlhttp = new XMLHttpRequest(); xmlhttp.onreadystatechange = function() { if (this.readyState == 4 && this.status == 200) { document.getElementById(\"txtHint\").innerHTML = this.responseText; } }; xmlhttp.open(\"GET\", \"gethint.php?q=\" + str, true); xmlhttp.send(); } } </script> </head> <body> <p><b>Start typing a name in the input field below:</b></p> <form action=\"\"> <label for=\"fname\">First name:</label> <input type=\"text\" id=\"fname\" name=\"fname\" onkeyup=\"showHint(this.value)\"> </form> <p>Suggestions: <span id=\"txtHint\"></span></p> </body> </html>",
        "// Array with names $a[] = \"Anna\"; $a[] = \"Brittany\"; $a[] = \"Cinderella\"; $a[] = \"Diana\"; $a[] = \"Eva\"; $a[] = \"Fiona\"; $a[] = \"Gunda\"; $a[] = \"Hege\"; $a[] = \"Inga\"; $a[] = \"Johanna\"; $a[] = \"Kitty\"; $a[] = \"Linda\"; $a[] = \"Nina\"; $a[] = \"Ophelia\"; $a[] = \"Petunia\"; $a[] = \"Amanda\"; $a[] = \"Raquel\"; $a[] = \"Cindy\"; $a[] = \"Doris\"; $a[] = \"Eve\"; $a[] = \"Evita\"; $a[] = \"Sunniva\"; $a[] = \"Tove\"; $a[] = \"Unni\"; $a[] = \"Violet\"; $a[] = \"Liza\"; $a[] = \"Elizabeth\"; $a[] = \"Ellen\"; $a[] = \"Wenche\"; $a[] = \"Vicky\"; // get the q parameter from URL $q = $_REQUEST[\"q\"]; $hint = \"\"; // lookup all hints from array if $q is different from \"\" if ($q !== \"\") { $q = strtolower($q); $len=strlen($q); foreach($a as $name) { if (stristr($q, substr($name, 0, $len))) { if ($hint === \"\") { $hint = $name; } else { $hint .= \", $name\"; } } } } // Output \"no suggestion\" if no hint was found or output correct values echo $hint === \"\" ? \"no suggestion\" : $hint;",
        "showHint()",
        "XMLHttpRequest",
        "q",
        "(gethint.php?q=\" + str)",
        "str"
      ]
    },
    {
      "title": "PHP - AJAX and MySQL",
      "summary": "AJAX can be used for interactive communication with a database.\nAJAX Database Example\nThe following example will demonstrate how a web page can fetch information from a database with AJAX:\nExampleGet your own PHP Server\nExample Explained - The MySQL Database\nThe database table we use in the example above looks like this:\nExample Explained\nIn the example above, when a user selects a person in the dropdown list above, a function called showUser() is executed.\nThe function is triggered by the onchange event.\nHere is the HTML code:\nExample\nCode explanation:\nFirst, check if person is selected. If no person is selected (str == \"\"), clear the content of txtHint and exit the function. If a person is selected, do the following:\nCreate an XMLHttpRequest object\nCreate the function to be executed when the server response is ready\nSend the request off to a file on the server\nNotice that a parameter q is added to the URL (with the content of the dropdown list)\nREMOVE ADS\nThe PHP File\nThe page on the server called by the JavaScript above is a PHP file called family.php.\nThe source code in family.php runs a query against a MySQL database, and returns the result in an HTML table:\nExplanation: When the query is sent from the JavaScript to the PHP file, the following happens:\nPHP opens a connection to a MySQL server\nThe correct person is found\nAn HTML table is created, filled with data, and sent back to the txtHint placeholder",
      "examples": [
        "<html> <head> <script> function showUser(str) { if (str == \"\") { document.getElementById(\"txtHint\").innerHTML = \"\"; return; } else { var xmlhttp = new XMLHttpRequest(); xmlhttp.onreadystatechange = function() { if (this.readyState == 4 && this.status == 200) { document.getElementById(\"txtHint\").innerHTML = this.responseText; } }; xmlhttp.open(\"GET\",\"family.php?q=\"+str,true); xmlhttp.send(); } } </script> </head> <body> <form> <select name=\"users\" onchange=\"showUser(this.value)\"> <option value=\"\">Select a person:</option> <option value=\"1\">Peter Griffin</option> <option value=\"2\">Lois Griffin</option> <option value=\"3\">Joseph Swanson</option> <option value=\"4\">Glenn Quagmire</option> </select> </form> <br> <div id=\"txtHint\"><b>Person info will be listed here...</b></div> </body> </html>",
        "$q = intval($_GET['q']); $con = mysqli_connect('localhost','peter','abc123'); if (!$con) { die('Could not connect: ' . mysqli_error($con)); } mysqli_select_db($con,\"ajax_demo\"); $sql=\"SELECT * FROM user WHERE id = '\".$q.\"'\"; $result = mysqli_query($con,$sql); echo \"<table> <tr> <th>Firstname</th> <th>Lastname</th> <th>Age</th> <th>Hometown</th> <th>Job</th> </tr>\"; while($row = mysqli_fetch_array($result)) { echo \"<tr>\"; echo \"<td>\" . $row['FirstName'] . \"</td>\"; echo \"<td>\" . $row['LastName'] . \"</td>\"; echo \"<td>\" . $row['Age'] . \"</td>\"; echo \"<td>\" . $row['Hometown'] . \"</td>\"; echo \"<td>\" . $row['Job'] . \"</td>\"; echo \"</tr>\"; } echo \"</table>\"; mysqli_close($con);",
        "showUser()",
        "onchange",
        "txtHint",
        "XMLHttpRequest",
        "q",
        "family.php"
      ]
    },
    {
      "title": "PHP Example - AJAX and XML",
      "summary": "AJAX can be used for interactive communication with an XML file.\nAJAX XML Example\nThe following example will demonstrate how a web page can fetch information from an XML file with AJAX:\nExampleGet your own PHP Server\nExample Explained - The HTML Page\nWhen a user selects a CD in the dropdown list above, a function called \"showCD()\" is executed. The function is triggered by the \"onchange\" event:\nThe showCD() function does the following:\nCheck if a CD is selected\nCreate an XMLHttpRequest object\nCreate the function to be executed when the server response is ready\nSend the request off to a file on the server\nNotice that a parameter (q) is added to the URL (with the content of the dropdown list)\nREMOVE ADS\nThe PHP File\nThe page on the server called by the JavaScript above is a PHP file called \"getcd.php\".\nThe PHP script loads an XML document, \"cd_catalog.xml\", runs a query against the XML file, and returns the result as HTML:\nWhen the CD query is sent from the JavaScript to the PHP page, the following happens:\nPHP creates an XML DOM object\nFind all <artist> elements that matches the name sent from the JavaScript\nOutput the album information (send to the \"txtHint\" placeholder)",
      "examples": [
        "<html>\n<head>\n<script>\nfunction showCD(str) {\nif (str==\"\") {\ndocument.getElementById(\"txtHint\").innerHTML=\"\";\nreturn;\n}\nvar xmlhttp=new XMLHttpRequest();\nxmlhttp.onreadystatechange=function() {\nif (this.readyState==4 && this.status==200) {\ndocument.getElementById(\"txtHint\").innerHTML=this.responseText;\n}\n}\nxmlhttp.open(\"GET\",\"getcd.php?q=\"+str,true);\nxmlhttp.send();\n}\n</script>\n</head>\n<body>\n\n<form>\nSelect a CD:\n<select name=\"cds\" onchange=\"showCD(this.value)\">\n<option value=\"\">Select a CD:</option>\n<option value=\"Bob Dylan\">Bob Dylan</option>\n<option value=\"Bee Gees\">Bee Gees</option>\n<option value=\"Cat Stevens\">Cat Stevens</option>\n</select>\n</form>\n<div id=\"txtHint\"><b>CD info will be listed here...</b></div>\n\n</body>\n</html>",
        "<?php\n$q=$_GET[\"q\"];\n\n$xmlDoc = new DOMDocument();\n$xmlDoc->load(\"cd_catalog.xml\");\n\n$x=$xmlDoc->getElementsByTagName('ARTIST');\n\nfor ($i=0; $i<=$x->length-1; $i++) {\n//Process only element nodes\nif ($x->item($i)->nodeType==1)Â {\nif ($x->item($i)->childNodes->item(0)->nodeValue == $q) {\n$y=($x->item($i)->parentNode);\n}\n}\n}\n\n$cd=($y->childNodes);\n\nfor ($i=0;$i<$cd->length;$i++) {\n//Process only element nodes\nif ($cd->item($i)->nodeType==1)Â {\necho(\"<b>\" . $cd->item($i)->nodeName . \":</b> \");\necho($cd->item($i)->childNodes->item(0)->nodeValue);\necho(\"<br>\");\n}\n}\n?>"
      ]
    },
    {
      "title": "PHP Example - AJAX Live Search",
      "summary": "AJAX can be used to create more user-friendly and interactive searches.\nAJAX Live Search\nThe following example will demonstrate a live search, where you get search results while you type.\nLive search has many benefits compared to traditional searching:\nResults are shown as you type\nResults narrow as you continue typing\nIf results become too narrow, remove characters to see a broader result\nSearch for a W3Schools page in the input field below:\nThe results in the example above are found in an XML file (links.xml). To make this example small and simple, only six results are available.\nExample Explained - The HTML Page\nWhen a user types a character in the input field above, the function \"showResult()\" is executed. The function is triggered by the \"onkeyup\" event:\nSource code explanation:\nIf the input field is empty (str.length==0), the function clears the content of the livesearch placeholder and exits the function.\nIf the input field is not empty, the showResult() function executes the following:\nCreate an XMLHttpRequest object\nCreate the function to be executed when the server response is ready\nSend the request off to a file on the server\nNotice that a parameter (q) is added to the URL (with the content of the input field)\nREMOVE ADS\nThe PHP File\nThe page on the server called by the JavaScript above is a PHP file called \"livesearch.php\".\nThe source code in \"livesearch.php\" searches an XML file for titles matching the search string and returns the result:\nIf there is any text sent from the JavaScript (strlen($q) > 0), the following happens:\nLoad an XML file into a new XML DOM object\nLoop through allÂ <title> elements to find matches from the text sent from the JavaScript\nSets the correct url and title in the \"$response\" variable. If more than one match is found, all matches are added to the variable\nIf no matches are found, the $response variable is set to \"no suggestion\"",
      "examples": [
        "<html>\n<head>\n<script>\nfunction showResult(str) {\nif (str.length==0) {\ndocument.getElementById(\"livesearch\").innerHTML=\"\";\ndocument.getElementById(\"livesearch\").style.border=\"0px\";\nreturn;\n}\nvar xmlhttp=new XMLHttpRequest();\nxmlhttp.onreadystatechange=function() {\nif (this.readyState==4 && this.status==200) {\ndocument.getElementById(\"livesearch\").innerHTML=this.responseText;\ndocument.getElementById(\"livesearch\").style.border=\"1px solid #A5ACB2\";\n}\n}\nxmlhttp.open(\"GET\",\"livesearch.php?q=\"+str,true);\nxmlhttp.send();\n}\n</script>\n</head>\n<body>\n\n<form>\n<input type=\"text\" size=\"30\" onkeyup=\"showResult(this.value)\">\n<div id=\"livesearch\"></div>\n</form>\n\n</body>\n</html>",
        "<?php\n$xmlDoc=new DOMDocument();\n$xmlDoc->load(\"links.xml\");\n\n$x=$xmlDoc->getElementsByTagName('link');\n\n//get the q parameter from URL\n$q=$_GET[\"q\"];\n\n//lookup all links from the xml file if length of q>0\nif (strlen($q)>0) {\n$hint=\"\";\nfor($i=0; $i<($x->length); $i++)Â {\n$y=$x->item($i)->getElementsByTagName('title');\n$z=$x->item($i)->getElementsByTagName('url');\nif ($y->item(0)->nodeType==1)Â {\n//find a link matching the search text\nif (stristr($y->item(0)->childNodes->item(0)->nodeValue,$q))Â {\nif ($hint==\"\")Â {\n$hint=\"<a href='\" .\n$z->item(0)->childNodes->item(0)->nodeValue .\n\"' target='_blank'>\" .\n$y->item(0)->childNodes->item(0)->nodeValue . \"</a>\";\n}Â elseÂ {\n$hint=$hint . \"<br /><a href='\" .\n$z->item(0)->childNodes->item(0)->nodeValue .\n\"' target='_blank'>\" .\n$y->item(0)->childNodes->item(0)->nodeValue . \"</a>\";\n}\n}\n}\n}\n}\n\n// Set output to \"no suggestion\" if no hint was found\n// or to the correct values\nif ($hint==\"\")Â {\n$response=\"no suggestion\";\n} elseÂ {\n$response=$hint;\n}\n\n//output the response\necho $response;\n?>"
      ]
    },
    {
      "title": "PHP Example - AJAX Poll",
      "summary": "AJAX Poll\nThe following example will demonstrate a poll where the result is shown without reloading.\nDo you like PHP and AJAX so far?\nExample Explained - The HTML Page\nWhen a user chooses an option above, a function called \"getVote()\" is executed. The function is triggered by the \"onclick\" event:\nThe getVote() function does the following:\nCreate an XMLHttpRequest object\nCreate the function to be executed when the server response is ready\nSend the request off to a file on the server\nNotice that a parameter (vote) is added to the URL (with the value of the yes or no option)\nREMOVE ADS\nThe PHP File\nThe page on the server called by the JavaScript above is a PHP file called \"poll_vote.php\":\nThe value is sent from the JavaScript, and the following happens:\nGet the content of the \"poll_result.txt\" file\nPut the content of the file in variables and add one to the selected variable\nWrite the result to the \"poll_result.txt\" file\nOutput a graphical representation of the poll result\nThe Text File\nThe text file (poll_result.txt) is where we store the data from the poll.\nIt is stored like this:\nThe first number represents the \"Yes\" votes, the second number represents the \"No\" votes.\nNote: Remember to allow your web server to edit the text file. Do NOT give everyone access, just the web server (PHP).",
      "examples": [
        "<html>\n<head>\n<script>\nfunction getVote(int) {\nvar xmlhttp=new XMLHttpRequest();\nxmlhttp.onreadystatechange=function() {\nif (this.readyState==4 && this.status==200) {\ndocument.getElementById(\"poll\").innerHTML=this.responseText;\n}\n}\nxmlhttp.open(\"GET\",\"poll_vote.php?vote=\"+int,true);\nxmlhttp.send();\n}\n</script>\n</head>\n<body>\n\n<div id=\"poll\">\n<h3>Do you like PHP and AJAX so far?</h3>\n<form>\nYes: <input type=\"radio\" name=\"vote\" value=\"0\" onclick=\"getVote(this.value)\"><br>\nNo: <input type=\"radio\" name=\"vote\" value=\"1\" onclick=\"getVote(this.value)\">\n</form>\n</div>\n\n</body>\n</html>",
        "<?php\n$vote = $_REQUEST['vote'];\n\n//get content of textfile\n$filename = \"poll_result.txt\";\n$content = file($filename);\n\n//put content in array\n$array = explode(\"||\", $content[0]);\n$yes = $array[0];\n$no = $array[1];\n\nif ($vote == 0)Â {\n$yes = $yes + 1;\n}\nif ($vote == 1)Â {\n$no = $no + 1;\n}\n\n//insert votes to txt file\n$insertvote = $yes.\"||\".$no;\n$fp = fopen($filename,\"w\");\nfputs($fp,$insertvote);\nfclose($fp);\n?>\n\n<h2>Result:</h2>\n<table>\n<tr>\n<td>Yes:</td>\n<td><img src=\"poll.gif\"\nwidth='<?php echo(100*round($yes/($no+$yes),2)); ?>'\nheight='20'>\n<?php echo(100*round($yes/($no+$yes),2)); ?>%\n</td>\n</tr>\n<tr>\n<td>No:</td>\n<td><img src=\"poll.gif\"\nwidth='<?php echo(100*round($no/($no+$yes),2)); ?>'\nheight='20'>\n<?php echo(100*round($no/($no+$yes),2)); ?>%\n</td>\n</tr>\n</table>",
        "0||0"
      ]
    },
    {
      "title": "PHP Examples",
      "summary": "PHP Syntax\nSyntax explained\nPHP Comments\nComments explained\nPHP Variables\nVariables explained\nPHP Echo and Print\nEcho and Print explained\nPHP Data Types\nData Types explained\nPHP Strings\nStrings explained\nPHP Numbers\nNumbers explained\nPHP Math\nMath explained\nPHP Constants\nConstants explained\nREMOVE ADS\nPHP Operators\nOperators explained\nPHP If...Else and Switch Statements\nConditions explained\nPHP While and For Loops\nLoops explained\nPHP Functions\nFunctions explained\nPHP Arrays\nArrays explained\nPHP Multidimensional Arrays\nMultidimensional Arrays explained\nPHP Sorting Arrays\nSorting Arrays explained\nPHP Superglobals\nSuperglobals explained\nPHP Regular Expressions\nRegular Expressions explained\nPHP Form Validation\nForm Validation explained\nPHP Date and Time\nDate and Time explained\nPHP Include Files\nInclude Files explained\nPHP File Handling\nFile Handling explained\nPHP File Open/Read/Close\nFile Open/Read/Close explained\nPHP Cookies\nCookies explained\nPHP Sessions\nSessions explained\nPHP Filters\nFilters explained\nPHP JSON\nPHP JSON explained\nPHP Exceptions\nPHP Exceptions explained\nPHP Classes/Objects\nPHP OOP (Classes/Objects) explained\nPHP Select Data From MySQL\nSelect Data From MySQL explained\nPHP SimpleXML Parser\nSimpleXML Parser explained\nPHP XML Expat Parser\nXML Expat Parser explained",
      "examples": []
    },
    {
      "title": "PHP Online Compiler",
      "summary": "PHP Compiler (Editor)\nWith our online PHP compiler, you can edit PHP code, and view the result in your browser.\nExample\nClick on the \"Try it Yourself\" button to see how it works.\nPublish Your Code\nCreate your own website and PHP applications with W3Schools Spaces.\nW3Schools Spaces is a website-building tool that enables you to create and share your own website, as well as develop and host your PHP applications.\nYou can change the website's look and how it works by editing the code right in your web browser.\nIt's easy to use and doesn't require any setup\nThe code editor is packed with features to help you achieve more:\nTemplates: Start from scratch or use a template\nCloud-based: no installations required. You only need your browser\nTerminal & Log: debug and troubleshoot your code easily\nFile Navigator: switch between files inside the code editor\nAnd much more!\nLearn Faster\nPractice is key to mastering coding, and the best way to put your PHP knowledge into practice is by getting practical with code.\nUse W3Schools Spaces to build, test and deploy code.\nThe code editor lets you write and practice different types of computer languages. It includes PHP, but you can use it for other languages too.\nNew languages are added all the time:\nIf you don't know PHP, we suggest that you read our PHP Tutorial from scratch.\nEasy Package Management\nGet an overview of your packages and easily add or delete frameworks and libraries. Then, with just one click, you can make changes to your packages without manual installation.\nBuild Powerful Websites\nYou can use the code editor in W3School Spaces to build frontend or full-stack websites from scratch.\nOr you can use the 60+ templates available and save time:\nCreate your Spaces account today and explore them all!\nShare Your Website With The World\nHost and publish your websites in no time with W3School Spaces.\nW3Schools subdomain and SSL certificate are included for free with W3School Spaces. An SSL certificate makes your website safe and secure. It also helps people trust your website and makes it easier to find it online.\nWant a custom domain for your website?\nYou can buy a domain or transfer an existing one and connect it to your space.\nHow Does It Work?\nGet started in a few clicks with W3School Spaces.",
      "examples": [
        "<?php\n$txt = \"PHP\";\necho \"I love $txt!\";\n?>",
        "I love PHP!"
      ]
    },
    {
      "title": "PHP Quiz",
      "summary": "You can test your PHP skills with W3Schools' Quiz.\nThe Test\nThe test contains 25 questions and there is no time limit.\nThe test is not official, it's just a nice way to see how much you know, or don't know, about PHP.\nCount Your Score\nYou will get 1 point for each correct answer. At the end of the Quiz, your total score will be displayed. Maximum score is 25 points.\nStart the Quiz\nGood luck!\nStart the PHP Quiz â¯\nIf you don't know PHP, we suggest that you read our PHP Tutorial from scratch.\nKickstart your career\nGet certified by completing the PHP course",
      "examples": []
    },
    {
      "title": "PHP Exercises",
      "summary": "Exercises\nTest your PHP skills with exercises from all categories:\nIntroduction\nSyntax\nComments\nVariables\nVariable Scope\nEcho and Print\nData Types\nStrings\nModify Strings\nConcatenate Strings\nSlice Strings\nNumbers\nCasting\nMath\nConstants\nOperators\nIf Statement\nIf Operators\nIf...Else\nSwitch\nLoops\nWhile Loops\nDo While Loops\nFor Loops\nForeach Loops\nFunctions\nArrays\nIndexed Arrays\nAssociative Arrays\nCreate Arrays\nAccess Arrays\nUpdate Arrays\nAdd Array Items\nRemove Array Items\nSorting Arrays\n$GLOBALS\n$_REQUEST\nReqular Expressions\nForms\nDates\nIncludes\nFile Handling\nCookies\nSession Variables\nJSON\nLog in to track your progress\nIf you haven't already, sign up to become a W3Schooler, and get points for every exercise you complete.\nAs a logged-in W3Schools user you will have access to many features like having your own web page, track your learning progress, receive personal guided paths, and more.\nThe Exercise\nWe have gathered a variety of PHP exercises from most of the chapters in our PHP Tutorial.\nThe exercises are a mix of \"multiple choice\" and \"fill in the blanks\" questions. There are between 3 and 6 questions in each category. The answer can be found in the corresponding tutorial chapter. If you're stuck, or answer wrong, you can try again or hit the \"Show Answer\" button to see the correct answer.\nKickstart your career\nGet certified by completing the PHP course",
      "examples": []
    },
    {
      "title": "PHP Server Create PHP Server Powerful Code Editor Practice Makes Perfect kAI",
      "summary": "Coding Skills\nAI Tutor\nProjects\nSecurely\nChoose your Plan\nBy subscribing to a plan you support the W3Schools mission to make\nlearning available to everyone - no matter their background.\n$0 /Forever\nThis is for you that are beginning to explore coding and web development\nTrack your progress\nSet your goals\nBuild and host 1 static website\n100 credits/month\nAccess various AI features like W3Schools kAI coding tutor and interview preparation.\nNo support\n$14.99 /Month\nThis is for you that want to learn and reach your goals faster. Build fullstack projects, ad free experience.\nAd-free experience\nUnlimited challenges\nUnlimited practice tests\nBuild and host 15 static websites\nBuild and host 1 full stack server\nChoose from 75+ templates\n10000 credits/month\nAccess various AI features like W3Schools kAI coding tutor and interview preparation.\nCancel anytime\nFor teachers\nSpend less time on admin tasks while engaging your students. Help them learn, practice and collaborate. All in one place.\nAd-free for focused learning\nDashboard to manage your classroom\nStudy plans for structured learning\nTrack progress with insights\nInteractive code challenges and projects\nAccess to all courses and certification exams\nSpaces for building and publishing projects\n25% OFF\nYou can also buy a domain or connect an existing one.\nSave Time with Templates\nJust landed in Spaces\nLearn to code more effectively\nand intelligently with kAI - AI tutor\nHi! I'm kAI, W3Schools AI Tutor...\nFeel free to ask me any coding-related questions, and I'll do my best to assist you.\nI can help you checking your code for errors, improving your code's structure, explaining coding concepts in a clear and understandable way, and more...\nI can even create complete websites for you based on your input, so what are you waiting for?\nSuper Simple to Share\nIncluded for free in all plans\nWant custom domains?\nHow it works\nCoding Made Easy\nCloud-based\nTerminal & Log\nHow To Libraries\nDatabase\nFile Navigator\nPackage Manager\nAnalytics\nEnvironment Manager\nSave Time & Money.\nAll Your Files in One Place.\nFix Your Code Faster.\nGet Full Data Visibility.\nIncreased Control and Security.\nFind What You Need Quicker.\nGet Traffic Insights.\nGet Inspired\nFrequently Asked Questions\nWith Basic Spaces, you can build frontend websites. Whereas with Fullstack Spaces, you can build frontend and backend websites.\nBasic Spaces include HTML, CSS, and Javascript. Full Stack Spaces include everything in Basic Spaces plus PHP, Python, React.js, Vue.js, Node.js, Handlebars, and Django.\nYour subscription will be automatically renewed every month.\nYour access to all the benefits for the paid period of time will continue. However, the subscription will not be renewed automatically.\nTo subscribe W3Schools accounts for multiple users, you can contact sales@w3schools.com",
      "examples": []
    },
    {
      "title": "PHP Syllabus",
      "summary": "Introduction\nThe W3Schools PHP Tutorial is comprehensive and beginner-friendly.\nIt will give you a fundamental knowledge of PHP.\nIt is designed for beginners and requires no prior experience with programming.\nThe content has been carefully made to be bite-sized, simple, and easy to understand.\nThe content has been proven by millions of users over the years. It is updated and improved frequently.\nThe syllabus outline and its sequence are structured so you can learn PHP step by step, from the introduction to creating your first application with PHP.\nGet Started With PHP Â»\nLearning Outcomes\nUnderstand what PHP is and how to write PHP scripts.\nLearn PHP syntax and how to use variables and data types.\nUse conditional statements (if, else, switch) and loops (while, for).\nUse functions to make code reusable.\nHandle forms and user input with PHP.\nLearn how to use Arrays and file management.\nUse PHP to connect to a database and to store and retrieve data.\nUnderstand error handling and keep information safe.\nType and run PHP programs.\nNote: Are you a teacher teaching PHP? W3Schools Academy is a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more about Academy here.\nWhich Subjects Are PHP Relevant For?\nWebsites:\nPHP is a popular backend scripting language used for creating interactive websites.\nComputer Science:\nPHP can be used to teach backend programming and web development.\nInformation Technology (IT):\nPHP teaches students how to make and maintain websites and web apps.\nWeb Development:\nPHP can be used for understanding how to create and handle interactive web pages and link them to databases.\nBusiness Studies/ Entrepreneurship:\nPHP can be useful for small businesses for simple tasks on websites such as for creating forms and managing data.\nMedia and Communications:\nPHP can be used to create and run media sites and content management systems (CMS).\nMathematics:\nPHP can be used to make web-based calculators and apps that solve math problems.\nEconomics:\nPHP can be used to make tools for economic modeling, data analysis, and polls.\nGet Started\nActivities\nIn this tutorial we offer different activities for you to learn PHP for free:\nLessons\nExercises\nQuizzes\nSign in to Track Progress\nYou can also create a free account to track your progress.\nAs a signed-in user, you get access to features such as:\nLearning paths\nSandbox and lab environments\nAchievements\nAnd much more!\nSign Up - It's free\nOverview of the Modules\nPHP Introduction\nPHP Install\nPHP Syntax\nPHP Comments\nPHP Variables\nPHP Echo / Print\nPHP Data Types\nPHP Strings\nPHP Numbers\nPHP Casting\nPHP Math\nPHP Constants\nPHP Magic Constants\nPHP Operators\nPHP If...Else\nPHP Switch\nPHP Loops\nPHP Functions\nPHP Arrays\nPHP Superglobals\nPHP Regular Expressions\nPHP Forms Handling\nPHP Form Validation\nPHP Form Required\nPHP Form URL/E-mail\nPHP Form Complete\nPHP Date and Time\nPHP Include Files\nPHP File Handling\nPHP Open/Read\nPHP Create/Write\nPHP Create/Write\nPHP File Upload\nPHP Cookies\nPHP Sessions\nPHP Filters\nPHP Filters Advanced\nPHP Callback Functions\nPHP JSON\nPHP Exceptions\nPHP What is OOP\nPHP Classes/Objects\nPHP Constructor\nPHP Destructor\nPHP Access Modifiers\nPHP Inheritance\nPHP Constants\nPHP Abstract Classes\nPHP Interfaces\nPHP Traits\nPHP Static Methods\nPHP Static Properties\nPHP Namespaces\nPHP Iterables\nPHP MySQL Database\nPHP XML\nPHP AJAX\nPHP MySQL Database\nPHP Error Handling\nPHP Security\nGet Started\nSandbox and Lab Environment\nPHP, like any other coding language, is best learned by working hands-on with code.\nEasily try code with our \"Try it Yourself\" editor.\nHere, you can edit PHP code and view the result.\nExampleGet your own PHP Server\nIf you want to explore more and host your project, we have a feature called Spaces that allows you to build, test and deploy PHP code and other backend languages.\nHere you get a secure sandbox environment called Spaces, where you can practice coding and test projects in real-time.\nSpaces allow you to test, build, and deploy code. This includes a W3Schools subdomain, hosting, and secure SSL certificates.\nSpaces require no installation and run directly in the browser.\nFeatures include:\nCollaboration\nFile navigator\nTerminal & log\nPackage manager\nDatabase\nEnvironment manager\nAnalytics\nCreate a Spaces Account\nPHP Certification\nW3Schools offers an end-of-pathway certification program.\nHere you can take exams to get certified.\nThe PHP exam is a test that summarizes the W3Schools PHP syllabus.\nAfter passing the exam you get the \"Certified PHP Developer\" Certification.\nThere are two different types of certifications:\nNon-adaptive\nAdaptive\nThe non-adaptive is pass or no pass.\nThe adaptive certification is adaptive and graded; students will get a grade from intermediate, advanced to professional.\nBuy Certificate Â»\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach PHP programming?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo Â»",
      "examples": [
        "<!DOCTYPE html> <html> <body> <?php echo \"My first PHP script!\"; ?> </body> </html>"
      ]
    },
    {
      "title": "PHP Study Plan",
      "summary": "Introduction\nThe PHP study plan helps you teach your students PHP step-by-step.\nCreating a study plan for PHP is easy.\nYou can use a pre-built study plan or customize it.\nStudents have different skill levels. The study plans can be customized to ensure that everyone is challenged.\nSave time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of PHP to the final exam.\nW3Schools Academy\nThis study plan is a feature of W3Schools Academy.\nW3Schools Academy is a platform that has everything you need to teach coding, all in one place.\nIt offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom.\nYou need to have an active subscription to access the study plan feature. There are two different subscription tiers:\nEssentials ($1.99 / month per student)\nFull Access ($5.99 / month per student)\nCalculate your price and order here.\nLearn More Â»\nAcademy also offer other features such as:\nManaging your classroom\nTracking of student progress and reports\nLabs, assignments, and code challenges (prebuilt challenges or create your own ones)\nAuto-grading\nTeaching materials\nCertification exams\nGet a free demo Â»\nTeacher Materials\nW3Schools has everything you need to teach PHP.\nThe PHP training materials is available for you to include and use in your study plan:\nW3Schools PHP Tutorial\nPHP Exercises\nPHP Quiz\nPHP Challenges (Coding challenges)\nPHP Certification Exam (End of Pathway Exam)\nPHP Syllabus\nWith the PHP Syllabus, your students will start with the basics, like understanding variables, data types, and simple syntax, and move to more advanced topics, like working with forms, handling databases, and building dynamic web applications. Each chapter has examples, try-it-yourself sections, exercises, and quizzes to make learning easy, interactive, and fun.\nRead more about PHP Syllabus.\nStudy Plan Overview\nThe study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level.\nLearning Paths\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nInteractive Content\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTimeline and Pace\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nTrack Student Progress\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nEnd of Pathway Exam\nThe PHP study plan aligns with the PHP Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the PHP Tutorial.\nYou get reports of the students' results.\nThe PHP study plan aligns with the PHP Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the PHP Tutorial.\nYou get reports of the students' results.\nAccessibility\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nLearn More Â»\nSample Study Plan\nYou choose the timeline and pace of your study plans.\nSchools have different preferences.\nSome would like more intensive pace, e.g. 5 weeks, others 12 or more weeks.\nIt is completely up to you.\nFor example, this is how a 5-week PHP study plan could look like:\nWeek 1: Introduction, Variables\nWeek 2: Echo / Print, Data Types, Strings, Operators & Math\nWeek 3: Conditionals, Loops, Functions, Arrays\nWeek 4: Superglobals, RegEx, Forms, Advanced, OOP\nWeek 5: MySQL Database, XML, AJAX, PHP Certification Exam\nImage of Sample PHP study plan:\nReady to get started?\nStart with PHP Study Plans today.\nGet Started Â»\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach PHP programming?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo Â»",
      "examples": []
    },
    {
      "title": "W3Schools PHP Certificate Certificate",
      "summary": "W3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate Â»\nW3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate Â»\nWho Should Consider Getting Certified?\nAny student or professional within the digital industry.\nCertifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market.\nW3Schools is Trusted by Top Companies\nW3Schools has over two decades of experience with teaching coding online.\nOur certificates are recognized and valued by companies looking to employ skilled developers.\nSave Time and Money\nShow the world your coding skills by getting a certification.\nThe prices is a small fraction compared to the price of traditional education.\nDocument and validate your competence by getting certified!\nExam overview\nFee: 95 USD\nAchievable certification levels:\nIntermediate (40%)\nAdvanced (75%)\nProfessional (90%)\nNumber of questions:\nAdaptive, 60 on average\nRequirement to pass:\nMinimum 40% - Intermediate level\nTime limit: 60 minutes\nNumber of attempts to pass: 3\nExam deadline: None\nCertification Expiration: None\nFormat: Online, multiple choice\nRegister now Â»\nAdvance Faster in Your Career\nGetting a certificate proves your commitment to upgrading your skills.\nThe certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on.\nIt gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nKnowledge is power, especially in the current job market.\nDocumentation of your skills enables you to advance your career or helps you to start a new one.\nHow Does It Work?\nStudy for free at W3Schools.com\nStudy at your own speed\nTest your skills with W3Schools online quizzes\nApply for your certificate by paying an exam fee\nTake your exam online, at any time, and from any location\nGet Your Certificate and Share It With The World\nExample certificate:\nEach certificate gets a unique link that can be shared with others.\nValidate your certification with the link or QR code.\nCheck how it looks like in this Example.\nShare your certificate on Linked in the Certifications section in just one click!\nDocument Your Skills\nGetting a certificate proves your commitment to upgrade your skills, gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nGet Your Certificate Â»\nLooking to add multiple users?\nAre you an educator, manager or business owner looking for courses or certifications?\nWe are working with schools, companies and organizations from all over the world.\nGet courses and/or certifications for your team here.",
      "examples": []
    },
    {
      "title": "PHP Reference",
      "summary": "This section contains a complete PHP reference documentation.\nPHP Reference\nThe PHP reference contains different categories of all PHP functions, keywords and constants, along with examples.",
      "examples": []
    },
    {
      "title": "PHP Array Functions",
      "summary": "PHP Array Introduction\nThe array functions allow you to access and manipulate arrays.\nSimple and multi-dimensional arrays are supported.\nInstallation\nThe array functions are part of the PHP core. There is no installation needed to use these functions.\nPHP Array Functions",
      "examples": []
    },
    {
      "title": "PHP array() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nCreate an indexed array named $cars, assign three elements to it, and then print a text containing the array values:\nDefinition and Usage\nThe array() function is used to create an array.\nIn PHP, there are three types of arrays:\nIndexed arrays - Arrays with numeric index\nAssociative arrays - Arrays with named keys\nMultidimensional arrays - Arrays containing one or more arrays\nSyntax\nSyntax for indexed arrays:\nSyntax for associative arrays:\nParameter Values\nTechnical Details\nREMOVE ADS\nMore Examples\nExample\nCreate an associative array named $age:\nExample\nLoop through and print all the values of an indexed array:\nExample\nLoop through and print all the values of an associative array:\nExample\nCreate a multidimensional array:",
      "examples": [
        "<?php\n$cars=array(\"Volvo\",\"BMW\",\"Toyota\");\necho \"I like \" . $cars[0] . \", \" . $cars[1] . \" and \" . $cars[2] . \".\";\n?>",
        "array(value1, value2, value3, etc.)",
        "array(key=>value,key=>value,key=>value,etc.)",
        "<?php\n$age=array(\"Peter\"=>\"35\",\"Ben\"=>\"37\",\"Joe\"=>\"43\");\necho \"Peter is \" . $age['Peter'] . \" years old.\";\n?>",
        "<?php\n$cars=array(\"Volvo\",\"BMW\",\"Toyota\");\n$arrlength=count($cars);\n\nfor($x=0;$x<$arrlength;$x++)\n{\necho $cars[$x];\necho \"<br>\";\n}\n?>",
        "<?php\n$age=array(\"Peter\"=>\"35\",\"Ben\"=>\"37\",\"Joe\"=>\"43\");\n\nforeach($age as $x=>$x_value)\n{\necho \"Key=\" . $x . \", Value=\" . $x_value;\necho \"<br>\";\n}\n?>",
        "<?php\n// A two-dimensional array:\n$cars=array\n(\narray(\"Volvo\",100,96),\narray(\"BMW\",60,59),\narray(\"Toyota\",110,100)\n);\n?>"
      ]
    },
    {
      "title": "PHP array_change_key_case() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nChange all keys in an array to uppercase:\nDefinition and Usage\nThe array_change_key_case() function changes all keys in an array to lowercase or uppercase.\nSyntax\nParameter Values\nCASE_LOWER - Default value. Changes the keys to lowercase\nCASE_UPPER - Changes the keys to uppercase\nTechnical Details\nREMOVE ADS\nMore Examples\nExample\nChange all keys in an array to lowercase:\nExample\nIf two or more keys will be equal after running array_change_key_case() (e.g. \"b\" and \"B\"), the latest array will override the other:",
      "examples": [
        "<?php\n$age=array(\"Peter\"=>\"35\",\"Ben\"=>\"37\",\"Joe\"=>\"43\");\nprint_r(array_change_key_case($age,CASE_UPPER));\n?>",
        "array_change_key_case(array, case)",
        "<?php\n$pets=array(\"a\"=>\"Cat\",\"B\"=>\"Dog\",\"c\"=>\"Horse\",\"b\"=>\"Bird\");\nprint_r(array_change_key_case($pets,CASE_UPPER));\n?>"
      ]
    },
    {
      "title": "PHP array_chunk() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nSplit an array into chunks of two:\nDefinition and Usage\nThe array_chunk() function splits an array into chunks of new arrays.\nSyntax\nParameter Values\ntrue - Preserves the keys\nfalse - Default. Reindexes the chunk numerically\nTechnical Details\nREMOVE ADS\nMore Examples\nExample\nSplit an array into chunks of two and preserve the original keys:",
      "examples": [
        "<?php\n$cars=array(\"Volvo\",\"BMW\",\"Toyota\",\"Honda\",\"Mercedes\",\"Opel\");\nprint_r(array_chunk($cars,2));\n?>",
        "array_chunk(array, size, preserve_key)",
        "<?php\n$age=array(\"Peter\"=>\"35\",\"Ben\"=>\"37\",\"Joe\"=>\"43\",\"Harry\"=>\"50\");\nprint_r(array_chunk($age,2,true));\n?>"
      ]
    },
    {
      "title": "PHP array_column() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nGet column of last names from a recordset:\nOutput:\nDefinition and Usage\nThe array_column() function returns the values from a single column in the input array.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nGet column of last names from a recordset, indexed by the \"id\" column:\nOutput:",
      "examples": [
        "<?php\n// An array that represents a possible record set returned from a database\n$a = array(\narray(\n'id' => 5698,\n'first_name' => 'Peter',\n'last_name' => 'Griffin',\n),\narray(\n'id' => 4767,\n'first_name' => 'Ben',\n'last_name' => 'Smith',\n),\narray(\n'id' => 3809,\n'first_name' => 'Joe',\n'last_name' => 'Doe',\n)\n);\n\n$last_names = array_column($a, 'last_name');\nprint_r($last_names);\n?>",
        "Array\n(\n[0] => Griffin\n[1] => Smith\n[2] => Doe\n)",
        "array_column(array, column_key, index_key)",
        "<?php\n// An array that represents a possible record set returned from a database\n$a = array(\narray(\n'id' => 5698,\n'first_name' => 'Peter',\n'last_name' => 'Griffin',\n),\narray(\n'id' => 4767,\n'first_name' => 'Ben',\n'last_name' => 'Smith',\n),\narray(\n'id' => 3809,\n'first_name' => 'Joe',\n'last_name' => 'Doe',\n)\n);\n\n$last_names = array_column($a, 'last_name', 'id');\nprint_r($last_names);\n?>",
        "Array\n(\n[5698] => Griffin\n[4767] => Smith\n[3809] => Doe\n)"
      ]
    },
    {
      "title": "PHP array_combine() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nCreate an array by using the elements from one \"keys\" array and one \"values\" array:\nDefinition and Usage\nThe array_combine() function creates an array by using the elements from one \"keys\" array and one \"values\" array.\nNote: Both arrays must have equal number of elements!\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$fname=array(\"Peter\",\"Ben\",\"Joe\");\n$age=array(\"35\",\"37\",\"43\");\n\n$c=array_combine($fname,$age);\nprint_r($c);\n?>",
        "array_combine(keys, values)"
      ]
    },
    {
      "title": "PHP array_count_values() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nCount all the values of an array:\nDefinition and Usage\nThe array_count_values() function counts all the values of an array.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a=array(\"A\",\"Cat\",\"Dog\",\"A\",\"Dog\");\nprint_r(array_count_values($a));\n?>",
        "array_count_values(array)"
      ]
    },
    {
      "title": "PHP array_diff() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nCompare the values of two arrays, and return the differences:\nDefinition and Usage\nThe array_diff() function compares the values of two (or more) arrays, and returns the differences.\nThis function compares the values of two (or more) arrays, and return an array that contains the entries from array1 that are not present in array2 or array3, etc.\nSyntax\nParameter Values\nTechnical Details\nREMOVE ADS\nMore Examples\nExample\nCompare the values of three arrays, and return the differences:",
      "examples": [
        "<?php\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"d\"=>\"yellow\");\n$a2=array(\"e\"=>\"red\",\"f\"=>\"green\",\"g\"=>\"blue\");\n\n$result=array_diff($a1,$a2);\nprint_r($result);\n?>",
        "array_diff(array1, array2, array3, ...)",
        "<?php\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"d\"=>\"yellow\");\n$a2=array(\"e\"=>\"red\",\"f\"=>\"black\",\"g\"=>\"purple\");\n$a3=array(\"a\"=>\"red\",\"b\"=>\"black\",\"h\"=>\"yellow\");\n\n$result=array_diff($a1,$a2,$a3);\nprint_r($result);\n?>"
      ]
    },
    {
      "title": "PHP array_diff_assoc() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nCompare the keys and values of two arrays, and return the differences:\nDefinition and Usage\nThe array_diff_assoc() function compares the keys and values of two (or more) arrays, and returns the differences.\nThis function compares the keys and values of two (or more) arrays, and return an array that contains the entries from array1 that are not present in array2 or array3, etc.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nCompare the keys and values of two arrays, and return the differences:\nExample\nCompare the keys and values of three arrays, and return the differences:",
      "examples": [
        "<?php\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"d\"=>\"yellow\");\n$a2=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\n\n$result=array_diff_assoc($a1,$a2);\nprint_r($result);\n?>",
        "array_diff_assoc(array1,array2,array3...)",
        "<?php\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"d\"=>\"yellow\");\n$a2=array(\"a\"=>\"red\",\"f\"=>\"green\",\"g\"=>\"blue\");\n$a3=array(\"h\"=>\"red\",\"b\"=>\"green\",\"g\"=>\"blue\");\n\n$result=array_diff_assoc($a1,$a2,$a3);\nprint_r($result);\n?>"
      ]
    },
    {
      "title": "PHP array_diff_key() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nCompare the keys of two arrays, and return the differences:\nDefinition and Usage\nThe array_diff_key() function compares the keys of two (or more) arrays, and returns the differences.\nThis function compares the keys of two (or more) arrays, and return an array that contains the entries from array1 that are not present in array2 or array3, etc.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nCompare the keys of two indexed arrays, and return the differences:\nExample\nCompare the keys of three arrays, and return the differences:",
      "examples": [
        "<?php\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\n$a2=array(\"a\"=>\"red\",\"c\"=>\"blue\",\"d\"=>\"pink\");\n\n$result=array_diff_key($a1,$a2);\nprint_r($result);\n?>",
        "array_diff_key(array1, array2, array3, ...)",
        "<?php\n$a1=array(\"red\",\"green\",\"blue\",\"yellow\");\n$a2=array(\"red\",\"green\",\"blue\");\n\n$result=array_diff_key($a1,$a2);\nprint_r($result);\n?>",
        "<?php\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\n$a2=array(\"c\"=>\"yellow\",\"d\"=>\"black\",\"e\"=>\"brown\");\n$a3=array(\"f\"=>\"green\",\"c\"=>\"purple\",\"g\"=>\"red\");\n\n$result=array_diff_key($a1,$a2,$a3);\nprint_r($result);\n?>"
      ]
    },
    {
      "title": "PHP array_diff_uassoc() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nCompare the keys and values of two arrays (use a user-defined function to compare the keys), and return the differences:\nDefinition and Usage\nThe array_diff_uassoc() function compares the keys and values of two (or more) arrays, and returns the differences.\nNote: This function uses a user-defined function to compare the keys!\nThis function compares the keys and values of two (or more) arrays, and return an array that contains the entries from array1 that are not present in array2 or array3, etc.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nCompare the keys and values of three arrays (use a user-defined function to compare the keys), and return the differences:",
      "examples": [
        "<?php\nfunction myfunction($a,$b)\n{\nif ($a===$b)\n{\nreturn 0;\n}\nreturn ($a>$b)?1:-1;\n}\n\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\n$a2=array(\"d\"=>\"red\",\"b\"=>\"green\",\"e\"=>\"blue\");\n\n$result=array_diff_uassoc($a1,$a2,\"myfunction\");\nprint_r($result);\n?>",
        "array_diff_uassoc(array1, array2, array3, ..., myfunction)",
        "<?php\nfunction myfunction($a,$b)\n{\nif ($a===$b)\n{\nreturn 0;\n}\nreturn ($a>$b)?1:-1;\n}\n\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\n$a2=array(\"a\"=>\"red\",\"b\"=>\"green\",\"d\"=>\"blue\");\n$a3=array(\"e\"=>\"yellow\",\"a\"=>\"red\",\"d\"=>\"blue\");\n\n$result=array_diff_uassoc($a1,$a2,$a3,\"myfunction\");\nprint_r($result);\n?>"
      ]
    },
    {
      "title": "PHP array_diff_ukey() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nCompare the keys of two arrays (using a user-defined key comparison function), and return the differences:\nDefinition and Usage\nThe array_diff_ukey() function compares the keys of two (or more) arrays, and returns the differences.\nNote: This function uses a user-defined function to compare the keys!\nThis function compares the keys of two (or more) arrays, and return an array that contains the entries from array1 that are not present in array2 or array3, etc.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nCompare the keys of three arrays (use a user-defined function to compare the keys), and return the differences:",
      "examples": [
        "<?php\nfunction myfunction($a,$b)\n{\nif ($a===$b)\n{\nreturn 0;\n}\nreturn ($a>$b)?1:-1;\n}\n\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\n$a2=array(\"a\"=>\"blue\",\"b\"=>\"black\",\"e\"=>\"blue\");\n\n$result=array_diff_ukey($a1,$a2,\"myfunction\");\nprint_r($result);\n?>",
        "array_diff_ukey(array1, array2, array3, ..., myfunction)",
        "<?php\nfunction myfunction($a,$b)\n{\nif ($a===$b)\n{\nreturn 0;\n}\nreturn ($a>$b)?1:-1;\n}\n\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\n$a2=array(\"a\"=>\"black\",\"b\"=>\"yellow\",\"d\"=>\"brown\");\n$a3=array(\"e\"=>\"purple\",\"f\"=>\"white\",\"a\"=>\"gold\");\n\n$result=array_diff_ukey($a1,$a2,$a3,\"myfunction\");\nprint_r($result);\n?>"
      ]
    },
    {
      "title": "PHP array_fill() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nFill an array with values:\nDefinition and Usage\nThe array_fill() function fills an array with values.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a1=array_fill(3,4,\"blue\");\nprint_r($a1);\n?>",
        "array_fill(index, number, value)"
      ]
    },
    {
      "title": "PHP array_fill_keys() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nFill an array with values, specifying keys:\nDefinition and Usage\nThe array_fill_keys() function fills an array with values, specifying keys.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$keys=array(\"a\",\"b\",\"c\",\"d\");\n$a1=array_fill_keys($keys,\"blue\");\nprint_r($a1);\n?>",
        "array_fill_keys(keys, value)"
      ]
    },
    {
      "title": "PHP array_filter() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nFilter the values of an array using a callback function:\nDefinition and Usage\nThe array_filter() function filters the values of an array using a callback function.\nThis function passes each value of the input array to the callback function. If the callback function returns true, the current value from input is returned into the result array. Array keys are preserved.\nSyntax\nParameter Values\nARRAY_FILTER_USE_KEY - pass key as the only argument to callback (instead of the value)\nARRAY_FILTER_USE_BOTH - pass both value and key as arguments to callback (instead of the value)\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\nfunction test_odd($var)\n{\nreturn($var & 1);\n}\n\n$a1=array(1,3,2,3,4);\nprint_r(array_filter($a1,\"test_odd\"));\n?>",
        "array_filter(array, callbackfunction, flag)"
      ]
    },
    {
      "title": "PHP array_flip() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nFlip all keys with their associated values in an array:\nDefinition and Usage\nThe array_flip() function flips/exchanges all keys with their associated values in an array.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"d\"=>\"yellow\");\n$result=array_flip($a1);\nprint_r($result);\n?>",
        "array_flip(array)"
      ]
    },
    {
      "title": "PHP array_intersect() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nCompare the values of two arrays, and return the matches:\nDefinition and Usage\nThe array_intersect() function compares the values of two (or more) arrays, and returns the matches.\nThis function compares the values of two or more arrays, and return an array that contains the entries from array1 that are present in array2, array3, etc.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nCompare the values of three arrays, and return the matches:",
      "examples": [
        "<?php\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"d\"=>\"yellow\");\n$a2=array(\"e\"=>\"red\",\"f\"=>\"green\",\"g\"=>\"blue\");\n\n$result=array_intersect($a1,$a2);\nprint_r($result);\n?>",
        "array_intersect(array1, array2, array3, ...)",
        "<?php\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"d\"=>\"yellow\");\n$a2=array(\"e\"=>\"red\",\"f\"=>\"black\",\"g\"=>\"purple\");\n$a3=array(\"a\"=>\"red\",\"b\"=>\"black\",\"h\"=>\"yellow\");\n\n$result=array_intersect($a1,$a2,$a3);\nprint_r($result);\n?>"
      ]
    },
    {
      "title": "PHP array_intersect_assoc() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nCompare the keys and values of two arrays, and return the matches:\nDefinition and Usage\nThe array_intersect_assoc() function compares the keys and values of two (or more) arrays, and returns the matches.\nThis function compares the keys and values of two or more arrays, and return an array that contains the entries from array1 that are present in array2, array3, etc.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nCompare the keys and values of three arrays, and return the matches:",
      "examples": [
        "<?php\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"d\"=>\"yellow\");\n$a2=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\n\n$result=array_intersect_assoc($a1,$a2);\nprint_r($result);\n?>",
        "array_intersect_assoc(array1,array2,array3, ...)",
        "<?php\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"d\"=>\"yellow\");\n$a2=array(\"a\"=>\"red\",\"b\"=>\"green\",\"g\"=>\"blue\");\n$a3=array(\"a\"=>\"red\",\"b\"=>\"green\",\"g\"=>\"blue\");\n\n$result=array_intersect_assoc($a1,$a2,$a3);\nprint_r($result);\n?>"
      ]
    },
    {
      "title": "PHP array_intersect_key() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nCompare the keys of two arrays, and return the matches:\nDefinition and Usage\nThe array_intersect_key() function compares the keys of two (or more) arrays, and returns the matches.\nThis function compares the keys of two or more arrays, and return an array that contains the entries from array1 that are present in array2, array3, etc.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nCompare the keys of two indexed arrays, and return the matches:\nExample\nCompare the keys of three arrays, and return the matches:",
      "examples": [
        "<?php\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\n$a2=array(\"a\"=>\"red\",\"c\"=>\"blue\",\"d\"=>\"pink\");\n\n$result=array_intersect_key($a1,$a2);\nprint_r($result);\n?>",
        "array_intersect_key(array1, array2, array3, ...)",
        "<?php\n$a1=array(\"red\",\"green\",\"blue\",\"yellow\");\n$a2=array(\"red\",\"green\",\"blue\");\n\n$result=array_intersect_key($a1,$a2);\nprint_r($result);\n?>",
        "<?php\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\n$a2=array(\"c\"=>\"yellow\",\"d\"=>\"black\",\"e\"=>\"brown\");\n$a3=array(\"f\"=>\"green\",\"c\"=>\"purple\",\"g\"=>\"red\");\n\n$result=array_intersect_key($a1,$a2,$a3);\nprint_r($result);\n?>"
      ]
    },
    {
      "title": "PHP array_intersect_uassoc() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nCompare the keys and values of two arrays, and return the matches (using a user-defined key comparison function):\nDefinition and Usage\nThe array_intersect_uassoc() function compares the keys and values of two (or more) arrays, and returns the matches.\nNote: This function uses a user-defined function to compare the keys!\nThis function compares the keys and values of two or more arrays, and return an array that contains the entries from array1 that are present in array2, array3, etc.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nCompare the keys and values of three arrays (use a user-defined function to compare the keys), and return the matches:",
      "examples": [
        "<?php\nfunction myfunction($a,$b)\n{\nif ($a===$b)\n{\nreturn 0;\n}\nreturn ($a>$b)?1:-1;\n}\n\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\n$a2=array(\"d\"=>\"red\",\"b\"=>\"green\",\"e\"=>\"blue\");\n\n$result=array_intersect_uassoc($a1,$a2,\"myfunction\");\nprint_r($result);\n?>",
        "array_intersect_uassoc(array1, array2, array3, ..., myfunction)",
        "<?php\nfunction myfunction($a,$b)\n{\nif ($a===$b)\n{\nreturn 0;\n}\nreturn ($a>$b)?1:-1;\n}\n\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\n$a2=array(\"a\"=>\"red\",\"b\"=>\"green\",\"d\"=>\"blue\");\n$a3=array(\"e\"=>\"yellow\",\"a\"=>\"red\",\"d\"=>\"blue\");\n\n$result=array_intersect_uassoc($a1,$a2,$a3,\"myfunction\");\nprint_r($result);\n?>"
      ]
    },
    {
      "title": "PHP array_intersect_ukey() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nCompare the keys of two arrays (using a user-defined key comparison function), and return the matches:\nDefinition and Usage\nThe array_intersect_ukey() function compares the keys of two (or more) arrays, and returns the matches.\nNote: This function uses a user-defined function to compare the keys!\nThis function compares the keys of two or more arrays, and return an array that contains the entries from array1 that are present in array2, array3, etc.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nCompare the keys of three arrays (use a user-defined function to compare the keys), and return the matches:",
      "examples": [
        "<?php\nfunction myfunction($a,$b)\n{\nif ($a===$b)\n{\nreturn 0;\n}\nreturn ($a>$b)?1:-1;\n}\n\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\n$a2=array(\"a\"=>\"blue\",\"b\"=>\"black\",\"e\"=>\"blue\");\n\n$result=array_intersect_ukey($a1,$a2,\"myfunction\");\nprint_r($result);\n?>",
        "array_intersect_ukey(array1, array2, array3, ..., myfunction)",
        "<?php\nfunction myfunction($a,$b)\n{\nif ($a===$b)\n{\nreturn 0;\n}\nreturn ($a>$b)?1:-1;\n}\n\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\n$a2=array(\"a\"=>\"black\",\"b\"=>\"yellow\",\"d\"=>\"brown\");\n$a3=array(\"e\"=>\"purple\",\"f\"=>\"white\",\"a\"=>\"gold\");\n\n$result=array_intersect_ukey($a1,$a2,$a3,\"myfunction\");\nprint_r($result);\n?>"
      ]
    },
    {
      "title": "PHP array_key_exists() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nCheck if the key \"Volvo\" exists in an array:\nDefinition and Usage\nThe array_key_exists() function checks an array for a specified key, and returns true if the key exists and false if the key does not exist.\nTip: Remember that if you skip the key when you specify an array, an integer key is generated, starting at 0 and increases by 1 for each value. (See example below)\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nCheck if the key \"Toyota\" exists in an array:\nExample\nCheck if the integer key \"0\" exists in an array:",
      "examples": [
        "<?php\n$a=array(\"Volvo\"=>\"XC90\",\"BMW\"=>\"X5\");\nif (array_key_exists(\"Volvo\",$a))\n{\necho \"Key exists!\";\n}\nelse\n{\necho \"Key does not exist!\";\n}\n?>",
        "array_key_exists(key, array)",
        "<?php\n$a=array(\"Volvo\"=>\"XC90\",\"BMW\"=>\"X5\");\nif (array_key_exists(\"Toyota\",$a))\n{\necho \"Key exists!\";\n}\nelse\n{\necho \"Key does not exist!\";\n}\n?>",
        "<?php\n$a=array(\"Volvo\",\"BMW\");\nif (array_key_exists(0,$a))\n{\necho \"Key exists!\";\n}\nelse\n{\necho \"Key does not exist!\";\n}\n?>"
      ]
    },
    {
      "title": "PHP array_keys() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nReturn an array containing the keys:\nDefinition and Usage\nThe array_keys() function returns an array containing the keys.\nSyntax\nParameter Values\ntrue - Returns the keys with the specified value, depending on type: the number 5 is not the same as the string \"5\".\nfalse - Default value. Not depending on type, the number 5 is the same as the string \"5\".\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nUsing the value parameter:\nExample\nUsing the strict parameter, false:\nExample\nUsing the strict parameter, true:",
      "examples": [
        "<?php\n$a=array(\"Volvo\"=>\"XC90\",\"BMW\"=>\"X5\",\"Toyota\"=>\"Highlander\");\nprint_r(array_keys($a));\n?>",
        "array_keys(array, value, strict)",
        "<?php\n$a=array(\"Volvo\"=>\"XC90\",\"BMW\"=>\"X5\",\"Toyota\"=>\"Highlander\");\nprint_r(array_keys($a,\"Highlander\"));\n?>",
        "<?php\n$a=array(10,20,30,\"10\");\nprint_r(array_keys($a,\"10\",false));\n?>",
        "<?php\n$a=array(10,20,30,\"10\");\nprint_r(array_keys($a,\"10\",true));\n?>"
      ]
    },
    {
      "title": "PHP array_map() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nSend each value of an array to a function, multiply each value by itself, and return an array with the new values:\nDefinition and Usage\nThe array_map() function sends each value of an array to a user-made function, and returns an array with new values, given by the user-made function.\nTip: You can assign one array to the function, or as many as you like.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nUsing a user-made function to change the values of an array:\nExample\nUsing two arrays:\nExample\nChange all letters of the array values to uppercase:\nExample\nAssign null as the function name:",
      "examples": [
        "<?php\nfunction myfunction($v)\n{\nreturn($v*$v);\n}\n\n$a=array(1,2,3,4,5);\nprint_r(array_map(\"myfunction\",$a));\n?>",
        "array_map(myfunction, array1, array2, array3, ...)",
        "<?php\nfunction myfunction($v)\n{\nif ($v===\"Dog\")\n{\nreturn \"Fido\";\n}\nreturn $v;\n}\n\n$a=array(\"Horse\",\"Dog\",\"Cat\");\nprint_r(array_map(\"myfunction\",$a));\n?>",
        "<?php\nfunction myfunction($v1,$v2)\n{\nif ($v1===$v2)\n{\nreturn \"same\";\n}\nreturn \"different\";\n}\n\n$a1=array(\"Horse\",\"Dog\",\"Cat\");\n$a2=array(\"Cow\",\"Dog\",\"Rat\");\nprint_r(array_map(\"myfunction\",$a1,$a2));\n?>",
        "<?php\nfunction myfunction($v)\n{\n$v=strtoupper($v);\nreturn $v;\n}\n\n$a=array(\"Animal\" => \"horse\", \"Type\" => \"mammal\");\nprint_r(array_map(\"myfunction\",$a));\n?>",
        "<?php\n$a1=array(\"Dog\",\"Cat\");\n$a2=array(\"Puppy\",\"Kitten\");\nprint_r(array_map(null,$a1,$a2));\n?>"
      ]
    },
    {
      "title": "PHP array_merge() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nMerge two arrays into one array:\nDefinition and Usage\nThe array_merge() function merges one or more arrays into one array.\nTip: You can assign one array to the function, or as many as you like.\nNote: If two or more array elements have the same key, the last one overrides the others.\nNote: If you assign only one array to the array_merge() function, and the keys are integers, the function returns a new array with integer keys starting at 0 and increases by 1 for each value (See example below).\nTip: The difference between this function and the array_merge_recursive() function is when two or more array elements have the same key. Instead of override the keys, the array_merge_recursive() function makes the value as an array.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nMerge two associative arrays into one array:\nExample\nUsing only one array parameter with integer keys:",
      "examples": [
        "<?php\n$a1=array(\"red\",\"green\");\n$a2=array(\"blue\",\"yellow\");\nprint_r(array_merge($a1,$a2));\n?>",
        "array_merge(array1, array2, array3, ...)",
        "<?php\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\");\n$a2=array(\"c\"=>\"blue\",\"b\"=>\"yellow\");\nprint_r(array_merge($a1,$a2));\n?>",
        "<?php\n$a=array(3=>\"red\",4=>\"green\");\nprint_r(array_merge($a));\n?>"
      ]
    },
    {
      "title": "PHP array_merge_recursive() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nMerge two arrays into one array:\nDefinition and Usage\nThe array_merge_recursive() function merges one or more arrays into one array.\nThe difference between this function and the array_merge() function is when two or more array elements have the same key. Instead of override the keys, the array_merge_recursive() function makes the value as an array.\nNote: If you assign only one array to the array_merge_recursive() function, it will behave exactly the same as the array_merge() function.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\");\n$a2=array(\"c\"=>\"blue\",\"b\"=>\"yellow\");\nprint_r(array_merge_recursive($a1,$a2));\n?>",
        "array_merge_recursive(array1, array2, array3, ...)"
      ]
    },
    {
      "title": "PHP array_multisort() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nReturn a sorted array in ascending order:\nDefinition and Usage\nThe array_multisort() function returns a sorted array. You can assign one or more arrays. The function sorts the first array, and the other arrays follow, then, if two or more values are the same, it sorts the next array, and so on.\nNote: String keys will be maintained, but numeric keys will be re-indexed, starting at 0 and increase by 1.\nNote: You can assign the sortorder and the sorttype parameters after each array. If not specified, each array parameter uses the default values.\nSyntax\nParameter Values\nSORT_ASC - Default. Sort in ascending order (A-Z)\nSORT_DESC - Sort in descending order (Z-A)\nSORT_REGULAR - Default. Compare elements normally (Standard ASCII)\nSORT_NUMERIC - Compare elements as numeric values\nSORT_STRING - Compare elements as string values\nSORT_LOCALE_STRING - Compare elements as string, based on the current locale (can be changed using setlocale())\nSORT_NATURAL - Compare elements as strings using \"natural ordering\" like natsort()\nSORT_FLAG_CASE - Can be combined (bitwise OR) with SORT_STRING or SORT_NATURAL to sort strings case-insensitively\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nReturn a sorted array in ascending order:\nExample\nSee how it sorts when two values are the same:\nExample\nUsing sorting parameters:\nExample\nMerge two arrays and sort them as numbers, in descending order:",
      "examples": [
        "<?php\n$a=array(\"Dog\",\"Cat\",\"Horse\",\"Bear\",\"Zebra\");\narray_multisort($a);\nprint_r($a);\n?>",
        "array_multisort(array1, sortorder, sorttype, array2, array3, ...)",
        "<?php\n$a1=array(\"Dog\",\"Cat\");\n$a2=array(\"Fido\",\"Missy\");\narray_multisort($a1,$a2);\nprint_r($a1);\nprint_r($a2);\n?>",
        "<?php\n$a1=array(\"Dog\",\"Dog\",\"Cat\");\n$a2=array(\"Pluto\",\"Fido\",\"Missy\");\narray_multisort($a1,$a2);\nprint_r($a1);\nprint_r($a2);\n?>",
        "<?php\n$a1=array(\"Dog\",\"Dog\",\"Cat\");\n$a2=array(\"Pluto\",\"Fido\",\"Missy\");\narray_multisort($a1,SORT_ASC,$a2,SORT_DESC);\nprint_r($a1);\nprint_r($a2);\n?>",
        "<?php\n$a1=array(1,30,15,7,25);\n$a2=array(4,30,20,41,66);\n$num=array_merge($a1,$a2);\narray_multisort($num,SORT_DESC,SORT_NUMERIC);\nprint_r($num);\n?>"
      ]
    },
    {
      "title": "PHP array_pad() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nReturn 5 elements and insert a value of \"blue\" to the new elements in the array:\nDefinition and Usage\nThe array_pad() function inserts a specified number of elements, with a specified value, to an array.\nTip: If you assign a negative size parameter, the function will insert new elements BEFORE the original elements (See example below).\nNote: This function will not delete any elements if the size parameter is less than the size of the original array.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nUsing a negative size parameter:",
      "examples": [
        "<?php\n$a=array(\"red\",\"green\");\nprint_r(array_pad($a,5,\"blue\"));\n?>",
        "array_pad(array, size, value)",
        "<?php\n$a=array(\"red\",\"green\");\nprint_r(array_pad($a,-5,\"blue\"));\n?>"
      ]
    },
    {
      "title": "PHP array_pop() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nDelete the last element of an array:\nDefinition and Usage\nThe array_pop() function deletes the last element of an array.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a=array(\"red\",\"green\",\"blue\");\narray_pop($a);\nprint_r($a);\n?>",
        "array_pop(array)"
      ]
    },
    {
      "title": "PHP array_product() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nCalculate and return the product of an array:\nDefinition and Usage\nThe array_product() function calculates and returns the product of an array.\nSyntax\nParameter Values\nTechnical Details\nREMOVE ADS\nMore Examples\nExample\nCalculate and return the product of an array:",
      "examples": [
        "<?php\n$a=array(5,5);\necho(array_product($a));\n?>",
        "array_product(array)",
        "<?php\n$a=array(5,5,2,10);\necho(array_product($a));\n?>"
      ]
    },
    {
      "title": "PHP array_push() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nInsert \"blue\" and \"yellow\" to the end of an array:\nDefinition and Usage\nThe array_push() function inserts one or more elements to the end of an array.\nTip: You can add one value, or as many as you like.\nNote: Even if your array has string keys, your added elements will always have numeric keys (See example below).\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nAn array with string keys:",
      "examples": [
        "<?php\n$a=array(\"red\",\"green\");\narray_push($a,\"blue\",\"yellow\");\nprint_r($a);\n?>",
        "array_push(array, value1, value2, ...)",
        "<?php\n$a=array(\"a\"=>\"red\",\"b\"=>\"green\");\narray_push($a,\"blue\",\"yellow\");\nprint_r($a);\n?>"
      ]
    },
    {
      "title": "PHP array_rand() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nReturn an array of random keys:\nDefinition and Usage\nThe array_rand() function returns a random key from an array, or it returns an array of random keys if you specify that the function should return more than one key.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nReturn a random key from an array:\nExample\nReturn an array of random string keys:",
      "examples": [
        "<?php\n$a=array(\"red\",\"green\",\"blue\",\"yellow\",\"brown\");\n$random_keys=array_rand($a,3);\necho $a[$random_keys[0]].\"<br>\";\necho $a[$random_keys[1]].\"<br>\";\necho $a[$random_keys[2]];\n?>",
        "array_rand(array, number)",
        "<?php\n$a=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"d\"=>\"yellow\");\nprint_r(array_rand($a,1));\n?>"
      ]
    },
    {
      "title": "PHP array_reduce() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nSend the values in an array to a user-defined function and return a string:\nDefinition and Usage\nThe array_reduce() function sends the values in an array to a user-defined function, and returns a string.\nNote: If the array is empty and initial is not passed, this function returns NULL.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nWith the initial parameter:\nExample\nReturning a sum:",
      "examples": [
        "<?php\nfunction myfunction($v1,$v2)\n{\nreturn $v1 . \"-\" . $v2;\n}\n$a=array(\"Dog\",\"Cat\",\"Horse\");\nprint_r(array_reduce($a,\"myfunction\"));\n?>",
        "array_reduce(array, myfunction, initial)",
        "<?php\nfunction myfunction($v1,$v2)\n{\nreturn $v1 . \"-\" . $v2;\n}\n$a=array(\"Dog\",\"Cat\",\"Horse\");\nprint_r(array_reduce($a,\"myfunction\",5));\n?>",
        "<?php\nfunction myfunction($v1,$v2)\n{\nreturn $v1+$v2;\n}\n$a=array(10,15,20);\nprint_r(array_reduce($a,\"myfunction\",5));\n?>"
      ]
    },
    {
      "title": "PHP array_replace() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nReplace the values of the first array ($a1) with the values from the second array ($a2):\nDefinition and Usage\nThe array_replace() function replaces the values of the first array with the values from following arrays.\nTip: You can assign one array to the function, or as many as you like.\nIf a key from array1 exists in array2, values from array1 will be replaced by the values from array2. If the key only exists in array1, it will be left as it is (See Example 1 below).\nIf a key exist in array2 and not in array1, it will be created in array1 (See Example 2 below).\nIf multiple arrays are used, values from later arrays will overwrite the previous ones (See Example 3 below).\nTip: Use array_replace_recursive() to replace the values of array1 with the values from following arrays recursively.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample 1\nIf a key from array1 exists in array2, and if the key only exists in array1:\nExample 2\nIf a key exists in array2 and not in array1:\nExample 3\nUsing three arrays - the last array ($a3) will overwrite the previous ones ($a1 and $a2):\nExample 4\nUsing numeric keys - If a key exists in array2 and not in array1:",
      "examples": [
        "<?php\n$a1=array(\"red\",\"green\");\n$a2=array(\"blue\",\"yellow\");\nprint_r(array_replace($a1,$a2));\n?>",
        "array_replace(array1, array2, array3, ...)",
        "<?php\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\");\n$a2=array(\"a\"=>\"orange\",\"burgundy\");\nprint_r(array_replace($a1,$a2));\n?>",
        "<?php\n$a1=array(\"a\"=>\"red\",\"green\");\n$a2=array(\"a\"=>\"orange\",\"b\"=>\"burgundy\");\nprint_r(array_replace($a1,$a2));\n?>",
        "<?php\n$a1=array(\"red\",\"green\");\n$a2=array(\"blue\",\"yellow\");\n$a3=array(\"orange\",\"burgundy\");\nprint_r(array_replace($a1,$a2,$a3));\n?>",
        "<?php\n$a1=array(\"red\",\"green\",\"blue\",\"yellow\");\n$a2=array(0=>\"orange\",3=>\"burgundy\");\nprint_r(array_replace($a1,$a2));\n?>"
      ]
    },
    {
      "title": "PHP array_replace_recursive() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nReplace the values of the first array with the values from the second array recursively:\nDefinition and Usage\nThe array_replace_recursive() function replaces the values of the first array with the values from following arrays recursively.\nTip: You can assign one array to the function, or as many as you like.\nIf a key from array1 exists in array2, values from array1 will be replaced by the values from array2. If the key only exists in array1, it will be left as it is. If a key exist in array2 and not in array1, it will be created in array1. If multiple arrays are used, values from later arrays will overwrite the previous ones.\nNote: If you do not specify a key for each array, this function will behave exactly the same as the array_replace() function.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nMultiple arrays:\nExample\nDifferences between array_replace() and array_replace_recursive():",
      "examples": [
        "<?php\n$a1=array(\"a\"=>array(\"red\"),\"b\"=>array(\"green\",\"blue\"),);\n$a2=array(\"a\"=>array(\"yellow\"),\"b\"=>array(\"black\"));\nprint_r(array_replace_recursive($a1,$a2));\n?>",
        "array_replace_recursive(array1, array2, array3, ...)",
        "<?php\n$a1=array(\"a\"=>array(\"red\"),\"b\"=>array(\"green\",\"blue\"));\n$a2=array(\"a\"=>array(\"yellow\"),\"b\"=>array(\"black\"));\n$a3=array(\"a\"=>array(\"orange\"),\"b\"=>array(\"burgundy\"));\nprint_r(array_replace_recursive($a1,$a2,$a3));\n?>",
        "<?php\n$a1=array(\"a\"=>array(\"red\"),\"b\"=>array(\"green\",\"blue\"),);\n$a2=array(\"a\"=>array(\"yellow\"),\"b\"=>array(\"black\"));\n\n$result=array_replace_recursive($a1,$a2);\nprint_r($result);\n\n$result=array_replace($a1,$a2);\nprint_r($result);\n?>"
      ]
    },
    {
      "title": "PHP array_reverse() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nReturn an array in the reverse order:\nDefinition and Usage\nThe array_reverse() function returns an array in the reverse order.\nSyntax\nParameter Values\ntrue\nfalse\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nReturn the original array, the reversed array and the preserved array:",
      "examples": [
        "<?php\n$a=array(\"a\"=>\"Volvo\",\"b\"=>\"BMW\",\"c\"=>\"Toyota\");\nprint_r(array_reverse($a));\n?>",
        "array_reverse(array, preserve)",
        "<?php\n$a=array(\"Volvo\",\"XC90\",array(\"BMW\",\"Toyota\"));\n$reverse=array_reverse($a);\n$preserve=array_reverse($a,true);\n\nprint_r($a);\nprint_r($reverse);\nprint_r($preserve);\n?>"
      ]
    },
    {
      "title": "PHP array_search() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nSearch an array for the value \"red\" and return its key:\nDefinition and Usage\nThe array_search() function search an array for a value and returns the key.\nSyntax\nParameter Values\ntrue\nfalse - Default\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nSearch an array for the value 5 and return its key (notice the \"\"):",
      "examples": [
        "<?php\n$a=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\necho array_search(\"red\",$a);\n?>",
        "array_search(value, array, strict)",
        "<?php\n$a=array(\"a\"=>\"5\",\"b\"=>5,\"c\"=>\"5\");\necho array_search(5,$a,true);\n?>"
      ]
    },
    {
      "title": "PHP array_shift() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nRemove the first element (red) from an array, and return the value of the removed element:\nDefinition and Usage\nThe array_shift() function removes the first element from an array, and returns the value of the removed element.\nNote: If the keys are numeric, all elements will get new keys, starting from 0 and increases by 1 (See example below).\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nUsing numeric keys:",
      "examples": [
        "<?php\n$a=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\necho array_shift($a);\nprint_r ($a);\n?>",
        "array_shift(array)",
        "<?php\n$a=array(0=>\"red\",1=>\"green\",2=>\"blue\");\necho array_shift($a);\nprint_r ($a);\n?>"
      ]
    },
    {
      "title": "PHP array_slice() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nStart the slice from the third array element, and return the rest of the elements in the array:\nDefinition and Usage\nThe array_slice() function returns selected parts of an array.\nNote: If the array have string keys, the returned array will always preserve the keys (See example 4).\nSyntax\nParameter Values\ntrue - Preserve keys\nfalse - Default. Reset keys\nREMOVE ADS\nTechnical Details\nMore Examples\nExample 1\nStart the slice from from the second array element, and return only two elements:\nExample 2\nUsing a negative start parameter:\nExample 3\nWith the preserve parameter set to true:\nExample 4\nWith both string and integer keys:",
      "examples": [
        "<?php\n$a=array(\"red\",\"green\",\"blue\",\"yellow\",\"brown\");\nprint_r(array_slice($a,2));\n?>",
        "array_slice(array, start, length, preserve)",
        "<?php\n$a=array(\"red\",\"green\",\"blue\",\"yellow\",\"brown\");\nprint_r(array_slice($a,1,2));\n?>",
        "<?php\n$a=array(\"red\",\"green\",\"blue\",\"yellow\",\"brown\");\nprint_r(array_slice($a,-2,1));\n?>",
        "<?php\n$a=array(\"red\",\"green\",\"blue\",\"yellow\",\"brown\");\nprint_r(array_slice($a,1,2,true));\n?>",
        "<?php\n$a=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"d\"=>\"yellow\",\"e\"=>\"brown\");\nprint_r(array_slice($a,1,2));\n\n$a=array(\"0\"=>\"red\",\"1\"=>\"green\",\"2\"=>\"blue\",\"3\"=>\"yellow\",\"4\"=>\"brown\");\nprint_r(array_slice($a,1,2));\n?>"
      ]
    },
    {
      "title": "PHP array_splice() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nRemove elements from an array and replace it with new elements:\nDefinition and Usage\nThe array_splice() function removes selected elements from an array and replaces it with new elements. The function also returns an array with the removed elements.\nTip: If the function does not remove any elements (length=0), the replaced array will be inserted from the position of the start parameter (See Example 2).\nNote: The keys in the replaced array are not preserved.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample 1\nThe same example as the example on top of the page, but the output is the returned array:\nExample 2\nWith the length parameter set to 0:",
      "examples": [
        "<?php\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"d\"=>\"yellow\");\n$a2=array(\"a\"=>\"purple\",\"b\"=>\"orange\");\narray_splice($a1,0,2,$a2);\nprint_r($a1);\n?>",
        "array_splice(array, start, length, array)",
        "<?php\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"d\"=>\"yellow\");\n$a2=array(\"a\"=>\"purple\",\"b\"=>\"orange\");\nprint_r(array_splice($a1,0,2,$a2));\n?>",
        "<?php\n$a1=array(\"0\"=>\"red\",\"1\"=>\"green\");\n$a2=array(\"0\"=>\"purple\",\"1\"=>\"orange\");\narray_splice($a1,1,0,$a2);\nprint_r($a1);\n?>"
      ]
    },
    {
      "title": "PHP array_sum() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nReturn the sum of all the values in the array (5+15+25):\nDefinition and Usage\nThe array_sum() function returns the sum of all the values in the array.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the sum of all the values in the array (52.2+13.7+0.9):",
      "examples": [
        "<?php\n$a=array(5,15,25);\necho array_sum($a);\n?>",
        "array_sum(array)",
        "<?php\n$a=array(\"a\"=>52.2,\"b\"=>13.7,\"c\"=>0.9);\necho array_sum($a);\n?>"
      ]
    },
    {
      "title": "PHP array_udiff() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nCompare the values of two arrays (use a user-defined function to compare the values) and return the differences:\nDefinition and Usage\nThe array_udiff() function compares the values of two or more arrays, and returns the differences.\nNote: This function uses a user-defined function to compare the values!\nThis function compares the values of two (or more) arrays, and return an array that contains the entries from array1 that are not present in array2 or array3, etc.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nCompare the values of three arrays (use a user-defined function to compare the values), and return the differences:",
      "examples": [
        "<?php\nfunction myfunction($a,$b)\n{\nif ($a===$b)\n{\nreturn 0;\n}\nreturn ($a>$b)?1:-1;\n}\n\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\n$a2=array(\"a\"=>\"blue\",\"b\"=>\"black\",\"e\"=>\"blue\");\n\n$result=array_udiff($a1,$a2,\"myfunction\");\nprint_r($result);\n?>",
        "array_udiff(array1, array2, array3, ..., myfunction)",
        "<?php\nfunction myfunction($a,$b)\n{\nif ($a===$b)\n{\nreturn 0;\n}\nreturn ($a>$b)?1:-1;\n}\n\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"yellow\");\n$a2=array(\"A\"=>\"red\",\"b\"=>\"GREEN\",\"yellow\",\"black\");\n$a3=array(\"a\"=>\"green\",\"b\"=>\"red\",\"yellow\",\"black\");\n\n$result=array_udiff($a1,$a2,$a3,\"myfunction\");\nprint_r($result);\n\n?>"
      ]
    },
    {
      "title": "PHP array_udiff_assoc() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nCompare the keys and values of two arrays (using a built-in function to compare the keys and a user-defined function to compare the values) and return the differences:\nDefinition and Usage\nThe array_udiff_assoc() function compares the keys and values of two or more arrays, and returns the differences.\nNote: This function uses a built-in function to compare the keys, and a user-defined function to compare the values!\nThis function compares the keys and values of two (or more) arrays, and return an array that contains the entries from array1 that are not present in array2 or array3, etc.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\nfunction myfunction($a,$b)\n{\nif ($a===$b)\n{\nreturn 0;\n}\nreturn ($a>$b)?1:-1;\n}\n\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\n$a2=array(\"a\"=>\"red\",\"b\"=>\"blue\",\"c\"=>\"green\");\n\n$result=array_udiff_assoc($a1,$a2,\"myfunction\");\nprint_r($result);\n?>",
        "array_udiff_assoc(array1, array2, array3, ..., myfunction)"
      ]
    },
    {
      "title": "PHP array_udiff_uassoc() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nCompare the keys and values of two arrays (using two user-defined functions for comparison) and return the differences:\nDefinition and Usage\nThe array_udiff_uassoc() function compares the keys and values of two or more arrays, and returns the differences.\nNote: This function uses two user-defined functions for comparison; the key is used in the first function and the value is used in the second!\nThis function compares the keys and values of two (or more) arrays, and return an array that contains the entries from array1 that are not present in array2or array3, etc.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\nfunction myfunction_key($a,$b)\n{\nif ($a===$b)\n{\nreturn 0;\n}\nreturn ($a>$b)?1:-1;\n}\n\nfunction myfunction_value($a,$b)\n{\nif ($a===$b)\n{\nreturn 0;\n}\nreturn ($a>$b)?1:-1;\n}\n\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\n$a2=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"green\");\n\n$result=array_udiff_uassoc($a1,$a2,\"myfunction_value\",\"myfunction_key\");\nprint_r($result);\n?>",
        "array_udiff_uassoc(array1, array2, array3, ..., myfunc_key, myfunc_value)"
      ]
    },
    {
      "title": "PHP array_uintersect() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nCompare the values of two arrays (use a user-defined function to compare the values) and return the matches:\nDefinition and Usage\nThe array_uintersect() function compares the values of two or more arrays, and returns the matches.\nNote: This function uses a user-defined function to compare the values!\nThis function compares the values of two (or more) arrays, and return an array that contains the entries from array1 that are present in array2, array3, etc.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nCompare the values of three arrays (use a user-defined function to compare the values), and return the matches:",
      "examples": [
        "<?php\nfunction myfunction($a,$b)\n{\nif ($a===$b)\n{\nreturn 0;\n}\nreturn ($a>$b)?1:-1;\n}\n\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\n$a2=array(\"a\"=>\"blue\",\"b\"=>\"black\",\"e\"=>\"blue\");\n\n$result=array_uintersect($a1,$a2,\"myfunction\");\nprint_r($result);\n?>",
        "array_uintersect(array1, array2, array3, ..., myfunction)",
        "<?php\nfunction myfunction($a,$b)\n{\nif ($a===$b)\n{\nreturn 0;\n}\nreturn ($a>$b)?1:-1;\n}\n\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"yellow\");\n$a2=array(\"A\"=>\"red\",\"b\"=>\"GREEN\",\"yellow\",\"black\");\n$a3=array(\"a\"=>\"green\",\"b\"=>\"red\",\"yellow\",\"black\");\n\n$result=array_uintersect($a1,$a2,$a3,\"myfunction\");\nprint_r($result);\n?>"
      ]
    },
    {
      "title": "PHP array_uintersect_assoc() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nCompare the keys and values of two arrays (using a built-in function to compare the keys and a user-defined function to compare the values) and return the matches:\nDefinition and Usage\nThe array_uintersect_assoc() function compares the keys and values of two or more arrays, and returns the matches.\nNote: This function uses a built-in function to compare the keys, and a user-defined function to compare the values!\nThis function compares the keys and values of two (or more) arrays, and return an array that contains the entries from array1 that are present in array2, array3, etc.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\nfunction myfunction($a,$b)\n{\nif ($a===$b)\n{\nreturn 0;\n}\nreturn ($a>$b)?1:-1;\n}\n\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\n$a2=array(\"a\"=>\"red\",\"b\"=>\"blue\",\"c\"=>\"green\");\n\n$result=array_uintersect_assoc($a1,$a2,\"myfunction\");\nprint_r($result);\n?>",
        "array_uintersect_assoc(array1, array2, array3, ..., myfunction)"
      ]
    },
    {
      "title": "PHP array_uintersect_uassoc() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nCompare the keys and values of two arrays (using two user-defined functions for comparison) and return the matches:\nDefinition and Usage\nThe array_uintersect_uassoc() function compares the keys and values of two or more arrays, and returns the matches.\nNote: This function uses two user-defined functions for comparison; the value is used in the first function and the key is used in the second!\nThis function compares the keys and values of two (or more) arrays, and return an array that contains the entries from array1 that are present in array2, array3, etc.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\nfunction myfunction_value($a,$b) {\nif ($a===$b) {\nreturn 0;\n}\nreturn ($a>$b)?1:-1;\n}\n\nfunction myfunction_key($a,$b) {\nif ($a===$b) {\nreturn 0;\n}\nreturn ($a>$b)?1:-1;\n}\n\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\n$a2=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"green\");\n\n$result=array_uintersect_uassoc($a1,$a2,\"myfunction_value\",\"myfunction_key\");\nprint_r($result);\n?>",
        "array_uintersect_uassoc(array1, array2, array3, ..., myfunc_value, myfunc_key)"
      ]
    },
    {
      "title": "PHP array_unique() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nRemove duplicate values from an array:\nDefinition and Usage\nThe array_unique() function removes duplicate values from an array. If two or more array values are the same, the first appearance will be kept and the other will be removed.\nNote: The returned array will keep the first array item's key type.\nSyntax\nParameter Values\nSORT_STRING - Default. Compare items as strings\nSORT_REGULAR - Compare items normally (don't change types)\nSORT_NUMERIC - Compare items numerically\nSORT_LOCALE_STRING - Compare items as strings, based on current locale\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$a=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"red\");\nprint_r(array_unique($a));\n?>",
        "array_unique(array, sorttype)"
      ]
    },
    {
      "title": "PHP array_unshift() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nInsert the element \"blue\" to an array:\nDefinition and Usage\nThe array_unshift() function inserts new elements to an array. The new array values will be inserted in the beginning of the array.\nTip: You can add one value, or as many as you like.\nNote: Numeric keys will start at 0 and increase by 1. String keys will remain the same.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nShow the return value:\nExample\nUsing numeric keys:",
      "examples": [
        "<?php\n$a=array(\"a\"=>\"red\",\"b\"=>\"green\");\narray_unshift($a,\"blue\");\nprint_r($a);\n?>",
        "array_unshift(array, value1, value2, value3, ...)",
        "<?php\n$a=array(\"a\"=>\"red\",\"b\"=>\"green\");\nprint_r(array_unshift($a,\"blue\"));\n?>",
        "<?php\n$a=array(0=>\"red\",1=>\"green\");\narray_unshift($a,\"blue\");\nprint_r($a);\n?>"
      ]
    },
    {
      "title": "PHP array_values() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nReturn all the values of an array (not the keys):\nDefinition and Usage\nThe array_values() function returns an array containing all the values of an array.\nTip: The returned array will have numeric keys, starting at 0 and increase by 1.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a=array(\"Name\"=>\"Peter\",\"Age\"=>\"41\",\"Country\"=>\"USA\");\nprint_r(array_values($a));\n?>",
        "array_values(array)"
      ]
    },
    {
      "title": "PHP array_walk() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nRun each array element in a user-defined function:\nDefinition and Usage\nThe array_walk() function runs each array element in a user-defined function. The array's keys and values are parameters in the function.\nNote: You can change an array element's value in the user-defined function by specifying the first parameter as a reference: &$value (See Example 2).\nTip: To work with deeper arrays (an array inside an array), use the array_walk_recursive() function.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample 1\nWith a parameter:\nExample 2\nChange an array element's value. (Notice the &$value)",
      "examples": [
        "<?php\nfunction myfunction($value,$key)\n{\necho \"The key $key has the value $value<br>\";\n}\n$a=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\narray_walk($a,\"myfunction\");\n?>",
        "array_walk(array, myfunction, parameter...)",
        "<?php\nfunction myfunction($value,$key,$p)\n{\necho \"$key $p $value<br>\";\n}\n$a=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\narray_walk($a,\"myfunction\",\"has the value\");\n?>",
        "<?php\nfunction myfunction(&$value,$key)\n{\n$value=\"yellow\";\n}\n$a=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\narray_walk($a,\"myfunction\");\nprint_r($a);\n?>"
      ]
    },
    {
      "title": "PHP array_walk_recursive() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nRun each array element in a user-defined function:\nDefinition and Usage\nThe array_walk_recursive() function runs each array element in a user-defined function. The array's keys and values are parameters in the function. The difference between this function and the array_walk() function is that with this function you can work with deeper arrays (an array inside an array).\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\nfunction myfunction($value,$key)\n{\necho \"The key $key has the value $value<br>\";\n}\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\");\n$a2=array($a1,\"1\"=>\"blue\",\"2\"=>\"yellow\");\narray_walk_recursive($a2,\"myfunction\");\n?>",
        "array_walk_recursive(array, myfunction, parameter...)"
      ]
    },
    {
      "title": "PHP arsort() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nSort an associative array in descending order, according to the value:\nDefinition and Usage\nThe arsort() function sorts an associative array in descending order, according to the value.\nTip: Use the asort() function to sort an associative array in ascending order, according to the value.\nTip: Use the krsort() function to sort an associative array in descending order, according to the key.\nSyntax\nParameter Values\n0 = SORT_REGULAR - Default. Compare items normally (don't change types)\n1 = SORT_NUMERIC - Compare items numerically\n2 = SORT_STRING - Compare items as strings\n3 = SORT_LOCALE_STRING - Compare items as strings, based on current locale\n4 = SORT_NATURAL - Compare items as strings using natural ordering\n5 = SORT_FLAG_CASE -\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$age=array(\"Peter\"=>\"35\",\"Ben\"=>\"37\",\"Joe\"=>\"43\");\narsort($age);\n?>",
        "arsort(array, sorttype)"
      ]
    },
    {
      "title": "PHP asort() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nSort an associative array in ascending order, according to the value:\nDefinition and Usage\nThe asort() function sorts an associative array in ascending order, according to the value.\nTip: Use the arsort() function to sort an associative array in descending order, according to the value.\nTip: Use the ksort() function to sort an associative array in ascending order, according to the key.\nSyntax\nParameter Values\n0 = SORT_REGULAR - Default. Compare items normally (don't change types)\n1 = SORT_NUMERIC - Compare items numerically\n2 = SORT_STRING - Compare items as strings\n3 = SORT_LOCALE_STRING - Compare items as strings, based on current locale\n4 = SORT_NATURAL - Compare items as strings using natural ordering\n5 = SORT_FLAG_CASE -\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$age=array(\"Peter\"=>\"35\",\"Ben\"=>\"37\",\"Joe\"=>\"43\");\nasort($age);\n?>",
        "asort(array, sorttype)"
      ]
    },
    {
      "title": "PHP compact() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nCreate an array from variables and their values:\nDefinition and Usage\nThe compact() function creates an array from variables and their values.\nNote: Any strings that does not match variable names will be skipped.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nUsing a string that does not match a variable, and an array of variable names:",
      "examples": [
        "<?php\n$firstname = \"Peter\";\n$lastname = \"Griffin\";\n$age = \"41\";\n\n$result = compact(\"firstname\", \"lastname\", \"age\");\n\nprint_r($result);\n?>",
        "compact(var1, var2...)",
        "<?php\n$firstname = \"Peter\";\n$lastname = \"Griffin\";\n$age = \"41\";\n\n$name = array(\"firstname\", \"lastname\");\n$result = compact($name, \"location\", \"age\");\n\nprint_r($result);\n?>"
      ]
    },
    {
      "title": "PHP count() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nReturn the number of elements in an array:\nDefinition and Usage\nThe count() function returns the number of elements in an array.\nSyntax\nParameter Values\n0 - Default. Does not count all elements of multidimensional arrays\n1 - Counts the array recursively (counts all the elements of multidimensional arrays)\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nCount the array recursively:",
      "examples": [
        "<?php\n$cars=array(\"Volvo\",\"BMW\",\"Toyota\");\necho count($cars);\n?>",
        "count(array, mode)",
        "<?php\n$cars=array\n(\n\"Volvo\"=>array\n(\n\"XC60\",\n\"XC90\"\n),\n\"BMW\"=>array\n(\n\"X3\",\n\"X5\"\n),\n\"Toyota\"=>array\n(\n\"Highlander\"\n)\n);\n\necho \"Normal count: \" . count($cars).\"<br>\";\necho \"Recursive count: \" . count($cars,1);\n?>"
      ]
    },
    {
      "title": "PHP current() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nOutput the value of the current element in an array:\nDefinition and Usage\nThe current() function returns the value of the current element in an array.\nEvery array has an internal pointer to its \"current\" element, which is initialized to the first element inserted into the array.\nTip: This function does not move the arrays internal pointer.\nRelated methods:\nend() - moves the internal pointer to, and outputs, the last element in the array\nnext() - moves the internal pointer to, and outputs, the next element in the array\nprev() - moves the internal pointer to, and outputs, the previous element in the array\nreset() - moves the internal pointer to the first element of the array\neach() - returns the current element key and value, and moves the internal pointer forward\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nA demonstration of all related methods:",
      "examples": [
        "<?php\n$people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\n\necho current($people) . \"<br>\";\n?>",
        "current(array)",
        "<?php\n$people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\n\necho current($people) . \"<br>\"; // The current element is Peter\necho next($people) . \"<br>\"; // The next element of Peter is Joe\necho current($people) . \"<br>\"; // Now the current element is Joe\necho prev($people) . \"<br>\"; // The previous element of Joe is Peter\necho end($people) . \"<br>\"; // The last element is Cleveland\necho prev($people) . \"<br>\"; // The previous element of Cleveland is Glenn\necho current($people) . \"<br>\"; // Now the current element is Glenn\necho reset($people) . \"<br>\"; // Moves the internal pointer to the first element of the array, which is Peter\necho next($people) . \"<br>\"; // The next element of Peter is Joe\n\nprint_r (each($people)); // Returns the key and value of the current element (now Joe), and moves the internal pointer forward\n?>"
      ]
    },
    {
      "title": "PHP each() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nReturn the current element key and value, and move the internal pointer forward:\nDefinition and Usage\nThe each() function returns the current element key and value, and moves the internal pointer forward.\nNote: The each() function is deprecated in PHP 7.2.\nThis element key and value is returned in an array with four elements. Two elements (1 and Value) for the element value, and two elements (0 and Key) for the element key.\nRelated methods:\ncurrent() - returns the value of the current element in an array\nend() - moves the internal pointer to, and outputs, the last element in the array\nnext() - moves the internal pointer to, and outputs, the next element in the array\nprev() - moves the internal pointer to, and outputs, the previous element in the array\nreset() - moves the internal pointer to the first element of the array\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nSame example as the one on top of the page, but with a loop to output the whole array:\nExample\nA demonstration of all related methods:",
      "examples": [
        "<?php\n$people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\nprint_r (each($people));\n?>",
        "each(array)",
        "<?php\n$people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\n\nreset($people);\n\nwhile (list($key, $val) = each($people))\n{\necho \"$key => $val<br>\";\n}\n?>",
        "<?php\n$people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\n\necho current($people) . \"<br>\"; // The current element is Peter\necho next($people) . \"<br>\"; // The next element of Peter is Joe\necho current($people) . \"<br>\"; // Now the current element is Joe\necho prev($people) . \"<br>\"; // The previous element of Joe is Peter\necho end($people) . \"<br>\"; // The last element is Cleveland\necho prev($people) . \"<br>\"; // The previous element of Cleveland is Glenn\necho current($people) . \"<br>\"; // Now the current element is Glenn\necho reset($people) . \"<br>\"; // Moves the internal pointer to the first element of the array, which is Peter\necho next($people) . \"<br>\"; // The next element of Peter is Joe\n\nprint_r (each($people)); // Returns the key and value of the current element (now Joe), and moves the internal pointer forward\n?>"
      ]
    },
    {
      "title": "PHP end() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nOutput the value of the current and the last element in an array:\nDefinition and Usage\nThe end() function moves the internal pointer to, and outputs, the last element in the array.\nRelated methods:\ncurrent() - returns the value of the current element in an array\nnext() - moves the internal pointer to, and outputs, the next element in the array\nprev() - moves the internal pointer to, and outputs, the previous element in the array\nreset() - moves the internal pointer to the first element of the array\neach() - returns the current element key and value, and moves the internal pointer forward\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nA demonstration of all related methods:",
      "examples": [
        "<?php\n$people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\necho current($people) . \"<br>\";\necho end($people);\n?>",
        "end(array)",
        "<?php\n$people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\n\necho current($people) . \"<br>\"; // The current element is Peter\necho next($people) . \"<br>\"; // The next element of Peter is Joe\necho current($people) . \"<br>\"; // Now the current element is Joe\necho prev($people) . \"<br>\"; // The previous element of Joe is Peter\necho end($people) . \"<br>\"; // The last element is Cleveland\necho prev($people) . \"<br>\"; // The previous element of Cleveland is Glenn\necho current($people) . \"<br>\"; // Now the current element is Glenn\necho reset($people) . \"<br>\"; // Moves the internal pointer to the first element of the array, which is Peter\necho next($people) . \"<br>\"; // The next element of Peter is Joe\n\nprint_r (each($people)); // Returns the key and value of the current element (now Joe), and moves the internal pointer forward\n?>"
      ]
    },
    {
      "title": "PHP extract() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nAssign the values \"Cat\", \"Dog\" and \"Horse\" to the variables $a, $b and $c:\nDefinition and Usage\nThe extract() function imports variables into the local symbol table from an array.\nThis function uses array keys as variable names and values as variable values. For each element it will create a variable in the current symbol table.\nThis function returns the number of variables extracted on success.\nSyntax\nParameter Values\nPossible values:\nEXTR_OVERWRITE - Default. On collision, the existing variable is overwritten\nEXTR_SKIP - On collision, the existing variable is not overwritten\nEXTR_PREFIX_SAME - On collision, the variable name will be given a prefix\nEXTR_PREFIX_ALL - All variable names will be given a prefix\nEXTR_PREFIX_INVALID - Only invalid or numeric variable names will be given a prefix\nEXTR_IF_EXISTS - Only overwrite existing variables in the current symbol table, otherwise do nothing\nEXTR_PREFIX_IF_EXISTS - Only add prefix to variables if the same variable exists in the current symbol table\nEXTR_REFS - Extracts variables as references. The imported variables are still referencing the values of the array parameter\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nUsing all parameters:",
      "examples": [
        "<?php\n$a = \"Original\";\n$my_array = array(\"a\" => \"Cat\",\"b\" => \"Dog\", \"c\" => \"Horse\");\nextract($my_array);\necho \"\\$a = $a; \\$b = $b; \\$c = $c\";\n?>",
        "extract(array, extract_rules, prefix)",
        "<?php\n$a = \"Original\";\n$my_array = array(\"a\" => \"Cat\", \"b\" => \"Dog\", \"c\" => \"Horse\");\n\nextract($my_array, EXTR_PREFIX_SAME, \"dup\");\n\necho \"\\$a = $a; \\$b = $b; \\$c = $c; \\$dup_a = $dup_a\";\n?>"
      ]
    },
    {
      "title": "PHP in_array() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nSearch for the value \"Glenn\" in an array and output some text:\nDefinition and Usage\nThe in_array() function searches an array for a specific value.\nNote: If the search parameter is a string and the type parameter is set to TRUE, the search is case-sensitive.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nUsing all parameters:",
      "examples": [
        "<?php\n$people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\n\nif (in_array(\"Glenn\", $people))\n{\necho \"Match found\";\n}\nelse\n{\necho \"Match not found\";\n}\n?>",
        "in_array(search, array, type)",
        "<?php\n$people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\", 23);\n\nif (in_array(\"23\", $people, TRUE))\n{\necho \"Match found<br>\";\n}\nelse\n{\necho \"Match not found<br>\";\n}\nif (in_array(\"Glenn\",$people, TRUE))\n{\necho \"Match found<br>\";\n}\nelse\n{\necho \"Match not found<br>\";\n}\n\nif (in_array(23,$people, TRUE))\n{\necho \"Match found<br>\";\n}\nelse\n{\necho \"Match not found<br>\";\n}\n?>"
      ]
    },
    {
      "title": "PHP key() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nReturn the element key from the current internal pointer position:\nDefinition and Usage\nThe key() function returns the element key from the current internal pointer position.\nThis function returns FALSE on error.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$people=array(\"Peter\",\"Joe\",\"Glenn\",\"Cleveland\");\necho \"The key from the current position is: \" . key($people);\n?>",
        "key(array)"
      ]
    },
    {
      "title": "PHP krsort() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nSort an associative array in descending order, according to the key:\nDefinition and Usage\nThe krsort() function sorts an associative array in descending order, according to the key.\nTip: Use the ksort() function to sort an associative array in ascending order, according to the key.\nTip: Use the arsort() function to sort an associative array in descending order, according to the value.\nSyntax\nParameter Values\n0 = SORT_REGULAR - Default. Compare items normally (don't change types)\n1 = SORT_NUMERIC - Compare items numerically\n2 = SORT_STRING - Compare items as strings\n3 = SORT_LOCALE_STRING - Compare items as strings, based on current locale\n4 = SORT_NATURAL - Compare items as strings using natural ordering\n5 = SORT_FLAG_CASE -\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$age=array(\"Peter\"=>\"35\",\"Ben\"=>\"37\",\"Joe\"=>\"43\");\nkrsort($age);\n?>",
        "krsort(array, sorttype)"
      ]
    },
    {
      "title": "PHP ksort() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nSort an associative array in ascending order, according to the key:\nDefinition and Usage\nThe ksort() function sorts an associative array in ascending order, according to the key.\nTip: Use the krsort() function to sort an associative array in descending order, according to the key.\nTip: Use the asort() function to sort an associative array in ascending order, according to the value.\nSyntax\nParameter Values\n0 = SORT_REGULAR - Default. Compare items normally (don't change types)\n1 = SORT_NUMERIC - Compare items numerically\n2 = SORT_STRING - Compare items as strings\n3 = SORT_LOCALE_STRING - Compare items as strings, based on current locale\n4 = SORT_NATURAL - Compare items as strings using natural ordering\n5 = SORT_FLAG_CASE -\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$age=array(\"Peter\"=>\"35\",\"Ben\"=>\"37\",\"Joe\"=>\"43\");\nksort($age);\n?>",
        "ksort(array, sorttype)"
      ]
    },
    {
      "title": "PHP list() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nAssign variables as if they were an array:\nDefinition and Usage\nThe list() function is used to assign values to a list of variables in one operation.\nNote: Prior to PHP 7.1, this function only worked on numerical arrays.\nSyntax\nParameter Values\nTechnical Details\nREMOVE ADS\nMore Examples\nExample\nUsing the first and third variables:",
      "examples": [
        "<?php\n$my_array = array(\"Dog\",\"Cat\",\"Horse\");\n\nlist($a, $b, $c) = $my_array;\necho \"I have several animals, a $a, a $b and a $c.\";\n?>",
        "list(var1, var2, ...)",
        "<?php\n$my_array = array(\"Dog\",\"Cat\",\"Horse\");\n\nlist($a, , $c) = $my_array;\necho \"Here I only use the $a and $c variables.\";\n?>"
      ]
    },
    {
      "title": "PHP natcasesort() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nSort an array by using natsort() and natcasesort():\nThe output of the code above will be:\nDefinition and Usage\nThe natcasesort() function sorts an array by using a \"natural order\" algorithm. The values keep their original keys.\nIn a natural algorithm, the number 2 is less than the number 10. In computer sorting, 10 is less than 2, because the first number in \"10\" is less than 2.\nThis function is case-insensitive.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$temp_files = array(\"temp15.txt\",\"Temp10.txt\",\n\"temp1.txt\",\"Temp22.txt\",\"temp2.txt\");\n\nnatsort($temp_files);\necho \"Natural order: \";\nprint_r($temp_files);\necho \"<br />\";\n\nnatcasesort($temp_files);\necho \"Natural order case insensitve: \";\nprint_r($temp_files);\n?>",
        "Natural order:\nArray\n(\n[0] => Temp10.txt\n[1] => Temp22.txt\n[2] => temp1.txt\n[4] => temp2.txt\n[3] => temp15.txt\n)\nNatural order case insensitve:\nArray\n(\n[2] => temp1.txt\n[4] => temp2.txt\n[0] => Temp10.txt\n[3] => temp15.txt\n[1] => Temp22.txt\n)",
        "natcasesort(array)"
      ]
    },
    {
      "title": "PHP natsort() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nSort an array:\nDefinition and Usage\nThe natsort() function sorts an array by using a \"natural order\" algorithm. The values keep their original keys.\nIn a natural algorithm, the number 2 is less than the number 10. In computer sorting, 10 is less than 2, because the first number in \"10\" is less than 2.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$temp_files = array(\"temp15.txt\",\"temp10.txt\",\n\"temp1.txt\",\"temp22.txt\",\"temp2.txt\");\n\nsort($temp_files);\necho \"Standard sorting: \";\nprint_r($temp_files);\necho \"<br>\";\n\nnatsort($temp_files);\necho \"Natural order: \";\nprint_r($temp_files);\n?>",
        "natsort(array)"
      ]
    },
    {
      "title": "PHP next() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nOutput the value of the current and the next element in the array:\nDefinition and Usage\nThe next() function moves the internal pointer to, and outputs, the next element in the array.\nRelated methods:\nprev() - moves the internal pointer to, and outputs, the previous element in the array\ncurrent() - returns the value of the current element in an array\nend() - moves the internal pointer to, and outputs, the last element in the array\nreset() - moves the internal pointer to the first element of the array\neach() - returns the current element key and value, and moves the internal pointer forward\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nA demonstration of all related methods:",
      "examples": [
        "<?php\n$people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\n\necho current($people) . \"<br>\";\necho next($people);\n?>",
        "next(array)",
        "<?php\n$people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\n\necho current($people) . \"<br>\"; // The current element is Peter\necho next($people) . \"<br>\"; // The next element of Peter is Joe\necho current($people) . \"<br>\"; // Now the current element is Joe\necho prev($people) . \"<br>\"; // The previous element of Joe is Peter\necho end($people) . \"<br>\"; // The last element is Cleveland\necho prev($people) . \"<br>\"; // The previous element of Cleveland is Glenn\necho current($people) . \"<br>\"; // Now the current element is Glenn\necho reset($people) . \"<br>\"; // Moves the internal pointer to the first element of the array, which is Peter\necho next($people) . \"<br>\"; // The next element of Peter is Joe\n\nprint_r (each($people)); // Returns the key and value of the current element (now Joe), and moves the internal pointer forward\n?>"
      ]
    },
    {
      "title": "PHP pos() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nOutput the value of the current element in an array:\nDefinition and Usage\nThe pos() function returns the value of the current element in an array.\nThis function is an alias of the current() function.\nEvery array has an internal pointer to its \"current\" element, which is initialized to the first element inserted into the array.\nTip: This function does not move the arrays internal pointer.\nRelated methods:\ncurrent() - returns the value of the current element in an array\nend() - moves the internal pointer to, and outputs, the last element in the array\nnext() - moves the internal pointer to, and outputs, the next element in the array\nprev() - moves the internal pointer to, and outputs, the previous element in the array\nreset() - moves the internal pointer to the first element of the array\neach() - returns the current element key and value, and moves the internal pointer forward\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nA demonstration of all related methods:",
      "examples": [
        "<?php\n$people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\n\necho pos($people) . \"<br>\";\n?>",
        "pos(array)",
        "<?php\n$people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\n\necho current($people) . \"<br>\"; // The current element is Peter\necho next($people) . \"<br>\"; // The next element of Peter is Joe\necho current($people) . \"<br>\"; // Now the current element is Joe\necho prev($people) . \"<br>\"; // The previous element of Joe is Peter\necho end($people) . \"<br>\"; // The last element is Cleveland\necho prev($people) . \"<br>\"; // The previous element of Cleveland is Glenn\necho current($people) . \"<br>\"; // Now the current element is Glenn\necho reset($people) . \"<br>\"; // Moves the internal pointer to the first element of the array, which is Peter\necho next($people) . \"<br>\"; // The next element of Peter is Joe\n\nprint_r (each($people)); // Returns the key and value of the current element (now Joe), and moves the internal pointer forward\n?>"
      ]
    },
    {
      "title": "PHP prev() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nOutput the value of the current, next and previous element in the array:\nDefinition and Usage\nThe prev() function moves the internal pointer to, and outputs, the previous element in the array.\nRelated methods:\nnext() - moves the internal pointer to, and outputs, the next element in the array\ncurrent() - returns the value of the current element in an array\nend() - moves the internal pointer to, and outputs, the last element in the array\nreset() - moves the internal pointer to the first element of the array\neach() - returns the current element key and value, and moves the internal pointer forward\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nA demonstration of all related methods:",
      "examples": [
        "<?php\n$people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\n\necho current($people) . \"<br>\";\necho next($people) . \"<br>\";\necho prev($people);\n?>",
        "prev(array)",
        "<?php\n$people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\n\necho current($people) . \"<br>\"; // The current element is Peter\necho next($people) . \"<br>\"; // The next element of Peter is Joe\necho current($people) . \"<br>\"; // Now the current element is Joe\necho prev($people) . \"<br>\"; // The previous element of Joe is Peter\necho end($people) . \"<br>\"; // The last element is Cleveland\necho prev($people) . \"<br>\"; // The previous element of Cleveland is Glenn\necho current($people) . \"<br>\"; // Now the current element is Glenn\necho reset($people) . \"<br>\"; // Moves the internal pointer to the first element of the array, which is Peter\necho next($people) . \"<br>\"; // The next element of Peter is Joe\n\nprint_r (each($people)); // Returns the key and value of the current element (now Joe), and moves the internal pointer forward\n?>"
      ]
    },
    {
      "title": "PHP range() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nCreate an array containing a range of elements from \"0\" to \"5\":\nDefinition and Usage\nThe range() function creates an array containing a range of elements.\nThis function returns an array of elements from low to high.\nNote: If the low parameter is higher than the high parameter, the range array will be from high to low.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nReturn an array of elements from \"0\" to \"50\" and increment by 10.\nExample\nUsing letters - return an array of elements from \"a\" to \"d\"",
      "examples": [
        "<?php\n$number = range(0,5);\nprint_r ($number);\n?>",
        "range(low, high, step)",
        "<?php\n$number = range(0,50,10);\nprint_r ($number);\n?>",
        "<?php\n$letter = range(\"a\",\"d\");\nprint_r ($letter);\n?>"
      ]
    },
    {
      "title": "PHP reset() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nOutput the value of the current and next element in an array, then reset the array's internal pointer to the first element in the array:\nDefinition and Usage\nThe reset() function moves the internal pointer to the first element of the array.\nRelated methods:\ncurrent() - returns the value of the current element in an array\nend() - moves the internal pointer to, and outputs, the last element in the array\nnext() - moves the internal pointer to, and outputs, the next element in the array\nprev() - moves the internal pointer to, and outputs, the previous element in the array\neach() - returns the current element key and value, and moves the internal pointer forward\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nA demonstration of all related methods:",
      "examples": [
        "<?php\n$people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\n\necho current($people) . \"<br>\";\necho next($people) . \"<br>\";\n\necho reset($people);\n?>",
        "reset(array)",
        "<?php\n$people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\n\necho current($people) . \"<br>\"; // The current element is Peter\necho next($people) . \"<br>\"; // The next element of Peter is Joe\necho current($people) . \"<br>\"; // Now the current element is Joe\necho prev($people) . \"<br>\"; // The previous element of Joe is Peter\necho end($people) . \"<br>\"; // The last element is Cleveland\necho prev($people) . \"<br>\"; // The previous element of Cleveland is Glenn\necho current($people) . \"<br>\"; // Now the current element is Glenn\necho reset($people) . \"<br>\"; // Moves the internal pointer to the first element of the array, which is Peter\necho next($people) . \"<br>\"; // The next element of Peter is Joe\n\nprint_r (each($people)); // Returns the key and value of the current element (now Joe), and moves the internal pointer forward\n?>"
      ]
    },
    {
      "title": "PHP rsort() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nSort the elements of the $cars array in descending alphabetical order:\nDefinition and Usage\nThe rsort() function sorts an indexed array in descending order.\nTip: Use the sort() function to sort an indexed array in ascending order.\nSyntax\nParameter Values\n0 = SORT_REGULAR - Default. Compare items normally (don't change types)\n1 = SORT_NUMERIC - Compare items numerically\n2 = SORT_STRING - Compare items as strings\n3 = SORT_LOCALE_STRING - Compare items as strings, based on current locale\n4 = SORT_NATURAL - Compare items as strings using natural ordering\n5 = SORT_FLAG_CASE -\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nSort the elements of the $numbers array in descending numerical order:\nExample\nCompare the items numerically and sort the elements of the $cars array in descending order:",
      "examples": [
        "<?php\n$cars=array(\"Volvo\",\"BMW\",\"Toyota\");\nrsort($cars);\n?>",
        "rsort(array, sorttype)",
        "<?php\n$numbers=array(4,6,2,22,11);\nrsort($numbers);\n?>",
        "<?php\n$cars=array(\"Volvo\",\"BMW\",\"Toyota\");\nrsort($cars,SORT_NUMERIC);\n?>"
      ]
    },
    {
      "title": "PHP shuffle() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nRandomize the order of the elements in the array:\nDefinition and Usage\nThe shuffle() function randomizes the order of the elements in the array.\nThis function assigns new keys for the elements in the array. Existing keys will be removed (See Example below).\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nRandomize the order of the elements in the array:",
      "examples": [
        "<?php\n$my_array = array(\"red\",\"green\",\"blue\",\"yellow\",\"purple\");\n\nshuffle($my_array);\nprint_r($my_array);\n?>",
        "shuffle(array)",
        "<?php\n$my_array = array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"d\"=>\"yellow\",\"e\"=>\"purple\");\n\nshuffle($my_array);\nprint_r($my_array);\n?>"
      ]
    },
    {
      "title": "PHP sizeof() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nReturn the number of elements in an array:\nDefinition and Usage\nThe sizeof() function returns the number of elements in an array.\nThe sizeof() function is an alias of the count() function.\nSyntax\nParameter Values\n0 - Default. Does not count all elements of multidimensional arrays\n1 - Counts the array recursively (counts all the elements of multidimensional arrays)\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nCount the array recursively:",
      "examples": [
        "<?php\n$cars=array(\"Volvo\",\"BMW\",\"Toyota\");\necho sizeof($cars);\n?>",
        "sizeof(array, mode)",
        "<?php\n$cars=array\n(\n\"Volvo\"=>array\n(\n\"XC60\",\n\"XC90\"\n),\n\"BMW\"=>array\n(\n\"X3\",\n\"X5\"\n),\n\"Toyota\"=>array\n(\n\"Highlander\"\n)\n);\n\necho \"Normal count: \" . sizeof($cars).\"<br>\";\necho \"Recursive count: \" . sizeof($cars,1);\n?>"
      ]
    },
    {
      "title": "PHP sort() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nSort the elements of the $cars array in ascending alphabetical order:\nDefinition and Usage\nThe sort() function sorts an indexed array in ascending order.\nTip: Use the rsort() function to sort an indexed array in descending order.\nSyntax\nParameter Values\n0 = SORT_REGULAR - Default. Compare items normally (don't change types)\n1 = SORT_NUMERIC - Compare items numerically\n2 = SORT_STRING - Compare items as strings\n3 = SORT_LOCALE_STRING - Compare items as strings, based on current locale\n4 = SORT_NATURAL - Compare items as strings using natural ordering\n5 = SORT_FLAG_CASE - Can be combined with SORT_STRING or SORT_NATURAL to sort strings case-insensitively\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nSort the elements of the $numbers array in ascending numerical order:",
      "examples": [
        "<?php\n$cars = array(\"Volvo\", \"BMW\", \"Toyota\");\nsort($cars);\n?>",
        "sort(array, sorttype)",
        "<?php\n$numbers = array(4, 6, 2, 22, 11);\nsort($numbers);\n?>"
      ]
    },
    {
      "title": "PHP uasort() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nSort the elements of an array by values using a user-defined comparison function (and maintains the index association):\nDefinition and Usage\nThe uasort() function sorts an array by values using a user-defined comparison function and maintains the index association.\nTip: Use the uksort() function to sort an array by keys using a user-defined comparison function.\nTip: Use the usort() function to sort an array by values using a user-defined comparison function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\nfunction my_sort($a, $b) {\nif ($a == $b) return 0;\nreturn ($a < $b) ? -1 : 1;\n}\n\n$arr = array(\"a\"=>4, \"b\"=>2, \"c\"=>8, \"d\"=>6);\nuasort($arr, \"my_sort\");\n\nforeach($arr as $key => $value) {\necho \"[\" . $key . \"] => \" . $value;\necho \"<br>\";\n}\n?>",
        "uasort(array, callback)"
      ]
    },
    {
      "title": "PHP uksort() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nSort the elements of an array by keys using a user-defined comparison function:\nDefinition and Usage\nThe uksort() function sorts an array by keys using a user-defined comparison function.\nTip: Use the uasort() function to sort an array by values (and maintain the index association) using a user-defined comparison function.\nTip: Use the usort() function to sort an array by values using a user-defined comparison function.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\nfunction my_sort($a, $b) {\nif ($a == $b) return 0;\nreturn ($a < $b) ? -1 : 1;\n}\n\n$arr = array(\"a\"=>4, \"b\"=>2, \"c\"=>8, \"d\"=>6);\nuksort($arr, \"my_sort\");\n\nforeach($arr as $key => $value) {\necho \"[\" . $key . \"] => \" . $value;\necho \"<br>\";\n}\n?>",
        "uksort(array, callback)"
      ]
    },
    {
      "title": "PHP usort() Function",
      "summary": "â® PHP Array Reference\nExampleGet your own PHP Server\nSort the elements of an array by values using a user-defined comparison function:\nDefinition and Usage\nThe usort() function sorts an array by values using a user-defined comparison function.\nTip: Use the uksort() function to sort an array by keys using a user-defined comparison function.\nTip: Use the uasort() function to sort an array by values (and maintain the index association) using a user-defined comparison function.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\nfunction my_sort($a, $b) {\nif ($a == $b) return 0;\nreturn ($a < $b) ? -1 : 1;\n}\n\n$a = array(4, 2, 8, 6);\nusort($a, \"my_sort\");\n\nforeach($a as $key => $value) {\necho \"[\" . $key . \"] => \" . $value;\necho \"<br>\";\n}\n?>",
        "usort(array, callback)"
      ]
    },
    {
      "title": "PHP Calendar Functions",
      "summary": "PHP Calendar Introduction\nThe calendar extension contains functions that simplifies converting between different calendar formats.\nIt is based on the Julian Day Count, which is a count of days starting from January 1st, 4713 B.C.\nNote: To convert between calendar formats, you must first convert to Julian Day Count, then to the calendar of your choice.\nNote: The Julian Day Count is not the same as the Julian Calendar!\nInstallation\nFor these functions to work, you have to compile PHP with --enable-calendar.\nThe Windows version of PHP has built-in support for this extension.\nPHP Calendar Functions\nREMOVE ADS\nPHP Predefined Calendar Constants",
      "examples": []
    },
    {
      "title": "PHP cal_days_in_month() Function",
      "summary": "â® PHP Calendar Reference\nExampleGet your own PHP Server\nGet the number of days in a month for a specified year and calendar:\nDefinition and Usage\nThe cal_days_in_month() function returns the number of days in a month for a specified year and calendar.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$d=cal_days_in_month(CAL_GREGORIAN,10,2005);\necho \"There was $d days in October 2005\";\n?>",
        "cal_days_in_month(calendar,month,year);"
      ]
    },
    {
      "title": "PHP cal_from_jd() Function",
      "summary": "â® PHP Calendar Reference\nExampleGet your own PHP Server\nConvert a Julian Day Count into a date of in the Gregorian calendar:\nDefinition and Usage\nThe cal_from_jd() function converts a Julian Day Count into a date of a specified calendar.\nSyntax\nParameter Values\nCAL_GREGORIAN\nCAL_JULIAN\nCAL_JEWISH\nCAL_FRENCH\nREMOVE ADS\nTechnical Details\ndate in form \"month/day/year\"\nmonth\nyear\nday of week\nabbreviated and full names of weekday and month",
      "examples": [
        "<?php\n$d=unixtojd(mktime(0,0,0,6,20,2007));\nprint_r(cal_from_jd($d,CAL_GREGORIAN));\n?>",
        "cal_from_jd(jd,calendar);"
      ]
    },
    {
      "title": "PHP cal_info() Function",
      "summary": "â® PHP Calendar Reference\nExampleGet your own PHP Server\nReturn information about the Gregorian calendar:\nDefinition and Usage\nThe cal_info() function returns information about a specified calendar.\nSyntax\nParameter Values\n0 = CAL_GREGORIAN\n1 = CAL_JULIAN\n2 = CAL_JEWISH\n3 = CAL_FRENCH\nTip: If the calendar parameter is omitted, cal_info() returns info about all calendars\nREMOVE ADS\nTechnical Details\ncalname\ncalsymbol\nmonth\nabbrevmonth\nmaxdaysinmonth",
      "examples": [
        "<?php\nprint_r(cal_info(0));\n?>",
        "cal_info(calendar);"
      ]
    },
    {
      "title": "PHP cal_to_jd() Function",
      "summary": "â® PHP Calendar Reference\nExampleGet your own PHP Server\nConvert 20th of June, 2007 (Gregorian calendar) to Julian Day Count:\nDefinition and Usage\nThe cal_to_jd() function converts a date in a specified calendar to Julian Day Count.\nSyntax\nParameter Values\nCAL_GREGORIAN\nCAL_JULIAN\nCAL_JEWISH\nCAL_FRENCH\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$d=cal_to_jd(CAL_GREGORIAN,6,20,2007);\necho $d;\n?>",
        "cal_to_jd(calendar,month,day,year);"
      ]
    },
    {
      "title": "PHP easter_date() Function",
      "summary": "â® PHP Calendar Reference\nExampleGet your own PHP Server\nPrint the easter date for different years:\nDefinition and Usage\nThe easter_date() function returns the Unix timestamp for midnight on Easter of a given year.\nTip: The date of Easter Day is defined as the Sunday after the first full moon which falls on or after the Spring Equinox (21st March).\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\necho easter_date() . \"<br />\";\necho date(\"M-d-Y\",easter_date()) . \"<br />\";\necho date(\"M-d-Y\",easter_date(1975)) . \"<br />\";\necho date(\"M-d-Y\",easter_date(1998)) . \"<br />\";\necho date(\"M-d-Y\",easter_date(2007));\n?>",
        "easter_date(year);"
      ]
    },
    {
      "title": "PHP easter_days() Function",
      "summary": "â® PHP Calendar Reference\nExampleGet your own PHP Server\nPrint the number of days after March 21, that the Easter Day is/was for different years:\nDefinition and Usage\nThe easter_days() function returns the number of days after March 21, that the Easter Day is in the given year.\nTip: The date of Easter Day is defined as the Sunday after the first full moon which falls on or after the Spring Equinox (21st March).\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\necho \"Easter Day is \". easter_days() . \" days after March 21 this year.<br />\";\necho \"Easter Day was \". easter_days(1990) . \" days after March 21 in 1990.<br />\";\necho \"Easter Day was \". easter_days(1342) . \" days after March 21 in 1342.<br />\";\necho \"Easter Day will be \". easter_days(2050) . \" days after March 21 in 2050.\";\n?>",
        "easter_days(year,method);"
      ]
    },
    {
      "title": "PHP frenchtojd() Function",
      "summary": "â® PHP Calendar Reference\nExampleGet your own PHP Server\nConvert a French Republican date to a Julian Day Count and back to a French Republican date:\nDefinition and Usage\nThe frenchtojd() function converts a date from the French Republican Calendar to a Julian Day Count.\nTip: The French Republican Calendar is a calendar proposed during the French Revolution, and used by the French government for about twelve years from late 1793. This function only convert dates in years 1 through 14 (Gregorian dates 22 September 1792 - 22 September 1806).\nTip: Look at the jdtofrench() function to convert a Julian Day Count to a French Republican date.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$jd=frenchtojd(3,3,14);\necho $jd . \"<br>\";\necho jdtofrench($jd);\n?>",
        "frenchtojd(month,day,year);"
      ]
    },
    {
      "title": "PHP gregoriantojd() Function",
      "summary": "â® PHP Calendar Reference\nExampleGet your own PHP Server\nConvert a Gregorian date to a Julian Day Count and back to a Gregorian date:\nDefinition and Usage\nThe gregoriantojd() function converts a date from the Gregorian Calendar to a Julian Day Count.\nNote: Although this function can handle dates back to 4714 B.C., notice that the Gregorian calendar was not instituted until 1582, and some countries did not accept it until much later (Britain converted in 1752, USSR in 1918, and Greece in 1923). Most European countries used the Julian calendar prior the Gregorian.\nTip: Look at the jdtogregorian() function to convert a Julian Day Count to a Gregorian date.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$jd=gregoriantojd(6,20,2007);\necho $jd . \"<br>\";\necho jdtogregorian($jd);\n?>",
        "gregoriantojd(month,day,year);"
      ]
    },
    {
      "title": "PHP jddayofweek() Function",
      "summary": "â® PHP Calendar Reference\nExampleGet your own PHP Server\nReturn the weekday of 13th January, 1998:\nDefinition and Usage\nThe jddayofweek() function returns the day of the week.\nSyntax\nParameter Values\n0 - Default. Returns the weekday as an integer (0=Sunday, 1=Monday, etc.)\n1 - Returns the weekday as a string (Sunday, Monday, etc.)\n2 - Returns the weekday as a string, abbreviated form (Sun, Mon, etc.)\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$jd=gregoriantojd(1,13,1998);\necho jddayofweek($jd,1);\n?>",
        "jddayofweek(jd,mode);"
      ]
    },
    {
      "title": "PHP jdmonthname() Function",
      "summary": "â® PHP Calendar Reference\nExampleGet your own PHP Server\nReturn the abbreviated Gregorian monthname of 13th January, 1998:\nDefinition and Usage\nThe jdmonthname() function returns a month name.\nSyntax\nParameter Values\n0 - Gregorian - abbreviated form (Jan, Feb, Mar, etc.)\n1 - Gregorian (January, February, March, etc.)\n2 - Julian - abbreviated form (Jan, Feb, Mar, etc.)\n3 - Julian (January, February, March, etc.)\n4 - Jewish (Tishri, Heshvan, Kislev, etc.)\n5 - French Republican (Vendemiaire, Brumaire, Frimaire, etc.)\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$jd=gregoriantojd(1,13,1998);\necho jdmonthname($jd,0);\n?>",
        "jdmonthname(jd,mode);"
      ]
    },
    {
      "title": "PHP jdtofrench() Function",
      "summary": "â® PHP Calendar Reference\nExampleGet your own PHP Server\nConvert a French Republican date to a Julian Day Count and back to a French Republican date:\nDefinition and Usage\nThe jdtofrench() function converts a Julian Day Count to a French Republican date.\nTip: Look at the frenchtojd() function to convert a French Republican date to a Julian Day Count.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$jd=frenchtojd(3,3,14);\necho $jd . \"<br>\";\necho jdtofrench($jd);\n?>",
        "jdtofrench(jd);"
      ]
    },
    {
      "title": "PHP jdtogregorian() Function",
      "summary": "â® PHP Calendar Reference\nExampleGet your own PHP Server\nConvert a Gregorian date to a Julian Day Count and back to a Gregorian date:\nDefinition and Usage\nThe jdtogregorian() function converts a Julian Day Count to a Gregorian date.\nTip: Look at the gregoriantojd() function to convert a Gregorian date to a Julian Day Count.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$jd=gregoriantojd(6,20,2007);\necho $jd . \"<br>\";\necho jdtogregorian($jd);\n?>",
        "jdtogregorian(jd);"
      ]
    },
    {
      "title": "PHP jdtojewish() Function",
      "summary": "â® PHP Calendar Reference\nExampleGet your own PHP Server\nConvert a Julian Day Count to a Jewish date:\nDefinition and Usage\nThe jdtojewish() function converts a Julian Day Count to a Jewish date.\nTip: Look at the jewishtojd() function to convert a Jewish date to a Julian Day Count.\nSyntax\nParameter Values\nCAL_JEWISH_ADD_ALAFIM_GERESH\nCAL_JEWISH_ADD_ALAFIM\nCAL_JEWISH_ADD_GERESHAYIM\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$jd=jdtojewish(1789430);\necho $jd;\n?>",
        "jdtojewish(jd,hebrew,fl);"
      ]
    },
    {
      "title": "PHP jdtojulian() Function",
      "summary": "â® PHP Calendar Reference\nExampleGet your own PHP Server\nConvert a Julian date to a Julian Day Count and back to a Julian date:\nDefinition and Usage\nThe jdtojulian() function converts a Julian Day Count to a Julian date.\nTip: Look at the juliantojd() function to convert a Julian date to a Julian Day Count.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$jd=juliantojd(6,20,2007);\necho $jd . \"<br>\";\necho jdtojulian($jd);\n?>",
        "jdtojulian(jd);"
      ]
    },
    {
      "title": "PHP jdtounix() Function",
      "summary": "â® PHP Calendar Reference\nExampleGet your own PHP Server\nConvert a Gregorian date to a Julian Day Count; then convert the Julian Day Count to Unix timestamp:\nDefinition and Usage\nThe jdtounix() function converts Julian Day Count to Unix timestamp.\nNote: This function will return false if the parameter jd is not inside the Unix epoch (which means that the Gregorian years must be between 1970 and 2037 OR that jd >= 2440588 and jd <= 2465342). The time returned is local time.\nTip: Look at the unixtojd() function to convert Unix timestamp to Julian Day Count.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$jd=gregoriantojd(10,3,1975);\necho jdtounix($jd);\n?>",
        "jdtounix(jd);"
      ]
    },
    {
      "title": "PHP jewishtojd() Function",
      "summary": "â® PHP Calendar Reference\nExampleGet your own PHP Server\nConvert a Jewish date to a Julian Day Count:\nDefinition and Usage\nThe jewishtojd() function converts a date from the Jewish Calendar to a Julian Day Count.\nNote: Although this function can handle dates back to year 1 (3761 B.C.), notice that in the beginning there was no formula to determine the start of a month. A new month was started when the new moon was first observed.\nTip: Look at the jdtojewish() function to convert a Julian Day Count to a Jewish date.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$jd=jewishtojd(6,20,2007);\necho $jd;\n?>",
        "jewishtojd(month,day,year);"
      ]
    },
    {
      "title": "PHP juliantojd() Function",
      "summary": "â® PHP Calendar Reference\nExampleGet your own PHP Server\nConvert a Julian date to a Julian Day Count and back to a Julian date:\nDefinition and Usage\nThe juliantojd() function converts a date from the Julian Calendar to a Julian Day Count.\nNote: Although this function can handle dates back to 4713 B.C., notice that the Julian calendar was created in 46 B.C., and it did not stabilize until at least 8 A.D. Also, the beginning of a year varied from one culture to another - not all accepted January as the first month. Remember that the current calendar being used worldwide is the Gregorian calendar. The gregoriantojd() function can be used to convert such dates to their Julian Day count.\nTip: Look at the jdtojulian() function to convert a Julian Day Count to a Julian date.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$jd=juliantojd(6,20,2007);\necho $jd . \"<br>\";\necho jdtojulian($jd);\n?>",
        "juliantojd(month,day,year);"
      ]
    },
    {
      "title": "PHP unixtojd() Function",
      "summary": "â® PHP Calendar Reference\nExampleGet your own PHP Server\nConvert Unix timestamp to Julian Day Count:\nDefinition and Usage\nThe unixtojd() function converts Unix timestamp to Julian Day Count.\nNote: Unix timestamp indicates the number of seconds since midnight of January 1, 1970 (Gregorian Calendar).\nTip: Look at the jdtounix() function to convert Julian Day Count to Unix timestamp.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\necho unixtojd();\n?>",
        "unixtojd(timestamp);"
      ]
    },
    {
      "title": "PHP Date/Time Functions",
      "summary": "PHP Date/Time Introduction\nThe date/time functions allow you to get the date and time from the server where your PHP script runs. You can then use the date/time functions to format the date and time in several ways.\nNote: These functions depend on the locale settings of your server. Remember to take daylight saving time and leap years into consideration when working with these functions.\nInstallation\nThe PHP date/time functions are part of the PHP core. No installation is required to use these functions.\nRuntime Configuration\nThe behavior of these functions is affected by settings in php.ini:\nREMOVE ADS\nPHP Date/Time Functions\nPHP Predefined Date/Time Constants",
      "examples": []
    },
    {
      "title": "PHP checkdate() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nCheck if several dates are valid Gregorian dates:\nDefinition and Usage\nThe checkdate() function is used to validate a Gregorian date.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\nvar_dump(checkdate(12,31,-400));\necho \"<br>\";\nvar_dump(checkdate(2,29,2003));\necho \"<br>\";\nvar_dump(checkdate(2,29,2004));\n?>",
        "checkdate(month, day, year)"
      ]
    },
    {
      "title": "PHP date_add() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nAdd 40 days to the 15th of March, 2013:\nDefinition and Usage\nThe date_add() function adds some days, months, years, hours, minutes, and seconds to a date.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$date=date_create(\"2013-03-15\");\ndate_add($date,date_interval_create_from_date_string(\"40 days\"));\necho date_format($date,\"Y-m-d\");\n?>",
        "date_add(object, interval)"
      ]
    },
    {
      "title": "PHP date_create_from_format() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nReturn a new DateTime object formatted according to the specified format:\nDefinition and Usage\nThe date_create_from_format() function returns a new DateTime object formatted according to the specified format.\nSyntax\nParameter Values\nd - Day of the month; with leading zeros\nj - Day of the month; without leading zeros\nD - Day of the month (Mon - Sun)\nl - Day of the month (Monday - Sunday)\nS - English suffix for day of the month (st, nd, rd, th)\nF - Monthname (January - December)\nM - Monthname (Jan-Dec)\nm - Month (01-12)\nn - Month (1-12)\nY - Year (e.g 2013)\ny - Year (e.g 13)\na and A - am or pm\ng - 12 hour format without leading zeros\nG - 24 hour format without leading zeros\nh - 12 hour format with leading zeros\nH - 24 hour format with leading zeros\ni - Minutes with leading zeros\ns - Seconds with leading zeros\nu - Microseconds (up to six digits)\ne, O, P and T - Timezone identifier\nU - Seconds since Unix Epoch\n(space)\n# - One of the following separation symbol: ;,:,/,.,,,-,(,)\n? - A random byte\n* - Random bytes until next separator/digit\n! - Resets all fields to Unix Epoch\n| - Resets all fields to Unix Epoch if they have not been parsed yet\n+ - If present, trailing data in the string will cause a warning, not an error\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$date=date_create_from_format(\"j-M-Y\",\"15-Mar-2013\");\n?>",
        "date_create_from_format(format, time, timezone)"
      ]
    },
    {
      "title": "PHP date_create() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nReturn a new DateTime object, and then format the date:\nMore examples at the bottom of this page.\nDefinition and Usage\nThe date_create() function returns a new DateTime object.\nSyntax\nParameter Values\nTechnical Details\nREMOVE ADS\nMore Examples\nExample\nReturn a new DateTime object (with a given timezone), and then format the date and time:",
      "examples": [
        "<?php\n$date=date_create(\"2013-03-15\");\necho date_format($date,\"Y/m/d\");\n?>",
        "date_create(time, timezone)",
        "<?php\n$date=date_create(\"2013-03-15 23:40:00\",timezone_open(\"Europe/Oslo\"));\necho date_format($date,\"Y/m/d H:iP\");\n?>"
      ]
    },
    {
      "title": "PHP date_date_set() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nReturn a new DateTime object, set a new date, and then format the date:\nDefinition and Usage\nThe date_date_set() function sets a new date.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$date=date_create();\ndate_date_set($date,2020,10,30);\necho date_format($date,\"Y/m/d\");\n?>",
        "date_date_set(object, year, month, day)"
      ]
    },
    {
      "title": "PHP date_default_timezone_get() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nReturn the default timezone:\nDefinition and Usage\nThe date_default_timezone_get() function returns the default timezone used by all date/time functions in the script.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\necho date_default_timezone_get();\n?>",
        "date_default_timezone_get()"
      ]
    },
    {
      "title": "PHP date_default_timezone_set() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nSet the default timezone:\nDefinition and Usage\nThe date_default_timezone_set() function sets the default timezone used by all date/time functions in the script.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\ndate_default_timezone_set(\"Asia/Bangkok\");\necho date_default_timezone_get();\n?>",
        "date_default_timezone_set(timezone)"
      ]
    },
    {
      "title": "PHP date_diff() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nCalculate the difference between two dates:\nDefinition and Usage\nThe date_diff() function returns the difference between two DateTime objects.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$date1=date_create(\"2013-03-15\");\n$date2=date_create(\"2013-12-12\");\n$diff=date_diff($date1,$date2);\n?>",
        "date_diff(datetime1, datetime2, absolute)"
      ]
    },
    {
      "title": "PHP date_format() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nReturn a new DateTime object, and then format the date:\nDefinition and Usage\nThe date_format() function returns a date formatted according to the specified format.\nNote: This function does not use locales (all output is in English).\nTip: Also look at the date() function, which formats a local date/time.\nSyntax\nParameter Values\nd - The day of the month (from 01 to 31)\nD - A textual representation of a day (three letters)\nj - The day of the month without leading zeros (1 to 31)\nl (lowercase 'L') - A full textual representation of a day\nN - The ISO-8601 numeric representation of a day (1 for Monday, 7 for Sunday)\nS - The English ordinal suffix for the day of the month (2 characters st, nd, rd or th. Works well with j)\nw - A numeric representation of the day (0 for Sunday, 6 for Saturday)\nz - The day of the year (from 0 through 365)\nW - The ISO-8601 week number of year (weeks starting on Monday)\nF - A full textual representation of a month (January through December)\nm - A numeric representation of a month (from 01 to 12)\nM - A short textual representation of a month (three letters)\nn - A numeric representation of a month, without leading zeros (1 to 12)\nt - The number of days in the given month\nL - Whether it's a leap year (1 if it is a leap year, 0 otherwise)\no - The ISO-8601 year number\nY - A four digit representation of a year\ny - A two digit representation of a year\na - Lowercase am or pm\nA - Uppercase AM or PM\nB - Swatch Internet time (000 to 999)\ng - 12-hour format of an hour (1 to 12)\nG - 24-hour format of an hour (0 to 23)\nh - 12-hour format of an hour (01 to 12)\nH - 24-hour format of an hour (00 to 23)\ni - Minutes with leading zeros (00 to 59)\ns - Seconds, with leading zeros (00 to 59)\nu - Microseconds (added in PHP 5.2.2)\ne - The timezone identifier (Examples: UTC, GMT, Atlantic/Azores)\nI (capital i) - Whether the date is in daylights savings time (1 if Daylight Savings Time, 0 otherwise)\nO - Difference to Greenwich time (GMT) in hours (Example: +0100)\nP - Difference to Greenwich time (GMT) in hours:minutes (added in PHP 5.1.3)\nT - Timezone abbreviations (Examples: EST, MDT)\nZ - Timezone offset in seconds. The offset for timezones west of UTC is negative (-43200 to 50400)\nc - The ISO-8601 date (e.g. 2013-05-05T16:34:42+00:00)\nr - The RFC 2822 formatted date (e.g. Fri, 12 Apr 2013 12:01:05 +0200)\nU - The seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\nand the following predefined constants can also be used (available since PHP 5.1.0):\nDATE_ATOM - Atom (example: 2013-04-12T15:52:01+00:00)\nDATE_COOKIE - HTTP Cookies (example: Friday, 12-Apr-13 15:52:01 UTC)\nDATE_ISO8601 - ISO-8601 (example: 2013-04-12T15:52:01+0000)\nDATE_RFC822 - RFC 822 (example: Fri, 12 Apr 13 15:52:01 +0000)\nDATE_RFC850 - RFC 850 (example: Friday, 12-Apr-13 15:52:01 UTC)\nDATE_RFC1036 - RFC 1036 (example: Fri, 12 Apr 13 15:52:01 +0000)\nDATE_RFC1123 - RFC 1123 (example: Fri, 12 Apr 2013 15:52:01 +0000)\nDATE_RFC2822 - RFC 2822 (Fri, 12 Apr 2013 15:52:01 +0000)\nDATE_RFC3339 - Same as DATE_ATOM (since PHP 5.1.3)\nDATE_RSS - RSS (Fri, 12 Aug 2013 15:52:01 +0000)\nDATE_W3C - World Wide Web Consortium (example: 2013-04-12T15:52:01+00:00)\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$date=date_create(\"2013-03-15\");\necho date_format($date,\"Y/m/d H:i:s\");\n?>",
        "date_format(object, format)"
      ]
    },
    {
      "title": "PHP date_get_last_errors() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nReturn the warnings and errors while parsing a date string:\nDefinition and Usage\nThe date_get_last_errors() function returns the warnings/errors found while parsing a date string.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\ndate_create(\"gyuiyiuyui%&&/\");\nprint_r(date_get_last_errors());\n?>",
        "date_get_last_errors()"
      ]
    },
    {
      "title": "PHP date_interval_create_from_date_string() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nUse date_interval_create_from_date_string() to add 1 year and 35 days to a date:\nDefinition and Usage\nThe date_interval_create_from_date_string() function sets up a DateInterval from the relative parts of the string.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$date = date_create('2019-01-01');\ndate_add($date, date_interval_create_from_date_string('1 year 35 days'));\necho date_format($date, 'Y-m-d');\n?>",
        "date_interval_create_from_date_string(datetime)"
      ]
    },
    {
      "title": "PHP date_interval_format() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nCalculate the interval between two dates, then format the interval:\nDefinition and Usage\nThe date_interval_format() function is an alias of DateInterval::format().\nThe DateInterval::format() function is used to format the interval.\nSyntax\nParameter Values\n% - Literal %\nY - Year, at least 2 digits with leading zero (e.g 03)\ny - Year (e.g 3)\nM - Month, with leading zero (e.g 06)\nm - Month (e.g 6)\nD - Day, with leading zero (e.g 09)\nd - Day (e.g 9)\na - Total number of days as a result of date_diff()\nH - Hours, with leading zero (e.g 08, 23)\nh - Hours (e.g 8, 23)\nI - Minutes, with leading zero (e.g 08, 23)\ni - Minutes (e.g 8, 23)\nS - Seconds, with leading zero (e.g 08, 23)\ns - Seconds (e.g 8, 23)\nF - Microseconds, at least 6 digits (e.g 004403, 235689)\nf - Microseconds (e.g 4403, 235689)\nR - Sign \"-\" when negative, \"+\" when positive\nr - Sign \"-\" when negative, empty when positive\nNote: Each format character must be prefixed by a % sign!\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$date1=date_create(\"2013-01-01\");\n$date2=date_create(\"2013-02-10\");\n$diff=date_diff($date1,$date2);\n\n// %a outputs the total number of days\necho $diff->format(\"Total number of days: %a.\");\n?>",
        "DateInterval::format(format)"
      ]
    },
    {
      "title": "PHP date_isodate_set() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nSet the ISO date to the 5th week in 2013:\nDefinition and Usage\nThe date_isodate_set() function sets a date according to the ISO 8601 standard, using weeks and day offsets (instead of using a specific date).\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$date=date_create();\ndate_isodate_set($date,2013,5);\necho date_format($date,\"Y-m-d\");\n?>",
        "date_isodate_set(object, year, week, day)"
      ]
    },
    {
      "title": "PHP date_modify() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nModify the timestamp. Add 15 days:\nDefinition and Usage\nThe date_modify() function modifies the timestamp.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$date=date_create(\"2013-05-01\");\ndate_modify($date,\"+15 days\");\necho date_format($date,\"Y-m-d\");\n?>",
        "date_modify(object, modify)"
      ]
    },
    {
      "title": "PHP date_offset_get() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nReturn the timezone offset for Oslo (in Norway, Europe) in seconds from UTC, winter and summer:\nDefinition and Usage\nThe date_offset_get() function returns the timezone offset.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$winter=date_create(\"2013-12-31\",timezone_open(\"Europe/Oslo\"));\n$summer=date_create(\"2013-06-30\",timezone_open(\"Europe/Oslo\"));\n\necho date_offset_get($winter) . \" seconds.<br>\";\necho date_offset_get($summer) . \" seconds.\";\n?>",
        "date_offset_get(object)"
      ]
    },
    {
      "title": "PHP date_parse_from_format() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nReturn an associative array with detailed information about a specified date, according to the specified format:\nDefinition and Usage\nThe date_parse_from_format() function returns an associative array with detailed information about a specified date, according to the specified format.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\nprint_r(date_parse_from_format(\"mmddyyyy\",\"05122013\"));\n?>",
        "date_parse_from_format(format, date)"
      ]
    },
    {
      "title": "PHP date_parse() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nReturn an associative array with detailed information about a specified date:\nDefinition and Usage\nThe date_parse() function returns an associative array with detailed information about a specified date.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\nprint_r(date_parse(\"2013-05-01 12:30:45.5\"));\n?>",
        "date_parse(date)"
      ]
    },
    {
      "title": "PHP date_sub() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nSubtract 40 days from the 15th of March, 2013:\nDefinition and Usage\nThe date_sub() function subtracts some days, months, years, hours, minutes, and seconds from a date.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$date=date_create(\"2013-03-15\");\ndate_sub($date,date_interval_create_from_date_string(\"40 days\"));\necho date_format($date,\"Y-m-d\");\n?>",
        "date_sub(object, interval)"
      ]
    },
    {
      "title": "PHP date_sun_info() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nReturn information about sunset/sunrise and twilight begin/end on 1st January, 2013, for latitude 31.7667, longitude 35.2333:\nDefinition and Usage\nThe date_sun_info() function returns an array containing information about sunset/sunrise and twilight begin/end, for a specified day and location.\nTip: Look at the date_sunrise() function to return the sunrise time for a specified day and location.\nTip: Look at the date_sunset() function to return the sunset time for a specified day and location.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$sun_info=date_sun_info(strtotime(\"2013-01-01\"),31.7667,35.2333);\nforeach ($sun_info as $key=>$val)\n{\necho \"$key: \" . date(\"H:i:s\",$val) . \"<br>\";\n}\n?>",
        "date_sun_info(timestamp, latitude, longitude)"
      ]
    },
    {
      "title": "PHP date_sunrise() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nReturn the sunrise time for Lisbon, Portugal today:\nDefinition and Usage\nThe date_sunrise() function returns the sunrise time for a specified day and location.\nTip: Look at the date_sunset() function to return the sunset time for a specified day and location.\nSyntax\nParameter Values\nOptional. Specifies how to return the result:\nSUNFUNCS_RET_STRING (returns the result as string. e.g. 16:46) (This is default)\nSUNFUNCS_RET_DOUBLE (returns the result as float. e.g. 16.78243132)\nSUNFUNCS_RET_TIMESTAMP (returns the result as integer (timestamp). e.g. 1095034606)\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// Lisbon, Portugal:\n// Latitude: 38.4 North, Longitude: 9 West\n// Zenith ~= 90, offset: +1 GMT\n\necho(\"Lisbon, Portugal: Date: \" . date(\"D M d Y\"));\necho(\"<br>Sunrise time: \");\necho(date_sunrise(time(),SUNFUNCS_RET_STRING,38.4,-9,90,1));\n?>",
        "date_sunrise(timestamp, format, latitude, longitude, zenith, gmtoffset)"
      ]
    },
    {
      "title": "PHP date_sunset() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nReturn the sunset time for Lisbon, Portugal today:\nDefinition and Usage\nThe date_sunset() function returns the sunset time for a specified day and location.\nTip: Look at the date_sunrise() function to return the sunrise time for a specified day and location.\nSyntax\nParameter Values\nOptional. Specifies how to return the result:\nSUNFUNCS_RET_STRING (returns the result as string. e.g. 16:46) (This is default)\nSUNFUNCS_RET_DOUBLE (returns the result as float. e.g. 16.78243132)\nSUNFUNCS_RET_TIMESTAMP (returns the result as integer (timestamp). e.g. 1095034606)\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// Lisbon, Portugal:\n// Latitude: 38.4 North, Longitude: 9 West\n// Zenith ~= 90, offset: +1 GMT\n\necho(\"Lisbon, Portugal: Date: \" . date(\"D M d Y\"));\necho(\"<br>Sunset time: \");\necho(date_sunset(time(),SUNFUNCS_RET_STRING,38.4,-9,90,1));\n?>",
        "date_sunset(timestamp, format, latitude, longitude, zenith, gmtoffset)"
      ]
    },
    {
      "title": "PHP date_time_set() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nSet the time:\nDefinition and Usage\nThe date_time_set() function sets the time.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$date=date_create(\"2013-05-01\");\ndate_time_set($date,13,24);\necho date_format($date,\"Y-m-d H:i:s\");\n?>",
        "date_time_set(object, hour, minute, second, microseconds)"
      ]
    },
    {
      "title": "PHP date_timestamp_get() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nReturn the Unix timestamp for today's date and time:\nDefinition and Usage\nThe date_timestamp_get() function returns the Unix timestamp.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$date=date_create();\necho date_timestamp_get($date);\n?>",
        "date_timestamp_get(object)"
      ]
    },
    {
      "title": "PHP date_timestamp_set() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nSet the date and time based on a Unix timestamp:\nDefinition and Usage\nThe date_timestamp_set() function sets the date and time based on a Unix timestamp.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$date=date_create();\ndate_timestamp_set($date,1371803321);\necho date_format($date,\"U = Y-m-d H:i:s\");\n?>",
        "date_timestamp_set(object, unixtimestamp)"
      ]
    },
    {
      "title": "PHP date_timezone_get() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nReturn the timezone of the given DateTime object:\nDefinition and Usage\nThe date_timezone_get() function returns the time zone of the given DateTime object.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$date=date_create(null,timezone_open(\"Europe/Paris\"));\n$tz=date_timezone_get($date);\necho timezone_name_get($tz);\n?>",
        "date_timezone_get(object)"
      ]
    },
    {
      "title": "PHP date_timezone_set() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nSet the timezone for the DateTime object:\nDefinition and Usage\nThe date_timezone_set() function sets the time zone for the DateTime object.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$date=date_create(\"2013-05-25\",timezone_open(\"Indian/Kerguelen\"));\necho date_format($date,\"Y-m-d H:i:sP\");\n?>",
        "date_timezone_set(object, timezone)"
      ]
    },
    {
      "title": "PHP date() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nFormat a local date and time and return the formatted date strings:\nDefinition and Usage\nThe date() function formats a local date and time, and returns the formatted date string.\nSyntax\nParameter Values\nd - The day of the month (from 01 to 31)\nD - A textual representation of a day (three letters)\nj - The day of the month without leading zeros (1 to 31)\nl (lowercase 'L') - A full textual representation of a day\nN - The ISO-8601 numeric representation of a day (1 for Monday, 7 for Sunday)\nS - The English ordinal suffix for the day of the month (2 characters st, nd, rd or th. Works well with j)\nw - A numeric representation of the day (0 for Sunday, 6 for Saturday)\nz - The day of the year (from 0 through 365)\nW - The ISO-8601 week number of year (weeks starting on Monday)\nF - A full textual representation of a month (January through December)\nm - A numeric representation of a month (from 01 to 12)\nM - A short textual representation of a month (three letters)\nn - A numeric representation of a month, without leading zeros (1 to 12)\nt - The number of days in the given month\nL - Whether it's a leap year (1 if it is a leap year, 0 otherwise)\no - The ISO-8601 year number\nY - A four digit representation of a year\ny - A two digit representation of a year\na - Lowercase am or pm\nA - Uppercase AM or PM\nB - Swatch Internet time (000 to 999)\ng - 12-hour format of an hour (1 to 12)\nG - 24-hour format of an hour (0 to 23)\nh - 12-hour format of an hour (01 to 12)\nH - 24-hour format of an hour (00 to 23)\ni - Minutes with leading zeros (00 to 59)\ns - Seconds, with leading zeros (00 to 59)\nu - Microseconds (added in PHP 5.2.2)\ne - The timezone identifier (Examples: UTC, GMT, Atlantic/Azores)\nI (capital i) - Whether the date is in daylights savings time (1 if Daylight Savings Time, 0 otherwise)\nO - Difference to Greenwich time (GMT) in hours (Example: +0100)\nP - Difference to Greenwich time (GMT) in hours:minutes (added in PHP 5.1.3)\nT - Timezone abbreviations (Examples: EST, MDT)\nZ - Timezone offset in seconds. The offset for timezones west of UTC is negative (-43200 to 50400)\nc - The ISO-8601 date (e.g. 2013-05-05T16:34:42+00:00)\nr - The RFC 2822 formatted date (e.g. Fri, 12 Apr 2013 12:01:05 +0200)\nU - The seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\nand the following predefined constants can also be used (available since PHP 5.1.0):\nDATE_ATOM - Atom (example: 2013-04-12T15:52:01+00:00)\nDATE_COOKIE - HTTP Cookies (example: Friday, 12-Apr-13 15:52:01 UTC)\nDATE_ISO8601 - ISO-8601 (example: 2013-04-12T15:52:01+0000)\nDATE_RFC822 - RFC 822 (example: Fri, 12 Apr 13 15:52:01 +0000)\nDATE_RFC850 - RFC 850 (example: Friday, 12-Apr-13 15:52:01 UTC)\nDATE_RFC1036 - RFC 1036 (example: Fri, 12 Apr 13 15:52:01 +0000)\nDATE_RFC1123 - RFC 1123 (example: Fri, 12 Apr 2013 15:52:01 +0000)\nDATE_RFC2822 - RFC 2822 (Fri, 12 Apr 2013 15:52:01 +0000)\nDATE_RFC3339 - Same as DATE_ATOM (since PHP 5.1.3)\nDATE_RSS - RSS (Fri, 12 Aug 2013 15:52:01 +0000)\nDATE_W3C - World Wide Web Consortium (example: 2013-04-12T15:52:01+00:00)\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// Prints the day\necho date(\"l\") . \"<br>\";\n\n// Prints the day, date, month, year, time, AM or PM\necho date(\"l jS \\of F Y h:i:s A\");\n?>",
        "date(format, timestamp)"
      ]
    },
    {
      "title": "PHP getdate() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nReturn date/time information of the current local date/time:\nDefinition and Usage\nThe getdate() function returns date/time information of a timestamp or the current local date/time.\nSyntax\nParameter Values\nTechnical Details\n[seconds] - seconds\n[minutes] - minutes\n[hours] - hours\n[mday] - day of the month\n[wday] - day of the week (0=Sunday, 1=Monday,...)\n[mon] - month\n[year] - year\n[yday] - day of the year\n[weekday] - name of the weekday\n[month] - name of the month\n[0] - seconds since Unix Epoch",
      "examples": [
        "<?php\nprint_r(getdate());\n?>",
        "getdate(timestamp)"
      ]
    },
    {
      "title": "PHP gettimeofday() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nReturn the current time:\nDefinition and Usage\nThe gettimeofday() function returns the current time.\nSyntax\nParameter Values\nTechnical Details\n[sec] - seconds since the Unix Epoch\n[usec] - microseconds\n[minuteswest] - minutes west of Greenwich\n[dsttime] - type of dst correction",
      "examples": [
        "<?php\n// Print the array from gettimeofday()\nprint_r(gettimeofday());\n\n// Print the float from gettimeofday()\necho gettimeofday(true);\n?>",
        "gettimeofday(return_float)"
      ]
    },
    {
      "title": "PHP gmdate() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nFormat a GMT/UTC date and time and return the formatted date strings:\nDefinition and Usage\nThe gmdate() function formats a GMT/UTC date and time, and returns the formatted date string.\nSyntax\nParameter Values\nd - The day of the month (from 01 to 31)\nD - A textual representation of a day (three letters)\nj - The day of the month without leading zeros (1 to 31)\nl (lowercase 'L') - A full textual representation of a day\nN - The ISO-8601 numeric representation of a day (1 for Monday, 7 for Sunday)\nS - The English ordinal suffix for the day of the month (2 characters st, nd, rd or th. Works well with j)\nw - A numeric representation of the day (0 for Sunday, 6 for Saturday)\nz - The day of the year (from 0 through 365)\nW - The ISO-8601 week number of year (weeks starting on Monday)\nF - A full textual representation of a month (January through December)\nm - A numeric representation of a month (from 01 to 12)\nM - A short textual representation of a month (three letters)\nn - A numeric representation of a month, without leading zeros (1 to 12)\nt - The number of days in the given month\nL - Whether it's a leap year (1 if it is a leap year, 0 otherwise)\no - The ISO-8601 year number\nY - A four digit representation of a year\ny - A two digit representation of a year\na - Lowercase am or pm\nA - Uppercase AM or PM\nB - Swatch Internet time (000 to 999)\ng - 12-hour format of an hour (1 to 12)\nG - 24-hour format of an hour (0 to 23)\nh - 12-hour format of an hour (01 to 12)\nH - 24-hour format of an hour (00 to 23)\ni - Minutes with leading zeros (00 to 59)\ns - Seconds, with leading zeros (00 to 59)\nu - Microseconds (added in PHP 5.2.2)\ne - The timezone identifier (Examples: UTC, GMT, Atlantic/Azores)\nI (capital i) - Whether the date is in daylights savings time (1 if Daylight Savings Time, 0 otherwise)\nO - Difference to Greenwich time (GMT) in hours (Example: +0100)\nP - Difference to Greenwich time (GMT) in hours:minutes (added in PHP 5.1.3)\nT - Timezone abbreviations (Examples: EST, MDT)\nZ - Timezone offset in seconds. The offset for timezones west of UTC is negative (-43200 to 50400)\nc - The ISO-8601 date (e.g. 2013-05-05T16:34:42+00:00)\nr - The RFC 2822 formatted date (e.g. Fri, 12 Apr 2013 12:01:05 +0200)\nU - The seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\nand the following predefined constants can also be used (available since PHP 5.1.0):\nDATE_ATOM - Atom (example: 2013-04-12T15:52:01+00:00)\nDATE_COOKIE - HTTP Cookies (example: Friday, 12-Apr-13 15:52:01 UTC)\nDATE_ISO8601 - ISO-8601 (example: 2013-04-12T15:52:01+0000)\nDATE_RFC822 - RFC 822 (example: Fri, 12 Apr 13 15:52:01 +0000)\nDATE_RFC850 - RFC 850 (example: Friday, 12-Apr-13 15:52:01 UTC)\nDATE_RFC1036 - RFC 1036 (example: Fri, 12 Apr 13 15:52:01 +0000)\nDATE_RFC1123 - RFC 1123 (example: Fri, 12 Apr 2013 15:52:01 +0000)\nDATE_RFC2822 - RFC 2822 (Fri, 12 Apr 2013 15:52:01 +0000)\nDATE_RFC3339 - Same as DATE_ATOM (since PHP 5.1.3)\nDATE_RSS - RSS (Fri, 12 Aug 2013 15:52:01 +0000)\nDATE_W3C - World Wide Web Consortium (example: 2013-04-12T15:52:01+00:00)\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// Prints the day\necho gmdate(\"l\") . \"<br>\";\n\n// Prints the day, date, month, year, time, AM or PM\necho gmdate(\"l jS \\of F Y h:i:s A\");\n?>",
        "gmdate(format, timestamp)"
      ]
    },
    {
      "title": "PHP gmmktime() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nReturn the Unix timestamp for a GMT date. Then use it to find the day of that date:\nDefinition and Usage\nThe gmmktime() function returns the Unix timestamp for a GMT date.\nTip: This function is identical to mktime() except the passed parameters represents a GMT date.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n// Prints: October 3, 1975 was on a Friday\necho \"Oct 3, 1975 was on a \".date(\"l\", gmmktime(0,0,0,10,3,1975));\n?>",
        "gmmktime(hour, minute, second, month, day, year, is_dst)"
      ]
    },
    {
      "title": "PHP gmstrftime() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nFormat GMT/UTC date and time according to locale settings:\nDefinition and Usage\nThe gmstrftime() function formats a GMT/UTC time and/or date according to locale settings.\nTip: Also look at the strftime() function, which formats a local time and/or date according to locale settings.\nSyntax\nParameter Values\n%a - abbreviated weekday name\n%A - full weekday name\n%b - abbreviated month name\n%B - full month name\n%c - preferred date and time representation\n%C - century number (the year divided by 100, range 00 to 99)\n%d - day of the month (01 to 31)\n%D - same as %m/%d/%y\n%e - day of the month (1 to 31)\n%g - like %G, but without the century\n%G - 4-digit year corresponding to the ISO week number (see %V).\n%h - same as %b\n%H - hour, using a 24-hour clock (00 to 23)\n%I - hour, using a 12-hour clock (01 to 12)\n%j - day of the year (001 to 366)\n%m - month (01 to 12)\n%M - minute\n%n - newline character\n%p - either am or pm according to the given time value\n%r - time in a.m. and p.m. notation\n%R - time in 24 hour notation\n%S - second\n%t - tab character\n%T - current time, equal to %H:%M:%S\n%u - weekday as a number (1 to 7), Monday=1. Warning: In Sun Solaris Sunday=1\n%U - week number of the current year, starting with the first Sunday as the first day of the first week\n%V - The ISO 8601 week number of the current year (01 to 53), where week 1 is the first week that has at least 4 days in the current year, and with Monday as the first day of the week\n%W - week number of the current year, starting with the first Monday as the first day of the first week\n%w - day of the week as a decimal, Sunday=0\n%x - preferred date representation without the time\n%X - preferred time representation without the date\n%y - year without a century (range 00 to 99)\n%Y - year including the century\n%Z or %z - time zone or name or abbreviation\n%% - a literal % character\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\necho(gmstrftime(\"%B %d %Y, %X %Z\",mktime(20,0,0,12,31,98)).\"<br>\");\nsetlocale(LC_ALL,\"hu_HU.UTF8\");\necho(gmstrftime(\"%Y. %B %d. %A. %X %Z\"));\n?>",
        "gmstrftime(format, timestamp)"
      ]
    },
    {
      "title": "PHP idate() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nFormat a local time/date as integer. Test all the different formats:\nDefinition and Usage\nThe idate() function formats a local time and/or date as integer.\nNote: The idate() function accepts just one character in the format parameter!\nSyntax\nParameter Values\nB - Swatch Beat/Internet Time\nd - Day of the month\nh - Hour (12 hour format)\nH - Hour (24 hour format)\ni - Minutes\nI - returns 1 if DST (daylight saving time) is activated, 0 otherwise\nL - returns 1 for leap year, 0 otherwise\nm - Month number\ns - Seconds\nt - Days in current month\nU - Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\nw - Day of the week (Sunday=0)\nW - ISO-8601 week number of year (week starts on Monday)\ny - Year (1 or 2 digits)\nY - Year (4 digits)\nz - Day of the year\nZ - Timezone offset in seconds\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\necho idate(\"B\") . \"<br>\";\necho idate(\"d\") . \"<br>\";\necho idate(\"h\") . \"<br>\";\necho idate(\"H\") . \"<br>\";\necho idate(\"i\") . \"<br>\";\necho idate(\"I\") . \"<br>\";\necho idate(\"L\") . \"<br>\";\necho idate(\"m\") . \"<br>\";\necho idate(\"s\") . \"<br>\";\necho idate(\"t\") . \"<br>\";\necho idate(\"U\") . \"<br>\";\necho idate(\"w\") . \"<br>\";\necho idate(\"W\") . \"<br>\";\necho idate(\"y\") . \"<br>\";\necho idate(\"Y\") . \"<br>\";\necho idate(\"z\") . \"<br>\";\necho idate(\"Z\") . \"<br>\";\n?>",
        "idate(format, timestamp)"
      ]
    },
    {
      "title": "PHP localtime() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nPrint local time as an indexed and as an associative array:\nDefinition and Usage\nThe localtime() function returns the local time.\nSyntax\nParameter Values\nThe keys of the associative array are:\n[tm_sec] - seconds\n[tm_min] - minutes\n[tm_hour] - hour\n[tm_mday] - day of the month\n[tm_mon] - month of the year (January=0)\n[tm_year] - Years since 1900\n[tm_wday] - Day of the week (Sunday=0)\n[tm_yday] - Day of the year\n[tm_isdst] - Is daylight savings time in effect\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\nprint_r(localtime());\necho \"<br><br>\";\nprint_r(localtime(time(),true));\n?>",
        "localtime(timestamp, is_assoc)"
      ]
    },
    {
      "title": "PHP microtime() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nReturn the current Unix timestamp with microseconds:\nDefinition and Usage\nThe microtime() function returns the current Unix timestamp with microseconds.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(microtime());\n?>",
        "microtime(return_float);"
      ]
    },
    {
      "title": "PHP mktime() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nReturn the Unix timestamp for a date. Then use it to find the day of that date:\nDefinition and Usage\nThe mktime() function returns the Unix timestamp for a date.\nTip: This function is identical to gmmktime() except the passed parameters represents a date (not a GMT date).\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// Prints: October 3, 1975 was on a Friday\necho \"Oct 3, 1975 was on a \".date(\"l\", mktime(0,0,0,10,3,1975));\n?>",
        "mktime(hour, minute, second, month, day, year, is_dst)"
      ]
    },
    {
      "title": "PHP strftime() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nFormat local date and time according to locale settings:\nDefinition and Usage\nThe strftime() function formats a local time and/or date according to locale settings.\nTip: Also look at the gmstrftime() function, which formats a GMT/UTC time and/or date according to locale settings.\nSyntax\nParameter Values\n%a - abbreviated weekday name\n%A - full weekday name\n%b - abbreviated month name\n%B - full month name\n%c - preferred date and time representation\n%C - century number (the year divided by 100, range 00 to 99)\n%d - day of the month (01 to 31)\n%D - same as %m/%d/%y\n%e - day of the month (1 to 31)\n%g - like %G, but without the century\n%G - 4-digit year corresponding to the ISO week number (see %V).\n%h - same as %b\n%H - hour, using a 24-hour clock (00 to 23)\n%I - hour, using a 12-hour clock (01 to 12)\n%j - day of the year (001 to 366)\n%m - month (01 to 12)\n%M - minute\n%n - newline character\n%p - either am or pm according to the given time value\n%r - time in a.m. and p.m. notation\n%R - time in 24 hour notation\n%S - second\n%t - tab character\n%T - current time, equal to %H:%M:%S\n%u - weekday as a number (1 to 7), Monday=1. Warning: In Sun Solaris Sunday=1\n%U - week number of the current year, starting with the first Sunday as the first day of the first week\n%V - The ISO 8601 week number of the current year (01 to 53), where week 1 is the first week that has at least 4 days in the current year, and with Monday as the first day of the week\n%W - week number of the current year, starting with the first Monday as the first day of the first week\n%w - day of the week as a decimal, Sunday=0\n%x - preferred date representation without the time\n%X - preferred time representation without the date\n%y - year without a century (range 00 to 99)\n%Y - year including the century\n%Z or %z - time zone or name or abbreviation\n%% - a literal % character\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\necho(strftime(\"%B %d %Y, %X %Z\",mktime(20,0,0,12,31,98)).\"<br>\");\nsetlocale(LC_ALL,\"hu_HU.UTF8\");\necho(strftime(\"%Y. %B %d. %A. %X %Z\"));\n?>",
        "strftime(format, timestamp)"
      ]
    },
    {
      "title": "PHP strptime() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nParse a time/date generated with strftime():\nDefinition and Usage\nThe strptime() function parses a time/date generated with strftime().\nNote: This function is not implemented on Windows platforms!\nSyntax\nParameter Values\n%a - abbreviated weekday name\n%A - full weekday name\n%b - abbreviated month name\n%B - full month name\n%c - preferred date and time representation\n%C - century number (the year divided by 100, range 00 to 99)\n%d - day of the month (01 to 31)\n%D - same as %m/%d/%y\n%e - day of the month (1 to 31)\n%g - like %G, but without the century\n%G - 4-digit year corresponding to the ISO week number (see %V).\n%h - same as %b\n%H - hour, using a 24-hour clock (00 to 23)\n%I - hour, using a 12-hour clock (01 to 12)\n%j - day of the year (001 to 366)\n%m - month (01 to 12)\n%M - minute\n%n - newline character\n%p - either am or pm according to the given time value\n%r - time in a.m. and p.m. notation\n%R - time in 24 hour notation\n%S - second\n%t - tab character\n%T - current time, equal to %H:%M:%S\n%u - weekday as a number (1 to 7), Monday=1. Warning: In Sun Solaris Sunday=1\n%U - week number of the current year, starting with the first Sunday as the first day of the first week\n%V - The ISO 8601 week number of the current year (01 to 53), where week 1 is the first week that has at least 4 days in the current year, and with Monday as the first day of the week\n%W - week number of the current year, starting with the first Monday as the first day of the first week\n%w - day of the week as a decimal, Sunday=0\n%x - preferred date representation without the time\n%X - preferred time representation without the date\n%y - year without a century (range 00 to 99)\n%Y - year including the century\n%Z or %z - time zone or name or abbreviation\n%% - a literal % character\nREMOVE ADS\nTechnical Details\nThe meaning of the returning array keys are:\n[tm_sec] - seconds (0-61)\n[tm_min] - minutes (0-59)\n[tm_hour] - hour (0-23)\n[tm_mday] - day of the month (1-31)\n[tm_mon] - months since January (0-11)\n[tm_year] - years since 1900\n[tm_wday] - days since Sunday (0-6)\n[tm_yday] - days since January 1 (0-365)\n[unparsed] - the date part which was not recognized using the specified format, if any",
      "examples": [
        "<?php\n$format=\"%d/%m/%Y %H:%M:%S\";\n$strf=strftime($format);\necho(\"$strf\");\nprint_r(strptime($strf,$format));\n?>",
        "strptime(date, format)"
      ]
    },
    {
      "title": "PHP strtotime() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nParse English textual datetimes into Unix timestamps:\nDefinition and Usage\nThe strtotime() function parses an English textual datetime into a Unix timestamp (the number of seconds since January 1 1970 00:00:00 GMT).\nNote: If the year is specified in a two-digit format, values between 0-69 are mapped to 2000-2069 and values between 70-100 are mapped to 1970-2000.\nNote: Be aware of dates in the m/d/y or d-m-y formats; if the separator is a slash (/), then the American m/d/y is assumed. If the separator is a dash (-) or a dot (.), then the European d-m-y format is assumed. To avoid potential errors, you should YYYY-MM-DD dates or date_create_from_format() when possible.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\necho(strtotime(\"now\") . \"<br>\");\necho(strtotime(\"3 October 2005\") . \"<br>\");\necho(strtotime(\"+5 hours\") . \"<br>\");\necho(strtotime(\"+1 week\") . \"<br>\");\necho(strtotime(\"+1 week 3 days 7 hours 5 seconds\") . \"<br>\");\necho(strtotime(\"next Monday\") . \"<br>\");\necho(strtotime(\"last Sunday\"));\n?>",
        "strtotime(time, now);"
      ]
    },
    {
      "title": "PHP time() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nReturn the current time as a Unix timestamp, then format it to a date:\nDefinition and Usage\nThe time() function returns the current time in the number of seconds since the Unix Epoch (January 1 1970 00:00:00 GMT).\nSyntax\nTechnical Details",
      "examples": [
        "<?php\n$t=time();\necho($t . \"<br>\");\necho(date(\"Y-m-d\",$t));\n?>",
        "time()"
      ]
    },
    {
      "title": "PHP timezone_abbreviations_list() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nPrint dst, offset, and timezone name for the \"act\" timezone:\nDefinition and Usage\nThe timezone_abbreviations_list() returns an associative array containing dst, offset, and the timezone name.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\n$tzlist = DateTimeZone::listAbbreviations();\nprint_r($tzlist[\"acst\"]);\n?>",
        "timezone_abbreviations_list()"
      ]
    },
    {
      "title": "PHP timezone_identifiers_list() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nPrint all timezones in Africa:\nDefinition and Usage\nThe timezone_identifiers_list() returns an indexed array containing all timezone identifiers.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\nprint_r(timezone_identifiers_list(1));\n?>",
        "timezone_identifiers_list(what, country)"
      ]
    },
    {
      "title": "PHP timezone_location_get() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nReturn location information for the given timezone:\nDefinition and Usage\nThe timezone_location_get() returns location information for the given timezone.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$tz=timezone_open(\"Asia/Taipei\");\nprint_r(timezone_location_get($tz));\n?>",
        "timezone_location_get(object)"
      ]
    },
    {
      "title": "PHP timezone_name_from_abbr() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nReturn the timezone name from abbreviation:\nDefinition and Usage\nThe timezone_name_from_abbr() returns the timezone name from abbreviation.\nSyntax\nParameter Values\n-1 = Default. Whether the timezone has daylight saving or not is not taken into consideration when searching\n1 = Means that the gmtoffset is an offset with daylight saving in effect\n0 = Means that the gmtoffset is an offset without daylight saving in effect\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\necho timezone_name_from_abbr(\"EST\") . \"<br>\";\necho timezone_name_from_abbr(\"\",7200,0);\n?>",
        "timezone_name_from_abbr(abbr, gmtoffset, isdst)"
      ]
    },
    {
      "title": "PHP timezone_name_get() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nReturn the name of the timezone:\nDefinition and Usage\nThe timezone_name_get() returns the name of the timezone.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$tz=timezone_open(\"Europe/Paris\");\necho timezone_name_get($tz);\n?>",
        "timezone_name_get(object)"
      ]
    },
    {
      "title": "PHP timezone_offset_get() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nReturn the timezone offset from GMT:\nDefinition and Usage\nThe timezone_offset_get() returns the timezone offset from GMT.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$tz=timezone_open(\"Asia/Taipei\");\n$dateTimeOslo=date_create(\"now\",timezone_open(\"Europe/Oslo\"));\necho timezone_offset_get($tz,$dateTimeOslo);\n?>",
        "timezone_offset_get(object, datetime)"
      ]
    },
    {
      "title": "PHP timezone_open() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nCreate a new DateTimeZone object, then return the name of the timezone:\nDefinition and Usage\nThe timezone_open() creates a new DateTimeZone object.\nSyntax\nThe two functions below are equivalent and any of the functions can be used as shown in the example above.\nProcedural style:\nObject oriented style:\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$tz=timezone_open(\"Europe/Paris\");\necho timezone_name_get($tz);\n?>",
        "timezone_open(timezone)",
        "DateTimeZone::__construct(timezone)"
      ]
    },
    {
      "title": "PHP timezone_transitions_get() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nReturn a transition for a timezone:\nDefinition and Usage\nThe timezone_transitions_get() returns all transitions for the timezone.\nSyntax\nThe two functions below are equivalent and any of the functions can be used as shown in the example above.\nProcedural style:\nObject oriented style:\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$timezone = new DateTimeZone(\"Europe/Paris\");\n// Procedural style\nprint_r(reset(timezone_transitions_get($timezone)));\n\necho \"<br><br>\"\n\n// Object oriented style\nprint_r(reset($timezone->getTransitions()));\n?>",
        "timezone_transitions_get(object, timestamp_start, timestamp_end)",
        "DateTimeZone::getTransitions(timestamp_start, timestamp_end)"
      ]
    },
    {
      "title": "PHP timezone_version_get() Function",
      "summary": "â® PHP Date/Time Reference\nExampleGet your own PHP Server\nReturn the version of the timezonedb:\nDefinition and Usage\nThe timezone_version_get() function returns the version of the timezonedb.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\necho timezone_version_get();\n?>",
        "timezone_version_get()"
      ]
    },
    {
      "title": "PHP Directory Functions",
      "summary": "PHP Directory Introduction\nThe directory functions allow you to retrieve information about directories and their contents.\nInstallation\nThe PHP directory functions are part of the PHP core. No installation is required to use these functions.\nPHP Directory Functions",
      "examples": []
    },
    {
      "title": "PHP chdir() Function",
      "summary": "â® PHP Directory Reference\nExampleGet your own PHP Server\nChange the current directory:\nResult:\nDefinition and Usage\nThe chdir() function changes the current directory.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// Get current directory\necho getcwd() . \"<br>\";\n\n// Change directory\nchdir(\"images\");\n\n// Get current directory\necho getcwd();\n?>",
        "/home/php\n/home/php/images",
        "chdir(directory)"
      ]
    },
    {
      "title": "PHP chroot() Function",
      "summary": "â® PHP Directory Reference\nExampleGet your own PHP Server\nChange the root directory:\nResult:\nDefinition and Usage\nThe chroot() function changes the root directory of the current process to directory, and changes the current working directory to \"/\".\nNote: This function requires root privileges, and is only available to GNU and BSD systems, and only when using the CLI, CGI or Embed SAPI.\nNote: This function is not implemented on Windows platforms.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// Change root directory\nchroot(\"/path/to/chroot/\");\n\n// Get current directory\necho getcwd();\n?>",
        "/",
        "chroot(directory)"
      ]
    },
    {
      "title": "PHP closedir() Function",
      "summary": "â® PHP Directory Reference\nExampleGet your own PHP Server\nOpen a directory, read its contents, then close:\nResult:\nDefinition and Usage\nThe closedir() function closes a directory handle.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$dir = \"/images/\";\n\n// Open a directory, and read its contents\nif (is_dir($dir)){\nif ($dh = opendir($dir)){\nwhile (($file = readdir($dh)) !== false){\necho \"filename:\" . $file . \"<br>\";\n}\nclosedir($dh);\n}\n}\n?>",
        "filename: cat.gif\nfilename: dog.gif\nfilename: horse.gif",
        "closedir(dir)"
      ]
    },
    {
      "title": "PHP dir() Function",
      "summary": "â® PHP Directory Reference\nExampleGet your own PHP Server\nUse the dir() function:\nResult:\nDefinition and Usage\nThe dir() function returns an instance of the Directory class. This function is used to read a directory, which includes the following:\nThe given directory is opened\nThe two properties handle and path of dir() are available\nBoth handle and path properties have three methods: read(), rewind(), and close()\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$d = dir(getcwd());\n\necho \"Handle: \" . $d->handle . \"<br>\";\necho \"Path: \" . $d->path . \"<br>\";\n\nwhile (($file = $d->read()) !== false){\necho \"filename: \" . $file . \"<br>\";\n}\n$d->close();\n?>",
        "Handle: Resource id #2\nPath: /etc/php\nfilename: .\nfilename: ..\nfilename: ajax.gif\nfilename: books.xml\nfilename: cdcatalog.xml\nfilename: cd_catalog.xml\nfilename: default.asp\nfilename: demo_array.asp\nfilename: demo_array.htm\n...\n...\n...",
        "dir(directory, context)"
      ]
    },
    {
      "title": "PHP getcwd() Function",
      "summary": "â® PHP Directory Reference\nExampleGet your own PHP Server\nGet the current working directory:\nResult:\nDefinition and Usage\nThe getcwd() function returns the current working directory.\nSyntax\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\necho getcwd();\n?>",
        "/home/php",
        "getcwd()"
      ]
    },
    {
      "title": "PHP opendir() Function",
      "summary": "â® PHP Directory Reference\nExampleGet your own PHP Server\nOpen a directory, read its contents, then close:\nResult:\nDefinition and Usage\nThe opendir() function opens a directory handle.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$dir = \"/images/\";\n\n// Open a directory, and read its contents\nif (is_dir($dir)){\nif ($dh = opendir($dir)){\nwhile (($file = readdir($dh)) !== false){\necho \"filename:\" . $file . \"<br>\";\n}\nclosedir($dh);\n}\n}\n?>",
        "filename: cat.gif\nfilename: dog.gif\nfilename: horse.gif",
        "opendir(path, context)"
      ]
    },
    {
      "title": "PHP readdir() Function",
      "summary": "â® PHP Directory Reference\nExampleGet your own PHP Server\nList all entries in the images directory, then close:\nResult:\nDefinition and Usage\nThe readdir() function returns the name of the next entry in a directory.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$dir = \"/images/\";\n\n// Open a directory, and read its contents\nif (is_dir($dir)){\nif ($dh = opendir($dir)){\nwhile (($file = readdir($dh)) !== false){\necho \"filename:\" . $file . \"<br>\";\n}\nclosedir($dh);\n}\n}\n?>",
        "filename: cat.gif\nfilename: dog.gif\nfilename: horse.gif",
        "readdir(dir)"
      ]
    },
    {
      "title": "PHP rewinddir() Function",
      "summary": "â® PHP Directory Reference\nExampleGet your own PHP Server\nOpen a directory, list its files, reset directory handle, list its files once again, then close:\nResult:\nDefinition and Usage\nThe rewinddir() function resets the directory handle created by opendir().\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$dir = \"/images/\";\n\n// Open a directory, and read its contents\nif (is_dir($dir)){\nif ($dh = opendir($dir)){\n// List files in images directory\nwhile (($file = readdir($dh)) !== false){\necho \"filename:\" . $file . \"<br>\";\n}\nrewinddir();\n// List once again files in images directory\nwhile (($file = readdir($dh)) !== false){\necho \"filename:\" . $file . \"<br>\";\n}\nclosedir($dh);\n}\n}\n?>",
        "filename: cat.gif\nfilename: dog.gif\nfilename: horse.gif\nfilename: cat.gif\nfilename: dog.gif\nfilename: horse.gif",
        "rewinddir(dir)"
      ]
    },
    {
      "title": "PHP scandir() Function",
      "summary": "â® PHP Directory Reference\nExampleGet your own PHP Server\nList files and directories inside the images directory:\nResult:\nDefinition and Usage\nThe scandir() function returns an array of files and directories of the specified directory.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$dir = \"/images/\";\n\n// Sort in ascending order - this is default\n$a = scandir($dir);\n\n// Sort in descending order\n$b = scandir($dir,1);\n\nprint_r($a);\nprint_r($b);\n?>",
        "Array\n(\n[0] => .\n[1] => ..\n[2] => cat.gif\n[3] => dog.gif\n[4] => horse.gif\n[5] => myimages\n)\nArray\n(\n[0] => myimages\n[1] => horse.gif\n[2] => dog.gif\n[3] => cat.gif\n[4] => ..\n[5] => .\n)",
        "scandir(directory, order, context)"
      ]
    },
    {
      "title": "PHP Error Functions",
      "summary": "PHP Error Introduction\nThe error functions are used to deal with error handling and logging.\nThe error functions allow us to define own error handling rules, and modify the way the errors can be logged.\nThe logging functions allow us to send messages directly to other machines, emails, or system logs.\nThe error reporting functions allow us to customize what level and kind of error feedback is given.\nInstallation\nThe PHP error functions are part of the PHP core. No installation is required to use these functions.\nRuntime Configuration\nThe behavior of the error functions is affected by settings in php.ini.\nErrors and logging configuration options:\nREMOVE ADS\nPHP Error and Logging Functions\nPHP Predefined Error and Logging Constants",
      "examples": []
    },
    {
      "title": "PHP debug_backtrace() Function",
      "summary": "PHP Error Reference\nExampleGet your own PHP Server\nGenerate a PHP backtrace:\nDefinition and Usage\nThe debug_backtrace() function generates a PHP backtrace.\nThis function displays data from the code that led up to the debug_backtrace() function.\nReturns an array of associative arrays. The possible returned elements are:\nReturns: \"->\"Â  - Method call\nReturns: \"::\"Â  - Static method call\nReturns nothing - Function call\nREMOVE ADS\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\nfunction a($txt) {\nb(\"Glenn\");\n}\nfunction b($txt) {\nc(\"Cleveland\");\n}\nfunction c($txt)Â {\nvar_dump(debug_backtrace());\n}\na(\"Peter\");\n?>",
        "debug_backtrace(options, limit);"
      ]
    },
    {
      "title": "PHP debug_print_backtrace() Function",
      "summary": "PHP Error Reference\nExampleGet your own PHP Server\nPrint a PHP backtrace:\nDefinition and Usage\nThe debug_print_backtrace() function prints a PHP backtrace.\nThis function displays data from the code that led up to the debug_print_backtrace() function.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\nfunction a($txt) {\nb(\"Glenn\");\n}\nfunction b($txt) {\nc(\"Cleveland\");\n}\nfunction c($txt)Â {\ndebug_print_backtrace();\n}\na(\"Peter\");\n?>",
        "debug_print_backtrace(options, limit);"
      ]
    },
    {
      "title": "PHP error_get_last() Function",
      "summary": "PHP Error Reference\nExampleGet your own PHP Server\nReturn the last error that occurred:\nDefinition and Usage\nThe error_get_last() function returns the last error that occurred (as an associative array).\nThe associative array contains four keys:\n[type] - Describes the error type\n[message] - Describes the error message\n[file] - Describes the file where the error occurred\n[line] - Describes the line where the error occurred\nSyntax\nTechnical Details",
      "examples": [
        "<?php\necho $test;\nprint_r(error_get_last());\n?>",
        "error_get_last();"
      ]
    },
    {
      "title": "PHP error_log() Function",
      "summary": "PHP Error Reference\nExampleGet your own PHP Server\nSend error messages to the web server's error log and to a mail account:\nDefinition and Usage\nThe error_log() function sends an error message to a log, to a file, or to a mail account.\nSyntax\nParameter Values\n0 - Default. Message is sent to PHP's system logger, using the OS' system logging mechanism or a file, depending on what the error_log configuration is set to in php.ini\n1 - Message is sent by email to the address in the destination parameter\n2 - No longer in use (only available in PHP 3)\n3 - Message is appended to the file specified in destination\n4 - Message is sent directly to the SAPI logging handler\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// Send error message to the server log if error connecting to the database\nif (!mysqli_connect(\"localhost\",\"bad_user\",\"bad_password\",\"my_db\")) {\nerror_log(\"Failed to connect to database!\", 0);\n}\n\n// Send email to administrator if we run out of FOO\nif (!($foo = allocate_new_foo())) {\nerror_log(\"Oh no! We are out of FOOs!\", 1, \"admin@example.com\");\n}\n?>",
        "error_log(message, type, destination, headers);"
      ]
    },
    {
      "title": "PHP error_reporting() Function",
      "summary": "PHP Error Reference\nExampleGet your own PHP Server\nSpecify different error level reporting:\nDefinition and Usage\nThe error_reporting() function specifies which errors are reported.\nPHP has many levels of errors, and using this function sets that level for the current script.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// Turn off error reporting\nerror_reporting(0);\n\n// Report runtime errors\nerror_reporting(E_ERROR | E_WARNING | E_PARSE);\n\n// Report all errors\nerror_reporting(E_ALL);\n\n// Same as error_reporting(E_ALL);\nini_set(\"error_reporting\", E_ALL);\n\n// Report all errors except E_NOTICE\nerror_reporting(E_ALL & ~E_NOTICE);\n?>",
        "error_reporting(level);"
      ]
    },
    {
      "title": "PHP restore_error_handler() Function",
      "summary": "PHP Error Reference\nExampleGet your own PHP Server\nRestore the previous error handler after changing it with the set_error_handler() function:\nDefinition and Usage\nThe restore_error_handler() function restores the previous error handler.\nThis function is used to restore the previous error handler after changing it with the set_error_handler() function.\nTip: The previous error handler could be the built-in error handler or a user-defined error handler function.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\n// A user-defined error handler function\nfunction myErrorHandler($errno, $errstr, $errfile, $errline) {\necho \"<b>Custom error:</b> [$errno] $errstr<br>\";\necho \" Error on line $errline in $errfile<br>\";\n}\n\n// Set user-defined error handler function\nset_error_handler(\"myErrorHandler\");\n\n$test=2;\n\n// Trigger error\nif ($test>1) {\ntrigger_error(\"A custom error has been triggered\");\n}\n\n// Restore previous error handler\nrestore_error_handler();\n\n// Trigger error again\nif ($test>1) {\ntrigger_error(\"A custom error has been triggered\");\n}\n?>",
        "restore_error_handler();"
      ]
    },
    {
      "title": "PHP restore_exception_handler() Function",
      "summary": "PHP Error Reference\nExampleGet your own PHP Server\nRestore exception handler example:\nDefinition and Usage\nThe restore_exception_handler() function restores the previous exception handler.\nThis function is used to restore the previous exception handler after changing it with the set_exception_handler() function.\nTip: The previous exception handler could be the built-in exception handler or a user-defined exception handler function.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\n// Two user-defined exception handler functions\nfunction myException1($exception) {\necho \"[\" . __FUNCTION__ . \"]\" . $exception->getMessage();\n}\nfunction myException2($exception) {\necho \"[\" . __FUNCTION__ . \"]\" . $exception->getMessage();\n}\n\nset_exception_handler(\"myException1\");\nset_exception_handler(\"myException2\");\n\nrestore_exception_handler();\n\n// Throw exception\nthrow new Exception(\"This triggers the first exception handler...\");\n?>",
        "restore_exception_handler();"
      ]
    },
    {
      "title": "PHP set_error_handler() Function",
      "summary": "PHP Error Reference\nExampleGet your own PHP Server\nSet a user-defined error handler function with the set_error_handler() function, and trigger an error (with trigger_error()):\nDefinition and Usage\nThe set_error_handler() function sets a user-defined error handler function.\nNote: The standard PHP error handler is completely bypassed if this function is used, and the user-defined error handler must terminate the script, die(), if necessary.\nNote: If errors occur before the script is executed the custom error handler cannot be used since it is not registered at that time.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n// A user-defined error handler function\nfunction myErrorHandler($errno, $errstr, $errfile, $errline) {\necho \"<b>Custom error:</b> [$errno] $errstr<br>\";\necho \" Error on line $errline in $errfile<br>\";\n}\n\n// Set user-defined error handler function\nset_error_handler(\"myErrorHandler\");\n\n$test=2;\n\n// Trigger error\nif ($test>1) {\ntrigger_error(\"A custom error has been triggered\");\n}\n?>",
        "set_error_handler(errorhandler, E_ALL | E_STRICT)"
      ]
    },
    {
      "title": "PHP set_exception_handler() Function",
      "summary": "PHP Error Reference\nExampleGet your own PHP Server\nSet a user-defined exception handler function:\nDefinition and Usage\nThe set_exception_handler() function sets a user-defined exception handler function.\nThe script will stop executing after the exception handler is called.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n// A user-defined exception handler function\nfunction myException($exception) {\necho \"<b>Exception:</b> \", $exception->getMessage();\n}\n\n// Set user-defined exception handler function\nset_exception_handler(\"myException\");\n\n// Throw exception\nthrow new Exception(\"Uncaught exception occurred!\");\n?>",
        "set_exception_handler(exceptionhandler);"
      ]
    },
    {
      "title": "PHP trigger_error() Function",
      "summary": "PHP Error Reference\nExampleGet your own PHP Server\nIf $usernum > 10, trigger an error:\nDefinition and Usage\nThe trigger_error() function creates a user-level error message.\nThe trigger_error() function can be used with the built-in error handler, or with a user-defined function set by the set_error_handler() function.\nSyntax\nParameter Values\nE_USER_ERROR\nE_USER_WARNING\nE_USER_NOTICE (this is default)\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\nif ($usernum>10) {\ntrigger_error(\"Number cannot be larger than 10\");\n}\n?>",
        "trigger_error(message, type)"
      ]
    },
    {
      "title": "PHP Exception Reference",
      "summary": "PHP Exception Object\nExceptions are used by functions and methods to send information about errors and unexpected behaviour.\nThe Exception object has no public properties, but it has private and protected properties which can be written to or read from using the constructor and methods.\nThe Exception object has the following methods:",
      "examples": []
    },
    {
      "title": "PHP Exception Constructor",
      "summary": "â® PHP Exception Reference\nExampleGet your own PHP Server\nDefinition and Usage\nThe Exception() constructor is used to create an Exception object and set some of its properties.\nSyntax\nParameter Values\nRelated Pages\nRead more about Exceptions in our PHP Exceptions Chapter.",
      "examples": [
        "<?php\n...\nthrow new Exception(\"Division by zero\", 1);\n...\n?>",
        "new Exception(message, code, previous)",
        "Exception()"
      ]
    },
    {
      "title": "PHP Exception getCode() Method",
      "summary": "â® PHP Exception Reference\nExampleGet your own PHP Server\nThrow an exception and output its code:\nDefinition and Usage\nThe getCode() method returns an integer which can be used to identify the exception.\nSyntax\nTechnical Details\nRelated Pages\nRead more about Exceptions in our PHP Exceptions Chapter.",
      "examples": [
        "<?php\ntry {\nthrow new Exception(\"An error occurred\", 120);\n} catch(Exception $e) {\necho \"Error code: \" . $e->getCode();\n}\n?>",
        "$exception->getCode()",
        "getCode()"
      ]
    },
    {
      "title": "PHP Exception getFile() Method",
      "summary": "â® PHP Exception Reference\nExampleGet your own PHP Server\nThrow an exception and output the path of the file in which the exception occurred:\nDefinition and Usage\nThe getFile() method returns the absolute path to the file where an exception occurred.\nSyntax\nTechnical Details\nRelated Pages\nRead more about Exceptions in our PHP Exceptions Chapter.",
      "examples": [
        "<?php\ntry {\nthrow new Exception(\"An error occurred\");\n} catch(Exception $e) {\necho \"Error in this file: \" . $e->getFile();\n}\n?>",
        "$exception->getFile()",
        "getFile()"
      ]
    },
    {
      "title": "PHP Exception getMessage() Method",
      "summary": "â® PHP Exception Reference\nExampleGet your own PHP Server\nThrow an exception and then output its message:\nDefinition and Usage\nThe getMessage() method returns a description of the error or behaviour that caused the exception to be thrown.\nSyntax\nTechnical Details\nRelated Pages\nRead more about Exceptions in our PHP Exceptions Chapter.",
      "examples": [
        "<?php\ntry {\nthrow new Exception(\"An error occurred\");\n} catch(Exception $e) {\necho $e->getMessage();\n}\n?>",
        "$exception->getMessage()",
        "getMessage()"
      ]
    },
    {
      "title": "PHP Exception getLine() Method",
      "summary": "â® PHP Exception Reference\nExampleGet your own PHP Server\nThrow an exception and then output the number of the line on which it was thrown:\nDefinition and Usage\nThe getLine() method returns the line number of the line of code which threw the exception.\nSyntax\nTechnical Details\nRelated Pages\nRead more about Exceptions in our PHP Exceptions Chapter.",
      "examples": [
        "<?php\ntry {\nthrow new Exception(\"An error occurred\");\n} catch(Exception $e) {\necho $e->getLine();\n}\n?>",
        "$exception->getLine()",
        "getLine()"
      ]
    },
    {
      "title": "PHP Exception getPrevious() Method",
      "summary": "â® PHP Exception Reference\nExampleGet your own PHP Server\nGet information about a previous exception:\nDefinition and Usage\nIf the exception was triggered by another one, then the getPrevious() method returns the other exception. Otherwise it returns null.\nSyntax\nTechnical Details\nRelated Pages\nRead more about Exceptions in our PHP Exceptions Chapter.",
      "examples": [
        "<?php\ntry {\ntry {\nthrow new Exception(\"An error occurred\", 1);\n} catch(Exception $e1) {\nthrow new Exception(\"Another error occurred\", 2, $e1);\n}\n\n} catch (Exception $e2) {\necho $previous = $e2->getPrevious();\necho $previous->getMessage();\n}\n?>",
        "$exception->getPrevious()",
        "getPrevious()"
      ]
    },
    {
      "title": "PHP Exception getTrace() Method",
      "summary": "â® PHP Exception Reference\nExampleGet your own PHP Server\nOutput the stack trace:\nDefinition and Usage\nThe getTrace() method returns a stack trace in the form of an array.\nStack traces contain information about all of the functions that are running at a given moment. The stack trace provided by this method has information about the stack at the time that the exception was thrown.\nSyntax\nTechnical Details\nRelated Pages\nRead more about Exceptions in our PHP Exceptions Chapter.\nPHP Reference: The getTraceAsString() Method.",
      "examples": [
        "<?php\nfunction myFunction($num) {\nthrow new Exception(\"An error occurred\");\n}\n\ntry {\nmyFunction(5);\n} catch (Exception $e) {\nprint_r($e->getTrace());\n}\n?>",
        "$exception->getTrace()",
        "getTrace()"
      ]
    },
    {
      "title": "PHP Exception getTraceAsString() Method",
      "summary": "â® PHP Exception Reference\nExampleGet your own PHP Server\nOutput the stack trace:\nDefinition and Usage\nThe getTraceAsString() method returns a stack trace in the form of a string.\nStack traces contain information about all of the functions that are running at a given moment. The stack trace provided by this method has information about the stack at the time that the exception was thrown.\nSyntax\nTechnical Details\nRelated Pages\nRead more about Exceptions in our PHP Exceptions Chapter.\nPHP Reference: The getTrace() Method.",
      "examples": [
        "<?php\nfunction myFunction($num) {\nthrow new Exception(\"An error occurred\");\n}\n\ntry {\nmyFunction(5);\n} catch (Exception $e) {\nprint_r($e->getTraceAsString());\n}\n?>",
        "$exception->getTraceAsString()",
        "getTraceAsString()"
      ]
    },
    {
      "title": "PHP Filesystem Functions",
      "summary": "PHP Filesystem Introduction\nThe filesystem functions allow you to access and manipulate the filesystem.\nInstallation\nThe filesystem functions are part of the PHP core. There is no installation needed to use these functions.\nUnix / Windows Compatibility\nWhen specifying a path on Unix platforms, a forward slash (/) is used as directory separator.\nOn Windows platforms, both forward slash (/) and backslash (\\) can be used.\nRuntime Configuration\nThe behavior of the filesystem functions is affected by settings in php.ini.\nREMOVE ADS\nPHP Filesystem Functions",
      "examples": []
    },
    {
      "title": "PHP basename() Function",
      "summary": "ExampleGet your own PHP Server\nReturn filename from the specified path:\nThe output of the code above will be:\nDefinition and Usage\nThe basename() function returns the filename from a path.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$path = \"/testweb/home.php\";\n\n//Show filename\necho basename($path) .\"<br/>\";\n\n//Show filename, but cut off file extension for \".php\" files\necho basename($path,\".php\");\n?>",
        "home.php\nhome",
        "basename(path, suffix)"
      ]
    },
    {
      "title": "PHP chgrp() Function",
      "summary": "ExampleGet your own PHP Server\nChange the usergroup to \"admin\" for the \"test.txt\" file:\nDefinition and Usage\nThe chgrp() function changes the usergroup of the specified file.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\nchgrp(\"test.txt\",\"admin\")\n?>",
        "chgrp(file, group)"
      ]
    },
    {
      "title": "PHP chmod() Function",
      "summary": "ExampleGet your own PHP Server\nChange permissions for the \"test.txt\" file:\nDefinition and Usage\nThe chmod() function changes permissions of the specified file.\nSyntax\nParameter Values\nThe mode parameter consists of four numbers:\nThe first number is always zero\nThe second number specifies permissions for the owner\nThe third number specifies permissions for the owner's user group\nThe fourth number specifies permissions for everybody else\nPossible values (to set multiple permissions, add up the following numbers):\n1 = execute permissions\n2 = write permissions\n4 = read permissions\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// Read and write for owner, nothing for everybody else\nchmod(\"test.txt\",0600);\n\n// Read and write for owner, read for everybody else\nchmod(\"test.txt\",0644);\n\n// Everything for owner, read and execute for everybody else\nchmod(\"test.txt\",0755);\n\n// Everything for owner, read for owner's group\nchmod(\"test.txt\",0740);\n?>",
        "chmod(file, mode)"
      ]
    },
    {
      "title": "PHP chown() Function",
      "summary": "ExampleGet your own PHP Server\nChange owner for the \"test.txt\" file:\nDefinition and Usage\nThe chown() function changes the owner of the specified file.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\nchown(\"test.txt\",\"charles\")\n?>",
        "chown(file, owner)"
      ]
    },
    {
      "title": "PHP clearstatcache() Function",
      "summary": "ExampleGet your own PHP Server\nOutput file size, truncate file, clear cache, and then output file size again:\nThe output of the code above could be:\nDefinition and Usage\nThe clearstatcache() function clears the file status cache.\nPHP caches data for some functions for better performance. If a file is to be checked several times in a script, you probably want to avoid caching to get correct results. To do this, use the clearstatcache() function.\nSyntax\nParameter Values\nTips and Notes\nTip: Functions that are caching:\nstat()\nlstat()\nfile_exists()\nis_writable()\nis_readable()\nis_executable()\nis_file()\nis_dir()\nis_link()\nfilectime()\nfileatime()\nfilemtime()\nfileinode()\nfilegroup()\nfileowner()\nfilesize()\nfiletype()\nfileperms()\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n//output filesize\necho filesize(\"test.txt\");\necho \"<br />\";\n\n$file = fopen(\"test.txt\", \"a+\");\n// truncate file\nftruncate($file,100);\nfclose($file);\n\n//Clear cache and check filesize again\nclearstatcache();\necho filesize(\"test.txt\");\n?>",
        "792\n100",
        "clearstatcache(clear_realpath_cache, filename)"
      ]
    },
    {
      "title": "PHP copy() Function",
      "summary": "ExampleGet your own PHP Server\nCopy \"source.txt\" to \"target.txt\":\nDefinition and Usage\nThe copy() function copies a file.\nNote: If the to_file file already exists, it will be overwritten.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\necho copy(\"source.txt\",\"target.txt\");\n?>",
        "copy(from_file, to_file, context)"
      ]
    },
    {
      "title": "PHP delete() Function",
      "summary": "Definition and Usage\nThere is no delete() function in PHP.\nIf you need to delete a file, look at the unlink() function.",
      "examples": []
    },
    {
      "title": "PHP dirname() Function",
      "summary": "ExampleGet your own PHP Server\nReturn the path of the parent directory:\nThe output of the code above will be:\nDefinition and Usage\nThe dirname() function returns the path of the parent directory.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\necho dirname(\"c:/testweb/home.php\") . \"<br />\";\necho dirname(\"c:/testweb/home.php\", 2) . \"<br />\";\necho dirname(\"/testweb/home.php\");\n?>",
        "c:/testweb\nc:\n/testweb",
        "dirname(path, levels)"
      ]
    },
    {
      "title": "PHP disk_free_space() Function",
      "summary": "ExampleGet your own PHP Server\nReturn the free space, in bytes, of the C: directory:\nThe output of the code above could be:\nDefinition and Usage\nThe disk_free_space() function returns the free space, in bytes, of the specified filesystem or disk.\nTip: Look at the disk_total_space() to get the total size of a filesystem or disk.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\necho disk_free_space(\"C:\");\n?>",
        "109693288448",
        "disk_free_space(directory)"
      ]
    },
    {
      "title": "PHP disk_total_space() Function",
      "summary": "ExampleGet your own PHP Server\nReturn the total size, in bytes, of the C: directory:\nThe output of the code above could be:\nDefinition and Usage\nThe disk_total_space() function returns the total size, in bytes, of the specified filesystem or disk.\nTip: Look at the disk_free_space() to get the free space of a filesystem or disk.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\necho disk_total_space(\"C:\");\n?>",
        "119990349824",
        "disk_total_space(directory)"
      ]
    },
    {
      "title": "PHP diskfreespace() Function",
      "summary": "Definition and Usage\nThe diskfreespace() function is an alias of the disk_free_space() function.",
      "examples": []
    },
    {
      "title": "PHP fclose() Function",
      "summary": "ExampleGet your own PHP Server\nOpen and close file \"test.txt\":\nDefinition and Usage\nThe fclose() function closes an open file pointer.\nNote: The file must have been opened by fopen() or fsockopen().\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$file = fopen(\"test.txt\", \"r\");\nfclose($file);\n?>",
        "fclose(filepointer)"
      ]
    },
    {
      "title": "PHP feof() Function",
      "summary": "ExampleGet your own PHP Server\nOpen file, read lines - until EOF is reached:\nDefinition and Usage\nThe feof() function checks if the \"end-of-file\" (EOF) has been reached for an open file.\nTip: This function is useful for looping through data of unknown length.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$file = fopen(\"test.txt\", \"r\");\n\n//Output lines until EOF is reached\nwhile(! feof($file)) {\n$line = fgets($file);\necho $line. \"<br>\";\n}\n\nfclose($file);\n?>",
        "feof(file)"
      ]
    },
    {
      "title": "PHP fflush() Function",
      "summary": "ExampleGet your own PHP Server\nWrite all buffered output to the open file:\nDefinition and Usage\nThe fflush() function writes all buffered output to an open file.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$file = fopen(\"test.txt\",\"r+\");\nrewind($file);\nfwrite($file, 'Hello World');\nfflush($file);\n\nfclose($file);\n?>",
        "fflush(file)"
      ]
    },
    {
      "title": "PHP fgetc() Function",
      "summary": "ExampleGet your own PHP Server\nRead one character from the open file:\nDefinition and Usage\nThe fgetc() function returns a single character from an open file.\nNote: This function is slow and should not be used on large files. If you need to read one character at a time from a large file, use fgets() to read data one line at a time and then process the line one single character at a time with fgetc().\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nRead open file, character by character:",
      "examples": [
        "<?php\n$file = fopen(\"test.txt\",\"r\");\necho fgetc($file);\nfclose($file);\n?>",
        "fgetc(file)",
        "<?php\n$file = fopen(\"test.txt\",\"r\");\nwhile (! feof($file)) {\necho fgetc($file);\n}\nfclose($file);\n?>"
      ]
    },
    {
      "title": "PHP fgetcsv() Function",
      "summary": "ExampleGet your own PHP Server\nRead and output one line from the open CSV file:\nDefinition and Usage\nThe fgetcsv() function parses a line from an open file, checking for CSV fields.\nTip: Also see the fputcsv() function.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nRead and output the entire contents of a CSV file:",
      "examples": [
        "<?php\n$file = fopen(\"contacts.csv\",\"r\");\nprint_r(fgetcsv($file));\nfclose($file);\n?>",
        "fgetcsv(file, length, separator, enclosure)",
        "<?php\n$file = fopen(\"contacts.csv\",\"r\");\n\nwhile(! feof($file))\n{\nprint_r(fgetcsv($file));\n}\n\nfclose($file);\n?>"
      ]
    },
    {
      "title": "PHP fgets() Function",
      "summary": "ExampleGet your own PHP Server\nRead one line from the open file:\nDefinition and Usage\nThe fgets() function returns a line from an open file.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nRead open file, line by line:",
      "examples": [
        "<?php\n$file = fopen(\"test.txt\",\"r\");\necho fgets($file);\nfclose($file);\n?>",
        "fgets(file, length)",
        "<?php\n$file = fopen(\"test.txt\",\"r\");\n\nwhile(! feof($file))\n{\necho fgets($file). \"<br />\";\n}\n\nfclose($file);\n?>"
      ]
    },
    {
      "title": "PHP fgetss() Function",
      "summary": "ExampleGet your own PHP Server\nRead one line from the open HTML file (strip tags):\nDefinition and Usage\nThe fgetss() function returns a line from an open file - stripped from HTML and PHP tags.\nNote: The fgetss() function is deprecated from PHP 7.3.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$file = fopen(\"test.htm\",\"r\");\necho fgetss($file);\nfclose($file);\n?>",
        "fgetss(file, length, tags)"
      ]
    },
    {
      "title": "PHP file() Function",
      "summary": "ExampleGet your own PHP Server\nRead a file into an array:\nDefinition and Usage\nThe file() reads a file into an array.\nEach array element contains a line from the file, with the newline character still attached.\nSyntax\nParameter Values\nFILE_USE_INCLUDE_PATH - Search for the file in the include_path (in php.ini)\nFILE_IGNORE_NEW_LINES - Skip the newline at the end of each array element\nFILE_SKIP_EMPTY_LINES - Skip empty lines in the file\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\nprint_r(file(\"test.txt\"));\n?>",
        "file(filename, flag, context)"
      ]
    },
    {
      "title": "PHP file_exists() Function",
      "summary": "ExampleGet your own PHP Server\nCheck whether a file exists:\nDefinition and Usage\nThe file_exists() function checks whether a file or directory exists.\nNote: The result of this function is cached. Use clearstatcache() to clear the cache.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\necho file_exists(\"webdictionary.txt\");\n?>",
        "file_exists(path)"
      ]
    },
    {
      "title": "PHP file_get_contents() Function",
      "summary": "ExampleGet your own PHP Server\nRead a file into a string:\nDefinition and Usage\nThe file_get_contents() reads a file into a string.\nThis function is the preferred way to read the contents of a file into a string. It will use memory mapping techniques, if this is supported by the server, to enhance performance.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\necho file_get_contents(\"test.txt\");\n?>",
        "file_get_contents(path, include_path, context, start, max_length)"
      ]
    },
    {
      "title": "PHP file_put_contents() Function",
      "summary": "ExampleGet your own PHP Server\nWrite data to a file:\nThe output of the code above will be:\nDefinition and Usage\nThe file_put_contents() writes data to a file.\nThis function follows these rules when accessing a file:\nIf FILE_USE_INCLUDE_PATH is set, check the include path for a copy of filename\nCreate the file if it does not exist\nOpen the file\nLock the file if LOCK_EX is set\nIf FILE_APPEND is set, move to the end of the file. Otherwise, clear the file content\nWrite the data into the file\nClose the file and release any locks\nNote: Use FILE_APPEND to avoid deleting the existing content of the file.\nSyntax\nParameter Values\nFILE_USE_INCLUDE_PATH - search for filename in the include directory\nFILE_APPEND - if file already exists, append the data to it - instead of overwriting it\nLOCK_EX - Put an exclusive lock on the file while writing to it\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\necho file_put_contents(\"test.txt\",\"Hello World. Testing!\");\n?>",
        "21",
        "file_put_contents(filename, data, mode, context)"
      ]
    },
    {
      "title": "PHP fileatime() Function",
      "summary": "ExampleGet your own PHP Server\nGet last access time of \"webdictionary.txt\":\nDefinition and Usage\nThe fileatime() function returns the last access time of the specified file.\nNote: The result of this function is cached. Use clearstatcache() to clear the cache.\nNote: The atime of a file changes each time the data of a file are being read. This can decrease the performance if an application accesses aÂ  large number of files or directories. Some Unix systems have access time updates disabled to increase performance. In this case this function is useless.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\necho fileatime(\"webdictionary.txt\");\necho \"<br>\";\necho \"Last access: \".date(\"F d Y H:i:s.\", fileatime(\"webdictionary.txt\"));\n?>",
        "fileatime(filename)"
      ]
    },
    {
      "title": "PHP filectime() Function",
      "summary": "ExampleGet your own PHP Server\nGet last change time of \"webdictionary.txt\":\nDefinition and Usage\nThe filectime() function returns the last time a file was changed.\nThis function checks for inode changes as well as regular changes. Inode changes is when permissions, owner, group or other metadata is changed.\nTip: Use the filemtime() function to return the last time the file content was changed.\nNote: The result of this function is cached. Use clearstatcache() to clear the cache.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\necho filectime(\"webdictionary.txt\");\necho \"<br>\";\necho \"Last changed: \".date(\"F d Y H:i:s.\", filectime(\"webdictionary.txt\"));\n?>",
        "filectime(filename)"
      ]
    },
    {
      "title": "PHP filegroup() Function",
      "summary": "ExampleGet your own PHP Server\nReturn the group ID of \"test.txt\":\nDefinition and Usage\nThe filegroup() function returns the group ID of a file.\nTip: Use the posix_getgrgid() function to convert the group ID to a group name.\nNote: The result of this function is cached. Use clearstatcache() to clear the cache.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\necho filegroup(\"test.txt\");\n?>",
        "filegroup(filename)"
      ]
    },
    {
      "title": "PHP fileinode() Function",
      "summary": "ExampleGet your own PHP Server\nReturn the file inode of \"test.txt\":\nDefinition and Usage\nThe fileinode() function returns the inode of the specified file.\nNote: The result of this function is cached. Use clearstatcache() to clear the cache.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\necho fileinode(\"test.txt\");\n?>",
        "fileinode(filename)"
      ]
    },
    {
      "title": "PHP filemtime() Function",
      "summary": "ExampleGet your own PHP Server\nGet the last time the file content was modified:\nDefinition and Usage\nThe filemtime() function returns the last time the file content was modified.\nNote: The result of this function is cached. Use clearstatcache() to clear the cache.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\necho filemtime(\"webdictionary.txt\");\necho \"<br>\";\necho \"Content last changed: \".date(\"F d Y H:i:s.\", filemtime(\"webdictionary.txt\"));\n?>",
        "filemtime(filename)"
      ]
    },
    {
      "title": "PHP fileowner() Function",
      "summary": "ExampleGet your own PHP Server\nReturn the user ID (owner) of \"test.txt\":\nDefinition and Usage\nThe fileowner() function returns the user ID (owner) of the specified file.\nTip: Use posix_getpwuid() to convert the user ID to a user name.\nNote: The result of this function is cached. Use clearstatcache() to clear the cache.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\necho fileowner(\"test.txt\");\n?>",
        "fileowner(filename)"
      ]
    },
    {
      "title": "PHP fileperms() Function",
      "summary": "ExampleGet your own PHP Server\nReturn the file permissions for \"test.txt\":\nDefinition and Usage\nThe fileperms() function returns the permissions for a file.\nNote: The result of this function is cached. Use clearstatcache() to clear the cache.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nDisplay permissions as an octal value:",
      "examples": [
        "<?php\necho fileperms(\"test.txt\");\n?>",
        "fileperms(filename)",
        "<?php\necho substr(sprintf(\"%o\",fileperms(\"test.txt\")),-4);\n?>"
      ]
    },
    {
      "title": "PHP filesize() Function",
      "summary": "ExampleGet your own PHP Server\nReturn the file size for \"test.txt\":\nDefinition and Usage\nThe filesize() function returns the size of a file.\nNote: The result of this function is cached. Use clearstatcache() to clear the cache.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\necho filesize(\"test.txt\");\n?>",
        "filesize(filename)"
      ]
    },
    {
      "title": "PHP filetype() Function",
      "summary": "ExampleGet your own PHP Server\nReturn the file type for \"test.txt\":\nDefinition and Usage\nThe filetype() function returns the file type of a file.\nPossible return values:\nfifo\nchar\ndir\nblock\nlink\nfile\nsocket\nunknown\nNote: The result of this function is cached. Use clearstatcache() to clear the cache.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nReturn the file type for /images/:",
      "examples": [
        "<?php\necho filetype(\"test.txt\");\n?>",
        "filetype(filename)",
        "<?php\necho filetype(\"/images/\");\n?>"
      ]
    },
    {
      "title": "PHP flock() Function",
      "summary": "ExampleGet your own PHP Server\nLock and release a file:\nDefinition and Usage\nThe flock() function locks and releases a file.\nSyntax\nParameter Values\nPossible values:\nLOCK_SH - A shared lock (reader). Allow other processes to access the file\nLOCK_EX - An exclusive lock (writer). Prevent other processes from accessing the file\nLOCK_UN - Release the lock\nLOCK_NB - Avoid blocking other processes while locking\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$file = fopen(\"test.txt\",\"w+\");\n\n// exclusive lock\nif (flock($file,LOCK_EX)) {\nfwrite($file,\"Add some text to the file.\");\nfflush($file);\n// release lock\nflock($file,LOCK_UN);\n} else {\necho \"Error locking file!\";\n}\nfclose($file);\n?>",
        "flock(file, lock, block)"
      ]
    },
    {
      "title": "PHP fnmatch() Function",
      "summary": "ExampleGet your own PHP Server\nChecking a color name against a shell wildcard pattern:\nDefinition and Usage\nThe fnmatch() function checks if a string or filename matches the given shell wildcard pattern.\nSyntax\nParameter Values\nFNM_NOESCAPE - Disable backslash escaping\nFNM_PATHNAME - Slash in string only matches slash in the given pattern\nFNM_PERIOD - Leading period in string must be exactly matched by period in pattern\nFNM_CASEFOLD - Caseless match. Part of the GNU extension\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$txt = \"My car is a dark color\";\nif (fnmatch(\"*col[ou]r\",$txt))\n{\necho \"hmm...\";\n}\n?>",
        "fnmatch(pattern, string, flags)"
      ]
    },
    {
      "title": "PHP fopen() Function",
      "summary": "ExampleGet your own PHP Server\nOpen file, read lines - until EOF is reached:\nDefinition and Usage\nThe fopen() function opens a file or URL.\nNote: When writing to a text file, be sure to use the correct line-ending character! Unix systems use \\n, Windows systems use \\r\\n, and Macintosh systems use \\r as the line ending character. Windows offers a translation flag ('t') which will translate \\n to \\r\\n when working with the file. You can also use 'b' to force binary mode. To use these flags, specify either 'b' or 't' as the last character of the mode parameter.\nSyntax\nParameter Values\nPossible values:\n\"r\" - Read only. Starts at the beginning of the file\n\"r+\" - Read/Write. Starts at the beginning of the file\n\"w\" - Write only. Opens and truncates the file; or creates a new file if it doesn't exist. Place file pointer at the beginning of the file\n\"w+\" - Read/Write. Opens and truncates the file; or creates a new file if it doesn't exist. Place file pointer at the beginning of the file\n\"a\" - Write only. Opens and writes to the end of the file or creates a new file if it doesn't exist\n\"a+\" - Read/Write. Preserves file content by writing to the end of the file\n\"x\" - Write only. Creates a new file. Returns FALSE and an error if file already exists\n\"x+\" - Read/Write. Creates a new file. Returns FALSE and an error if file already exists\n\"c\" - Write only. Opens the file; or creates a new file if it doesn't exist. Place file pointer at the beginning of the file\n\"c+\" - Read/Write. Opens the file; or creates a new file if it doesn't exist. Place file pointer at the beginning of the file\n\"e\" - Only available in PHP compiled on POSIX.1-2008 conform systems.\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$file = fopen(\"test.txt\", \"r\");\n\n//Output lines until EOF is reached\nwhile(! feof($file)) {\n$line = fgets($file);\necho $line. \"<br>\";\n}\n\nfclose($file);\n?>",
        "fopen(filename, mode, include_path, context)"
      ]
    },
    {
      "title": "PHP fpassthru() Function",
      "summary": "ExampleGet your own PHP Server\nRead from the current position in file - until EOF, and then write the remaining data to the output buffer:\nDefinition and Usage\nThe fpassthru() function reads from the current position in a file - until EOF, and then writes the result to the output buffer.\nNote: When using fpassthru() on a binary file on Windows, remember to open the file in binary mode.\nTip: Call rewind() to set the file pointer to the beginning of the file if you have already written to the file.\nTip: To just dump the contents of a file to the output buffer, use the readfile() function instead.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$file = fopen(\"test.txt\",\"r\");\n// Read first line\nfgets($file);\n\n// Read from the current position in file - until EOF, and then write the result to the output buffer\necho fpassthru($file);\n\nfclose($file);\n?>",
        "fpassthru(file)"
      ]
    },
    {
      "title": "PHP fputcsv() Function",
      "summary": "ExampleGet your own PHP Server\nFormat a line as CSV and writes it to an open file:\nDefinition and Usage\nThe fputcsv() function formats a line as CSV and writes it to an open file.\nTip: Also see the fgetcsv() function.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$list = array (\narray(\"Peter\", \"Griffin\" ,\"Oslo\", \"Norway\"),\narray(\"Glenn\", \"Quagmire\", \"Oslo\", \"Norway\")\n);\n\n$file = fopen(\"contacts.csv\",\"w\");\n\nforeach ($list as $line) {\nfputcsv($file, $line);\n}\n\nfclose($file);\n?>",
        "fputcsv(file, fields, separator, enclosure, escape)"
      ]
    },
    {
      "title": "PHP fputs() Function",
      "summary": "Definition and Usage\nThe fputs() function is an alias of the fwrite() function.",
      "examples": []
    },
    {
      "title": "PHP fread() Function",
      "summary": "ExampleGet your own PHP Server\nRead 10 bytes from an open file:\nDefinition and Usage\nThe fread() reads from an open file.\nThe function will stop at the end of the file or when it reaches the specified length, whichever comes first.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nRead entire file:",
      "examples": [
        "<?php\n$file = fopen(\"test.txt\",\"r\");\nfread($file,\"10\");\nfclose($file);\n?>",
        "fread(file, length)",
        "<?php\n$file = fopen(\"test.txt\",\"r\");\nfread($file,filesize(\"test.txt\"));\nfclose($file);\n?>"
      ]
    },
    {
      "title": "PHP fscanf() Function",
      "summary": "Definition and Usage\nThe fscanf() function parses the input from an open file according to the specified format.\nNote: Any whitespace in the format string matches any whitespace in the input stream. This means that a tab (\\t) in the format string can match a single space character in the input stream.\nSyntax\nParameter Values\nPossible format values:\n%% - Returns a percent sign\n%b - Binary number\n%c - The character according to the ASCII value\n%d - Signed decimal number\n%e - Scientific notation (e.g. 1.2e+2)\n%u - Unsigned decimal number\n%f - Floating-point number (local settings aware)\n%F - Floating-point number (not local settings aware)\n%o - Octal number\n%s - String\n%x - Hexadecimal number (lowercase letters)\n%X - Hexadecimal number (uppercase letters)\nAdditional format values. These are placed between the % and the letter (example %.2f):\n+ (Forces both + and - in front of numbers. By default, only negative numbers are marked)\n' (Specifies what to use as padding. Default is space. Must be used together with the width specifier. Example: %'x20s (this uses \"x\" as padding)\n- (Left-justifies the variable value)\n[0-9] (Specifies the minimum width held of to the variable value)\n.[0-9] (Specifies the number of decimal digits or maximum string length)\nNote: If multiple additional format values are used, they must be in the same order as above.\nREMOVE ADS\nTechnical Details",
      "examples": [
        "fscanf(file, format, mixed)"
      ]
    },
    {
      "title": "PHP fseek() Function",
      "summary": "ExampleGet your own PHP Server\nRead first line from the open file, then move the file pointer back to the beginning of the file:\nDefinition and Usage\nThe fseek() function seeks in an open file.\nThis function moves the file pointer from its current position to a new position, forward or backward, specified by the number of bytes.\nTip: You can find the current position by using ftell()!\nSyntax\nParameter Values\nSEEK_SET - Set position equal to offset. Default\nSEEK_CUR - Set position to current location plus offset\nSEEK_END - Set position to EOF plus offset (to move to a position before EOF, the offset must be a negative value)\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$file = fopen(\"test.txt\",\"r\");\n// Read first line\necho fgets($file);\n// Move back to beginning of file\nfseek($file,0);\nfclose($file);\n?>",
        "fseek(file, offset, whence)"
      ]
    },
    {
      "title": "PHP fstat() Function",
      "summary": "ExampleGet your own PHP Server\nReturn information about the open file:\nDefinition and Usage\nThe fstat() function returns information about an open file.\nNote: The results from this function will differ from server to server. The array may contain the number index, the name index, or both.\nTip: This function is similar to stat(), except that with this function the file must be open.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\n[0] or [dev] - Device number\n[1] or [ino] - Inode number\n[2] or [mode] - Inode protection mode\n[3] or [nlink] - Number of links\n[4] or [uid] - User ID of owner\n[5] or [gid] - Group ID of owner\n[6] or [rdev] - Inode device type\n[7] or [size] - Size in bytes\n[8] or [atime] - Last access (as Unix timestamp)\n[9] or [mtime] - Last modified (as Unix timestamp)\n[10] or [ctime] - Last inode change (as Unix timestamp)\n[11] or [blksize] - Blocksize of filesystem IO (if supported)\n[12] or [blocks] - Number of blocks allocated",
      "examples": [
        "<?php\n$file = fopen(\"test.txt\",\"r\");\nprint_r(fstat($file));\nfclose($file);\n?>",
        "fstat(file)"
      ]
    },
    {
      "title": "PHP ftell() Function",
      "summary": "ExampleGet your own PHP Server\nReturn the current position of the read/write pointer in an open file:\nDefinition and Usage\nThe ftell() function returns the current position of the read/write pointer in an open file.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$file = fopen(\"test.txt\",\"r\");\n\n// Print current position\necho ftell($file);\n\n// Change current position\nfseek($file,\"15\");\n\n// Print current position again\necho \"<br>\" . ftell($file);\n\nfclose($file);\n?>",
        "ftell(file)"
      ]
    },
    {
      "title": "PHP ftruncate() Function",
      "summary": "ExampleGet your own PHP Server\nTruncates an open file to the specified length (100 bytes):\nThe output of the code above will be:\nDefinition and Usage\nThe ftruncate() function truncates an open file to the specified length.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// Check filesize\necho filesize(\"test.txt\");\necho \"<br>\";\n\n$file = fopen(\"test.txt\", \"a+\");\nftruncate($file,100);\nfclose($file);\n\n// Clear cache and check filesize again\nclearstatcache();\necho filesize(\"test.txt\");\n?>",
        "792\n100",
        "ftruncate(file, size)"
      ]
    },
    {
      "title": "PHP fwrite() Function",
      "summary": "ExampleGet your own PHP Server\nWrite to an open file:\nThe output of the code above will be:\nDefinition and Usage\nThe fwrite() writes to an open file.\nThe function will stop at the end of the file (EOF) or when it reaches the specified length, whichever comes first.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$file = fopen(\"test.txt\",\"w\");\necho fwrite($file,\"Hello World. Testing!\");\nfclose($file);\n?>",
        "21",
        "fwrite(file, string, length)"
      ]
    },
    {
      "title": "PHP glob() Function",
      "summary": "ExampleGet your own PHP Server\nReturn an array of filenames or directories that matches the specified pattern:\nThe output of the code above could be:\nDefinition and Usage\nThe glob() function returns an array of filenames or directories matching a specified pattern.\nSyntax\nParameter Values\nPossible values:\nGLOB_MARK - Adds a slash to each item returned\nGLOB_NOSORT - Return files as they appear in the directory (unsorted)\nGLOB_NOCHECK - Returns the search pattern if no match were found\nGLOB_NOESCAPE - Backslashes do not quote metacharacters\nGLOB_BRACE - Expands {a,b,c} to match 'a', 'b', or 'c'\nGLOB_ONLYDIR - Return only directories which match the pattern\nGLOB_ERR - (added in PHP 5.1) Stop on errors (errors are ignored by default)\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nReturn an array of filenames or directories that matches the specified pattern:\nThe output of the code above could be:",
      "examples": [
        "<?php\nprint_r(glob(\"*.txt\"));\n?>",
        "Array (\n[0] => target.txt\n[1] => source.txt\n[2] => test.txt\n[3] => test2.txt\n)",
        "glob(pattern, flags)",
        "<?php\nprint_r(glob(\"*.*\"));\n?>",
        "Array (\n[0] => contacts.csv\n[1] => default.php\n[2] => target.txt\n[3] => source.txt\n[4] => tem1.tmp\n[5] => test.htm\n[6] => test.ini\n[7] => test.php\n[8] => test.txt\n[9] => test2.txt\n)"
      ]
    },
    {
      "title": "PHP is_dir() Function",
      "summary": "ExampleGet your own PHP Server\nCheck whether the specified filename is a directory:\nThe output of the code above could be:\nDefinition and Usage\nThe is_dir() function checks whether the specified filename is a directory.\nNote: The result of this function is cached. Use clearstatcache() to clear the cache.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$file = \"images\";\nif(is_dir($file)) {\necho (\"$file is a directory\");\n} else {\necho (\"$file is not a directory\");\n}\n?>",
        "images is a directory",
        "is_dir(file)"
      ]
    },
    {
      "title": "PHP is_executable() Function",
      "summary": "ExampleGet your own PHP Server\nCheck whether the specified filename is executable:\nThe output of the code above could be:\nDefinition and Usage\nThe is_executable() function checks whether the specified filename is executable.\nNote: The result of this function is cached. Use clearstatcache() to clear the cache.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$file = \"setup.exe\";\nif(is_executable($file)) {\necho (\"$file is executable\");\n} else {\necho (\"$file is not executable\");\n}\n?>",
        "setup.exe is executable",
        "is_executable(file)"
      ]
    },
    {
      "title": "PHP is_file() Function",
      "summary": "ExampleGet your own PHP Server\nCheck whether the specified filename is a regular file:\nThe output of the code above could be:\nDefinition and Usage\nThe is_file() function checks whether the specified filename is a regular file.\nNote: The result of this function is cached. Use clearstatcache() to clear the cache.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$file = \"test.txt\";\nif(is_file($file)) {\necho (\"$file is a regular file\");\n} else {\necho (\"$file is not a regular file\");\n}\n?>",
        "test.txt is a regular file",
        "is_file(file)"
      ]
    },
    {
      "title": "PHP is_link() Function",
      "summary": "ExampleGet your own PHP Server\nCheck whether the specified filename is a symbolic link:\nThe output of the code above could be:\nDefinition and Usage\nThe is_link() function checks whether the specified filename is a symbolic link.\nNote: The result of this function is cached. Use clearstatcache() to clear the cache.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$link = \"images\";\nif(is_link($link)) {\necho (\"$link is a link\");\n} else {\necho (\"$link is not a link\");\n}\n?>",
        "images is not a link",
        "is_link(file)"
      ]
    },
    {
      "title": "PHP is_readable() Function",
      "summary": "ExampleGet your own PHP Server\nCheck whether the specified filename is readable:\nThe output of the code above could be:\nDefinition and Usage\nThe is_readable() function checks whether the specified filename is readable.\nNote: The result of this function is cached. Use clearstatcache() to clear the cache.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$file = \"test.txt\";\nif(is_readable($file)) {\necho (\"$file is readable\");\n} else {\necho (\"$file is not readable\")\n}\n?>",
        "test.txt is readable",
        "is_readable(file)"
      ]
    },
    {
      "title": "PHP is_uploaded_file() Function",
      "summary": "ExampleGet your own PHP Server\nCheck whether the specified filename is uploaded via HTTP POST:\nThe output of the code above could be:\nDefinition and Usage\nThe is_uploaded_file() function checks whether the specified file is uploaded via HTTP POST.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$file = \"test.txt\";\nif(is_uploaded_file($file)) {\necho (\"$file is uploaded via HTTP POST\");\n} else {\necho (\"$file is not uploaded via HTTP POST\");\n}\n?>",
        "test.txt is not uploaded via HTTP POST",
        "is_uploaded_file(file)"
      ]
    },
    {
      "title": "PHP is_writable() Function",
      "summary": "ExampleGet your own PHP Server\nCheck whether the specified filename is writable:\nThe output of the code above could be:\nDefinition and Usage\nThe is_writable() function checks whether the specified filename is writable.\nNote: The result of this function is cached. Use clearstatcache() to clear the cache.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$file = \"test.txt\";\nif(is_writable($file)) {\necho (\"$file is writable\");\n} else {\necho (\"$file is not writable\");\n}\n?>",
        "test.txt is writable",
        "is_writable(file)"
      ]
    },
    {
      "title": "PHP is_writeable() Function",
      "summary": "Definition and Usage\nThe is_writeable() function is an alias of the is_writable() function.",
      "examples": []
    },
    {
      "title": "PHP lchgrp() Function",
      "summary": "ExampleGet your own PHP Server\nChange the group ownership of a symbolic link:\nDefinition and Usage\nThe lchgrp() function changes the group ownership of a symbolic link.\nNote: This is not an HTML link, but a link in the filesystem.\nNote: This function does not work on Windows platforms.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$target = \"downloads.php\";\n$link = \"downloads\";\nsymlink($target, $link);\n\nlchgrp($link, 8)\n?>",
        "lchgrp(file, group)"
      ]
    },
    {
      "title": "PHP lchown() Function",
      "summary": "ExampleGet your own PHP Server\nChange the user ownership of a symbolic link:\nDefinition and Usage\nThe lchown() function changes the user ownership of a symbolic link.\nNote: This is not an HTML link, but a link in the filesystem.\nNote: This function does not work on Windows platforms.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$target = \"downloads.php\";\n$link = \"downloads\";\nsymlink($target, $link);\n\nlchown($link, 8)\n?>",
        "lchown(file, group)"
      ]
    },
    {
      "title": "PHP link() Function",
      "summary": "ExampleGet your own PHP Server\nCreate a hard link:\nDefinition and Usage\nThe link() function creates a hard link.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$target = \"text.txt\";\n$linkname = \"mylink\";\n\nlink($target, $linkname);\n?>",
        "link(target, link)"
      ]
    },
    {
      "title": "PHP linkinfo() Function",
      "summary": "ExampleGet your own PHP Server\nVerify if a link really exists:\nDefinition and Usage\nThe linkinfo() function returns information about a hard link, and is used to verify if a link really exists.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho linkinfo(/rubbish);\n?>",
        "linkinfo(path)"
      ]
    },
    {
      "title": "PHP lstat() Function",
      "summary": "ExampleGet your own PHP Server\nGet information about a file:\nDefinition and Usage\nThe lstat() function returns information about a file or symbolic link.\nNote: The results from this function will differ from server to server. The array may contain the number index, the name index, or both.\nNote: The result of this function is cached. Use clearstatcache() to clear the cache.\nTip: This function is similar to stat(), except that if the filename parameter is a symbolic link, the status of the symbolic link is returned.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nAn array with the following elements:\n[0] or [dev] - Device number\n[1] or [ino] - Inode number\n[2] or [mode] - Inode protection mode\n[3] or [nlink] - Number of links\n[4] or [uid] - User ID of owner\n[5] or [gid] - Group ID of owner\n[6] or [rdev] - Inode device type\n[7] or [size] - Size in bytes\n[8] or [atime] - Last access (as Unix timestamp)\n[9] or [mtime] - Last modified (as Unix timestamp)\n[10] or [ctime] - Last inode change (as Unix timestamp)\n[11] or [blksize] - Blocksize of filesystem IO (if supported)\n[12] or [blocks] - Number of blocks allocated\nIt returns an E_WARNING on failure",
      "examples": [
        "<?php\nprint_r(lstat(\"test.txt\"));\n?>",
        "lstat(filename)"
      ]
    },
    {
      "title": "PHP mkdir() Function",
      "summary": "ExampleGet your own PHP Server\nCreate a directory named \"test\":\nDefinition and Usage\nThe mkdir() function creates a directory specified by a pathname.\nSyntax\nParameter Values\nNote: The mode parameters is ignored on Windows platforms!\nThe mode parameter consists of four numbers:\nThe first number is always zero\nThe second number specifies permissions for the owner\nThe third number specifies permissions for the owner's user group\nThe fourth number specifies permissions for everybody else\nPossible values (to set multiple permissions, add up the following numbers):\n1 = execute permissions\n2 = write permissions\n4 = read permissions\nTechnical Details",
      "examples": [
        "<?php\nmkdir(\"test\");\n?>",
        "mkdir(path, mode, recursive, context)"
      ]
    },
    {
      "title": "PHP move_uploaded_file() Function",
      "summary": "Definition and Usage\nThe move_uploaded_file() function moves an uploaded file to a new destination.\nNote: This function only works on files uploaded via PHP's HTTP POST upload mechanism.\nNote: If the destination file already exists, it will be overwritten.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "move_uploaded_file(file, dest)"
      ]
    },
    {
      "title": "PHP parse_ini_file() Function",
      "summary": "ExampleGet your own PHP Server\nContents of \"test.ini\":\nPHP code:\nThe output of the code above will be:\nDefinition and Usage\nThe parse_ini_file() function parses a configuration (ini) file and returns the settings.\nTip: This function can be used to read in your own configuration files, and has nothing to do with the php.ini file.\nNote: The following reserved words must not be used as keys for ini files: null, yes, no, true, false, on, off, none. Furthermore, the following reserved characters must not be used in the key: {}|&~!()^\".\nSyntax\nParameter Values\nOptional. Can be one of the following values:\nINI_SCANNER_NORMAL (default)\nINI_SCANNER_RAW (means option values will not be parsed)\nINI_SCANNER_TYPED (means that boolean, null and integer types are preserved when possible. \"true\", \"on\", \"yes\" are converted to TRUE. \"false\", \"off\", \"no\", \"none\" are converted to FALSE. \"null\" is converted to NULL. Numeric strings are converted to integer type if possible)\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nContents of \"test.ini\":\nPHP code (with process_sections set to true):\nThe output of the code above will be:",
      "examples": [
        "[names]\nme = Robert\nyou = Peter\n\n[urls]\nfirst = \"http://www.example.com\"\nsecond = \"https://www.w3schools.com\"",
        "<?php\nprint_r(parse_ini_file(\"test.ini\"));\n?>",
        "Array (\n[me] => Robert\n[you] => Peter\n[first] => http://www.example.com\n[second] => https://www.w3schools.com\n)",
        "parse_ini_file(file, process_sections, scanner_mode)",
        "<?php\nprint_r(parse_ini_file(\"test.ini\",true));\n?>",
        "Array\n(\n[names] => Array\n(\n[me] => Robert\n[you] => Peter\n)\n[urls] => Array\n(\n[first] => http://www.example.com\n[second] => https://www.w3schools.com\n)\n)"
      ]
    },
    {
      "title": "PHP parse_ini_string() Function",
      "summary": "ExampleGet your own PHP Server\nParse an ini string:\nThe output of the code above will be:\nDefinition and Usage\nThe parse_ini_file() function parses a configuration (ini) string and returns the settings.\nTip: This function can be used to read in your own configuration files, and has nothing to do with the php.ini file.\nNote: The following reserved words must not be used as keys for ini files: null, yes, no, true, false, on, off, none. Furthermore, the following reserved characters must not be used in the key: {}|&~!()^\".\nSyntax\nParameter Values\nOptional. Can be one of the following values:\nINI_SCANNER_NORMAL (default)\nINI_SCANNER_RAW (means option values will not be parsed)\nINI_SCANNER_TYPED (means that boolean, null and integer types are preserved when possible. \"true\", \"on\", \"yes\" are converted to TRUE. \"false\", \"off\", \"no\", \"none\" are converted to FALSE. \"null\" is converted to NULL. Numeric strings are converted to integer type if possible)\nREMOVE ADS\nTechnical Details",
      "examples": [
        "$ini = '\n[names]\nme = \"Robert\"\nyou = \"Peter\"\n\n[urls]\nfirst = \"http://www.example.com\"\nsecond = \"https://www.w3schools.com\"\n';\n\nprint_r(parse_ini_string($ini));",
        "Array\n(\n[names] => Array\n(\n[me] => Robert\n[you] => Peter\n)\n[urls] => Array\n(\n[first] => http://www.example.com\n[second] => https://www.w3schools.com\n)\n)",
        "parse_ini_string(ini, process_sections, scanner_mode)"
      ]
    },
    {
      "title": "PHP pathinfo() Function",
      "summary": "ExampleGet your own PHP Server\nGet information about a file path:\nThe output of the code above will be:\nDefinition and Usage\nThe pathinfo() function returns information about a file path.\nSyntax\nParameter Values\nPossible values:\nPATHINFO_DIRNAME - return only dirname\nPATHINFO_BASENAME - return only basename\nPATHINFO_EXTENSION - return only extension\nPATHINFO_FILENAME - return only filename\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nGet information about a file path:\nThe output of the code above will be:",
      "examples": [
        "<?php\nprint_r(pathinfo(\"/testweb/test.txt\"));\n?>",
        "Array\n(\n[dirname] => /testweb\n[basename] => test.txt\n[extension] => txt\n)",
        "pathinfo(path, options)",
        "<?php\nprint_r(pathinfo(\"/testweb/test.txt\",PATHINFO_BASENAME));\n?>",
        "test.txt"
      ]
    },
    {
      "title": "PHP pclose() Function",
      "summary": "ExampleGet your own PHP Server\nOpen and close a pipe to the program specified in the command parameter:\nDefinition and Usage\nThe pclose() function closes a pipe opened by popen().\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$file = popen(\"/bin/ls\",\"r\");\n//some code to be executed\npclose($file);\n?>",
        "pclose(pipe)"
      ]
    },
    {
      "title": "PHP popen() Function",
      "summary": "ExampleGet your own PHP Server\nOpen a pipe to the program specified in the command parameter:\nDefinition and Usage\nThe popen() function opens a pipe to the program specified in the command parameter.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$file = popen(\"/bin/ls\",\"r\");\n//some code to be executed\npclose($file);\n?>",
        "popen(command, mode)"
      ]
    },
    {
      "title": "PHP readfile() Function",
      "summary": "ExampleGet your own PHP Server\nRead a file:\nDefinition and Usage\nThe readfile() function reads a file and writes it to the output buffer.\nTip: You can use a URL as a filename with this function if the fopen wrappers have been enabled in the php.ini file.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\necho readfile(\"test.txt\");\n?>",
        "readfile(file, include_path, context)"
      ]
    },
    {
      "title": "PHP readlink() Function",
      "summary": "ExampleGet your own PHP Server\nGet the target of a symbolic link:\nDefinition and Usage\nThe readlink() function returns the target of a symbolic link.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\necho readlink(\"/user/testlink\");\n?>",
        "readlink(linkpath)"
      ]
    },
    {
      "title": "PHP realpath() Function",
      "summary": "ExampleGet your own PHP Server\nReturns the absolute pathname:\nThe output of the code above will be:\nDefinition and Usage\nThe realpath() function returns the absolute pathname.\nThis function removes all symbolic links (like '/./', '/../' and extra '/') and returns the absolute pathname.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\necho realpath(\"test.txt\");\n?>",
        "C:\\Inetpub\\testweb\\test.txt",
        "realpath(path)"
      ]
    },
    {
      "title": "PHP realpath_cache_get() Function",
      "summary": "ExampleGet your own PHP Server\nReturn realpath cache entries:\nDefinition and Usage\nThe realpath_cache_get() function returns realpath cache entries.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\nvar_dump(realpath_cache_get());\n?>",
        "realpath_cache_get()"
      ]
    },
    {
      "title": "PHP realpath_cache_size() Function",
      "summary": "ExampleGet your own PHP Server\nReturn realpath cache size:\nDefinition and Usage\nThe realpath_cache_size() function returns realpath cache size.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\nvar_dump(realpath_cache_size());\n?>",
        "realpath_cache_size()"
      ]
    },
    {
      "title": "PHP rename() Function",
      "summary": "ExampleGet your own PHP Server\nRename a directory + a file:\nDefinition and Usage\nThe rename() function renames a file or directory.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\nrename(\"images\",\"pictures\");\nrename(\"/test/file1.txt\",\"/home/docs/my_file.txt\");\n?>",
        "rename(old, new, context)"
      ]
    },
    {
      "title": "PHP rewind() Function",
      "summary": "ExampleGet your own PHP Server\nRewind the position of the file pointer to the beginning of the file:\nDefinition and Usage\nThe rewind() function \"rewinds\" the position of the file pointer to the beginning of the file.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$file = fopen(\"test.txt\",\"r\");\n\n//Change position of file pointer\nfseek($file,\"15\");\n\n//Set file pointer to 0\nrewind($file);\n\nfclose($file);\n?>",
        "rewind(file)"
      ]
    },
    {
      "title": "PHP rmdir() Function",
      "summary": "ExampleGet your own PHP Server\nRemove \"images\" directory:\nDefinition and Usage\nThe rmdir() function removes an empty directory.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$path = \"images\";\nif(!rmdir($path)) {\necho (\"Could not remove $path\");\n}\n?>",
        "rmdir(dir, context)"
      ]
    },
    {
      "title": "PHP set_file_buffer() Function",
      "summary": "ExampleGet your own PHP Server\nCreate an unbuffered stream:\nDefinition and Usage\nThe set_file_buffer() function specifies the number of bytes to buffer on the given file.\nOutput using fwrite() is normally buffered at 8K. So, if two processes writes to the same file, each will write up to 8K before pausing, and allow the other to write. If buffer is 0, write operations are unbuffered (meaning that the first write process will be completed before allowing other processes to write).\nTip: This function is an alias of stream_set_write_buffer().\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$file = fopen(\"test.txt\",\"w\");\nif ($file) {\nset_file_buffer($file,0);\nfwrite($file,\"Hello World. Testing!\");\nfclose($file);\n}\n?>",
        "set_file_buffer(file, buffer)"
      ]
    },
    {
      "title": "PHP stat() Function",
      "summary": "ExampleGet your own PHP Server\nGet information about a file:\nDefinition and Usage\nThe stat() function returns information about a file.\nNote: The results from this function will differ from server to server. The array may contain the number index, the name index, or both.\nNote: The result of this function is cached. Use clearstatcache() to clear the cache.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nAn array with the following elements:\n[0] or [dev] - Device number\n[1] or [ino] - Inode number\n[2] or [mode] - Inode protection mode\n[3] or [nlink] - Number of links\n[4] or [uid] - User ID of owner\n[5] or [gid] - Group ID of owner\n[6] or [rdev] - Inode device type\n[7] or [size] - Size in bytes\n[8] or [atime] - Last access (as Unix timestamp)\n[9] or [mtime] - Last modified (as Unix timestamp)\n[10] or [ctime] - Last inode change (as Unix timestamp)\n[11] or [blksize] - Blocksize of filesystem IO (if supported)\n[12] or [blocks] - Number of blocks allocated\nIt returns an E_WARNING on failure",
      "examples": [
        "<?php\n$stat = stat(\"test.txt\");\necho \"Access time: \" .$stat[\"atime\"];\necho \"<br>Modification time: \" .$stat[\"mtime\"];\necho \"<br>Device number: \" .$stat[\"dev\"];\n?>",
        "stat(filename)"
      ]
    },
    {
      "title": "PHP symlink() Function",
      "summary": "ExampleGet your own PHP Server\nCreate a symbolic link:\nDefinition and Usage\nThe symlink() function creates a symbolic link from the existing target with the specified name link.\nNote: This is not an HTML link, but a link in the filesystem.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$target = \"downloads.php\";\n$link = \"downloads\";\nsymlink($target, $link);\necho readlink($link);\n?>",
        "symlink(target, link)"
      ]
    },
    {
      "title": "PHP tempnam() Function",
      "summary": "ExampleGet your own PHP Server\nCreate a temporary file with a unique name in the specified directory:\nThe output of the code above could be:\nDefinition and Usage\nThe tempnam() function creates a temporary file with a unique name in the specified directory.\nNote: If the specified directory does not exist, tempnam() may generate a file in the system's temporary directory.\nTip: See also the tmpfile() function.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\necho tempnam(\"C:\\inetpub\\testweb\",\"TMP0\");\n?>",
        "C:\\inetpub\\testweb\\TMP1.tmp",
        "tempnam(dir, prefix)"
      ]
    },
    {
      "title": "PHP tmpfile() Function",
      "summary": "ExampleGet your own PHP Server\nCreate a temporary file with a unique name in read-write (w+) mode:\nThe output of the code above will be:\nDefinition and Usage\nThe tmpfile() function creates a temporary file with a unique name in read-write (w+) mode.\nNote: The file is automatically removed when closed, with fclose() or when the script ends.\nTip: See also the tempnam() function.\nSyntax\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$temp = tmpfile();\n\nfwrite($temp, \"Testing, testing.\");\n//Rewind to the start of file\nrewind($temp);\n//Read 1k from file\necho fread($temp,1024);\n\n//This removes the file\nfclose($temp);\n?>",
        "Testing, testing.",
        "tmpfile()"
      ]
    },
    {
      "title": "PHP touch() Function",
      "summary": "ExampleGet your own PHP Server\nSets the access and modification time of the specified file:\nDefinition and Usage\nThe touch() function sets the access and modification time of the specified file.\nNote: If the specified file does not exist, it will be created.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\nfilename = \"test.txt\";\nif (touch($filename)) {\necho $filename . \" modification time has been changed to present time\";\n} else {\necho \"Sorry, could not change modification time of \" . $filename;\n}\n?>",
        "touch(filename, time, atime)"
      ]
    },
    {
      "title": "PHP umask() Function",
      "summary": "ExampleGet your own PHP Server\nReturn the current umask:\nDefinition and Usage\nThe umask() function changes the file permissions for files.\nThis function sets PHP's umask to mask & 0777 and returns the old umask.\nSyntax\nParameter Values\nThe mask parameter consists of four numbers:\nThe first number is always zero\nThe second number specifies permissions for the owner\nThe third number specifies permissions for the owner's user group\nThe fourth number specifies permissions for everybody else\nPossible values (to set multiple permissions, add up the following numbers):\n1 = execute permissions\n2 = write permissions\n4 = read permissions\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$file = \"test.txt\";\necho (umask());\n?>",
        "umask(mask)"
      ]
    },
    {
      "title": "PHP unlink() Function",
      "summary": "ExampleGet your own PHP Server\nDelete a file:\nDefinition and Usage\nThe unlink() function deletes a file.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$file = fopen(\"test.txt\",\"w\");\necho fwrite($file,\"Hello World. Testing!\");\nfclose($file);\n\nunlink(\"test.txt\");\n?>",
        "unlink(filename, context)"
      ]
    },
    {
      "title": "PHP Filter Functions",
      "summary": "PHP Filter Introduction\nPHP filters are used to validate and filter data coming from insecure sources, like user input.\nInstallation\nFrom PHP 5.2.0, the filter functions are enabled by default. There is no installation needed to use these functions.\nRuntime Configurations\nThe behavior of these functions is affected by settings in php.ini:\nPHP Filter Functions\nREMOVE ADS\nPHP Predefined Filter Constants",
      "examples": []
    },
    {
      "title": "PHP filter_has_var() Function",
      "summary": "â® PHP Filter Reference\nExampleGet your own PHP Server\nCheck if the input variable \"email\" is sent to the PHP page, through the \"get\" method:\nDefinition and Usage\nThe filter_has_var() function checks whether a variable of a specified input type exist.\nThis function checks the content received by the PHP page, so the variable must be sent to the page via e.g a querystring.\nSyntax\nParameter Values\nINPUT_GET\nINPUT_POST\nINPUT_COOKIE\nINPUT_SERVER\nINPUT_ENV\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\nif (!filter_has_var(INPUT_GET, \"email\")) {\necho(\"Email not found\");\n} else {\necho(\"Email found\");\n}\n?>",
        "filter_has_var(type, variable)"
      ]
    },
    {
      "title": "PHP filter_id() Function",
      "summary": "â® PHP Filter Reference\nExampleGet your own PHP Server\nReturn the filter ID of the VALIDATE_EMAIL filter:\nDefinition and Usage\nThe filter_id() function returns filter ID of a specified filter name.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nHere, the filter_id() and the filter_list() functions are used to list the ID and filter name of all filters:",
      "examples": [
        "<?php\necho(filter_id(\"validate_email\"));\n?>",
        "filter_id(filter_name)",
        "<table>\n<tr>\n<td>Filter Name</td>\n<td>Filter ID</td>\n</tr>\n<?php\nforeach (filter_list() as $id =>$filter) {\necho '<tr><td>' . $filter . '</td><td>' . filter_id($filter) . '</td></tr>';\n}\n?>\n</table>"
      ]
    },
    {
      "title": "PHP filter_input() Function",
      "summary": "â® PHP Filter Reference\nExampleGet your own PHP Server\nCheck if the external variable \"email\" is sent to the PHP page, through the \"get\" method, and also check if it is a valid email address:\nDefinition and Usage\nThe filter_input() function gets an external variable (e.g. from form input) and optionally filters it.\nThis function is used to validate variables from insecure sources, such as user input.\nSyntax\nParameter Values\nINPUT_GET\nINPUT_POST\nINPUT_COOKIE\nINPUT_SERVER\nINPUT_ENV\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\nif (!filter_input(INPUT_GET, \"email\", FILTER_VALIDATE_EMAIL)) {\necho(\"Email is not valid\");\n} else {\necho(\"Email is valid\");\n}\n?>",
        "filter_input(type, variable, filter, options)"
      ]
    },
    {
      "title": "PHP filter_input_array() Function",
      "summary": "â® PHP Filter Reference\nExampleGet your own PHP Server\nUse the filter_input_array() function to filter three POST variables. The received POST variables is name, age and e-mail:\nThe output of the code above will be:\nDefinition and Usage\nThe filter_input_array() function gets external variables (e.g. from form input) and optionally filters them.\nThis function is useful for retrieving/filtering many values instead of calling filter_input() many times.\nSyntax\nParameter Values\nINPUT_GET\nINPUT_POST\nINPUT_COOKIE\nINPUT_SERVER\nINPUT_ENV\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$filters = arrayÂ (\n\"name\" => array (\"filter\"=>FILTER_CALLBACK,\n\"flags\"=>FILTER_FORCE_ARRAY,\n\"options\"=>\"ucwords\"\n),\n\"age\"Â Â  => array ( \"filter\"=>FILTER_VALIDATE_INT,\n\"options\"=>array(\"min_range\"=>1,\"max_range\"=>120)\n),\n\"email\" => FILTER_VALIDATE_EMAIL\n);\nprint_r(filter_input_array(INPUT_POST, $filters));\n?>",
        "Array\n(\n[name] => Peter\n[age] => 41\n[email] => peter@example.com\n)",
        "filter_input_array(type, definition, add_empty)"
      ]
    },
    {
      "title": "PHP filter_list() Function",
      "summary": "â® PHP Filter Reference\nExampleGet your own PHP Server\nList all supported filter names:\nDefinition and Usage\nThe filter_list() function returns a list of all the supported filter names.\nSyntax\nTechnical Details\nMore Examples\nExample\nHere, the filter_id() and the filter_list() functions are used to list the ID and filter name of all filters:",
      "examples": [
        "<?php\nprint_r(filter_list());\n?>",
        "filter_list()",
        "<table>\n<tr>\n<td>Filter Name</td>\n<td>Filter ID</td>\n</tr>\n<?php\nforeach (filter_list() as $id =>$filter) {\necho '<tr><td>' . $filter . '</td><td>' . filter_id($filter) . '</td></tr>';\n}\n?>\n</table>"
      ]
    },
    {
      "title": "PHP filter_var() Function",
      "summary": "â® PHP Filter Reference\nExampleGet your own PHP Server\nCheck if $email is a valid email address:\nDefinition and Usage\nThe filter_var() function filters a variable with the specified filter.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nThe example below both sanitizes and validates an email address:\nExample\nFirst remove illegal characters from $email, then check if it is a valid email address:",
      "examples": [
        "<?php\n$email = \"john.doe@example.com\";\n\nif (filter_var($email, FILTER_VALIDATE_EMAIL)) {\necho(\"$email is a valid email address\");\n} else {\necho(\"$email is not a valid email address\");\n}\n?>",
        "filter_var(var, filtername, options)",
        "<?php\n$email = \"john.doe@example.com\";\n\n// Remove all illegal characters from email\n$email = filter_var($email, FILTER_SANITIZE_EMAIL);\n\n// Validate e-mail\nif (filter_var($email, FILTER_VALIDATE_EMAIL)) {\necho(\"$email is a valid email address\");\n} else {\necho(\"$email is not a valid email address\");\n}\n?>"
      ]
    },
    {
      "title": "PHP filter_var_array() Function",
      "summary": "â® PHP Filter Reference\nExampleGet your own PHP Server\nUse the filter_var_array() function to get multiple variables:\nThe output of the code should be:\nDefinition and Usage\nThe filter_var_array() function gets multiple variables and optionally filters them.\nThis function is useful for filtering many values without calling filter_var() many times.\nTip: Check the PHP Filter Reference for possible filters to use with this function.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$data = array(\n'fullname' => 'Peter Griffin',\n'age' => '41',\n'email' => 'peter@example.com',\n);\n\n$mydata = filter_var_array($data);\nvar_dump($mydata);\n\n?>",
        "array(3) {\n[\"fullname\"]=>\nstring(13) \"Peter Griffin\"\n[\"age\"]=>\nstring(2) \"41\"\n[\"email\"]=>\nstring(17) \"peter@example.com\"\n}",
        "filter_var_array(data_array, args, add_empty)"
      ]
    },
    {
      "title": "PHP FTP Functions",
      "summary": "PHP FTP Introduction\nThe FTP functions give client access to file servers through the File Transfer Protocol (FTP).\nThe FTP functions are used to open, login and close connections, as well as upload, download, rename, delete, and get information on files from file servers. Not all of the FTP functions will work with every server or return the same results. The FTP functions became available with PHP 3.\nIf you only wish to read from or write to a file on an FTP server, consider using the ftp:// wrapper with the Filesystem functions which provide a simpler and more intuitive interface.\nInstallation\nFor these functions to work, you have to compile PHP with --enable-ftp.\nThe Windows version of PHP has built-in support for this extension.\nPHP FTP Functions\nPHP Predefined FTP Constants",
      "examples": []
    },
    {
      "title": "PHP ftp_alloc() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nAllocate space for a file and upload the file to the FTP server:\nDefinition and Usage\nThe ftp_alloc() function allocates space for a file to be uploaded to the FTP server.\nNote: Many FTP servers do not support this command!\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n$file = \"/test/myfile\";\n\n// allocate space\nif (ftp_alloc($ftp_conn, filesize($file), $result))\n{\necho \"Space allocated on server. Sending $file.\";\nftp_put($ftp_conn, \"/files/myfile\", $file, FTP_BINARY);\n}\nelse\n{\necho \"Error! Server said: $result\";\n}\n\n// close connection\nftp_close($ftp_conn);\n?>",
        "ftp_alloc(ftp_conn, filesize, result);"
      ]
    },
    {
      "title": "PHP ftp_cdup() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nOutput current directory name, then change to parent directory:\nDefinition and Usage\nThe ftp_cdup() function changes to the parent directory on the FTP server.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n// change the current directory to php\nftp_chdir($ftp_conn, \"php\");\n\n// change to the parent directory\nif (ftp_cdup($ftp_conn))\n{\necho \"Successfully changed to parent directory.\";\n}\nelse\n{\necho \"cdup failed.\";\n}\n\n// output current directory name\necho ftp_pwd($ftp_conn);\n\n// close connection\nftp_close($ftp_conn);\n?>",
        "ftp_cdup(ftp_conn);"
      ]
    },
    {
      "title": "PHP ftp_chdir() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nChange directory, then output directory name:\nDefinition and Usage\nThe ftp_chdir() function changes the current directory on the FTP server.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n// change the current directory to php\nftp_chdir($ftp_conn, \"php\");\n\n// output current directory name (/php)\necho ftp_pwd($ftp_conn);\n\n// close connection\nftp_close($ftp_conn);\n?>",
        "ftp_chdir(ftp_conn, directory);"
      ]
    },
    {
      "title": "PHP ftp_chmod() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nSet file permissions:\nDefinition and Usage\nThe ftp_chmod() function sets permissions on the specified file via FTP.\nSyntax\nParameter Values\nThis parameter consists of four numbers:\nThe first number is always zero\nThe second number specifies permissions for the OWNER\nThe third number specifies permissions for the OWNER's USER GROUP\nThe fourth number specifies permissions for EVERYBODY ELSE\nPossible values (to set multiple permissions, add up the following numbers):\n1 = execute permissions\n2 = write permissions\n4 = read permissions\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n$file = \"php/test.txt\";\n\n// Try to set read and write for owner and read for everybody else\nif (ftp_chmod($ftp_conn, 0644, $file) !== false)\n{\necho \"Successfully chmoded $file to 644.\";\n}\nelse\n{\necho \"chmod failed.\";\n}\n\n// close connection\nftp_close($ftp_conn);\n?>",
        "ftp_chmod(ftp_conn, mode, file);"
      ]
    },
    {
      "title": "PHP ftp_close() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nConnect, login, and close an FTP connection:\nDefinition and Usage\nThe ftp_close() function closes an FTP connection.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n// then do something...\n\n// close connection\nftp_close($ftp_conn);\n?>",
        "ftp_close(ftp_conn);"
      ]
    },
    {
      "title": "PHP ftp_connect() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nConnect, login, and close an FTP connection:\nDefinition and Usage\nThe ftp_connect() function opens an FTP connection to the specified host.\nWhen the connection is open, you can run FTP functions against the server.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n// then do something...\n\n// close connection\nftp_close($ftp_conn);\n?>",
        "ftp_connect(host, port, timeout);"
      ]
    },
    {
      "title": "PHP ftp_delete() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nDelete a file on the FTP server:\nDefinition and Usage\nThe ftp_delete() function deletes a file on the FTP server.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n$file = \"php/test.txt\";\n\n// try to delete file\nif (ftp_delete($ftp_conn, $file))\n{\necho \"$file deleted\";\n}\nelse\n{\necho \"Could not delete $file\";\n}\n\n// close connection\nftp_close($ftp_conn);\n?>",
        "ftp_delete(ftp_conn, file);"
      ]
    },
    {
      "title": "PHP ftp_exec() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nRequest for execution of a command on the FTP server:\nDefinition and Usage\nThe ftp_exec() function requests for execution of a command on the FTP server.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n$command = \"ls-al > somefile.txt\";\n\n// execute command\nif (ftp_exec($ftp_conn,$command))\n{\necho \"$command executed successfully.\";\n}\nelse\n{\necho \"Execution of $command failed.\";\n}\n\n// close connection\nftp_close($ftp_conn);\n?>",
        "ftp_exec(ftp_conn, command);"
      ]
    },
    {
      "title": "PHP ftp_fget() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nDownload a file from the FTP server, and save it to an open local file:\nDefinition and Usage\nThe ftp_fget() function gets (downloads) a file from the FTP server, and saves it into an open local file.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n$server_file = \"somefile.txt\";\n\n// open local file to write to\n$local_file = \"local.txt\";\n$fp = fopen($local_file,\"w\");\n\n// download server file and save it to open local file\nif (ftp_fget($ftp_conn, $fp, $server_file, FTP_ASCII, 0))\n{\necho \"Successfully written to $local_file.\";\n}\nelse\n{\necho \"Error downloading $server_file.\";\n}\n\n// close connection and file handler\nftp_close($ftp_conn);\nfclose($fp);\n?>",
        "ftp_fget(ftp_conn, open_file, server_file, mode, startpos);"
      ]
    },
    {
      "title": "PHP ftp_fput() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nOpen local file, and upload it to a file on the FTP server:\nDefinition and Usage\nThe ftp_fput() function uploads from an open file and saves it to a file on the FTP server.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n// open file for reading\n$file = \"test.txt\";\n$fp = fopen($file,\"r\");\n\n// upload file\nif (ftp_fput($ftp_conn, \"somefile.txt\", $fp, FTP_ASCII))\n{\necho \"Successfully uploaded $file.\";\n}\nelse\n{\necho \"Error uploading $file.\";\n}\n\n// close this connection and file handler\nftp_close($ftp_conn);\nfclose($fp);\n?>",
        "ftp_fput(ftp_conn, remote_file, open_file, mode, startpos);"
      ]
    },
    {
      "title": "PHP ftp_get() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nDownload a file from the FTP server, and save it into a local file:\nDefinition and Usage\nThe ftp_get() function gets (downloads) a file from the FTP server, and saves it into a local file.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n$local_file = \"local.zip\";\n$server_file = \"server.zip\";\n\n// download server file\nif (ftp_get($ftp_conn, $local_file, $server_file, FTP_ASCII))\n{\necho \"Successfully written to $local_file.\";\n}\nelse\n{\necho \"Error downloading $server_file.\";\n}\n\n// close connection\nftp_close($ftp_conn);\n?>",
        "ftp_get(ftp_conn, local_file, server_file, mode, startpos);"
      ]
    },
    {
      "title": "PHP ftp_get_option() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nReturn the timeout used for network operations:\nDefinition and Usage\nThe ftp_get_option() function returns runtime options of the current FTP connection.\nSyntax\nParameter Values\nFTP_TIMEOUT_SEC - Returns the timeout used for network operations\nFTP_AUTOSEEK - Returns TRUE if this option is on, FALSE otherwise\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n// could return 90\necho ftp_get_option($ftp_conn,FTP_TIMEOUT_SEC);\n\n// close connection\nftp_close($ftp_conn);\n?>",
        "ftp_get_option(ftp_conn, option);"
      ]
    },
    {
      "title": "PHP ftp_login() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nConnect, login, and close an FTP connection:\nDefinition and Usage\nThe ftp_login() function logs in to the specified FTP connection.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// connect to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n\n// login\nif (@ftp_login($ftp_conn, $ftp_username, $ftp_userpass))\n{\necho \"Connection established.\";\n}\nelse\n{\necho \"Couldn't establish a connection.\";\n}\n\n// do something...\n\n// close connection\nftp_close($ftp_conn);\n?>",
        "ftp_login(ftp_conn, username, password);"
      ]
    },
    {
      "title": "PHP ftp_mdtm() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nGet last modified time for a file on the FTP server:\nDefinition and Usage\nThe ftp_mdtm() function returns when the specified file was last modified.\nNote: Not all servers support this function, and this function does not work with directories.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n$file = \"somefile.txt\";\n\n// get the last modified time\n$lastchanged = ftp_mdtm($ftp_conn, $file);\nif ($lastchanged != -1)\n{\necho \"$file was last modified on : \" . date(\"F d Y H:i:s.\",$lastchanged);\n}\nelse\n{\necho \"Could not get last modified\";\n}\n\n// close connection\nftp_close($ftp_conn);\n?>",
        "ftp_mdtm(ftp_conn, file);"
      ]
    },
    {
      "title": "PHP ftp_mkdir() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nCreate a new directory on the FTP server:\nDefinition and Usage\nThe ftp_mkdir() function creates a new directory on the FTP server.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n$dir = \"images\";\n\n// try to create directory $dir\nif (ftp_mkdir($ftp_conn, $dir))\n{\necho \"Successfully created $dir\";\n}\nelse\n{\necho \"Error while creating $dir\";\n}\n\n// close connection\nftp_close($ftp_conn);\n?>",
        "ftp_mkdir(ftp_conn, dir);"
      ]
    },
    {
      "title": "PHP ftp_mlsd() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nReturns the list of files from the \"images\" directory:\nDefinition and Usage\nThe ftp_mlsd() function returns the list of files in the specified directory.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n$dir = \"/images\";\n$dirlist = ftp_mlsd($ftp_conn, $dir);\n\n// output directory list\necho($dirlist);\n\n// close connection\nftp_close($ftp_conn);\n?>",
        "ftp_mlsd(ftp_conn, dir);"
      ]
    },
    {
      "title": "PHP ftp_nb_continue() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nDownload a file from the server, continue downloading (non-blocking) while doing something else:\nDefinition and Usage\nThe ftp_nb_continue() function continues to receive/send a file to the FTP server.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nFTP_FAILED (send/receive failed)\nFTP_FINISHED (send/receive completed)\nFTP_MOREDATA (send/receive in progress)",
      "examples": [
        "<?php\n// initiate download\n$d = ftp_nb_get($ftp_conn, \"local.txt\", \"server.txt\", FTP_BINARY)\n\nwhile ($d == FTP_MOREDATA)\n{\n// do whatever you want\n// continue downloading\n$d = ftp_nb_continue($ftp_conn);\n}\n\nif ($d != FTP_FINISHED)\n{\necho \"Error downloading file.\";\nexit(1);\n}\n\n?>",
        "ftp_nb_continue(ftp_conn);"
      ]
    },
    {
      "title": "PHP ftp_nb_fget() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nDownload a file from the FTP server, and save it to an open local file (non-blocking):\nDefinition and Usage\nThe ftp_nb_fget() function gets (downloads) a file from the FTP server, and saves it into an open local file (non-blocking).\nTip: This function (as opposite to ftp_fget()) retrieves the file asynchronously, so you can perform other operations while the file is being downloaded.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nFTP_FAILED (send/receive failed)\nFTP_FINISHED (send/receive completed)\nFTP_MOREDATA (send/receive in progress)",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n$server_file = \"somefile.txt\";\n\n// open local file to write to\n$local_file = \"local.txt\";\n$fp = fopen($local_file,\"w\");\n\n\n// initiate download\n$d = ftp_nb_fget($ftp_conn, $fp, $server_file, FTP_BINARY)\n\nwhile ($d == FTP_MOREDATA)\n{\n// do whatever you want\n// continue downloading\n$d = ftp_nb_continue($ftp_conn);\n}\n\nif ($d != FTP_FINISHED)\n{\necho \"Error downloading $server_file\";\nexit(1);\n}\n\n// close connection and file handler\nftp_close($ftp_conn);\nfclose($fp);\n?>",
        "ftp_nb_fget(ftp_conn, open_file, server_file, mode, startpos);"
      ]
    },
    {
      "title": "PHP ftp_nb_fput() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nOpen local file, and upload it (non-blocking) to a file on the FTP server:\nDefinition and Usage\nThe ftp_nb_fput() function uploads an open local file to the FTP server (non-blocking).\nTip: This function (as opposite to ftp_fput()) retrieves the file asynchronously, so you can perform other operations while the file is being downloaded.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nFTP_FAILED (send/receive failed)\nFTP_FINISHED (send/receive completed)\nFTP_MOREDATA (send/receive in progress)",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n$server_file = \"serverfile.txt\";\n\n// open local file\n$local_file = \"localfile.txt\";\n$fp = fopen($local_file,\"r\");\n\n// initiate upload\n$d = ftp_nb_fput($ftp_conn, $server_file, $fp, FTP_BINARY)\n\nwhile ($d == FTP_MOREDATA)\n{\n// do whatever you want\n// continue uploading\n$d = ftp_nb_continue($ftp_conn);\n}\n\nif ($d != FTP_FINISHED)\n{\necho \"Error uploading $local_file\";\nexit(1);\n}\n\n// close connection\nftp_close($ftp_conn);\n?>",
        "ftp_nb_fput(ftp_conn, remote_file, open_file, mode, startpos);"
      ]
    },
    {
      "title": "PHP ftp_nb_get() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nDownload a file from the FTP server, and save it into a local file (non-blocking):\nDefinition and Usage\nThe ftp_nb_get() function gets (downloads) a file from the FTP server, and saves it into a local file (non-blocking).\nTip: This function (as opposite to ftp_get()) retrieves the file asynchronously, so you can perform other operations while the file is being downloaded.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nFTP_FAILED (send/receive failed)\nFTP_FINISHED (send/receive completed)\nFTP_MOREDATA (send/receive in progress)",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n$local_file = \"local.zip\";\n$server_file = \"server.zip\";\n\n// initiate download\n$d = ftp_nb_get($ftp_conn, $local_file, $server_file, FTP_ASCII)\n\nwhile ($d == FTP_MOREDATA)\n{\n// do whatever you want\n// continue downloading\n$d = ftp_nb_continue($ftp_conn);\n}\n\nif ($d != FTP_FINISHED)\n{\necho \"Error downloading $server_file\";\nexit(1);\n}\n\n// close connection\nftp_close($ftp_conn);\n?>",
        "ftp_nb_get(ftp_conn, local_file, server_file, mode, startpos);"
      ]
    },
    {
      "title": "PHP ftp_nb_put() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nUpload local file (non-blocking) to a file on the FTP server:\nDefinition and Usage\nThe ftp_nb_put() function uploads a file to the FTP server (non-blocking).\nTip: This function (as opposite to ftp_put()) retrieves the file asynchronously, so you can perform other operations while the file is being downloaded.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nFTP_FAILED (send/receive failed)\nFTP_FINISHED (send/receive completed)\nFTP_MOREDATA (send/receive in progress)",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n$local_file = \"localfile.txt\";\n$server_file = \"serverfile.txt\";\n\n// initiate upload\n$d = ftp_nb_put($ftp_conn, $server_file, $local_file, FTP_BINARY)\n\nwhile ($d == FTP_MOREDATA)\n{\n// do whatever you want\n// continue uploading\n$d = ftp_nb_continue($ftp_conn);\n}\n\nif ($d != FTP_FINISHED)\n{\necho \"Error uploading $local_file\";\nexit(1);\n}\n\n// close connection\nftp_close($ftp_conn);\n?>",
        "ftp_nb_put(ftp_conn, remote_file, local_file, mode, startpos);"
      ]
    },
    {
      "title": "PHP ftp_nlist() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nList files in current directory:\nDefinition and Usage\nThe ftp_nlist() function returns a list of files in the specified directory on the FTP server.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n// get file list of current directory\n$file_list = ftp_nlist($ftp_conn, \".\");\nvar_dump($file_list);\n\n// close connection\nftp_close($ftp_conn);\n?>",
        "ftp_nlist(ftp_conn, dir);"
      ]
    },
    {
      "title": "PHP ftp_pasv() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nTurn passive mode on and upload a file to the FTP server:\nDefinition and Usage\nThe ftp_pasv() function turns passive mode on or off.\nIn passive mode, data connections are initiated by the client, not the server. This is useful if the client is behind a firewall.\nSyntax\nParameter Values\nTRUE (passive mode on)\nFALSE (passive mode off)\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n// turn passive mode on\nftp_pasv($ftp_conn, true);\n\n$file = \"localfile.txt\";\n\n// upload file\nif (ftp_put($ftp_conn, \"serverfile.txt\", $file, FTP_ASCII))\n{\necho \"Successfully uploaded $file.\";\n}\nelse\n{\necho \"Error uploading $file.\";\n}\n\n// close connection\nftp_close($ftp_conn);\n?>",
        "ftp_pasv(ftp_conn, pasv);"
      ]
    },
    {
      "title": "PHP ftp_put() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nUpload local file to a file on the FTP server:\nDefinition and Usage\nThe ftp_put() function uploads a file to the FTP server.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n$file = \"localfile.txt\";\n\n// upload file\nif (ftp_put($ftp_conn, \"serverfile.txt\", $file, FTP_ASCII))\n{\necho \"Successfully uploaded $file.\";\n}\nelse\n{\necho \"Error uploading $file.\";\n}\n\n// close connection\nftp_close($ftp_conn);\n?>",
        "ftp_put(ftp_conn, remote_file, local_file, mode, startpos);"
      ]
    },
    {
      "title": "PHP ftp_pwd() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nChange directory, then output directory name:\nDefinition and Usage\nThe ftp_pwd() function returns the current directory name.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n// change the current directory to php\nftp_chdir($ftp_conn, \"php\");\n\n// output current directory name (/php)\necho ftp_pwd($ftp_conn);\n\n// close connection\nftp_close($ftp_conn);\n?>",
        "ftp_pwd(ftp_conn);"
      ]
    },
    {
      "title": "PHP ftp_quit() Function",
      "summary": "â® PHP FTP Reference\nDefinition and Usage\nThe ftp_quit() function is an alias of ftp_close().",
      "examples": []
    },
    {
      "title": "PHP ftp_raw() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nConnect to FTP server and execute commands:\nDefinition and Usage\nThe ftp_raw() function sends a raw command to the FTP server.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// connect to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n\n// the two lines below is the same as: ftp_login($ftp_conn,\"john\",\"secretpassword\");\nftp_raw($ftp_conn, \"USER john\");\nftp_raw($ftp_conn, \"PASS secretpassword\");\n\n?>",
        "ftp_raw(ftp_conn, command);"
      ]
    },
    {
      "title": "PHP ftp_rawlist() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nGet list of files with file information:\nThe output could look something like this:\nDefinition and Usage\nThe ftp_rawlist() function returns a list of files with file information (from a specified directory on the FTP server).\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n// get the file list for /\n$filelist = ftp_rawlist($ftp_conn, \"/\");\n\n// close connection\nftp_close($ftp_conn);\n\n// output $filelist\nvar_dump($filelist);\n?>",
        "array(3)\n{\n[0] => string(57) \"drw-rw-rw- 1 user group 0 Jan 03 08:33 images\"\n[1] => string(62) \"-rw-rw-rw- 1 user group 160 Feb 16 13:54 php\"\n[2] => string(75) \"-rw-rw-rw- 1 user group 20 Feb 14 12:22 test\"\n}",
        "ftp_rawlist(ftp_conn, dir, recursive);"
      ]
    },
    {
      "title": "PHP ftp_rename() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nRename a file on the FTP server:\nDefinition and Usage\nThe ftp_rename() function renames a file or directory on the FTP server.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n$old_file = \"oldfile.txt\";\n$new_file = \"newfile.txt\";\n\n// try to rename $old_file to $new_file\nif (ftp_rename($ftp_conn, $old_file, $new_file))\n{\necho \"Renamed $old_file to $new_file\";\n}\nelse\n{\necho \"Problem renaming $old_file to $new_file\";\n}\n\n// close connection\nftp_close($ftp_conn);\n?>",
        "ftp_rename(ftp_conn, oldname, newname);"
      ]
    },
    {
      "title": "PHP ftp_rmdir() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nDelete a directory on FTP server:\nDefinition and Usage\nThe ftp_rmdir() function deletes a directory on the FTP server.\nNote: A directory must be empty before it can be deleted!\nTip: Use the ftp_mkdir() function to create a new directory.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n$dir = \"php/\";\n\n// try to delete $dir\nif (ftp_rmdir($ftp_conn, $dir))\n{\necho \"Directory $dir deleted\";\n}\nelse\n{\necho \"Problem deleting $dir\";\n}\n\n// close connection\nftp_close($ftp_conn);\n?>",
        "ftp_rmdir(ftp_conn, dir);"
      ]
    },
    {
      "title": "PHP ftp_set_option() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nSet timeout for network operations:\nDefinition and Usage\nThe ftp_set_option() function sets runtime options of the current FTP connection.\nSyntax\nParameter Values\nFTP_TIMEOUT_SEC\nFTP_AUTOSEEK\nFTP_USEPASVADDRESS\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n// set network operation timeout to 120 seconds\necho ftp_set_option($ftp_conn,FTP_TIMEOUT_SEC,120);\n\n// close connection\nftp_close($ftp_conn);\n?>",
        "ftp_set_option(ftp_conn, option, value);"
      ]
    },
    {
      "title": "PHP ftp_site() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nSend an FTP SITE command:\nDefinition and Usage\nThe ftp_site() function sends a SITE command to the FTP server.\nNote: SITE commands vary from server to server. They are useful for handling OS specific features such as file permissions and group membership.\nTip: To see what SITE commands are available, send the REMOTEHELP command using the ftp_raw() function.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n// try to send SITE command\nif (ftp_site($ftp_conn, \"chmod 777 serverfile.txt\"))\n{\necho \"Command executed successfully\";\n}\nelse\n{\necho \"Command failed\";\n}\n\n// close connection\nftp_close($ftp_conn);\n?>",
        "ftp_site(ftp_conn, command);"
      ]
    },
    {
      "title": "PHP ftp_size() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nGet size of a file on the FTP server:\nDefinition and Usage\nThe ftp_size() function returns the size of a specified file on the FTP server.\nNote: Not all FTP servers support this function!\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n$file = \"serverfile.txt\";\n\n// get size of $file\n$fsize = ftp_size($ftp_conn, $file);\nif ($fsize != -1)\n{\necho \"$file is $fsize bytes.\";\n}\nelse\n{\necho \"Error getting file size.\";\n}\n\n// close connection\nftp_close($ftp_conn);\n?>",
        "ftp_size(ftp_conn, file);"
      ]
    },
    {
      "title": "PHP ftp_ssl_connect() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nOpen a secure SSL-FTP connection:\nDefinition and Usage\nThe ftp_ssl_connect() function opens a secure SSL-FTP connection.\nWhen the connection is open, you can run FTP functions against the server.\nNote: This function is only available if both the ftp module and the OpenSSL support is built statically into PHP.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// set up basic SSL connection\n$ftp_server = \"123.123.123.123\";\n$ftp_conn = ftp_ssl_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n\n// login\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n// then do something...\n\n// close SSL connection\nftp_close($ftp_conn);\n?>",
        "ftp_ssl_connect(host, port, timeout);"
      ]
    },
    {
      "title": "PHP ftp_systype() Function",
      "summary": "â® PHP FTP Reference\nExampleGet your own PHP Server\nGet the system type of the FTP server:\nThe output could look something like this:\nDefinition and Usage\nThe ftp_systype() function returns the system type identifier of the FTP server.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// connect and login to FTP server\n$ftp_server = \"ftp.example.com\";\n$ftp_conn = ftp_connect($ftp_server) or die(\"Could not connect to $ftp_server\");\n$login = ftp_login($ftp_conn, $ftp_username, $ftp_userpass);\n\n// get system type\nif ($type = ftp_systype($ftp_conn))\n{\necho \"System type is: $type\";\n}\nelse\n{\necho \"Could not get system type.\";\n}\n\n// close connection\nftp_close($ftp_conn);\n?>",
        "System type is: UNIX",
        "ftp_systype(ftp_conn);"
      ]
    },
    {
      "title": "PHP JSON Functions",
      "summary": "PHP JSON Introduction\nThe JSON extension implements the JavaScript Object Notation data-interchange format.\nIn PHP 5, the decoding is handled by a parser based on the JSON_checker by Douglas Crockford.\nPHP 7 has a new and improved parser specifically written for PHP and licensed under the PHP license.\nInstallation\nFrom PHP 5.2.0, the JSON functions are enabled by default. There is no installation needed to use these functions.\nPHP JSON Functions\nPHP Predefined JSON Constants",
      "examples": []
    },
    {
      "title": "PHP json_decode() Function",
      "summary": "â® PHP JSON Reference\nExampleGet your own PHP Server\nStore JSON data in a PHP variable, and then decode it into a PHP object:\nDefinition and Usage\nThe json_decode() function is used to decode or convert a JSON object to a PHP object.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nStore JSON data in a PHP variable, and then decode it into a PHP associative array:\nExample\nHow to access the values from the PHP object:\nExample\nHow to access the values from the PHP associative array:",
      "examples": [
        "$jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}'; var_dump(json_decode($jsonobj));",
        "$jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}'; var_dump(json_decode($jsonobj, true));",
        "$jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}'; $obj = json_decode($jsonobj); echo $obj->Peter; echo $obj->Ben; echo $obj->Joe;",
        "$jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}'; $arr = json_decode($jsonobj, true); echo $arr[\"Peter\"]; echo $arr[\"Ben\"]; echo $arr[\"Joe\"];",
        "json_decode(string, assoc, depth, options)",
        "json_decode()"
      ]
    },
    {
      "title": "PHP json_encode() Function",
      "summary": "â® PHP JSON Reference\nExampleGet your own PHP Server\nHow to encode an associative array into a JSON object:\nDefinition and Usage\nThe json_encode() function is used to encode a value to JSON format.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nHow to encode an indexed array into a JSON array:",
      "examples": [
        "$age = array(\"Peter\"=>35, \"Ben\"=>37, \"Joe\"=>43); echo json_encode($age);",
        "$cars = array(\"Volvo\", \"BMW\", \"Toyota\"); echo json_encode($cars);",
        "json_encode(value, options, depth)",
        "json_encode()"
      ]
    },
    {
      "title": "PHP Keywords",
      "summary": "PHP Keywords\nPHP has a set of keywords that are reserved words which cannot be used as function names, class names or method names. Prior to PHP 7, these keywords could not be used as class property names either:",
      "examples": []
    },
    {
      "title": "PHP abstract Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nCreate an abstract class:\nDefinition and Usage\nThe abstract keyword declares a class as abstract.\nAbstract classes cannot be instantiated but they can be extended.\nRelated Pages\nRead more about abstract classes in our PHP OOP - Abstract Classes Tutorial.",
      "examples": [
        "<?php\nabstract class MyClass {\npublic function hello() {\necho \"Hello World!\";\n}\n}\n\nclass AnotherClass extends MyClass {\n\n}\n\n$item = new AnotherClass();\n$item->hello();\n?>",
        "abstract"
      ]
    },
    {
      "title": "PHP and Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nReturn true if both statements are true:\nDefinition and Usage\nThe and keyword is a logical operator.\nLogical operators are used to combine conditional statements.\nThe return value will only be true if both statements return true, otherwise it will return false.\nTip: The difference between and and && is that and has very low precedence, meaning that most other operations get evaluated first.\nRelated Pages\nRead more about operators in our PHP Operators Tutorial.",
      "examples": [
        "<?php\nif (5 > 3 and 5 < 10) {\necho \"true\";\n} else {\necho \"false\";\n}\n?>",
        "true",
        "and",
        "false",
        "&&"
      ]
    },
    {
      "title": "PHP as Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nUsing as in a foreach loop:\nDefinition and Usage\nThe as keyword is used by the foreach loop to establish which variables contain the key and value of an element.\nThe as keyword can also be used by namespaces and traits to give them an alias.\nRelated Pages\nThe foreach keyword.\nThe trait keyword.\nThe use keyword.\nRead more about loops in our PHP Loops Tutorial.\nRead more about traits in our PHP OOP - Traits Tutorial.\nMore Examples\nExample\nUsing as in a foreach loop to traverse an associative array:\nExample\nUsing as to give an alias to the method of a trait:\nExample\nUsing as to give an alias to a namespace:",
      "examples": [
        "<?php\n$list = [1, 2, 3, 4];\nforeach($list as $item) {\necho $item;\necho \"<br>\";\n}\n?>",
        "<?php\n$people = [\n\"Peter\" => \"35\",\n\"Ben\" => \"37\",\n\"Joe\" => \"43\"\n];\n\nforeach($people as $person => $age) {\necho \"$person is $age years old\";\necho \"<br>\";\n}\n?>",
        "<?php\ntrait message1 {\npublic function msg1() {\necho \"OOP is fun! \";\n}\n}\n\nclass Welcome {\nuse message1 {\nmessage1::msg1 as msg;\n}\n}\n\n$obj = new Welcome();\n$obj->msg();\n?>",
        "<?php\nnamespace Html;\nclass Table {\npublic $title = \"\";\npublic $numRows = 0;\npublic function message() {\necho \"<p>Table '{$this->title}' has {$this->numRows} rows.</p>\";\n}\n}\n\nuse \\Html as H;\n\n$table = new H\\Table();\n$table->title = \"My table\";\n$table->numRows = 5;\n$table->message();\n?>",
        "as",
        "foreach",
        "trait",
        "use",
        "namespace"
      ]
    },
    {
      "title": "PHP break Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nBreak out of a loop:\nDefinition and Usage\nThe break keyword is used to break out of for loops, foreach loops, while loops, do..while loops and switch conditions.\nIn the switch block, all of the code following a case statement will be executed until a break keyword is found. This could also be code belonging to another case.\nRelated Pages\nThe switch keyword.\nUse the continue keyword to end the current iteration in a loop, but continue with the next.\nRead more about break and continue in our PHP Break and Continue Tutorial.\nRead more about loops in our PHP Loops Tutorial.\nRead more about switch conditionals in our PHP switch Statement Tutorial.\nMore Examples\nExample\nUsing break in a switch statement:",
      "examples": [
        "<?php\n$cars = [\"Ford\", \"Volvo\", \"BMW\"];\nforeach($cars as $car) {\necho $car;\necho \"<br>\";\nif($car == \"Volvo\") {\nbreak;\n}\n}\n?>",
        "<?php\n$favcolor = \"red\";\n\nswitch ($favcolor) {\ncase \"red\":\necho \"Your favorite color is red!\";\nbreak;\ncase \"blue\":\necho \"Your favorite color is blue!\";\nbreak;\ncase \"green\":\necho \"Your favorite color is green!\";\nbreak;\ndefault:\necho \"Your favorite color is neither red, blue, nor green!\";\n}\n?>",
        "break",
        "for",
        "foreach",
        "while",
        "do..while",
        "switch",
        "continue"
      ]
    },
    {
      "title": "PHP callable Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nUse callable to require a callback function as an argument:\nDefinition and Usage\nThe callable keyword is used to force a function argument to be a reference to a function.\nA callable can be one of the following:\nAn anonymous function\nA string containing the name of a function\nAn array describing a static class method\nAn array describing an object method\nMore Examples\nExample\nUsing different types of callables:",
      "examples": [
        "<?php\nfunction printFormatted(callable $format, $str) {\necho $format($str);\necho \"<br>\";\n}\n\nfunction exclaim($str) { return $str . \"!\"; }\nprintFormatted(\"exclaim\", \"Hello World\");\n?>",
        "<?php\nfunction printFormatted(callable $format, $str) {\necho $format($str);\necho \"<br>\";\n}\n\nclass MyClass {\npublic static function ask($str) {\nreturn $str . \"?\";\n}\npublic function brackets($str) {\nreturn \"[$str]\";\n}\n}\n\n// An anonymous function\n$func = function($str) { return substr($str, 0, 5); };\nprintFormatted($func , \"Hello World\");\n\n// A string containing the name of a function\nprintFormatted(\"strtoupper\", \"Hello World\");\n\n// An array describing a static class method\nprintFormatted([\"MyClass\", \"ask\"], \"Hello World\");\n\n// An array describing an object method\n$obj = new MyClass();\nprintFormatted([$obj, \"brackets\"], \"Hello World\");\n?>",
        "callable"
      ]
    },
    {
      "title": "PHP case Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nUse case to run some code when a variable has a specified value:\nDefinition and Usage\nThe case keyword is used to jump to a line of code when an expression has a specific value in a switch conditional.\nRelated Pages\nThe switch keyword.\nRead more about the switch conditional in our PHP switch Statement Tutorial.",
      "examples": [
        "<?php\n$a = 3;\nswitch($a) {\ncase 1:\necho \"One\";\nbreak;\ncase 2:\necho \"Two\";\nbreak;\ncase 3:\necho \"Three\";\nbreak;\n}\n?>",
        "case",
        "switch"
      ]
    },
    {
      "title": "PHP catch Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nCatch an exception:\nDefinition and Usage\nThe catch keyword is used to handle exceptions that are thrown by the code in a preceding try block.\nRelated Pages\nThe throw keyword.\nThe try keyword.\nThe finally keyword.\nRead more about try..catch.finally (Exceptions) in our PHP Exceptions Tutorial.\nMore Examples\nExample\nUse catch for multiple types of exception:",
      "examples": [
        "<?php\ntry {\nthrow new Exception(\"This is an exception\");\n} catch(Exception $e) {\necho $e->getMessage();\n}\n?>",
        "<?php\ntry {\n$rand = rand(0, 2);\nswitch($rand) {\ncase 0: throw new Exception();\ncase 1: throw new OutOfBoundsException();\ncase 2: throw new LogicException();\n}\n\n} catch(OutOfBoundsException $e) {\necho \"Caught an out of bounds exception\";\n} catch(LogicException $e) {\necho \"Caught a logic exception\";\n} catch(Exception $e) {\necho \"Caught an ordinary exception\";\n}\n?>",
        "catch",
        "throw",
        "try",
        "finally"
      ]
    },
    {
      "title": "PHP class Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nDeclare a class:\nDefinition and Usage\nThe class keyword is used to create classes.\nRelated Pages\nRead more about classes in our PHP Classes and Objects Tutorial.",
      "examples": [
        "<?php\nclass MyClass {\npublic $number = 5;\n}\n\n$obj = new MyClass();\necho $obj->number;\n?>",
        "class"
      ]
    },
    {
      "title": "PHP clone Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nCreate a copy of an object:\nDefinition and Usage\nThe clone keyword is used to create a copy of an object.\nIf any of the properties was a reference to another variable or object, then only the reference is copied. Objects are always passed by reference, so if the original object has another object in its properties, the copy will point to the same object. This behavior can be changed by creating a __clone() method in the class.\nRelated Pages\nRead more about classes in our PHP Classes and Objects Tutorial.\nMore Examples\nExample\nCreate a copy of an object which has a reference:\nExample\nUse a __clone() method to break references in a copied object:",
      "examples": [
        "<?php\nclass MyClass {\npublic $color;\npublic $amount;\n}\n\n$obj = new MyClass();\n$obj->color = \"red\";\n$obj->amount = 5;\n$copy = clone $obj;\nprint_r($copy);\n?>",
        "<?php\nclass MyClass {\npublic $amount;\n}\n\n// Create an object with a reference\n$value = 5;\n$obj = new MyClass();\n$obj->amount = &$value;\n\n// Clone the object\n$copy = clone $obj;\n\n// Change the value in the original object\n$obj->amount = 6;\n\n// The copy is changed\nprint_r($copy);\n?>",
        "<?php\nclass MyClass {\npublic $amount;\npublic function __clone() {\n$value = $this->amount;\nunset($this->amount); // Unset breaks references\n$this->amount = $value;\n}\n}\n\n// Create an object with a reference\n$value = 5;\n$obj = new MyClass();\n$obj->amount = &$value;\n\n// Clone the object\n$copy = clone $obj;\n\n// Change the value in the original object\n$obj->amount = 6;\n\n// The copy is not changed\nprint_r($copy);\n?>",
        "clone",
        "__clone()"
      ]
    },
    {
      "title": "PHP const Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nCreate a constant and print its value:\nDefinition and Usage\nThe const keyword is used to create constants. Unlike with the define() function, constants created using the const keyword must be declared in the global scope.\nRelated Pages\nRead more about constants in our PHP Constants Tutorial.\nMore Examples\nExample\nCreate a constant and print its value:",
      "examples": [
        "<?php\nconst MY_CONSTANT = 5;\necho MY_CONSTANT;\n?>",
        "<?php\nclass MyClass {\nconst MY_CONSTANT = 5;\n}\n\necho MyClass::MY_CONSTANT;\n?>",
        "const",
        "define()"
      ]
    },
    {
      "title": "PHP continue Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nUse continue to skip over the \"5\" part of the code in a loop:\nDefinition and Usage\nThe continue keyword is used to is used to end the current iteration in a for, foreach, while or do..while loop, and continues to the next iteration.\nRelated Pages\nUse the break keyword to end the loop completely\nRead more about break and continue in our PHP Break and Continue Tutorial.\nRead more about loops in our PHP Loops Tutorial.",
      "examples": [
        "<?php\nfor($i = 1; $i <= 10; $i++) {\nif($i == 5) {\ncontinue;\n}\necho \"$i <br>\";\n}\n?>",
        "continue",
        "for",
        "foreach",
        "while",
        "do..while",
        "break"
      ]
    },
    {
      "title": "PHP declare Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nRun a function after each instruction:\nDefinition and Usage\nThe declare keyword sets an execution directive for a block of code. If the declare statement is not followed by a block then the directive applies to the rest of the code in the file.\nThere are three directives which can be declared: ticks, encoding and strict_types.\nThe ticks directive will send a tick event each time a specified number of instructions have been executed. A tick function can be registered which will run each time a tick event fires.\nThe encoding directive is used to indicate what character encoding the file is using. It cannot be used on a block, it has to apply to the whole file.\nWhen the strict_types directive is set, values of the wrong type passed into function arguments with type hints will throw a fatal error instead of being cast to the correct type.\nRelated Pages\nThe enddeclare keyword.\nMore Examples\nExample\nRun a function after each instruction:",
      "examples": [
        "<?php\n$count = 0;\nfunction example() {\nglobal $count;\n$count++;\necho \"$count instructions executed<br>\";\n}\n\nregister_tick_function('example');\n\ndeclare(ticks=1) {\n$cars = [\"Ford\", \"Volvo\", \"BMW\"];\nforeach($cars as $car) {\necho \"$car <br>\";\n}\n}\n?>",
        "<?php\ndeclare(strict_types=1);\nfunction sum(int $a, int $b) {\nreturn $a + $b;\n}\n\n// Throws a fatal error because '5' is a string instead of a number\nsum(\"5\", 1);\n?>",
        "declare",
        "ticks",
        "encoding",
        "strict_types"
      ]
    },
    {
      "title": "PHP default Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nUse default to handle unspecified cases in a switch block:\nDefinition and Usage\nThe default keyword is used in a switch block to specify which code to run when none of the case statements were matched by the expression.\nRelated Pages\nThe switch keyword.\nRead more about the switch conditional in our PHP switch Statement Tutorial.",
      "examples": [
        "<?php\n$a = 4;\nswitch($a) {\ncase 1: echo \"One\"; break;\ncase 2: echo \"Two\"; break;\ncase 3: echo \"Three\"; break;\ndefault: echo \"Many\"; break;\n}\n?>",
        "default",
        "switch",
        "case"
      ]
    },
    {
      "title": "PHP do Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nCreate a loop that always runs at least once:\nDefinition and Usage\nThe do keyword creates a loop which always runs at least once. It is used together with the while keyword to create a do...while loop.\nRelated Pages\nThe while keyword.\nRead more about do...while loops in our PHP do while Loop Tutorial.",
      "examples": [
        "<?php\n$i = 5;\ndo {\necho $i;\necho \"<br>\";\n$i--;\n} while($i > 6);\n?>",
        "do",
        "while",
        "do...while"
      ]
    },
    {
      "title": "PHP echo Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nUse echo to output some text:\nDefinition and Usage\nThe echo keyword is used to output one or more strings.\nThe echo keyword has no return value.\necho and print are more or less the same. They are both used to output data to the screen.\nThe differences are small:\necho has no return value, while print has a return value of 1 so it can be used in expressions\necho can take multiple parameters, while print can take one argument\necho is marginally faster than print\nMore Examples\nExample\nUse echo to output multiple strings:\nRelated Pages\nThe print keyword",
      "examples": [
        "<?php\necho \"Hello World!\";\n?>",
        "<?php\necho \"Hello \", \"World\", \"!\";\n?>",
        "echo",
        "print"
      ]
    },
    {
      "title": "PHP else Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nRun some code when a condition is not met:\nDefinition and Usage\nThe else keyword specifies a block of code which should run when the condition of an if statement is not met.\nRelated Pages\nThe if keyword.\nThe elseif keyword.\nRead more about the if...elseif...else conditional in our PHP if else Tutorial.",
      "examples": [
        "<?php\nif (5 < 3) {\necho \"Five is less than three\";\n} else {\necho \"Five is not less than three\";\n}\n?>",
        "else",
        "if",
        "elseif"
      ]
    },
    {
      "title": "PHP elseif Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nTest a second condition if the first condition is not met:\nDefinition and Usage\nThe elseif keyword tests a new condition if the condition of a previous if or elseif statement was not met. It is equivalent to putting an if statement inside an else block.\nThe following blocks of code are equivalent:\nRelated Pages\nThe if keyword.\nRead more about the if...elseif...else conditional in our PHP if else Tutorial.",
      "examples": [
        "<?php\nif(5 < 3) {\necho \"Five is less than three\";\n} else if(5 > 4) {\necho \"Five is greater than four\";\n}\n?>",
        "<?php\nif (...) {\nsome code here\n} elseif (...) {\nsome code here\n}\n?>",
        "<?php\nif (...) {\nsome code here\n} else{\nif (...) {\nsome code here\n}\n}\n?>",
        "elseif",
        "if"
      ]
    },
    {
      "title": "PHP empty Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nCheck if a variable is empty:\nDefinition and Usage\nThe empty keyword acts as a function which returns true if a variable does not exist, or if its value is considered empty. The empty keyword also evaluates expressions which are not in a variable.\nA value is considered empty if its value is any of the following:\nAn empty string\nAn empty array\nThe integer 0\nThe floating point number 0.0\nThe string \"0\"\nBoolean false\nnull\nMore Examples\nExample\nUse empty on a variety of different expressions:",
      "examples": [
        "<?php\n$str = \"\";\nif(empty($str)) {\necho \"The string is empty\";\n}\n?>",
        "<?php\n// A variable that does not exist\nif(empty($x)) {\necho '$x does not exist<br>';\n}\n\n// An empty integer\nif(empty(0)) {\necho '0 is empty<br>';\n}\n\n// An empty float\nif(empty(0.0)) {\necho '0.0 is empty<br>';\n}\n\n// An empty string\nif(empty(\"\")) {\necho '\"\" is an empty string<br>';\n}\n\n// null\nif(empty(null)) {\necho 'null is empty<br>';\n}\n\n// A value that is not empty\nif(empty('A')) {\necho '\"A\" is empty<br>';\n} else {\necho '\"A\" is not empty<br>';\n}\n?>",
        "empty"
      ]
    },
    {
      "title": "PHP enddeclare Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nClose a declare block:\nDefinition and Usage\nThe enddeclare keyword is used to close a declare block which was started using the declare(...): syntax.\nRelated Pages\nThe declare keyword.",
      "examples": [
        "<?php\n$count = 0;\nfunction example() {\nglobal $count;\n$count++;\necho \"$count instructions executed<br>\";\n}\nregister_tick_function('example');\n\ndeclare(ticks=1):\n$cars = [\"Ford\", \"Volvo\", \"BMW\"];\nforeach($cars as $car) {\necho \"$car <br>\";\n}\nenddeclare;\n?>",
        "enddeclare",
        "declare",
        "declare(...):"
      ]
    },
    {
      "title": "PHP endfor Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nClose a for loop block:\nDefinition and Usage\nThe endfor keyword is used to close the code block of a for loop which was started using the for(...): syntax.\nRelated Pages\nThe for keyword.\nRead more about for loops in our PHP for Loop Tutorial.",
      "examples": [
        "<?php\nfor($i = 0; $i < 10; $i += 2):\necho \"$i <br>\";\nendfor;\n?>",
        "for",
        "endfor",
        "for(...):"
      ]
    },
    {
      "title": "PHP endforeach Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nClose a foreach loop block:\nDefinition and Usage\nThe endforeach keyword is used to close the code block of a foreach loop which was started using the foreach(...): syntax.\nRelated Pages\nThe foreach keyword.\nRead more about for loops in our PHP foreach Loop Tutorial.",
      "examples": [
        "<?php\n$cars = [\"Ford\", \"Volvo\", \"BMW\"];\nforeach($cars as $car):\necho \"$car <br>\";\nendforeach;\n?>",
        "endforeach",
        "foreach",
        "foreach(...):"
      ]
    },
    {
      "title": "PHP endif Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nEnd an if conditional:\nDefinition and Usage\nThe endif keyword is used to mark the end of an if conditional which was started with the if(...): syntax. It also applies to any variation of the if conditional, such as if...elseif and if...else.\nRelated Pages\nThe if keyword.\nThe else keyword.\nThe elseif keyword.\nRead more about conditional statements in our PHP if else Tutorial.\nMore Examples\nExample\nEnd an if...else conditional:\nExample\nEnd an if...elseif...else conditional:",
      "examples": [
        "<?php\n$a = 4;\nif($a < 5):\necho \"Less than five\";\nendif;\n?>",
        "<?php\n$a = 4;\nif($a < 5):\necho \"Less than five\";\nelse:\necho \"Greater than five\";\nendif;\n?>",
        "<?php\n$a = 4;\nif($a < 5):\necho \"Less than five\";\nelseif($a < 10):\necho \"More than five but less than ten\";\nelse:\necho \"Greater than ten\";\nendif;\n?>",
        "if",
        "endif",
        "if(...):",
        "if...elseif",
        "if...else",
        "if...elseif...else"
      ]
    },
    {
      "title": "PHP endswitch Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nClose a switch conditional block:\nDefinition and Usage\nThe endswitch keyword is used to mark the end of a switch conditional which was started with the switch(...): syntax.\nRelated Pages\nThe switch keyword.\nRead more about the switch statement in our PHP switch Statement Tutorial.",
      "examples": [
        "<?php\n$a = 4;\nswitch($a):\ncase 1: echo \"One\"; break;\ncase 2: echo \"Two\"; break;\ncase 3: echo \"Three\"; break;\ndefault: echo \"Many\"; break;\nendswitch;\n?>",
        "switch",
        "endswitch",
        "switch(...):"
      ]
    },
    {
      "title": "PHP endwhile Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nPrint $i as long as $i is less than 6:\nDefinition and Usage\nThe endwhile keyword is used to mark the end of a while loop which was started with the while(...): syntax.\nRelated Pages\nThe while keyword.\nRead more about while loops in our PHP while Loop Tutorial.",
      "examples": [
        "<?php\n$i = 1;\nwhile ($i < 6):\necho $i;\n$i++;\nendwhile;\n?>",
        "$i",
        "$i = 1;\nwhile ($i < 6):\necho $i;\n$i++;\nendwhile;",
        "endwhile",
        "while",
        "while(...):"
      ]
    },
    {
      "title": "PHP extends Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nInherit from a class:\nDefinition and Usage\nThe extends keyword is used to derive a class from another class. This is called inheritance. A derived class has all of the public and protected properties of the class that it is derived from.\nRelated Pages\nRead more about inheritance in our PHP OOP - Inheritance Tutorial.",
      "examples": [
        "<?php\nclass MyClass {\npublic function hello() {\necho \"Hello World!\";\n}\n}\n\nclass AnotherClass extends MyClass {\n}\n\n$obj = new AnotherClass();\n$obj->hello();\n?>",
        "extends"
      ]
    },
    {
      "title": "PHP final Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nPrevent inheritance of a class using the final keyword:\nDefinition and Usage\nThe final keyword is used to prevent a class from being inherited and to prevent inherited method from being overridden.\nRelated Pages\nRead more about inheritance in our PHP OOP - Inheritance Tutorial.",
      "examples": [
        "<?php\nfinal class MyClass {\npublic $name = \"John\";\n}\n\n// This code will throw an error\nclass AnotherClass extends MyClass{};\n?>",
        "final"
      ]
    },
    {
      "title": "PHP finally Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nRun some code regardless of whether an exception was thrown:\nDefinition and Usage\nThe finally keyword is used in try...finally and try...catch...finally structures to run a block of code whether or not an exception occurred.\nRelated Pages\nThe throw keyword.\nThe catch keyword.\nThe finally keyword.\nRead more about exceptions in our PHP Exceptions Tutorial.",
      "examples": [
        "<?php\necho \"Starting the process.\";\ntry {\n// Select randomly between 0 and 1, throw an exception if 1 is selected.\n$random = rand(0, 1);\nif($random == 1) {\nthrow new Exception(\"Exception\");\n}\n} finally {\necho \"Process complete\";\n}\n?>",
        "finally",
        "try...finally",
        "try...catch...finally",
        "throw",
        "catch"
      ]
    },
    {
      "title": "PHP fn Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nCreate an arrow function:\nDefinition and Usage\nThe fn keyword is used to create arrow functions. Arrow functions are only available in PHP versions 7.4 and up.\nArrow functions have access to all variables from the scope in which they were created.\nThe general syntax of an arrow function is:",
      "examples": [
        "<?php\n// This only works in PHP 7.4 and above\n$str = \"Hello World\";\n$my_function = fn($a) => $str . $a;\necho $my_function(\"!\");\n?>",
        "fn(arguments) => expression to be returned;",
        "fn"
      ]
    },
    {
      "title": "PHP for Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nPrint even numbers less than 10:\nDefinition and Usage\nThe for keyword is used to create a for loop, which loops through a block of code a specified number of times.\nRelated Pages\nRead more about for loops in our PHP for Loop Tutorial.",
      "examples": [
        "<?php\nfor($i = 0; $i < 10; $i += 2) {\necho \"$i <br>\";\n}\n?>",
        "for"
      ]
    },
    {
      "title": "PHP foreach Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nPrint all of the values in an array:\nDefinition and Usage\nThe foreach keyword is used to create foreach loops, which loops through a block of code for each element in an array.\nRelated Pages\nRead more about foreach loops in our PHP foreach Loop Tutorial.\nMore Examples\nExample\nPrint keys and values from an associative array:",
      "examples": [
        "<?php\n$cars = [\"Ford\", \"Volvo\", \"BMW\"];\nforeach($cars as $car) {\necho \"$car <br>\";\n}\n?>",
        "<?php\n$people = [\n\"Peter\" => \"35\",\n\"Ben\" => \"37\",\n\"Joe\" => \"43\"\n];\n\nforeach($people as $person => $age) {\necho \"$person is $age years old\";\necho \"<br>\";\n}\n?>",
        "foreach"
      ]
    },
    {
      "title": "PHP function Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nCreate a function and run it:\nDefinition and Usage\nThe function keyword is used to create a function.\nRelated Pages\nRead more about functions in our PHP Functions Tutorial.",
      "examples": [
        "<?php\nfunction hello($a) {\nreturn \"Hello $a!\";\n}\n\necho hello(\"World\");\n?>",
        "function"
      ]
    },
    {
      "title": "PHP global Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nUse a global variable in a function:\nDefinition and Usage\nThe global keyword imports variables from the global scope into the local scope of a function.\nRelated Pages\nRead more about Variable Scope in our PHP Variables Tutorial.",
      "examples": [
        "<?php\n$x = 5;\nfunction add($y) {\nglobal $x;\nreturn $x + $y;\n}\n\necho \"$x + 5 is \" . add(5);\n?>",
        "global"
      ]
    },
    {
      "title": "PHP if Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nPrint a string if $a is less than five:\nDefinition and Usage\nThe if keyword is used to create an if conditional. The elseif and else keywords can be used to specify code that runs when the condition is not met.\nRelated Pages\nThe elseif keyword\nThe else keyword\nRead more about conditionals in our PHP Conditionals Tutorial.",
      "examples": [
        "<?php\n$a = 4;\nif($a < 5) {\necho \"Less than five\";\n}\n?>",
        "if",
        "elseif",
        "else"
      ]
    },
    {
      "title": "PHP implements Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nImplement an interface:\nDefinition and Usage\nThe implements keyword is used to declare that a class must have the methods described in the specified interface. This is called polymorphism. Polymorphism makes it easy to use a variety of different objects in the same way.\nRelated Pages\nThe interface keyword\nThe else keyword\nRead more about objects, classes and interfaces in our PHP OOP Tutorial.",
      "examples": [
        "<?php\ninterface Machine {\npublic function activate();\npublic function deactivate();\npublic function isActive();\n}\n\nclass Kettle implements Machine {\nprivate $isOn = false;\n\npublic function activate() {\n$this->isOn = true;\n}\n\npublic function deactivate() {\n$this->isOn = false;\n}\n\npublic function isActive() {\nreturn $this->isOn;\n}\n}\n\n$machine = new Kettle();\n\n$machine->activate();\nif($machine->isActive()) {\necho \"The machine is on\";\n} else {\necho \"The machine is off\";\n}\n\necho \"<br>\";\n$machine->deactivate();\nif($machine->isActive()) {\necho \"The machine is on\";\n} else {\necho \"The machine is off\";\n}\n?>",
        "implements",
        "interface",
        "else"
      ]
    },
    {
      "title": "PHP include Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nUse include to add a footer to a page:\nDefinition and Usage\nThe include keyword is used to embed PHP code from another file. If the file is not found, a warning is shown and the program continues to run.\nRelated Pages\nThe include_once keyword\nThe require keyword\nThe require_once keyword\nRead more about including files in our PHP Include Files Tutorial.",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<body>\n\n<h1>Welcome to my home page!</h1>\n<p>Some text.</p>\n<p>Some more text.</p>\n<?php include 'footer.php';?>\n\n</body>\n</html>",
        "include",
        "include_once",
        "require",
        "require_once"
      ]
    },
    {
      "title": "PHP include_once Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nUse include_once to add a footer to a page:\nDefinition and Usage\nThe include_once keyword is used to embed PHP code from another file. If the file is not found, a warning is shown and the program continues to run. If the file was already included previously, this statement will not include it again.\nRelated Pages\nThe include keyword\nThe require keyword\nThe require_once keyword\nRead more about including files in our PHP Include Files Tutorial.",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<body>\n\n<h1>Welcome to my home page!</h1>\n<p>Some text.</p>\n<p>Some more text.</p>\n<?php include_once 'footer.php';?>\n\n</body>\n</html>",
        "include_once",
        "include",
        "require",
        "require_once"
      ]
    },
    {
      "title": "PHP instanceof Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nCheck whether an object belongs to a specific class:\nDefinition and Usage\nThe instanceof keyword is used to check if an object belongs to a class. The comparison returns true if the object is an instance of the class, it returns false if it is not.\nRelated Pages\nRead more about object and classes in our PHP OOP Tutorial.",
      "examples": [
        "<?php\nclass MyClass {}\nclass AnotherClass extends MyClass{}\n$obj = new AnotherClass();\n\nif($obj instanceof AnotherClass) {\necho \"The object is AnotherClass\";\n}\n\n// The object is also an instance of the class it is derived from\nif($obj instanceof MyClass) {\necho \"The object is MyClass<br>\";\n}\n?>",
        "instanceof"
      ]
    },
    {
      "title": "PHP insteadof Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nUse insteadof to choose methods from different traits:\nDefinition and Usage\nThe insteadof keyword allows you to select from which trait a method should be taken if more than one trait has a method with the same name.\nRelated Pages\nThe trait keyword\nRead more about traits in our PHP OOP - Traits Tutorial.",
      "examples": [
        "<?php\ntrait message1 {\npublic function msgA() {\necho \"My favorite color is red. \";\n}\n\npublic function msgB() {\necho \"My favorite number is 5. \";\n}\n}\n\ntrait message2 {\npublic function msgA() {\necho \"My favorite color is blue. \";\n}\n\npublic function msgB() {\necho \"My favorite number is 7. \";\n}\n}\n\nclass MyClass {\nuse message1, message2 {\nmessage1::msgA insteadof message2;\nmessage2::msgB insteadof message1;\n}\n}\n\n$obj = new MyClass();\n$obj->msgA();\n$obj->msgB();\n?>",
        "insteadof",
        "trait"
      ]
    },
    {
      "title": "PHP interface Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nCreate and implement an interface:\nDefinition and Usage\nThe interface keyword is used to create interfaces.\nAn interface is a structure which defines a list of methods that must exist in a class.\nInterfaces are a good way to allow many different classes to be used in the same way.\nThe implements keyword can be used to make a class use an interface.\nRelated Pages\nThe implements keyword",
      "examples": [
        "<?php\ninterface Machine {\npublic function activate();\npublic function deactivate();\npublic function isActive();\n}\n\nclass Kettle implements Machine {\nprivate $isOn = false;\n\npublic function activate() {\n$this->isOn = true;\n}\n\npublic function deactivate() {\n$this->isOn = false;\n}\n\npublic function isActive() {\nreturn $this->isOn;\n}\n}\n\n$machine = new Kettle();\n\n$machine->activate();\nif($machine->isActive()) {\necho \"The machine is on\";\n} else {\necho \"The machine is off\";\n}\n\necho \"<br>\";\n$machine->deactivate();\nif($machine->isActive()) {\necho \"The machine is on\";\n} else {\necho \"The machine is off\";\n}\n?>",
        "interface",
        "implements"
      ]
    },
    {
      "title": "PHP isset() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nCheck whether a variable is empty. Also check whether the variable is set/declared:\nDefinition and Usage\nThe isset() function checks whether a variable is set, which means that it has to be declared and is not NULL.\nThis function returns true if the variable exists and is not NULL, otherwise it returns false.\nNote: If multiple variables are supplied, then this function will return true only if all of the variables are set.\nTip: A variable can be unset with the unset() function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a = 0;\n// True because $a is set\nif (isset($a)) {\necho \"Variable 'a' is set.<br>\";\n}\n\n$b = null;\n// False because $b is NULL\nif (isset($b)) {\necho \"Variable 'b' is set.\";\n}\n?>",
        "isset(variable, ....);"
      ]
    },
    {
      "title": "PHP list Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nAssign elements of an array to variables:\nDefinition and Usage\nThe list keyword keyword assigns elements of an array to a list of variables.\nIf there are not enough elements in the array it will output a notice and assign null to the remaining variables.\nNote: Since PHP 7.1.0, which elements are assigned to the variables can be selected using arrow => syntax.\nMore Examples\nExample\nChoose which element is assigned to which variable:",
      "examples": [
        "<?php\nlist($a, $b, $c) = [1, 2, 3];\necho \"$a is \" . $a . \"<br>\";\necho \"$b is \" . $b . \"<br>\";\necho \"$c is \" . $c . \"<br>\";\n?>",
        "<?php\nlist(2 => $a, 0 => $b, 1 => $c) = [1, 2, 3];\necho \"$a is \" . $a . \"<br>\";\necho \"$b is \" . $b . \"<br>\";\necho \"$c is \" . $c . \"<br>\";\n?>",
        "list",
        "=>"
      ]
    },
    {
      "title": "PHP namespace Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nCreate a Table class in the Html namespace:\nDefinition and Usage\nThe namespace keyword is used to declare in which namespace a PHP file is operating. Namespaces prevent conflicts between classes that have the same name and can be used to organize code by grouping related classes together.\nRelated Pages\nRead more about namespaces in our PHP Namespaces Tutorial.",
      "examples": [
        "<?php\nnamespace Html;\nclass Table {\npublic $title = \"\";\npublic $numRows = 0;\npublic function message() {\necho \"<p>Table '{$this->title}' has {$this->numRows} rows.</p>\";\n}\n}\n$table = new Table();\n$table->title = \"My table\";\n$table->numRows = 5;\n?>\n\n<!DOCTYPE html>\n<html>\n<body>\n\n<?php\n$table->message();\n?>\n\n</body>\n</html>",
        "namespace"
      ]
    },
    {
      "title": "PHP new Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nCreate an object and output the value of one of its properties:\nDefinition and Usage\nThe new keyword is used to create an object from a class.\nRelated Pages\nLearn more about classes and objects in our PHP OOP - Classes and Objects Tutorial.",
      "examples": [
        "<?php\nclass MyClass {\npublic $name = \"John\";\n}\n\n$obj = new MyClass();\necho \"The name is \" . $obj->name;\n?>",
        "new"
      ]
    },
    {
      "title": "PHP or Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nReturn true if at least one of the statements is true:\nDefinition and Usage\nThe or keyword is a logical operator.\nLogical operators are used to combine conditional statements.\nThe return value will be true if any one of the statements returns true, otherwise it will return false.\nThe difference between or and || is that or has very low precedence, meaning that most other operations get evaluated first.\nRelated Pages\nRead more about operators in our PHP Operators Tutorial.\nMore Examples\nExample\nDifference between or and ||. or has lower precedence than the = operator, so the assignment happens first.",
      "examples": [
        "<?php\nif (5 > 3 or 5 > 10) {\necho \"true\";\n} else {\necho \"false\";\n}\n?>",
        "<?php\n$result1 = false || true;\necho \"false || true = \";\necho $result1 ? \"true\" : \"false\";\n\necho \"<br>\";\n\n$result2 = false or true;\necho \"false or true = \";\necho $result2 ? \"true\" : \"false\";\n?>",
        "or",
        "true",
        "false",
        "||",
        "="
      ]
    },
    {
      "title": "PHP print Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nOutput some text:\nDefinition and Usage\nThe print keyword is used to output a string.\nThe print keyword always returns 1.\necho and print are more or less the same. They are both used to output data to the screen.\nThe differences are small:\necho has no return value, while print has a return value of 1 so it can be used in expressions\necho can take multiple parameters, while print can take one argument\necho is marginally faster than print\nRelated Pages\nThe echo keyword",
      "examples": [
        "<?php\nprint \"Hello World!\";\n?>",
        "print",
        "echo"
      ]
    },
    {
      "title": "PHP private Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nUse private to prevent outside code or derived classes from modifying a property:\nDefinition and Usage\nThe private keyword is an access modifier. It marks a property or method as private.\nPrivate properties and methods can only be used by the class in which the property or method was defined. Derived classes and outside code cannot use them.\nRelated Pages\nThe protected keyword\nThe public keyword\nLearn more about access modifiers in our PHP OOP - Access Modifiers Tutorial.",
      "examples": [
        "<?php\nclass MyClass {\nprivate $number = 0;\n\npublic function add1() {\n$this->number++;\n}\n\npublic function getNumber() {\nreturn $this->number;\n}\n}\n\n$obj = new MyClass();\n$obj->add1();\necho \"The number is \" . $obj->getNumber();\n?>",
        "private",
        "protected",
        "public"
      ]
    },
    {
      "title": "PHP protected Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nUse protected to prevent outside code from modifying a property:\nDefinition and Usage\nThe protected keyword is an access modifier. It marks a property or method as protected.\nProtected properties and methods can only be used by the class in which the property or method was defined and any classes that derive from it. Any other code cannot use them.\nRelated Pages\nThe private keyword\nThe public keyword\nLearn more about access modifiers in our PHP OOP - Access Modifiers Tutorial.",
      "examples": [
        "<?php\nclass MyClass {\nprotected $number = 0;\n}\n\nclass AnotherClass extends MyClass {\npublic function add1() {\n$this->number++;\n}\n\npublic function getNumber() {\nreturn $this->number;\n}\n}\n\n$obj = new AnotherClass();\n$obj->add1();\necho \"The number is \" . $obj->getNumber();\n?>",
        "protected",
        "private",
        "public"
      ]
    },
    {
      "title": "PHP public Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nUse public to declare a property that can be modified by any code:\nDefinition and Usage\nThe public keyword is an access modifier. It marks a property or method as public.\nPublic properties and methods can be used by any code that can access the object.\nRelated Pages\nThe protected keyword\nThe private keyword\nLearn more about access modifiers in our PHP OOP - Access Modifiers Tutorial.",
      "examples": [
        "<?php\nclass MyClass {\npublic $number = 0;\n}\n\n$obj = new MyClass();\n$obj->number = 5;\necho \"The number is \" . $obj->number;\n?>",
        "public",
        "protected",
        "private"
      ]
    },
    {
      "title": "PHP require Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nUse require to add a footer to a page:\nDefinition and Usage\nThe require keyword is used to embed PHP code from another file. If the file is not found, a fatal error is thrown and the program stops.\nRelated Pages\nThe include keyword\nThe include_once keyword\nThe require_once keyword\nRead more about including files in our PHP Include Files Tutorial.",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<body>\n\n<h1>Welcome to my home page!</h1>\n<p>Some text.</p>\n<p>Some more text.</p>\n<?php require 'footer.php';?>\n\n</body>\n</html>",
        "require",
        "include",
        "include_once",
        "require_once"
      ]
    },
    {
      "title": "PHP require_once Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nUse require_once to add a footer to a page:\nDefinition and Usage\nThe require_once keyword is used to embed PHP code from another file. If the file is not found, a fatal error is thrown and the program stops. If the file was already included previously, this statement will not include it again.\nRelated Pages\nThe require keyword\nThe include keyword\nThe include_once keyword\nRead more about including files in our PHP Include Files Tutorial.",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<body>\n\n<h1>Welcome to my home page!</h1>\n<p>Some text.</p>\n<p>Some more text.</p>\n<?php require_once 'footer.php';?>\n\n</body>\n</html>",
        "require_once",
        "require",
        "include",
        "include_once"
      ]
    },
    {
      "title": "PHP return Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nReturn a value from a function:\nDefinition and Usage\nThe return keyword ends a function and, optionally, uses the result of an expression as the return value of the function.\nIf return is used outside of a function, it stops PHP code in the file from running. If the file was included using include, include_once, require or require_once, the result of the expression is used as the return value of the include statements.\nRelated Pages\nLearn more functions in our PHP Functions Tutorial.",
      "examples": [
        "<?php\nfunction add1($x) {\nreturn $x + 1;\n}\n\necho \"5 + 1 is \" . add1(5);\n?>",
        "return",
        "include",
        "include_once",
        "require",
        "require_once"
      ]
    },
    {
      "title": "PHP static Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nCreate and use static properties and methods:\nDefinition and Usage\nThe static keyword is used to declare properties and methods of a class as static. Static properties and methods can be used without creating an instance of the class.\nThe static keyword is also used to declare variables in a function which keep their value after the function has ended.\nRelated Pages\nRead more about static methods in our PHP OOP - Static Methods Tutorial.\nRead more about static properties in our PHP OOP - Static Properties Tutorial.\nMore Examples\nExample\nUse a static variable in a function:",
      "examples": [
        "<?php\nclass MyClass {\npublic static $str = \"Hello World!\";\n\npublic static function hello() {\necho MyClass::$str;\n}\n}\n\necho MyClass::$str;\necho \"<br>\";\necho MyClass::hello();\n?>",
        "<?php\nfunction add1() {\nstatic $number = 0;\n$number++;\nreturn $number;\n}\n\necho add1();\necho \"<br>\";\necho add1();\necho \"<br>\";\necho add1();\n?>",
        "static"
      ]
    },
    {
      "title": "PHP switch Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nChoose a message to display based on the value of a variable:\nDefinition and Usage\nThe switch keyword is used to create a switch conditional.\nSwitch conditionals choose a block of code to run based on the value of an expression.\nRelated Pages\nThe break keyword.\nThe case keyword.\nThe default keyword.\nRead more about switch conditionals in our PHP switch Statement Tutorial.",
      "examples": [
        "<?php\n$favcolor = \"red\";\n\nswitch ($favcolor) {\ncase \"red\":\necho \"Your favorite color is red!\";\nbreak;\ncase \"blue\":\necho \"Your favorite color is blue!\";\nbreak;\ncase \"green\":\necho \"Your favorite color is green!\";\nbreak;\ndefault:\necho \"Your favorite color is neither red, blue, nor green!\";\n}\n?>",
        "switch",
        "break",
        "case",
        "default"
      ]
    },
    {
      "title": "PHP throw Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nThrow an exception:\nDefinition and Usage\nThe throw keyword is used to throw exceptions. Exceptions are a way to change the program flow if an unexpected situation arises, such as invalid data.\nThe try...catch...finally structure can be used to handle exceptions.\nRelated Pages\nThe try keyword.\nThe catch keyword.\nThe finally keyword.\nRead more about try..catch.finally (Exceptions) in our PHP Exceptions Tutorial.",
      "examples": [
        "<?php\ntry {\nthrow new Exception(\"This is an exception\");\n} catch(Exception $e) {\necho $e->getMessage();\n}\n?>",
        "throw",
        "try...catch...finally",
        "try",
        "catch",
        "finally"
      ]
    },
    {
      "title": "PHP trait Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nCreate a trait and use it in a class:\nDefinition and Usage\nThe trait keyword is used to create traits. Traits are a way to allow classes to inherit multiple behaviours.\nRelated Pages\nRead more about traits in our PHP OOP - Traits Tutorial.",
      "examples": [
        "<?php\ntrait message1 {\npublic function msg1() {\necho \"OOP is fun! \";\n}\n}\n\nclass Welcome {\nuse message1;\n}\n\n$obj = new Welcome();\n$obj->msg1();\n?>",
        "trait"
      ]
    },
    {
      "title": "PHP try Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nUse a try...catch statement to handle exceptions:\nDefinition and Usage\nThe try keyword is used to create a try...catch, or a try...catch...finally statement.\nRelated Pages\nThe throw keyword.\nThe catch keyword.\nThe finally keyword.\nRead more about try..catch.finally (Exceptions) in our PHP Exceptions Tutorial.",
      "examples": [
        "<?php\ntry {\nthrow new Exception(\"This is an exception\");\n} catch(Exception $e) {\necho $e->getMessage();\n}\n?>",
        "try",
        "try...catch",
        "try...catch...finally",
        "throw",
        "catch",
        "finally"
      ]
    },
    {
      "title": "PHP use Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nCreate a trait and use it in a class:\nDefinition and Usage\nThe use keyword has two purposes: it tells a class to inherit a trait and it gives an alias to a namespace.\nRelated Pages\nRead more about traits in our PHP OOP - Traits Tutorial.\nRead more about namespaces our PHP Namespaces Tutorial.",
      "examples": [
        "<?php\ntrait message1 {\npublic function msg1() {\necho \"OOP is fun! \";\n}\n}\n\nclass Welcome {\nuse message1;\n}\n\n$obj = new Welcome();\n$obj->msg1();\n?>",
        "use"
      ]
    },
    {
      "title": "PHP var Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nUse var to create a property:\nDefinition and Usage\nThe var keyword creates a property in a class. Since PHP 5, it is equivalent to the public keyword.\nNote: The var keyword is only used for compatibility reasons. Since PHP 5, the keywords private, protected and public should be used instead.\nRelated Pages\nThe public keyword.\nThe protected keyword\nThe private keyword",
      "examples": [
        "<?php\nclass MyClass {\nvar $name = \"John\";\n}\n\n$obj = new MyClass();\necho $obj->name;\n?>",
        "var",
        "public",
        "private",
        "protected"
      ]
    },
    {
      "title": "PHP while Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nUse a while loop to print numbers from 1 to 5:\nDefinition and Usage\nThe while keyword is used to create a while loop and is also used to set the looping condition of a do...while.\nRelated Pages\nThe do keyword.\nRead more about while loops in our PHP while Loop Tutorial.\nRead more about do...while loops in our PHP do while Loop Tutorial.",
      "examples": [
        "<?php\n$i = 1;\nwhile($i <= 5) {\necho $i;\necho \"<br>\";\n$i++;\n}\n?>",
        "while",
        "do...while",
        "do"
      ]
    },
    {
      "title": "PHP xor Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nOutput a message only if just one of the expressions is true:\nDefinition and Usage\nThe xor keyword is a logical operator.\nLogical operators are used to combine conditional statements.\nThe return value will only be true if one of the statements is true and the other one is false.\nNote: This operator has lower precedence than the assignment operator, which may lead to confusing results. Wrap the expression in parentheses to avoid unexpected results.\nRelated Pages\nRead more about operators in our PHP Operators Tutorial.\nMore Examples\nExample\nShow the difference in precedence:",
      "examples": [
        "<?php\nif(5 < 3 xor 5 < 10) {\necho \"Only one of the expressions was true\";\n}\n?>",
        "<?php\n$result1 = true xor true;\necho \"true xor true = \";\necho $result1 ? \"true\" : \"false\";\n\necho \"<br>\";\n\n$result2 = (true xor true);\necho \"(true xor true) = \";\necho $result2 ? \"true\" : \"false\";\n?>",
        "xor",
        "true",
        "false"
      ]
    },
    {
      "title": "PHP yield Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nUse yield to create a generator function:\nDefinition and Usage\nThe yield keyword is used to create a generator function. Generator functions act as iterators which can be looped through with a foreach loop.\nThe value given by the yield keyword is used as a value in one of the iterations of the loop.\nRelated Pages\nThe foreach keyword.\nThe yield from keyword.",
      "examples": [
        "<?php\nfunction countTo3() {\nyield \"1\";\nyield \"2\";\nyield \"3\";\n}\n\nforeach(countTo3() as $number) {\necho $number;\necho \"<br>\";\n}\n?>",
        "yield",
        "foreach",
        "yield from"
      ]
    },
    {
      "title": "PHP yield from Keyword",
      "summary": "â® PHP Keywords\nExampleGet your own PHP Server\nUse yield from to create a generator function:\nDefinition and Usage\nThe yield from keyword is used to create a generator function. Generator functions act as iterators which can be looped through with a foreach loop.\nThe yield from keyword provides the values from an iterator one by one each time the generator function is called until there are no items left in the iterator, then the generator will move on to the next yield keyword.\nRelated Pages\nThe yield keyword.\nThe foreach keyword.",
      "examples": [
        "<?php\nfunction countTo4() {\nyield from [1, 2, 3];\nyield 4;\n}\n\nforeach(countTo4() as $number) {\necho $number;\necho \"<br>\";\n}\n?>",
        "yield from",
        "foreach",
        "yield"
      ]
    },
    {
      "title": "PHP libxml Functions",
      "summary": "PHP libxml Introduction\nThe libxml functions and constants are used together with SimpleXML, XSLT and DOM functions.\nInstallation\nThese functions require the libxml package. Download at xmlsoft.org\nPHP libxml Functions\nPHP: indicates the earliest version of PHP that supports the function.\nPHP Predefined libxml Constants",
      "examples": []
    },
    {
      "title": "PHP libxml_clear_errors() Function",
      "summary": "â® PHP libxml Reference\nExampleGet your own PHP Server\nClear the libxml error buffer:\nDefinition and Usage\nThe libxml_clear_errors() function clears the libxml error buffer.\nSyntax\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\nlibxml_clear_errors()\n?>",
        "libxml_clear_errors()"
      ]
    },
    {
      "title": "PHP libxml_disable_entity_loader() Function",
      "summary": "â® PHP libxml Reference\nExampleGet your own PHP Server\nEnable the ability to load external entities:\nDefinition and Usage\nThe libxml_disable_entity_loader() function enables the ability to load external entities.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\nlibxml_disable_entity_loader(false)\n?>",
        "libxml_disable_entity_loader(bool)"
      ]
    },
    {
      "title": "PHP libxml_get_errors() Function",
      "summary": "â® PHP libxml Reference\nExampleGet your own PHP Server\nGet the errors from the libxml error buffer:\nDefinition and Usage\nThe libxml_get_errors() function gets the errors from the the libxml error buffer.\nSyntax\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\nlibxml_get_errors()\n?>",
        "libxml_get_errors()"
      ]
    },
    {
      "title": "PHP libxml_get_last_error() Function",
      "summary": "â® PHP libxml Reference\nExampleGet your own PHP Server\nGet the last error from the libxml error buffer:\nDefinition and Usage\nThe libxml_get_last_error() function gets the last error from the libxml error buffer.\nSyntax\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\nlibxml_get_last_error()\n?>",
        "libxml_get_last_error()"
      ]
    },
    {
      "title": "PHP libxml_set_external_entity_loader() Function",
      "summary": "â® PHP libxml Reference\nExampleGet your own PHP Server\nChange the default external entity loader:\nDefinition and Usage\nThe libxml_set_external_entity_loader() function changes the default external entity loader.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$xml = <<<XML\n<!DOCTYPE foo PUBLIC \"-//FOO/BAR\" \"http://example.com/foobar\">\n<foo>bar</foo>\nXML;\n\n$dtd = <<<DTD\n<!ELEMENT foo (#PCDATA)>\nDTD;\n\nlibxml_set_external_entity_loader(\nfunction ($public, $system, $context) use($dtd) {\nvar_dump($public);\nvar_dump($system);\nvar_dump($context);\n$f = fopen(\"php://temp\", \"r+\");\nfwrite($f, $dtd);\nrewind($f);\nreturn $f;\n}\n);\n\n$dd = new DOMDocument;\n$r = $dd->loadXML($xml);\n\nvar_dump($dd->validate());\n?>",
        "libxml_set_external_entity_loader(function)"
      ]
    },
    {
      "title": "PHP libxml_set_streams_context() Function",
      "summary": "â® PHP libxml Reference\nExampleGet your own PHP Server\nChange the default external entity loader:\nDefinition and Usage\nThe libxml_set_streams_context() function sets the streams context for the next libxml document load or write.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$xml = <<<XML\n<!DOCTYPE foo PUBLIC \"-//FOO/BAR\" \"http://example.com/foobar\">\n<foo>bar</foo>\nXML;\n\n$dtd = <<<DTD\n<!ELEMENT foo (#PCDATA)>\nDTD;\n\nlibxml_set_external_entity_loader(\nfunction ($public, $system, $context) use($dtd) {\nvar_dump($public);\nvar_dump($system);\nvar_dump($context);\n$f = fopen(\"php://temp\", \"r+\");\nfwrite($f, $dtd);\nrewind($f);\nreturn $f;\n}\n);\n\n$dd = new DOMDocument;\n$r = $dd->loadXML($xml);\n\nvar_dump($dd->validate());\n?>",
        "libxml_set_streams_context(function)"
      ]
    },
    {
      "title": "PHP libxml_use_internal_errors() Function",
      "summary": "â® PHP libxml Reference\nExampleGet your own PHP Server\nEnable user error handling:\nDefinition and Usage\nThe libxml_use_internal_errors() function disables the standard libxml errors and enables user error handling.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\nlibxml_use_internal_errors(true)\n?>",
        "libxml_use_internal_errors(user_errors)"
      ]
    },
    {
      "title": "PHP Mail Functions",
      "summary": "PHP Mail Introduction\nThe mail() function allows you to send emails directly from a script.\nRequirements\nFor the mail functions to be available, PHP requires an installed and working email system. The program to be used is defined by the configuration settings in the php.ini file.\nInstallation\nThe mail functions are part of the PHP core. There is no installation needed to use these functions.\nRuntime Configuration\nThe behavior of the mail functions is affected by settings in php.ini:\nPHP Mail Functions",
      "examples": []
    },
    {
      "title": "PHP ezmlm_hash() Function",
      "summary": "â® PHP Mail Reference\nExampleGet your own PHP Server\nCalculate the hash value for an email address:\nDefinition and Usage\nThe ezmlm_hash() function calculates the hash value needed when keeping EZMLM mailing lists in a MySQL database.\nThis function accepts an email address, for which it calculates an integer hash value. This value is compatible with the EZMLM mailing list manager, and can then be used with the EZMLM database for user management.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$user = \"someone@example.com\";\n$hash = ezmlm_hash($user);\n\necho \"The hash value for $user is: $hash.\";\n?>",
        "ezmlm_hash(address);"
      ]
    },
    {
      "title": "PHP mail() Function",
      "summary": "â® PHP Mail Reference\nExampleGet your own PHP Server\nSend a simple email:\nDefinition and Usage\nThe mail() function allows you to send emails directly from a script.\nSyntax\nParameter Values\nWindows note: If a full stop is found on the beginning of a line in the message, it might be removed. To solve this problem, replace the full stop with a double dot:\n<?php\n$txt = str_replace(\"\\n.\", \"\\n..\", $txt);\n?>\nNote: When sending an email, it must contain a From header. This can be set with this parameter or in the php.ini file.\nREMOVE ADS\nTechnical Details\nMore Examples\nSend an email with extra headers:\nSend an HTML email:",
      "examples": [
        "<?php\n// the message\n$msg = \"First line of text\\nSecond line of text\";\n\n// use wordwrap() if lines are longer than 70 characters\n$msg = wordwrap($msg,70);\n\n// send email\nmail(\"someone@example.com\",\"My subject\",$msg);\n?>",
        "mail(to,subject,message,headers,parameters);",
        "<?php\n$to = \"somebody@example.com\";\n$subject = \"My subject\";\n$txt = \"Hello world!\";\n$headers = \"From: webmaster@example.com\" . \"\\r\\n\" .\n\"CC: somebodyelse@example.com\";\n\nmail($to,$subject,$txt,$headers);\n?>",
        "<?php\n$to = \"somebody@example.com, somebodyelse@example.com\";\n$subject = \"HTML email\";\n\n$message = \"\n<html>\n<head>\n<title>HTML email</title>\n</head>\n<body>\n<p>This email contains HTML Tags!</p>\n<table>\n<tr>\n<th>Firstname</th>\n<th>Lastname</th>\n</tr>\n<tr>\n<td>John</td>\n<td>Doe</td>\n</tr>\n</table>\n</body>\n</html>\n\";\n\n// Always set content-type when sending HTML email\n$headers = \"MIME-Version: 1.0\" . \"\\r\\n\";\n$headers .= \"Content-type:text/html;charset=UTF-8\" . \"\\r\\n\";\n\n// More headers\n$headers .= 'From: <webmaster@example.com>' . \"\\r\\n\";\n$headers .= 'Cc: myboss@example.com' . \"\\r\\n\";\n\nmail($to,$subject,$message,$headers);\n?>"
      ]
    },
    {
      "title": "PHP Math Functions",
      "summary": "PHP Math Introduction\nThe math functions can handle values within the range of integer and float types.\nInstallation\nThe PHP math functions are part of the PHP core. No installation is required to use these functions.\nPHP Math Functions\nREMOVE ADS\nPHP Predefined Math Constants",
      "examples": []
    },
    {
      "title": "PHP abs() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nReturn the absolute value of different numbers:\nDefinition and Usage\nThe abs() function returns the absolute (positive) value of a number.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(abs(6.7) . \"<br>\");\necho(abs(-6.7) . \"<br>\");\necho(abs(-3) . \"<br>\");\necho(abs(3));\n?>",
        "abs(number);"
      ]
    },
    {
      "title": "PHP acos() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nReturn the arc cosine of different numbers:\nDefinition and Usage\nThe acos() function returns the arc cosine of a number.\nTip: acos(-1) returns the value of Pi.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(acos(0.64) . \"<br>\");\necho(acos(-0.4) . \"<br>\");\necho(acos(0) . \"<br>\");\necho(acos(-1) . \"<br>\");\necho(acos(1) . \"<br>\");\necho(acos(2));\n?>",
        "acos(number);"
      ]
    },
    {
      "title": "PHP acosh() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nReturn the inverse hyperbolic cosine of different numbers:\nDefinition and Usage\nThe acosh() function returns the inverse hyperbolic cosine of a number.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(acosh(7) . \"<br>\");\necho(acosh(56) . \"<br>\");\necho(acosh(2.45));\n?>",
        "acosh(number);"
      ]
    },
    {
      "title": "PHP asin() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nReturn the arc sine of different numbers:\nDefinition and Usage\nThe asin() function returns the arc sine of a number.\nTip: asin(1) returns the value of Pi/2.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(asin(0.64) . \"<br>\");\necho(asin(-0.4) . \"<br>\");\necho(asin(0) . \"<br>\");\necho(asin(-1) . \"<br>\");\necho(asin(1) . \"<br>\");\necho(asin(2));\n?>",
        "asin(number);"
      ]
    },
    {
      "title": "PHP asinh() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nReturn the inverse hyperbolic sine of different numbers:\nDefinition and Usage\nThe asinh() function returns the inverse hyperbolic sine of a number.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(asinh(7) . \"<br>\");\necho(asinh(56) . \"<br>\");\necho(asinh(2.45));\n?>",
        "asinh(number);"
      ]
    },
    {
      "title": "PHP atan() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nReturn the arc tangent of different numbers with the atan() function:\nDefinition and Usage\nThe atan() function returns the arc tangent of arg as a numeric value between -Pi/2 and Pi/2 radians.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(atan(0.50) . \"<br>\");\necho(atan(-0.50) . \"<br>\");\necho(atan(5) . \"<br>\");\necho(atan(-5) . \"<br>\");\necho(atan(100) . \"<br>\");\necho(atan(-100));\n?>",
        "atan(arg);"
      ]
    },
    {
      "title": "PHP atan2() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nReturn the arc tangent of two variables with the atan2() function:\nDefinition and Usage\nThe atan2() function returns the arc tangent of y/x, in radians. Where x and y are the coordinates of a point (x,y).\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(atan2(0.50,0.50) . \"<br>\");\necho(atan2(-0.50,-0.50) . \"<br>\");\necho(atan2(5,5) . \"<br>\");\necho(atan2(10,20) . \"<br>\");\necho(atan2(-5,-5) . \"<br>\");\necho(atan2(-10,10));\n?>",
        "atan2(y,x);"
      ]
    },
    {
      "title": "PHP atanh() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nReturn the inverse hyperbolic tangent of different numbers:\nDefinition and Usage\nThe atanh() function returns the inverse hyperbolic tangent of a number.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(atanh(M_PI_4) . \"<br>\");\necho(atanh(0.50) . \"<br>\");\necho(atanh(-0.50) . \"<br>\");\necho(atanh(1) . \"<br>\");\necho(atanh(-1));\n?>",
        "atanh(number);"
      ]
    },
    {
      "title": "PHP base_convert() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nConvert a hexadecimal number to octal number:\nDefinition and Usage\nThe base_convert() function converts a number from one number base to another.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nConvert an octal number to a decimal number:\nExample\nConvert an octal number to a hexadecimal number:",
      "examples": [
        "<?php\n$hex = \"E196\";\necho base_convert($hex,16,8);\n?>",
        "base_convert(number,frombase,tobase);",
        "<?php\n$oct = \"0031\";\necho base_convert($oct,8,10);\n?>",
        "<?php\n$oct = \"364\";\necho base_convert($oct,8,16);\n?>"
      ]
    },
    {
      "title": "PHP bindec() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nConvert binary to decimal:\nDefinition and Usage\nThe bindec() function converts a binary number to a decimal number.\nTip: To convert decimal to binary, look at the decbin() function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho bindec(\"0011\") . \"<br>\";\necho bindec(\"01\") . \"<br>\";\necho bindec(\"11000110011\") . \"<br>\";\necho bindec(\"111\");\n?>",
        "bindec(binary_string);"
      ]
    },
    {
      "title": "PHP ceil() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nRound numbers up to the nearest integer:\nDefinition and Usage\nThe ceil() function rounds a number UP to the nearest integer, if necessary.\nTip: To round a number DOWN to the nearest integer, look at the floor() function.\nTip: To round a floating-point number, look at the round() function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(ceil(0.60) . \"<br>\");\necho(ceil(0.40) . \"<br>\");\necho(ceil(5) . \"<br>\");\necho(ceil(5.1) . \"<br>\");\necho(ceil(-5.1) . \"<br>\");\necho(ceil(-5.9));\n?>",
        "ceil(number);"
      ]
    },
    {
      "title": "PHP cos() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nReturn the cosine of different numbers:\nDefinition and Usage\nThe cos() function returns the cosine of a number.\nNote: The cos() function returns a numeric value between -1 and 1, which represents the cosine of the angle.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(cos(3) . \"<br>\");\necho(cos(-3) . \"<br>\");\necho(cos(0) . \"<br>\");\necho(cos(M_PI) . \"<br>\");\necho(cos(2*M_PI));\n?>",
        "cos(number);"
      ]
    },
    {
      "title": "PHP cosh() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nReturn the hyperbolic cosine of different numbers:\nDefinition and Usage\nThe cosh() function returns the hyperbolic cosine of a number (equivalent to (exp(number) + exp(-number)) / 2).\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(cosh(3) . \"<br>\");\necho(cosh(-3) . \"<br>\");\necho(cosh(0) . \"<br>\");\necho(cosh(M_PI) . \"<br>\");\necho(cosh(2*M_PI));\n?>",
        "cosh(number);"
      ]
    },
    {
      "title": "PHP decbin() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nConvert decimal to binary:\nDefinition and Usage\nThe decbin() function converts a decimal number to a binary number.\nTip: To convert binary to decimal, look at the bindec() function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho decbin(\"3\") . \"<br>\";\necho decbin(\"1\") . \"<br>\";\necho decbin(\"1587\") . \"<br>\";\necho decbin(\"7\");\n?>",
        "decbin(number);"
      ]
    },
    {
      "title": "PHP dechex() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nConvert decimal to hexadecimal:\nDefinition and Usage\nThe dechex() function converts a decimal number to a hexadecimal number.\nTip: To convert hexadecimal to decimal, look at the hexdec() function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho dechex(\"30\") . \"<br>\";\necho dechex(\"10\") . \"<br>\";\necho dechex(\"1587\") . \"<br>\";\necho dechex(\"70\");\n?>",
        "dechex(number);"
      ]
    },
    {
      "title": "PHP decoct() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nConvert decimal to octal:\nDefinition and Usage\nThe decoct() function converts a decimal number to an octal number.\nTip: To convert octal to decimal, look at the octdec() function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho decoct(\"30\") . \"<br>\";\necho decoct(\"10\") . \"<br>\";\necho decoct(\"1587\") . \"<br>\";\necho decoct(\"70\");\n?>",
        "decoct(number);"
      ]
    },
    {
      "title": "PHP deg2rad() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nConvert degrees to radians:\nDefinition and Usage\nThe deg2rad() function converts a degree value to a radian value.\nTip: To convert a radian value to a degree value, look at the rad2deg() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert a degree into its radian equivalent:",
      "examples": [
        "<?php\necho deg2rad(\"45\") . \"<br>\";\necho deg2rad(\"90\") . \"<br>\";\necho deg2rad(\"360\");\n?>",
        "deg2rad(number);",
        "<?php\n$deg = 180;\n$rad = deg2rad($deg);\necho \"$deg degrees is equal to $rad radians.\";\n?>"
      ]
    },
    {
      "title": "PHP exp() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nReturn 'E' raised to the power of different numbers:\nDefinition and Usage\nThe exp() function returns E raised to the power of x (Ex).\n'E' is the base of the natural system of logarithms (approximately 2.718282) and x is the number passed to it.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(exp(0) . \"<br>\");\necho(exp(1) . \"<br>\");\necho(exp(10) . \"<br>\");\necho(exp(4.8));\n?>",
        "exp(x);"
      ]
    },
    {
      "title": "PHP expm1() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nReturn exp() - 1:\nDefinition and Usage\nThe expm1() function returns exp(x) - 1.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(expm1(0) . \"<br>\");\necho(expm1(1) . \"<br>\");\necho(expm1(10) . \"<br>\");\necho(expm1(4.8));\n?>",
        "expm1(x);"
      ]
    },
    {
      "title": "PHP floor() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nRound numbers down to the nearest integer:\nDefinition and Usage\nThe floor() function rounds a number DOWN to the nearest integer, if necessary, and returns the result.\nTip: To round a number UP to the nearest integer, look at the ceil() function.\nTip: To round a floating-point number, look at the round() function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(floor(0.60) . \"<br>\");\necho(floor(0.40) . \"<br>\");\necho(floor(5) . \"<br>\");\necho(floor(5.1) . \"<br>\");\necho(floor(-5.1) . \"<br>\");\necho(floor(-5.9));\n?>",
        "floor(number);"
      ]
    },
    {
      "title": "PHP fmod() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nReturn the remainder of x/y:\nDefinition and Usage\nThe fmod() function returns the remainder (modulo) of x/y.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(fmod(20, 4) . \"<br>\");\necho(fmod(20, 3) . \"<br>\");\necho(fmod(15, 6) . \"<br>\");\necho(fmod(-10, 3) . \"<br>\");\necho(fmod(0, 0));\n?>",
        "fmod(x,y);"
      ]
    },
    {
      "title": "PHP getrandmax() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nReturn largest possible random value that can be returned by rand():\nDefinition and Usage\nThe getrandmax() function returns the largest possible value that can be returned by rand().\nSyntax\nTechnical Details",
      "examples": [
        "<?php\necho(getrandmax());\n?>",
        "getrandmax();"
      ]
    },
    {
      "title": "PHP hexdec() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nConvert hexadecimal to decimal:\nDefinition and Usage\nThe hexdec() function converts a hexadecimal number to a decimal number.\nTip: To convert decimal to hexadecimal, look at the dechex() function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho hexdec(\"1e\") . \"<br>\";\necho hexdec(\"a\") . \"<br>\";\necho hexdec(\"11ff\") . \"<br>\";\necho hexdec(\"cceeff\");\n?>",
        "hexdec(hex_string);"
      ]
    },
    {
      "title": "PHP hypot() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nCalculate the hypotenuse of different right-angle triangles:\nDefinition and Usage\nThe hypot() function calculates the hypotenuse of a right-angle triangle.\nTip: This function is equivalent to sqrt(x*x + y*y).\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho hypot(3,4) . \"<br>\";\necho hypot(4,6) . \"<br>\";\necho hypot(1,3) . \"<br>\";\necho sqrt(3*3+4*4);\n?>",
        "hypot(x,y);"
      ]
    },
    {
      "title": "PHP intdiv() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nPerform some integer divisions:\nDefinition and Usage\nThe intdiv() function is used for integer division.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho intdiv(8, 4) . \"<br>\";\necho intdiv(5, 2) . \"<br>\";\necho intdiv(-5, -2);\n?>",
        "intdiv(dividend, divisor);"
      ]
    },
    {
      "title": "PHP is_finite() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nCheck whether a value is finite or not:\nDefinition and Usage\nThe is_finite() function checks whether a value is finite or not.\nThis function returns true (1) if the specified value is a finite number, otherwise it returns false/nothing.\nThe value is finite if it is within the allowed range for a PHP float on this platform.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho is_finite(2) . \"<br>\";\necho is_finite(log(0)) . \"<br>\";\necho is_finite(2000);\n?>",
        "is_finite(value);"
      ]
    },
    {
      "title": "PHP is_infinite() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nCheck whether a value is infinite or not:\nDefinition and Usage\nThe is_infinite() function checks whether a value is infinite or not.\nThis function returns true (1) if the specified value is an infinite number, otherwise it returns false/nothing.\nThe value is infinite if it is outside the allowed range for a PHP float on this platform.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho is_infinite(2) . \"<br>\";\necho is_infinite(log(0)) . \"<br>\";\necho is_infinite(2000);\n?>",
        "is_infinite(value);"
      ]
    },
    {
      "title": "PHP is_nan() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nCheck whether a value is 'not-a-number':\nDefinition and Usage\nThe is_nan() function checks whether a value is 'not a number'.\nThis function returns true (1) if the specified value is 'not-a-number', otherwise it returns false/nothing.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho is_nan(200) . \"<br>\";\necho is_nan(acos(1.01));\n?>",
        "is_nan(value);"
      ]
    },
    {
      "title": "PHP lcg_value() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nReturn a pseudo random number in a range between 0 and 1:\nDefinition and Usage\nThe lcg_value() function returns a pseudo random number in a range between 0 and 1.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\necho lcg_value();\n?>",
        "lcg_value();"
      ]
    },
    {
      "title": "PHP log() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nReturn the natural logarithm of different numbers:\nDefinition and Usage\nThe log() function returns the natural logarithm of a number, or the logarithm of number to base.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(log(2.7183) . \"<br>\");\necho(log(2) . \"<br>\");\necho(log(1) . \"<br>\");\necho(log(0));\n?>",
        "log(number,base);"
      ]
    },
    {
      "title": "PHP log10() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nReturn the base-10 logarithm of different numbers:\nDefinition and Usage\nThe log10() function returns the base-10 logarithm of a number.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(log10(2.7183) . \"<br>\");\necho(log10(2) . \"<br>\");\necho(log10(1) . \"<br>\");\necho(log10(0));\n?>",
        "log10(number);"
      ]
    },
    {
      "title": "PHP log1p() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nReturn log(1+number) for different numbers:\nDefinition and Usage\nThe log1p() function returns log(1+number), computed in a way that is accurate even when the value of number is close to zero.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(log1p(2.7183) . \"<br>\");\necho(log1p(2) . \"<br>\");\necho(log1p(1) . \"<br>\");\necho(log1p(0));\n?>",
        "log1p(number);"
      ]
    },
    {
      "title": "PHP max() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nFind highest value with the max() function:\nDefinition and Usage\nThe max() function returns the highest value in an array, or the highest value of several specified values.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(max(2,4,6,8,10) . \"<br>\");\necho(max(22,14,68,18,15) . \"<br>\");\necho(max(array(4,6,8,10)) . \"<br>\");\necho(max(array(44,16,81,12)));\n?>",
        "max(array_values);\n\nor\n\nmax(value1,value2,...);"
      ]
    },
    {
      "title": "PHP min() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nFind lowest value with the min() function:\nDefinition and Usage\nThe min() function returns the lowest value in an array, or the lowest value of several specified values.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(min(2,4,6,8,10) . \"<br>\");\necho(min(22,14,68,18,15) . \"<br>\");\necho(min(array(4,6,8,10)) . \"<br>\");\necho(min(array(44,16,81,12)));\n?>",
        "min(array_values);\n\nor\n\nmin(value1,value2,...);"
      ]
    },
    {
      "title": "PHP mt_getrandmax() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nReturn largest possible random value that can be returned by mt_rand():\nDefinition and Usage\nThe mt_getrandmax() function returns the largest possible value that can be returned by mt_rand().\nSyntax\nTechnical Details",
      "examples": [
        "<?php\necho(mt_getrandmax());\n?>",
        "mt_getrandmax();"
      ]
    },
    {
      "title": "PHP mt_rand() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nGenerate random numbers:\nDefinition and Usage\nThe mt_rand() function generates a random integer using the Mersenne Twister algorithm.\nExample tip: If you want a random integer between 10 and 100 (inclusive), use mt_rand (10,100).\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(mt_rand() . \"<br>\");\necho(mt_rand() . \"<br>\");\necho(mt_rand(10,100));\n?>",
        "mt_rand();\n\nor\n\nmt_rand(min,max);"
      ]
    },
    {
      "title": "PHP mt_srand() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nSeed the random number generator:\nDefinition and Usage\nThe mt_srand() function seeds the Mersenne Twister random number generator.\nSyntax\nParameter Values\nMT_RAND_MT19937 - uses the fixed, correct Mersenne Twister implementation (which is used from PHP 7.1)\nMT_RAND_PHP - uses the incorrect Mersenne Twister implementation (which was used up to PHP 7.1)\nTechnical Details",
      "examples": [
        "<?php\nmt_srand(mktime());\necho(mt_rand());\n?>",
        "mt_srand(seed, mode);"
      ]
    },
    {
      "title": "PHP octdec() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nConvert octal to decimal:\nDefinition and Usage\nThe octdec() function converts an octal number to a decimal number.\nTip: To convert decimal to octal, look at the decoct() function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho octdec(\"36\") . \"<br>\";\necho octdec(\"12\") . \"<br>\";\necho octdec(\"3063\") . \"<br>\";\necho octdec(\"106\");\n?>",
        "octdec(octal_string);"
      ]
    },
    {
      "title": "PHP pi() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nReturn the value of PI:\nDefinition and Usage\nThe pi() function returns the value of PI.\nTip: The named constant M_PI is identical to pi().\nSyntax\nTechnical Details",
      "examples": [
        "<?php\necho(pi());\n?>",
        "pi();"
      ]
    },
    {
      "title": "PHP pow() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nExamples of pow():\nDefinition and Usage\nThe pow() function returns x raised to the power of y.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(pow(2,4) . \"<br>\");\necho(pow(-2,4) . \"<br>\");\necho(pow(-2,-4) . \"<br>\");\necho(pow(-2,-3.2));\n?>",
        "pow(x,y);"
      ]
    },
    {
      "title": "PHP rad2deg() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nConvert radians to degrees:\nDefinition and Usage\nThe rad2deg() function converts a radian value to a degree value.\nTip: To convert a degree value to a radian value, look at the deg2rad() function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho rad2deg(pi()) . \"<br>\";\necho rad2deg(pi()/4);\n?>",
        "rad2deg(number);"
      ]
    },
    {
      "title": "PHP rand() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nGenerate random numbers:\nDefinition and Usage\nThe rand() function generates a random integer.\nExample tip: If you want a random integer between 10 and 100 (inclusive), use rand (10,100).\nTip: As of PHP 7.1, the rand() function has been an alias of the mt_rand() function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(rand() . \"<br>\");\necho(rand() . \"<br>\");\necho(rand(10,100));\n?>",
        "rand();\n\nor\n\nrand(min,max);"
      ]
    },
    {
      "title": "PHP round() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nRound numbers:\nDefinition and Usage\nThe round() function rounds a floating-point number.\nTip: To round a number UP to the nearest integer, look at the ceil() function.\nTip: To round a number DOWN to the nearest integer, look at the floor() function.\nSyntax\nParameter Values\nPHP_ROUND_HALF_UP - Default. Rounds number up to precision decimal, when it is half way there. Rounds 1.5 to 2 and -1.5 to -2\nPHP_ROUND_HALF_DOWN - Round number down to precision decimal places, when it is half way there. Rounds 1.5 to 1 and -1.5 to -1\nPHP_ROUND_HALF_EVEN - Round number to precision decimal places towards the next even value\nPHP_ROUND_HALF_ODD - Round number to precision decimal places towards the next odd value\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nRound numbers to two decimals:\nExample\nRound numbers using the constants:",
      "examples": [
        "<?php\necho(round(0.60) . \"<br>\");\necho(round(0.50) . \"<br>\");\necho(round(0.49) . \"<br>\");\necho(round(-4.40) . \"<br>\");\necho(round(-4.60));\n?>",
        "round(number,precision,mode);",
        "<?php\necho(round(4.96754,2) . \"<br>\");\necho(round(7.045,2) . \"<br>\");\necho(round(7.055,2));\n?>",
        "<?php\necho(round(1.5,0,PHP_ROUND_HALF_UP) . \"<br>\");\necho(round(-1.5,0,PHP_ROUND_HALF_UP) . \"<br>\");\n\necho(round(1.5,0,PHP_ROUND_HALF_DOWN) . \"<br>\");\necho(round(-1.5,0,PHP_ROUND_HALF_DOWN) . \"<br>\");\n\necho(round(1.5,0,PHP_ROUND_HALF_EVEN) . \"<br>\");\necho(round(-1.5,0,PHP_ROUND_HALF_EVEN) . \"<br>\");\n\necho(round(1.5,0,PHP_ROUND_HALF_ODD) . \"<br>\");\necho(round(-1.5,0,PHP_ROUND_HALF_ODD));\n?>"
      ]
    },
    {
      "title": "PHP sin() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nReturn the sine of different numbers:\nDefinition and Usage\nThe sin() function returns the sine of a number.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(sin(3) . \"<br>\");\necho(sin(-3) . \"<br>\");\necho(sin(0) . \"<br>\");\necho(sin(M_PI) . \"<br>\");\necho(sin(M_PI_2));\n?>",
        "sin(number);"
      ]
    },
    {
      "title": "PHP sinh() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nReturn the hyperbolic sine of different numbers:\nDefinition and Usage\nThe sinh() function returns the hyperbolic sine of a number, which is equal to (exp(number) - exp(-number))/2).\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(sinh(3) . \"<br>\");\necho(sinh(-3) . \"<br>\");\necho(sinh(0) . \"<br>\");\necho(sinh(M_PI) . \"<br>\");\necho(sinh(M_PI_2));\n?>",
        "sinh(number);"
      ]
    },
    {
      "title": "PHP sqrt() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nReturn the square root of different numbers:\nDefinition and Usage\nThe sqrt() function returns the square root of a number.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(sqrt(0) . \"<br>\");\necho(sqrt(1) . \"<br>\");\necho(sqrt(9) . \"<br>\");\necho(sqrt(0.64) . \"<br>\");\necho(sqrt(-9));\n?>",
        "sqrt(number);"
      ]
    },
    {
      "title": "PHP srand() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nSeed the random number generator:\nDefinition and Usage\nThe srand() function seeds the random number generator (rand()).\nTip: From PHP 4.2.0, the random number generator is seeded automatically and there is no need to use this function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\nsrand(mktime());\necho(rand());\n?>",
        "srand(seed);"
      ]
    },
    {
      "title": "PHP tan() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nReturn the tangent of different numbers:\nDefinition and Usage\nThe tan() function returns the tangent of a number.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(tan(M_PI_4) . \"<br>\");\necho(tan(0.50) . \"<br>\");\necho(tan(-0.50) . \"<br>\");\necho(tan(5) . \"<br>\");\necho(tan(10) . \"<br>\");\necho(tan(-5) . \"<br>\");\necho(tan(-10));\n?>",
        "tan(number);"
      ]
    },
    {
      "title": "PHP tanh() Function",
      "summary": "â® PHP Math Reference\nExampleGet your own PHP Server\nReturn the hyperbolic tangent of different numbers:\nDefinition and Usage\nThe tanh() function returns the hyperbolic tangent of a number, which is equal to sinh(x)/cosh(x).\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(tanh(M_PI_4) . \"<br>\");\necho(tanh(0.50) . \"<br>\");\necho(tanh(-0.50) . \"<br>\");\necho(tanh(5) . \"<br>\");\necho(tanh(10) . \"<br>\");\necho(tanh(-5) . \"<br>\");\necho(tanh(-10));\n?>",
        "tanh(number);"
      ]
    },
    {
      "title": "PHP Misc. Functions",
      "summary": "PHP Miscellaneous Introduction\nThe misc. functions were only placed here because none of the other categories seemed to fit.\nInstallation\nThe misc. functions are part of the PHP core. No installation is required to use these functions.\nRuntime Configuration\nThe behavior of the misc. functions is affected by settings in the php.ini file.\nMisc. configuration options:\nREMOVE ADS\nPHP Miscellaneous Functions\nPHP Predefined Misc. Constants",
      "examples": []
    },
    {
      "title": "PHP connection_aborted() Function",
      "summary": "â® PHP Misc Reference\nExampleGet your own PHP Server\nCreate a function (check_abort()) that writes a log message if a client aborts the script:\nDefinition and Usage\nThe connection_aborted() function checks whether the client has disconnected.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\nfunction check_abort()\n{\nif (connection_aborted())\nerror_log (\"Script $GLOBALS[SCRIPT_NAME]\" .\n\"$GLOBALS[SERVER_NAME] was aborted by the user.\");\n}\n\n// Some script to be executed here\n\n// Call the check_abort function when the script ends\nregister_shutdown_function(\"check_abort\");\n?>",
        "connection_aborted()"
      ]
    },
    {
      "title": "PHP connection_status() Function",
      "summary": "â® PHP Misc Reference\nExampleGet your own PHP Server\nReturn the connection satus:\nDefinition and Usage\nThe connection_status() function returns the current connection status.\nPossible values that can be returned are:\n0 - CONNECTION_NORMAL - connection is running normally\n1 - CONNECTION_ABORTED - connection is aborted by user or network error\n2 - CONNECTION_TIMEOUT -Â  connection timed out\n3 - CONNECTION_ABORTED & CONNECTION_TIMEOUT\nSyntax\nTechnical Details",
      "examples": [
        "<?php\nswitch (connection_status())\n{\ncase CONNECTION_NORMAL:\n$txt = 'Connection is in a normal state';\nbreak;\ncase CONNECTION_ABORTED:\n$txt = 'Connection aborted';\nbreak;\ncase CONNECTION_TIMEOUT:\n$txt = 'Connection timed out';\nbreak;\ncase (CONNECTION_ABORTED & CONNECTION_TIMEOUT):\n$txt = 'Connection aborted and timed out';\nbreak;\ndefault:\n$txt = 'Unknown';\nbreak;\n}\n\necho $txt;\n?>",
        "connection_status()"
      ]
    },
    {
      "title": "PHP connection_timeout() Function",
      "summary": "â® PHP Misc Reference\nDefinition and Usage\nThe connection_timeout() function was deprecated and removed in PHP version 4.0.5.\nThe connection_timeout() function checks whether the script has timed out.\nSyntax\nTechnical Details",
      "examples": [
        "connection_timeout()"
      ]
    },
    {
      "title": "PHP constant() Function",
      "summary": "â® PHP Misc Reference\nExampleGet your own PHP Server\nReturn the value of a constant:\nDefinition and Usage\nThe constant() function returns the value of a constant.\nNote: This function also works with class constants.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n//define a constant\ndefine(\"GREETING\",\"Hello you! How are you today?\");\n\necho constant(\"GREETING\");\n?>",
        "constant(constant)"
      ]
    },
    {
      "title": "PHP define() Function",
      "summary": "â® PHP Misc Reference\nExampleGet your own PHP Server\nDefine a case-sensitive constant:\nDefinition and Usage\nThe define() function defines a constant.\nConstants are much like variables, except for the following differences:\nA constant's value cannot be changed after it is set\nConstant names do not need a leading dollar sign ($)\nConstants can be accessed regardless of scope\nConstant values can only be strings and numbers\nSyntax\nParameter Values\nTRUE - Case-insensitive (deprecated in PHP 7.3)\nFALSE - Case-sensitive (this is default)\nTechnical Details",
      "examples": [
        "<?php\ndefine(\"GREETING\",\"Hello you! How are you today?\");\necho constant(\"GREETING\");\n?>",
        "define(name,value,case_insensitive)"
      ]
    },
    {
      "title": "PHP defined() Function",
      "summary": "â® PHP Misc Reference\nExampleGet your own PHP Server\nCheck if a constant exists:\nDefinition and Usage\nThe defined() function checks whether a constant exists.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\ndefine(\"GREETING\",\"Hello you! How are you today?\");\necho defined(\"GREETING\");\n?>",
        "defined(name)"
      ]
    },
    {
      "title": "PHP die() Function",
      "summary": "â® PHP Misc Reference\nExampleGet your own PHP Server\nPrint a message and terminate the current script:\nDefinition and Usage\nThe die() function is an alias of the exit() function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$site = \"https://www.w3schools.com/\";\nfopen($site,\"r\")\nor die(\"Unable to connect to $site\");\n?>",
        "die(message)"
      ]
    },
    {
      "title": "PHP eval() Function",
      "summary": "â® PHP Misc Reference\nExampleGet your own PHP Server\nEvaluate a string as PHP code:\nThe output of the code above will be:\nDefinition and Usage\nThe eval() function evaluates a string as PHP code.\nThe string must be valid PHP code and must end with semicolon.\nNote: A return statement will terminate the evaluation of the string immediately.\nTip: This function can be useful for storing PHP code in a database.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$string = \"beautiful\";\n$time = \"winter\";\n\n$str = 'This is a $string $time morning!';\necho $str. \"<br>\";\n\neval(\"\\$str = \\\"$str\\\";\");\necho $str;\n?>",
        "This is a $string $time morning!\nThis is a beautiful winter morning!",
        "eval(phpcode)"
      ]
    },
    {
      "title": "PHP exit() Function",
      "summary": "â® PHP Misc Reference\nExampleGet your own PHP Server\nPrint a message and exit the current script:\nDefinition and Usage\nThe exit() function prints a message and terminates the current script.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$site = \"https://www.w3schools.com/\";\nfopen($site,\"r\")\nor exit(\"Unable to connect to $site\");\n?>",
        "exit(message)"
      ]
    },
    {
      "title": "PHP get_browser() Function",
      "summary": "â® PHP Misc Reference\nExampleGet your own PHP Server\nLook up the browscap.ini file and return the capabilities of the browser:\nDefinition and Usage\nThe get_browser() function looks up the user's browscap.ini file and returns the capabilities of the user's browser.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho $_SERVER['HTTP_USER_AGENT'];\n$browser = get_browser();\nprint_r($browser);\n?>",
        "get_browser(user_agent,return_array)"
      ]
    },
    {
      "title": "PHP __halt_compiler Function",
      "summary": "â® PHP Misc Reference\nDefinition and Usage\nThe __halt_compiler() function halts the compiler execution.\nSyntax\nTechnical Details",
      "examples": [
        "__halt_compiler()"
      ]
    },
    {
      "title": "PHP highlight_file() Function",
      "summary": "â® PHP Misc Reference\nExampleGet your own PHP Server\nUsing a test file (\"test.php\") to output the file with the PHP syntax highlighted:\nThe browser output of the code above could be (depending on the content in your file):\nThe HTML output of the code above could be (View Source):\nREMOVE ADS\nDefinition and Usage\nThe highlight_file() function outputs a file with the PHP syntax highlighted. The syntax is highlighted by using HTML tags.\nTip: The colors used for syntax highlighting can be set in the php.ini file or with the ini_set() function.\nNote: When using this function, the entire file will be displayed - including passwords and any other sensitive information!\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<html>\n<body>\n<?php\nhighlight_file(\"test.php\");\n?>\n</body>\n</html>",
        "<html>\n<body>\n<?php\n\"color: #007700\">echoÂ \"COLOR: #007700\">(\"COLOR: #dd0000\">\"test.php\"\"COLOR: #007700\">);\n\"COLOR: #0000bb\">?>\n</body>\n</html>",
        "<html>\n<body>\n<code><span style=\"color: #000000\">\n&lt;html&gt;\n<br />&lt;body&gt;\n<br /><span style=\"color: #0000BB\">&lt;?php\n<br /></span><span style=\"color: #007700\">echo&nbsp;(</span><span style=\"color: #DD0000\">\"test.php\"</span><span style=\"color: #007700\">);\n<br /></span><span style=\"color: #0000BB\">?&gt;\n<br /></span>&lt;/body&gt;\n<br />&lt;/html&gt;</span>\n</code>\n</body>\n</html>",
        "highlight_file(filename,return)"
      ]
    },
    {
      "title": "PHP highlight_string() Function",
      "summary": "â® PHP Misc Reference\nExampleGet your own PHP Server\nOutput a string with the PHP syntax highlighted:\nThe browser output of the code above will be:\nThe HTML output of the code above will be (View Source):\nDefinition and Usage\nThe highlight_string() function outputs a string with the PHP syntax highlighted. The string is highlighted by using HTML tags.\nThe colors used for syntax highlighting can be set in the php.ini file or with the ini_set() function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<html>\n<body>\n<?php\nhighlight_string(\"Hello world! <?php phpinfo(); ?>\");\n?>\n</body>\n</html>",
        "HelloÂ world!Â <?phpÂ phpinfo\"color:#007700\">();Â \"color:#0000bb\">?>",
        "<html>\n<body>\n<code>\n<span style=\"color: #000000\">Hello&nbsp;world!&nbsp;\n<span style=\"color: #0000BB\">&lt;?php&nbsp;phpinfo</span>\n<span style=\"color: #007700\">();&nbsp;</span>\n<span style=\"color: #0000BB\">?&gt;</span>\n</span>\n</code>\n</body>\n</html>",
        "highlight_string(string,return)"
      ]
    },
    {
      "title": "PHP hrtime() Function",
      "summary": "â® PHP Misc Reference\nExampleGet your own PHP Server\nReturn the system's high resolution time:\nThe output of the code above could be something like this:\nDefinition and Usage\nThe hrtime() function returns the system's high resolution time.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<html>\n<body>\n<?php\necho hrtime();\n?>\n</body>\n</html>",
        "233568471904329635",
        "hrtime(return_as_num)"
      ]
    },
    {
      "title": "PHP ignore_user_abort() Function",
      "summary": "â® PHP Misc Reference\nExampleGet your own PHP Server\nSet to false (default) - client aborts will cause the script to stop running:\nThe output of the code above could be:\nDefinition and Usage\nThe ignore_user_abort() function sets whether a user should abort a script execution when he/she disconnects.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\nignore_user_abort();\n?>",
        "0",
        "ignore_user_abort(setting)"
      ]
    },
    {
      "title": "PHP pack() Function",
      "summary": "â® PHP Misc Reference\nExampleGet your own PHP Server\nPack data into a binary string:\nDefinition and Usage\nThe pack() function packs data into a binary string.\nSyntax\nParameter Values\nPossible values:\na - NUL-padded string\nA - SPACE-padded string\nh - Hex string, low nibble first\nH - Hex string, high nibble first\nc - signed char\nC - unsigned char\ns - signed short (always 16 bit, machine byte order)\nS - unsigned short (always 16 bit, machine byte order)\nn - unsigned short (always 16 bit, big endian byte order)\nv - unsigned short (always 16 bit, little endian byte order)\ni - signed integer (machine dependent size and byte order)\nI - unsigned integer (machine dependent size and byte order)\nl - signed long (always 32 bit, machine byte order)\nL - unsigned long (always 32 bit, machine byte order)\nN - unsigned long (always 32 bit, big endian byte order)\nV - unsigned long (always 32 bit, little endian byte order)\nq - signed long long (always 64 bit, machine byte order)\nQ - unsigned long long (always 64 bit, machine byte order)\nJ - unsigned long long (always 64 bit, big endian byte order)\nP - unsigned long long (always 64 bit, little endian byte order)\nf - float (machine dependent size and representation)\ng - float (machine dependent size, little endian byte order)\nG - float (machine dependent size, big endian byte order)\nd - double (machine dependent size and representation)\ne - double (machine dependent size, little endian byte order)\nE - double (machine dependent size, big endian byte order)\nx - NUL byte\nX - Back up one byte\nZ - NUL-padded string\n@ - NUL-fill to absolute position\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nPack data into a binary string:",
      "examples": [
        "<?php\necho pack(\"C3\",80,72,80);\n?>",
        "pack(format,args+)",
        "<?php\necho pack(\"C*\",80,72,80);\n?>"
      ]
    },
    {
      "title": "PHP php_strip_whitespace() Function",
      "summary": "â® PHP Misc Reference\nExampleGet your own PHP Server\nReturn the source code of the \"test.php\" file with PHP comments and whitespace removed:\nIf you select \"View source\" in the browser window, it will look like this:\nDefinition and Usage\nThe php_strip_whitespace() function returns the source code of the specified file with PHP comments and whitespace removed.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n// PHP comment\n\n/*\n* Another PHP comment\n*/\n\necho php_strip_whitespaceÂ Â Â Â Â Â Â (\"test.php\");\n?>",
        "<?php\necho php_strip_whitespace (\"test.php\"); ?>",
        "php_strip_whitespace(filename)"
      ]
    },
    {
      "title": "PHP show_source() Function",
      "summary": "â® PHP Misc Reference\nExampleGet your own PHP Server\nUsing a test file (\"test.php\") to output the file with the PHP syntax highlighted:\nThe browser output of the code above could be (depending on the content in your file):\nThe HTML output of the code above could be (View Source):\nREMOVE ADS\nDefinition and Usage\nThe show_source() function outputs a file with the PHP syntax highlighted. The syntax is highlighted by using HTML tags.\nThe colors used for highlighting can be set in the php.ini file or with the ini_set() function.\nshow_source() is an alias of highlight_file().\nNote: When using this function, the entire file will be displayed - including passwords and any other sensitive information!\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<html>\n<body>\n<?php\nshow_source(\"test.php\");\n?>\n</body>\n</html>",
        "<html>\n<body>\n<?php\n\"color: #007700\">echoÂ \"COLOR: #007700\">(\"COLOR: #dd0000\">\"test.php\"\"COLOR: #007700\">);\n\"COLOR: #0000bb\">?>\n</body>\n</html>",
        "<html>\n<body>\n<code><span style=\"color: #000000\">\n&lt;html&gt;\n<br />&lt;body&gt;\n<br /><span style=\"color: #0000BB\">&lt;?php\n<br /></span><span style=\"color: #007700\">echo&nbsp;(</span><span style=\"color: #DD0000\">\"test.php\"</span><span style=\"color: #007700\">);\n<br /></span><span style=\"color: #0000BB\">?&gt;\n<br /></span>&lt;/body&gt;\n<br />&lt;/html&gt;</span>\n</code>\n</body>\n</html>",
        "show_source(filename,return)"
      ]
    },
    {
      "title": "PHP sleep() Function",
      "summary": "â® PHP Misc Reference\nExampleGet your own PHP Server\nDelay execution of the current script for 3 seconds:\nDefinition and Usage\nThe sleep() function delays execution of the current script for a specified number of seconds.\nNote: This function throws an error if the specified number of seconds is negative.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho date('h:i:s') . \"<br>\";\n\n//sleep for 3 seconds\nsleep(3);\n\n//start again\necho date('h:i:s');\n?>",
        "sleep(seconds)"
      ]
    },
    {
      "title": "PHP sys_getloadavg() Function",
      "summary": "â® PHP Misc Reference\nExampleGet your own PHP Server\nCheck the system load average. If it is over 0.8, stop script and display a message:\nDefinition and Usage\nThe sys_getloadavg() function returns the system load average.\nThis function returns an array with three numbers that represents the average system load over the last 1, 5 and 15 minutes.\nNote: This function does not work on Windows platforms.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\n$loadtime = sys_getloadavg();\nif ($loadtime[0] > 0.80) {\ndie('Sorry, server is busy.');\n}\n?>",
        "sys_getloadavg()"
      ]
    },
    {
      "title": "PHP time_nanosleep() Function",
      "summary": "â® PHP Misc Reference\nExampleGet your own PHP Server\nDelay execution of the current script for 2,5 seconds:\nDefinition and Usage\nThe time_nanosleep() function delays execution of the current script for a specified number of seconds and nanoseconds.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\nif (time_nanosleep(2,500000000) === true)\n{\necho \"Slept for 2,5 seconds\";\n}\n?>",
        "time_nanosleep(seconds,nanoseconds)"
      ]
    },
    {
      "title": "PHP time_sleep_until() Function",
      "summary": "â® PHP Misc Reference\nExampleGet your own PHP Server\nLet the script sleep for 3 seconds:\nDefinition and Usage\nThe time_sleep_until() function is used to make a script sleep until the specified time.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\ntime_sleep_until(time()+3);\necho \"Hello\";\n?>",
        "time_sleep_until(timestamp)"
      ]
    },
    {
      "title": "PHP uniqid() Function",
      "summary": "â® PHP Misc Reference\nExampleGet your own PHP Server\nGenerate a unique ID:\nDefinition and Usage\nThe uniqid() function generates a unique ID based on the microtime (the current time in microseconds).\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho uniqid();\n?>",
        "uniqid(prefix,more_entropy)"
      ]
    },
    {
      "title": "PHP unpack() Function",
      "summary": "â® PHP Misc Reference\nExampleGet your own PHP Server\nUnpack data from a binary string:\nDefinition and Usage\nThe unpack() function unpacks data from a binary string.\nSyntax\nParameter Values\nPossible values:\na - NUL-padded string\nA - SPACE-padded string\nh - Hex string, low nibble first\nH - Hex string, high nibble first\nc - signed char\nC - unsigned char\ns - signed short (always 16 bit, machine byte order)\nS - unsigned short (always 16 bit, machine byte order)\nn - unsigned short (always 16 bit, big endian byte order)\nv - unsigned short (always 16 bit, little endian byte order)\ni - signed integer (machine dependent size and byte order)\nI - unsigned integer (machine dependent size and byte order)\nl - signed long (always 32 bit, machine byte order)\nL - unsigned long (always 32 bit, machine byte order)\nN - unsigned long (always 32 bit, big endian byte order)\nV - unsigned long (always 32 bit, little endian byte order)\nq - signed long long (always 64 bit, machine byte order)\nQ - unsigned long long (always 64 bit, machine byte order)\nJ - unsigned long long (always 64 bit, big endian byte order)\nP - unsigned long long (always 64 bit, little endian byte order)\nf - float (machine dependent size and representation)\ng - float (machine dependent size, little endian byte order)\nG - float (machine dependent size, big endian byte order)\nd - double (machine dependent size and representation)\ne - double (machine dependent size, little endian byte order)\nE - double (machine dependent size, big endian byte order)\nx - NUL byte\nX - Back up one byte\nZ - NUL-padded string\n@ - NUL-fill to absolute\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nUnpack data:\nExample\nUnpack data:",
      "examples": [
        "<?php\n$data = \"PHP\";\nprint_r(unpack(\"C*\",$data));\n?>",
        "unpack(format,data)",
        "<?php\n$data = \"PHP\";\nprint_r(unpack(\"C*myint\",$data));\n?>",
        "<?php\n$bin = pack(\"c2n2\",0x1234,0x5678,65,66);\nprint_r(unpack(\"c2chars/n2int\",$bin));\n?>"
      ]
    },
    {
      "title": "PHP usleep() Function",
      "summary": "â® PHP Misc Reference\nExampleGet your own PHP Server\nDelay execution of the current script for 3 seconds (3000000 microseconds):\nDefinition and Usage\nThe usleep() function delays execution of the current script for a specified number of microseconds (a microsecond equals one millionth of a second).\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho date('h:i:s') . \"<br>\";\n\n//sleep for 3 seconds\nusleep(3000000);\n\n//start again\necho date('h:i:s');\n?>",
        "usleep(microseconds)"
      ]
    },
    {
      "title": "PHP MySQLi Functions",
      "summary": "PHP MySQLi Introduction\nThe MySQLi functions allows you to access MySQL database servers.\nNote: The MySQLi extension is designed to work with MySQL version 4.1.13 or newer.\nInstallation / Runtime Configuration\nFor the MySQLi functions to be available, you must compile PHP with support for the MySQLi extension.\nThe MySQLi extension was introduced with PHP version 5.0.0. The MySQL Native Driver was included in PHP version 5.3.0.\nFor installation details, go to: http://php.net/manual/en/mysqli.installation.php\nFor runtime configuration details, go to: http://php.net/manual/en/mysqli.configuration.php\nPHP MySQLi Functions",
      "examples": []
    },
    {
      "title": "PHP mysqli affected_rows Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nReturn the number of affected rows from different queries:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe affected_rows / mysqli_affected_rows() function returns the number of affected rows in the previous SELECT, INSERT, UPDATE, REPLACE, or DELETE query.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nReturn the number of affected rows from different queries:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n// Perform queries and print out affected rows\n$mysqli -> query(\"SELECT * FROM Persons\");\necho \"Affected rows: \" . $mysqli -> affected_rows;\n\n$mysqli -> query(\"DELETE FROM Persons WHERE Age>32\");\necho \"Affected rows: \" . $mysqli -> affected_rows;\n\n$mysqli -> close();\n?>",
        "$mysqli -> affected_rows",
        "mysqli_affected_rows(connection)",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\n// Perform queries and print out affected rows\nmysqli_query($con, \"SELECT * FROM Persons\");\necho \"Affected rows: \" . mysqli_affected_rows($con);\n\nmysqli_query($con, \"DELETE FROM Persons WHERE Age>32\");\necho \"Affected rows: \" . mysqli_affected_rows($con);\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli autocommit() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nTurn off auto-committing, make some queries, then commit the queries:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe autocommit() / mysqli_autocommit() function turns on or off auto-committing database modifications.\nTip: Also look at the commit() function, which commits the current transaction for the specified database connection, and the rollback() function, which rolls back the current transaction.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nTurn off auto-committing, make some queries, then commit the queries:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n// Turn autocommit off\n$mysqli -> autocommit(FALSE);\n\n// Insert some values\n$mysqli -> query(\"INSERT INTO Persons (FirstName,LastName,Age)\nVALUES ('Peter','Griffin',35)\");\n$mysqli -> query(\"INSERT INTO Persons (FirstName,LastName,Age)\nVALUES ('Glenn','Quagmire',33)\");\n\n// Commit transaction\nif (!$mysqli -> commit()) {\necho \"Commit transaction failed\";\nexit();\n}\n\n$mysqli -> close();\n?>",
        "$mysqli -> autocommit(mode)",
        "mysqli_autocommit(connection, mode)",
        "<?php\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno())Â {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit;\n}\n\n// Turn autocommit off\nmysqli_autocommit($con,FALSE);\n\n// Insert some values\nmysqli_query($con,\"INSERT INTO Persons (FirstName,LastName,Age)\nVALUES ('Peter','Griffin',35)\");\nmysqli_query($con,\"INSERT INTO Persons (FirstName,LastName,Age)\nVALUES ('Glenn','Quagmire',33)\");\n\n// Commit transaction\nif (!$mysqli_commit($con)) {\necho \"Commit transaction failed\";\nexit();\n}\n\n// Close connection\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli change_user() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nChange the user of the specified database connection:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe change_user() / mysqli_change_user() function changes the user of the specified database connection, and sets the current database.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nChange the user of the specified database connection:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n// Reset all and select a new database\n$mysqli -> change_user(\"my_user\", \"my_password\", \"test\");\n\n$mysqli -> close();\n?>",
        "$mysqli -> change_user(username, password, dbname)",
        "mysqli_change_user(connection, username, password, dbname)",
        "<?php\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\n// Check connection\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\n// Reset all and select a new database\nmysqli_change_user($con, \"my_user\", \"my_password\", \"test\");\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli character_set_name() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nReturn the default character set for the database connection:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe character_set_name() / mysqli_character_set_name() function returns the default character set for the database connection.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nReturn the default character set for the database connection:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n$charset = $mysqli -> character_set_name();\necho \"Default character set is: \" . $charset;\n\n$mysqli -> close();\n?>",
        "$mysqli -> character_set_name()",
        "mysqli_character_set_name(connection)",
        "<?php\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\n$charset=mysqli_character_set_name($con);\necho \"Default character set is: \" . $charset;\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli close() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nClose a previously opened database connection:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe close() / mysqli_close() function closes a previously opened database connection.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nClose a previously opened database connection:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n// ....some PHP code...\n\n$mysqli -> close();\n?>",
        "$mysqli -> close()",
        "mysqli_close(connection)",
        "<?php\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno())Â {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit;\n}\n\n// ....some PHP code...\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli commit() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nTurn off auto-committing, make some queries, then commit the queries:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe commit() / mysqli_commit() function commits the current transaction for the specified database connection.\nTip: Also look at the autocommit() function, which turns on or off auto-committing database modifications, and the rollback() function, which rolls back the current transaction.\nSyntax\nParameter Values\nMYSQLI_TRANS_COR_AND_CHAIN - Appends \"AND CHAIN\"\nMYSQLI_TRANS_COR_AND_NO_CHAIN - Appends \"AND NO CHAIN\"\nMYSQLI_TRANS_COR_RELEASE - Appends \"RELEASE\"\nMYSQLI_TRANS_COR_NO_RELEASE - Appends \"NO RELEASE\"\nTechnical Details\nExample - Procedural style\nTurn off auto-committing, make some queries, then commit the queries:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n// Turn autocommit off\n$mysqli -> autocommit(FALSE);\n\n// Insert some values\n$mysqli -> query(\"INSERT INTO Persons (FirstName,LastName,Age)\nVALUES ('Peter','Griffin',35)\");\n$mysqli -> query(\"INSERT INTO Persons (FirstName,LastName,Age)\nVALUES ('Glenn','Quagmire',33)\");\n\n// Commit transaction\nif (!$mysqli -> commit()) {\necho \"Commit transaction failed\";\nexit();\n}\n\n$mysqli -> close();\n?>",
        "$mysqli -> commit(flags, name)",
        "mysqli_commit(connection, flags, name)",
        "<?php\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno())Â {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit;\n}\n\n// Turn autocommit off\nmysqli_autocommit($con,FALSE);\n\n// Insert some values\nmysqli_query($con,\"INSERT INTO Persons (FirstName,LastName,Age)\nVALUES ('Peter','Griffin',35)\");\nmysqli_query($con,\"INSERT INTO Persons (FirstName,LastName,Age)\nVALUES ('Glenn','Quagmire',33)\");\n\n// Commit transaction\nif (!mysqli_commit($con)) {\necho \"Commit transaction failed\";\nexit();\n}\n\n// Close connection\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli connect() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nOpen a new connection to the MySQL server:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe connect() / mysqli_connect() function opens a new connection to the MySQL server.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nOpen a new connection to the MySQL server:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\n// Check connection\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n?>",
        "$mysqli -> new mysqli(host, username, password, dbname, port, socket)",
        "mysqli_connect(host, username, password, dbname, port, socket)",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\n// Check connection\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n?>"
      ]
    },
    {
      "title": "PHP mysqli connect_errno() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nReturn an error code from the last connection error, if any:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe connect_errno / mysqli_connect_errno() function returns the error code from the last connection error, if any.\nSyntax\nTechnical Details\nExample - Procedural style\nReturn an error code from the last connection error, if any:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\n// Check connection\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n?>",
        "$mysqli -> connect_errno",
        "mysqli_connect_errno()",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\n// Check connection\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n?>"
      ]
    },
    {
      "title": "PHP mysqli connect_error() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nReturn the error description from the last connection error, if any:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe connect_error / mysqli_connect_error() function returns the error description from the last connection error, if any.\nSyntax\nTechnical Details\nExample - Procedural style\nReturn the error description from the last connection error, if any:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\n// Check connection\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n?>",
        "$mysqli -> connect_error",
        "mysqli_connect_error();",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\n// Check connection\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n?>"
      ]
    },
    {
      "title": "PHP mysqli_data_seek() Function",
      "summary": "â® PHP MySQLi Reference\nExampleGet your own PHP Server\nSeek to row number 15 in the result-set:\nDefinition and Usage\nThe mysqli_data_seek() function adjusts the result pointer to an arbitrary row in the result-set.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n// Check connection\nif (mysqli_connect_errno())\n{\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n}\n\n$sql=\"SELECT Lastname,Age FROM Persons ORDER BY Lastname\";\n\nif ($result=mysqli_query($con,$sql))\n{\n// Seek to row number 15\nmysqli_data_seek($result,14);\n\n// Fetch row\n$row=mysqli_fetch_row($result);\n\nprintf (\"Lastname: %s Age: %s\\n\", $row[0], $row[1]);\n\n// Free result set\nmysqli_free_result($result);\n}\n\nmysqli_close($con);\n?>",
        "mysqli_data_seek(result,offset);"
      ]
    },
    {
      "title": "PHP mysqli_debug() Function",
      "summary": "â® PHP MySQLi Reference\nExampleGet your own PHP Server\nCreate a trace file in \"/temp/client.trace\" on the local machine:\nDefinition and Usage\nThe mysqli_debug() function is used to perform debugging operations.\nNote: In order to use this function, you must compile the MySQL client library to support debugging.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\nmysqli_debug(\"d:t:o,/temp/client.trace\");\n?>",
        "mysqli_debug(message);"
      ]
    },
    {
      "title": "PHP mysqli dump_debug_info() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nDump debug info into the log:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe dump_debug_info() / mysqli_dump_debug_info() function dumps debugging info into the log.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nDump debug info into the log:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\n$mysqli -> dump_debug_info();\n?>",
        "$mysqli -> dump_debug_info()",
        "mysqli_dump_debug_info(link);",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nmysqli_dump_debug_info($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli errno() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nReturn the last error code for the most recent function call, if any:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe errno / mysqli_errno() function returns the last error code for the most recent function call, if any.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nReturn the last error code for the most recent function call, if any:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n// Perform a query, check for error\nif (!$mysqli -> query(\"INSERT INTO Persons (FirstName) VALUES ('Glenn')\")) {\necho(\"Errorcode: \" . $mysqli -> errno);\n}\n\n$mysqli -> close();\n?>",
        "$mysqli -> errno",
        "mysqli_errno(connection)",
        "<?php\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\n// Perform a query, check for error\nif (!mysqli_query($con,\"INSERT INTO Persons (FirstName) VALUES ('Glenn')\")) {\necho(\"Errorcode: \" . mysqli_errno($con));\n}\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli error() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nReturn the last error description for the most recent function call, if any:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe error / mysqli_error() function returns the last error description for the most recent function call, if any.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural Oriented style\nReturn the last error description for the most recent function call, if any:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n// Perform a query, check for error\nif (!$mysqli -> query(\"INSERT INTO Persons (FirstName) VALUES ('Glenn')\")) {\necho(\"Error description: \" . $mysqli -> error);\n}\n\n$mysqli -> close();\n?>",
        "$mysqli -> error",
        "mysqli_error(connection)",
        "<?php\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\n// Perform a query, check for error\nif (!mysqli_query($con,\"INSERT INTO Persons (FirstName) VALUES ('Glenn')\")) {\necho(\"Error description: \" . mysqli_error($con));\n}\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli error_list() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nReturn a list of errors from the last executed command, if any:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe error_list / mysqli_error_list() function returns a list of errors from the last executed command, if any.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nReturn a list of errors from the last executed command, if any:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n// Perform a query, check for error\nif (!$mysqli -> query(\"INSERT INTO Persons (FirstName) VALUES ('Glenn')\")) {\nprint_r($mysqli -> error_list);\n}\n\n$mysqli -> close();\n?>",
        "$mysqli -> error_list",
        "mysqli_error_list(connection)",
        "<?php\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno())Â {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\n// Perform a query, check for error\nif (!mysqli_query($con,\"INSERT INTO Persons (FirstName) VALUES ('Glenn')\")) {\nprint_r(mysqli_error_list($con));\n}\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli fetch_all() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nFetch all rows and return the result-set as an associative array:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe fetch_all() / mysqli_fetch_all() function fetches all result rows and returns the result-set as an associative array, a numeric array, or both.\nNote: This function is available only with MySQL Native Driver.\nSyntax\nParameter Values\nMYSQLI_ASSOC\nMYSQLI_NUM (this is default)\nMYSQLI_BOTH\nTechnical Details\nExample - Procedural style\nFetch all rows and return the result-set as an associative array:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n$sql = \"SELECT Lastname, Age FROM Persons ORDER BY Lastname\";\n$result = $mysqli -> query($sql);\n\n// Fetch all\n$result -> fetch_all(MYSQLI_ASSOC);\n\n// Free result set\n$result -> free_result();\n\n$mysqli -> close();\n?>",
        "$mysqli_result -> fetch_all(resulttype)",
        "mysqli_fetch_all(result, resulttype)",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno())Â {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\n$sql = \"SELECT Lastname, Age FROM Persons ORDER BY Lastname\";\n$result = mysqli_query($con, $sql);\n\n// Fetch all\nmysqli_fetch_all($result, MYSQLI_ASSOC);\n\n// Free result set\nmysqli_free_result($result);\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli fetch_array() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nFetch a result row as a numeric array and as an associative array:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe fetch_array() / mysqli_fetch_array() function fetches a result row as an associative array, a numeric array, or both.\nNote: Fieldnames returned from this function are case-sensitive.\nSyntax\nParameter Values\nMYSQLI_ASSOC\nMYSQLI_NUM\nMYSQLI_BOTH (this is default)\nTechnical Details\nExample - Procedural style\nFetch a result row as a numeric array and as an associative array:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n$sql = \"SELECT Lastname, Age FROM Persons ORDER BY Lastname\";\n$result = $mysqli -> query($sql);\n\n// Numeric array\n$row = $result -> fetch_array(MYSQLI_NUM);\nprintf (\"%s (%s)\\n\", $row[0], $row[1]);\n\n// Associative array\n$row = $result -> fetch_array(MYSQLI_ASSOC);\nprintf (\"%s (%s)\\n\", $row[\"Lastname\"], $row[\"Age\"]);\n\n// Free result set\n$result -> free_result();\n\n$mysqli -> close();\n?>",
        "$mysqli_result -> fetch_array(resulttype)",
        "mysqli_fetch_array(result,resulttype)",
        "<?php\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\n$sql = \"SELECT Lastname, Age FROM Persons ORDER BY Lastname\";\n$result = mysqli_query($con,$sql);\n\n// Numeric array\n$row = mysqli_fetch_array($result, MYSQLI_NUM);\nprintf (\"%s (%s)\\n\", $row[0], $row[1]);\n\n// Associative array\n$row = mysqli_fetch_array($result, MYSQLI_ASSOC);\nprintf (\"%s (%s)\\n\", $row[\"Lastname\"], $row[\"Age\"]);\n\n// Free result set\nmysqli_free_result($result);\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli fetch_assoc() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nFetch a result row as an associative array:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe fetch_assoc() / mysqli_fetch_assoc() function fetches a result row as an associative array.\nNote: Fieldnames returned from this function are case-sensitive.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nFetch a result row as an associative array:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n$sql = \"SELECT Lastname, Age FROM Persons ORDER BY Lastname\";\n$result = $mysqli -> query($sql);\n\n// Associative array\n$row = $result -> fetch_assoc();\nprintf (\"%s (%s)\\n\", $row[\"Lastname\"], $row[\"Age\"]);\n\n// Free result set\n$result -> free_result();\n\n$mysqli -> close();\n?>",
        "$mysqli_result -> fetch_assoc()",
        "mysqli_fetch_assoc(result)",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\n$sql = \"SELECT Lastname, Age FROM Persons ORDER BY Lastname\";\n$result = mysqli_query($con, $sql);\n\n// Associative array\n$row = mysqli_fetch_assoc($result);\nprintf (\"%s (%s)\\n\", $row[\"Lastname\"], $row[\"Age\"]);\n\n// Free result set\nmysqli_free_result($result);\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli fetch_field() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nReturn the next field (column) in the result-set, then print each field's name, table, and max length:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe fetch_field() / mysqli_fetch_field() function returns the next field (column) in the result-set, as an object.\nSyntax\nParameter Values\nTechnical Details\nname - name of the column\norgname - original column name (if an alias is specified)\ntable - name of table\norgtable - original table name (if an alias is specified)\ndef - reserved for default values, currently always \"\"\ndb - database (new in PHP 5.3.6)\ncatalog - catalog name, always \"def\" (since PHP 5.3.6)\nmax_length - maximum width of field\nlength - width of field as specified in table definition\ncharsetnr - character set number for the field\nflags - bit-flags for the field\ntype - data type used for the field\ndecimals - for integer fields; the number of decimals used\nExample - Procedural style\nReturn the next field (column) in the result-set, then print each field's name, table, and max length:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n$sql = \"SELECT Lastname, Age FROM Persons ORDER BY Lastname\";\n\nif ($result = $mysqli -> query($sql)) {\n// Get field information for all fields\nwhile ($fieldinfo = $result -> fetch_field()) {\nprintf(\"Name: %s\\n\", $fieldinfo -> name);\nprintf(\"Table: %s\\n\", $fieldinfo -> table);\nprintf(\"Max. Len: %d\\n\", $fieldinfo -> max_length);\n}\n$result -> free_result();\n}\n\n$mysqli -> close();\n?>",
        "$mysqli_result -> fetch_field()",
        "mysqli_fetch_field(result)",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\n$sql = \"SELECT Lastname, Age FROM Persons ORDER BY Lastname\";\n\nif ($result = mysqli_query($con, $sql)) {\n// Get field information for all fields\nwhile ($fieldinfo = mysqli_fetch_field($result)) {\nprintf(\"Name: %s\\n\", $fieldinfo -> name);\nprintf(\"Table: %s\\n\", $fieldinfo -> table);\nprintf(\"max. Len: %d\\n\", $fieldinfo -> max_length);\n}\nmysqli_free_result($result);\n}\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli fetch_field_direct() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nReturn meta-data for a single field in the result-set, then print the field's name, table, and max length:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe fetch_field_direct() / mysqli_fetch_field_direct() function returns meta-data for a single field in a result-set, as an object.\nSyntax\nParameter Values\nTechnical Details\nname - name of the column\norgname - original column name (if an alias is specified)\ntable - name of table\norgtable - original table name (if an alias is specified)\ndef - default value for this field\nmax_length - maximum width of field\nlength - width of field as specified in table definition\ncharsetnr - character set number for the field\nflags - bit-flags for the field\ntype - data type used for the field\ndecimals - for integer fields; the number of decimals used\nExample - Procedural style\nReturn meta-data for a single field in the result-set, then print the field's name, table, and max length:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n$sql = \"SELECT Lastname, Age FROM Persons ORDER BY Lastname\";\n\nif ($result = $mysqli -> query($sql)) {\n\n// Get field information for column \"Age\"\n$fieldinfo = $result -> fetch_field_direct(1);\n\nprintf(\"Name: %s\\n\", $fieldinfo -> name);\nprintf(\"Table: %s\\n\", $fieldinfo -> table);\nprintf(\"Max. Len: %d\\n\", $fieldinfo -> max_length);\n$result -> free_result();\n}\n\n$mysqli -> close();\n?>",
        "$mysqli_result -> fetch_field_direct(fieldnr)",
        "mysqli_fetch_field_direct(result, fieldnr)",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno())Â {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\n$sql = \"SELECT Lastname, Age FROM Persons ORDER BY Lastname\";\n\nif ($result = mysqli_query($con, $sql)) {\n\n// Get field information for column \"Age\"\n$fieldinfo = mysqli_fetch_field_direct($result, 1);\n\nprintf(\"Name: %s\\n\", $fieldinfo -> name);\nprintf(\"Table: %s\\n\", $fieldinfo -> table);\nprintf(\"Max. Len: %d\\n\", $fieldinfo -> max_length);\n\nmysqli_free_result($result);\n}\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli fetch_fields() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nReturn an array of objects that represent the fields in a result-set, then print each field's name, table, and max length:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe fetch_fields() / mysqli_fetch_fields() function returns an array of objects that represent the fields in a result-set.\nSyntax\nParameter Values\nTechnical Details\nname - name of the column\norgname - original column name (if an alias is specified)\ntable - name of table\norgtable - original table name (if an alias is specified)\nmax_length - maximum width of field\nlength - width of field as specified in table definition\ncharsetnr - character set number for the field\nflags - bit-flags for the field\ntype - data type used for the field\ndecimals - for integer fields; the number of decimals used\nExample - Procedural style\nReturn an array of objects that represent the fields in a result-set, then print each field's name, table, and max length:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n$sql = \"SELECT Lastname, Age FROM Persons ORDER BY Lastname\";\n\nif ($result = $mysqli -> query($sql)) {\n\n// Get field information for all fields\n$fieldinfo = $result -> fetch_fields();\n\nforeach ($fieldinfo as $val) {\nprintf(\"Name: %s\\n\", $val -> name);\nprintf(\"Table: %s\\n\", $val -> table);\nprintf(\"Max. Len: %d\\n\", $val -> max_length);\n}\n$result -> free_result();\n}\n\n$mysqli -> close();\n?>",
        "$mysqli_result -> fetch_fields()",
        "mysqli_fetch_fields(result)",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\n$sql = \"SELECT Lastname, Age FROM Persons ORDER BY Lastname\";\n\nif ($result = mysqli_query($con , $sql)) {\n\n// Get field information for all fields\n$fieldinfo = mysqli_fetch_fields($result);\n\nforeach ($fieldinfo as $val) {\nprintf(\"Name: %s\\n\", $val->name);\nprintf(\"Table: %s\\n\", $val->table);\nprintf(\"Max. Len: %d\\n\", $val->max_length);\n}\nmysqli_free_result($result);\n}\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP lengths / mysqli_fetch_lengths() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nReturn the length of the fields of the current row in the result-set:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe lengths / mysqli_fetch_lengths() function returns the length of the fields of the current row in the result-set.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nReturn the length of the fields of the current row in the result-set:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n$sql = \"SELECT * FROM Persons ORDER BY Lastname\";\n\nif ($result = $mysqli -> query($sql)) {\n$row = $result -> fetch_row();\n// Display field lengths\nforeach ($result -> lengths as $i => $val) {\nprintf(\"Field %2d has length: %2d\\n\", $i + 1, $val);\n}\n$result -> free_result();\n}\n\n$mysqli -> close();\n?>",
        "$mysqli_result -> lengths",
        "mysqli_fetch_lengths(result)",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\n$sql = \"SELECT * FROM Persons ORDER BY Lastname\";\n\nif ($result = mysqli_query($con, $sql)) {\n$row = mysqli_fetch_row($result);\n// Display field lengths\nforeach (mysqli_fetch_lengths($result) as $i => $val) {\nprintf(\"Field %2d has length: %2d\\n\", $i+1, $val);\n}\n\nmysqli_free_result($result);\n}\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli fetch_object() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nReturn the current row of a result set, then print each field's value:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe fetch_object() / mysqli_fetch_object() function returns the current row of a result-set, as an object.\nNote: Fieldnames returned from this function are case-sensitive.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nReturn the current row of a result set, then print each field's value:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n$sql = \"SELECT Lastname, Age FROM Persons ORDER BY Lastname\";\n\nif ($result = $mysqli -> query($sql)) {\nwhile ($obj = $result -> fetch_object()) {\nprintf(\"%s (%s)\\n\", $obj->Lastname, $obj->Age);\n}\n$result -> free_result();\n}\n\n$mysqli -> close();\n?>",
        "$mysqli_result -> fetch_object(classname, params)",
        "mysqli_fetch_object(result, classname, params)",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\n$sql = \"SELECT Lastname, Age FROM Persons ORDER BY Lastname\";\n\nif ($result = mysqli_query($con, $sql)) {\nwhile ($obj = mysqli_fetch_object($result)) {\nprintf(\"%s (%s)\\n\", $obj->Lastname, $obj->Age);\n}\nmysqli_free_result($result);\n}\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli fetch_row() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nFetch rows from a result-set:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe fetch_row() / mysqli_fetch_row() function fetches one row from a result-set and returns it as an enumerated array.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nFetch rows from a result-set:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n$sql = \"SELECT Lastname, Age FROM Persons ORDER BY Lastname\";\n\nif ($result = $mysqli -> query($sql)) {\nwhile ($row = $result -> fetch_row()) {\nprintf (\"%s (%s)\\n\", $row[0], $row[1]);\n}\n$result -> free_result();\n}\n\n$mysqli -> close();\n?>",
        "$mysqli_result -> fetch_row()",
        "mysqli_fetch_row(result)",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno())Â {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\n$sql = \"SELECT Lastname, Age FROM Persons ORDER BY Lastname\";\n\nif ($result = mysqli_query($con, $sql)) {\n// Fetch one and one row\nwhile ($row = mysqli_fetch_row($result)) {\nprintf (\"%s (%s)\\n\", $row[0], $row[1]);\n}\nmysqli_free_result($result);\n}\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli field_count() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nAssume we have a table named \"Friends\" (with 3 columns and 20 rows).\nThis example returns the number of columns for the most recent query:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe field_count() / mysqli_field_count() function returns the number of columns for the most recent query.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nAssume we have a table named \"Friends\" (with 3 columns and 20 rows).\nThis example returns the number of columns for the most recent query:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n$mysqli -> query(\"SELECT * FROM Friends\");\n// Get number of columns - will return 3\n$mysqli -> field_count();\n\n$mysqli -> close();\n?>",
        "$mysqli -> field_count()",
        "mysqli_field_count(connection)",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno())Â {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\nmysqli_query($con, \"SELECT * FROM Friends\");\n// Get number of columns - will return 3\nmysqli_field_count($con);\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli field_seek() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nSet the field cursor to the second column (\"Age\") in the result-set, get field info with fetch_field(), then print the field's name, table, and max length:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe field_seek() / mysqli_field_seek() function sets the field cursor to the given field offset.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nSet the field cursor to the second column (\"Age\") in the result-set, get field info with mysqli_fetch_field(), then print the field's name, table, and max length:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n$sql = \"SELECT Lastname, Age FROM Persons ORDER BY Lastname\";\n\nif ($result = $mysqli -> query($sql)) {\n\n// Get field information for second column\n$result = field_seek(1);\n$fieldinfo = $result -> fetch_field();\n\nprintf(\"Name: %s\\n\", $fieldinfo -> name);\nprintf(\"Table: %s\\n\", $fieldinfo -> table);\nprintf(\"Max. Len: %d\\n\", $fieldinfo -> max_length);\n$result -> free_result();\n}\n\n$mysqli -> close();\n?>",
        "$mysqli_result -> field_seek(fieldnr)",
        "mysqli_field_seek(result, fieldnr)",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno())Â {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\n$sql=\"SELECT Lastname, Age FROM Persons ORDER BY Lastname\";\n\nif ($result = mysqli_query($con,$sql)) {\n\n// Get field information for second column\nmysqli_field_seek($result, 1);\n$fieldinfo = mysqli_fetch_field($result);\n\nprintf(\"Name: %s\\n\", $fieldinfo -> name);\nprintf(\"Table: %s\\n\", $fieldinfo -> table);\nprintf(\"max. Len: %d\\n\", $fieldinfo -> max_length);\nmysqli_free_result($result);\n}\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli get_charset() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nReturn a character set object, with several properties:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe get_charset() / mysqli_get_charset() function returns a character set object with several properties for the current character set.\nSyntax\nParameter Values\nTechnical Details\ncharset - character set name\ncollation - collation name\ndir - directory the charset was fetched from or \"\"\nmin_length - min character length in bytes\nmax_length - max character length in bytes\nnumber - internal character set number\nstate - character set status\nExample - Procedural style\nReturn a character set object, with several properties:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\nvar_dump($mysqli -> get_charset());\n\n$mysqli -> close();\n?>",
        "$mysqli -> get_charset()",
        "mysqli_get_charset(connection);",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\nvar_dump(mysqli_get_charset($con));\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli get_client_info() Function",
      "summary": "â® PHP MySQLi Reference\nExampleGet your own PHP Server\nReturn the MySQL client library version:\nDefinition and Usage\nThe get_client_info() / mysqli_get_client_info() function returns the MySQL client library version.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho mysqli_get_client_info();\n?>",
        "$mysqli -> get_client_info()",
        "mysqli_get_client_info(connection)"
      ]
    },
    {
      "title": "PHP mysqli_get_client_stats() Function",
      "summary": "â® PHP MySQLi Reference\nExampleGet your own PHP Server\nReturn stats about client per-process:\nDefinition and Usage\nThe mysqli_get_client_stats() function returns client per-process statistics.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\nprint_r(mysqli_get_client_stats());\n?>",
        "mysqli_get_client_stats()"
      ]
    },
    {
      "title": "PHP client_version / mysqli get_client_version() Function",
      "summary": "â® PHP MySQLi Reference\nExampleGet your own PHP Server\nReturn the MySQL client version as an integer:\nDefinition and Usage\nThe client_version / mysqli_get_client_version() function returns the MySQL client version as an integer.\nThe MySQL client version is returned in the following format: main_version*10000 + minor_version*100 + sub_version. So, version 6.3.0 is returned as 60300.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho mysqli_get_client_version();\n?>",
        "$mysqli -> client_version",
        "mysqli_get_client_version(connection)"
      ]
    },
    {
      "title": "PHP mysqli get_connection_stats() Function",
      "summary": "â® PHP MySQLi Reference\nExampleGet your own PHP Server\nReturn stats about the client connection:\nDefinition and Usage\nThe mysqli_get_connection_stats() function returns statistics about the client connection.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\nprint_r(mysqli_get_connection_stats($con));\n?>",
        "$mysqli -> get_connection_stats()",
        "mysqli_get_connection_stats(connection)"
      ]
    },
    {
      "title": "PHP host_info() / mysqli_get_host_info() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nReturn the server hostname and connection type:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe host_info() / mysqli_get_host_info() function returns the MySQL server hostname and the connection type.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nReturn the server hostname and connection type:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\necho $mysqli -> host_info();\n\n$mysqli -> close();\n?>",
        "$mysqli -> host_info",
        "mysqli_get_host_info(connection)",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\necho mysqli_get_host_info($con);\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP protocol_version() / mysqli_get_proto_info() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nReturn the MySQL protocol version:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe mysqli_get_proto_info() function returns the MySQL protocol version.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nReturn the MySQL protocol version:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\necho $mysqli -> protocol_version;\n\n$mysqli -> close();\n?>",
        "$mysqli -> protocol_version",
        "mysqli_get_proto_info(connection)",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno())Â {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\necho mysqli_get_proto_info($con);\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP server_info / mysqli_get_server_info() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nReturn the MySQL protocol version:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe server_info / mysqli_get_server_info() function returns the MySQL server version.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nReturn the MySQL server version:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\necho $mysqli -> server_info;\n\n$mysqli -> close();\n?>",
        "$mysqli -> server_info",
        "mysqli_get_server_info(connection)",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\necho mysqli_get_server_info($con);\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP server_version / mysqli_get_server_version() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nReturn the MySQL server version as an integer:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe server_version / mysqli_get_server_version() function returns the MySQL server version as an integer.\nThe server version is returned in the following format: main_version*10000 + minor_version*100 + sub_version.Â  So, version 6.3.0 is returned as 60300.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nReturn the MySQL server version as an integer:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\necho $mysqli -> server_version;\n\n$mysqli -> close();\n?>",
        "$mysqli -> server_version",
        "mysqli_get_server_version(connection)",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno())Â {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\necho mysqli_get_server_version($con);\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli info() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nReturn information about the last executed query:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe info / mysqli_info() function returns information about the last executed query.\nThis function works with the following query types:\nINSERT INTO...SELECT...\nINSERT INTO...VALUES (...),(...),(...)\nLOAD DATA INFILE ...\nALTER TABLE ...\nUPDATE ...\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nReturn information about the last executed query:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n// Perform some queries\n$mysqli -> query(\"CREATE TABLE testPersons LIKE Persons\");\n$mysqli -> query(\"INSERT INTO testPersons SELECT * FROM Persons ORDER BY LastName\");\n\necho $mysqli -> info;\n\n$mysqli -> close();\n?>",
        "$mysqli -> info",
        "mysqli_info(connection)",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno())Â {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\n// Perform som queries\nmysqli_query($con, \"CREATE TABLE testPersons LIKE Persons\");\nmysqli_query($con, \"INSERT INTO testPersons SELECT * FROM Persons ORDER BY LastName\");\n\necho mysqli_info($con);\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli init() Function",
      "summary": "â® PHP MySQLi Reference\nExampleGet your own PHP Server\nUse of the mysqli_init() function:\nDefinition and Usage\nThe init / mysqli_init() function initializes MySQLi and returns an object to use with the mysqli_real_connect() function.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\n$con = mysqli_init();\nif (!$con) {\ndie(\"mysqli_init failed\");\n}\n\nif (!mysqli_real_connect($con,\"localhost\",\"my_user\",\"my_password\",\"my_db\")) {\ndie(\"Connect Error: \" . mysqli_connect_error());\n}\n\nmysqli_close($con);\n?>",
        "$mysqli -> init",
        "mysqli_init()"
      ]
    },
    {
      "title": "PHP mysqli insert_id() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nAssume that the \"Persons\" table has an auto-generated id field. Return the id from the last query:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe mysqli_insert_id() function returns the id (generated with AUTO_INCREMENT) from the last query.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nAssume that the \"Persons\" table has an auto-generated id field. Return the id from the last query:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n$mysqli -> query(\"INSERT INTO Persons (FirstName, LastName, Age) VALUES ('Glenn', 'Quagmire', 33)\");\n\n// Print auto-generated id\necho \"New record has id: \" . $mysqli -> insert_id;\n\n$mysqli -> close();\n?>",
        "$mysqli -> insert_id",
        "mysqli_insert_id(connection)",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno())Â {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\nmysqli_query($con, \"INSERT INTO Persons (FirstName, LastName, Age) VALUES ('Glenn', 'Quagmire', 33)\");\n\n// Print auto-generated id\necho \"New record has id: \" . mysqli_insert_id($con);\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli kill() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nReturn the thread ID for the current connection, then kill the connection:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe kill() / mysqli_kill() function asks the server to kill a MySQL thread specified by the processid parameter.\nSyntax\nParameter Values\nTechnical Details\nExample\nReturn the thread ID for the current connection, then kill the connection:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n// Get thread id\n$t_id = $mysqli -> thread_id;\n\n// Kill connection\n$mysqli -> kill($t_id);\n\n$mysqli -> close();\n?>",
        "$mysqli -> kill(processid)",
        "mysqli_kill(connection, processid)",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno())Â {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\n// Get thread id\n$t_id=mysqli_thread_id($con);\n\n// Kill connection\nmysqli_kill($con, $t_id);\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli more_results() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nPerform multiple queries against the database:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe more_results() / mysqli_more_results() function checks if there are any more query results from a multi query.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nPerform multiple queries against the database:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n$sql = \"SELECT Lastname FROM Persons ORDER BY LastName;\";\n$sql .= \"SELECT Country FROM Customers\";\n\n// Execute multi query\nif ($mysqli -> multi_query($sql)) {\ndo {\n// Store first result set\nif ($result = $mysqli -> store_result()) {\nwhile ($row = $result -> fetch_row()) {\nprintf(\"%s\\n\", $row[0]);\n}\n$result -> free_result();\n}\n// if there are more result-sets, the print a divider\nif ($mysqli -> more_results()) {\nprintf(\"-------------\\n\");\n}\n//Prepare next result set\n} while ($mysqli -> next_result());\n}\n\n$mysqli -> close();\n?>",
        "$mysqli -> more_results()",
        "mysqli_more_results(connection)",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno())Â {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\n$sql = \"SELECT Lastname FROM Persons ORDER BY LastName;\";\n$sql .= \"SELECT Country FROM Customers\";\n\n// Execute multi query\nif (mysqli_multi_query($con, $sql)) {\ndo {\n// Store first result set\nif ($result = mysqli_store_result($con)) {\nwhile ($row = mysqli_fetch_row($result)) {\nprintf(\"%s\\n\", $row[0]);\n}\nmysqli_free_result($result);\n}\n// if there are more result-sets, the print a divider\nif (mysqli_more_results($con)) {\nprintf(\"-------------\\n\");\n}\n//Prepare next result set\n} while (mysqli_next_result($con));\n}\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli multi_query() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nPerform multiple queries against the database:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe multi_query() / mysqli_multi_query() function performs one or more queries against the database. The queries are separated with a semicolon.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nPerform multiple queries against the database:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n$sql = \"SELECT Lastname FROM Persons ORDER BY LastName;\";\n$sql .= \"SELECT Country FROM Customers\";\n\n// Execute multi query\nif ($mysqli -> multi_query($sql)) {\ndo {\n// Store first result set\nif ($result = $mysqli -> store_result()) {\nwhile ($row = $result -> fetch_row()) {\nprintf(\"%s\\n\", $row[0]);\n}\n$result -> free_result();\n}\n// if there are more result-sets, the print a divider\nif ($mysqli -> more_results()) {\nprintf(\"-------------\\n\");\n}\n//Prepare next result set\n} while ($mysqli -> next_result());\n}\n\n$mysqli -> close();\n?>",
        "$mysqli -> multi_query(query)",
        "mysqli_multi_query(connection, query)",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno())Â {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\n$sql = \"SELECT Lastname FROM Persons ORDER BY LastName;\";\n$sql .= \"SELECT Country FROM Customers\";\n\n// Execute multi query\nif (mysqli_multi_query($con, $sql)) {\ndo {\n// Store first result set\nif ($result = mysqli_store_result($con)) {\nwhile ($row = mysqli_fetch_row($result)) {\nprintf(\"%s\\n\", $row[0]);\n}\nmysqli_free_result($result);\n}\n// if there are more result-sets, the print a divider\nif (mysqli_more_results($con)) {\nprintf(\"-------------\\n\");\n}\n//Prepare next result set\n} while (mysqli_next_result($con));\n}\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli next_result() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nPerform multiple queries against the database:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe next_result() / mysqli_next_result() function prepares the next result-set from multi_query().\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nPerform multiple queries against the database:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n$sql = \"SELECT Lastname FROM Persons ORDER BY LastName;\";\n$sql .= \"SELECT Country FROM Customers\";\n\n// Execute multi query\nif ($mysqli -> multi_query($sql)) {\ndo {\n// Store first result set\nif ($result = $mysqli -> store_result()) {\nwhile ($row = $result -> fetch_row()) {\nprintf(\"%s\\n\", $row[0]);\n}\n$result -> free_result();\n}\n// if there are more result-sets, the print a divider\nif ($mysqli -> more_results()) {\nprintf(\"-------------\\n\");\n}\n//Prepare next result set\n} while ($mysqli -> next_result());\n}\n\n$mysqli -> close();\n?>",
        "$mysqli -> next_result()",
        "mysqli_next_result(connection);",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno())Â {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\n$sql = \"SELECT Lastname FROM Persons ORDER BY LastName;\";\n$sql .= \"SELECT Country FROM Customers\";\n\n// Execute multi query\nif (mysqli_multi_query($con, $sql)) {\ndo {\n// Store first result set\nif ($result = mysqli_store_result($con)) {\nwhile ($row = mysqli_fetch_row($result)) {\nprintf(\"%s\\n\", $row[0]);\n}\nmysqli_free_result($result);\n}\n// if there are more result-sets, the print a divider\nif (mysqli_more_results($con)) {\nprintf(\"-------------\\n\");\n}\n//Prepare next result set\n} while (mysqli_next_result($con));\n}\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli options() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nSet extra connect options:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe options() / mysqli_options() function is used to set extra connect options and affect behavior for a connection.\nNote: This function should be called after init() and before real_connect().\nSyntax\nParameter Values\nMYSQLI_OPT_CONNECT_TIMEOUT - Set connection timeout in seconds\nMYSQLI_OPT_LOCAL_INFILE - Enable/Disable use of LOAD LOCAL INFILE\nMYSQLI_INIT_COMMAND - Set a command to execute after connecting to MySQL server\nMYSQLI_READ_DEFAULT_FILE - Set read options from named file instead of my.cnf\nMYSQLI_READ_DEFAULT_GROUP - Set read options from named group from my.cnf or the file specified in MYSQLI_READ_DEFAULT_FILE\nMYSQLI_SERVER_PUBLIC_KEY - Set RSA public key file used with SHA-256 based authentication\nMYSQLI_OPT_NET_CMD_BUFFER_SIZE - only for mysqlnd\nMYSQLI_OPT_NET_READ_BUFFER_SIZE - only for mysqlnd\nMYSQLI_OPT_INT_AND_FLOAT_NATIVE - only for mysqlnd\nMYSQLI_OPT_SSL_VERIFY_SERVER_CERT - only for mysqlnd\nTechnical Details\nExample - Procedural style\nSet extra connect options:",
      "examples": [
        "<?php\n$mysqli = mysqli_init();\nif (!$mysqli) {\ndie(\"mysqli_init failed\");\n}\n\n// Specify connection timeout\n$con -> options(MYSQLI_OPT_CONNECT_TIMEOUT, 10);\n\n// Specify read options from named file instead of my.cnf\n$con -> options(MYSQLI_READ_DEFAULT_FILE, \"myfile.cnf\");\n\n$con -> real_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n?>",
        "$mysqli -> options(option, value)",
        "mysqli_options(connection, option, value)",
        "<?php\n$con = mysqli_init();\nif (!$con) {\ndie(\"mysqli_init failed\");\n}\n\n// Specify connection timeout\nmysqli_options($con, MYSQLI_OPT_CONNECT_TIMEOUT, 10);\n\n// Specify read options from named file instead of my.cnf\nmysqli_options($con, MYSQLI_READ_DEFAULT_FILE, \"myfile.cnf\");\n\nmysqli_real_connect($con,\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n?>"
      ]
    },
    {
      "title": "PHP mysqli ping() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nPing a server connection:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe ping() / mysqli_ping() function pings a server connection, to check if the server is alive. It also tries to reconnect - if the connection has gone down.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nPing a server connection:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\n// Check connection\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n// Check if server is alive\nif ($mysqli -> ping()) {\necho \"Connection is ok!\";\n} else {\necho \"Error: \". $mysqli -> error;\n}\n\n$mysqli -> close();\n?>",
        "$mysqli -> ping()",
        "mysqli_ping(connection)",
        "<?php\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\n// Check connection\nif (mysqli_connect_errno())Â {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\n// Check if server is alive\nif (mysqli_ping($con)) {\necho \"Connection is ok!\";\n} else {\necho \"Error: \". mysqli_error($con);\n}\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli poll() Function",
      "summary": "â® PHP MySQLi Reference\nDefinition and Usage\nThe poll() / mysqli_poll() function is used to poll connections.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "$mysqli -> poll(read, error, reject, seconds, microseconds)",
        "mysqli_poll(read, error, reject, seconds, microseconds)"
      ]
    },
    {
      "title": "PHP mysqli prepare() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nPrepare an SQL statement for execution:\nDefinition and Usage\nThe prepare() / mysqli_prepare() function is used to prepare an SQL statement for execution.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\n// Check connection\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n// prepare and bind\n$stmt = $mysqli -> prepare(\"INSERT INTO MyGuests (firstname, lastname, email) VALUES (?, ?, ?)\");\n$stmt -> bind_param(\"sss\", $firstname, $lastname, $email);\n\n// set parameters and execute\n$firstname = \"John\";\n$lastname = \"Doe\";\n$email = \"john@example.com\";\n$stmt -> execute();\n\n$firstname = \"Mary\";\n$lastname = \"Moe\";\n$email = \"mary@example.com\";\n$stmt -> execute();\n\necho \"New records created successfully\";\n\n$stmt -> close();\n$mysqli -> close();\n?>",
        "$mysqli -> prepare(query)",
        "mysqli_prepare(connection, query)"
      ]
    },
    {
      "title": "PHP mysqli query() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nPerform query against a database:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe query() / mysqli_query() function performs a query against a database.\nSyntax\nParameter Values\nOptional. A constant. Can be one of the following:\nMYSQLI_USE_RESULT (Use this to retrieve large amount of data)\nMYSQLI_STORE_RESULT (This is default)\nTechnical Details\nExample - Procedural style\nPerform query against a database:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\n// Check connection\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n// Perform query\nif ($result = $mysqli -> query(\"SELECT * FROM Persons\")) {\necho \"Returned rows are: \" . $result -> num_rows;\n// Free result set\n$result -> free_result();\n}\n\n$mysqli -> close();\n?>",
        "$mysqli -> query(query, resultmode)",
        "mysqli_query(connection, query, resultmode)",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno())Â {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\n// Perform query\nif ($result = mysqli_query($con, \"SELECT * FROM Persons\")) {\necho \"Returned rows are: \" . mysqli_num_rows($result);\n// Free result set\nmysqli_free_result($result);\n}\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli real_connect() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nOpen a new connection to the MySQL server, with extra connect options:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe real_connect() / mysqli_real_connect() function opens a new connection to the MySQL server.\nThis function differs from connect() in the following ways:\nreal_connect() requires a valid object created by init()\nreal_connect() can be used with options() to set different options for the connection\nreal_connect() has a flag parameter\nSyntax\nParameter Values\nMYSQLI_CLIENT_COMPRESS - Use compression protocol\nMYSQLI_CLIENT_FOUND_ROWS - Return number of matched rows (not affected rows)\nMYSQLI_CLIENT_IGNORE_SPACE - Allow spaces after function names. Make function names reserved words\nMYSQLI_CLIENT_INTERACTIVE - Allow interactive_timeout seconds of inactivity before closing connection\nMYSQLI_CLIENT_SSL - Use SSL encryption\nMYSQLI_CLIENT_SSL_DONT_VERIFY_SERVER_CERT\nTechnical Details\nExample - Procedural style\nOpen a new connection to the MySQL server, with extra connect options:",
      "examples": [
        "<?php\n$mysqli = mysqli_init();\nif (!$mysqli) {\ndie(\"mysqli_init failed\");\n}\n\n// Specify connection timeout\n$con -> options(MYSQLI_OPT_CONNECT_TIMEOUT, 10);\n\n// Specify read options from named file instead of my.cnf\n$con -> options(MYSQLI_READ_DEFAULT_FILE, \"myfile.cnf\");\n\n$con -> real_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n?>",
        "$mysqli -> real_connect(host, username, password, dbname, port, socket, flag)",
        "mysqli_real_connect(connection, host, username, password, dbname, port, socket, flag)",
        "<?php\n$con = mysqli_init();\nif (!$con) {\ndie(\"mysqli_init failed\");\n}\n\n// Specify connection timeout\nmysqli_options($con, MYSQLI_OPT_CONNECT_TIMEOUT, 10);\n\n// Specify read options from named file instead of my.cnf\nmysqli_options($con, MYSQLI_READ_DEFAULT_FILE, \"myfile.cnf\");\n\nmysqli_real_connect($con,\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n?>"
      ]
    },
    {
      "title": "PHP mysqli real_escape_string() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nEscape special characters in strings:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe real_escape_string() / mysqli_real_escape_string() function escapes special characters in a string for use in an SQL query, taking into account the current character set of the connection.\nThis function is used to create a legal SQL string that can be used in an SQL statement. Assume we have the following code:\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nEscape special characters in strings:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n// Escape special characters, if any\n$firstname = $mysqli -> real_escape_string($_POST['firstname']);\n$lastname = $mysqli -> real_escape_string($_POST['lastname']);\n$age = $mysqli -> real_escape_string($_POST['age']);\n\n$sql=\"INSERT INTO Persons (FirstName, LastName, Age) VALUES ('$firstname', '$lastname', '$age')\";\n\nif (!$mysqli -> query($sql)) {\nprintf(\"%d Row inserted.\\n\", $mysqli->affected_rows);\n}\n\n$mysqli -> close();\n?>",
        "<?php\n\n$lastname = \"D'Ore\";\n\n$sql=\"INSERT INTO Persons (LastName) VALUES ('$lastname')\";\n\n// This query will fail, cause we didn't escape $lastname\nif (!$mysqli -> query($sql)) {\nprintf(\"%d Row inserted.\\n\", $mysqli->affected_rows);\n}\n\n?>",
        "$mysqli -> real_escape_string(escapestring)",
        "mysqli_real_escape_string(connection, escapestring)",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\n// Escape special characters, if any\n$firstname = mysqli_real_escape_string($con, $_POST['firstname']);\n$lastname = mysqli_real_escape_string($con, $_POST['lastname']);\n$age = mysqli_real_escape_string($con, $_POST['age']);\n\n$sql=\"INSERT INTO Persons (FirstName, LastName, Age) VALUES ('$firstname', '$lastname', '$age')\";\n\nif (!mysqli_query($con, $sql)) {\nprintf(\"%d Row inserted.\\n\", mysqli_affected_rows($con));\n}\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli real_query() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nExecute a single SQL query. Store the result with store_result():\nDefinition and Usage\nThe real_query() / mysqli_real_query() function executes a single SQL query. The result can be retrieved or stored with the store_result() or use_result() functions.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\n// Check connection\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n$mysqli -> real_query(\"SELECT * FROM Persons\");\n\nif ($mysqli -> field_count) {\n$result = $mysqli -> store_result();\n$row = $result -> fetch_row();\n// Free result set\n$result -> free_result();\n}\n\n$mysqli -> close();\n?>",
        "$mysqli -> real_query(query)",
        "mysqli_real_query(connection, query)"
      ]
    },
    {
      "title": "PHP mysqli reap_async_query() Function",
      "summary": "â® PHP MySQLi Reference\nDefinition and Usage\nThe reap_async_query() / mysqli_reap_async_query() function returns result from an async SQL query.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "$mysqli -> reap_async_query()",
        "mysqli_reap_async_query(connection)"
      ]
    },
    {
      "title": "PHP mysqli refresh() Function",
      "summary": "â® PHP mysqli Reference\nDefinition and Usage\nThe refresh() / mysqli_refresh() function refreshes/flushes tables or caches, or resets the replication server information.\nSyntax\nParameter Values\nMYSQLI_REFRESH_GRANT - Refreshes the grant tables\nMYSQLI_REFRESH_LOG - Flushes the logs\nMYSQLI_REFRESH_TABLES - Flushes the table cache\nMYSQLI_REFRESH_HOSTS - Flushes the host cache\nMYSQLI_REFRESH_STATUS - Resets the status variables\nMYSQLI_REFRESH_THREADS - Flushes the thread cache\nMYSQLI_REFRESH_SLAVE - Resets the master server info, and restarts the slave\nMYSQLI_REFRESH_MASTER - Removes the binary log files in the binary log index, and truncates the index file\nTechnical Details",
      "examples": [
        "$mysqli -> refresh(options)",
        "mysqli_refresh(connection, options)"
      ]
    },
    {
      "title": "PHP mysqli rollback() Function",
      "summary": "â® PHP mysqli Reference\nExample - Object Oriented styleGet your own PHP Server\nTurn off auto-committing, make some queries, commit the queries, then roll back the current transaction:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe rollback() / mysqli_rollback() function rolls back the current transaction for the specified database connection.\nTip: Also look at the commit() function, which commits the current transaction, and the autocommit() function, which turns on or off auto-committing database modifications.\nSyntax\nParameter Values\nMYSQLI_TRANS_COR_AND_CHAIN - Appends \"AND CHAIN\"\nMYSQLI_TRANS_COR_AND_NO_CHAIN - Appends \"AND NO CHAIN\"\nMYSQLI_TRANS_COR_RELEASE - Appends \"RELEASE\"\nMYSQLI_TRANS_COR_NO_RELEASE - Appends \"NO RELEASE\"\nTechnical Details\nExample - Procedural style\nTurn off auto-committing, make some queries, commit the queries, then roll back the current transaction:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n// Turn autocommit off\n$mysqli -> autocommit(FALSE);\n\n// Insert some values\n$mysqli -> query(\"INSERT INTO Persons (FirstName,LastName,Age)\nVALUES ('Peter','Griffin',35)\");\n$mysqli -> query(\"INSERT INTO Persons (FirstName,LastName,Age)\nVALUES ('Glenn','Quagmire',33)\");\n\n// Commit transaction\nif (!$mysqli -> commit()) {\necho \"Commit transaction failed\";\nexit();\n}\n\n// Rollback transaction\n$mysqli -> rollback();\n\n$mysqli -> close();\n?>",
        "$mysqli -> rollback(flags, name)",
        "mysqli_rollback(connection, flags, name)",
        "<?php\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno())Â {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit;\n}\n\n// Turn autocommit off\nmysqli_autocommit($con,FALSE);\n\n// Insert some values\nmysqli_query($con,\"INSERT INTO Persons (FirstName,LastName,Age)\nVALUES ('Peter','Griffin',35)\");\nmysqli_query($con,\"INSERT INTO Persons (FirstName,LastName,Age)\nVALUES ('Glenn','Quagmire',33)\");\n\n// Commit transaction\nif (!$mysqli_commit($con)) {\necho \"Commit transaction failed\";\nexit();\n}\n\n// Rollback transaction\nmysqli_rollback($con);\n\n// Close connection\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli select_db() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nChange the default database for the connection:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe select_db() / mysqli_select_db() function is used to change the default database for the connection.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nChange the default database for the connection:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n// Return name of current default database\nif ($result = $mysqli -> query(\"SELECT DATABASE()\")) {\n$row = $result -> fetch_row();\necho \"Default database is \" . $row[0];\n$result -> close();\n}\n\n// Change db to \"test\" db\n$mysqli -> select_db(\"test\");\n\n// Return name of current default database\nif ($result = $mysqli -> query(\"SELECT DATABASE()\")) {\n$row = $result -> fetch_row();\necho \"Default database is \" . $row[0];\n$result -> close();\n}\n\n$mysqli -> close();\n?>",
        "$mysqli -> select_db(name)",
        "mysqli_select_db(connection, name)",
        "<?php\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno())Â {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit;\n}\n\n// Return name of current default database\nif ($result = mysqli_query($con, \"SELECT DATABASE()\")) {\n$row = mysqli_fetch_row($result);\necho \"Default database is \" . $row[0];\nmysqli_free_result($result);\n}\n\n// Change db to \"test\" db\nmysqli_select_db($con, \"test\");\n\n// Return name of current default database\nif ($result = mysqli_query($con, \"SELECT DATABASE()\")) {\n$row = mysqli_fetch_row($result);\necho \"Default database is \" . $row[0];\nmysqli_free_result($result);\n}\n\n// Close connection\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli set_charset() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nChange the default client character set:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe set_charset() / mysqli_set_charset() function specifies the default character set to be used when sending data to and from the database server.\nNote: For this function to work on a Windows platform, you need MySQL client library 4.1.11 or above (for MySQL 5.0, you need 5.0.6 or above).\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nChange the default client character set:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\necho \"Initial character set is: \" . $mysqli -> character_set_name();\n\n// Change character set to utf8\n$mysqli -> set_charset(\"utf8\");\n\necho \"Current character set is: \" . $mysqli -> character_set_name();\n\n$mysqli -> close();\n?>",
        "$mysqli -> set_charset(charset)",
        "mysqli_set_charset(connection, charset)",
        "<?php\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\n// Check connection\nif (mysqli_connect_errno())Â {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit;\n}\n\necho \"Initial character set is: \" . mysqli_character_set_name($con);\n\n// Change character set to utf8\nmysqli_set_charset($con,\"utf8\");\n\necho \"Current character set is: \" . mysqli_character_set_name($con);\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli set_local_infile_handler() Function",
      "summary": "â® PHP MySQLi Reference\nDefinition and Usage\nThe set_local_infile_handler() / mysqli_set_local_infile_handler() function sets a callback function for LOAD DATA LOCAL INFILE command.\nThe callback functions tasks are to read input from the file specified in LOAD DATA LOCAL INFILE, and to reformat it into the format understood by LOAD DATA INFILE.\nThe returned data must match the format specified in the LOAD DATA.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "$mysqli -> set_local_infile_handler(read_file)",
        "mysqli_set_local_infile_handler(read_file)"
      ]
    },
    {
      "title": "PHP mysqli sqlstate() Function",
      "summary": "â® PHP mysqli Reference\nExample - Object Oriented styleGet your own PHP Server\nReturn the SQLSTATE error code for the last error:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe sqlstate / mysqli_sqlstate() function returns the SQLSTATE error code for the last error.\nThe error code consists of five characters. \"00000\" indicates no error. The values are specified by ANSI SQL and ODBC.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural state\nReturn the SQLSTATE error code for the last error:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n// Table Persons already exists, so we should get an error\n$sql = \"CREATE TABLE Persons (Firstname VARCHAR(30), Lastname VARCHAR(30), Age INT)\"\nif (!$mysqli -> query($sql)) {\necho \"SQLSTATE error: \". $mysqli -> sqlstate;\n}\n\n$mysqli -> close();\n?>",
        "$mysqli -> sqlstate",
        "mysqli_sqlstate(connection)",
        "<?php\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\n// Check connection\nif (mysqli_connect_errno())Â {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit;\n}\n\n// Table Persons already exists, so we should get an error\n$sql = \"CREATE TABLE Persons (Firstname VARCHAR(30), Lastname VARCHAR(30), Age INT)\"\nif (!mysqli_query($con, $sql)) {\necho \"SQLSTATE error: \". mysqli_sqlstate($con);\n}\n\n// Close connection\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli ssl_set() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nCreate an SSL connection:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe ssl_set() / mysqli_ssl_set() function is used to establish secure connections using SSL. However, this function does nothing unless OpenSSL support is enabled.\nNote: This function must be called before real_connect().\nNote: MySQL Native Driver does not support SSL before PHP 5.3.3. MySQL Native Driver is enabled by default on Microsoft Windows from PHP 5.3+.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nCreate an SSL connection:",
      "examples": [
        "<?php\n$mysqli = mysqli_init();\nif (!$mysqli) {\ndie(\"mysqli_init failed\");\n}\n\n$mysqli -> ssl_set(\"key.pem\", \"cert.pem\", \"cacert.pem\", NULL, NULL);\n\nif (!$mysqli -> real_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\")) {\ndie(\"Connect Error: \" . mysqli_connect_error());\n}\n\n// Some queries...\n\n$mysqli -> close();\n?>",
        "$mysqli -> ssl_set(key, cert, ca, capath, cipher)",
        "mysqli_ssl_set(connection, key, cert, ca, capath, cipher)",
        "<?php\n$con = mysqli_init();\nif (!$con) {\ndie(\"mysqli_init failed\");\n}\n\nmysqli_ssl_set($con, \"key.pem\", \"cert.pem\", \"cacert.pem\", NULL, NULL);\n\nif (!mysqli_real_connect($con, \"localhost\", \"my_user\", \"my_password\", \"my_db\")) {\ndie(\"Connect Error: \" . mysqli_connect_error());\n}\n\n// Some queries...\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli stat() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nReturn the current system status:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe stat() / mysqli_stat() function returns the current system status.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nReturn the current system status:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\necho \"System status: \". $mysqli -> stat();\n\n$mysqli -> close();\n?>",
        "$mysqli -> stat()",
        "mysqli_stat(connection)",
        "<?php\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit;\n}\n\necho \"System status: \". mysqli_stat($con);\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli stmt_init() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nInitialize a statement and return an object to use with stmt_prepare():\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe stmt_init() / mysqli_stmt_init() function initializes a statement and returns an object suitable for mysqli_stmt_prepare().\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nInitialize a statement and return an object to use with mysqli_stmt_prepare():",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n$city=\"Sandnes\";\n\n// Create a prepared statement\n$stmt = $mysqli -> stmt_init();\n\nif ($stmt -> prepare(\"SELECT District FROM City WHERE Name=?\")) {\n// Bind parameters\n$stmt -> bind_param(\"s\", $city);\n\n// Execute query\n$stmt -> execute();\n\n// Bind result variables\n$stmt -> bind_result($district);\n\n// Fetch value\n$stmt -> fetch();\n\nprintf(\"%s is in district %s\", $city, $district);\n\n// Close statement\n$stmt -> close();\n}\n\n$mysqli -> close();\n?>",
        "$mysqli -> stmt_init()",
        "mysqli_stmt_init(connection)",
        "<?php\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno())Â {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit;\n}\n\n$city=\"Sandnes\";\n\n// Create a prepared statement\n$stmt = mysqli_stmt_init($con);\n\nif (mysqli_stmt_prepare($stmt, \"SELECT District FROM City WHERE Name=?\")) {\n// Bind parameters\nmysqli_stmt_bind_param($stmt, \"s\", $city);\n\n// Execute query\nmysqli_stmt_execute($stmt);\n\n// Bind result variables\nmysqli_stmt_bind_result($stmt, $district);\n\n// Fetch value\nmysqli_stmt_fetch($stmt);\n\nprintf(\"%s is in district %s\", $city, $district);\n\n// Close statement\nmysqli_stmt_close($stmt);\n}\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli_thread_id() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nReturn the thread ID for the current connection, then kill the connection:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe thread_id() / mysqli_thread_id() function returns the thread ID for the current connection. The connection can then be killed with the kill() function.\nNote: If the connection is broken and you reconnect, the thread ID will be changed. Therefore; get the thread ID only when you need it.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nReturn the thread ID for the current connection, then kill the connection:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n// Get thread id\n$thread_id = $mysqli -> thread_id;\n\n// Kill connection\n$mysqli -> kill($thread_id);\n?>",
        "$mysqli -> thread_id()",
        "mysqli_thread_id(connection)",
        "<?php\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit;\n}\n\n// Get thread id\n$thread_id = mysqli_thread_id($con);\n\n// Kill connection\nmysqli_kill($con, $thread_id);\n?>"
      ]
    },
    {
      "title": "PHP mysqli_thread_safe() Function",
      "summary": "â® PHP MySQLi Reference\nDefinition and Usage\nThe mysqli_thread_safe() function returns whether the client library is compiled as thread-safe.\nSyntax\nTechnical Details",
      "examples": [
        "mysqli_thread_safe()"
      ]
    },
    {
      "title": "PHP mysqli use_result() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nInitiates the retrieval of a result-set from the last query executed:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe use_result() / mysqli_use_result() function initiates the retrieval of a result-set from the last query executed.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nInitiates the retrieval of a result-set from the last query executed:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n$sql = \"SELECT Lastname FROM Persons ORDER BY LastName;\";\n$sql .= \"SELECT Country FROM Customers\";\n\n// Execute multi query\nif ($mysqli -> multi_query($sql)) {\ndo {\n// Store first result set\nif ($result = $mysqli -> use_result()) {\nwhile ($row = $result -> fetch_row()) {\nprintf(\"%s\\n\", $row[0]);\n}\n$result -> close();\n}\n// if there are more result-sets, the print a divider\nif ($mysqli -> more_results()) {\nprintf(\"-------------\\n\");\n}\n//Prepare next result set\n} while ($mysqli -> next_result());\n}\n\n$mysqli -> close();\n?>",
        "$mysqli -> use_result()",
        "mysqli_use_result(connection)",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno())Â {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\n$sql = \"SELECT Lastname FROM Persons ORDER BY LastName;\";\n$sql .= \"SELECT Country FROM Customers\";\n\n// Execute multi query\nif (mysqli_multi_query($con, $sql)) {\ndo {\n// Store first result set\nif ($result = mysqli_use_result($con)) {\nwhile ($row = mysqli_fetch_row($result)) {\nprintf(\"%s\\n\", $row[0]);\n}\nmysqli_free_result($result);\n}\n// if there are more result-sets, the print a divider\nif (mysqli_more_results($con)) {\nprintf(\"-------------\\n\");\n}\n//Prepare next result set\n} while (mysqli_next_result($con));\n}\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP mysqli warning_count() Function",
      "summary": "â® PHP MySQLi Reference\nExample - Object Oriented styleGet your own PHP Server\nReturn the number of warnings from the last query:\nLook at example of procedural style at the bottom.\nDefinition and Usage\nThe warning_count / mysqli_warning_count() function returns the number of warnings from the last query.\nSyntax\nParameter Values\nTechnical Details\nExample - Procedural style\nReturn the number of warnings from the last query:",
      "examples": [
        "<?php\n$mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\n// Check connection\nif ($mysqli -> connect_errno) {\necho \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\nexit();\n}\n\n$mysqli -> query(\"CREATE TABLE myPersons LIKE Persons\");\n\n$sql = \"INSERT INTO myPersons (FirstName) VALUES(\n'Hdghfhjgjtjyjn.,,ï¿½ï¿½lï¿½jkghfjbmbngfgffdhfhjgjgkjhlkhlkjljljlkjkljlkjkljkljlkj')\";\n\n$mysqli -> query($sql);\n\nif ($mysqli -> warning_count) {\nif ($result = $mysqli -> query(\"SHOW WARNINGS\")) {\n$row = $result -> fetch_row();\nprintf(\"%s (%d): %s\\n\", $row[0], $row[1], $row[2]);\n$result -> close();\n}\n}\n\n$mysqli -> close();\n?>",
        "$mysqli -> warning_count",
        "mysqli_warning_count(connection)",
        "<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno())Â {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n\nmysqli_query($con, \"CREATE TABLE myPersons LIKE Persons\");\n\n$sql = \"INSERT INTO myPersons (FirstName) VALUES(\n'Hdghfhjgjtjyjn.,,ï¿½ï¿½lï¿½jkghfjbmbngfgffdhfhjgjgkjhlkhlkjljljlkjkljlkjkljkljlkj')\";\n\nmysqli_query($con, $sql);\n\nif (mysqli_warning_count($con)) {\nif ($result = mysqli_query($con, \"SHOW WARNINGS\")) {\n$row = mysql_fetch_row($result);\nprintf(\"%s (%d): %s\\n\", $row[0], $row[1], $row[2]);\nmysqli_free_result($result);\n}\n}\n\nmysqli_close($con);\n?>"
      ]
    },
    {
      "title": "PHP Network Functions",
      "summary": "PHP Network Introduction\nThe Network functions contains various network function and let you manipulate information sent to the browser by the Web server, before any other output has been sent.\nInstallation\nThe Network functions are part of the PHP core. There is no installation needed to use these functions.\nPHP Network Functions",
      "examples": []
    },
    {
      "title": "PHP checkdnsrr() Function",
      "summary": "â® PHP Network Reference\nExampleGet your own PHP Server\nCheck DNS records:\nDefinition and Usage\nThe checkdnsrr() function checks DNS records for type corresponding to host.\nWe can use the checkdnsrr() function to check our DNS record to verify the existence of a domain name or not.\nSyntax\nParameter Values\nA\nMX (default)\nNS\nSOA\nPTR\nCNAME\nAAAA\nA6\nSRV\nNAPTR\nTXT\nANY\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$domain=\"w3schools.com\";\nif(checkdnsrr($domain,\"MX\")) {\necho \"Passed\";\n} else {\necho \"Failed\";\n}\n?>",
        "checkdnsrr(host, type)"
      ]
    },
    {
      "title": "PHP closelog() Function",
      "summary": "â® PHP Network Reference\nExampleGet your own PHP Server\nOpen and close connection of system logger:\nDefinition and Usage\nThe closelog() function closes the connection of system logger.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\nfunction _log($text) {\nopenlog(\"phperrors\", LOG_PID | LOG_PERROR);\nsyslog(LOG_ERR, $text);\ncloselog();\n....\n....\n}\n?>",
        "closelog()"
      ]
    },
    {
      "title": "PHP dns_check_record() Function",
      "summary": "â® PHP Network Reference\nExampleGet your own PHP Server\nCheck DNS records:\nDefinition and Usage\nThe dns_check_record() function is an alias of the checkdnsrr() function.\nSyntax\nParameter Values\nA\nMX (default)\nNS\nSOA\nPTR\nCNAME\nAAAA\nA6\nSRV\nNAPTR\nTXT\nANY\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$domain=\"w3schools.com\";\nif(dns_check_record($domain,\"MX\")) {\necho \"Passed\";\n} else {\necho \"Failed\";\n}\n?>",
        "dns_check_record(host, type)"
      ]
    },
    {
      "title": "PHP dns_get_mx() Function",
      "summary": "â® PHP Network Reference\nExampleGet your own PHP Server\nReturn details of mail exchanger records (MX records):\nDefinition and Usage\nThe dns_get_mx() function is an alias of the getmxrr() function.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$domain=\"w3schools.com\";\nif(dns_get_mx($domain,$mx_details)){\nforeach($mx_details as $key=>$value){\necho \"$key => $value <br>\";\n}\n}\n?>",
        "dns_get_mx(host, mxhosts, weight)"
      ]
    },
    {
      "title": "PHP dns_get_record() Function",
      "summary": "â® PHP Network Reference\nExampleGet your own PHP Server\nGets the MX resource records associated with \"www.w3schools.com\":\nDefinition and Usage\nThe dns_get_record() function gets the DNS resource records associated with the specified hostname.\nSyntax\nParameter Values\nDNS_A\nDNS_CNAME\nDNS_HINFO\nDNS_CAA\nDNS_MX\nDNS_NS\nDNS_PTR\nDNS_SOA\nDNS_TXT\nDNS_AAAA\nDNS_SRV\nDNS_NAPTR\nDNS_A6\nDNS_ALL\nDNS_ANY (default)\nREMOVE ADS\nTechnical Details\nAn array of associative arrays, FALSE on failure. Each array contains the following keys (at minimum):\nhost - The hostname\nclass - Always return IN (because this function only returns Internet class records)\ntype - The record type\nttl - \"Time To Live\" remaining for this record (original ttl minus the length of time passed since the server was queried)\nOther keys in the arrays depends on the type parameter.",
      "examples": [
        "<?php\nprint_r(dns_get_record(\"w3schools.com\", DNS_MX));\n?>",
        "dns_get_record(hostname, type, authns, addtl, raw)"
      ]
    },
    {
      "title": "PHP fsockopen() Function",
      "summary": "â® PHP Network Reference\nExampleGet your own PHP Server\nfsockopen() example:\nDefinition and Usage\nThe fsockopen() function opens an Internet or Unix domain socket connection.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$fp = fsockopen(\"www.w3schools.com\", 80, $errno, $errstr, 20);\nif (!$fp) {\necho \"$errstr ($errno)<br>\";\n} else {\n$out = \"GET / HTTP/1.1\\r\\n\";\n$out .= \"Host: www.w3schools.com\\r\\n\";\n$out .= \"Connection: Close\\r\\n\\r\\n\";\nfwrite($fp, $out);\nwhile (!feof($fp)) {\necho fgets($fp, 128);\n}\nfclose($fp);\n}\n?>",
        "fsockopen(hostname, port, errno, errstr, timeout)"
      ]
    },
    {
      "title": "PHP gethostbyaddr() Function",
      "summary": "â® PHP Network Reference\nExampleGet your own PHP Server\nA simple gethostbyaddr() example:\nDefinition and Usage\nThe gethostbyaddr() function returns the domain name for a given IP address.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$host = gethostbyaddr($_SERVER[\"REMOTE_ADDR\"]);\necho $host;\n?>",
        "gethostbyaddr(ipaddress)"
      ]
    },
    {
      "title": "PHP gethostbyname() Function",
      "summary": "â® PHP Network Reference\nExampleGet your own PHP Server\nA gethostbyname() example:\nDefinition and Usage\nThe gethostbyname() function returns the IPv4 address for a given domain/host name.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$ip = gethostbyname(\"www.w3schools.com\");\necho $ip;\n?>",
        "gethostbyname(hostname)"
      ]
    },
    {
      "title": "PHP gethostbynamel() Function",
      "summary": "â® PHP Network Reference\nExampleGet your own PHP Server\nA gethostbynamel() example:\nDefinition and Usage\nThe gethostbynamel() function returns a list of IPv4 address for a given domain/host name.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$hostlist = gethostbynamel(\"www.w3schools.com\");\nprint_r($hostlist);\n?>",
        "gethostbynamel(hostname)"
      ]
    },
    {
      "title": "PHP gethostname() Function",
      "summary": "â® PHP Network Reference\nExampleGet your own PHP Server\nA gethostname() example:\nDefinition and Usage\nThe gethostname() function returns the host name for the local machine.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\necho gethostname();\n?>",
        "gethostname()"
      ]
    },
    {
      "title": "PHP getmxrr() Function",
      "summary": "â® PHP Network Reference\nExampleGet your own PHP Server\nReturn details of mail exchanger records (MX records):\nDefinition and Usage\nThe getmxrr() function returns the MX records for the specified internet host name.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$domain=\"w3schools.com\";\nif(getmxrr($domain,$mx_details)){\nforeach($mx_details as $key=>$value){\necho \"$key => $value <br>\";\n}\n}\n?>",
        "getmxrr(host, mxhosts, weight)"
      ]
    },
    {
      "title": "PHP getprotobyname() Function",
      "summary": "â® PHP Network Reference\nExampleGet your own PHP Server\nA getprotobyname() example:\nDefinition and Usage\nThe getprotobyname() function returns the protocol number for a given protocol name.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$protocolnum = getprotobyname(\"tcp\");\necho $protocolnum;\n?>",
        "getprotobyname(protocolname)"
      ]
    },
    {
      "title": "PHP getprotobynumber() Function",
      "summary": "â® PHP Network Reference\nExampleGet your own PHP Server\nA getprotobynumber() example:\nDefinition and Usage\nThe getprotobynumber() function returns the protocol name for a given protocol number.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$protocolname = getprotobynumber(6);\necho $protocolname;\n?>",
        "getprotobynumber(protocolnumber)"
      ]
    },
    {
      "title": "PHP getservbyname() Function",
      "summary": "â® PHP Network Reference\nExampleGet your own PHP Server\nA getservbyname() example:\nDefinition and Usage\nThe getservbyname() function returns the port number for a given Internet service and protocol.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$portnum = getservbyname(\"http\", \"tcp\");\necho $portnum;\n?>",
        "getservbyname(service, protocol)"
      ]
    },
    {
      "title": "PHP getservbyport() Function",
      "summary": "â® PHP Network Reference\nExampleGet your own PHP Server\nA getservbyport() example:\nDefinition and Usage\nThe getservbyport() function returns the Internet service for a given port and protocol.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$intservname = getservbyport(80, \"tcp\");\necho $intservname;\n?>",
        "getservbyport(port, protocol)"
      ]
    },
    {
      "title": "PHP header_register_callback() Function",
      "summary": "â® PHP Network Reference\nDefinition and Usage\nThe header_register_callback() function calls a header function (will be executed after PHP has prepared all headers to be sent, and before any other output is sent).\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "header_register_callback(callback)"
      ]
    },
    {
      "title": "PHP header_remove() Function",
      "summary": "â® PHP Network Reference\nExampleGet your own PHP Server\nRemove specific header:\nDefinition and Usage\nThe header_remove() function removes an HTTP header previously set with the header() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nRemove all previously set headers:",
      "examples": [
        "<?php\nheader(\"Expires: Mon, 26 Jul 1997 05:00:00 GMT\");\nheader(\"Cache-Control: no-cache\");\nheader(\"Pragma: no-cache\");\n\nheader_remove(\"Pragma\");\n?>",
        "header_remove(headername)",
        "<?php\nheader(\"Expires: Mon, 26 Jul 1997 05:00:00 GMT\");\nheader(\"Cache-Control: no-cache\");\nheader(\"Pragma: no-cache\");\n\nheader_remove();\n?>"
      ]
    },
    {
      "title": "PHP header() Function",
      "summary": "â® PHP Network Reference\nExampleGet your own PHP Server\nSend three HTTP headers to prevent page caching:\nNote: There are options that users may set to change the browser's default caching settings. By sending the headers above, you will override any of those settings and force the browser to not cache!\nDefinition and Usage\nThe header() function sends a raw HTTP header to a client.\nIt is important to notice that the header() function must be called before any actual output is sent!\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nLet the user be prompted to save a generated PDF file (Content-Disposition header is used to supply a recommended filename and force the browser to display the save dialog box):",
      "examples": [
        "<?php\n// Date in the past\nheader(\"Expires: Mon, 26 Jul 1997 05:00:00 GMT\");\nheader(\"Cache-Control: no-cache\");\nheader(\"Pragma: no-cache\");\n?>\n\n<html>\n<body>\n...\n...",
        "header(header, replace, http_response_code)",
        "<?php\nheader(\"Content-type:application/pdf\");\n\n// It will be called downloaded.pdf\nheader(\"Content-Disposition:attachment;filename='downloaded.pdf'\");\n\n// The PDF source is in original.pdf\nreadfile(\"original.pdf\");\n?>\n\n<html>\n<body>\n\n...\n..."
      ]
    },
    {
      "title": "PHP headers_list() Function",
      "summary": "â® PHP Network Reference\nExampleGet your own PHP Server\nReturn a list of response headers sent:\nThe output of the code above could be:\nDefinition and Usage\nThe headers_list() function returns a list of response headers to be sent to the browser.\nTip: To determine whether or not the headers have been sent yet, use the headers_sent() function.\nSyntax\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\nsetcookie(\"TestCookie\",\"SomeValue\");\nheader(\"X-Sample-Test: foo\");\nheader(\"Content-type: text/plain\");\n?>\n\n<html>\n<body>\n\n<?php\nvar_dump(headers_list());\n?>\n\n</body>\n</html>",
        "array(4)\n{\n[0]=> string(23) \"X-Powered-By: PHP/7.1.1\"\n[1]=> string(19) \"Set-Cookie: TestCookie=SomeValue\"\n[2]=> string(18) \"X-Sample-Test: foo\"\n[3]=> string(24) \"Content-type: text/plain\"\n}",
        "headers_list()"
      ]
    },
    {
      "title": "PHP headers_sent() Function",
      "summary": "â® PHP Network Reference\nExampleGet your own PHP Server\nIf no headers are sent, send one:\nDefinition and Usage\nThe headers_sent() function checks if/where headers have been sent.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nUsing the optional file and line parameters:",
      "examples": [
        "<?php\nif (!headers_sent()) {\nheader(\"Location: https://www.w3schools.com/\");\nexit;\n}\n?>\n\n<html>\n<body>\n\n...\n...",
        "headers_sent(file,line)",
        "<?php\n// $file and $line are passed in for later use\n// Do not assign them values beforehand\nif (!headers_sent($file, $line))\n{\nheader(\"Location: https://www.w3schools.com/\");\nexit;\n// Trigger an error here\n}\nelse\n{\necho \"Headers sent in $file on line $line\";\nexit;\n}\n?>\n\n<html>\n<body>\n\n...\n..."
      ]
    },
    {
      "title": "PHP http_response_code() Function",
      "summary": "â® PHP Network Reference\nExampleGet your own PHP Server\nSet the HTTP response status code to 404:\nDefinition and Usage\nThe http_response_code() function sets or returns the HTTP response status code.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\nhttp_response_code(404);\n?>",
        "http_response_code(code)"
      ]
    },
    {
      "title": "PHP inet_ntop() Function",
      "summary": "â® PHP Network Reference\nExampleGet your own PHP Server\nConvert a packed address into a readable format:\nDefinition and Usage\nThe inet_ntop() function converts a 32bit IPv4 or 128bit IPv6 address into a readable format.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$addr = chr(127) . chr(0) . chr(1) . chr(1);\n$exp = inet_ntop($addr);\necho $exp;\n?>",
        "inet_ntop(address)"
      ]
    },
    {
      "title": "PHP inet_pton() Function",
      "summary": "â® PHP Network Reference\nExampleGet your own PHP Server\nConvert a readable IP address into a packed format:\nDefinition and Usage\nThe inet_pton() function converts a readable IP address into a packed 32bit IPv4 or 128bit IPv6 format.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$addr = inet_pton(\"127.0.1.1\");\necho $addr;\n?>",
        "inet_pton(address)"
      ]
    },
    {
      "title": "PHP ip2long() Function",
      "summary": "â® PHP Network Reference\nExampleGet your own PHP Server\nConvert an IPv4 address into a long integer:\nDefinition and Usage\nThe ip2long() function converts an IPv4 address into a long integer.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$ip = gethostbyname(\"www.w3schools.com\");\n$out = \"The following URLs are equivalent:<br>\";\n$out .= \"https://www.w3schools.com/, https://\" . $ip . \"/, and https://\" . sprintf(\"%u\", ip2long($ip)) . \"/\";\necho $out;\n?>",
        "ip2long(address)"
      ]
    },
    {
      "title": "PHP long2ip() Function",
      "summary": "â® PHP Network Reference\nExampleGet your own PHP Server\nConvert a long integer address into a string in IPv4 format:\nDefinition and Usage\nThe long2ip() function converts a long integer address into a string in IPv4 format.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho(long2ip(344294967296));\n?>",
        "long2ip(address)"
      ]
    },
    {
      "title": "PHP openlog() Function",
      "summary": "â® PHP Network Reference\nExampleGet your own PHP Server\nOpen and close connection of system logger:\nDefinition and Usage\nThe openlog() function opens the connection of system logger.\nSyntax\nParameter Values\nLOG_CONS\nLOG_NDELAY\nLOG_ODELAY\nLOG_PERROR\nLOG_PID\nLOG_AUTH\nLOG_AUTHPRIV\nLOG_CRON\nLOG_DAEMON\nLOG_KERN\nLOG_LOCAL0...LOG_LOCAL7\nLOG_LPR\nLOG_MAIL\nLOG_NEWS\nLOG_SYSLOG\nLOG_USER - (is the only valid log type for Windows OS)\nLOG_UUCP\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\nfunction _log($text) {\nopenlog(\"phperrors\", LOG_PID | LOG_PERROR);\nsyslog(LOG_ERR, $text);\ncloselog();\n....\n....\n}\n?>",
        "openlog(ident, option, facility)"
      ]
    },
    {
      "title": "PHP pfsockopen() Function",
      "summary": "â® PHP Network Reference\nExampleGet your own PHP Server\npfsockopen() example:\nDefinition and Usage\nThe pfsockopen() function opens a persistent Internet or Unix domain socket connection.\nNote: This function is almost identical to fsockopen(). The difference is that the connection is not closed after the script finishes. This function is the persistent version of fsockopen().\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$fp = pfsockopen(\"www.w3schools.com\", 80, $errno, $errstr, 20);\nif (!$fp) {\necho \"$errstr ($errno)<br>\";\n} else {\n$out = \"GET / HTTP/1.1\\r\\n\";\n$out .= \"Host: www.w3schools.com\\r\\n\";\n$out .= \"Connection: Close\\r\\n\\r\\n\";\nfwrite($fp, $out);\nwhile (!feof($fp)) {\necho fgets($fp, 128);\n}\nfclose($fp);\n}\n?>",
        "pfsockopen(hostname, port, errno, errstr, timeout)"
      ]
    },
    {
      "title": "PHP setcookie() Function",
      "summary": "â® PHP Network Reference\nExampleGet your own PHP Server\nThe following example creates a cookie named \"user\" with the value \"John Doe\". The cookie will expire after 30 days (86400 * 30). The \"/\" means that the cookie is available in entire website (otherwise, select the directory you prefer).\nWe then retrieve the value of the cookie \"user\" (using the global variable $_COOKIE). We also use the isset() function to find out if the cookie is set:\nDefinition and Usage\nThe setcookie() function defines a cookie to be sent along with the rest of the HTTP headers.\nA cookie is often used to identify a user. A cookie is a small file that the server embeds on the user's computer. Each time the same computer requests a page with a browser, it will send the cookie too. With PHP, you can both create and retrieve cookie values.\nThe name of the cookie is automatically assigned to a variable of the same name. For example, if a cookie was sent with the name \"user\", a variable is automatically created called $user, containing the cookie value.\nNote: The setcookie() function must appear BEFORE the <html> tag.\nNote: The value of the cookie is automatically URLencoded when sending the cookie, and automatically decoded when received (to prevent URLencoding, use setrawcookie() instead).\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nSeveral expire dates for cookies:\nExample\nTo modify a cookie, just set (again) the cookie using the setcookie() function:\nExample\nTo delete a cookie, use the setcookie() function with an expiration date in the past:\nExample\nCreate a small script that checks whether cookies are enabled. First, try to create a test cookie with the setcookie() function, then count the $_COOKIE array variable:",
      "examples": [
        "<!DOCTYPE html>\n<?php\n$cookie_name = \"user\";\n$cookie_value = \"John Doe\";\nsetcookie($cookie_name, $cookie_value, time() + (86400 * 30), \"/\"); // 86400 = 1 day\n?>\n<html>\n<body>\n\n<?php\nif(!isset($_COOKIE[$cookie_name])) {\necho \"Cookie named '\" . $cookie_name . \"' is not set!\";\n} else {\necho \"Cookie '\" . $cookie_name . \"' is set!<br>\";\necho \"Value is: \" . $_COOKIE[$cookie_name];\n}\n?>\n\n</body>\n</html>",
        "setcookie(name, value, expire, path, domain, secure, httponly);",
        "<?php\n$value = \"Hello world!\";\n\n// cookie will expire when the browser close\nsetcookie(\"myCookie\", $value);\n\n// cookie will expire in 1 hour\nsetcookie(\"myCookie\", $value, time() + 3600);\n\n// cookie will expire in 1 hour, and will only be available\n// within the php directory + all sub-directories of php\nsetcookie(\"myCookie\", $value, time() + 3600, \"/php/\");\n?>\n<html>\n<body>\n\n...some code...\n\n</body>\n</html>",
        "<?php\n$cookie_name = \"user\";\n$cookie_value = \"Alex Porter\";\nsetcookie($cookie_name, $cookie_value, time() + (86400 * 30), \"/\");\n?>\n<html>\n<body>\n\n<?php\nif(!isset($_COOKIE[$cookie_name])) {\necho \"Cookie named '\" . $cookie_name . \"' is not set!\";\n} else {\necho \"Cookie '\" . $cookie_name . \"' is set!<br>\";\necho \"Value is: \" . $_COOKIE[$cookie_name];\n}\n?>\n\n</body>\n</html>",
        "<?php\n// set the expiration date to one hour ago\nsetcookie(\"user\", \"\", time() - 3600);\n?>\n<html>\n<body>\n\n<?php\necho \"Cookie 'user' is deleted.\";\n?>\n\n</body>\n</html>",
        "<?php\nsetcookie(\"test_cookie\", \"test\", time() + 3600, '/');\n?>\n<html>\n<body>\n\n<?php\nif(count($_COOKIE) > 0) {\necho \"Cookies are enabled.\";\n} else {\necho \"Cookies are disabled.\";\n}\n?>\n\n</body>\n</html>"
      ]
    },
    {
      "title": "PHP setrawcookie() Function",
      "summary": "â® PHP Network Reference\nExampleGet your own PHP Server\nThe following example creates a cookie with PHP. The cookie is named \"user\" and the value will be \"John Doe\". The cookie value will not be URL encoded. The cookie will expire after 30 days (86400 * 30). Using \"/\", means that the cookie is available in entire website (otherwise, select the directory you prefer):\nDefinition and Usage\nThe setrawcookie() function defines a cookie (without URL encoding) to be sent along with the rest of the HTTP headers.\nA cookie is often used to identify a user. A cookie is a small file that the server embeds on the user's computer. Each time the same computer requests a page with a browser, it will send the cookie too. With PHP, you can both create and retrieve cookie values.\nThe name of the cookie is automatically assigned to a variable of the same name. For example, if a cookie was sent with the name \"user\", a variable is automatically created called $user, containing the cookie value.\nNote: The setrawcookie() function must appear BEFORE the <html> tag.\nNote: To automatically URL-encode the cookie value when sending, and automatically decode when receiving, use the setcookie() function instead.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nRetrieve the value of the cookie named \"user\" (using the global variable $_COOKIE). Also use the isset() function to find out if the cookie exists:\nExample\nTo modify a cookie, just set (again) the cookie using the setrawcookie() function:\nExample\nTo delete a cookie, use the setrawcookie() function with an expiration date in the past:\nExample\nCreate a small script that checks whether cookies are enabled. First, try to create a test cookie with the setrawcookie() function, then count the $_COOKIE array variable:",
      "examples": [
        "<?php\n$cookie_name = \"user\";\n$cookie_value = \"John\";\nsetrawcookie($cookie_name, $cookie_value, time() + (86400 * 30), \"/\");\n// 86400 = 1 day\n?>\n<html>\n<body>\n\n<?php\necho \"Cookie is set.\";\n?>\n\n</body>\n</html>\n?>",
        "setrawcookie(name, value, expire, path, domain, secure);",
        "<html>\n<body>\n\n<?php\n$cookie_name = \"user\";\nif(!isset($_COOKIE[$cookie_name])) {\necho \"Cookie named '\" . $cookie_name . \"' does not exist!\";\n} else {\necho \"Cookie is named: \" . $cookie_name . \"<br>Value is: \" . $_COOKIE[$cookie_name];\n}\n?>\n\n</body>\n</html>",
        "<?php\n$cookie_name = \"user\";\n$cookie_value = \"Alex\";\nsetrawcookie($cookie_name, $cookie_value, time() + (86400 * 30), \"/\");\n?>\n<html>\n<body>\n\n<?php\n$cookie_name = \"user\";\nif(!isset($_COOKIE[$cookie_name])) {\necho \"Cookie named '\" . $cookie_name . \"' does not exist!\";\n} else {\necho \"Cookie is named: \" . $cookie_name . \"<br>Value is: \" . $_COOKIE[$cookie_name];\n}\n?>\n\n</body>\n</html>",
        "<?php\n$cookie_name = \"user\";\nunset($_COOKIE[$cookie_name]);\n// empty value and expiration one hour before\n$res = setrawcookie($cookie_name, '', time() - 3600);\n?>\n<html>\n<body>\n\n<?php\necho \"Cookie 'user' is deleted.\";\n?>\n\n</body>\n</html>",
        "<?php\nsetrawcookie(\"test_cookie\", \"test\", time() + 3600, '/');\n?>\n<html>\n<body>\n\n<?php\nif(count($_COOKIE) > 0) {\necho \"Cookies are enabled\";\n} else {\necho \"Cookies are disabled\";\n}\n?>\n\n</body>\n</html>"
      ]
    },
    {
      "title": "PHP socket_get_status() Function",
      "summary": "Definition and Usage\nThe socket_get_status() function is an alias of the stream_get_meta_data() function.\nâ® PHP Network Reference",
      "examples": []
    },
    {
      "title": "PHP socket_set_blocking() Function",
      "summary": "Definition and Usage\nThe socket_set_blocking() function is an alias of the stream_get_meta_data() function.\nâ® PHP Network Reference",
      "examples": []
    },
    {
      "title": "PHP socket_set_timeout() Function",
      "summary": "Definition and Usage\nThe socket_set_timeout() function is an alias of the stream_get_meta_data() function.\nâ® PHP Network Reference",
      "examples": []
    },
    {
      "title": "PHP syslog() Function",
      "summary": "â® PHP Network Reference\nExampleGet your own PHP Server\nOpen and close connection of system logger:\nDefinition and Usage\nThe syslog() function generates a system log message.\nSyntax\nParameter Values\nLOG_EMERG\nLOG_ALERT\nLOG_CRIT\nLOG_ERR\nLOG_WARNING\nLOG_NOTICE\nLOG_INFO\nLOG_DEBUG\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\nfunction _log($text) {\nopenlog(\"phperrors\", LOG_PID | LOG_PERROR);\nsyslog(LOG_ERR, $text);\ncloselog();\n....\n....\n}\n?>",
        "syslog(priority, message)"
      ]
    },
    {
      "title": "PHP Output Control Functions",
      "summary": "PHP Output Control Functions\nPHP provides a set of functions that control what content is sent to the browser and when. This is referred to as output control.\nOutput can come from any of the following sources:\necho, print, printf, print_r... and other similar functions and statements\nNotices, warnings and errors from PHP\nAny content outside of the <?php ?> tags\nPHP and the backend on which it is running may hold the output in a buffer before sending it to the user.\nNote: The output control functions can create any number of output buffers. Output buffers catch output given by the program. Each new output buffer is placed on the top of a stack of output buffers, and any output it provides will be caught by the buffer below it. The output control functions handle only the topmost buffer, so the topmost buffer must be removed in order to control the buffers below it.\nInstallation\nThe PHP output control functions are part of the PHP core. No installation is required to use these functions.\nRuntime Configuration\nThe behavior of output control functions is affected by settings in php.ini:\nPHP Output Control Functions",
      "examples": [
        "echo",
        "print",
        "printf",
        "print_r",
        "<?php ?>"
      ]
    },
    {
      "title": "PHP flush() Function",
      "summary": "â® PHP Output Control Functions\nExampleGet your own PHP Server\nOutput a string to the browser before the script has finished running:\nDefinition and Usage\nThe flush() function requests the server to send its currently buffered output to the browser. The server configuration may not always allow this to happen.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\n// Some browsers will not display the content if it is too short\n// We use str_pad() to make the output long enough\necho str_pad(\"Hello World!\", 4096);\n\n// Use flush() to send the string to the browser\nflush();\n\n// Display the rest of the content three seconds later\nsleep(3);\necho \"<br>\";\necho \"Hello World!\";\n?>",
        "flush();",
        "flush()"
      ]
    },
    {
      "title": "PHP ob_clean() Function",
      "summary": "â® PHP Output Control Functions\nExampleGet your own PHP Server\nDelete some output before it can get sent to the browser:\nDefinition and Usage\nThe ob_clean() function deletes all of the contents of the topmost output buffer, preventing them from getting sent to the browser.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\nob_start();\necho \"This output will not be sent to the browser\";\nob_clean();\necho \"This output will be sent to the browser\";\nob_end_flush();\n?>",
        "ob_clean();",
        "ob_clean()"
      ]
    },
    {
      "title": "PHP ob_end_clean() Function",
      "summary": "â® PHP Output Control Functions\nExampleGet your own PHP Server\nDelete an output buffer without sending its contents to the browser:\nDefinition and Usage\nThe ob_end_clean() function deletes the topmost output buffer and all of its contents without sending anything to the browser.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\nob_start();\necho \"This output will not be sent to the browser\";\nob_end_clean();\necho \"This output will be sent to the browser\";\n?>",
        "ob_end_clean();",
        "ob_end_clean()"
      ]
    },
    {
      "title": "PHP ob_end_flush() Function",
      "summary": "â® PHP Output Control Functions\nExampleGet your own PHP Server\nDelete an output buffer and send its contents to the browser:\nDefinition and Usage\nThe ob_end_flush() function deletes the topmost output buffer and outputs all of its contents. The output may be caught by another output buffer, or, if there are no other output buffers, sent directly to the browser.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\nob_start();\necho \"This output will be sent to the browser\";\nob_end_flush();\n?>",
        "ob_end_flush();",
        "ob_end_flush()"
      ]
    },
    {
      "title": "PHP ob_flush() Function",
      "summary": "â® PHP Output Control Functions\nExampleGet your own PHP Server\nOutput the contents of a buffer without deleting it:\nDefinition and Usage\nThe ob_flush() function outputs the contents of the topmost output buffer and then clears the buffer of the contents. The output may be caught by another output buffer or, if there are no other output buffers, sent directly to the browser.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\nob_start();\necho \"This output will be sent to the browser\";\nob_flush();\necho \"This output will not be sent to the browser\";\nob_end_clean();\n?>",
        "ob_flush();",
        "ob_flush()"
      ]
    },
    {
      "title": "PHP ob_get_clean() Function",
      "summary": "â® PHP Output Control Functions\nExampleGet your own PHP Server\nStore the contents of an output buffer in a variable:\nDefinition and Usage\nThe ob_get_clean() function returns the contents of the output buffer and then deletes the contents from the buffer.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\nob_start();\necho \"Hello World!\";\n$contents = ob_get_clean();\necho \"The contents of the buffer are: \";\necho $contents;\n?>",
        "ob_get_clean();",
        "ob_get_clean()"
      ]
    },
    {
      "title": "PHP ob_get_contents() Function",
      "summary": "â® PHP Output Control Functions\nExampleGet your own PHP Server\nStore the contents of an output buffer in a variable:\nDefinition and Usage\nThe ob_get_contents() function returns the contents of the topmost output buffer.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\nob_start();\necho \"Hello World!\";\n$contents = ob_get_contents();\nob_end_clean();\n\necho \"The contents of the buffer are: \";\necho $contents;\n?>",
        "ob_get_contents();",
        "ob_get_contents()"
      ]
    },
    {
      "title": "PHP ob_get_flush() Function",
      "summary": "â® PHP Output Control Functions\nExampleGet your own PHP Server\nStore the contents of an output buffer in a variable:\nDefinition and Usage\nThe ob_get_flush() function outputs the contents of the topmost output buffer, returns the contents and the deletes the buffer. The output may be caught by another output buffer or, if there are no other output buffers, sent directly to the browser.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\nob_start();\necho \"Hello World!\";\n$contents = ob_get_flush();\n\necho \"<br>\";\necho \"The contents of the buffer were: \";\necho $contents;\n?>",
        "ob_get_flush();",
        "ob_get_flush()"
      ]
    },
    {
      "title": "PHP ob_get_length() Function",
      "summary": "â® PHP Output Control Functions\nExampleGet your own PHP Server\nDisplay the number of characters in the output buffer:\nDefinition and Usage\nThe ob_get_length() function returns the length of the topmost output buffer's contents in bytes. This is not always the same as the number of characters because some characters may have more than one byte.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\nob_start();\necho \"Hello World!\";\n$length = ob_get_length();\nob_end_clean();\n\necho \"The contents of the buffer are $length characters long\";\n?>",
        "ob_get_length();",
        "ob_get_length()"
      ]
    },
    {
      "title": "PHP ob_get_level() Function",
      "summary": "â® PHP Output Control Functions\nExampleGet your own PHP Server\nIndicate how many output buffers are active:\nDefinition and Usage\nThe ob_get_level() function indicates how many output buffers are currently on the stack. PHP may be configured to automatically create an output buffer when the script begins, which is why the buffer level may be 1 without calling ob_start().\nSyntax\nTechnical Details",
      "examples": [
        "<?php\n$buffer_count = ob_get_level();\necho \"Buffer level: $buffer_count.<br>\";\n\n// Add an output buffer\nob_start();\n$buffer_count = ob_get_level();\necho \"Buffer level: $buffer_count.<br>\";\n\n// Add another output buffer\nob_start();\n$buffer_count = ob_get_level();\necho \"Buffer level: $buffer_count.<br>\";\n\n// Close all buffers\nob_end_flush();\nob_end_flush();\n?>",
        "ob_get_level();",
        "ob_get_level()"
      ]
    },
    {
      "title": "PHP ob_gzhandler() Function",
      "summary": "â® PHP Output Control Functions\nExampleGet your own PHP Server\nAdd gzip compression to a page:\nDefinition and Usage\nThis function is intended to be passed as a callback to ob_start(). It compresses the contents of the output buffer using a compression algorithm that is supported by the browser and returns the compressed content. It also sends an HTTP header indicating which compression algorithm was used.\nSyntax\nWhen used as a callback for ob_start():\nWhen used on its own:\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\nob_start(\"ob_gzhandler\");\necho \"Hello World!\";\n?>",
        "ob_start(\"ob_gzhandler\");",
        "ob_gzhandler(buffer, phase);",
        "ob_start()"
      ]
    },
    {
      "title": "PHP ob_implicit_flush() Function",
      "summary": "â® PHP Output Control Functions\nExampleGet your own PHP Server\nSend content immediately to the browser on every statement which produces output:\nDefinition and Usage\nThe ob_implicit_flush() function enables or disabled implicit flushing. When enabled, implicit flushing sends output directly to the browser as soon as it is produced so that calls to the flush() function are not needed.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n// Turn on implicit flushing\nob_implicit_flush(1);\n\n// Some browsers will not display the content if it is too short\n// We use str_pad() to make the output long enough\necho str_pad(\"Hello World!\", 4096);\n\n// Even though the script is still running, the browser already can see the content\nsleep(3);\n?>",
        "ob_implicit_flush(flag);",
        "ob_implicit_flush()",
        "flush()"
      ]
    },
    {
      "title": "PHP ob_list_handlers() Function",
      "summary": "â® PHP Output Control Functions\nExampleGet your own PHP Server\nShow a list of handlers being used by the topmost output buffer:\nDefinition and Usage\nThe ob_list_handlers() function returns an array with the names of the callback functions that were passed into the ob_start() function of the topmost output buffer. The array may have an element named \"default output handler\" which refers to PHP's native handling of output buffers.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\nob_start(\"ob_gzhandler\");\nprint_r(ob_list_handlers());\n?>",
        "ob_list_handlers();",
        "ob_list_handlers()",
        "ob_start()"
      ]
    },
    {
      "title": "PHP ob_start() Function",
      "summary": "â® PHP Output Control Functions\nExampleGet your own PHP Server\nCreate an output buffer:\nDefinition and Usage\nThe ob_start() function creates an output buffer. A callback function can be passed in to do processing on the contents of the buffer before it gets flushed from the buffer. Flags can be used to permit or restrict what the buffer is able to do.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\nob_start();\necho \"This content will not be sent to the browser.\";\nob_end_clean();\n\necho \"This content will be sent to the browser.\";\n?>",
        "ob_start(callback, chunk_size, flags);",
        "ob_start()"
      ]
    },
    {
      "title": "PHP output_add_rewrite_var() Function",
      "summary": "â® PHP Output Control Functions\nExampleGet your own PHP Server\nAdd variables to URLs in the output:\nDefinition and Usage\nThe output_add_rewrite_var() function adds a variable to URLs in HTML tags and hidden inputs to forms. The tags which are affected depend on the configuration of the url_rewriter.tags setting in php.ini.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n// Make the URL rewriter affect <a href> and <form> tags\nini_set('url_rewriter.tags','a=href,form=');\n\n// Add a variable\noutput_add_rewrite_var('var', 'value');\n\n// Output a link and a form\necho '<a href=\"\">This link\\'s URL will have a variable</a>';\necho '<form>';\necho '<p>This form will have a hidden input</p>';\necho '<input type=\"text\" name=\"hello\">';\necho '</form>';\n?>",
        "output_add_rewrite_var(name, value);",
        "output_add_rewrite_var()",
        "url_rewriter.tags"
      ]
    },
    {
      "title": "PHP output_reset_rewrite_vars() Function",
      "summary": "â® PHP Output Control Functions\nExampleGet your own PHP Server\nAdd variables to URLs in the output:\nDefinition and Usage\nThe output_reset_rewrite_vars() function removes all variables that were added by output_add_rewrite_var() from the output buffer. This will not remove the variable from content that has already been sent, but will prevent them from being added to content that gets sent after this function call.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\n// Make the URL rewriter affect <a href> and <form> tags\nini_set('url_rewriter.tags','a=href,form=');\n\n// Add a variable\noutput_add_rewrite_var('var', 'value');\necho '<a href=\"\">This link (URL) will have a variable</a><br>';\nob_flush();\n\n// Remove the variable\noutput_reset_rewrite_vars();\necho '<a href=\"\">This link (URL) will not have a variable</a>';\n?>",
        "output_reset_rewrite_vars();",
        "output_reset_rewrite_vars()"
      ]
    },
    {
      "title": "PHP Regular Expression Functions",
      "summary": "PHP Regular Expression Introduction\nRegular expressions allow you to search for and replace patterns in strings.\nInstallation\nThe PHP regular expression functions are part of the PHP core. No installation is required to use these functions.\nRuntime Configuration\nThese settings in php.ini can be used to limit the amount time or resources used when evaluating regular expressions.\nPHP Regular Expression Functions\nRegular Expression Modifiers\nModifiers can change how a search is performed.\nRegular Expression Patterns\nBrackets are used to find a range of characters:\nMetacharacters\nMetacharacters are characters with a special meaning:\nQuantifiers\nQuantifiers define quantities:\nNote: If your expression needs to search for one of the special characters you can use a backslash ( \\ ) to escape them. For example, to search for one or more question marks you can use the following expression: $pattern = '/\\?+/';",
      "examples": []
    },
    {
      "title": "PHP preg_filter() Function",
      "summary": "â® PHP RegExp Reference\nExampleGet your own PHP Server\nWrap numbers in brackets in a list of strings:\nDefinition and Usage\nThe preg_filter() function returns a string or array of strings in which matches of the pattern have been replaced with the replacement string.\nIf the input is an array, this function returns an array. If the input is a string then this function returns a string.\nThis function is similar to preg_replace() with one difference: When a match for the pattern is not found in an input string, the string will not be used in the return value. In this scenario, if the input is a string instead of an array then the function returns null.\nReplacement strings may contain backreferences in the form \\n or $n where n is the index of a group in the pattern. In the returned string, instances of \\n and $n will be replaced with the substring that was matched by the group or, if \\0 or $0 are used, by the whole expression.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$input = [\n\"It is 5 o'clock\",\n\"40 days\",\n\"No numbers here\",\n\"In the year 2000\"\n];\n\n$result = preg_filter('/[0-9]+/', '($0)', $input);\nprint_r($result);\n?>",
        "preg_filter(pattern, replacement, input, limit, count)",
        "preg_filter()",
        "preg_replace()"
      ]
    },
    {
      "title": "PHP preg_grep() Function",
      "summary": "â® PHP RegExp Reference\nExampleGet your own PHP Server\nGet items from an array which begin with \"p\":\nDefinition and Usage\nThe preg_grep() function returns an array containing only elements from the input that match the given pattern.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$input = [\n\"Red\",\n\"Pink\",\n\"Green\",\n\"Blue\",\n\"Purple\"\n];\n\n$result = preg_grep(\"/^p/i\", $input);\nprint_r($result);\n?>",
        "preg_grep(pattern, input, flags)",
        "preg_grep()",
        "PREG_GREP_INVERT"
      ]
    },
    {
      "title": "PHP preg_last_error() Function",
      "summary": "â® PHP RegExp Reference\nExampleGet your own PHP Server\nUse preg_last_error() to handle errors:\nDefinition and Usage\nThe preg_last_error() function returns an error code for the most recently evaluated regular expression. The returned value will match one of the following constants:\nSyntax\nTechnical Details",
      "examples": [
        "<?php\n$str = 'The regular expression is invalid.';\n$pattern = '/invalid//';\n$match = @preg_match($pattern, $str, $matches);\n\nif($match === false) {\n// An error occurred\n$err = preg_last_error();\nif($err == PREG_INTERNAL_ERROR) {\necho 'Invalid regular expression.';\n}\n} else if($match) {\n// A match was found\necho $matches[0];\n} else {\n// No matches were found\necho 'No matches found';\n}\n?>",
        "preg_last_error()"
      ]
    },
    {
      "title": "PHP preg_match() Function",
      "summary": "â® PHP RegExp Reference\nExampleGet your own PHP Server\nUse a regular expression to do a case-insensitive search for \"w3schools\" in a string:\nDefinition and Usage\nThe preg_match() function returns whether a match was found in a string.\nSyntax\nParameter Values\nPREG_OFFSET_CAPTURE - When this option is enabled, each match, instead of being a string, will be an array where the first element is a substring containing the match and the second element is the position of the first character of the substring in the input.\nPREG_UNMATCHED_AS_NULL - When this option is enabled, unmatched subpatterns will be returned as NULL instead of as an empty string.\nTechnical Details\nMore Examples\nExample\nUse PREG_OFFSET_CAPTURE to find the position in the input string in which the matches were found:",
      "examples": [
        "<?php\n$str = \"Visit W3Schools\";\n$pattern = \"/w3schools/i\";\necho preg_match($pattern, $str);\n?>",
        "preg_match(pattern, input, matches, flags, offset)",
        "<?php\n$str = \"Welcome to W3Schools\";\n$pattern = \"/w3schools/i\";\npreg_match($pattern, $str, $matches, PREG_OFFSET_CAPTURE);\nprint_r($matches);\n?>",
        "preg_match()",
        "PREG_OFFSET_CAPTURE",
        "PREG_UNMATCHED_AS_NULL"
      ]
    },
    {
      "title": "PHP preg_match_all() Function",
      "summary": "â® PHP RegExp Reference\nExampleGet your own PHP Server\nFind all occurrences of \"ain\" in a string:\nDefinition and Usage\nThe preg_match_all() function returns the number of matches of a pattern that were found in a string and populates a variable with the matches that were found.\nSyntax\nParameter Values\nPREG_PATTERN_ORDER - Default. Each element in the matches array is an array of matches from the same grouping in the regular expression, with index 0 corresponding to matches of the whole expression and the remaining indices for subpattern matches.\nPREG_SET_ORDER - Each element in the matches array contains matches of all groupings for one of the found matches in the string.\nPREG_OFFSET_CAPTURE - When this option is enabled, each match, instead of being a string, will be an array where the first element is a substring containing the match and the second element is the position of the first character of the substring in the input.\nPREG_UNMATCHED_AS_NULL - When this option is enabled, unmatched subpatterns will be returned as NULL instead of as an empty string.\nTechnical Details\nMore Examples\nExample\nUse PREG_PATTERN_ORDER to set the structure of the matches array. In this example, each element in the matches array has all of the matches for one of the groupings of the regular expression.",
      "examples": [
        "<?php\n$str = \"The rain in SPAIN falls mainly on the plains.\";\n$pattern = \"/ain/i\";\nif(preg_match_all($pattern, $str, $matches)) {\nprint_r($matches);\n}\n?>",
        "preg_match_all(pattern, input, matches, flags, offset)",
        "<?php\n$str = \"abc ABC\";\n$pattern = \"/((a)b)(c)/i\";\nif(preg_match_all($pattern, $str, $matches, PREG_PATTERN_ORDER)) {\nprint_r($matches);\n}\n?>",
        "preg_match_all()"
      ]
    },
    {
      "title": "PHP preg_replace() Function",
      "summary": "â® PHP RegExp Reference\nExampleGet your own PHP Server\nUse a case-insensitive regular expression to replace Microsoft with W3Schools in a string:\nDefinition and Usage\nThe preg_replace() function returns a string or array of strings where all matches of a pattern or list of patterns found in the input are replaced with substrings.\nThere are three different ways to use this function:\n1. One pattern and a replacement string. Matches of the pattern are replaced with the replacement string.\n2. An array of patterns and a replacement string. Matches any of the patterns are replaced with the replacement string.\n3. An array of patterns and an array of replacement strings. Matches of each pattern are replaced with the replacement string at the same position in the replacements array. If no item is found at that position the match is replaced with an empty string.\nReplacement strings may contain a backreference in the form \\n or $n where n is the index of a group in the pattern. In the returned string, instances of \\n and $n will be replaced with the substring that was matched by the group or, if \\0 or $0 are used, by the whole expression.\nNote: For each input string, the function evaluates the patterns in the order that they are given. The result of evaluating the first pattern on the string is used as the input string for the second pattern and so on. This can lead to unexpected behaviour.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$str = 'Visit Microsoft!';\n$pattern = '/microsoft/i';\necho preg_replace($pattern, 'W3Schools', $str);\n?>",
        "preg_replace(patterns, replacements, input, limit, count)",
        "preg_replace()"
      ]
    },
    {
      "title": "PHP preg_replace_callback() Function",
      "summary": "â® PHP RegExp Reference\nExampleGet your own PHP Server\nCount letters in all of the words in a sentence:\nDefinition and Usage\nThe preg_replace_callback() function, given an expression and a callback, returns a string where all matches of the expression are replaced with the substring returned by the callback function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\nfunction countLetters($matches) {\nreturn $matches[0] . '(' . strlen($matches[0]) . ')';\n}\n\n$input = \"Welcome to W3Schools.com!\";\n$pattern = '/[a-z0-9\\.]+/i';\n$result = preg_replace_callback($pattern, 'countLetters', $input);\necho $result;\n?>",
        "preg_replace_callback(pattern, callback, input, limit, count)",
        "preg_replace_callback()"
      ]
    },
    {
      "title": "PHP preg_replace_callback_array() Function",
      "summary": "â® PHP RegExp Reference\nExampleGet your own PHP Server\nShow how many letters or digits are found in each word in a sentence:\nDefinition and Usage\nThe preg_replace_callback_array() function returns a string or an array of strings in which matches of a set of regular expressions are replaced with the return value of a callback function.\nNote: For each string, the function evaluates the patterns in the order that they are given. The result of evaluating the first pattern on the string is used as the input string for the second pattern and so on. This can lead to unexpected behaviour.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nThis example illustrates the potentially unexpected effects of the patterns being evaluated in sequence. First, the countLetters replacement adds \"[4letter]\" to \"days\" and, after that replacement has been performed, the countDigits replacement finds the \"4\" in \"4letter\" and adds \"[1digit]\" to that:",
      "examples": [
        "<?php\nfunction countLetters($matches) {\nreturn $matches[0] . '[' . strlen($matches[0]) . 'letter]';\n}\n\nfunction countDigits($matches) {\nreturn $matches[0] . '[' . strlen($matches[0]) . 'digit]';\n}\n\n$input = \"There are 365 days in a year.\";\n$patterns = [\n'/\\b[a-z]+\\b/i' => 'countLetters',\n'/\\b[0-9]+\\b/' => 'countDigits'\n];\n$result = preg_replace_callback_array($patterns, $input);\necho $result;\n?>",
        "preg_replace_callback_array(patterns, input, limit, count)",
        "<?php\nfunction countLetters($matches) {\nreturn $matches[0] . '[' . strlen($matches[0]) . 'letter]';\n}\n\nfunction countDigits($matches) {\nreturn $matches[0] . '[' . strlen($matches[0]) . 'digit]';\n}\n\n$input = \"365 days\";\n$patterns = [\n'/[a-z]+/i' => 'countLetters',\n'/[0-9]+/' => 'countDigits'\n];\n$result = preg_replace_callback_array($patterns, $input);\necho $result;\n?>",
        "preg_replace_callback_array()"
      ]
    },
    {
      "title": "PHP preg_split() Function",
      "summary": "â® PHP RegExp Reference\nExampleGet your own PHP Server\nUse preg_split() to split a date into its components:\nDefinition and Usage\nThe preg_split() function breaks a string into an array using matches of a regular expression as separators.\nSyntax\nParameter Values\nPREG_SPLIT_NO_EMPTY - Empty strings will be removed from the returned array.\nPREG_SPLIT_DELIM_CAPTURE - If the regular expression contains a group wrapped in parentheses, matches of this group will be included in the returned array.\nPREG_SPLIT_OFFSET_CAPTURE - Each element in the returned array will be an array with two element, where the first element is the substring and the second element is the position of the first character of the substring in the input string.\nTechnical Details\nMore Examples\nExample\nUsing the PREG_SPLIT_DELIM_CAPTURE flag:\nExample\nUsing the PREG_SPLIT_OFFSET_CAPTURE flag:",
      "examples": [
        "<?php\n$date = \"1970-01-01 00:00:00\";\n$pattern = \"/[-\\s:]/\";\n$components = preg_split($pattern, $date);\nprint_r($components);\n?>",
        "preg_split(pattern, string, limit, flags)",
        "<?php\n$date = \"1970-01-01 00:00:00\";\n$pattern = \"/([-\\s:])/\";\n$components = preg_split($pattern, $date, -1,\nPREG_SPLIT_DELIM_CAPTURE);\nprint_r($components);\n?>",
        "<?php\n$date = \"1970-01-01\";\n$pattern = \"/-/\";\n$components = preg_split($pattern, $date, -1,\nPREG_SPLIT_OFFSET_CAPTURE);\nprint_r($components);\n?>",
        "preg_split()"
      ]
    },
    {
      "title": "PHP preg_quote() Function",
      "summary": "â® PHP RegExp Reference\nExampleGet your own PHP Server\nUse preg_quote() to safely use special characters in a regular expression:\nDefinition and Usage\nThe preg_quote() function adds a backslash to characters that have a special meaning in regular expressions so that searches for the literal characters can be done. This function is useful when using user input in regular expressions.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$search = preg_quote(\"://\", \"/\");\n$input = 'https://www.w3schools.com/';\n$pattern = \"/$search/\";\nif(preg_match($pattern, $input)) {\necho \"The input is a URL.\";\n} else {\necho \"The input is not a URL.\";\n}\n?>",
        "preg_quote(input, delimiter)",
        "preg_quote()"
      ]
    },
    {
      "title": "PHP SimpleXML Functions",
      "summary": "PHP SimpleXML Introduction\nSimpleXML is an extension that allows us to easily manipulate and get XML data.\nSimpleXML provides an easy way of getting an element's name, attributes and textual content if you know the XML document's structure or layout.\nSimpleXML turns an XML document into a data structure you can iterate through like a collection of arrays and objects.\nInstallation\nFrom PHP 5, the SimpleXML functions are part of the PHP core. No installation is required to use these functions.\nPHP SimpleXML Functions\nPHP SimpleXML Iteration Functions",
      "examples": []
    },
    {
      "title": "PHP __construct() Function",
      "summary": "â® PHP SimpleXML Reference\nExampleGet your own PHP Server\nCreate a SimpleXMLElement object from a string:\nDefinition and Usage\nThe __construct() function creates a new SimpleXMLElement object.\nSyntax\nParameter Values\nPossible values:\nLIBXML_COMPACT - Activate nodes allocation optimization (may speed up application)\nLIBXML_DTDATTR - Set default DTD attributes\nLIBXML_DTDLOAD - Load external subset\nLIBXML_DTDVALID - Validate with the DTD\nLIBXML_NOBLANKS - Remove blank nodes\nLIBXML_NOCDATA - Merge CDATA as text nodes\nLIBXML_NOEMPTYTAG - Expand empty tags (e.g. <br/> to <br></br>), only available in the DOMDocument->save() and DOMDocument->saveXML() functions\nLIBXML_NOENT - Substitute entities\nLIBXML_NOERROR - Do not show error reports\nLIBXML_NONET - Disable network access while loading documents\nLIBXML_NOWARNING - Do not show warning reports\nLIBXML_NOXMLDECL - Drop the XML declaration when saving a document\nLIBXML_NSCLEAN - Remove redundant namespace declarations\nLIBXML_PARSEHUGE - Sets XML_PARSE_HUGE flag, which relaxes any hardcoded limit from the parser. This affects limits like maximum depth of a document and limits of the size of text nodes\nLIBXML_XINCLUDE - Implement XInclude substitution\nLIBXML_ERR_ERROR - Get recoverable errors\nLIBXML_ERR_FATAL - Get fatal errors\nLIBXML_ERR_NONE - Get no errors\nLIBXML_ERR_WARNING - Get simple warnings\nLIBXML_VERSION - Get libxml version (e.g. 20605 or 20617)\nLIBXML_DOTTED_VERSION - Get dotted libxml version (e.g. 2.6.5 or 2.6.17)\nREMOVE ADS\nTechnical Details\nMore Examples\nAssume we have the following XML file, \"note.xml\":\nExample\nCreate a SimpleXMLElement object from a URL:",
      "examples": [
        "<?php\n$note=<<<XML\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Do not forget me this weekend!</body>\n</note>\nXML;\n\n$xml=new SimpleXMLElement($note);\necho $xml->asXML();\n?>",
        "SimpleXMLElement::__construct(data, options, data_is_url, ns, is_prefix)",
        "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>",
        "<?php\n$xml=new SimpleXMLElement(\"note.xml\", 0, TRUE);\necho $xml->asXML();\n?>"
      ]
    },
    {
      "title": "PHP __toString() Function",
      "summary": "â® PHP SimpleXML Reference\nExampleGet your own PHP Server\nReturn the string content of the <note> element:\nDefinition and Usage\nThe __toString() function returns the string content of an element.\nThis function returns the string content that is directly in the element - not the string content that is inside this element's children!\nSyntax\nTechnical Details",
      "examples": [
        "<?php\n$xml = new SimpleXMLElement(\"<note>Hello <to>Tove</to><from>Jani</from>World!</note>\");\necho $xml;\n?>",
        "SimpleXMLElement::__toString()"
      ]
    },
    {
      "title": "PHP addAttribute() Function",
      "summary": "â® PHP SimpleXML Reference\nExampleGet your own PHP Server\nAdd an attribute to the root element (<note>) and to the <body> element:\nDefinition and Usage\nThe addAttribute() function appends an attribute to the SimpleXML element.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$note=<<<XML\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Do not forget me this weekend!</body>\n</note>\nXML;\n\n$xml = new SimpleXMLElement($note);\n// Add attribute to root element\n$xml->addAttribute(\"type\",\"private\");\n// Add attribute to body element\n$xml->body->addAttribute(\"date\",\"2014-01-01\");\n\necho $xml->asXML();\n?>",
        "SimpleXMLElement::addAttribute(name, value, ns)"
      ]
    },
    {
      "title": "PHP addChild() Function",
      "summary": "â® PHP SimpleXML Reference\nExampleGet your own PHP Server\nAdd a child element to the <body> element and a new <footer> element:\nDefinition and Usage\nThe addChild() function appends a child element to the SimpleXML element.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$note=<<<XML\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Do not forget me this weekend!</body>\n</note>\nXML;\n\n$xml = new SimpleXMLElement($note);\n\n// Add a child element to the body element\n$xml->body->addChild(\"date\",\"2014-01-01\");\n\n// Add a child element after the last element inside note\n$footer = $xml->addChild(\"footer\",\"Some footer text\");\n\necho $xml->asXML();\n?>",
        "SimpleXMLElement::addChild(name, value, ns)"
      ]
    },
    {
      "title": "PHP asXML() Function",
      "summary": "â® PHP SimpleXML Reference\nExampleGet your own PHP Server\nReturn a well-formed XML string (XML version 1.0) from a SimpleXML object:\nDefinition and Usage\nThe asXML() function returns a well-formed XML string (XML version 1.0) from a SimpleXML object.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$note=<<<XML\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Do not forget me this weekend!</body>\n</note>\nXML;\n\n$xml = new SimpleXMLElement($note);\necho $xml->asXML();\n?>",
        "SimpleXMLElement::asXML(filename)"
      ]
    },
    {
      "title": "PHP attributes() Function",
      "summary": "â® PHP SimpleXML Reference\nExampleGet your own PHP Server\nReturn the attributes and values for the XML <body> element:\nDefinition and Usage\nThe attributes() function returns the attributes and values of an XML element.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$note=<<<XML\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body date=\"2014-01-01\" type=\"private\">Do not forget me this weekend!</body>\n</note>\nXML;\n\n$xml = simplexml_load_string($note);\nforeach($xml->body[0]->attributes() as $a => $b)\n{\necho $a,'=\"',$b,\"<br>\";\n}\n?>",
        "SimpleXMLElement::attributes(ns, prefix)"
      ]
    },
    {
      "title": "PHP children() Function",
      "summary": "â® PHP SimpleXML Reference\nExampleGet your own PHP Server\nFind the children of the note node:\nDefinition and Usage\nThe children() function finds the children of a specified node.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nFind the children of the body node:",
      "examples": [
        "<?php\n$note=<<<XML\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Do not forget me this weekend!</body>\n</note>\nXML;\n\n$xml=simplexml_load_string($note);\nforeach ($xml->children() as $child)\n{\necho \"Child node: \" . $child . \"<br>\";\n}\n?>",
        "SimpleXMLElement::children(ns, prefix)",
        "<?php\n$note=<<<XML\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body><span>Important!</span> Do not forget me this weekend!</body>\n</note>\nXML;\n\n$xml=simplexml_load_string($note);\nforeach ($xml->body[0]->children() as $child)\n{\necho \"Child node: \" . $child . \"<br>\";\n}\n?>"
      ]
    },
    {
      "title": "PHP count() Function",
      "summary": "â® PHP SimpleXML Reference\nExampleGet your own PHP Server\nCount the children of the <car> element:\nDefinition and Usage\nThe count() function counts the children of a specified node.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\n$xml=<<<XML\n<cars>\n<car name=\"Volvo\">\n<child/>\n<child/>\n<child/>\n<child/>\n</car>\n<car name=\"BMW\">\n<child/>\n<child/>\n</car>\n</cars>\nXML;\n\n$elem=new SimpleXMLElement($xml);\nforeach ($elem as $car)\n{\nprintf(\"%s has %d children.<br>\", $car['name'], $car->count());\n}\n?>",
        "SimpleXMLElement::count();"
      ]
    },
    {
      "title": "PHP getDocNamespaces() Function",
      "summary": "â® PHP SimpleXML Reference\nExampleGet your own PHP Server\nReturn the namespaces declared in the root of the XML document:\nDefinition and Usage\nThe getDocNamespaces() function returns the namespaces declared in an XML document.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nReturn all namespaces declared in the XML document:",
      "examples": [
        "<?php\n$xml=<<<XML\n<?xml version=\"1.0\" standalone=\"yes\"?>\n<cars xmlns:c=\"http://w3schools.com/ns\">\n<c:car id=\"1\">Volvo</c:car>\n<c:car id=\"2\">BMW</c:car>\n<c:car id=\"3\">Saab</c:car>\n</cars>\nXML;\n\n$sxe=new SimpleXMLElement($xml);\n$ns=$sxe->getDocNamespaces();\nprint_r($ns);\n?>",
        "SimpleXMLElement::getDocNamespaces(recursive, from_root)",
        "<?php\n$xml=<<<XML\n<?xml version=\"1.0\" standalone=\"yes\"?>\n<cars xmlns:c=\"http://w3schools.com/ns\">\n<c:car id=\"1\">Volvo</c:car>\n<c:car id=\"2\">BMW</c:car>\n<c:car id=\"3\" a:country=\"Sweden\" xmlns:a=\"http://w3schools.com/country\">Saab</c:car>\n</cars>\nXML;\n\n$sxe=new SimpleXMLElement($xml);\n$ns=$sxe->getDocNamespaces(TRUE);\nvar_dump($ns);\n?>"
      ]
    },
    {
      "title": "PHP getName() Function",
      "summary": "â® PHP SimpleXML Reference\nExampleGet your own PHP Server\nReturn the name of the XML element and the children:\nDefinition and Usage\nThe getName() function returns the name of the XML element.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\n$xml=<<<XML\n<?xml version=\"1.0\" standalone=\"yes\"?>\n<cars>\n<car id=\"1\">Volvo</car>\n<car id=\"2\">BMW</car>\n<car id=\"3\">Saab</car>\n</cars>\nXML;\n\n$sxe=new SimpleXMLElement($xml);\n// Get the name of the cars element\necho $sxe->getName() . \"<br>\";\n\n// Also print out the names of the children of the cars element\nforeach ($sxe->children() as $child)\n{\necho $child->getName() . \"<br>\";\n}\n?>",
        "SimpleXMLElement::getName()"
      ]
    },
    {
      "title": "PHP getNamespaces() Function",
      "summary": "â® PHP SimpleXML Reference\nExampleGet your own PHP Server\nReturn all the namespaces used in the XML document:\nDefinition and Usage\nThe getNamespaces() function returns the namespaces used in an XML document.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$xml=<<<XML\n<?xml version=\"1.0\" standalone=\"yes\"?>\n<cars xmlns:c=\"http://w3schools.com/ns\" xmlns:a=\"http://w3schools.com/country\">\n<c:car id=\"1\">Volvo</c:car>\n<c:car id=\"2\">BMW</c:car>\n<c:car id=\"3\">Saab</c:car>\n</cars>\nXML;\n\n$sxe=new SimpleXMLElement($xml);\n$ns=$sxe->getNamespaces(true);\nvar_dump($ns);\n?>",
        "SimpleXMLElement::getNamespaces(recursive)"
      ]
    },
    {
      "title": "PHP registerXPathNamespace() Function",
      "summary": "â® PHP SimpleXML Reference\nExampleGet your own PHP Server\nCreate a namespace context for the next XPath query:\nDefinition and Usage\nThe registerXPathNamespace() function creates a namespace context for the next XPath query.\nThis function is useful if a namespace prefix is changed in an XML document. The registerXPathNamespace() function will create a prefix for specified namespace, so that the affected XML nodes can be accessed without altering the application code too much.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$xml=<<<XML\n<book xmlns:chap=\"http://example.org/chapter-title\">\n<title>My Book</title>\n<chapter id=\"1\">\n<chap:title>Chapter 1</chap:title>\n<para>Donec velit. Nullam eget tellus...</para>\n</chapter>\n<chapter id=\"2\">\n<chap:title>Chapter 2</chap:title>\n<para>Lorem ipsum dolor sit amet....</para>\n</chapter>\n</book>\nXML;\n\n$sxe=new SimpleXMLElement($xml);\n$sxe->registerXPathNamespace('c','http://example.org/chapter-title');\n$result=$sxe->xpath('//c:title');\nforeach ($result as $title)\n{\necho $title . \"<br>\";\n}\n?>",
        "SimpleXMLElement::registerXPathNamespace(prefix, ns)"
      ]
    },
    {
      "title": "PHP saveXML() Function",
      "summary": "â® PHP SimpleXML Reference\nDefinition and Usage\nThe saveXML() function is an alias of the asXML() function.",
      "examples": []
    },
    {
      "title": "PHP simplexml_import_dom() Function",
      "summary": "â® PHP SimpleXML Reference\nExampleGet your own PHP Server\nTake a node of a DOM document and make it into a SimpleXML node:\nDefinition and Usage\nThe simplexml_import_dom() function returns a SimpleXMLElement object from a DOM node.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nOutput the title of the second book node in the DOM document:",
      "examples": [
        "<?php\n$dom=new domDocument;\n$dom->loadXML(\"<note><to>Tove</to><from>Jani</from></note>\");\n$x=simplexml_import_dom($dom);\necho $x->from;\n?>",
        "simplexml_import_dom(node, classname)",
        "<?php\n$dom=new domDocument;\n$dom->loadXML(\"<books><book><title>Title1</title></book><book><title>Title2</title></book></books>\");\n$x=simplexml_import_dom($dom);\necho $x->book[1]->title;\n?>"
      ]
    },
    {
      "title": "PHP simplexml_load_file() Function",
      "summary": "â® PHP SimpleXML Reference\nExampleGet your own PHP Server\nConvert an XML file into an object, then output keys and elements of the object:\nDefinition and Usage\nThe simplexml_load_file() function converts an XML document to an object.\nSyntax\nParameter Values\nPossible values:\nLIBXML_COMPACT - Activate nodes allocation optimization (may speed up application)\nLIBXML_DTDATTR - Set default DTD attributes\nLIBXML_DTDLOAD - Load external subset\nLIBXML_DTDVALID - Validate with the DTD\nLIBXML_NOBLANKS - Remove blank nodes\nLIBXML_NOCDATA - Merge CDATA as text nodes\nLIBXML_NOEMPTYTAG - Expand empty tags (e.g. <br/> to <br></br>), only available in the DOMDocument->save() and DOMDocument->saveXML() functions\nLIBXML_NOENT - Substitute entities\nLIBXML_NOERROR - Do not show error reports\nLIBXML_NONET - Disable network access while loading documents\nLIBXML_NOWARNING - Do not show warning reports\nLIBXML_NOXMLDECL - Drop the XML declaration when saving a document\nLIBXML_NSCLEAN - Remove redundant namespace declarations\nLIBXML_PARSEHUGE - Sets XML_PARSE_HUGE flag, which relaxes any hardcoded limit from the parser. This affects limits like maximum depth of a document and limits of the size of text nodes\nLIBXML_XINCLUDE - Implement XInclude substitution\nLIBXML_ERR_ERROR - Get recoverable errors\nLIBXML_ERR_FATAL - Get fatal errors\nLIBXML_ERR_NONE - Get no errors\nLIBXML_ERR_WARNING - Get simple warnings\nLIBXML_VERSION - Get libxml version (e.g. 20605 or 20617)\nLIBXML_DOTTED_VERSION - Get dotted libxml version (e.g. 2.6.5 or 2.6.17)\nREMOVE ADS\nTechnical Details\nMore Examples\nAssume we have the following XML file, \"note.xml\":\nExample\nOutput the data from each element in the XML file:\nExample\nOutput the element's name and data for each child node in the XML file:",
      "examples": [
        "<?php\n$xml=simplexml_load_file(\"note.xml\");\nprint_r($xml);\n?>",
        "simplexml_load_file(file, class, options, ns, is_prefix)",
        "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>",
        "<?php\n$xml=simplexml_load_file(\"note.xml\");\necho $xml->to . \"<br>\";\necho $xml->from . \"<br>\";\necho $xml->heading . \"<br>\";\necho $xml->body;\n?>",
        "<?php\n$xml=simplexml_load_file(\"note.xml\");\necho $xml->getName() . \"<br>\";\n\nforeach($xml->children() as $child)\n{\necho $child->getName() . \": \" . $child . \"<br>\";\n}\n?>"
      ]
    },
    {
      "title": "PHP simplexml_load_string() Function",
      "summary": "â® PHP SimpleXML Reference\nExampleGet your own PHP Server\nConvert an XML string into an object, then output keys and elements of the object:\nDefinition and Usage\nThe simplexml_load_string() function converts a well-formed XML string into an object.\nSyntax\nParameter Values\nPossible values:\nLIBXML_COMPACT - Activate nodes allocation optimization (may speed up application)\nLIBXML_DTDATTR - Set default DTD attributes\nLIBXML_DTDLOAD - Load external subset\nLIBXML_DTDVALID - Validate with the DTD\nLIBXML_NOBLANKS - Remove blank nodes\nLIBXML_NOCDATA - Merge CDATA as text nodes\nLIBXML_NOEMPTYTAG - Expand empty tags (e.g. <br/> to <br></br>), only available in the DOMDocument->save() and DOMDocument->saveXML() functions\nLIBXML_NOENT - Substitute entities\nLIBXML_NOERROR - Do not show error reports\nLIBXML_NONET - Disable network access while loading documents\nLIBXML_NOWARNING - Do not show warning reports\nLIBXML_NOXMLDECL - Drop the XML declaration when saving a document\nLIBXML_NSCLEAN - Remove redundant namespace declarations\nLIBXML_PARSEHUGE - Sets XML_PARSE_HUGE flag, which relaxes any hardcoded limit from the parser. This affects limits like maximum depth of a document and limits of the size of text nodes\nLIBXML_XINCLUDE - Implement XInclude substitution\nLIBXML_ERR_ERROR - Get recoverable errors\nLIBXML_ERR_FATAL - Get fatal errors\nLIBXML_ERR_NONE - Get no errors\nLIBXML_ERR_WARNING - Get simple warnings\nLIBXML_VERSION - Get libxml version (e.g. 20605 or 20617)\nLIBXML_DOTTED_VERSION - Get dotted libxml version (e.g. 2.6.5 or 2.6.17)\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nOutput the data from each element in the XML string:\nExample\nOutput the element's name and data for each child node in the XML string:",
      "examples": [
        "<?php\n$note=<<<XML\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Do not forget me this weekend!</body>\n</note>\nXML;\n\n$xml=simplexml_load_string($note);\nprint_r($xml);\n?>",
        "simplexml_load_string(data, class, options, ns, is_prefix)",
        "<?php\n$note=<<<XML\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Do not forget me this weekend!</body>\n</note>\nXML;\n\n$xml=simplexml_load_string($note);\necho $xml->to . \"<br>\";\necho $xml->from . \"<br>\";\necho $xml->heading . \"<br>\";\necho $xml->body;\n?>",
        "<?php\n$note=<<<XML\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Do not forget me this weekend!</body>\n</note>\nXML;\n\n$xml=simplexml_load_string($note);\necho $xml->getName() . \"<br>\";\n\nforeach($xml->children() as $child)\n{\necho $child->getName() . \": \" . $child . \"<br>\";\n}\n?>"
      ]
    },
    {
      "title": "PHP xpath() Function",
      "summary": "â® PHP SimpleXML Reference\nExampleGet your own PHP Server\nRun an XPath query on the XML document:\nDefinition and Usage\nThe xpath() function runs an XPath query on the XML document.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$note=<<<XML\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Do not forget me this weekend!</body>\n</note>\nXML;\n\n$xml = new SimpleXMLElement($note);\n\n$result = $xml->xpath(\"/note/to\");\n\nprint_r($result);\n?>",
        "SimpleXMLElement::xpath(path)"
      ]
    },
    {
      "title": "PHP current() Function",
      "summary": "â® PHP SimpleXML Reference\nExampleGet your own PHP Server\nRewind to the first element and then return it with the current() function:\nDefinition and Usage\nThe current() function returns the current element.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\n$note=<<<XML\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Do not forget me this weekend!</body>\n</note>\nXML;\n\n$xml = new SimpleXMLIterator($note);\n\n// rewind to the first element\n$xml->rewind();\n\n// return current element\nvar_dump($xml->current());\n?>",
        "SimpleXMLIterator::current()"
      ]
    },
    {
      "title": "PHP getChildren() Function",
      "summary": "â® PHP SimpleXML Reference\nExampleGet your own PHP Server\nGet the child elements of the current element and output the name and data:\nDefinition and Usage\nThe getChildren() function returns the child elements of the current element.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\n$bookxml = <<<XML\n<bookstore>\n<book>\n<title>Everyday Italian</title>\n<author>Giada De Laurentiis</author>\n</book>\n<book>\n<title>Harry Potter</title>\n<author>J K. Rowling</author>\n</book>\n<book>\n<title>Learning XML</title>\n<author>Erik T. Ray</author>\n</book>\n</bookstore>\nXML;\n\n$xml = new SimpleXMLIterator($bookxml);\n\nfor( $xml->rewind(); $xml->valid(); $xml->next() ) {\nforeach($xml->getChildren() as $name => $data) {\necho \"The $name is '$data'\";\necho \"<br>\";\n}\n}\n?>",
        "SimpleXMLIterator::getChildren()"
      ]
    },
    {
      "title": "PHP hasChildren() Function",
      "summary": "â® PHP SimpleXML Reference\nExampleGet your own PHP Server\nChecks whether the current element has children, if it has; output the current element:\nDefinition and Usage\nThe hasChildren() function checks whether the current element has children.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\n$bookxml = <<<XML\n<bookstore>\n<book>\n<title>Everyday Italian</title>\n<author>Giada De Laurentiis</author>\n</book>\n<book>\n<title>Harry Potter</title>\n<author>J K. Rowling</author>\n</book>\n<book>\n<title>Learning XML</title>\n<author>Erik T. Ray</author>\n</book>\n</bookstore>\nXML;\n\n$xml = new SimpleXMLIterator($bookxml);\n\nfor( $xml->rewind(); $xml->valid(); $xml->next() ) {\nif($xml->hasChildren()) {\nvar_dump($xml->current());\necho \"<br>\";\n}\n}\n?>",
        "SimpleXMLIterator::hasChildren()"
      ]
    },
    {
      "title": "PHP key() Function",
      "summary": "â® PHP SimpleXML Reference\nExampleGet your own PHP Server\nRewind to the first element and return the current key (which is the XML tag name of the current element):\nDefinition and Usage\nThe key() function returns the current key (which is the XML tag name of the current element).\nSyntax\nTechnical Details",
      "examples": [
        "<?php\n$note=<<<XML\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Do not forget me this weekend!</body>\n</note>\nXML;\n\n$xml = new SimpleXMLIterator($note);\n\n// rewind to the first element\n$xml->rewind();\n\n// return current key\nvar_dump($xml->key());\n?>",
        "SimpleXMLIterator::key()"
      ]
    },
    {
      "title": "PHP next() Function",
      "summary": "â® PHP SimpleXML Reference\nExampleGet your own PHP Server\nRewind to the first element, move to the next element and then return it with the current() function:\nDefinition and Usage\nThe next() function moves to the next element.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\n$note=<<<XML\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Do not forget me this weekend!</body>\n</note>\nXML;\n\n$xml = new SimpleXMLIterator($note);\n\n// rewind to the first element\n$xml->rewind();\n\n// move to the next element\n$xml->next();\n\n// return current element\nvar_dump($xml->current());\n?>",
        "SimpleXMLIterator::next()"
      ]
    },
    {
      "title": "PHP rewind() Function",
      "summary": "â® PHP SimpleXML Reference\nExampleGet your own PHP Server\nRewind to the first element and then return it (with current()):\nDefinition and Usage\nThe rewind() function rewinds to the first element.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\n$note=<<<XML\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Do not forget me this weekend!</body>\n</note>\nXML;\n\n$xml = new SimpleXMLIterator($note);\n\n// rewind to the first element\n$xml->rewind();\n\n// return current element\nvar_dump($xml->current());\n?>",
        "SimpleXMLIterator::rewind()"
      ]
    },
    {
      "title": "PHP valid() Function",
      "summary": "â® PHP SimpleXML Reference\nExampleGet your own PHP Server\nCheck whether the current element is valid after a call to rewind() and next():\nDefinition and Usage\nThe valid() function checks whether the current element is valid after a call to rewind() or next().\nSyntax\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nCheck whether the current element is valid after a call to rewind() and next():",
      "examples": [
        "<?php\n$note=<<<XML\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Do not forget me this weekend!</body>\n</note>\nXML;\n\n$xml = new SimpleXMLIterator($note);\n\n// rewind to the first element\n$xml->rewind();\n\n// check if valid\nvar_dump($xml->valid());\n\n// move to the next element\n$xml->next();\n\n// check if valid\nvar_dump($xml->valid());\n?>",
        "SimpleXMLIterator::valid()",
        "<?php\n$xml = new SimpleXMLIterator('<books><book>Learn PHP</book></books>');\n\n// rewind to the first element\n$xml->rewind();\n\n// check if valid\nvar_dump($xml->valid());\n\n// move to the next element\n$xml->next();\n\n// check if valid - will be bool(false) because there is only one element\nvar_dump($xml->valid());\n?>"
      ]
    },
    {
      "title": "PHP Stream Functions",
      "summary": "PHP Stream Introduction\nStreams are the way of generalizing file, network, data compression, and other operations which share a common set of functions and uses. In its simplest definition, a stream is a resource object which exhibits streamable behavior. That is, it can be read from or written to in a linear fashion, and may be able to fseek() to an arbitrary location within the stream.\nA wrapper is additional code which tells the stream how to handle specific protocols/encodings.\nInstallation\nThe Stream functions are part of the PHP core. There is no installation needed to use these functions.\nPHP Stream Functions",
      "examples": []
    },
    {
      "title": "PHP String Functions",
      "summary": "PHP String Functions\nThe PHP string functions are part of the PHP core. No installation is required to use these functions.",
      "examples": []
    },
    {
      "title": "PHP addcslashes() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nAdd a backslash in front of the character \"W\":\nDefinition and Usage\nThe addcslashes() function returns a string with backslashes in front of the specified characters.\nNote: The addcslashes() function is case-sensitive.\nNote: Be careful using addcslashes() on 0 (NULL), r (carriage return), n (newline), f (form feed), t (tab) and v (vertical tab). In PHP, \\0, \\r, \\n, \\t, \\f and \\v are predefined escape sequences.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nAdd backslashes to certain characters in a string:\nExample\nAdd backslashes to a range of characters in a string:",
      "examples": [
        "<?php\n$str = addcslashes(\"Hello World!\",\"W\");\necho($str);\n?>",
        "addcslashes(string,characters)",
        "<?php\n$str = \"Welcome to my humble Homepage!\";\necho $str.\"<br>\";\necho addcslashes($str,'m').\"<br>\";\necho addcslashes($str,'H').\"<br>\";\n?>",
        "<?php\n$str = \"Welcome to my humble Homepage!\";\necho $str.\"<br>\";\necho addcslashes($str,'A..Z').\"<br>\";\necho addcslashes($str,'a..z').\"<br>\";\necho addcslashes($str,'a..g');\n?>"
      ]
    },
    {
      "title": "PHP addslashes() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nAdd a backslash in front of each double quote (\"):\nDefinition and Usage\nThe addslashes() function returns a string with backslashes in front of predefined characters.\nThe predefined characters are:\nsingle quote (')\ndouble quote (\")\nbackslash (\\)\nNULL\nTip: This function can be used to prepare a string for storage in a database and database queries.\nNote: Prior to PHP 5.4, the PHP dir magic_quotes_gpc was on by default and it ran addslashes() on all GET, POST, and COOKIE data by default. You should not use addslashes() on strings that have already been escaped, as it will cause double escaping. The function get_magic_quotes_gpc() can be used to check this.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nAdd backslashes to the predefined characters in a string:",
      "examples": [
        "<?php\n$str = addslashes('What does \"yolo\" mean?');\necho($str);\n?>",
        "addslashes(string)",
        "<?php\n$str = \"Who's Peter Griffin?\";\necho $str . \" This is not safe in a database query.<br>\";\necho addslashes($str) . \" This is safe in a database query.\";\n?>"
      ]
    },
    {
      "title": "PHP bin2hex() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nConvert \"Hello World!\" to hexadecimal values:\nDefinition and Usage\nThe bin2hex() function converts a string of ASCII characters to hexadecimal values. The string can be converted back using the pack() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert a string value from binary to hex and back:",
      "examples": [
        "<?php\n$str = bin2hex(\"Hello World!\");\necho($str);\n?>",
        "bin2hex(string)",
        "<?php\n$str = \"Hello world!\";\necho bin2hex($str) . \"<br>\";\necho pack(\"H*\",bin2hex($str)) . \"<br>\";\n?>"
      ]
    },
    {
      "title": "PHP chop() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nRemove characters from the right end of a string:\nDefinition and Usage\nThe chop() function removes whitespaces or other predefined characters from the right end of a string.\nSyntax\nParameter Values\n\"\\0\" - NULL\n\"\\t\" - tab\n\"\\n\" - new line\n\"\\x0B\" - vertical tab\n\"\\r\" - carriage return\n\" \" - ordinary white space\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nRemove newlines (\\n) from the right end of a string:\nThe HTML output of the code above will be (View Source):\nThe browser output of the code above will be:",
      "examples": [
        "<?php\n$str = \"Hello World!\";\necho $str . \"<br>\";\necho chop($str,\"World!\");\n?>",
        "chop(string,charlist)",
        "<?php\n$str = \"Hello World!\\n\\n\";\necho $str;\necho chop($str);\n?>",
        "<!DOCTYPE html>\n<html>\n\n<body>\n\nHello World!\n\nHello World!\n\n</body>\n</html>",
        "Hello World! Hello World!"
      ]
    },
    {
      "title": "PHP chr() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nReturn characters from different ASCII values:\nDefinition and Usage\nThe chr() function returns a character from the specified ASCII value.\nThe ASCII value can be specified in decimal, octal, or hex values. Octal values are defined by a leading 0, while hex values are defined by a leading 0x.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nUsing the octal value 046 to add the ASCII Character: &.\nExample\nUsing the decimal values 43 and 61 to add the ASCII Characters: + and =.",
      "examples": [
        "<?php\necho chr(52) . \"<br>\"; // Decimal value\necho chr(052) . \"<br>\"; // Octal value\necho chr(0x52) . \"<br>\"; // Hex value\n?>",
        "chr(ascii)",
        "<?php\n$str = chr(046);\necho(\"You $str me forever!\");\n?>",
        "<?php\n$str = chr(43);\n$str2 = chr(61);\necho(\"2 $str 2 $str2 4\");\n?>"
      ]
    },
    {
      "title": "PHP chunk_split() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nSplit the string after each character and add a \".\" after each split:\nDefinition and Usage\nThe chunk_split() function splits a string into a series of smaller parts.\nNote: This function does not alter the original string.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nSplit the string after each sixth character and add a \"...\" after each split:",
      "examples": [
        "<?php\n$str = \"Hello world!\";\necho chunk_split($str,1,\".\");\n?>",
        "chunk_split(string,length,end)",
        "<?php\n$str = \"Hello world!\";\necho chunk_split($str,6,\"...\");\n?>"
      ]
    },
    {
      "title": "PHP convert_cyr_string() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nConvert a string from one character-set to another:\nDefinition and Usage\nThe convert_cyr_string() function converts a string from one Cyrillic character-set to another.\nThe supported Cyrillic character-sets are:\nk - koi8-r\nw - windows-1251\ni - iso8859-5\na - x-cp866\nd - x-cp866\nm - x-mac-cyrillic\nNote: This function is binary-safe.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$str = \"Hello world! Ã¦Ã¸Ã¥\";\necho $str . \"<br>\";\necho convert_cyr_string($str,'w','a');\n?>",
        "convert_cyr_string(string,from,to)"
      ]
    },
    {
      "title": "PHP convert_uudecode() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nDecode a uuencoded string:\nDefinition and Usage\nThe convert_uudecode() function decodes a uuencoded string.\nThis function is often used together with the convert_uuencode() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nEncode a string and then decode it:",
      "examples": [
        "<?php\n$str = \",2&5L;&\\@=V]R;&0A `\";\necho convert_uudecode($str);\n?>",
        "convert_uudecode(string)",
        "<?php\n$str = \"Hello world!\";\n// Encode the string\n$encodeString = convert_uuencode($str);\necho $encodeString . \"<br>\";\n\n// Decode the string\n$decodeString = convert_uudecode($encodeString);\necho $decodeString;\n?>"
      ]
    },
    {
      "title": "PHP convert_uuencode() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nEncode a string:\nDefinition and Usage\nThe convert_uuencode() function encodes a string using the uuencode algorithm.\nNote: This function encodes all strings (including binary) into printable characters. This will fix any problems with obscure binary data when storing in a database or transmit data over a network. Remember to use the convert_uudecode() function before using the data again.\nNote: Uuencoded data is about 35% larger than the original.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nEncode a string and then decode it:",
      "examples": [
        "<?php\n$str = \"Hello world!\";\necho convert_uuencode($str);\n?>",
        "convert_uuencode(string)",
        "<?php\n$str = \"Hello world!\";\n// Encode the string\n$encodeString = convert_uuencode($str);\necho $encodeString . \"<br>\";\n\n// Decode the string\n$decodeString = convert_uudecode($encodeString);\necho $decodeString;\n?>"
      ]
    },
    {
      "title": "PHP count_chars() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nReturn a string with all the different characters used in \"Hello World!\" (mode 3):\nDefinition and Usage\nThe count_chars() function returns information about characters used in a string (for example, how many times an ASCII character occurs in a string, or which characters that have been used or not been used in a string).\nSyntax\nParameter Values\n0 - an array with the ASCII value as key and number of occurrences as value\n1 - an array with the ASCII value as key and number of occurrences as value, only lists occurrences greater than zero\n2 - an array with the ASCII value as key and number of occurrences as value, only lists occurrences equal to zero are listed\n3 - a string with all the different characters used\n4 - a string with all the unused characters\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nReturn a string with all the unused characters in \"Hello World!\" (mode 4):\nExample\nIn this example we will use count_chars() with mode 1 to check the string. Mode 1 will return an array with the ASCII value as key and how many times it occurred as value:\nExample\nAnother example of counting how many times an ASCII character occurs in a string:",
      "examples": [
        "<?php\n$str = \"Hello World!\";\necho count_chars($str,3);\n?>",
        "count_chars(string,mode)",
        "<?php\n$str = \"Hello World!\";\nprint_r(count_chars($str,1));\n?>",
        "<?php\n$str = \"PHP is pretty fun!!\";\n$strArray = count_chars($str,1);\n\nforeach ($strArray as $key=>$value)\n{\necho \"The character <b>'\".chr($key).\"'</b> was found $value time(s)<br>\";\n}\n?>"
      ]
    },
    {
      "title": "PHP crc32() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nPrint the result of crc32():\nDefinition and Usage\nThe crc32() function calculates a 32-bit CRC (cyclic redundancy checksum) for a string.\nThis function can be used to validate data integrity.\nTip: To ensure that you get the correct string representation from the crc32() function, you'll need to use the %u formatter of the printf() or sprintf() function. If the %u formatter is not used, the result may display in incorrect and negative numbers.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample:\nIn this example we will print the result of crc32() with and without the \"%u\" formatter (note that the result is equal):\nThe output of the code above will be:\nExample:\nIn this example we will print the result of crc32() with and without the \"%u\" formatter (note that the result is not equal):\nThe output of the code above will be:",
      "examples": [
        "<?php\n$str = crc32(\"Hello World!\");\nprintf(\"%u\\n\",$str);\n?>",
        "crc32(string)",
        "<?php\n$str = crc32(\"Hello world!\");\necho 'Without %u: '.$str.\"<br>\";\necho 'With %u: ';\nprintf(\"%u\",$str);\n?>",
        "Without %u: 461707669\nWith %u: 461707669",
        "<?php\n$str = crc32(\"Hello world.\");\necho 'Without %u: '.$str.\"<br>\";\necho 'With %u: ';\nprintf(\"%u\",$str);\n?>",
        "Without %u: -1959132156\nWith %u: 2335835140"
      ]
    },
    {
      "title": "PHP crypt() Function",
      "summary": "Definition and Usage\nThe crypt() function returns a hashed string using DES, Blowfish, or MD5 algorithms.\nThis function behaves different on different operating systems. PHP checks what algorithms are available and what algorithms to use when it is installed.\nThe salt parameter is optional. However, crypt() creates a weak password without the salt. Make sure to specify a strong enough salt for better security.\nThere are some constants that are used together with the crypt() function. The value of these constants are set by PHP when it is installed.\nConstants:\n[CRYPT_STD_DES] - Standard DES-based hash with two character salt from the alphabet \"./0-9A-Za-z\". Using invalid characters in the salt will cause this function to fail.\n[CRYPT_EXT_DES] - Extended DES-based hash with a nine character salt consisting of an underscore followed by 4 bytes of iteration count and 4 bytes of salt. These are encoded as printable characters, 6 bits per character, least significant character first. The values 0 to 63 are encoded as \"./0-9A-Za-z\". Using invalid characters in the salt will cause the function to fail.\n[CRYPT_MD5] - MD5 hashing with a 12 character salt starting with $1$\n[CRYPT_BLOWFISH] - Blowfish hashing with a salt starting with $2a$, $2x$, or $2y$, a two digit cost parameters \"$\", and 22 characters from the alphabet \"./0-9A-Za-z\". Using characters outside of the alphabet will cause this function to return a zero-length string. The \"$\" parameter is the base-2 logarithm of the iteration count for the underlying Blowfish-bashed hashing algorithmeter and must be in range 04-31. Values outside this range will cause the function to fail.\n[CRYPT_SHA_256] - SHA-256 hash with a 16 character salt starting with $5$. If the salt string starts with \"rounds=<N>$\", the numeric value of N is used to indicate how many times the hashing loop should be executed, much like the cost parameter on Blowfish. The default number of rounds is 5000, there is a minimum of 1000 and a maximum of 999,999,999. Any selection of N outside this range will be truncated to the nearest limit.\n[CRYPT_SHA_512] - SHA-512 hash with a 16 character salt starting with $6$. If the salt string starts with \"rounds=<N>$\", the numeric value of N is used to indicate how many times the hashing loop should be executed, much like the cost parameter on Blowfish. The default number of rounds is 5000, there is a minimum of 1000 and a maximum of 999,999,999. Any selection of N outside this range will be truncated to the nearest limit.\nOn systems where this function supports multiple algorithms, the constants above are set to \"1\" if supported and \"0\" otherwise.\nNote: There is no decrypt function. The crypt() function uses a one-way algorithm.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExampleGet your own PHP Server\nIn this example we will test the different algorithms:\nThe output of the code above could be (depending on the operating system):",
      "examples": [
        "crypt(str,salt)",
        "<?php\n// 2 character salt\nif (CRYPT_STD_DES == 1)\n{\necho \"Standard DES: \".crypt('something','st').\"\\n<br>\";\n}\nelse\n{\necho \"Standard DES not supported.\\n<br>\";\n}\n\n// 4 character salt\nif (CRYPT_EXT_DES == 1)\n{\necho \"Extended DES: \".crypt('something','_S4..some').\"\\n<br>\";\n}\nelse\n{\necho \"Extended DES not supported.\\n<br>\";\n}\n\n// 12 character salt starting with $1$\nif (CRYPT_MD5 == 1)\n{\necho \"MD5: \".crypt('something','$1$somethin$').\"\\n<br>\";\n}\nelse\n{\necho \"MD5 not supported.\\n<br>\";\n}\n\n// Salt starting with $2a$. The two digit cost parameter: 09. 22 characters\nif (CRYPT_BLOWFISH == 1)\n{\necho \"Blowfish: \".crypt('something','$2a$09$anexamplestringforsalt$').\"\\n<br>\";\n}\nelse\n{\necho \"Blowfish DES not supported.\\n<br>\";\n}\n\n// 16 character salt starting with $5$. The default number of rounds is 5000.\nif (CRYPT_SHA256 == 1)\n{\necho \"SHA-256: \".crypt('something','$5$rounds=5000$anexamplestringforsalt$').\"\\n<br>\"; }\nelse\n{\necho \"SHA-256 not supported.\\n<br>\";\n}\n\n// 16 character salt starting with $6$. The default number of rounds is 5000.\nif (CRYPT_SHA512 == 1)\n{\necho \"SHA-512: \".crypt('something','$6$rounds=5000$anexamplestringforsalt$');\n}\nelse\n{\necho \"SHA-512 not supported.\";\n}\n?>",
        "Standard DES: stqAdD7zlbByI\nExtended DES: _S4..someQXidlBpTUu6\nMD5: $1$somethin$4NZKrUlY6r7K7.rdEOZ0w.\nBlowfish: $2a$09$anexamplestringforsaleLouKejcjRlExmf1671qw3Khl49R3dfu\nSHA-256: $5$rounds=5000$anexamplestringf$KIrctqsxo2wrPg5Ag/hs4jTi4PmoNKQUGWFXlVy9vu9\nSHA-512: $6$rounds=5000$anexamplestringf$Oo0skOAdUFXkQxJpwzO05wgRHG0dhuaPBaOU/\noNbGpCEKlf/7oVM5wn6AN0w2vwUgA0O24oLzGQpp1XKI6LLQ0."
      ]
    },
    {
      "title": "PHP echo() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nWrite some text to the output:\nDefinition and Usage\nThe echo() function outputs one or more strings.\nNote: The echo() function is not actually a function, so you are not required to use parentheses with it. However, if you want to pass more than one parameter to echo(), using parentheses will generate a parse error.\nTip: The echo() function is slightly faster than print().\nTip: The echo() function also has a shortcut syntax. Prior to PHP 5.4.0, this syntax only works with the short_open_tag configuration setting enabled.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nWrite the value of the string variable ($str) to the output:\nExample\nWrite the value of the string variable ($str) to the output, including HTML tags:\nExample\nJoin two string variables together:\nExample\nWrite the value of an array to the output:\nExample\nWrite some text to the output:\nExample\nHow to use multiple parameters:\nExample\nDifference of single and double quotes. Single quotes will print the variable name, not the value:\nExample\nShortcut syntax (will only work with the short_open_tag configuration setting enabled):",
      "examples": [
        "<?php\necho \"Hello world!\";\n?>",
        "echo(strings)",
        "<?php\n$str = \"Hello world!\";\necho $str;\n?>",
        "<?php\n$str = \"Hello world!\";\necho $str;\necho \"<br>What a nice day!\";\n?>",
        "<?php\n$str1=\"Hello world!\";\n$str2=\"What a nice day!\";\necho $str1 . \" \" . $str2;\n?>",
        "<?php\n$age=array(\"Peter\"=>\"35\");\necho \"Peter is \" . $age['Peter'] . \" years old.\";\n?>",
        "<?php\necho \"This text\nspans multiple\nlines.\";\n?>",
        "<?php\necho 'This ','string ','was ','made ','with multiple parameters.';\n?>",
        "<?php\n$color = \"red\";\necho \"Roses are $color\";\necho \"<br>\";\necho 'Roses are $color';\n?>",
        "<?php\n$color = \"red\";\n?>\n\n<p>Roses are <?=$color?></p>"
      ]
    },
    {
      "title": "PHP explode() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nBreak a string into an array:\nDefinition and Usage\nThe explode() function breaks a string into an array.\nNote: The \"separator\" parameter cannot be an empty string.\nNote: This function is binary-safe.\nSyntax\nParameter Values\nPossible values:\nGreater than 0 - Returns an array with a maximum of limit element(s)\nLess than 0 - Returns an array except for the last -limit elements()\n0 - Returns an array with one element\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nUsing the limit parameter to return a number of array elements:",
      "examples": [
        "<?php\n$str = \"Hello world. It's a beautiful day.\";\nprint_r (explode(\" \",$str));\n?>",
        "explode(separator,string,limit)",
        "<?php\n$str = 'one,two,three,four';\n\n// zero limit\nprint_r(explode(',',$str,0));\n\n// positive limit\nprint_r(explode(',',$str,2));\n\n// negative limit\nprint_r(explode(',',$str,-1));\n?>"
      ]
    },
    {
      "title": "PHP fprintf() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nWrite some text to a text file named \"test.txt\":\nThe output of the code above will be:\nThe following text will be written to the file \"test.txt\":\nDefinition and Usage\nThe fprintf() function writes a formatted string to a specified output stream (example: file or database).\nThe arg1, arg2, ++ parameters will be inserted at percent (%) signs in the main string. This function works \"step-by-step\". At the first % sign, arg1 is inserted, at the second % sign, arg2 is inserted, etc.\nNote: If there are more % signs than arguments, you must use placeholders. A placeholder is inserted after the % sign, and consists of the argument- number and \"\\$\". See example two.\nTip: Related functions: printf(), sprintf(), vprintf(), vsprintf() and vfprintf()\nSyntax\nParameter Values\nPossible format values:\n%% - Returns a percent sign\n%b - Binary number\n%c - The character according to the ASCII value\n%d - Signed decimal number (negative, zero or positive)\n%e - Scientific notation using a lowercase (e.g. 1.2e+2)\n%E - Scientific notation using a uppercase (e.g. 1.2E+2)\n%u - Unsigned decimal number (equal to or greather than zero)\n%f - Floating-point number (local settings aware)\n%F - Floating-point number (not local settings aware)\n%g - shorter of %e and %f\n%G - shorter of %E and %f\n%o - Octal number\n%s - String\n%x - Hexadecimal number (lowercase letters)\n%X - Hexadecimal number (uppercase letters)\nAdditional format values. These are placed between the % and the letter (example %.2f):\n+ (Forces both + and - in front of numbers. By default, only negative numbers are marked)\n' (Specifies what to use as padding. Default is space. Must be used together with the width specifier. Example: %'x20s (this uses \"x\" as padding)\n- (Left-justifies the variable value)\n[0-9] (Specifies the minimum width held of to the variable value)\n.[0-9] (Specifies the number of decimal digits or maximum string length)\nNote: If multiple additional format values are used, they must be in the same order as above.\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nWrite some text to a file:\nThe following text will be written to the file \"test.txt\":\nExample\nUse of placeholders:\nThe following text will be written to the file \"test.txt\":\nExample\nUsing printf() to demonstrate all possible format values:",
      "examples": [
        "<?php\n$number = 9;\n$str = \"Beijing\";\n$file = fopen(\"test.txt\",\"w\");\necho fprintf($file,\"There are %u million bicycles in %s.\",$number,$str);\n?>",
        "40",
        "There are 9 million bicycles in Beijing.",
        "fprintf(stream,format,arg1,arg2,arg++)",
        "<?php\n$number = 123;\n$file = fopen(\"test.txt\",\"w\");\nfprintf($file,\"%f\",$number);\n?>",
        "123.000000",
        "<?php\n$number = 123;\n$file = fopen(\"test.txt\",\"w\");\nfprintf($file,\"With 2 decimals: %1\\$.2f\n\\nWith no decimals: %1\\$u\",$number);\n?>",
        "With 2 decimals: 123.00\nWith no decimals: 123",
        "<?php\n$num1 = 123456789;\n$num2 = -123456789;\n$char = 50; // The ASCII Character 50 is 2\n\n// Note: The format value \"%%\" returns a percent sign\nprintf(\"%%b = %b <br>\",$num1); // Binary number\nprintf(\"%%c = %c <br>\",$char); // The ASCII Character\nprintf(\"%%d = %d <br>\",$num1); // Signed decimal number\nprintf(\"%%d = %d <br>\",$num2); // Signed decimal number\nprintf(\"%%e = %e <br>\",$num1); // Scientific notation (lowercase)\nprintf(\"%%E = %E <br>\",$num1); // Scientific notation (uppercase)\nprintf(\"%%u = %u <br>\",$num1); // Unsigned decimal number (positive)\nprintf(\"%%u = %u <br>\",$num2); // Unsigned decimal number (negative)\nprintf(\"%%f = %f <br>\",$num1); // Floating-point number (local settings aware)\nprintf(\"%%F = %F <br>\",$num1); // Floating-point number (not local settings aware)\nprintf(\"%%g = %g <br>\",$num1); // Shorter of %e and %f\nprintf(\"%%G = %G <br>\",$num1); // Shorter of %E and %f\nprintf(\"%%o = %o <br>\",$num1); // Octal number\nprintf(\"%%s = %s <br>\",$num1); // String\nprintf(\"%%x = %x <br>\",$num1); // Hexadecimal number (lowercase)\nprintf(\"%%X = %X <br>\",$num1); // Hexadecimal number (uppercase)\nprintf(\"%%+d = %+d <br>\",$num1); // Sign specifier (positive)\nprintf(\"%%+d = %+d <br>\",$num2); // Sign specifier (negative)\n?>"
      ]
    },
    {
      "title": "PHP get_html_translation_table() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nPrint the translation table used by the htmlspecialchars function:\nDefinition and Usage\nThe get_html_translation_table() function returns the translation table used by the htmlentities() and htmlspecialchars() functions.\nTip: Some characters can be encoded several ways. The get_html_translation_table() function returns the most common encoding.\nSyntax\nParameter Values\nPossible values:\nHTML_SPECIALCHARS - Default. Translates some characters that need URL-encoding to be shown properly on a HTML page\nHTML_ENTITIES - Translates all characters that need URL-encoding to be shown properly on a HTML page\nThe available quote styles are:\nENT_COMPAT - Default. Table contains entities for double quotes, not single quotes\nENT_QUOTES - Table contains entities for double and single quotes\nENT_NOQUOTES - Table will not contain entities for double and single quotes\nAdditional flags for specifying which doctype the table is for:\nENT_HTML401 - Default. Table for HTML 4.01\nENT_HTML5 - Table for HTML 5\nENT_XML1 - Table for XML 1\nENT_XHTML - Table for XHTML\nAllowed values are:\nUTF-8 - Default. ASCII compatible multi-byte 8-bit Unicode\nISO-8859-1 - Western European\nISO-8859-15 - Western European (adds the Euro sign + French and Finnish letters missing in ISO-8859-1)\ncp866 - DOS-specific Cyrillic charset\ncp1251 - Windows-specific Cyrillic charset\ncp1252 - Windows specific charset for Western European\nKOI8-R - Russian\nBIG5 - Traditional Chinese, mainly used in Taiwan\nGB2312 - Simplified Chinese, national standard character set\nBIG5-HKSCS - Big5 with Hong Kong extensions\nShift_JIS - Japanese\nEUC-JP - Japanese\nMacRoman - Character-set that was used by Mac OS\nNote: Unrecognized character-sets will be ignored and replaced by ISO-8859-1 in versions prior to PHP 5.4. As of PHP 5.4, it will be ignored an replaced by UTF-8.\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nTable for HTML_SPECIALCHARS:\nDisplaying character and entity name:\nExample\nTable for HTML_ENTITIES:\nDisplaying character and entity name:",
      "examples": [
        "<?php\nprint_r (get_html_translation_table()); // HTML_SPECIALCHARS is default.\n?>",
        "get_html_translation_table(function,flags,character-set)",
        "<?php\nprint_r (get_html_translation_table(HTML_SPECIALCHARS));\n?>",
        "Array\n(\n[\"] => &quot;\n[&] => &amp;\n[<] => &lt;\n[>] => &gt;\n)",
        "<?php\nprint_r (get_html_translation_table(HTML_ENTITIES));\n?>",
        "Array\n(\n[\"] => &quot;\n[&] => &amp;\n[<] => &lt;\n[>] => &gt;\n[Â ] => &nbsp;\n[Â¡] => &iexcl;\n[Â¢] => &cent;\n[Â£] => &pound;\n[Â¤] => &curren;\n[Â¥] => &yen;\n[Â¦] => &brvbar;\n[Â§] => &sect;\n[Â¨] => &uml;\n[Â©] => &copy;\n[Âª] => &ordf;\n[Â«] => &laquo;\n[Â¬] => &not;\n[ï¿½Â­] => &shy;\n[Â®] => &reg;\n[Â¯] => &macr;\n[Â°] => &deg;\n[Â±] => &plusmn;\n[Â²] => &sup2;\n[Â³] => &sup3;\n[Â´] => &acute;\n[Âµ] => &micro;\n[Â¶] => &para;\n[Â·] => &middot;\n[Â¸] => &cedil;\n[Â¹] => &sup1;\n[Âº] => &ordm;\n[Â»] => &raquo;\n[Â¼] => &frac14;\n[Â½] => &frac12;\n[Â¾] => &frac34;\n[Â¿] => &iquest;\n[Ã] => &Agrave;\n[Ã] => &Aacute;\n[Ã] => &Acirc;\n[Ã] => &Atilde;\n[Ã] => &Auml;\n[Ã] => &Aring;\n[Ã] => &AElig;\n[Ã] => &Ccedil;\n[Ã] => &Egrave;\n[Ã] => &Eacute;\n[Ã] => &Ecirc;\n[Ã] => &Euml;\n[Ã] => &Igrave;\n[Ã] => &Iacute;\n[Ã] => &Icirc;\n[Ã] => &Iuml;\n[Ã] => &ETH;\n[Ã] => &Ntilde;\n[Ã] => &Ograve;\n[Ã] => &Oacute;\n[Ã] => &Ocirc;\n[Ã] => &Otilde;\n[Ã] => &Ouml;\n[Ã] => &times;\n[Ã] => &Oslash;\n[Ã] => &Ugrave;\n[Ã] => &Uacute;\n[Ã] => &Ucirc;\n[Ã] => &Uuml;\n[Ã] => &Yacute;\n[Ã] => &THORN;\n[Ã] => &szlig;\n[Ã ] => &agrave;\n[Ã¡] => &aacute;\n[Ã¢] => &acirc;\n[Ã£] => &atilde;\n[Ã¤] => &auml;\n[Ã¥] => &aring;\n[Ã¦] => &aelig;\n[Ã§] => &ccedil;\n[Ã¨] => &egrave;\n[Ã©] => &eacute;\n[Ãª] => &ecirc;\n[Ã«] => &euml;\n[Ã¬] => &igrave;\n[Ã­] => &iacute;\n[Ã®] => &icirc;\n[Ã¯] => &iuml;\n[Ã°] => &eth;\n[Ã±] => &ntilde;\n[Ã²] => &ograve;\n[Ã³] => &oacute;\n[Ã´] => &ocirc;\n[Ãµ] => &otilde;\n[Ã¶] => &ouml;\n[Ã·] => &divide;\n[Ã¸] => &oslash;\n[Ã¹] => &ugrave;\n[Ãº] => &uacute;\n[Ã»] => &ucirc;\n[Ã¼] => &uuml;\n[Ã½] => &yacute;\n[Ã¾] => &thorn;\n[Ã¿] => &yuml;\n[Å] => &OElig;\n[Å] => &oelig;\n[Å ] => &Scaron;\n[Å¡] => &scaron;\n[Å¸] => &Yuml;\n[Æ] => &fnof;\n[Ë] => &circ;\n[Ë] => &tilde;\n[Î] => &Alpha;\n[Î] => &Beta;\n[Î] => &Gamma;\n[Î] => &Delta;\n[Î] => &Epsilon;\n[Î] => &Zeta;\n[Î] => &Eta;\n[Î] => &Theta;\n[Î] => &Iota;\n[Î] => &Kappa;\n[Î] => &Lambda;\n[Î] => &Mu;\n[Î] => &Nu;\n[Î] => &Xi;\n[Î] => &Omicron;\n[Î ] => &Pi;\n[Î¡] => &Rho;\n[Î£] => &Sigma;\n[Î¤] => &Tau;\n[Î¥] => &Upsilon;\n[Î¦] => &Phi;\n[Î§] => &Chi;\n[Î¨] => &Psi;\n[Î©] => &Omega;\n[Î±] => &alpha;\n[Î²] => &beta;\n[Î³] => &gamma;\n[Î´] => &delta;\n[Îµ] => &epsilon;\n[Î¶] => &zeta;\n[Î·] => &eta;\n[Î¸] => &theta;\n[Î¹] => &iota;\n[Îº] => &kappa;\n[Î»] => &lambda;\n[Î¼] => &mu;\n[Î½] => &nu;\n[Î¾] => &xi;\n[Î¿] => &omicron;\n[Ï] => &pi;\n[Ï] => &rho;\n[Ï] => &sigmaf;\n[Ï] => &sigma;\n[Ï] => &tau;\n[Ï] => &upsilon;\n[Ï] => &phi;\n[Ï] => &chi;\n[Ï] => &psi;\n[Ï] => &omega;\n[Ï] => &thetasym;\n[Ï] => &upsih;\n[Ï] => &piv;\n[â] => &ensp;\n[â] => &emsp;\n[â] => &thinsp;\n[â] => &zwnj;\n[â] => &zwj;\n[â] => &lrm;\n[â] => &rlm;\n[â] => &ndash;\n[â] => &mdash;\n[â] => &lsquo;\n[â] => &rsquo;\n[â] => &sbquo;\n[â] => &ldquo;\n[â] => &rdquo;\n[â] => &bdquo;\n[â ] => &dagger;\n[â¡] => &Dagger;\n[â¢] => &bull;\n[â¦] => &hellip;\n[â°] => &permil;\n[â²] => &prime;\n[â³] => &Prime;\n[â¹] => &lsaquo;\n[âº] => &rsaquo;\n[â¾] => &oline;\n[â] => &frasl;\n[â¬] => &euro;\n[â] => &image;\n[â] => &weierp;\n[â] => &real;\n[â¢] => &trade;\n[âµ] => &alefsym;\n[â] => &larr;\n[â] => &uarr;\n[â] => &rarr;\n[â] => &darr;\n[â] => &harr;\n[âµ] => &crarr;\n[â] => &lArr;\n[â] => &uArr;\n[â] => &rArr;\n[â] => &dArr;\n[â] => &hArr;\n[â] => &forall;\n[â] => &part;\n[â] => &exist;\n[â] => &empty;\n[â] => &nabla;\n[â] => &isin;\n[â] => &notin;\n[â] => &ni;\n[â] => &prod;\n[â] => &sum;\n[â] => &minus;\n[â] => &lowast;\n[â] => &radic;\n[â] => &prop;\n[â] => &infin;\n[â ] => &ang;\n[â§] => &and;\n[â¨] => &or;\n[â©] => &cap;\n[âª] => &cup;\n[â«] => &int;\n[â´] => &there4;\n[â¼] => &sim;\n[â] => &cong;\n[â] => &asymp;\n[â ] => &ne;\n[â¡] => &equiv;\n[â¤] => &le;\n[â¥] => &ge;\n[â] => &sub;\n[â] => &sup;\n[â] => &nsub;\n[â] => &sube;\n[â] => &supe;\n[â] => &oplus;\n[â] => &otimes;\n[â¥] => &perp;\n[â] => &sdot;\n[â] => &lceil;\n[â] => &rceil;\n[â] => &lfloor;\n[â] => &rfloor;\n[â©] => &lang;\n[âª] => &rang;\n[â] => &loz;\n[â ] => &spades;\n[â£] => &clubs;\n[â¥] => &hearts;\n[â¦] => &diams;\n)"
      ]
    },
    {
      "title": "PHP hebrev() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nReverse the display of Hebrew characters:\nDefinition and Usage\nThe hebrev() function converts Hebrew text from a right-to-left flow to a left-to-right flow.\nTip: hebrev() and hebrevc() can convert Hebrew logical text (the Windows encoding) to Hebrew visual text. Hebrew visual requires no special right-to-left character support to be displayed properly, making it very useful for displaying Hebrew text on the web.\nSyntax\nParameter Values\nTechnical Details\nâ® PHP String Reference",
      "examples": [
        "<?php\necho hebrev(\"Ã¡ Ã§Ã¹Ã¥Ã¯ Ã¤ÃºÃ¹Ã±Ã¢\");\n?>",
        "hebrev(string,maxcharline)"
      ]
    },
    {
      "title": "PHP hebrevc() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nReverse the display of Hebrew characters, and convert new lines(\\n) into <br>:\nDefinition and Usage\nThe hebrevc() function converts Hebrew text from a right-to-left flow to a left-to-right flow. It also converts new lines (\\n) into <br>.\nTip: hebrevc() and hebrev() can convert Hebrew logical text (the Windows encoding) to Hebrew visual text. Hebrew visual requires no special right-to-left character support to be displayed properly, making it very useful for displaying Hebrew text on the web.\nSyntax\nParameter Values\nTechnical Details\nâ® PHP String Reference",
      "examples": [
        "<?php\necho hebrevc(\"ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½\\nï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½\");\n?>",
        "hebrevc(string,maxcharline)"
      ]
    },
    {
      "title": "PHP hex2bin() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nConvert hexadecimal values to ASCII characters:\nDefinition and Usage\nThe hex2bin() function converts a string of hexadecimal values to ASCII characters.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho hex2bin(\"48656c6c6f20576f726c6421\");\n?>",
        "hex2bin(string)"
      ]
    },
    {
      "title": "PHP html_entity_decode() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nConvert HTML entities to characters:\nThe HTML output of the code above will be (View Source):\nThe browser output of the code above will be:\nDefinition and Usage\nThe html_entity_decode() function converts HTML entities to characters.\nThe html_entity_decode() function is the opposite of htmlentities().\nSyntax\nParameter Values\nThe available quote styles are:\nENT_COMPAT - Default. Decodes only double quotes\nENT_QUOTES - Decodes double and single quotes\nENT_NOQUOTES - Does not decode any quotes\nAdditional flags for specifying the used doctype:\nENT_HTML401 - Default. Handle code as HTML 4.01\nENT_HTML5 - Handle code as HTML 5\nENT_XML1 - Handle code as XML 1\nENT_XHTML - Handle code as XHTML\nAllowed values are:\nUTF-8 - Default. ASCII compatible multi-byte 8-bit Unicode\nISO-8859-1 - Western European\nISO-8859-15 - Western European (adds the Euro sign + French and Finnish letters missing in ISO-8859-1)\ncp866 - DOS-specific Cyrillic charset\ncp1251 - Windows-specific Cyrillic charset\ncp1252 - Windows specific charset for Western European\nKOI8-R - Russian\nBIG5 - Traditional Chinese, mainly used in Taiwan\nGB2312 - Simplified Chinese, national standard character set\nBIG5-HKSCS - Big5 with Hong Kong extensions\nShift_JIS - Japanese\nEUC-JP - Japanese\nMacRoman - Character-set that was used by Mac OS\nNote: Unrecognized character-sets will be ignored and replaced by ISO-8859-1 in versions prior to PHP 5.4. As of PHP 5.4, it will be ignored an replaced by UTF-8.\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nConvert some HTML entities to characters:\nThe HTML output of the code above will be (View Source):\nThe browser output of the code above will be:\nExample\nConvert some HTML entities to characters, using the Western European character-set:\nThe HTML output of the code above will be (View Source):\nThe browser output of the code above will be:",
      "examples": [
        "<?php\n$str = '&lt;a href=&quot;https://www.w3schools.com&quot;&gt;w3schools.com&lt;/a&gt;';\necho html_entity_decode($str);\n?>",
        "<a href=\"https://www.w3schools.com\">w3schools.com</a>",
        "w3schools.com",
        "html_entity_decode(string,flags,character-set)",
        "<?php\n$str = \"Albert Einstein said: &#039;E=MC&sup2;&#039;\";\necho html_entity_decode($str, ENT_COMPAT); // Will only convert double quotes\necho \"<br>\";\necho html_entity_decode($str, ENT_QUOTES); // Converts double and single quotes\necho \"<br>\";\necho html_entity_decode($str, ENT_NOQUOTES); // Does not convert any quotes\n?>",
        "Albert Einstein said: &#039;E=MCÂ²&#039;<br>\nAlbert Einstein said: 'E=MCÂ²'<br>\nAlbert Einstein said: &#039;E=MCÂ²&#039;",
        "Albert Einstein said: 'E=MCÂ²'\nAlbert Einstein said: 'E=MCÂ²'\nAlbert Einstein said: 'E=MCÂ²'",
        "<?php\n$str = \"My name is &Oslash;yvind &Aring;sane. I&#039;m Norwegian.\";\necho html_entity_decode($str, ENT_QUOTES, \"UTF-8\");\n?>",
        "My name is Ãyvind Ãsane. I'm Norwegian."
      ]
    },
    {
      "title": "PHP htmlentities() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nConvert some characters to HTML entities:\nThe HTML output of the code above will be (View Source):\nThe browser output of the code above will be:\nDefinition and Usage\nThe htmlentities() function converts characters to HTML entities.\nTip: To convert HTML entities back to characters, use the html_entity_decode() function.\nTip: Use the get_html_translation_table() function to return the translation table used by htmlentities().\nSyntax\nParameter Values\nThe available quote styles are:\nENT_COMPAT - Default. Encodes only double quotes\nENT_QUOTES - Encodes double and single quotes\nENT_NOQUOTES - Does not encode any quotes\nInvalid encoding:\nENT_IGNORE - Ignores invalid encoding instead of having the function return an empty string. Should be avoided, as it may have security implications.\nENT_SUBSTITUTE - Replaces invalid encoding for a specified character set with a Unicode Replacement Character U+FFFD (UTF-8) or &#FFFD; instead of returning an empty string.\nENT_DISALLOWED - Replaces code points that are invalid in the specified doctype with a Unicode Replacement Character U+FFFD (UTF-8) or &#FFFD;\nAdditional flags for specifying the used doctype:\nENT_HTML401 - Default. Handle code as HTML 4.01\nENT_HTML5 - Handle code as HTML 5\nENT_XML1 - Handle code as XML 1\nENT_XHTML - Handle code as XHTML\nAllowed values are:\nUTF-8 - Default. ASCII compatible multi-byte 8-bit Unicode\nISO-8859-1 - Western European\nISO-8859-15 - Western European (adds the Euro sign + French and Finnish letters missing in ISO-8859-1)\ncp866 - DOS-specific Cyrillic charset\ncp1251 - Windows-specific Cyrillic charset\ncp1252 - Windows specific charset for Western European\nKOI8-R - Russian\nBIG5 - Traditional Chinese, mainly used in Taiwan\nGB2312 - Simplified Chinese, national standard character set\nBIG5-HKSCS - Big5 with Hong Kong extensions\nShift_JIS - Japanese\nEUC-JP - Japanese\nMacRoman - Character-set that was used by Mac OS\nNote: Unrecognized character-sets will be ignored and replaced by ISO-8859-1 in versions prior to PHP 5.4. As of PHP 5.4, it will be ignored an replaced by UTF-8.\nTRUE - Default. Will convert everything\nFALSE - Will not encode existing html entities\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nConvert some characters to HTML entities:\nThe HTML output of the code above will be (View Source):\nThe browser output of the code above will be:\nExample\nConvert some characters to HTML entities using the Western European character-set:\nThe HTML output of the code above will be (View Source):\nThe browser output of the code above will be:",
      "examples": [
        "<?php\n$str = '<a href=\"https://www.w3schools.com\">Go to w3schools.com</a>';\necho htmlentities($str);\n?>",
        "&lt;a href=&quot;https://www.w3schools.com&quot;&gt;Go to w3schools.com&lt;/a&gt;",
        "<a href=\"https://www.w3schools.com\">Go to w3schools.com</a>",
        "htmlentities(string,flags,character-set,double_encode)",
        "<?php\n$str = \"Albert Einstein said: 'E=MCÂ²'\";\necho htmlentities($str, ENT_COMPAT); // Will only convert double quotes\necho \"<br>\";\necho htmlentities($str, ENT_QUOTES); // Converts double and single quotes\necho \"<br>\";\necho htmlentities($str, ENT_NOQUOTES); // Does not convert any quotes\n?>",
        "Albert Einstein said: 'E=MC&sup2;'<br>\nAlbert Einstein said: &#039;E=MC&sup2;&#039;<br>\nAlbert Einstein said: 'E=MC&sup2;'",
        "Albert Einstein said: 'E=MCÂ²'\nAlbert Einstein said: 'E=MCÂ²'\nAlbert Einstein said: 'E=MCÂ²'",
        "<?php\n$str = \"My name is Ãyvind Ãsane. I'm Norwegian.\";\necho htmlentities($str, ENT_QUOTES, \"UTF-8\"); // Will only convert double quotes (not single quotes), and uses the character-set Western European\n?>",
        "<!DOCTYPE html>\n<html>\n<body>\nMy name is &Oslash;yvind &Aring;sane. I&#039;m Norwegian.\n</body>\n</html>",
        "My name is Ãyvind Ãsane. I'm Norwegian."
      ]
    },
    {
      "title": "PHP htmlspecialchars_decode() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nConvert the predefined HTML entities \"&lt;\" (less than) and \"&gt;\" (greater than) to characters:\nThe HTML output of the code above will be (View Source):\nThe browser output of the code above will be:\nDefinition and Usage\nThe htmlspecialchars_decode() function converts some predefined HTML entities to characters.\nHTML entities that will be decoded are:\n&amp; becomes & (ampersand)\n&quot; becomes \" (double quote)\n&#039; becomes ' (single quote)\n&lt; becomes < (less than)\n&gt; becomes > (greater than)\nThe htmlspecialchars_decode() function is the opposite of htmlspecialchars().\nSyntax\nParameter Values\nThe available quote styles are:\nENT_COMPAT - Default. Decodes only double quotes\nENT_QUOTES - Decodes double and single quotes\nENT_NOQUOTES - Does not decode any quotes\nAdditional flags for specifying the used doctype:\nENT_HTML401 - Default. Handle code as HTML 4.01\nENT_HTML5 - Handle code as HTML 5\nENT_XML1 - Handle code as XML 1\nENT_XHTML - Handle code as XHTML\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nConvert some predefined HTML entities to characters:\nThe HTML output of the code above will be (View Source):\nThe browser output of the code above will be:\nExample\nConvert the predefined HTML entities to double quotes:\nThe HTML output of the code above will be (View Source):\nThe browser output of the code above will be:",
      "examples": [
        "<?php\n$str = \"This is some &lt;b&gt;bold&lt;/b&gt; text.\";\necho htmlspecialchars_decode($str);\n?>",
        "<!DOCTYPE html>\n<html>\n<body>\nThis is some <b>bold</b> text.\n</body>\n</html>",
        "This is some bold text.",
        "htmlspecialchars_decode(string,flags)",
        "<?php\n$str = \"Jane &amp; &#039;Tarzan&#039;\";\necho htmlspecialchars_decode($str, ENT_COMPAT); // Will only convert double quotes\necho \"<br>\";\necho htmlspecialchars_decode($str, ENT_QUOTES); // Converts double and single quotes\necho \"<br>\";\necho htmlspecialchars_decode($str, ENT_NOQUOTES); // Does not convert any quotes\n?>",
        "<!DOCTYPE html>\n<html>\n<body>\nJane & &#039;Tarzan&#039;<br>\nJane & 'Tarzan'<br>\nJane & &#039;Tarzan&#039;\n</body>\n</html>",
        "Jane & 'Tarzan'\nJane & 'Tarzan'\nJane & 'Tarzan'",
        "<?php\n$str = 'I love &quot;PHP&quot;.';\necho htmlspecialchars_decode($str, ENT_QUOTES); // Converts double and single quotes\n?>",
        "<!DOCTYPE html>\n<html>\n<body>\nI love \"PHP\".\n</body>\n</html>",
        "I love \"PHP\"."
      ]
    },
    {
      "title": "PHP htmlspecialchars() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nConvert the predefined characters \"<\" (less than) and \">\" (greater than) to HTML entities:\nThe HTML output of the code above will be (View Source):\nThe browser output of the code above will be:\nDefinition and Usage\nThe htmlspecialchars() function converts some predefined characters to HTML entities.\nThe predefined characters are:\n& (ampersand) becomes &amp;\n\" (double quote) becomes &quot;\n' (single quote) becomes &#039;\n< (less than) becomes &lt;\n> (greater than) becomes &gt;\nTip: To convert special HTML entities back to characters, use the htmlspecialchars_decode() function.\nSyntax\nParameter Values\nThe available quote styles are:\nENT_COMPAT - Default. Encodes only double quotes\nENT_QUOTES - Encodes double and single quotes\nENT_NOQUOTES - Does not encode any quotes\nInvalid encoding:\nENT_IGNORE - Ignores invalid encoding instead of having the function return an empty string. Should be avoided, as it may have security implications.\nENT_SUBSTITUTE - Replaces invalid encoding for a specified character set with a Unicode Replacement Character U+FFFD (UTF-8) or &#FFFD; instead of returning an empty string.\nENT_DISALLOWED - Replaces code points that are invalid in the specified doctype with a Unicode Replacement Character U+FFFD (UTF-8) or &#FFFD;\nAdditional flags for specifying the used doctype:\nENT_HTML401 - Default. Handle code as HTML 4.01\nENT_HTML5 - Handle code as HTML 5\nENT_XML1 - Handle code as XML 1\nENT_XHTML - Handle code as XHTML\nAllowed values are:\nUTF-8 - Default. ASCII compatible multi-byte 8-bit Unicode\nISO-8859-1 - Western European\nISO-8859-15 - Western European (adds the Euro sign + French and Finnish letters missing in ISO-8859-1)\ncp866 - DOS-specific Cyrillic charset\ncp1251 - Windows-specific Cyrillic charset\ncp1252 - Windows specific charset for Western European\nKOI8-R - Russian\nBIG5 - Traditional Chinese, mainly used in Taiwan\nGB2312 - Simplified Chinese, national standard character set\nBIG5-HKSCS - Big5 with Hong Kong extensions\nShift_JIS - Japanese\nEUC-JP - Japanese\nMacRoman - Character-set that was used by Mac OS\nNote: Unrecognized character-sets will be ignored and replaced by ISO-8859-1 in versions prior to PHP 5.4. As of PHP 5.4, it will be ignored an replaced by UTF-8.\nTRUE - Default. Will convert everything\nFALSE - Will not encode existing html entities\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nConvert some predefined characters to HTML entities:\nThe HTML output of the code above will be (View Source):\nThe browser output of the code above will be:\nExample\nConvert double quotes to HTML entities:\nThe HTML output of the code above will be (View Source):\nThe browser output of the code above will be:",
      "examples": [
        "<?php\n$str = \"This is some <b>bold</b> text.\";\necho htmlspecialchars($str);\n?>",
        "<!DOCTYPE html>\n<html>\n<body>\nThis is some &lt;b&gt;bold&lt;/b&gt; text.\n</body>\n</html>",
        "This is some <b>bold</b> text.",
        "htmlspecialchars(string,flags,character-set,double_encode)",
        "<?php\n$str = \"Jane & 'Tarzan'\";\necho htmlspecialchars($str, ENT_COMPAT); // Will only convert double quotes\necho \"<br>\";\necho htmlspecialchars($str, ENT_QUOTES); // Converts double and single quotes\necho \"<br>\";\necho htmlspecialchars($str, ENT_NOQUOTES); // Does not convert any quotes\n?>",
        "<!DOCTYPE html>\n<html>\n<body>\nJane &amp; 'Tarzan'<br>\nJane &amp; &#039;Tarzan&#039;<br>\nJane &amp; 'Tarzan'\n</body>\n</html>",
        "Jane & 'Tarzan'\nJane & 'Tarzan'\nJane & 'Tarzan'",
        "<?php\n$str = 'I love \"PHP\".';\necho htmlspecialchars($str, ENT_QUOTES); // Converts double and single quotes\n?>",
        "<!DOCTYPE html>\n<html>\n<body>\nI love &quot;PHP&quot;.\n</body>\n</html>",
        "I love \"PHP\"."
      ]
    },
    {
      "title": "PHP implode() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nJoin array elements with a string:\nDefinition and Usage\nThe implode() function returns a string from the elements of an array.\nNote: The implode() function accept its parameters in either order. However, for consistency with explode(), you should use the documented order of arguments.\nNote: The separator parameter of implode() is optional. However, it is recommended to always use two parameters for backwards compatibility.\nNote: This function is binary-safe.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nSeparate the array elements with different characters:",
      "examples": [
        "<?php\n$arr = array('Hello','World!','Beautiful','Day!');\necho implode(\" \",$arr);\n?>",
        "implode(separator,array)",
        "<?php\n$arr = array('Hello','World!','Beautiful','Day!');\necho implode(\" \",$arr).\"<br>\";\necho implode(\"+\",$arr).\"<br>\";\necho implode(\"-\",$arr).\"<br>\";\necho implode(\"X\",$arr);\n?>"
      ]
    },
    {
      "title": "PHP join() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nJoin array elements with a string:\nDefinition and Usage\nThe join() function returns a string from the elements of an array.\nThe join() function is an alias of the implode() function.\nNote: The join() function accept its parameters in either order. However, for consistency with explode(), you should use the documented order of arguments.\nNote: The separator parameter of join() is optional. However, it is recommended to always use two parameters for backwards compatibility.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nSeparate the array elements with different characters:",
      "examples": [
        "<?php\n$arr = array('Hello','World!','Beautiful','Day!');\necho join(\" \",$arr);\n?>",
        "join(separator,array)",
        "<?php\n$arr = array('Hello','World!','Beautiful','Day!');\necho join(\" \",$arr).\"<br>\";\necho join(\"+\",$arr).\"<br>\";\necho join(\"-\",$arr).\"<br>\";\necho join(\"X\",$arr);\n?>"
      ]
    },
    {
      "title": "PHP lcfirst() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nConvert the first character of \"Hello\" to lowercase:\nDefinition and Usage\nThe lcfirst() function converts the first character of a string to lowercase.\nRelated functions:\nucfirst() - converts the first character of a string to uppercase\nucwords() - converts the first character of each word in a string to uppercase\nstrtoupper() - converts a string to uppercase\nstrtolower() - converts a string to lowercase\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho lcfirst(\"Hello world!\");\n?>",
        "lcfirst(string)"
      ]
    },
    {
      "title": "PHP levenshtein() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nCalculate the Levenshtein distance between two strings:\nDefinition and Usage\nThe levenshtein() function returns the Levenshtein distance between two strings.\nThe Levenshtein distance is the number of characters you have to replace, insert or delete to transform string1 into string2.\nBy default, PHP gives each operation (replace, insert, and delete) equal weight. However, you can define the cost of each operation by setting the optional insert, replace, and delete parameters.\nNote: The levenshtein() function is not case-sensitive.\nNote: The levenshtein() function is faster than the similar_text() function. However, similar_text() will give you a more accurate result with less modifications needed.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho levenshtein(\"Hello World\",\"ello World\");\necho \"<br>\";\necho levenshtein(\"Hello World\",\"ello World\",10,20,30);\n?>",
        "levenshtein(string1,string2,insert,replace,delete)"
      ]
    },
    {
      "title": "PHP localeconv() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nFind the United States locale numeric formatting information:\nDefinition and Usage\nThe localeconv() function returns an array containing local numeric and monetary formatting information.\nThe localeconv() function will return the following array elements:\n[decimal_point] - Decimal point character\n[thousands_sep] - Thousands separator\n[int_curr_symbol] - Currency symbol (example: USD)\n[currency_symbol] - Currency symbol (example: $)\n[mon_decimal_point] - Monetary decimal point character\n[mon_thousands_sep] - Monetary thousands separator\n[positive_sign] - Positive value character\n[negative_sign] - Negative value character\n[int_frac_digits] - International fractional digits\n[frac_digits] - Local fractional digits\n[p_cs_precedes] - True (1) if currency symbol is placed in front of a positive value, False (0) if it is placed behind\n[p_sep_by_space] - True (1) if there is a spaces between the currency symbol and a positive value, False (0) otherwise\n[n_cs_precedes] - True (1) if currency symbol is placed in front of a negative value, False (0) if it is placed behind\n[n_sep_by_space] - True (1) if there is a spaces between the currency symbol and a negative value, False (0) otherwise\n[p_sign_posn] - Formatting options:\n0 - Parentheses surround the quantity and currency symbol\n1 - The + sign is placed in front of the quantity and currency symbol\n2 - The + sign is placed after the quantity and currency symbol\n3 - The + sign is placed immediately in front of the currency symbol\n4 - The + sign is placed immediately after the currency symbol\n0 - Parentheses surround the quantity and currency symbol\n1 - The + sign is placed in front of the quantity and currency symbol\n2 - The + sign is placed after the quantity and currency symbol\n3 - The + sign is placed immediately in front of the currency symbol\n4 - The + sign is placed immediately after the currency symbol\n[n_sign_posn] - Formatting options:\n0 - Parentheses surround the quantity and currency symbol\n1 - The - sign is placed in front of the quantity and currency symbol\n2 - The - sign is placed after the quantity and currency symbol\n3 - The - sign is placed immediately in front of the currency symbol\n4 - The - sign is placed immediately after the currency symbol\n0 - Parentheses surround the quantity and currency symbol\n1 - The - sign is placed in front of the quantity and currency symbol\n2 - The - sign is placed after the quantity and currency symbol\n3 - The - sign is placed immediately in front of the currency symbol\n4 - The - sign is placed immediately after the currency symbol\n[grouping] - Array displaying how numbers are grouped (example: 3 indicates 1 000 000)\n[mon_grouping] - Array displaying how monetary numbers are grouped (example: 2 indicates 1 00 00 00)\nTip: To define locale settings, see the setlocale() function.\nTip: To view all available language codes, go to our Language code reference.\nSyntax\nTechnical Details",
      "examples": [
        "<?php\nsetlocale(LC_ALL,\"US\");\n$locale_info = localeconv();\nprint_r($locale_info);\n?>",
        "localeconv()"
      ]
    },
    {
      "title": "PHP ltrim() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nRemove characters from the left side of a string:\nDefinition and Usage\nThe ltrim() function removes whitespace or other predefined characters from the left side of a string.\nRelated functions:\nrtrim() - Removes whitespace or other predefined characters from the right side of a string\ntrim() - Removes whitespace or other predefined characters from both sides of a string\nSyntax\nParameter Values\n\"\\0\" - NULL\n\"\\t\" - tab\n\"\\n\" - new line\n\"\\x0B\" - vertical tab\n\"\\r\" - carriage return\n\" \" - ordinary white space\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nRemove whitespaces from the left side of a string:\nThe HTML output of the code above will be (View Source):\nThe browser output of the code above will be:\nExample\nRemove newlines (\\n) from the left side of a string:\nThe HTML output of the code above will be (View Source):\nThe browser output of the code above will be:",
      "examples": [
        "<?php\n$str = \"Hello World!\";\necho $str . \"<br>\";\necho ltrim($str,\"Hello\");\n?>",
        "ltrim(string,charlist)",
        "<?php\n$str = \"Â Â Â Â Hello World!\";\necho \"Without ltrim: \" . $str;\necho \"<br>\";\necho \"With ltrim: \" . ltrim($str);\n?>",
        "<!DOCTYPE html>\n<html>\n<body>\n\nWithout ltrim:Â Â Â Â Hello World!<br>With ltrim: Hello World!\n</body>\n</html>",
        "Without ltrim: Hello World!\nWith ltrim: Hello World!",
        "<?php\n$str = \"\\n\\n\\nHello World!\";\necho \"Without ltrim: \" . $str;\necho \"<br>\";\necho \"With ltrim: \" . ltrim($str);\n?>",
        "<!DOCTYPE html>\n<html>\n<body>\n\nWithout ltrim:\n\n\nHello World!<br>With ltrim: Hello World!\n</body>\n</html>"
      ]
    },
    {
      "title": "PHP md5() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nCalculate the MD5 hash of the string \"Hello\":\nDefinition and Usage\nThe md5() function calculates the MD5 hash of a string.\nThe md5() function uses the RSA Data Security, Inc. MD5 Message-Digest Algorithm.\nFrom RFC 1321 - The MD5 Message-Digest Algorithm: \"The MD5 message-digest algorithm takes as input a message of arbitrary length and produces as output a 128-bit \"fingerprint\" or \"message digest\" of the input. The MD5 algorithm is intended for digital signature applications, where a large file must be \"compressed\" in a secure manner before being encrypted with a private (secret) key under a public-key cryptosystem such as RSA.\"\nTo calculate the MD5 hash of a file, use the md5_file() function.\nSyntax\nParameter Values\nTRUE - Raw 16 character binary format\nFALSE - Default. 32 character hex number\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nPrint the result of md5():\nExample\nPrint the result of md5() and then test it:",
      "examples": [
        "<?php\n$str = \"Hello\";\necho md5($str);\n?>",
        "md5(string,raw)",
        "<?php\n$str = \"Hello\";\necho \"The string: \".$str.\"<br>\";\necho \"TRUE - Raw 16 character binary format: \".md5($str, TRUE).\"<br>\";\necho \"FALSE - 32 character hex number: \".md5($str).\"<br>\";\n?>",
        "<?php\n$str = \"Hello\";\necho md5($str);\n\nif (md5($str) == \"8b1a9953c4611296a827abf8c47804d7\")\n{\necho \"<br>Hello world!\";\nexit;\n}\n?>"
      ]
    },
    {
      "title": "PHP md5_file() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nCalculate the MD5 hash of the text file \"test.txt\":\nThe output of the code above will be:\nDefinition and Usage\nThe md5_file() function calculates the MD5 hash of a file.\nThe md5_file() function uses the RSA Data Security, Inc. MD5 Message-Digest Algorithm.\nFrom RFC 1321 - The MD5 Message-Digest Algorithm: \"The MD5 message-digest algorithm takes as input a message of arbitrary length and produces as output a 128-bit \"fingerprint\" or \"message digest\" of the input. The MD5 algorithm is intended for digital signature applications, where a large file must be \"compressed\" in a secure manner before being encrypted with a private (secret) key under a public-key cryptosystem such as RSA.\"\nTo calculate the MD5 hash of a string, use the md5() function.\nSyntax\nParameter Values\nTRUE - Raw 16 character binary format\nFALSE - Default. 32 character hex number\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nStore the MD5 hash of \"test.txt\" in a file:\nTest if \"test.txt\" has been changed (that is if the MD5 hash has been changed):\nThe output of the code above could be:",
      "examples": [
        "<?php\n$filename = \"test.txt\";\n$md5file = md5_file($filename);\necho $md5file;\n?>",
        "d41d8cd98f00b204e9800998ecf8427e",
        "md5_file(file,raw)",
        "<?php\n$md5file = md5_file(\"test.txt\");\nfile_put_contents(\"md5file.txt\",$md5file);\n?>",
        "<?php\n$md5file = file_get_contents(\"md5file.txt\");\nif (md5_file(\"test.txt\") == $md5file)\n{\necho \"The file is ok.\";\n}\nelse\n{\necho \"The file has been changed.\";\n}\n?>",
        "The file is ok."
      ]
    },
    {
      "title": "PHP metaphone() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nCalculate the metaphone key of \"World\":\nDefinition and Usage\nThe metaphone() function calculates the metaphone key of a string.\nA metaphone key represents how a string sounds if said by an English speaking person.\nThe metaphone() function can be used for spelling applications.\nNote: The metaphone() function creates the same key for similar sounding words.\nNote: The generated metaphone keys vary in length.\nTip: metaphone() is more accurate than the soundex() function, because metaphone() knows the basic rules of English pronunciation.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nUsing the metaphone() function on two similar sounding words:\nExample\nUsing the length parameter:",
      "examples": [
        "<?php\necho metaphone(\"World\");\n?>",
        "metaphone(string,length)",
        "<?php\n$str = \"Assistance\";\n$str2 = \"Assistants\";\n\necho metaphone($str);\necho \"<br>\";\necho metaphone($str2);\n?>",
        "<?php\n$str = \"Assistance\";\n$str2 = \"Assistants\";\n\necho metaphone($str,5);\necho \"<br>\";\necho metaphone($str2,5);\n?>"
      ]
    },
    {
      "title": "PHP money_format() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nInternational en_US format:\nThe output of the code above will be:\nDefinition and Usage\nThe money_format() function returns a string formatted as a currency string.\nThis function inserts a formatted number where there is a percent (%) sign in the main string.\nNote: The money_format() function does not work on Windows platforms.\nTip: This function is often used together with the setlocale() function.\nTip: To view all available language codes, go to our Language code reference.\nSyntax\nParameter Values\nPossible format values:\nPadding and Flags:\n=f - Specifies the character (f) to be used as padding (Example: %=t this uses \"t\" as padding). Default is space\n^ - Removes the use of grouping characters\n+ or ( - Specifies how to show positive and negative numbers. If \"+\" is used, the local setting for + and - will be used (usually a sign in front of negative numbers, and nothing in front of positive numbers). If \"(\" is used, negative numbers are enclosed in parenthesis. Default is \"+\"\n! - Stops the use of currency symbols in the output string\n- If \"-\" is used, all fields are left-justified. Default is right-justified\nField width:\nx - Specifies the minimum field width (x). Default is 0\n#x - Specifies the maximum number (x) of digits expected to the left of the decimal point. This is used to keep formatted output aligned in the same columns. If the number of digits are bigger than x, this specification is ignored\n.x - Specifies the maximum number (x) of digits expected to the right of the decimal point. If x is 0, the decimal point and the digits to its right will not be shown. Default is local settings\nConversion characters:\ni - The number is formatted to international currency format\nn - The number is formatted to national currency format\n% - Returns the % character\nNote: If multiple format values are used, they must be in the same order as shown above.\nNote: This function is affected by local settings.\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nInternational format (Germany) with 2 decimals:\nThe output of the code above will be:\nExample\nNegative number, US national format with () to indicate negative numbers and 2 digits of right precision and \"*\" as a fill character:\nThe output of the code above will be:",
      "examples": [
        "<?php\n$number = 1234.56;\nsetlocale(LC_MONETARY,\"en_US\");\necho money_format(\"The price is %i\", $number);\n?>",
        "The price is USD 1,234.56",
        "money_format(string,number)",
        "<?php\n$number = 1234.56;\nsetlocale(LC_MONETARY,\"de_DE\");\necho money_format(\"%.2n\", $number);\n?>",
        "1 234,56 EUR",
        "<?php\n$number = -1234.5672;\necho money_format(\"%=*(#10.2n\",$number);\n?>",
        "(******1234.57)"
      ]
    },
    {
      "title": "PHP nl_langinfo() Function",
      "summary": "Definition and Usage\nThe nl_langinfo() function returns specific local information.\nNote: This function does not work on Windows platforms.\nTip: Unlike the localeconv() function, which returns all local formatting information, the nl_langinfo() function returns specific information.\nSyntax\nParameter Values\nTime and Calendar:\nABDAY_(1-7) - Abbreviated name of the numbered day of the week\nDAY_(1-7) - Name of the numbered day of the week (DAY_1 = Sunday)\nABMON_(1-12) - Abbreviated name of the numbered month of the year\nMON_(1-12) - Name of the numbered month of the year\nAM_STR - String for Ante meridian\nPM_STR - String for Post meridian\nD_T_FMT - String that can be used as the format string for strftime() to represent time and date\nD_FMT - String that can be used as the format string for strftime() to represent date\nT_FMT - String that can be used as the format string for strftime() to represent time\nT_FMT_AMPM - String that can be used as the format string for strftime() to represent time in 12-hour format with ante/post meridian\nERA - Alternate era\nERA_YEAR - Year in alternate era format\nERA_D_T_FMT - Date and time in alternate era format (string can be used in strftime())\nERA_D_FMT - Date in alternate era format (string can be used in strftime())\nERA_T_FMT - Time in alternate era format (string can be used in strftime())\nMonetary Category:\nINT_CURR_SYMBOL - Currency symbol (example: USD)\nCURRENCY_SYMBOL - Currency symbol (example: $)\nCRNCYSTR - Same as CURRENCY_SYMBOL\nMON_DECIMAL_POINT - Monetary decimal point character\nMON_THOUSANDS_SEP - Monetary thousands separator\nPOSITIVE_SIGN - Positive value character\nNEGATIVE_SIGN -Negative value character\nMON_GROUPING - Array displaying how monetary numbers are grouped (example: 1 000 000)\nINT_FRAC_DIGITS - International fractional digits\nFRAC_DIGITS - Local fractional digits\nP_CS_PRECEDES - True (1) if currency symbol is placed in front of a positive value, False (0) if it is placed behind\nP_SEP_BY_SPACE - True (1) if there is a spaces between the currency symbol and a positive value, False (0) otherwise\nN_CS_PRECEDES - True (1) if currency symbol is placed in front of a negative value, False (0) if it is placed behind\nN_SEP_BY_SPACE - True (1) if there is a spaces between the currency symbol and a negative value, False (0) otherwise\nP_SIGN_POSN - Formatting setting. Possible return values:\n0 - Parentheses surround the quantity and currency symbol\n1 - The sign string is placed in front of the quantity and currency symbol\n2 - The sign string is placed after the quantity and currency symbol\n3 - The sign string is placed immediately in front of the currency symbol\n4 - The sign string is placed immediately after the currency symbol\n0 - Parentheses surround the quantity and currency symbol\n1 - The sign string is placed in front of the quantity and currency symbol\n2 - The sign string is placed after the quantity and currency symbol\n3 - The sign string is placed immediately in front of the currency symbol\n4 - The sign string is placed immediately after the currency symbol\nN_SIGN_POSN - Formatting setting. Possible return values:\n0 - Parentheses surround the quantity and currency symbol\n1 - The sign string is placed in front of the quantity and currency symbol\n2 - The sign string is placed after the quantity and currency symbol\n3 - The sign string is placed immediately in front of the currency symbol\n4 - The sign string is placed immediately after the currency symbol\n0 - Parentheses surround the quantity and currency symbol\n1 - The sign string is placed in front of the quantity and currency symbol\n2 - The sign string is placed after the quantity and currency symbol\n3 - The sign string is placed immediately in front of the currency symbol\n4 - The sign string is placed immediately after the currency symbol\nNumeric Category:\nDECIMAL_POINT - Decimal point character\nRADIXCHAR - Same as DECIMAL_POINT\nTHOUSANDS_SEP - Separator character for thousands\nTHOUSEP - Same as THOUSANDS_SEP\nGROUPING - Array displaying how numbers are grouped (example: 1 000 000)\nMessaging Category:\nYESEXPR - Regex string for matching 'yes' input\nNOEXPR - Regex string for matching 'no' input\nYESSTR - Output string for 'yes'\nNOSTR - Output string for 'no'\nCode set Category:\nCODESET Return a string with the name of the character encoding.\nTechnical Details",
      "examples": [
        "nl_langinfo(element)"
      ]
    },
    {
      "title": "PHP nl2br() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nInsert line breaks where newlines (\\n) occur in the string:\nThe browser output of the code above will be:\nThe HTML output of the code above will be (View Source):\nDefinition and Usage\nThe nl2br() function inserts HTML line breaks (<br> or <br />) in front of each newline (\\n) in a string.\nSyntax\nParameter Values\nTRUE- Default. Inserts <br />\nFALSE - Inserts <br>\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nInsert line breaks where newlines (\\n) occur, using the xhtml parameter:\nThe browser output of the code above will be:\nThe HTML output of the code above will be (View Source):",
      "examples": [
        "<?php\necho nl2br(\"One line.\\nAnother line.\");\n?>",
        "One line.\nAnother line.",
        "One line.<br />\nAnother line.",
        "nl2br(string,xhtml)",
        "<?php\necho nl2br(\"One line.\\nAnother line.\",false);\n?>",
        "One line.<br>\nAnother line."
      ]
    },
    {
      "title": "PHP number_format() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nFormat numbers:\nDefinition and Usage\nThe number_format() function formats a number with grouped thousands.\nNote: This function supports one, two, or four parameters (not three).\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nYou want to return a price: One parameter will round the number (it will be formatted without decimals). Two parameters should give the result you want:",
      "examples": [
        "<?php\necho number_format(\"1000000\").\"<br>\";\necho number_format(\"1000000\",2).\"<br>\";\necho number_format(\"1000000\",2,\",\",\".\");\n?>",
        "number_format(number,decimals,decimalpoint,separator)",
        "<?php\n$num = 1999.9;\n$formattedNum = number_format($num).\"<br>\";\necho $formattedNum;\n$formattedNum = number_format($num, 2);\necho $formattedNum;\n?>"
      ]
    },
    {
      "title": "PHP ord() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nReturn the ASCII value of \"h\":\nDefinition and Usage\nThe ord() function returns the ASCII value of the first character of a string.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho ord(\"h\").\"<br>\";\necho ord(\"hello\").\"<br>\";\n?>",
        "ord(string)"
      ]
    },
    {
      "title": "PHP parse_str() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nParse a query string into variables:\nDefinition and Usage\nThe parse_str() function parses a query string into variables.\nNote: The magic_quotes_gpc setting in the php.ini file affects the output of this function. If enabled, the variables are converted by addslashes() before parsed by parse_str().\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nStore the variables in an array:",
      "examples": [
        "<?php\nparse_str(\"name=Peter&age=43\");\necho $name.\"<br>\";\necho $age;\n?>",
        "parse_str(string,array)",
        "<?php\nparse_str(\"name=Peter&age=43\",$myArray);\nprint_r($myArray);\n?>"
      ]
    },
    {
      "title": "PHP print() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nWrite some text to the output:\nDefinition and Usage\nThe print() function outputs one or more strings.\nNote: The print() function is not actually a function, so you are not required to use parentheses with it.\nTip: The print() function is slightly slower than echo().\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nWrite the value of the string variable ($str) to the output:\nExample\nWrite the value of the string variable ($str) to the output, including HTML tags:\nExample\nJoin two string variables together:\nExample\nWrite the value of an array to the output:\nExample\nWrite some text to the output:\nExample\nDifference of single and double quotes. Single quotes will print the variable name, not the value:",
      "examples": [
        "<?php\nprint \"Hello world!\";\n?>",
        "print(strings)",
        "<?php\n$str = \"Hello world!\";\nprint $str;\n?>",
        "<?php\n$str = \"Hello world!\";\nprint $str;\nprint \"<br>What a nice day!\";\n?>",
        "<?php\n$str1=\"Hello world!\";\n$str2=\"What a nice day!\";\nprint $str1 . \" \" . $str2;\n?>",
        "<?php\n$age=array(\"Peter\"=>\"35\");\nprint \"Peter is \" . $age['Peter'] . \" years old.\";\n?>",
        "<?php\nprint \"This text\nspans multiple\nlines.\";\n?>",
        "<?php\n$color = \"red\";\nprint \"Roses are $color\";\nprint \"<br>\";\nprint 'Roses are $color';\n?>"
      ]
    },
    {
      "title": "PHP printf() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nOutput a formatted string:\nDefinition and Usage\nThe printf() function outputs a formatted string.\nThe arg1, arg2, ++ parameters will be inserted at percent (%) signs in the main string. This function works \"step-by-step\". At the first % sign, arg1 is inserted, at the second % sign, arg2 is inserted, etc.\nNote: If there are more % signs than arguments, you must use placeholders. A placeholder is inserted after the % sign, and consists of the argument- number and \"\\$\". See example two.\nTip: Related functions: sprintf(), vprintf(), vsprintf(), fprintf() and vfprintf()\nSyntax\nParameter Values\nPossible format values:\n%% - Returns a percent sign\n%b - Binary number\n%c - The character according to the ASCII value\n%d - Signed decimal number (negative, zero or positive)\n%e - Scientific notation using a lowercase (e.g. 1.2e+2)\n%E - Scientific notation using a uppercase (e.g. 1.2E+2)\n%u - Unsigned decimal number (equal to or greather than zero)\n%f - Floating-point number (local settings aware)\n%F - Floating-point number (not local settings aware)\n%g - shorter of %e and %f\n%G - shorter of %E and %f\n%o - Octal number\n%s - String\n%x - Hexadecimal number (lowercase letters)\n%X - Hexadecimal number (uppercase letters)\nAdditional format values. These are placed between the % and the letter (example %.2f):\n+ (Forces both + and - in front of numbers. By default, only negative numbers are marked)\n' (Specifies what to use as padding. Default is space. Must be used together with the width specifier. Example: %'x20s (this uses \"x\" as padding)\n- (Left-justifies the variable value)\n[0-9] (Specifies the minimum width held of to the variable value)\n.[0-9] (Specifies the number of decimal digits or maximum string length)\nNote: If multiple additional format values are used, they must be in the same order as above.\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nUsing the format value %f:\nExample\nUse of placeholders:\nExample\nA demonstration of all possible format values:\nExample\nA demonstration of string specifiers:",
      "examples": [
        "<?php\n$number = 9;\n$str = \"Beijing\";\nprintf(\"There are %u million bicycles in %s.\",$number,$str);\n?>",
        "printf(format,arg1,arg2,arg++)",
        "<?php\n$number = 123;\nprintf(\"%f\",$number);\n?>",
        "<?php\n$number = 123;\nprintf(\"With 2 decimals: %1\\$.2f\n<br>With no decimals: %1\\$u\",$number);\n?>",
        "<?php\n$num1 = 123456789;\n$num2 = -123456789;\n$char = 50; // The ASCII Character 50 is 2\n\n// Note: The format value \"%%\" returns a percent sign\nprintf(\"%%b = %b <br>\",$num1); // Binary number\nprintf(\"%%c = %c <br>\",$char); // The ASCII Character\nprintf(\"%%d = %d <br>\",$num1); // Signed decimal number\nprintf(\"%%d = %d <br>\",$num2); // Signed decimal number\nprintf(\"%%e = %e <br>\",$num1); // Scientific notation (lowercase)\nprintf(\"%%E = %E <br>\",$num1); // Scientific notation (uppercase)\nprintf(\"%%u = %u <br>\",$num1); // Unsigned decimal number (positive)\nprintf(\"%%u = %u <br>\",$num2); // Unsigned decimal number (negative)\nprintf(\"%%f = %f <br>\",$num1); // Floating-point number (local settings aware)\nprintf(\"%%F = %F <br>\",$num1); // Floating-point number (not local settings aware)\nprintf(\"%%g = %g <br>\",$num1); // Shorter of %e and %f\nprintf(\"%%G = %G <br>\",$num1); // Shorter of %E and %f\nprintf(\"%%o = %o <br>\",$num1); // Octal number\nprintf(\"%%s = %s <br>\",$num1); // String\nprintf(\"%%x = %x <br>\",$num1); // Hexadecimal number (lowercase)\nprintf(\"%%X = %X <br>\",$num1); // Hexadecimal number (uppercase)\nprintf(\"%%+d = %+d <br>\",$num1); // Sign specifier (positive)\nprintf(\"%%+d = %+d <br>\",$num2); // Sign specifier (negative)\n?>",
        "<?php\n$str1 = \"Hello\";\n$str2 = \"Hello world!\";\n\nprintf(\"[%s]<br>\",$str1);\nprintf(\"[%8s]<br>\",$str1);\nprintf(\"[%-8s]<br>\",$str1);\nprintf(\"[%08s]<br>\",$str1);\nprintf(\"[%'*8s]<br>\",$str1);\nprintf(\"[%8.8s]<br>\",$str2);\n?>"
      ]
    },
    {
      "title": "PHP quoted_printable_decode() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nDecode a quoted-printable string to an 8-bit ASCII string:\nThe browser output of the code above will be:\nThe HTML output of the code above will be (View Source):\nDefinition and Usage\nThe quoted_printable_decode() function decodes a quoted-printable string to an 8-bit ASCII string.\nTip: Data encoded in quoted-printable are unlikely to be modified by mail transport. A text which is entirely US-ASCII may be encoded in quoted-printable to ensure the integrity of the data should the message pass through a character-translating, or line-wrapping gateway.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$str = \"Hello=0Aworld.\";\necho quoted_printable_decode($str);\n?>",
        "Hello world.",
        "Hello\nworld.",
        "quoted_printable_decode(string)"
      ]
    },
    {
      "title": "PHP quoted_printable_encode() Function",
      "summary": "Definition and Usage\nThe quoted_printable_encode() function converts an 8-bit string to a quoted-printable string.\nTip: Data encoded in quoted-printable are unlikely to be modified by mail transport. A text which is entirely US-ASCII may be encoded in quoted-printable to ensure the integrity of the data should the message pass through a character-translating, or line-wrapping gateway.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "quoted_printable_encode(string)"
      ]
    },
    {
      "title": "PHP quotemeta() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nAdd backslashes in front of the predefined characters:\nDefinition and Usage\nThe quotemeta() function adds backslashes in front of some predefined characters in a string.\nThe predefined characters are:\nperiod (.)\nbackslash (\\)\nplus sign (+)\nasterisk (*)\nquestion mark (?)\nbrackets ([])\ncaret (^)\ndollar sign ($)\nparenthesis (())\nTip: This function can be used to escape characters with special meanings, such as ( ), [ ], and * in SQL.\nNote: This function is binary-safe.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nAdd backslashes in front of many predefined characters:",
      "examples": [
        "<?php\n$str = \"Hello world. (can you hear me?)\";\necho quotemeta($str);\n?>",
        "quotemeta(string)",
        "<?php\n$str1 = \"1 + 1 = 2\";\n$str2 = \"1 * 1 = 1\";\n$str3 = \"Could you borrow me 5$?\";\n$str4 = \"Are you not entertained? (I am..)\";\n$str5 = \"The caret [ ^ ] Looks like a hat!\";\n\necho quotemeta($str1).\"<br>\";\necho quotemeta($str2).\"<br>\";\necho quotemeta($str3).\"<br>\";\necho quotemeta($str4).\"<br>\";\necho quotemeta($str5).\"<br>\";\n?>"
      ]
    },
    {
      "title": "PHP rtrim() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nRemove characters from the right side of a string:\nDefinition and Usage\nThe rtrim() function removes whitespace or other predefined characters from the right side of a string.\nRelated functions:\nltrim() - Removes whitespace or other predefined characters from the left side of a string\ntrim() - Removes whitespace or other predefined characters from both sides of a string\nSyntax\nParameter Values\n\"\\0\" - NULL\n\"\\t\" - tab\n\"\\n\" - new line\n\"\\x0B\" - vertical tab\n\"\\r\" - carriage return\n\" \" - ordinary white space\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nRemove whitespaces from the right side of a string:\nThe HTML output of the code above will be (View Source):\nThe browser output of the code above will be:\nExample\nRemove newlines (\\n) from the right side of a string:\nThe HTML output of the code above will be (View Source):\nThe browser output of the code above will be:",
      "examples": [
        "<?php\n$str = \"Hello World!\";\necho $str . \"<br>\";\necho rtrim($str,\"World!\");\n?>",
        "rtrim(string,charlist)",
        "<?php\n$str = \"Hello World!Â Â Â Â \";\necho \"Without rtrim: \" . $str;\necho \"<br>\";\necho \"With rtrim: \" . rtrim($str);\n?>",
        "<!DOCTYPE html>\n<html>\n<body>\n\nWithout rtrim: Hello World!Â Â Â Â <br>With rtrim: Hello World!\n</body>\n</html>",
        "Without rtrim: Hello World!\nWith rtrim: Hello World!",
        "<?php\n$str = \"Hello World!\\n\\n\\n\";\necho \"Without rtrim: \" . $str;\necho \"<br>\";\necho \"With rtrim: \" . rtrim($str);\n?>",
        "<!DOCTYPE html>\n<html>\n<body>\n\nWithout rtrim: Hello World!\n\n\n<br>With rtrim: Hello World!\n</body>\n</html>"
      ]
    },
    {
      "title": "PHP setlocale() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nSet the locale to US English and then back to default again:\nDefinition and Usage\nThe setlocale() function sets locale information.\nLocale information is language, monetary, time and other information specific for a geographical area.\nNote: The setlocale() function changes the locale only for the current script.\nTip: The locale information can be set to system default with setlocale(LC_ALL,NULL)\nTip: To get numeric formatting information, see the localeconv() function.\nSyntax\nParameter Values\nAvailable constants:\nLC_ALL - All of the below\nLC_COLLATE -Â  Sort order\nLC_CTYPE - Character classification and conversion (e.g. all characters should be lower or upper-case)\nLC_MESSAGES - System message formatting\nLC_MONETARY - Monetary/currency formatting\nLC_NUMERIC - Numeric formatting\nLC_TIME - Date and time formatting\nNote: To view all available language codes, go to our Language code reference.\nTechnical Details",
      "examples": [
        "<?php\necho setlocale(LC_ALL,\"US\");\necho \"<br>\";\necho setlocale(LC_ALL,NULL);\n?>",
        "setlocale(constant,location)"
      ]
    },
    {
      "title": "PHP sha1() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nCalculate the SHA-1 hash of the string \"Hello\":\nDefinition and Usage\nThe sha1() function calculates the SHA-1 hash of a string.\nThe sha1() function uses the US Secure Hash Algorithm 1.\nFrom RFC 3174 - The US Secure Hash Algorithm 1: \"SHA-1 produces a 160-bit output called a message digest. The message digest can then, for example, be input to a signature algorithm which generates or verifies the signature for the message. Signing the message digest rather than the message often improves the efficiency of the process because the message digest is usually much smaller in size than the message. The same hash algorithm must be used by the verifier of a digital signature as was used by the creator of the digital signature.\"\nTip: To calculate the SHA-1 hash of a file, use the sha1_file() function.\nSyntax\nParameter Values\nTRUE - Raw 20 character binary format\nFALSE - Default. 40 character hex number\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nPrint the result of sha1():\nExample\nPrint the result of sha1() and then test it:",
      "examples": [
        "<?php\n$str = \"Hello\";\necho sha1($str);\n?>",
        "sha1(string,raw)",
        "<?php\n$str = \"Hello\";\necho \"The string: \".$str.\"<br>\";\necho \"TRUE - Raw 20 character binary format: \".sha1($str, TRUE).\"<br>\";\necho \"FALSE - 40 character hex number: \".sha1($str).\"<br>\";\n?>",
        "<?php\n$str = \"Hello\";\necho sha1($str);\n\nif (sha1($str) == \"f7ff9e8b7bb2e09b70935a5d785e0cc5d9d0abf0\")\n{\necho \"<br>Hello world!\";\nexit;\n}\n?>"
      ]
    },
    {
      "title": "PHP sha1_file() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nCalculate the SHA-1 hash of the text file \"test.txt\":\nThe output of the code above will be:\nDefinition and Usage\nThe sha1_file() function calculates the SHA-1 hash of a file.\nThe sha1_file() function uses the US Secure Hash Algorithm 1.\nFrom RFC 3174 - The US Secure Hash Algorithm 1: \"SHA-1 produces a 160-bit output called a message digest. The message digest can then, for example, be input to a signature algorithm which generates or verifies the signature for the message. Signing the message digest rather than the message often improves the efficiency of the process because the message digest is usually much smaller in size than the message. The same hash algorithm must be used by the verifier of a digital signature as was used by the creator of the digital signature.\"\nThis function returns the calculated SHA-1 hash on success, or FALSE on failure.\nSyntax\nParameter Values\nTRUE - Raw 20 character binary format\nFALSE - Default. 40 character hex number\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nStore the SHA-1 hash of \"test.txt\" in a file:\nTest if \"test.txt\" has been changed (that is if the SHA-1 hash has been changed):\nThe output of the code above could be:",
      "examples": [
        "<?php\n$filename = \"test.txt\";\n$sha1file = sha1_file($filename);\necho $sha1file;\n?>",
        "aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d",
        "sha1_file(file,raw)",
        "<?php\n$sha1file = sha1_file(\"test.txt\");\nfile_put_contents(\"sha1file.txt\",$sha1file);\n?>",
        "<?php\n$sha1file = file_get_contents(\"sha1file.txt\");\nif (sha1_file(\"test.txt\") == $sha1file)\n{\necho \"The file is ok.\";\n}\nelse\n{\necho \"The file has been changed.\";\n}\n?>",
        "The file is ok."
      ]
    },
    {
      "title": "PHP similar_text() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nCalculate the similarity between two strings and return the matching characters:\nDefinition and Usage\nThe similar_text() function calculates the similarity between two strings.\nIt can also calculate the similarity of the two strings in percent.\nNote: The levenshtein() function is faster than the similar_text() function. However, the similar_text() function will give you a more accurate result with less modifications needed.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nCalculate the similarity between two strings in percent:",
      "examples": [
        "<?php\necho similar_text(\"Hello World\",\"Hello Peter\");\n?>",
        "similar_text(string1,string2,percent)",
        "<?php\nsimilar_text(\"Hello World\",\"Hello Peter\",$percent);\necho $percent;\n?>"
      ]
    },
    {
      "title": "PHP soundex() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nCalculate the soundex key of \"Hello\":\nDefinition and Usage\nThe soundex() function calculates the soundex key of a string.\nA soundex key is a four character long alphanumeric string that represent English pronunciation of a word.\nThe soundex() function can be used for spelling applications.\nNote: The soundex() function creates the same key for similar sounding words.\nTip: metaphone() is more accurate than soundex(), because metaphone() knows the basic rules of English pronunciation.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nUsing the soundex() function on two similar sounding words:",
      "examples": [
        "<?php\n$str = \"Hello\";\necho soundex($str);\n?>",
        "soundex(string)",
        "<?php\n$str = \"Assistance\";\n$str2 = \"Assistants\";\n\necho soundex($str);\necho \"<br>\";\necho soundex($str2);\n?>"
      ]
    },
    {
      "title": "PHP sprintf() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nReplace the percent (%) sign by a variable passed as an argument:\nDefinition and Usage\nThe sprintf() function writes a formatted string to a variable.\nThe arg1, arg2, ++ parameters will be inserted at percent (%) signs in the main string. This function works \"step-by-step\". At the first % sign, arg1 is inserted, at the second % sign, arg2 is inserted, etc.\nNote: If there are more % signs than arguments, you must use placeholders. A placeholder is inserted after the % sign, and consists of the argument- number and \"\\$\". See example two.\nTip: Related functions: printf(), vprintf(), vsprintf(), fprintf() and vfprintf()\nSyntax\nParameter Values\nPossible format values:\n%% - Returns a percent sign\n%b - Binary number\n%c - The character according to the ASCII value\n%d - Signed decimal number (negative, zero or positive)\n%e - Scientific notation using a lowercase (e.g. 1.2e+2)\n%E - Scientific notation using a uppercase (e.g. 1.2E+2)\n%u - Unsigned decimal number (equal to or greater than zero)\n%f - Floating-point number (local settings aware)\n%F - Floating-point number (not local settings aware)\n%g - shorter of %e and %f\n%G - shorter of %E and %f\n%o - Octal number\n%s - String\n%x - Hexadecimal number (lowercase letters)\n%X - Hexadecimal number (uppercase letters)\nAdditional format values. These are placed between the % and the letter (example %.2f):\n+ (Forces both + and - in front of numbers. By default, only negative numbers are marked)\n' (Specifies what to use as padding. Default is space. Must be used together with the width specifier. Example: %'x20s (this uses \"x\" as padding)\n- (Left-justifies the variable value)\n[0-9] (Specifies the minimum width held of to the variable value)\n.[0-9] (Specifies the number of decimal digits or maximum string length)\nNote: If multiple additional format values are used, they must be in the same order as above.\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nUsing the format value %f:\nExample\nUse of placeholders:\nExample\nA demonstration of all possible format values:\nExample\nA demonstration of string specifiers:",
      "examples": [
        "<?php\n$number = 9;\n$str = \"Beijing\";\n$txt = sprintf(\"There are %u million bicycles in %s.\",$number,$str);\necho $txt;\n?>",
        "sprintf(format,arg1,arg2,arg++)",
        "<?php\n$number = 123;\n$txt = sprintf(\"%f\",$number);\necho $txt;\n?>",
        "<?php\n$number = 123;\n$txt = sprintf(\"With 2 decimals: %1\\$.2f\n<br>With no decimals: %1\\$u\",$number);\necho $txt;\n?>",
        "<?php\n$num1 = 123456789;\n$num2 = -123456789;\n$char = 50; // The ASCII Character 50 is 2\n\n// Note: The format value \"%%\" returns a percent sign\necho sprintf(\"%%b = %b\",$num1).\"<br>\"; // Binary number\necho sprintf(\"%%c = %c\",$char).\"<br>\"; // The ASCII Character\necho sprintf(\"%%d = %d\",$num1).\"<br>\"; // Signed decimal number\necho sprintf(\"%%d = %d\",$num2).\"<br>\"; // Signed decimal number\necho sprintf(\"%%e = %e\",$num1).\"<br>\"; // Scientific notation (lowercase)\necho sprintf(\"%%E = %E\",$num1).\"<br>\"; // Scientific notation (uppercase)\necho sprintf(\"%%u = %u\",$num1).\"<br>\"; // Unsigned decimal number (positive)\necho sprintf(\"%%u = %u\",$num2).\"<br>\"; // Unsigned decimal number (negative)\necho sprintf(\"%%f = %f\",$num1).\"<br>\"; // Floating-point number (local settings aware)\necho sprintf(\"%%F = %F\",$num1).\"<br>\"; // Floating-point number (not local sett aware)\necho sprintf(\"%%g = %g\",$num1).\"<br>\"; // Shorter of %e and %f\necho sprintf(\"%%G = %G\",$num1).\"<br>\"; // Shorter of %E and %f\necho sprintf(\"%%o = %o\",$num1).\"<br>\"; // Octal number\necho sprintf(\"%%s = %s\",$num1).\"<br>\"; // String\necho sprintf(\"%%x = %x\",$num1).\"<br>\"; // Hexadecimal number (lowercase)\necho sprintf(\"%%X = %X\",$num1).\"<br>\"; // Hexadecimal number (uppercase)\necho sprintf(\"%%+d = %+d\",$num1).\"<br>\"; // Sign specifier (positive)\necho sprintf(\"%%+d = %+d\",$num2).\"<br>\"; // Sign specifier (negative)\n?>",
        "<?php\n$str1 = \"Hello\";\n$str2 = \"Hello world!\";\n\necho sprintf(\"[%s]\",$str1).\"<br>\";\necho sprintf(\"[%8s]\",$str1).\"<br>\";\necho sprintf(\"[%-8s]\",$str1).\"<br>\";\necho sprintf(\"[%08s]\",$str1).\"<br>\";\necho sprintf(\"[%'*8s]\",$str1).\"<br>\";\necho sprintf(\"[%8.8s]\",$str2).\"<br>\";\n?>"
      ]
    },
    {
      "title": "PHP sscanf() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nParse a string:\nThe sscanf() function parses input from a string according to a specified format. The sscanf() function parses a string into variables based on the format string.\nIf only two parameters are passed to this function, the data will be returned as an array. Otherwise, if optional parameters are passed, the data parsed are stored in them. If there are more specifiers than variables to contain them, an error occurs. However, if there are less specifiers than variables, the extra variables contain NULL.\nRelated functions:\nprintf() - outputs a formatted string\nsprintf() - writes a formatted string to a variable\nSyntax\nParameter Values\nPossible format values:\n%% - Returns a percent sign\n%c - The character according to the ASCII value\n%d - Signed decimal number (negative, zero or positive)\n%e - Scientific notation using a lowercase (e.g. 1.2e+2)\n%u - Unsigned decimal number (equal to or greather than zero)\n%f - Floating-point number\n%o - Octal number\n%s - String\n%x - Hexadecimal number (lowercase letters)\n%X - Hexadecimal number (uppercase letters)\nAdditional format values. These are placed between the % and the letter (example %.2f):\n+ (Forces both + and - in front of numbers. By default, only negative numbers are marked)\n' (Specifies what to use as padding. Default is space. Must be used together with the width specifier. Example: %'x20s (this uses \"x\" as padding)\n- (Left-justifies the variable value)\n[0-9] (Specifies the minimum width held of to the variable value)\n.[0-9] (Specifies the number of decimal digits or maximum string length)\nNote: If multiple additional format values are used, they must be in the same order as above.\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nUsing the format values %s, %d and %c:",
      "examples": [
        "<?php\n$str = \"age:30 weight:60kg\";\nsscanf($str,\"age:%d weight:%dkg\",$age,$weight);\n// show types and values\nvar_dump($age,$weight);\n?>",
        "sscanf(string,format,arg1,arg2,arg++)",
        "<?php\n$str = \"If you divide 4 by 2 you'll get 2\";\n$format = sscanf($str,\"%s %s %s %d %s %d %s %s %c\");\nprint_r($format);\n?>"
      ]
    },
    {
      "title": "PHP str_getcsv() Function",
      "summary": "â® PHP String Reference\nDefinition and Usage\nThe str_getcsv() function parses a string for fields in CSV format and returns an array containing the fields read.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "str_getcsv(string,separator,enclosure,escape)"
      ]
    },
    {
      "title": "PHP str_ireplace() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nReplace the characters \"WORLD\" (case-insensitive) in the string \"Hello world!\" with \"Peter\":\nDefinition and Usage\nThe str_ireplace() function replaces some characters with some other characters in a string.\nThis function works by the following rules:\nIf the string to be searched is an array, it returns an array\nIf the string to be searched is an array, find and replace is performed with every array element\nIf both find and replace are arrays, and replace has fewer elements than find, an empty string will be used as replace\nIf find is an array and replace is a string, the replace string will be used for every find value\nNote: This function is case-insensitive. Use the str_replace() function to perform a case-sensitive search.\nNote: This function is binary-safe.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nUsing str_ireplace() with an array and a count variable:\nExample\nUsing str_ireplace() with fewer elements in replace than find:",
      "examples": [
        "<?php\necho str_ireplace(\"WORLD\",\"Peter\",\"Hello world!\");\n?>",
        "str_ireplace(find,replace,string,count)",
        "<?php\n$arr = array(\"blue\",\"red\",\"green\",\"yellow\");\nprint_r(str_ireplace(\"RED\",\"pink\",$arr,$i)); // This function is case-insensitive\necho \"Replacements: $i\";\n?>",
        "<?php\n$find = array(\"HELLO\",\"WORLD\");\n$replace = array(\"B\");\n$arr = array(\"Hello\",\"world\",\"!\");\nprint_r(str_ireplace($find,$replace,$arr));\n?>"
      ]
    },
    {
      "title": "PHP str_pad() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nPad to the right side of the string, to a new length of 20 characters:\nDefinition and Usage\nThe str_pad() function pads a string to a new length.\nSyntax\nParameter Values\nPossible values:\nSTR_PAD_BOTH - Pad to both sides of the string. If not an even number, the right side gets the extra padding\nSTR_PAD_LEFT - Pad to the left side of the string\nSTR_PAD_RIGHT - Pad to the right side of the string. This is default\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nPad to the left side of the string:\nExample\nPad to both sides of the string:",
      "examples": [
        "<?php\n$str = \"Hello World\";\necho str_pad($str,20,\".\");\n?>",
        "str_pad(string,length,pad_string,pad_type)",
        "<?php\n$str = \"Hello World\";\necho str_pad($str,20,\".\",STR_PAD_LEFT);\n?>",
        "<?php\n$str = \"Hello World\";\necho str_pad($str,20,\".:\",STR_PAD_BOTH);\n?>"
      ]
    },
    {
      "title": "PHP str_repeat() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nRepeat the string \"Wow\" 13 times:\nDefinition and Usage\nThe str_repeat() function repeats a string a specified number of times.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho str_repeat(\"Wow\",13);\n?>",
        "str_repeat(string,repeat)"
      ]
    },
    {
      "title": "PHP str_replace() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nReplace the characters \"world\" in the string \"Hello world!\" with \"Peter\":\nDefinition and Usage\nThe str_replace() function replaces some characters with some other characters in a string.\nThis function works by the following rules:\nIf the string to be searched is an array, it returns an array\nIf the string to be searched is an array, find and replace is performed with every array element\nIf both find and replace are arrays, and replace has fewer elements than find, an empty string will be used as replace\nIf find is an array and replace is a string, the replace string will be used for every find value\nNote: This function is case-sensitive. Use the str_ireplace() function to perform a case-insensitive search.\nNote: This function is binary-safe.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nUsing str_replace() with an array and a count variable:\nExample\nUsing str_replace() with fewer elements in replace than find:",
      "examples": [
        "<?php\necho str_replace(\"world\",\"Peter\",\"Hello world!\");\n?>",
        "str_replace(find,replace,string,count)",
        "<?php\n$arr = array(\"blue\",\"red\",\"green\",\"yellow\");\nprint_r(str_replace(\"red\",\"pink\",$arr,$i));\necho \"Replacements: $i\";\n?>",
        "<?php\n$find = array(\"Hello\",\"world\");\n$replace = array(\"B\");\n$arr = array(\"Hello\",\"world\",\"!\");\nprint_r(str_replace($find,$replace,$arr));\n?>"
      ]
    },
    {
      "title": "PHP str_rot13() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nEncode and decode a string:\nDefinition and Usage\nThe str_rot13() function performs the ROT13 encoding on a string.\nThe ROT13 encoding shifts every letter 13 places in the alphabet. Numeric and non-alphabetical characters remains untouched.\nTip: Encoding and decoding are done by the same function. If you pass an encoded string as argument, the original string will be returned.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho str_rot13(\"Hello World\");\necho \"<br>\";\necho str_rot13(\"Uryyb Jbeyq\");\n?>",
        "str_rot13(string)"
      ]
    },
    {
      "title": "PHP str_shuffle() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nRandomly shuffle all characters of a string:\nDefinition and Usage\nThe str_shuffle() function randomly shuffles all the characters of a string.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho str_shuffle(\"Hello World\");\n?>",
        "str_shuffle(string)"
      ]
    },
    {
      "title": "PHP str_split() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nSplit the string \"Hello\" into an array:\nDefinition and Usage\nThe str_split() function splits a string into an array.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nUsing the length parameter:",
      "examples": [
        "<?php\nprint_r(str_split(\"Hello\"));\n?>",
        "str_split(string,length)",
        "<?php\nprint_r(str_split(\"Hello\",3));\n?>"
      ]
    },
    {
      "title": "PHP str_word_count() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nCount the number of words found in the string \"Hello World!\":\nDefinition and Usage\nThe str_word_count() function counts the number of words in a string.\nSyntax\nParameter Values\nPossible values:\n0 - Default. Returns the number of words found\n1 - Returns an array with the words from the string\n2 - Returns an array where the key is the position of the word in the string, and value is the actual word\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nReturn an array with the words from the string:\nExample\nReturn an array where the key is the position of the word in the string, and value is the actual word:\nExample\nWithout and with the char parameter:",
      "examples": [
        "<?php\necho str_word_count(\"Hello world!\");\n?>",
        "str_word_count(string,return,char)",
        "<?php\nprint_r(str_word_count(\"Hello world!\",1));\n?>",
        "<?php\nprint_r(str_word_count(\"Hello world!\",2));\n?>",
        "<?php\nprint_r(str_word_count(\"Hello world & good morning!\",1));\nprint_r(str_word_count(\"Hello world & good morning!\",1,\"&\"));\n?>"
      ]
    },
    {
      "title": "PHP strcasecmp() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nCompare two strings (case-insensitive):\nDefinition and Usage\nThe strcasecmp() function compares two strings.\nTip: The strcasecmp() function is binary-safe and case-insensitive.\nTip: This function is similar to the strncasecmp() function, with the difference that you can specify the number of characters from each string to be used in the comparison with strncasecmp().\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\n0 - if the two strings are equal\n<0 - if string1 is less than string2\n>0 - if string1 is greater than string2\nMore Examples\nExample\nCompare two strings (case-insensitive = HELLO and hELLo will output the same):\nExample\nDifferent return values:",
      "examples": [
        "<?php\necho strcasecmp(\"Hello world!\",\"HELLO WORLD!\");\n?>",
        "strcasecmp(string1,string2)",
        "<?php\necho strcasecmp(\"Hello\",\"HELLO\");\necho \"<br>\";\necho strcasecmp(\"Hello\",\"hELLo\");\n?>",
        "<?php\necho strcasecmp(\"Hello world!\",\"HELLO WORLD!\"); // The two strings are equal\necho strcasecmp(\"Hello world!\",\"HELLO\"); // String1 is greater than string2\necho strcasecmp(\"Hello world!\",\"HELLO WORLD! HELLO!\"); // String1 is less than string2\n?>"
      ]
    },
    {
      "title": "PHP strchr() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nFind the first occurrence of \"world\" inside \"Hello world!\" and return the rest of the string:\nDefinition and Usage\nThe strchr() function searches for the first occurrence of a string inside another string.\nThis function is an alias of the strstr() function.\nNote: This function is binary-safe.\nNote: This function is case-sensitive. For a case-insensitive search, use stristr() function.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nSearch a string for the ASCII value of \"o\" and return the rest of the string:\nExample\nReturn the part of the string before the first occurence of \"world\":\nâ® PHP String Reference",
      "examples": [
        "<?php\necho strchr(\"Hello world!\",\"world\");\n?>",
        "strchr(string,search,before_search);",
        "<?php\necho strchr(\"Hello world!\",111);\n?>",
        "<?php\necho strchr(\"Hello world!\",\"world\",true);\n?>"
      ]
    },
    {
      "title": "PHP strcmp() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nCompare two strings (case-sensitive):\nDefinition and Usage\nThe strcmp() function compares two strings.\nNote: The strcmp() function is binary-safe and case-sensitive.\nTip: This function is similar to the strncmp() function, with the difference that you can specify the number of characters from each string to be used in the comparison with strncmp().\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\n0 - if the two strings are equal\n<0 - if string1 is less than string2\n>0 - if string1 is greater than string2\nMore Examples\nExample\nCompare two strings (case-sensitive = Hello and hELLo will not output the same):\nExample\nDifferent return values:",
      "examples": [
        "<?php\necho strcmp(\"Hello world!\",\"Hello world!\");\n?>",
        "strcmp(string1,string2)",
        "<?php\necho strcmp(\"Hello\",\"Hello\");\necho \"<br>\";\necho strcmp(\"Hello\",\"hELLo\");\n?>",
        "<?php\necho strcmp(\"Hello world!\",\"Hello world!\"); // the two strings are equal\necho strcmp(\"Hello world!\",\"Hello\"); // string1 is greater than string2\necho strcmp(\"Hello world!\",\"Hello world! Hello!\"); // string1 is less than string2\n?>"
      ]
    },
    {
      "title": "PHP strcoll() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nCompare strings:\nDefinition and Usage\nThe strcoll() function compares two strings.\nThe comparison of the strings may vary depending on the locale settings (A<a or A>a).\nNote: The strcoll() is case-sensitive but not binary-safe.\nNote: If the current locale is C or POSIX, this function works the same way as strcmp().\nSyntax\nParameter Values\nTechnical Details\n0 - if the two strings are equal\n<0 - if string1 is less than string2\n>0 - if string1 is greater than string2",
      "examples": [
        "<?php\nsetlocale (LC_COLLATE, 'NL');\necho strcoll(\"Hello World!\",\"Hello World!\");\necho \"<br>\";\n\nsetlocale (LC_COLLATE, 'en_US');\necho strcoll(\"Hello World!\",\"Hello World!\");\n?>",
        "strcoll(string1,string2)"
      ]
    },
    {
      "title": "PHP strcspn() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nPrint the number of characters found in \"Hello world!\" before the character \"w\":\nDefinition and Usage\nThe strcspn() function returns the number of characters (including whitespaces) found in a string before any part of the specified characters are found.\nTip: Use the strspn() function to the number of characters found in the string that contains only characters from a specified character list.\nNote: This function is binary-safe.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nUsing all parameters to print the number of characters found in \"Hello world!\" before the character \"w\":",
      "examples": [
        "<?php\necho strcspn(\"Hello world!\",\"w\");\n?>",
        "strcspn(string,char,start,length)",
        "<?php\necho strcspn(\"Hello world!\",\"w\",0,6); // The start position is 0 and the length of the search string is 6.\n?>"
      ]
    },
    {
      "title": "PHP strip_tags() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nStrip the string from HTML tags:\nDefinition and Usage\nThe strip_tags() function strips a string from HTML, XML, and PHP tags.\nNote: HTML comments are always stripped. This cannot be changed with the allow parameter.\nNote: This function is binary-safe.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nStrip the string from HTML tags, but allow <b> tags to be used:",
      "examples": [
        "<?php\necho strip_tags(\"Hello <b>world!</b>\");\n?>",
        "strip_tags(string,allow)",
        "<?php\necho strip_tags(\"Hello <b><i>world!</i></b>\",\"<b>\");\n?>"
      ]
    },
    {
      "title": "PHP stripcslashes() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nRemove the backslash in front of \"World!\":\nDefinition and Usage\nThe stripcslashes() function removes backslashes added by the addcslashes() function.\nTip: This function can be used to clean up data retrieved from a database or from an HTML form.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho stripcslashes(\"Hello \\World!\");\n?>",
        "stripcslashes(string)"
      ]
    },
    {
      "title": "PHP stripslashes() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nRemove the backslash:\nDefinition and Usage\nThe stripslashes() function removes backslashes added by the addslashes() function.\nTip: This function can be used to clean up data retrieved from a database or from an HTML form.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho stripslashes(\"Who\\'s Peter Griffin?\");\n?>",
        "stripslashes(string)"
      ]
    },
    {
      "title": "PHP stripos() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nFind the position of the first occurrence of \"php\" inside the string:\nDefinition and Usage\nThe stripos() function finds the position of the first occurrence of a string inside another string.\nNote: The stripos() function is case-insensitive.\nNote: This function is binary-safe.\nRelated functions:\nstrripos() - Finds the position of the last occurrence of a string inside another string (case-insensitive)\nstrpos() - Finds the position of the first occurrence of a string inside another string (case-sensitive)\nstrrpos() - Finds the position of the last occurrence of a string inside another string (case-sensitive)\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho stripos(\"I love php, I love php too!\",\"PHP\");\n?>",
        "stripos(string,find,start)"
      ]
    },
    {
      "title": "PHP stristr() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nFind the first occurrence of \"world\" inside \"Hello world!\", and return the rest of the string:\nDefinition and Usage\nThe stristr() function searches for the first occurrence of a string inside another string.\nNote: This function is binary-safe.\nNote: This function is case-insensitive. For a case-sensitive search, use strstr() function.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nSearch a string for the ASCII value of \"o\", and return the rest of the string:\nExample\nReturn the part of the string before the first occurence of \"world\":",
      "examples": [
        "<?php\necho stristr(\"Hello world!\",\"WORLD\");\n?>",
        "stristr(string,search,before_search)",
        "<?php\necho stristr(\"Hello world!\",111);\n?>",
        "<?php\necho stristr(\"Hello world!\",\"WORLD\",true);\n?>"
      ]
    },
    {
      "title": "PHP strlen() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nReturn the length of the string \"Hello\":\nDefinition and Usage\nThe strlen() function returns the length of a string.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the length of the string \"Hello World\":",
      "examples": [
        "<?php\necho strlen(\"Hello\");\n?>",
        "strlen(string)",
        "<?php\necho strlen(\"Hello world!\");\n?>"
      ]
    },
    {
      "title": "PHP strnatcasecmp() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nCompare two strings using a \"natural\" algorithm (case-insensitive):\nDefinition and Usage\nThe strnatcasecmp() function compares two strings using a \"natural\" algorithm.\nIn a natural algorithm, the number 2 is less than the number 10. In computer sorting, 10 is less than 2, because the first number in \"10\" is less than 2.\nNote: The strnatcasecmp() is case-insensitive.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\n0 - if the two strings are equal\n<0 - if string1 is less than string2\n>0 - if string1 is greater than string2\nMore Examples\nExample\nDifference between natural algorithm (strnatcmp) and regular computer string sorting algorithms (strcmp):",
      "examples": [
        "<?php\necho strnatcasecmp(\"2Hello world!\",\"10Hello WORLD!\");\necho \"<br>\";\necho strnatcasecmp(\"10Hello world!\",\"2Hello WORLD!\");\n?>",
        "strnatcasecmp(string1,string2)",
        "<?php\n$arr1 = $arr2 = array(\"pic1\",\"pic2\",\"pic10\",\"pic01\",\"pic100\",\"pic20\",\"pic30\",\"pic200\");\necho \"Standard string comparison\".\"<br>\";\nusort($arr1,\"strcmp\");\n\nprint_r($arr1);\necho \"<br>\";\n\necho \"Natural order string comparison\".\"<br>\";\nusort($arr2,\"strnatcmp\");\n\nprint_r($arr2);\n?>"
      ]
    },
    {
      "title": "PHP strnatcmp() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nCompare two strings using a \"natural\" algorithm (case-sensitive):\nDefinition and Usage\nThe strnatcmp() function compares two strings using a \"natural\" algorithm.\nIn a natural algorithm, the number 2 is less than the number 10. In computer sorting, 10 is less than 2, because the first number in \"10\" is less than 2.\nNote: This function is case-sensitive.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\n0 - if the two strings are equal\n<0 - if string1 is less than string2\n>0 - if string1 is greater than string2\nMore Examples\nExample\nDifference between natural algorithm (strnatcmp) and regular computer string sorting algorithms (strcmp):",
      "examples": [
        "<?php\necho strnatcmp(\"2Hello world!\",\"10Hello world!\");\necho \"<br>\";\necho strnatcmp(\"10Hello world!\",\"2Hello world!\");\n?>",
        "strnatcmp(string1,string2)",
        "<?php\n$arr1 = $arr2 = array(\"pic1\",\"pic2\",\"pic10\",\"pic01\",\"pic100\",\"pic20\",\"pic30\",\"pic200\");\necho \"Standard string comparison\".\"<br>\";\nusort($arr1,\"strcmp\");\n\nprint_r($arr1);\necho \"<br>\";\n\necho \"Natural order string comparison\".\"<br>\";\nusort($arr2,\"strnatcmp\");\n\nprint_r($arr2);\n?>"
      ]
    },
    {
      "title": "PHP strncasecmp() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nCompare two strings (case-insensitive):\nDefinition and Usage\nThe strncasecmp() function compares two strings.\nNote: The strncasecmp() is binary-safe and case-insensitive.\nTip: This function is similar to the strcasecmp() function, except that strcasecmp() does not have the length parameter.\nSyntax\nParameter Values\nTechnical Details\n0 - if the two strings are equal\n<0 - if string1 is less than string2\n>0 - if string1 is greater than string2\nMore Examples\nExample\nCompare two strings (case-insensitive = Hello and hELLo will output the same):",
      "examples": [
        "<?php\necho strncasecmp(\"Hello world!\",\"hello earth!\",6);\n?>",
        "strncasecmp(string1,string2,length)",
        "<?php\necho strncasecmp(\"Hello\",\"Hello\",6);\necho \"<br>\";\necho strncasecmp(\"Hello\",\"hELLo\",6);\n?>"
      ]
    },
    {
      "title": "PHP strncmp() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nCompare two strings (case-sensitive):\nDefinition and Usage\nThe strncmp() function compares two strings.\nNote: The strncmp() is binary-safe and case-sensitive.\nTip: This function is similar to the strcmp() function, except that strcmp() does not have the length parameter.\nSyntax\nParameter Values\nTechnical Details\n0 - if the two strings are equal\n<0 - if string1 is less than string2\n>0 - if string1 is greater than string2\nMore Examples\nExample\nCompare two strings (case-sensitive = Hello and hELLo will not output the same):",
      "examples": [
        "<?php\necho strncmp(\"Hello world!\",\"Hello earth!\",6);\n?>",
        "strncmp(string1,string2,length)",
        "<?php\necho strncmp(\"Hello\",\"Hello\",6);\necho \"<br>\";\necho strncmp(\"Hello\",\"hELLo\",6);\n?>"
      ]
    },
    {
      "title": "PHP strpbrk() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nSearch a string for the characters \"oe\", and return the rest of the string from where it found the first occurrence of the specified characters:\nDefinition and Usage\nThe strpbrk() function searches a string for any of the specified characters.\nNote: This function is case-sensitive.\nThis function returns the rest of the string from where it found the first occurrence of a specified character, otherwise it returns FALSE.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nThis function is case-sensitive (\"W\" and \"w\" will not output the same):",
      "examples": [
        "<?php\necho strpbrk(\"Hello world!\",\"oe\");\n?>",
        "strpbrk(string,charlist)",
        "<?php\necho strpbrk(\"Hello world!\",\"W\");\necho \"<br>\";\necho strpbrk(\"Hello world!\",\"w\");\n?>"
      ]
    },
    {
      "title": "PHP strpos() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nFind the position of the first occurrence of \"php\" inside the string:\nDefinition and Usage\nThe strpos() function finds the position of the first occurrence of a string inside another string.\nNote: The strpos() function is case-sensitive.\nNote: This function is binary-safe.\nRelated functions:\nstrrpos() - Finds the position of the last occurrence of a string inside another string (case-sensitive)\nstripos() - Finds the position of the first occurrence of a string inside another string (case-insensitive)\nstrripos() - Finds the position of the last occurrence of a string inside another string (case-insensitive)\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho strpos(\"I love php, I love php too!\",\"php\");\n?>",
        "strpos(string,find,start)"
      ]
    },
    {
      "title": "PHP strrchr() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nSearch a string for \"world\", and return all characters from this position to the end of the string:\nDefinition and Usage\nThe strrchr() function finds the position of the last occurrence of a string within another string, and returns all characters from this position to the end of the string.\nNote: This function is binary-safe.\nSyntax\nParameter Values\nTechnical Details\nREMOVE ADS\nMore Examples\nExample\nSearch a string for \"What\", and return all characters from this position to the end of the string:\nExample\nSearch a string for the ASCII value of \"e\" (101) and return all characters from this position to the end of the string:",
      "examples": [
        "<?php\necho strrchr(\"Hello world!\",\"world\");\n?>",
        "strrchr(string,char)",
        "<?php\necho strrchr(\"Hello world! What a beautiful day!\", \"What\");\n?>",
        "<?php\necho strrchr(\"Hello world!\",101);\n?>"
      ]
    },
    {
      "title": "PHP strrev() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nReverse the string \"Hello World!\":\nDefinition and Usage\nThe strrev() function reverses a string.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho strrev(\"Hello World!\");\n?>",
        "strrev(string)"
      ]
    },
    {
      "title": "PHP strripos() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nFind the position of the last occurrence of \"php\" inside the string:\nDefinition and Usage\nThe strripos() function finds the position of the last occurrence of a string inside another string.\nNote: The strripos() function is case-insensitive.\nRelated functions:\nstripos() - Finds the position of the first occurrence of a string inside another string (case-insensitive)\nstrpos() - Finds the position of the first occurrence of a string inside another string (case-sensitive)\nstrrpos() - Finds the position of the last occurrence of a string inside another string (case-sensitive)\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho strripos(\"I love php, I love php too!\",\"PHP\");\n?>",
        "strripos(string,find,start)"
      ]
    },
    {
      "title": "PHP strrpos() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nFind the position of the last occurrence of \"php\" inside the string:\nDefinition and Usage\nThe strrpos() function finds the position of the last occurrence of a string inside another string.\nNote: The strrpos() function is case-sensitive.\nRelated functions:\nstrpos() - Finds the position of the first occurrence of a string inside another string (case-sensitive)\nstripos() - Finds the position of the first occurrence of a string inside another string (case-insensitive)\nstrripos() - Finds the position of the last occurrence of a string inside another string (case-insensitive)\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho strrpos(\"I love php, I love php too!\",\"php\");\n?>",
        "strrpos(string,find,start)"
      ]
    },
    {
      "title": "PHP strspn() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nReturn the number of characters found in the string \"Hello world!\" that contains the characters \"kHlleo\":\nDefinition and Usage\nThe strspn() function returns the number of characters found in the string that contains only characters from the charlist parameter.\nTip: Use the strcspn() function to return the number of characters found in a string before any part of the specified characters are found.\nNote: This function is binary-safe.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the number of characters found in the string \"abcdefand\" that contains the characters \"abc\":",
      "examples": [
        "<?php\necho strspn(\"Hello world!\",\"kHlleo\");\n?>",
        "strspn(string,charlist,start,length)",
        "<?php\necho strspn(\"abcdefand\",\"abc\");\n?>"
      ]
    },
    {
      "title": "PHP strstr() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nFind the first occurrence of \"world\" inside \"Hello world!\" and return the rest of the string:\nDefinition and Usage\nThe strstr() function searches for the first occurrence of a string inside another string.\nNote: This function is binary-safe.\nNote: This function is case-sensitive. For a case-insensitive search, use stristr() function.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nSearch a string for the ASCII value of \"o\" and return the rest of the string:\nExample\nReturn the part of the string before the first occurence of \"world\":",
      "examples": [
        "<?php\necho strstr(\"Hello world!\",\"world\");\n?>",
        "strstr(string,search,before_search)",
        "<?php\necho strstr(\"Hello world!\",111);\n?>",
        "<?php\necho strstr(\"Hello world!\",\"world\",true);\n?>"
      ]
    },
    {
      "title": "PHP strtok() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nSplit string one by one:\nIn the example below, note that it is only the first call to strtok() that uses the string argument. After the first call, this function only needs the split argument, as it keeps track of where it is in the current string. To tokenize a new string, call strtok() with the string argument again:\nDefinition and Usage\nThe strtok() function splits a string into smaller strings (tokens).\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$string = \"Hello world. Beautiful day today.\";\n$token = strtok($string, \" \");\n\nwhile ($token !== false)\n{\necho \"$token<br>\";\n$token = strtok(\" \");\n}\n?>",
        "strtok(string,split)"
      ]
    },
    {
      "title": "PHP strtolower() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nConvert all characters to lowercase:\nDefinition and Usage\nThe strtolower() function converts a string to lowercase.\nNote: This function is binary-safe.\nRelated functions:\nstrtoupper() - converts a string to uppercase\nlcfirst() - converts the first character of a string to lowercase\nucfirst() - converts the first character of a string to uppercase\nucwords() - converts the first character of each word in a string to uppercase\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho strtolower(\"Hello WORLD.\");\n?>",
        "strtolower(string)"
      ]
    },
    {
      "title": "PHP strtoupper() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nConvert all characters to uppercase:\nDefinition and Usage\nThe strtoupper() function converts a string to uppercase.\nNote: This function is binary-safe.\nRelated functions:\nstrtolower() - converts a string to lowercase\nlcfirst() - converts the first character of a string to lowercase\nucfirst() - converts the first character of a string to uppercase\nucwords() - converts the first character of each word in a string to uppercase\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho strtoupper(\"Hello WORLD!\");\n?>",
        "strtoupper(string)"
      ]
    },
    {
      "title": "PHP strtr() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nReplace the characters \"ia\" in the string with \"eo\":\nDefinition and Usage\nThe strtr() function translates certain characters in a string.\nNote: If the from and to parameters are different in length, both will be formatted to the length of the shortest.\nSyntax\nor\nParameter Values\nTechnical Details\nMore Examples\nExample\nReplace the string \"Hello world\" with \"Hi earth\":",
      "examples": [
        "<?php\necho strtr(\"Hilla Warld\",\"ia\",\"eo\");\n?>",
        "strtr(string,from,to)",
        "strtr(string,array)",
        "<?php\n$arr = array(\"Hello\" => \"Hi\", \"world\" => \"earth\");\necho strtr(\"Hello world\",$arr);\n?>"
      ]
    },
    {
      "title": "PHP substr() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nReturn \"world\" from the string:\nDefinition and Usage\nThe substr() function returns a part of a string.\nSyntax\nParameter Values\nA positive number - Start at a specified position in the string\nA negative number - Start at a specified position from the end of the string\n0 - Start at the first character in string\nA positive number - The length to be returned from the start parameter\nNegative number - The length to be returned from the end of the string\nIf the length parameter is 0, NULL, or FALSE - it return an empty string\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nUsing the start parameter with different positive and negative numbers:\nExample\nUsing the start and length parameters with different positive and negative numbers:",
      "examples": [
        "<?php\necho substr(\"Hello world\",6);\n?>",
        "substr(string,start,length)",
        "<?php\necho substr(\"Hello world\",10).\"<br>\";\necho substr(\"Hello world\",1).\"<br>\";\necho substr(\"Hello world\",3).\"<br>\";\necho substr(\"Hello world\",7).\"<br>\";\n\necho substr(\"Hello world\",-1).\"<br>\";\necho substr(\"Hello world\",-10).\"<br>\";\necho substr(\"Hello world\",-8).\"<br>\";\necho substr(\"Hello world\",-4).\"<br>\";\n?>",
        "<?php\necho substr(\"Hello world\",0,10).\"<br>\";\necho substr(\"Hello world\",1,8).\"<br>\";\necho substr(\"Hello world\",0,5).\"<br>\";\necho substr(\"Hello world\",6,6).\"<br>\";\n\necho substr(\"Hello world\",0,-1).\"<br>\";\necho substr(\"Hello world\",-10,-2).\"<br>\";\necho substr(\"Hello world\",0,-6).\"<br>\";\n?>"
      ]
    },
    {
      "title": "PHP substr_compare() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nCompare two strings:\nDefinition and Usage\nThe substr_compare() function compares two strings from a specified start position.\nTip: This function is binary-safe and optionally case-sensitive.\nSyntax\nParameter Values\nFALSE - Default. Case-sensitive\nTRUE - Case-insensitive\nREMOVE ADS\nTechnical Details\n0 - if the two strings are equal\n<0 - if string1 (from startpos) is less than string2\n>0 - if string1 (from startpos) is greater than string2\nMore Examples\nExample\nCompare two strings, when start position in string1 for the comparison is 6th:\nExample\nUsing all parameters:\nExample\nDifferent return values:",
      "examples": [
        "<?php\necho substr_compare(\"Hello world\",\"Hello world\",0);\n?>",
        "substr_compare(string1,string2,startpos,length,case)",
        "<?php\necho substr_compare(\"Hello world\",\"world\",6);\n?>",
        "<?php\necho substr_compare(\"world\",\"or\",1,2);\necho substr_compare(\"world\",\"ld\",-2,2);\necho substr_compare(\"world\",\"orl\",1,2);\necho substr_compare(\"world\",\"OR\",1,2,TRUE);\necho substr_compare(\"world\",\"or\",1,3);\necho substr_compare(\"world\",\"rl\",1,2);\n?>",
        "<?php\necho substr_compare(\"Hello world!\",\"Hello world!\",0); // the two strings are equal\necho substr_compare(\"Hello world!\",\"Hello\",0); // string1 is greater than string2\necho substr_compare(\"Hello world!\",\"Hello world! Hello!\",0); // str1 is less than str2\n?>"
      ]
    },
    {
      "title": "PHP substr_count() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nCount the number of times \"world\" occurs in the string:\nThe substr_count() function counts the number of times a substring occurs in a string.\nNote: The substring is case-sensitive.\nNote: This function does not count overlapped substrings (see example 2).\nNote: This function generates a warning if the start parameter plus the length parameter is greater than the string length (see example 3).\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nUsing all parameters:\nExample\nOverlapped substrings:\nExample\nIf the start and length parameters exceeds the string length, this function will output a warning:\nThis will output a warning because the length value exceeds the string length (3+9 is greater than 12)",
      "examples": [
        "<?php\necho substr_count(\"Hello world. The world is nice\",\"world\");\n?>",
        "substr_count(string,substring,start,length)",
        "<?php\n$str = \"This is nice\";\necho strlen($str).\"<br>\"; // Using strlen() to return the string length\necho substr_count($str,\"is\").\"<br>\"; // The number of times \"is\" occurs in the string\necho substr_count($str,\"is\",2).\"<br>\"; // The string is now reduced to \"is is nice\"\necho substr_count($str,\"is\",3).\"<br>\"; // The string is now reduced to \"s is nice\"\necho substr_count($str,\"is\",3,3).\"<br>\"; // The string is now reduced to \"s i\"\n?>",
        "<?php\n$str = \"abcabcab\";\necho substr_count($str,\"abcab\"); // This function does not count overlapped substrings\n?>",
        "<?php\necho $str = \"This is nice\";\nsubstr_count($str,\"is\",3,9);\n?>"
      ]
    },
    {
      "title": "PHP substr_replace() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nReplace \"Hello\" with \"world\":\nDefinition and Usage\nThe substr_replace() function replaces a part of a string with another string.\nNote: If the start parameter is a negative number and length is less than or equal to start, length becomes 0.\nNote: This function is binary-safe.\nSyntax\nParameter Values\nA positive number - Start replacing at the specified position in the string\nNegative number - Start replacing at the specified position from the end of the string\n0 - Start replacing at the first character in the string\nA positive number - The length of string to be replaced\nA negative number - How many characters should be left at end of string after replacing\n0 - Insert instead of replace\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nStart replacing at the 6th position in the string (replace \"world\" with \"earth\"):\nExample\nStart replacing at the 5th position from the end of the string (replace \"world\" with \"earth\"):\nExample\nInsert \"Hello\" at the beginning of \"world\":\nExample\nReplace multiple strings at once. Replace \"AAA\" in each string with \"BBB\":",
      "examples": [
        "<?php\necho substr_replace(\"Hello\",\"world\",0);\n?>",
        "substr_replace(string,replacement,start,length)",
        "<?php\necho substr_replace(\"Hello world\",\"earth\",6);\n?>",
        "<?php\necho substr_replace(\"Hello world\",\"earth\",-5);\n?>",
        "<?php\necho substr_replace(\"world\",\"Hello \",0,0);\n?>",
        "<?php\n$replace = array(\"1: AAA\",\"2: AAA\",\"3: AAA\");\necho implode(\"<br>\",substr_replace($replace,'BBB',3,3));\n?>"
      ]
    },
    {
      "title": "PHP trim() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nRemove characters from both sides of a string (\"He\" in \"Hello\" and \"d!\" in \"World\"):\nDefinition and Usage\nThe trim() function removes whitespace and other predefined characters from both sides of a string.\nRelated functions:\nltrim() - Removes whitespace or other predefined characters from the left side of a string\nrtrim() - Removes whitespace or other predefined characters from the right side of a string\nSyntax\nParameter Values\n\"\\0\" - NULL\n\"\\t\" - tab\n\"\\n\" - new line\n\"\\x0B\" - vertical tab\n\"\\r\" - carriage return\n\" \" - ordinary white space\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nRemove whitespaces from both sides of a string:\nThe HTML output of the code above will be (View Source):\nThe browser output of the code above will be:\nExample\nRemove newlines (\\n) from both sides of the string:\nThe HTML output of the code above will be (View Source):\nThe browser output of the code above will be:",
      "examples": [
        "<?php\n$str = \"Hello World!\";\necho $str . \"<br>\";\necho trim($str,\"Hed!\");\n?>",
        "trim(string,charlist)",
        "<?php\n$str = \" Hello World! \";\necho \"Without trim: \" . $str;\necho \"<br>\";\necho \"With trim: \" . trim($str);\n?>",
        "<!DOCTYPE html>\n<html>\n<body>\n\nWithout trim:Â  Hello World! <br>With trim: Hello World!\n</body>\n</html>",
        "Without trim: Hello World!\nWith trim: Hello World!",
        "<?php\n$str = \"\\n\\n\\nHello World!\\n\\n\\n\";\necho \"Without trim: \" . $str;\necho \"<br>\";\necho \"With trim: \" . trim($str);\n?>",
        "<!DOCTYPE html>\n<html>\n<body>\n\nWithout trim:\n\n\nHello World!\n\n\n<br>With trim: Hello World!\n</body>\n</html>"
      ]
    },
    {
      "title": "PHP ucfirst() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nConvert the first character of \"hello\" to uppercase:\nDefinition and Usage\nThe ucfirst() function converts the first character of a string to uppercase.\nRelated functions:\nlcfirst() - converts the first character of a string to lowercase\nucwords() - converts the first character of each word in a string to uppercase\nstrtoupper() - converts a string to uppercase\nstrtolower() - converts a string to lowercase\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho ucfirst(\"hello world!\");\n?>",
        "ucfirst(string)"
      ]
    },
    {
      "title": "PHP ucwords() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nConvert the first character of each word to uppercase:\nDefinition and Usage\nThe ucwords() function converts the first character of each word in a string to uppercase.\nNote: This function is binary-safe.\nRelated functions:\nucfirst() - converts the first character of a string to uppercase\nlcfirst() - converts the first character of a string to lowercase\nstrtoupper() - converts a string to uppercase\nstrtolower() - converts a string to lowercase\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert the first character of each word to uppercase, with a custom word separator added:",
      "examples": [
        "<?php\necho ucwords(\"hello world\");\n?>",
        "ucwords(string, delimiters)",
        "<?php\necho ucwords(\"hello|world\", \"|\");\n?>"
      ]
    },
    {
      "title": "PHP vfprintf() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nWrite some text to a text file named \"test.txt\":\nThe output of the code above will be:\nThe following text will be written to the file \"test.txt\":\nDefinition and Usage\nThe vfprintf() function writes a formatted string to a specified output stream (example: file or database).\nUnlike fprintf(), the arguments in vfprintf(), are placed in an array. The array elements will be inserted at the percent (%) signs in the main string. This function works \"step-by-step\". At the first % sign, the first array element is inserted, at the second % sign, the second array element is inserted, etc.\nNote: If there are more % signs than arguments, you must use placeholders. A placeholder is inserted after the % sign, and consists of the argument- number and \"\\$\". See example two.\nTip: Related functions: fprintf(), printf(), sprintf(), vprintf() and vsprintf().\nSyntax\nParameter Values\nPossible format values:\n%% - Returns a percent sign\n%b - Binary number\n%c - The character according to the ASCII value\n%d - Signed decimal number (negative, zero or positive)\n%e - Scientific notation using a lowercase (e.g. 1.2e+2)\n%E - Scientific notation using a uppercase (e.g. 1.2E+2)\n%u - Unsigned decimal number (equal to or greather than zero)\n%f - Floating-point number (local settings aware)\n%F - Floating-point number (not local settings aware)\n%g - shorter of %e and %f\n%G - shorter of %E and %f\n%o - Octal number\n%s - String\n%x - Hexadecimal number (lowercase letters)\n%X - Hexadecimal number (uppercase letters)\nAdditional format values. These are placed between the % and the letter (example %.2f):\n+ (Forces both + and - in front of numbers. By default, only negative numbers are marked)\n' (Specifies what to use as padding. Default is space. Must be used together with the width specifier. Example: %'x20s (this uses \"x\" as padding)\n- (Left-justifies the variable value)\n[0-9] (Specifies the minimum width held of to the variable value)\n.[0-9] (Specifies the number of decimal digits or maximum string length)\nNote: If multiple additional format values are used, they must be in the same order as above.\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nWrite some text to a file:\nThe following text will be written to the file \"test.txt\":\nExample\nUse of placeholders:\nThe following text will be written to the file \"test.txt\":\nExample\nUsing printf() to demonstrate all possible format values:",
      "examples": [
        "<?php\n$number = 9;\n$str = \"Beijing\";\n$file = fopen(\"test.txt\",\"w\");\necho vfprintf($file,\"There are %u million bicycles in %s.\",array($number,$str));\n?>",
        "40",
        "There are 9 million bicycles in Beijing.",
        "vfprintf(stream,format,argarray)",
        "<?php\n$num1 = 123;\n$num2 = 456;\n$file = fopen(\"test.txt\",\"w\");\nvfprintf($file,\"%f%f\",array($num1,$num2));\n?>",
        "123.000000456.000000",
        "<?php\n$number = 123;\n$file = fopen(\"test.txt\",\"w\");\nvfprintf($file,\"With 2 decimals: %1\\$.2f\n\\nWith no decimals: %1\\$u\",array($number));\n?>",
        "With 2 decimals: 123.00\nWith no decimals: 123",
        "<?php\n$num1 = 123456789;\n$num2 = -123456789;\n$char = 50; // The ASCII Character 50 is 2\n\n// Note: The format value \"%%\" returns a percent sign\nprintf(\"%%b = %b <br>\",$num1); // Binary number\nprintf(\"%%c = %c <br>\",$char); // The ASCII Character\nprintf(\"%%d = %d <br>\",$num1); // Signed decimal number\nprintf(\"%%d = %d <br>\",$num2); // Signed decimal number\nprintf(\"%%e = %e <br>\",$num1); // Scientific notation (lowercase)\nprintf(\"%%E = %E <br>\",$num1); // Scientific notation (uppercase)\nprintf(\"%%u = %u <br>\",$num1); // Unsigned decimal number (positive)\nprintf(\"%%u = %u <br>\",$num2); // Unsigned decimal number (negative)\nprintf(\"%%f = %f <br>\",$num1); // Floating-point number (local settings aware)\nprintf(\"%%F = %F <br>\",$num1); // Floating-point number (not local settings aware)\nprintf(\"%%g = %g <br>\",$num1); // Shorter of %e and %f\nprintf(\"%%G = %G <br>\",$num1); // Shorter of %E and %f\nprintf(\"%%o = %o <br>\",$num1); // Octal number\nprintf(\"%%s = %s <br>\",$num1); // String\nprintf(\"%%x = %x <br>\",$num1); // Hexadecimal number (lowercase)\nprintf(\"%%X = %X <br>\",$num1); // Hexadecimal number (uppercase)\nprintf(\"%%+d = %+d <br>\",$num1); // Sign specifier (positive)\nprintf(\"%%+d = %+d <br>\",$num2); // Sign specifier (negative)\n?>"
      ]
    },
    {
      "title": "PHP vprintf() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nOutput a formatted string:\nDefinition and Usage\nThe vprintf() function outputs a formatted string.\nUnlike printf(), the arguments in vprintf(), are placed in an array. The array elements will be inserted at the percent (%) signs in the main string. This function works \"step-by-step\". At the first % sign, the first array element is inserted, at the second % sign, the second array element is inserted, etc.\nNote: If there are more % signs than arguments, you must use placeholders. A placeholder is inserted after the % sign, and consists of the argument- number and \"\\$\". See example two.\nTip: Related functions: sprintf(), printf(), vsprintf(), fprintf() and vfprintf()\nSyntax\nParameter Values\nPossible format values:\n%% - Returns a percent sign\n%b - Binary number\n%c - The character according to the ASCII value\n%d - Signed decimal number (negative, zero or positive)\n%e - Scientific notation using a lowercase (e.g. 1.2e+2)\n%E - Scientific notation using a uppercase (e.g. 1.2E+2)\n%u - Unsigned decimal number (equal to or greather than zero)\n%f - Floating-point number (local settings aware)\n%F - Floating-point number (not local settings aware)\n%g - shorter of %e and %f\n%G - shorter of %E and %f\n%o - Octal number\n%s - String\n%x - Hexadecimal number (lowercase letters)\n%X - Hexadecimal number (uppercase letters)\nAdditional format values. These are placed between the % and the letter (example %.2f):\n+ (Forces both + and - in front of numbers. By default, only negative numbers are marked)\n' (Specifies what to use as padding. Default is space. Must be used together with the width specifier. Example: %'x20s (this uses \"x\" as padding)\n- (Left-justifies the variable value)\n[0-9] (Specifies the minimum width held of to the variable value)\n.[0-9] (Specifies the number of decimal digits or maximum string length)\nNote: If multiple additional format values are used, they must be in the same order as above.\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nUsing the format value %f:\nExample\nUse of placeholders:\nExample\nUsing printf() to demonstrate all possible format values:\nExample\nA demonstration of string specifiers:",
      "examples": [
        "<?php\n$number = 9;\n$str = \"Beijing\";\nvprintf(\"There are %u million bicycles in %s.\",array($number,$str));\n?>",
        "vprintf(format,argarray)",
        "<?php\n$num1 = 123;\n$num2 = 456;\nvprintf(\"%f%f\",array($num1,$num2));\n?>",
        "<?php\n$number = 123;\nvprintf(\"With 2 decimals: %1\\$.2f\n<br>With no decimals: %1\\$u\",array($number));\n?>",
        "<?php\n$num1 = 123456789;\n$num2 = -123456789;\n$char = 50; // The ASCII Character 50 is 2\n\n// Note: The format value \"%%\" returns a percent sign\nprintf(\"%%b = %b <br>\",$num1); // Binary number\nprintf(\"%%c = %c <br>\",$char); // The ASCII Character\nprintf(\"%%d = %d <br>\",$num1); // Signed decimal number\nprintf(\"%%d = %d <br>\",$num2); // Signed decimal number\nprintf(\"%%e = %e <br>\",$num1); // Scientific notation (lowercase)\nprintf(\"%%E = %E <br>\",$num1); // Scientific notation (uppercase)\nprintf(\"%%u = %u <br>\",$num1); // Unsigned decimal number (positive)\nprintf(\"%%u = %u <br>\",$num2); // Unsigned decimal number (negative)\nprintf(\"%%f = %f <br>\",$num1); // Floating-point number (local settings aware)\nprintf(\"%%F = %F <br>\",$num1); // Floating-point number (not local settings aware)\nprintf(\"%%g = %g <br>\",$num1); // Shorter of %e and %f\nprintf(\"%%G = %G <br>\",$num1); // Shorter of %E and %f\nprintf(\"%%o = %o <br>\",$num1); // Octal number\nprintf(\"%%s = %s <br>\",$num1); // String\nprintf(\"%%x = %x <br>\",$num1); // Hexadecimal number (lowercase)\nprintf(\"%%X = %X <br>\",$num1); // Hexadecimal number (uppercase)\nprintf(\"%%+d = %+d <br>\",$num1); // Sign specifier (positive)\nprintf(\"%%+d = %+d <br>\",$num2); // Sign specifier (negative)\n?>",
        "<?php\n$str1 = \"Hello\";\n$str2 = \"Hello world!\";\n\nvprintf(\"[%s]<br>\",array($str1));\nvprintf(\"[%8s]<br>\",array($str1));\nvprintf(\"[%-8s]<br>\",array($str1));\nvprintf(\"[%08s]<br>\",array($str1));\nvprintf(\"[%'*8s]<br>\",array($str1));\nvprintf(\"[%8.8s]<br>\",array($str2));\n?>"
      ]
    },
    {
      "title": "PHP vsprintf() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nWrite a formatted string to a variable:\nDefinition and Usage\nThe vsprintf() function writes a formatted string to a variable.\nUnlike sprintf(), the arguments in vsprintf(), are placed in an array. The array elements will be inserted at the percent (%) signs in the main string. This function works \"step-by-step\". At the first % sign, the first array element is inserted, at the second % sign, the second array element is inserted, etc.\nNote: If there are more % signs than arguments, you must use placeholders. A placeholder is inserted after the % sign, and consists of the argument- number and \"\\$\". See example two.\nTip: Related functions: fprintf(), vfprintf(), printf(), sprintf() and vprintf().\nSyntax\nParameter Values\nPossible format values:\n%% - Returns a percent sign\n%b - Binary number\n%c - The character according to the ASCII value\n%d - Signed decimal number (negative, zero or positive)\n%e - Scientific notation using a lowercase (e.g. 1.2e+2)\n%E - Scientific notation using a uppercase (e.g. 1.2E+2)\n%u - Unsigned decimal number (equal to or greather than zero)\n%f - Floating-point number (local settings aware)\n%F - Floating-point number (not local settings aware)\n%g - shorter of %e and %f\n%G - shorter of %E and %f\n%o - Octal number\n%s - String\n%x - Hexadecimal number (lowercase letters)\n%X - Hexadecimal number (uppercase letters)\nAdditional format values. These are placed between the % and the letter (example %.2f):\n+ (Forces both + and - in front of numbers. By default, only negative numbers are marked)\n' (Specifies what to use as padding. Default is space. Must be used together with the width specifier. Example: %'x20s (this uses \"x\" as padding)\n- (Left-justifies the variable value)\n[0-9] (Specifies the minimum width held of to the variable value)\n.[0-9] (Specifies the number of decimal digits or maximum string length)\nNote: If multiple additional format values are used, they must be in the same order as above.\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nUsing the format value %f:\nExample\nUse of placeholders:\nExample\nUsing sprintf() to demonstrate all possible format values:\nExample\nA demonstration of string specifiers:",
      "examples": [
        "<?php\n$number = 9;\n$str = \"Beijing\";\n$txt = vsprintf(\"There are %u million bicycles in %s.\",array($number,$str));\necho $txt;\n?>",
        "vsprintf(format,argarray)",
        "<?php\n$num1 = 123;\n$num2 = 456;\n$txt = vsprintf(\"%f%f\",array($num1,$num2));\necho $txt;\n?>",
        "<?php\n$number = 123;\n$txt = vsprintf(\"With 2 decimals: %1\\$.2f\n<br>With no decimals: %1\\$u\",array($number));\necho $txt;\n?>",
        "<?php\n$num1 = 123456789;\n$num2 = -123456789;\n$char = 50; // The ASCII Character 50 is 2\n\n// Note: The format value \"%%\" returns a percent sign\necho sprintf(\"%%b = %b\",$num1).\"<br>\"; // Binary number\necho sprintf(\"%%c = %c\",$char).\"<br>\"; // The ASCII Character\necho sprintf(\"%%d = %d\",$num1).\"<br>\"; // Signed decimal number\necho sprintf(\"%%d = %d\",$num2).\"<br>\"; // Signed decimal number\necho sprintf(\"%%e = %e\",$num1).\"<br>\"; // Scientific notation (lowercase)\necho sprintf(\"%%E = %E\",$num1).\"<br>\"; // Scientific notation (uppercase)\necho sprintf(\"%%u = %u\",$num1).\"<br>\"; // Unsigned decimal number (positive)\necho sprintf(\"%%u = %u\",$num2).\"<br>\"; // Unsigned decimal number (negative)\necho sprintf(\"%%f = %f\",$num1).\"<br>\"; // Floating-point number (local settings aware)\necho sprintf(\"%%F = %F\",$num1).\"<br>\"; // Floating-point number (not local sett aware)\necho sprintf(\"%%g = %g\",$num1).\"<br>\"; // Shorter of %e and %f\necho sprintf(\"%%G = %G\",$num1).\"<br>\"; // Shorter of %E and %f\necho sprintf(\"%%o = %o\",$num1).\"<br>\"; // Octal number\necho sprintf(\"%%s = %s\",$num1).\"<br>\"; // String\necho sprintf(\"%%x = %x\",$num1).\"<br>\"; // Hexadecimal number (lowercase)\necho sprintf(\"%%X = %X\",$num1).\"<br>\"; // Hexadecimal number (uppercase)\necho sprintf(\"%%+d = %+d\",$num1).\"<br>\"; // Sign specifier (positive)\necho sprintf(\"%%+d = %+d\",$num2).\"<br>\"; // Sign specifier (negative)\n?>",
        "<?php\n$str1 = \"Hello\";\n$str2 = \"Hello world!\";\n\necho vsprintf(\"[%s]\",array($str1)).\"<br>\";\necho vsprintf(\"[%8s]\",array($str1)).\"<br>\";\necho vsprintf(\"[%-8s]\",array($str1)).\"<br>\";\necho vsprintf(\"[%08s]\",array($str1)).\"<br>\";\necho vsprintf(\"[%'*8s]\",array($str1)).\"<br>\";\necho vsprintf(\"[%8.8s]\",array($str2)).\"<br>\";\n?>"
      ]
    },
    {
      "title": "PHP wordwrap() Function",
      "summary": "â® PHP String Reference\nExampleGet your own PHP Server\nWrap a string into new lines when it reaches a specific length:\nDefinition and Usage\nThe wordwrap() function wraps a string into new lines when it reaches a specific length.\nNote: This function may leave white spaces at the beginning of a line.\nSyntax\nParameter Values\nFALSE - Default. No-wrap\nTRUE - Wrap\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nUsing all parameters:\nExample\nWrap a string into new lines:\nThe HTML output of the code above will be (View Source):\nThe browser output of the code above will be:",
      "examples": [
        "<?php\n$str = \"An example of a long word is: Supercalifragulistic\";\necho wordwrap($str,15,\"<br>\\n\");\n?>",
        "wordwrap(string,width,break,cut)",
        "<?php\n$str = \"An example of a long word is: Supercalifragulistic\";\necho wordwrap($str,15,\"<br>\\n\",TRUE);\n?>",
        "<?php\n$str = \"An example of a long word is: Supercalifragulistic\";\necho wordwrap($str,15);\n?>",
        "<!DOCTYPE html>\n<html>\n<body>\nAn example of a\nlong word is:\nSupercalifragulistic\n</body>\n</html>",
        "An example of a long word is: Supercalifragulistic"
      ]
    },
    {
      "title": "PHP Variable Handling Functions",
      "summary": "PHP Variable Handling Functions\nThe PHP variable handling functions are part of the PHP core. No installation is required to use these functions.",
      "examples": []
    },
    {
      "title": "PHP boolval() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nReturn the boolean value of different variables:\nDefinition and Usage\nThe boolval() function returns the boolean value of a variable.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\necho \"0: \" .(boolval(0) ? 'true' : 'false') . \"<br>\";\necho \"4: \" .(boolval(42) ? 'true' : 'false') . \"<br>\";\necho '\"\": ' .(boolval(\"\") ? 'true' : 'false') . \"<br>\";\necho '\"Hello\": ' .(boolval(\"Hello\") ? 'true' : 'false') . \"<br>\";\necho '\"0\": ' .(boolval(\"0\") ? 'true' : 'false') . \"<br>\";\necho \"[3, 5]: \" .(boolval([3, 5]) ? 'true' : 'false') . \"<br>\";\necho \"[]: \" .(boolval([]) ? 'true' : 'false') . \"<br>\";\n?>",
        "boolval(variable);"
      ]
    },
    {
      "title": "PHP debug_zval_dump() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nDump a string representation of an internal zend value to output:\nDefinition and Usage\nThe debug_zval_dump() function dumps a string representation of an internal zend value to output.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a = \"Hello world!\";\necho debug_zval_dump($a) . \"<br>\";\n?>",
        "debug_zval_dump(variable);"
      ]
    },
    {
      "title": "PHP doubleval() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nReturn the float value of different variables:\nDefinition and Usage\nThe doubleval() function returns the float value of a variable.\nThis function is an alias of floatval().\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a = \"1234.56789\";\necho doubleval($a) . \"<br>\";\n\n$b = \"1234.56789Hello\";\necho doubleval($b) . \"<br>\";\n\n$c = \"Hello1234.56789\";\necho doubleval($c) . \"<br>\";\n?>",
        "doubleval(variable);"
      ]
    },
    {
      "title": "PHP is_countable() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nCheck whether the contents of a variable is a countable value or not:\nDefinition and Usage\nThe is_countable() function checks whether the contents of a variable is a countable value or not.\nThis function returns true (1) if the variable is countable, otherwise it returns false/nothing.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a = \"Hello\";\necho \"a is \" . is_countable($a) . \"<br>\";\n\n$b = array(\"red\", \"green\", \"blue\");\necho \"b is \" . is_countable($b) . \"<br>\";\n\n$c = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\");\necho \"c is \" . is_countable($c) . \"<br>\";\n\n$d = [1, 2, 3];\necho \"d is \" . is_countable($d) . \"<br>\";\n?>",
        "is_countable(variable);"
      ]
    },
    {
      "title": "PHP empty() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nCheck whether a variable is empty. Also check whether the variable is set/declared:\nDefinition and Usage\nThe empty() function checks whether a variable is empty or not.\nThis function returns false if the variable exists and is not empty, otherwise it returns true.\nThe following values evaluates to empty:\n0\n0.0\n\"0\"\n\"\"\nNULL\nFALSE\narray()\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a = 0;\n\n// True because $a is empty\nif (empty($a)) {\necho \"Variable 'a' is empty.<br>\";\n}\n\n// True because $a is set\nif (isset($a)) {\necho \"Variable 'a' is set\";\n}\n?>",
        "empty(variable);"
      ]
    },
    {
      "title": "PHP floatval() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nReturn the float value of different variables:\nDefinition and Usage\nThe floatval() function returns the float value of a variable.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a = \"1234.56789\";\necho floatval($a) . \"<br>\";\n\n$b = \"1234.56789Hello\";\necho floatval($b) . \"<br>\";\n\n$c = \"Hello1234.56789\";\necho floatval($c) . \"<br>\";\n?>",
        "floatval(variable);"
      ]
    },
    {
      "title": "PHP get_defined_vars() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nReturn all defined variables, as an array:\nDefinition and Usage\nThe get_defined_vars() function returns all defined variables, as an array.\nSyntax\nParameter Values\nNone.\nTechnical Details",
      "examples": [
        "<?php\n$a = array(\"red\", \"green\", \"blue\");\n\n$arr = get_defined_vars();\n\nprint_r($arr[\"a\"]);\n?>",
        "get_defined_vars();"
      ]
    },
    {
      "title": "PHP get_resource_type() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nReturn the resource type:\nDefinition and Usage\nThe get_resource_type() function returns the type of a resource.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$file = fopen(\"test.txt\",\"r\");\necho get_resource_type($file);\n?>",
        "get_resource_type(resource);"
      ]
    },
    {
      "title": "PHP gettype() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nReturn the type of different variables:\nDefinition and Usage\nThe gettype() function returns the type of a variable.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a = 3;\necho gettype($a) . \"<br>\";\n\n$b = 3.2;\necho gettype($b) . \"<br>\";\n\n$c = \"Hello\";\necho gettype($c) . \"<br>\";\n\n$d = array();\necho gettype($d) . \"<br>\";\n\n$e = array(\"red\", \"green\", \"blue\");\necho gettype($e) . \"<br>\";\n\n$f = NULL;\necho gettype($f) . \"<br>\";\n\n$g = false;\necho gettype($g) . \"<br>\";\n?>",
        "gettype(variable);"
      ]
    },
    {
      "title": "PHP intval() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nReturn the integer value of different variables:\nDefinition and Usage\nThe intval() function returns the integer value of a variable.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a = 32;\necho intval($a) . \"<br>\";\n\n$b = 3.2;\necho intval($b) . \"<br>\";\n\n$c = \"32.5\";\necho intval($c) . \"<br>\";\n\n$d = array();\necho intval($d) . \"<br>\";\n\n$e = array(\"red\", \"green\", \"blue\");\necho intval($e) . \"<br>\";\n?>",
        "intval(variable, base);"
      ]
    },
    {
      "title": "PHP is_array() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nCheck whether a variable is an array or not:\nDefinition and Usage\nThe is_array() function checks whether a variable is an array or not.\nThis function returns true (1) if the variable is an array, otherwise it returns false/nothing.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a = \"Hello\";\necho \"a is \" . is_array($a) . \"<br>\";\n\n$b = array(\"red\", \"green\", \"blue\");\necho \"b is \" . is_array($b) . \"<br>\";\n\n$c = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\");\necho \"c is \" . is_array($c) . \"<br>\";\n\n$d = \"red, green, blue\";\necho \"d is \" . is_array($d) . \"<br>\";\n?>",
        "is_array(variable);"
      ]
    },
    {
      "title": "PHP is_bool() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nCheck whether a variable is a boolean or not:\nDefinition and Usage\nThe is_bool() function checks whether a variable is a boolean or not.\nThis function returns true (1) if the variable is a boolean, otherwise it returns false/nothing.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a = 1;\necho \"a is \" . is_bool($a) . \"<br>\";\n\n$b = 0;\necho \"b is \" . is_bool($b) . \"<br>\";\n\n$c = true;\necho \"c is \" . is_bool($c) . \"<br>\";\n\n$d = false;\necho \"d is \" . is_bool($d) . \"<br>\";\n?>",
        "is_bool(variable);"
      ]
    },
    {
      "title": "PHP is_callable() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nCheck whether the contents of a variable can be called as a function or not:\nDefinition and Usage\nThe is_callable() function checks whether the contents of a variable can be called as a function or not.\nThis function returns true (1) if the variable is callable, otherwise it returns false/nothing.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\nfunction test1(){\n}\n\necho \"test1 is callable: \" . is_callable(\"test1\");\necho \"<br>\";\necho \"test2 is callable: \" . is_callable(\"test2\");\n?>",
        "is_callable(variable, syntax_only, name );"
      ]
    },
    {
      "title": "PHP is_double() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nCheck whether a variable is of type float or not:\nDefinition and Usage\nThe is_double() function checks whether a variable is of type float or not.\nThis function is an alias of is_float().\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a = 32;\necho \"a is \" . is_double($a) . \"<br>\";\n\n$b = 0;\necho \"b is \" . is_double($b) . \"<br>\";\n\n$c = 32.5;\necho \"c is \" . is_double($c) . \"<br>\";\n\n$d = \"32\";\necho \"d is \" . is_double($d) . \"<br>\";\n\n$e = true;\necho \"e is \" . is_double($e) . \"<br>\";\n\n$f = \"null\";\necho \"f is \" . is_double($f) . \"<br>\";\n\n$g = 1.e3;\necho \"g is \" . is_double($g) . \"<br>\";\n?>",
        "is_double(variable);"
      ]
    },
    {
      "title": "PHP is_float() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nCheck whether a variable is of type float or not:\nDefinition and Usage\nThe is_float() function checks whether a variable is of type float or not.\nThis function returns true (1) if the variable is of type float, otherwise it returns false.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a = 32;\necho \"a is \" . is_float($a) . \"<br>\";\n\n$b = 0;\necho \"b is \" . is_float($b) . \"<br>\";\n\n$c = 32.5;\necho \"c is \" . is_float($c) . \"<br>\";\n\n$d = \"32\";\necho \"d is \" . is_float($d) . \"<br>\";\n\n$e = true;\necho \"e is \" . is_float($e) . \"<br>\";\n\n$f = \"null\";\necho \"f is \" . is_float($f) . \"<br>\";\n\n$g = 1.e3;\necho \"g is \" . is_float($g) . \"<br>\";\n?>",
        "is_float(variable);"
      ]
    },
    {
      "title": "PHP is_int() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nCheck whether a variable is of type integer or not:\nDefinition and Usage\nThe is_int() function checks whether a variable is of type integer or not.\nThis function returns true (1) if the variable is of type integer, otherwise it returns false.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a = 32;\necho \"a is \" . is_int($a) . \"<br>\";\n\n$b = 0;\necho \"b is \" . is_int($b) . \"<br>\";\n\n$c = 32.5;\necho \"c is \" . is_int($c) . \"<br>\";\n\n$d = \"32\";\necho \"d is \" . is_int($d) . \"<br>\";\n\n$e = true;\necho \"e is \" . is_int($e) . \"<br>\";\n\n$f = \"null\";\necho \"f is \" . is_int($f) . \"<br>\";\n?>",
        "is_int(variable);"
      ]
    },
    {
      "title": "PHP is_integer() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nCheck whether a variable is of type integer or not:\nDefinition and Usage\nThe is_integer() function checks whether a variable is of type integer or not.\nThis function is an alias of is_int().\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a = 32;\necho \"a is \" . is_integer($a) . \"<br>\";\n\n$b = 0;\necho \"b is \" . is_integer($b) . \"<br>\";\n\n$c = 32.5;\necho \"c is \" . is_integer($c) . \"<br>\";\n\n$d = \"32\";\necho \"d is \" . is_integer($d) . \"<br>\";\n\n$e = true;\necho \"e is \" . is_integer($e) . \"<br>\";\n\n$f = \"null\";\necho \"f is \" . is_integer($f) . \"<br>\";\n?>",
        "is_integer(variable);"
      ]
    },
    {
      "title": "PHP is_iterable() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nCheck whether the contents of a variable is an iterable value or not:\nDefinition and Usage\nThe is_iterable() function checks whether the contents of a variable is an iterable value or not.\nThis function returns true (1) if the variable is iterable, otherwise it returns false/nothing.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a = \"Hello\";\necho \"a is \" . is_iterable($a) . \"<br>\";\n\n$b = array(\"red\", \"green\", \"blue\");\necho \"b is \" . is_iterable($b) . \"<br>\";\n\n$c = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\");\necho \"c is \" . is_iterable($c) . \"<br>\";\n\n$d = [1, 2, 3];\necho \"d is \" . is_iterable($d) . \"<br>\";\n?>",
        "is_iterable(variable);"
      ]
    },
    {
      "title": "PHP is_long() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nCheck whether a variable is of type integer or not:\nDefinition and Usage\nThe is_long() function checks whether a variable is of type integer or not.\nThis function is an alias of is_int().\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a = 32;\necho \"a is \" . is_long($a) . \"<br>\";\n\n$b = 0;\necho \"b is \" . is_long($b) . \"<br>\";\n\n$c = 32.5;\necho \"c is \" . is_long($c) . \"<br>\";\n\n$d = \"32\";\necho \"d is \" . is_long($d) . \"<br>\";\n\n$e = true;\necho \"e is \" . is_long($e) . \"<br>\";\n\n$f = \"null\";\necho \"f is \" . is_long($f) . \"<br>\";\n?>",
        "is_long(variable);"
      ]
    },
    {
      "title": "PHP is_null() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nCheck whether a variable is NULL or not:\nDefinition and Usage\nThe is_null() function checks whether a variable is NULL or not.\nThis function returns true (1) if the variable is NULL, otherwise it returns false/nothing.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a = 0;\necho \"a is \" . is_null($a) . \"<br>\";\n\n$b = null;\necho \"b is \" . is_null($b) . \"<br>\";\n\n$c = \"null\";\necho \"c is \" . is_null($c) . \"<br>\";\n\n$d = NULL;\necho \"d is \" . is_null($d) . \"<br>\";\n?>",
        "is_null(variable);"
      ]
    },
    {
      "title": "PHP is_numeric() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nCheck whether a variable is a number or a numeric string, or not:\nDefinition and Usage\nThe is_numeric() function checks whether a variable is a number or a numeric string.\nThis function returns true (1) if the variable is a number or a numeric string, otherwise it returns false/nothing.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a = 32;\necho \"a is \" . is_numeric($a) . \"<br>\";\n\n$b = 0;\necho \"b is \" . is_numeric($b) . \"<br>\";\n\n$c = 32.5;\necho \"c is \" . is_numeric($c) . \"<br>\";\n\n$d = \"32\";\necho \"d is \" . is_numeric($d) . \"<br>\";\n\n$e = true;\necho \"e is \" . is_numeric($e) . \"<br>\";\n\n$f = null;\necho \"f is \" . is_numeric($f) . \"<br>\";\n?>",
        "is_numeric(variable);"
      ]
    },
    {
      "title": "PHP is_object() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nCheck whether a variable is an object or not:\nDefinition and Usage\nThe is_object() function checks whether a variable is an object.\nThis function returns true (1) if the variable is an object, otherwise it returns false/nothing.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\nfunction get_cars($obj) {\nif (!is_object($obj)) {\nreturn false;\n}\nreturn $obj->cars;\n}\n\n$obj = new stdClass();\n$obj->cars = array(\"Volvo\", \"BMW\", \"Audi\");\n\nvar_dump(get_cars(null));\necho \"<br>\";\nvar_dump(get_cars($obj));\n?>",
        "is_object(variable);"
      ]
    },
    {
      "title": "PHP is_real() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nCheck whether a variable is of type float or not:\nDefinition and Usage\nThe is_real() function checks whether a variable is of type float or not.\nThis function is an alias of is_float().\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a = 32;\necho \"a is \" . is_real($a) . \"<br>\";\n\n$b = 0;\necho \"b is \" . is_real($b) . \"<br>\";\n\n$c = 32.5;\necho \"c is \" . is_real($c) . \"<br>\";\n\n$d = \"32\";\necho \"d is \" . is_real($d) . \"<br>\";\n\n$e = true;\necho \"e is \" . is_real($e) . \"<br>\";\n\n$f = \"null\";\necho \"f is \" . is_real($f) . \"<br>\";\n\n$g = 1.e3;\necho \"g is \" . is_real($g) . \"<br>\";\n?>",
        "is_real(variable);"
      ]
    },
    {
      "title": "PHP is_resource() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nCheck whether a variable is a resource or not:\nDefinition and Usage\nThe is_resource() function checks whether a variable is a resource or not.\nNote: The is_resource() function will return FALSE if the resource has been closed.\nThis function returns true (1) if the variable is a resource, otherwise it returns false/nothing.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$file = fopen(\"test.txt\",\"r\");\n\nif (is_resource($file)) {\necho \"File is open\";\n} else {\necho \"Error open file\";\n}\n?>",
        "is_resource(variable);"
      ]
    },
    {
      "title": "PHP is_scalar() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nCheck whether a variable is a scalar or not:\nDefinition and Usage\nThe is_scalar() function checks whether a variable is a scalar or not.\nThis function returns true (1) if the variable is a scalar, otherwise it returns false/nothing.\nIntegers, floats, strings, or boolean can be scalar variables. Arrays, objects, and resources are not.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a = \"Hello\";\necho \"a is \" . is_scalar($a) . \"<br>\";\n\n$b = 0;\necho \"b is \" . is_scalar($b) . \"<br>\";\n\n$c = 32;\necho \"c is \" . is_scalar($c) . \"<br>\";\n\n$d = NULL;\necho \"d is \" . is_scalar($d) . \"<br>\";\n\n$e = array(\"red\", \"green\", \"blue\");\necho \"e is \" . is_scalar($e) . \"<br>\";\n?>",
        "is_scalar(variable);"
      ]
    },
    {
      "title": "PHP is_string() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nCheck whether a variable is of type string or not:\nDefinition and Usage\nThe is_string() function checks whether a variable is of type string or not.\nThis function returns true (1) if the variable is of type string, otherwise it returns false/nothing.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a = \"Hello\";\necho \"a is \" . is_string($a) . \"<br>\";\n\n$b = 0;\necho \"b is \" . is_string($b) . \"<br>\";\n\n$c = 32;\necho \"c is \" . is_string($c) . \"<br>\";\n\n$d = \"32\";\necho \"d is \" . is_string($d) . \"<br>\";\n\n$e = true;\necho \"e is \" . is_string($e) . \"<br>\";\n\n$f = \"null\";\necho \"f is \" . is_string($f) . \"<br>\";\n\n$g = \"\";\necho \"g is \" . is_string($g) . \"<br>\";\n?>",
        "is_string(variable);"
      ]
    },
    {
      "title": "PHP isset() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nCheck whether a variable is empty. Also check whether the variable is set/declared:\nDefinition and Usage\nThe isset() function checks whether a variable is set, which means that it has to be declared and is not NULL.\nThis function returns true if the variable exists and is not NULL, otherwise it returns false.\nNote: If multiple variables are supplied, then this function will return true only if all of the variables are set.\nTip: A variable can be unset with the unset() function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a = 0;\n// True because $a is set\nif (isset($a)) {\necho \"Variable 'a' is set.<br>\";\n}\n\n$b = null;\n// False because $b is NULL\nif (isset($b)) {\necho \"Variable 'b' is set.\";\n}\n?>",
        "isset(variable, ....);"
      ]
    },
    {
      "title": "PHP print_r() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nPrint the information about some variables in a more human-readable way:\nDefinition and Usage\nThe print_r() function prints the information about a variable in a more human-readable way.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a = array(\"red\", \"green\", \"blue\");\nprint_r($a);\n\necho \"<br>\";\n\n$b = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\");\nprint_r($b);\n?>",
        "print_r(variable, return);"
      ]
    },
    {
      "title": "PHP serialize() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nConvert a storable representation of a value:\nDefinition and Usage\nThe serialize() function converts a storable representation of a value.\nTo serialize data means to convert a value to a sequence of bits, so that it can be stored in a file, a memory buffer, or transmitted across a network.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$data = serialize(array(\"Red\", \"Green\", \"Blue\"));\necho $data;\n?>",
        "serialize(value);"
      ]
    },
    {
      "title": "PHP settype() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nConvert variables to specific types:\nDefinition and Usage\nThe settype() function converts a variable to a specific type.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a = \"32\"; // string\nsettype($a, \"integer\"); // $a is now integer\n\n$b = 32; // integer\nsettype($b, \"string\"); // $b is now string\n\n$c = true; // boolean\nsettype($c, \"integer\"); // $c is now integer (1)\n?>",
        "settype(variable, type);"
      ]
    },
    {
      "title": "PHP strval() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nReturn the string value of different variables:\nDefinition and Usage\nThe strval() function returns the string value of a variable.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a = \"Hello\";\necho strval($a) . \"<br>\";\n\n$b = \"1234.56789\";\necho strval($b) . \"<br>\";\n\n$c = \"1234.56789Hello\";\necho strval($c) . \"<br>\";\n\n$d = \"Hello1234.56789\";\necho strval($d) . \"<br>\";\n\n$e = 1234;\necho strval($e) . \"<br>\";\n?>",
        "strval(variable);"
      ]
    },
    {
      "title": "PHP unserialize() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nConvert serialized data back into actual data:\nDefinition and Usage\nThe unserialize() function converts serialized data back into actual data.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$data = serialize(array(\"Red\", \"Green\", \"Blue\"));\necho $data . \"<br>\";\n\n$test = unserialize($data);\nvar_dump($test);\n?>",
        "unserialize(string, options);"
      ]
    },
    {
      "title": "PHP unset() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nUnset variables:\nDefinition and Usage\nThe unset() function unsets a variable.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a = \"Hello world!\";\necho \"The value of variable 'a' before unset: \" . $a . \"<br>\";\nunset($a);\necho \"The value of variable 'a' after unset: \" . $a;\n?>",
        "unset(variable, ....);"
      ]
    },
    {
      "title": "PHP var_dump() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nDump information about different variables:\nDefinition and Usage\nThe var_dump() function dumps information about one or more variables. The information holds type and value of the variable(s).\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a = 32;\necho var_dump($a) . \"<br>\";\n\n$b = \"Hello world!\";\necho var_dump($b) . \"<br>\";\n\n$c = 32.5;\necho var_dump($c) . \"<br>\";\n\n$d = array(\"red\", \"green\", \"blue\");\necho var_dump($d) . \"<br>\";\n\n$e = array(32, \"Hello world!\", 32.5, array(\"red\", \"green\", \"blue\"));\necho var_dump($e) . \"<br>\";\n\n// Dump two variables\necho var_dump($a, $b) . \"<br>\";\n?>",
        "var_dump(var1, var2, ...);"
      ]
    },
    {
      "title": "PHP var_export() Function",
      "summary": "â® PHP Variable Handling Reference\nExampleGet your own PHP Server\nOutput structured information about variables:\nDefinition and Usage\nThe var_export() function outputs or returns structured information about a variable.\nThis function works similar to var_dump(), except that the returned value for this function is valid PHP code.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$a = 32;\necho var_export($a) . \"<br>\";\n\n$b = \"Hello world!\";\necho var_export($b) . \"<br>\";\n\n$c = 32.5;\necho var_export($c) . \"<br>\";\n\n$d = array(\"red\", \"green\", \"blue\");\necho var_export($d) . \"<br>\";\n\n$e = array(32, \"Hello world!\", 32.5, array(\"red\", \"green\", \"blue\"));\necho var_export($e) . \"<br>\";\n?>",
        "var_export(variable, return);"
      ]
    },
    {
      "title": "PHP XML Parser Functions",
      "summary": "PHP XML Parser Introduction\nThe XML functions lets you parse, but not validate, XML documents.\nXML is a data format for standardized structured document exchange. More information on XML can be found in our XML Tutorial.\nThis extension uses the Expat XML parser.\nExpat is an event-based parser, it views an XML document as a series of events. When an event occurs, it calls a specified function to handle it.\nExpat is a non-validating parser, and ignores any DTDs linked to a document. However, if the document is not well formed it will end with an error message.\nBecause it is an event-based, non validating parser, Expat is fast and well suited for web applications.\nThe XML parser functions lets you create XML parsers and define handlers for XML events.\nInstallation\nThe XML functions are part of the PHP core. There is no installation needed to use these functions.\nPHP XML Parser Functions\nREMOVE ADS\nPHP XML Parser Constants",
      "examples": []
    },
    {
      "title": "PHP utf8_decode() Function",
      "summary": "â® PHP XML Parser Reference\nExampleGet your own PHP Server\nDecode a UTF-8 string to ISO-8859-1:\nDefinition and Usage\nThe utf8_decode() function decodes a UTF-8 string to ISO-8859-1.\nThis function decodes a string, previously encoded with the utf8_encode() function, back to ISO-8859-1.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$text = \"\\xE0\";\necho utf8_encode($text) .\"<br>\";\necho utf8_decode($text);\n?>",
        "utf8_decode(string)"
      ]
    },
    {
      "title": "PHP utf8_encode() Function",
      "summary": "â® PHP XML Parser Reference\nExampleGet your own PHP Server\nEncode an ISO-8859-1 string to UTF-8:\nDefinition and Usage\nThe utf8_encode() function encodes an ISO-8859-1 string to UTF-8.\nUnicode is a universal standard, and has been developed to describe all possible characters of all languages plus a lot of symbols with one unique number for each character/symbol.\nHowever, it is not always possible to transfer a Unicode character to another computer reliably. UTF-8 has been developed to transfer a Unicode character from one computer to another.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$text = \"\\xE0\";\necho utf8_encode($text);\n?>",
        "utf8_encode(string)"
      ]
    },
    {
      "title": "PHP xml_error_string() Function",
      "summary": "â® PHP XML Parser Reference\nExampleGet your own PHP Server\nOn error, return the XML parser error description, line number and column number:\nThe output of the code above could be:\nDefinition and Usage\nThe xml_error_string() function returns the XML parser error description.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n// Invalid xml file\n$xmlfile = 'test.xml';\n$xmlparser = xml_parser_create();\n\n// Open the file and read data\n$fp = fopen($xmlfile, 'r');\nwhile ($xmldata = fread($fp, 4096)) {\n// parse the data chunk\nif (!xml_parse($xmlparser,$xmldata,feof($fp))) {\ndie( print \"ERROR: \"\n. xml_error_string(xml_get_error_code($xmlparser))\n. \"<br>Line: \"\n. xml_get_current_line_number($xmlparser)\n. \"<br>Column: \"\n. xml_get_current_column_number($xmlparser)\n. \"<br>\");\n}\n}\nxml_parser_free($xmlparser);\n?>",
        "ERROR: Mismatched tag\nLine: 5\nColumn: 41",
        "xml_error_string(code)"
      ]
    },
    {
      "title": "PHP xml_get_current_byte_index() Function",
      "summary": "â® PHP XML Parser Reference\nExampleGet your own PHP Server\nOn error, return the XML parser error description, line number, column number and byte index:\nThe output of the code above could be:\nDefinition and Usage\nThe xml_get_current_byte_index() function returns the byte index for an XML parser.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n// Invalid xml file\n$xmlfile = 'test.xml';\n$xmlparser = xml_parser_create();\n\n// Open the file and read data\n$fp = fopen($xmlfile, 'r');\nwhile ($xmldata = fread($fp, 4096)) {\n// parse the data chunk\nif (!xml_parse($xmlparser,$xmldata,feof($fp))) {\ndie( print \"ERROR: \"\n. xml_error_string(xml_get_error_code($xmlparser))\n. \"<br>Line: \"\n. xml_get_current_line_number($xmlparser)\n. \"<br>Column: \"\n. xml_get_current_column_number($xmlparser)\n. \"<br>Byte Index: \"\n. xml_get_current_byte_index($xmlparser)\n. \"<br>\");\n}\n}\nxml_parser_free($xmlparser);\n?>",
        "ERROR: Mismatched tag\nLine: 5\nColumn: 41\nByte Index: 72",
        "xml_get_current_byte_index(parser)"
      ]
    },
    {
      "title": "PHP xml_get_current_column_number() Function",
      "summary": "â® PHP XML Parser Reference\nExampleGet your own PHP Server\nOn error, return the XML parser error description, line number and column number:\nThe output of the code above could be:\nDefinition and Usage\nThe xml_get_current_column_number() function returns the current column number for an XML parser.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n// Invalid xml file\n$xmlfile = 'test.xml';\n$xmlparser = xml_parser_create();\n\n// Open the file and read data\n$fp = fopen($xmlfile, 'r');\nwhile ($xmldata = fread($fp, 4096)) {\n// parse the data chunk\nif (!xml_parse($xmlparser,$xmldata,feof($fp))) {\ndie( print \"ERROR: \"\n. xml_error_string(xml_get_error_code($xmlparser))\n. \"<br>Line: \"\n. xml_get_current_line_number($xmlparser)\n. \"<br>Column: \"\n. xml_get_current_column_number($xmlparser)\n. \"<br>\");\n}\n}\nxml_parser_free($xmlparser);\n?>",
        "ERROR: Mismatched tag\nLine: 5\nColumn: 41",
        "xml_get_current_column_number(parser)"
      ]
    },
    {
      "title": "PHP xml_get_current_line_number() Function",
      "summary": "â® PHP XML Parser Reference\nExampleGet your own PHP Server\nOn error, return the XML parser error description, line number and column number:\nThe output of the code above could be:\nDefinition and Usage\nThe xml_get_current_line_number() function returns the current line number for an XML parser.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n// Invalid xml file\n$xmlfile = 'test.xml';\n$xmlparser = xml_parser_create();\n\n// Open the file and read data\n$fp = fopen($xmlfile, 'r');\nwhile ($xmldata = fread($fp, 4096)) {\n// parse the data chunk\nif (!xml_parse($xmlparser,$xmldata,feof($fp))) {\ndie( print \"ERROR: \"\n. xml_error_string(xml_get_error_code($xmlparser))\n. \"<br>Line: \"\n. xml_get_current_line_number($xmlparser)\n. \"<br>Column: \"\n. xml_get_current_column_number($xmlparser)\n. \"<br>\");\n}\n}\nxml_parser_free($xmlparser);\n?>",
        "ERROR: Mismatched tag\nLine: 5\nColumn: 41",
        "xml_get_current_line_number(parser)"
      ]
    },
    {
      "title": "PHP xml_get_error_code() Function",
      "summary": "â® PHP XML Parser Reference\nExampleGet your own PHP Server\nOn error, return the XML parser error code, line number and column number:\nThe output of the code above could be:\nDefinition and Usage\nThe xml_get_error_code() function returns the XML parser error code.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n// Invalid xml file\n$xmlfile = 'test.xml';\n$xmlparser = xml_parser_create();\n\n// Open the file and read data\n$fp = fopen($xmlfile, 'r');\nwhile ($xmldata = fread($fp, 4096)) {\n// parse the data chunk\nif (!xml_parse($xmlparser,$xmldata,feof($fp))) {\ndie( print \"ERROR: \"\n. xml_get_error_code($xmlparser)\n. \"<br>Line: \"\n. xml_get_current_line_number($xmlparser)\n. \"<br>Column: \"\n. xml_get_current_column_number($xmlparser)\n. \"<br>\");\n}\n}\nxml_parser_free($xmlparser);\n?>",
        "ERROR: 76\nLine: 5\nColumn: 41",
        "xml_get_error_code(parser)"
      ]
    },
    {
      "title": "PHP xml_parse() Function",
      "summary": "â® PHP XML Parser Reference\nExampleGet your own PHP Server\nCreate an XML parser and parse an XML document (note.xml):\nDefinition and Usage\nThe xml_parse() function parses an XML document.\nTip: To create an XML parser, use the xml_parser_create() function.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details\nMore Examples\nExample\nUsing the same XML file but displaying the XML data in another way:",
      "examples": [
        "<?php\n// Create an XML parser\n$parser=xml_parser_create();\n\nfunction char($parser,$data) {\necho $data;\n}\n\nxml_set_character_data_handler($parser,\"char\");\n$fp=fopen(\"note.xml\",\"r\");\n\nwhile ($data=fread($fp,4096)) {\n// Parse XML data\nxml_parse($parser,$data,feof($fp)) or\ndie (sprintf(\"XML Error: %s at line %d\",\nxml_error_string(xml_get_error_code($parser)),\nxml_get_current_line_number($parser)));\n}\n\nxml_parser_free($parser);\nfclose($fp);\n?>",
        "xml_parse(parser, data, end)",
        "<?php\n$parser=xml_parser_create();\nfunction start($parser,$element_name,$element_attrs) {\nswitch($element_name) {\ncase \"NOTE\":\necho \"NOTE<br>\";\nbreak;\ncase \"TO\":\necho \"To: \";\nbreak;\ncase \"FROM\":\necho \"From: \";\nbreak;\ncase \"HEADING\":\necho \"Heading: \";\nbreak;\ncase \"BODY\":\necho \"Message: \";\n}\n}\n\nfunction stop($parser,$element_name) {\necho \"<br>\";\n}\n\nfunction char($parser,$data) {\necho $data;\n}\n\nxml_set_element_handler($parser,\"start\",\"stop\");\nxml_set_character_data_handler($parser,\"char\");\n$fp=fopen(\"note.xml\",\"r\");\n\nwhile ($data=fread($fp,4096)) {\nxml_parse($parser,$data,feof($fp)) or\ndie (sprintf(\"XML Error: %s at line %d\",\nxml_error_string(xml_get_error_code($parser)),\nxml_get_current_line_number($parser)));\n}\n\nxml_parser_free($parser);\nfclose($fp);\n?>"
      ]
    },
    {
      "title": "PHP xml_parse_into_struct() Function",
      "summary": "â® PHP XML Parser Reference\nExampleGet your own PHP Server\nParse XML data into an array (from note.xml):\nDefinition and Usage\nThe xml_parse_into_struct() function parses XML data into an array.\nThis function parses the XML data into 2 arrays:\nValue array - containing the data from the parsed XML\nIndex array - containing pointers to the location of the values in the Value array\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$xmlparser = xml_parser_create();\n\n$fp = fopen(\"note.xml\", \"r\");\n$xmldata = fread($fp, 4096);\n\n// Parse XML data into an array\nxml_parse_into_struct($xmlparser,$xmldata,$values);\n\nxml_parser_free($xmlparser);\nprint_r($values);\nfclose($fp);\n?>",
        "xml_parse_into_struct(parser, data, values, index)"
      ]
    },
    {
      "title": "PHP xml_parser_create_ns() Function",
      "summary": "â® PHP XML Parser Reference\nExampleGet your own PHP Server\nCreate an XML parser with namespace support:\nDefinition and Usage\nThe xml_parser_create_ns() function creates an XML parser with namespace support.\nTip: To free the xml parser, use the xml_parser_free() function.\nTip: To create an XML parser without namespace support, use the xml_parser_create() function instead.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// Create an XML parser with namespace support\n$parser=xml_parser_create_ns();\n\nxml_parser_free($parser);\n?>",
        "xml_parser_create(encoding, separator)"
      ]
    },
    {
      "title": "PHP xml_parser_create() Function",
      "summary": "â® PHP XML Parser Reference\nExampleGet your own PHP Server\nCreate an XML parser and parse an XML document (note.xml):\nDefinition and Usage\nThe xml_parser_create() function creates a new XML parser.\nTip: To free the xml parser, use the xml_parser_free() function.\nTip: To create an XML parser with namespace support, use the xml_parser_create_ns() function instead.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// Create an XML parser\n$parser=xml_parser_create();\n\nfunction char($parser,$data) {\necho $data;\n}\n\nxml_set_character_data_handler($parser,\"char\");\n$fp=fopen(\"note.xml\",\"r\");\n\nwhile ($data=fread($fp,4096)) {\n// Parse XML data\nxml_parse($parser,$data,feof($fp)) or\ndie (sprintf(\"XML Error: %s at line %d\",\nxml_error_string(xml_get_error_code($parser)),\nxml_get_current_line_number($parser)));\n}\n\nxml_parser_free($parser);\nfclose($fp);\n?>",
        "xml_parser_create(encoding)"
      ]
    },
    {
      "title": "PHP xml_parser_free() Function",
      "summary": "â® PHP XML Parser Reference\nExampleGet your own PHP Server\nCreate an XML parser, parse an XML document (note.xml), then free the XML parser:\nDefinition and Usage\nThe xml_parser_free() function frees an XML parser.\nTip: To create an XML parser use the xml_parser_create() function.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// Create an XML parser\n$parser=xml_parser_create();\n\nfunction char($parser,$data) {\necho $data;\n}\n\nxml_set_character_data_handler($parser,\"char\");\n$fp=fopen(\"note.xml\",\"r\");\n\nwhile ($data=fread($fp,4096)) {\n// Parse XML data\nxml_parse($parser,$data,feof($fp)) or\ndie (sprintf(\"XML Error: %s at line %d\",\nxml_error_string(xml_get_error_code($parser)),\nxml_get_current_line_number($parser)));\n}\n\n// Free XML parser\nxml_parser_free($parser);\nfclose($fp);\n?>",
        "xml_parser_free(parser)"
      ]
    },
    {
      "title": "PHP xml_parser_get_option() Function",
      "summary": "â® PHP XML Parser Reference\nExampleGet your own PHP Server\nGet options from an XML parser:\nDefinition and Usage\nThe xml_parser_get_option() function gets options from an XML parser.\nSyntax\nParameter Values\nXML_OPTION_CASE_FOLDING - Specifies if case-folding is enabled. Can be 1 (TRUE) or 0 (FALSE). 1 is default\nXML_OPTION_TARGET_ENCODING - Specifies the target encoding in this XML parser. Set to the same as the xml_parser_create() function by default (ISO-8859-1, US-ASCII or UTF-8)\nXML_OPTION_SKIP_TAGSTART - Specifies how many characters that is skipped in the beginning of a tag name\nXML_OPTION_SKIP_WHITE - Specifies whether values consisting of whitespace characters are skipped. Can be 1 (TRUE) or 0 (FALSE)\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$parser=xml_parser_create();\n\necho \"XML_OPTION_CASE_FOLDING: \" . xml_parser_get_option($parser, XML_OPTION_CASE_FOLDING) . <br>;\necho \"XML_OPTION_TARGET_ENCODING: \" . xml_parser_get_option($parser, XML_OPTION_TARGET_ENCODING);\n\nxml_parser_free($parser);\n?>",
        "xml_parser_get_option(parser, option)"
      ]
    },
    {
      "title": "PHP xml_parser_set_option() Function",
      "summary": "â® PHP XML Parser Reference\nExampleGet your own PHP Server\nSet an option in the XML parser:\nDefinition and Usage\nThe xml_parser_set_option() function sets options in an XML parser.\nSyntax\nParameter Values\nXML_OPTION_CASE_FOLDING - Specifies if case-folding is enabled. Can be 1 (TRUE) or 0 (FALSE). 1 is default\nXML_OPTION_SKIP_TAGSTART - Specifies how many characters should be skipped in the beginning of a tag name\nXML_OPTION_SKIP_WHITE - Specifies whether to skip values consisting of whitespace characters. Can be 1 (TRUE) or 0 (FALSE)\nXML_OPTION_TARGET_ENCODING - Specifies the target encoding in this XML parser. Set to the same as the xml_parser_create() function by default (ISO-8859-1, US-ASCII or UTF-8)\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$parser=xml_parser_create();\n\nxml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);\n\nxml_parser_free($parser);\n?>",
        "xml_parser_set_option(parser, option, value)"
      ]
    },
    {
      "title": "PHP xml_set_character_data_handler() Function",
      "summary": "â® PHP XML Parser Reference\nExampleGet your own PHP Server\nCreate an XML parser, set character data handler, and parse an XML document (note.xml):\nDefinition and Usage\nThe xml_set_character_data_handler() function sets the character data handler for the XML parser.\nThis function specifies what function to be called when the parser finds character data in the XML file.\nNote: The handler parameter can also be an array containing an object reference and a method name.\nSyntax\nParameter Values\n$parser - A variable containing the XML parser calling the handler\n$data - A variable containing the character data from the XML file as a string\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// Create an XML parser\n$parser=xml_parser_create();\n\nfunction char($parser,$data) {\necho $data;\n}\n\n// Set the character data handler\nxml_set_character_data_handler($parser,\"char\");\n\n$fp=fopen(\"note.xml\",\"r\");\n\nwhile ($data=fread($fp,4096)) {\n// Parse XML data\nxml_parse($parser,$data,feof($fp)) or\ndie (sprintf(\"XML Error: %s at line %d\",\nxml_error_string(xml_get_error_code($parser)),\nxml_get_current_line_number($parser)));\n}\n\nxml_parser_free($parser);\nfclose($fp);\n?>",
        "xml_set_character_data_handler(parser, handler)"
      ]
    },
    {
      "title": "PHP xml_set_default_handler() Function",
      "summary": "â® PHP XML Parser Reference\nExampleGet your own PHP Server\nCreate an XML parser, set default data handler, and parse an XML document (note.xml):\nDefinition and Usage\nThe xml_set_default_handler() function sets the default data handler for the XML parser.\nThis function specifies what function to be called whenever the parser finds data in the XML file.\nNote: The handler parameter can also be an array containing an object reference and a method name.\nSyntax\nParameter Values\n$parser - A variable containing the XML parser calling the handler\n$data - A variable containing the character data from the XML file as a string\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// Create an XML parser\n$parser=xml_parser_create();\n\nfunction def($parser,$data) {\necho $data;\n}\n\n// Set the default data handler\nxml_set_default_handler($parser,\"def\");\n\n$fp=fopen(\"note.xml\",\"r\");\n\nwhile ($data=fread($fp,4096)) {\n// Parse XML data\nxml_parse($parser,$data,feof($fp)) or\ndie (sprintf(\"XML Error: %s at line %d\",\nxml_error_string(xml_get_error_code($parser)),\nxml_get_current_line_number($parser)));\n}\n\nxml_parser_free($parser);\nfclose($fp);\n?>",
        "xml_set_default_handler(parser, handler)"
      ]
    },
    {
      "title": "PHP xml_set_element_handler() Function",
      "summary": "â® PHP XML Parser Reference\nExampleGet your own PHP Server\nSpecify functions to be called at the start and end of an element in the XML document (note.xml):\nDefinition and Usage\nThe xml_set_element_handler() function specifies functions to be called at the start and at the end of an element in the XML document.\nNote: The start and end parameters can also be an array containing an object reference and a method name.\nSyntax\nParameter Values\n$parser - A variable containing the XML parser calling the handler\n$name - A variable containing the name of the elements, that triggers this function, from the XML file as a string\n$data - An array containing the elements attributes from the XML file as a string\n$parser - A variable containing the XML parser calling the handler\n$name - A variable containing the name of the elements, that triggers this function, from the XML file as a string\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$parser=xml_parser_create();\n\nfunction start($parser,$element_name,$element_attrs) {\nswitch($element_name) {\ncase \"NOTE\":\necho \"NOTE<br>\";\nbreak;\ncase \"TO\":\necho \"To: \";\nbreak;\ncase \"FROM\":\necho \"From: \";\nbreak;\ncase \"HEADING\":\necho \"Heading: \";\nbreak;\ncase \"BODY\":\necho \"Message: \";\n}\n}\n\nfunction stop($parser,$element_name) {\necho \"<br>\";\n}\n\nfunction char($parser,$data) {\necho $data;\n}\n\n//Â  Specify functions to be called at the start and end of an element in the XML document\nxml_set_element_handler($parser,\"start\",\"stop\");\nxml_set_character_data_handler($parser,\"char\");\n$fp=fopen(\"note.xml\",\"r\");\n\nwhile ($data=fread($fp,4096)) {\nxml_parse($parser,$data,feof($fp)) or\ndie (sprintf(\"XML Error: %s at line %d\",\nxml_error_string(xml_get_error_code($parser)),\nxml_get_current_line_number($parser)));\n}\n\nxml_parser_free($parser);\nfclose($fp);\n?>",
        "xml_set_element_handler(parser, start, end)"
      ]
    },
    {
      "title": "PHP xml_set_end_namespace_decl_handler() Function",
      "summary": "â® PHP XML Parser Reference\nDefinition and Usage\nThe xml_set_end_namespace_decl_handler() function sets up the end namespace declaration handler.\nThis function specifies what function to be called when leaving the scope of a namespace declaration. This will be called, for each namespace declaration, after the handler for the end tag of the element in which the namespace was declared.\nNote: The handler parameter can also be an array containing an object reference and a method name.\nSyntax\nParameter Values\n$parser - A variable containing the XML parser calling the handler\n$prefix - A variable containing a string used to reference the namespace within an XML object\nTechnical Details",
      "examples": [
        "xml_set_end_namespace_decl_handler(parser, handler)"
      ]
    },
    {
      "title": "PHP xml_set_external_entity_ref_handler() Function",
      "summary": "â® PHP XML Parser Reference\nExampleGet your own PHP Server\nCreate an XML parser, set character data handler, set external entity reference handler, and parse an XML document:\nDefinition and Usage\nThe xml_set_external_entity_ref_handler() function specifies a function to be called when the parser finds an external entity in the XML document.\nNote: The handler parameter can also be an array containing an object reference and a method name.\nSyntax\nParameter Values\n$parser - A variable containing the XML parser calling the handler\n$name - A variable containing the name of the external entity\n$base - The base for resolving the system identifier (system_id) of the external entity. Currently, this is always an empty string\n$system_id - The system identifier as specified in the entity declaration\n$public_id - The public identifier as specified in the entity declaration\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// Create an XML parser\n$parser=xml_parser_create();\n\nfunction char($parser,$data) {\necho $data;\n}\n\nfunction ext_ent_handler($parser,$ent,$base,$sysID,$pubID)Â  {\necho \"$ent<br>\";\necho \"$sysID<br>\";\necho \"$pubID<br>\";\n}\n\n// Set the character data handler\nxml_set_character_data_handler($parser,\"char\");\n\n// Set the external entity reference handler\nxml_set_external_entity_ref_handler($parser, \"ext_ent_handler\");\n\n$fp=fopen(\"note_entity.xml\",\"r\");\n\nwhile ($data=fread($fp,4096)) {\n// Parse XML data\nxml_parse($parser,$data,feof($fp)) or\ndie (sprintf(\"XML Error: %s at line %d\",\nxml_error_string(xml_get_error_code($parser)),\nxml_get_current_line_number($parser)));\n}\n\nxml_parser_free($parser);\nfclose($fp);\n?>",
        "xml_set_external_entity_ref_handler(parser, handler)"
      ]
    },
    {
      "title": "PHP xml_set_notation_decl_handler() Function",
      "summary": "â® PHP XML Parser Reference\nExampleGet your own PHP Server\nCreate an XML parser, set character data handler, set notation declaration handler, and parse an XML document:\nDefinition and Usage\nThe xml_set_notation_decl_handler() function specifies a function to be called when the parser finds a notation declaration in the XML document.\nNote: The handler parameter can also be an array containing an object reference and a method name.\nSyntax\nParameter Values\n$parser - A variable containing the XML parser calling the handler\n$name - A variable containing the name of the notation\n$base - The base for resolving the system identifier (system_id) of the external entity. Currently, this is always an empty string\n$system_id - The system identifier of the external notation declaration\n$public_id - The public identifier of the external notation declaration\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n// Create an XML parser\n$parser=xml_parser_create();\n\nfunction char($parser,$data) {\necho $data;\n}\n\nfunction not_decl_handler($parser,$not,$base,$sysID,$pubID)Â  {\necho \"$not<br>\";\necho \"$sysID<br>\";\necho \"$pubID<br>\";\n}\n\n// Set the character data handler\nxml_set_character_data_handler($parser,\"char\");\n\n// Set the notation declaration handler\nxml_set_notation_decl_handler($parser, \"not_decl_handler\");\n\n$fp=fopen(\"note_notation.xml\",\"r\");\n\nwhile ($data=fread($fp,4096)) {\n// Parse XML data\nxml_parse($parser,$data,feof($fp)) or\ndie (sprintf(\"XML Error: %s at line %d\",\nxml_error_string(xml_get_error_code($parser)),\nxml_get_current_line_number($parser)));\n}\n\nxml_parser_free($parser);\nfclose($fp);\n?>",
        "xml_set_notation_decl_handler(parser, handler)"
      ]
    },
    {
      "title": "PHP xml_set_object() Function",
      "summary": "â® PHP XML Parser Reference\nExampleGet your own PHP Server\nUse XML parser within an object:\nDefinition and Usage\nThe xml_set_object() function allows a XML parser to be used within an object.\nSyntax\nParameter Values\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\nclass XMLParser\n{\nprivate $parser;\n\nfunction __construct() {\n$this->parser = xml_parser_create();\nxml_set_object($this->parser, $this);\nxml_set_element_handler($this->parser, \"start_tag\", \"end_tag\");\nxml_set_character_data_handler($this->parser, \"cdata\");\n}\n\nfunction __destruct() {\nxml_parser_free($this->parser);\nunset($this->parser);\n}\n\nfunction parse($data) {\nxml_parse($this->parser, $data);\n}\n\nfunction start_tag($parser, $tag, $attributes) {\nvar_dump($tag, $attributes);\n}\n\nfunction cdata($parser, $cdata) {\nvar_dump($cdata);\n}\n\nfunction end_tag($parser, $tag) {\nvar_dump($tag);\n}\n}\n\n$xml_parser = new XMLParser();\n$xml_parser->parse(\"<p id='test'>Hello World!</p>\");\n?>",
        "xml_set_object(parser, object)"
      ]
    },
    {
      "title": "PHP xml_set_processing_instruction_handler() Function",
      "summary": "â® PHP XML Parser Reference\nExampleGet your own PHP Server\nCreate an XML parser, set character data handler, set PI handler, and parse an XML document (note_pi.xml):\nDefinition and Usage\nThe xml_set_processing_instruction_handler() function specifies a function to be called when the parser finds a processing instruction (PI) in the XML document.\nA PI is enclosed in <? and ?> and contains a a target followed by data.\nExample: In this case the PI associates a style sheet with an XML document:\nNote: The handler parameter can also be an array containing an object reference and a method name.\nSyntax\nParameter Values\n$parser - A variable containing the XML parser calling the handler\n$target - A variable containing the PI target\n$data - A variable containing the PI data\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$parser=xml_parser_create();\n\nfunction char($parser,$data) {\necho $data;\n}\n\nfunction pi_handler($parser, $target, $data) {\necho \"Target: $target<br />\";\necho \"Data: $data<br />\";\n}\n\nxml_set_character_data_handler($parser,\"char\");\n// Set up PI handler\nxml_set_processing_instruction_handler($parser, \"pi_handler\");\n$fp=fopen(\"note_pi.xml\",\"r\");\n\nwhile ($data=fread($fp,4096)) {\nxml_parse($parser,$data,feof($fp)) or\ndie (sprintf(\"XML Error: %s at line %d\",\nxml_error_string(xml_get_error_code($parser)),\nxml_get_current_line_number($parser)));\n}\nxml_parser_free($parser);\n?>",
        "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<?xml-stylesheet href=\"default.xsl\" type=\"text/xml\"?>\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>",
        "xml_set_processing_instruction_handler(parser, handler)"
      ]
    },
    {
      "title": "PHP xml_set_start_namespace_decl_handler() Function",
      "summary": "â® PHP XML Parser Reference\nDefinition and Usage\nThe xml_set_start_namespace_decl_handler() function sets up the start namespace declaration handler.\nThis function specifies what function to be called when a namespace is declared.\nNote: The handler parameter can also be an array containing an object reference and a method name.\nSyntax\nParameter Values\n$parser - A variable containing the XML parser calling the handler\n$prefix - A variable containing a reference to the namespace within an XML object\n$uri - The URI of the namspace\nTechnical Details",
      "examples": [
        "xml_set_start_namespace_decl_handler(parser, handler)"
      ]
    },
    {
      "title": "PHP xml_set_unparsed_entity_decl_handler() Function",
      "summary": "â® PHP XML Parser Reference\nExampleGet your own PHP Server\nCreate an XML parser, set character data handler, set unparsed entity declaration handler, and parse an XML document:\nDefinition and Usage\nThe xml_set_unparsed_entity_decl_handler() function specifies a function to be called when the parser an unparsed entity in the XML document.\nNote: The handler parameter can also be an array containing an object reference and a method name.\nSyntax\nParameter Values\n$parser - A variable containing the XML parser calling the handler\n$entity_name - A variable containing the name of the entity\n$base - The base for resolving the system identifier (system_id) of the external entity. Currently, this is always an empty string\n$system_id - The system identifier of the external entity\n$public_id - The public identifier of the external entity\n$notation_name - The name of the notation of this entity\nREMOVE ADS\nTechnical Details",
      "examples": [
        "<?php\n$parser=xml_parser_create();\n\nfunction char($parser,$data) {\necho $data;\n}\n\nfunction unparsed_ent_handler($parser,$entname,$base,$sysID,$pubID,$notname) {\nprint \"$entname<br>\";\nprint \"$sysID<br>\";\nprint \"$pubID<br>\";\nprint \"$notname<br>\";\n}\n\nxml_set_character_data_handler($parser,\"char\");\n// Set up unparsed entity declaration handler\nxml_set_unparsed_entity_decl_handler($parser,\"unparsed_ent_handler\");\n\n$fp=fopen(\"test.xml\",\"r\");\n\nwhile ($data=fread($fp,4096)) {\nxml_parse($parser,$data,feof($fp)) or\ndie (sprintf(\"XML Error: %s at line %d\",\nxml_error_string(xml_get_error_code($parser)),\nxml_get_current_line_number($parser)));\n}\nxml_parser_free($parser);\nfclose($fp);\n?>",
        "xml_set_unparsed_entity_decl_handler(parser, handler)"
      ]
    },
    {
      "title": "PHP Zip Functions",
      "summary": "PHP Zip Introduction\nThe Zip files functions allows you to read ZIP files.\nRequirements\nThe ZIP extension requires libzip.\nInstallation\nLinux Systems\nFor these functions to work, you have to compile PHP with --enable-zip.\nPHP 5.6: Use the --with-libzip=DIR configure option to use a system libzip installation. libzip version 0.11 is required, with 0.11.2 or later recommended.\nPHP 7.3: Building against the bundled libzip is discouraged, but still possible by adding --without-libzip to the configuration.\nWindows Systems\nBefore PHP 5.3: Users must enable \"php_zip.dll\" inside of \"php.ini\" for these functions to work.\nFrom PHP 5.3: The ZIP extension is built-in.\nPHP Zip Functions",
      "examples": []
    },
    {
      "title": "PHP zip_close() Function",
      "summary": "â® PHP Zip Reference\nExampleGet your own PHP Server\nOpen, read, and close a ZIP file archive:\nDefinition and Usage\nThe zip_close() function closes a ZIP file archive opened by the zip_open() function.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$zip = zip_open(\"test.zip\");\nzip_read($zip);\n\n// some code\n\nzip_close($zip);\n?>",
        "zip_close(zip)"
      ]
    },
    {
      "title": "PHP zip_entry_close() Function",
      "summary": "â® PHP Zip Reference\nExampleGet your own PHP Server\nClose a ZIP directory entry opened by zip_entry_open():\nDefinition and Usage\nThe zip_entry_close() function closes a ZIP directory entry opened by zip_entry_open().\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$zip = zip_open(\"test.zip\");\n\nif ($zip) {\nwhile ($zip_entry = zip_read($zip)) {\nif (zip_entry_open($zip, $zip_entry)) {\n// some code\n// Close directory entry\nzip_entry_close($zip_entry);\n}\n}\nzip_close($zip);\n}\n?>",
        "zip_entry_close(zip_entry)"
      ]
    },
    {
      "title": "PHP zip_entry_compressedsize() Function",
      "summary": "â® PHP Zip Reference\nExampleGet your own PHP Server\nOpen a ZIP file archive and get the name and compressed size of the directory entries:\nThe output of the code depends on the contents of the ZIP archive:\nDefinition and Usage\nThe zip_entry_compressedsize() function returns the compressed file size of a ZIP directory entry.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$zip = zip_open(\"test.zip\");\n\nif ($zip) {\nwhile ($zip_entry = zip_read($zip)) {\necho \"<p>\";\n// Get name of directory entry\necho \"Name: \" . zip_entry_name($zip_entry) . \"<br>\";\n// Get compressed size\necho \"Compressed size: \" . zip_entry_compressedsize($zip_entry);\necho \"</p>\";\n}\nzip_close($zip);\n}\n?>",
        "Name: ziptest.txt\nCompressed size: 56\n\nName: htmlziptest.html\nCompressed size: 101",
        "zip_entry_compressedsize(zip_entry)"
      ]
    },
    {
      "title": "PHP zip_entry_compressionmethod() Function",
      "summary": "â® PHP Zip Reference\nExampleGet your own PHP Server\nOpen a ZIP file archive and get the name and compression method of the directory entries:\nThe output of the code depends on the contents of the ZIP archive:\nDefinition and Usage\nThe zip_entry_compressionmethod() function returns the compression method of a ZIP directory entry.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$zip = zip_open(\"test.zip\");\n\nif ($zip) {\nwhile ($zip_entry = zip_read($zip)) {\necho \"<p>\";\n// Get name of directory entry\necho \"Name: \" . zip_entry_name($zip_entry) . \"<br>\";\n// Get compression method\necho \"Compression method: \" . zip_entry_compressionmethod($zip_entry);\necho \"</p>\";\n}\nzip_close($zip);\n}\n?>",
        "Name: ziptest.txt\nCompression method: deflated\n\nName: htmlziptest.html\nCompression method: deflated",
        "zip_entry_compressionmethod(zip_entry)"
      ]
    },
    {
      "title": "PHP zip_entry_filesize() Function",
      "summary": "â® PHP Zip Reference\nExampleGet your own PHP Server\nOpen a ZIP file archive and get the name and file size of the directory entries:\nThe output of the code depends on the contents of the ZIP archive:\nDefinition and Usage\nThe zip_entry_filesize() function returns the actual file size of a ZIP directory entry.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$zip = zip_open(\"test.zip\");\n\nif ($zip) {\nwhile ($zip_entry = zip_read($zip)) {\necho \"<p>\";\n// Get name of directory entry\necho \"Name: \" . zip_entry_name($zip_entry) . \"<br>\";\n// Get filesize of directory entry\necho \"Filesize: \" . zip_entry_filesize($zip_entry);\necho \"</p>\";\n}\nzip_close($zip);\n}\n?>",
        "Name: ziptest.txt\nFilesize: 59\n\nName: htmlziptest.html\nFilesize: 124",
        "zip_entry_filesize(zip_entry)"
      ]
    },
    {
      "title": "PHP zip_entry_name() Function",
      "summary": "â® PHP Zip Reference\nExampleGet your own PHP Server\nOpen a ZIP file archive and get the names of the directory entries:\nThe output of the code depends on the contents of the ZIP archive:\nDefinition and Usage\nThe zip_entry_name() function returns the name of a ZIP directory entry.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$zip = zip_open(\"test.zip\");\n\nif ($zip) {\nwhile ($zip_entry = zip_read($zip)) {\n// Get name of directory entry\necho \"Name: \" . zip_entry_name($zip_entry) . \"<br>\";\n}\nzip_close($zip);\n}\n?>",
        "Name: ziptest.txt\nName: htmlziptest.html",
        "zip_entry_name(zip_entry)"
      ]
    },
    {
      "title": "PHP zip_entry_open() Function Hello World!",
      "summary": "â® PHP Zip Reference\nExampleGet your own PHP Server\nOpen a ZIP file archive, open directory entry for reading, and read from the open directory entry:\nThe output of the code depends on the contents of the ZIP archive:\nDefinition and Usage\nThe zip_entry_open() function opens a directory entry in a ZIP file for reading.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$zip = zip_open(\"test.zip\");\n\nif ($zip) {\nwhile ($zip_entry = zip_read($zip)) {\necho \"<p>Name: \" . zip_entry_name($zip_entry) . \"<br>\";\n// Open directory entry for reading\nif (zip_entry_open($zip, $zip_entry)) {\necho \"File Contents:<br>\";\n// Read open directory entry\n$contents = zip_entry_read($zip_entry);\necho \"$contents<br>\";\nzip_entry_close($zip_entry);\n}\necho \"</p>\";\n}\nzip_close($zip);\n}\n?>",
        "Name: ziptest.txt\nFile Contents:\nHello World! This is a test.\n\nName: htmlziptest.html\nFile Contents:\nHello World!\nThis is a test for the zip functions in PHP.",
        "zip_entry_open(zip, zip_entry, mode)"
      ]
    },
    {
      "title": "PHP zip_entry_read() Function Hello World!",
      "summary": "â® PHP Zip Reference\nExampleGet your own PHP Server\nOpen a ZIP file archive, open directory entry for reading, and read from the open directory entry:\nThe output of the code depends on the contents of the ZIP archive:\nDefinition and Usage\nThe zip_entry_read() function reads from an open directory entry.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$zip = zip_open(\"test.zip\");\n\nif ($zip) {\nwhile ($zip_entry = zip_read($zip)) {\necho \"<p>Name: \" . zip_entry_name($zip_entry) . \"<br>\";\n// Open directory entry for reading\nif (zip_entry_open($zip, $zip_entry)) {\necho \"File Contents:<br>\";\n// Read open directory entry\n$contents = zip_entry_read($zip_entry);\necho \"$contents<br>\";\nzip_entry_close($zip_entry);\n}\necho \"</p>\";\n}\nzip_close($zip);\n}\n?>",
        "Name: ziptest.txt\nFile Contents:\nHello World! This is a test.\n\nName: htmlziptest.html\nFile Contents:\nHello World!\nThis is a test for the zip functions in PHP.",
        "zip_entry_read(zip_entry, length)"
      ]
    },
    {
      "title": "PHP zip_open() Function",
      "summary": "â® PHP Zip Reference\nExampleGet your own PHP Server\nOpen, read, and close a ZIP file archive:\nDefinition and Usage\nThe zip_open() function opens a ZIP file archive.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$zip = zip_open(\"test.zip\");\nzip_read($zip);\n\n// some code\n\nzip_close($zip);\n?>",
        "zip_open(zip)"
      ]
    },
    {
      "title": "PHP zip_read() Function",
      "summary": "â® PHP Zip Reference\nExampleGet your own PHP Server\nOpen, read, and close a ZIP file archive:\nDefinition and Usage\nThe zip_read() function reads the next file in a open ZIP file archive.\nTip: The resource returned by zip_read() can be used by the zip_entry_*() functions.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "<?php\n$zip = zip_open(\"test.zip\");\nzip_read($zip);\n\n// some code\n\nzip_close($zip);\n?>",
        "zip_read(zip)"
      ]
    },
    {
      "title": "PHP Timezones",
      "summary": "PHP Supported Timezones\nBelow is a complete list of the timezones supported by PHP, which are useful with several PHP date functions.\nAfrica\nAmerica\nAntarctica\nArctic\nAsia\nAtlantic\nAustralia\nEurope\nIndian\nPacific\nAfrica\nREMOVE ADS\nAmerica\nAntarctica\nArctic\nAsia\nAtlantic\nAustralia\nEurope\nIndian\nPacific",
      "examples": []
    }
  ],
  "glossary": [
    "abs",
    "abstract",
    "acos",
    "acosh",
    "addattribute",
    "addchild",
    "addcslashes",
    "addslashes",
    "affected rows",
    "ajax database",
    "ajax intro",
    "ajax php",
    "ajax poll",
    "ajax xml",
    "array",
    "array chunk",
    "array column",
    "array combine",
    "array diff",
    "array fill",
    "array filter",
    "array flip",
    "array functions",
    "array intersect",
    "array keys",
    "array map",
    "array merge",
    "array multisort",
    "array pad",
    "array pop",
    "array product",
    "array push",
    "array rand",
    "array reduce",
    "array replace",
    "array reverse",
    "array search",
    "array shift",
    "array slice",
    "array splice",
    "array sum",
    "array udiff",
    "array uintersect",
    "array unique",
    "array unshift",
    "array values",
    "array walk",
    "arsort",
    "as",
    "asin",
    "asinh",
    "asort",
    "associative arrays",
    "asxml",
    "atan",
    "atan2",
    "atanh",
    "attributes",
    "autocommit",
    "backend",
    "base convert",
    "basename",
    "bin2hex",
    "bindec",
    "boolval",
    "break",
    "cal info",
    "callable",
    "case",
    "catch",
    "ceil",
    "change user",
    "chdir",
    "checkdate",
    "checkdnsrr",
    "chgrp",
    "children",
    "chmod",
    "chop",
    "chown",
    "chr",
    "chroot",
    "chunk split",
    "class",
    "clearstatcache",
    "clone",
    "close",
    "closedir",
    "closelog",
    "commit",
    "compact",
    "concatenate strings",
    "connect",
    "connect errno",
    "connect error",
    "connection aborted",
    "connection status",
    "connection timeout",
    "const",
    "constant",
    "construct",
    "continue",
    "convert uudecode",
    "convert uuencode",
    "copy",
    "cos",
    "cosh",
    "count",
    "count chars",
    "crc32",
    "create arrays",
    "crypt",
    "current",
    "data seek",
    "date",
    "date add",
    "date create",
    "date diff",
    "date format",
    "date modify",
    "date parse",
    "date sub",
    "date sunrise",
    "date sunset",
    "debug",
    "debug backtrace",
    "decbin",
    "dechex",
    "declare",
    "decoct",
    "define",
    "defined",
    "deg2rad",
    "delete",
    "die",
    "dir",
    "dirname",
    "diskfreespace",
    "do",
    "doubleval",
    "each",
    "easter date",
    "easter days",
    "echo",
    "else",
    "elseif",
    "empty",
    "end",
    "enddeclare",
    "endfor",
    "endforeach",
    "endif",
    "endswitch",
    "endwhile",
    "errno",
    "error",
    "error list",
    "error log",
    "error reporting",
    "escape characters",
    "eval",
    "exception",
    "exercises",
    "exit",
    "exp",
    "explode",
    "expm1",
    "extends",
    "extract",
    "ezmlm hash",
    "fclose",
    "feof",
    "fetch all",
    "fetch array",
    "fetch assoc",
    "fetch field",
    "fetch fields",
    "fetch lengths",
    "fetch object",
    "fetch row",
    "fflush",
    "fgetc",
    "fgetcsv",
    "fgets",
    "fgetss",
    "field count",
    "field seek",
    "file",
    "file exists",
    "fileatime",
    "filectime",
    "filegroup",
    "fileinode",
    "filemtime",
    "fileowner",
    "fileperms",
    "filesize",
    "filetype",
    "filter id",
    "filter input",
    "filter list",
    "filter var",
    "final",
    "finally",
    "floatval",
    "flock",
    "floor",
    "flush",
    "fmod",
    "fn",
    "fnmatch",
    "fopen",
    "foreach",
    "foreach loop",
    "fpassthru",
    "fprint",
    "fputcsv",
    "fputs",
    "fread",
    "free",
    "frenchtojd",
    "fscanf",
    "fseek",
    "fsockopen",
    "fstat",
    "ftell",
    "ftp alloc",
    "ftp cdup",
    "ftp chdir",
    "ftp chmod",
    "ftp close",
    "ftp connect",
    "ftp delete",
    "ftp exec",
    "ftp fget",
    "ftp fput",
    "ftp get",
    "ftp login",
    "ftp mdtm",
    "ftp mkdir",
    "ftp mlsd",
    "ftp nlist",
    "ftp pasv",
    "ftp put",
    "ftp pwd",
    "ftp quit",
    "ftp raw",
    "ftp rawlist",
    "ftp rename",
    "ftp rmdir",
    "ftp site",
    "ftp size",
    "ftp systype",
    "ftruncate",
    "function",
    "fwrite",
    "get",
    "get browser",
    "get charset",
    "getchildren",
    "getcode",
    "getcwd",
    "getdate",
    "getdocnamespaces",
    "getfile",
    "gethostbyaddr",
    "gethostbyname",
    "gethostbynamel",
    "gethostname",
    "getline",
    "getmessage",
    "getmxrr",
    "getname",
    "getnamespaces",
    "getprevious",
    "getprotobyname",
    "getprotobynumber",
    "getrandmax",
    "getservbyname",
    "getservbyport",
    "gettimeofday",
    "gettrace",
    "gettraceasstring",
    "gettype",
    "glob",
    "global",
    "globals",
    "gmdate",
    "gmmktime",
    "gmstrftime",
    "gregoriantojd",
    "halt compiler",
    "haschildren",
    "header",
    "header remove",
    "headers list",
    "headers sent",
    "hebrev",
    "hebrevc",
    "hex2bin",
    "hexdec",
    "highlight file",
    "highlight string",
    "hrtime",
    "htmlentities",
    "htmlspecialchars",
    "htmlspecialchars decode",
    "hypot",
    "idate",
    "if",
    "implements",
    "implode",
    "in array",
    "include",
    "include once",
    "indexed arrays",
    "inet ntop",
    "inet pton",
    "info",
    "init",
    "insert id",
    "instanceof",
    "insteadof",
    "intdiv",
    "interface",
    "intval",
    "ip2long",
    "is array",
    "is bool",
    "is callable",
    "is countable",
    "is dir",
    "is double",
    "is executable",
    "is file",
    "is finite",
    "is float",
    "is infinite",
    "is int",
    "is integer",
    "is iterable",
    "is link",
    "is long",
    "is nan",
    "is null",
    "is numeric",
    "is object",
    "is readable",
    "is real",
    "is resource",
    "is scalar",
    "is string",
    "is writable",
    "is writeable",
    "isset",
    "javascript",
    "jddayofweek",
    "jdmonthname",
    "jdtofrench",
    "jdtogregorian",
    "jdtojewish",
    "jdtojulian",
    "jdtounix",
    "jewishtojd",
    "join",
    "json decode",
    "json encode",
    "juliantojd",
    "key",
    "kill",
    "krsort",
    "ksort",
    "lcfirst",
    "lcg value",
    "lchgrp",
    "lchown",
    "levenshtein",
    "link",
    "linkinfo",
    "list",
    "localeconv",
    "localtime",
    "log",
    "log10",
    "log1p",
    "long2ip",
    "lstat",
    "ltrim",
    "mail",
    "max",
    "md5",
    "md5 file",
    "metaphone",
    "microtime",
    "min",
    "mkdir",
    "mktime",
    "modify strings",
    "money format",
    "more results"
  ],
  "objectives": [
    "View your completed tutorials, exercises, and quizzes",
    "Keep an eye on your progress and daily streaks",
    "Set goals and create learning paths",
    "Create your own personal website"
  ]
}