{
  "course_name": "Ai",
  "description": "Machine Learning is a subfield of Artificial intelligence \"Learning machines to imitate human intelligence\" Traditional programming uses algorithms to produce results from data: Data + Algorithms = Results Machine learning creates algorithms from data and results: Data + Results = Algorithms Neural Networks is: Neural Networks are based on how the human brain works:\nNeurons are sending messages to each other. While the neurons are trying to solve a problem (over and over again), it is strengthening the connections that lead to success and diminishing the connections that lead to failure. The Perceptron defines the first step into Neural Networks. It represents a single neuron with only one input layer, and no hidden layers. Learn how to program a perceptron. Neural Networks are Multi-Layer Perceptrons. In its simplest form, a neural network is made up from: In the Neural Network Model, input data (yellow) are processed against a hidden layer (blue) before producing the final output (re",
  "course_summary": [
    {
      "title": "Artificial Intelligence",
      "summary": "Artificial Intelligence\nIs a Contrast to\nHuman Intelligence\nWhat is Artificial Intelligence?\nArtificial Intelligence suggest that machines can mimic humans in:\nTalking\nThinking\nLearning\nPlanning\nUnderstanding\nArtificial Intelligence is also called Machine Intelligence and Computer Intelligence.\nArthur Samuel 1959:\n\"Machine Learning is a subfield of computer science that gives computers the ability to learn without being programmed\"\nArthur Samuel, IBM Journal of Research and Development, Vol. 3, 1959.\nWikipedia 2022:\nArtificial intelligence is intelligence demonstrated by machines. Unlike natural intelligence displayed by humans and animals, which involves consciousness and emotionality.\nInvestopedia 2022:\nArtificial intelligence refers to the simulation of human intelligence in machines that are programmed to think like humans and mimic their actions.\nIBM 2022:\nArtificial intelligence leverages computers and machines to mimic the problem-solving and decision-making capabilities of the human mind.\nBritannica 2022:\nArtificial intelligence is the ability of a digital computer or computer-controlled robot to perform tasks commonly associated with intelligent beings, .... such as the ability to reason, discover meaning, generalize, or learn from past experience.\nArtificial Intelligence (AI)\nArtificial Intelligence is a scientific discipline embracing several Data Science fields ranging from narrow AI to strong AI, including machine learning, deep learning, big data and data mining.\nNarrow AI\nNarrow Artificial Intelligence is limited to narrow (specific) areas like most of the AI we have around us today:\nEmail spam Filters\nText to Speech\nSpeech Recognition\nSelf Driving Cars\nE-Payment\nGoogle Maps\nText Autocorrect\nAutomated Translation\nChatbots\nSocial Media\nFace Detection\nVisual Perception\nSearch Algorithms\nRobots\nAutomated Investment\nNLP - Natural Language Processing\nFlying Drones\nIBM's Dr. Watson\nApple's Siri\nMicrosoft's Cortana\nAmazon's Alexa\nNetflix's Recommendations\nNarrow AI is also called Weak AI.\nWeak AI: Built to simulate human intelligence.\nStrong AI: Built to copy human intelligence.\nREMOVE ADS\nStrong AI\nStrong Artificial Intelligence is the type of AI that mimics human intelligence.\nStrong AI indicates the ability to think, plan, learn, and communicate.\nStrong AI is the theoretical next level of AI: True Intelligence.\nStrong AI moves towards machines with self-awareness, consciousness, and objective thoughts.\n✔ One need not decide if a machine can \"think\".\nOne need only decide if a machine can act as intelligently as a human.\nAlan Turing",
      "examples": []
    },
    {
      "title": "Machine Learning Languages",
      "summary": "Programming languages involved in Machine Learning and Artificial Intelligence are:\nLISP\nR\nPython\nC++\nJava\nJavaScript\nSQL\nLISP\nLISP is the second oldest programming language in the world (1958), one year younger than Fortran (1957).\nThe term Artificial Intelligence was made up by John McCarthy who invented LISP.\nLISP was founded on the theory of Recursive Functions (self modifying functions), and this is very suitable for Machine Learning programs where \"self-learning\" is an important part of the program.\nThe R Language\nR is a programming language for Graphics and Statistical computing.\nR is supported by the R Foundation for Statistical Computing.\nR comes with a wide set of statistical and graphical techniques for:\nLinear Modeling\nNonlinear Modeling\nStatistical Tests\nTime-series Analysis\nClassification\nClustering\nPython\nPython is a general-purpose coding language. It can be used for all types of programming and software development.\nPython is typically used for server development, like building web apps for web servers.\nPython is also typically used in Data Science.\nAn advantage for using Python is that it comes with some very suitable libraries:\nNumPy (Library for working with Arrays)\nSciPy (Library for Statistical Science)\nMatplotlib (Graph Plotting Library)\nNLTK (Natural Language Toolkit)\nTensorFlow (Machine Learning)\nSource: Octoverse\nC++\nC++ holds the title: \"The worlds fastest programming language\".\nBecause of the speed, C++ is a preferred language when programming Computer Games.\nIt provides faster execution and has less response time which is applied in search engines and development of computer games.\nGoogle uses C++ in Artificial Intelligence and Machine Learning programs for SEO (Search Engine Optimization).\nSHARK is a super-fast C++ library with support for supervised learning algorithms, linear regression, neural networks, and clustering.\nMLPACK is also a super-fast machine learning library for C++.\nJava\nJava is another general-purpose coding language that can be used for all types of software development.\nFor Machine Learning, Java is mostly used to create algorithms, and neural networks.\nSQL\nSQL (Structured Query Language) is the most popular language for managing data.\nKnowledge of SQL databases, tables and queries helps data scientists when dealing with data.\nSQL is very convenient for storing, manipulating, and retrieving data in databases.",
      "examples": []
    },
    {
      "title": "Machine Learning in JavaScript",
      "summary": "Traditionally, Machine Learning applications are using R or Python.\nBut JavaScript has a great future as a Machine Learning language:\nJavaScript is well known. All developers can use it.\nSecurity is built in. JavaScript cannot access your files.\nJavaScript is faster than Python.\nJavaScript can use hardware acceleration.\nJavaScript runs in the browser\nJavaScript is Good for Machine Learning\nMachine Learning can be math-heavy. The nature of neural networks is highly technical, and the jargon that goes along with it tends to scare people away.\nThis is where JavaScript comes to help, with easy to understand software to simplifying the process of creating and training neural networks.\nWith new Machine Learning libraries, JavaScript developers can add Machine Learning and Artificial Intelligence to web applications.\nJavaScript Machine Learning Libraries\nMachine Learning in the Browser means:\nMachine Learning in JavaScript\nMachine Learning for the Web\nMachine Learning for Everyone\nMachine Learning on more Platforms\nAdvantages:\nEasy to use. Nothing to install.\nPowerful graphics. Browsers support WebGL.\nBetter privacy. Data can stay on the client.\nMore platforms. JavaScript runs on mobile devices.\nBrain.js\nBrain.js is a JavaScript library that makes it easy to understand Neural Networks because it hides the complexity of the mathematics.\nBrain.js is simple to use. You do not need to know neural networks in details to work with Brain.js.\nBrain.js provides multiple neural network implementations as different neural nets can be trained to do different things well.\nLearn More ...\nml5.js\nml5.js is trying to make machine learning more accessible to a wider audience.\nThe ml5 team is working to wrap machine learning functionality in friendlier ways.\nThe example below uses only three lines of code to classify an image:\nTry substitute pic1.jpg with pic2.jpg, pic3.jpg and pic4.jpg.\nTensorFlow\nTensorFlow Playground is a web application written in d3.js.\nWith TensorFlow Playground you can learn about Neural Networks (NN) without math.\nIn your own Web Browser you can create a Neural Network and see the result.\nTensorFlow.js was previously called Tf.js and Deeplearn.js.\nMath in the Browser\nMath.js is an extensive math library for JavaScript and Node.js.\nMath.js is powerful and easy to use. It comes with a large set of built-in functions, a flexible expression parser, and solutions to work with many data types like numbers, big numbers, complex numbers, fractions, units, arrays, and matrices.\nREMOVE ADS\nPlotting in the Browser\nHere is a list of some JavaScript libraries to use for both Machine Learning graphs and other HTML charts:\nHTML Canvas\nPlotly.js\nChart.js\nGoogle Chart\nD3.js\nPlotting Equations\nEnter Equation:\nTry it Yourself »\nPlotting Values\nEnter X and Y Values:\nTry it Yourself »\nWebGL API\nWebGL is a JavaScript API for rendering 2d and 3D graphics in any browser.\nWebGL can run on both integrated and standalone graphic cards in any PC.\nWebGL brings 3D graphics to the web browser. Major browser vendors Apple (Safari), Google (Chrome), Microsoft (Edge), and Mozilla (Firefox) are members of the WebGL Working Group.",
      "examples": [
        "<img id=\"myImage\" src=\"pic1.jpg\" width=\"100%\">\n\n<script>\nconst classifier = ml5.imageClassifier('MobileNet');\nclassifier.classify(document.getElementById(\"myImage\"), gotResult);\nfunction gotResult(error, results)\n{ ... }\n</script>"
      ]
    },
    {
      "title": "Machine Learning Examples",
      "summary": "Image Classification Example\nClick to Classify Picture\nClick to Change Picture\nArtificial Music Intelligence\nCan an algorithm compose better music than a human?\nDavid Cope is a former professor of music at the University of Santa Cruz (California).\nFor over 30 years, David Cope has been developing Emmy or EMI (Experimental Musical Intelligence), an algorithm to compose music in the style of famous composers.\nBach, Larson, or EMI?\nIn a test performed by professor Douglas Hofstadter of the University of Oregon, a pianist performed three musical pieces in the style of Bach:\nOne written by Bach\nOne written by Steve Larson\nOne written by EMI\nDr. Larson was hurt when the audience concluded that his piece was written by EMI.\nHe felt better when the listeners decided that the piece composed by EMI was a genuine Bach.\nSource: New York Times\nDavid Cope Emmy Vivaldi\nProject Baseline\nProject Baseline is an initiative to make it easy for everyone to contribute to the map of human health and to participate in clinical research.\nIn Project Baseline, researchers, clinicians, engineers, designers, advocates, and volunteers, can collaborate building the next generation of healthcare tools and services.\nData Scientists\nData Scientists can be experts in multiple disciplines:\nApplied mathematics\nComputational statistics\nComputer Science\nMachine learning\nDeep learning\nData Scientists also have significant big data experience:\nBusiness Intelligence\nData Base Design\nData Warehouse Design\nData Mining\nSQL Queries\nSQL Reporting\nArtificial Intelligence is a scientific discipline embracing several Data Science fields ranging from narrow AI to strong AI, including machine learning, deep learning, big data and data mining.\nREMOVE ADS\nArtificial Health Intelligence\nThe Corona Pandemic pushed the need for optimizing Medical Healthcare.\nMachine learning is a new technology that can provide better drug discovery, shorter development time, and lower drug costs.\nMachine Learning enables healthcare to use \"big data\" for making better medical or clinical decisions.\nFDA Statement\nStatement from FDA Commissioner Scott Gottlieb, M.D. on steps toward a new, tailored review framework for artificial intelligence-based medical devices:\n\"Artificial intelligence and machine learning have the potential to fundamentally transform the delivery of health care. As technology and science advance, we can expect to see earlier disease detection, more accurate diagnosis, more targeted therapies and significant improvements in personalized medicine\".",
      "examples": []
    },
    {
      "title": "Linear Graphs",
      "summary": "Machine Learning often uses line graphs to show relationships.\nA line graph displays the values of a linear function: y = ax + b\nImportant keywords:\nLinear (Straight)\nSlope (Angle)\nIntercept (Start value)\nLinear\nLinear means straight. A linear graph is a straight line.\nThe graph consists of two axes: x-axis (horizontal) and y-axis (vertical).\nExample\nREMOVE ADS\nSlope\nThe slope is the angle of the graph.\nThe slope is the a value in a linear graph:\ny = ax\nIn this example, slope = 1.2:\nExample\nIntercept\nThe Intercept is the start value of the graph.\nThe intercept is the b value in a linear graph:\ny = ax + b\nIn this example, slope = 1.2 and intercept = 7:\nExample",
      "examples": [
        "const xValues = [];\nconst yValues = [];\n\n// Generate values\nfor (let x = 0; x <= 10; x += 1) {\nxValues.push(x);\nyValues.push(x);\n}\n\n// Define Data\nconst data = [{\nx: xValues,\ny: yValues,\nmode: \"lines\"\n}];\n\n// Define Layout\nconst layout = {title: \"y = x\"};\n\n// Display using Plotly\nPlotly.newPlot(\"myPlot\", data, layout);",
        "let slope = 1.2;\nconst xValues = [];\nconst yValues = [];\n\n// Generate values\nfor (let x = 0; x <= 10; x += 1) {\nxValues.push(x);\nyValues.push(x * slope);\n}\n\n// Define Data\nconst data = [{\nx: xValues,\ny: yValues,\nmode: \"lines\"\n}];\n// Define Layout\nconst layout = {title: \"Slope=\" + slope};\n\n// Display using Plotly\nPlotly.newPlot(\"myPlot\", data, layout);",
        "let slope = 1.2;\nlet intercept = 7;\nconst xValues = [];\nconst yValues = [];\n\n// Generate values\nfor (let x = 0; x <= 10; x += 1) {\nxValues.push(x);\nyValues.push(x * slope + intercept);\n}\n\n// Define Data\nconst data = [{\nx: xValues,\ny: yValues,\nmode: \"lines\"\n}];\n\n// Define Layout\nconst layout = {title: \"Slope=\" + slope + \" Intercept=\" + intercept};\n\n// Display using Plotly\nPlotly.newPlot(\"myPlot\", data, layout);"
      ]
    },
    {
      "title": "Scatter Plots",
      "summary": "Data Collections\nScatter Plots\nGraphs\nData Collection\nCollecting data is the most important part of any Machine Intelligence projects.\nThe most common data to collect are numbers and measurements.\nOften data are stored in arrays representing the relationship between values.\nThis table contains house prices versus size:\nScatter Plots\nA Scatter Plot has points scattered over an area representing the relationship between two values.\nExample\nREMOVE ADS\nGraphs\nA Graph can also be used to show the same values:\nSource Code\nTry it Yourself »\nWhen to Use Scatter Plots\nScatter plots are great for:\nSeeing the \"Big Picture\"\nCompare different values\nDiscovering potential trends\nDiscovering patterns in data\nDiscovering relationships between data\nDiscovering Clusters and Correlations",
      "examples": [
        "const xArray = [50,60,70,80,90,100,110,120,130,140,150];\nconst yArray = [7,8,8,9,9,9,10,11,14,14,15];\n\n// Define Data\nconst data = [{\nx: xArray,\ny: yArray,\nmode:\"markers\"\n}];\n\n// Define Layout\nconst layout = {\nxaxis: {range: [40, 160], title: \"Square Meters\"},\nyaxis: {range: [5, 16], title: \"Price in Millions\"},\ntitle: \"House Prices vs. Size\"\n};\n\n// Display with Plotly\nPlotly.newPlot(\"myPlot\", data, layout);",
        "const xArray = [50,60,70,80,90,100,110,120,130,140,150];\nconst yArray = [7,8,8,9,9,9,10,11,14,14,15];\n\n// Define Data\nconst data = [{\nx: xArray,\ny:yArray,\nmode:\"lines\"\n}];\n\n// Define Layout\nconst layout = {\nxaxis: {range: [40, 160], title: \"Square Meters\"},\nyaxis: {range: [5, 16], title: \"Price in Millions\"},\ntitle: \"House Prices vs Size\"\n};\n\n// Display with Plotly\nPlotly.newPlot(\"myPlot\", data, layout);"
      ]
    },
    {
      "title": "Perceptrons",
      "summary": "A Perceptron is an Artificial Neuron.\nIt is the simplest possible Neural Network.\nNeural Networks are the building blocks of Machine Learning.\nFrank Rosenblatt\nFrank Rosenblatt (1928 – 1971) was an American psychologist notable in the field of Artificial Intelligence.\nIn 1957 he started something really big. He \"invented\" a Perceptron program, on an IBM 704 computer at Cornell Aeronautical Laboratory.\nScientists had discovered that brain cells (Neurons) receive input from our senses by electrical signals.\nThe Neurons, then again, use electrical signals to store information, and to make decisions based on previous input.\nFrank had the idea that Perceptrons could simulate brain principles, with the ability to learn and make decisions.\nThe Perceptron\nThe original Perceptron was designed to take a number of binary inputs, and produce one binary output (0 or 1).\nThe idea was to use different weights to represent the importance of each input, and that the sum of the values should be greater than a threshold value before making a decision like yes or no (true or false) (0 or 1).\nPerceptron Example\nImagine a perceptron (in your brain).\nThe perceptron tries to decide if you should go to a concert.\nIs the artist good? Is the weather good?\nWhat weights should these facts have?\nThe Perceptron Algorithm\nFrank Rosenblatt suggested this algorithm:\nSet a threshold value\nMultiply all inputs with its weights\nSum all the results\nActivate the output\n1. Set a threshold value:\nThreshold = 1.5\n2. Multiply all inputs with its weights:\nx1 * w1 = 1 * 0.7 = 0.7\nx2 * w2 = 0 * 0.6 = 0\nx3 * w3 = 1 * 0.5 = 0.5\nx4 * w4 = 0 * 0.3 = 0\nx5 * w5 = 1 * 0.4 = 0.4\n3. Sum all the results:\n0.7 + 0 + 0.5 + 0 + 0.4 = 1.6 (The Weighted Sum)\n4. Activate the Output:\nReturn true if the sum > 1.5 (\"Yes I will go to the Concert\")\nNote\nIf the weather weight is 0.6 for you, it might be different for someone else. A higher weight means that the weather is more important to them.\nIf the threshold value is 1.5 for you, it might be different for someone else. A lower threshold means they are more wanting to go to any concert.\nExample\nTry it Yourself »\nREMOVE ADS\nPerceptron in AI\nA Perceptron is an Artificial Neuron.\nIt is inspired by the function of a Biological Neuron.\nIt plays a crucial role in Artificial Intelligence.\nIt is an important building block in Neural Networks.\nTo understand the theory behind it, we can break down its components:\nPerceptron Inputs (nodes)\nNode values (1, 0, 1, 0, 1)\nNode Weights (0.7, 0.6, 0.5, 0.3, 0.4)\nSummation\nTreshold Value\nActivation Function\nSummation (sum > treshold)\n1. Perceptron Inputs\nA perceptron receives one or more input.\nPerceptron inputs are called nodes.\nThe nodes have both a value and a weight.\n2. Node Values (Input Values)\nInput nodes have a binary value of 1 or 0.\nThis can be interpreted as true or false / yes or no.\nThe values are: 1, 0, 1, 0, 1\n3. Node Weights\nWeights are values assigned to each input.\nWeights shows the strength of each node.\nA higher value means that the input has a stronger influence on the output.\nThe weights are: 0.7, 0.6, 0.5, 0.3, 0.4\n4. Summation\nThe perceptron calculates the weighted sum of its inputs.\nIt multiplies each input by its corresponding weight and sums up the results.\nThe sum is: 0.7*1 + 0.6*0 + 0.5*1 + 0.3*0 + 0.4*1 = 1.6\n6. The Threshold\nThe Threshold is the value needed for the perceptron to fire (outputs 1), otherwise it remains inactive (outputs 0).\nIn the example, the treshold value is: 1.5\n5. The Activation Function\nAfter the summation, the perceptron applies the activation function.\nThe purpose is to introduce non-linearity into the output. It determines whether the perceptron should fire or not based on the aggregated input.\nThe activation function is simple: (sum > treshold) == (1.6 > 1.5)\nThe Output\nThe final output of the perceptron is the result of the activation function.\nIt represents the perceptron's decision or prediction based on the input and the weights.\nThe activation function maps the the weighted sum into a binary value.\nThe binary 1 or 0 can be interpreted as true or false / yes or no.\nThe output is 1 because: (sum > treshold) == true.\nPerceptron Learning\nThe perceptron can learn from examples through a process called training.\nDuring training, the perceptron adjusts its weights based on observed errors. This is typically done using a learning algorithm such as the perceptron learning rule or a backpropagation algorithm.\nThe learning process presents the perceptron with labeled examples, where the desired output is known. The perceptron compares its output with the desired output and adjusts its weights accordingly, aiming to minimize the error between the predicted and desired outputs.\nThe learning process allows the perceptron to learn the weights that enable it to make accurate predictions for new, unknown inputs.\nNote\nIt is obvious a decisions can NOT be made by One Neuron alone.\nOther neurons must provide more input:\nIs the artist good\nIs the weather good\n...\nMulti-Layer Perceptrons can be used for more sophisticated decision making.\nIt's important to note that while perceptrons were influential in the development of artificial neural networks, they are limited to learning linearly separable patterns.\nHowever, by stacking multiple perceptrons together in layers and incorporating non-linear activation functions, neural networks can overcome this limitation and learn more complex patterns.\nNeural Networks\nThe Perceptron defines the first step into Neural Networks:\nPerceptrons are often used as the building blocks for more complex neural networks, such as multi-layer perceptrons (MLPs) or deep neural networks (DNNs).\nBy combining multiple perceptrons in layers and connecting them in a network structure, these models can learn and represent complex patterns and relationships in data, enabling tasks such as image recognition, natural language processing, and decision making.",
      "examples": [
        "const threshold = 1.5;\nconst inputs = [1, 0, 1, 0, 1];\nconst weights = [0.7, 0.6, 0.5, 0.3, 0.4];\n\nlet sum = 0;\nfor (let i = 0; i < inputs.length; i++) {\nsum += inputs[i] * weights[i];\n}\n\nconst activate = (sum > 1.5);"
      ]
    },
    {
      "title": "Pattern Recognition",
      "summary": "Neural Networks are used in applications like Facial Recognition.\nThese applications use Pattern Recognition.\nThis type of Classification can be done with a Perceptron.\nPerceptrons can be used to classify data into two parts.\nPerceptrons are also known as a Linear Binary Classifiers.\nPattern Classification\nImagine a strait line (a linear graph) in a space with scattered x y points.\nHow can you classify the points over and under the line?\nA perceptron can be trained to recognize the points over the line, without knowing the formula for the line.\nREMOVE ADS\nHow to Program a Perceptron\nTo program a perceptron, we can use a simple JavaScript program that will:\nCreate a simple plotter\nCreate 500 random x y points\nDisplay the x y points\nCreate a line function: f(x)\nDisplay the line\nCompute the desired answers\nDisplay the desired answers\nCreate a Simple Plotter\nCreating a simple plotter object is described in the AI Canvas Chapter.\nExample\nCreate Random X Y Points\nCreate as many xy points as wanted.\nLet the x values be random (between 0 and maximum).\nLet the y values be random (between 0 and maximum).\nDisplay the points in the plotter:\nExample\nTry it Yourself »\nCreate a Line Function\nDisplay the line in the plotter:\nExample\nTry it Yourself »\nCompute Correct Answers\nCompute the correct answers based on the line function:\ny = x * 1.2 + 50.\nThe desired answer is 1 if y is over the line and 0 if y is under the line.\nStore the desired answers in an array (desired[]).\nExample\nDisplay the Correct Answers\nFor each point, if desired[i] = 1 display a black point, else display a blue point.\nExample\nTry it Yourself »\nHow to Train a Perceptron\nIn the next chapter, you will learn how to use the correct answers to:\nTrain a perceptron to predict the output values of unknown input values.",
      "examples": [
        "const plotter = new XYPlotter(\"myCanvas\");\nplotter.transformXY();\n\nconst xMax = plotter.xMax;\nconst yMax = plotter.yMax;\nconst xMin = plotter.xMin;\nconst yMin = plotter.yMin;",
        "const numPoints = 500;\nconst xPoints = [];\nconst yPoints = [];\nfor (let i = 0; i < numPoints; i++) {\nxPoints[i] = Math.random() * xMax;\nyPoints[i] = Math.random() * yMax;\n}",
        "function f(x) {\nreturn x * 1.2 + 50;\n}",
        "let desired = [];\nfor (let i = 0; i < numPoints; i++) {\ndesired[i] = 0;\nif (yPoints[i] > f(xPoints[i])) {desired[i] = 1;}\n}",
        "for (let i = 0; i < numPoints; i++) {\nlet color = \"blue\";\nif (desired[i]) color = \"black\";\nplotter.plotPoint(xPoints[i], yPoints[i], color);\n}"
      ]
    },
    {
      "title": "Training a Perceptron",
      "summary": "Create a Perceptron Object\nCreate a Training Function\nTrain the perceptron against correct answers\nTraining Task\nImagine a straight line in a space with scattered x y points.\nTrain a perceptron to classify the points over and under the line.\nCreate a Perceptron Object\nCreate a Perceptron object. Name it anything (like Perceptron).\nLet the perceptron accept two parameters:\nThe number of inputs (no)\nThe learning rate (learningRate).\nSet the default learning rate to 0.00001.\nThen create random weights between -1 and 1 for each input.\nExample\nThe Random Weights\nThe Perceptron will start with a random weight for each input.\nThe Learning Rate\nFor each mistake, while training the Perceptron, the weights will be adjusted with a small fraction.\nThis small fraction is the \"Perceptron's learning rate\".\nIn the Perceptron object we call it learnc.\nThe Bias\nSometimes, if both inputs are zero, the perceptron might produce an incorrect output.\nTo avoid this, we give the perceptron an extra input with the value of 1.\nThis is called a bias.\nREMOVE ADS\nAdd an Activate Function\nRemember the perceptron algorithm:\nMultiply each input with the perceptron's weights\nSum the results\nCompute the outcome\nExample\nThe activation function will output:\n1 if the sum is greater than 0\n0 if the sum is less than 0\nCreate a Training Function\nThe training function guesses the outcome based on the activate function.\nEvery time the guess is wrong, the perceptron should adjust the weights.\nAfter many guesses and adjustments, the weights will be correct.\nExample\nTry it Yourself »\nBackpropagation\nAfter each guess, the perceptron calculates how wrong the guess was.\nIf the guess is wrong, the perceptron adjusts the bias and the weights so that the guess will be a little bit more correct the next time.\nThis type of learning is called backpropagation.\nAfter trying (a few thousand times) your perceptron will become quite good at guessing.\nCreate Your Own Library\nLibrary Code\nNow you can include the library in HTML:\nUse Your Library\nExample\nTry it Yourself »",
      "examples": [
        "// Perceptron Object\nfunction Perceptron(no, learningRate = 0.00001) {\n\n// Set Initial Values\nthis.learnc = learningRate;\nthis.bias = 1;\n\n// Compute Random Weights\nthis.weights = [];\nfor (let i = 0; i <= no; i++) {\nthis.weights[i] = Math.random() * 2 - 1;\n}\n\n// End Perceptron Object\n}",
        "this.activate = function(inputs) {\nlet sum = 0;\nfor (let i = 0; i < inputs.length; i++) {\nsum += inputs[i] * this.weights[i];\n}\nif (sum > 0) {return 1} else {return 0}\n}",
        "this.train = function(inputs, desired) {\ninputs.push(this.bias);\nlet guess = this.activate(inputs);\nlet error = desired - guess;\nif (error != 0) {\nfor (let i = 0; i < inputs.length; i++) {\nthis.weights[i] += this.learnc * error * inputs[i];\n}\n}\n}",
        "// Perceptron Object\nfunction Perceptron(no, learningRate = 0.00001) {\n\n// Set Initial Values\nthis.learnc = learningRate;\nthis.bias = 1;\n\n// Compute Random Weights\nthis.weights = [];\nfor (let i = 0; i <= no; i++) {\nthis.weights[i] = Math.random() * 2 - 1;\n}\n\n// Activate Function\nthis.activate = function(inputs) {\nlet sum = 0;\nfor (let i = 0; i < inputs.length; i++) {\nsum += inputs[i] * this.weights[i];\n}\nif (sum > 0) {return 1} else {return 0}\n}\n\n// Train Function\nthis.train = function(inputs, desired) {\ninputs.push(this.bias);\nlet guess = this.activate(inputs);\nlet error = desired - guess;\nif (error != 0) {\nfor (let i = 0; i < inputs.length; i++) {\nthis.weights[i] += this.learnc * error * inputs[i];\n}\n}\n}\n\n// End Perceptron Object\n}",
        "<script src=\"myperceptron.js\"></script>",
        "// Initiate Values\nconst numPoints = 500;\nconst learningRate = 0.00001;\n\n// Create a Plotter\nconst plotter = new XYPlotter(\"myCanvas\");\nplotter.transformXY();\nconst xMax = plotter.xMax;\nconst yMax = plotter.yMax;\nconst xMin = plotter.xMin;\nconst yMin = plotter.yMin;\n\n// Create Random XY Points\nconst xPoints = [];\nconst yPoints = [];\nfor (let i = 0; i < numPoints; i++) {\nxPoints[i] = Math.random() * xMax;\nyPoints[i] = Math.random() * yMax;\n}\n\n// Line Function\nfunction f(x) {\nreturn x * 1.2 + 50;\n}\n\n//Plot the Line\nplotter.plotLine(xMin, f(xMin), xMax, f(xMax), \"black\");\n\n// Compute Desired Answers\nconst desired = [];\nfor (let i = 0; i < numPoints; i++) {\ndesired[i] = 0;\nif (yPoints[i] > f(xPoints[i])) {desired[i] = 1}\n}\n\n// Create a Perceptron\nconst ptron = new Perceptron(2, learningRate);\n\n// Train the Perceptron\nfor (let j = 0; j <= 10000; j++) {\nfor (let i = 0; i < numPoints; i++) {\nptron.train([xPoints[i], yPoints[i]], desired[i]);\n}\n}\n\n// Display the Result\nfor (let i = 0; i < numPoints; i++) {\nconst x = xPoints[i];\nconst y = yPoints[i];\nlet guess = ptron.activate([x, y, ptron.bias]);\nlet color = \"black\";\nif (guess == 0) color = \"blue\";\nplotter.plotPoint(x, y, color);\n}"
      ]
    },
    {
      "title": "Testing a Perceptron",
      "summary": "A Perceptron must be Tested and Evaluated.\nA Perceptron must be tested against Real Values.\nTest Your Library\nGenerate new unknown points and check if your Perceptron can guess the right answers:\nExample\nTry it Yourself »\nCount the Errors\nAdd a counter to count the number of errors:\nExample\nTry it Yourself »\nTune the Perceptron\nHow can you tune the Perceptron?\nHere are some suggestions:\nAdjust the learning rate\nIncrease the number of training data\nIncrease the number of training iterations",
      "examples": [
        "// Test Against Unknown Data\nconst counter = 500;\nfor (let i = 0; i < counter; i++) {\nlet x = Math.random() * xMax;\nlet y = Math.random() * yMax;\nlet guess = ptron.activate([x, y, ptron.bias]);\nlet color = \"black\";\nif (guess == 0) color = \"blue\";\nplotter.plotPoint(x, y, color);\n}",
        "// Test Against Unknown Data\nconst counter = 500;\nlet errors = 0;\nfor (let i = 0; i < counter; i++) {\nlet x = Math.random() * xMax;\nlet y = Math.random() * yMax;\nlet guess = ptron.activate([x, y, ptron.bias]);\nlet color = \"black\";\nif (guess == 0) color = \"blue\";\nplotter.plotPoint(x, y, color);\nif ((y > f(x) && guess == 0) || (y < f(x) && guess == 1)) {errors++}\n}"
      ]
    },
    {
      "title": "Machine Learning",
      "summary": "Learning is Looping\nAn ML model is Trained by Looping over data multiple times.\nFor each iteration, the Weight Values are adjusted.\nTraining is complete when the iterations fails to Reduce the Cost.\nTrain me to find the line of best fit:\n100 times 200 times 300 times 500 times\nTry it Yourself »\nGradient Descent\nGradient Descent is a popular algorithm for solving AI problems.\nA simple Linear Regression Model can be used to demonstrate a gradient descent.\nThe goal of a linear regression is to fit a linear graph to a set of (x,y) points. This can be solved with a math formula. But a Machine Learning Algorithm can also solve this.\nThis is what the example above does.\nIt starts with a scatter plot and a linear model (y = wx + b).\nThen it trains the model to find a line that fits the plot. This is done by altering the weight (slope) and the bias (intercept) of the line.\nBelow is the code for a Trainer Object that can solve this problem (and many other problems).\nA Trainer Object\nCreate a Trainer object that can take any number of (x,y) values in two arrays (xArr,yArr).\nSet weight to zero and the bias to 1.\nA learning constant (learnc) has to be set, and a cost variable must be defined:\nExample\nREMOVE ADS\nCost Function\nA standard way to solve a regression problem is with an \"Cost Function\" that measures how good the solution is.\nThe function uses the weight and bias from the model (y = wx + b) and returns an error, based on how well the line fits a plot.\nThe way to compute this error is to loop through all (x,y) points in the plot, and sum the square distances between the y value of each point and the line.\nThe most conventional way is to square the distances (to ensure positive values) and to make the error function differentiable.\nAnother name for the Cost Function is Error Function.\nThe formula used in the function is actually this:\nE is the error (cost)\nN is the total number of observations (points)\ny is the value (label) of each observation\nx is the value (feature) of each observation\nm is the slope (weight)\nb is intercept (bias)\nmx + b is the prediction\n1/N * N∑1 is the squared mean value\nThe Train Function\nWe will now run a gradient descent.\nThe gradient descent algorithm should walk the cost function towards the best line.\nEach iteration should update both m and b towards a line with a lower cost (error).\nTo do that, we add a train function that loops over all the data many times:\nAn Update Weights Function\nThe train function above should update the weights and biases in each iteration.\nThe direction to move is calculated using two partial derivatives:\nCreate Your Own Library\nLibrary Code\nNow you can include the library in HTML:\nTry it Yourself »",
      "examples": [
        "function Trainer(xArray, yArray) {\nthis.xArr = xArray;\nthis.yArr = yArray;\nthis.points = this.xArr.length;\nthis.learnc = 0.00001;\nthis.weight = 0;\nthis.bias = 1;\nthis.cost;",
        "this.costError = function() {\ntotal = 0;\nfor (let i = 0; i < this.points; i++) {\ntotal += (this.yArr[i] - (this.weight * this.xArr[i] + this.bias)) **2;\n}\nreturn total / this.points;\n}",
        "this.train = function(iter) {\nfor (let i = 0; i < iter; i++) {\nthis.updateWeights();\n}\nthis.cost = this.costError();\n}",
        "this.updateWeights = function() {\nlet wx;\nlet w_deriv = 0;\nlet b_deriv = 0;\nfor (let i = 0; i < this.points; i++) {\nwx = this.yArr[i] - (this.weight * this.xArr[i] + this.bias);\nw_deriv += -2 * wx * this.xArr[i];\nb_deriv += -2 * wx;\n}\nthis.weight -= (w_deriv / this.points) * this.learnc;\nthis.bias -= (b_deriv / this.points) * this.learnc;\n}",
        "function Trainer(xArray, yArray) {\nthis.xArr = xArray;\nthis.yArr = yArray;\nthis.points = this.xArr.length;\nthis.learnc = 0.00001;\nthis.weight = 0;\nthis.bias = 1;\nthis.cost;\n\n// Cost Function\nthis.costError = function() {\ntotal = 0;\nfor (let i = 0; i < this.points; i++) {\ntotal += (this.yArr[i] - (this.weight * this.xArr[i] + this.bias)) **2;\n}\nreturn total / this.points;\n}\n\n// Train Function\nthis.train = function(iter) {\nfor (let i = 0; i < iter; i++) {\nthis.updateWeights();\n}\nthis.cost = this.costError();\n}\n\n// Update Weights Function\nthis.updateWeights = function() {\nlet wx;\nlet w_deriv = 0;\nlet b_deriv = 0;\nfor (let i = 0; i < this.points; i++) {\nwx = this.yArr[i] - (this.weight * this.xArr[i] + this.bias);\nw_deriv += -2 * wx * this.xArr[i];\nb_deriv += -2 * wx;\n}\nthis.weight -= (w_deriv / this.points) * this.learnc;\nthis.bias -= (b_deriv / this.points) * this.learnc;\n}\n\n} // End Trainer Object",
        "<script src=\"myailib.js\"></script>"
      ]
    },
    {
      "title": "ML Terminology",
      "summary": "Relationships\nLabels\nFeatures\nMachine Learning Relationships\nMachine learning systems uses Relationships between Inputs to produce Predictions.\nIn algebra, a relationship is often written as y = ax + b:\ny is the label we want to predict\na is the slope of the line\nx are the input values\nb is the intercept\nWith ML, a relationship is written as y = b + wx:\ny is the label we want to predict\nw is the weight (the slope)\nx are the features (input values)\nb is the intercept\nMachine Learning Labels\nIn Machine Learning terminology, the label is the thing we want to predict.\nIt is like the y in a linear graph:\nMachine Learning Features\nIn Machine Learning terminology, the features are the input.\nThey are like the x values in a linear graph:\nSometimes there can be many features (input values) with different weights:\ny = b + w1x1 + w2x2 + w3x3 + w4x4\nREMOVE ADS\nMachine Learning Models\nMachine Learning Training\nMachine Learning Inference\nMachine Learning Phases\nMachine Learning Models\nA Model defines the relationship between the label (y) and the features (x).\nThere are three phases in the life of a model:\nData Collection\nTraining\nInference\nMachine Learning Training\nThe goal of training is to create a model that can answer a question. Like what is the expected price for a house?\nMachine Learning Inference\nInference is when the trained model is used to infer (predict) values using live data. Like putting the model into production.\nMachine Learning Phases\nMachine learning has two main phases:\n1. Training:\nInput data are used to calculate the parameters of the model.\n2. Inference:\nThe \"trained\" model outputs correct data from any input.\nSupervised Machine Learning\nUnsupervised Machine Learning\nSelf-Supervised Machine Learning\nSupervised Learning\nSupervised Machine Learning uses a set of input variables to predict the value of an output variable.\nSupervised learning uses labeled data (data with known answers) to train algorithms to:\nClassify Data\nPredict Outcomes\nSupervised learning can classify data like \"What is spam in an e-mail\", based on known spam examples.\nSupervised learning can predict outcomes like predicting what kind of video you like, based on the videos you have played.\nUnsupervised Learning\nUnsupervised Machine Learning uses patterns from any unlabeled dataset, trying to understand patterns (or groupings) in the data.\nUnsupervised learning is used to predict undefined relationships like meaningful patterns in data.\nIt is about creating computer algorithms than can improve themselves.\nIt is expected that machine learning will shift to unsupervised learning to allow programmers to solve problems without creating models.\nReinforcement Learning\nReinforcement learning is based on non-supervised learning but receives feedback from the user whether the decision is good or bad. The feedback contributes to improving the model.\nSelf-Supervised Learning\nSelf-supervised learning is similar to unsupervised learning because it works with data without human added labels.\nThe difference is that unsupervised learning uses clustering, grouping, and dimensionality reduction, while self-supervised learning draw its own conclusions for regression and classification tasks.",
      "examples": []
    },
    {
      "title": "Machine Learning Data",
      "summary": "Up to 80% of a Machine Learning project is about Collecting Data:\nWhat data is Required?\nWhat data is Available?\nHow to Select the data?\nHow to Collect the data?\nHow to Clean the data?\nHow to Prepare the data?\nHow to Use the data?\nWhat is Data?\nData can be many things.\nWith Machine Learning, data is collections of facts:\nIntelligence Needs Data\nHuman intelligence needs data:\nA real estate broker needs data about sold houses to estimate prices.\nArtificial Intelligence also needs data:\nA Machine Learning program needs data to estimate prices.\nData can help us to see and understand.\nData can help us to find new opportunities.\nData can help us to resolve misunderstandings.\nHealthcare\nHealthcare and life sciences collect public health data and patient data to learn how to improve patient care and save lives.\nBusiness\nThe most successful companies in many sectors are data driven. They use sophisticated data analytics to learn how the company can perform better.\nFinance\nBanks and insurance companies collect and evaluate data about customers, loans and deposits to support strategic decision-making.\nStoring Data\nThe most common data to collect are Numbers and Measurements.\nOften data are stored in arrays representing the relationship between values.\nThis table contains house prices versus size:\nQuantitative vs. Qualitative\nQuantitative data are numerical:\n55 cars\n15 meters\n35 children\nQualitative data are descriptive:\nIt is cold\nIt is long\nIt was fun\nREMOVE ADS\nCensus or Sampling\nA Census is when we collect data for every member of a group.\nA Sample is when we collect data for some members of a group.\nIf we wanted to know how many Americans smoke cigarettes, we could ask every person in the US (a census), or we could ask 10 000 people (a sample).\nA census is Accurate, but hard to do. A sample is Inaccurate, but is easier to do.\nSampling Terms\nA Population is group of individuals (objects) we want to collect information from.\nA Census is information about every individual in a population.\nA Sample is information about a part of the population (In order to represent all).\nRandom Samples\nIn order for a sample to represent a population, it must be collected randomly.\nA Random Sample, is a sample where every member of the population has an equal chance to appear in the sample.\nSampling Bias\nA Sampling Bias (Error) occurs when samples are collected in such a way that some individuals are less (or more) likely to be included in the sample.\nBig Data\nBig data is data that is impossible for humans to process without the assistance of advanced machines.\nBig data does not have any definition in terms of size, but datasets are becoming larger and larger as we continously collect more and more data and store data at a lower and lower cost.\nData Mining\nWith big data comes complicated data structures.\nA huge part of big data processing is refining data.",
      "examples": []
    },
    {
      "title": "Data Clusters",
      "summary": "Clusters are collections of similar data\nClustering is a type of unsupervised learning\nThe Correlation Coefficient describes the strength of a relationship.\nClusters\nClusters are collections of data based on similarity.\nData points clustered together in a graph can often be classified into clusters.\nIn the graph below we can distinguish 3 different clusters:\nIdentifying Clusters\nClusters can hold a lot of valuable information, but clusters come in all sorts of shapes, so how can we recognize them?\nThe two main methods are:\nUsing Visualization\nUsing an Clustering Algorithm\nClustering\nClustering is a type of Unsupervised Learning.\nClustering is trying to:\nCollect similar data in groups\nCollect dissimilar data in other groups\nClustering Methods\nDensity Method\nHierarchical Method\nPartitioning Method\nGrid-based Method\nThe Density Method considers points in a dense regions to have more similarities and differences than points in a lower dense region. The density method has a good accuracy. It also has the ability to merge clusters.\nTwo common algorithms are DBSCAN and OPTICS.\nThe Hierarchical Method forms the clusters in a tree-type structure. New clusters are formed using previously formed clusters.\nTwo common algorithms are CURE and BIRCH.\nThe Grid-based Method formulates the data into a finite number of cells that form a grid-like structure.\nTwo common algorithms are CLIQUE and STING\nThe Partitioning Method partitions the objects into k clusters and each partition forms one cluster.\nOne common algorithm is CLARANS.\nREMOVE ADS\nCorrelation Coefficient\nThe Correlation Coefficient (r) describes the strength and direction of a linear relationship and x/y variables on a scatterplot.\nThe value of r is always between -1 and +1:\nPerfect Uphill +1.00:\nPerfect Downhill -1.00:\nStrong Uphill +0.61:\nNo Relationship:",
      "examples": []
    },
    {
      "title": "Linear Regressions",
      "summary": "A Regression is a method to determine the relationship between one variable (y) and other variables (x).\nIn statistics, a Linear Regression is an approach to modeling a linear relationship between y and x.\nIn Machine Learning, a Linear Regression is a supervised machine learning algorithm.\nScatter Plot\nThis is the scatter plot (from the previous chapter):\nExample\nPredicting Values\nFrom the scattered data above, how can we predict future prices?\nUse hand drawn linear graph\nModel a linear relationship\nModel a linear regression\nREMOVE ADS\nLinear Graphs\nThis is a linear graph predicting prices based on the lowest and the highest price:\nExample\nFrom a Previous Chapter\nA linear graph can be written as y = ax + b\nWhere:\ny is the price we want to predict\na is the slope of the line\nx are the input values\nb is the intercept\nLinear Relationships\nThis Model predicts prices using a linear relationship between price and size:\nExample\nIn the example above, the slope is a calculated average and the intercept = 0.\nUsing a Linear Regression Function\nThis Model predicts prices using a linear regression function:\nExample\nPolynomial Regression\nIf scattered data points do not fit a linear regression (a straight line through the points), the data may fit an polynomial regression.\nA Polynomial Regression, like linear regression, uses the relationship between the variables x and y to find the best way to draw a line through the data points.",
      "examples": [
        "const xArray = [50,60,70,80,90,100,110,120,130,140,150];\nconst yArray = [7,8,8,9,9,9,10,11,14,14,15];\n\n// Define Data\nconst data = [{\nx:xArray,\ny:yArray,\nmode: \"markers\"\n}];\n\n// Define Layout\nconst layout = {\nxaxis: {range: [40, 160], title: \"Square Meters\"},\nyaxis: {range: [5, 16], title: \"Price in Millions\"},\ntitle: \"House Prices vs. Size\"\n};\n\nPlotly.newPlot(\"myPlot\", data, layout);",
        "const xArray = [50,60,70,80,90,100,110,120,130,140,150];\nconst yArray = [7,8,8,9,9,9,9,10,11,14,14,15];\n\nconst data = [\n{x:xArray, y:yArray, mode:\"markers\"},\n{x:[50,150], y:[7,15], mode:\"line\"}\n];\n\nconst layout = {\nxaxis: {range: [40, 160], title: \"Square Meters\"},\nyaxis: {range: [5, 16], title: \"Price in Millions\"},\ntitle: \"House Prices vs. Size\"\n};\n\nPlotly.newPlot(\"myPlot\", data, layout);",
        "const xArray = [50,60,70,80,90,100,110,120,130,140,150];\nconst yArray = [7,8,8,9,9,9,10,11,14,14,15];\n\n// Calculate Slope\nlet xSum = xArray.reduce(function(a, b){return a + b;}, 0);\nlet ySum = yArray.reduce(function(a, b){return a + b;}, 0);\nlet slope = ySum / xSum;\n\n// Generate values\nconst xValues = [];\nconst yValues = [];\nfor (let x = 50; x <= 150; x += 1) {\nxValues.push(x);\nyValues.push(x * slope);\n}",
        "const xArray = [50,60,70,80,90,100,110,120,130,140,150];\nconst yArray = [7,8,8,9,9,9,10,11,14,14,15];\n\n// Calculate Sums\nlet xSum=0, ySum=0 , xxSum=0, xySum=0;\nlet count = xArray.length;\nfor (let i = 0, len = count; i < count; i++) {\nxSum += xArray[i];\nySum += yArray[i];\nxxSum += xArray[i] * xArray[i];\nxySum += xArray[i] * yArray[i];\n}\n\n// Calculate slope and intercept\nlet slope = (count * xySum - xSum * ySum) / (count * xxSum - xSum * xSum);\nlet intercept = (ySum / count) - (slope * xSum) / count;\n\n// Generate values\nconst xValues = [];\nconst yValues = [];\nfor (let x = 50; x <= 150; x += 1) {\nxValues.push(x);\nyValues.push(x * slope + intercept);\n}"
      ]
    },
    {
      "title": "Deep Learning (DL)",
      "summary": "The deep learning revolution started around 2010.\nSince then, Deep Learning has solved many \"unsolvable\" problems.\nThe deep learning revolution was not started by a single discovery. It more or less happened when several needed factors were ready:\nComputers were fast enough\nComputer storage was big enough\nBetter training methods were invented\nBetter tuning methods were invented\nNeurons\nScientists agree that our brain has between 80 and 100 billion neurons.\nThese neurons have hundreds of billions connections between them.\nImage credit: University of Basel, Biozentrum.\nNeurons (aka Nerve Cells) are the fundamental units of our brain and nervous system.\nThe neurons are responsible for receiving input from the external world, for sending output (commands to our muscles), and for transforming the electrical signals in between.\nNeural Networks\nArtificial Neural Networks are normally called Neural Networks (NN).\nNeural networks are in fact multi-layer Perceptrons.\nThe perceptron defines the first step into multi-layered neural networks.\nNeural Networks are the essence of Deep Learning.\nNeural Networks are one of the most significant discoveries in history.\nNeural Networks can solve problems that can NOT be solved by algorithms:\nMedical Diagnosis\nFace Detection\nVoice Recognition\nThe Neural Network Model\nInput data (Yellow) are processed against a hidden layer (Blue) and modified against another hidden layer (Green) to produce the final output (Red).\nTom Mitchell\nTom Michael Mitchell (born 1951) is an American computer scientist and University Professor at the Carnegie Mellon University (CMU).\nHe is a former Chair of the Machine Learning Department at CMU.\n\"A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E.\"\nTom Mitchell (1999)\nE: Experience (the number of times).\nT: The Task (driving a car).\nP: The Performance (good or bad).\nThe Giraffe Story\nIn 2015, Matthew Lai, a student at Imperial College in London created a neural network called Giraffe.\nGiraffe could be trained in 72 hours to play chess at the same level as an international master.\nComputers playing chess are not new, but the way this program was created was new.\nSmart chess playing programs take years to build, while Giraffe was built in 72 hours with a neural network.\nREMOVE ADS\nDeep Learning\nClassical programming uses programs (algorithms) to create results:\nTraditional Computing\nData + Computer Algorithm = Result\nMachine Learning uses results to create programs (algorithms):\nMachine Learning\nData + Result = Computer Algorithm\nMachine Learning\nMachine Learning is often considered equivalent with Artificial Intelligence.\nThis is not correct. Machine learning is a subset of Artificial Intelligence.\nMachine Learning is a discipline of AI that uses data to teach machines.\n\"Machine Learning is a field of study that gives computers the ability to learn without being programmed.\"\nArthur Samuel (1959)\nIntelligent Decision Formula\nSave the result of all actions\nSimulate all possible outcomes\nCompare the new action with the old ones\nCheck if the new action is good or bad\nChoose the new action if it is less bad\nDo it all over again\nThe fact that computers can do this millions of times, has proven that computers can make very intelligent decisions.",
      "examples": []
    },
    {
      "title": "Brain.js",
      "summary": "Brain.js is a JavaScript library that makes it easy to understand Neural Networks because it hides the complexity of the mathematics.\nBuilding a Neural Network\nBuilding a neural network with Brain.js:\nExample:\nExample Explained:\nA Neural Network is created with: new brain.NeuralNetwork()\nThe network is trained with network.train([examples])\nThe examples represent 4 input values with a corresponding output value.\nWith network.run([1,0]), you ask \"What is the likely output of [1,0]?\"\nThe answer from the network is:\none: 93% (close to 1)\nzero: 6% (close to 0)\nREMOVE ADS\nHow to Predict a Contrast\nWith CSS, colors can be set by RGB:\nExample\nThe example below demonstrates how to predict the darkness of a color:\nExample:\nExample Explained:\nA Neural Network is created with: new brain.NeuralNetwork()\nThe network is trained with network.train([examples])\nThe examples represent 4 input values a corresponding output value.\nWith network.run([0,0,128/255]), you ask \"What is the likely output of dark blue?\"\nThe answer from the network is:\nDark: 95%\nLight: 4%\nWhy not edit the example to test the likely output of yellow or red?",
      "examples": [
        "// Create a Neural Network\nconst network = new brain.NeuralNetwork();\n\n// Train the Network with 4 input objects\nnetwork.train([\n{input:[0,0], output:{zero:1}},\n{input:[0,1], output:{one:1}},\n{input:[1,0], output:{one:1},\n{input:[1,1], output:{zero:1},\n]);\n\n// What is the expected output of [1,0]?\nresult = network.run([1,0]);\n\n// Display the probability for \"zero\" and \"one\"\n... result[\"one\"] + \" \" + result[\"zero\"];",
        "// Create a Neural Network\nconst net = new brain.NeuralNetwork();\n\n// Train the Network with 4 input objects\nnet.train([\n// White RGB(255, 255, 255)\n{input:[255/255, 255/255, 255/255], output:{light:1}},\n// Light grey (192,192,192)\n{input:[192/255, 192/255, 192/255], output:{light:1}},\n// Darkgrey (64, 64, 64)\n{ input:[65/255, 65/255, 65/255], output:{dark:1}},\n// Black (0, 0, 0)\n{ input:[0, 0, 0], output:{dark:1}},\n]);\n\n// What is the expected output of Dark Blue (0, 0, 128)?\nlet result = net.run([0, 0, 128/255]);\n\n// Display the probability of \"dark\" and \"light\"\n... result[\"dark\"] + \" \" + result[\"light\"];",
        "new brain.NeuralNetwork()",
        "network.train([examples])",
        "network.run([1,0])",
        "network.run([0,0,128/255])"
      ]
    },
    {
      "title": "TensorFlow.js Tutorial",
      "summary": "What is TensorFlow.js?\nTensorflow is popular JavaScript library for Machine Learning.\nTensorflow lets us train and deploy machine learning in the Browser.\nTensorflow lets us add machine learning functions to any Web Application.\nUsing TensorFlow\nTo use TensorFlow.js, add the following script tag to your HTML file(s):\nExample\nIf you always want to use the latest version, drop the version number:\nExample 2\nTensorFlow was developed by the Google Brain Team for internal Google use, but was released as open software in 2015.\nIn January 2019, Google developers released TensorFlow.js, the JavaScript Implementation of TensorFlow.\nTensorflow.js was designed to provide the same features as the original TensorFlow library written in Python.\nTensors\nTensorFlow.js is a JavaScript library to define and operate on Tensors.\nThe main data type in TensorFlow.js is the Tensor.\nA Tensor is much the same as a multidimensional array.\nA Tensor contains values in one or more dimensions:\nA Tensor has the following main properties:\nSometimes in machine learning, the term \"dimension\" is used interchangeably with \"rank.\n[10, 5] is a 2-dimensional tensor or a 2-rank tensor.\nIn addition the term \"dimensionality\" can refer to the size of a one dimension.\nExample: In the 2-dimensional tensor [10, 5], the dimensionality of the first dimension is 10.\nREMOVE ADS\nCreating a Tensor\nThe main data type in TensorFlow is the Tensor.\nA Tensor is created from any N-dimensional array with the tf.tensor() method:\nExample 1\nTry it Yourself »\nExample 2\nTry it Yourself »\nExample 3\nTry it Yourself »\nTensor Shape\nA Tensor can also be created from an array and a shape parameter:\nExample1\nTry it Yourself »\nExample2\nTry it Yourself »\nExample3\nTry it Yourself »\nRetrieve Tensor Values\nYou can get the data behind a tensor using tensor.data():\nExample\nTry it Yourself »\nYou can get the array behind a tensor using tensor.array():\nExample\nTry it Yourself »\nTry it Yourself »\nYou can get the rank of a tensor using tensor.rank:\nExample\nTry it Yourself »\nYou can get the shape of a tensor using tensor.shape:\nExample\nTry it Yourself »\nYou can get the datatype of a tensor using tensor.dtype:\nExample\nTry it Yourself »\nTensor Data Types\nA Tensor can have the following data types:\nbool\nint32\nfloat32 (default)\ncomplex64\nstring\nWhen you create a tensor, you can specify the data type as the third parameter:\nExample\nTry it Yourself »",
      "examples": [
        "<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@3.6.0/dist/tf.min.js\"></script>",
        "<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs\"></script>",
        "const myArr = [[1, 2, 3, 4]];\nconst tensorA = tf.tensor(myArr);",
        "const myArr = [[1, 2], [3, 4]];\nconst tensorA = tf.tensor(myArr);",
        "const myArr = [[1, 2], [3, 4], [5, 6]];\nconst tensorA = tf.tensor(myArr);",
        "const myArr = [1, 2, 3, 4]:\nconst shape = [2, 2];\nconst tensorA = tf.tensor(myArr, shape);",
        "const tensorA = tf.tensor([1, 2, 3, 4], [2, 2]);",
        "const myArr = [[1, 2], [3, 4]];\nconst shape = [2, 2];\nconst tensorA = tf.tensor(myArr, shape);",
        "const myArr = [[1, 2], [3, 4]];\nconst shape = [2, 2];\nconst tensorA = tf.tensor(myArr, shape);\ntensorA.data().then(data => display(data));\n\nfunction display(data) {\ndocument.getElementById(\"demo\").innerHTML = data;\n}",
        "const myArr = [[1, 2], [3, 4]];\nconst shape = [2, 2];\nconst tensorA = tf.tensor(myArr, shape);\ntensorA.array().then(array => display(array[0]));\n\nfunction display(data) {\ndocument.getElementById(\"demo\").innerHTML = data;\n}",
        "const myArr = [1, 2, 3, 4];\nconst shape = [2, 2];\nconst tensorA = tf.tensor(myArr, shape);\n\ndocument.getElementById(\"demo\").innerHTML = tensorA.rank;",
        "const myArr = [1, 2, 3, 4];\nconst shape = [2, 2];\nconst tensorA = tf.tensor(myArr, shape);\n\ndocument.getElementById(\"demo\").innerHTML = tensorA.shape;",
        "const myArr = [1, 2, 3, 4];\nconst shape = [2, 2];\nconst tensorA = tf.tensor(myArr, shape, \"int32\");"
      ]
    },
    {
      "title": "TensorFlow Operations",
      "summary": "Add\nSubtract\nMultiply\nDivide\nSquare\nReshape\nTensor Addition\nYou can add two tensors using tensorA.add(tensorB):\nExample\nTry it Yourself »\nTensor Subtraction\nYou can subtract two tensors using tensorA.sub(tensorB):\nExample\nTry it Yourself »\nREMOVE ADS\nTensor Multiplication\nYou can multiply two tensors using tensorA.mul(tensorB):\nExample\nTry it Yourself »\nTensor Division\nYou can divide two tensors using tensorA.div(tensorB):\nExample\nTry it Yourself »\nTensor Square\nYou can square a tensor using tensor.square():\nExample\nTry it Yourself »\nTensor Reshape\nThe number of elements in a tensor is the product of the sizes in the shape.\nSince there can be different shapes with the same size, it is often useful to reshape a tensor to other shapes with the same size.\nYou can reshape a tensor using tensor.reshape():\nExample\nTry it Yourself »",
      "examples": [
        "const tensorA = tf.tensor([[1, 2], [3, 4], [5, 6]]);\nconst tensorB = tf.tensor([[1,-1], [2,-2], [3,-3]]);\n\n// Tensor Addition\nconst tensorNew = tensorA.add(tensorB);\n\n// Result: [ [2, 1], [5, 2], [8, 3] ]",
        "const tensorA = tf.tensor([[1, 2], [3, 4], [5, 6]]);\nconst tensorB = tf.tensor([[1,-1], [2,-2], [3,-3]]);\n\n// Tensor Subtraction\nconst tensorNew = tensorA.sub(tensorB);\n\n// Result: [ [0, 3], [1, 6], [2, 9] ]",
        "const tensorA = tf.tensor([1, 2, 3, 4]);\nconst tensorB = tf.tensor([4, 4, 2, 2]);\n\n// Tensor Multiplication\nconst tensorNew = tensorA.mul(tensorB);\n\n// Result: [ 4, 8, 6, 8 ]",
        "const tensorA = tf.tensor([2, 4, 6, 8]);\nconst tensorB = tf.tensor([1, 2, 2, 2]);\n\n// Tensor Division\nconst tensorNew = tensorA.div(tensorB);\n\n// Result: [ 2, 2, 3, 4 ]",
        "const tensorA = tf.tensor([1, 2, 3, 4]);\n\n// Tensor Square\nconst tensorNew = tensorA.square();\n\n// Result [ 1, 4, 9, 16 ]",
        "const tensorA = tf.tensor([[1, 2], [3, 4]]);\nconst tensorB = tensorA.reshape([4, 1]);\n\n// Result: [ [1], [2], [3], [4] ]"
      ]
    },
    {
      "title": "TensorFlow Models",
      "summary": "TesorFlow.js\nA JavaScript Library for\nTraining and Deploying\nMachine Learning Models\nIn the Browser\nTensorflow Models\nModels and Layers are important building blocks in Machine Learning.\nFor different Machine Learning tasks you must combine different types of Layers into a Model that can be trained with data to predict future values.\nTensorFlow.js is supporting different types of Models and different types of Layers.\nA TensorFlow Model is a Neural Network with one or more Layers.\nA Tensorflow Project\nA Tensorflow project has this typical workflow:\nCollecting Data\nCreating a Model\nAdding Layers to the Model\nCompiling the Model\nTraining the Model\nUsing the Model\nExample\nSuppose you knew a function that defined a strait line:\nY = 1.2X + 5\nThen you could calculate any y value with the JavaScript formula:\nTo demonstrate Tensorflow.js, we could train a Tensorflow.js model to predict Y values based on X inputs.\nNote\nThe TensorFlow model does not know the function.\nTry it Yourself »\nThe example is explained below:\nREMOVE ADS\nCollecting Data\nCreate a tensor (xs) with 5 x values:\nCreate a tensor (ys) with 5 correct y answers (multiply xs with 1.2 and add 5):\nCreating a Model\nCreate a sequential mode:.\nNote\nIn a sequential model, the output from one layer is the input to the next layer.\nAdding Layers\nAdd one dense layer to the model.\nThe layer is only one unit (tensor) and the shape is 1 (one dimentional):\nNote\nin a dense the layer, every node is connected to every node in the preceding layer.\nCompiling the Model\nCompile the model using meanSquaredError as loss function and sgd (stochastic gradient descent) as optimizer function:\nTensorflow Optimizers\nAdadelta -Implements the Adadelta algorithm.\nAdagrad - Implements the Adagrad algorithm.\nAdam - Implements the Adam algorithm.\nAdamax - Implements the Adamax algorithm.\nFtrl - Implements the FTRL algorithm.\nNadam - Implements the NAdam algorithm.\nOptimizer - Base class for Keras optimizers.\nRMSprop - Implements the RMSprop algorithm.\nSGD - Stochastic Gradient Descent Optimizer.\nTraining the Model\nTrain the model (using xs and ys) with 500 repeats (epochs):\nUsing the Model\nAfter the model is trained, you can use it for many different purposes.\nThis example predicts 10 y values, given 10 x values, and calls a function to plot the predictions in a graph:\nTry it Yourself »\nThis example predicts 10 y values, given 10 x values, and calls a function to display the values:\nTry it Yourself »",
      "examples": [
        "y = 1.2 * x + 5;",
        "// Create Training Data\nconst xs = tf.tensor([0, 1, 2, 3, 4]);\nconst ys = xs.mul(1.2).add(5);\n\n// Define a Linear Regression Model\nconst model = tf.sequential();\nmodel.add(tf.layers.dense({units:1, inputShape:[1]}));\n\n// Specify Loss and Optimizer\nmodel.compile({loss:'meanSquaredError', optimizer:'sgd'});\n\n// Train the Model\nmodel.fit(xs, ys, {epochs:500}).then(() => {myFunction()});\n\n// Use the Model\nfunction myFunction() {\nconst xMax = 10;\nconst xArr = [];\nconst yArr = [];\nfor (let x = 0; x <= xMax; x++) {\nlet result = model.predict(tf.tensor([Number(x)]));\nresult.data().then(y => {\nxArr.push(x);\nyArr.push(Number(y));\nif (x == xMax) {plot(xArr, yArr)};\n});\n}\n}",
        "const xs = tf.tensor([0, 1, 2, 3, 4]);",
        "const ys = xs.mul(1.2).add(5);",
        "const model = tf.sequential();",
        "model.add(tf.layers.dense({units:1, inputShape:[1]}));",
        "model.compile({loss:'meanSquaredError', optimizer:'sgd'});",
        "model.fit(xs, ys, {epochs:500}).then(() => {myFunction()});",
        "function myFunction() {\nconst xMax = 10;\nconst xArr = [];\nconst yArr = [];\nfor (let x = 0; x <= xMax; x++) {\nlet result = model.predict(tf.tensor([Number(x)]));\nresult.data().then(y => {\nxArr.push(x);\nyArr.push(Number(y));\nif (x == xMax) {plot(xArr, yArr)};\n});\n}\n}",
        "function myFunction() {\nconst xMax = 10;\nconst xArr = [];\nconst yArr = [];\nfor (let x = 0; x <= xMax; x++) {\nlet result = model.predict(tf.tensor([Number(x)]));\nresult.data().then(y => {\nxArr.push(x);\nyArr.push(Number(y));\nif (x == xMax) {display(xArr, yArr)};\n});\n}\n}"
      ]
    },
    {
      "title": "TensorFlow.js Visor",
      "summary": "TensorFlow Visor is a graphic tools for visualizing Machine Learning\nIt contains functions for visualizing TensorFlow Models\nVisualizations can be organized in Visors (modal browser windows)\nCan be used with Custom Tools likes d3, Chart.js, and Plotly.js\nOften called tfjs-vis\nUsing tfjs-vis\nTo use tfjs-vis, add the following script tag to your HTML file(s):\nExample\nScatter Plots\nExample\nTry it Yourself »\nVisualizations can be organized in a Visor (a modal browser window):\nExample with a Visor\nTry it Yourself »\nREMOVE ADS\nBar Graphs\nExample\nTry it Yourself »\nVisualizations can be organized in a Visor (a modal browser window):\nExample with a Visor\nTry it Yourself »\nLine Graphs\nExample\nTry it Yourself »\nVisualizations can be organized in a Visor (a modal browser window):\nExample with a Visor\nTry it Yourself »",
      "examples": [
        "<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-vis\"></script>",
        "const surface = document.getElementById('demo');\nconst series = ['First', 'Second'];\n\nconst serie1 = [];\nconst serie2 = [];\nfor (let i = 0; i < 100; i++) {\nserie1[i] = {x:i, y:Math.random() * 100};\nserie2[i] = {x:i, y:Math.random() * 100};\n}\n\nconst data = {values: [serie1, serie2], series}\n\ntfvis.render.scatterplot(surface, data);",
        "const series = ['First', 'Second'];\n\nconst serie1 = [];\nconst serie2 = [];\nfor (let i = 0; i < 100; i++) {\nserie1[i] = {x:i, y:Math.random() * 100};\nserie2[i] = {x:i, y:Math.random() * 100};\n}\n\nconst data = {values: [serie1, serie2], series}\n\ntfvis.render.scatterplot({name: \"my Plots\"}, data);",
        "const surface = document.getElementById('demo');\nconst data = [\n{index: 0, value: 100},\n{index: 1, value: 200},\n{index: 2, value: 150},\n{index: 2, value: 250},\n];\n\ntfvis.render.barchart(surface, data);",
        "const data = [\n{index: 0, value: 100},\n{index: 1, value: 200},\n{index: 2, value: 150},\n{index: 2, value: 250},\n];\n\ntfvis.render.barchart({name:\"my Graphs\"}, data);",
        "const surface = document.getElementById('demo');\n\nlet values = [\n{x: 1, y: 20},\n{x: 2, y: 30},\n{x: 3, y: 5},\n{x: 4, y: 12}\n];\n\ntfvis.render.linechart(surface, {values});",
        "let values = [\n{x: 1, y: 20},\n{x: 2, y: 30},\n{x: 3, y: 5},\n{x: 4, y: 12}\n];\n\ntfvis.render.linechart({name: 'my Lines'}, {values});"
      ]
    },
    {
      "title": "TensorFlow Example 1",
      "summary": "Input Data\nReduce Loss\nExplained\nThe model above performs 4 important steps:\nIt Collects Data\nIt Prepares Data\nIt Trains a Model\nIt Evaluates the Model\nIn the next chapters you will learn how to program a copy of the above example.\nYou will learn how to fetch data, clean data, and plot data.\nYou will also learn how to build a TensorFlow model, and how to train the model.\nFetch and Clean Data\nCreate a TensorFlow Model\nTrain the Model\nGraphics (tfjs-vis)\nThe graphics is displayed using the tfjs-vis library.\ntfjs-vis is a small library for in browser visualization intended for use with TensorFlow.js.\nMain Features are:\nGraphic tools for visualizing Machine Learning\nFunctions for visualizing TensorFlow Objects\nVisualizations can be organized in a Visor (a modal browser window)\nCan be used with Custom Tools likes d3, Chart.js, and Plotly.js",
      "examples": []
    },
    {
      "title": "Example 1 Data",
      "summary": "TensorFlow Data Collection\nThe data used in Example 1, is a list of car objects like this:\nThe dataset is a JSON file stored at:\nhttps://storage.googleapis.com/tfjs-tutorials/carsData.json\nCleaning Data\nWhen preparing for machine learning, it is always important to:\nRemove the data you don't need\nClean the data from errors\nRemove Data\nA smart way to remove unnecessary data, is to extract only the data you need.\nThis can be done by iterating (looping over) your data with a map function.\nThe function below takes an object and returns only x and y from the object's Horsepower and Miles_per_Gallon properties:\nREMOVE ADS\nRemove Errors\nMost datasets contain some type of errors.\nA smart way to remove errors is to use a filter function to filter out the errors.\nThe code below returns false if one of the properties (x or y) contains a null value:\nFetching Data\nWhen you have your map and filter functions ready, you can write a function to fetch the data.\nTry it Yourself »\nPlotting the Data\nHere is some code you can use to plot the data:\nTry it Yourself »",
      "examples": [
        "{\n\"Name\": \"chevrolet chevelle malibu\",\n\"Miles_per_Gallon\": 18,\n\"Cylinders\": 8,\n\"Displacement\": 307,\n\"Horsepower\": 130,\n\"Weight_in_lbs\": 3504,\n\"Acceleration\": 12,\n\"Year\": \"1970-01-01\",\n\"Origin\": \"USA\"\n},\n{\n\"Name\": \"buick skylark 320\",\n\"Miles_per_Gallon\": 15,\n\"Cylinders\": 8,\n\"Displacement\": 350,\n\"Horsepower\": 165,\n\"Weight_in_lbs\": 3693,\n\"Acceleration\": 11.5,\n\"Year\": \"1970-01-01\",\n\"Origin\": \"USA\"\n},",
        "function extractData(obj) {\nreturn {x:obj.Horsepower, y:obj.Miles_per_Gallon};\n}",
        "function removeErrors(obj) {\nreturn obj.x != null && obj.y != null;\n}",
        "async function runTF() {\nconst jsonData = await fetch(\"cardata.json\");\nlet values = await jsonData.json();\nvalues = values.map(extractData).filter(removeErrors);\n}",
        "function tfPlot(values, surface) {\ntfvis.render.scatterplot(surface,\n{values:values, series:['Original','Predicted']},\n{xLabel:'Horsepower', yLabel:'MPG'});\n}"
      ]
    },
    {
      "title": "Example 1 Model",
      "summary": "Shuffle Data\nWhen a model is trained, the data is divided into small sets (batches). Each batch is then fed to the model. Shuffling is important to prevent the model getting the same data over again. If using the same data twice, the model will not be able to generalize the data and give the right output. Shuffling gives a better variety of data in each batch.\nExample\nTensorFlow Tensors\nTo use TensorFlow, input data needs to be converted to tensor data:\nData Normalization\nData should be normalized before being used in a neural network.\nA range of 0 - 1 using min-max are often best for numerical data:\nREMOVE ADS\nTensorflow Model\nA Machine Learning Model is an algorithm that produces output from input.\nThis example uses 3 lines to define a ML Model:\nSequential ML Model\nconst model = tf.sequential(); creates a Sequential ML Model.\nIn a sequential model, the input flows directly to the output. Other models can have multiple inputs and multiple outputs. Sequential is the easiest ML model. It allows you to build a model layer by layer, with weights that correspond to the next layer.\nTensorFlow Layers\nmodel.add() is used to add two layers to the model.\ntf.layer.dense is a layer type that works in most cases. It multiplies its inputs by a weight-matrix and adds a number (bias) to the result.\nShapes and Units\ninputShape: [1] because we have 1 input (x = horsepower).\nunits: 1 defines the size of the weight matrix: 1 weight for each input (x value).\nCompiling a Model\nCompile the model with a specified optimizer and loss function:\nThe compiler is set to use the sgd optimizer. It is simple to use and quite effective.\nmeanSquaredError is the function we want to use to compare model predictions and true values.",
      "examples": [
        "tf.util.shuffle(data);",
        "// Map x values to Tensor inputs\nconst inputs = values.map(obj => obj.x);\n// Map y values to Tensor labels\nconst labels = values.map(obj => obj.y);\n\n// Convert inputs and labels to 2d tensors\nconst inputTensor = tf.tensor2d(inputs, [inputs.length, 1]);\nconst labelTensor = tf.tensor2d(labels, [labels.length, 1]);",
        "const inputMin = inputTensor.min();\nconst inputMax = inputTensor.max();\nconst labelMin = labelTensor.min();\nconst labelMax = labelTensor.max();\nconst nmInputs = inputTensor.sub(inputMin).div(inputMax.sub(inputMin));\nconst nmLabels = labelTensor.sub(labelMin).div(labelMax.sub(labelMin));",
        "const model = tf.sequential();\nmodel.add(tf.layers.dense({inputShape: [1], units: 1, useBias: true}));\nmodel.add(tf.layers.dense({units: 1, useBias: true}));",
        "model.compile({loss: 'meanSquaredError', optimizer:'sgd'});"
      ]
    },
    {
      "title": "Example 1 Training",
      "summary": "Training Function\nExample\nTry it Yourself »\nepochs defines how many iterations (loops) the model will do.\nmodel.fit is the function that runs the loops.\ncallbacks defines the callback function to call when the model wants to redraw the graphics.\nTest the Model\nWhen a model is trained, it is important to test and evaluate it.\nWe do this by inspecting what the model predicts for a range of different inputs.\nBut, before we can do that, we have to un-normalize the data:\nUn Normalize\nThen we can look at the result:\nPlot the Result\nTry it Yourself »",
      "examples": [
        "async function trainModel(model, inputs, labels, surface) {\nconst batchSize = 25;\nconst epochs = 50;\nconst callbacks = tfvis.show.fitCallbacks(surface, ['loss'], {callbacks:['onEpochEnd']})\nreturn await model.fit(inputs, labels,\n{batchSize, epochs, shuffle:true, callbacks:callbacks}\n);\n}",
        "let unX = tf.linspace(0, 1, 100);\nlet unY = model.predict(unX.reshape([100, 1]));\n\nconst unNormunX = unX.mul(inputMax.sub(inputMin)).add(inputMin);\nconst unNormunY = unY.mul(labelMax.sub(labelMin)).add(labelMin);\n\nunX = unNormunX.dataSync();\nunY = unNormunY.dataSync();",
        "const predicted = Array.from(unX).map((val, i) => {\nreturn {x: val, y: unY[i]}\n});\n\n// Plot the Result\ntfPlot([values, predicted], surface1)"
      ]
    },
    {
      "title": "TensorFlow Example 2",
      "summary": "Input Data\nReduce Loss\nExplained\nThe model above performs 4 important steps:\nIt Collects Data\nIt Prepares Data\nIt Trains a Model\nIt Evaluates the Model\nIn the next chapters you will learn how to program a copy of the above example.\nYou will learn how to fetch data, clean data, and plot data.\nYou will also learn how to build a TensorFlow model, and how to train the model.\nFetch and Clean Data\nCreate a TensorFlow Model\nTrain the Model\nGraphics (tfjs-vis)\nThe graphics is displayed using the tfjs-vis library.\ntfjs-vis is a small library for in browser visualization intended for use with TensorFlow.js.\nMain Features are:\nGraphic tools for visualizing Machine Learning\nFunctions for visualizing TensorFlow Objects\nVisualizations can be organized in a Visor (a modal browser window)\nCan be used with Custom Tools likes d3, Chart.js, and Plotly.js",
      "examples": []
    },
    {
      "title": "Example 2 Data",
      "summary": "Example 2 uses the same source code as Example 1.\nBut, because another dataset is used, the code must collect other data.\nData Collection\nThe data used in Example 2, is a list of house objects:\nThe dataset is a JSON file stored at:\nCleaning Data\nWhen preparing for machine learning, it is always important to:\nRemove the data you don't need\nClean the data from errors\nRemove Data\nA smart way to remove unnecessary data, it to extract only the data you need.\nThis can be done by iterating (looping over) your data with a map function.\nThe function below takes an object and returns only x and y from the object's Horsepower and Miles_per_Gallon properties:\nREMOVE ADS\nRemove Errors\nMost datasets contain some type of errors.\nA smart way to remove errors is to use a filter function to filter out the errors.\nThe code below returns false if on of the properties (x or y) contains a null value:\nFetching Data\nWhen you have your map and filter functions ready, you can write a function to fetch the data.\nTry it Yourself »\nPlotting the Data\nHere is some code you can use to plot the data:\nTry it Yourself »",
      "examples": [
        "{\n\"Avg. Area Income\": 79545.45857,\n\"Avg. Area House Age\": 5.682861322,\n\"Avg. AreaNumberofRooms\": 7.009188143,\n\"Avg. Area Number of Bedrooms\": 4.09,\n\"Area Population\": 23086.8005,\n\"Price\": 1059033.558,\n},\n{\n\"Avg. Area Income\": 79248.64245,\n\"Avg. Area House Age\": 6.002899808,\n\"Avg. AreaNumberofRooms\": 6.730821019,\n\"Avg. Area Number of Bedrooms\": 3.09,\n\"Area Population\": 40173.07217,\n\"Price\": 1505890.915,\n},",
        "function extractData(obj) {\nreturn {x:obj.Horsepower, y:obj.Miles_per_Gallon};\n}",
        "function removeErrors(obj) {\nreturn obj.x != null && obj.y != null;\n}",
        "async function runTF() {\nconst jsonData = await fetch(\"cardata.json\");\nlet values = await jsonData.json();\nvalues = values.map(extractData).filter(removeErrors);\n}",
        "function tfPlot(values, surface) {\ntfvis.render.scatterplot(surface,\n{values:values, series:['Original','Predicted']},\n{xLabel:'Rooms', yLabel:'Price',});\n}"
      ]
    },
    {
      "title": "Example 2 Model",
      "summary": "Shuffle Data\nWhen a model is trained, the data is divided into small sets (batches). Each batch is then fed to the model. Shuffling is important to prevent the model getting the same data over again. If using the same data twice, the model will not be able to generalize the data and give the right output. Shuffling gives a better variety of data in each batch.\nExample\nTensorFlow Tensors\nTo use TensorFlow, input data needs to be converted to tensor data:\nData Normalization\nData should be normalized before being used in a neural network.\nA range of 0 - 1 using min-max are often best for numerical data:\nREMOVE ADS\nTensorflow Model\nA Machine Learning Model is an algorithm that produces output from input.\nThis example uses 3 lines to define a ML Model:\nSequential ML Model\nconst model = tf.sequential(); creates a Sequential ML Model.\nIn a sequential model, the input flows directly to the output. Other models can have multiple inputs and multiple outputs. Sequential is the easiest ML model. It allows you to build a model layer by layer, with weights that correspond to the next layer.\nTensorFlow Layers\nmodel.add() is used to add two layers to the model.\ntf.layer.dense is a layer type that works in most cases. It multiplies its inputs by a weight-matrix and adds a number (bias) to the result.\nShapes and Units\ninputShape: [1] because we have 1 input (x = rooms).\nunits: 1 defines the size of the weight matrix: 1 weight for each input (x value).\nCompiling a Model\nCompile the model with a specified optimizer and loss function:\nThe compiler is set to use the sgd optimizer. It is simple to use and quite effective.\nmeanSquaredError is the function we want to use to compare model predictions and true values.",
      "examples": [
        "tf.util.shuffle(data);",
        "// Map x values to Tensor inputs\nconst inputs = values.map(obj => obj.x);\n// Map y values to Tensor labels\nconst labels = values.map(obj => obj.y);\n\n// Convert inputs and labels to 2d tensors\nconst inputTensor = tf.tensor2d(inputs, [inputs.length, 1]);\nconst labelTensor = tf.tensor2d(labels, [labels.length, 1]);",
        "const inputMin = inputTensor.min();\nconst inputMax = inputTensor.max();\nconst labelMin = labelTensor.min();\nconst labelMax = labelTensor.max();\nconst nmInputs = inputTensor.sub(inputMin).div(inputMax.sub(inputMin));\nconst nmLabels = labelTensor.sub(labelMin).div(labelMax.sub(labelMin));",
        "const model = tf.sequential();\nmodel.add(tf.layers.dense({inputShape: [1], units: 1, useBias: true}));\nmodel.add(tf.layers.dense({units: 1, useBias: true}));",
        "model.compile({loss: 'meanSquaredError', optimizer:'sgd'});"
      ]
    },
    {
      "title": "Example 2 Training",
      "summary": "Training Function\nTry it Yourself »\nepochs defines how many iterations (loops) the model will do.\nmodel.fit is the function that runs the loops.\ncallbacks defines the callback function to call when the model wants to redraw the graphics.\nTest the Model\nWhen a model is trained, it is important to test and evaluate it.\nWe do this by inspecting what the model predicts for a range of different inputs.\nBut, before we can do that, we have to un-normalize the data:\nUn Normalize\nThen we can look at the result:\nPlot the Result\nTry it Yourself »",
      "examples": [
        "async function trainModel(model, inputs, labels, surface) {\nconst batchSize = 25;\nconst epochs = 100;\nconst callbacks = tfvis.show.fitCallbacks(surface, ['loss'], {callbacks:['onEpochEnd']})\nreturn await model.fit(inputs, labels,\n{batchSize, epochs, shuffle:true, callbacks:callbacks}\n);\n}",
        "let unX = tf.linspace(0, 1, 100);\nlet unY = model.predict(unX.reshape([100, 1]));\n\nconst unNormunX = unX.mul(inputMax.sub(inputMin)).add(inputMin);\nconst unNormunY = unY.mul(labelMax.sub(labelMin)).add(labelMin);\n\nunX = unNormunX.dataSync();\nunY = unNormunY.dataSync();",
        "const predicted = Array.from(unX).map((val, i) => {\nreturn {x: val, y: unY[i]}\n});\n\n// Plot the Result\ntfPlot([values, predicted], surface1)"
      ]
    },
    {
      "title": "JavaScript Graphics",
      "summary": "Graphic Libraries\nJavaScript libraries to use for both Artificial Intelligence graphs and other charts:\nCanvas\nPlotly.js\nChart.js\nGoogle Chart\nD3.js\nPlotly.js\nPlotly.js is a charting library that comes with over 40 chart types, 3D charts, statistical graphs, and SVG maps.\nLearn More ...\nREMOVE ADS\nChart.js\nChart.js comes with many built-in chart types:\nScatter\nLine\nBar\nRadar\nPie and Doughnut\nPolar Area\nBubble\nLearn More ...\nGoogle Chart\nFrom simple line charts to complex tree maps, Google Chart provides a number of built-in chart types:\nScatter Chart\nLine Chart\nBar / Column Chart\nArea Chart\nPie Chart\nDonut Chart\nOrg Chart\nMap / Geo Chart\nLearn More ...",
      "examples": []
    },
    {
      "title": "HTML Canvas",
      "summary": "HTML Canvas is perfect for Scatter Plots\nHTML Canvas is perfect for Line Graphs\nHTML Canvas is perfect for combining Scatter and Lines\nScatter Plots\nSource Code\nTry it Yourself »\nLine Graphs\nSource Code\nTry it Yourself »\nREMOVE ADS\nCombined\nSource Code\nTry it Yourself »\nHaving a Plotter Object is nice when studying Artificial Intelligence:\nMakes AI more Fun\nMakes AI more Visual\nMakes AI more Understandable\nCreate a Plotter Object\nExample\nAdd a Method for Plotting a Line\nExample\nTry it Yourself »\nAdd a Method for Transforming XY Values\nExample\nTry it Yourself »\nAdd a Method for Plotting Points\nExample\nPlot Some Random Points\nExample\nTry it Yourself »\nPut the Code in a Library\nSource Code\nSave it in a file (like \"myplotlib.js\")\nUse it in Your HTML Pages\nNow you can add your plotter object to your HTML pages:\nExample\nTry it Yourself »",
      "examples": [
        "const xArray = [50,60,70,80,90,100,110,120,130,140,150];\nconst yArray = [7,8,8,9,9,9,10,11,14,14,15];\n\n// Plot Scatter\nctx.fillStyle = \"red\";\nfor (let i = 0; i < xArray.length-1; i++) {\nlet x = xArray[i]*400/150;\nlet y = yArray[i]*400/15;\nctx.beginPath();\nctx.ellipse(x, y, 2, 3, 0, 0, Math.PI * 2);\nctx.fill();\n}",
        "const xMax = canvas.height = canvas.width;\nconst slope = 1.2;\nconst intercept = 70;\n\n// Plot Line\nctx.beginPath();\nctx.moveTo(0, intercept);\nctx.lineTo(xMax, xMax * slope + intercept);\nctx.stroke();",
        "let xMax = canvas.height;\nlet yMax = canvas.width;\nlet slope = 1.2;\nlet intercept = 70;\n\nconst xArray = [50,60,70,80,90,100,110,120,130,140,150];\nconst yArray = [7,8,8,9,9,9,10,11,14,14,15];\n\n// Plot Scatter\nctx.fillStyle = \"red\";\nfor (let i = 0; i < xArray.length-1; i++) {\nlet x = xArray[i] * xMax/150;\nlet y = yArray[i] * yMax/15;\nctx.beginPath();\nctx.ellipse(x, y, 2, 3, 0, 0, Math.PI * 2);\nctx.fill();\n}\n\n// Plot Line\nctx.beginPath();\nctx.moveTo(0, intercept);\nctx.lineTo(xMax, xMax * slope + intercept);\nctx.stroke();",
        "function XYPlotter(id) {\n\nthis.canvas = document.getElementById(id);\nthis.ctx = this.canvas.getContext(\"2d\");\nthis.xMin = 0;\nthis.yMin = 0;\nthis.xMax = this.canvas.width;\nthis.yMax = this.canvas.height;\n.\n.",
        "this.plotLine = function(x0, y0, x, y, color) {\nthis.ctx.moveTo(x0, y0);\nthis.ctx.lineTo(x, y);\nthis.ctx.strokeStyle = color;\nthis.ctx.stroke();\n}",
        "this.transformXY = function() {\nthis.ctx.transform(1, 0, 0, -1, 0, this.canvas.height)\n}",
        "this.plotPoints = function(n, xArr, yArr, color, radius = 3) {\nfor (let i = 0; i < n; i++) {\nthis.ctx.fillStyle = color;\nthis.ctx.beginPath();\nthis.ctx.ellipse(xArr[i], yArr[i], radius, radius, 0, 0, Math.PI * 2);\nthis.ctx.fill();\n}\n}",
        "// Create a Plotter\nlet myPlotter = new XYPlotter(\"myCanvas\");\n\n// Create random XY Points\nnumPoints = 500;\nconst xPoints = Array(numPoints).fill(0).map(function(){return Math.random() * myPlotter.xMax});\nconst yPoints = Array(numPoints).fill(0).map(function(){return Math.random() * myPlotter.yMax});\n\n// Plot the Points\nmyPlotter.plotPoints(numPoints, xPoints, yPoints, \"blue\");",
        "function XYPlotter(id) {\n\nthis.canvas = document.getElementById(id);\nthis.ctx = this.canvas.getContext(\"2d\");\nthis.xMin = 0;\nthis.yMin = 0;\nthis.xMax = this.canvas.width;\nthis.yMax = this.canvas.height;\n\n// Plot Line Function\nthis.plotLine = function(x0, y0, x, y, color) {\nthis.ctx.moveTo(x0, y0);\nthis.ctx.lineTo(x, y);\nthis.ctx.strokeStyle = color;\nthis.ctx.stroke();\n}\n\n// Transform XY Function\nthis.transformXY = function() {\nthis.ctx.transform(1, 0, 0, -1, 0, this.canvas.height)\n}\n\n// Pot Points Function\nthis.plotPoints = function(n, xArr, yArr, color, radius = 3) {\nfor (let i = 0; i < n; i++) {\nthis.ctx.fillStyle = color;\nthis.ctx.beginPath();\nthis.ctx.ellipse(xArr[i], yArr[i], radius, radius, 0, 0, Math.PI * 2);\nthis.ctx.fill();\n}\n}\n\n} // End Plotter Object",
        "<script src=\"myplotlib.js\"></script>"
      ]
    },
    {
      "title": "Plotly.js",
      "summary": "Plotly.js is a charting library that comes with over 40 chart types, 3D charts, statistical graphs, and SVG maps.\nScatter Plots\nSource Code\nTry it Yourself »\nLine Graphs\nSource Code\nTry it Yourself »\nREMOVE ADS\nLinear Graphs\nSource Code\nTry it Yourself »\nMultiple Lines\nSource Code\nTry it Yourself »\nBar Charts\nSource Code\nTry it Yourself »\nHorizontal Bar Charts\nSource Code\nTry it Yourself »\nPie Charts\nTo display a pie instead of bars, change x and y to labels and values, and change the type to \"pie\":\nTry it Yourself »\nDonut Charts\nTo display a donut instead of a pie, add a hole:\nTry it Yourself »\nPlotting Equations\nTry it Yourself »\nSource Code\nTry it Yourself »",
      "examples": [
        "const xArray = [50,60,70,80,90,100,110,120,130,140,150];\nconst yArray = [7,8,8,9,9,9,10,11,14,14,15];\n\n// Define Data\nconst data = [{\nx: xArray,\ny: yArray,\nmode:\"markers\",\ntype:\"scatter\"\n}];\n\n// Define Layout\nconst layout = {\nxaxis: {range: [40, 160], title: \"Square Meters\"},\nyaxis: {range: [5, 16], title: \"Price in Millions\"},\ntitle: \"House Prices vs. Size\"\n};\n\nPlotly.newPlot(\"myPlot\", data, layout);",
        "const xArray = [50,60,70,80,90,100,110,120,130,140,150];\nconst yArray = [7,8,8,9,9,9,10,11,14,14,15];\n\n// Define Data\nconst data = [{\nx: xArray,\ny: yArray,\nmode: \"lines\",\ntype: \"scatter\"\n}];\n\n// Define Layout\nconst layout = {\nxaxis: {range: [40, 160], title: \"Square Meters\"},\nyaxis: {range: [5, 16], title: \"Price in Millions\"},\ntitle: \"House Prices vs Size\"\n};\n\n// Display using Plotly\nPlotly.newPlot(\"myPlot\", data, layout);",
        "let exp = \"x + 17\";\n\n// Generate values\nconst xValues = [];\nconst yValues = [];\nfor (let x = 0; x <= 10; x += 1) {\nyValues.push(eval(exp));\nxValues.push(x);\n}\n\n// Define Data\nconst data = [{\nx: xValues,\ny: yValues,\nmode: \"lines\"\n}];\n\n// Define Layout\nconst layout = {title: \"y = \" + exp};\n\n// Display using Plotly\nPlotly.newPlot(\"myPlot\", data, layout);",
        "let exp1 = \"x\";\nlet exp2 = \"1.5*x\";\nlet exp3 = \"1.5*x + 7\";\n\n// Generate values\n\nconst x1Values = [];\nconst x2Values = [];\nconst x3Values = [];\nconst y1Values = [];\nconst y2Values = [];\nconst y3Values = [];\n\nfor (let x = 0; x <= 10; x += 1) {\nx1Values.push(x);\nx2Values.push(x);\nx3Values.push(x);\ny1Values.push(eval(exp1));\ny2Values.push(eval(exp2));\ny3Values.push(eval(exp3));\n}\n\n// Define Data\nconst data = [\n{x: x1Values, y: y1Values, mode:\"lines\"},\n{x: x2Values, y: y2Values, mode:\"lines\"},\n{x: x3Values, y: y3Values, mode:\"lines\"}\n];\n\n// Define Layout\nconst layout = {title: \"[y=\" + exp1 + \"] [y=\" + exp2 + \"] [y=\" + exp3 + \"]\"};\n\n// Display using Plotly\nPlotly.newPlot(\"myPlot\", data, layout);",
        "const xArray = [\"Italy\",\"France\",\"Spain\",\"USA\",\"Argentina\"];\nconst yArray = [55, 49, 44, 24, 15];\n\nconst data = [{\nx: xArray,\ny: yArray,\ntype: \"bar\"  }];\nconst layout = {title:\"World Wide Wine Production\"};\n\nPlotly.newPlot(\"myPlot\", data, layout);",
        "const xArray = [55, 49, 44, 24, 15];\nconst yArray = [\"Italy\",\"France\",\"Spain\",\"USA\",\"Argentina\"];\n\nconst data = [{\nx: xArray,\ny: yArray,\ntype: \"bar\",\norientation: \"h\"\n}];\n\nconst layout = {title:\"World Wide Wine Production\"};\n\nPlotly.newPlot(\"myPlot\", data, layout);",
        "const data = [{\nlabels: xArray,\nvalues: yArray,\ntype: \"pie\"\n}];",
        "const data = [{\nlabels: xArray,\nvalues: yArray,\nhole: .4,\ntype: \"pie\"\n}];",
        "let exp = \"Math.sin(x)\";\n\n// Generate values\nconst xValues = [];\nconst yValues = [];\nfor (let x = 0; x <= 10; x += 0.1) {\nyValues.push(eval(exp));\nxValues.push(x);\n}\n\n// Display using Plotly\nconst data = [{x:xValues, y:yValues, mode:\"lines\"}];\nconst layout = {title: \"y = \" + exp};\nPlotly.newPlot(\"myPlot\", data, layout);"
      ]
    },
    {
      "title": "Chart.js",
      "summary": "Chart.js is a free JavaScript library for making HTML-based charts. It is one of the simplest visualization libraries for JavaScript, and comes with the following built-in chart types:\nScatter Plot\nLine Chart\nBar Chart\nPie Chart\nDonut Chart\nBubble Chart\nArea Chart\nRadar Chart\nMixed Chart\nHow to Use Chart.js?\nChart.js is easy to use.\nFirst, add a link to the providing CDN (Content Delivery Network):\nThen, add a <canvas> to where you want to draw the chart:\nThe canvas element must have a unique id.\nThat's all!\nScatter Plots\nHouse Prices vs. Size\nSource Code\nTry it Yourself »\nREMOVE ADS\nLine Graphs\nHouse Prices vs. Size\nSource Code\nTry it Yourself »\nIf you set the borderColor to zero, you can scatter plot the line graph:\nTry it Yourself »\nMultiple Lines\nSource Code\nTry it Yourself »\nLinear Graphs\nSource Code\nTry it Yourself »\nFunction Graphs\nSame as Linear Graph. Just change the generateData parameter(s):\nTry it Yourself »\nBar Charts\nSource Code\nTry it Yourself »\nColor only one bar:\nTry it Yourself »\nSame color all bars:\nTry it Yourself »\nColor Shades:\nTry it Yourself »\nHorizontal Bars\nJust change type from \"bar\" to \"horizontalBar\":\nTry it Yourself »\nPie Charts\nExample\nTry it Yourself »\nDoughnut Charts\nJust change type from \"pie\" to \"doughnut\":\nTry it Yourself »",
      "examples": [
        "<script\nsrc=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js\">\n</script>",
        "<canvas id=\"myChart\" style=\"width:100%;max-width:700px\"></canvas>",
        "const myChart = new Chart(\"myChart\", {\ntype: \"scatter\",\ndata: {},\noptions: {}\n});",
        "const myChart = new Chart(\"myChart\", {\ntype: \"line\",\ndata: {},\noptions: {}\n});",
        "const myChart = new Chart(\"myChart\", {\ntype: \"bar\",\ndata: {},\noptions: {}\n});",
        "const xyValues = [\n{x:50, y:7},\n{x:60, y:8},\n{x:70, y:8},\n{x:80, y:9},\n{x:90, y:9},\n{x:100, y:9},\n{x:110, y:10},\n{x:120, y:11},\n{x:130, y:14},\n{x:140, y:14},\n{x:150, y:15}\n];\n\nnew Chart(\"myChart\", {\ntype: \"scatter\",\ndata: {\ndatasets: [{\npointRadius: 4,\npointBackgroundColor: \"rgba(0,0,255,1)\",\ndata: xyValues\n}]\n},\noptions:{...}\n});",
        "const xValues = [50,60,70,80,90,100,110,120,130,140,150];\nconst yValues = [7,8,8,9,9,9,10,11,14,14,15];\n\nnew Chart(\"myChart\", {\ntype: \"line\",\ndata: {\nlabels: xValues,\ndatasets: [{\nbackgroundColor:\"rgba(0,0,255,1.0)\",\nborderColor: \"rgba(0,0,255,0.1)\",\ndata: yValues\n}]\n},\noptions:{...}\n});",
        "borderColor: \"rgba(0,0,0,0)\",",
        "const xValues = [100,200,300,400,500,600,700,800,900,1000];\n\nnew Chart(\"myChart\", {\ntype: \"line\",\ndata: {\nlabels: xValues,\ndatasets: [{\ndata: [860,1140,1060,1060,1070,1110,1330,2210,7830,2478],\nborderColor: \"red\",\nfill: false\n},{\ndata: [1600,1700,1700,1900,2000,2700,4000,5000,6000,7000],\nborderColor: \"green\",\nfill: false\n},{\ndata: [300,700,2000,5000,6000,4000,2000,1000,200,100],\nborderColor: \"blue\",\nfill: false\n}]\n},\noptions: {\nlegend: {display: false}\n}\n});",
        "const xValues = [];\nconst yValues = [];\ngenerateData(\"x * 2 + 7\", 0, 10, 0.5);\n\nnew Chart(\"myChart\", {\ntype: \"line\",\ndata: {\nlabels: xValues,\ndatasets: [{\nfill: false,\npointRadius: 1,\nborderColor: \"rgba(255,0,0,0.5)\",\ndata: yValues\n}]\n},\noptions: {...}\n});\n\nfunction generateData(value, i1, i2, step = 1) {\nfor (let x = i1; x <= i2; x += step) {\nyValues.push(eval(value));\nxValues.push(x);\n}\n}",
        "generateData(\"Math.sin(x)\", 0, 10, 0.5);",
        "var xValues = [\"Italy\", \"France\", \"Spain\", \"USA\", \"Argentina\"];\nvar yValues = [55, 49, 44, 24, 15];\nvar barColors = [\"red\", \"green\",\"blue\",\"orange\",\"brown\"];\n\nnew Chart(\"myChart\", {\ntype: \"bar\",\ndata: {\nlabels: xValues,\ndatasets: [{\nbackgroundColor: barColors,\ndata: yValues\n}]\n},\noptions: {...}\n});",
        "var barColors = [\"blue\"];",
        "var barColors =\"red\";",
        "var barColors = [\n\"rgba(0,0,255,1.0)\",\n\"rgba(0,0,255,0.8)\",\n\"rgba(0,0,255,0.6)\",\n\"rgba(0,0,255,0.4)\",\n\"rgba(0,0,255,0.2)\",\n];",
        "type: \"horizontalBar\",",
        "new Chart(\"myChart\", {\ntype: \"pie\",\ndata: {\nlabels: xValues,\ndatasets: [{\nbackgroundColor: barColors,\ndata: yValues\n}]\n},\noptions: {\ntitle: {\ndisplay: true,\ntext: \"World Wide Wine Production\"\n}\n}\n});",
        "type: \"doughnut\";"
      ]
    },
    {
      "title": "Google Chart",
      "summary": "From simple line charts to complex hierarchical tree maps, the Google Chart gallery provides a large number of ready-to-use chart types:\nScatter Chart\nLine Chart\nBar / Column Chart\nArea Chart\nPie Chart\nDonut Chart\nOrg Chart\nMap / Geo Chart\nHow to Use Google Chart?\nTo use Google Chart in your web page, add a link to the charts loader:\nGoogle Chart is easy to use.\nJust add a <div> element to display the chart:\nThe <div> element must have a unique id.\nThen load the Google Graph API:\nLoad the Visualization API and the corechart package\nSet a callback function to call when the API is loaded\nThat's all!\nLine Graph\nSource Code\nTry it Yourself »\nREMOVE ADS\nScatter Plots\nTo scatter plot the same data, change google.visualization to ScatterChart:\nTry it Yourself »\nBar Charts\nSource Code\nTry it Yourself »\nPie Charts\nTo convert a Bar Chart to a Pie chart, just replace:\n\ngoogle.visualization.BarChart\n\nwith:\n\ngoogle.visualization.PieChart\nTry it Yourself »\n3D Pie\nTo display the Pie in 3D, just add is3D: true to the options:\nTry it Yourself »",
      "examples": [
        "<script\nsrc=\"https://www.gstatic.com/charts/loader.js\">\n</script>",
        "<div id=\"myChart\" style=\"max-width:700px; height:400px\"></div>",
        "1 google.charts.load('current',{packages:['corechart']});\n\n2 google.charts.setOnLoadCallback(drawChart);",
        "function drawChart() {\n// Set Data\nconst data = google.visualization.arrayToDataTable([\n['Price', 'Size'],\n[50,7],[60,8],[70,8],[80,9],[90,9],[100,9],\n[110,10],[120,11],[130,14],[140,14],[150,15]\n]);\n// Set Options\nconst options = {\ntitle: 'House Prices vs Size',\nhAxis: {title: 'Square Meters'},\nvAxis: {title: 'Price in Millions'},\nlegend: 'none'\n};\n// Draw Chart\nconst chart = new google.visualization.LineChart(document.getElementById('myChart'));\nchart.draw(data, options);\n}",
        "const chart = new google.visualization.LineChart(document.getElementById('myChart'));",
        "function drawChart() {\n\nconst data = google.visualization.arrayToDataTable([\n['Contry', 'Mhl'],\n['Italy', 55],\n['France', 49],\n['Spain', 44],\n['USA', 24],\n['Argentina', 15]\n]);\n\nconst options = {\ntitle: 'World Wide Wine Production'\n};\n\nconst chart = new google.visualization.BarChart(document.getElementById('myChart'));\nchart.draw(data, options);\n\n}",
        "const chart = new google.visualization.PieChart(document.getElementById('myChart'));",
        "const options = {\ntitle: 'World Wide Wine Production',\nis3D: true\n};"
      ]
    },
    {
      "title": "D3.js",
      "summary": "D3.js is a JavaScript library for manipulating HTML based on data.\nHow to Use D3.js?\nTo use D3.js in your web page, add a link to the library:\nD3.js is easy to use.\nThis script selects the body element and appends a paragraph with the text \"Hello World!\":\nTry it Yourself »\nScatter Plot\nExample\nTry it Yourself »",
      "examples": [
        "<script src=\"//d3js.org/d3.v3.min.js\"></script>",
        "d3.select(\"body\").append(\"p\").text(\"Hello World!\");",
        "// Set Dimensions\nconst xSize = 500;\nconst ySize = 500;\nconst margin = 40;\nconst xMax = xSize - margin*2;\nconst yMax = ySize - margin*2;\n\n// Create Random Points\nconst numPoints = 100;\nconst data = [];\nfor (let i = 0; i < numPoints; i++) {\ndata.push([Math.random() * xMax, Math.random() * yMax]);\n}\n\n// Append SVG Object to the Page\nconst svg = d3.select(\"#myPlot\")\n.append(\"svg\")\n.append(\"g\")\n.attr(\"transform\",\"translate(\" + margin + \",\" + margin + \")\");\n\n// X Axis\nconst x = d3.scaleLinear()\n.domain([0, 500])\n.range([0, xMax]);\n\nsvg.append(\"g\")\n.attr(\"transform\", \"translate(0,\" + yMax + \")\")\n.call(d3.axisBottom(x));\n\n// Y Axis\nconst y = d3.scaleLinear()\n.domain([0, 500])\n.range([ yMax, 0]);\n\nsvg.append(\"g\")\n.call(d3.axisLeft(y));\n\n// Dots\nsvg.append('g')\n.selectAll(\"dot\")\n.data(data).enter()\n.append(\"circle\")\n.attr(\"cx\", function (d) { return d[0] } )\n.attr(\"cy\", function (d) { return d[1] } )\n.attr(\"r\", 3)\n.style(\"fill\", \"Red\");"
      ]
    },
    {
      "title": "Human Intelligence",
      "summary": "About 70 000 years ago, something happened to the human brain.\nHumans started to develop \"Cognitive Intelligence\":\nBeing able to understand a language\nBeing able to understand numbers\nBeing able to understand abstract thinking\nWords and Numbers\nUsing words, was a big step in the development of human intelligence:\n\"Elephant\" is more informative than \"Big Animal\".\nUnderstanding numbers, was also a big step:\n\"5\" or \"50\" is more informative than \"few\" or \"many\".\nLanguages\n\"There is a lion behind the big oak\" is more informative than shouting \"Danger!\".\nHaving a language is probably a key characteristic that distinguishes us from animals.\nAbstract Thinking\nAbstract thinking is thinking about things that are not concrete, like freedom, or ideas, or concepts.\nAbstract\nA freedom figure\nAbstract\nFreedom\nThe Past\nThe Future\nImagination\nExplanation\nConcrete\nA concrete figure\nConcrete\nMy Mouth\nMy Fingertip\nOne Apple\nTwo Chicken\nThree Horses\nMany everyday behaviors use abstract thinking:\nUsing Concepts\nUsing Theories\nUsing Metaphors\nUsing Analogies\nUsing Imagination\nREMOVE ADS\nWhat is Intelligence?\nThere is no proven definition of Intelligence.\nIntelligence can be defined as:\nBeing able to understand abstract thinking\nBeing able to understand a language\nBeing able to understand numbers\nIntelligence can be defined as a collection of knowledge:\n\"Intelligence could be defined as the process of obtaining knowledge by efficient means.\"\nYampolsky (2013)\nThe challenge of AI is to understand what intelligence is, and how intelligence works.\nWhat is the difference between human knowledge and artificial intelligence?\nIntelligence might be a type of algorithms in our brains or in our genes.\nLater in this tutorial you will learn more about intelligent algorithms.\nIs the Human Brain Superior?\nCan animals, birds, insects, or plants think?\nHumans have bigger brains than animals.\nBig dogs have bigger brains than small dogs. Are big dogs smarter?\nBirds have very small brains, but they know they should not make children in the autumn, and they know when to fly to the south.\nBees have even smaller brains, but they know how to communicate about where to find nectar.\nPlants have no brain, but they know how to reproduce, and how to prepare for the winter.",
      "examples": []
    },
    {
      "title": "The History of Languages",
      "summary": "A language is a structured system of communication.\nThe type of communication that involves the use of words.\nWhat is a Language?\nApes and Whales communicate with each other.\nBirds and Bees communicate with each other.\nBut only humans have developed a real Language.\nNo other species can express ideas using sentences constructed by a set of words (with verbs and nouns).\nThis skill is remarkable. And what is even more remarkable: Even children master this skill.\nSpoken Languages\nWe are not sure of how old the spoken language is. The topic is difficult to study because of the lack of evidence.\nWe don't know how it started. But we have a clue.\nThe great African apes, Pan and Gorilla, are our closest living relatives. Why are they called \"Apes\"? Because they ape. Apes mime to get their message across.\nIt is assumed that the evolution of languages must have been a long process. Our ancestors might have started speaking a million years ago, but with fewer words, more miming, and no grammar.\nThe Tower of Babel\nCognitive Development\nAccording to Hauser, Chomsky, and Fitch (2002), there are six aspects of language development:\nTheory of Mind\nUnderstanding Vocal Signals\nUnderstanding Imitation\nUnderstanding Numbers\nUnderstanding Intentional Communication\nUnderstanding Non-linguistic Representations\nREMOVE ADS\nHuman Languages\nHuman languages contain a limited set of Words put together in Sentences:\nExample\nComputer Languages\nComputers are programmed with a limited set of Words put together in computer Statements:\nExample\nWritten Languages\nEgyptian and Sumerian are the earliest known written languages.\n(The oldest written language in use today, is Chinese)",
      "examples": [
        "I'm going on holiday in my new car.\nVado in vacanza con la mia macchina nuova.\nMe voy de vacaciones en mi auto nuevo.\nIch fahre mit meinem neuen Auto in den Urlaub.",
        "var points = [40, 100, 1, 5, 25, 10];\npoints.sort(function(a, b){return a - b});"
      ]
    },
    {
      "title": "The History of Numbers",
      "summary": "To understand AI, it is important to understand the concept of Numbers and Counting.\nAI is About Numbers\nArtificial Intelligence is all about Numbers.\nNumbers are easy to understand: 1,2,3,4,5 ... 11,12,13,14,15.\nStudies of animals indicates that even animals can understand some numbers:\n2 Wives\n8 Sons\n5 Eggs\nThe need for numbers in the modern world is absolute. We cannot live without numbers:\n100 Dollar\nPi = 3.14\n365 Days\n25 Years\n20% Tax\n100 Miles\nAI is About Counting\nThe concept of numbers leads to the concept of counting.\nImagine prehistoric thinking:\nHow to count apples?\nHow to weigh corn?\nHow to pay?\nHow far is the ocean?\nArtificial Intelligence is a result of the human need for calculations.\nCounting is easy to understand: 2 + 2 = 4.\nStudies of animals indicates that animals can only understand very simple counting.\nHow do Homo Sapiens deal with calculations?\nComplex calculations are done by computers.\n\"Yes! Computers can be smarter than humans.\"\nBabylonian Numbers (Base 60)\nWe believe that the Babylonians started the development of complex counting.\nThe Babylonian number system has 60 different digits. It is a Base 60 system.\nTwo Babylonian Scientists\nAbout 6000 Years ago ...\nTwo Babylonian scientists were talking (writing numbers as dots on a paper):\nScientist 1: \"We need to invent a number system\".\nScientist 2: \"What?\".\nScientist 1: \"We need to give every number a name\".\nScientist 2: \"You mean like 1, 2, and 3\".\nScientist 1: \"Exactly!\".\nScientist 2: \"But why?\".\nScientist 1: \"How can I tell you I have 7 sons, if you don't know what 7 is?\nScientist 2: \"Every number should have a name?\".\nScientist 1: \"Exactly!\".\nScientist 2: \"So, how many numbers do we need? 15?\".\nScientist 1: \"More. Some people have more than 15 sons\".\nScientist 2: \"Ok. 30 then. Just to be sure\".\nScientist 1: \"But people older than 30 should be able to tell their age\".\nScientist 2: \"Ok. 60 then\".\nSexagesimal (base 60)\nThe sexagesimal system (base 60):\nThere are 60 seconds in one minute\nThere are 60 minutes in one hour\n60 is very versatile. It can be divided by 1,2,3,4,5,6,10,12,15,30, and 60.\nThe Babylonian system was a place-value system, where the digits to the left represented full values, much like our decimal system.\n1,5 means 65 (1 times 60, plus 5)\n3,30 means 210 (3 times 60, plus 30)\nThe reason why the Babylonians used 60 as the base, was (we like to believe) that 60 is divisible with most numbers: 1,2,3,4,5,6,10,12,15,20,30, and 60.\nThe downside was that the user had to remember 60 different digits. But the system was smart. A lot of it is still in use today:\nThe Babylonians counted to 360 because of their sexagesimal (base-60) number system, which they inherited from earlier Mesopotamian cultures. This system led to many mathematical and astronomical conventions that we still use today, including:\nDividing a circle into 360 degrees\nThe Babylonians observed that a year is roughly 360 days (based on early solar calendars).\nThey associated celestial movements with circular motion and divided the circle into 360 parts (degrees).\nUsing Base-60 (Sexagesimal) System\n60 is a highly composite number, meaning it has many divisors (1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30, 60), making it useful for fractions and measurements.\n360 is a multiple of 60 (60 × 6), which fits neatly into their mathematical framework.\nAstronomical and Calendar Significance\nThe Babylonians tracked lunar and solar cycles, which were closely linked to the approximate 360-day year.\nThey divided the sky into 12 zodiac constellations, each spanning 30 degrees.\nInfluence on Time Measurement\nThe origin of the Sexagesimal system (base 60) has been lost in history.\nBut it looks like it has been used in parallel with the Dozenal system since ancient times.\nDozenal (base 12)\nThe dozenal system (base 12):\nThere are 12 in a dozen\nThere are 12 hours in a day\nThere are 12 hours in a night\nThere are 12 months in a year\n12 is very versatile. It can be divided by 1,2,3,4,6,and 12.\nREMOVE ADS\nHow to Count Dozenal\nWith two hands, you can count to 60.\nEach of your fingers have 3 joints:\n1 full hand = 12\n2 full hands = 24\n3 full hands = 36\n4 full hands = 48\n5 full hands = 60\nRoman Numbers (Base 10)\nRoman numbers originated in Rome and was used in Europe into the Middle Ages.\nThe Romans used a Base 10 system. Possibly because they used their 10 fingers to count.\nToday, most of the world use a Base 10 number system:\nWestern numbers, Chinese numbers, Brahmi numbers, Greek numbers, Hebrew numbers...\n5 means 5\n50 means 5 times 10\n500 means 5 times 100\n\n57 means 5 times 10, plus 7\n75 means 7 times 10, plus 5\nDigital Numbers (Base 2)\nHumans can count with base 10 numbers, computers can not.\nElectricity cannot count. Electricity can only be On and Off.\nComputers use Electricity or Magnetism to represent On and Off.\nComputers use Digital Numbers like 11100110 (in contrast to Base 10 Numbers like 230).\nDigital numbers (11100110) are also called Binary Numbers.\nYou will learn more about digital computers in the next chapter.\nMan vs. Computer\nComputers can handle an unlimited amount of numbers.\nHumans can not.",
      "examples": []
    },
    {
      "title": "The History of Computing",
      "summary": "Abacus\nAnalog Computers\nDigital Computers\nElectronic Computers\nComputer Speed\nThe First Abacus\nThe Babylonian Abacus was developed to Reduce the Time to perform calculations.\nAs stated in the previous chapter, we believe that the Babylonians invented complex counting.\nThe period 2700–2300 BC probably saw the first appearance of an abacus, a table of successive columns which defined the orders of a 60 digits number system.\nAbacus 2.0\nThe Roman Abacus used 10 digits Roman numbers to Reduce the Time to perform calculations:\nImage: 1911 Encyclopedia Britannica (public domain).\nThe Romans developed the Roman Abacus, a portable, base-10 version of earlier abacuses used by the Babylonians.\nThis was the worlds first handheld computer. Used by Roman engineers, merchants and tax collectors.\nAnalog Computers\nThe Difference Engine (Charles Babbage 1822) was a mechanical machine designed to Reduce the Time to calculate complex mathematical functions.\nThe Analytical Engine (Charles Babbage 1833) was a mechanical machine designed with modern computer elements like arithmetic, logic, and memory.\nBoth these \"computers\" used 10 digit (decimal) mechanical cogwheels to perform mathematical calculations:\n(Charles Babbage's Analytical Engine. Science Museum. London)\nREMOVE ADS\nDigital Computers\nDigital Computers use 0/1 switches to perform calculations. They operate on binary values like 11100110 in contrast to analog values like 230.\nTry It Yourself:\n+\n=\nThe first Electric Digital Computer was designed and built by Konrad Zuse in Germany (1941).\nIt used 2600 electrical relays as 0/1 switches. The clock speed was about 5 Hz.\nReplica of the Zuse Z3. Deutsches Museum. Munich.\nElectronic Computers\nFirst generation Computers (1945-1950) used vacuum tubes as binary switches.\nVacuum tubes are much faster than electrical relays.\nThe clock speed of these computers was between 500 KHz and 1 Mhz.\nSecond Generation Computers\nSecond generation Computers (1950-1960) used transistors as binary 0/1 switches.\nTransistors are much faster than vacuum tubes.\nThird Generation Computers\nThird generation Computers (1960) used integrated circuits as binary switches.\nIntegrated circuits are much faster than transistors.\nComputer Speed\nThe first electrical computer could do 5 instructions per second.\nThe first electronic computer did 5000 instructions per second.\nThe first PC did 5 million instructions per second.\nAMD was the first PC to reach 1 billion instructions per second.\nToday, IPhone 12 can do 11 billion instructions per second.\nWhen Did it Start? Where Will it End?\nFrom the history above you can extract:\nComputers were designed to do calculations\nCharles Babbage created the first mechanical computer\nThe first digital computers used electromechanical switches\nVacuum tubes are much faster than electromechanical switches\nTransistors are much faster than vacuum tubes\nIntegrated circuits are much faster than transistors\nTomorrow's computes will be faster than the human brain?\n\"Computers are useless because they can only give you answers.\"\nPablo Picasso\nSmarter Than Humans?\nIf we believe in Moores Law:\nIn 2020, computers have the capacity of a mouse brain.\nIn 2030, computers might have the capacity of a human brain:\nSource: Ray Kurzweil",
      "examples": []
    },
    {
      "title": "History of Robots",
      "summary": "Industrial Robots\nArtificial Intelligence Robots\nIndustrial Robots\nIndustrial robots have been around for more than 50 years.\nThe first robot patent was applied for in 1954 and granted in 1961.\nIn 1969, Victor Scheinman invented the Stanford Arm (Stanford University), and in 1972 he designed the MIT Arm for the MIT Artificial Intelligence Lab.\nThese \"robots\" are not considered intelligent. They are electrical machines designed to permit 6-axis arm movement. But the new design allowed for a machine to follow a programmed path and opened up for \"robot jobs\" like car painting, welding and assembly.\nThe pioneering robot company Unimation (with support from General Motors) took the Scheinman's design to the marked as the PUMA (Programmable Universal Machine for Assembly).\nMost industrial robots are non-intelligent.\nMost modern robots are said to be autonomous or semi-autonomous because they do not require much human input after they have been programmed.\nA robot can easily be programmed to do a lot of different things (like on an assembly line), but it will never change what it is doing. It will continue to the same job until you turn it off.\nRobotic Bartenders on Quantum of the Seas - Royal Caribbean:\nRobots and Artificial Intelligence are two different things.\nRobot technology is not a subset of Artificial Intelligence.\nA robot is a physical thing. After 50 years of development, almost anything is programmable, your radio, your watch, your phone, and even robots.\nREMOVE ADS\nAI Robots\nArtificial Intelligence can be built into robots, and AI is a very exciting field in future robotics.\nHanson Robotics' Sophia personifies some dreams for the future of AI.\nSophia is a combination of science, engineering, and artistry. She is a human-crafted science fiction character depicting the future of AI and robotics.\nCan AI Robots Interact Socially?\nYes, AI Robots can learn to interact socially.\nKismet (a MIT robot) is programmed to understand body language and voice inflection. The creators study how human and babies interact, based on tone of speech and visual cue.\nKismet could be the foundation of a human-like learning system.",
      "examples": []
    },
    {
      "title": "The History of AI",
      "summary": "History of AI and ML\nWhy AI Now?\nOne of the greatest innovators in the field of machine learning was John McCarthy, widely recognized as the \"Father of Artificial Intelligence\".\nIn the mid 1950s, McCarthy coined the term \"Artificial Intelligence\" and defined it as \"the science of making intelligent machines\".\nThe algorithms has been here since then. Why is AI more interesting now?\nThe answer is:\nComputing power has not been strong enough\nComputer storage has not been large enough\nBig data has not been available\nFast Internet has not been available\nAnother strong force is the major investments from big companies (Google, Microsoft, Facebook, YouTube) because their datasets became much too big to handle traditionally.\nREMOVE ADS\nMan vs Machine\nInteresting Questions\nStudying AI raises many interesting questions:\n\"Can computers think like humans?\"\n\"Can computers be smarter than humans?\"\n\"Can computers take over the world?\"\nMachines can understand verbal commands, recognize faces, drive cars, and play games better than us.\nHow long will it take before they walk among us?\nArtificial Intelligence Films",
      "examples": []
    },
    {
      "title": "Job Replacement",
      "summary": "What Jobs Will be Taken Over by Computers?\nIn 2013, the Oxford scientists Carl Benedikt Frey and Michael A. Osborne, published a probability that 47% of all professions will be taken over by computers in Two Decades.\nSource: Oxford - The_Future_of_Employment.pdf\nThe table below is from the list. It ranks occupations according to their probability of computerization.\nBookkeeping\n99% of all Tax Preparers\n99% of all Account Clerks\n98% of all Bookkeeping Clerks\n98% of all Credit Analysts\nCarl Benedikt Frey and Michael A. Osborne were right.\nToday, bookkeeping is automated.\nFor these jobs, computers are much more affordable than people.\nSales And Customers\n99% of all Telemarketers\n97% of all Cashiers\n94% of all Door-to-Door Salesmen\n92% of all Insurance Sales Agents\n85% of all Sales Representatives\n58% of all Financial Advisors\n55% of all Customer Service\n54% of all Sales Agents\nThey were right.\nWeb shopping is taking over.\nConversion rates for telephone sales are not very attractive.\nREMOVE ADS\nProduction Workers\n98% of all Packaging Machine Operators\n95% of all Print Binding and Finishing Workers\n93% of all Industrial Truck Operators\n92% of all Production Workers\n87% of all Food Preparation Workers\nAssembly line robots has been around for 50 years.\nToday, smart robots can be programmed by anyone to do anything.\nRobots are replacing jobs at Amazon:\nRead and Write\n99% of all Data Entry Keyers\n84% of all Proofreaders\n65% of all Librarians\n54% of all Film and Video Editors\nProofreading software is everywhere. From spell check to the Hemingway App.\nBartenders\n81% of all Fast Food Cooks\n77% of all Bartenders\n77% of all Dishwashers\nCoffee robots can replace many baristas.\n5 Best Robot Coffee Baristas 2020\nRobotic Bartenders on Quantum of the Seas - Royal Caribbean:\nPostal Services\n95% of all Postal Service Clerks\n79% of all Mail Sorters\n75% of all Postmasters\n68% of all Mail Carriers\nAirplane Pilots\n55% of all Pilots\nThe military uses drones today.\nTomorrow AI will replace the pilots of cargo planes.\nPassenger planes will have only one pilot. The second pilot will be an autopilot.\nDrivers. Transportation Jobs\n69% of all Taxi Drivers\n69% of all Truck Drivers\n67% of all Bus Drivers\nSelf-driving cars is already a reality.\nThe potential of jobs lost is staggering.\nVery soon AI could replace millions of transportation jobs.\nRobots could take 20 million jobs by 2030\nAccording to a study from Oxford Economics (2019), there could be 14 million robots working in China by 2030.",
      "examples": []
    },
    {
      "title": "Theory of Mind",
      "summary": "Thoughts\nFeelings\nEmotions\nSelf Awareness\nEmpathy\nWhat is Mind?\nThere is no proven definition of Mind.\nMind can be defined as an instantiation of intelligence.\nMind can be defined as a collection of knowledge.\nIs thinking, feeling, and meaning mind or know-how?\nIs the Mind just a big computer?\nCognitive Science\nCognitive science is the study of mind processes.\nA cognitive scientist studies intelligence and behavior.\nCognitive science focus on how brain cells process and transform information.\nCognitive Science also tries to learn how to develop intelligent computer algorithms.\nThe Mental Model\nA mental model is an internal picture of the external reality.\nScientists expects that a model plays a major role in reasoning and decision-making (cognition).\nKenneth Craik suggested in 1943 that the mind constructs \"small-scale models\" of reality when trying to anticipate events.\n✔ The image of the world around us, which we carry in our head, is just a model.\nNobody in his head imagines all the world, government or country. He has only selected concepts, and relationships between them, and uses those to represent the real system.\nJay Wright Forrester, 1971.\nREMOVE ADS\nCan AI Be Human?\nScientists are trying to discover what separates human intelligence from artificial intelligence.\nWhat is the status? What is the future?\nYear 2000: Reactive Machines\nYear 2015: Machine Learning\nYear 2030: Theory of Mind\nYear 2050: Self-Awareness\nReactive Machines\nEarly AI systems were reactive. Reactive systems cannot use past experience.\nIn 1997 a reactive machine (\"IBM Deep Blue\") beat the world champion in chess.\n\"Deep Blue\" could not think. But it was stored with information about the chess board, and the rules for moving chess pieces.\n\"Deep Blue\" won because it was programmed to calculate every move to win.\nMachine Learning\nToday, AI systems can use some information from the past.\nOne example is self-driven cars. They can combine pre-programmed information with information they collect while they learn how to drive.\nTheory of Mind\nTheory of Mind is a term from psychology about an individual's capacity for empathy and understanding of others.\nThis is an awareness of others being like yourself, with individual needs and intentions.\nOne of the abilities language users have, is to communicate about things that are not concrete, like needs, ideas, or concepts.\nSimon Baron-Cohen, British psychologist and professor at the University of Cambridge, argues (1999) that \"Theory of Mind\" must have preceded languages, based on knowledge about early human activities:\nTeaching\nBuilding Shared Goals\nBuilding Shared Plans\nIntentional Communication\nIntentional Sharing of Topic\nIntentional Sharing of Focus\nIntentional Persuasion\nIntentional Pretending\nIntentional Deception\nSelf-Awareness\nIn psychology, \"Theory of Mind\" means that people have thoughts, feelings and emotions that affect their behavior.\nFuture AI systems must learn to understand that everyone (both people and AI objects) have thoughts and feelings.\nFuture AI systems must know how to adjust their behavior to be able to walk among us.\nThe last step, before AI can be human, is machine consciousness.\nWe can not construct this software before we know much more about the human brain, memory, and intelligence.",
      "examples": []
    },
    {
      "title": "ML Mathematics",
      "summary": "The main branches of Mathematics involved in Machine Learning are:\nLinear Functions\nLinear Graphics\nLinear Algebra\nProbability\nStatistics\nMachine Learning = Mathematics\nBehind every ML success there is Mathematics.\nAll ML models are constructed using solutions and ideas from math.\nThe purpose of ML is to create models for understanding thinking.\nIf you want an ML career:\nData Scientist\nMachine Learning Engineer\nRobot Scientist\nData Analyst\nNatural Language Expert\nDeep Learning Scientist\nYou should focus on the mathematic concepts described here.\nLinear Functions\nLinear means straight\nA linear function is a straight line\nA linear graph represents a linear function\nGraphics\nGraphics plays an important role in Math\nGraphics plays an important role in Statistics\nGraphics plays an important role in Machine Learning\nLearn more about linear functions ...\nREMOVE ADS\nLinear Algebra\nLinear algebra is the bedrock of data science.\nKnowing linear algebra boosts your ability to understand data science algorithms.\nLearn more about linear algebra ...\nProbability\nProbability is how likely something is to occur, or how likely something is true.\nI have 6 balls in a bag: 3 reds, 2 are green, and 1 is blue.\nBlindfolded. What is the probability that I pick a green one?\nNumber of ways it can happen are 2 (there are 2 greens).\nNumber of outcomes are 6 (there are 6 balls).\nThe probability is 2 out of 6: 2/6 = 0.333333...\nProbability = Ways / Outcomes\nLearn more about probability ...\nStatistics\nStatistics is about how to collect, analyze, interpret, and present data.\nStatistics works with questions like:\nWhat is the most Common?\nWhat is the most Expected?\nWhat is the most Normal?\nLearn more about statistics ...",
      "examples": []
    },
    {
      "title": "Linear Functions",
      "summary": "Linear means straight\nA linear function is a straight line\nA linear graph represents a linear function\nLinear Functions\nA Function is special relationship where each input has an output.\nA function is often written as f(x) where x is the input:\nResults from f(x) = x\nResults from f(x) = 2x\nREMOVE ADS\nLinear Equations\nA Linear Equation is an equation for a straight line:\ny = x\ny = x*2\ny = x*2 + 7\ny = ax + b\n5x = 3y\ny/2 = 6\nNon-Linear Equations\nA Linear Equation can NOT contain exponents or square roots:\ny = x**2\ny = Math.sqrt(x)\ny = Math.sin(x)\nLinear Regression\nA Linear regression tries to model the relationship between two variables by fitting a linear graph to data.\nOne variable (x) is considered to be data, and the other (y) is considered to be dependent.\nFor example, a Linear Regression can be a model to relate the price of houses to their size.\nLinear Least Squares\nLinear algebra is used to solve Linear Equations.\nLinear Least Squares (LLS) is a set of formulations for solving statistical problems involved in Linear Regression.",
      "examples": []
    },
    {
      "title": "Linear Algebra",
      "summary": "Machine Learning experts cannot live without Linear Algebra:\nML make heavy use of Scalars\nML make heavy use of Vectors\nML make heavy use of Matrices\nML make heavy use of Tensors\nThe purpose of this chapter is to highlight the parts of linear algebra that is used in data science projects like machine learning and deep learning.\nVectors and Matrices\nVectors and Matrices are the languages of data.\nWith ML, most things are done with vectors and matrices.\nWith vectors and matrices, you can Discover Secrets.\nScalars\nIn linear algebra, a scalar is a single number.\nIn JavaScript it can be written like a constant or a variable:\nVectors\nIn linear algebra, a vector is an array of numbers.\nIn JavaScript, it can be written as an array:\nAn array can have multiple dimensions, but a vector is a 1-dimensional array.\nA vector can be written in many ways. The most common are:\nor:\nThe image to the left is a Vector.\nThe Length shows the Magnitude.\nThe Arrow shows the Direction.\nLearn More ...\nREMOVE ADS\nMatrices\nIn linear algebra, a matrix is a 2-dimensional array.\nIn JavaScript, a matrix is typically represented as a two-dimensional (2D) array, meaning an array of arrays. Each inner array represents a row, and each element within those arrays represents a column.\nExample\nLearn More ...\nTensors\nA Tensor is an N-dimensional Matrix.\nIn JavaScript, a tensor is an array with multiple indices (indexes).\nLearn More ...\nLinear Algebra is the branch of mathematics that concerns linear equations (and linear maps) and their representations in vector spaces and through matrices.\nLinear algebra is central to almost all areas of mathematics.\nWikipedia",
      "examples": [
        "const myScalar = 1;\nlet x = 1;\nvar y = 1;",
        "const myArray = [50,60,70,80,90,100,110,120,130,140,150];\nmyArray.length;   // the length of myArray is 11",
        "const myArray = [[1,2],[3,4],[5,6]];"
      ]
    },
    {
      "title": "Vectors",
      "summary": "Vectors are 1-dimentional Arrays\nVectors have a Magnitude and a Direction\nVectors typically describes Motion or Force\nVector Notation\nVectors can be written in many ways. The most common are:\nor:\nVectors in Geometry\nThe image to the left is a Vector.\nThe Length shows the Magnitude.\nThe Arrow shows the Direction.\nMotion\nVectors are the building blocks of Motion\nIn geometry, a vector can describe a movement from one point to another.\nThe vector [3, 2] says go 3 right and 2 up.\nVector Addition\nThe sum of two vectors (a+b) is found by moving the vector b until the tail meets the head of vector a. (This does not change vector b).\nThen, the line from the tail of a to the head of b is the vector a+b:\nVector Subtraction\nVector -a is the opposite of +a.\nThis means that vector a and vector -a has the same magnitude in opposite directions:\nREMOVE ADS\nScalar Operations\nVectors can be modified by adding, subtracting, or multiplying a scalar (number) from all the vector values:\na = [1 1 1]\na + 1 = [2 2 2]\n[1 2 3] + 1 = [2 3 4]\nVector multiplications has much of the same properties as normal multiplication:\n[2 2 2] * 3 = [6 6 6]\n[6 6 6] / 3 = [2 2 2]\nForce\nForce is a Vector.\nForce is a vector with a Magnitude and a Direction.\nVelocity\nVelocity is a Vector.\nVelocity is a vector with a Magnitude and a Direction.",
      "examples": []
    },
    {
      "title": "Matrices",
      "summary": "A matrix is set of Numbers.\nA matrix is an Rectangular Array.\nA matrix is arranged in Rows and Columns.\nMatrix Dimensions\nThis Matrix has 1 row and 3 columns:\nThe Dimension of the matrix is (1x3).\nThis matrix has 2 rows and 3 columns:\nThe dimension of the matrix is (2x3).\nSquare Matrices\nA Square Matrix is a matrix with the same number of rows and columns.\nAn n-by-n matrix is known as a square matrix of order n.\nA 2-by-2 matrix (Square matrix of order 2):\nA 4-by-4 matrix (Square matrix of order 4):\nDiagonal Matrices\nA Diagonal Matrix has values on the diagonal entries, and zero on the rest:\nREMOVE ADS\nScalar Matrices\nA Scalar Matrix has equal diagonal entries and zero on the rest:\nThe Identity Matrix\nThe Identity Matrix has 1 on the diagonal and 0 on the rest.\nThis is the matrix equivalent of 1. The symbol is I.\nIf you multiply any matrix with the identity matrix, the result equals the original.\nThe Zero Matrix\nThe Zero Matrix (Null Matrix) has only zeros.\nEqual Matrices\nMatrices are Equal if each element correspond:\nNegative Matrices\nThe Negative of a matrix is easy to understand:\nLinear Algebra in JavaScript\nIn linear algebra, the most simple math object is the Scalar:\nAnother simple math object is the Array:\nMatrices are 2-dimensional Arrays:\nVectors can be written as Matrices with only one column:\nVectors can also be written as Arrays:\nJavaScript Matrix Operations\nProgramming matrix operations in JavaScript, can easily become a spaghetti of loops.\nUsing a JavaScript library will save you a lot of headache.\nOne of the most common libraries to use for matrix operations is called math.js.\nIt can be added to your web page with one line of code:\nUsing math.js\nAdding Matrices\nIf two matrices have the same dimension, we can add them:\nExample\nTry it Yourself »\nSubtracting Matrices\nIf two matrices have the same dimension, we can subtract them:\nExample\nTry it Yourself »\nTo add or subtract matrices, they must have the same dimension.\nScalar Multiplication\nWhile numbers in rows and columns are called Matrices, single numbers are called Scalars.\nIt is easy to multiply a matrix with a scalar. Just multiply each number in the matrix with the scalar:\nExample\nTry it Yourself »\nExample\nTry it Yourself »\nTranspose a Matrix\nTo transpose a matrix, means to replace rows with columns.\nWhen you swap rows and columns, you rotate the matrix around it's diagonal.\nMultiplying Matrices\nMultiplying matrices is more difficult.\nWe can only multiply two matrices if the number of colums in matrix A is the same as the number of rows in matrix B.\nThen, we need to compile a \"dot product\":\nWe need to multiply the numbers in each column of A with the numbers in each row of B, and then add the products:\nExample\nTry it Yourself »\nExplained:\nIf you know how to multiply matrices, you can solve many complex equations.\nExample\nYou sell roses.\nRed roses are $3 each\nWhite roses are $4 each\nYellow roses are $2 each\nMonday you sold 260 roses\nTuesday you sold 200 roses\nWednesday you sold 120 roses\nWhat was the value of all the sales?\nExample\nTry it Yourself »\nExplained:\nMatrix Factorization\nWith AI, you need to know how to factorize a matrix.\nMatrix factorization is a key tool in linear algebra, especially in Linear Least Squares.",
      "examples": [
        "const scalar = 1;",
        "const array = [ 1, 2, 3 ];",
        "const matrix = [ [1,2],[3,4],[5,6] ];",
        "const vector = [ [1],[2],[3] ];",
        "const vector = [ 1, 2, 3 ];",
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjs/9.3.2/math.js\"></script>",
        "const mA = math.matrix([[1, 2], [3, 4], [5, 6]]);\nconst mB = math.matrix([[1,-1], [2,-2], [3,-3]]);\n\n// Matrix Addition\nconst matrixAdd = math.add(mA, mB);\n\n// Result [ [2, 1], [5, 2], [8, 3] ]",
        "const mA = math.matrix([[1, 2], [3, 4], [5, 6]]);\nconst mB = math.matrix([[1,-1], [2,-2], [3,-3]]);\n\n// Matrix Subtraction\nconst matrixSub = math.subtract(mA, mB);\n\n// Result [ [0, 3], [1, 6], [2, 9] ]",
        "const mA = math.matrix([[1, 2], [3, 4], [5, 6]]);\n\n// Matrix Multiplication\nconst matrixMult = math.multiply(2, mA);\n\n// Result [ [2, 4], [6, 8], [10, 12] ]",
        "const mA = math.matrix([[0, 2], [4, 6], [8, 10]]);\n\n// Matrix Division\nconst matrixDiv = math.divide(mA, 2);\n\n// Result [ [0, 1], [2, 3], [4, 5] ]",
        "const mA = math.matrix([1, 2, 3]);\nconst mB = math.matrix([[1, 4, 7], [2, 5, 8], [3, 6, 9]]);\n\n// Matrix Multiplication\nconst matrixMult = math.multiply(mA, mB);\n\n// Result [14, 32, 50]",
        "const mA = math.matrix([3, 4, 2]);\nconst mB = math.matrix([[120, 90, 60], [80, 70, 40], [60, 40, 20]);\n\n// Matrix Multiplication\nconst matrixMult = math.multiply(mA, mB);\n\n// Result [800, 630, 380]"
      ]
    },
    {
      "title": "Tensors",
      "summary": "A Tensor is a N-dimensional Matrix:\nA Scalar is a 0-dimensional tensor\nA Vector is a 1-dimensional tensor\nA Matrix is a 2-dimensional tensor\nA Tensor is a generalization of Vectors and Matrices to higher dimensions.\nTensor Ranks\nThe number of directions a tensor can have in a N-dimensional space, is called the Rank of the tensor.\nThe rank is denoted R.\nA Scalar is a single number.\nIt has 0 Axes\nIt has a Rank of 0\nIt is a 0-dimensional Tensor\nA Vector is an array of numbers.\nIt has 1 Axis\nIt has a Rank of 1\nIt is a 1-dimensional Tensor\nA Matrix is a 2-dimensional array.\nIt has 2 Axis\nIt has a Rank of 2\nIt is a 2-dimensional Tensor\nReal Tensors\nTechnically, all of the above are tensors, but when we speak of tensors, we generally speak of matrices with a dimension larger than 2 (R > 2).\nREMOVE ADS\nLinear Algebra in JavaScript\nIn linear algebra, the most simple math object is the Scalar:\nAnother simple math object is the Array:\nMatrices are 2-dimensional Arrays:\nVectors can be written as Matrices with only one column:\nVectors can also be written as Arrays:\nTensors are N-dimensional Arrays:\nJavaScript Tensor Operations\nProgramming tensor operations in JavaScript, can easily become a spaghetti of loops.\nUsing a JavaScript library will save you a lot of headache.\nOne of the most common libraries to use for tensor operations is called tensorflow.js.\nTensor Addition\nTry it Yourself »\nTensor Subtraction\nTry it Yourself »\nLearn more about Tensorflow ...",
      "examples": [
        "const scalar = 1;",
        "const array = [ 1, 2, 3 ];",
        "const matrix = [ [1,2],[3,4],[5,6] ];",
        "const vector = [ [1],[2],[3] ];",
        "const vector = [ 1, 2, 3 ];",
        "const tensor = [ [1,2,3],[4,5,6],[7,8,9] ];",
        "const tensorA = tf.tensor([[1, 2], [3, 4], [5, 6]]);\nconst tensorB = tf.tensor([[1,-1], [2,-2], [3,-3]]);\n\n// Tensor Addition\nconst tensorAdd = tensorA.add(tensorB);\n\n// Result [ [2, 1], [5, 2], [8, 3] ]",
        "const tensorA = tf.tensor([[1, 2], [3, 4], [5, 6]]);\nconst tensorB = tf.tensor([[1,-1], [2,-2], [3,-3]]);\n\n// Tensor Subtraction\nconst tensorSub = tensorA.sub(tensorB);\n\n// Result [ [0, 3], [1, 6], [2, 9] ]"
      ]
    },
    {
      "title": "Machine Learning Statistics",
      "summary": "Statistics are tools to get answers to questions about data:\nWhat is Common?\nWhat is Expected?\nWhat is Normal?\nWhat is the Probability?\nInferential Statistics\nInferential statistics are methods for quantifying properties of a population from a small Sample:\nYou take data from a sample and make a prediction about the whole population.\nFor example, you can stand in a shop and ask a sample of 100 people if they like chocolate.\nFrom your research, using inferential statistics, you could predict that 91% of all shoppers like chocolate.\nIncredible Chocolate Facts\nNine out of ten people love chocolate.\n50% of the US population cannot live without chocolate every day.\nYou use Inferential Statistics to predict whole domains from small samples of data.\nREMOVE ADS\nDescriptive Statistics\nDescriptive Statistics summarizes (describes) observations from a set of data.\nSince we register every newborn baby, we can tell that 51 out of 100 are boys.\nFrom these collected numbers, we can predict a 51% chance that a new baby will be a boy.\nIt is a mystery that the ratio is not 50%, like basic biology would predict. We only know that we have had this tilted sex ratio since the 17th century.\nNote\nRaw observations are only data. They are not real knowledge.\nYou use Descriptive Statistics to transform raw observations into data that you can understand.\nDescriptive Statistics Measurements\nDescriptive statistics are broken down into different measures:\nTendency (Measures of the Center)\nThe Mean (the average value)value\nThe Median (the mid point value)\nThe Mode (the most common value)\nSpread (Measures of Variability)\nMin and Max\nStandard Deviation\nVariance\nSkewness\nKurtosis",
      "examples": []
    },
    {
      "title": "Descriptive Statistics",
      "summary": "Descriptive Statistics is broken down into Tendency and Variability.\nTendency is about Center Measures:\nThe Mean (the average value)\nThe Median (the mid point value)\nThe Mode (the most common value)\nThe Mean\nThe Mean Value is the Average of all values.\nThis table contains 11 values:\nTo find the Mean Value: Add all values and divide by the number of values.\nThe Mean Value is:\n(7+8+8+9+9+9+10+11+14+14+15)/11 = 10.3636363636.\nThe Mean is the Sum divided by the Count.\nCalculate the Mean Value:\nTry it Yourself »\nOr use a math library like math.js:\nTry it Yourself »\nThe Median\nA list of speed values:\nThe Median is the value in the middle (after the values are sorted):\nCalculate the median:\nTry it Yourself »\nIf there are two numbers in the middle, divide the sum of them by two.\nCalculate the median:\nTry it Yourself »\nThe Mode\nThe Mode Value is the value that appears the most number of times:\nCalculate the mode:\nTry it Yourself »\nOutliers\nOutliers are values \"outside\" the other values:\nOutliers can change the mean a lot. Sometimes we don't use them (they might be an error), or we use the median or the mode instead.\nCalculate the Mean:\nTry it Yourself »",
      "examples": [
        "let mean = (7+8+8+9+9+9+10+11+14+14+15)/11;",
        "const values = [7,8,8,9,9,9,10,11,14,14,15];\nlet mean = math.mean(values);",
        "99,86,87,88,111,86,103,87,94,78,77,85,86",
        "77,78,85,86,86,86,87,87,88,94,99,103,111",
        "const speed = [99,86,87,88,111,86,103,87,94,78,77,85,86];\nlet median = math.median(speed);",
        "77,78,85,86,86,86,87,87,88,94,99,103",
        "(86 + 87) / 2 = 86.5",
        "const speed = [99,86,87,88,86,103,87,94,78,77,85,86];\nlet median = math.median(speed);",
        "const speed = [99,86,87,88,86,103,87,94,78,77,85,86];\nlet mode = math.mode(speed);",
        "99,86,87,88,111,86,103,87,94,78,300,85,86",
        "const values = [99,86,87,88,111,86,103,87,94,78,300,85,86];\nlet mean = math.mean(values);"
      ]
    },
    {
      "title": "Statistic Variability (Spread)",
      "summary": "Descriptive Statistics is broken down into Tendency and Variability.\nVariability uses these measures:\nMin and Max\nVariance\nDeviation\nDistribution\nSkewness\nKurtosis\nThe Variance\nIn statistics, the Variance is the average of the squared differences from the Mean Value.\nIn other words, the variance describes how far a set of numbers is Spread Out from the mean (average) value.\nMean value is described in the previous chapter.\nThis table contains 11 values:\nCalculate the Variance:\nTry it Yourself »\nOr use a math library like math.js:\nTry it Yourself »\nREMOVE ADS\nStandard Deviation\nStandard Deviation is a measure of how spread out numbers are.\nThe symbol is σ (Greek letter sigma).\nThe formula is the √ variance (the square root of the variance).\nThe Standard Deviation is (in JavaScript):\nTry it Yourself »\nDeviation is a measure of Distance.\nHow far (on average), all values are from the Mean (the Middle).\nOr if you use a math library like math.js:\nTry it Yourself »",
      "examples": [
        "// Calculate the Mean (m)\nlet m = (7+8+8+9+9+9+10+11+14+14+15)/11;\n\n// Calculate the Sum of Squares (ss)\nlet ss = (7-m)**2 + (8-m)**2 + (8-m)**2 + (9-m)**2 + (9-m)**2 + (9-m)**2 + (9-m)**2 + (10-m)**2 + (11-m)**2 + (14-m)**2 + (15-m)**2;\n\n// Calculate the Variance\nlet variance = ss / 11;",
        "const values = [7,8,8,9,9,9,10,11,14,14,15];\nlet variance = math.variance(values, \"uncorrected\");",
        "// Calculate the Mean (m)\nlet m = (7+8+8+9+9+9+10+11+14+15)/11;\n\n// Calculate the Sum of Squares (ss)\nlet ss = (7-m)**2 + (8-m)**2 + (8-m)**2 + (9-m)**2 + (9-m)**2 + (9-m)**2 + (9-m)**2 + (10-m)**2 + (11-m)**2 + (14-m)**2 + (15-m)**2;\n\n// Calculate the Variance\nlet variance = ss / 11;\n\n// Calculate the Standard Deviation\nlet std = Math.sqrt(variance);",
        "const values = [7,8,8,9,9,9,9,10,11,14,15];\nlet std = math.std(values, \"uncorrected\");"
      ]
    },
    {
      "title": "Distribution",
      "summary": "What is Normal Distribution?\nWhat is Margin of Error?\nWhat is Skewness?\nWhat is Kurtosis?\nNormal Distribution\nThe Normal Distribution Curve is a bell-shaped curve.\nEach band of the curve has a width of 1 Standard Deviation:\nEach band of the curve has a width of 1 Standard deviation from the Mean Value.\nValues less than 1 Standard Deviation away account for 68.27%.\nValues less than 2 standard deviations away account for 95.45%.\nValues less than 3 standard deviations away account for 99.73%.\nWhat does it mean?\nMost observations are within 1 standard deviation from the mean.\nAlmost all observations are within 2 standard deviations.\nPractically all observations are within 3 standard deviations.\nNormal Distribution Facts\nNormal distribution is Symmetric. The peak always divides the distribution in half.\nNormal distribution is a Probability distribution.\nA lot of observations follow the normal distribution:\nYour IQ\nYour Weight\nYour Height\nYour Salary\nYour Blood Pressure\nNormal distribution shows that values near the mean are more frequent than values far from the mean:\nThe 68–95–99.7 Rule (aka The Empirical Rule), is a shorthand to remember the percentage of values that lie within the different bands of a normal distribution.\nNormal distribution is also known as the Gaussian Distribution and the Bell Curve.\nREMOVE ADS\nThe Margin of Error\nStatisticians will always try to predict everything with 100% accuracy.\nBut, there will always be some uncertainty.\nThe Margin of Error is the number that quantifies this statistical uncertainty.\nDifferent margins define different ranges for where we believe the correct answers can be found.\nThe acceptable margin is a matter of judgment, and relative to how important the answer is.\nThe more samples we collect, the lower the margin of error is:\nHow to Interpret Margin of Error\nSuppose 55% of a sampled population say they plan to vote \"Yes\".\nWhen projecting this to a whole population, you add/subtract the margin of error to give a range of possible results.\nWith a margin of error of 3%, you are confident that between 52% and 58% will vote \"Yes\".\nWith a margin of error of 10%, you are confident that between 45% and 65% will vote \"Yes\".\nSkewness\nSkewness is a distortion (an asymmetry) from the bell curve (normal distribution).\nKurtosis\nKurtosis is a also a distortion from the normal distribution (bell curve).\nWhile skewness describes a unexpected values in one tail, kurtosis describes unexpected values in both tails.\nImage: Negative kurtosis (lower than normal distribution).\nImage: Positive kurtosis (higher than normal distribution).",
      "examples": []
    },
    {
      "title": "Probability",
      "summary": "Probability is about how Likely something is to occur, or how likely something is true.\nThe mathematic probability is a Number between 0 and 1.\n0 indicates Impossibility and 1 indicates Certainty.\nThe Probability of an Event\nThe probability of an event is:\nThe number of ways the event can happen / The number of possible outcomes.\nProbability = # of Ways / Outcomes\nTossing Coins\nWhen tossing a coin, there are two possible outcomes:\nP(A) - The Probability\nThe probability of an event A is often written as P(A).\nWhen tossing two coins, there are 4 possible outcomes:\nThrowing Dices\nWhen throwing a dice, there are 6 possible outcomes:\nThe possibility of throwing 3 fours at the same time is\n(1/6)3 (Lands on 4 to the power of 3):\nThe possibility is:\nTry it Yourself »\nThe possibility of throwing 3 likes at the same time is 6 times larger:\n(lands on 1) + (Lands on 2) + ... + (Lands on 6)\nThe possibility is:\nTry it Yourself »\nREMOVE ADS\n6 Balls\nI have 6 balls in a bag: 3 reds, 2 are green, and 1 is blue.\nBlindfolded. What is the probability that I pick a green one?\nNumber of Ways it can happen are 2 (there are 2 greens).\nNumber of Outcomes are 6 (there are 6 balls).\nProbability = Ways / Outcomes\nThe probability that I pick a green one is 2 out of 6: 2/6 = 0.333333.\nThe probability is written P(green) = 0.333333.\nP(A) = P(B)\nFor the 6 balls:\nChoosing a King\nThe probability of choosing a king in a deck of cards is 4 in 52.\nNumber of Ways it can happen are 4 (there are 4 kings).\nNumber of Outcomes are 52 (there are 52 cards).\nProbability = Ways / Outcomes\nThe probability is 4 out of 52: 4/52 = 0.076923.\nThe probability is written P(king) = 0.076923.",
      "examples": [
        "let p = Math.pow(1/6, 3);",
        "let p = Math.pow(1/6, 3) * 6;"
      ]
    }
  ],
  "glossary": [
    "algorithms",
    "artificial intelligence",
    "backend",
    "creates algorithms",
    "deep learning",
    "descriptive",
    "distribution",
    "ex1 data",
    "ex1 intro",
    "ex1 model",
    "ex1 training",
    "ex2 data",
    "ex2 intro",
    "ex2 model",
    "ex2 training",
    "exercises",
    "free",
    "graph canvas",
    "graph google",
    "graph intro",
    "history",
    "javascript",
    "job replacements",
    "js graphics",
    "linear algebra",
    "linear functions",
    "machine learning",
    "mathematics",
    "matrices",
    "ml clustering",
    "ml data",
    "ml intro",
    "ml javascript",
    "ml languages",
    "ml learning",
    "ml perceptrons",
    "ml recognition",
    "ml regressions",
    "ml terminology",
    "ml testing",
    "ml training",
    "neural networks",
    "perceptron",
    "perceptrons",
    "probability",
    "programs",
    "references",
    "report error",
    "results",
    "statistics",
    "tensorflow",
    "tensors",
    "tfjs models",
    "tfjs operations",
    "tfjs visor",
    "uses algorithms",
    "variability",
    "vectors",
    "w3schools spaces"
  ],
  "objectives": [
    "A programming technique",
    "A method used in machine learning",
    "A software that learns from mistakes"
  ]
}