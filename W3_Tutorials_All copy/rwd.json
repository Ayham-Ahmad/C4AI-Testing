{
  "course_name": "RWD",
  "description": "CSS is the language we use to style an HTML document. CSS describes how HTML elements should be displayed. This tutorial will teach you CSS from basic to advanced. Tip: Sign in to track your progress - it's free. This CSS tutorial contains hundreds of CSS examples. With our online editor, you can edit the CSS, and click on a button to view the result. Click on the \"Try it Yourself\" button to see how it works. Learn from over 300 examples! With our editor, you can edit the CSS, and click on a button to view the result. Go to CSS Examples! We recommend reading this tutorial, in the sequence listed in the menu. If you have a large screen, the menu will always be present on the left. If you have a small screen, open the menu by clicking the top menu sign ☰. We have created some responsive W3.CSS templates for you to use. You are free to modify, save, share, and use them in all your projects. Free CSS Templates!",
  "course_summary": [
    {
      "title": "CSS Introduction",
      "summary": "What is CSS?\nCSS is the language we use to style a Web page.\nCSS stands for Cascading Style Sheets\nCSS describes how HTML elements are to be displayed on screen, paper, or in other media\nCSS saves a lot of work. It can control the layout of multiple web pages all at once\nExternal stylesheets are stored in CSS files\nCSS Demo - One HTML Page - Multiple Styles!\nHere we will show one HTML page displayed with four different stylesheets. Click on the \"Stylesheet 1\", \"Stylesheet 2\", \"Stylesheet 3\", \"Stylesheet 4\" links below to see the different styles:\nREMOVE ADS\nWhy Use CSS?\nCSS is used to define styles for your web pages, including the design, layout and variations in display for different devices and screen sizes.\nCSS Example\nCSS Saves a Lot of Work!\nThe CSS definitions are normally saved in an external .css file.\nWith an external stylesheet file, you can change the look of an entire website by changing just one file!\nVideo: CSS Introduction",
      "examples": [
        "body {\nbackground-color: lightblue;\n}\n\nh1 {\ncolor: white;\ntext-align: center;\n}\n\np {\nfont-family: verdana;\nfont-size: 20px;\n}"
      ]
    },
    {
      "title": "CSS Syntax",
      "summary": "CSS Syntax\nA CSS rule consists of a selector and a declaration block:\nThe selector points to the HTML element you want to style.\nThe declaration block contains one or more declarations separated by semicolons.\nEach declaration includes a CSS property name and a value, separated by a colon.\nMultiple CSS declarations are separated with semicolons, and declaration blocks are surrounded by curly braces.\nExample\nIn this example all <p> elements will be center-aligned, with a red text color:\np is a selector in CSS (it points to the HTML element you want to style: <p>).\ncolor is a property, and red is the property value\ntext-align is a property, and center is the property value\nYou will learn much more about CSS selectors and CSS properties in the next chapters!\nVideo: CSS Syntax",
      "examples": [
        "p {\ncolor: red;\ntext-align: center;\n}",
        "p",
        "color",
        "red",
        "text-align",
        "center"
      ]
    },
    {
      "title": "CSS Selectors",
      "summary": "CSS Selectors\nCSS selectors are used to \"find\" (or select) the HTML elements you want to style.\nWe can divide CSS selectors into five categories:\nSimple selectors (select elements based on name, id, class)\nCombinator selectors (select elements based on a specific relationship between them)\nPseudo-class selectors (select elements based on a certain state)\nPseudo-elements selectors (select and style a part of an element)\nAttribute selectors (select elements based on an attribute or attribute value)\nThis page will explain the most basic CSS selectors.\nThe CSS element Selector\nThe element selector selects HTML elements based on the element name.\nExample\nHere, all <p> elements on the page will be center-aligned, with a red text color:\nThe CSS id Selector\nThe id selector uses the id attribute of an HTML element to select a specific element.\nThe id of an element is unique within a page, so the id selector is used to select one unique element!\nTo select an element with a specific id, write a hash (#) character, followed by the id of the element.\nExample\nThe CSS rule below will be applied to the HTML element with id=\"para1\":\nNote: An id name cannot start with a number!\nREMOVE ADS\nThe CSS class Selector\nThe class selector selects HTML elements with a specific class attribute.\nTo select elements with a specific class, write a period (.) character, followed by the class name.\nExample\nIn this example all HTML elements with class=\"center\" will be red and center-aligned:\nYou can also specify that only specific HTML elements should be affected by a class.\nExample\nIn this example only <p> elements with class=\"center\" will be red and center-aligned:\nHTML elements can also refer to more than one class.\nExample\nIn this example the <p> element will be styled according to class=\"center\" and to class=\"large\":\nNote: A class name cannot start with a number!\nThe CSS Universal Selector\nThe universal selector (*) selects all HTML elements on the page.\nExample\nThe CSS rule below will affect every HTML element on the page:\nThe CSS Grouping Selector\nThe grouping selector selects all the HTML elements with the same style definitions.\nLook at the following CSS code (the h1, h2, and p elements have the same style definitions):\nIt will be better to group the selectors, to minimize the code.\nTo group selectors, separate each selector with a comma.\nExample\nIn this example we have grouped the selectors from the code above:\nAll CSS Simple Selectors\nVideo: CSS Simple Selectors",
      "examples": [
        "p {\ntext-align: center;\ncolor: red;\n}",
        "#para1 {\ntext-align: center;\ncolor: red;\n}",
        ".center {\ntext-align: center;\ncolor: red;\n}",
        "p.center {\ntext-align: center;\ncolor: red;\n}",
        "<p class=\"center large\">This paragraph refers to two classes.</p>",
        "* {\ntext-align: center;\ncolor: blue;\n}",
        "h1 {\ntext-align: center;\ncolor: red;\n}\n\nh2 {\ntext-align: center;\ncolor: red;\n}\n\np {\ntext-align: center;\ncolor: red;\n}",
        "h1, h2, p {\ntext-align: center;\ncolor: red;\n}",
        "element",
        "id",
        "class",
        "universal selector (*)",
        "grouping selector"
      ]
    },
    {
      "title": "How To Add CSS",
      "summary": "How to Add CSS\nWhen a browser reads a style sheet, it will format the HTML document according to the information in the style sheet.\nThere are three ways of inserting a style sheet:\nExternal CSS\nInternal CSS\nInline CSS\nExternal CSS\nWith an external style sheet, you can change the look of an entire website by changing just one file!\nEach HTML page must include a reference to the external style sheet file inside the <link> element, inside the head section.\nExample\nExternal styles are defined within the <link> element, inside the <head> section of an HTML page:\nAn external style sheet can be written in any text editor, and must be saved with a .css extension.\nThe external .css file should not contain any HTML tags.\nHere is how the \"mystyle.css\" file looks:\n\"mystyle.css\"\nNote: Do not add a space between the property value (20) and the unit (px):\nIncorrect (space): margin-left: 20 px;\nCorrect (no space): margin-left: 20px;\nREMOVE ADS\nInternal CSS\nAn internal style sheet may be used if one single HTML page has a unique style.\nThe internal style is defined inside the <style> element, inside the head section.\nExample\nInternal styles are defined within the <style> element, inside the <head> section of an HTML page:\nInline CSS\nAn inline style may be used to apply a unique style for a single element.\nTo use inline styles, add the style attribute to the relevant element. The style attribute can contain any CSS property.\nExample\nInline styles are defined within the \"style\" attribute of the relevant element:\nTip: An inline style loses many of the advantages of a style sheet (by mixing content with presentation). Use this method sparingly.\nMultiple Style Sheets\nIf some properties have been defined for the same selector (element) in different style sheets, the value from the last read style sheet will be used.\nAssume that an external style sheet has the following style for the <h1> element:\nThen, assume that an internal style sheet also has the following style for the <h1> element:\nExample\nIf the internal style is defined after the link to the external style sheet, the <h1> elements will be \"orange\":\nExample\nHowever, if the internal style is defined before the link to the external style sheet, the <h1> elements will be \"navy\":\nCascading Order\nWhat style will be used when there is more than one style specified for an HTML element?\nAll the styles in a page will \"cascade\" into a new \"virtual\" style sheet by the following rules, where number one has the highest priority:\nInline style (inside an HTML element)\nExternal and internal style sheets (in the head section)\nBrowser default\nSo, an inline style has the highest priority, and will override external and internal styles and browser defaults.\nTry it Yourself »\nEver heard about W3Schools Spaces? Here you can create your own website, or save code snippets for later use, for free.\n* no credit card required\nVideo: How to add CSS to HTML",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<head>\n<link rel=\"stylesheet\" href=\"mystyle.css\">\n</head>\n<body>\n\n<h1>This is a heading</h1>\n<p>This is a paragraph.</p>\n\n</body>\n</html>",
        "body {\nbackground-color: lightblue;\n}\n\nh1 {\ncolor: navy;\nmargin-left: 20px;\n}",
        "<!DOCTYPE html>\n<html>\n<head>\n<style>\nbody {\nbackground-color: linen;\n}\n\nh1 {\ncolor: maroon;\nmargin-left: 40px;\n}\n</style>\n</head>\n<body>\n\n<h1>This is a heading</h1>\n<p>This is a paragraph.</p>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<body>\n\n<h1 style=\"color:blue;text-align:center;\">This is a heading</h1>\n<p style=\"color:red;\">This is a paragraph.</p>\n\n</body>\n</html>",
        "h1 {\ncolor: navy;\n}",
        "h1 {\ncolor: orange;\n}",
        "<head>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"mystyle.css\">\n<style>\nh1 {\ncolor: orange;\n}\n</style>\n</head>",
        "<head>\n<style>\nh1 {\ncolor: orange;\n}\n</style>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"mystyle.css\">\n</head>",
        "margin-left: 20 px;",
        "margin-left: 20px;"
      ]
    },
    {
      "title": "CSS Comments",
      "summary": "CSS Comments\nComments are used to explain the CSS code, and may help when you edit the source code at a later date.\nComments are also used to temporarily disable sections of CSS code within a stylesheet.\nComments are ignored by browsers!\nA CSS comment is placed inside the HTML <style> element, and starts with /* and ends with */:\nExample\nYou can add comments wherever you want in the code:\nExample\nEven in the middle of a code line:\nExample\nComments can also span multiple lines:\nExample\nREMOVE ADS\nHTML and CSS Comments\nFrom the HTML tutorial, you learned that you can add comments to your HTML source by using the <!--...--> syntax.\nIn the following example, we use a combination of HTML and CSS comments:\nExample\nVideo: CSS Comments",
      "examples": [
        "/* This is a single-line comment */\np {\ncolor: red;\n}",
        "p {\ncolor: red;  /* Set text color to red */\n}",
        "p {\ncolor: /*red*/blue;\n}",
        "/* This is\na multi-line\ncomment */\n\np {\ncolor: red;\n}",
        "<!DOCTYPE html>\n<html>\n<head>\n<style>\np {\ncolor: red; /* Set text color to red */\n}\n</style>\n</head>\n<body>\n\n<h2>My Heading</h2>\n\n<!-- These paragraphs will be red -->\n<p>Hello World!</p>\n<p>This paragraph is styled with CSS.</p>\n<p>HTML and CSS comments are not shown in the output.</p>\n\n</body>\n</html>",
        "<style>",
        "/*",
        "*/",
        "<!--...-->"
      ]
    },
    {
      "title": "CSS Errors",
      "summary": "CSS Errors\nErrors in CSS can lead to unexpected behavior or styles not being applied correctly. This page shows common CSS mistakes and how to avoid them.\nMissing Semicolons\nForgetting a semicolon at the end of a property declaration can break the style rule.\nExample\nInvalid Property Names\nUsing a property name that does not exist will simply be ignored by the browser.\nExample\nREMOVE ADS\nInvalid Values\nCorrect properties but invalid values will also be ignored.\nExample\nUnclosed Braces\nIf you forget to close a brace }, the entire rule may be ignored.\nExample\nExtra Colons or Braces\nTypos like extra colons or misplaced braces can cause rules to break.\nExample\nTips to Avoid CSS Errors\nUse a code editor with syntax highlighting.\nValidate your CSS with a CSS linter or validator.\nWrite CSS in small sections and test frequently.",
      "examples": [
        ".bad {\ncolor: red\nbackground-color: yellow;\n}",
        ".bad {\ncolr: blue;\nfont-size: 16px;\n}",
        ".bad {\nwidth: -100px;\ncolor: green;\n}",
        ".bad {\npadding: 20px;\nmargin: 10px;",
        ".bad {\ncolor:: blue;\n}",
        "}"
      ]
    },
    {
      "title": "CSS Colors",
      "summary": "CSS Colors\nIn CSS, colors are specified by using a predefined color name, or with a RGB, HEX, HSL, RGBA, HSLA value.\nCSS Color Names\nIn CSS, a color can be specified by using a predefined color name:\nTry it Yourself »\nCSS/HTML support 140 standard color names.\nCSS Background Color\nYou can set the background color for HTML elements:\nExample\nCSS Text Color\nYou can set the color of text:\nHello World\nLorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.\nUt wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.\nExample\nREMOVE ADS\nCSS Border Color\nYou can set the color of borders:\nHello World\nHello World\nHello World\nExample\nCSS Color Values\nIn CSS, colors can also be specified using RGB values, HEX values, HSL values, RGBA values, and HSLA values:\nSame as color name \"Tomato\":\nSame as color name \"Tomato\", but 50% transparent:\nExample\nLearn more about Color Values\nYou will learn more about RGB, HEX and HSL in the next chapters.\nVideo: CSS Colors Introduction",
      "examples": [
        "<h1 style=\"background-color:DodgerBlue;\">Hello World</h1>\n<p style=\"background-color:Tomato;\">Lorem ipsum...</p>",
        "<h1 style=\"color:Tomato;\">Hello World</h1>\n<p style=\"color:DodgerBlue;\">Lorem ipsum...</p>\n<p style=\"color:MediumSeaGreen;\">Ut wisi enim...</p>",
        "<h1 style=\"border:2px solid Tomato;\">Hello World</h1>\n<h1 style=\"border:2px solid DodgerBlue;\">Hello World</h1>\n<h1 style=\"border:2px solid Violet;\">Hello World</h1>",
        "<h1 style=\"background-color:rgb(255, 99, 71);\">...</h1>\n<h1 style=\"background-color:#ff6347;\">...</h1>\n<h1 style=\"background-color:hsl(9, 100%, 64%);\">...</h1>\n\n<h1 style=\"background-color:rgba(255, 99, 71, 0.5);\">...</h1>\n<h1 style=\"background-color:hsla(9, 100%, 64%, 0.5);\">...</h1>"
      ]
    },
    {
      "title": "CSS RGB Colors",
      "summary": "RGB Value\nAn RGB color value represents RED, GREEN, and BLUE light sources.\nIn CSS, a color can be specified as an RGB value, using this formula:\nrgb(red, green, blue)\nEach parameter (red, green, and blue) defines the intensity of the color between 0 and 255.\nFor example, rgb(255, 0, 0) is displayed as red, because red is set to its highest value (255) and the others are set to 0.\nTo display black, set all color parameters to 0, like this: rgb(0, 0, 0).\nTo display white, set all color parameters to 255, like this: rgb(255, 255, 255).\nExperiment by mixing the RGB values below:\nrgb(255, 99, 71)\nRED\nGREEN\nBLUE\nExample\nShades of gray are often defined using equal values for all the 3 light sources:\nExample\nREMOVE ADS\nRGBA Value\nRGBA color values are an extension of RGB color values with an alpha channel - which specifies the opacity for a color.\nAn RGBA color value is specified with:\nrgba(red, green, blue, alpha)\nThe alpha parameter is a number between 0.0 (fully transparent) and 1.0 (not transparent at all):\nExperiment by mixing the RGBA values below:\nrgba(255, 99, 71, 0.5)\nRED\nGREEN\nBLUE\nALPHA\nExample\nVideo: CSS Colors RGB & RGBA",
      "examples": []
    },
    {
      "title": "CSS HEX Colors",
      "summary": "HEX Value\nA hexadecimal color is specified with: #RRGGBB.\nIn CSS, a color can be specified using a hexadecimal value in the form:\n#rrggbb\nWhere rr (red), gg (green) and bb (blue) are hexadecimal values between 00 and ff (same as decimal 0-255).\nFor example, #ff0000 is displayed as red, because red is set to its highest value (ff) and the others are set to the lowest value (00).\nTo display black, set all values to 00, like this: #000000.\nTo display white, set all values to ff, like this: #ffffff.\nExperiment by mixing the HEX values below:\n#ff6347\nRED\nGREEN\nBLUE\nExample\nShades of gray are often defined using equal values for all the 3 light sources:\nExample\nREMOVE ADS\n3 Digit HEX Value\nSometimes you will see a 3-digit hex code in the CSS source.\nThe 3-digit hex code is a shorthand for some 6-digit hex codes.\nThe 3-digit hex code has the following form:\n#rgb\nWhere r, g, and b represent the red, green, and blue components with values between 0 and f.\nThe 3-digit hex code can only be used when both the values (RR, GG, and BB) are the same for each component. So, if we have #ff00cc, it can be written like this: #f0c.\nHere is an example:\nExample\nVideo: CSS Colors Hex",
      "examples": [
        "body {\nbackground-color: #fc9; /* same as #ffcc99 */\n}\n\nh1 {\ncolor: #f0f; /* same as #ff00ff */\n}\n\np {\ncolor: #b58; /* same as #bb5588 */\n}"
      ]
    },
    {
      "title": "CSS HSL Colors",
      "summary": "HSL Value\nHSL stands for hue, saturation, and lightness.\nIn CSS, a color can be specified using hue, saturation, and lightness (HSL) in the form:\nhsl(hue, saturation, lightness)\nHue is a degree on the color wheel (from 0 to 360):\n0 (or 360) is red\n120 is green\n240 is blue\nSaturation is a percentage value: 0% means a shade of gray, and 100% is the full color.\nLightness is also a percentage; 0% is black, 50% is neither light or dark, 100% is white.\nExperiment by mixing the HSL values below:\nhsl(0, 100%, 50%)\nHUE\nSATURATION\nLIGHTNESS\nExample\nSaturation\nSaturation can be described as the intensity of a color.\n100% is pure color, no shades of gray.\n50% is 50% gray, but you can still see the color.\n0% is completely gray; you can no longer see the color.\nExample\nREMOVE ADS\nLightness\nThe lightness of a color can be described as how much light you want to give the color, where 0% means no light (black), 50% means 50% light (neither dark nor light) and 100% means full lightness (white).\nExample\nShades of Gray\nShades of gray are often defined by setting the hue and saturation to 0, and adjust the lightness from 0% to 100% to get darker/lighter shades:\nExample\nHSLA Value\nHSLA color values are an extension of HSL color values with an alpha channel - which specifies the opacity for a color.\nAn HSLA color value is specified with:\nhsla(hue, saturation, lightness, alpha)\nThe alpha parameter is a number between 0.0 (fully transparent) and 1.0 (not transparent at all):\nExperiment by mixing the HSLA values below:\nhsla(0, 100%, 50%, 0.5)\nHUE\nSATURATION\nLIGHTNESS\nALPHA\nExample\nVideo: CSS Colors HSL",
      "examples": []
    },
    {
      "title": "CSS Backgrounds",
      "summary": "CSS Backgrounds\nThe CSS background properties are used to add background effects for elements.\nIn these chapters, you will learn about the following CSS background properties:\nbackground-color\nbackground-image\nbackground-repeat\nbackground-attachment\nbackground-position\nbackground (shorthand property)\nCSS background-color\nThe background-color property specifies the background color of an element.\nExample\nThe background color of a page is set like this:\nWith CSS, a color is most often specified by:\na valid color name - like \"red\"\na HEX value - like \"#ff0000\"\nan RGB value - like \"rgb(255,0,0)\"\nLook at CSS Color Values for a complete list of possible color values.\nOther Elements\nYou can set the background color for any HTML elements:\nExample\nHere, the <h1>, <p>, and <div> elements will have different background colors:\nREMOVE ADS\nOpacity / Transparency\nThe opacity property specifies the opacity/transparency of an element. It can take a value from 0.0 - 1.0. The lower value, the more transparent:\nopacity 1\nopacity 0.6\nopacity 0.3\nopacity 0.1\nExample\nNote: When using the opacity property to add transparency to the background of an element, all of its child elements inherit the same transparency. This can make the text inside a fully transparent element hard to read.\nTransparency using RGBA\nIf you do not want to apply opacity to child elements, like in our example above, use RGBA color values. The following example sets the opacity for the background color and not the text:\n100% opacity\n60% opacity\n30% opacity\n10% opacity\nYou learned from our CSS Colors Chapter, that you can use RGB as a color value. In addition to RGB, you can use an RGB color value with an alpha channel (RGBA) - which specifies the opacity for a color.\nAn RGBA color value is specified with: rgba(red, green, blue, alpha). The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque).\nTip: You will learn more about RGBA Colors in our CSS Colors Chapter.\nExample\nThe CSS Background Color Property\nVideo: CSS Background Color",
      "examples": [
        "body {\nbackground-color: lightblue;\n}",
        "h1 {\nbackground-color: green;\n}\n\ndiv {\nbackground-color: lightblue;\n}\n\np {\nbackground-color: yellow;\n}",
        "div {\nbackground-color: green;\nopacity: 0.3;\n}",
        "div {\nbackground: rgba(0, 128, 0, 0.3) /* Green background with 30% opacity */\n}",
        "background-color",
        "background-image",
        "background-repeat",
        "background-attachment",
        "background-position",
        "background",
        "opacity"
      ]
    },
    {
      "title": "CSS Background Image",
      "summary": "CSS background-image\nThe background-image property specifies an image to use as the background of an element.\nBy default, the image is repeated so it covers the entire element.\nExample\nSet the background image for a page:\nExample\nThis example shows a bad combination of text and background image. The text is hardly readable:\nNote: When using a background image, use an image that does not disturb the text.\nThe background image can also be set for specific elements, like the <p> element:\nExample\nThe CSS Background Image Property\nVideo: CSS Background Images",
      "examples": [
        "body {\nbackground-image: url(\"paper.gif\");\n}",
        "body {\nbackground-image: url(\"bgdesert.jpg\");\n}",
        "p {\nbackground-image: url(\"paper.gif\");\n}",
        "background-image"
      ]
    },
    {
      "title": "CSS Background Image Repeat",
      "summary": "CSS background-repeat\nThe background-repeat property sets if/how a background image will be repeated.\nBy default, a background-image is repeated both vertically and horizontally.\nSome images should be repeated only horizontally or vertically, or they will look strange, like this:\nExample\nCSS background-repeat Horizontally\nIf the image above is repeated only horizontally (background-repeat: repeat-x;), the background will look better:\nExample\nTip: To repeat an image only vertically, use background-repeat: repeat-y;\nCSS background-repeat: no-repeat\nShowing the background image only once is also specified by the background-repeat property:\nExample\nShow the background image only once:\nIn the example above, the background image is placed in the same place as the text. We want to change the position of the image, so that it does not disturb the text too much.\nCSS background-position\nThe background-position property is used to set the starting position of the background image.\nBy default, a background-image is placed at the top-left corner of an element.\nExample\nPosition the background image in the top-right corner:\nThe CSS Background Repeat and Position Properties\nVideo: CSS Background Repeat and Position",
      "examples": [
        "body {\nbackground-image: url(\"gradient_bg.png\");\n}",
        "body {\nbackground-image: url(\"gradient_bg.png\");\nbackground-repeat: repeat-x;\n}",
        "body {\nbackground-image: url(\"img_tree.png\");\nbackground-repeat: no-repeat;\n}",
        "body {\nbackground-image: url(\"img_tree.png\");\nbackground-repeat: no-repeat;\nbackground-position: right top;\n}",
        "background-repeat",
        "background-repeat: repeat-x;",
        "background-repeat: repeat-y;",
        "background-position"
      ]
    },
    {
      "title": "CSS Background Attachment",
      "summary": "CSS background-attachment\nThe background-attachment property specifies whether the background image should scroll or be fixed (will not scroll with the rest of the page):\nExample\nSpecify that the background image should be fixed:\nExample\nSpecify that the background image should scroll with the rest of the page:\nThe CSS Background Attachment Property\nVideo: CSS Background Attachment",
      "examples": [
        "body {\nbackground-image: url(\"img_tree.png\");\nbackground-repeat: no-repeat;\nbackground-position: right top;\nbackground-attachment: fixed;\n}",
        "body {\nbackground-image: url(\"img_tree.png\");\nbackground-repeat: no-repeat;\nbackground-position: right top;\nbackground-attachment: scroll;\n}",
        "background-attachment"
      ]
    },
    {
      "title": "CSS Background Shorthand",
      "summary": "CSS background - Shorthand property\nTo shorten the code, it is possible to specify all the background properties in one single property. This is called a shorthand property.\nInstead of writing:\nYou can use the shorthand property background:\nExample\nUse the shorthand property to set all the background properties in one declaration:\nWhen using the shorthand property the order of the property values is:\nbackground-color\nbackground-image\nbackground-position\nbackground-size\nbackground-repeat\nbackground-origin\nbackground-clip\nbackground-attachment\nIt does not matter if one of the property values is missing, as long as the other ones are in this order.\nAll CSS Background Properties\nVideo: CSS Background Shorthand",
      "examples": [
        "body {\nbackground-color: #ffffff;\nbackground-image: url(\"img_tree.png\");\nbackground-repeat: no-repeat;\nbackground-position: right top;\n}",
        "body {\nbackground: #ffffff url(\"img_tree.png\") no-repeat right top;\n}",
        "background",
        "background-color",
        "background-image",
        "background-position",
        "background-size",
        "background-repeat",
        "background-origin",
        "background-clip",
        "background-attachment"
      ]
    },
    {
      "title": "CSS Borders",
      "summary": "CSS Borders\nThe CSS border properties allow you to specify the style, width, and color of an element's border.\nI have borders on all sides.\nI have a red, bottom border.\nI have rounded borders.\nI have a blue, left border.\nCSS Border Style\nThe border-style property specifies what kind of border to display.\nThe following values are allowed:\ndotted - Defines a dotted border\ndashed - Defines a dashed border\nsolid - Defines a solid border\ndouble - Defines a double border\ngroove - Defines a 3D grooved border. The effect depends on the border-color value\nridge - Defines a 3D ridged border. The effect depends on the border-color value\ninset - Defines a 3D inset border. The effect depends on the border-color value\noutset - Defines a 3D outset border. The effect depends on the border-color value\nnone - Defines no border\nhidden - Defines a hidden border\nThe border-style property can have from one to four values (for the top border, right border, bottom border, and the left border).\nExample\nDemonstration of the different border styles:\nResult:\nA dotted border.\nA dashed border.\nA solid border.\nA double border.\nA groove border. The effect depends on the border-color value.\nA ridge border. The effect depends on the border-color value.\nAn inset border. The effect depends on the border-color value.\nAn outset border. The effect depends on the border-color value.\nNo border.\nA hidden border.\nA mixed border.\nNote: None of the OTHER CSS border properties (which you will learn more about in the next chapters) will have ANY effect unless the border-style property is set!",
      "examples": [
        "p.dotted {border-style: dotted;}\np.dashed {border-style: dashed;}\np.solid {border-style: solid;}\np.double {border-style: double;}\np.groove {border-style: groove;}\np.ridge {border-style: ridge;}\np.inset {border-style: inset;}\np.outset {border-style: outset;}\np.none {border-style: none;}\np.hidden {border-style: hidden;}\np.mix {border-style: dotted dashed solid double;}",
        "border-style",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset",
        "none",
        "hidden"
      ]
    },
    {
      "title": "CSS Border Width",
      "summary": "CSS Border Width\nThe border-width property specifies the width of the four borders.\nThe width can be set as a specific size (in px, pt, cm, em, etc) or by using one of the three pre-defined values: thin, medium, or thick:\nExample\nDemonstration of the different border widths:\nResult:\nSpecific Side Widths\nThe border-width property can have from one to four values (for the top border, right border, bottom border, and the left border):\nExample",
      "examples": [
        "p.one {\nborder-style: solid;\nborder-width: 5px;\n}\n\np.two {\nborder-style: solid;\nborder-width: medium;\n}\n\np.three {\nborder-style: dotted;\nborder-width: 2px;\n}\n\np.four {\nborder-style: dotted;\nborder-width: thick;\n}",
        "p.one {\nborder-style: solid;\nborder-width: 5px 20px; /* 5px top and bottom, 20px on the sides */\n}\n\np.two {\nborder-style: solid;\nborder-width: 20px 5px; /* 20px top and bottom, 5px on the sides */\n}\n\np.three {\nborder-style: solid;\nborder-width: 25px 10px 4px 35px; /* 25px top, 10px right, 4px bottom and 35px left */\n}",
        "border-width"
      ]
    },
    {
      "title": "CSS Border Color",
      "summary": "CSS Border Color\nThe border-color property is used to set the color of the four borders.\nThe color can be set by:\nname - specify a color name, like \"red\"\nHEX - specify a HEX value, like \"#ff0000\"\nRGB - specify a RGB value, like \"rgb(255,0,0)\"\nHSL - specify a HSL value, like \"hsl(0, 100%, 50%)\"\ntransparent\nNote: If border-color is not set, it inherits the color of the element.\nExample\nDemonstration of the different border colors:\nResult:\nSpecific Side Colors\nThe border-color property can have from one to four values (for the top border, right border, bottom border, and the left border).\nExample\nREMOVE ADS\nHEX Values\nThe color of the border can also be specified using a hexadecimal value (HEX):\nExample\nRGB Values\nOr by using RGB values:\nExample\nHSL Values\nYou can also use HSL values:\nExample\nYou can learn more about HEX, RGB and HSL values in our CSS Colors chapters.",
      "examples": [
        "p.one {\nborder-style: solid;\nborder-color: red;\n}\n\np.two {\nborder-style: solid;\nborder-color: green;\n}\n\np.three {\nborder-style: dotted;\nborder-color: blue;\n}",
        "p.one {\nborder-style: solid;\nborder-color: red green blue yellow; /* red top, green right, blue bottom and yellow left */\n}",
        "p.one {\nborder-style: solid;\nborder-color: #ff0000; /* red */\n}",
        "p.one {\nborder-style: solid;\nborder-color: rgb(255, 0, 0); /* red */\n}",
        "p.one {\nborder-style: solid;\nborder-color: hsl(0, 100%, 50%); /* red */\n}",
        "border-color"
      ]
    },
    {
      "title": "CSS Border Sides",
      "summary": "CSS Border - Individual Sides\nFrom the examples on the previous pages, you have seen that it is possible to specify a different border for each side.\nIn CSS, there are also properties for specifying each of the borders (top, right, bottom, and left):\nborder-top-style\nborder-right-style\nborder-bottom-style\nborder-left-style\nIn the example below we use the four properties above to set the style of each border side:\nExample\nResult:\nWe can also use the shorthand border-style property to achieve the same result.\nThe example below gives the same result as the example above:\nExample\nResult:\nSo, here is how it works:\nIf the border-style property has four values:\nborder-style: dotted solid double dashed;\ntop border is dotted\nright border is solid\nbottom border is double\nleft border is dashed\ntop border is dotted\nright border is solid\nbottom border is double\nleft border is dashed\nIf the border-style property has three values:\nborder-style: dotted solid double;\ntop border is dotted\nright and left borders are solid\nbottom border is double\ntop border is dotted\nright and left borders are solid\nbottom border is double\nIf the border-style property has two values:\nborder-style: dotted solid;\ntop and bottom borders are dotted\nright and left borders are solid\ntop and bottom borders are dotted\nright and left borders are solid\nIf the border-style property has one value:\nborder-style: dotted;\nall four borders are dotted\nall four borders are dotted\nExample\nThe border-style property is used in the example above. However, it also works with border-width and border-color.",
      "examples": [
        "p {\nborder-top-style: dotted;\nborder-right-style: solid;\nborder-bottom-style: dotted;\nborder-left-style: solid;\n}",
        "p {\nborder-style: dotted solid;\n}",
        "/* Four values */\np {\nborder-style: dotted solid double dashed;\n}\n\n/* Three values */\np {\nborder-style: dotted solid double;\n}\n\n/* Two values */\np {\nborder-style: dotted solid;\n}\n\n/* One value */\np {\nborder-style: dotted;\n}",
        "border-top-style",
        "border-right-style",
        "border-bottom-style",
        "border-left-style",
        "border-style",
        "border-width",
        "border-color"
      ]
    },
    {
      "title": "CSS Shorthand Border Property",
      "summary": "CSS Border - Shorthand Property\nLike you saw in the previous page, there are many properties to consider when dealing with borders.\nTo shorten the code, it is also possible to specify all the individual border properties in one property.\nThe border property is a shorthand property for the following individual border properties:\nborder-width\nborder-style (required)\nborder-color\nExample\nResult:\nSome text\nYou can also specify all the individual border properties for just one side:\nLeft Border\nResult:\nSome text\nBottom Border\nResult:\nSome text",
      "examples": [
        "p {\nborder: 5px solid red;\n}",
        "p {\nborder-left: 6px solid red;\n}",
        "p {\nborder-bottom: 6px solid red;\n}",
        "border",
        "border-width",
        "border-style",
        "border-color"
      ]
    },
    {
      "title": "CSS Rounded Borders",
      "summary": "CSS Rounded Borders\nThe border-radius property is used to add rounded borders to an element:\nNormal border\nRound border\nRounder border\nRoundest border\nExample\nMore Examples\nAll the top border properties in one declaration\nThis example demonstrates a shorthand property for setting all of the properties for the top border in one declaration.\nSet the style of the bottom border\nThis example demonstrates how to set the style of the bottom border.\nSet the width of the left border\nThis example demonstrates how to set the width of the left border.\nSet the color of the four borders\nThis example demonstrates how to set the color of the four borders. It can have from one to four colors.\nSet the color of the right border\nThis example demonstrates how to set the color of the right border.\nAll CSS Border Properties",
      "examples": [
        "p {\nborder: 2px solid red;\nborder-radius: 5px;\n}",
        "border-radius"
      ]
    },
    {
      "title": "CSS Margins",
      "summary": "CSS Margins\nThe CSS margin properties are used to create space around elements, outside of any defined borders.\nMargins define the distance between an element's border and the surrounding elements.\nWith CSS, you have full control over the margins. CSS has properties for setting the margin for each individual side of an element (top, right, bottom, and left), and a shorthand property for setting all the margin properties in one declaration.\nMargin - Individual Sides\nCSS has properties for specifying the margin for each side of an element:\nmargin-top - sets the top margin of an element\nmargin-right - sets the right margin of an element\nmargin-bottom - sets the bottom margin of an element\nmargin-left - sets the left margin of an element\nAll the margin properties can have the following values:\nauto - the browser calculates the margin\nlength - specifies a margin in px, pt, cm, etc.\n% - specifies a margin in % of the width of the containing element\ninherit - specifies that the margin should be inherited from the parent element\nTip: Negative values are also allowed.\nExample\nSet different margins for all four sides of a <p> element:\nREMOVE ADS\nMargin - Shorthand Property\nTo shorten the code, it is possible to specify all the margin properties in one declaration.\nThe margin property is a shorthand property for the following individual margin properties:\nmargin-top\nmargin-right\nmargin-bottom\nmargin-left\nHere is how it works:\nIf the margin property has four values:\nmargin: 25px 50px 75px 100px;\ntop margin is 25px\nright margin is 50px\nbottom margin is 75px\nleft margin is 100px\ntop margin is 25px\nright margin is 50px\nbottom margin is 75px\nleft margin is 100px\nExample\nUse the margin shorthand property with four values:\nIf the margin property has three values:\nmargin: 25px 50px 75px;\ntop margin is 25px\nright and left margins are 50px\nbottom margin is 75px\ntop margin is 25px\nright and left margins are 50px\nbottom margin is 75px\nExample\nUse the margin shorthand property with three values:\nIf the margin property has two values:\nmargin: 25px 50px;\ntop and bottom margins are 25px\nright and left margins are 50px\ntop and bottom margins are 25px\nright and left margins are 50px\nExample\nUse the margin shorthand property with two values:\nIf the margin property has one value:\nmargin: 25px;\nall four margins are 25px\nall four margins are 25px\nExample\nUse the margin shorthand property with one value:\nThe auto Value\nYou can set the margin property to auto to horizontally center the element within its container.\nThe element will then take up the specified width, and the remaining space will be split equally between the left and right margins.\nExample\nUse margin: auto:\nThe inherit Value\nYou can set the margin property to inherit to let the margin be inherited from the parent element.\nThis example lets the left margin of the <p class=\"ex1\"> element be inherited from the parent element (<div>):\nExample\nUse of the inherit value:\nAll CSS Margin Properties",
      "examples": [
        "p {\nmargin-top: 100px;\nmargin-bottom: 100px;\nmargin-right: 150px;\nmargin-left: 80px;\n}",
        "p {\nmargin: 25px 50px 75px 100px;\n}",
        "p {\nmargin: 25px 50px 75px;\n}",
        "p {\nmargin: 25px 50px;\n}",
        "p {\nmargin: 25px;\n}",
        "div {\nwidth: 300px;\nmargin: auto;\nborder: 1px solid red;\n}",
        "div {\nborder: 1px solid red;\nmargin-left: 100px;\n}\n\np.ex1 {\nmargin-left: inherit;\n}",
        "margin-top",
        "margin-right",
        "margin-bottom",
        "margin-left",
        "margin",
        "auto",
        "inherit"
      ]
    },
    {
      "title": "CSS Margin Collapse",
      "summary": "CSS Margin Collapse\nMargin collapse is when two margins collapse into a single margin.\nTop and bottom margins of elements are sometimes collapsed into a single margin that is equal to the largest of the two margins.\nNote: Margin collapse only happens with top and bottom margins! Not left and right margins!\nIn the following example, the <h1> element has a bottom margin of 50px and the <h2> element has a top margin of 20px. So, the vertical margin between the <h1> and the <h2> would be a total of 70px (50px + 20px). But due to margin collapse, the actual margin ends up being 50px:\nExample\nDemonstration of margin collapse:\nIn the following example, each <p> element has a top margin of 30px and a bottom margin of 30px. So, the vertical margin between the <p> elements should have been 60px (30px + 30px). However, due to margin collapse, the actual margin ends up being 30px:\nExample\nDemonstration of margin collapse:\nAll CSS Margin Properties",
      "examples": [
        "h1 {\nmargin-bottom: 50px;\n}\n\nh2 {\nmargin-top: 20px;\n}",
        "p {\nmargin-top: 30px;\nmargin-bottom: 30px;\n}"
      ]
    },
    {
      "title": "CSS Padding",
      "summary": "CSS Padding\nThe CSS padding properties are used to generate space around an element's content, inside of any defined borders.\nWith CSS, you have full control over the padding. There are properties for setting the padding for each side of an element (top, right, bottom, and left), and a shorthand property for setting all the padding properties in one declaration.\nPadding - Individual Sides\nCSS has properties for specifying the padding for each side of an element:\npadding-top - sets the top padding of an element\npadding-right - sets the right padding of an element\npadding-bottom - sets the bottom padding of an element\npadding-left - sets the left padding of an element\nAll the padding properties can have the following values:\nlength - specifies a padding in px, pt, cm, etc.\n% - specifies a padding in % of the width of the containing element\ninherit - specifies that the padding should be inherited from the parent element\nNote: Negative values are not allowed.\nExample\nSet different padding for all four sides of a <div> element:\nREMOVE ADS\nPadding - Shorthand Property\nTo shorten the code, it is possible to specify all the padding properties in one declaration.\nThe padding property is a shorthand property for the following individual padding properties:\npadding-top\npadding-right\npadding-bottom\npadding-left\nHere is how it works:\nIf the padding property has four values:\npadding: 25px 50px 75px 100px;\ntop padding is 25px\nright padding is 50px\nbottom padding is 75px\nleft padding is 100px\ntop padding is 25px\nright padding is 50px\nbottom padding is 75px\nleft padding is 100px\nExample\nUse the padding shorthand property with four values:\nIf the padding property has three values:\npadding: 25px 50px 75px;\ntop padding is 25px\nright and left paddings are 50px\nbottom padding is 75px\ntop padding is 25px\nright and left paddings are 50px\nbottom padding is 75px\nExample\nUse the padding shorthand property with three values:\nIf the padding property has two values:\npadding: 25px 50px;\ntop and bottom paddings are 25px\nright and left paddings are 50px\ntop and bottom paddings are 25px\nright and left paddings are 50px\nExample\nUse the padding shorthand property with two values:\nIf the padding property has one value:\npadding: 25px;\nall four paddings are 25px\nall four paddings are 25px\nExample\nUse the padding shorthand property with one value:\nPadding and Element Width\nThe CSS width property specifies the width of the element's content area. The content area is the portion inside the padding, border, and margin of an element (the box model).\nSo, if an element has a specified width, the padding added to that element will be added to the total width of the element. This is often an undesirable result.\nExample\nHere, the <div> element is given a width of 300px. However, the actual width of the <div> element will be 350px (300px + 25px of left padding + 25px of right padding):\nPadding and box-sizing\nThe box-sizing property defines how the width and height of an element are calculated: should they include padding and borders, or not.\nThe box-sizing property can have the following values:\ncontent-box - This is default. The width and height properties includes only the content (border and padding are not included)\nborder-box - The width and height properties includes content, padding and border\nSo, to keep the width at 300px, no matter the amount of padding, you can use the box-sizing: border-box;. This causes the element to maintain its actual width; if you increase the padding, the available content space will decrease.\nExample\nUse the box-sizing property to keep the width at 300px, no matter the amount of padding:\nMore Examples\nSet the left-padding property\nThis example demonstrates how to set the left padding of a <p> element.\nSet the right-padding property\nThis example demonstrates how to set the right padding of a <p> element.\nSet the top-padding property\nThis example demonstrates how to set the top padding of a <p> element.\nSet the bottom-padding property\nThis example demonstrates how to set the bottom padding of a <p> element.\nAll CSS Padding Properties",
      "examples": [
        "div {\npadding-top: 50px;\npadding-right: 30px;\npadding-bottom: 50px;\npadding-left: 80px;\n}",
        "div {\npadding: 25px 50px 75px 100px;\n}",
        "div {\npadding: 25px 50px 75px;\n}",
        "div {\npadding: 25px 50px;\n}",
        "div {\npadding: 25px;\n}",
        "div {\nwidth: 300px;\npadding: 25px;\n}",
        "div {\nwidth: 300px;\npadding: 25px;\nbox-sizing: border-box;\n}",
        "padding-top",
        "padding-right",
        "padding-bottom",
        "padding-left",
        "padding",
        "width",
        "box-sizing",
        "content-box",
        "border-box",
        "box-sizing: border-box;"
      ]
    },
    {
      "title": "CSS Height, Width and Max-width",
      "summary": "CSS Height, Width and Max-width\nThe CSS height and width properties are used to set the height and width of an element.\nThe CSS max-width property is used to set the maximum width of an element.\nCSS Set height and width\nThe height and width properties are used to set the height and width of an element.\nThe height and width do not include padding, borders, or margins. It sets the height and width of the area inside the padding, border, and margin of the element.\nCSS height and width Values\nThe height and width properties can have the following values:\nauto - This is default. The browser calculates the height and width\nlength - Defines the height or width in px, cm, em, etc.\n% - Defines the height or width in percent of the containing block\ninitial - Sets the height or width to its default value\ninherit - The height or width will be inherited from its parent value\nCSS height and width Examples\nExample\nSet the height and width of a <div> element:\nTry it Yourself »\nExample\nSet the height and width of another <div> element:\nTry it Yourself »\nNote: Remember that the height and width properties do not include padding, borders, or margins! They set the height/width of the area inside the padding, border, and margin of the element!\nREMOVE ADS\nCSS Using max-width\nThe max-width property sets the maximum allowed width of an element. This prevents the width of an element to be larger than the max-width property value.\nThe max-width property can have the following values:\nlength - Defines the maximum width in px, cm, etc.\n% - Defines the maximum width in percent of the containing block\nnone - This is default. Means that there is no maximum width\nOne problem with the width property can occur when the browser window is smaller than the width of the element. The browser then adds a horizontal scrollbar to the page. So, using max-width will improve the browser's handling on small windows.\nCSS max-width Examples\nDrag the browser window to smaller than 600px wide, to see the difference between the two divs below!\nUsing width:\nUsing max-width:\nExample\nOne <div> element with a max-width of 500 pixels, and one <div> element with a width of 500 pixels:\nTry it Yourself »\nNote: If you use both the width property and the max-width property on the same element, and the value of the width property is larger than the max-width property; the max-width property value will be used!\nExample\nA <div> element with both a width and a max-width property:\nTry it Yourself »\nTry it Yourself - Examples\nSet the height and width of elements\nThis example demonstrates how to set the height and width of different elements.\nSet the height and width of an image using percent\nThis example demonstrates how to set the height and width of an image using a percent value.\nSet min-width and max-width of an element\nThis example demonstrates how to set a minimum width and a maximum width of an element using a pixel value.\nSet min-height and max-height of an element\nThis example demonstrates how to set a minimum height and a maximum height of an element using a pixel value.\nAll CSS Dimension Properties",
      "examples": [
        "div {\nheight: 200px;\nwidth: 50%;\nbackground-color: powderblue;\n}",
        "div {\nheight: 100px;\nwidth: 500px;\nbackground-color: powderblue;\n}",
        ".div1 {\nmax-width: 500px;\nbackground-color: powderblue;\n}\n\n.div2 {\nwidth: 500px;\nbackground-color: powderblue;\n}",
        ".div1 {\nwidth: 100%;\nmax-width: 900px;\nbackground-color: powderblue;\n}",
        "height",
        "width",
        "max-width",
        "auto",
        "length",
        "%",
        "initial",
        "inherit",
        "none"
      ]
    },
    {
      "title": "CSS Box Model",
      "summary": "The CSS Box Model\nIn CSS, the term \"box model\" is used when talking about web design and layout.\nThe CSS box model is essentially a box that wraps around every HTML element.\nEvery box consists of four parts: content, padding, borders and margins.\nThe image below illustrates the CSS box model:\nExplanation of the different parts (from innermost part to outermost part):\nContent - The content of the box, where text and images appear\nPadding - Clears an area around the content. The padding is transparent\nBorder - A border that goes around the padding and content\nMargin - Clears an area outside the border. The margin is transparent\nThe box model allows us to add a border around elements, and to define space between elements.\nExample\nDemonstration of the box model:\nREMOVE ADS\nWidth and Height of an Element\nIn order to set the width and height of an element correctly in all browsers, you need to know how the box model works.\nImportant: When you set the width and height properties of an element with CSS, you just set the width and height of the content area. To calculate the total width and height of an element, you must also include the padding and borders.\nExample\nThis <div> element will have a total width of 350px and a total height of 80px:\nHere is the calculation:\nThe total width of an element should be calculated like this:\nTotal element width = width + left padding + right padding + left border + right border\nThe total height of an element should be calculated like this:\nTotal element height = height + top padding + bottom padding + top border + bottom border\nNote: The margin property also affects the total space that the box will take up on the page, but the margin is not included in the actual size of the box. The box's total width and height stops at the border.",
      "examples": [
        "div {\nwidth: 300px;\nborder: 15px solid green;\npadding: 50px;\nmargin: 20px;\n}",
        "div {\nwidth: 320px;\nheight: 50px;\npadding: 10px;\nborder: 5px solid gray;\nmargin: 0;\n}"
      ]
    },
    {
      "title": "CSS Outline",
      "summary": "An outline is a line drawn around an element, outside the element's border.\nThis element has a black border and a green outline with a width of 10px.\nCSS Outline\nAn outline is a line that is drawn around elements, OUTSIDE the borders, to make the element \"stand out\".\nNote: Outline differs from borders! The outline is drawn outside the element's border, and may overlap other content. Also, the outline is NOT a part of the element's dimensions; the element's total width and height is not affected by the width of the outline.\nCSS has the following outline properties:\noutline-style - Specifies the style of the outline\noutline-color - Specifies the color of the outline\noutline-width - Specifies the width of the outline\noutline-offset - Adds space between the outline and the edge/border of an element\noutline - A shorthand property\nREMOVE ADS\nCSS The outline-style Property\nThe outline-style property specifies the style of the outline, and can have one of the following values:\ndotted - Defines a dotted outline\ndashed - Defines a dashed outline\nsolid - Defines a solid outline\ndouble - Defines a double outline\ngroove - Defines a 3D grooved outline\nridge - Defines a 3D ridged outline\ninset - Defines a 3D inset outline\noutset - Defines a 3D outset outline\nnone - Defines no outline\nhidden - Defines a hidden outline\nThe following example shows the different outline-style values:\nExample\nDemonstration of the different outline styles:\nResult:\nA dotted outline.\nA dashed outline.\nA solid outline.\nA double outline.\nA groove outline. The effect depends on the outline-color value.\nA ridge outline. The effect depends on the outline-color value.\nAn inset outline. The effect depends on the outline-color value.\nAn outset outline. The effect depends on the outline-color value.\nNote: None of the other outline properties (which you will learn more about in the next chapters) will have ANY effect unless the outline-style property is set!",
      "examples": [
        "p.dotted {outline-style: dotted;}\np.dashed {outline-style: dashed;}\np.solid {outline-style: solid;}\np.double {outline-style: double;}\np.groove {outline-style: groove;}\np.ridge {outline-style: ridge;}\np.inset {outline-style: inset;}\np.outset {outline-style: outset;}",
        "outline-style",
        "outline-color",
        "outline-width",
        "outline-offset",
        "outline",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset",
        "none",
        "hidden"
      ]
    },
    {
      "title": "CSS Outline Width",
      "summary": "CSS Outline Width\nThe outline-width property specifies the width of the outline, and can have one of the following values:\nthin (typically 1px)\nmedium (typically 3px)\nthick (typically 5px)\nA specific size (in px, pt, cm, em, etc)\nCSS Outline Width Examples\nHere are some outlines with different widths:\nA thin outline.\nA medium outline.\nA thick outline.\nA 8px thick outline.\nExample\nDemonstration of different outline widths:",
      "examples": [
        "p {\npadding: 5px;\noutline-style: solid;\noutline-color: green;\n}\n\np.ex1 {\noutline-width: thin;\n}\n\np.ex2 {\noutline-width: medium;\n}\n\np.ex3 {\noutline-width: thick;\n}\n\np.ex4 {\noutline-width: 8px;\n}",
        "outline-width",
        "thin",
        "medium",
        "thick"
      ]
    },
    {
      "title": "CSS Outline Color",
      "summary": "CSS Outline Color\nThe outline-color property is used to set the color of the outline.\nThe color can be set by:\nname - specify a color name, like \"red\"\nHEX - specify a hex value, like \"#ff0000\"\nRGB - specify a RGB value, like \"rgb(255,0,0)\"\nHSL - specify a HSL value, like \"hsl(0, 100%, 50%)\"\ninvert - performs a color inversion (which ensures that the outline is visible, regardless of color background)\nCSS Outline Color Examples\nHere are some different outlines with different colors. Also notice that these elements also have a thin black border inside the outline:\nA solid red outline.\nA dotted blue outline.\nAn outset green outline.\nA solid invert outline.\nExample\nDemonstration of different outline colors:\nHEX Values\nThe outline color can also be specified using a hexadecimal value (HEX):\nExample\nREMOVE ADS\nRGB Values\nOr by using RGB values:\nExample\nHSL Values\nYou can also use HSL values:\nExample\nYou can learn more about HEX, RGB and HSL values in our CSS Colors chapters.",
      "examples": [
        "p {\nborder: 1px solid black;\npadding: 5px;\n}\n\np.ex1 {\noutline-style: solid;\noutline-color: red;\n}\n\np.ex2 {\noutline-style: dotted;\noutline-color: blue;\n}\n\np.ex3 {\noutline-style: outset;\noutline-color: green;\n}\n\np.ex4 {\noutline-style: solid;\noutline-color: invert;\n}",
        "p.ex1 {\noutline-style: solid;\noutline-color: #ff0000; /* red */\n}",
        "p.ex1 {\noutline-style: solid;\noutline-color: rgb(255, 0, 0); /* red */\n}",
        "p.ex1 {\noutline-style: solid;\noutline-color: hsl(0, 100%, 50%); /* red */\n}",
        "outline-color"
      ]
    },
    {
      "title": "CSS Outline Shorthand",
      "summary": "CSS Outline - Shorthand property\nThe outline property is a shorthand property for setting the following individual outline properties:\noutline-width\noutline-style (required)\noutline-color\nYou can specify one, two, or three values from the list above. The order of the values does not matter.\nCSS Outline Shorthand Examples\nHere are some different outlines specified with the shorthand outline property:\nA dashed outline.\nA dotted red outline.\nA 7px solid yellow outline.\nA thick ridge pink outline.\nExample\nDemonstration of the outline shorthand property:\nREMOVE ADS\nCSS Outline With Rounded Corners\nOutlines can also have rounded corners.\nThe border-radius property is used to add rounded borders to an element.\nHere are some different outlines with rounded corners:\nA dashed outline.\nA dotted red outline.\nA 7px solid yellow outline.\nA thick ridge pink outline.\nExample",
      "examples": [
        "p.ex1 {outline: dashed;}\np.ex2 {outline: dotted red;}\np.ex3 {outline: 7px solid yellow;}\np.ex4 {outline: thick ridge pink;}",
        "p.ex1 {\noutline: dashed;\nborder-radius: 8px;\n}\n\np.ex2 {\noutline: dotted red;\nborder-radius: 5px;\n}\n\np.ex3 {\noutline: 7px solid yellow;\nborder-radius: 5px;\n}\n\np.ex4 {\noutline: thick ridge pink;\nborder-radius: 8px;\n}\n\np.ex5 {\noutline: thick solid green;\nborder-radius: 10px;\n}",
        "outline",
        "outline-width",
        "outline-style",
        "outline-color",
        "border-radius"
      ]
    },
    {
      "title": "CSS Outline Offset",
      "summary": "CSS Outline Offset\nThe outline-offset property adds a space between an outline and the edge/border of an element. The space between an element and its outline is transparent.\nThe following example specifies an outline 15px outside the border edge:\nThis paragraph has a black border and a red outline 15px outside the border edge.\nExample\nThe following example shows that the space between an element's border and its outline is transparent:\nThis paragraph has an outline of 15px outside the border edge.\nExample\nREMOVE ADS\nCSS Outline Offset with Negative Value\nThe following example shows the use of an outline-offset with a negative value, now the outline will be placed inside the border edge:\nThis paragraph has a black border and a red outline -5px inside the border edge.\nExample\nAll CSS Outline Properties",
      "examples": [
        "p {\nmargin: 30px;\npadding: 5px;\nborder: 1px solid black;\noutline: 3px solid red;\noutline-offset: 15px;\n}",
        "p {\nmargin: 30px;\npadding: 5px;\nbackground: yellow;\nborder: 1px solid black;\noutline: 3px solid red;\noutline-offset: 15px;\n}",
        "outline-offset"
      ]
    },
    {
      "title": "CSS Text Color text formatting",
      "summary": "CSS has a lot of properties for styling and formatting text.\nThis text is styled with some of the text formatting properties. The heading uses the text-align, text-transform, and color properties. The paragraph is indented, aligned, and the space between characters is specified. The underline is removed from this colored \"Try it Yourself\" link.\nCSS Text Color\nThe color property is used to set the color of the text. The color is specified by:\na color name - like \"red\"\na HEX value - like \"#ff0000\"\nan RGB value - like \"rgb(255,0,0)\"\nLook at CSS Color Values for a complete list of possible color values.\nThe default text color for a page is defined in the body selector.\nExample\nREMOVE ADS\nText Color and Background Color\nIn this example, we define both the background-color property and the color property:\nExample\nImportant: High contrast is very important for people with vision problems. So, always ensure that the contrast between the text color and the background color (or background image) is good!\nThe CSS Text Color Property",
      "examples": [
        "body {\ncolor: blue;\n}\n\nh1 {\ncolor: green;\n}\n\nh2 {\ncolor: red;\n}",
        "body {\nbackground-color: lightgrey;\ncolor: blue;\n}\n\nh1 {\nbackground-color: black;\ncolor: white;\n}\n\ndiv {\nbackground-color: blue;\ncolor: white;\n}",
        "color",
        "background-color"
      ]
    },
    {
      "title": "CSS Text Alignment",
      "summary": "CSS Text Alignment and Text Direction\nIn this chapter you will learn about the following properties:\ntext-align\ntext-align-last\nvertical-align\ndirection\nunicode-bidi\nText Alignment\nThe text-align property is used to set the horizontal alignment of a text.\nThis property can have one of the following values:\nleft - Aligns the text to the left\nright - Aligns the text to the right\ncenter - Centers the text\njustify - Stretches the lines so that each line has equal width\nThe following example shows left, right and center aligned text (left is default if text direction is left-to-right, and right is default if text direction is right-to-left):\nExample\nWhen the text-align property is set to \"justify\", each line is stretched so that every line has equal width, and the left and right margins are straight (like in magazines and newspapers):\nExample\nText Align Last\nThe text-align-last property specifies how to align the last line of a text.\nThis property can have one of the following values:\nauto - Default value. The last line is justified and aligned left\nleft - The last line is aligned to the left\nright - The last line is aligned to the right\ncenter - The last line is center-alignedt\njustify - The last line is justified as the rest of the lines\nstart - The last line is aligned at the start of the line\nend - The last line is aligned at the end of the line\nExample\nDifferent alignment of the last line in three <p> elements:\nREMOVE ADS\nVertical Alignment\nThe vertical-align property sets the vertical alignment of an element.\nThis property can have one of the following values:\nbaseline - Default value. The element is aligned with the baseline of the parent\nlength/% - Raises or lower an element by the specified length or percent\nsub - The element is aligned with the subscript baseline of the parent\nsuper - The element is aligned with the superscript baseline of the parent\ntop - The element is aligned with the top of the tallest element on the line\ntext-top - The element is aligned with the top of the parent element's font\nmiddle - The element is placed in the middle of the parent element\nbottom - The element is aligned with the lowest element on the line\ntext-bottom - The element is aligned with the bottom of the parent element's font\nExample\nSet the vertical alignment of an image in a text:\nText Direction\nThe direction property specifies the text direction/writing direction within a block-level element.\nTip: Use this property together with the unicode-bidi property to set or return whether the text should be overridden to support multiple languages in the same document.\nExample\nThe CSS Text Alignment/Direction Properties",
      "examples": [
        "h1 {\ntext-align: center;\n}\n\nh2 {\ntext-align: left;\n}\n\nh3 {\ntext-align: right;\n}",
        "div {\ntext-align: justify;\n}",
        "p.a {\ntext-align-last: right;\n}\n\np.b {\ntext-align-last: center;\n}\n\np.c {\ntext-align-last: justify;\n}",
        "img.a {\nvertical-align: baseline;\n}\n\nimg.b {\nvertical-align: text-top;\n}\n\nimg.c {\nvertical-align: text-bottom;\n}\n\nimg.d {\nvertical-align: sub;\n}\n\nimg.e {\nvertical-align: super;\n}",
        "p {\ndirection: rtl;\nunicode-bidi: bidi-override;\n}",
        "text-align",
        "text-align-last",
        "vertical-align",
        "direction",
        "unicode-bidi",
        "left",
        "right",
        "center",
        "justify",
        "auto",
        "start",
        "end",
        "baseline",
        "length/%",
        "sub",
        "super",
        "top",
        "text-top",
        "middle",
        "bottom",
        "text-bottom"
      ]
    },
    {
      "title": "CSS Text Decoration",
      "summary": "CSS Text Decoration\nThe CSS text-decoration property is used to control the appearance of decorative lines on text.\nIt is a shorthand property for the following individual properties:\ntext-decoration-line\ntext-decoration-color\ntext-decoration-style\ntext-decoration-thickness\nAdd a Decoration Line to Text\nThe CSS text-decoration-line property sets the type of decoration line added to the text.\nThis property can have one or more of the following values:\nnone - Default value. Displays no decoration line\nunderline - The decoration line is displayed under the text\noverline - The decoration line is displayed over the text\nline-through - The decoration line is displayed through the text\nTip: You can combine multiple values, like overline and underline to display lines both over and under a text.\nExample\nSet different types of decoration lines:\nNote: It is not recommended to underline text that is not a link, as this often confuses the reader!\nSpecify a Color for the Decoration Line\nThe CSS text-decoration-color property is used to set the color of the decoration line.\nExample\nAdd different colors to the decoration line:\nREMOVE ADS\nSpecify a Style for the Decoration Line\nThe CSS text-decoration-style property is used to set the style of the decoration line.\nThis property can have one of the following values:\nsolid - Default value. Displays the line as a single line\ndouble - Displays the line as a double line\ndotted - Displays the line as a dotted line\ndashed - Displays the line as a dashed line\nwavy - Displays the line as a wavy line\nExample\nAdd different styles to the decoration line:\nSpecify the Thickness for the Decoration Line\nThe CSS text-decoration-thickness property is used to set the thickness of the decoration line.\nExample\nAdd different thickness for the decoration line:\nThe Shorthand Property\nThe CSS text-decoration property is a shorthand property for:\ntext-decoration-line (required)\ntext-decoration-color (optional)\ntext-decoration-style (optional)\ntext-decoration-thickness (optional)\nExample\nA Small Tip on Links\nAll links in HTML are underlined by default. Sometimes you see that links are styled with no underline. The text-decoration: none; is used to remove the underline from links, like this:\nExample\nAll CSS text-decoration Properties",
      "examples": [
        "h1 {\ntext-decoration-line: overline;\n}\n\nh2 {\ntext-decoration-line: line-through;\n}\n\nh3 {\ntext-decoration-line: underline;\n}\n\np {\ntext-decoration-line: overline underline;\n}",
        "h1 {\ntext-decoration-line: overline;\ntext-decoration-color: red;\n}\n\nh2 {\ntext-decoration-line: line-through;\ntext-decoration-color: blue;\n}\n\nh3 {\ntext-decoration-line: underline;\ntext-decoration-color: green;\n}\n\np {\ntext-decoration-line: overline underline;\ntext-decoration-color: purple;\n}",
        "h1 {\ntext-decoration-line: underline;\ntext-decoration-style: solid;\n}\n\nh2 {\ntext-decoration-line: underline;\ntext-decoration-style: double;\n}\n\nh3 {\ntext-decoration-line: underline;\ntext-decoration-style: dotted;\n}\n\np.ex1 {\ntext-decoration-line: underline;\ntext-decoration-style: dashed;\n}\n\np.ex2 {\ntext-decoration-line: underline;\ntext-decoration-style: wavy;\n}\n\np.ex3 {\ntext-decoration-line: underline;\ntext-decoration-color: red;\ntext-decoration-style: wavy;\n}",
        "h1 {\ntext-decoration-line: underline;\ntext-decoration-thickness: auto;\n}\n\nh2 {\ntext-decoration-line: underline;\ntext-decoration-thickness: 5px;\n}\n\nh3 {\ntext-decoration-line: underline;\ntext-decoration-thickness: 25%;\n}\n\np {\ntext-decoration-line: underline;\ntext-decoration-color: red;\ntext-decoration-style: double;\ntext-decoration-thickness: 5px;\n}",
        "h1 {\ntext-decoration: underline;\n}\n\nh2 {\ntext-decoration: underline red;\n}\n\nh3 {\ntext-decoration: underline red double;\n}\n\np {\ntext-decoration: underline red double 5px;\n}",
        "a {\ntext-decoration: none;\n}",
        "text-decoration",
        "text-decoration-line",
        "text-decoration-color",
        "text-decoration-style",
        "text-decoration-thickness",
        "none",
        "underline",
        "overline",
        "line-through",
        "solid",
        "double",
        "dotted",
        "dashed",
        "wavy",
        "text-decoration: none;"
      ]
    },
    {
      "title": "CSS Text Transformation",
      "summary": "CSS Text Transformation\nThe CSS text-transform property is used to control the capitalization of text in an element.\nIt can be used to transform a text into uppercase or lowercase letters, or capitalize the first letter of each word, without changing the original content in HTML.\nThis property can have one of the following values:\nnone - No transformation. Text renders as it is\ncapitalize - Transforms the first character of each word to uppercase\nuppercase - Transforms all characters to uppercase\nlowercase - Transforms all characters to lowercase\nExample\nDemonstration of the text-transform property:\nThe CSS Text Transformation Property",
      "examples": [
        "p.uppercase {\ntext-transform: uppercase;\n}\n\np.lowercase {\ntext-transform: lowercase;\n}\n\np.capitalize {\ntext-transform: capitalize;\n}",
        "text-transform",
        "none",
        "capitalize",
        "uppercase",
        "lowercase"
      ]
    },
    {
      "title": "CSS Text Spacing",
      "summary": "CSS Text Spacing\nCSS has several properties to control text spacing.\nIn this chapter you will learn about the following properties:\ntext-indent\nletter-spacing\nline-height\nword-spacing\nwhite-space\nCSS Text Indentation\nThe CSS text-indent property is used to specify the indentation of the first line in a text-block.\nTip: Negative values are allowed. The first line will be indented to the left if the value is negative.\nExample\nIndent the first line of text in a text-block:\nCSS Letter Spacing\nThe CSS letter-spacing property is used to specify the space between the characters in a text.\nTip: Negative values are allowed.\nExample\nIncrease and decrease the space between characters:\nCSS Line Height\nThe CSS line-height property is used to specify the space between lines.\nNote: Negative values are not allowed.\nExample\nSpecify the space between lines:\nREMOVE ADS\nCSS Word Spacing\nThe CSS word-spacing property is used to specify the space between the words in a text.\nTip: Negative values are allowed.\nExample\nIncrease and decrease the space between words:\nCSS White Space\nThe CSS white-space property specifies how white-space inside an element is handled.\nThis property can have one of the following values:\nnormal\nnowrap\npre\npre-line\npre-wrap\nExample\nHow to disable text wrapping inside an element\nThe CSS Text Spacing Properties",
      "examples": [
        "p {\ntext-indent: 50px;\n}",
        "h1 {\nletter-spacing: 5px;\n}\n\nh2 {\nletter-spacing: -2px;\n}",
        "p.small {\nline-height: 0.8;\n}\n\np.big {\nline-height: 1.8;\n}",
        "p.one {\nword-spacing: 10px;\n}\n\np.two {\nword-spacing: -2px;\n}",
        "p {\nwhite-space: nowrap;\n}",
        "text-indent",
        "letter-spacing",
        "line-height",
        "word-spacing",
        "white-space",
        "normal",
        "nowrap",
        "pre",
        "pre-line",
        "pre-wrap"
      ]
    },
    {
      "title": "CSS Text Shadow",
      "summary": "CSS Text Shadow\nThe text-shadow property adds shadow to text.\nIn its simplest use, you only specify the horizontal and the vertical shadow.\nIn addition, you can add a shadow color and blur effect.\nText shadow effect!\nExample\nHorizontal and vertical shadow:\nNext, add a color (red) to the shadow:\nText shadow effect!\nExample\nHorizontal and vertical shadow, with color:\nThen, add a blur effect (5px) to the shadow:\nText shadow effect!\nExample\nHorizontal and vertical shadow, with color and blur effect:\nMore Text Shadow Examples\nText shadow effect!\nExample\nText-shadow on a white text:\nText shadow effect!\nExample\nText-shadow with red neon glow:\nREMOVE ADS\nMultiple Shadows\nThe text-shadow property also accepts multiple shadows for an element. Define each shadow in a comma-separated list.\nThe following example shows a red and blue neon glow shadow:\nText shadow effect!\nExample\nText-shadow with red and blue neon glow:\nThe following example shows a white text with black, blue, and red neon glow:\nText shadow effect!\nExample\nText-shadow with black, blue and red neon glow:\nTip: Go to our CSS Fonts chapter to learn about how to change fonts, text size and the style of a text.\nTip: Go to our CSS Text Effects chapter to learn about different text effects.\nThe CSS Text Shadow Property",
      "examples": [
        "h1 {\ntext-shadow: 2px 2px;\n}",
        "h1 {\ntext-shadow: 2px 2px red;\n}",
        "h1 {\ntext-shadow: 2px 2px 5px red;\n}",
        "h1 {\ncolor: white;\ntext-shadow: 2px 2px 4px #000000;\n}",
        "h1 {\ntext-shadow: 0 0 3px #ff0000;\n}",
        "h1 {\ntext-shadow: 0 0 3px #ff0000, 0 0 5px #0000ff;\n}",
        "h1 {\ncolor: white;\ntext-shadow: 1px 1px 2px black, 0 0 25px blue, 0 0 5px red;\n}",
        "text-shadow"
      ]
    },
    {
      "title": "CSS Fonts",
      "summary": "Font Selection is Important\nChoosing the right font has a huge impact on how the readers experience a website.\nThe right font can create a strong identity for your brand.\nChoosing a font that is easy to read is important. It is also important to choose a good color and size for your font.\nThe CSS font-family Property\nThe CSS font-family property specifies the font for an element.\nTip: The font-family property should hold several font names as a \"fallback\" system. If the browser does not support the first font, it tries the next font. The font names should be separated with a comma.\nAlways start with the font you want, and always end with a generic family, to let the browser pick a similar font in the generic family, if no other fonts are available.\nNote: If the font name is more than one word, it must be in quotation marks, like: \"Times New Roman\".\nTip: Read more about fallback fonts in CSS Web Safe Fonts.\nExample\nSpecify some different fonts for three paragraphs:\nREMOVE ADS\nCSS Generic Font Families\nIn CSS, there are five generic font families:\nSerif fonts - have a small stroke at the edges of each letter. They create a sense of formality and elegance.\nSans-serif fonts - have clean lines (no small strokes attached). They create a modern and minimalistic look.\nMonospace fonts - here all the letters have the same fixed width. They create a mechanical look.\nCursive fonts - imitate human handwriting.\nFantasy fonts - are decorative/playful fonts.\nAll the different font names belong to one of the generic font families.\nDifference Between Serif and Sans-serif Fonts\nNote: On computer screens, sans-serif fonts are considered easier to read than serif fonts.\nSome Font Examples",
      "examples": [
        ".p1 {\nfont-family: \"Times New Roman\", Times, serif;\n}\n\n.p2 {\nfont-family: Arial, Helvetica, sans-serif;\n}\n\n.p3 {\nfont-family: \"Lucida Console\", \"Courier New\", monospace;\n}",
        "font-family"
      ]
    },
    {
      "title": "CSS Web Safe Fonts Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet",
      "summary": "What are Web Safe Fonts?\nWeb safe fonts are fonts that are universally installed across all browsers and devices.\nFallback Fonts\nHowever, there are no 100% completely web safe fonts. There is always a chance that a font is not found or is not installed properly.\nTherefore, it is very important to always use fallback fonts.\nThis means that you should add a list of similar \"backup fonts\" in the font-family property. If the first font does not work, the browser will try the next one, and the next one, and so on. Always end the list with a generic font family name.\nExample\nHere, we list three fonts: Tahoma, Verdana, and sans-serif. The second and third fonts are backup fonts, in case the first one is not found:\nWeb Safe Fonts for HTML and CSS\nThe following list are the best web safe fonts for HTML and CSS:\nArial (sans-serif)\nVerdana (sans-serif)\nTahoma (sans-serif)\nTrebuchet MS (sans-serif)\nTimes New Roman (serif)\nGeorgia (serif)\nGaramond (serif)\nCourier New (monospace)\nBrush Script MT (cursive)\nNote: Before you publish your website, always check how your fonts appear on different browsers and devices, and always use fallback fonts!\nREMOVE ADS\nArial (sans-serif)\nArial is the most widely used font for both online and printed media. Arial is also the default font in Google Docs.\nArial is one of the safest web fonts, and it is available on all major operating systems.\nExample\nLorem ipsum dolor sit amet.\n0 1 2 3 4 5 6 7 8 9\nVerdana (sans-serif)\nVerdana is a very popular font. Verdana is easily readable even for small font sizes.\nExample\nLorem ipsum dolor sit amet.\n0 1 2 3 4 5 6 7 8 9\nTahoma (sans-serif)\nThe Tahoma font has less space between the characters.\nExample\nLorem ipsum dolor sit amet.\n0 1 2 3 4 5 6 7 8 9\nTrebuchet MS (sans-serif)\nTrebuchet MS was designed by Microsoft in 1996. Use this font carefully. Not supported by all mobile operating systems.\nExample\nLorem ipsum dolor sit amet.\n0 1 2 3 4 5 6 7 8 9\nTimes New Roman (serif)\nTimes New Roman is one of the most recognizable fonts in the world. It looks professional and is used in many newspapers and \"news\" websites. It is also the primary font for Windows devices and applications.\nExample\nLorem ipsum dolor sit amet.\n0 1 2 3 4 5 6 7 8 9\nGeorgia (serif)\nGeorgia is an elegant serif font. It is very readable at different font sizes, so it is a good candidate for mobile-responsive design.\nExample\nLorem ipsum dolor sit amet.\n0 1 2 3 4 5 6 7 8 9\nGaramond (serif)\nGaramond is a classical font used for many printed books. It has a timeless look and good readability.\nExample\nLorem ipsum dolor sit amet.\n0 1 2 3 4 5 6 7 8 9\nCourier New (monospace)\nCourier New is the most widely used monospace serif font. Courier New is often used with coding displays, and many email providers use it as their default font. Courier New is also the standard font for movie screenplays.\nExample\nLorem ipsum dolor sit amet.\n0 1 2 3 4 5 6 7 8 9\nBrush Script MT (cursive)\nThe Brush Script MT font was designed to mimic handwriting. It is elegant and sophisticated, but can be hard to read. Use it carefully.\nExample\nLorem ipsum dolor sit amet.\n0 1 2 3 4 5 6 7 8 9\nTip: Also check out all available Google Fonts and how to use them.",
      "examples": [
        "p {\nfont-family: Tahoma, Verdana, sans-serif;\n}",
        "Lorem ipsum dolor sit amet\nLorem ipsum dolor sit amet.\n0 1 2 3 4 5 6 7 8 9",
        "font-family"
      ]
    },
    {
      "title": "CSS Font Fallbacks",
      "summary": "Commonly Used Font Fallbacks\nBelow are some commonly used font fallbacks, organized by the 5 generic font families:\nSerif\nSans-serif\nMonospace\nCursive\nFantasy\nSerif Fonts\nThis is a Heading\nThis is a paragraph.\nThis is a Heading\nThis is a paragraph.\nThis is a Heading\nThis is a paragraph.\nSans-Serif Fonts\nThis is a Heading\nThis is a paragraph.\nThis is a Heading\nThis is a paragraph.\nThis is a Heading\nThis is a paragraph.\nThis is a Heading\nThis is a paragraph.\nREMOVE ADS\nMonospace Fonts\nThis is a Heading\nThis is a paragraph.\nCursive Fonts\nThis is a Heading\nThis is a paragraph.\nFantasy Fonts\nThis is a Heading\nThis is a paragraph.\nTip: Also check out all available Google Fonts and how to use them.",
      "examples": []
    },
    {
      "title": "CSS Font Style",
      "summary": "CSS Font Style\nThe CSS font-style property specifies the font style for a text..\nThis property can have one of the following values:\nnormal - The text is shown normally\nitalic - The text is shown in italics\noblique - The text is \"leaning\" (oblique is very similar to italic)\nExample\nCSS Font Weight\nThe CSS font-weight property specifies how thick or thin characters in text should be displayed.\nThis property can have one of the following values:\nnormal - This is default. Defines normal characters\nbold - Defines thick characters\nbolder - Defines thicker characters\nlighter - Defines lighter characters\n100-900 - Defines from thin to thick characters. 400 is the same as normal, and 700 is the same as bold\nExample\nREMOVE ADS\nCSS Font Variant\nThe CSS font-variant property specifies whether or not a text should be displayed in a small-caps font.\nIn a small-caps font, all lowercase letters are converted to uppercase letters. However, the converted uppercase letters appears in a smaller font size than the original uppercase letters in the text.\nExample",
      "examples": [
        "p.normal {\nfont-style: normal;\n}\n\np.italic {\nfont-style: italic;\n}\n\np.oblique {\nfont-style: oblique;\n}",
        "p.normal {\nfont-weight: normal;\n}\n\np.light {\nfont-weight: lighter;\n}\n\np.thick {\nfont-weight: bold;\n}\n\np.thicker {\nfont-weight: 900;\n}",
        "p.normal {\nfont-variant: normal;\n}\n\np.small {\nfont-variant: small-caps;\n}",
        "font-style",
        "normal",
        "italic",
        "oblique",
        "font-weight",
        "bold",
        "bolder",
        "lighter",
        "100-900",
        "font-variant"
      ]
    },
    {
      "title": "CSS Font Size Hello World",
      "summary": "CSS Font Size\nThe CSS font-size property is used to specify the size of the text/font.\nBeing able to manage the text size is very important in web design.\nHowever, you should not use font size adjustments to make paragraphs look like headings, or headings look like paragraphs. Always use the proper HTML tags, like <h1> - <h6> for headings and <p> for paragraphs.\nThe font-size can be set to an absolute size or to a relative size.\nAbsolute sizes:\npx: Pixels offers fixed and precise control over the font size.\nxx-small, x-small, small, medium, large, x-large, xx-large. These keywords has a predefined set of sizes in browsers.\nRelative sizes:\nem: This unit is relative to the font size of the parent element.\nrem: This unit is relative to the font size of the root HTML element.\n%: This unit is relative to the font size of the parent element\nsmaller and larger: These units adjust the font size relative to the parent element.\nHow to Pick the Right Unit?\nFor fixed and precise control, px can be used.\nWith px, the web page will not scale well on different screen sizes or with user preferences.\nAbsolute size can be useful when the physical size of the output is known.\nFor scalable web designs, use em or rem; they allow users to adjust text size in their browser settings.\nPercentage (%) can be useful for adjusting font sizes based on parent elements.\nSet Font Size With Pixels\nSetting the text size with pixels (px) gives you full control over the text size.\nIf you use pixels, the web page may not scale very well on different screen sizes and the users cannot adjust the text size in their browser settings. However, users can still use the zoom tool to resize the entire page.\nExample\nSet font sizes with px:\nREMOVE ADS\nSet Font Size With Em\nThe em unit is relative to the font size of the parent element. So, if the parent element has a font size of 16px, then 2.5em would result in 40px.\nIn the following example, the text size in em is the same as the previous example in pixels. However, the em unit allows the user to adjust the text size in the browser settings.\nExample\nSet font sizes with em:\nSet Font Size With Rem\nThe rem unit is relative to the font size of the root HTML element (<html>).\nUnlike em, which is relative to the font-size of its parent element, rem always refers to the font-size of the <html> element, regardless of its position in the document tree. This makes rem very useful for creating scalable and responsive designs. By changing the font-size of the <html> element, all elements sized with rem units will scale proportionally throughout the entire page.\nThe default font-size of the <html> element in most browsers, is 16px. So, by default, 1rem equals 16px unless explicitly overridden in the CSS.\nExample\nSet font sizes with rem:\nThe vw Unit\nThe font size can also be set with the vw unit, which means the \"viewport width\".\nThe vw unit is a relative unit that represents a percentage of the width of the viewport.\n1vw = 1% of the current width of the browser's viewport. So, if the viewport is 500px wide, 1vw is 5px.\nThis way the text size will follow the size of the browser window:\nResize the browser window to see how the font size scales.\nExample",
      "examples": [
        "h1 {\nfont-size: 40px;\n}\n\nh2 {\nfont-size: 30px;\n}\n\np {\nfont-size: 16px;\n}",
        "body {\nfont-size: 16px; /* Base font size */\n}\n\nh1 {\nfont-size: 2.5em; /* 2.5 * 16 = 40px */\n}\n\nh2 {\nfont-size: 1.875em; /* 1.875 * 16 = 30px */\n}\n\np {\nfont-size: 1em; /* 1 * 16 = 16px */\n}",
        "html {\nfont-size: 16px; /* Set the root font size */\n}\n\nh1 {\nfont-size: 2.5rem; /* 2.5 * 16 = 40px */\n}\n\nh2 {\nfont-size: 1.875rem; /* 1.875 * 16 = 30px */\n}\n\np {\nfont-size: 1rem; /* 1 * 16 = 16px */\n}",
        "h1 {\nfont-size:10vw;\n}\n\np {\nfont-size:5vw;\n}",
        "font-size",
        "px",
        "xx-small",
        "x-small",
        "small",
        "medium",
        "large",
        "x-large",
        "xx-large",
        "em",
        "rem",
        "%",
        "smaller",
        "larger",
        "vw"
      ]
    },
    {
      "title": "CSS Google Fonts Sofia Font Trirong Font Audiowide Font Audiowide Font Sofia Font Trirong Font Sofia Font Sofia on Fire Neon Effect Outline Effect Emboss Effect Multiple Shadow Effect",
      "summary": "Google Fonts\nIf you do not want to use any of the standard fonts in HTML, you can use Google Fonts.\nGoogle Fonts are free to use, and have more than 1000 fonts to choose from.\nHow To Use Google Fonts\nJust add a special style sheet link in the <head> section and then refer to the font in the CSS.\nExample\nHere, we want to use a font named \"Sofia\" from Google Fonts:\nResult:\nLorem ipsum dolor sit amet.\n123456790\nExample\nHere, we want to use a font named \"Trirong\" from Google Fonts:\nResult:\nLorem ipsum dolor sit amet.\n123456790\nExample\nHere, we want to use a font named \"Audiowide\" from Google Fonts:\nResult:\nLorem ipsum dolor sit amet.\n123456790\nNote: When specifying a font in CSS, always list at minimum one fallback font (to avoid unexpected behaviors). So, also here you should add a generic font family (like serif or sans-serif) to the end of the list.\nFor a list of all available Google Fonts, visit our How To - Google Fonts Tutorial.\nREMOVE ADS\nUse Multiple Google Fonts\nTo use multiple Google fonts, just separate the font names with a pipe character (|), like this:\nExample\nRequest multiple fonts:\nResult:\nNote: Requesting multiple fonts may slow down your web pages! So be careful about that.\nStyling Google Fonts\nOf course you can style Google Fonts as you like, with CSS!\nExample\nStyle the \"Sofia\" font:\nResult:\nLorem ipsum dolor sit amet.\n123456790\nEnabling Font Effects\nGoogle has also enabled different font effects that you can use.\nFirst add effect=effectname to the Google API, then add a special class name to the element that is going to use the special effect. The class name always starts with font-effect- and ends with the effectname.\nExample\nAdd the fire effect to the \"Sofia\" font:\nResult:\nTo request multiple font effects, just separate the effect names with a pipe character (|), like this:\nExample\nAdd multiple effects to the \"Sofia\" font:\nResult:",
      "examples": [
        "<head>\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Sofia\">\n<style>\nbody {\nfont-family: \"Sofia\", sans-serif;\n}\n</style>\n</head>",
        "Sofia Font\nLorem ipsum dolor sit amet.\n123456790",
        "<head>\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Trirong\">\n<style>\nbody {\nfont-family: \"Trirong\", serif;\n}\n</style>\n</head>",
        "Trirong Font\nLorem ipsum dolor sit amet.\n123456790",
        "<head>\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Audiowide\">\n<style>\nbody {\nfont-family: \"Audiowide\", sans-serif;\n}\n</style>\n</head>",
        "Audiowide Font\nLorem ipsum dolor sit amet.\n123456790",
        "<head>\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Audiowide|Sofia|Trirong\">\n<style>\nh1.a {font-family: \"Audiowide\", sans-serif;}\nh1.b {font-family: \"Sofia\", sans-serif;}\nh1.c {font-family: \"Trirong\", serif;}\n</style>\n</head>",
        "Audiowide Font\nSofia Font\nTrirong Font",
        "<head>\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Sofia\">\n<style>\nbody {\nfont-family: \"Sofia\", sans-serif;\nfont-size: 30px;\ntext-shadow: 3px 3px 3px #ababab;\n}\n</style>\n</head>",
        "<head>\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Sofia&effect=fire\">\n<style>\nbody {\nfont-family: \"Sofia\", sans-serif;\nfont-size: 30px;\n}\n</style>\n</head>\n<body>\n\n<h1 class=\"font-effect-fire\">Sofia on Fire</h1>\n\n</body>",
        "Sofia on Fire",
        "<head>\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Sofia&effect=neon|outline|emboss|shadow-multiple\">\n<style>\nbody {\nfont-family: \"Sofia\", sans-serif;\nfont-size: 30px;\n}\n</style>\n</head>\n<body>\n\n<h1 class=\"font-effect-neon\">Neon Effect</h1>\n<h1 class=\"font-effect-outline\">Outline Effect</h1>\n<h1 class=\"font-effect-emboss\">Emboss Effect</h1>\n<h1 class=\"font-effect-shadow-multiple\">Multiple Shadow Effect</h1>\n\n</body>",
        "Neon Effect\nOutline Effect\nEmboss Effect\nMultiple Shadow Effect",
        "|",
        "effect=effectname",
        "font-effect-",
        "effectname"
      ]
    },
    {
      "title": "CSS Great Font Pairings Beautiful Norway Beautiful Norway Beautiful Norway Beautiful Norway Beautiful Norway Beautiful Norway Beautiful Norway Beautiful Norway Beautiful Norway Beautiful Norway",
      "summary": "Font Pairing Rules\nGreat font pairings are essential to great design!\nHere are some basic rules to create great font pairings:\n1. Complement\nIt is always safe to find font pairings that complement one another.\nA great font combination should harmonize, without being too similar or too different.\n2. Use Font Superfamilies\nA font superfamily is a set of fonts designed to work well together. So, using different fonts within the same superfamily is safe.\nFor example, the Lucida superfamily contains the following fonts: Lucida Sans, Lucida Serif, Lucida Typewriter Sans, Lucida Typewriter Serif and Lucida Math.\n3. Contrast is King\nTwo fonts that are too similar will often conflict. However, contrasts, done the right way, brings out the best in each font.\nExample: Combining serif with sans serif is a well known combination.\nA strong superfamily includes both serif and sans serif variations of the same font (e.g. Lucida and Lucida Sans).\n4. Choose Only One Boss\nOne font should be the boss. This establishes a hierarchy for the fonts on your page. This can be achieved by varying the size, weight and color.\nExample\nNo doubt \"Georgia\" is the boss here:\nBelow, we have shown some popular font pairings that will suit many brands and contexts.\nREMOVE ADS\nGeorgia and Verdana\nGeorgia and Verdana is a classic combination. It also sticks to the web safe font standards:\nExample\nUse the \"Georgia\" font for headings, and \"Verdana\" for text:\nNorway has a total area of 385,252 square kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side.\nNorway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing.\nHelvetica and Garamond\nHelvetica and Garamond is another classic combination that uses web safe fonts:\nExample\nUse the \"Helvetica\" font for headings, and \"Garamond\" for text:\nNorway has a total area of 385,252 square kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side.\nNorway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing.\nPopular Google Font Pairings\nIf you do not want to use standard fonts in HTML, you can use Google Fonts.\nGoogle Fonts are free to use, and have more than 1000 fonts to choose from.\nBelow are some popular Google Web Font Pairings.\nMerriweather and Open Sans\nExample\nUse the \"Merriweather\" font for headings, and \"Open Sans\" for text:\nNorway has a total area of 385,252 square kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side.\nNorway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing.\nUbuntu and Lora\nExample\nUse the \"Ubuntu\" font for headings, and \"Lora\" for text:\nNorway has a total area of 385,252 square kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side.\nNorway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing.\nAbril Fatface and Poppins\nExample\nUse the \"Abril Fatface\" font for headings, and \"Poppins\" for text:\nNorway has a total area of 385,252 square kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side.\nNorway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing.\nCinzel and Fauna One\nExample\nUse the \"Cinzel\" font for headings, and \"Fauna One\" for text:\nNorway has a total area of 385,252 square kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side.\nNorway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing.\nFjalla One and Libre Baskerville\nExample\nUse the \"Fjalla One\" font for headings, and \"Libre Baskerville\" for text:\nNorway has a total area of 385,252 square kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side.\nNorway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing.\nSpace Mono and Muli\nExample\nUse the \"Space Mono\" font for headings, and \"Muli\" for text:\nNorway has a total area of 385,252 square kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side.\nNorway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing.\nSpectral and Rubik\nExample\nUse the \"Spectral\" font for headings, and \"Rubik\" for text:\nNorway has a total area of 385,252 square kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side.\nNorway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing.\nOswald and Noto Sans\nExample\nUse the \"Oswald\" font for headings, and \"Noto Sans\" for text:\nNorway has a total area of 385,252 square kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side.\nNorway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing.\nFor a list of all free Google Fonts, visit our How To - Google Fonts Tutorial.",
      "examples": [
        "body {\nbackground-color: black;\nfont-family: Verdana, sans-serif;\nfont-size: 16px;\ncolor: gray;\n}\n\nh1 {\nfont-family: Georgia, serif;\nfont-size: 60px;\ncolor: white;\n}",
        "Beautiful Norway\nNorway has a total area of 385,252 square kilometers and a population of 5,438,657 (December 2020). Norway is bordered by Sweden, Finland and Russia to the north-east, and the Skagerrak to the south, with Denmark on the other side.\nNorway has beautiful mountains, glaciers and stunning fjords. Oslo, the capital, is a city of green spaces and museums. Bergen, with colorful wooden houses, is the starting point for cruises to the dramatic Sognefjord. Norway is also known for fishing, hiking and skiing."
      ]
    },
    {
      "title": "CSS Font Property",
      "summary": "The CSS Font Shorthand Property\nTo shorten the code, it is possible to specify all the individual font properties in one declaration.\nThe CSS font property is a shorthand property for:\nfont-style\nfont-variant\nfont-weight\nfont-stretch\nfont-size\nline-height\nfont-family\nRules for the CSS Font Shorthand Property\nThe font-size and font-family values are required. If one of the other values is missing, their default value are used.\nIf defined, font-style, font-variant and font-weight must precede font-size.\nIf defined, line-height must immediately follow font-size, preceded by \"/\", like this: 15px/30px.\nfont-family must be the last value specified.\nExample\nUse the font shorthand property to set multiple font properties in one declaration:\nAll CSS Font Properties",
      "examples": [
        "p.a {\nfont: 20px Arial, sans-serif;\n}\n\np.b {\nfont: italic bold 16px Arial, sans-serif;\n}\n\np.c {\nfont: italic small-caps bold 15px/30px Georgia, serif;\n}",
        "font",
        "font-style",
        "font-variant",
        "font-weight",
        "font-stretch",
        "font-size",
        "line-height",
        "font-family"
      ]
    },
    {
      "title": "CSS Icons",
      "summary": "Icons can easily be added to your HTML page, by using an icon library.\nHow To Add Icons\nThe simplest way to add an icon to your HTML page, is with an icon library, such as Font Awesome.\nAdd the name of the specified icon class to any inline HTML element (like <i> or <span>).\nAll the icons in the icon libraries below, are scalable vectors that can be customized with CSS (size, color, shadow, etc.)\nFont Awesome Icons\nTo use the Font Awesome icons, go to fontawesome.com, sign in, and get a code to add in the <head> section of your HTML page:\n<script src=\"https://kit.fontawesome.com/yourcode.js\" crossorigin=\"anonymous\"></script>\nRead more about how to get started with Font Awesome in our Font Awesome 5 tutorial.\nNote: No downloading or installation is required!\nExample\nResult:\nFor a complete reference of all Font Awesome icons, visit our Icon Reference.\nREMOVE ADS\nBootstrap Icons\nTo use the Bootstrap glyphicons, add the following line inside the <head> section of your HTML page:\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">\nNote: No downloading or installation is required!\nExample\nResult:\nGoogle Icons\nTo use the Google icons, add the following line inside the <head> section of your HTML page:\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\">\nNote: No downloading or installation is required!\nExample\nResult:\nFor a complete list of all icons, visit our Icon Tutorial.",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<head>\n<script src=\"https://kit.fontawesome.com/a076d05399.js\" crossorigin=\"anonymous\"></script>\n</head>\n<body>\n\n<i class=\"fas fa-cloud\"></i>\n<i class=\"fas fa-heart\"></i>\n<i class=\"fas fa-car\"></i>\n<i class=\"fas fa-file\"></i>\n<i class=\"fas fa-bars\"></i>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<head>\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">\n</head>\n<body>\n\n<i class=\"glyphicon glyphicon-cloud\"></i>\n<i class=\"glyphicon glyphicon-remove\"></i>\n<i class=\"glyphicon glyphicon-user\"></i>\n<i class=\"glyphicon glyphicon-envelope\"></i>\n<i class=\"glyphicon glyphicon-thumbs-up\"></i>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<head>\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\">\n</head>\n<body>\n\n<i class=\"material-icons\">cloud</i>\n<i class=\"material-icons\">favorite</i>\n<i class=\"material-icons\">attachment</i>\n<i class=\"material-icons\">computer</i>\n<i class=\"material-icons\">traffic</i>\n\n</body>\n</html>",
        "<i>",
        "<span>",
        "<head>",
        "<script src=\"https://kit.fontawesome.com/yourcode.js\" crossorigin=\"anonymous\"></script>",
        "<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">",
        "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\">"
      ]
    },
    {
      "title": "CSS Links",
      "summary": "CSS Styling Links\nHTML links can be styled with many CSS properties, like color, text-decoration, background-color, font-size, font-weight, font-family, etc.).\nExample\nStyle a link with a color, background-color, and a bold font-weight:\nStyling Links Depending on State\nIn addition, links can be styled differently depending on what state they are in.\nThe four link states are:\n:link - a normal, unvisited link\n:visited - a link the user has visited\n:hover - a link when the user mouses over it\n:active - a link the moment it is clicked\nWhen setting the style for link states, there are some order rules:\n:hover must come after :link and :visited\n:active must come after :hover\nExample\nStyle links according to link state:\nREMOVE ADS\nCSS Links - Text Decoration\nThe text-decoration property is mostly used to remove underlines from links:\nExample\nCSS Links - Background Color\nThe background-color property can be used to specify a background color for links:\nExample\nCSS Link Buttons\nCSS can be used to create HTML link buttons:\nExample\nCombine several CSS properties to display links as boxes/buttons\nExample\nAnother example of how to create link boxes/buttons:\nMore Examples\nExample\nThis example demonstrates how to add other styles to HTML links:\nExample\nThis example demonstrates the different types of cursors (can be useful for links):",
      "examples": [
        "a {\ncolor: hotpink;\nbackground-color: yellow;\nfont-weight: bold;\n}",
        "/* unvisited link */\na:link {\ncolor: red;\n}\n\n/* visited link */\na:visited {\ncolor: green;\n}\n\n/* mouse over link */\na:hover {\ncolor: hotpink;\n}\n\n/* selected link */\na:active {\ncolor: blue;\n}",
        "a:link {\ntext-decoration: none;\n}\n\na:visited {\ntext-decoration: none;\n}\n\na:hover {\ntext-decoration: underline;\n}\n\na:active {\ntext-decoration: underline;\n}",
        "a:link {\nbackground-color: yellow;\n}\n\na:visited {\nbackground-color: cyan;\n}\n\na:hover {\nbackground-color: lightgreen;\n}\n\na:active {\nbackground-color: hotpink;\n}",
        "a:link, a:visited {\nbackground-color: #f44336;\ncolor: white;\npadding: 14px 25px;\ntext-align: center;\ntext-decoration: none;\ndisplay: inline-block;\n}\n\na:hover, a:active {\nbackground-color: red;\n}",
        "a:link, a:visited {\nbackground-color: white;\ncolor: black;\nborder: 2px solid green;\npadding: 10px 20px;\ntext-align: center;\ntext-decoration: none;\ndisplay: inline-block;\n}\n\na:hover, a:active {\nbackground-color: green;\ncolor: white;\n}",
        "a.one:link {color:red;}\na.one:visited {color:blue;}\na.one:hover {color:orange;}\n\na.two:link {color:red;}\na.two:visited {color:blue;}\na.two:hover {font-size:150%;}\n\na.three:link {color:red;}\na.three:visited {color:blue;}\na.three:hover {background:lightgreen;}\n\na.four:link {color:red;}\na.four:visited {color:blue;}\na.four:hover {font-family:monospace;}\n\na.five:link {color:red;text-decoration:none;}\na.five:visited {color:blue;text-decoration:none;}\na.five:hover {text-decoration:underline;}",
        "<span style=\"cursor: auto\">auto</span><br>\n<span style=\"cursor: crosshair\">crosshair</span><br>\n<span style=\"cursor: default\">default</span><br>\n<span style=\"cursor: e-resize\">e-resize</span><br>\n<span style=\"cursor: help\">help</span><br>\n<span style=\"cursor: move\">move</span><br>\n<span style=\"cursor: n-resize\">n-resize</span><br>\n<span style=\"cursor: ne-resize\">ne-resize</span><br>\n<span style=\"cursor: nw-resize\">nw-resize</span><br>\n<span style=\"cursor: pointer\">pointer</span><br>\n<span style=\"cursor: progress\">progress</span><br>\n<span style=\"cursor: s-resize\">s-resize</span><br>\n<span style=\"cursor: se-resize\">se-resize</span><br>\n<span style=\"cursor: sw-resize\">sw-resize</span><br>\n<span style=\"cursor: text\">text</span><br>\n<span style=\"cursor: w-resize\">w-resize</span><br>\n<span style=\"cursor: wait\">wait</span>",
        "color",
        "text-decoration",
        "background-color",
        "font-size",
        "font-weight",
        "font-family",
        ":link",
        ":visited",
        ":hover",
        ":active"
      ]
    },
    {
      "title": "CSS Lists",
      "summary": "An unordered list:\nCoffee\nTea\nCoca Cola\nAn ordered list:\nCoffee\nTea\nCoca Cola\nCSS Styling Lists\nIn HTML, there are two main types of lists:\n<ul> - unordered lists (list items are marked with bullets)\n<ol> - ordered lists (list items are marked with numbers or letters)\nCSS has the following properties for styling HTML lists:\nlist-style-type - Specifies the type of list-item marker\nlist-style-image - Specifies an image as the list-item marker\nlist-style-position - Specifies the position of the list-item markers\nlist-style - A shorthand property for the properties above\nCSS Style List-item Markers\nThe CSS list-style-type property specifies the type of list-item marker in a list.\nThe following example shows some of the available list-item markers:\nExample\nNote: Some of the values are for unordered lists, and some for ordered lists.\nREMOVE ADS\nCSS Replace List-item Marker with an Image\nThe CSS list-style-image property is used to replace the list-item marker with an image.\nNote: Always specify a list-style-type property in addition. This property is used if the image for some reason is unavailable.\nExample\nReplace the list-item markers with an image:\nCSS Position the List-item Markers\nThe CSS list-style-position property specifies the position of the list-item markers (bullet points).\nlist-style-position: outside; means that the bullet points will be outside the list item. The start of each line of a list item will be aligned vertically. This is default:\nCoffee\nTea\nCoca-cola\nlist-style-position: inside; means that the bullet points will be inside the list item. As it is part of the list item, it will be part of the text and push the text at the start:\nCoffee\nTea\nCoca-cola\nExample\nPosition the list-item markers:\nCSS Remove List-Item Markers\nThe list-style-type:none; property is used to remove the list-item markers.\nNote: A list has a default margin and padding. To remove this, add margin:0 and padding:0 to the <ul> or <ol> element:\nExample\nRemove the list-item markers:\nCSS list-style Shorthand Property\nThe list-style property is a shorthand property. It is used to set all the list properties in one declaration.\nWhen using the shorthand property, the order of the property values are:\nlist-style-type\nlist-style-position\nlist-style-image\nIf one of the property values above is missing, the default value for the missing property will be inserted.\nExample\nUse the list-style shorthand property:\nCSS Styling List With Colors\nWe can also style lists with colors, margins and padding, to make them look a little more interesting.\nAnything added to the <ol> or <ul> tag, affects the entire list, while properties added to the <li> tag will affect the individual list items:\nExample\nStyling lists with colors, margins and padding:\nResult:\nCoffee\nTea\nCoca Cola\nCoffee\nTea\nCoca Cola\nMore Examples\nCustomized list with a red left border\nThis example demonstrates how to create a list with a red left border.\nFull-width bordered list\nThis example demonstrates how to create a bordered list without bullets.\nAll the different list-item markers for lists\nThis example demonstrates all the different list-item markers in CSS.\nAll CSS List Properties",
      "examples": [
        "ul.a {list-style-type: circle;}\nul.b {list-style-type: disc;}\nul.c {list-style-type: square;}\n\nol.d {list-style-type: upper-roman;}\nol.e {list-style-type: lower-roman;}\nol.f {list-style-type: lower-alpha;}\nol.g {list-style-type: decimal;}",
        "ul {\nlist-style-image: url('sqpurple.gif');\nlist-style-type: square;\n}",
        "ul.a {\nlist-style-position: outside;\n}\n\nul.b {\nlist-style-position: inside;\n}",
        "ul {\nlist-style-type: none;\nmargin: 0;\npadding: 0;\n}",
        "ul {\nlist-style: square inside url(\"sqpurple.gif\");\n}",
        "ol {\nbackground: salmon;\npadding: 20px;\n}\n\nol li {\nbackground: mistyrose;\ncolor: darkred;\npadding: 10px;\nmargin-left: 20px;\n}\n\nul {\nbackground: powderblue;\npadding: 20px;\n}\n\nul li {\nbackground: mistyrose;\ncolor: darkblue;\nmargin: 5px;\n}",
        "list-style-type",
        "list-style-image",
        "list-style-position",
        "list-style",
        "list-style-position: outside;",
        "list-style-position: inside;",
        "list-style-type:none;",
        "margin:0",
        "padding:0"
      ]
    },
    {
      "title": "CSS Tables",
      "summary": "HTML tables can be greatly improved with CSS:\nCSS Table Borders\nThe CSS border property is used to specify the width, style, and color of table borders.\nThe border property is a shorthand property for:\nborder-width - sets the width of the border\nborder-style - sets the style of the border (required)\nborder-color - sets the color of the border\nThe example below specifies a 1px solid border for <table>, <th>, and <td> elements:\nExample\nCSS Table Border Color\nThe example below specifies a 1px solid green border for <table>, <th>, and <td> elements:\nExample\nWhy Double Borders?\nNotice that the tables in the examples above have double borders. This is because both the <table>, <th>, and <td> elements have separate borders.\nTo remove double borders, take a look at the example below.\nREMOVE ADS\nCSS Collapse Table Borders\nThe CSS border-collapse property sets whether table borders should collapse into a single border or be separated as in standard HTML.\nThis property can have one of the following values:\nseparate - Default value. Borders are separated; each cell will display its own borders\ncollapse - Borders are collapsed into a single border when possible\nThe following table has collapsed borders:\nExample\nUsing the border-collapse property:\nCSS Table Padding\nTo control the space between the border and the content in a table, use the padding property on <td> and <th> elements:\nExample\nCSS Border Spacing\nThe CSS border-spacing property sets the distance between the borders of adjacent cells.\nNote: This property works only when border-collapse is set to \"separate\".\nThe following table has a border-spacing of 15px:\nExample\nUsing the border-spacing property:\nCSS Outside Table Borders\nIf you just want a border around the table (not inside), you specify the border property only for the <table> element:\nExample",
      "examples": [
        "table, th, td {\nborder: 1px solid;\n}",
        "table, th, td {\nborder: 1px solid green;\n}",
        "table {\nborder-collapse: collapse;\n}",
        "th, td {\npadding: 10px;\n}",
        "table {\nborder-collapse: separate;\nborder-spacing: 15px;\n}",
        "table {\nborder: 1px solid;\n}",
        "border",
        "border-width",
        "border-style",
        "border-color",
        "border-collapse",
        "separate",
        "collapse",
        "padding",
        "border-spacing"
      ]
    },
    {
      "title": "CSS Table Size",
      "summary": "CSS Table Width and Height\nThe width and height of a table are defined by the width and height properties.\nCSS Table Width\nThe CSS width property is used to set the width of a table.\nThe width can be set:\nin percent (%)\nas a fixed length (px)\nby the auto keyword\nCSS Table Width in Percent\nTo create a table that spans the entire screen (full-width), use width: 100%;:\nExample\nFull-width table:\nTo create a table that spans half the page, use width: 50%;:\nExample\n50% width table:\nREMOVE ADS\nCSS Table Width in a Fixed Width\nTo create a table with a fixed width, use width: 500px:\nExample\nFixed width table:\nCSS Table Width Using auto\nTo let the browser calculate the width, use width: auto;:\nExample\nUsing width: auto:\nCSS Table Height\nThe CSS height property is used to set the height of a table.\nThe height can be set:\nin percent (%)\nas a fixed length (px)\nby the auto keyword\nThe example below sets the height of the table headers (<th>) to 70px:\nExample\nSet the height of table headers to a fixed height:",
      "examples": [
        "table {\nwidth: 100%;\n}\n\nth {\nheight: 70px;\n}",
        "table {\nwidth: 50%;\n}",
        "table {\nwidth: 500px;\n}",
        "table {\nwidth: auto;\n}",
        "th {\nheight: 70px;\n}",
        "width",
        "height",
        "auto",
        "width: 100%;",
        "width: 50%;",
        "width: 500px",
        "width: auto;"
      ]
    },
    {
      "title": "CSS Table Alignment",
      "summary": "Horizontal Alignment\nThe CSS text-align property is used to set the horizontal alignment of the content in <th> or <td>.\nThis property can have one of the following values:\nleft - Aligns the text to the left\nright - Aligns the text to the right\ncenter - Centers the text\nNote: By default, the content of <th> elements are center-aligned and the content of <td> elements are left-aligned!\nCSS text-align: center\nTo center-align the content of <td> elements, use text-align: center:\nExample\nCenter-align <td> elements:\nCSS text-align: left\nTo force the content of <th> elements to be left-aligned, use text-align: left on <th> elements:\nExample\nLeft-align <th> elements:\nREMOVE ADS\nVertical Alignment\nThe CSS vertical-align property sets the vertical alignment (like top, bottom, or middle) of the content in <th> or <td>.\nNote: By default, the vertical alignment of the content in a table is middle (for both <th> and <td> elements).\nThe following example sets the vertical text alignment to bottom for <td> elements:\nExample\nSets vertical alignment to bottom for <td> elements:",
      "examples": [
        "td {\ntext-align: center;\n}",
        "th {\ntext-align: left;\n}",
        "td {\nheight: 50px;\nvertical-align: bottom;\n}",
        "text-align",
        "left",
        "right",
        "center",
        "text-align: center",
        "text-align: left",
        "vertical-align"
      ]
    },
    {
      "title": "CSS Table Styling",
      "summary": "CSS Table Padding\nTo add some more space between the inner borders and the content in a table, use the padding property on <td> and <th> elements:\nExample\nCSS Horizontal Dividers\nTo create horizontal dividers for a table, add the border-bottom property to <th> and <td> elements:\nExample\nCSS Hoverable Table\nUse the CSS :hover selector on <tr> to highlight table rows on mouse over:\nExample\nREMOVE ADS\nCSS Zebra-striped Table\nFor zebra-striped tables, use the nth-child() selector and add a background-color to all even (or odd) table rows:\nExample\nCSS Table Color\nThe example below specifies a background color and a text color for the <th> elements:\nExample",
      "examples": [
        "th, td {\npadding: 10px;\ntext-align: left;\n}",
        "th, td {\nborder-bottom: 1px solid #ddd;\n}",
        "tr:hover {background-color: coral;}",
        "tr:nth-child(even) {background-color: #f2f2f2;}",
        "th {\nbackground-color: #04AA6D;\ncolor: white;\n}",
        "padding",
        "border-bottom",
        ":hover",
        "nth-child()",
        "background-color"
      ]
    },
    {
      "title": "CSS Responsive Tables",
      "summary": "CSS Responsive Tables\nA responsive table will display a horizontal scrollbar if the screen is too small to display the full content.\nResize the browser window to see the effect:\nHow to do it:\nWrap the <table> element in a <div> container.\nSet the overflow-x property to auto for the <div> element:\nExample\nNote: In OS X Lion (on Mac), scrollbars are hidden by default and are only shown when being used (even though \"overflow:scroll\" is set).\nREMOVE ADS\nMore Examples\nMake a fancy table\nThis example demonstrates how to create a fancy table.\nAdd and position a table caption\nThis example demonstrates how to add, and position a table caption.\nCSS Table Properties",
      "examples": [
        "div.tablecontainer {\noverflow-x: auto;\n}",
        "overflow-x",
        "auto"
      ]
    },
    {
      "title": "CSS The display Property",
      "summary": "The CSS display Property\nThe display property is an important CSS property for controlling layout. It specifies whether an HTML element is treated as a block or an inline element.\nEvery HTML element has a default display value, depending on what type of element it is. The default display value for most elements is block or inline.\nThe display property is used to change the default display behavior of HTML elements.\nBlock-level Elements\nA block-level element ALWAYS starts on a new line and takes up the full width available (stretches out to the left and right as far as it can).\nExamples of block-level elements:\n<div>\n<h1> - <h6>\n<p>\n<form>\n<header>\n<footer>\n<section>\nInline Elements\nAn inline element DOES NOT start on a new line and only takes up as much width as necessary.\nThis is an inline <span> element inside a paragraph.\nExamples of inline elements:\n<span>\n<a>\n<img>\nREMOVE ADS\nCommon display Values\nThe CSS display property has many values. The following table lists the most commonly used:\nCSS display: none;\nWhen using display: none; the element is completely hidden from the document flow and does not take up any space.\nIt is commonly used with JavaScript to hide or show elements without deleting and recreating them.\nClick to show hidden panel\nThis panel contains a <div> element, which is hidden by default, with display: none.\nWe use JavaScript to show it (change it to display: block).\nExample\nHow to use CSS and JavaScript to show a hidden element on a click event:\nExample\nHow to use CSS and JavaScript to toggle between show and hide on a click event:\nOverride the Default Display Value\nThe display property is used to change the default display behavior of HTML elements.\nChanging an inline element to a block element, or vice versa, can be useful for making the page look a specific way, and still follow the web standards.\nA common example is to change <li> elements to inline, to create a horizontal menu:\nExample\nNote: Setting the display property of an element only changes how the element is displayed, NOT what kind of element it is. So, an inline element with display: block; is not allowed to have other block elements inside it.\nThe following example displays <span> elements as block elements:\nExample\nThe following example displays <a> elements as block elements:\nExample\nExample of More Display Values\nThe following example demonstrates some more display values:\nExample\nHide an Element - Use display:none or visibility:hidden?\ndisplay:none\nRemove\nvisibility:hidden\nHide\nReset\nReset All\nHiding an element can be done by setting the display property to none. The element will be hidden, and the page will be displayed as if the element is not there:\nExample\nYou can also use visibility:hidden; to hide an element.\nHowever, with this property, the element will be hidden, but it will still take up the same space as if it was visible:\nExample\nCSS Display/Visibility Properties",
      "examples": [
        "<style>\n#panel {\ndisplay: none;\n}\n</style>\n\n<script>\nfunction myFunction() {\ndocument.getElementById(\"panel\").style.display = \"block\";\n}\n</script>",
        "<style>\n#panel {\ndisplay: none;\n}\n</style>\n\n<script>\nfunction myFunction() {\nvar x = document.getElementById(\"panel\");\nif (x.style.display === \"none\") {\nx.style.display = \"block\";\n} else {\nx.style.display = \"none\";\n}\n}\n</script>",
        "li {\ndisplay: inline;\n}",
        "span {\ndisplay: block;\n}",
        "a {\ndisplay: block;\n}",
        "p.ex1 {display: none;}\np.ex2 {display: inline;}\np.ex3 {display: block;}\np.ex4 {display: inline-block;}\np.ex5 {display: flex;}\np.ex6 {display: grid;}",
        "h1.hidden {\ndisplay: none;\n}",
        "h1.hidden {\nvisibility: hidden;\n}",
        "display",
        "block",
        "inline",
        "display: none;",
        "<li>",
        "display: block;",
        "display:none",
        "visibility:hidden",
        "none",
        "visibility:hidden;"
      ]
    },
    {
      "title": "CSS The max-width Property",
      "summary": "The CSS max-width Property\nThe max-width property defines the maximum width of an element.\nThis property prevents the element's width from being larger than the specified value (it can be smaller, but not larger).\nThis property is useful for creating responsive layouts and to ensure content readability across various screen sizes.\nProblem with width:\nHere we have a horizontally centered <div> element with a specific width (600px):\nWhat happens to the <div> above if the browser window is smaller than the width of the element? Some of the content will not show, and the browser might add a horizontal scrollbar to the page.\nUsing max-width instead:\nNow, we use the max-width property instead. This will improve the browser's handling of small windows:\nTip: Resize the browser window to less than 600px wide, to see the difference between the two <div>s!\nHere is the CSS code for the two <div>s above:\nExample\nCSS Properties",
      "examples": [
        "div.ex1 {\nwidth: 500px;\nmargin: auto;\nborder: 3px solid #73AD21;\n}\n\ndiv.ex2 {\nmax-width: 500px;\nmargin: auto;\nborder: 3px solid #73AD21;\n}",
        "max-width",
        "width"
      ]
    },
    {
      "title": "CSS The position Property",
      "summary": "CSS Positioning\nCSS positioning is about controlling the placement of elements within a web page.\nWith CSS positioning, you can override the normal document flow.\nThe CSS position Property\nThe position property specifies the positioning type for an element.\nThis property can have one of the following values:\nstatic - This is default\nrelative\nfixed\nabsolute\nsticky\nElements are then positioned to their final location with the top, bottom, left, and right properties.\nCSS position: static\nAll HTML elements are positioned static by default.\nStatic positioned elements are not affected by the top, bottom, left, and right properties.\nAn element with position: static; is always positioned according to the normal flow of the page:\nHere is the CSS that is used:\nExample\nCSS position: relative\nAn element with position: relative; is positioned relative to its normal position in the document flow.\nSetting the top, right, bottom, and left properties will cause the element to be adjusted away from its normal position. Other content will not be adjusted to fit into any gap left by the element.\nHere is the CSS that is used:\nExample\nREMOVE ADS\nCSS position: fixed\nAn element with position: fixed; is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled. The top, right, bottom, and left properties are used set the final location of the element.\nA fixed element does not leave a gap in the page where it would normally have been located.\nNotice the fixed element in the lower-right corner of the page. Here is the CSS that is used:\nExample\nCSS position: absolute\nAn element with position: absolute; is positioned relative to the nearest positioned ancestor (with position other than static).\nHowever; if an absolute positioned element has no positioned ancestors, it uses the document body, and moves along with page scrolling.\nNote: Absolute positioned elements are removed from the normal document flow, and can overlap other elements.\nHere is a simple example:\nHere is the CSS that is used:\nExample\nCSS position: sticky\nAn element with position: sticky; toggles between a relative and fixed position, depending on the scroll position.\nA sticky element is positioned relative until a certain scroll position is reached - then it \"sticks\" in that place (like position:fixed).\nNote: You must specify at least one of the top, right, bottom or left properties, for sticky positioning to work.\nIn this example, when the sticky element reach the top of the page (top: 0), it sticks to this position:\nExample\nPositioning Text On an Image\nHow to position text on an image:\nExample\nTry it Yourself:\nAll CSS Positioning Properties",
      "examples": [
        "div.static {\nposition: static;\nborder: 3px solid #73AD21;\n}",
        "div.relative {\nposition: relative;\nleft: 30px;\nborder: 3px solid #73AD21;\n}",
        "div.fixed {\nposition: fixed;\nbottom: 0;\nright: 0;\nwidth: 300px;\nborder: 3px solid #73AD21;\n}",
        "div.relative {\nposition: relative;\nwidth: 400px;\nheight: 200px;\nborder: 3px solid green;\n}\n\ndiv.absolute {\nposition: absolute;\ntop: 80px;\nright: 0;\nwidth: 200px;\nheight: 100px;\nborder: 3px solid red;\n}",
        "div.sticky {\nposition: sticky;\ntop: 0;\nbackground-color: green;\nborder: 2px solid #4CAF50;\n}",
        "position",
        "static",
        "relative",
        "fixed",
        "absolute",
        "sticky",
        "top",
        "bottom",
        "left",
        "right",
        "position: static;",
        "position: relative;",
        "position: fixed;",
        "position: absolute;",
        "position: sticky;"
      ]
    },
    {
      "title": "CSS The z-index Property This is a heading",
      "summary": "The CSS z-index Property\nThe z-index property specifies the stack order of positioned elements.\nThe stack order defines which element should be placed in front or behind other elements.\nWhen elements are positioned, they can overlap other elements.\nAn element can have a positive or negative stack order (z-index):\nBecause the image has a z-index of -1, it will be placed behind the text.\nExample\nNote: z-index only works on positioned elements (position: absolute, position: relative, position: fixed, or position: sticky) and flex items (elements that are direct children of display: flex elements).\nREMOVE ADS\nAnother z-index Example\nA postioned element with a greater stack order is always above an element with a lower stack order.\nExample\nWithout z-index\nIf several positioned elements overlap each other without a z-index specified, the elements render in the order they are defined in the HTML source code.\nExample\nSame example as above, but here with no z-index specified:\nCSS Property",
      "examples": [
        "img {\nposition: absolute;\nleft: 0px;\ntop: 0px;\nz-index: -1;\n}",
        "<html>\n<head>\n<style>\n.container {\nposition: relative;\n}\n\n.black-box {\nposition: relative;\nz-index: 1;\nborder: 2px solid black;\nheight: 100px;\nmargin: 30px;\n}\n\n.gray-box {\nposition: absolute;\nz-index: 3;\nbackground: lightgray;\nheight: 60px;\nwidth: 70%;\nleft: 50px;\ntop: 50px;\n}\n\n.green-box {\nposition: absolute;\nz-index: 2;\nbackground: lightgreen;\nwidth: 35%;\nleft: 270px;\ntop: -15px;\nheight: 100px;\n}\n</style>\n</head>\n<body>\n\n<div class=\"container\">\n<div class=\"black-box\">Black box</div>\n<div class=\"gray-box\">Gray box</div>\n<div class=\"green-box\">Green box</div>\n</div>\n\n</body>\n</html>",
        "<html>\n<head>\n<style>\n.container {\nposition: relative;\n}\n\n.black-box {\nposition: relative;\nborder: 2px solid black;\nheight: 100px;\nmargin: 30px;\n}\n\n.gray-box {\nposition: absolute;\nbackground: lightgray;\nheight: 60px;\nwidth: 70%;\nleft: 50px;\ntop: 50px;\n}\n\n.green-box {\nposition: absolute;\nbackground: lightgreen;\nwidth: 35%;\nleft: 270px;\ntop: -15px;\nheight: 100px;\n}\n</style>\n</head>\n<body>\n\n<div class=\"container\">\n<div class=\"black-box\">Black box</div>\n<div class=\"gray-box\">Gray box</div>\n<div class=\"green-box\">Green box</div>\n</div>\n\n</body>\n</html>",
        "z-index"
      ]
    },
    {
      "title": "CSS The overflow Property",
      "summary": "The CSS overflow Property\nThe CSS overflow property controls what happens to content that is too big to fit into an area.\nIt specifies whether to clip the content or to add scrollbars when the content of an element is too big.\nThe overflow property has the following values:\nvisible - Default. The overflow is not clipped. The content renders outside the element's box\nhidden - The overflow is clipped, and the rest of the content is hidden\nscroll - Scrollbars are added. User must scroll to see all content\nauto - Similar to scroll, but adds scrollbars only when necessary\nHere, scrollbars are added on overflow:\nCSS overflow: visible\nBy default, the overflow is visible, meaning that it is not clipped and it renders outside the element's box:\nExample\nREMOVE ADS\nCSS overflow: hidden\nWith the hidden value, the overflow is clipped, and the rest of the content is hidden:\nExample\nCSS overflow: scroll\nWith the scroll value, horizontal and vertical scrollbars are always added. User must scroll to see all content:\nExample\nCSS overflow: auto\nThe auto value is similar to scroll, but it adds scrollbars only when necessary:\nExample\nCSS overflow-x and overflow-y\nThe overflow-x and overflow-y properties specifies whether to change the overflow of content just horizontally or vertically (or both):\noverflow-x specifies what to do with the left/right edges of the content.\noverflow-y specifies what to do with the top/bottom edges of the content.\nExample\nAll CSS Overflow Properties",
      "examples": [
        "div {\nwidth: 200px;\nheight: 65px;\nbackground-color: coral;\noverflow: visible;\n}",
        "div {\noverflow: hidden;\n}",
        "div {\noverflow: scroll;\n}",
        "div {\noverflow: auto;\n}",
        "div {\noverflow-x: hidden; /* Hide horizontal scrollbar */\noverflow-y: scroll; /* Add vertical scrollbar */\n}",
        "overflow",
        "visible",
        "hidden",
        "scroll",
        "auto",
        "overflow-x",
        "overflow-y"
      ]
    },
    {
      "title": "CSS Float",
      "summary": "CSS Float\nThe float property specifies how an element should float within its container.\nIt places an element on the left or right side of its container, allowing text and inline elements to wrap around it.\nThe image inside this <div> is floated to the right.\nIf you make the screen smaller, you will see that the text wraps around the image.\nThe CSS float Property\nThe float property is used for positioning and formatting content e.g. let an image float left to the text in a container.\nThis property can have one of the following values:\nleft - The element floats to the left of its container\nright - The element floats to the right of its container\nnone - Default. The element does not float and is displayed just where it occurs in the text\ninherit - The element inherits the float value of its parent\nTip: The float property is often used to wrap text around images!\nCSS float: right Example\nThe float: right value indicates that an element should float to the right within its container.\nThe following example specifies that the image should float to the right:\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac...\nExample\nREMOVE ADS\nCSS float: left Example\nThe float: left value indicates that an element should float to the left within its container.\nThe following example specifies that the image should float to the left:\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac...\nExample\nCSS float: none Example\nThe float: none value is the default value for float, and the element is displayed just where it occurs in its container.\nIn the following example the image will be displayed just where it occurs in the container:\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac...\nExample\nCSS Float Next To Each Other\nHTML <div> elements are block elements, and will start on a new line and take up the full width available. However, if we use float: left we can make the <div> elements to float next to each other:\nExample\nCSS Float Property",
      "examples": [
        "img {\nfloat: right;\n}",
        "img {\nfloat: left;\n}",
        "img {\nfloat: none;\n}",
        "div {\nfloat: left;\npadding: 15px;\n}\n\n.div1 {\nbackground: red;\n}\n\n.div2 {\nbackground: yellow;\n}\n\n.div3 {\nbackground: green;\n}",
        "float",
        "left",
        "right",
        "none",
        "inherit",
        "float: right",
        "float: left",
        "float: none"
      ]
    },
    {
      "title": "CSS clear and clearfix Hack",
      "summary": "The CSS clear Property\nThe clear property specifies what should happen with the element that is NEXT to a floating element.\nThe clear property prevents elements from wrapping around or beside the floated content.\nThis property can have one of the following values:\nnone - Default. Allows elements to float on either side\nleft - The element is pushed below floated elements on its left side\nright - The element is pushed below floated elements, on its right side\nboth - The element is pushed below floated elements, on both its left and right side\ninherit - The element inherits the clear value from its parent\nExample\nHere, clear: left; pushes div2 down below the floating div1, on its left side:\nREMOVE ADS\nThe CSS clearfix Hack\nIf a floated element is taller than the containing element, it will \"overflow\" outside of its container. We can then add a clearfix hack to solve this problem:\nWithout Clearfix\nWith Clearfix\nThe clearfix hack involves the ::after pseudo-element, and is used to ensure that the parent container properly encloses its floated child elements:\nExample\nExample explained:\n.clearfix::after - Targets a pseudo-element that is generated after the content of any element with class=\"clearfix\"\ncontent: \"\" - Ensures the pseudo-element is rendered, even if it has no visible content\nclear: both - This clears both left and right floats, effectively pushing any following content below the floated elements, and forces the parent container to expand to include them\ndisplay: table - This creates a new block formatting context, which helps in containing floats\nYou will learn more about the ::after pseudo-element in a later chapter.\nCSS Properties",
      "examples": [
        "div1 {\nfloat: left;\n}\n\ndiv2 {\nclear: left;\n}",
        ".clearfix::after {\ncontent: \"\";\nclear: both;\ndisplay: table;\n}",
        "clear",
        "none",
        "left",
        "right",
        "both",
        "inherit",
        "::after"
      ]
    },
    {
      "title": "CSS Float Examples",
      "summary": "Create Equal Width Boxes\nWith the float property, it is easy to float boxes of content side by side:\nBox 1\nBox 2\nBox 1\nBox 2\nBox 3\nExample\nWhat is box-sizing?\nYou can easily create three floating boxes side by side. However, when you add something that enlarges the width of each box (e.g. padding or borders), the box can break. The box-sizing property allows us to include the padding and border in the box's total width (and height), making sure that the padding stays inside of the box and that it does not break.\nYou can read more about the box-sizing property in our CSS Box Sizing Chapter.\nImages Side By Side\nThe grid of boxes can also be used to display images side by side:\nExample\nREMOVE ADS\nCreate Boxes With Equal Heights\nIn the previous example, you learned how to float boxes side by side with an equal width. However, it is not easy to create floating boxes with equal heights. A quick fix however, is to set a fixed height, like in the example below:\nBox 1\nSome content, some content, some content\nBox 2\nSome content, some content, some content\nSome content, some content, some content\nSome content, some content, some content\nExample\nHowever, this is not very flexible. It is ok if you can guarantee that the boxes will always have the same amount of content in them. But many times, the content is not the same. If you try the example above on a mobile phone, you will see that the second box's content will be displayed outside of the box. This is where CSS Flexbox comes in handy - as it can automatically stretch boxes to be as long as the longest box:\nExample\nUsing Flexbox to create flexible boxes:\nTip:  You can read more about the Flexbox Layout Module in our CSS Flexbox Chapter.\nNavigation Menu\nYou can also use float with a list of hyperlinks to create a horizontal menu:\nExample\nHome\nNews\nContact\nAbout\nAll CSS Float Properties",
      "examples": [
        "* {\nbox-sizing: border-box;\n}\n\n.box {\nfloat: left;\nwidth: 33.33%; /* three boxes (use 25% for four, and 50% for two, etc) */\npadding: 50px; /* if you want space between the images */\n}",
        ".img-container {\nfloat: left;\nwidth: 33.33%; /* three containers (use 25% for four, and 50% for two, etc) */\npadding: 5px; /* if you want space between the images */\n}",
        ".box {\nheight: 500px;\n}",
        "float",
        "box-sizing"
      ]
    },
    {
      "title": "CSS display: inline-block",
      "summary": "The CSS display: inline-block\nThe display: inline-block property combines the features of both inline and block elements.\nAn element with display: inline-block will appear on the same line as other inline or inline-block elements. In addition, you can set the width, height, margin-top, and margin-bottom properties for the element (like block elements).\nThe following example shows the different behavior of display: inline, display: inline-block and display: block:\nExample\nREMOVE ADS\nCreate a Horizontal Navigation Menu\nA common use for display: inline-block is to display list items horizontally instead of vertically. The following example creates a horizontal navigation menu:\nExample\nCreate a horizontal navigation menu:\nCSS Property",
      "examples": [
        "span.a {\ndisplay: inline; /* the default for span */\npadding: 5px;\nborder: 2px solid red;\n}\n\nspan.b {\ndisplay: inline-block;\nwidth: 100px;\nheight: 35px;\npadding: 5px;\nborder: 2px solid red;\n}\n\nspan.c {\ndisplay: block;\nwidth: 100px;\nheight: 35px;\npadding: 5px;\nborder: 2px solid red;\n}",
        ".nav {\nbackground-color: lightgray;\nlist-style-type: none;\npadding: 0;\nmargin: 0;\n}\n\n.nav li {\ndisplay: inline-block;\nfont-size: 18px;\npadding: 15px;\n}",
        "display: inline-block",
        "width",
        "height",
        "margin-top",
        "margin-bottom",
        "display: inline",
        "display: block"
      ]
    },
    {
      "title": "CSS Horizontal & Vertical Align",
      "summary": "Center elements\nhorizontally and vertically\nCSS Centering Elements\nWith CSS, you can center elements (horizontally, vertically, or both) with several methods, depending on the type of element.\nCenter Align Block Elements\nUse margin: auto;, to horizontally center a block-level element (like <div>).\nAlso specify a width for the element, to prevent it from stretching out to the edges of its container.\nNote: Center aligning has no effect on block-level elements if the width property is not set (or set to 100%).\nBelow, the <div> element is centered and has a width of 50% (and the remaining space will be split equally between the left and right margins):\nThis div element is centered.\nExample\nCenter Align Text\nTo center the text inside a block-level element, use text-align: center;.\nThis text is centered.\nExample\nTip: For more examples on how to align text, see the CSS Text chapter.\nREMOVE ADS\nCenter Align an Image\nTo center an image, set margin-left and margin-right to auto, and also turn the image into a block element:\nExample\nCenter Align with Flexbox\nWith CSS flexbox you can center elements, both horizontally and vertically, within a flex container.\nA flex container with both the justify-content and the align-items properties set to center will align the item(s) in the center (in both axis):\nExample\nCenter Align with Grid\nWith CSS grid you can center elements, both horizontally and vertically, within a grid container.\nA grid container with the place-items property set to center, will align the item(s) in the center (in both axis).\nExample\nLeft and Right Align - Using position\nAnother method for aligning elements is to use position: absolute;:\nNote: Absolute positioned elements are removed from the normal flow, and can overlap other elements.\nThis <div> element is positioned to the right, with the position: absolute property.\nExample\nLeft and Right Align - Using float\nAnother method for aligning an element to the left or right, is to use the float property:\nExample\nCenter Align with position and transform\nIf you deal with elements of unknown or dynamic dimensions, it is a common technique to use position: absolute; combined with transform: translate(); to center an element:\nI am vertically and horizontally centered.\nExample\nTip: You will learn more about the transform property in our 2D Transforms Chapter.",
      "examples": [
        ".center {\nmargin: auto;\nwidth: 50%;\nborder: 3px solid green;\npadding: 10px;\n}",
        "p {\ntext-align: center;\n}",
        "img {\ndisplay: block;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 40%;\n}",
        ".center {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\nheight: 200px;\nborder: 3px solid green;\n}",
        ".center {\ndisplay: grid;\nplace-items: center;\nheight: 200px;\nborder: 3px solid green;\n}",
        ".right {\nposition: absolute;\nright: 0px;\nwidth: 300px;\nborder: 3px solid green;\npadding: 10px;\n}",
        ".right {\nfloat: right;\nwidth: 300px;\nborder: 3px solid green;\npadding: 10px;\n}",
        ".container p {\nmargin: 0;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\n}",
        "margin: auto;",
        "width",
        "text-align: center;",
        "margin-left",
        "margin-right",
        "auto",
        "block",
        "justify-content",
        "align-items",
        "center",
        "place-items",
        "position: absolute;",
        "float",
        "transform: translate();"
      ]
    },
    {
      "title": "CSS Combinators",
      "summary": "CSS Combinators\nA combinator is something that defines the relationship between two or more selectors.\nA CSS selector can contain more than one selector. Between the selectors, we can include a combinator, to create a more specific selection.\nThere are four different combinators in CSS:\nDescendant combinator (space)\nChild combinator (>)\nNext sibling combinator (+)\nSubsequent-sibling combinator (~)\nDescendant Combinator (space)\nThe descendant combinator matches all elements that are descendants (children, grandchildren, etc.) of a specified element.\nThe following example selects all <p> elements inside <div> elements:\nExample\nChild Combinator (>)\nThe child combinator selects all elements that are direct children of a specified element.\nThe following example selects all <p> elements that are direct children of <div>:\nExample\nREMOVE ADS\nNext Sibling Combinator (+)\nThe next sibling combinator is used to select an element that is directly after a specific element.\nSibling elements must have the same parent element.\nThe following example selects the first <p> element that immediately follows a <div>, and share the same parent:\nExample\nSubsequent-sibling Combinator (~)\nThe subsequent-sibling combinator selects all elements that are next siblings of a specified element.\nThe following example selects all <p> elements that are next siblings of <div>, and share the same parent:\nExample\nCSS Combinators Reference\nFor a complete list of all CSS combinators, visit our CSS Combinators Reference.",
      "examples": [
        "div p {\nbackground-color: yellow;\n}",
        "div > p {\nbackground-color: yellow;\n}",
        "div + p {\nbackground-color: yellow;\n}",
        "div ~ p {\nbackground-color: yellow;\n}"
      ]
    },
    {
      "title": "CSS Pseudo-classes",
      "summary": "CSS Pseudo-classes\nA CSS pseudo-class is a keyword that can be added to a selector, to define a style for a special state of an element.\nSome common use for pseudo-classes:\nStyle an element when a user moves the mouse over it\nStyle visited and unvisited links differently\nStyle an element when it gets focus\nStyle valid/invalid/required/optional form elements\nStyle an element that is the first child of its parent\nSyntax\nPseudo-classes are always denoted by a single colon (:) followed by the pseudo-class name:\nHere we use the :hover pseudo-class and the :focus pseudo-class:\nMouse Over Me\nPseudo-classes Used on Links\nFor HTML links, it is common to use the following pseudo-classes:\n:link - Styles unvisited links\n:visited - Styles visited links\n:hover - Styles an link on mouse over\n:active - Styles an activated link\nExample\nDisplay links in different colors depending on state:\nNote: a:hover MUST come after a:link and a:visited in the CSS definition in order to be effective! a:active MUST come after a:hover in the CSS definition in order to be effective! Pseudo-class names are not case-sensitive.\n:hover on <div>\nHere is an example of using the :hover pseudo-class on a <div> element:\nExample\n:focus on <input>\nHere is an example of using the :focus pseudo-class to style an input field when it gets focus:\nExample\nREMOVE ADS\nPseudo-classes and HTML Classes\nPseudo-classes can easily be combined with HTML classes:\nExample\nAdd a :hover pseudo-class to the <a> element with class \"highlight\":\nSimple Tooltip Hover\nHover over a <div> element to show a <p> element (like a tooltip):\nTada! Here I am!\nExample\nThe CSS :first-child Pseudo-class\nThe :first-child pseudo-class matches a specific element that is the first child of another element.\nStyle all first child <p> elements\nIn the following example, the selector matches all <p> elements that is the first child of any element:\nExample\nStyle the first <em> element in all <p> elements\nIn the following example, the selector matches the first <em> element in all <p> elements:\nExample\nStyle all <em> elements in all first child <p> elements\nIn the following example, the selector matches all <em> elements in <p> elements that are the first child of another element:\nExample\nThe CSS :lang() Pseudo-class\nThe :lang() pseudo-class is used to select elements with a lang attribute with the specified value.\nExample\nDefine the quotation marks for <q> elements with lang=\"no\":\nCSS Pseudo-classes Reference\nFor a complete list of all CSS Pseudo-classes, visit our CSS Pseudo-classes Reference.",
      "examples": [
        "selector:pseudo-class-name {\nCSS properties\n}",
        "/* unvisited link */\na:link {\ncolor: #FF0000;\n}\n\n/* visited link */\na:visited {\ncolor: #00FF00;\n}\n\n/* mouse over link */\na:hover {\ncolor: #FF00FF;\n}\n\n/* selected link */\na:active {\ncolor: #0000FF;\n}",
        "div:hover {\nbackground-color: blue;\n}",
        "input:focus {\nbackground-color: yellow;\n}",
        "a.highlight:hover {\ncolor: #ff0000;\n}",
        "p {\ndisplay: none;\nbackground-color: yellow;\npadding: 20px;\n}\n\ndiv:hover p {\ndisplay: block;\n}",
        "p:first-child {\ncolor: blue;\n}",
        "p em:first-child {\ncolor: blue;\n}",
        "p:first-child em {\ncolor: blue;\n}",
        "<html>\n<head>\n<style>\nq:lang(no) {\nquotes: \"~\" \"~\";\n}\n</style>\n</head>\n<body>\n\n<p>Some text <q lang=\"no\">A quote in a paragraph</q> Some text.</p>\n\n</body>\n</html>",
        ":hover",
        ":focus",
        ":link",
        ":visited",
        ":active",
        "a:hover",
        "a:link",
        "a:visited",
        "a:active",
        ":first-child",
        ":lang()"
      ]
    },
    {
      "title": "CSS Pseudo-elements",
      "summary": "CSS Pseudo-Elements\nA CSS pseudo-element is a keyword that can be added to a selector, to style a specific part of an element.\nSome common use for pseudo-elements:\nStyle the first letter or first line, of an element\nInsert content before or after an element\nStyle the markers of list items\nStyle the user-selected portion of an element\nStyle the viewbox behind a dialog box\nSyntax\nPseudo-elements are denoted by a double colon (::) followed by the pseudo-element name:\nThe CSS ::first-line Pseudo-element\nThe ::first-line pseudo-element is used to add a special style to the first line of a text.\nNote: The ::first-line pseudo-element can only be applied to block-level elements.\nExample\nFormat the first line of text in all <p> elements:\nREMOVE ADS\nThe CSS ::first-letter Pseudo-element\nThe ::first-letter pseudo-element is used to add a special style to the first letter of a text.\nNote: The ::first-letter pseudo-element can only be applied to block-level elements.\nExample\nFormat the first letter of the text in all <p> elements:\nThe CSS ::before Pseudo-element\nThe ::before pseudo-element is used to insert some content before the content of a specified element.\nUse the content property to specify the content to insert.\nExample\nInsert an image before the content of each <h3> element:\nThe CSS ::after Pseudo-element\nThe ::after pseudo-element is used to insert some content after the content of a specified element.\nUse the content property to specify the content to insert.\nExample\nInsert an image after the content of each <h3> element:\nThe CSS ::marker Pseudo-element\nThe ::marker pseudo-element is used to style the list item markers.\nExample\nStyle the markers of list items:\nThe CSS ::selection Pseudo-element\nThe ::selection pseudo-element is used to style the part of a text that is selected by a user.\nExample\nStyle the user-selected text with a red color, and a yellow background:\nThe CSS ::backdrop Pseudo-element\nThe ::backdrop pseudo-element is used to style the viewbox behind a dialog box or popover element..\nExample\nStyle the viewbox behind a dialog box:\nPseudo-elements and HTML Classes\nPseudo-elements can easily be combined with HTML classes.\nExample\nDisplay the first letter of <p> elements with class=\"intro\", in red and in a larger size:\nMultiple Pseudo-elements\nSeveral pseudo-elements can also be combined.\nIn the following example, the first letter of <p> elements will be red and in an xx-large font size. The rest of the first line will be blue and in small-caps. The rest of the paragraph will be in the default font size and color:\nExample\nCSS Pseudo-elements Reference\nFor a complete list of all CSS Pseudo-elements, visit our CSS Pseuodo-elements Reference.",
      "examples": [
        "selector::pseudo-element-name {\nCSS properties\n}",
        "p::first-line {\ncolor: red;\nfont-variant: small-caps;\nfont-size: 19px;\n}",
        "p::first-letter {\ncolor: red;\nfont-size: xx-large;\n}",
        "h3::before {\ncontent: url(smiley.gif);\n}",
        "h3::after {\ncontent: url(smiley.gif);\n}",
        "::marker {\ncolor: red;\nfont-size: 23px;\n}",
        "::selection {\ncolor: red;\nbackground: yellow;\n}",
        "dialog::backdrop {\nbackground-color: lightgreen;\n}",
        "p.intro::first-letter {\ncolor: #ff0000;\nfont-size: 200%;\n}",
        "p::first-letter {\ncolor: red;\nfont-size: xx-large;\n}\n\np::first-line {\ncolor: blue;\nfont-variant: small-caps;\n}",
        "::first-line",
        "::first-letter",
        "::before",
        "content",
        "::after",
        "::marker",
        "::selection",
        "::backdrop"
      ]
    },
    {
      "title": "CSS Opacity",
      "summary": "CSS Image Opacity\nThe opacity property specifies the opacity/transparency of an element.\nThe opacity property can take a value from 0.0 - 1.0:\n0.0 - The element will be completely transparent\n0.5 - The element will be 50% transparent\n1.0 - Default. The element will be fully opaque\nopacity 0.2\nopacity 0.5\nopacity 1.0\n(default)\nExample\nOpacity and :hover\nThe opacity property is often used with :hover to change the opacity on mouse-over:\nExample\nReversed Hover Effect\nHere is an example of reversed hover effect:\nExample\nREMOVE ADS\nTransparent Boxes\nWhen using the opacity property to add transparency to the background of an element, all child elements inherit the same transparency. This can make the text inside a transparent element hard to read:\nopacity 1\nopacity 0.6\nopacity 0.3\nopacity 0.1\nExample\nTransparency using background-color\nTo NOT apply the transparency to child elements, you can use the background-color property with an RGBA value.\nRGBA color values are an extension of RGB color values with an alpha channel - which specifies the opacity for a color.\nAn RGBA color value is specified with: rgba(red, green, blue, alpha). Where the alpha parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque).\nTip: You will learn more about RGBA Colors in our CSS Colors Chapter.\nThe following example sets the opacity for the background color and not the text:\n100% opacity\n60% opacity\n30% opacity\n10% opacity\nExample\nText in Transparent Box\nThis is some text that is placed in the transparent box.\nExample\nExample explained\nCreate a <div> element (class=\"background\") with a background image, and a border.\nCreate another <div> (class=\"transbox\") inside the first <div>.\nThe <div class=\"transbox\"> have a 0.6 transparent background color, and a border.\nInside the transparent <div>, we add some text inside a <p> element.\nCSS Property",
      "examples": [
        "img {\nopacity: 0.5;\n}",
        "img {\nopacity: 0.5;\n}\n\nimg:hover {\nopacity: 1.0;\n}",
        "img:hover {\nopacity: 0.5;\n}",
        "div {\nopacity: 0.3;\n}",
        "div {\nbackground: rgba(4, 170, 109, 0.3) /* Green background with 30% opacity */\n}",
        "<html>\n<head>\n<style>\ndiv.background {\nbackground: url(klematis.jpg) repeat;\nborder: 2px solid black;\n}\n\ndiv.transbox {\nmargin: 30px;\nbackground-color: rgba(255, 255, 255, 0.6);\nborder: 1px solid black;\n}\n\ndiv.transbox p {\nmargin: 5%;\nfont-weight: bold;\ncolor: #000000;\n}\n</style>\n</head>\n<body>\n\n<div class=\"background\">\n<div class=\"transbox\">\n<p>This is some text that is placed in the transparent box.</p>\n</div>\n</div>\n\n</body>\n</html>",
        "opacity",
        ":hover",
        "background-color"
      ]
    },
    {
      "title": "CSS Navigation Bars",
      "summary": "A vertical navbar:\nHome\nNews\nContact\nAbout\nA horizontal navbar:\nHome\nNews\nContact\nAbout\nCSS Navigation Bars\nHaving an easy-to-use navigation is important for any website!\nCSS navigation bars are an important component of web design. Navigation bars helps users to easily navigate between different sections of a website.\nNavigation bars are typically built with HTML list elements ( <ul> and <li>), and then styled with CSS to get a great look.\nNavigation bars are typically located at the top or at the side of a webpage.\nNavigation Bar = List of Links\nA navigation bar needs standard HTML as a base.\nA navigation bar is basically a list of links, so using the <ul> and <li> elements makes perfect sense:\nExample\nNow let's remove the bullets and the margins and padding from the <ul> element:\nExample\nExample explained:\nSet list-style-type: none; - Removes the bullet points from list\nSet margin: 0; - Resets default browser margins\nSet padding: 0; - Resets default browser paddings\nNote: The HTML and CSS code in the example above is the base code used for both vertical and horizontal navigation bars, which you will learn more about in the next chapters.",
      "examples": [
        "<ul>\n<li><a href=\"default.asp\">Home</a></li>\n<li><a href=\"news.asp\">News</a></li>\n<li><a href=\"contact.asp\">Contact</a></li>\n<li><a href=\"about.asp\">About</a></li>\n</ul>",
        "ul {\nlist-style-type: none;\nmargin: 0;\npadding: 0;\n}",
        "list-style-type: none;",
        "margin: 0;",
        "padding: 0;"
      ]
    },
    {
      "title": "CSS Vertical Navigation Bar",
      "summary": "CSS Vertical Navigation Bar\nHome\nNews\nContact\nAbout\nIn a vertical navigation bar, the navigation links are stacked vertically (on top of each other), and is typically aligned along the left or right side of a webpage.\nThe basics of a vertical navigation bar is an unordered list (<ul>), with list items (<li>), each holding a link (<a>), as shown in the Navbar Intro page.\nCSS Vertical Navbar Example\nHere, we create a basic vertical navigation bar with a gray background color, and we also change the background color and the text color of the links when the user mouse over them:\nHome\nNews\nContact\nAbout\nExample\nExample explained:\nThe first block (ul)  is similar to the previous page. In addition we have specified a fixed width (200px) and a light gray background color\nThe next block (li a) styles <a> elements inside <li> elements\nDisplaying the links as block elements makes the whole link area clickable (not just the text), and allows us to specify width, padding, margin, height, etc. We add a link color and some padding. We also remove the underline from these <a> elements\nThe last block (li a:hover) changes the link color and background color when a user mouse over them\nREMOVE ADS\nActive State\nNow we add an \"active\" class to highlight the link corresponding to the current page to let the user know which page/section he/she is on:\nHome\nNews\nContact\nAbout\nExample\nCenter Navbar Links & Add Borders\nTo center the navbar links, add text-align: center; to <li> or <a>.\nIf you want a border around the navbar, add the border property to <ul>.\nIf you also want borders inside the navbar, add a border-bottom property to all <li> elements, except for the last one:\nHome\nNews\nContact\nAbout\nExample\nFull-height Vertical Navbar\nCreate a full-height, \"sticky\" side navigation:\nExample\nNote: This example might not work properly on mobile devices.\nResponsive Navbar\nExample\nHow to use CSS media queries to create a responsive navbar:",
      "examples": [
        "ul {\nlist-style-type: none;\nmargin: 0;\npadding: 0;\nwidth: 200px;\nbackground-color: #f1f1f1;\n}\n\nli a {\ndisplay: block;\ncolor: black;\npadding: 8px 16px;\ntext-decoration: none;\n}\n\n/* Change the link and background color on hover */\nli a:hover {\nbackground-color: #555555;\ncolor: white;\n}",
        ".active {\nbackground-color: #04AA6D;\ncolor: white;\n}",
        "ul {\nborder: 1px solid #555555;\n}\n\nli {\ntext-align: center;\nborder-bottom: 1px solid #555555;\n}\n\nli:last-child {\nborder-bottom: none;\n}",
        "ul {\nlist-style-type: none;\nmargin: 0;\npadding: 0;\nwidth: 130px;\nbackground-color: #f1f1f1;\nheight: 100%; /* Full height */\nposition: fixed; /* Make it stick, even on scroll */\noverflow: auto; /* Enable scrolling if the sidenav has too much content */\n}",
        "text-align: center;",
        "border",
        "border-bottom"
      ]
    },
    {
      "title": "CSS Horizontal Navigation Bar",
      "summary": "CSS Horizontal Navigation Bar\nHome\nNews\nContact\nAbout\nIn a horizontal navigation bar, the navigation links are stacked horizontally (next to each other), and is typically aligned on the top of a webpage.\nThe basics of a horizontal navigation bar is an unordered list (<ul>), with list items (<li>), each holding a link (<a>), as shown in the Navbar Intro page.\nIt is also common to add a <nav> element around the <ul> element, that will serve as a container for your navigation bar.\nHorizontal Navbar Using Float\nOne way of creating a horizontal navigation bar is to add the float property to the <li> elements.\nHere we create a basic horizontal navigation bar with a dark background color and change the background color of the links when the user moves the mouse over them:\nHome\nNews\nContact\nAbout\nExample\nHorizontal navbar with float:\nExample explained:\noverflow: hidden; - Prevents list items from going outside of the list\nbackground-color: #333333; - Adds a black background-color to the <ul> element\nfloat: left; - Makes <li> elements float next to each other\ndisplay: block; - Allows us to specify padding, height, width, and margins to <a>\npadding: 14px 16px; - Add some padding between each <a> element\ntext-decoration: none; - Removes underline from the links\nHorizontal Navbar Using Flex\nA more modern way of creating a horizontal navigation bar, is to use CSS flexbox.\nThe following example creates an equal-looking horizontal navbar as above, but with flexbox:\nExample\nHorizontal navbar with flex:\nThe solution here are display: flex;. This creates a flex context and by default the items are shown from left to right.\nAnd just by adding one line to the ul block: justify-content: center;, you will have a horizontally centered navbar:\nExample\nHorizontal centered navbar with flex:\nREMOVE ADS\nActive State\nHere, we add an \"active\" class to highlight the link corresponding to the current page to let the user know which page/section he/she is on:\nHome\nNews\nContact\nAbout\nExample\nGray Horizontal Navbar\nHere is an example of a gray horizontal navigation bar with a thin, gray border:\nHome\nNews\nContact\nAbout\nExample\nRight-align One Link\nYou can right-align one or more links by floating the list items to the right (float: right;):\nHome\nNews\nContact\nAbout\nExample\nBorder Dividers\nAdd the border-right property to <li> elements (to all <li>s, except the last), to create link dividers:\nHome\nNews\nContact\nAbout\nExample\nFixed Navigation Bar\nYou can make the navigation bar to stay fixed at the top or at the bottom of a page, by using the position property along with top or bottom:\nFixed Top\nFixed Bottom\nNote: Fixed position might not work properly on mobile devices.\nSticky Navigation Bar\nAdd position: sticky; to <ul> to create a sticky navbar.\nAn element with position: sticky; toggles between a relative and fixed position, depending on the scroll position.\nA sticky element is positioned relative until a certain scroll position is reached - then it \"sticks\" in that place (like position: fixed).\nExample\nNote: You must specify at least one of the top, right, bottom or left properties, for sticky positioning to work.\nDropdown Menu in Navigation Bar\nHere we create a dropdown menu for one of the menu links:\nExample\nResponsive Navbar\nExample\nHow to use CSS media queries to create responsive top navigation:\nEver heard about W3Schools Spaces? Here you can create your website from scratch or use a template, and host it for free.\n* no credit card required",
      "examples": [
        "ul {\nlist-style-type: none;\nmargin: 0;\npadding: 0;\noverflow: hidden;\nbackground-color: #333333;\n}\n\nul li {\nfloat: left;\n}\n\nul li a {\ndisplay: block;\ncolor: white;\ntext-align: center;\npadding: 14px 16px;\ntext-decoration: none;\n}\n\nul li a:hover {\nbackground-color: #111111;\n}",
        "ul {\nlist-style-type: none;\nmargin: 0;\npadding: 0;\nbackground-color: #333333;\ndisplay: flex;\n}\n\nul li a {\ndisplay: block;\ncolor: white;\npadding: 14px 16px;\ntext-decoration: none;\n}\n\nul li a:hover {\nbackground-color: #111111;\n}",
        "ul {\nlist-style-type: none;\nmargin: 0;\npadding: 0;\nbackground-color: #333333;\ndisplay: flex;\njustify-content: center;\n}",
        "ul li a.active {\nbackground-color: #04AA6D;\n}",
        "ul {\nlist-style-type: none;\nmargin: 0;\npadding: 0;\ndisplay: flex;\nborder: 1px solid #e7e7e7;\nbackground-color: #f3f3f3;\n}",
        "<ul>\n<li><a href=\"#home\" class=\"active\">Home</a></li>\n<li><a href=\"#news\">News</a></li>\n<li><a href=\"#contact\">Contact</a></li>\n<li style=\"float:right\"><a href=\"#about\">About</a></li>\n</ul>",
        "/* Add a lightgray right border to all list items, except the last */\nul li {\nfloat: left;\nborder-right: 1px solid #bbbbbb;\n}\n\nul li:last-child {\nborder-right: none;\n}",
        "ul {\nposition: fixed;\ntop: 0;\nwidth: 100%;\n}",
        "ul {\nposition: fixed;\nbottom: 0;\nwidth: 100%;\n}",
        "ul {\nposition: sticky;\ntop: 0;\n}",
        "float",
        "overflow: hidden;",
        "background-color: #333333;",
        "float: left;",
        "display: block;",
        "padding: 14px 16px;",
        "text-decoration: none;",
        "display: flex;",
        "justify-content: center;",
        "float: right;",
        "border-right",
        "position",
        "top",
        "bottom",
        "position: sticky;",
        "relative",
        "fixed",
        "right",
        "left"
      ]
    },
    {
      "title": "CSS Dropdowns",
      "summary": "CSS Dropdowns\nCSS dropdowns are used to display a list of options or content when a user clicks or hover over an element, like a button or a navigation link.\nA CSS dropdown consists of a trigger element (like <div>, <button>, <p>, <a>, etc.).\nWhen the trigger element is clicked or hovered over, the dropdown content will be displayed.\nThe dropdown content is a container element (e.g. <div>) that holds the hidden content (can be text, links, images, etc.).\nMouse over the three CSS dropdown examples below:\nHello World!\nCSS Dropdown Box with Text\nHere, we create a dropdown box with some text, that appears when the user mouses over a <div> element.\nExample\nExample Explained\nThe .dropdown class uses position:relative, which is needed when we want the dropdown content to be placed right below the trigger element (the dropdown content will use position:absolute).\nThe .dropdown-content class holds the dropdown content. It is hidden by default, and will be displayed on hover.\nThe min-width property is set to 130px. Feel free to change this! If you want the width of the dropdown content to be as wide as the trigger element, set width to 100% and overflow:auto to enable scroll on small screens.\nInstead of using a border, we use the box-shadow property to make the dropdown content look like a \"card\".\nThe :hover selector is used to show the dropdown content when the user mouses over the <div class=\"dropdown\"> element.\nREMOVE ADS\nCSS Dropdown Menu\nCreate a dropdown menu that allows the user to choose an option from a list:\nThis example is similar to the previous one, except that we add a button and links inside the dropdown box and style them to fit the dropdown button:\nExample\nCSS Right-aligned Dropdown\nIf you want the dropdown menu to go from right to left, instead of left to right, add right: 0;\nExample\nCSS Dropdown Image\nHow to add an image and other content inside the dropdown box.\nExample\nHover over the image:\nCSS Dropdown Navbar\nHow to add a dropdown menu inside a navigation bar.\nExample",
      "examples": [
        "<style>\n.dropdown {\nposition: relative;\n}\n\n.dropdown-content {\ndisplay: none;\nposition: absolute;\nbackground-color: #f9f9f9;\nmin-width: 130px;\nbox-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\npadding: 12px 16px;\n}\n\n.dropdown:hover .dropdown-content {\ndisplay: block;\n}\n</style>\n\n<div class=\"dropdown\">Mouse over me!\n<div class=\"dropdown-content\">Hello World!</div>\n</div>",
        "<style>\n.dropdown {\nposition: relative;\n}\n\n/* Style the dropdown button */\n.dropbtn {\nbackground-color: #4CAF50;\ncolor: white;\npadding: 16px;\nfont-size: 16px;\nborder: none;\ncursor: pointer;\n}\n\n/* Dropdown content */\n.dropdown-content {\ndisplay: none;\nposition: absolute;\nbackground-color: #f9f9f9;\nmin-width: 200px;\nbox-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\n}\n\n/* Links inside dropdown content */\n.dropdown-content a {\ncolor: black;\npadding: 12px 16px;\ntext-decoration: none;\ndisplay: block;\n}\n\n/* Change color of dropdown links on hover */\n.dropdown-content a:hover {\nbackground-color: #f1f1f1\n}\n\n/* Show the dropdown content on hover */\n.dropdown:hover .dropdown-content {\ndisplay: block;\n}\n\n/* Change background color of dropdown button on hover */\n.dropdown:hover .dropbtn {\nbackground-color: #3e8e41;\n}\n</style>\n\n<div class=\"dropdown\">\n<button class=\"dropbtn\">Dropdown Menu</button>\n<div class=\"dropdown-content\">\n<a href=\"#\">Link 1</a>\n<a href=\"#\">Link 2</a>\n<a href=\"#\">Link 3</a>\n</div>\n</div>",
        ".dropdown-content {\nright: 0;\n}",
        "position:relative",
        "position:absolute",
        "min-width",
        "width",
        "overflow:auto",
        "box-shadow",
        ":hover",
        "right: 0;"
      ]
    },
    {
      "title": "CSS Image Gallery",
      "summary": "CSS Image Gallery\nA CSS image gallery is a collection of images that is displayed in an organized, and often responsive way, on a web page.\nHere we use CSS to create an image gallery:\nThe HTML structure for an image gallery is:\nA container element to wrap the entire gallery (like a <div> with class=\"gallery\").\nAnother container element for each image (like a <div> with class=\"gallery-item\"), that contains the <img> tag and possibly a description.\nHere is the HTML and CSS code:\nExample\nTip: We have used display: flex; for the image gallery above. This layout module is effective for arranging images in rows or columns. You will learn more about CSS Flexbox later in our CSS Tutorial.\nCSS Responsive Image Gallery\nHere we use CSS media queries to re-arrange the images on different screen sizes:\nIf screen is larger than 700px wide - show four images side by side\nIf screen is smaller than 700px - show two images side by side\nIf screens is smaller than 500px - stack the images vertically (width: 100%)\nTip: You will learn more about media queries later in our CSS Tutorial.\nExample",
      "examples": [
        "<html>\n<head>\n<style>\ndiv.gallery {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: flex-start;\n}\n\ndiv.gallery-item {\nmargin: 5px;\nborder: 1px solid #ccc;\nwidth: 180px;\n}\n\ndiv.gallery-item:hover {\nborder: 1px solid #777;\n}\n\ndiv.gallery-item img {\nwidth: 100%;\nheight: auto;\n}\n\ndiv.gallery-item div.desc {\npadding: 15px;\ntext-align: center;\n}\n</style>\n</head>\n<body>\n\n<div class=\"gallery\">\n\n<div class=\"gallery-item\">\n<a target=\"_blank\" href=\"img_5terre.jpg\">\n<img src=\"img_5terre.jpg\" alt=\"Cinque Terre\" width=\"600\" height=\"400\">\n</a>\n<div class=\"desc\">Cinque Terre</div>\n</div>\n\n<div class=\"gallery-item\">\n<a target=\"_blank\" href=\"img_forest.jpg\">\n<img src=\"img_forest.jpg\" alt=\"Forest\" width=\"600\" height=\"400\">\n</a>\n<div class=\"desc\">Green Forest</div>\n</div>\n\n<div class=\"gallery-item\">\n<a target=\"_blank\" href=\"img_lights.jpg\">\n<img src=\"img_lights.jpg\" alt=\"Northern Lights\" width=\"600\" height=\"400\">\n</a>\n<div class=\"desc\">Northern Lights</div>\n</div>\n\n<div class=\"gallery-item\">\n<a target=\"_blank\" href=\"img_mountains.jpg\">\n<img src=\"img_mountains.jpg\" alt=\"Mountains\" width=\"600\" height=\"400\">\n</a>\n<div class=\"desc\">Mountains</div>\n</div>\n\n</div>\n\n</body>\n</html>",
        "display: flex;"
      ]
    },
    {
      "title": "CSS Image Sprites",
      "summary": "CSS Image Sprites\nAn image sprite is a collection of various small images put into one larger image file, called a \"sprite image\".\nA sprite image is typically arranged in a grid-like way, like this:\nA web page with multiple images takes a longer time to load, and generates multiple server requests.\nSo, instead of downloading each image separately, the browser downloads the single sprite image file, which will reduce the number of server requests and reduce bandwidth usage.\nCSS Image Sprites Example\nThe CSS key properties used for image sprites are:\nbackground-image\nbackground-position\nHere, the CSS code specifies which part of the sprite image (\"img_navsprites.gif\") to show for the different navigation items (home, next, and previous):\nExample\nwidth, height - Defines the width and height of each image-parts\nbackground-image: url(img_navsprites.gif); - Defines the url of the image sprite\nbackground-position - Shifts the background image within each element, to display only the desired portion of the sprite image\n<img id=\"home\" src=\"img_trans.gif\"> - Each image just start with a small transparent image because the src attribute cannot be empty (the displayed image will be the background image we specify in CSS)\nImage Sprites in a Navigation List\nHere, we use the sprite image (\"img_navsprites.gif\") inside a navigation list. We will use an HTML list (<ul> and <li>) for the navigation list:\nExample\n#navlist {position:relative;} - position is set to relative to allow absolute positioning inside it\n#navlist li - set margin and padding to 0, remove bullets, and all <li> are absolute positioned\n#navlist li, #navlist a - set the height of all images to 44px and display as block\nNow position and style each navigation item:\n#home {left:0px;width:46px;} - Positioned all the way to the left, and the width of the image is 46px\n#home {background:url(img_navsprites.gif) 0 0;} - Defines the background image and its position (left 0px, top 0px)\n#prev {left:60px;} - Positioned 60px to the right (#home width 46px + some extra space between items)\n#prev {background:url('img_navsprites.gif') -47px 0;} - Defines the background image 47px to the right (#home width 46px + 1px line divider)\n#next {left:120px;} - Positioned 120px to the right (start of #prev is 60px + #prev width 43px + extra space)\n#next {background:url('img_navsprites.gif') -91px 0;} - Defines the background image 91px to the right (#home width 46px + 1px line divider + #prev width 43px + 1px line divider)\nREMOVE ADS\nImage Sprites - Hover Effect\nNow we want to add a hover effect to our navigation list.\nOur new image (\"img_navsprites_hover.gif\") contains three navigation images and three images to use for hover effects:\nBecause this is one single image, and not six separate files, there will be no loading delay when a user hovers over the image.\nWe only add three lines of code to add the hover effect:\nExample\n#home a:hover {background: url('img_navsprites_hover.gif') 0 -45px;} - For all three hover images we specify the same background position, only 45px further down",
      "examples": [
        "<html>\n<head>\n<style>\n#home {\nwidth: 46px;\nheight: 44px;\nbackground-image: url(img_navsprites.gif);\nbackground-position: 0 0; /* Top-left corner of the sprite */\n}\n\n#prev {\nwidth: 43px;\nheight: 44px;\nbackground-image: url('img_navsprites.gif');\nbackground-position: -47px 0; /* 47px to the left of the sprite's top-left */\n}\n\n#next {\nwidth: 43px;\nheight: 44px;\nbackground-image: url('img_navsprites.gif');\nbackground-position: -91px 0; /* 91px to the left of the sprite's top-left */\n}\n</style>\n</head>\n<body>\n\n<img id=\"home\" src=\"img_trans.gif\" width=\"1\" height=\"1\">\n<img id=\"prev\" src=\"img_trans.gif\" width=\"1\" height=\"1\">\n<img id=\"next\" src=\"img_trans.gif\" width=\"1\" height=\"1\">\n\n</body>\n</html>",
        "#navlist {\nposition: relative;\n}\n\n#navlist li {\nmargin: 0;\npadding: 0;\nlist-style: none;\nposition: absolute;\ntop: 0;\n}\n\n#navlist li, #navlist a {\nheight: 44px;\ndisplay: block;\n}\n\n#home {\nleft: 0px;\nwidth: 46px;\nbackground: url('img_navsprites.gif') 0 0;\n}\n\n#prev {\nleft: 60px;\nwidth: 43px;\nbackground: url('img_navsprites.gif') -47px 0;\n}\n\n#next {\nleft: 120px;\nwidth: 43px;\nbackground: url('img_navsprites.gif') -91px 0;\n}",
        "#home a:hover {\nbackground: url('img_navsprites_hover.gif') 0 -45px;\n}\n\n#prev a:hover {\nbackground: url('img_navsprites_hover.gif') -47px -45px;\n}\n\n#next a:hover {\nbackground: url('img_navsprites_hover.gif') -91px -45px;\n}",
        "background-image",
        "background-position",
        "width",
        "height",
        "background-image: url(img_navsprites.gif);",
        "<img id=\"home\" src=\"img_trans.gif\">",
        "#navlist {position:relative;}",
        "#navlist li",
        "#navlist li, #navlist a",
        "#home {left:0px;width:46px;}",
        "#home {background:url(img_navsprites.gif) 0 0;}",
        "#prev {left:60px;}",
        "#prev {background:url('img_navsprites.gif') -47px 0;}",
        "#next {left:120px;}",
        "#next {background:url('img_navsprites.gif') -91px 0;}",
        "#home a:hover {background: url('img_navsprites_hover.gif') 0 -45px;}"
      ]
    },
    {
      "title": "CSS Attribute Selectors",
      "summary": "CSS Attribute Selectors\nCSS attribute selectors are used to select and style HTML elements with a specific attribute or attribute value, or both.\nThe different types of attribute selectors are described below.\nCSS [attribute] Selector\nThe [attribute] selector is used to select elements with a specific attribute.\nThe following example selects all <a> elements with a target attribute:\nExample\nCSS [attribute=\"value\"] Selector\nThe [attribute=\"value\"] selector is used to select elements with a specific attribute with an exact value.\nThe following example selects all <a> elements with a target=\"_blank\" attribute:\nExample\nCSS [attribute~=\"value\"] Selector\nThe [attribute~=\"value\"] selector is used to select elements with an attribute value containing a specific word.\nThe following example selects all elements with a title attribute that contains a space-separated list of words, one of which is \"flower\":\nExample\nThe example above will match elements with title=\"flower\", title=\"summer flower\", and title=\"flower new\", but not title=\"my-flower\" or title=\"flowers\".\nREMOVE ADS\nCSS [attribute|=\"value\"] Selector\nThe [attribute|=\"value\"] selector is used to select elements with the specific attribute, whose value can be exactly the specific value, or start with the specific value followed by a hyphen (-).\nNote: The value has to be a whole word, either alone, like class=\"top\", or followed by a hyphen ( - ), like class=\"top-text\".\nExample\nCSS [attribute^=\"value\"] Selector\nThe [attribute^=\"value\"] selector is used to select elements with the specific attribute, whose value starts with a specific value.\nThe following example selects all elements with a class attribute value that starts with \"top\":\nExample\nCSS [attribute$=\"value\"] Selector\nThe [attribute$=\"value\"] selector is used to select elements whose attribute value ends with a specific value.\nThe following example selects all elements with a class attribute value that ends with \"test\":\nExample\nCSS [attribute*=\"value\"] Selector\nThe [attribute*=\"value\"] selector is used to select elements whose attribute value contains a specific value.\nThe following example selects all elements with a class attribute value that contains \"te\":\nExample\nStyle Form Elements With Attribute Selectors\nThe CSS attribute selectors can be useful for styling form elements, based on input type:\nExample\nTip: Visit our CSS Forms Tutorial for more examples on how to style forms with CSS.\nAll CSS Attribute Selectors",
      "examples": [
        "a[target] {\nbackground-color: yellow;\n}",
        "a[target=\"_blank\"] {\nbackground-color: yellow;\n}",
        "[title~=\"flower\"] {\nborder: 5px solid yellow;\n}",
        "[class|=\"top\"] {\nbackground: yellow;\n}",
        "[class^=\"top\"] {\nbackground: yellow;\n}",
        "[class$=\"test\"] {\nbackground: yellow;\n}",
        "[class*=\"te\"] {\nbackground: yellow;\n}",
        "input[type=\"text\"] {\nwidth: 150px;\npadding: 6px;\nmargin-bottom: 10px;\nbackground-color: pink;\n}\n\ninput[type=\"button\"] {\nwidth: 100px;\npadding: 6px;\nbackground-color: lightgreen;\n}",
        "[attribute]",
        "[attribute=\"value\"]",
        "[attribute~=\"value\"]",
        "[attribute|=\"value\"]",
        "[attribute^=\"value\"]",
        "[attribute$=\"value\"]",
        "[attribute*=\"value\"]"
      ]
    },
    {
      "title": "CSS Forms",
      "summary": "CSS Styling Forms\nCSS is used to style HTML forms. The look of an HTML form can be greatly improved with CSS:\nStyling Form Input Fields\nWith CSS, you can style most of the different input types, like text fields, password fields, checkboxes, radio buttons, and file inputs. You can also style input labels and form buttons.\nSome commonly used CSS properties for styling input fields, are:\nwidth\npadding\nmargin\nborder\nborder-radius\nbackground-color\ncolor\nfont-size\nStyle Input Width\nThe width property is used to set the width of an input field.\nTip: The default width of an HTML input text field, is 20 characters.\nHere we set the width to 100%:\nExample\nThe example above applies to all <input> elements. If you only want to style a specific input type, you can use attribute selectors:\ninput[type=text] - will only select text fields\ninput[type=password] - will only select password fields\ninput[type=number] - will only select number fields\netc..\nREMOVE ADS\nStyle Input Padding\nThe padding property is used to add some space inside the text field.\nTip: When you have several input fields after each other, you might also want to add some margin, to add more space around them:\nExample\nNote that we have set the box-sizing property to border-box. This makes sure that the padding and eventually borders are included in the total width and height of the elements.\nRead more about the box-sizing property in our CSS Box Sizing chapter.\nStyle Input Border\nThe border property is used to change the border size and color, and the border-radius property can be used to add rounded corners:\nExample\nIf you only want a bottom border, use the border-bottom property:\nExample\nStyle Input Background Color and Color\nThe background-color property is used to add a background color to the input, and the color property is used to change the text color:\nExample\nStyle Input with Focus\nBy default, some browsers will add a blue outline around the input when it gets focus (clicked on). You can remove this behavior by adding outline: none; to the input.\nUse the :focus selector to do something with the input field when it gets focus:\nExample\nExample\nStyle Input with icon/image\nIf you want an icon inside the input, use the background-image property and position it with the background-position property. Also notice that we add a large left padding to reserve the space of the icon:\nExample\nAnimated Search Input\nIn this example we use the CSS transition property to animate the width of the search input when it gets focus. You will learn more about the transition property later, in our CSS Transitions chapter.\nExample\nStyle Textarea\nBy default, a <textarea> can be resized with a \"grabber\" in the bottom right corner. To remove the grabber, set the resize property to none:\nExample\nStyle a Dropdown Menu\nExample\nStyle Form Buttons\nForm buttons of type \"button\", \"submit\" and \"reset\" can also be styled with CSS:\nExample\nTip: For more information about how to style buttons, read our CSS Buttons Tutorial.\nCSS Responsive Form\nThe following example uses CSS media queries to create a responsive form. You will learn more about media queries in a later chapter.\nWhen the screen is less than 600px wide, we make the labels and input fields stack on top of each other, instead of next to each other.\nResize the screen to see the form layout change!",
      "examples": [
        "input {\nwidth: 100%;\n}",
        "input[type=text] {\nwidth: 100%;\npadding: 12px;\nmargin: 10px 0;\nbox-sizing: border-box;\n}",
        "input[type=text] {\nborder: 2px solid red;\nborder-radius: 8px;\n}",
        "input[type=text] {\nborder: none;\nborder-bottom: 1px solid red;\n}",
        "input[type=text] {\nbackground-color: #3CBC8D;\ncolor: white;\n}",
        "input[type=text]:focus {\nbackground-color: lightblue;\n}",
        "input[type=text]:focus {\nborder: 3px solid #555;\n}",
        "input[type=text] {\nbackground-color: white;\nbackground-image: url('searchicon.png');\nbackground-position: 10px 10px;\nbackground-repeat: no-repeat;\npadding-left: 40px;\n}",
        "input[type=text] {\ntransition: width 0.4s ease-in-out;\n}\n\ninput[type=text]:focus {\nwidth: 100%;\n}",
        "textarea {\nwidth: 100%;\nheight: 150px;\npadding: 12px 20px;\nbox-sizing: border-box;\nborder: 2px solid #ccc;\nborder-radius: 4px;\nbackground-color: #f8f8f8;\nresize: none;\n}",
        "select {\nwidth: 100%;\npadding: 16px 20px;\nborder: none;\nborder-radius: 4px;\nbackground-color: #f1f1f1;\n}",
        "input[type=button], input[type=submit], input[type=reset] {\nbackground-color: #04AA6D;\nborder: none;\ncolor: white;\npadding: 16px 32px;\ntext-decoration: none;\nmargin: 4px 2px;\ncursor: pointer;\n}\n\n/* Tip: use width: 100% for full-width buttons */",
        "width",
        "padding",
        "margin",
        "border",
        "border-radius",
        "background-color",
        "color",
        "font-size",
        "input[type=text]",
        "input[type=password]",
        "input[type=number]",
        "box-sizing",
        "border-box",
        "border-bottom",
        "outline: none;",
        ":focus",
        "background-image",
        "background-position",
        "transition",
        "resize",
        "none"
      ]
    },
    {
      "title": "CSS Counters",
      "summary": "CSS Counters\nWith CSS counters, you can create dynamic numbering of elements (like headings, sections, or list items) without using JavaScript.\nCSS counters are \"variables\" maintained by CSS, and their values can be incremented (or decremented) by CSS rules.\nPizza\nHamburger\nHotdogs\nCSS Automatic Numbering With Counters\nCSS counters are like \"variables\". The variable values can be incremented (or decremented) by CSS rules.\nTo work with CSS counters we will use the following properties:\ncounter-reset - Creates or resets a counter\ncounter-increment - Increments or decrements a counter\ncontent - Inserts generated content (used inside ::before and ::after, to insert the generated content)\ncounter() and counters() functions - Adds the value of a counter to an element\nTo use a CSS counter, it must first be created with the counter-reset property.\nCSS Increase and Decrease Counter\nThe following example creates a counter for the page (in the body selector), then it increments the counter value by 1 for each <h2> element and adds the text \"Section + countervalue:\" to the beginning of each <h2> element:\nExample\nThe counter-increment property has a second parameter. The default value of this is 1 (which increments the counter by one). To decrease the counter value, you can set it to -1.\nThe following example is the same as above, but here we decrement the counter value for each <h2> element and adds the text \"Section + countervalue:\" to the beginning of each <h2> element:\nExample\nThe following example is the same as above, but here we increment the counter value by 2 for each <h2> element and adds the text \"Section + countervalue:\" to the beginning of each <h2> element:\nExample\nREMOVE ADS\nCSS Using Two Counters\nThe following example creates one counter for the page (named \"section\") and one counter for each <h1> element (named \"subsection\"). The \"section\" counter will be counted for each <h1> element with \"Section +  sectioncounter>.\", and the \"subsection\" counter will be counted for each <h2> element with \"sectioncounter.subsectioncounter\":\nExample\nThe CSS counters() Function\nThe counters() function returns the current values of the named and nested counters, as a string.\nHere we use the counters() function to insert a string between different levels of nested counters:\nExample\nCSS Counter Properties",
      "examples": [
        "body {\ncounter-reset: section;\n}\n\nh2::before {\ncounter-increment: section;\ncontent: \"Section \" counter(section) \": \";\n}",
        "body {\ncounter-reset: section;\n}\n\nh2::before {\ncounter-increment: section -1;\ncontent: \"Section \" counter(section) \": \";\n}",
        "body {\ncounter-reset: section;\n}\n\nh2::before {\ncounter-increment: section 2;\ncontent: \"Section \" counter(section) \": \";\n}",
        "body {\ncounter-reset: section;\n}\n\nh1 {\ncounter-reset: subsection;\n}\n\nh1::before {\ncounter-increment: section;\ncontent: \"Section \" counter(section) \". \";\n}\n\nh2::before {\ncounter-increment: subsection;\ncontent: counter(section) \".\" counter(subsection) \" \";\n}",
        "ol {\ncounter-reset: section;\nlist-style-type: none;\n}\n\nli::before {\ncounter-increment: section;\ncontent: counters(section,\".\") \" \";\n}",
        "counter-reset",
        "counter-increment",
        "content",
        "::before",
        "::after",
        "counter()",
        "counters()"
      ]
    },
    {
      "title": "CSS Units",
      "summary": "CSS Units\nCSS has several different units for expressing a length.\nMany CSS properties take \"length\" values, such as width, margin, padding, font-size, etc.\nThe length value is a number followed by a length unit, such as px, em, rem, etc.\nCSS has two types of length units:\nAbsolute units\nRelative units\nCSS Absolute Units\nAbsolute units are fixed, and the length expressed in any of these will appear exactly that size.\nAbsolute units do not change when the screen size change, and are not recommended for websites. However, they can be used if the output medium is known, such as for print layout.\nThe most used absolute unit is px (pixels).\nSet Font Size With Px\nSetting the text size with px (pixels) gives you full control over the text size.\nIf you use pixels, the web page may not scale very well on different screen sizes and the users cannot adjust the text size in their browser settings. However, users can still use the zoom tool to resize the entire page.\nExample\nSet font sizes with px:\nTry it Yourself »\nNote: A whitespace cannot appear between the number and the unit. However, if the value is 0, the unit can be omitted.\nREMOVE ADS\nCSS Relative Units\nRelative units specify a length relative to another length (like parent element, root element, or viewport).\nRelative length units scale better between different screen sizes.\n* Viewport = the browser window size. 1vw = 1% of the current width of the browser's viewport. So, if the viewport is 500px wide, 1vw is 5px.\nTip: The em and rem units are perfect for creating scalable and responsive websites!\nSet Font Size With Em\nThe em unit is relative to the font size of the parent element. So, if the parent element has a font size of 16px, then 2.5em would result in 40px.\nIn the following example, the text size in em is the same as the previous example in pixels. However, the em unit allows the user to adjust the text size in the browser settings.\nExample\nSet font sizes with em:\nSet Font Size With Rem\nThe rem unit is relative to the font size of the root HTML element (<html>).\nUnlike em, which is relative to the font-size of its parent element, rem always refers to the font-size of the <html> element, regardless of its position in the document tree. This makes rem very useful for creating scalable and responsive designs. By changing the font-size of the <html> element, all elements sized with rem units will scale proportionally throughout the entire page.\nThe default font-size of the <html> element in most browsers, is 16px. So, by default, 1rem equals 16px unless explicitly overridden in the CSS.\nExample\nSet font sizes with rem:",
      "examples": [
        "h1 {\nfont-size: 40px;\n}\n\nh2 {\nfont-size: 30px;\n}\n\np {\nfont-size: 16px;\n}",
        "body {\nfont-size: 16px; /* Base font size */\n}\n\nh1 {\nfont-size: 2.5em; /* 2.5 * 16 = 40px */\n}\n\nh2 {\nfont-size: 1.875em; /* 1.875 * 16 = 30px */\n}\n\np {\nfont-size: 1em; /* 1 * 16 = 16px */\n}",
        "html {\nfont-size: 16px; /* Set the root font size */\n}\n\nh1 {\nfont-size: 2.5rem; /* 2.5 * 16 = 40px */\n}\n\nh2 {\nfont-size: 1.875rem; /* 1.875 * 16 = 30px */\n}\n\np {\nfont-size: 1rem; /* 1 * 16 = 16px */\n}",
        "width",
        "margin",
        "padding",
        "font-size",
        "px",
        "em",
        "rem",
        "0"
      ]
    },
    {
      "title": "CSS Specificity",
      "summary": "CSS Specificity\nCSS specificity is an algorithm that determines which style declaration is ultimately applied to an element.\nIf two or more CSS rules point to the same element, the declaration with the highest specificity will \"win\", and that style will be applied to the HTML element.\nLook at the following examples:\nExample\nHere, we have specified a red color for <p> elements. Result: The text will be red:\nTry it Yourself »\nNow, look at next example:\nExample\nHere, we have added a class selector (named \"test\"), and specified a green color for this class. Result: The text will be green, because the class selector has higher specificity:\nTry it Yourself »\nNow, look at next example:\nExample\nHere, we have added the id selector (named \"demo\"). Result: The text will be blue, because the id selector has higher specificity:\nTry it Yourself »\nNow, look at next example:\nExample\nHere, we have added an inline style for the <p> element. Result: The text will be pink, because the inline style has the highest specificity:\nTry it Yourself »\nCSS Specificity Hierarchy\nEach type of CSS selector has a position in the specificity hierarchy, and the selector types carry different \"weights\".\nThe declaration with the highest specificity/weight value will be applied to the element.\nExample\nThe specificity hierarchy and weight:\nTry it Yourself »\nREMOVE ADS\nMore Specificity Examples\nEqual specificity: the latest rule wins\nIf the same rule is written twice in the external style sheet, the latest rule wins:\nExample\nTry it Yourself »\nID selectors beats attribute selectors\nLook at the following code lines - Here, the first rule has higher specificity than the second, and will therefore be applied:\nExample\nTry it Yourself »\nA class selector beats element selectors\nA class selector such as .intro beats h1, p, div, etc:\nExample\nTry it Yourself »\nThe universal selector (*)\nThe universal selector (*) has no specificity weight value:\nExample\nTry it Yourself »\nInline style sheet are more specific than external style sheet\nThe embedded style sheet is closer to the element to be styled. So in the following situation the last rule will be applied:\nExample",
      "examples": [
        "<html>\n<head>\n<style>\np {color: red;}\n</style>\n</head>\n<body>\n\n<p>Hello World!</p>\n\n</body>\n</html>",
        "<html>\n<head>\n<style>\n.test {color: green;}\np {color: red;}\n</style>\n</head>\n<body>\n\n<p class=\"test\">Hello World!</p>\n\n</body>\n</html>",
        "<html>\n<head>\n<style>\n#demo {color: blue;}\n.test {color: green;}\np {color: red;}\n</style>\n</head>\n<body>\n\n<p id=\"demo\" class=\"test\">Hello World!</p>\n\n</body>\n</html>",
        "<html>\n<head>\n<style>\n#demo {color: blue;}\n.test {color: green;}\np {color: red;}\n</style>\n</head>\n<body>\n\n<p id=\"demo\" class=\"test\" style=\"color: pink;\">Hello World!</p>\n\n</body>\n</html>",
        "<html>\n<head>\n<style>\n#demo {color: blue;} /* weight: 1-0-0 */\np#demo {color: orange;} /* weight: 1-0-1 WINS! */\n.test {color: green;} /* weight: 0-1-0 */\np.test {color: green;} /* weight: 0-1-1 */\np {color: red;} /* weight: 0-0-1 */\n</style>\n</head>\n<body>\n\n<p id=\"demo\" class=\"test\">Hello World!</p>\n\n</body>\n</html>",
        "h1 {background-color: yellow;}\nh1 {background-color: red;}",
        "#myDiv {background-color: yellow;}\ndiv[id=myDiv] {background-color: blue;}",
        ".intro {background-color: yellow;}\nh1 {background-color: red;}",
        "* {background-color: yellow;}\nh1 {background-color: red;}",
        "/*From external CSS file:*/\n#content h1 {background-color: red;}\n\n/*In HTML file:*/\n<style>\n#content h1 {background-color: yellow;}\n</style>"
      ]
    },
    {
      "title": "CSS The !important Rule",
      "summary": "CSS !important Rule\nThe !important rule is used to give the value of a specific property the highest priority.\nThe !important rule will override ALL previous styling rules for that specific property on that element!\nThe !important keyword is added to the end of a CSS declaration, before the semicolon.\nSyntax\nCSS !important Rule Example\nIn the following example, all three paragraphs will get a yellow background color, even though the inline style, id selector, and the class selector have a higher specificity. The !important rule overrides ALL styling rules for that specific property on that element!\nExample\nUsing the !important rule:\nTry it Yourself »\nREMOVE ADS\nUse !important Sparingly\nThe only way to override an !important rule is to include another !important rule on a declaration with the same (or higher) specificity in the source code - and here the problem starts!\nThe CSS code will be confusing and the debugging will be hard! Especially if you have a large style sheet!\nIn the following example, it is not very clear which color is considered most important:\nExample\nTry it Yourself »\nA Few Fair Uses of !important\nThe !important rule can be useful in some cases, like:\n1. To override a style that cannot be overridden in any other way. This could be if you are working in a Content Management System (CMS) and cannot edit the CSS code. Then you can set some custom styles to override some of the CMS styles.\n2. To respect user preferences. Some users have motion sensitivity and prefer websites with less animation. CSS has a @media feature called prefers-reduced-motion that lets you check if a user has asked to reduce motion, such as animations or transitions. You can use !important to turn off or tone down animations and transitions for the users who has these settings:\nExample\nYou will learn more about media queries in a later chapter.\n3. To create a highly specific, unchangeable style for a specific element. Assume we want a special look for all link buttons on a page:\nExample\nStyle link buttons with a gray background color, white text, and some padding and border:\nTry it Yourself »\nNow, if we put a link button inside another element with higher specificity, the properties might get in conflict. Here is an example of this:\nExample\nTry it Yourself »\nTo \"force\" all buttons to have the same look, no matter what, we can add the !important rule to the properties of the button, like this:\nExample\nTry it Yourself »",
      "examples": [
        "selector {\nproperty: value !important;\n}",
        "<html>\n<head>\n<style>\np {\nbackground-color: yellow !important;\n}\n\n#myid {\nbackground-color: blue;\n}\n\n.myclass {\nbackground-color: gray;\n}\n\n</style>\n</head>\n<body>\n\n<p style=\"background-color:orange;\">This is a paragraph.</p>\n<p class=\"myclass\">This is a paragraph.</p>\n<p id=\"myid\">This is a paragraph.</p>\n\n</body>\n</html>",
        "p {\nbackground-color: red !important;\n}\n\n#myid {\nbackground-color: blue !important;\n}\n\n.myclass {\nbackground-color: gray !important;\n}",
        "@media (prefers-reduced-motion: reduce) {\n* {\nanimation: none !important;\ntransition: none !important;\n}\n}",
        "a.button {\nbackground-color: #8c8c8c;\ncolor: white;\npadding: 5px;\nborder: 1px solid black;\ntext-decoration: none;\n}",
        "a.button {\nbackground-color: #8c8c8c;\ncolor: white;\npadding: 5px;\nborder: 1px solid black;\ntext-decoration: none;\n}\n\n#myDiv a {\ncolor: red;\nbackground-color: yellow;\n}",
        "a.button {\nbackground-color: #8c8c8c !important;\ncolor: white !important;\npadding: 5px !important;\nborder: 1px solid black !important;\ntext-decoration: none !important;\n}\n\n#myDiv a {\ncolor: red;\nbackground-color: yellow;\n}",
        "!important",
        "@media",
        "prefers-reduced-motion"
      ]
    },
    {
      "title": "CSS Math Functions",
      "summary": "CSS Math Functions\nCSS math functions allow mathematical expressions to be used as property values.\nIn this chapter, we will explain the following math functions:\ncalc()\nmax()\nmin()\nclamp()\nThe CSS calc() Function\nThe calc() function performs a mathematical calculation that will be used as the property value.\nThe calc() function supports addition (+), subtraction (-), multiplication (*), and division (/), and can combine different units, like pixels and percentages.\nCSS Syntax\nLet us look at an example:\nExample\nUse calc() to calculate the width and the height of a <div> element:\nREMOVE ADS\nThe CSS max() Function\nThe max() function takes a comma-separated list of values, and uses the largest value from the list as the property value.\nCSS Syntax\nLet us look at an example:\nExample\nUse max() to set the width of #div1 to whichever value is largest, 50% or 300px:\nThe CSS min() Function\nThe min() function takes a comma-separated list of values, and uses the smallest value from the list as the property value.\nCSS Syntax\nLet us look at an example:\nExample\nUse min() to set the width of #div1 to whichever value is smallest, 50% or 300px:\nThe CSS clamp() Function\nThe clamp() function is used to set a value that will adjust responsively between a minimum value and a maximum value depending on the size of the viewport.\nThe clamp() function has three parameters: a minimum value, a preferred value, and a maximum value. If the preferred value is smaller than the minimum value or larger than the maximum value, the preferred value is used.\nCSS Syntax\nLet us look at an example:\nExample\nSet the <h2> element's minimum font-size to 2rem, and the maximum font-size to 3.5rem. Also, set the <p> element's minimum font-size to 1rem, and the maximum font-size to 2.5rem:\nCSS Functions Reference\nFor a complete list of all CSS functions, visit our CSS Functions Reference.",
      "examples": [
        "calc(expression)",
        "#div1 {\nmargin: auto;\nwidth: calc(100% - 100px);\nheight: calc(30vh + 50px);\nborder: 1px solid black;\npadding: 10px;\n}",
        "max(value1, value2, ...)",
        "#div1 {\nheight: 100px;\nwidth: max(50%, 300px);\nborder: 1px solid black;\npadding: 10px;\n}",
        "min(value1, value2, ...)",
        "#div1 {\nheight: 100px;\nwidth: min(50%, 300px);\nborder: 1px solid black;\npadding: 10px;\n}",
        "clamp(min, preferred, max)",
        "h2 {\nfont-size: clamp(2rem, 2.5vw, 3.5rem);\n}\n\np {\nfont-size: clamp(1rem, 2.5vw, 2.5rem);\n}",
        "calc()",
        "max()",
        "min()",
        "clamp()"
      ]
    },
    {
      "title": "CSS Performance Optimization",
      "summary": "Optimizing CSS\nOptimizing CSS makes your website load faster and run more smoothly; which also results in a better user experience.\nHere are some tips for optimizing CSS:\n1. Use Simple Selectors\nUse simple selectors when possible. Complex selectors increase the parsing time.\nBad Example\nBetter Example\n2. Avoid Universal Selector for Styling\nAvoid the universal selector (*) when not strictly necessary. The universal selector (*) affects every element and can slow down page rendering.\nExample\n3. Avoid Inline Styles\nAvoid inline styles when not necessary. Inline styles make your HTML heavier and are harder to manage.\nBad Example\nREMOVE ADS\n4. Avoid @import\nAvoid using @import for loading external CSS, as it delays stylesheet loading.\nAdd external CSS with the <link> tag in the head section, so it loads before the page is rendered.\nExample\n5. Use Shorthand Properties\nUse shorthand properties when possible. It saves space and is faster to parse.\nExample\n6. Cut Down Unnecessary Animations\nA high number of animations and large animations require more processing power to handle, which degrades performance. So, remove unnecessary animations.\n7. Use Properties that Not Cause Repaint of Animations\nAnimation performance relies also on what properties you are animating.\nSome properties (like width, height, left, top), trigger a layout recalculation when animated, and should be avoided.\nIf possible, use animation properties that do not cause repaint, like transforms, opacity and filter.\n8. Combine and Minify CSS\nUse one CSS file when possible, and remove spaces and comments to reduce file size.\nYou can use tools like:\nCSS Minifier\nPostCSS\nOnline compressors\n9. Cache Your CSS\nMake sure your CSS file is cached by the browser by giving it a long expiration time in your server settings. This reduces how often users need to re-load it.\nSummary\nKeep selectors short and simple\nAvoid layout-thrashing operations\nUse efficient animation techniques\nUse external, minified, and cached stylesheets",
      "examples": [
        "body #navlist ul li a.button:hover {\nbackground-color: blue;\n}",
        ".button:hover {\nbackground-color: blue;\n}",
        "* {\nmargin: 0;\npadding: 0;\nfont-size: 16px;\n}",
        "<div style=\"color: red; font-size: 18px;\">Hello</div>\n<p style=\"color: blue; font-size: 16px;\">Test</p>",
        "<link rel=\"stylesheet\" href=\"style.css\">",
        "/* Long version */\nmargin-top: 10px;\nmargin-right: 20px;\nmargin-bottom: 10px;\nmargin-left: 20px;\n\n/* Shorthand version */\nmargin: 10px 20px;",
        "@import",
        "<link>"
      ]
    },
    {
      "title": "CSS Accessibility Styling",
      "summary": "CSS Accessibility Styling\nA website should be designed to ensure good accessibility for all users, including those with disabilities.\nCSS accessibility styling is about using good styling technics to improve the visual clarity, navigation, and overall user experience.\nCSS Accessibility Styling Technics\nHere are some tips and technics on how to improve the accessibility of your web site:\n1. Provide High Color Contrast\nAlways use a good color contrast between the text and the background for readability. This is especially important for users with visual impairments or color blindness.\nGood Color Contrast\nBad Color Contrast\n2. Provide Good Font, Font Size and Line Height\nAlways provide a font that is easily readable. In addition, use a proper font size and line height. Use relative units (like rem) for font-size, to allow the user to scale the text size in the browser settings.\nGood Font Example\nBad Font Example\n3. Have Visible Focus Indicators\nAlways use the :focus pseudo-class to ensure that interactive elements (like links, buttons, input fields) have a clear visual focus style.\nUsing :focus will ensure that keyboard users and screen-readers understand which element is currently active.\nExample\nREMOVE ADS\n4. Avoid Hiding Focus\nNever remove the default focus outlines, without replacing them with another visible focus style.\nBad Example\nGood Example\n5. Use CSS + Semantic HTML\nUse CSS for visual styling, and structure content with semantic HTML elements (instead of non-semantic elements, like <div> for everything).\nExample\n6. Respect User Preferences\nThe CSS prefers-reduced-motion @media feature lets you check if a user has asked to reduce motion, such as animations or transitions.\nSome users have motion sensitivity and prefer websites with less animation. You can use this media query to turn off or tone down animations when needed:\nExample\nYou will learn more about media queries in a later chapter.\nSummary\nProvide high color contrast\nProvide easily readable fonts\nKeep focus outlines visible\nUse semantic HTML elements\nRespect user preferences",
      "examples": [
        "body {\nbackground-color: #ffffff;\ncolor: #000000;\n}",
        "body {\nbackground-color: #eeeeee;\ncolor: #cccccc;\n}",
        "body {\nfont-family: Arial, sans-serif;\nfont-size: 1rem;\nline-height: 1.6;\n}",
        "body {\nfont-family: Georgia, serif;\nfont-size: 12px;\nfont-style: italic;\nfont-variant: small-caps;\nline-height: 90%;\n}",
        "a:focus, button:focus, input:focus {\noutline: 2px solid orange;\n}",
        "button:focus {\noutline: none;\n}",
        "button:focus {\noutline: 2px solid orange;\n}",
        "nav {\nbackground-color: #333333;\ncolor: white;\n}\naside {\nbackground-color: #333333;\ncolor: white;\n}",
        "@media (prefers-reduced-motion: reduce) {\n* {\nanimation: none !important;\ntransition: none !important;\n}\n}",
        "rem",
        "font-size",
        ":focus",
        "<div>",
        "prefers-reduced-motion",
        "@media"
      ]
    },
    {
      "title": "CSS Website Layout",
      "summary": "CSS Website Layout\nA website is often divided into multiple sections, like a top header, navigation menu, main content, and a footer:\nThere are tons of different layout designs to choose from. However, the structure above, is one of the most common, and we will take a closer look at it in this tutorial.\nCSS Header\nA header is usually located at the top of the website, and often contains a logo or the website name:\nExample\nResult\nMy Header\nREMOVE ADS\nCSS Navigation Bar\nA navigation bar contains a list of links to help visitors navigate through your website:\nExample\nResult\nCSS Layout Content\nHow the content of a website should be shown, often depends on the device of the users. The most common layouts are:\n1-column layout (often used for mobile browsers)\n2-columns layout (often used for tablets and laptops)\n3-columns layout (only used for desktops)\n1-column:\n2-column:\n3-column:\nHere we will create a 3-column layout, and change it to a 1-column layout when the width of the screen is less than 600px:\nExample\nResult\nColumn\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas sit amet pretium urna. Vivamus venenatis velit nec neque ultricies, eget elementum magna tristique.\nColumn\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas sit amet pretium urna. Vivamus venenatis velit nec neque ultricies, eget elementum magna tristique.\nColumn\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas sit amet pretium urna. Vivamus venenatis velit nec neque ultricies, eget elementum magna tristique.\nTip: Learn more about the CSS @media rule in our CSS Media Queries chapter.\nTip: Learn more about CSS Flexbox in our CSS Flexbox chapter.\nCSS Basic and Fixed Footer\nThe footer is placed at the bottom of a webpage. It often contains information like copyright and contact info.\nThe following example shows a basic footer styling:\nExample\nResult\nThe following example shows a fixed footer that is always visible at the bottom of the page, regardless of scrolling:\nExample\nCSS Responsive Website\nIn this example, we use media queries together with flexbox to create a responsive website, containing a flexible navigation bar and flexible content.\nExample\nEver heard about W3Schools Spaces? Here you can create your website from scratch or use a template, and host it for free.\n* no credit card required",
      "examples": [
        "header {\nbackground-color: #f1f1f1;\ntext-align: center;\npadding: 10px;\n}",
        "/* Style the topnav */\nul.topnav {\ndisplay: flex;\nlist-style-type: none;\nmargin: 0;\npadding: 0;\nbackground-color: #333333;\n}\n\n/* Style links in topnav */\nul.topnav li a {\ndisplay: block;\ncolor: #f1f1f1;\npadding: 14px 16px;\ntext-decoration: none;\n}\n\n/* Change color on hover */\nul.topnav li a:hover {\nbackground-color: #dddddd;\ncolor: black;\n}",
        "div.flex-container {\ndisplay: flex;\n/* Show the flex items horizontally */\nflex-direction: row;\n}\n\ndiv.flex-container > div {\nmargin: 10px;\n}\n\n/* Use media query and show the flex items vertically if screen width is less than 600px */\n@media screen and (max-width:600px) {\ndiv.flex-container {\nflex-direction: column;\n}\n}",
        "footer {\nbackground-color: #f1f1f1;\ntext-align: center;\npadding: 8px;\n}",
        "footer {\nposition: fixed;\nbottom: 0;\nleft: 0;\nwidth: 100%;\nbackground-color: #f1f1f1;\npadding: 8px;\ntext-align: center;\nz-index: 1000;\n}",
        "@media"
      ]
    },
    {
      "title": "CSS Rounded Corners",
      "summary": "CSS Rounded Corners\nThe CSS border-radius property is used to create rounded corners for elements.\nCSS border-radius Property\nThe border-radius property defines the radius of an element's corners.\nThis property can be applied to all elements with a background-color, a border, or a background-image.\nHere are three examples:\n1. Rounded corners for an element with a background color:\nRounded corners!\n2. Rounded corners for an element with a border:\nRounded corners!\n3. Rounded corners for an element with a background image:\nRounded corners!\nHere is the code:\nExample\nTip: The border-radius property is actually a shorthand property for the border-top-left-radius, border-top-right-radius, border-bottom-right-radius and border-bottom-left-radius properties.\nREMOVE ADS\nCSS border-radius - Specify Each Corner\nThe border-radius property can have from one to four values. Here are the rules:\nFour values - border-radius: 15px 50px 30px 5px; (first value applies to top-left corner, second value applies to top-right corner, third value applies to bottom-right corner, and fourth value applies to bottom-left corner):\nThree values - border-radius: 15px 50px 30px; (first value applies to top-left corner, second value applies to top-right and bottom-left corners, and third value applies to bottom-right corner):\nTwo values - border-radius: 15px 50px; (first value applies to top-left and bottom-right corners, and the second value applies to top-right and bottom-left corners):\nOne value - border-radius: 15px; (the value applies to all four corners, which are rounded equally:\nHere is the code:\nExample\nCSS Elliptical and Circular Shapes\nTo create elliptical corners, you must specify two values for each radius, separated by a slash /. The first value defines the horizontal radius, and the second value defines the vertical radius.\nTo create a oval shape (for a rectangular element), or to create a circular shape (for a square element) set border-radius to 50%.\nExample\nCreate elliptical, oval and circular shapes:\nCSS Rounded Corners Properties",
      "examples": [
        "#div1 {\nborder-radius: 25px;\nbackground-color: #73AD21;\npadding: 20px;\nwidth: 200px;\nheight: 150px;\n}\n\n#div2 {\nborder-radius: 25px;\nborder: 2px solid #73AD21;\npadding: 20px;\nwidth: 200px;\nheight: 150px;\n}\n\n#div3 {\nborder-radius: 25px;\nbackground-image: url(paper.gif);\nbackground-position: left top;\nbackground-repeat: repeat;\npadding: 20px;\nwidth: 200px;\nheight: 150px;\n}",
        "#div1 {\nborder-radius: 15px 50px 30px 5px; /* four values */\nbackground: #04AA6D;\nwidth: 200px;\nheight: 150px;\n}\n\n#div2 {\nborder-radius: 15px 50px 30px; /* three values */\nbackground: #04AA6D;\nwidth: 200px;\nheight: 150px;\n}\n\n#div3 {\nborder-radius: 15px 50px; /* two values */\nbackground: #04AA6D;\nwidth: 200px;\nheight: 150px;\n}\n\n#div4 {\nborder-radius: 15px; /* one value */\nbackground: #04AA6D;\nwidth: 200px;\nheight: 150px;\n}",
        "#div1 {\nborder-radius: 70px / 30px;\nbackground: #04AA6D;\nwidth: 200px;\nheight: 150px;\n}\n\n#div2 {\nborder-radius: 15px / 50px;\nbackground: #04AA6D;\nwidth: 200px;\nheight: 150px;\n}\n\n#div3 {\nborder-radius: 50%;\nbackground: #04AA6D;\nwidth: 200px;\nheight: 150px;\n}\n\n#div4 {\nborder-radius: 50%;\nbackground: #04AA6D;\nwidth: 200px;\nheight: 200px;\n}",
        "border-radius",
        "background-color",
        "border",
        "background-image",
        "border-top-left-radius",
        "border-top-right-radius",
        "border-bottom-right-radius",
        "border-bottom-left-radius"
      ]
    },
    {
      "title": "CSS Border Images",
      "summary": "CSS Border Images\nWith the CSS border-image property, you can define an image to be used as the border around an element.\nCSS border-image Property\nThe border-image property allows you to define an image to be used as the border around an element, instead of the normal border.\nThis property takes an image and slices it into nine sections, like a tic-tac-toe board. It then places the corners at the corners, and the middle sections are repeated or stretched as you specify.\nThe border-image property is a shorthand property for the following properties:\nborder-image-source - defines the path to the image\nborder-image-slice - defines how to slice the image\nborder-image-width - defines the width of the image\nborder-image-outset defines the amount by which the border image area extends beyond the border box\nborder-image-repeat - defines how to repeat the image\nNote: For border-image to work, the element also needs the border property set!\nCSS border-image Examples\nWe will use the following image (named \"border.png\"):\nIn the following example, the url(border.png) specifies the source image, the number 30 slices the image 30 pixels from each edge, and the round value specifies that the middle section of the image is tiled (repeated) to fill the area (and rescaled to fit, if needed):\nHere is the code:\nExample\nHere, the stretch value specifies that the middle section of the image is stretched to fill the area:\nHere is the code:\nExample\nREMOVE ADS\nCSS border-image - Different Slice Values\nDifferent slice values completely changes the look of the border image:\nExample 1:\nExample 2:\nExample 3:\nHere is the code:\nExample\nCSS Border Image Properties",
      "examples": [
        "#borderimg {\nborder: 10px solid transparent; /* Required for border-image */\npadding: 15px;\nborder-image: url(border.png) 30 round;\n}",
        "#borderimg {\nborder: 10px solid transparent;  /* Required for border-image */\npadding: 15px;\nborder-image: url(border.png) 30 stretch;\n}",
        "#borderimg1 {\nborder: 10px solid transparent;\npadding: 15px;\nborder-image: url(border.png) 50 round;\n}\n\n#borderimg2 {\nborder: 10px solid transparent;\npadding: 15px;\nborder-image: url(border.png) 20% round;\n}\n\n#borderimg3 {\nborder: 10px solid transparent;\npadding: 15px;\nborder-image: url(border.png) 30% round;\n}",
        "border-image",
        "border-image-source",
        "border-image-slice",
        "border-image-width",
        "border-image-outset",
        "border-image-repeat",
        "border",
        "round",
        "stretch"
      ]
    },
    {
      "title": "CSS Multiple Backgrounds",
      "summary": "CSS Multiple Backgrounds\nCSS allows you to add multiple background images for an element, through the background-image property.\nThe different background images are separated by commas, and the images are stacked on top of each other, where the first image is closest to the viewer.\nThe following example has two background images, the first image is a flower (aligned to the right-bottom) and the second image is a paper-like background (aligned to the top-left corner):\nLorem Ipsum Dolor\nLorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.\nUt wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.\nExample\nMultiple background images can be specified using either the individual background properties (as above) or with the background shorthand property.\nThe following example uses the background shorthand property (same result as example above):\nExample\nCSS Advanced Background Properties",
      "examples": [
        "#example1 {\nbackground-image: url(img_flwr.gif), url(paper.gif);\nbackground-position: right bottom, left top;\nbackground-repeat: no-repeat, repeat;\n}",
        "#example1 {\nbackground: url(img_flwr.gif) right bottom no-repeat, url(paper.gif) left top repeat;\n}",
        "background-image",
        "background"
      ]
    },
    {
      "title": "CSS Background Size",
      "summary": "The CSS background-size Property\nThe background-size property allows you to specify the size of background images.\nThe background size can be specified in lengths, percentages, or by using one of the keywords: auto, contain, or cover.\nThe following example resizes a background image to much smaller than the original image (using pixels):\nLorem Ipsum Dolor\nLorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.\nUt wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.\nExample\nSet background size with pixels:\nbackground-size - auto, contain and cover\nThe keyword values for background-size are auto, contain and cover.\nThe auto value is the default value, and displays the background image in its original size.\nThe contain value scales the image up or down, to fit inside the content area.\nThe cover value scales the image to be as large as possible so that the content area is completely covered by the background image (its width and height will be equal to, or larger than the content area).\nExample\nSet background size with contain, cover and auto:\nREMOVE ADS\nDefine Sizes of Multiple Background Images\nThe background-size property also accepts multiple values (using a comma-separated list), when working with multiple backgrounds.\nThe following example has three background images specified, with different background-size value for each image:\nExample\nCSS Full Size Background Image\nNow we want to have a background image that covers the entire browser window at all times.\nThe requirements are as follows:\nFill the entire page with the image (no white space)\nScale image as needed\nCenter image on page\nDo not cause scrollbars\nHere, we define the styles in the <html> element (the <html> element is always at least the height of the browser window). Then we set a fixed and centered background on it. Then adjust its size with the background-size property:\nExample\nCSS Hero Image\nYou could also use different background properties on a <div> to create a hero image (a large image with text), and place it where you want.\nExample\nCSS Advanced Background Properties",
      "examples": [
        "#div1 {\nbackground-image: url(img_flower.jpg);\nbackground-position: right top;\nbackground-repeat: no-repeat;\nbackground-size: 100px 80px;\n}",
        "#div1 {\nborder: 1px solid black;\nbackground-image: url(img_flwr.gif);\nbackground-repeat: no-repeat;\nbackground-size: contain;\n}\n\n#div2 {\nborder: 1px solid black;\nbackground-image: url(img_flwr.gif);\nbackground-repeat: no-repeat;\nbackground-size: cover;\n}\n\n#div3 {\nborder: 1px solid black;\nbackground-image: url(img_flwr.gif);\nbackground-repeat: no-repeat;\nbackground-size: auto;\n}",
        "#div1 {\nbackground-image: url(img_tree.gif), url(img_flwr.gif), url(paper.gif);\nbackground-position: left top, right bottom, left top;\nbackground-repeat: no-repeat, no-repeat, repeat;\nbackground-size: contain, 150px, auto;\n}",
        "html {\nbackground: url(img_man.jpg) no-repeat center fixed;\nbackground-size: cover;\n}",
        ".hero-image {\nbackground: url(img_man.jpg) no-repeat center;\nbackground-size: cover;\nheight: 500px;\nposition: relative;\n}",
        "background-size",
        "auto",
        "contain",
        "cover"
      ]
    },
    {
      "title": "CSS Background Origin",
      "summary": "CSS background-origin Property\nThe CSS background-origin property specifies where the background image is positioned.\nThis property can have one of the following values:\npadding-box - The background image starts from the top-left corner of the padding edge. This is default\nborder-box - The background image starts from the top-left corner of the border edge\ncontent-box - The background image starts from the top-left corner of the content edge\nNote: This property has no effect if the background-attachment property is set to \"fixed\".\nThe following example illustrates the background-origin property:\nExample\nCSS Advanced Background Properties",
      "examples": [
        "#div1 {\nborder: 2px solid black;\npadding: 35px;\nbackground-image: url(img_flwr.gif);\nbackground-repeat: no-repeat;\nbackground-origin: padding-box;\n}\n\n#div2 {\nborder: 2px solid black;\npadding: 35px;\nbackground-image: url(img_flwr.gif);\nbackground-repeat: no-repeat;\nbackground-origin: border-box;\n}\n\n#div3 {\nborder: 2px solid black;\npadding: 35px;\nbackground-image: url(img_flwr.gif);\nbackground-repeat: no-repeat;\nbackground-origin: content-box;\n}",
        "background-origin",
        "padding-box",
        "border-box",
        "content-box",
        "background-attachment"
      ]
    },
    {
      "title": "CSS Background Clip",
      "summary": "CSS background-clip Property\nThe CSS background-clip property defines how far the background (color, image, or gradient) should extend within an element.\nThis property can have one of the following values:\nborder-box - The background extends behind the border. This is default\npadding-box - The background extends to the inside edge of the border\ncontent-box - The background extends to the edge of the content box\nExample\nUsing the background-clip property with a background image:\nExample\nUsing the background-clip property with a background color:\nCSS Advanced Background Properties",
      "examples": [
        "#div1 {\nborder: 5px dotted black;\npadding: 35px;\nbackground-image: url(paper.gif);\nbackground-clip: border-box;\n}\n\n#div2 {\nborder: 5px dotted black;\npadding: 35px;\nbackground-image: url(paper.gif);\nbackground-clip: padding-box;\n}\n\n#div3 {\nborder: 5px dotted black;\npadding: 35px;\nbackground-image: url(paper.gif);\nbackground-clip: content-box;\n}",
        "#div1 {\nborder: 5px dotted black;\npadding: 35px;\nbackground-color: lightblue;\nbackground-clip: border-box;\n}\n\n#div2 {\nborder: 5px dotted black;\npadding: 35px;\nbackground-color: lightblue;\nbackground-clip: padding-box;\n}\n\n#div3 {\nborder: 5px dotted black;\npadding: 35px;\nbackground-color: lightblue;\nbackground-clip: content-box;\n}",
        "background-clip",
        "border-box",
        "padding-box",
        "content-box"
      ]
    },
    {
      "title": "CSS Colors",
      "summary": "CSS supports 140+ color names, HEX values, RGB values, RGBA values, HSL values, HSLA values, and opacity.\nRGBA Colors\nRGBA color values are an extension of RGB colors with an alpha channel - which specifies the opacity for a color.\nAn RGBA color value is specified with:\nrgba(red, green, blue, alpha)\nThe alpha parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque).\nThe following example defines different RGBA colors:\nExample\nREMOVE ADS\nHSLA Colors\nHSLA color values are an extension of HSL colors with an alpha channel - which specifies the opacity for a color.\nAn HSLA color value is specified with:\nhsla(hue, saturation, lightness, alpha)\nThe alpha parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque):\nThe following example defines different HSLA colors:\nExample\nCSS opacity Property\nThe opacity property sets the opacity for the whole element (both background color and text will be opaque/transparent).\nThe opacity property value must be a number between 0.0 (fully transparent) and 1.0 (fully opaque).\nNotice that the text inside the element will also be transparent/opaque!\nThe following example shows different elements with opacity:\nExample",
      "examples": [
        "#p1 {background-color: rgba(255, 0, 0, 0.3);}  /* red with opacity */\n#p2 {background-color: rgba(0, 255, 0, 0.3);}  /* green with opacity */\n#p3 {background-color: rgba(0, 0, 255, 0.3);}  /* blue with opacity */",
        "#p1 {background-color: hsla(120, 100%, 50%, 0.3);}  /* green with opacity */\n#p2 {background-color: hsla(120, 100%, 75%, 0.3);}  /* light green with opacity */\n#p3 {background-color: hsla(120, 100%, 25%, 0.3);}  /* dark green with opacity */\n#p4 {background-color: hsla(120, 60%, 70%, 0.3);}   /* pastel green with opacity */",
        "#p1 {background-color:rgb(255,0,0);opacity:0.6;}  /* red with opacity */\n#p2 {background-color:rgb(0,255,0);opacity:0.6;}  /* green with opacity */\n#p3 {background-color:rgb(0,0,255);opacity:0.6;}  /* blue with opacity */",
        "opacity"
      ]
    },
    {
      "title": "CSS Color Keywords",
      "summary": "CSS Color Keywords\nCSS has some special predefined color keywords that can be used with properties like color, background-color and border-color.\nThe special keywords are:\ntransparent\ncurrentcolor\ninherit\nThe transparent Keyword\nThe transparent keyword is used to make a color transparent. This is often used to make a transparent background color for an element.\nExample\nHere, the background color of the <div> element will be fully transparent, and the background image will show through:\nNote: The transparent keyword is equivalent to rgba(0,0,0,0). RGBA color values are an extension of RGB color values with an alpha channel - which specifies the opacity for a color. Read more in our CSS RGB chapter and in our CSS Colors chapter.\nREMOVE ADS\nThe currentcolor Keyword\nThe currentcolor keyword is like a variable that holds the current value of the color property of an element.\nThis keyword can be useful if you want a specific color to be consistent in an element or a page.\nExample\nIn this example the border color of the <div> element will be blue, because the text color of the <div> element is blue:\nExample\nIn this example the <div>'s background color is set to the current color value of the body element:\nExample\nIn this example the <div>'s border color and shadow color is set to the current color value of the body element:\nThe inherit Keyword\nThe inherit keyword specifies that a property should inherit its value from its parent element.\nThe inherit keyword can be used for any CSS property, and on any HTML element.\nExample\nIn this example the <span>'s border settings will be inherited from the parent element:",
      "examples": [
        "body {\nbackground-image: url(\"paper.gif\");\n}\n\ndiv {\nbackground-color: transparent;\n}",
        "div {\ncolor: blue;\nborder: 10px solid currentcolor;\n}",
        "body {\ncolor: purple;\n}\n\ndiv {\nbackground-color: currentcolor;\n}",
        "body {\ncolor: green;\n}\n\ndiv {\nbox-shadow: 0px 0px 15px currentcolor;\nborder: 5px solid currentcolor;\n}",
        "div {\nborder: 2px solid red;\n}\n\nspan {\nborder: inherit;\n}",
        "color",
        "background-color",
        "border-color",
        "transparent",
        "currentcolor",
        "inherit"
      ]
    },
    {
      "title": "CSS Gradients",
      "summary": "CSS Gradients\nThe CSS gradient functions let you display smooth transitions between two or more colors within an element.\nCSS defines three types of gradients:\nLinear Gradients - The color transition goes down, up, left, right, or diagonally\nRadial Gradients - The color transition goes out from a central point\nConic Gradients - The color transition is rotated around a center point\nThe CSS gradient functions are used within the background-image property.\nCSS linear-gradient() Function\nThe CSS linear-gradient() function creates a linear gradient.\nA linear gradient defines a color transition that goes in a straight line, it can go down, up, to left, to right, or diagonally.\nA linear gradient requires at least two color stops. Color stops are the colors you want to render smooth transitions among. You can also set a starting point and a direction (or an angle) along with the gradient effect.\nSyntax\nDirection - Top to Bottom (this is default)\nThe following example shows a linear gradient that goes from top to bottom. It starts red, transitioning to yellow:\nExample\nDirection - Bottom to Top\nThe following example shows a linear gradient that goes from bottom to top. It starts red, transitioning to yellow:\nExample\nDirection - Left to Right\nThe following example shows a linear gradient that goes from left to right. It starts red, transitioning to yellow:\nExample\nDirection - Diagonal\nThe following example shows a linear gradient that goes from top-left to bottom-right. It starts red, transitioning to yellow:\nExample\nREMOVE ADS\nLinear Gradient - Using Angles\nIf you want more control over the direction of the gradient, you can define an angle parameter, instead of the predefined directions (to bottom, to top, to right, to left, to bottom right, etc.).\nA value of 0deg is equivalent to \"to top\".\nA value of 90deg is equivalent to \"to right\".\nA value of 180deg is equivalent to \"to bottom\".\nA value of 270deg equivalent to \"to left\"\nSyntax\nThe following example shows how to use angles on linear gradients:\nExample\nLinear Gradient - Multiple Color Stops\nThe following example shows a linear gradient (from top to bottom) with multiple color stops:\nExample\nThe following example shows a linear gradient (from left to right) with the color of the rainbow and some text:\nExample\nLinear Gradient - Transparency\nCSS gradients also support transparency, which can be used to create fading effects.\nTo add transparency, we use the rgba() function to define the color stops. The last parameter in the rgba() function can be a value from 0 to 1, and it defines the transparency of the color: 0 indicates full transparency, 1 indicates full color (no transparency).\nThe following example shows a linear gradient that goes from left to right. It starts fully transparent, transitioning to full color red:\nExample\nCSS repeating-linear-gradient() Function\nThe CSS repeating-linear-gradient() function is used to repeat linear gradients:\nExample\nA repeating linear gradient:",
      "examples": [
        "background-image: linear-gradient(direction, color-stop1, color-stop2, ...);",
        "#grad {\nbackground-image: linear-gradient(to bottom, red, yellow);\n}",
        "#grad {\nbackground-image: linear-gradient(to top, red, yellow);\n}",
        "#grad {\nbackground-image: linear-gradient(to right, red , yellow);\n}",
        "#grad {\nbackground-image: linear-gradient(to bottom right, red, yellow);\n}",
        "background-image: linear-gradient(angle, color-stop1, color-stop2);",
        "#grad {\nbackground-image: linear-gradient(180deg, red, yellow);\n}",
        "#grad {\nbackground-image: linear-gradient(red, yellow, green);\n}",
        "#grad {\nbackground-image: linear-gradient(to right, red,orange,yellow,green,blue,indigo,violet);\n}",
        "#grad {\nbackground-image: linear-gradient(to right, rgba(255,0,0,0), rgba(255,0,0,1));\n}",
        "#grad {\nbackground-image: repeating-linear-gradient(red, yellow 10%, green 20%);\n}",
        "background-image",
        "linear-gradient()",
        "angle",
        "repeating-linear-gradient()"
      ]
    },
    {
      "title": "CSS Radial Gradients",
      "summary": "CSS radial-gradient() Function\nThe CSS radial-gradient() function creates a radial gradient.\nA radial gradient defines a color transition that goes goes out from a central point.\nA radial gradient requires at least two color stops. Color stops are the colors you want to render smooth transitions among.\nSyntax\nBy default, shape is ellipse, size is farthest-corner, and position is center.\nRadial Gradient - Evenly Spaced Color Stops (this is default)\nThe following example shows a radial gradient with evenly spaced color stops:\nExample\nRadial Gradient - Differently Spaced Color Stops\nThe following example shows a radial gradient with differently spaced color stops:\nExample\nRadial Gradient - Set Shape\nThe shape parameter defines the shape of the gradient. It can take one of the following values:\nellipse (this is default)\ncircle\nThe following example shows a radial gradient with the shape of a circle:\nExample\nREMOVE ADS\nRadial Gradient - The size Parameter\nThe size parameter defines the size of the gradient'ending shape. It can take one of the following values:\nclosest-side\nfarthest-side\nclosest-corner\nfarthest-corner (this is default)\nExample\nA radial gradient with different size keywords:\nCSS repeating-radial-gradient() Function\nThe CSS repeating-radial-gradient() function is used to repeat radial gradients:\nExample\nA repeating radial gradient:",
      "examples": [
        "background-image: radial-gradient(shape size at position, start-color, ..., last-color);",
        "#grad {\nbackground-image: radial-gradient(red, yellow, green);\n}",
        "#grad {\nbackground-image: radial-gradient(red 5%, yellow 15%, green 60%);\n}",
        "#grad {\nbackground-image: radial-gradient(circle, red, yellow, green);\n}",
        "#grad1 {\nbackground-image: radial-gradient(closest-side at 70% 60%, red, yellow, black);\n}\n\n#grad2 {\nbackground-image: radial-gradient(farthest-side at 70% 60%, red, yellow, black);\n}",
        "#grad {\nbackground-image: repeating-radial-gradient(red, yellow 10%, green 15%);\n}",
        "radial-gradient()",
        "shape",
        "size",
        "position",
        "repeating-radial-gradient()"
      ]
    },
    {
      "title": "CSS Conic Gradients",
      "summary": "CSS conic-gradient() Function\nThe CSS conic-gradient() function creates a conic gradient.\nA conic gradient is a gradient with color transitions rotated around a center point.\nTo create a conic gradient you must define at least two colors.\nSyntax\nBy default, angle is 0deg and position is center.\nIf no degree is specified, the colors will be spread equally around the center point.\nConic Gradient: Three Colors\nThe following example shows a conic gradient with three colors:\nExample\nA conic gradient with three colors:\nConic Gradient: Five Colors\nThe following example shows a conic gradient with five colors:\nExample\nA conic gradient with five colors:\nConic Gradient: Three Colors and Degrees\nThe following example shows a conic gradient with three colors and a degree for each color:\nExample\nA conic gradient with three colors and a degree for each color:\nREMOVE ADS\nCreate Pie Charts\nJust add border-radius: 50% to make the conic gradient look like a pie:\nExample\nHere is another pie chart with defined degrees for all the colors:\nExample\nConic Gradient With Specified From Angle\nThe [from angle] specifies an angle that the entire conic gradient is rotated by.\nThe following example shows a conic gradient with a from angle of 90deg:\nExample\nA conic gradient with a from angle:\nConic Gradient With Specified Center Position\nThe [at position] specifies the center of the conic gradient.\nThe following example shows a conic gradient with a center position of 60% 45%:\nExample\nA conic gradient with a specified center position:\nCSS repeating-conic-gradient() Function\nThe CSS repeating-conic-gradient() function is used to repeat conic gradients:\nExample\nA repeating conic gradient:\nHere is a repeating conic gradient with defined color-starts and color-stops:\nExample\nA repeating conic gradient with defined color-starts and color-stops:\nCSS Gradient Functions\nThe following table lists the CSS gradient functions:",
      "examples": [
        "background-image: conic-gradient([from angle] [at position,] color [degree], color [degree], ...);",
        "#grad {\nbackground-image: conic-gradient(red, yellow, green);\n}",
        "#grad {\nbackground-image: conic-gradient(red, yellow, green, blue, black);\n}",
        "#grad {\nbackground-image: conic-gradient(red 45deg, yellow 90deg, green 210deg);\n}",
        "#grad {\nbackground-image: conic-gradient(red, yellow, green, blue, black);\nborder-radius: 50%;\n}",
        "#grad {\nbackground-image: conic-gradient(red 0deg, red 90deg, yellow 90deg, yellow 180deg, green 180deg, green 270deg, blue 270deg);\nborder-radius: 50%;\n}",
        "#grad {\nbackground-image: conic-gradient(from 90deg, red, yellow, green);\n}",
        "#grad {\nbackground-image: conic-gradient(at 60% 45%, red, yellow, green);\n}",
        "#grad {\nbackground-image: repeating-conic-gradient(red 10%, yellow 20%);\nborder-radius: 50%;\n}",
        "#grad {\nbackground-image: repeating-conic-gradient(red 0deg 10deg, yellow 10deg 20deg, blue 20deg 30deg);\nborder-radius: 50%;\n}",
        "conic-gradient()",
        "angle",
        "position",
        "degree",
        "border-radius: 50%",
        "repeating-conic-gradient()"
      ]
    },
    {
      "title": "CSS Shadow Effects",
      "summary": "Shadows\nWith CSS you can create shadow effects!\nCSS Text Shadow\nThe CSS text-shadow property applies a shadow to text.\nIn its simplest use, you only specify the horizontal and the vertical shadow.\nIn addition, you can add a shadow color and blur effect.\nText shadow effect!\nExample\nHorizontal and vertical shadow:\nNext, add a color to the shadow:\nText shadow effect!\nExample\nHorizontal and vertical shadow, with color:\nThen, add a blur effect to the shadow:\nText shadow effect!\nExample\nHorizontal and vertical shadow, with color and blur effect:\nThe following example shows a white text with black shadow:\nText shadow effect!\nExample\nText-shadow on a white text:\nThe following example shows a red neon glow shadow:\nText shadow effect!\nExample\nText-shadow with red neon glow:\nREMOVE ADS\nMultiple Shadows\nTo add more than one shadow to the text, you can add a comma-separated list of shadows.\nThe following example shows a red and blue neon glow shadow:\nText shadow effect!\nExample\nThe following example shows a white text with black, blue, and darkblue shadow:\nText shadow effect!\nExample\nYou can also use the text-shadow property to create a plain border around some text (without shadows):\nBorder around text!\nExample",
      "examples": [
        "h1 {\ntext-shadow: 2px 2px;\n}",
        "h1 {\ntext-shadow: 2px 2px red;\n}",
        "h1 {\ntext-shadow: 2px 2px 5px red;\n}",
        "h1 {\ncolor: white;\ntext-shadow: 2px 2px 4px #000000;\n}",
        "h1 {\ntext-shadow: 0 0 3px #ff0000;\n}",
        "h1 {\ntext-shadow: 0 0 3px #ff0000, 0 0 5px #0000ff;\n}",
        "h1 {\ncolor: white;\ntext-shadow: 1px 1px 2px black, 0 0 25px blue, 0 0 5px darkblue;\n}",
        "h1 {\ncolor: coral;\ntext-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;\n}",
        "text-shadow"
      ]
    },
    {
      "title": "CSS Box Shadow 1",
      "summary": "CSS box-shadow Property\nThe CSS box-shadow property is used to apply one or more shadows to an element.\nIn its simplest use, you can only specify the horizontal and the vertical offset of the shadow.\nIn addition, you can add a shadow color, a spread radius, a blur effect, and change the shadow from an outer shadow to an inner shadow (inset).\nCSS Horizontal and Vertical Shadow\nIn its simplest use, you only specify the horizontal and the vertical offset of the shadow.\nThe default color of the shadow is the current text color.\nExample\nSpecify a horizontal and a vertical shadow:\nSpecify a Color for the Shadow\nThe color parameter defines the color of the shadow.\nExample\nSpecify a color for the shadow:\nREMOVE ADS\nAdd a Blur Effect to the Shadow\nThe blur parameter defines the blur radius of the shadow. The higher the number, the more blurred the shadow will be.\nExample\nAdd a blur effect to the shadow:\nSet the Spread Radius of the Shadow\nThe spread parameter defines the spread radius of the shadow.\nA positive value increases the size of the shadow, and a negative value decreases the size of the shadow.\nExample\nSet the spread radius of the shadow:\nSet the inset Parameter\nThe inset parameter changes the shadow from an outer shadow (outset) to an inner shadow (inside an element's frame).\nExample\nAdd the inset parameter:\nAdd Multiple Shadows\nAn element can also have multiple shadows.\nTo attach more than one shadow to an element, add a comma-separated list of shadows.\nExample\nCreating Shadow Cards\nYou can also use the box-shadow property to create paper-like cards:\nJanuary 1, 2021\nHardanger, Norway\nExample\nCSS Shadow Properties\nThe following table lists the CSS shadow properties:",
      "examples": [
        "div {\nbox-shadow: 10px 10px;\n}",
        "div {\nbox-shadow: 10px 10px lightblue;\n}",
        "div {\nbox-shadow: 10px 10px 5px lightblue;\n}",
        "div {\nbox-shadow: 10px 10px 5px 12px lightblue;\n}",
        "div {\nbox-shadow: 10px 10px 5px lightblue inset;\n}",
        "div {\nbox-shadow: 5px 5px 8px blue, 10px 10px 8px red, 15px 15px 8px green;\n}",
        "div.card {\nwidth: 250px;\nbox-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\ntext-align: center;\n}",
        "box-shadow",
        "color",
        "blur",
        "spread",
        "inset"
      ]
    },
    {
      "title": "CSS Text Effects",
      "summary": "CSS Text Effects\nCSS has some properties to handle text overflow, word wrapping, line breaking rules and writing modes.\nIn this chapter you will learn about the following properties:\ntext-overflow - Specifies how to handle overflowed content\nword-wrap - Allows long words to be able to be broken and wrap onto the next line\nword-break - Specifies line breaking rules\nwriting-mode - Specifies whether lines of text are laid out horizontally or vertically\nCSS text-overflow Property\nThe CSS text-overflow property specifies how overflowed content that is not displayed should be signaled to the user. It can be clipped or rendered with ellipsis (...).\nBoth of the following properties are required for text-overflow to take effect:\nwhite-space: nowrap;\noverflow: hidden;\nHere, the overflowed content is clipped:\nThis is some long text that will not fit in the box\nHere, the overflowed content is rendered with ellipsis (...):\nThis is some long text that will not fit in the box\nThe CSS code is as follows:\nExample\nThe following example shows how you can display the overflowed content when hovering over the element:\nExample\nREMOVE ADS\nCSS word-wrap Property\nThe CSS word-wrap property allows long words to be able to be broken and wrap onto the next line.\nIf a word is too long to fit within an area, it expands outside:\nThis paragraph contains a very long word: thisisaveryveryveryveryveryverylongword. The long word will break and wrap to the next line.\nThe word-wrap property allows you to force the text to wrap - even if it means splitting it in the middle of a word:\nThis paragraph contains a very long word: thisisaveryveryveryveryveryverylongword. The long word will break and wrap to the next line.\nThe CSS code is as follows:\nExample\nAllow long words to be able to be broken and wrap onto the next line:\nCSS word-break Property\nThe CSS word-break property specifies how words should break when reaching the end of a line.\nThis property can take one of the following values:\nnormal - This is default. Uses the default line breaking rules of the language\nbreak-all - Allows words to be broken at any character to prevent overflow\nkeep-all - Prevents words from breaking\nHere, we use normal:\nThis paragraph contains some text. This line will-break-at-hyphens.\nHere, we use break-all:\nThis paragraph contains some text. The lines will break at any character.\nThe CSS code is as follows:\nExample\nCSS writing-mode Property\nThe CSS writing-mode property specifies whether lines of text are laid out horizontally or vertically.\nThis property can take one of the following values:\nhorizontal-tb - Default. The text flows horizontally from left to right, vertically from top to bottom\nvertical-rl - The text flows vertically from top to bottom, horizontally from right to left\nvertical-lr - The text flows vertically from top to bottom, horizontally from left to right\nHere is a text with a span element with a vertical-rl writing-mode.\nThe following example shows some different writing modes:\nExample\nCSS Text Effect Properties\nThe following table lists the CSS text effect properties:",
      "examples": [
        "p.test1 {\nwidth: 200px;\nborder: 1px solid #000000;\nwhite-space: nowrap;\noverflow: hidden;\ntext-overflow: clip;\n}\n\np.test2 {\nwidth: 200px;\nborder: 1px solid #000000;\nwhite-space: nowrap;\noverflow: hidden;\ntext-overflow: ellipsis;\n}",
        "p:hover {\noverflow: visible;\n}",
        "p {\nword-wrap: break-word;\n}",
        "p.test1 {\nword-break: normal;\n}\n\np.test2 {\nword-break: break-all;\n}",
        "p.test1 {\nwriting-mode: horizontal-tb;\n}\n\nspan {\nwriting-mode: vertical-rl;\n}\n\np.test2 {\nwriting-mode: vertical-rl;\n}",
        "text-overflow",
        "word-wrap",
        "word-break",
        "writing-mode",
        "white-space: nowrap;",
        "overflow: hidden;",
        "normal",
        "break-all",
        "keep-all",
        "horizontal-tb",
        "vertical-rl",
        "vertical-lr"
      ]
    },
    {
      "title": "CSS Custom Fonts",
      "summary": "The CSS @font-face Rule\nThe CSS @font-face rule allows you to define and load custom fonts for use on a webpage.\nThe font does not have to be installed on the user's computer.\nWhen you have found/bought the font you want to use, just include the font file on your web server, and it will be automatically downloaded to the user when needed.\nCommon Font Formats\nThe most widely used font formats are WOFF/WOFF2 for web pages and TTF/OTF for desktop.\nWOFF/WOFF2 (Web Open Font Format)\nWOFF/WOFF2 are optimized to reduce file size and are the ideal font format for use in web pages. It was developed in 2009, and is now a W3C Recommendation. WOFF/WOFF2 are supported by all major browsers.\nTTF (TrueType Fonts) and OTF (OpenType Fonts)\nTTF was developed in the late 1980s, by Apple. OTF was developed by Apple and Microsoft. TTF is the most common font format for both the Mac OS and Microsoft Windows operating systems. OTF is built on TTF, as a more advanced, scalable format that supports rich typesetting features. Both types are popular because of their accessibility and quality, but they are not optimized for web use.\nUse Your Custom Font\nIn the @font-face rule; first specify a name for the custom font (e.g. \"myFont\") in the font-family descriptor, then point to the font file in the src descriptor.\nThen, to use the custom font in an HTML element, refer to the name of the font (\"myFont\") through the font-family property:\nExample\nREMOVE ADS\nBold Custom Font\nYou must add another @font-face rule containing descriptors for bold text:\nExample\nThe file \"sansation_bold.woff\" is another font file, that contains the bold characters for the Sansation font.\nBrowsers will use this file whenever a piece of text with the font-family \"myFont\" should render as bold.\nTip: This way you can have many @font-face rules for the same font.\nCSS @font-face Descriptors\nThe following table lists the font descriptors that can be defined inside the @font-face rule:",
      "examples": [
        "@font-face {\nfont-family: myFont; /* set name */\nsrc: url(sansation_light.woff); /* url of the font */\n}\n\np {\nfont-family: myFont; /* use font */\n}",
        "@font-face {\nfont-family: myFont;\nsrc: url(sansation_bold.woff);\nfont-weight: bold;\n}",
        "@font-face",
        "font-family"
      ]
    },
    {
      "title": "CSS 2D Transforms",
      "summary": "CSS 2D Transforms\nThe CSS transform property applies a 2D or 3D transformation to an element. This property allows you to rotate, scale, move, and skew elements.\nMouse over the element below to see a 2D transformation:\nCSS 2D Transforms Functions\nWith the CSS transform property you can use the following 2D transformation functions:\ntranslate()\nrotate()\nscaleX()\nscaleY()\nscale()\nskewX()\nskewY()\nskew()\nmatrix()\nThe CSS translate() Function\nThe translate() function moves an element from its current position (according to the parameters given for the X-axis and the Y-axis).\nThe following example moves the <div> element 50 pixels to the right, and 100 pixels down from its current position:\nExample\nThe CSS rotate() Function\nThe rotate() function rotates an element clockwise or counter-clockwise according to a given degree.\nThe following example rotates the <div> element clockwise with 20 degrees:\nExample\nUsing negative values will rotate the element counter-clockwise.\nThe following example rotates the <div> element counter-clockwise with 20 degrees:\nExample\nREMOVE ADS\nThe CSS scale() Function\nThe scale() function increases or decreases the size of an element (according to the parameters given for the width and height).\nThe following example increases the <div> element to be two times of its original width, and three times of its original height:\nExample\nThe following example decreases the <div> element to be half of its original width and height:\nExample\nThe CSS scaleX() Function\nThe scaleX() function increases or decreases the width of an element.\nThe following example increases the <div> element to be two times of its original width:\nExample\nThe following example decreases the <div> element to be half of its original width:\nExample\nThe CSS scaleY() Function\nThe scaleY() function increases or decreases the height of an element.\nThe following example increases the <div> element to be three times of its original height:\nExample\nThe following example decreases the <div> element to be half of its original height:\nExample\nThe CSS skewX() Function\nThe skewX() function skews an element along the X-axis by the given angle.\nThe following example skews the <div> element 20 degrees along the X-axis:\nExample\nThe CSS skewY() Function\nThe skewY() function skews an element along the Y-axis by the given angle.\nThe following example skews the <div> element 20 degrees along the Y-axis:\nExample\nThe CSS skew() Function\nThe skew() function skews an element along the X and Y-axis by the given angles.\nThe following example skews the <div> element 20 degrees along the X-axis, and 10 degrees along the Y-axis:\nExample\nIf the second parameter is not specified, it has a zero value. So, the following example skews the <div> element 20 degrees along the X-axis:\nExample\nThe CSS matrix() Function\nThe matrix() function combines all the 2D transform functions into one.\nThe matrix() function take six parameters, containing mathematic functions, which allows you to rotate, scale, move (translate), and skew elements.\nThe parameters are as follow: matrix(scaleX(), skewY(), skewX(), scaleY(), translateX(), translateY())\nExample\nCSS Transform Properties\nThe following table lists all the 2D transform properties:\nCSS 2D Transform Functions",
      "examples": [
        "div {\ntransform: translate(50px, 100px);\n}",
        "div {\ntransform: rotate(20deg);\n}",
        "div {\ntransform: rotate(-20deg);\n}",
        "div {\ntransform: scale(2, 3);\n}",
        "div {\ntransform: scale(0.5, 0.5);\n}",
        "div {\ntransform: scaleX(2);\n}",
        "div {\ntransform: scaleX(0.5);\n}",
        "div {\ntransform: scaleY(3);\n}",
        "div {\ntransform: scaleY(0.5);\n}",
        "div {\ntransform: skewX(20deg);\n}",
        "div {\ntransform: skewY(20deg);\n}",
        "div {\ntransform: skew(20deg, 10deg);\n}",
        "div {\ntransform: skew(20deg);\n}",
        "div {\ntransform: matrix(1, -0.3, 0, 1, 0, 0);\n}",
        "transform",
        "translate()",
        "rotate()",
        "scaleX()",
        "scaleY()",
        "scale()",
        "skewX()",
        "skewY()",
        "skew()",
        "matrix()"
      ]
    },
    {
      "title": "CSS 3D Transforms",
      "summary": "CSS 3D Transforms\nThe CSS transform property applies a 2D or 3D transformation to an element. This property allows you to rotate, scale, move, and skew elements.\nMouse over the elements below to see the difference between a 2D and a 3D transformation:\nCSS 3D Transforms Functions\nWith the CSS transform property you can use the following 3D transformation functions:\nrotateX()\nrotateY()\nrotateZ()\nThe CSS rotateX() Function\nThe rotateX() function rotates an element around its X-axis at a given degree:\nExample\nREMOVE ADS\nThe CSS rotateY() Function\nThe rotateY() function rotates an element around its Y-axis at a given degree:\nExample\nThe CSS rotateZ() Function\nThe rotateZ() function rotates an element around its Z-axis at a given degree:\nExample\nCSS Transform Properties\nThe following table lists all the 3D transform properties:\nCSS 3D Transform Functions",
      "examples": [
        "#myDiv {\ntransform: rotateX(150deg);\n}",
        "#myDiv {\ntransform: rotateY(150deg);\n}",
        "#myDiv {\ntransform: rotateZ(90deg);\n}",
        "transform",
        "rotateX()",
        "rotateY()",
        "rotateZ()"
      ]
    },
    {
      "title": "CSS Transitions",
      "summary": "CSS Transitions\nCSS transitions allows you to change property values smoothly, over a given duration.\nMouse over the element below to see a CSS transition effect:\nThe CSS transition Property\nTo create a transition effect, you must specify the CSS property you want to add a transition to, and the duration of the transition.\nThe CSS transition property is a shorthand property for:\ntransition-property (Required)\ntransition-duration (Required)\ntransition-timing-function\ntransition-delay\nCSS Transition Example\nThe following example shows a 100px * 100px <div> element. The <div> element has specified a transition effect for the width property, with a duration of 2 seconds:\nExample\nHow to Trigger the Transition\nThe transition is triggered when there is a change in the element's properties. This often happens within pseudo-classes (:hover, :active, :focus, or :checked).\nSo, from the code above, the transition effect will start when the width property changes value.\nNow, we add a div:hover class that specifies a new value for the width property when a user mouses over the <div> element:\nExample\nNotice that when the cursor mouses out of the element, it will gradually change back to its original style.\nChange Multiple Property Values\nYou can change multiple properties by separating them by commas.\nThe following example adds a transition effect for the width, height, and background-color properties, with a duration of 2 seconds for the width, 4 seconds for the height, and 3 seconds for the background-color:\nExample\nAdd a transition effect for the width, height, and background-color properties:\nREMOVE ADS\nCSS Transition Speed Curve\nThe transition-timing-function property specifies the speed curve of the transition effect.\nThis property can have one of the following values:\nease - transition will start slow, then go fast, and end slow (this is default)\nlinear - transition will keep the same speed from start to end\nease-in - transition will start slow\nease-out - transition will end slow\nease-in-out - transition will have a slow start and end\ncubic-bezier(n,n,n,n) - lets you define your own values in a cubic-bezier function\nThe following example shows some of the different speed curves that can be used:\nExample\nSome different speed curves for transition:\nCSS Transition Delay\nThe transition-delay property specifies a delay before the transition starts.\nThe transition-delay value is defined in seconds (s) or milliseconds (ms).\nThe following example has a 1 second delay before starting:\nExample\nAdd a 1 second delay before starting:\nTransition + Transform\nThe following example combines transition and transform for a <div>:\nExample\nThe following example combines transition and transform for a button:\nExample\nMore Transition Examples\nThe CSS transition properties can be specified one by one, like this:\nExample\nor by using the shorthand property transition:\nExample\nCSS Transition Properties\nThe following table lists all the CSS transition properties:",
      "examples": [
        "div {\nwidth: 100px;\nheight: 100px;\nbackground-color: red;\ntransition: width 2s;\n}",
        "div:hover {\nwidth: 300px;\n}",
        "div {\ntransition: width 2s, height 4s, background-color 3s;\n}",
        "#div1 {transition-timing-function: linear;}\n#div2 {transition-timing-function: ease;}\n#div3 {transition-timing-function: ease-in;}\n#div4 {transition-timing-function: ease-out;}\n#div5 {transition-timing-function: ease-in-out;}",
        "div {\ntransition-delay: 1s;\n}",
        "div {\ntransition: width 2s, height 2s, background-color 2s, transform 2s;\n}",
        "button {\ntransition: background-color 1s ease-out, transform 1s ease-out;\n}",
        "div {\ntransition-property: width;\ntransition-duration: 2s;\ntransition-timing-function: linear;\ntransition-delay: 1s;\n}",
        "div {\ntransition: width 2s linear 1s;\n}",
        "transition",
        "transition-property",
        "transition-duration",
        "transition-timing-function",
        "transition-delay",
        "ease",
        "linear",
        "ease-in",
        "ease-out",
        "ease-in-out",
        "cubic-bezier(n,n,n,n)"
      ]
    },
    {
      "title": "CSS Animations",
      "summary": "CSS Animations\nCSS allows animation of HTML elements without using JavaScript!\nWhat are CSS Animations?\nAn animation lets an element gradually change from one style to another.\nYou can change as many CSS properties you want, as many times as you want.\nTo use CSS animation, you must specify some keyframes for the animation.\nKeyframes hold what styles the element will have at certain times.\nCSS animation-name and animation-duration\nThe animation-name property specifies a name for the animation.\nThe animation-duration property defines how long an animation should take to complete. If this property is not specified, no animation will occur, because the default value is 0s (0 seconds).\nCSS @keyframes Rule\nWhen you specify CSS styles inside the @keyframes rule, the animation will gradually change from the current style to the new style at certain times.\nTo get an animation to work, you must bind the animation to an element.\nThe following example binds the \"myAnimation\" animation to the <div> element. The animation will last for 4 seconds, and it will gradually change the background-color of the <div> element from \"red\" to \"yellow\":\nExample\nIn the example above we have used the keywords \"from\" and \"to\" in the @keyframes rule, which represents 0% (start) and 100% (complete).\nIt is also possible to use percent. By using percent, you can add as many style changes as you like.\nThe following example will change the background-color of the <div> element when the animation is 25% complete, 50% complete, and again when the animation is 100% complete:\nExample\nThe following example will change both the background-color and the position of the <div> element when the animation is 25% complete, 50% complete, and again when the animation is 100% complete:\nExample\nREMOVE ADS\nCSS animation-delay Property\nThe animation-delay property specifies a delay for the start of an animation.\nThe following example has a 2 seconds delay before starting the animation:\nExample\nNegative values are also allowed. If using negative values, the animation will start as if it had already been playing for N seconds.\nIn the following example, the animation will start as if it had already been playing for 2 seconds:\nExample\nCSS animation-iteration-count Property\nThe animation-iteration-count property specifies the number of times an animation should run.\nThe following example will run the animation 3 times before it stops:\nExample\nThe following example uses the value \"infinite\" to make the animation continue for ever:\nExample\nCSS animation-direction Property\nThe animation-direction property specifies whether an animation should be played forwards, backwards or in alternate cycles.\nThe animation-direction property can have the following values:\nnormal - The animation is played as normal (forwards). This is default\nreverse - The animation is played in reverse direction (backwards)\nalternate - The animation is played forwards first, then backwards\nalternate-reverse - The animation is played backwards first, then forwards\nThe following example will run the animation in reverse direction (backwards):\nExample\nThe following example uses the value \"alternate\" to make the animation run forwards first, then backwards:\nExample\nThe following example uses the value \"alternate-reverse\" to make the animation run backwards first, then forwards:\nExample\nCSS animation-timing-function Property\nThe animation-timing-function property specifies the speed curve of the animation.\nThe animation-timing-function property can have the following values:\nease - Specifies an animation with a slow start, then fast, then end slowly (this is default)\nlinear - Specifies an animation with the same speed from start to end\nease-in - Specifies an animation with a slow start\nease-out - Specifies an animation with a slow end\nease-in-out - Specifies an animation with a slow start and end\ncubic-bezier(n,n,n,n) - Lets you define your own values in a cubic-bezier function\nThe following example shows some of the different speed curves that can be used:\nExample\nCSS animation-fill-mode Property\nCSS animations do not affect an element before the first keyframe is played or after the last keyframe is played. The animation-fill-mode property can override this behavior.\nThe animation-fill-mode property specifies a style for the target element when the animation is not playing (before it starts, after it ends, or both).\nThe animation-fill-mode property can have the following values:\nnone - Default value. Animation will not apply any styles to the element before or after it is executing\nforwards - The element will retain the style values that is set by the last keyframe (depends on animation-direction and animation-iteration-count)\nbackwards - The element will get the style values that is set by the first keyframe (depends on animation-direction), and retain this during the animation-delay period\nboth - The animation will follow the rules for both forwards and backwards, extending the animation properties in both directions\nThe following example lets the <div> element retain the style values from the last keyframe when the animation ends:\nExample\nThe following example lets the <div> element get the style values set by the first keyframe before the animation starts (during the animation-delay period):\nExample\nThe following example lets the <div> element get the style values set by the first keyframe before the animation starts, and retain the style values from the last keyframe when the animation ends:\nExample\nCSS Animation Shorthand Property\nThe example below uses six of the animation properties:\nExample\nThe same animation effect as above can be achieved by using the shorthand animation property:\nExample\nCSS Animation Properties\nThe following table lists the @keyframes rule and all the CSS animation properties:",
      "examples": [
        "/* The animation code */\n@keyframes myAnimation {\nfrom {background-color: red;}\nto {background-color: yellow;}\n}\n\n/* The element to apply the animation to */\ndiv {\nwidth: 100px;\nheight: 100px;\nbackground-color: red;\nanimation-name: myAnimation;\nanimation-duration: 4s;\n}",
        "@keyframes myAnimation {\n0%   {background-color: red;}\n25%  {background-color: yellow;}\n50%  {background-color: blue;}\n100% {background-color: green;}\n}\n\ndiv {\nwidth: 100px;\nheight: 100px;\nbackground-color: red;\nanimation-name: myAnimation;\nanimation-duration: 4s;\n}",
        "@keyframes myAnimation {\n0%   {background-color:red; left:0px; top:0px;}\n25%  {background-color:yellow; left:200px; top:0px;}\n50%  {background-color:blue; left:200px; top:200px;}\n75%  {background-color:green; left:0px; top:200px;}\n100% {background-color:red; left:0px; top:0px;}\n}\n\ndiv {\nwidth: 100px;\nheight: 100px;\nposition: relative;\nbackground-color: red;\nanimation-name: myAnimation;\nanimation-duration: 4s;\n}",
        "div {\nwidth: 100px;\nheight: 100px;\nposition: relative;\nbackground-color: red;\nanimation-name: myAnimation;\nanimation-duration: 4s;\nanimation-delay: 2s;\n}",
        "div {\nwidth: 100px;\nheight: 100px;\nposition: relative;\nbackground-color: red;\nanimation-name: myAnimation;\nanimation-duration: 4s;\nanimation-delay: -2s;\n}",
        "div {\nwidth: 100px;\nheight: 100px;\nposition: relative;\nbackground-color: red;\nanimation-name: myAnimation;\nanimation-duration: 4s;\nanimation-iteration-count: 3;\n}",
        "div {\nwidth: 100px;\nheight: 100px;\nposition: relative;\nbackground-color: red;\nanimation-name: myAnimation;\nanimation-duration: 4s;\nanimation-iteration-count: infinite;\n}",
        "div {\nwidth: 100px;\nheight: 100px;\nposition: relative;\nbackground-color: red;\nanimation-name: myAnimation;\nanimation-duration: 4s;\nanimation-iteration-count: 2;\nanimation-direction: alternate;\n}",
        "div {\nwidth: 100px;\nheight: 100px;\nposition: relative;\nbackground-color: red;\nanimation-name: myAnimation;\nanimation-duration: 4s;\nanimation-iteration-count: 2;\nanimation-direction: alternate-reverse;\n}",
        "#div1 {animation-timing-function: linear;}\n#div2 {animation-timing-function: ease;}\n#div3 {animation-timing-function: ease-in;}\n#div4 {animation-timing-function: ease-out;}\n#div5 {animation-timing-function: ease-in-out;}",
        "div {\nwidth: 100px;\nheight: 100px;\nbackground: red;\nposition: relative;\nanimation-name: myAnimation;\nanimation-duration: 3s;\nanimation-fill-mode: forwards;\n}",
        "div {\nwidth: 100px;\nheight: 100px;\nbackground: red;\nposition: relative;\nanimation-name: myAnimation;\nanimation-duration: 3s;\nanimation-delay: 2s;\nanimation-fill-mode: backwards;\n}",
        "div {\nwidth: 100px;\nheight: 100px;\nbackground: red;\nposition: relative;\nanimation-name: myAnimation;\nanimation-duration: 3s;\nanimation-delay: 2s;\nanimation-fill-mode: both;\n}",
        "div {\nanimation-name: myAnimation;\nanimation-duration: 5s;\nanimation-timing-function: linear;\nanimation-delay: 2s;\nanimation-iteration-count: infinite;\nanimation-direction: alternate;\n}",
        "div {\nanimation: myAnimation 5s linear 2s infinite alternate;\n}",
        "animation-name",
        "animation-duration",
        "@keyframes",
        "animation-delay",
        "animation-iteration-count",
        "animation-direction",
        "normal",
        "reverse",
        "alternate",
        "alternate-reverse",
        "animation-timing-function",
        "ease",
        "linear",
        "ease-in",
        "ease-out",
        "ease-in-out",
        "cubic-bezier(n,n,n,n)",
        "animation-fill-mode",
        "none",
        "forwards",
        "backwards",
        "both",
        "animation"
      ]
    },
    {
      "title": "CSS Tooltip",
      "summary": "CSS Tooltip\nA CSS tooltip is used to specify extra information about something when the user moves the mouse pointer over an element:\nCSS Create a Basic Tooltip\nCreate a tooltip that appears when the user moves the mouse over an element:\nExample\nExample Explained\nHTML:\nUse a container element (like <div>) and add the \"tooltip\" class to it. When the user mouse over this <div>, it will show the tooltip text.\nThe tooltip text is placed inside an inline element (like <span>) with class=\"tooltiptext\".\nCSS:\nThe tooltip class use position:relative, which is needed to position the tooltip text (position:absolute). Tip: See examples below on how to position the tooltip.\nThe tooltiptext class holds the actual tooltip text. It is hidden by default, and will be visible on hover.\nThe :hover selector is used to show the tooltip text when the user moves the mouse over the <div> with class=\"tooltip\".\nREMOVE ADS\nPositioning the Tooltip\nYou can position the tooltip as you like. Here we will show how to position the tooltip to the left, right, top and bottom.\nRight- and Left-aligned Tooltip\nIn this example, the tooltip is placed to the right (left:105%) of the \"hoverable\" text (<div>). Also note that top:-5px is used to place it in the middle of its container element. We use the number 5 because the tooltip text has a top and bottom padding of 5px. If you increase its padding, also increase the value of the top property to ensure that it stays in the middle (if this is something you want). The same applies if you want the tooltip placed to the left.\nExample\nRight-aligned tooltip:\nResult:\nExample\nLeft-aligned tooltip:\nResult:\nTop- and Bottom-aligned Tooltip\nIf you want the tooltip to appear on top or on the bottom, see examples below. Note that we use the margin-left property with a value of minus 65 pixels. This is to center the tooltip above/below the hoverable text. It is set to the half of the tooltip's width (130/2 = 65).\nExample\nTop-aligned tooltip:\nResult:\nExample\nBottom-aligned tooltip:\nResult:\nTooltip Arrows\nTo create an arrow that should appear from a specific side of the tooltip, add \"empty\" content after tooltip, with the pseudo-element class ::after together with the content property. The arrow itself is created using borders. This will make the tooltip look like a speech bubble.\nThis example demonstrates how to add an arrow to the bottom of the tooltip:\nBottom Arrow\nResult:\nExample Explained\nPosition the arrow inside the tooltip: top: 100% will place the arrow at the bottom of the tooltip. left: 50% will center the arrow.\nNote: The border-width property specifies the size of the arrow. If you change this, also change the margin-left value to the same. This will keep the arrow centered.\nThe border-color is used to transform the content into an arrow. We set the top border to black, and the rest to transparent. If all sides were black, you would end up with a black square box.\nThis example demonstrates how to add an arrow to the top of the tooltip. Notice that we set the bottom border color this time:\nTop Arrow\nResult:\nThis example demonstrates how to add an arrow to the left of the tooltip:\nLeft Arrow\nResult:\nThis example demonstrates how to add an arrow to the right of the tooltip:\nRight Arrow\nResult:\nFade-in Tooltip\nIf you want a tooltip that fades in, use the CSS transition property and the opacity property, and go from being completely invisible to 100% visible, in a number of specified seconds (2 second in our example):\nExample",
      "examples": [
        "<style>\n/* Tooltip container */\n.tooltip {\nposition: relative;\ndisplay: inline-block;\nborder-bottom: 1px dotted black; /* Add dots under the hoverable text */\ncursor: pointer;\n}\n\n/* Tooltip text */\n.tooltiptext {\nvisibility: hidden; /* Hidden by default */\nwidth: 130px;\nbackground-color: black;\ncolor: #fffffff;\ntext-align: center;\npadding: 5px 0;\nborder-radius: 6px;\nposition: absolute;\nz-index: 1; /* Ensure tooltip is displayed above content */\n}\n\n/* Show the tooltip text on hover */\n.tooltip:hover .tooltiptext {\nvisibility: visible;\n}\n</style>\n\n<div class=\"tooltip\">Hover over me\n<span class=\"tooltiptext\">Some tooltip text</span>\n</div>",
        ".tooltiptext {\ntop: -5px;\nleft: 105%;\n}",
        ".tooltiptext {\ntop: -5px;\nright: 105%;\n}",
        ".tooltiptext {\nwidth: 130px;\nbottom: 100%;\nleft: 65%;\nmargin-left: -65px; /* Use half of the width (130/2 = 65), to center the tooltip */\n}",
        ".tooltiptext {\nwidth: 130px;\ntop: 100%;\nleft: 50%;\nmargin-left: -65px; /* Use half of the width (130/2 = 65), to center the tooltip */\n}",
        ".tooltiptext::after {\ncontent: \" \";\nposition: absolute;\ntop: 100%; /* At the bottom of the tooltip */\nleft: 50%;\nmargin-left: -5px;\nborder-width: 5px;\nborder-style: solid;\nborder-color: black transparent transparent transparent;\n}",
        ".tooltiptext::after {\ncontent: \" \";\nposition: absolute;\nbottom: 100%;  /* At the top of the tooltip */\nleft: 50%;\nmargin-left: -5px;\nborder-width: 5px;\nborder-style: solid;\nborder-color: transparent transparent black transparent;\n}",
        ".tooltiptext::after {\ncontent: \" \";\nposition: absolute;\ntop: 50%;\nright: 100%; /* To the left of the tooltip */\nmargin-top: -5px;\nborder-width: 5px;\nborder-style: solid;\nborder-color: transparent black transparent transparent;\n}",
        ".tooltiptext::after {\ncontent: \" \";\nposition: absolute;\ntop: 50%;\nleft: 100%; /* To the right of the tooltip */\nmargin-top: -5px;\nborder-width: 5px;\nborder-style: solid;\nborder-color: transparent transparent transparent black;\n}",
        ".tooltiptext {\nopacity: 0;\ntransition: opacity 2s;\n}\n\n.tooltip:hover .tooltiptext {\nopacity: 1;\n}",
        "\"tooltip\"",
        "class=\"tooltiptext\"",
        "tooltip",
        "position:relative",
        "position:absolute",
        "tooltiptext",
        ":hover",
        "class=\"tooltip\"",
        "left:105%",
        "top:-5px",
        "top",
        "margin-left",
        "::after",
        "content",
        "top: 100%",
        "left: 50%",
        "border-width",
        "border-color",
        "transition",
        "opacity"
      ]
    },
    {
      "title": "CSS Styling Images",
      "summary": "Learn how to style images using CSS.\nRounded Images\nYou can use the border-radius property to create rounded images:\nExample\nRounded Image:\nExample\nCircled Image:\nTip: Look at the CSS Image Shapes chapter to learn how to shape (clip) images to circles, ellipses and polygons.\nThumbnail Images\nUse the border property to create thumbnail images:\nExample\nThumbnail image as a link:\nExample\nREMOVE ADS\nResponsive Images\nResponsive images will automatically adjust to fit the size of the screen.\nResize the browser window to see the effect:\nIf you want an image to scale down if it has to, but never scale up to be larger than its original size, add the following:\nExample\nTip: Read more about Responsive Web Design in our CSS RWD Tutorial.\nPolaroid Images / Cards\nCinque Terre\nNorthern Lights\nExample\nCSS Image Opacity\nThe opacity property specifies the opacity/transparency of an element.\nThe opacity property can take a value from 0.0 - 1.0:\n0.0 - The element will be completely transparent\n0.5 - The element will be 50% transparent\n1.0 - Default. The element will be fully opaque\nopacity 0.2\nopacity 0.5\nopacity 1.0\n(default)\nExample\nTip: Look at the CSS Image Filters chapter to learn how to use the filter property to add visual effects (like opacity, blur, saturation, etc.) to images.\nImage Text\nHow to position text in an image:\nExample\nTry it Yourself:\nImage Hover Overlay\nCreate an overlay effect on hover:\nExample\nFade in text:\nExample\nFade in a box:\nExample\nSlide in (top):\nExample\nSlide in (bottom):\nExample\nSlide in (left):\nExample\nSlide in (right):\nFlip an Image\nMove your mouse over the image:\nExample\nResponsive Image Gallery\nCSS can be used to create image galleries. This example use media queries to re-arrange the images on different screen sizes. Resize the browser window to see the effect:\nExample\nTip: Read more about Responsive Web Design in our CSS RWD Tutorial.\nImage Modal (Advanced)\nThis is an example to demonstrate how CSS and JavaScript can work together.\nFirst, use CSS to create a modal window (dialog box), and hide it by default.\nThen, use a JavaScript to show the modal window and to display the image inside the modal, when a user clicks on the image:\nExample",
      "examples": [
        "img {\nborder-radius: 8px;\n}",
        "img {\nborder-radius: 50%;\n}",
        "img {\nborder: 1px solid #ddd;\nborder-radius: 4px;\npadding: 5px;\nwidth: 150px;\n}",
        "img {\nborder: 1px solid #ddd;\nborder-radius: 4px;\npadding: 5px;\nwidth: 150px;\n}\n\nimg:hover {\nbox-shadow: 0 0 2px 1px rgba(0, 140, 186, 0.5);\n}",
        "img {\nmax-width: 100%;\nheight: auto;\n}",
        "div.polaroid {\nwidth: 80%;\nbackground-color: white;\nbox-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n\nimg {width: 100%}\n\ndiv.container {\ntext-align: center;\npadding: 10px 20px;\n}",
        "img {\nopacity: 0.5;\n}",
        "img:hover {\ntransform: scaleX(-1);\n}",
        "@media only screen and (max-width: 700px) {\ndiv.gallery-item {\nwidth: 45%;\n}\n}\n\n@media only screen and (max-width: 500px) {\ndiv.gallery-item {\nwidth: 100%;\n}\n}",
        "// Get the modal\nvar modal = document.getElementById('myModal');\n\n// Get the image and insert it inside the modal - use its \"alt\" text as a caption\nvar img = document.getElementById('myImg');\nvar modalImg = document.getElementById(\"img01\");\nvar captionText = document.getElementById(\"caption\");\nimg.onclick = function(){\nmodal.style.display = \"block\";\nmodalImg.src = this.src;\ncaptionText.innerHTML = this.alt;\n}\n\n// Get the <span> element that closes the modal\nvar span = document.getElementsByClassName(\"close\")[0];\n\n// When the user clicks on <span> (x), close the modal\nspan.onclick = function() {\nmodal.style.display = \"none\";\n}",
        "border-radius",
        "border",
        "opacity"
      ]
    },
    {
      "title": "CSS Centering Images",
      "summary": "Learn how to center an image horizontally and vertically with CSS.\nCenter an Image Horizontally in Two Ways\n1. Using margin: auto\nOne way to center an image horizontally on a page is to use margin: auto.\nSince the <img> element is an inline element (and margin: auto does not have any effect on inline elements) we also must convert the image to a block element, with display: block.\nIn addition, we have to define a width. The width of the image must be smaller than the width of the page.\nHere is a horizontally centered image using margin: auto:\nExample\n2. Using display: flex\nAnother way to center an image horizontally on a page is to use display: flex.\nHere, we put the <img> element inside a <div> container.\nWe add the following CSS to the div container:\ndisplay: flex\njustify-content: center (centers the image horizontally in the div container)\nThen, we set a width for the image. The width of the image must be smaller than the width of the page.\nHere is a horizontally centered image using display: flex:\nExample\nREMOVE ADS\nCenter an Image Vertically\ndisplay: flex is also used to center an image vertically on a page.\nLet's say we have a <div> container that is 600px high.\nNow we want to center the image vertically in the div container.\nHere, we also put the <img> element inside a <div> container.\nWe add the following CSS to the div container:\ndisplay: flex\njustify-content: center (centers the image horizontally in the div container)\nalign-items: center (centers the image vertically in the div container)\nheight: 600px (the height of the div container)\nThen, we set a height for the image (must be smaller than the height of the container).\nHere is a vertically centered image:\nExample",
      "examples": [
        "img {\ndisplay: block;\nmargin: auto;\nwidth: 50%;\n}",
        "div {\ndisplay: flex;\njustify-content: center;\n}\n\nimg {\nwidth: 50%;\n}",
        "div {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\nheight: 600px;\nborder: 1px solid black;\n}\n\nimg {\nwidth: 50%;\nheight: 50%;\n}",
        "margin: auto",
        "display: block",
        "width",
        "display: flex",
        "justify-content: center",
        "align-items: center",
        "height: 600px",
        "height"
      ]
    },
    {
      "title": "CSS Image Filter Effects",
      "summary": "The CSS filter property is used to add visual effects to elements.\nCSS Filters\nThe CSS filter property is used to add visual effects (like blur and saturation) to elements.\nWithin the filter property, you can use the following CSS functions:\nblur()\nbrightness()\ncontrast()\ndrop-shadow()\ngrayscale()\nhue-rotate()\ninvert()\nopacity()\nsaturate()\nsepia()\nThe CSS blur() Function\nThe blur() filter function applies a blur effect to an element. A larger value will create more blur.\nExample\nApply different blur effects to <img> elements:\nREMOVE ADS\nThe CSS brightness() Function\nThe brightness() filter function adjusts the brightness of an element.\nValues over 100% will provide brighter results\nValues under 100% will provide darker results\n0% will make the image completely black\n100% is default, and represents the original image\nExample\nMake an image brighter and darker than the original:\nThe CSS contrast() Function\nThe contrast() filter function adjusts the contrast of an element.\nValues over 100% increases the contrast\nValues under 100% decreases the contrast\n0% will make the image completely gray\n100% is default, and represents the original image\nExample\nIncrease and decrease the contrast for an image:\nThe CSS drop-shadow() Function\nThe drop-shadow() filter function applies a drop-shadow effect to an image.\nExample\nAdd different drop-shadow effects to an image:\nThe CSS grayscale() Function\nThe grayscale() filter function converts an image to grayscale.\n100% (or 1) will make the image completely grayscale\n0% (or 0) will have no effect\nExample\nSet various grayscale for an image:\nThe CSS hue-rotate() Function\nThe hue-rotate() filter function applies a color rotation to an element.\nThis function applies a hue rotation on the image. The value defines the number of degrees around the color circle the image will be adjusted. A positive hue rotation increases the hue value, while a negative rotation decreases the hue value. 0deg represents the original image.\nExample\nSet various color rotations for an image:\nThe CSS invert() Function\nThe invert() filter function inverts the color of an image.\n100% (or 1) will make the image completely inverted\n0% (or 0) will have no effect\nExample\nInvert the colors of an image:\nThe CSS opacity() Function\nThe opacity() filter function applies an opacity effect to an element.\n100% (or 1) will have no effect\n50% (or 0.5) will make the element 50% transparent\n0% (or 0) will make the element completely transparent\nExample\nSet various opacity for an image:\nThe CSS saturate() Function\nThe saturate() filter function adjusts the saturation (color intensity) of an element.\n0% (or 0) will make the element completely unsaturated\n100% (or 1) will have no effect\n200% (or 2) will make the element super saturated\nExample\nSet various saturations for an image:\nThe CSS sepia() Function\nThe sepia() filter function converts an image to sepia (a warmer, more brown/yellow color).\n100% (or 1) will make the image completely sepia\n0% (or 0) will have no effect\nExample\nSet various sepia for an image:\nCSS Filter Functions\nThe following table lists the CSS filter functions:",
      "examples": [
        "#img1 {\nfilter: blur(2px);\n}\n\n#img2 {\nfilter: blur(6px);\n}",
        "#img1 {\nfilter: brightness(150%);\n}\n\n#img2 {\nfilter: brightness(50%);\n}",
        "#img1 {\nfilter: contrast(150%);\n}\n\n#img2 {\nfilter: contrast(50%);\n}",
        "#img1 {\nfilter: drop-shadow(8px 8px 10px gray);\n}\n\n#img2 {\nfilter: drop-shadow(10px 10px 7px lightblue);\n}",
        "#img1 {\nfilter: grayscale(1);\n}\n\n#img2 {\nfilter: grayscale(60%);\n}\n\n#img3 {\nfilter: grayscale(0.4);\n}",
        "#img1 {\nfilter: hue-rotate(200deg);\n}\n\n#img2 {\nfilter: hue-rotate(90deg);\n}\n\n#img3 {\nfilter: hue-rotate(-90deg);\n}",
        "#img1 {\nfilter: invert(0.3);\n}\n\n#img2 {\nfilter: invert(70%);\n}\n\n#img3 {\nfilter: invert(100%);\n}",
        "#img1 {\nfilter: opacity(80%);\n}\n\n#img2 {\nfilter: opacity(50%);\n}\n\n#img3 {\nfilter: opacity(0.2);\n}",
        "#img1 {\nfilter: saturate(0);\n}\n\n#img2 {\nfilter: saturate(100%);\n}\n\n#img3 {\nfilter: saturate(200%);\n}",
        "#img1 {\nfilter: sepia(1);\n}\n\n#img2 {\nfilter: sepia(60%);\n}\n\n#img3 {\nfilter: sepia(0.4);\n}",
        "filter",
        "blur()",
        "brightness()",
        "contrast()",
        "drop-shadow()",
        "grayscale()",
        "hue-rotate()",
        "invert()",
        "opacity()",
        "saturate()",
        "sepia()"
      ]
    },
    {
      "title": "CSS Image Shapes",
      "summary": "With CSS it is easy to shape (clip) images to circles, ellipses and polygons.\nThe CSS clip-path Property\nThe clip-path property lets you clip an element to a basic shape.\nThe CSS circle() Function\nThe circle() function defines a circle with a radius and a position.\nThis function is used within the clip-path property.\nHere we clip an image to a circle with 50% radius:\nExample\nClip an image to a circle with 50% radius:\nWe can also specify the center of the circle. This can be a length or percentage value. It can also be a value such as left, right, top, or bottom. The default value is center.\nHere we clip an image to a circle with 50% radius and position the center of the circle to the right:\nExample\nClip an image to a circle with 50% radius and position the center of the circle to the right:\nThe CSS shape-outside Property\nThe shape-outside property lets you define a shape for the wrapping of the inline content.\nThe circle() function is also used within the shape-outside property.\nHere we clip an image to a circle with 40% radius, and set the shape-outside to a circle with 45% radius (to shape the text):\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla ac laoreet quam, id aliquet nisl. Etiam id eros ligula. Aenean euismod, enim sed mollis feugiat, magna massa cursus leo, ut maximus metus eros non ante. Praesent eget tincidunt mauris, ut euismod ipsum. In hac habitasse platea dictumst. In dapibus tortor magna, elementum elementum neque sagittis id. Integer vestibulum semper dui, quis finibus libero elementum nec. Fusce ultricies lectus a eros interdum, efficitur iaculis nibh varius. Praesent sed ex bibendum, fermentum tortor nec, tincidunt augue. Maecenas in lobortis ligula, at viverra velit. Donec facilisis blandit purus sed efficitur. Duis est augue, bibendum quis bibendum sed, feugiat vel eros. Quisque ut nisi sed erat malesuada euismod. Aliquam feugiat erat eget sodales imperdiet. Ut vel tortor auctor, rutrum lectus a, tempor nunc. Vivamus nec elit ornare, dictum urna sollicitudin, ornare diam. Nullam dictum arcu vitae odio ultrices iaculis.\nExample\nUse of circle(), clip-path and shape-outside:\nREMOVE ADS\nThe CSS ellipse() Function\nThe ellipse() function defines an ellipse with two radii x and y.\nThis function is used within the clip-path property and the shape-outside property.\nHere we clip an image to an ellipse with 50% radius x and 35% radius y:\nExample\nClip an image to an ellipse with 50% radius x and 35% radius y:\nWe can also specify the center of the ellipse. This can be a length or percentage value. It can also be a value such as left, right, top, or bottom. The default value is center.\nHere we clip an image to an ellipse with 50% radius x and 35% radius y, and position the center of the ellipse to the right:\nExample\nClip an image to an ellipse with 50% radius x and 35% radius y, and position the center of the ellipse to the right:\nThe shape-outside Property and ellipse()\nHere we clip an image to an ellipse with 40% radius x and 50% radius y, and set the shape-outside to an ellipse with 45% radius x and 50% radius y (to shape the text):\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla ac laoreet quam, id aliquet nisl. Etiam id eros ligula. Aenean euismod, enim sed mollis feugiat, magna massa cursus leo, ut maximus metus eros non ante. Praesent eget tincidunt mauris, ut euismod ipsum. In hac habitasse platea dictumst. In dapibus tortor magna, elementum elementum neque sagittis id. Integer vestibulum semper dui, quis finibus libero elementum nec. Fusce ultricies lectus a eros interdum, efficitur iaculis nibh varius. Praesent sed ex bibendum, fermentum tortor nec, tincidunt augue. Maecenas in lobortis ligula, at viverra velit. Donec facilisis blandit purus sed efficitur. Duis est augue, bibendum quis bibendum sed, feugiat vel eros. Quisque ut nisi sed erat malesuada euismod. Aliquam feugiat erat eget sodales imperdiet. Ut vel tortor auctor, rutrum lectus a, tempor nunc. Vivamus nec elit ornare, dictum urna sollicitudin, ornare diam. Nullam dictum arcu vitae odio ultrices iaculis.\nExample\nUse of ellipse(), clip-path and shape-outside:\nThe CSS polygon() Function\nThe polygon() function defines a polygon.\nThis function contains points that define the polygon. This can be a length or percentage value. Each point is a pair of x and y coordinates. 0 0 defines the left top corner and 100% 100% defines the right bottom corner.\nThe polygon() function is used within the clip-path property and the shape-outside property.\nHere we clip an image to a polygon:\nExample\nClip an image to a polygon:\nCSS Properties and Functions\nThe following table lists the CSS properties and functions used in this chapter:",
      "examples": [
        "img {\nclip-path: circle(50%);\n}",
        "img {\nclip-path: circle(50% at right);\n}",
        "img {\nfloat: left;\nclip-path: circle(40%);\nshape-outside: circle(45%);\n}",
        "img {\nclip-path: ellipse(50% 35%);\n}",
        "img {\nclip-path: ellipse(50% 35% at right);\n}",
        "img {\nfloat: left;\nclip-path: ellipse(40% 50%);\nshape-outside: ellipse(45% 50%);\n}",
        "img {\nclip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);\n}",
        "clip-path",
        "circle()",
        "shape-outside",
        "ellipse()",
        "polygon()"
      ]
    },
    {
      "title": "CSS The object-fit Property",
      "summary": "The CSS object-fit property is used to specify how an <img> or <video> should be resized to fit its container.\nThe CSS object-fit Property\nThe CSS object-fit property is used to specify how an <img> or <video> should be resized to fit its container.\nThis property tells the content to fill the container in a variety of ways; such as \"preserve that aspect ratio\" or \"stretch up and take up as much space as possible\".\nLook at the following image from Paris. This image is 400 pixels wide and 300 pixels high:\nHowever, if we style the image above to be half its width (200 pixels) and same height (300 pixels), it will look like this:\nExample\nWe see that the image is being squished to fit the container of 200x300 pixels (its original aspect ratio is destroyed).\nHere is where the object-fit property comes in. The object-fit property can take one of the following values:\nfill - This is default. The image is resized to fill the given dimension. If necessary, the image will be stretched or squished to fit\ncontain - The image keeps its aspect ratio, but is resized to fit within the given dimension\ncover - The image keeps its aspect ratio and fills the given dimension. The image will be clipped to fit\nnone - The image is not resized\nscale-down - the image is scaled down to the smallest version of none or contain\nUsing object-fit: cover;\nIf we use object-fit: cover; the image keeps its aspect ratio and fills the given dimension. The image will be clipped to fit:\nExample\nREMOVE ADS\nUsing object-fit: contain;\nIf we use object-fit: contain; the image keeps its aspect ratio, but is resized to fit within the given dimension:\nExample\nUsing object-fit: fill;\nIf we use object-fit: fill; the image is resized to fill the given dimension. If necessary, the image will be stretched or squished to fit:\nExample\nUsing object-fit: none;\nIf we use object-fit: none; the image is not resized:\nExample\nUsing object-fit: scale-down;\nIf we use object-fit: scale-down; the image is scaled down to the smallest version of none or contain:\nExample\nAnother Example\nHere we have two images and we want them to fill the width of 50% of the browser window and 100% of the height.\nIn the following example we do NOT use object-fit, so when we resize the browser window, the aspect ratio of the images will be destroyed:\nExample\nIn the next example, we use object-fit: cover;, so when we resize the browser window, the aspect ratio of the images is preserved:\nExample\nCSS object-fit More Examples\nThe following example demonstrates all the possible values of the object-fit property in one example:\nExample\nCSS Object-* Properties\nThe following table lists the CSS object-* properties:",
      "examples": [
        "img {\nwidth: 200px;\nheight: 300px;\n}",
        "img {\nwidth: 200px;\nheight: 300px;\nobject-fit: cover;\n}",
        "img {\nwidth: 200px;\nheight: 300px;\nobject-fit: contain;\n}",
        "img {\nwidth: 200px;\nheight: 300px;\nobject-fit: fill;\n}",
        "img {\nwidth: 200px;\nheight: 300px;\nobject-fit: none;\n}",
        "img {\nwidth: 200px;\nheight: 300px;\nobject-fit: scale-down;\n}",
        ".fill {object-fit: fill;}\n.contain {object-fit: contain;}\n.cover {object-fit: cover;}\n.scale-down {object-fit: scale-down;}\n.none {object-fit: none;}",
        "object-fit",
        "fill",
        "contain",
        "cover",
        "none",
        "scale-down",
        "object-fit: cover;",
        "object-fit: contain;",
        "object-fit: fill;",
        "object-fit: none;",
        "object-fit: scale-down;"
      ]
    },
    {
      "title": "CSS The object-position Property",
      "summary": "The CSS object-position property is used to specify how an <img> or <video> should be positioned within its container.\nThe Image\nLook at the following image from Paris, which is 400x300 pixels:\nNext, we use object-fit: cover; to keep the aspect ratio and to fill the given dimension. However, the image will be clipped to fit, like this:\nExample\nREMOVE ADS\nUsing the object-position Property\nLet's say that the part of the image that is shown, is not positioned as we want. To position the image, we will use the object-position property.\nHere we position the image so that the great old building is in center:\nExample\nHere we will use the object-position property to position the image so that the famous Eiffel Tower is in center:\nExample\nCSS Object-* Properties\nThe following table lists the CSS object-* properties:",
      "examples": [
        "img {\nwidth: 200px;\nheight: 300px;\nobject-fit: cover;\n}",
        "img {\nwidth: 200px;\nheight: 300px;\nobject-fit: cover;\nobject-position: 80% 100%;\n}",
        "img {\nwidth: 200px;\nheight: 300px;\nobject-fit: cover;\nobject-position: 15% 100%;\n}",
        "object-position",
        "object-fit: cover;"
      ]
    },
    {
      "title": "CSS Masking",
      "summary": "With CSS masking you create a mask layer to place over an element to partially or fully hide portions of the element.\nThe CSS mask-image Property\nThe CSS mask-image property specifies a mask layer image.\nThe mask layer image can be a PNG image, an SVG image, a CSS gradient, or an SVG <mask> element.\nUse an Image as the Mask Layer\nTo use a PNG or an SVG image as the mask layer, use a url() value to pass in the mask layer image.\nThe mask image needs to have a transparent or semi-transparent area. Black indicates fully transparent.\nHere is the mask image (a PNG image) we will use:\nHere is an image from Cinque Terre, in Italy:\nNow, we apply the mask image (the PNG image above) as the mask layer for the image from Cinque Terre, Italy:\nExample\nHere is the source code:\nExample Explained\nThe mask-image property specifies the image to be used as a mask layer for an element.\nThe mask-repeat property specifies if or how a mask image will be repeated. The no-repeat value indicates that the mask image will not be repeated (the mask image will only be shown once).\nAnother Example\nIf we omit the mask-repeat property, the mask image will be repeated all over the image from Cinque Terre, Italy:\nExample\nHere is the source code:\nREMOVE ADS\nUse Gradients as the Mask Layer\nCSS linear and radial gradients can also be used as mask images.\nLinear Gradient Examples\nHere, we use a linear-gradient as the mask layer for our image. This linear gradient goes from top (black) to bottom (transparent):\nExample\nUse a linear gradient as a mask layer:\nHere, we use a linear-gradient along with text masking as the mask layer for our image:\nThe Cinque Terre is a coastal area within Liguria, in the northwest of Italy. It lies in the west of La Spezia Province, and comprises five villages: Monterosso al Mare, Vernazza, Corniglia, Manarola, and Riomaggiore.\nThe Cinque Terre is a coastal area within Liguria, in the northwest of Italy. It lies in the west of La Spezia Province, and comprises five villages: Monterosso al Mare, Vernazza, Corniglia, Manarola, and Riomaggiore.\nThe Cinque Terre is a coastal area within Liguria, in the northwest of Italy. It lies in the west of La Spezia Province, and comprises five villages: Monterosso al Mare, Vernazza, Corniglia, Manarola, and Riomaggiore.\nExample\nUse a linear gradient along with text masking as a mask layer:\nRadial Gradient Examples\nHere, we use a radial-gradient (shaped as a circle) as the mask layer for our image:\nExample\nUse a radial gradient as a mask layer (a circle):\nHere, we use a radial-gradient (shaped as an ellipse) as the mask layer for our image:\nExample\nUse another radial gradient as a mask layer (an ellipse):\nUse SVG as the Mask Layer\nThe SVG <mask> element can be used inside an SVG graphic to create masking effects.\nHere, we use the SVG <mask> element to create different mask layers for our image:\nExample\nAn SVG mask layer (formed as a triangle):\nExample\nAn SVG mask layer (formed as a star):\nExample\nAn SVG mask layer (formed as circles):\nCSS Masking Properties\nThe following table lists all the CSS masking properties:",
      "examples": [
        ".mask1 {\n-webkit-mask-image: url(w3logo.png);\nmask-image: url(w3logo.png);\nmask-repeat: no-repeat;\n}",
        ".mask1 {\n-webkit-mask-image: url(w3logo.png);\nmask-image: url(w3logo.png);\n}",
        ".mask1 {\n-webkit-mask-image: linear-gradient(black, transparent);\nmask-image: linear-gradient(black, transparent);\n}",
        ".mask1 {\nmax-width: 600px;\nheight: 350px;\noverflow-y: scroll;\nbackground: url(img_5terre.jpg) no-repeat;\n-webkit-mask-image: linear-gradient(black, transparent);\nmask-image: linear-gradient (black, transparent);\n}",
        ".mask2 {\n-webkit-mask-image: radial-gradient(circle, black 50%, rgba(0, 0, 0, 0.5) 50%);\nmask-image: radial-gradient(circle, black 50%, rgba(0, 0, 0, 0.5) 50%);\n}",
        ".mask3 {\n-webkit-mask-image: radial-gradient(ellipse, black 50%, rgba(0, 0, 0, 0.5) 50%);\nmask-image: radial-gradient(ellipse, black 50%, rgba(0, 0, 0, 0.5) 50%);\n}",
        "<svg width=\"600\" height=\"400\">\n<mask id=\"svgmask1\">\n<polygon fill=\"#ffffff\" points=\"200 0, 400 400, 0 400\"></polygon>\n</mask>\n<image xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"img_5terre.jpg\" mask=\"url(#svgmask1)\"></image>\n</svg>",
        "<svg width=\"600\" height=\"400\">\n<mask id=\"svgmask2\">\n<polygon fill=\"#ffffff\" points=\"100,10 40,198 190,78 10,78 160,198\"></polygon>\n</mask>\n<image xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"img_5terre.jpg\" mask=\"url(#svgmask2)\"></image>\n</svg>",
        "<svg width=\"600\" height=\"400\">\n<mask id=\"svgmask3\">\n<circle fill=\"#ffffff\" cx=\"75\" cy=\"75\" r=\"75\"></circle>\n<circle fill=\"#ffffff\" cx=\"80\" cy=\"260\" r=\"75\"></circle>\n<circle fill=\"#ffffff\" cx=\"270\" cy=\"160\" r=\"75\"></circle>\n</mask>\n<image xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"img_5terre.jpg\" mask=\"url(#svgmask3)\"></image>\n</svg>",
        "mask-image",
        "mask-repeat",
        "no-repeat",
        "<mask>"
      ]
    },
    {
      "title": "CSS Styling Buttons",
      "summary": "Learn how to style buttons using CSS.\nBasic Button Styling\nDefault Button CSS Button\nExample\nButton Colors\nUse the CSS background-color property to change the background color of a button:\nExample\nREMOVE ADS\nButton Sizes\nUse the CSS font-size property to change the font size of a button:\nExample\nUse the padding property to change the padding of a button:\nExample\nRounded Buttons\nUse the CSS border-radius property to add rounded corners to a button:\nExample\nColored Button Borders\nUse the CSS border property to add a colored border to a button:\nExample\nHoverable Buttons\nUse the CSS :hover selector to change the style of a button when you move the mouse over it.\nTip: Use the CSS transition-duration property to determine the speed of the \"hover\" effect:\nExample\nShadow Buttons\nUse the CSS box-shadow property to add shadows to a button:\nExample\nDisabled Buttons\nUse the CSS opacity property to add transparency to a button (creates a \"disabled\" look).\nTip: You can also add the cursor property with a value of \"not-allowed\", which will display a \"no parking sign\" when you mouse over the button:\nExample\nButton Width\nBy default, the size of the button is determined by its text content (as wide as its content). Use the width property to change the width of a button:\nExample\nButton Groups\nRemove margins and add float:left to each button to create a button group:\nExample\nBordered Button Group\nUse the border property to create a bordered button group:\nExample\nVertical Button Group\nUse display:block instead of float:left to group the buttons below each other, instead of side by side:\nExample\nButton on Image\nAnimated Buttons\nExample\nAdd an arrow on hover:\nExample\nAdd a \"pressed\" effect on click:\nExample\nFade in on hover:\nExample\nAdd a \"ripple\" effect on click:",
      "examples": [
        ".button {\nbackground-color: #04AA6D; /* Green */\nborder: none;\ncolor: white;\npadding: 15px 32px;\ntext-align: center;\ntext-decoration: none;\ndisplay: inline-block;\nfont-size: 16px;\n}",
        ".button1 {background-color: #04AA6D;} /* Green */\n.button2 {background-color: #008CBA;} /* Blue */\n.button3 {background-color: #f44336;} /* Red */\n.button4 {background-color: #e7e7e7; color: black;} /* Gray */\n.button5 {background-color: #555555;} /* Black */",
        ".button1 {font-size: 10px;}\n.button2 {font-size: 12px;}\n.button3 {font-size: 16px;}\n.button4 {font-size: 20px;}\n.button5 {font-size: 24px;}",
        ".button1 {padding: 10px 24px;}\n.button2 {padding: 12px 28px;}\n.button3 {padding: 14px 40px;}\n.button4 {padding: 32px 16px;}\n.button5 {padding: 16px;}",
        ".button1 {border-radius: 2px;}\n.button2 {border-radius: 4px;}\n.button3 {border-radius: 8px;}\n.button4 {border-radius: 12px;}\n.button5 {border-radius: 50%;}",
        ".button1 {\nbackground-color: white;\ncolor: black;\nborder: 2px solid #04AA6D; /* Green */\n}\n...",
        ".button {\ntransition-duration: 0.4s;\n}\n\n.button:hover {\nbackground-color: #04AA6D; /* Green */\ncolor: white;\n}\n...",
        ".button1 {\nbox-shadow: 0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);\n}\n\n.button2:hover {\nbox-shadow: 0 12px 16px 0 rgba(0,0,0,0.24), 0 17px 50px 0 rgba(0,0,0,0.19);\n}",
        ".disabled {\nopacity: 0.6;\ncursor: not-allowed;\n}",
        ".button1 {width: 250px;}\n.button2 {width: 50%;}\n.button3 {width: 100%;}",
        ".button {\nfloat: left;\n}",
        ".button {\nfloat: left;\nborder: 1px solid green;\n}",
        ".button {\ndisplay: block;\n}",
        "background-color",
        "font-size",
        "padding",
        "border-radius",
        "border",
        ":hover",
        "transition-duration",
        "box-shadow",
        "opacity",
        "cursor",
        "width",
        "float:left",
        "display:block"
      ]
    },
    {
      "title": "CSS Pagination Examples",
      "summary": "Learn how to create a responsive pagination using CSS.\nSimple Pagination\nIf you have a website with lots of pages, you may wish to add some sort of pagination to each page:\n«\n1\n2\n3\n4\n5\n6\n»\n❮\n❯\nExample\nActive and Hoverable Pagination\n«\n1\n2\n3\n4\n5\n6\n7\n»\nHighlight the current page with an .active class, and use the :hover selector to change the color of each page link when moving the mouse over them:\nExample\nRounded Active and Hoverable Buttons\n«\n1\n2\n3\n4\n5\n6\n7\n»\nAdd the border-radius property if you want a rounded \"active\" and \"hover\" button:\nExample\nHoverable Transition Effect\n«\n1\n2\n3\n4\n5\n6\n7\n»\nAdd the transition property to the page links to create a transition effect on hover:\nExample\nREMOVE ADS\nBordered Pagination\n«\n1\n2\n3\n4\n5\n6\n7\n»\nUse the border property to add borders to the pagination:\nExample\nRounded Borders\nTip: Add rounded borders to your first and last link in the pagination:\n«\n1\n2\n3\n4\n5\n6\n7\n»\nExample\nSpace Between Links\nTip: Add the margin property if you do not want to group the page links:\n«\n1\n2\n3\n4\n5\n6\n7\n»\nExample\nPagination Size\n«\n1\n2\n3\n4\n5\n6\n7\n»\nChange the size of the pagination with the font-size property:\nExample\nCentered Pagination\n«\n1\n2\n3\n4\n5\n6\n7\n»\nTo center the pagination, wrap a container element (like <div>) around it with text-align:center\nExample\nMore Examples\nExample\nBreadcrumbs\nHome\nPictures\nSummer 15\nItaly\nAnother variation of pagination is so-called \"breadcrumbs\":\nExample",
      "examples": [
        ".pagination {\ndisplay: inline-block;\n}\n\n.pagination a {\ncolor: black;\nfloat: left;\npadding: 8px 16px;\ntext-decoration: none;\n}",
        ".pagination a.active {\nbackground-color: #4CAF50;\ncolor: white;\n}\n\n.pagination a:hover:not(.active) {background-color: #ddd;}",
        ".pagination a {\nborder-radius: 5px;\n}\n\n.pagination a.active {\nborder-radius: 5px;\n}",
        ".pagination a {\ntransition: background-color .3s;\n}",
        ".pagination a {\nborder: 1px solid #ddd; /* Gray */\n}",
        ".pagination a:first-child {\nborder-top-left-radius: 5px;\nborder-bottom-left-radius: 5px;\n}\n\n.pagination a:last-child {\nborder-top-right-radius: 5px;\nborder-bottom-right-radius: 5px;\n}",
        ".pagination a {\nmargin: 0 4px; /* 0 is for top and bottom. Feel free to change it */\n}",
        ".pagination a {\nfont-size: 22px;\n}",
        ".center {\ntext-align: center;\n}",
        "ul.breadcrumb {\npadding: 8px 16px;\nlist-style: none;\nbackground-color: #eee;\n}\n\nul.breadcrumb li {display: inline;}\n\nul.breadcrumb li+li:before {\npadding: 8px;\ncolor: black;\ncontent: \"/\\00a0\";\n}",
        ".active",
        ":hover",
        "border-radius",
        "transition",
        "border",
        "margin",
        "font-size",
        "text-align:center"
      ]
    },
    {
      "title": "CSS Multiple Columns",
      "summary": "CSS Multi-column Layout\nThe CSS multi-column layout allows easy definition of multiple columns of text - just like in newspapers:\nDaily Ping\nLorem ipsum\ndolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum.\nCSS Multi-column Properties\nIn this chapter you will learn about the following multi-column properties:\ncolumn-count\ncolumn-gap\ncolumn-rule-style\ncolumn-rule-width\ncolumn-rule-color\ncolumn-rule\ncolumn-span\ncolumn-width\nREMOVE ADS\nCSS Create Multiple Columns\nThe CSS column-count property specifies the number of columns an element should be divided into.\nThe following example will divide the text in the <div> element into 3 columns:\nExample\nCSS Specify the Gap Between Columns\nThe CSS column-gap property specifies the gap between the columns.\nThe following example specifies a 40 pixels gap between the columns:\nExample\nCSS Column Rules\nThe CSS column-rule-style property specifies the style of the rule between columns:\nExample\nThe CSS column-rule-width property specifies the width of the rule between columns:\nExample\nThe CSS column-rule-color property specifies the color of the rule between columns:\nExample\nThe CSS column-rule property is a shorthand property for setting all the column-rule-* properties above.\nThe following example sets the width, style, and color of the rule between columns:\nExample\nSpecify How Many Columns an Element Should Span\nThe CSS column-span property specifies how many columns an element should span across.\nThe following example specifies that the <h2> element should span across all columns:\nExample\nSpecify The Column Width\nThe CSS column-width property specifies a suggested, optimal width for the columns.\nThe following example specifies that the suggested, optimal width for the columns should be 100px:\nExample\nCSS Multi-columns Properties\nThe following table lists all the multi-columns properties:",
      "examples": [
        "div {\ncolumn-count: 3;\n}",
        "div {\ncolumn-gap: 40px;\n}",
        "div {\ncolumn-rule-style: solid;\n}",
        "div {\ncolumn-rule-width: 1px;\n}",
        "div {\ncolumn-rule-color: lightblue;\n}",
        "div {\ncolumn-rule: 1px solid lightblue;\n}",
        "h2 {\ncolumn-span: all;\n}",
        "div {\ncolumn-width: 100px;\n}",
        "column-count",
        "column-gap",
        "column-rule-style",
        "column-rule-width",
        "column-rule-color",
        "column-rule",
        "column-span",
        "column-width"
      ]
    },
    {
      "title": "CSS User Interface",
      "summary": "CSS User Interface\nIn this chapter you will learn about the following CSS user interface properties:\nresize\noutline-offset\nCSS Resizing\nThe resize property specifies if (and how) an element should be resizable by the user.\nThis div element is resizable by the user!\nTo resize: Click and drag the bottom right corner of this div element.\nThe following example lets the user resize only the width of a <div> element:\nExample\nThe following example lets the user resize only the height of a <div> element:\nExample\nThe following example lets the user resize both the height and width of a <div> element:\nExample\nIn many browsers, <textarea> is resizable by default. Here, we have used the resize property to disable the resizability:\nExample\nREMOVE ADS\nCSS Outline Offset\nThe outline-offset property adds space between an outline and the edge or border of an element.\nNote: Outline differs from borders! Unlike border, the outline is drawn outside the element's border, and may overlap other content. Also, the outline is NOT a part of the element's dimensions; the element's total width and height is not affected by the width of the outline.\nThe following example uses the outline-offset property to add space between the border and the outline:\nExample\nCSS User Interface Properties\nThe following table lists all the user interface properties:",
      "examples": [
        "div {\nresize: horizontal;\noverflow: auto;\n}",
        "div {\nresize: vertical;\noverflow: auto;\n}",
        "div {\nresize: both;\noverflow: auto;\n}",
        "textarea {\nresize: none;\n}",
        "div.ex1 {\nmargin: 20px;\nborder: 1px solid black;\noutline: 4px solid red;\noutline-offset: 15px;\n}\n\ndiv.ex2 {\nmargin: 10px;\nborder: 1px solid black;\noutline: 5px dashed blue;\noutline-offset: 5px;\n}",
        "resize",
        "outline-offset"
      ]
    },
    {
      "title": "CSS Variables - The var() Function",
      "summary": "CSS Variables\nThe var() function is used to insert the value of a CSS variable.\nCSS variables have access to the DOM, which means that you can create variables with local or global scope, change the variables with JavaScript, and change the variables based on media queries.\nA good way to use CSS variables is when it comes to the colors of your design. Instead of copy and paste the same colors over and over again, you can place them in variables.\nThe Traditional Way\nThe following example shows the traditional way of defining some colors in a style sheet (by defining the colors to use, for each specific element):\nExample\nCSS The var() Function\nThe var() function is used to insert the value of a CSS variable.\nSyntax\nNote: The variable name must begin with two dashes (--) and it is case sensitive!\nREMOVE ADS\nHow var() Works\nFirst of all: CSS variables can have a global or local scope.\nGlobal variables can be accessed/used through the entire document, while local variables can be used only inside the selector where it is declared.\nTo create a variable with global scope, declare it inside the :root selector. The :root selector matches the document's root element.\nTo create a variable with local scope, declare it inside the selector that is going to use it.\nThe following example is equal to the example above, but here we use the var() function.\nFirst, we declare two global variables (--blue and --white). Then, we use the var() function to insert the value of the variables later in the style sheet:\nExample\nAdvantages of using var() are:\nmakes the code easier to read (more understandable)\nmakes it much easier to change the color values\nTo change the blue and white color to a softer blue and white, you just need to change the two variable values:\nExample\nCSS var() Function",
      "examples": [
        "body { background-color: #1e90ff; }\n\nh2 { border-bottom: 2px solid #1e90ff; }\n\n.container {\ncolor: #1e90ff;\nbackground-color: #ffffff;\npadding: 15px;\n}\n\nbutton {\nbackground-color: #ffffff;\ncolor: #1e90ff;\nborder: 1px solid #1e90ff;\npadding: 5px;\n}",
        "var(--name, value)",
        ":root {\n--blue: #1e90ff;\n--white: #ffffff;\n}\n\nbody { background-color: var(--blue); }\n\nh2 { border-bottom: 2px solid var(--blue); }\n\n.container {\ncolor: var(--blue);\nbackground-color: var(--white);\npadding: 15px;\n}\n\nbutton {\nbackground-color: var(--white);\ncolor: var(--blue);\nborder: 1px solid var(--blue);\npadding: 5px;\n}",
        ":root {\n--blue: #6495ed;\n--white: #faf0e6;\n}\n\nbody { background-color: var(--blue); }\n\nh2 { border-bottom: 2px solid var(--blue); }\n\n.container {\ncolor: var(--blue);\nbackground-color: var(--white);\npadding: 15px;\n}\n\nbutton {\nbackground-color: var(--white);\ncolor: var(--blue);\nborder: 1px solid var(--blue);\npadding: 5px;\n}",
        "var()",
        ":root"
      ]
    },
    {
      "title": "CSS Overriding Variables",
      "summary": "Override Global Variable With Local Variable\nFrom the previous page we have learned that global variables can be accessed/used through the entire document, while local variables can be used only inside the selector where it is declared.\nLook at the example from the previous page:\nExample\nSometimes we want the variables to change only in a specific section of the page.\nAssume we want a different color of blue for button elements. Then, we can re-declare the --blue variable inside the button selector. When we use var(--blue) inside this selector, it will use the local --blue variable value declared here.\nWe see that the local --blue variable will override the global --blue variable for the button elements:\nExample\nREMOVE ADS\nAdd a New Local Variable\nIf a variable is to be used at only one single place, we could also have declared a new local variable, like this:\nExample\nCSS var() Function",
      "examples": [
        ":root {\n--blue: #1e90ff;\n--white: #ffffff;\n}\n\nbody {\nbackground-color: var(--blue);\n}\n\nh2 {\nborder-bottom: 2px solid var(--blue);\n}\n\n.container {\ncolor: var(--blue);\nbackground-color: var(--white);\npadding: 15px;\n}\n\nbutton {\nbackground-color: var(--white);\ncolor: var(--blue);\nborder: 1px solid var(--blue);\npadding: 5px;\n}",
        ":root {\n--blue: #1e90ff;\n--white: #ffffff;\n}\n\nbody {\nbackground-color: var(--blue);\n}\n\nh2 {\nborder-bottom: 2px solid var(--blue);\n}\n\n.container {\ncolor: var(--blue);\nbackground-color: var(--white);\npadding: 15px;\n}\n\nbutton {\n--blue: #0000ff; /* local variable will override global */\nbackground-color: var(--white);\ncolor: var(--blue);\nborder: 1px solid var(--blue);\npadding: 5px;\n}",
        ":root {\n--blue: #1e90ff;\n--white: #ffffff;\n}\n\nbody {\nbackground-color: var(--blue);\n}\n\nh2 {\nborder-bottom: 2px solid var(--blue);\n}\n\n.container {\ncolor: var(--blue);\nbackground-color: var(--white);\npadding: 15px;\n}\n\nbutton {\n--button-blue: #0000ff; /* new local variable */\nbackground-color: var(--white);\ncolor: var(--button-blue);\nborder: 1px solid var(--button-blue);\npadding: 5px;\n}"
      ]
    },
    {
      "title": "CSS Change Variables With JavaScript",
      "summary": "Change Variables With JavaScript\nCSS variables have access to the DOM, which means that you can change them with JavaScript.\nHere is an example of how you can create a script to display and change the --blue variable from the example used in the previous pages. For now, do not worry if you are not familiar with JavaScript. You can learn more about JavaScript in our JavaScript Tutorial:\nExample\nCSS var() Function",
      "examples": [
        "<script>\n// Get the root element\nvar r = document.querySelector(':root');\n\n// Create a function for getting a variable value\nfunction myFunction_get() {\n// Get the styles (properties and values) for the root\nvar rs = getComputedStyle(r);\n// Alert the value of the --blue variable\nalert(\"The value of --blue is: \" + rs.getPropertyValue('--blue'));\n}\n\n// Create a function for setting a variable value\nfunction myFunction_set() {\n// Set the value of variable --blue to another value (in this case \"lightblue\")\nr.style.setProperty('--blue', 'lightblue');\n}\n</script>"
      ]
    },
    {
      "title": "CSS Using Variables in Media Queries",
      "summary": "Using Variables in Media Queries\nNow we want to change a variable value inside a media query.\nTip: Media Queries are about defining different style rules for different devices (screens, tablets, mobile phones, etc.). You can learn more Media Queries in our Media Queries Chapter.\nHere, we first declare a new local variable named --fontsize for the .container class. We set its value to 25 pixels. Then we use it in the .container class further down. Then, we create a @media rule that says \"When the browser's width is 450px or wider, change the --fontsize variable value of the .container class to 50px.\"\nHere is the complete example:\nExample\nREMOVE ADS\nHere is another example where we also change the value of the --blue variable in the @media rule:\nExample\nCSS var() Function",
      "examples": [
        "/* Variable declarations */\n:root {\n--blue: #1e90ff;\n--white: #ffffff;\n}\n\n.container {\n--fontsize: 25px;\n}\n\n/* Styles */\nbody {\nbackground-color: var(--blue);\n}\n\nh2 {\nborder-bottom: 2px solid var(--blue);\n}\n\n.container {\ncolor: var(--blue);\nbackground-color: var(--white);\npadding: 15px;\nfont-size: var(--fontsize);\n}\n\n@media screen and (min-width: 450px) {\n.container {\n--fontsize: 50px;\n}\n}",
        "/* Variable declarations */\n:root {\n--blue: #1e90ff;\n--white: #ffffff;\n}\n\n.container {\n--fontsize: 25px;\n}\n\n/* Styles */\nbody {\nbackground-color: var(--blue);\n}\n\nh2 {\nborder-bottom: 2px solid var(--blue);\n}\n\n.container {\ncolor: var(--blue);\nbackground-color: var(--white);\npadding: 15px;\nfont-size: var(--fontsize);\n}\n\n@media screen and (min-width: 450px) {\n.container {\n--fontsize: 50px;\n}\n:root {\n--blue: lightblue;\n}\n}",
        ".container",
        "@media"
      ]
    },
    {
      "title": "CSS - The @property Rule",
      "summary": "The CSS @property Rule\nThe @property rule is used to define custom CSS properties directly in the stylesheet without having to run any JavaScript.\nThis rule has data type checking and constraining, sets default values, and defines whether the property can inherit values or not.\nExample of defining a custom property:\nThe definition above says that --myColor is a color property, it can inherit values from parent elements, and its default value is lightgray.\nTo use the custom property in CSS, we use the var() function:\nThe benefits of using @property:\nType checking: You must specify the data type of the custom property, such as <number>, <color>, <length>, etc. This prevents errors and ensures that custom properties are used correctly\nSet default value: You set a default value for the custom property. This ensures that if an invalid value is assigned later, the browser uses the defined fallback value\nSet inheritance behavior: You must specify whether the custom property will, by default, inherit values from its parent elements or not\nBrowser Support\nThe numbers in the table specifies the first browser version that fully supports the rule.\nSimple @property Example\nThe following example defines two custom properties: my-bg-color and my-txt-color. Then, the div uses the custom properties in background-color and color:\nExample\nREMOVE ADS\nAnother @property Example\nIn the following example we use the default custom property on the <div> element. Then we override the custom property in class .fresh and class .nature (by setting some other colors), and it works perfectly fine:\nExample\nAvoid Error with Type Checking and Fallback Value\nIn the following example we set the custom property in class .nature to an integer. This is not valid, and the browser will use the fallback color, which is defined in the initial-value property (lightgray):\nExample\nUse of the inherits Value\nIn the following example we will set the inherits value to false. This means that the custom property WILL NOT inherit values from its parent elements. Look at the result:\nExample\nThe next example sets the inherits value to true. This means that the custom property WILL inherit values from its parent elements. Look at the result:\nExample\nCreate Smooth Animation with @property\nA complete new opportunity you can achieve with the @property rule, is to animate something that could not be animated before: Gradients. Look at the following example:\nExample\nSpecify two custom properties for a gradient:\nCSS @property Rule",
      "examples": [
        "@property --myColor {\nsyntax: \"<color>\";\ninherits: true;\ninitial-value: lightgray;\n}",
        "body {\nbackground-color: var(--myColor);\n}",
        "@property --my-bg-color {\nsyntax: \"<color>\";\ninherits: true;\ninitial-value: lightgray;\n}\n\n@property --my-txt-color {\nsyntax: \"<color>\";\ninherits: true;\ninitial-value: darkblue;\n}\n\ndiv {\nwidth: 300px;\nheight: 150px;\npadding: 15px;\nbackground-color: var(--my-bg-color);\ncolor: var(--my-txt-color);\n}",
        "@property --my-bg-color {\nsyntax: \"<color>\";\ninherits: true;\ninitial-value: lightgray;\n}\n\ndiv {\nwidth: 300px;\nheight: 150px;\npadding: 15px;\nbackground-color: var(--my-bg-color);\n}\n\n.fresh {\n--my-bg-color: #ff6347;\n}\n\n.nature {\n--my-bg-color: rgb(120, 180, 30);\n}",
        "@property --my-bg-color {\nsyntax: \"<color>\";\ninherits: true;\ninitial-value: lightgray;\n}\n\ndiv {\nwidth: 300px;\nheight: 150px;\npadding: 15px;\nbackground-color: var(--my-bg-color);\n}\n\n.fresh {\n--my-bg-color: #ff6347;\n}\n\n.nature {\n--my-bg-color: 2;\n}",
        "@property --my-bg-color {\nsyntax: \"<color>\";\ninherits: false;\ninitial-value: lightgray;\n}",
        "@property --my-bg-color {\nsyntax: \"<color>\";\ninherits: true;\ninitial-value: lightgray;\n}",
        "@property --startColor {\nsyntax: \"<color>\";\ninitial-value: #EADEDB;\ninherits: false;\n}\n\n@property --endColor {\nsyntax: \"<color>\";\ninitial-value: #BC70A4;\ninherits: false;\n}",
        "@property",
        "var()"
      ]
    },
    {
      "title": "CSS Box Sizing",
      "summary": "CSS Box Sizing\nThe CSS box-sizing property allows us to include the padding and border in an element's total width and height.\nWithout the CSS box-sizing Property\nBy default, the width and height of an element is calculated like this:\nwidth + padding + border = actual width of an element\nheight + padding + border = actual height of an element\nThis means: When you set the width/height of an element, the element often appears bigger than you have set (because the element's border and padding are added to the element's specified width/height).\nThe following illustration shows two <div> elements with the same specified width and height:\nThe two <div> elements above end up with different sizes in the result (because div2 has a padding specified):\nExample\nThe box-sizing property solves this problem.\nREMOVE ADS\nWith the CSS box-sizing Property\nThe box-sizing property allows us to include the padding and border in an element's total width and height.\nIf you set box-sizing: border-box; on an element, padding and border are included in the width and height:\nHere is the same example as above, with box-sizing: border-box; added to both <div> elements:\nExample\nSince the result of using the box-sizing: border-box; is so much better, many developers want all elements on their pages to work this way.\nThe code below ensures that all elements are sized in this more intuitive way. Many browsers already use box-sizing: border-box; for many form elements (but not all - which is why inputs and text areas look different at width: 100%;).\nApplying this to all elements is safe and wise:\nExample\nCSS Box Sizing Property",
      "examples": [
        ".div1 {\nwidth: 300px;\nheight: 100px;\nborder: 1px solid blue;\n}\n\n.div2 {\nwidth: 300px;\nheight: 100px;\npadding: 50px;\nborder: 1px solid red;\n}",
        ".div1 {\nwidth: 300px;\nheight: 100px;\nborder: 1px solid blue;\nbox-sizing: border-box;\n}\n\n.div2 {\nwidth: 300px;\nheight: 100px;\npadding: 50px;\nborder: 1px solid red;\nbox-sizing: border-box;\n}",
        "* {\nbox-sizing: border-box;\n}",
        "box-sizing",
        "box-sizing: border-box;"
      ]
    },
    {
      "title": "CSS Media Queries",
      "summary": "CSS Media Queries\nThe @media rule, introduced in CSS2, made it possible to define different style rules for different media types.\nMedia queries in CSS3 extended the CSS2 media types idea: Instead of looking for a type of device, they look at the capability of the device.\nMedia queries can be used to check many things, such as:\nwidth and height of the viewport\norientation of the viewport (landscape or portrait)\nresolution\nUsing media queries are a popular technique for delivering a tailored style sheet to desktops, laptops, tablets, and mobile phones (such as iPhone and Android phones).\nCSS Media Types\nCSS Common Media Features\nHere are some commonly used media features:\nMedia Query Syntax\nA media query consists of a media type and can contain one or more media features, which resolve to either true or false.\nThe mediatype is optional (if omitted, it will be set to all). However, if you use not or only, you must also specify a mediatype.\nThe result of the query is true if the specified media type matches the type of device the document is being displayed on and all media features in the media query are true. When a media query is true, the corresponding style sheet or style rules are applied, following the normal cascading rules.\nMeaning of the not, only, and and keywords:\nnot: This keyword inverts the meaning of an entire media query.\nonly: This keyword prevents older browsers that do not support media queries from applying the specified styles. It has no effect on modern browsers.\nand: This keyword combines a media type and one or more media features.\nYou can also link to different stylesheets for different media and different widths of the browser window (viewport):\nREMOVE ADS\nMedia Queries Simple Examples\nOne way to use media queries is to have an alternate CSS section right inside your style sheet.\nThe following example changes the background-color to lightgreen if the viewport is 480 pixels wide or wider (if the viewport is less than 480 pixels, the background-color will be pink):\nExample\nThe following example shows a menu that will float to the left of the page if the viewport is 480 pixels wide or wider (if the viewport is less than 480 pixels, the menu will be on top of the content):\nExample\nMore Media Query Examples\nFor much more examples on media queries, go to the next page: CSS MQ Examples.\nCSS @media Reference\nFor a full overview of all the media types and features/expressions, please look at the @media rule in our CSS reference.",
      "examples": [
        "@media not|only mediatype and (media feature) and (media feature) {\nCSS-Code;\n}",
        "<link rel=\"stylesheet\" media=\"print\" href=\"print.css\">\n<link rel=\"stylesheet\" media=\"screen\" href=\"screen.css\">\n<link rel=\"stylesheet\" media=\"screen and (min-width: 480px)\" href=\"example1.css\">\n<link rel=\"stylesheet\" media=\"screen and (min-width: 701px) and (max-width: 900px)\" href=\"example2.css\">\netc....",
        "@media screen and (min-width: 480px) {\nbody {\nbackground-color: lightgreen;\n}\n}",
        "@media screen and (min-width: 480px) {\n#leftsidebar {width: 200px; float: left;}\n#main {margin-left: 216px;}\n}",
        "@media"
      ]
    },
    {
      "title": "CSS Media Queries - Examples Variable Font Size.",
      "summary": "CSS Media Queries - More Examples\nLet us look at some more examples of using media queries.\nMedia queries are a popular technique for delivering a tailored style sheet to different devices. To demonstrate a simple example, we can change the background color for different devices:\nExample\nDo you wonder why we use exactly 992px and 600px? They are what we call \"typical breakpoints\" for devices. You can read more about typical breakpoints in our Responsive Web Design Tutorial.\nMedia Queries For Menus\nIn this example, we use media queries to create a responsive navigation menu, that varies in design on different screen sizes.\nLarge screens:\nSmall screens:\nExample\nREMOVE ADS\nMedia Queries For Columns\nA common use of media queries, is to create a flexible layout. In this example, we create a layout that varies between four, two and full-width columns, depending on different screen sizes:\nLarge screens:\nMedium screens:\nSmall screens:\nExample\nTip: A more modern way of creating column layouts, is to use CSS Flexbox (see example below).\nTo learn more about the Flexible Box Layout Module, read our CSS Flexbox chapter.\nTo learn more about Responsive Web Design, read our Responsive Web Design Tutorial.\nExample\nHide Elements With Media Queries\nAnother common use of media queries, is to hide elements on different screen sizes:\nExample\nChange Font Size With Media Queries\nYou can also use media queries to change the font size of an element on different screen sizes:\nExample\nFlexible Image Gallery\nIn this example, we use media queries together with flexbox to create a responsive image gallery:\nExample\nFlexible Website\nIn this example, we use media queries together with flexbox to create a responsive website, containing a flexible navigation bar and flexible content.\nExample\nOrientation: Portrait / Landscape\nMedia queries can also be used to change layout of a page depending on the orientation of the browser.\nYou can have a set of CSS properties that will only apply when the browser window is wider than its height, a so called \"Landscape\" orientation:\nExample\nUse a lightblue background color if the orientation is in landscape mode:\nMin Width to Max Width\nYou can also use the (max-width: ..) and (min-width: ..) values to set a minimum width and a maximum width.\nFor example, when the browser's width is between 600 and 900px, change the appearance of a <div> element:\nExample\nUsing an additional value: In the example below, we add an additional media query to our already existing one using a comma:\nExample\nCSS @media Reference\nFor a full overview of all the media types and features/expressions, please look at the @media rule in our CSS reference.\nTip: To learn more about responsive web design (how to target different devices and screens), using media query breakpoints, read our Responsive Web Design Tutorial.",
      "examples": [
        "/* Set the background color of body to tan */\nbody {\nbackground-color: tan;\n}\n\n/* On screens that are 992px or less, set the background color to blue */\n@media screen and (max-width: 992px) {\nbody {\nbackground-color: blue;\n}\n}\n\n/* On screens that are 600px or less, set the background color to olive */\n@media screen and (max-width: 600px) {\nbody {\nbackground-color: olive;\n}\n}",
        "/* The navbar container */\n.topnav {\noverflow: hidden;\nbackground-color: #333;\n}\n\n/* Navbar links */\n.topnav a {\nfloat: left;\ndisplay: block;\ncolor: white;\ntext-align: center;\npadding: 14px 16px;\ntext-decoration: none;\n}\n\n/* On screens that are 600px wide or less, make the menu links stack on top of each other instead of next to each other */\n@media screen and (max-width: 600px) {\n.topnav a {\nfloat: none;\nwidth: 100%;\n}\n}",
        "/* Create four equal columns that floats next to each other */\n.column {\nfloat: left;\nwidth: 25%;\n}\n\n/* On screens that are 992px wide or less, go from four columns to two columns */\n@media screen and (max-width: 992px) {\n.column {\nwidth: 50%;\n}\n}\n\n/* On screens that are 600px wide or less, make the columns stack on top of each other instead of next to each other */\n@media screen and (max-width: 600px) {\n.column {\nwidth: 100%;\n}\n}",
        "/* Container for flexboxes */\n.row {\ndisplay: flex;\nflex-wrap: wrap;\n}\n\n/* Create four equal columns */\n.column {\nflex: 25%;\npadding: 20px;\n}\n\n/* On screens that are 992px wide or less, go from four columns to two columns */\n@media screen and (max-width: 992px) {\n.column {\nflex: 50%;\n}\n}\n\n/* On screens that are 600px wide or less, make the columns stack on top of each other instead of next to each other */\n@media screen and (max-width: 600px) {\n.row {\nflex-direction: column;\n}\n}",
        "/* If the screen size is 600px wide or less, hide the element */\n@media screen and (max-width: 600px) {\ndiv.example {\ndisplay: none;\n}\n}",
        "/* If screen size is more than 600px wide, set the font-size of <div> to 80px */\n@media screen and (min-width: 600px) {\ndiv.example {\nfont-size: 80px;\n}\n}\n\n/* If screen size is 600px wide, or less, set the font-size of <div> to 30px */\n@media screen and (max-width: 600px) {\ndiv.example {\nfont-size: 30px;\n}\n}",
        "@media only screen and (orientation: landscape) {\nbody {\nbackground-color: lightblue;\n}\n}",
        "@media screen and (max-width: 900px) and (min-width: 600px) {\ndiv.example {\nfont-size: 50px;\npadding: 50px;\nborder: 8px solid black;\nbackground: yellow;\n}\n}",
        "/* When the width is between 600px and 900px or above 1100px - change the appearance of <div> */\n@media screen and (max-width: 900px) and (min-width: 600px), (min-width: 1100px) {\ndiv.example {\nfont-size: 50px;\npadding: 50px;\nborder: 8px solid black;\nbackground: yellow;\n}\n}",
        "(max-width: ..) and (min-width: ..)"
      ]
    },
    {
      "title": "CSS Flexbox 1 2 3 4 5 6 7 8 1 2 3",
      "summary": "Try it Yourself »\nWhat is CSS Flexbox?\nFlexbox is short for the Flexible Box Layout module.\nFlexbox is a layout method for arranging items in rows or columns.\nFlexbox makes it easier to design a flexible responsive layout structure, without using float or positioning.\nFlexbox vs. Grid\nThe CSS Flexbox Layout should be used for one-dimensional layout, with rows OR columns.\nThe CSS Grid Layout should be used for two-dimensional layout, with rows AND columns.\nCSS Flexible Box Layout Module\nBefore the Flexible Box Layout module, there were four layout modes:\nBlock, for sections in a webpage\nInline, for text\nTable, for two-dimensional table data\nPositioned, for explicit position of an element\nCSS flexbox is supported in all modern browsers.\nCSS Flexbox Components\nA flexbox always consists of:\na Flex Container - the parent (container) <div> element\nFlex Items - the items inside the container <div>\nREMOVE ADS\nA Flex Container with Three Flex Items\nTo start using CSS Flexbox, you need to first define a flex container.\nThe flex container becomes flexible by setting the display property to flex.\nThe element above represents a flex container (the blue area) with three flex items.\nExample\nA flex container with three flex items:\nTry it Yourself »\nYou will learn more about flex containers and flex items in the next chapters.",
      "examples": [
        "<div class=\"flex-container\">\n<div>1</div>\n<div>2</div>\n<div>3</div>\n</div>",
        "display",
        "flex"
      ]
    },
    {
      "title": "CSS Flex Container 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9",
      "summary": "The CSS Flex Container\nLike we specified in the previous chapter, this is a flex container (the blue area) with three flex items:\nThe flex container becomes flexible by setting the display property to flex:\nExample\nTry it Yourself »\nThe CSS flex-direction Property\nThe flex-direction property specifies the display-direction of flex items in the flex container.\nThis property can have one of the following values:\nrow\ncolumn\nrow-reverse\ncolumn-reverse\nExample\nThe row value is the default value, and it displays the flex items horizontally (from left to right):\nResult:\nTry it Yourself »\nExample\nThe column value displays the flex items vertically (from top to bottom):\nResult:\nTry it Yourself »\nExample\nThe row-reverse value displays the flex items horizontally (but from right to left):\nResult:\nTry it Yourself »\nExample\nThe column-reverse value displays the flex items vertically (but from bottom to top):\nResult:\nTry it Yourself »\nREMOVE ADS\nThe CSS flex-wrap Property\nThe flex-wrap property specifies whether the flex items should wrap or not, if there is not enough room for them on one flex line.\nThis property can have one of the following values:\nnowrap\nwrap\nwrap-reverse\nExample\nThe nowrap value specifies that the flex items will not wrap (this is default):\nResult:\nTry it Yourself »\nExample\nThe wrap value specifies that the flex items will wrap if necessary:\nResult:\nTry it Yourself »\nExample\nThe wrap-reverse value specifies that the flex items will wrap if necessary, in reverse order:\nResult:\nTry it Yourself »\nThe CSS flex-flow Property\nThe flex-flow property is a shorthand property for setting both the flex-direction and flex-wrap properties.\nExample\nTry it Yourself »\nThe CSS justify-content Property\nThe justify-content property is used to align the flex items when they do not use all available space on the main-axis (horizontally).\nThis property can have one of the following values:\ncenter\nflex-start\nflex-end\nspace-around\nspace-between\nspace-evenly\nExample\nThe center value positions the flex items in the center of the container:\nResult:\nTry it Yourself »\nExample\nThe flex-start value positions the flex items at the beginning of the container (this is default):\nResult:\nTry it Yourself »\nExample\nThe flex-end value positions the flex items at the end of the container:\nResult:\nTry it Yourself »\nExample\nThe space-around value displays the flex items with space around them:\nResult:\nTry it Yourself »\nExample\nThe space-between value displays the flex items with space between them:\nResult:\nTry it Yourself »\nExample\nThe space-evenly value displays the flex items with equal space around them:\nResult:\nTry it Yourself »\nThe CSS align-items Property\nThe align-items property is used to align the flex items when they do not use all available space on the cross-axis (vertically).\nThis property can have one of the following values:\ncenter\nflex-start\nflex-end\nstretch\nbaseline\nnormal\nIn the following examples we use a 200 pixels high container, to better demonstrate the align-items property.\nExample\nThe center value positions the flex items in the middle of the container:\nResult:\nTry it Yourself »\nExample\nThe flex-start value positions the flex items at the top of the container:\nResult:\nTry it Yourself »\nExample\nThe flex-end value positions the flex items at the bottom of the container:\nResult:\nTry it Yourself »\nExample\nThe stretch value stretches the flex items to fill the container (this is equal to \"normal\" which is default):\nResult:\nTry it Yourself »\nExample\nThe baseline value positions the flex items at the baseline of the container:\nNote: The example uses different font-size to demonstrate that the items gets aligned by the text baseline:\n3\nTry it Yourself »\nThe CSS align-content Property\nThe align-content property is similar to align-items, but instead of aligning flex items, it aligns the flex lines.\nThis property can have one of the following values:\ncenter\nstretch\nflex-start\nflex-end\nspace-around\nspace-between\nspace-evenly\nIn the following examples we use a 600 pixels high container, with the flex-wrap property set to wrap, to better demonstrate the align-content property.\nExample\nWith center, the flex lines are packed toward the center of the container:\nResult:\nTry it Yourself »\nExample\nWith stretch, the flex lines stretch to take up the remaining space of the container (this is default):\nResult:\nTry it Yourself »\nExample\nWith flex-start, the flex lines are packed toward the start of the container:\nResult:\nTry it Yourself »\nExample\nWith flex-end, the flex lines are packed toward the end of the container:\nResult:\nTry it Yourself »\nExample\nWith space-between, the space between the flex lines are equal, but the first item is flush with the start edge of the container, and the last item is flush with the end edge of the container:\nResult:\nTry it Yourself »\nExample\nWith space-around, the space between the flex lines are equal, but the space before the first item and after the last item is set to half of the space between the flex lines:\nResult:\nTry it Yourself »\nExample\nWith space-evenly, the flex lines are evenly distributed in the flex container, with equal space on top, bottom and between:\nResult:\nTry it Yourself »\nPerfect Centering\nIn the following example we will solve a common style problem: perfect centering.\nSOLUTION: Set both the justify-content and align-items properties to center, and the flex item will be perfectly centered:\nExample\nTry it Yourself »\nThe CSS Flex Container Properties\nThe following table lists all the CSS Flex Container properties:",
      "examples": [
        ".flex-container {\ndisplay: flex;\n}",
        ".flex-container {\ndisplay: flex;\nflex-direction: row;\n}",
        ".flex-container {\ndisplay: flex;\nflex-direction: column;\n}",
        ".flex-container {\ndisplay: flex;\nflex-direction: row-reverse;\n}",
        ".flex-container {\ndisplay: flex;\nflex-direction: column-reverse;\n}",
        ".flex-container {\ndisplay: flex;\nflex-wrap: nowrap;\n}",
        ".flex-container {\ndisplay: flex;\nflex-wrap: wrap;\n}",
        ".flex-container {\ndisplay: flex;\nflex-wrap: wrap-reverse;\n}",
        ".flex-container {\ndisplay: flex;\nflex-flow: row wrap;\n}",
        ".flex-container {\ndisplay: flex;\njustify-content: center;\n}",
        ".flex-container {\ndisplay: flex;\njustify-content: flex-start;\n}",
        ".flex-container {\ndisplay: flex;\njustify-content: flex-end;\n}",
        ".flex-container {\ndisplay: flex;\njustify-content: space-around;\n}",
        ".flex-container {\ndisplay: flex;\njustify-content: space-between;\n}",
        ".flex-container {\ndisplay: flex;\njustify-content: space-evenly;\n}",
        ".flex-container {\ndisplay: flex;\nheight: 200px;\nalign-items: center;\n}",
        ".flex-container {\ndisplay: flex;\nheight: 200px;\nalign-items: flex-start;\n}",
        ".flex-container {\ndisplay: flex;\nheight: 200px;\nalign-items: flex-end;\n}",
        ".flex-container {\ndisplay: flex;\nheight: 200px;\nalign-items: stretch;\n}",
        ".flex-container {\ndisplay: flex;\nheight: 200px;\nalign-items: baseline;\n}",
        ".flex-container {\ndisplay: flex;\nheight: 600px;\nflex-wrap: wrap;\nalign-content: center;\n}",
        ".flex-container {\ndisplay: flex;\nheight: 600px;\nflex-wrap: wrap;\nalign-content: stretch;\n}",
        ".flex-container {\ndisplay: flex;\nheight: 600px;\nflex-wrap: wrap;\nalign-content: flex-start;\n}",
        ".flex-container {\ndisplay: flex;\nheight: 600px;\nflex-wrap: wrap;\nalign-content: flex-end;\n}",
        ".flex-container {\ndisplay: flex;\nheight: 600px;\nflex-wrap: wrap;\nalign-content: space-between;\n}",
        ".flex-container {\ndisplay: flex;\nheight: 600px;\nflex-wrap: wrap;\nalign-content: space-around;\n}",
        ".flex-container {\ndisplay: flex;\nheight: 300px;\njustify-content: center;\nalign-items: center;\n}",
        "display",
        "flex",
        "flex-direction",
        "row",
        "column",
        "row-reverse",
        "column-reverse",
        "flex-wrap",
        "nowrap",
        "wrap",
        "wrap-reverse",
        "flex-flow",
        "justify-content",
        "center",
        "flex-start",
        "flex-end",
        "space-around",
        "space-between",
        "space-evenly",
        "align-items",
        "stretch",
        "baseline",
        "normal",
        "align-content"
      ]
    },
    {
      "title": "CSS Flex Items 1 2 3 4 1 2 3 4 1 2 3 1 2 3 4 5 6 7 8 9 10 1 2 3 4 1 2 3 4",
      "summary": "The CSS Flex Items\nThe direct child elements of a flex container automatically becomes flex items.\nThe element above represents four blue flex items inside a grey flex container.\nExample\nTry it Yourself »\nThe CSS order Property\nThe order property specifies the order of the flex items inside the flex container.\nThe first flex item in the code does not have to appear as the first item in the layout.\nThe order value must be a number, default value is 0.\nExample\nThe order property can change the order of the flex items:\nTry it Yourself »\nThe CSS flex-grow Property\nThe flex-grow property specifies how much a flex item will grow relative to the rest of the flex items.\nThe value must be a number, default value is 0.\nExample\nMake the third flex item grow eight times faster than the other flex items:\nTry it Yourself »\nREMOVE ADS\nThe CSS flex-shrink Property\nThe flex-shrink property specifies how much a flex item will shrink relative to the rest of the flex items.\nThe value must be a number, default value is 1.\nExample\nDo not let the third flex item shrink as much as the other flex items:\nTry it Yourself »\nThe CSS flex-basis Property\nThe flex-basis property specifies the initial length of a flex item.\nExample\nSet the initial length of the third flex item to 200 pixels:\nTry it Yourself »\nThe CSS flex Property\nThe flex property is a shorthand property for the flex-grow, flex-shrink, and flex-basis properties.\nExample\nMake the third flex item not growable (0), not shrinkable (0), and with an initial length of 200 pixels:\nTry it Yourself »\nThe CSS align-self Property\nThe align-self property specifies the alignment for the selected item inside the flexible container.\nThis property overrides the default alignment set by the container's align-items property.\nIn these examples we use a 200 pixels high container, to better demonstrate the align-self property:\nExample\nAlign the third flex item in the middle of the container:\nTry it Yourself »\nExample\nAlign the second flex item at the top of the container, and the third flex item at the bottom of the container:\nTry it Yourself »\nThe CSS Flex Items Properties\nThe following table lists all the CSS Flex Items properties:",
      "examples": [
        "<div class=\"flex-container\">\n<div>1</div>\n<div>2</div>\n<div>3</div>\n<div>4</div>\n</div>",
        "<div class=\"flex-container\">\n<div style=\"order: 3\">1</div>\n<div style=\"order: 2\">2</div>\n<div style=\"order: 4\">3</div>\n<div style=\"order: 1\">4</div>\n</div>",
        "<div class=\"flex-container\">\n<div style=\"flex-grow: 1\">1</div>\n<div style=\"flex-grow: 1\">2</div>\n<div style=\"flex-grow: 8\">3</div>\n</div>",
        "<div class=\"flex-container\">\n<div>1</div>\n<div>2</div>\n<div style=\"flex-shrink: 0\">3</div>\n<div>4</div>\n<div>5</div>\n<div>6</div>\n<div>7</div>\n<div>8</div>\n<div>9</div>\n<div>10</div>\n</div>",
        "<div class=\"flex-container\">\n<div>1</div>\n<div>2</div>\n<div style=\"flex-basis: 200px\">3</div>\n<div>4</div>\n</div>",
        "<div class=\"flex-container\">\n<div>1</div>\n<div>2</div>\n<div style=\"flex: 0 0 200px\">3</div>\n<div>4</div>\n</div>",
        "<div class=\"flex-container\">\n<div>1</div>\n<div>2</div>\n<div style=\"align-self: center\">3</div>\n<div>4</div>\n</div>",
        "<div class=\"flex-container\">\n<div>1</div>\n<div style=\"align-self: flex-start\">2</div>\n<div style=\"align-self: flex-end\">3</div>\n<div>4</div>\n</div>",
        "order",
        "flex-grow",
        "flex-shrink",
        "flex-basis",
        "flex",
        "align-self",
        "align-items"
      ]
    },
    {
      "title": "CSS Responsive Flexbox",
      "summary": "Responsive Flexbox\nYou learned from the CSS Media Queries chapter that you can use media queries to create different layouts for different screen sizes and devices.\nLaptop and Desktops:\nMobile phones and Tablets:\nFor example, if you want to create a two-column layout for most screen sizes, and a one-column layout for small screen sizes (such as phones and tablets), you can change the flex-direction from row to column at a specific breakpoint (800px in the example below):\nExample\nTry it Yourself »\nAnother way is to change the percentage of the flex property of the flex items to create different layouts for different screen sizes. Note that we also have to include flex-wrap: wrap; on the flex container for this example to work:\nExample\nTry it Yourself »\nREMOVE ADS\nResponsive Image Gallery using Flexbox\nUse flexbox to create a responsive image gallery that varies between four, two or full-width images, depending on screen size:\nResponsive Website using Flexbox\nUse flexbox to create a responsive website, containing a flexible navigation bar and flexible content:",
      "examples": [
        ".flex-container {\ndisplay: flex;\nflex-direction: row;\n}\n\n/* Responsive layout - makes a one column layout instead of a two-column layout */\n@media (max-width: 800px) {\n.flex-container {\nflex-direction: column;\n}\n}",
        ".flex-container {\ndisplay: flex;\nflex-wrap: wrap;\n}\n\n.flex-item-left {\nflex: 50%;\n}\n\n.flex-item-right {\nflex: 50%;\n}\n\n/* Responsive layout - makes a one column layout instead of a two-column layout */\n@media (max-width: 800px) {\n.flex-item-right, .flex-item-left {\nflex: 100%;\n}\n}",
        "flex-direction",
        "row",
        "column",
        "flex",
        "flex-wrap: wrap;"
      ]
    },
    {
      "title": "CSS Grid Layout Module",
      "summary": "My Header\nLorem Ipsum\nLorem ipsum odor amet, consectetuer adipiscing elit. Ridiculus sit nisl laoreet facilisis aliquet. Potenti dignissim litora eget montes rhoncus sapien neque urna. Cursus libero sapien integer magnis ligula lobortis quam ut.\nTry it Yourself »\nCSS Grid Layout\nThe Grid Layout Module offers a grid-based layout system, with rows and columns.\nThe Grid Layout Module allows developers to easily create complex web layouts.\nThe Grid Layout Module makes it easier to design a responsive layout structure, without using float or positioning.\nThe CSS grid properties are supported in all modern browsers.\nGrid vs. Flexbox\nThe CSS Grid Layout should be used for two-dimensional layout, with rows AND columns.\nThe CSS Flexbox Layout should be used for one-dimensional layout, with rows OR columns.\nCSS Grid Components\nA grid always consists of:\na Grid Container - the parent (container) <div> element\nGrid Items - the items inside the container <div>\nGrid Container and Grid Items\nA grid layout consists of a parent element (the grid container), with one or more grid items.\nAll direct children of the grid container automatically become grid items.\nExample\nResult:\nTry it Yourself »\nREMOVE ADS\nDisplay Grid Property\nThe <div> element becomes a grid container when its display property is set to grid or inline-grid.\nExample\nResult:\nTry it Yourself »\nExample\nResult:\nTry it Yourself »\nAll CSS Grid Properties",
      "examples": [
        "<div class=\"container\">\n<div>1</div>\n<div>2</div>\n<div>3</div>\n<div>4</div>\n<div>5</div>\n<div>6</div>\n<div>7</div>\n<div>8</div>\n</div>",
        ".container {\ndisplay: grid;\n}",
        ".container {\ndisplay: inline-grid;\n}",
        "<div>",
        "display",
        "grid",
        "inline-grid"
      ]
    },
    {
      "title": "CSS Grid Columns, Rows and Gaps",
      "summary": "CSS Grid Columns\nThe vertical lines of grid items are called columns.\nGrid Rows\nThe horizontal lines of grid items are called rows.\nGrid Gaps\nThe spaces between each column/row are called gaps.\nYou can adjust the gap size by using one of the following properties:\ncolumn-gap\nrow-gap\ngap\nREMOVE ADS\nThe CSS column-gap Property\nThe column-gap property specifies the gap between the columns in a grid.\nExample\nSpecify a 50 pixels gap between the columns in the grid:\nResult:\nTry it Yourself »\nThe CSS row-gap Property\nThe row-gap property specifies the gap between the rows in a grid.\nExample\nSpecify a 50 pixels gap between the rows in the grid:\nResult:\nTry it Yourself »\nThe CSS gap Property\nThe gap property is a shorthand property for row-gap and column-gap:\nExample\nSet the gap between rows to 50px, and the gap between columns to 100px in the grid:\nResult:\nTry it Yourself »\nExample\nSet the gap between rows and the columns to 50px in the grid:\nResult:\nTry it Yourself »\nAll CSS Grid Column, Row and Gap Properties",
      "examples": [
        ".container {\ndisplay: grid;\ncolumn-gap: 50px;\n}",
        ".container {\ndisplay: grid;\nrow-gap: 50px;\n}",
        ".container {\ndisplay: grid;\ngap: 50px 100px;\n}",
        ".container {\ndisplay: grid;\ngap: 50px;\n}",
        "column-gap",
        "row-gap",
        "gap"
      ]
    },
    {
      "title": "CSS Grid Lines",
      "summary": "CSS Grid Lines\nThe lines between columns are called column lines.\nThe lines between rows are called row lines.\nWe can specify where to start and end a grid item by using the following properties:\ngrid-column-start\ngrid-column-end\ngrid-row-start\ngrid-row-end\ngrid-column\ngrid-row\nYou can refer to line numbers when placing a grid item in a grid container.\nCSS grid-column-start and grid-column-end\nThe grid-column-start property specifies where to start a grid item.\nThe grid-column-end property specifies where to end a grid item.\nExample\nPlace the first grid item at column-line 1, and let it end on column-line 3:\nResult:\nTry it Yourself »\nREMOVE ADS\nThe CSS grid-column Property\nThe grid-column property is a shorthand property for the grid-column-start and the grid-column-end properties.\nExample\nPlace the first grid item at column-line 1, and let it span 2 columns:\nResult:\nTry it Yourself »\nCSS grid-row-start and grid-row-end\nThe grid-row-start property specifies where to start a grid item.\nThe grid-row-end property specifies where to end a grid item.\nExample\nPlace the first grid item at row line 1, and let it end on row line 3:\nResult:\nTry it Yourself »\nThe CSS grid-row Property\nThe grid-row property is a shorthand property for the grid-row-start and the grid-row-end properties.\nExample\nPlace the first grid item at row-line 1, and let it span 2 rows:\nResult:\nTry it Yourself »\nAll CSS Grid Lines Properties",
      "examples": [
        ".item1 {\ngrid-column-start: 1;\ngrid-column-end: 3;\n}",
        ".item1 {\ngrid-column: 1 / span 2;\n}",
        ".item1 {\ngrid-row-start: 1;\ngrid-row-end: 3;\n}",
        ".item1 {\ngrid-row: 1 / span 2;\n}",
        "grid-column-start",
        "grid-column-end",
        "grid-row-start",
        "grid-row-end",
        "grid-column",
        "grid-row"
      ]
    },
    {
      "title": "CSS Grid Container",
      "summary": "Try it Yourself »\nCSS Grid Container\nA grid container contains one or more grid items arranged in columns and rows.\nDirect child elements(s) of the grid container automatically becomes grid items.\nAn element becomes a grid container when its display property is set to grid or inline-grid.\nCSS Grid Tracks\nThe rows and columns of a grid is defined with the grid-template-rows and the grid-template-columns properties (or the shorthand grid or grid-template properties).\nThese define the grid tracks. A grid track is the space between two adjacent grid lines.\nThe CSS grid-template-columns Property\nThe grid-template-columns property defines the number of columns in your grid layout, and it can define the width of each column.\nThe value is a space-separated-list, where each value defines the width of the respective column.\nIf you want your grid layout to contain 4 columns, specify the width of the 4 columns, or \"auto\" if all columns should have the same width.\nExample\nMake a grid with 4 columns of equal width:\nResult:\nTry it Yourself »\nThe grid-template-columns property can also be used to specify the exact size (width) of the columns, or a mix of fixed size and auto.\nExample\nSet a fixed size for column 1, 2, and 4, and keep column 3 as auto size:\nResult:\nTry it Yourself »\nNote: If you have more than 4 grid items in a 4 columns grid, the grid will automatically add a new row to put the items in.\nCell Sizing with the fr Unit\nThe fr unit can be used when defining grids, like any other CSS length such as %, px or em.\nThe fr unit stands for \"fraction\". This unit automatically divides the available space into fractions.\nExample: 1fr will take 1 fraction of the available space, while 2fr will take 2 fractions of the available space.\nExample\nHere, each column will take up 25% of the container width, splitting it equally:\nResult:\nTry it Yourself »\nExample\nHere, the second column will be twice as big as the others:\nResult:\nTry it Yourself »\nThe CSS grid-template-rows Property\nThe grid-template-rows property defines the height of each row.\nThe value is a space-separated-list, where each value defines the height of the respective row:\nExample\nResult:\nTry it Yourself »\nNotice that the first row in the grid above is 80px high and the second row is 200px high. The next rows will use auto as default.\nREMOVE ADS\nThe CSS justify-content Property\nThe justify-content property is used to align the grid items when they do not use all available space on the main-axis (horizontally).\nThis property can have one of the following values:\nspace-evenly\nspace-around\nspace-between\ncenter\nstart\nend\nNote: The grid item's total width has to be less than the container's width for the justify-content property to have any effect.\nExample\nThe space-evenly value displays the grid items with equal space around them:\nResult:\nTry it Yourself »\nExample\nThe space-around value displays the grid items with space around them:\nResult:\nTry it Yourself »\nExample\nThe space-between value displays the grid items with space between them:\nResult:\nTry it Yourself »\nExample\nThe center value positions the grid items in the center of the container:\nResult:\nTry it Yourself »\nExample\nThe start value positions the grid items at the start of the container:\nResult:\nTry it Yourself »\nExample\nThe end value positions the grid items at the end of the container:\nResult:\nTry it Yourself »\nThe CSS align-content Property\nThe align-content property is used to align the grid items when they do not use all available space on the cross-axis (vertically).\nThis property can have one of the following values:\nspace-evenly\nspace-around\nspace-between\ncenter\nstart\nend\nNote: The grid item's total height has to be less than the container's height for the align-content property to have any effect.\nIn the following examples we use a 400 pixels high container, to better demonstrate the align-content property.\nExample\nThe center value positions the grid items in the middle of the container:\nResult:\nTry it Yourself »\nExample\nWith space-evenly, the grid lines are evenly distributed in the grid container, with equal space on top, bottom and between:\nResult:\nTry it Yourself »\nExample\nWith space-around, the space between the grid lines are equal, but the space before the first grid item and after the last grid item is set to half of the space between the grid lines:\nResult:\nTry it Yourself »\nExample\nWith space-between, the space between the grid lines are equal, but the first grid item is flush with the start edge of the container, and the last grid item is flush with the end edge of the container:\nResult:\nTry it Yourself »\nExample\nThe start value positions the grid items at the start of the container:\nResult:\nTry it Yourself »\nExample\nThe end value positions the grid items at the end of the container:\nResult:\nTry it Yourself »\nThe CSS place-content Property\nThe place-content property is a shorthand property for the align-content and the justify-content properties.\nIf place-content has two values:\nplace-content: start center; - the align-content value is 'start' and justify-content value is 'center'\nIf place-content has one value:\nplace-content: end; - both align-content and justify-content values are 'end'\nNote: The grid item's total height and width has to be less than the container's height and width for the place-content property to have any effect.\nExample\nThe center value positions the grid items in the middle of the container (both vertically and horizontally):\nResult:\nTry it Yourself »\nExample\nThe end space-between value aligns the grid lines towards the bottom of the grid container, and aligns the grid items with the same space between them horizontally:\nResult:\nTry it Yourself »\nCSS Grid Container Properties",
      "examples": [
        ".grid-container {\ndisplay: grid;\ngrid-template-columns: auto auto auto auto;\n}",
        ".grid-container {\ndisplay: grid;\ngrid-template-columns: 80px 200px auto 40px;\n}",
        ".grid-container {\ndisplay: grid;\ngrid-template-columns: 1fr 1fr 1fr 1fr;\n}",
        ".grid-container {\ndisplay: grid;\ngrid-template-columns: 1fr 2fr 1fr 1fr;\n}",
        ".grid-container {\ndisplay: grid;\ngrid-template-rows: 80px 200px;\n}",
        ".grid-container {\ndisplay: grid;\njustify-content: space-evenly;\n}",
        ".grid-container {\ndisplay: grid;\njustify-content: space-around;\n}",
        ".grid-container {\ndisplay: grid;\njustify-content: space-between;\n}",
        ".grid-container {\ndisplay: grid;\njustify-content: center;\n}",
        ".grid-container {\ndisplay: grid;\njustify-content: start;\n}",
        ".grid-container {\ndisplay: grid;\njustify-content: end;\n}",
        ".grid-container {\ndisplay: grid;\nheight: 400px;\nalign-content: center;\n}",
        ".grid-container {\ndisplay: grid;\nheight: 400px;\nalign-content: space-evenly;\n}",
        ".grid-container {\ndisplay: grid;\nheight: 400px;\nalign-content: space-around;\n}",
        ".grid-container {\ndisplay: grid;\nheight: 400px;\nalign-content: space-between;\n}",
        ".grid-container {\ndisplay: grid;\nheight: 400px;\nalign-content: start;\n}",
        ".grid-container {\ndisplay: grid;\nheight: 400px;\nalign-content: end;\n}",
        ".grid-container {\ndisplay: grid;\nheight: 400px;\nplace-content: center;\n}",
        ".grid-container {\ndisplay: grid;\nheight: 400px;\nplace-content: end space-between;\n}",
        "display",
        "grid",
        "inline-grid",
        "grid-template-rows",
        "grid-template-columns",
        "grid-template",
        "fr",
        "justify-content",
        "space-evenly",
        "space-around",
        "space-between",
        "center",
        "start",
        "end",
        "align-content",
        "place-content",
        "place-content: start center;",
        "place-content: end;",
        "end space-between"
      ]
    },
    {
      "title": "CSS Grid Item",
      "summary": "Try it Yourself »\nCSS Grid Items\nA grid container contains one or more grid items.\nBy default, a container has one grid item for each column, in each row, but you can style the grid items so that they will span multiple columns and/or rows.\nThe CSS grid-column-start and grid-column-end\nThe grid-column-start property specifies where to start a grid item.\nThe grid-column-end property specifies where to end a grid item.\nExample\nPlace the first grid item at column-line 1, and let it end on column-line 3:\nResult:\nTry it Yourself »\nThe CSS grid-column Property\nThe grid-column property is a shorthand property for the grid-column-start and the grid-column-end properties.\nTo place an item, you can refer to line numbers, or use the keyword \"span\" to define how many columns the item will span.\nExample\nPlace the first grid item at column-line 1, and let it span 2 columns:\nResult:\nTry it Yourself »\nExample\nMake \"item1\" start on column 1 and end before column 4:\nResult:\nTry it Yourself »\nExample\nMake \"item2\" start on column 2 and span 2 columns:\nResult:\nTry it Yourself »\nThe CSS grid-row-start and grid-row-end\nThe grid-row-start property specifies where to start a grid item.\nThe grid-row-end property specifies where to end a grid item.\nExample\nPlace the first grid item at row line 1, and let it end on row line 3:\nResult:\nTry it Yourself »\nThe CSS grid-row Property\nThe grid-row property is a shorthand property for the grid-row-start and the grid-row-end properties.\nTo place an item, you can refer to line numbers, or use the keyword \"span\" to define how many rows the item will span:\nExample\nPlace the first grid item at row-line 1, and let it span 2 rows:\nResult:\nTry it Yourself »\nExample\nMake \"item1\" start on row-line 1 and end before row-line 4:\nResult:\nTry it Yourself »\nREMOVE ADS\nThe CSS grid-area Property\nThe grid-area property is a shorthand property for the grid-row-start, grid-column-start, grid-row-end and the grid-column-end properties.\nThe syntax is grid-row-start / grid-column-start / grid-row-end / grid-column-end.\nExample\nMake \"item4\" start on row-line 1 and column-line 2, and end on row-line 3 and column line 2:\nResult:\nTry it Yourself »\nExample\nMake \"item4\" start on row-line 1 and column-line 1, and span 4 rows and 1 column:\nResult:\nTry it Yourself »\nNaming Grid Items with grid-area\nThe grid-area property can also be used to assign names to grid items.\nThe named grid items can then be referred to by the grid-template-areas property of the grid container.\nExample\nItem1 gets the name \"myArea\" and spans all five columns in a five columns grid layout:\nResult:\nTry it Yourself »\nEach row is defined by apostrophes (' ').\nThe named grid items in each row is defined inside the apostrophes, separated by a space.\nExample\nLet \"myArea\" span three columns in a five columns grid layout (period signs represent items with no name):\nResult:\nTry it Yourself »\nNote: A period sign represents a grid item with no name.\nTo define two rows, define the second row inside another set of apostrophes:\nExample\nLet \"item1\" span two columns and two rows:\nResult:\nTry it Yourself »\nExample\nName all grid items, and make a ready-to-use webpage template:\nResult:\nTry it Yourself »\nThe Order of the Grid Items\nThe grid-area property can also be used to define the order of the grid items.\nThe first grid item in the HTML code does not have to appear as the first item in the grid.\nExample\nDefine the order of the grid items:\nResult:\nTry it Yourself »\nYou can also re-arrange the order for certain screen sizes, with media queries:\nExample\nRe-arrange order on small devices:\nTry it Yourself »\nThe CSS justify-self Property\nThe justify-self property is used to align the content of a grid item along the row axis.\nExample\nResult:\nTry it Yourself »\nThe CSS align-self Property\nThe align-self property is used to align the content of a grid item along the column axis.\nExample\nResult:\nTry it Yourself »\nAll CSS Grid Item Properties",
      "examples": [
        ".item1 {\ngrid-column-start: 1;\ngrid-column-end: 3;\n}",
        ".item1 {\ngrid-column: 1 / span 2;\n}",
        ".item1 {\ngrid-column: 1 / 4;\n}",
        ".item2 {\ngrid-column: 2 / span 2;\n}",
        ".item1 {\ngrid-row-start: 1;\ngrid-row-end: 3;\n}",
        ".item1 {\ngrid-row: 1 / span 2;\n}",
        ".item1 {\ngrid-row: 1 / 4;\n}",
        ".item4 {\ngrid-area: 1 / 2 / 3 / 2;\n}",
        ".item8 {\ngrid-area: 1 / 1 / span 4 / span 1;\n}",
        ".item1 {\ngrid-area: myArea;\n}\n\n.grid-container {\ngrid-template-areas: 'myArea myArea myArea myArea myArea';\n}",
        ".item1 {\ngrid-area: myArea;\n}\n\n.grid-container {\ngrid-template-areas: 'myArea myArea myArea . .';\n}",
        ".item1 {\ngrid-area: myArea;\n}\n\n.grid-container {\ngrid-template-areas:\n'myArea myArea . . .'\n'myArea myArea . . .';\n}",
        ".item1 { grid-area: header; }\n.item2 { grid-area: menu; }\n.item3 { grid-area: main; }\n.item4 { grid-area: right; }\n.item5 { grid-area: footer; }\n\n.grid-container {\ngrid-template-areas:\n'header header header header header header'\n'menu main main main main right'\n'menu footer footer footer footer footer';\n}",
        "/* place in row 1 column 3 */\n.item1 {grid-area: 1 / 3;}\n\n/* place in row 2 column 3 */\n.item2 {grid-area: 2 / 3;}\n\n/* place in row 1 column 1 */\n.item3 {grid-area: 1 / 1;}\n\n/* place in row 1 column 2 */\n.item4 {grid-area: 1 / 2;}\n\n/* place in row 2 column 1 */\n.item5 {grid-area: 2 / 1;}\n\n/* place in row 2 column 2 */\n.item6 {grid-area: 2 / 2;}",
        "@media only screen and (max-width: 500px) {\n.item1 {grid-area: 1 / span 3;}\n.item2 {grid-area: 3 / 3;}\n.item3 {grid-area: 2 / 1;}\n.item4 {grid-area: 2 / 2 / span 2;}\n.item5 {grid-area: 3 / 1;}\n.item6 {grid-area: 2 / 3;}\n}",
        ".item1 {\njustify-self: right;\n}\n\n.item6 {\njustify-self: center;\n}",
        ".item1 {\nalign-self: start;\n}\n\n.item6 {\nalign-self: center;\n}",
        "grid-column-start",
        "grid-column-end",
        "grid-column",
        "grid-row-start",
        "grid-row-end",
        "grid-row",
        "grid-area",
        "grid-template-areas",
        "justify-self",
        "align-self"
      ]
    },
    {
      "title": "CSS @supports Rule",
      "summary": "The CSS @supports Rule\nThe @supports rule lets you check if the browser supports a specific CSS property or value, and to define fallback styles if the feature is not supported.\nThis is useful for applying styles only when the browser can handle them.\nBasic Syntax\nExample: Using @supports with grid and flex\nYou can combine @supports with regular CSS to provide fallback styling.\nHere, if the browser supports display: flex, the CSS inside the @supports rule will be applied. If not, the .container class outside the @supports rule will be applied:\nExample\nHere, if the browser supports display: grid, the CSS inside the @supports rule will be applied. If not, the .container class outside the @supports rule will be applied:\nExample\nREMOVE ADS\nNegating with not\nYou can use not to apply styles only when a feature is not supported:\nExample\nCombining Conditions\nYou can use and, or, and not for multiple conditions:\nExample\nNote: Always provide fallback styles outside of @supports, for older browsers.\nCSS Reference",
      "examples": [
        "/* use this CSS if the browser does not support display: flex */\n.container {\nfloat: left;\nwidth: 100%;\n}\n\n/* use this CSS if the browser supports display: flex */\n@supports (display: flex) {\n.container {\ndisplay: flex;\n}\n}",
        "/* use this CSS if the browser does not support display: grid */\n.container {\ndisplay: table;\nwidth: 90%;\nbackground-color: #2196F3;\npadding: 10px;\n}\n\n/* use this CSS if the browser supports display: grid */\n@supports (display: grid) {\n.container {\ndisplay: grid;\ngrid: auto;\ngrid-gap: 10px;\nbackground-color: #2196F3;\npadding: 10px;\n}\n}",
        "@supports not (display: grid) {\n.warning {\nbackground-color: pink;\npadding: 10px;\nborder: 1px solid red;\n}\n}",
        "@supports (display: grid) and (gap: 10px) {\n.container {\ndisplay: grid;\ngap: 10px;\n}\n}",
        "@supports (property: value) { /* CSS rules */ }",
        "@supports",
        "not",
        "and",
        "or"
      ]
    },
    {
      "title": "Responsive Web Design - Introduction",
      "summary": "What is Responsive Web Design?\nResponsive web design makes your web page look good on all devices.\nResponsive web design uses only HTML and CSS.\nResponsive web design is not a program or a JavaScript.\nDesigning For The Best Experience For All Users\nWeb pages can be viewed using many different devices: desktops, tablets, and phones. Your web page should look good, and be easy to use, regardless of the device.\nWeb pages should not leave out information to fit smaller devices, but rather adapt its content to fit any device:\nIt is called responsive web design when you use CSS and HTML to resize, hide, shrink, enlarge, or move the content to make it look good on any screen.",
      "examples": []
    },
    {
      "title": "Responsive Web Design - The Viewport",
      "summary": "What is The Viewport?\nThe viewport is the user's visible area of a web page.\nThe viewport varies with the device, and will be smaller on a mobile phone than on a computer screen.\nBefore tablets and mobile phones, web pages were designed only for computer screens, and it was common for web pages to have a static design and a fixed size.\nThen, when we started surfing the internet using tablets and mobile phones, fixed size web pages were too large to fit the viewport. To fix this, browsers on those devices scaled down the entire web page to fit the screen.\nThis was not perfect!! But a quick fix.\nSetting The Viewport\nHTML5 introduced a method to let web designers take control over the viewport, through the <meta> tag.\nYou should include the following <meta> viewport element in the <head> section of all your web pages:\nThis gives the browser instructions on how to control the page's dimensions and scaling.\nThe width=device-width part sets the width of the page to follow the screen-width of the device (which will vary depending on the device).\nThe initial-scale=1.0 part sets the initial zoom level when the page is first loaded by the browser.\nHere is an example of a web page without the viewport meta tag, and the same web page with the viewport meta tag:\nTip: If you are browsing this page with a phone or a tablet, you can click on the two links above to see the difference.\nREMOVE ADS\nSize Content to The Viewport\nUsers are used to scroll websites vertically on both desktop and mobile devices - but not horizontally!\nSo, if the user is forced to scroll horizontally, or zoom out, to see the whole web page it results in a poor user experience.\nSome additional rules to follow:\n1. Do NOT use large fixed-width elements - For example, if an image has a width wider than the viewport, it causes the viewport to scroll horizontally. Remember to adjust this content to fit within the width of the viewport.\n2. Do NOT let the content rely on a particular width to render well - Since screen dimensions and width in CSS pixels vary widely between devices, content should not rely on a particular viewport width to render well.\n3. Use CSS media queries to apply different styling for small and large screens - Setting large absolute CSS widths for page elements will cause the elements to be too wide for smaller devices. Instead, consider using relative width values, such as width: 100%. Also, be careful of using large absolute positioning values. It may cause the element to fall outside the viewport on small devices.",
      "examples": [
        "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
        "<meta>",
        "<head>",
        "width=device-width",
        "initial-scale=1.0"
      ]
    },
    {
      "title": "Responsive Web Design - Building a Grid View",
      "summary": "What is a Grid-View?\nMany web pages are based on a grid-view, which means that the page is divided into rows and columns.\nUsing a grid-view is very helpful when designing web pages. It makes it easier to place elements on the page.\nA responsive grid-view often has 6 or 12 columns, and will shrink and expand as you resize the browser window.\nBuilding a Grid View\nLets start building a grid-view.\nFirst ensure that all HTML elements have the box-sizing property set to border-box. This makes sure that the padding and border are included in the total width and height of the elements.\nAdd the following at the begnning of your CSS:\nRead more about the box-sizing property in our CSS Box Sizing chapter.\nThe HTML\nWe create a grid container with five grid items (item1 = Header, item2 = Menu, item3 = Main content, item4 = right, item5 = Footer):\nHTML\nHere is the complete HTML:\nREMOVE ADS\nThe CSS\nWe also want to add some styles and colors to make it look better:\nNote: The webpage in the example below is responsive, but it does not look good when you resize the browser window to a very small width. In the next chapter you will learn how to fix that!\nExample\nHere is the complete CSS:",
      "examples": [
        "* {\nmargin: 0;\nbox-sizing: border-box;\n}",
        "<div class=\"grid-container\">\n\n<div class=\"item1\">\n<h1>Chania</h1>\n</div>\n\n<div class=\"item2\">\n<ul>\n<li>The Flight</li>\n<li>The City</li>\n<li>The Island</li>\n<li>The Food</li>\n</ul>\n</div>\n\n<div class=\"item3\">\n<h1>The City</h1>\n<p>Chania is the capital of the Chania region on the island of Crete.</p>\n<p>The city can be divided in two parts, the old town and the modern city. The old town is situated next to the old harbour and is the matrix around which the whole urban area was developed.</p>\n<p>Chania lies along the north west coast of the island Crete.</p>\n</div>\n\n<div class=\"item4\">\n<h2>Facts:</h2>\n<ul>\n<li>Chania is a city on the island of Crete</li>\n<li>Crete is a Greek island in the Mediterranean Sea</li>\n</ul>\n</div>\n\n<div class=\"item5\">\n<p>Resize the browser window to see how the content respond to the resizing.</p>\n</div>\n\n</div>",
        "* {\nmargin: 0;\nbox-sizing: border-box;\n}\n\nbody {\nfont-family: \"Lucida Sans\", sans-serif;\n}\n\n.grid-container {\ndisplay: grid;\ngrid-template-areas:\n'header header header header header header'\n'menu main main main main right'\n'footer footer footer footer footer footer';\ngap: 10px;\nbackground-color: white;\npadding: 10px;\n}\n\n.grid-container > div {\npadding: 10px;\nfont-size: 16px;\n}\n\n.item1 {\ngrid-area: header;\nbackground-color: purple;\ntext-align: center;\ncolor: #ffffff;\n}\n\n.item1 > h1 {\nfont-size: 40px;\n}\n\n.item2 {\ngrid-area: menu;\n}\n\n.item2 ul {\nlist-style-type: none;\nmargin: 0;\npadding: 0;\n}\n\n.item2 li {\npadding: 8px;\nmargin-bottom: 7px;\nbackground-color: #33b5e5;\ncolor: #ffffff;\n}\n\n.item2 li:hover {\nbackground-color: #0099cc;\n}\n\n.item3 {\ngrid-area: main;\n}\n\n.item3 > h1 {\nfont-size: 30px;\nmargin-bottom: 7px;\n}\n\n.item3 > p {\nmargin-bottom: 7px;\n}\n\n.item4 {\ngrid-area: right;\nborder: 2px solid #0099cc;\nbackground-color: white;\npadding: 15px;\ncolor: #000000;\n}\n\n.item4 > h2 {\nfont-size: 20px;\npadding-bottom: 10px;\n}\n\n.item4 li {\npadding: 5px;\nmargin-bottom: 5px;\n}\n\n.item5 {\ngrid-area: footer;\nbackground-color: #0099cc;\ncolor: #ffffff;\ntext-align: center;\n}",
        "box-sizing",
        "border-box"
      ]
    },
    {
      "title": "Responsive Web Design - Media Queries Variable Font Size.",
      "summary": "What is a Media Query?\nMedia query is a CSS technique introduced in CSS3.\nIt uses the @media rule to include a block of CSS properties only if a certain condition is true.\nExample\nIf the browser window is 600px or smaller, the background color will be lightblue:\nAdd a Breakpoint\nEarlier in this tutorial we made a web page with rows and columns, and it was responsive, but it did not look good on a small screen.\nMedia queries can help with that. We can add a breakpoint where certain parts of the design will behave differently on each side of the breakpoint.\nExample\nHere we use a media query to add a breakpoint at 600px:\nREMOVE ADS\nAnother Breakpoint\nYou can add as many breakpoints as you like.\nWe will also insert a breakpoint between tablets and mobile phones.\nExample\nHere we use media queries to add breakpoints when screen is max 600px, when screen is min 600px, and when screen is min 768px :\nTypical Device Breakpoints\nThere are tons of screens and devices with different heights and widths, so it is hard to create an exact breakpoint for each device. To keep things simple you could target five groups:\nExample\nOrientation: Portrait / Landscape\nMedia queries can also be used to change layout of a page depending on the orientation of the browser.\nYou can have a set of CSS properties that will only apply when the browser window is wider than its height, a so called \"Landscape\" orientation:\nExample\nThe web page will have a lightblue background if the orientation is in landscape mode:\nHide Elements With Media Queries\nAnother common use of media queries, is to hide elements on different screen sizes:\nExample\nChange Font Size With Media Queries\nYou can also use media queries to change the font size of an element on different screen sizes:\nExample\nCSS @media Reference\nFor a full overview of all the media types and features/expressions, please look at the @media rule in our CSS reference.",
      "examples": [
        "@media only screen and (max-width: 600px) {\nbody {\nbackground-color: lightblue;\n}\n}",
        "@media only screen and (max-width: 600px) {\n.item1 {grid-area: 1 / span 6;}\n.item2 {grid-area: 2 / span 6;}\n.item3 {grid-area: 3 / span 6;}\n.item4 {grid-area: 4 / span 6;}\n.item5 {grid-area: 5 / span 6;}\n}",
        "@media only screen and (max-width: 600px) {\n.item1 {grid-area: 1 / span 6;}\n.item2 {grid-area: 2 / span 6;}\n.item3 {grid-area: 3 / span 6;}\n.item4 {grid-area: 4 / span 6;}\n.item5 {grid-area: 5 / span 6;}\n}\n\n@media only screen and (min-width: 600px) {\n.item1 {grid-area: 1 / span 6;}\n.item2 {grid-area: 2 / span 1;}\n.item3 {grid-area: 2 / span 4;}\n.item4 {grid-area: 3 / span 6;}\n.item5 {grid-area: 4 / span 6;}\n}\n\n@media only screen and (min-width: 768px) {\n.item1 {grid-area: 1 / span 6;}\n.item2 {grid-area: 2 / span 1;}\n.item3 {grid-area: 2 / span 4;}\n.item4 {grid-area: 2 / span 1;}\n.item5 {grid-area: 3 / span 6;}\n}",
        "/* Extra small devices (phones, 600px and down) */\n@media only screen and (max-width: 600px) {...}\n\n/* Small devices (portrait tablets and large phones, 600px and up) */\n@media only screen and (min-width: 600px) {...}\n\n/* Medium devices (landscape tablets, 768px and up) */\n@media only screen and (min-width: 768px) {...}\n\n/* Large devices (laptops/desktops, 992px and up) */\n@media only screen and (min-width: 992px) {...}\n\n/* Extra large devices (large laptops and desktops, 1200px and up) */\n@media only screen and (min-width: 1200px) {...}",
        "@media only screen and (orientation: landscape) {\nbody {\nbackground-color: lightblue;\n}\n}",
        "/* If the screen size is 600px wide or less, hide the element */\n@media only screen and (max-width: 600px) {\ndiv.example {\ndisplay: none;\n}\n}",
        "/* If the screen size is 601px or more, set the font-size of <div> to 80px */\n@media only screen and (min-width: 601px) {\ndiv.example {\nfont-size: 80px;\n}\n}\n\n/* If the screen size is 600px or less, set the font-size of <div> to 30px */\n@media only screen and (max-width: 600px) {\ndiv.example {\nfont-size: 30px;\n}\n}",
        "@media"
      ]
    },
    {
      "title": "Responsive Web Design - Images",
      "summary": "Resize the browser window to see how the image scales to fit the page.\nUsing The width Property\nIf the width property is set to a percentage and the height property is set to \"auto\", the image will be responsive and scale up and down:\nExample\nNotice that in the example above, the image can be scaled up to be larger than its original size. A better solution, in many cases, will be to use the max-width property instead.\nUsing The max-width Property\nIf the max-width property is set to 100%, the image will scale down if it has to, but never scale up to be larger than its original size:\nExample\nAdd an Image to The Example Web Page\nExample\nREMOVE ADS\nBackground Images\nBackground images can also respond to resizing and scaling.\nHere we will show three different methods:\n1. If the background-size property is set to \"contain\", the background image will scale, and try to fit the content area. However, the image will keep its aspect ratio (the proportional relationship between the image's width and height):\nHere is the CSS code:\nExample\n2. If the background-size property is set to \"100% 100%\", the background image will stretch to cover the entire content area:\nHere is the CSS code:\nExample\n3. If the background-size property is set to \"cover\", the background image will scale to cover the entire content area. Notice that the \"cover\" value keeps the aspect ratio, and some part of the background image may be clipped:\nHere is the CSS code:\nExample\nDifferent Images for Different Devices\nA large image can be perfect on a big computer screen, but useless on a small device. Why load a large image when you have to scale it down anyway? To reduce the load, or for any other reasons, you can use media queries to display different images on different devices.\nHere is one large image and one smaller image that will be displayed on different devices:\nExample\nYou can use the media query min-device-width, instead of min-width, which checks the device width, instead of the browser width. Then the image will not change when you resize the browser window:\nExample\nThe HTML <picture> Element\nThe HTML <picture> element gives web developers more flexibility in specifying image resources.\nThe most common use of the <picture> element will be for images used in responsive designs. Instead of having one image that is scaled up or down based on the viewport width, multiple images can be designed to more nicely fill the browser viewport.\nThe <picture> element works similar to the <video> and <audio> elements. You set up different sources, and the first source that fits the preferences is the one being used:\nExample\nThe srcset attribute is required, and defines the source of the image.\nThe media attribute is optional, and accepts the media queries you find in CSS @media rule.\nYou should also define an <img> element for browsers that do not support the <picture> element.",
      "examples": [
        "img {\nwidth: 100%;\nheight: auto;\n}",
        "img {\nmax-width: 100%;\nheight: auto;\n}",
        "div {\nwidth: 100%;\nheight: 400px;\nbackground-image: url('img_flowers.jpg');\nbackground-repeat: no-repeat;\nbackground-size: contain;\nborder: 1px solid red;\n}",
        "div {\nwidth: 100%;\nheight: 400px;\nbackground-image: url('img_flowers.jpg');\nbackground-size: 100% 100%;\nborder: 1px solid red;\n}",
        "div {\nwidth: 100%;\nheight: 400px;\nbackground-image: url('img_flowers.jpg');\nbackground-size: cover;\nborder: 1px solid red;\n}",
        "/* For width smaller than 400px: */\nbody {\nbackground-image: url('img_smallflower.jpg');\n}\n\n/* For width 400px and larger: */\n@media only screen and (min-width: 400px) {\nbody {\nbackground-image: url('img_flowers.jpg');\n}\n}",
        "/* For devices smaller than 400px: */\nbody {\nbackground-image: url('img_smallflower.jpg');\n}\n\n/* For devices 400px and larger: */\n@media only screen and (min-device-width: 400px) {\nbody {\nbackground-image: url('img_flowers.jpg');\n}\n}",
        "<picture>\n<source srcset=\"img_smallflower.jpg\" media=\"(max-width: 400px)\">\n<source srcset=\"img_flowers.jpg\">\n<img src=\"img_flowers.jpg\" alt=\"Flowers\">\n</picture>",
        "width",
        "height",
        "max-width",
        "background-size",
        "min-device-width",
        "min-width",
        "<picture>",
        "<video>",
        "<audio>",
        "srcset",
        "media",
        "<img>"
      ]
    },
    {
      "title": "Responsive Web Design - Videos",
      "summary": "Using The width Property\nIf the width property is set to 100%, the video player will be responsive and scale up and down:\nExample\nNotice that in the example above, the video player can be scaled up to be larger than its original size. A better solution, in many cases, will be to use the max-width property instead.\nUsing The max-width Property\nIf the max-width property is set to 100%, the video player will scale down if it has to, but never scale up to be larger than its original size:\nExample\nAdd a Video to the Example Web Page\nWe want to add a video in our example web page. The video will be resized to always take up all the available space:\nExample",
      "examples": [
        "video {\nwidth: 100%;\nheight: auto;\n}",
        "video {\nmax-width: 100%;\nheight: auto;\n}",
        "width",
        "max-width"
      ]
    },
    {
      "title": "Responsive Web Design - Frameworks W3.CSS Demo",
      "summary": "There are many free CSS Frameworks that offer Responsive Design.\nUsing W3.CSS\nA great way to create a responsive design, is to use a responsive style sheet, like W3.CSS\nW3.CSS makes it easy to develop sites that look nice at any size!\nResize the page to see the responsiveness!\nLondon\nLondon is the capital city of England.\nIt is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.\nParis\nParis is the capital of France.\nThe Paris area is one of the largest population centers in Europe, with more than 12 million inhabitants.\nTokyo\nTokyo is the capital of Japan.\nIt is the center of the Greater Tokyo Area, and the most populous metropolitan area in the world.\nExample\nTo learn more about W3.CSS, read our W3.CSS Tutorial.\nREMOVE ADS\nBootstrap\nAnother popular framework is Bootstrap. It uses HTML and CSS to make responsive web pages:\nExample\nTo learn more about Bootstrap, go to our Bootstrap Tutorial.\nEver heard about W3Schools Spaces? Here you can create your website from scratch or use a template, and host it for free.\n* no credit card required",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\">\n<body>\n\n<div class=\"w3-container w3-blue\">\n<h1>W3Schools Demo</h1>\n<p>Resize this responsive page!</p>\n</div>\n\n<div class=\"w3-row-padding\">\n<div class=\"w3-third\">\n<h2>London</h2>\n<p>London is the capital city of England.</p>\n<p>It is the most populous city in the United Kingdom,\nwith a metropolitan area of over 13 million inhabitants.</p>\n</div>\n\n<div class=\"w3-third\">\n<h2>Paris</h2>\n<p>Paris is the capital of France.</p>\n<p>The Paris area is one of the largest population centers in Europe,\nwith more than 12 million inhabitants.</p>\n</div>\n\n<div class=\"w3-third\">\n<h2>Tokyo</h2>\n<p>Tokyo is the capital of Japan.</p>\n<p>It is the center of the Greater Tokyo Area,\nand the most populous metropolitan area in the world.</p>\n</div>\n</div>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<title>Bootstrap 5 Example</title>\n<meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\"></script>\n</head>\n<body>\n\n<div class=\"container-fluid p-5 bg-primary text-white text-center\">\n<h1>My First Bootstrap Page</h1>\n<p>Resize this responsive page to see the effect!</p>\n</div>\n\n<div class=\"container mt-5\">\n<div class=\"row\">\n<div class=\"col-sm-4\">\n<h3>Column 1</h3>\n<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit...</p>\n<p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris...</p>\n</div>\n<div class=\"col-sm-4\">\n<h3>Column 2</h3>\n<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit...</p>\n<p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris...</p>\n</div>\n<div class=\"col-sm-4\">\n<h3>Column 3</h3>\n<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit...</p>\n<p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris...</p>\n</div>\n</div>\n</div>\n\n</body>\n</html>"
      ]
    },
    {
      "title": "Responsive Web Design - Templates",
      "summary": "W3.CSS Web Site Templates\nWe have created some responsive templates with the W3.CSS framework.\nYou are free to modify, save, share, and use them in all your projects.\nTip: All templates below can be hosted for free with W3Schools Spaces.\nBand Template\nArt Template\nArchitect Template\nComing Soon Template\nREMOVE ADS\nBlog Template\nFood Blog Template\nFashion Blog Template\nGourmet Catering Template\nCV Template\nWedding Invitation Template\nPhoto Template\nBlack & White Photo Template\nPhoto III Template\nNature Portfolio Template\nPeople Portfolio Template\nPeople Portfolio II Template\nDark Portfolio Template\nBlack & White Portfolio Template\nParallax Template\nClothing Store Template\nInterior Design Template\nCafe Template\nPizza Restaurant Template\nModal Restaurant Template\nStart Page Template\nStartup Template\nApp Launch Template\nMarketing Template\nMarketing / Website Template\nWeb Page Template\nSocial Media Template\nAnalytics Template\nApartment Rental Template\nHotel Template\nTravel Template\nTravel Agency Template\nHouse Design Template\nScreen 50/50 Template\nMail Template\nKitchen Sink/Demo Template",
      "examples": []
    },
    {
      "title": "Sass Tutorial",
      "summary": "Learn Sass\nSass is a CSS pre-processor.\nSass reduces repetition of CSS and therefore saves time.\nExamples in Each Chapter\nOur \"Show Sass\" tool makes it easy to learn Sass, it shows both the code and the result.\nSass Example\nRun Example »\nSass Function References\nAt W3Schools you will find complete references of all Sass functions with syntax and examples.\nSass String Functions\nSass Numeric Functions\nSass List Functions\nSass Map Functions\nSass Selector Functions\nSass Introspection Functions\nSass Color Functions",
      "examples": [
        "/* Define standard variables and values for website */\n$bgcolor: lightblue;\n$textcolor: darkblue;\n$fontsize: 18px;\n\n/* Use the variables */\nbody {\nbackground-color: $bgcolor;\ncolor: $textcolor;\nfont-size: $fontsize;\n}"
      ]
    },
    {
      "title": "CSS Templates",
      "summary": "CSS Layout Templates\nWe have created some responsive starter templates with CSS.\nYou are free to modify, save, share, and use them in all your projects.\nHeader, equal columns and footer:\nHeader, unequal columns and footer:\nTopnav, content and footer:\nSidenav and content:\nEver heard about W3Schools Spaces? Here you can create your website from scratch or use a template, and host it for free.\n* no credit card required",
      "examples": []
    },
    {
      "title": "CSS Examples",
      "summary": "CSS Syntax\nCSS syntax explained\nCSS Selectors\nCSS selectors explained\nCSS How To / Where To\nCSS how to explained\nCSS Comments\nCSS comments explained\nCSS Colors\nCSS colors explained\nCSS Backgrounds\nCSS background properties explained\nCSS Borders\nCSS border properties explained\nCSS Margins\nMargin properties explained\nREMOVE ADS\nCSS Padding\nCSS padding properties explained\nCSS Height/Width\nCSS height/width properties explained\nCSS Box Model\nCSS box model explained\nCSS Outline\nCSS outline properties explained\nCSS Text\nCSS text properties explained\nCSS Fonts\nFont properties explained\nCSS Icons\nCSS icons explained\nCSS Links\nCSS link properties explained\nCSS Lists\nCSS list properties explained\nCSS Tables\nCSS table properties explained\nCSS Display\nCSS display properties explained\nCSS Positioning\nCSS positioning properties explained\nCSS Overflow\nCSS overflow properties explained\nCSS Floating\nCSS float properties explained\nCSS Inline-block\nCSS inline-block explained\nCSS Aligning Elements\nCSS align properties explained\nCSS Combinators\nCSS combinators explained\nCSS Pseudo-classes\nCSS pseudo-classes explained\nCSS Pseudo-elements\nCSS pseudo-elements explained\nCSS Opacity\nCSS image opacity explained\nCSS Navigation Bars\nCSS navigation bars explained\nCSS Dropdowns\nCSS dropdowns explained\nCSS Image Gallery\nCSS image gallery explained\nCSS Image Sprites\nCSS image sprites explained\nCSS Attribute Selectors\nCSS attribute selectors explained\nCSS Forms\nCSS forms explained\nCSS Counters\nCSS counters explained\nCSS Website Layout\nCSS website layout explained\nCSS Rounded Corners\nCSS rounded corners explained\nCSS Border Images\nCSS border images explained\nCSS Backgrounds\nCSS backgrounds explained\nCSS Colors\nCSS colors explained\nCSS Color Keywords\nCSS color keywords explained\nCSS Gradients\nCSS gradients explained\nCSS Shadow Effects\nCSS shadow effects explained\nCSS Text Effects\nCSS text explained\nCSS Custom Fonts\nCSS custom fonts explained\nCSS 2D Transforms\nCSS 2D transforms explained\nCSS 3D Transforms\nCSS 3D transforms explained\nCSS Transitions\nCSS transitions explained\nCSS Animations\nCSS animations explained\nCSS Tooltips\nCSS tooltips explained\nCSS Style Images\nCSS images explained\nCSS Image Centering\nCSS image centering explained\nCSS Image Filters\nCSS image filters explained\nCSS Image Shapes\nCSS image shapes explained\nCSS Object-fit\nCSS object-fit explained\nCSS Object-position\nCSS object-position explained\nCSS Buttons\nCSS buttons explained\nCSS Pagination\nCSS pagination explained\nCSS Multiple Columns\nCSS multiple columns explained\nCSS User Interface\nCSS user interface explained\nCSS Variables\nCSS variables explained\nCSS Box Sizing\nCSS box sizing explained\nCSS Media Queries\nCSS media queries explained\nCSS Media Queries - More Examples\nCSS media queries examples explained\nCSS Flexbox\nCSS flexbox explained\nCSS Flex Items\nCSS flex items explained\nCSS Flexbox Responsive\nCSS flexbox responsive explained\nCSS Grid Intro\nCSS grid intro explained\nCSS Grid Columns, Rows and Gap\nCSS grid columns, rows and gap explained\nCSS Grid Container\nCSS grid container explained\nCSS Grid Item\nCSS grid item explained\nCSS Responsive Webdesign\nCSS responsive webdesign explained",
      "examples": []
    },
    {
      "title": "CSS Online Editor My First CSS Example",
      "summary": "CSS Editor\nWith our online CSS editor, you can edit HTML, CSS and JavaScript code, and view the result in your browser.\nExample\nThis is a paragraph.\nClick on the \"Try it Yourself\" button to see how it works.\nPublish Your Code\nIf you want to save your HTML, CSS and JavaScript code, and create your own website, check out W3Schools Spaces.\nW3Schools Spaces is a website-building tool that lets you make and share your own website.\nYou can change the website's look and how it works by editing the code right in your web browser.\nIt's easy to use and doesn't require any setup:\nThe code editor is packed with features to help you achieve more:\nTemplates: Start from scratch or use a template\nCloud-based: no installations required. You only need your browser\nTerminal & Log: debug and troubleshoot your code easily\nFile Navigator: switch between files inside the code editor\nAnd much more!\nLearn Faster\nPractice is key to mastering coding, and the best way to put your CSS knowledge into practice is by getting practical with code.\nUse W3Schools Spaces to build, test and deploy code.\nThe code editor lets you write and practice different types of computer languages. It includes HTML/CSS/JavaScript, but you can use it for other languages too, such as PHP, Python, Node.js, etc.\nIf you don't know CSS, we suggest that you read our CSS Tutorial from scratch.\nBuild Powerful Websites\nYou can also use the code editor in W3School Spaces to build frontend or full-stack websites from scratch.\nOr you can use the 60+ templates available and save time:\nCreate your Spaces account today and explore them all!\nShare It With The World\nHost and publish your websites in no time with W3School Spaces.\nW3Schools subdomain and SSL certificate are included for free with W3School Spaces. An SSL certificate makes your website safe and secure. It also helps people trust your website and makes it easier to find it online.\nWant a custom domain for your website?\nYou can buy a domain or transfer an existing one and connect it to your space.\nHow Does It Work?\nGet started in a few clicks with W3School Spaces.",
      "examples": [
        "body {\nbackground-color: lightblue;\n}\n\nh1 {\ncolor: white;\ntext-align: center;\n}\n\np {\nfont-family: verdana;\n}"
      ]
    },
    {
      "title": "CSS Snippets",
      "summary": "CSS Snippets\nHave you ever seen a cool feature on a website and thought \"How do they do that\"?\nWe have collected a bunch of CSS snippets that you can use in your projects, for free:\nImage Text Blocks\nLearn How To »\nAlert Buttons\nLearn How To »\nLoaders\nLearn How To »\nTop Navigation\nLearn How To »\nAnimated Search Form\nLearn How To »\nHover Dropdowns\nLearn How To »\nFixed Sidebar\nLearn How To »\nHow To - Snippets Library\nFor more snippets, you can visit our How To section, that include hundreds of code snippets for HTML, CSS and JavaScript.\nGo to W3Schools How To section »",
      "examples": []
    },
    {
      "title": "CSS Quiz",
      "summary": "You can test your CSS skills with W3Schools' Quiz.\nThe Test\nThe test contains 25 questions and there is no time limit.\nThe test is not official, it's just a nice way to see how much you know, or don't know, about CSS.\nCount Your Score\nYou will get 1 point for each correct answer. At the end of the Quiz, your total score will be displayed. Maximum score is 25 points.\nStart the Quiz\nGood luck!\nStart the CSS Quiz ❯\nIf you don't know CSS, we suggest that you read our CSS Tutorial from scratch.\nKickstart your career\nGet certified by completing the CSS course",
      "examples": []
    },
    {
      "title": "CSS Exercises",
      "summary": "Exercises\nTest your CSS skills with exercises from all categories:\nSyntax\nSelectors\nHow To\nComments\nColors\nRGB\nHEX\nHSL\nBackground Color\nBackground Image\nBackground Repeat\nBackground Attachment\nBackground Shorthand\nBorder\nBorder Width\nBorder Color\nBorder Sides\nBorder Shorthand\nRounded Borders\nMargins\nMargin Collapse\nPadding\nHeight and Width\nBox Model\nOutline\nOutline Width\nOutline Color\nOutline Shorthand\nOutline Offset\nText\nText Alignment\nText Decoration\nText Transformation\nText Spacing\nText Shadow\nFont Family\nWeb Safe Fonts\nFont Style\nFont Size\nFont Shorthand\nIcons\nLinks\nLists\nTables\nTable Size\nTable Alignment\nTable Style\nTable Responsive\nDisplay\nMax Width\nPosition\nZ-index\nOverflow\nFloat\nClear\nInline-block\nAlign\nCombinators\nPseudo Classes\nPseudo Elements\nOpacity\nAttribute Selectors\nForms\nCounters\nUnits\nSpecificity\n!important\nMath Functions\nRounded Corners\nBorder Images\nMultiple Backgrounds\nColors\nColor Keywords\nLinear Gradients\nRadial Gradients\nConic Gradients\nShadow Effects\nBox Shadow\nText Effects\nWeb Fonts\n2D Transforms\n3D Transforms\nTransitions\nAnimations\nImages\nImage Centering\nImage Filters\nImage Shapes\nObject Fit\nObject Position\nMasking\nMultiple Columns\nUser Interface\nVariables\nThe property Rule\nBox Sizing\nMedia Queries\nFlexbox\nFlex Container\nFlex Items\nFlex Responsive\nRWD Intro\nRWD Viewport\nRWD Grid View\nRWD Media Queries\nRWD Images\nRWD Videos\nGrid Columns and Rows\nGrid Container\nGrid Item\nLog in to track your progress\nIf you haven't already, sign up to become a W3Schooler, and get points for every exercise you complete.\nAs a logged on W3Schools user you will have access to many features like having your own web page, track your learning progress, receive personal guided paths, and more.\nThe Exercise\nThe exercises are a mix of \"multiple choice\" and \"fill in the blanks\" questions. There are between 3 and 9 questions in each catergory. The answer can be found in the corresponding tutorial chapter. If you're stuck, or answer wrong, you can try again or hit the \"Show Answer\" button to see the correct answer.\nKickstart your career\nGet certified by completing the CSS course",
      "examples": []
    },
    {
      "title": "CSS and HTML Website Hosting Create a Website with HTML and CSS Powerful Code Editor Practice Makes Perfect kAI",
      "summary": "Coding Skills\nAI Tutor\nProjects\nSecurely\nChoose your Plan\nBy subscribing to a plan you support the W3Schools mission to make\nlearning available to everyone - no matter their background.\n$0 /Forever\nThis is for you that are beginning to explore coding and web development\nTrack your progress\nSet your goals\nBuild and host 1 static website\n100 credits/month\nAccess various AI features like W3Schools kAI coding tutor and interview preparation.\nNo support\n$14.99 /Month\nThis is for you that want to learn and reach your goals faster. Build fullstack projects, ad free experience.\nAd-free experience\nUnlimited challenges\nUnlimited practice tests\nBuild and host 15 static websites\nBuild and host 1 full stack server\nChoose from 75+ templates\n10000 credits/month\nAccess various AI features like W3Schools kAI coding tutor and interview preparation.\nCancel anytime\nFor teachers\nSpend less time on admin tasks while engaging your students. Help them learn, practice and collaborate. All in one place.\nAd-free for focused learning\nDashboard to manage your classroom\nStudy plans for structured learning\nTrack progress with insights\nInteractive code challenges and projects\nAccess to all courses and certification exams\nSpaces for building and publishing projects\n25% OFF\nYou can also buy a domain or connect an existing one.\nSave Time with Templates\nJust landed in Spaces\nLearn to code more effectively\nand intelligently with kAI - AI tutor\nHi! I'm kAI, W3Schools AI Tutor...\nFeel free to ask me any coding-related questions, and I'll do my best to assist you.\nI can help you checking your code for errors, improving your code's structure, explaining coding concepts in a clear and understandable way, and more...\nI can even create complete websites for you based on your input, so what are you waiting for?\nSuper Simple to Share\nIncluded for free in all plans\nWant custom domains?\nHow it works\nCoding Made Easy\nCloud-based\nTerminal & Log\nHow To Libraries\nDatabase\nFile Navigator\nPackage Manager\nAnalytics\nEnvironment Manager\nSave Time & Money.\nAll Your Files in One Place.\nFix Your Code Faster.\nGet Full Data Visibility.\nIncreased Control and Security.\nFind What You Need Quicker.\nGet Traffic Insights.\nGet Inspired\nFrequently Asked Questions\nWith Basic Spaces, you can build frontend websites. Whereas with Fullstack Spaces, you can build frontend and backend websites.\nBasic Spaces include HTML, CSS, and Javascript. Full Stack Spaces include everything in Basic Spaces plus PHP, Python, React.js, Vue.js, Node.js, Handlebars, and Django.\nYour subscription will be automatically renewed every month.\nYour access to all the benefits for the paid period of time will continue. However, the subscription will not be renewed automatically.\nTo subscribe W3Schools accounts for multiple users, you can contact sales@w3schools.com",
      "examples": []
    },
    {
      "title": "CSS Syllabus",
      "summary": "Introduction\nThe W3Schools CSS Tutorial is comprehensive and beginner-friendly.\nIt will give you a fundamental knowledge of CSS.\nIt is designed for beginners and requires no prior experience with programming.\nThe content has been carefully made to be bite-sized, simple, and easy to understand.\nThe content has been proven by millions of users over the years. It is updated and improved frequently.\nThe syllabus outline and its sequence are structured so you can learn CSS step by step, from the introduction to creating your first application with CSS.\nGet Started With CSS »\nLearning Outcomes\nUnderstand how CSS is used to format and style web pages.\nUse CSS rules and syntax to define how HTML elements look.\nUse colors, fonts, and text properties to customize webpage text.\nImplement different types of selectors (e.g., class, ID, element selectors) for targeted styling.\nUse the box model properties (border, padding, and margin) to create and change the layout.\nTo organize elements on the page, use the positioning properties (static, relative, absolute, and fixed).\nUse media queries to create responsive web pages.\nStyle borders and backgrounds with different qualities and effects.\nLearn how to utilize CSS Flexbox to create responsive, adaptable layouts.\nLink an external CSS file to an HTML document.\nNote: Are you a teacher teaching CSS? W3Schools Academy is a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more about Academy here.\nWhich Subjects Are CSS Relevant For?\nWeb pages:\nHTML is the standard markup language for creating web pages, and CSS is the language used to style them.\nComputer Science (CS) / Information Technology (IT):\nHTML together with CSS is fundamental to understanding the internet, web development and programming.\nDigital Media:\nText, photos, and other media can be added to digital platforms using CSS together with HTML, which is essential for content creation and management.\nBusiness / Entrepreneurship:\nUnderstanding how to create a website is helpful for projects related to the internet.\nArt and Design:\nCSS supports Web Design, creativity, and visual communication ideas that are all part of web design.\nSTEM (Science, Technology, Engineering, Mathematics):\nBuilding web pages with HTML and CSS is a part of technology integration in STEM projects, teaching logical thinking and problem-solving.\nCareer and Technical Education (CTE):\nCSS together with HTML is part of the curriculum for career-focused courses, especially those related to web development, IT support, and digital marketing.\nGet Started\nActivities\nIn this tutorial we offer different activities for you to learn CSS for free:\nLessons\nExercises\nQuizzes\nSign in to Track Progress\nYou can also create a free account to track your progress.\nAs a signed-in user, you get access to features such as:\nLearning paths\nSandbox and lab environments\nAchievements\nAnd much more!\nSign Up - It's free\nOverview of the Modules\nCSS HOME\nCSS Introduction\nCSS Syntax\nCSS Selectors\nCSS How To\nCSS Comments\nCSS Colors\nCSS Backgrounds\nCSS Borders\nCSS Margins\nCSS Padding\nCSS Height/Width\nCSS Box Model\nCSS Outline\nCSS Text\nCSS Fonts\nCSS Icons\nCSS Links\nCSS Lists\nCSS Tables\nCSS Display\nCSS Max-width\nCSS Position\nCSS Z-index\nCSS Overflow\nCSS Float\nCSS Inline-block\nCSS Align\nCSS Combinators\nCSS Pseudo-classes\nCSS Pseudo-elements\nCSS Opacity\nCSS Navigation Bar\nCSS Dropdowns\nCSS Image Gallery\nCSS Image Sprites\nCSS Attribute Selectors\nCSS Forms\nCSS Counters\nCSS Website Layout\nCSS Units\nCSS Specificity\nCSS Important\nCSS Math Functions\nCSS Rounded Corners\nCSS Border Images\nCSS Backgrounds\nCSS Colors\nCSS Color Keywords\nCSS Gradients\nCSS Shadows\nCSS Text Effects\nCSS Fonts\nCSS 2D Transforms\nCSS 3D Transforms\nCSS Transitions\nCSS Animations\nCSS Tooltips\nCSS Style Images\nCSS Centering Images\nCSS Image Filter Effects\nCSS Image Shapes\nCSS object-position\nCSS Masking\nCSS Buttons\nCSS Pagination\nCSS Multiple Columns\nCSS User Interface\nCSS Variables\nCSS @property\nCSS Box Sizing\nCSS Media Queries\nCSS MQ Examples Queries\nCSS Flexbox\nCSS Responsive Web Design\nCSS Viewport\nCSS Grid View\nCSS Media Queries (Responsive)\nCSS Responsive Images\nCSS Responsive Videos\nCSS Frameworks\nCSS Responsive Templates\nCSS Grid Layout\nCSS Grid Container\nCSS Grid Item\nGet Started\nSandbox and Lab Environment\nCSS, like any other coding language, is best learned by working hands-on with code.\nEasily try code with our \"Try it Yourself\" editor.\nHere, you can edit CSS code and view the result:\nCSS Example\nIf you want to explore more and host your project, we have a feature called Spaces that allows you to build, test and deploy static websites for free.\nHere you get a secure sandbox environment called Spaces, where you can practice coding and test projects in real-time.\nSpaces allow you to test, build, and deploy code. This includes a W3Schools subdomain, hosting, and secure SSL certificates.\nSpaces require no installation and run directly in the browser.\nFeatures include:\nCollaboration\nFile navigator\nTerminal & log\nPackage manager\nDatabase\nEnvironment manager\nAnalytics\nCreate a Spaces Account\nCSS Certification\nW3Schools offers an end-of-pathway certification program.\nHere you can take exams to get certified.\nThe CSS exam is a test that summarizes the W3Schools CSS syllabus.\nAfter passing the exam you get the \"Certified CSS Developer\" Certification.\nThere are two different types of certifications:\nNon-adaptive\nAdaptive\nThe non-adaptive is pass or no pass.\nThe adaptive certification is adaptive and graded; students will get a grade from intermediate, advanced to professional.\nBuy Certificate »\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach CSS?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo »",
      "examples": [
        "body {\nbackground-color: lightblue;\n}\n\nh1 {\ncolor: white;\ntext-align: center;\n}\n\np {\nfont-family: verdana;\nfont-size: 20px;\n}"
      ]
    },
    {
      "title": "CSS Study Plan",
      "summary": "Introduction\nThe CSS study plan helps you teach your students CSS step-by-step.\nCreating a study plan for CSS is easy.\nYou can use a pre-built study plan or customize it.\nStudents have different skill levels. The study plans can be customized to ensure that everyone is challenged.\nSave time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of CSS to the final exam.\nW3Schools Academy\nThis study plan is a feature of W3Schools Academy.\nW3Schools Academy is a platform that has everything you need to teach coding, all in one place.\nIt offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom.\nYou need to have an active subscription to access the study plan feature. There are two different subscription tiers:\nEssentials ($1.99 / month per student)\nFull Access ($5.99 / month per student)\nCalculate your price and order here.\nLearn More »\nAcademy also offer other features such as:\nManaging your classroom\nTracking of student progress and reports\nLabs, assignments, and code challenges (prebuilt challenges or create your own ones)\nAuto-grading\nTeaching materials\nCertification exams\nGet a free demo »\nTeacher Materials\nW3Schools has everything you need to teach CSS.\nThe CSS training materials is available for you to include and use in your study plan:\nW3Schools CSS Tutorial\nCSS Exercises\nCSS Quiz\nCSS Challenges (Coding challenges)\nCSS Certification Exam (End of Pathway Exam)\nCSS Syllabus\nWith the CSS Syllabus, your students will start with the basics, like styling text and changing colors, and move to more advanced topics, like creating layouts with Flexbox, Grid, and responsive design. Each chapter has examples, try-it-yourself sections, exercises, and quizzes to make learning easy, interactive, and fun.\nRead more about CSS Syllabus.\nStudy Plan Overview\nThe study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level.\nLearning Paths\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nInteractive Content\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTimeline and Pace\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nTrack Student Progress\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nEnd of Pathway Exam\nThe CSS study plan aligns with the CSS Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the CSS Tutorial.\nYou get reports of the students' results.\nThe CSS study plan aligns with the CSS Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the CSS Tutorial.\nYou get reports of the students' results.\nAccessibility\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nLearn More »\nSample Study Plan\nYou choose the timeline and pace of your study plans.\nSchools have different preferences.\nSome would like more intensive pace, e.g. 5 weeks, others 12 or more weeks.\nIt is completely up to you.\nFor example, this is how a 5-week CSS study plan could look like:\nWeek 1: Introduction, Colors, Backgrounds\nWeek 2: Borders, Margins Padding & Directions, Outline, Text\nWeek 3: Fonts, Icons, Links, Lists, Tables\nWeek 4: Visibility and Layouts, Float, Selectors, Image Sprites, Properties, Navigation Bar Demos, Demos\nWeek 5: Advanced, Gradients, Shadows, Variables, Flexbox, Responsive, Grid, CSS Certification Exam\nImage of Sample CSS study plan:\nReady to get started?\nStart with CSS Study Plans today.\nGet Started »\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach CSS programming?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo »",
      "examples": []
    },
    {
      "title": "CSS Interview Preparation",
      "summary": "Try W3Schools' comprehensive Front-End interview preparation feature.\nA tool that will help you get ready for your next interview.\nW3Schools interview preparation is an interactive feature powered by AI, where you can select the role of the interviewer, ask questions, and receive guidance.\nAfter the interview training you will get an evaluation of your performance that you can use to improve yourself.\nGet Started\nWhat to expect in a Front-End interview\nIf you are going to a Front-End interview, there are a few things you can expect:\nCoding Questions:\nYou will be asked coding questions, and you possibly also get a task to solve.\nExamples of technical questions:\nTell me about your experience as a Front-End developer.\nTell me about a personal project where you worked on implementing the user interface for a website.\nExamples of a task:\nCreate a webpage that shows a greeting message to the user.\nUse HTML and CSS to structure and style it. You can add a JavaScript function to change the message based on the time of the day.\nIf you don't know how to solve the task or answer the question, do not panic. It happens to everyone, even pro Front-End developers.\nShowcase your skills and projects:\nThey would like to see projects to understand your work better.\nYou can include current projects in your portfolio even if they are unfinished.\nExamples of projects to have in your portfolio:\nTo-do list app\nBlog template\nWeather dashboard\nE-commerce product page\nInteractive game or application\nREMOVE ADS\nWhat to do before the interview\nBefore you go to an interview, you should check out the company.\nIt will give you a better understanding of their values and what they do.\nCheck out:\nTheir webpage\nTheir social media platforms\nArticles and reviews\nMake sure you understand the job description:\nRead the description and take notes if you need help understanding something. You can call them before the interview and ask about the things you don't understand.\nYou can also ask a friend or a community member to help you.\nThere is a big community of Front-End developers on social media.\nReflect on why you are the right fit for this role:\nCompanies hire people they believe will be the right fit.\nThink about what value you can add to the role and the team.\nWrite them down.\nIt will help you discuss how you are the right candidate for the role.\nWe have created an interview tool to help you prepare:\nTry it out\nWhat is Front-End Development?\nFront-End development is an exciting career that allows you to create dynamic and responsive websites and apps. It's a good choice if you're interested in good user engagement and experience.\nTypical Languages Used in Front-End Development:\nHTML\nCSS\nJavaScript\nReact.js\nBootstrap\nand other CSS frameworks\nCareer Outlook\nThe demand for Front-End developers is high.\nYou can expect:\nCompetitive salary\nPossibility of working remotely\nOpportunity to grow as the industry innovates and adopts new technologies.\nThe Average Salary is $112,328 in the US.\nTypical Job Titles for a Front-End Developer:\nFront-End developer\nWeb Developer\nUI/UX Designer\nWeb App Developer\nand many more.\nTry W3Schools Pathfinder Jobs, where companies post in-demand job roles such as Front-End development, web development, Java development, and more.\nOur best tip: Prepare yourself so you can go in with confidence and enjoy the process!\nTry W3Schools interview preparation here: Interview Preperation\nBest of luck!",
      "examples": [
        "<head>\n<title>Simple Greeting Page</title>\n<style>\nbody {\nfont-family: Arial, sans-serif;\nbackground-color: #f0f0f0;\ncolor: #333;\npadding: 20px;\n}\n</style>\n</head>\n<body>\n\n<h1>Hello, welcome to our website!</h1>\n\n</body>\n</html>"
      ]
    },
    {
      "title": "W3Schools CSS Bootcamp HTML & CSS Bootcamp",
      "summary": "Learn More\nWhat You Will Learn\nHTML\nHow to use the latest HTML 5 standard to create your own Website.\nHow to format text, add graphics, create links, input forms, frames and tables, etc.\nHow to save it all in a text file that any browser can read and display.\nCSS\nHow to control the style and layout of multiple web pages all at once.\nHow to change the appearance and layout of all the pages in a Web site.\nJavaScript\nHow to program the behavior of web pages.\nHow to change the content and style of web pages.\nSelf-paced Courses\nStart learning Front-end with the W3Schools program and lay the foundations of your Web Development skills. This program is a great foundation for you that wants to get started with Front-end Development. It covers HTML, CSS and JavaScript.\nHTML is the standard markup language for Web pages. With HTML you can create your own Website.\nCSS is the language we use to style an HTML document. CSS describes how HTML elements should be displayed.\nJavaScript is the programming language of the Web.\nThis is a structured and interactive version of the w3schools HTML, CSS, and JavaScript Tutorials together with the W3schools certification.\nThe program is a set of self-paced courses with text based modules, practical interactive examples and exercises to check your understanding as you progress. Complete the modules and the final certification exams to get the w3schools certification.\nWhat You Get\n4x Certifications:\nCertified HTML Developer\nCertified CSS Developer\nCertified JavaScript Developer\nCertified Front End Developer\nCertificate of Completion\nYou get sharable certificates that can be added to your CV, Resume or LinkedIn.\nCheck out what it looks like in this example!\nThree Reasons to Join the Program\nLearn More\nHow it Works\nStep 1. Course enrollment\nEnroll by paying the enrollment fee and gain access to the course and final exam. There is no deadline to take the exam. All questions in the exam are based on W3Schools content.\nStep 2. Complete the course learning modules\nThe courses are self-paced with text based modules, practical interactive examples and exercises to check your understanding as you progress. Complete the learning modules to unlock the final exam.\nStep 3. Take the exams\nThe exams are taken at the end of each course after finishing the course learning modules. Immediately after completing the exam, you will be informed of your score and of your pass/fail status. You will get three attempts to pass each exam. You can use the new attempts to improve your score. The best result of the attempts will count.\nStep 4: Become certified\nPass the exams and get your certifications and your Certified Developer titles! Each certificate gets a unique link that can be shared with others. Validate your certificates with a link or a QR code.\nLearn More",
      "examples": []
    },
    {
      "title": "W3Schools CSS Certificate",
      "summary": "W3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nW3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nWho Should Consider Getting Certified?\nAny student or professional within the digital industry.\nCertifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market.\nW3Schools is Trusted by Top Companies\nW3Schools has over two decades of experience with teaching coding online.\nOur certificates are recognized and valued by companies looking to employ skilled developers.\nSave Time and Money\nShow the world your coding skills by getting a certification.\nThe prices is a small fraction compared to the price of traditional education.\nDocument and validate your competence by getting certified!\nExam overview\nFee: 95 USD\nAchievable certification levels:\nIntermediate (40%)\nAdvanced (75%)\nProfessional (90%)\nNumber of questions:\nAdaptive, 60 on average\nRequirement to pass:\nMinimum 40% - Intermediate level\nTime limit: 60 minutes\nNumber of attempts to pass: 3\nExam deadline: None\nCertification Expiration: None\nFormat: Online, multiple choice\nRegister now »\nAdvance Faster in Your Career\nGetting a certificate proves your commitment to upgrading your skills.\nThe certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on.\nIt gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nKnowledge is power, especially in the current job market.\nDocumentation of your skills enables you to advance your career or helps you to start a new one.\nHow Does It Work?\nStudy for free at W3Schools.com\nStudy at your own speed\nTest your skills with W3Schools online quizzes\nApply for your certificate by paying an exam fee\nTake your exam online, at any time, and from any location\nGet Your Certificate and Share It With The World\nExample certificate:\nEach certificate gets a unique link that can be shared with others.\nValidate your certification with the link or QR code.\nCheck how it looks like in this Example.\nShare your certificate on Linked in the Certifications section in just one click!\nDocument Your Skills\nGetting a certificate proves your commitment to upgrade your skills, gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nGet Your Certificate »\nLooking to add multiple users?\nAre you an educator, manager or business owner looking for courses or certifications?\nWe are working with schools, companies and organizations from all over the world.\nGet courses and/or certifications for your team here.",
      "examples": []
    },
    {
      "title": "CSS Reference",
      "summary": "CSS Properties\nA\nB\nC\nD\nE\nF\nG\nH\nI\nJ\nK\nL\nM\nN\nO\nP\nQ\nR\nS\nT\nU\nV\nW\nZ",
      "examples": [
        "break-after",
        "break-before",
        "break-inside"
      ]
    },
    {
      "title": "CSS Selector Reference",
      "summary": "CSS Selectors\nCSS selectors are used to \"find\" (or select) the HTML elements you want to style.\nUse our CSS Selector Tester to demonstrate the different selectors.\nCSS Simple Selectors\nThe simple selectors select elements based on element-name, id, and class. In addition, there is the universal selector (*).\nCSS Attribute Selectors\nThe attribute selector selects HTML elements with a given attribute set.\nCSS Nesting Selector",
      "examples": []
    },
    {
      "title": "CSS Combinators Reference",
      "summary": "CSS Combinators\nA combinator is a sign that explains the relationship between selectors.\nThe table below shows the different combinators in CSS:",
      "examples": []
    },
    {
      "title": "CSS Pseudo-classes Reference",
      "summary": "CSS Pseudo-classes\nA CSS pseudo-class is a keyword that can be added to a selector, to define a style for a special state of an element.\nSome common use for pseudo-classes:\nStyle an element when a user moves the mouse over it\nStyle visited and unvisited links differently\nStyle an element when it gets focus\nStyle valid/invalid/required/optional form elements\nStyle an element that is the first child of its parent\nSyntax\nPseudo-classes are always denoted by a single colon (:) followed by the pseudo-class name:\nThe table below lists all the pseudo-class keywords in CSS:",
      "examples": [
        "selector:pseudo-class-name {\nCSS properties\n}"
      ]
    },
    {
      "title": "CSS Pseudo-elements Reference",
      "summary": "CSS Pseudo-elements\nA CSS pseudo-element is used to style specific parts of an element.\nFor example, it can be used to:\nStyle the first letter or line, of an element\nInsert content before or after an element\nStyle the markers of list items\nStyle the viewbox behind a dialog box\nThe table below shows the different pseudo-elements in CSS:",
      "examples": []
    },
    {
      "title": "CSS At-rules Reference",
      "summary": "CSS At-rules\nCSS at-rules are statements that instruct CSS on how to behave. Each at-rule begins with an @ followed by a name.\nThe table below shows the different at-rules in CSS:",
      "examples": []
    },
    {
      "title": "CSS Functions Reference",
      "summary": "CSS Functions\nCSS functions can be used to calculate values, manipulate strings or colors, create complex gradients and shapes, and more.\nCSS functions are typically used as values for various CSS properties.",
      "examples": []
    },
    {
      "title": "CSS Aural Reference",
      "summary": "Aural Style Sheets\nAural style sheets use a combination of speech synthesis and sound effects to make the user listen to information, instead of reading information.\nAural presentation can be used:\nby blind people\nto help users learning to read\nto help users who have reading problems\nfor home entertainment\nin the car\nby print-impaired communities\nThe aural presentation converts the document to plain text and feed this to a screen reader (a program that reads all the characters on the screen).\nAn example of an Aural style sheet:\nThe example above will make the speech synthesizer play a sound, then speak the headers in a very rich male voice.\nNote: The aural CSS media type is deprecated.\nREMOVE ADS\nCSS Aural Reference",
      "examples": [
        "@media aural {\nh1, h2, h3, h4 {\nvoice-family: male;\nrichness: 80;\ncue-before: url(\"beep.au\")\n}\n}"
      ]
    },
    {
      "title": "CSS Web Safe Fonts Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet",
      "summary": "Best Web Safe Fonts for HTML and CSS\nThe following fonts are the best web safe fonts for HTML and CSS:\nArial (sans-serif)\nVerdana (sans-serif)\nTahoma (sans-serif)\nTrebuchet MS (sans-serif)\nTimes New Roman (serif)\nGeorgia (serif)\nGaramond (serif)\nCourier New (monospace)\nBrush Script MT (cursive)\nNote: Before you publish your website, always check how your fonts appear on different browsers and devices, and always use fallback fonts!\nArial (sans-serif)\nArial is the most widely used font for both online and printed media. Arial is also the default font in Google Docs.\nArial is one of the safest web fonts, and it is available on all major operating systems.\nExample\nLorem ipsum dolor sit amet.\n0 1 2 3 4 5 6 7 8 9\nVerdana (sans-serif)\nVerdana is a very popular font. Verdana is easily readable even for small font sizes.\nExample\nLorem ipsum dolor sit amet.\n0 1 2 3 4 5 6 7 8 9\nTahoma (sans-serif)\nThe Tahoma font has less space between the characters.\nExample\nLorem ipsum dolor sit amet.\n0 1 2 3 4 5 6 7 8 9\nTrebuchet MS (sans-serif)\nTrebuchet MS was designed by Microsoft in 1996. Use this font carefully. Not supported by all mobile operating systems.\nExample\nLorem ipsum dolor sit amet.\n0 1 2 3 4 5 6 7 8 9\nREMOVE ADS\nTimes New Roman (serif)\nTimes New Roman is one of the most recognizable fonts in the world. It looks professional and is used in many newspapers and \"news\" websites. It is also the primary font for Windows devices and applications.\nExample\nLorem ipsum dolor sit amet.\n0 1 2 3 4 5 6 7 8 9\nGeorgia (serif)\nGeorgia is an elegant serif font. It is very readable at different font sizes, so it is a good candidate for mobile-responsive design.\nExample\nLorem ipsum dolor sit amet.\n0 1 2 3 4 5 6 7 8 9\nGaramond (serif)\nGaramond is a classical font used for many printed books. It has a timeless look and good readability.\nExample\nLorem ipsum dolor sit amet.\n0 1 2 3 4 5 6 7 8 9\nCourier New (monospace)\nCourier New is the most widely used monospace serif font. Courier New is often used with coding displays, and many email providers use it as their default font. Courier New is also the standard font for movie screenplays.\nExample\nLorem ipsum dolor sit amet.\n0 1 2 3 4 5 6 7 8 9\nBrush Script MT (cursive)\nThe Brush Script MT font was designed to mimic handwriting. It is elegant and sophisticated, but can be hard to read. Use it carefully.\nExample\nLorem ipsum dolor sit amet.\n0 1 2 3 4 5 6 7 8 9\nTip: Also check out all available Google Fonts and how to use them.",
      "examples": [
        "Lorem ipsum dolor sit amet\nLorem ipsum dolor sit amet.\n0 1 2 3 4 5 6 7 8 9"
      ]
    },
    {
      "title": "CSS Animatable",
      "summary": "Definition and Usage\nSome CSS properties are animatable, meaning that they can be used in animations and transitions.\nAnimatable properties can change gradually from one value to another, like size, numbers, percentage and color.\nBrowser Support\nThe animation properties are supported in all modern browsers.\nThe numbers in the table specifies the first browser version that fully support CSS animations.\nExample\nAnimate the background-color from red to blue:\nREMOVE ADS\nAnimatable Properties\nThese properties are animatable in CSS:",
      "examples": [
        "@keyframes mymove {\nfrom {background-color: red;}\nto {background-color: blue;}\n}"
      ]
    },
    {
      "title": "CSS Units",
      "summary": "CSS Units\nCSS has several different units for expressing a length.\nMany CSS properties take \"length\" values, such as width, margin, padding, font-size, etc.\nLength is a number followed by a length unit, such as 10px, 2em, etc.\nExample\nSet different length values, using px (pixels):\nTry it Yourself »\nNote: A whitespace cannot appear between the number and the unit. However, if the value is 0, the unit can be omitted.\nFor some CSS properties, negative lengths are allowed.\nThere are two types of length units: absolute and relative.\nAbsolute Lengths\nThe absolute length units are fixed and a length expressed in any of these will appear as exactly that size.\nAbsolute length units are not recommended for use on screen, because screen sizes vary so much. However, they can be used if the output medium is known, such as for print layout.\n* Pixels (px) are relative to the viewing device. For low-dpi devices, 1px is one device pixel (dot) of the display. For printers and high resolution screens 1px implies multiple device pixels.\nRelative Lengths\nRelative length units specify a length relative to another length property. Relative length units scale better between different rendering medium.\nTip: The em and rem units are practical in creating perfectly scalable layout!\n* Viewport = the browser window size. If the viewport is 50cm wide, 1vw = 0.5cm.\nREMOVE ADS\nBrowser Support\nThe numbers in the table specify the first browser version that fully supports the length unit.",
      "examples": [
        "h1 {\nfont-size: 60px;\n}\n\np {\nfont-size: 25px;\nline-height: 50px;\n}",
        "width",
        "margin",
        "padding",
        "font-size",
        "10px",
        "2em",
        "0"
      ]
    },
    {
      "title": "PX to EM Conversion",
      "summary": "PX to EM Converter\nSet a default font size (usually 16px)\nThen, convert a pixel value to em, based on the default size\nOr, convert an em value to pixels, based on the default size\nSet a default font size:\nConvert PX to EM:\npx\nConvert EM to PX:\nem\nResult:\nREMOVE ADS\nBody Font Size\nIn the table below, select a body font size in pixels (px) to display a complete \"px to em and percent\" conversion table.\nTip: The default font size is usually 16px.\nWhat is the difference between PX, EM and Percent?\nPixel is a static measurement, while percent and EM are relative measurements. Percent depends on its parent font size. EM is relative to the current font size of the element (2em means 2 times the size of the current font). So, If the font size of body is 16 pixels, then 150% will be 24 pixels (1.5 * 16), and 2em will be 32 pixels (16 * 2). Look at CSS Units for more measurement units.",
      "examples": []
    },
    {
      "title": "CSS Colors",
      "summary": "Color Names Supported by All Browsers\nAll modern browsers support the following 140 color names (click on a color name, or a hex value, to view the color as the background-color along with different text colors):\nFor a full overview of CSS colors, visit our colors tutorial.",
      "examples": []
    },
    {
      "title": "CSS Legal Color Values",
      "summary": "CSS Colors\nColors in CSS can be specified by the following methods:\nHexadecimal colors\nHexadecimal colors with transparency\nRGB colors\nRGBA colors\nHSL colors\nHSLA colors\nPredefined/Cross-browser color names\nWith the currentcolor keyword\nHexadecimal Colors\nA hexadecimal color is specified with: #RRGGBB, where the RR (red), GG (green) and BB (blue) hexadecimal integers specify the components of the color. All values must be between 00 and FF.\nFor example, the #0000ff value is rendered as blue, because the blue component is set to its highest value (ff) and the others are set to 00.\nExample\nDefine different HEX colors:\nHexadecimal Colors With Transparency\nA hexadecimal color is specified with: #RRGGBB. To add transparency, add two additional digits between 00 and FF.\nExample\nDefine different HEX colors with transparency:\nRGB Colors\nAn RGB color value is specified with the rgb() function, which has the following syntax:\nrgb(red, green, blue)\nEach parameter (red, green, and blue) defines the intensity of the color and can be an integer between 0 and 255 or a percentage value (from 0% to 100%).\nFor example, the rgb(0,0,255) value is rendered as blue, because the blue parameter is set to its highest value (255) and the others are set to 0.\nAlso, the following values define equal color: rgb(0,0,255) and rgb(0%,0%,100%).\nExample\nDefine different RGB colors:\nREMOVE ADS\nRGBA Colors\nRGBA color values are an extension of RGB color values with an alpha channel - which specifies the opacity of the object.\nAn RGBA color is specified with the rgba() function, which has the following syntax:\nrgba(red, green, blue, alpha)\nThe alpha parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque).\nExample\nDefine different RGB colors with opacity:\nHSL Colors\nHSL stands for hue, saturation, and lightness - and represents a cylindrical-coordinate representation of colors.\nAn HSL color value is specified with the hsl() function, which has the following syntax:\nhsl(hue, saturation, lightness)\nHue is a degree on the color wheel (from 0 to 360) - 0 (or 360) is red, 120 is green, 240 is blue. Saturation is a percentage value; 0% means a shade of gray and 100% is the full color. Lightness is also a percentage; 0% is black, 100% is white.\nExample\nDefine different HSL colors:\nHSLA Colors\nHSLA color values are an extension of HSL color values with an alpha channel - which specifies the opacity of the object.\nAn HSLA color value is specified with the hsla() function, which has the following syntax:\nhsla(hue, saturation, lightness, alpha)\nThe alpha parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque).\nExample\nDefine different HSL colors with opacity:\nPredefined/Cross-browser Color Names\n140 color names are predefined in the HTML and CSS color specification.\nFor example: blue, red, coral, brown, etc:\nExample\nDefine different color names:\nA list of all predefined names can be found in our Color Names Reference.\nThe currentcolor Keyword\nThe currentcolor keyword refers to the value of the color property of an element.\nExample\nThe border color of the following <div> element will be blue, because the text color of the <div> element is blue:",
      "examples": [
        "#p1 {background-color: #ff0000;}   /* red */\n#p2 {background-color: #00ff00;}   /* green */\n#p3 {background-color: #0000ff;}   /* blue */",
        "#p1a {background-color: #ff000080;}   /* red transparency */\n#p2a {background-color: #00ff0080;}   /* green transparency */\n#p3a {background-color: #0000ff80;}   /* blue transparency */",
        "#p1 {background-color: rgb(255, 0, 0);}   /* red */\n#p2 {background-color: rgb(0, 255, 0);}   /* green */\n#p3 {background-color: rgb(0, 0, 255);}   /* blue */",
        "#p1 {background-color: rgba(255, 0, 0, 0.3);}   /* red with opacity */\n#p2 {background-color: rgba(0, 255, 0, 0.3);}   /* green with opacity */\n#p3 {background-color: rgba(0, 0, 255, 0.3);}   /* blue with opacity */",
        "#p1 {background-color: hsl(120, 100%, 50%);}   /* green */\n#p2 {background-color: hsl(120, 100%, 75%);}   /* light green */\n#p3 {background-color: hsl(120, 100%, 25%);}   /* dark green */\n#p4 {background-color: hsl(120, 60%, 70%);}    /* pastel green */",
        "#p1 {background-color: hsla(120, 100%, 50%, 0.3);}   /* green with opacity */\n#p2 {background-color: hsla(120, 100%, 75%, 0.3);}   /* light green with opacity */\n#p3 {background-color: hsla(120, 100%, 25%, 0.3);}   /* dark green with opacity */\n#p4 {background-color: hsla(120, 60%, 70%, 0.3);}    /* pastel green with opacity */",
        "#p1 {background-color: blue;}\n#p2 {background-color: red;}\n#p3 {background-color: coral;}\n#p4 {background-color: brown;}",
        "#myDIV {\ncolor: blue; /* Blue text color */\nborder: 10px solid currentcolor; /* Blue border color */\n}",
        "currentcolor",
        "rgb(red, green, blue)",
        "rgba(red, green, blue, alpha)",
        "hsl(hue, saturation, lightness)",
        "hsla(hue, saturation, lightness, alpha)",
        "blue",
        "red",
        "coral",
        "brown"
      ]
    },
    {
      "title": "CSS Default Values Reference",
      "summary": "Default CSS Values for HTML Elements\nThe table below shows the default CSS browser values for all HTML elements.",
      "examples": []
    },
    {
      "title": "CSS Browser Support Reference",
      "summary": "CSS Reference With Browser Support\nThe table below lists all CSS properties and how each property is supported in the different browsers:\nThe number to the right of the browser icon indicates in which browser version the property was first supported.\nIcon Explanations",
      "examples": []
    }
  ],
  "glossary": [
    "backend",
    "background attachment",
    "background clip",
    "background image",
    "background origin",
    "background repeat",
    "background shorthand",
    "background size",
    "border color",
    "border shorthand",
    "border sides",
    "border width",
    "box shadow",
    "clear",
    "conic gradients",
    "css accessibility",
    "css advanced",
    "css align",
    "css animatable",
    "css animations",
    "css at-rules",
    "css backgrounds",
    "css bootcamp",
    "css borders",
    "css buttons",
    "css colors",
    "css combinators",
    "css comments",
    "css counters",
    "css display",
    "css dropdowns",
    "css editor",
    "css errors",
    "css exercises",
    "css flexbox",
    "css float",
    "css fonts",
    "css forms",
    "css functions",
    "css gradients",
    "css grid",
    "css home",
    "css icons",
    "css important",
    "css inline-block",
    "css links",
    "css lists",
    "css margins",
    "css masking",
    "css max-width",
    "css object-fit",
    "css object-position",
    "css opacity",
    "css optimization",
    "css outline",
    "css overflow",
    "css padding",
    "css pagination",
    "css position",
    "css property",
    "css pseudo-classes",
    "css pseudo-elements",
    "css quiz",
    "css reference",
    "css references",
    "css responsive",
    "css sass",
    "css selectors",
    "css shadows",
    "css snippets",
    "css specificity",
    "css supports",
    "css syllabus",
    "css syntax",
    "css tables",
    "css templates",
    "css text",
    "css tooltips",
    "css transitions",
    "css units",
    "css variables",
    "css website",
    "css z-index",
    "exercises",
    "flex container",
    "flex items",
    "flex responsive",
    "flexbox intro",
    "font fallbacks",
    "font google",
    "font pairings",
    "font shorthand",
    "font size",
    "font style",
    "free",
    "grid container",
    "grid intro",
    "grid item",
    "grid lines",
    "hex",
    "horizontal navbar",
    "hsl",
    "javascript",
    "margin collapse",
    "outline color",
    "outline offset",
    "outline shorthand",
    "outline width",
    "overriding variables",
    "programs",
    "radial gradients",
    "report error",
    "rgb",
    "rounded borders",
    "rwd frameworks",
    "rwd images",
    "rwd intro",
    "rwd templates",
    "rwd videos",
    "rwd viewport",
    "table alignment",
    "table responsive",
    "table size",
    "table styling",
    "text alignment",
    "text decoration",
    "text shadow",
    "text spacing",
    "text transformation",
    "vertical navbar",
    "w3.css",
    "w3schools spaces"
  ],
  "objectives": [
    "View your completed tutorials, exercises, and quizzes",
    "Keep an eye on your progress and daily streaks",
    "Set goals and create learning paths",
    "Create your own personal website"
  ]
}