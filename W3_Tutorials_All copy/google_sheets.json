{
  "course_name": "Google Sheets",
  "description": "Google Sheets is a widely used spreadsheet program Google Sheets is a powerful tool to use for mathematical functions Start learning Google Sheets now Â» Learn Google Sheets We use practical examples to give the user a better understanding of the concepts. Example values can be copied from the tutorial and into your spreadsheet, making it easy for you to tag along step-by-step: Google Sheets is an widely used spreadsheet program. Example use areas:",
  "course_summary": [
    {
      "title": "Google Sheets Introduction",
      "summary": "What Is Google Sheets?\nIt is a spreadsheet program developed by Google. Google Sheets organizes data in columns and rows and allows you to do mathematical functions. It runs on the web browser.\nThe first version was released in 2006.\nGoogle Sheets is typically used for:\nAnalysis\nData entry\nData management\nAccounting\nBudgeting\nData analysis\nVisuals and graphs\nProgramming\nFinancial modeling\nAnd much, much more!\nWhy Use Google Sheets?\nIt is one of the most popular spreadsheet program in the world\nIt is easy to learn and to get started.\nThe skill ceiling is high, which means that you can do more advanced things as you become better\nIt can be used with both work and in everyday life, such as to create a family budget\nIt has a huge community support\nIt is continuously supported by Google\nTemplates and frameworks can be reused by yourself and others, lowering creation costs\nGet Started\nThis tutorial will teach you the basics of Google Sheets.\nIt is not necessary to have any prior experience with spreadsheet programs or programming.",
      "examples": []
    },
    {
      "title": "Google Sheets Get Started",
      "summary": "Google Sheets\nGoogle Sheets does not require downloading and installation of the program. It simply runs in your browser.\nGoogle Sheets can be accessed from https://docs.google.com/spreadsheets/.\nInstall\nOnce you have successfully logged in, you will land in Google Sheets' start Page. Click on the Blank button to get started with a new workbook.\nEnter a name for your workbook, and hit the Enter button on your keyboard:\nGoogle Sheets has columns and rows, similar to a squared math exercise book.\nDo not worry if the functionality looks overwhelming at first. You will get comfortable as you learn more in the chapters to come.\nFor now focus on the rows, columns, and the cells.\nOk. Let's make a function!\nFirst, click the cell A1, the one that is marked with the blue rectangle in the picture\nSecond, type =1+1.\nThird, hit the Enter button:\nCongratulations! You have typed your first function, 1+1=2.",
      "examples": [
        "=1+1",
        "A1"
      ]
    },
    {
      "title": "Google Sheets Overview",
      "summary": "Overview\nThis chapter gives an overview of Google Sheets. Google Sheets are made of two pieces, the Ribbon and the Sheet.\nHave a look at the picture below. The Ribbon is marked with a red rectangle and the Sheet is marked with a yellow rectangle:\nFirst, let's start with explaining the Ribbon.\nThe Ribbon explained\nThe Ribbon provides shortcuts to Google Sheets commands. A command is an action that allows you to make something happen. This can for example be to: insert a chart, change the font size, or to change the color of a cell.\nThe Ribbon is made up of the Sheets Home, Menu bar, Quick Access Toolbar, Groups and Commands. In this section we will explain the different parts of the Ribbon.\nSheets Home\nThe Sheets Home button takes you to Google Sheets start page where you can create new workbooks or visit your Previous workbooks.\nMenu Bar\nThe menu bar allows you to perform different actions on your workbook.\nQuick Access Toolbar\nThe quick access toolbar has the most popular actions from the menu.\nGroups\nThe groups are sets of related commands on the quick access toolbar. The groups are separated by the thin vertical line break.\nCommands\nThe commands are the buttons that you use to do actions.\nNow, let's have a look at the Sheet. Soon you will be able to understand the relationship between the Ribbon and the Sheet, and you can make things happen.\nREMOVE ADS\nThe Sheet explained\nThe Sheet is a set of rows and columns. It forms the same pattern as we have in math exercise books, the rectangle boxes formed by the pattern are called cells.\nValues can be typed to cells.\nValues can be both numbers and letters:\nEach cell has its unique reference which is its coordinates. This is where the columns and rows intersect.\nLet's break this up and explain by an example\nHave a look at the picture below. \"Hello world\" was typed in cell C4. The reference can be found by clicking on the relevant cell and seeing the reference in the Name Box to the left, which tells you that the cell's reference is C4.\nAnother way to find the reference is to first find the column, in this case C, then map that towards the row, in this case 4, which gives us the reference of C4.\nNote: The reference of the cell is its coordinates. For example, C4 has the coordinates of column C and row 4. You find the cell in the intersection of the two. The letter is always the column and the number is always the row.\nMultiple Sheets\nYou start with one Sheet by default when you create a new workbook. You can have many sheets in a workbook. New sheets can be added or removed. Sheets can be named to making it easier to work with data sets.\nAre you up for the challenge? Let's create two new sheets and give them useful names.\nFirst, click the plus icon, shown in the picture below, create two new sheets:\nTip: You can use the hotkey Shift + F11 to create new sheets. Try it!\nSecond, right click with your mouse on the relevant sheet and click rename:\nThird, enter useful names for the three sheets:\nIn this example we used the names Data Visualization, Data Structure and Raw Data. This is a typical structure when you are working with data.\nGood job! You have now created your first workbook with three named sheets!\nChapter Summary\nThe workbook has two main components: the Ribbon and the Sheet.\nThe Ribbon is used to navigate and access commands.\nThe Sheet is made up of columns and rows, which make cells.\nEach cell has its unique reference.\nYou can add new sheets to your workbook and name them.\nIn the next chapters you will learn more about the sheet, formulas, ranges and functions.",
      "examples": [
        "1 Hello World",
        "C4",
        "C",
        "4"
      ]
    },
    {
      "title": "Google Sheets Syntax",
      "summary": "Syntax\nA formula in Google Sheets is used to do mathematical calculations. Formulas always start with the equal sign = typed in the cell, followed by your calculation.\nNote: You claim the cell by selecting it and typing the equal sign (=)\nCreating formulas, step by step\nSelect a cell\nType the equal sign (=)\nSelect a cell or type a value\nEnter an arithmetic operator\nSelect another cell or a type value\nPress Enter\nFor example =1+1 is the formula to calculate 1+1=2\nNote: The value of a cell is communicated by reference(value) for example A1(2) means the cell A1 has value 2.\nUsing Formulas with Cells\nYou can type values to cells and use them in your formulas.\nLets type some dummy values to get started. Double click the cells to type values into them. Go ahead and type:\nA1(309)\nA2(320)\nB1(39)\nB2(35)\nCompare with the picture shown below:\nNote: Type values by selecting a cell, claim it by entering the equal sign (=) and then type your value. For example =309.\nWell done! You have successfully typed values to cells and now we can use them to create formulas.\nHere is how to do it, step by step.\nSelect the cell C1\nType the equal sign (=)\nSelect A1, the cell that has the (309) value\nType the minus sign (-)\nSelect B2, the cell that has the (35) value\nHit enter\nTip: The formula can be typed directly without clicking the cells. The typed formula would be the same as the value in C1 (=A1-B2).\nThe result after hitting the Enter button is C1(274). Did you make it?\nREMOVE ADS\nAnother Example\nLet's try one more example, this time let's make the formula =A2-B1.\nHere is how to do it, step by step.\nSelect the cell C2\nType the equal sign (=)\nSelect A2, the cell that has the (320) value\nType the minus sign (-)\nSelect B1, the cell that has the (39) value\nHit the Enter button\nYou got the result C2(281), right? Way to go!\nNote: You can make formulas with all four arithmetic operations, such as addition (+), subtraction (-), multiplication (*) and division (/).\nHere are some examples:\n=2+4 gives you 6\n=4-2 gives you 2\n=2*4 gives you 8\n=2/4 gives you 0.5\nIn the next chapter you will learn about Ranges and how data can be moved in the Sheet.",
      "examples": [
        "309 39 320 35",
        "=",
        "=1+1",
        "A1(2)",
        "A1",
        "2",
        "A1(309)",
        "A2(320)",
        "B1(39)",
        "B2(35)",
        "=309",
        "C1",
        "(309)",
        "-",
        "B2",
        "(35)",
        "(=A1-B2)",
        "C1(274)",
        "=A2-B1",
        "C2",
        "A2",
        "(320)",
        "B1",
        "(39)",
        "C2(281)",
        "+",
        "*",
        "/",
        "=2+4 gives you 6",
        "=4-2 gives you 2",
        "=2*4 gives you 8",
        "=2/4 gives you 0.5"
      ]
    },
    {
      "title": "Google Sheets Ranges",
      "summary": "Ranges\nRange is an important part of Google Sheets because it allows you to work with selections of cells.\nThere are four different operations for selection;\nSelecting a cell\nSelecting multiple cells\nSelecting a column\nSelecting a row\nBefore having a look at the different operations for selection, we will introduce the Name Box.\nThe Name Box\nThe Name Box shows you the reference of which cell or range you have selected. It can also be used to select cells or ranges by typing their coordinates.\nYou will learn more about the Name Box later in this chapter.\nSelecting a Cell\nCells are selected by clicking them with the left mouse button or by navigating to them with the keyboard arrows.\nIt is easiest to use the mouse to select cells.\nTo select cell A1, click on it:\nSelecting Multiple Cells\nMore than one cell can be selected by pressing and holding down Ctrl or Command and left clicking the cells. Once finished with selecting, you can let go of Ctrl or Command.\nLets try an example: Select the cells A1, A7, C1, C7 and B4.\nDid it look like the picture below?\nSelecting a Column\nColumns are selected by left clicking on them. This will select all cells in the sheet related to the column.\nTo select column A, click on the letter A in the column bar:\nSelecting a Row\nRows are selected by left clicking on them. This will select all the cells in the sheet related to that row.\nTo select row 1, click on its number in the row bar:\nSelecting the Entire Sheet\nThe entire spreadsheet can be selected by clicking on the rectangle in the top-left corner of the spreadsheet:\nNow, the whole spreadsheet is selected:\nNote: You can also select the entire spreadsheet by pressing Ctrl+A for Windows, or Command+A for MacOS.\nREMOVE ADS\nSelection of Ranges\nSelection of cell ranges has many use areas and it is one of the most important concepts of Google Sheets. Do not think too much about how it is used with values. You will learn about this in a later chapter. For now let's focus on how to select ranges.\nThere are three ways to select a range of cells\nName Box\nDrag to mark a range.\nUsing the Shift key.\nThe first and the easiest way is drag and mark. Let's keep it simple and start there.\nHow to drag and mark a range, step-by-step:\nSelect a cell\nLeft click it and hold the mouse button down\nMove your mouse pointer over the range that you want selected. The range that is marked will turn grey.\nLet go of the mouse button when you have marked the range\nLet's have a look at an example for how to mark the range A1:D10.\nNote: You will learn about why the range is called A1:D10 after this example.\nSelect cell A1:\nPress and hold A1 with the left mouse button. Move to the mouse pointer to mark the selection range. The light blue area helps us to see the covered range.\nLet go of the left mouse button when you have marked the range A1:D10:\nYou have successfully selected the range A1:D10. Well done!\nThe second way to select a range is to enter the range values in the Name Box. The range is set by first entering the cell reference for the top left corner, then the bottom right corner. The range is made using those two as coordinates. That is why the cell range has the reference of two cells and the : in between.\nTop left corner reference : Right bottom corner reference\nThe range shown in the picture has the value of A1:D10:\nThe third way to select a range is by holding the Shift key on the keyboard and selecting the reference cells for the range.\nLets try an example: Select all the cells from B2:C3.\nHold down the Shift key and select B2\nWhile holding the Shift key, select C3\nGood job!\nThe best way for now is to use the drag and mark method as it is easier and more visual.\nIn the next chapter you will learn about filling and how this applies to the ranges that we have just learned.",
      "examples": [
        "A1",
        "A7",
        "C1",
        "C7",
        "B4",
        "Ctrl+A",
        "Command+A",
        "A1:D10",
        "B2:C3",
        "B2",
        "C3"
      ]
    },
    {
      "title": "Google Sheets Fills",
      "summary": "Filling\nFilling makes your life easier and is used to fill ranges with values, so that you do not have to manually type the entries.\nFilling can be used for:\nCopying\nSequences\nDates\nFunctions\nNote: For now, do not think of functions. We will cover that in a later chapter.\nHow To Fill\nFilling is done by selecting a cell, clicking the fill icon and selecting the range using drag and mark while holding the left mouse button down.\nThe fill icon is found in the button right corner of the cell and has the icon of a small square. Once you hover over it your mouse pointer will change its icon to a thin cross.\nClick the fill icon and hold down the left mouse button, drag and mark the range that you want to cover.\nIn this example, cell A1 was selected and the range A1:A10 was marked.\nNow that we have learned how to fill. Let's look into how to copy with the fill function.\nFill Copies\nFilling can be used for copying. It can be used for both numbers and words.\nLet's have a look at numbers first.\nIn this example we have typed the value A1(1):\nFilling the range A1:A10 creates ten copies of 1:\nThe same principle goes for text.\nIn this example we have typed A1(Hello World).\nFilling the range A1:A10 creates ten copies of \"Hello World\":\nNow you have learned how to fill and to use it for copying both numbers and words. Let's have a look at sequences.\nREMOVE ADS\nFill Sequences\nFilling can be used to create sequences. A sequence is an order or a pattern. We can use the filling function to continue the order that has been set.\nSequences can for example be used on numbers and dates.\nLet's start with learning how to count from 1 to 10.\nThis is different from the last example because this time we do not want to copy, but to count from 1 to 10.\nStart with typing A1(1):\nFirst we will show an example which does not work, then we will do a working one. Ready?\nLets type the value (1) into the cell A2, which is what we have in A1. Now we have the same values in both A1 and A2.\nLet's use the fill function from A1:A10 to see what happens. Remember to mark both values before you fill the range.\nWhat happened is that we got the same values as we did with copying. This is because the fill function assumes that we want to create copies as we had two of the same values in both the cells A1(1) and A2(1).\nChange the value of A2(1) to A2(2). We now have two different values in the cells A1(1) and A2(2). Now, fill A1:A10 again. Remember to mark both the values (holding down shift) before you fill the range:\nCongratulations! You have now counted from 1 to 10.\nThe fill function understands the pattern typed in the cells and continues it for us.\nThat is why it created copies when we had entered the value (1) in both cells, as it saw no pattern. When we entered (1) and (2) in the cells it was able to understand the pattern and that the next cell A3 should be (3).\nLet's create another sequence. Type A1(2) and A2(4):\nNow, fill A1:A10:\nIt counts from 2 to 20 in the range A1:A10.\nThis is because we created an order with A1(2) and A2(4).\nThen it fills the next cells, A3(6), A4(8), A5(10) and so on. The fill function understands the pattern and helps us continue it.\nSequence of Dates\nThe fill function can also be used to fill dates.\nTest it by typing A1(29.07.2021):\nAnd fill the range A1:A10:\nThe fill function has filled 10 days from A1(29.07.2021) to A10(07.08.2021).\nNote that it switched from July to August in cell A4. It knows the calendar and will count real dates.\nNote: The recognized formats for dates, currencies and functions depends on your Google Sheets location settings.\nCombining Words and Letters\nWords and letters can also be combined.\nType A1(Hello 1) and A2(Hello 2):\nNext, fill A1:A10 to see what happens:\nThe result is that it counts from A1(Hello 1) to A10(Hello 10). Only the numbers have changed.\nIt recognised the pattern of the numbers and continued it for us. Words and numbers can be combined, as long as you use a recognizable pattern for the numbers.",
      "examples": [
        "A1",
        "A1:A10",
        "A1(1)",
        "A1(Hello World)",
        "1",
        "A2",
        "A2(1)",
        "A2(2)",
        "2",
        "A3",
        "3",
        "A1(2)",
        "A2(4)",
        "2 to 20",
        "A3(6)",
        "A4(8)",
        "A5(10)",
        "A1(29.07.2021)",
        "A10(07.08.2021)",
        "A4",
        "A1(Hello 1)",
        "A2(Hello 2)",
        "A10(Hello 10)"
      ]
    },
    {
      "title": "Google Sheets Double Click to Fill",
      "summary": "Double Click to Fill\nThe fill function can be double clicked to complete formulas in a range:\nNote: For the double click to work it has to see a recognizable pattern.\nFor example: by using headers, or with the formulas in the columns or rows next to the data.\nDouble Click to Fill Example\nLet's use the Double click fill function to calculate the AttackB2:B20 + Defense C2:C20 for the Pokemons in the range D2:D20.\nSelect D2\nType =\nSelect B2\nType +\nSelect C2\nHit enter\nDouble click the fill function highlighted by the black rectangle\nWay to go! The function understands the pattern and completes the calculation for D2:D20. Note that it stops when there is no more data to calculate, at row 20.\nNote: The Fill uses the data in nearby columns. If there is an empty column between the data and the destination range, the fill function might not work properly.",
      "examples": [
        "Name Attack Defense Caterpie 30 35 Metapod 20 55 Butterfree 45 50 Weedle 35 30 Kakuna 25 50 Beedrill 90 40 Pidgey 45 40 Pidgeotto 60 55 Pidgeot 80 75 Rattata 56 35 Raticate 81 60 Spearow 60 30 Fearow 90 65 Ekans 60 44 Arbok 85 69 Pikachu 55 40 Raichu 90 55 Sandshrew 75 85 Sandslash 100 110",
        "B2:B20",
        "C2:C20",
        "D2:D20",
        "D2",
        "=",
        "B2",
        "+",
        "C2"
      ]
    },
    {
      "title": "Google Sheets Move Cells",
      "summary": "Moving Cells\nThere are two ways to move cells: Drag and drop or by copy and paste.\nDrag and Drop\nLet's start by typing or copying some values that we can work with:\nNext, start by marking the area A1:B4:\nYou can drag and drop the range by pressing and holding the left mouse button on the border. The mouse cursor will change to a hand symbol when you hover over the border.\nDrag and drop it when you see the symbol.\nMove the range to B2:C5 as shown in the picture:\nGreat! Now you have created more space, so that we have room for more data.\nNote: It is important to give context to the data, making the spreadsheet easy to understand. This can be done by adding text which explains the data.\nLet's go ahead and give the data more context. Type or copy the following values:\nYes, that is right, we are looking at Pokemon! Giving context to the data is always helpful.\nNext, lets see how we can move data by using cut and paste.\nCut and Paste\nRanges can be moved by cutting and pasting values from one place to another.\nTip: You can cut using the hotkey Ctrl+X (Command + X for Mac) and paste by Ctrl+V (Command + V for Mac). This saves you time.\nMark the range A1:C5\nPress Ctrl+X (Command + X for Mac).\nCutting highlights the borders in dashed lines.\nClick on the paste destination B6 and press Ctrl+V (Command + V for Mac).\nYou have successfully cutted and pasted the range from A1:C5 to B6:D10.\nREMOVE ADS\nCopy and paste\nCopy and paste works in the same way as cut and paste. The difference is that it does not remove the original cells.\nLet's copy the cells back from B6:D10 to A1:C5.\nTip: You can copy using the hotkey Ctrl+C (Command + C for Mac) and paste by Ctrl+V (Command + V for Mac). This saves you time.\nMark the range B6:D10.\nPress Ctrl+C (Command + C for Mac).\nCopying highlights the borders in dashed lines.\nClick on the paste destination A1 and press Ctrl+V (Command + V for Mac).\nThe difference between cutting and copying, is that cutting removes the originals, while copying leaves the originals.\nNext, let's delete the original data and keep the data in the A1:C5 range.\nDelete Data\nSelect the original cells and remove them by pressing the Delete button on the keyboard:",
      "examples": [
        "309 39 320 35 318 45 314 44",
        "Health Attack Charmander 309 39 Pikachu 320 35 Bulbasaur 318 45 Squirtle 314 44",
        "A1:B4",
        "B2:C5",
        "Ctrl+X",
        "Command + X",
        "Ctrl+V",
        "Command + V",
        "A1:C5",
        "B6",
        "B6:D10",
        "Ctrl+C",
        "Command + C",
        "A1"
      ]
    },
    {
      "title": "Google Sheets Add Cells",
      "summary": "Adding New Columns\nColumns can be added and deleted. You access the menu by right clicking the column letter and clicking on Insert 1 left or Insert 1 right.\nLet's try to create a new column B.\nRight click on the column and select Insert 1 left to insert a column on the left side of the current column:\nAnd a new column is created:\nNext, we need to get some Pokemon trainers in there. Type or copy the following data in the new column B:\nREMOVE ADS\nAdding New Rows\nRows can also be added and deleted. You access the menu by right clicking the row number and clicking on Insert 1 below or Insert 1 above.\nLet's try to create a new row 4.\nRight click on the row and select Insert 1 above to insert a row bellow the current row:\nAnd a new column is created:\nWe forgot to add Iva's Pokemon, Marowak. Lets add Marowak's data to the new row 4, by typing or copying the following values:\nExcellent job!",
      "examples": [
        "Health Attack Charmander 309 39 Pikachu 320 35 Bulbasaur 318 45 Squirtle 314 44",
        "Trainer Health Attack Charmander Iva 309 39 Pikachu Iva 320 35 Bulbasaur Liam 318 45 Squirtle Liam 314 44",
        "Trainer Health Attack Charmander Iva 309 39 Pikachu Iva 320 35 Marowak Iva 425 60 Bulbasaur Liam 318 45 Squirtle Liam 314 44",
        "B",
        "4"
      ]
    },
    {
      "title": "Google Sheets Delete Cells",
      "summary": "Delete Cells\nCells can be deleted by selecting them, and pressing the Delete button on the keyboard.\nNote: The delete function will not delete the formatting of the cell, just the value inside of it.\nLet's have a look at three examples.\nExample 1\nPressing the Delete button:\nExample 2\nPressing the Delete button:\nREMOVE ADS\nExample 3\nWith formatting:\nPressing the Delete button:\nNote that it only deletes the value in the cells, and not the formatting (the color).\nNote: You will learn more about formatting, and how to style cells in a later chapter.",
      "examples": []
    },
    {
      "title": "Google Sheets Undo and Redo",
      "summary": "Undo\nThe Undo function lets you reverse an action.\nUndo is helpful if you regret an action and want to go back to how it was before.\nExamples of use\nUndo deleting a formula\nUndo adding a column\nUndo removing a row\nNote: You cannot Undo things that you do in the File Menu, such as deleting a sheet, saving a spreadsheet or changing the options. The thumb rule is that you can Undo things you do in your sheet.\nThere are three ways to access the Undo command.\n1) Pressing the Undo button in the Ribbon:\n2) Using the keyboard shortcut Ctrl+Z (Command+Z for Mac)\n3) Using the Edit menu from the menu bar\nLet's have a look at an example:\nNote:: It is recommended to practice using the keyboard shortcut. It saves you time!\nREMOVE ADS\nRedo\nThe Redo function has the opposite effect as Undo, it reverses the Undo action.\nRedo is helpful if you regret using Undo.\nNote: The Redo command is only available if you have used Undo.\nThere are three ways to access the Redo command.\n1) Pressing the Redo button in the Ribbon:\n2) Using the keyboard shortcut Ctrl+Y (Command+Y for Mac)\n3) Using the Edit menu from the menu bar\nTip: Practice for yourself to get familiar with Undo and Redo.",
      "examples": [
        "Ctrl+Z",
        "Command+Z",
        "Ctrl+Y",
        "Command+Y"
      ]
    },
    {
      "title": "Google Sheets Formulas",
      "summary": "Formulas\nA formula in Google Sheets is used to do mathematical calculations. Formulas always start with the equal sign (=) typed in the cell, followed by your calculation.\nFormulas can be used for calculations such as:\n=1+1\n=2*2\n=4/2=2\nformulas can take cells as input.\nLet's have a look at an example.\nType or copy the following values:\nNow we want to do a calculation with those values.\nStep by step:\nSelect C1 and type (=)\nSelect A1\nType (+)\nSelect A2\nPress enter\nYou got it! You have successfully calculated A1(2) + A2(4) = C1(6).\nNote: Using cells to make calculations is an important part of Google Sheets and you will use this a lot as you learn.\nLets change from addition to multiplication, by replacing the (+) with a (*). It should now be =A1*A2, press enter to see what happens.\nYou got C1(8), right? Well done!\nGoogle Sheets is great in this way. It allows you to add values to cells and do calculations on them.\nNow, try to change the multiplication (*) to subtraction (-) and dividing (/).\nDelete all values in the sheet after you have tried the different combinations.\nLet's add new data for the next example, where we will help the Pokemon trainers to count their Pokeballs.\nType or copy the following values:\nThe data explained:\nColumn A: Pokemon Trainers\nRow 1: Types of Pokeballs\nRange B2:D4: Amount of Pokeballs, Great balls and Ultra balls\nNote: It is important to practice reading data to understand its context. In this example you should focus on the trainers and their Pokeballs, which have three different types: Pokeball, Great ball and Ultra ball.\nLet's help Iva to count her Pokeballs. You find Iva in A2(Iva). The values in row 2 B2(2), C2(3), D2(1) belong to her.\nCount the Pokeballs, step by step:\nSelect cell E2 and type (=)\nSelect B2\nType (+)\nSelect C2\nType (+)\nSelect D2\nHit enter\nDid you get the value E2(6)? Good job! You have helped Iva to count her Pokeballs.\nNow, let's help Liam and Adora with counting theirs.\nDo you remember the fill function that we learned about earlier? It can be used to continue calculations sidewards, downwards and upwards. Let's try it!\nLets use the fill function to continue the formula, step by step:\nSelect E2\nFill E2:E4\nThat is cool, right? The fill function continued the calculation that you used for Iva and was able to understand that you wanted to count the cells in the next rows as well.\nNow we have counted the Pokeballs for all the trainers; Iva(6), Liam(12) and Adora(15).\nLet's see how many Pokeballs Iva, Liam and Adora have in total.\nThe total is called SUM in Google Sheets.\nThere are two ways to calculate the SUM.\nAdding cells\nSUM function\nGoogle Sheets has many pre-made functions available for you to use. The SUM function is one of the most used ones. You will learn more about functions in a later chapter.\nLet's try both approaches.\nNote: You can navigate to the cells with your keyboard arrows instead of right clicking them. Try it!\nSum by adding cells, step by step:\nSelect cell E5, and type =\nSelect E2\nType (+)\nSelect E3\nType (+)\nSelect E4\nHit enter\nThe result is E5(33).\nLet's try the SUM function.\nRemember to delete the values that you currently have in E5.\nSUM function, step by step:\nType E5(=)\nWrite SUM\nDouble click SUM in the menu\nMark the range E2:E4\nHit enter\nGreat job! You have successfully calculated the SUM using the SUM function.\nIva, Liam and Adora have 33 Pokeballs in total.\nLet's change a value to see what happens. Type B2(7):\nThe value in cell B2 was changed from 2 to 7. Notice that the formulas are doing calculations when we change the value in the cells, and the SUM is updated from 33 to 38. It allows us to change values that are used by the formulas, and the calculations remain.\nChapter Summary\nValues used in formulas can be typed directly and by using cells. The formula updates the result if you change the value of cells, which is used in the formula. The fill function can be used to continue your formulas upwards, downwards and sidewards. Google Sheets has pre-built functions, such as SUM.\nIn the next chapter you will learn about relative and absolute references.",
      "examples": [
        "2 4",
        "Trainers Pokeball Great Balls Ultra Balls Iva 2 3 1 Liam 5 5 2 Adora 10 2 3",
        "=",
        "=1+1",
        "=2*2",
        "=4/2=2",
        "C1",
        "A1",
        "+",
        "A2",
        "A1(2) + A2(4) = C1(6)",
        "*",
        "=A1*A2",
        "C1(8)",
        "-",
        "/",
        "A",
        "1",
        "B2:D4",
        "A2(Iva)",
        "row 2 B2(2), C2(3), D2(1)",
        "E2",
        "B2",
        "C2",
        "D2",
        "E2(6)",
        "E2:E4",
        "6",
        "12",
        "15",
        "E3",
        "E4",
        "E5(33)",
        "E5",
        "E5(=)",
        "33",
        "B2(7)",
        "2",
        "7",
        "38"
      ]
    },
    {
      "title": "Google Sheets Relative and Absolute References",
      "summary": "Relative and Absolute References\nCells in Google Sheets have unique references, which is their location.\nReferences are used in formulas to do calculations, and the fill function can be used to continue formulas sidewards, downwards and upwards.\nGoogle Sheets have two types of references:\nRelative references\nAbsolute references\nAbsolute reference is a choice we make. It is a command which tells Google Sheets to lock a reference.\nThe dollar sign ($) is used to make references absolute.\nExample of relative reference: A1\nExample of absolute reference: $A$1\nRelative reference\nReferences are relative by default, and are without dollar sign ($).\nThe relative reference makes the cells reference free. It gives the fill function freedom to continue the order without restrictions.\nLet's have a look at a relative reference example, helping the Pokemon trainers to count their Pokeballs (B2:B7) and Great balls (C2:C7).\nThe result is: D2(5):\nNext, fill the range D2:D7:\nThe references being relative allows the fill function to continue the formula for rows downwards.\nHave a look at the formulas in D2:D7. You can do this by clicking ion the view menu and choosing Show formulas.\nNotice that Google Sheets calculates the next row as you fill.\nREMOVE ADS\nA Non-Working Example\nLet's try an example that will not work.\nFill D2:G2, filling to the right instead of downwards. Resulting in strange numbers:\nHave a look at the formulas.\nIt assumes that we are calculating sidewards and not downwards.\nThe numbers that we want to calculate need to be in the same direction as we fill.",
      "examples": [
        "Trainers Pokeballs Great balls Iva 2 3 Liam 5 5 Pablo 10 2 Jenny 7 1 Iben 6 2 Kasper 3 4",
        "$",
        "A1",
        "$A$1",
        "B2:B7",
        "C2:C7",
        "D2(5)",
        "D2:D7",
        "D2:G2"
      ]
    },
    {
      "title": "Google Sheets Absolute References",
      "summary": "Absolute References\nAbsolute reference is when a reference has the dollar sign ($).\nIt locks a reference in the formula.\nAdd $ to the formula to use absolute references.\nThe dollar sign has three different states:\nAbsolute for column and row. The reference is absolutely locked.\nExample =$A$1\nAbsolute for the column. The reference is locked to that column. The row remains relative.\nExample =$A1\nAbsolute for the row. The reference is locked to that row. The column remains relative.\nExample =A$1\nLet's have a look at an example helping the Pokemon trainers to calculate prices for Pokeballs\nType or copy the following data:\nData explained\nThere are 6 trainers: Iva, Liam, Adora, Jenny, Iben and Kasper.\nThey have different amount of Pokeballs each in their shop cart\nThe price per Pokeball is 2 coins\nHelp them to calculate the prices for the Pokeballs.\nThe price's reference is B11, we do not want the fill function to change this, so we lock it.\nThe reference is absolutely locked by using the formula $B$11.\nHow to do it, step by step:\nType C2(=)\nSelect B11\nType ($) before the B and 11 ($B$11)\nType (*)\nSelect B2\nHit Enter\nAuto fill C2:C7\nCongratulations! You successfully calculated the prices for the Pokeballs using an absolute reference.\nNote: You can press F4 on your keyboard and toggle between different states of absolute references.",
      "examples": [
        "Trainers Pokeballs Cost Iva 2 Liam 5 Pablo 10 Jenny 7 Iben 6 Kasper 3 Price 2",
        "$",
        "=$A$1",
        "=$A1",
        "=A$1",
        "B11",
        "$B$11",
        "C2(=)",
        "B",
        "11",
        "*",
        "B2",
        "C2:C7",
        "F4"
      ]
    },
    {
      "title": "Google Sheets Addition Operator",
      "summary": "Addition Operator\nAddition uses the + symbol in Google Sheets, and is also known as plus.\nThere are two ways to do addition in Google Sheets. Either by using the + symbol in a formula or by using the SUM function.\nHow to add cell values:\nSelect a cell and type (=)\nSelect a cell\nType (+)\nSelect another cell\nHit enter\nYou can add more cells to the formula by typing (+) between the cells.\nLet's have a look at some examples.\nAdding Two Manual Entries\nType A1(=)\nType 5+5\nHit enter\nCongratulations! You have successfully added 5+5=10.\nAdding Two Cells\nFirst let's add some numbers to work with. Type the following values:\nHow to do it, step by step:\nType B1(=)\nSelect A1\nType (+)\nSelect A2\nHit enter\nGreat! 30 is the result by adding A1 and A2.\nREMOVE ADS\nAdding Several Cells\nFirst let's add some numbers to work with. Type the following values:\nStep by step to add several cells:\nType B1(=)\nSelect A1\nType (+)\nSelect A2\nType (+)\nSelect A3\nType (+)\nSelect A4\nType (+)\nSelect A5\nHit enter\nGood job! You have successfully added five cells!\nAdding with SUM\nLet's keep the numbers from the last exercise. If you did last exercise, remove the value in B1.\nStep by step to add with SUM:\nType B1(=SUM)\nClick the SUM command\nMark the range A1:A5\nHit enter\nNote: SUM saves you time! Keep practicing this function.\nAdding Using Absolute Reference\nYou can also lock a cell and add it to other cells.\nHow to do it, step by step:\nSelect a cell and type (=)\nSelect the cell you want to lock, add two dollar signs ($) before the column and row or press F4\nType (+)\nFill a range\nLet's have a look at an example where we add B1(5) to the range A1:A10 using absolute reference and the fill function.\nCopy the values:\nAdding with SUM\nLet's keep the numbers from the last exercise. If you did last exercise, remove the value in B1.\nStep by step:\nType C1(=)\nSelect B1\nType dollar sign before column and row $B$1\nType (+)\nSelect A1\nHit enter\nFill the range C1:C10\nGreat! You have successfully used absolute reference to add B1(5) with the range A1:A10.",
      "examples": [
        "10 20 20 30 20",
        "50 5 45 40 35 30 25 20 15 10 5",
        "+",
        "=",
        "A1(=)",
        "5+5",
        "5+5=10",
        "B1(=)",
        "A1",
        "A2",
        "30",
        "A3",
        "A4",
        "A5",
        "B1",
        "B1(=SUM)",
        "SUM",
        "A1:A5",
        "$",
        "F4",
        "B1(5)",
        "A1:A10",
        "C1(=)",
        "$B$1",
        "C1:C10"
      ]
    },
    {
      "title": "Google Sheets Subtraction Operator",
      "summary": "Subtraction Operator\nSubtraction uses the - symbol, and is also known as minus.\nHow to subtract cells:\nSelect a cell and type (=)\nSelect the minuend\nType (-)\nSelect the subtrahend\nHit enter\nNote: The minuend is the number to which the subtrahend subtracts from.\nYou can add more cells to the formula by typing (-) between the cells.\nLet's have a look at some examples.\nSubtracting Two Manual Entries\nLet's start with adding in a formula. Start with a clean sheet\nStep by step:\nType A1(=)\nType 100-50\nHit enter\nTip: You can add more values into the formula by typing (-) between the cells.\nSubtracting Using Two Cells\nLet's add some numbers to work with. Type the following values:\nSubtracting using two cells, step by step:\nType A3(=)\nSelect A1\nType (-)\nSelect A2\nHit enter\nREMOVE ADS\nSubtracting Using Many Cells\nLet's subtract using many cells. First, copy the following values:\nStep by step:\nType B1(=)\nSelect A1\nType (-)\nSelect A2\nType (-)\nSelect A3\nType (-)\nSelect A4\nType (-)\nSelect A5\nHit enter\nSubtracting Using Absolute Reference\nYou can lock a cell and subtract it from other cells.\nHow to do it, step by step:\nSelect a cell and type (=)\nSelect the minuend\nType (-)\nSelect the subtrahend and add two dollar signs ($) before the column and row or press F4\nHit enter\nFill the range\nNote: The minuend is the number to which the subtrahend subtracts from.\nLet's have a look at an example where we subtract B1(5) from the range A1:A10 using absolute reference and the fill function.\nCopy the values to follow along:\nStep by step:\nType C1(=)\nSelect A1\nType (-)\nSelect B1 and type dollar sign before column and row $B$1\nHit Enter\nFill C1:C10\nYou got it! You have successfully used absolute reference to subtract B1(5) from the minuend range A1:A10.",
      "examples": [
        "100 20 20 30 25",
        "50 5 45 40 35 30 25 20 15 10 5",
        "-",
        "=",
        "A1(=)",
        "100-50",
        "A3(=)",
        "A1",
        "A2",
        "B1(=)",
        "A3",
        "A4",
        "A5",
        "$",
        "F4",
        "B1(5)",
        "A1:A10",
        "C1(=)",
        "B1",
        "$B$1",
        "C1:C10"
      ]
    },
    {
      "title": "Google Sheets Multiplication Operator",
      "summary": "Multiplication Operator\nMultiplication uses the * symbol in Google Sheets.\nHow to multiply cells:\nSelect a cell and type (=)\nSelect a cell\nType (*)\nSelect another cell\nHit enter\nYou can add more cells to formula by typing (*) between the cells.\nLet's have a look at some examples.\nMultiplying Manual Entries\nLet's start with adding in a formula. Start with a clean sheet.\nStep by step:\nType A1(=)\nType 2*2\nHit enter\nMultiplying Two Cells\nLet's add some numbers to work with. Type the following values:\nStep by step:\nType A3(=)\nSelect A1\nType (*)\nSelect A2\nHit enter\nREMOVE ADS\nMultiplying Using Absolute Reference\nYou can lock a cell and multiply it with other cells.\nHow to do it, step by step:\nSelect a cell and type (=)\nSelect the cell you want to lock and add two dollar signs ($) before the column and row or press F4\nType (*)\nSelect another cell\nHit enter\nFill the range\nLet's have a look at an example where we multiply B1(5) with the range A1:A10 using absolute reference and the fill function.\nCopy the values to follow along:\nStep by step:\nType C1(=)\nSelect B1 type dollar sign before column and row $B$1\nType (*)\nSelect A1\nHit enter\nFill C1:C10\nYou got it! You have successfully used absolute reference to multiply B1(5) with the range A1:A10.",
      "examples": [
        "50 5 45 40 35 30 25 20 15 10 5",
        "*",
        "=",
        "A1(=)",
        "2*2",
        "A3(=)",
        "A1",
        "A2",
        "$",
        "F4",
        "B1(5)",
        "A1:A10",
        "C1(=)",
        "B1",
        "$B$1",
        "C1:C10"
      ]
    },
    {
      "title": "Google Sheets Division Operator",
      "summary": "Division Operator\nDivision uses the / symbol in Google Sheets.\nHow to do division cells:\nSelect a cell and type (=)\nSelect a cell\nType (/)\nSelect another cell\nHit enter\nYou can add more cells to the formula by typing (/) between the cells.\nLet's have a look at some examples.\nDividing Manual Entries\nLet's start with adding in a formula. Start with a clean sheet.\nStep by step:\nType A1(=)\nType 4/2\nHit enter\nDividing Two Cells\nLet's add some numbers to work with. Type the following values:\nStep by step:\nType A3(=)\nSelect A1\nType (/)\nSelect A2\nHit enter\nREMOVE ADS\nDividing Using Absolute Reference\nYou can lock a cell and divide it with other cells.\nHow to do it, step by step:\nSelect a cell and type (=)\nSelect the dividend\nType (/)\nSelect the divisor lock and add two dollar signs ($) before the column and row or press F4\nHit enter\nFill the range\nNote: Dividend is the number being divided by the divisor.\nLet's have a look at an example where we divide B1(5) with the range A1:A10 using absolute reference and the fill function.\nCopy the values to follow along:\nStep by step:\nType C1(=)\nSelect A1\nType (/)\nSelect B1 type dollar sign before column and row $B$1\nHit enter\nFill C1:C10\nGoob job! You have successfully used absolute reference to divide B1(5) with the range A1:A10.",
      "examples": [
        "50 5 45 40 35 30 25 20 15 10 5",
        "/",
        "=",
        "A1(=)",
        "4/2",
        "A3(=)",
        "A1",
        "A2",
        "$",
        "F4",
        "B1(5)",
        "A1:A10",
        "C1(=)",
        "B1",
        "$B$1",
        "C1:C10"
      ]
    },
    {
      "title": "Google Sheets Parentheses",
      "summary": "Parentheses\nParentheses () are used to change the order of an operation.\nUsing parentheses makes Google Sheets do the calculation for the numbers inside the parentheses first, before calculating the rest of the formula.\nParentheses are added by typing () on both sides of numbers, like (1+2).\nExamples\nNo parentheses\n=10+5*2\nThe result is 20 because it calculates 10+10\nWith parentheses\n=(10+5)*2\nThe result is 30 because it calculates (15)*2\nFormulas can have groups of parentheses.\n=(10+5)+(2*4)+(4/2)\nNote: Cells can be used as values in the formulas inside parentheses, like =(A1+A2)*B5. We have used manual entries in our examples to keep things simple.\nLet's have a look at some real examples in Google Sheets.\nWithout Parentheses\nThe result is 17, the calculation is 2+15. It uses 15 because 3*5=15.\nWith One Parentheses\nThe result is 25, the calculation is 5*5. It uses 5 because it has calculated numbers inside the parentheses (2+3)=5 first.\nREMOVE ADS\nWith Many Parentheses\nThe result is 17, the calculation is 5+8+4. The numbers inside the parentheses are calculated first.\nNesting Parentheses\nWhen using more advanced formulas you may need to nest parentheses. You can look at this like an onion, which has many layers. Google Sheets will calculate the numbers inside the parentheses first, layer by later, starting with the inner most layer.\nExample no nesting\n=2*2+3*4+5*5*2\nIt calculates the values flat as you would do with a calculator.\nExample nesting\n=((2*2)+(3*4)+(5*5))*2\nLet's break it down and explain.\nNesting creates layers like an onion. You can have many layers. This example uses two, the inner and outer layers.\nIt starts with calculating the numbers in the inner layer:\n=((2*2)+(3*4)+(5*5))*2\n=(4 + 12 + 25)*2Calculates the inner layer\n=(41)*2Calculates the outer layer\n82\nChapter Summary\nParentheses can be used to change the order of an operation. The numbers inside the parentheses gets calculated first. A formula can have multiple sets of parentheses. More advanced formulas can use nesting to create layers of operations, like an onion. It calculates the inner most layer first, then the next, and so on.",
      "examples": [
        "()",
        "(1+2)",
        "=10+5*2",
        "20",
        "10+10",
        "=(10+5)*2",
        "30",
        "(15)*2",
        "=(10+5)+(2*4)+(4/2)",
        "=(A1+A2)*B5",
        "17",
        "2+15",
        "15",
        "3*5=15",
        "25",
        "5*5",
        "5",
        "(2+3)=5",
        "5+8+4",
        "=2*2+3*4+5*5*2",
        "=((2*2)+(3*4)+(5*5))*2",
        "=(4 + 12 + 25)*2",
        "=(41)*2",
        "82"
      ]
    },
    {
      "title": "Google Sheets Functions",
      "summary": "Functions\nGoogle Sheets has many premade formulas, called functions.\nFunctions are typed by = and the functions name.\nFor example =SUM\nOnce you have typed the function name you need to apply it to a range.\nFor example =SUM(A1:A5)\nThe range is always inside of parentheses.",
      "examples": [
        "=",
        "=SUM",
        "=SUM(A1:A5)"
      ]
    },
    {
      "title": "Google Sheets Location Settings",
      "summary": "Location Settings\nGoogle Sheets provides regional formatting settings for different languages and styles of presenting information.\nRegional settings affects a number of things, like:\nCalendar date formatting\nDecimal numbers\nDefault currency formatting\nFormula delimiters\nFormula delimiters are the symbols used to separate arguments in a function.\nThe most common symbols are comma , and semicolon ;\nFor example, the English regional language setting uses commas:\nWhile German regional language settings uses semicolons:\nNote: Google sheets automatically converts between commas and semicolons in formulas so you don't have to worry about it.\nExample Location Settings\nHere are the date, decimal number, and formula delimiters shown with United States location settings:\nHere are the date, decimal number, and formula delimiters shown with Germany location settings:\nNotice that the United States location formatting uses month/day/year and the German formatting uses day.month.year for calendar dates.\nThe United States location formatting also uses a period (.) for the decimal symbol and the German formatting uses a comma (,).\nREMOVE ADS\nChanging Spreadsheet Location Settings\nChanging Spreadsheet Location Settings is accessed in the Spreadsheet settings part of the File menu:\nSelecting this option will open a dialog box where you can choose your preferred location settings:",
      "examples": [
        "=AND(logical_expression1, [logical_expression2, ...])",
        "=AND(logical_expression1; [logical_expression2; ...])",
        ",",
        ";",
        "."
      ]
    },
    {
      "title": "Google Sheets Formatting",
      "summary": "Formatting\nGoogle Sheets has many ways to format and style a spreadsheet.\nWhy format and style your spreadsheet?\nMake it easier to read and understand\nMake it more presentable\nStyling is about changing the looks of cells, such as changing colors, font, font sizes, borders, number formats, and so on.\nThe most used styling functions are:\nColors\nFonts\nBorders\nNumber formats\nGridlines\nThere are two ways to access the styling commands in Google Sheets:\nThe Ribbon\nFormat menu\nNote: Formatting can be applied to any range.\nRead more about the Ribbon and the menu in the Google Sheets overview chapter.\nStyling Commands in Ribbon\nThe Ribbon provides many formatting options such text and border coloring.\nREMOVE ADS\nStyling Commands in Format menu\nYou can also select any cell or a range of cells and then click on the Format menu in the menu bar:\nExample\nIn this example, different formatting options have been applied to range A1:B3.\nChapter summary\nFormatting is used to make spreadsheets more readable. There are many ways to add styles. The most common ones are; Color, Font, Number format and Gridlines.",
      "examples": [
        "A1:B3"
      ]
    },
    {
      "title": "Google Sheets Format Painter",
      "summary": "Format Painter\nThe format painter is a command which lets you copy formatting from one cell to another.\nIt is a great tool, which saves you lots of time!\nThe Format painter can be used to copy to single cells or ranges.\nFormat Painter is used by clicking on its button () in the Ribbon.\nHow To Use the Format Painter\nSelect the cell that you want to copy\nClick the Format Painter button\nSelect a cell or range\nLet's try some examples and copy formats with Colors and font Characteristics, such as bold, italic and underline:\nCopy the red color from cell A1 to cell B1.\nStep by step:\nSelect cell A1\nClick the Format Painter button ()\nNotice the dotted border around cell A1. This indicates that the format is copied and ready for pasting. Let's paste it to cell B1!\nSelect cell B1\nGreat job!\nREMOVE ADS\nCopy and Paste Color to Multiple Cells\nCopy cell B2 to cell C2. That is right, let's try to paste to a range of two cells!\nSelect cell A2\nClick the Format Painter button ()\nSelect cell B2 and hold an drag to cell C2\nThat's the way! The format painter can be used for single cells and on ranges.\nNow do it yourself! Copy the format from cell A3 to range B3:D3.\nCopy Font Characteristics\nLast example. Copy the font characteristics from range A4:A6 to range B4:B6.\nStep by step:\nSelect range A4:A6\nClick the Format Painter button ()\nDrag and select range B4:B6\nGood job!",
      "examples": [
        "A1",
        "B1",
        "B2",
        "C2",
        "A2",
        "A3",
        "B3:D3",
        "A4:A6",
        "B4:B6"
      ]
    },
    {
      "title": "Google Sheets Format Colors",
      "summary": "Colors\nColors are specified by selection or by using Hexadecimal (HEX) codes.\nTip: You can learn more about colors and Hexadecimal codes in our HTML/CSS Colors Tutorial.\nTheme and Standard Colors\nGoogle Sheets has a set of standard, theme and custom colors available for use. You select a color by clicking on it:\nThe option with this symbol allows you to select custom colors.\nCustom Colors\nGoogle Sheets supports Hexadecimal color codes.\nA hexadecimal color code is specified with: #RRGGBB.\nRR (red), GG (green) and BB (blue) are hexadecimal values between 00 and FF specifying the intensity of the color.\nFor example, #0000FF is displayed as blue, because the blue component is set to its highest value (FF) and the others are set to 00.\nTip: Try W3schools.com color picker to find your color!\nREMOVE ADS\nApplying colors\nColors can be applied to cells, text and borders.\nColors are applied to cells by using the \"Fill color\" function.\nApply colors to cells step by step:\nSelect range\nClick on Fill color () icon on the Quick Access Toolbar\nSelect color\nThe \"Fill color\" button remembers the color you used the last time.\nThe Fill color command allows selection of theme colors, standard colors or use of HEX codes by clicking on the option:\nLet's try some examples.\nStarting with theme and standard colors:\nGreat!\nTry to apply the following colors:\nTheme color blue to range A3:F3.\nTheme color green to range A5:F5.\nDid you make it?\nLet's apply colors using HEX codes.\nApply HEX code #ffcb05 to rangeA7:F7:\nStep by step:\nSelect rangeA7:F7\nOpen color options\nClick on\nInsert #ffcb05 in the HEX input field\nHit Enter\nNotice that entering the HEX code shows you where the color is positioned on the color map.\nWell done! You have successfully applied colors using the standard, theme and HEX codes.",
      "examples": [
        "#RRGGBB",
        "A3:F3",
        "A5:F5",
        "#ffcb05",
        "A7:F7"
      ]
    },
    {
      "title": "Google Sheets Format Fonts",
      "summary": "Format Fonts\nYou can format fonts in four different ways: color, font name, size and other characteristics.\nFonts\nThe default font in Google Sheets is Arial.\nThe font can be changed for both numbers and text.\nWhy change the font in Google Sheets?\nMake the data easier to read\nMake the presentation more appealing\nHow to change the font:\nSelect a cell or a range\nClick the font drop down menu\nSelect a font\nLet's have a look at an example.\nSelect range A1:C4\nClick the font drop down menu\nSelect Comfortaa\nThe example has both text (A1:B1) and numbers (A4:C4)\nGood job! You have successfully changed the fonts from Arial to Comfortaa for the range A1:C4.",
      "examples": [
        "A1:C4",
        "A1:B1",
        "A4:C4"
      ]
    },
    {
      "title": "Google Sheets Format Font Color",
      "summary": "Font Color\nThe default color for fonts is black.\nColors are applied to fonts by using the \"Font color\" function ().\nHow to apply colors to fonts\nSelect a cell or a range\nSelect font color\nType text\nThe font color goes for both numbers and text.\nThe Font color command remembers the color used last time.\nNote: Custom colors are applied in the same way for both cells and fonts. You can read more about it in the Apply colors to cells chapter.\nLets try an example, step by step:\nSelect standard font color Red\nType Hello in A1 and hit Enter\nSelect standard font color Green\nType World in B1 and hit Enter\nNicely done! You have successfully changed font colors.",
      "examples": [
        "Hello",
        "A1",
        "World",
        "B1"
      ]
    },
    {
      "title": "Google Sheets Format Font Size",
      "summary": "Font Size\nTo change the font size of the font, just click on the font size drop down menu:\nExample\nThe image below shows different font sizes for both text and numbers:",
      "examples": []
    },
    {
      "title": "Google Sheets Font Characteristics",
      "summary": "Font Characteristics\nYou can apply different characteristics to fonts such as:\nBold\nItalic\nUnderlined\nStrike though\nThe commands can be found below in the Format menu or on the Quick Access Toolbar:\nBold is applied by either clicking the Bold () icon in the Ribbon or using the keyboard shortcut Ctrl+B or Command+B\nItalic is applied by either clicking the Italic () icon in the Ribbon or using the keyboard shortcut Ctrl+I or Command+I\nUnderline is applied by either clicking the Underline () option in the Format menu or using the keyboard shortcut Ctrl+U or Command+U\nStrikethrough is applied by either clicking the Strikethrough () icon in the Ribbon or using the keyboard shortcut Alt+Shift+5 or Option+Shift+5\nExample\nThe image below shows different font characteristics for both text and numbers:",
      "examples": [
        "Ctrl+B",
        "Command+B",
        "Ctrl+I",
        "Command+I",
        "Ctrl+U",
        "Command+U",
        "Alt+Shift+5",
        "Option+Shift+5"
      ]
    },
    {
      "title": "Google Sheets Format Borders",
      "summary": "Format Borders\nBorders can be added and removed. Colors and style can be changed.\nWhy format borders?\nMake the document more readable and understandable\nEmphasizing key points\nThe Borders menu is accessed in the Ribbon ().\nThe button remembers the border you used last time.\nNote: Remember to reapply the border after changing color and style.\nAdding Borders\nBorders are added by clicking the Borders () button.\nThe default border is black underline.\nChanging the border type, style or color is a choice you make.\nClicking the option button gives an overview of the different border options.\nThe buttons inside the Border command give options for more types of borders.\nExample:\nREMOVE ADS\nBorder Colors\nColored borders are added by selecting a color before adding the border.\nThe color can be changed in the Border Color menu ():\nExample:\nNote: Custom colors are applied in the same way for both cells and fonts. You can read more about it in the Apply colors to cells chapter.\nBorder Style\nBorders styles can be changed.\nThe menu is accessed in the Border Style menu ():\nGoogle Sheets offers 6 different border styles:\nSolid line\nDashed line\nDotted line\nMedium line\nThick line\nDouble line\nChapter Summary\nBorders can be added with different colors and styles. The border button remembers the border settings used the last time. The options are accessed from the border options button, next to the border button.\nIn the next chapter you will learn about Number formats.",
      "examples": []
    },
    {
      "title": "Google Sheets Format Numbers",
      "summary": "Number Formats\nThe default Number format is Automatic.\nWhy change number formats?\nMake data explainable\nPrepare data for functions, so that Google Sheets understands what kind of data you are working with.\nExamples of number formats:\nAutomatic\nNumber\nCurrency\nTime\nNumber formats can be changed by clicking the Number format dropdown (), accessed in the Ribbon, found in the Numbers group.\nExample\nIn the example we have cells that represent prices, which can be formatted as Currency.\nCopy the values to follow along.\nLet's try to change the format of the prices to the Currency Number format.\nStep by step:\nSelect the range B2:C8\nClick the Number format dropdown menu ()\nClick the Currency format\nThat's it! The Number format was changed from Automatic to Currency.\nNote: Google Sheets uses the local currency defined in the location setting.\nNow, do the same for cells B10, B11 and B13:\nDid you make it?\nNote: The currency can be changed. For example instead of using $ like in the example you can decide for NOK or EUR. It is changed in the dropdrop menu, clicking the More Formats in the bottom of the menu. Then, clicking on More Currencies.\nNotice that the numbers look like a mess. Let's solve that by decreasing the decimals. This helps to make the presentation more neat.\nREMOVE ADS\nDecimals\nThe number of decimals can be increased and decreased.\nThere are two commands:\nIncrease Decimal ()\nDecrease Decimal ()\nClicking them reduces or increases the number of decimals.\nThe commands can be found next to the Number format dropdown menu.\nNote: Decreasing Decimals can make Google Sheets round up or down numbers as more decimals get removed. This may be confusing if you are working on advanced calculations which require accurate numbers.\nLet's clean this up, step by step:\nSelect the range B2:C8\nClick the Decrease Decimal button two times ()\nGreat!\nDo the same for cells B10, B11 and B13:\nThat looks a lot better!\nPro tip: The rectangle in the top left corner by row 1 and column A can be clicked to select all cells in the sheet. This can be useful if you want to change the Number format or change Decimals for all cells.\nChapter summary\nNumber formats can be changed to make the spreadsheet more understandable or to prepare cells for functions. You can increase and decrease decimals to make the presentation neat.",
      "examples": [
        "Item Item price Price Shop cart Pokeball 200 200 1 Great ball 600 600 1 Ultra ball 1200 1200 1 Potion 300 600 2 Super potion 700 1400 2 Hyper potion 1200 3600 3 Antidote 100 300 3 Subtotal 7900 Discount 790 Discount 10 Total 7110",
        "B2:C8",
        "B10",
        "B11",
        "B13"
      ]
    },
    {
      "title": "Google Sheets Format Gridlines",
      "summary": "Gridlines\nBy default, gridlines are displayed in Google Sheets.\nHowever, gridlines can be removed.\nWhy remove gridlines?\nMake the spreadsheet more readable\nMake the spreadsheet more presentable\nHow to Remove Gridlines\nClick view menu\nUncheck Gridlines\nExample before removing gridlines:\nExample after:\nNote: Removing gridlines, applies to all cells in the sheet.",
      "examples": []
    },
    {
      "title": "Google Sheets Clear Format",
      "summary": "Google Sheets lets you remove all formatting operations on a selected range.\nThe Clear Formatting command can be found in the Format menu.\nExample (Remove Formatting For a Range)\nRemove formatting for a range, step by step:\nSelect range A1:B2\nClick on the Format menu and then select Clear formatting\nThis is the result:\nExample (Remove Formatting For Multiple Cells)\nRemove formatting for multiple cells, step by step:\nSelect cells A2, B1 and B3 by holding the Ctrl button (Command for Mac) on the keyboard\nClick on the Format menu and then select Clear formatting\nThis is the result:\nWell Done! You can now remove all types of formatting for any arrangements of cells.\nREMOVE ADS\nExample (Remove Formatting For A Column)\nRemove formatting for a column, step by step:\nSelect column A by clicking on the letter A in the column bar\nClick on the Format menu and then select Clear formatting\nThis is the result:\nYou can do the same with rows. Try it!\nExample (Remove Formatting For All Cells)\nRemove formatting for the entire spreadsheet, step by step:\nSelect the entire spreadsheet by clicking on the rectangle on the top left corner of the sheet ()\nClick on the Format menu and then select Clear formatting\nThis is the result:\nIt was easy, No? You have successfully removed all formatting in your sheet.",
      "examples": [
        "A1:B2",
        "A2",
        "B1",
        "B3",
        "Ctrl",
        "Command",
        "A"
      ]
    },
    {
      "title": "Google Sheets Sort",
      "summary": "Google Sheets Sorting\nGoogle sheets has commands for sorting the data in Ascending or Descending order.\nAscending: from the smallest to the largest for numbers and from A to Z for text.\nDescending: from the largest to the smallest for numbers and from Z to A for text.\nGoogle sheets has the following sort commands:\nSort sheet by column\nSort range by column\nSort range\nThe sort commands can be found in the Data menu.\nREMOVE ADS\nExample\nSort the Pokemon by their total stats in ascending order (from smallest to largest).\nCopy the values to follow along.\nSelect column B by clicking on the letter B in the column bar\nClick on the Data menu and select Sort sheet by column B, A â Z\nThis is the result:\nNow all the Pokemon are sorted by their total stats.\nIn the next chapter, you will learn more about Sort sheet command in Google sheets.",
      "examples": [
        "Bulbasaur 318 Ivysaur 405 Venusaur 525 Charmander 309 Charmeleon 405 Charizard 534 Squirtle 314 Wartortle 405 Blastoise 530 Caterpie 195 Metapod 205 Butterfree 395 Weedle 195 Kakuna 205 Beedrill 395 Pidgey 251 Pidgeotto 349 Pidgeotto 479 Rattata 253 Raticate 413",
        "B"
      ]
    },
    {
      "title": "Google Sheets Sort Sheet By Column",
      "summary": "Sort Sheet By Column\nSorting a sheet by column preserves the relation between multiple data columns.\nThe sort commands can be found in the Data menu.\nNote: This method works if your data no headers. If you have headers, look at Sort range.\nExample\nSort the Pokemon by their names in ascending order (from A to Z).\nCopy the values to follow along.\nSelect column A by clicking on the letter A in the column bar\nClick on the Data menu and select Sort sheet by column A, A â Z\nThis is the result:\nNow all the Pokemon are sorted by their names.\nREMOVE ADS\nExample (Sort Sheet By Column, Another Way)\nThis example shows another way to sort Pokemon names in ascending order (from A to Z).\nSelect column A by clicking on the letter A in the column bar\nClick on the drop-down menu next to letter B in the column bar ()\nClick on Sort sheet A â Z\nThis is the result:\nNon-Working Example (Sort Sheet By Column with Headers)\nSort the Pokemon by their names in ascending order (from A to Z).\nCopy the values to follow along.\nUnlike the first example, the data for this example has headers.\nLet's see what happens if we sort this data.\nSelect column A by clicking on the letter A in the column bar\nClick on the Data menu and select Sort sheet by column A, A â Z\nThis is the result:\nNotice anything wrong?\nThe headers are also sorted\nThis is why sort sheet by colum is not suitable for data with headers.\nNote: If you want to sort data with headers, look at Sort range.",
      "examples": [
        "Bulbasaur 318 Ivysaur 405 Venusaur 525 Charmander 309 Charmeleon 405 Charizard 534 Squirtle 314 Wartortle 405 Blastoise 530 Caterpie 195 Metapod 205 Butterfree 395 Weedle 195 Kakuna 205 Beedrill 395 Pidgey 251 Pidgeotto 349 Pidgeotto 479 Rattata 253 Raticate 413",
        "Name Total stats Bulbasaur 318 Ivysaur 405 Venusaur 525 Charmander 309 Charmeleon 405 Charizard 534 Squirtle 314 Wartortle 405 Blastoise 530 Caterpie 195 Metapod 205 Butterfree 395 Weedle 195 Kakuna 205 Beedrill 395 Pidgey 251 Pidgeotto 349 Pidgeotto 479 Rattata 253 Raticate 413",
        "A"
      ]
    },
    {
      "title": "Google Sheets Sort Range By Column",
      "summary": "Sort Range By Column\nGoogle sheet lets you sort data in a range by columns\nIt is possible to sort data in a sheet by range.\nNote: To sort a range that has more than one column, the whole range of data has to be selected. Sorting just one can breaks the relationship between columns.\nThis is shown in an example later in this chapter.\nThe sort commands can be found in the Data menu.\nExample (Sort Text)\nSort the Pokemon in the range A2:A21 by their Name, ascending from smallest to largest (A-Z).\nCopy the values to follow along.\nSelect the range A2:A21\nNote: A1 is not included as it is the header for the column. This is the row that is dedicated to the filter. Including it will blend it with the rest.\nClick on the Data menu and select Sort range by column A, A â Z\nThis is the result:\nTry again, this time with Sort range by column A, Z â A to see what that looks like!\nREMOVE ADS\nExample (Sort Numbers)\nSort the Pokemon ascending by their Total stats from smallest to largest.\nCopy the values to follow along.\nSelect the range A2:A21\nClick on the Data menu and select Sort range by column A, A â Z\nThis is the result:\nGreat! The Pokemon were successfully sorted by their Total stats from smallest to largest. The sort commands work for both text and numbers.\nA Non-Working Example (Sorting One Column In A Range)\nThis example shows how sorting column by range can break the relationship between multiple data columns.\nIn this example we have two columns with related data. Column A is the Pokemon Names and Column B is their Total stats. Try sorting just one of the columns (A2:A21) ascending by their Names.\nCopy the values to follow along.\nSelect the range A2:A21\nClick on the Data menu and select Sort range by column A, A â Z\nThis is the result:\nThe image above shows that the relationship between column A and B is broken. The Pokemon now have wrong Total stats.\nSorting More Than One Column\nSelect the whole range when sorting ranges with more than one column.\nWhen sorting multiple columns, the sorting is done based on the column with cell having the blue rectangle. This is the cell that you start selecting your range with.\nIn the image below the sorting is done based on the Name values in column A\nIn the image below the sorting is done based on the Total stats values in column B\nExample\nThis example shows how to sort data without losing the relationship between the data columns.\nSort the Pokemon based on their names in ascending order.\nCopy the values to follow along.\nSelect the range A2:B21\nClick on the Data menu and select Sort range by column A, A â Z\nThis is the result:\nBy selecting range A2:B21 the sort is done correctly, keeping the relationship between the data (Column A and B).\nNow try to sort Pokemon based on their total stats in a descending order.",
      "examples": [
        "Name Bulbasaur Ivysaur Venusaur Charmander Charmeleon Charizard Squirtle Wartortle Blastoise Caterpie Metapod Butterfree Weedle Kakuna Beedrill Pidgey Pidgeotto Pidgeotto Rattata Raticate",
        "Total stats 318 405 525 309 405 534 314 405 530 195 205 395 195 205 395 251 349 479 253 413",
        "Name Total stats Bulbasaur 318 Ivysaur 405 Venusaur 525 Charmander 309 Charmeleon 405 Charizard 534 Squirtle 314 Wartortle 405 Blastoise 530 Caterpie 195 Metapod 205 Butterfree 395 Weedle 195 Kakuna 205 Beedrill 395 Pidgey 251 Pidgeotto 349 Pidgeotto 479 Rattata 253 Raticate 413",
        "A2:A21",
        "A",
        "B",
        "A2:B21"
      ]
    },
    {
      "title": "Google Sheets Sort Range",
      "summary": "Sort Range\nThe Sort Range command in Google Sheets allows for more complex sorting of data.\nFor example it can work with data which has headers or have multiple sort rules.\nHandling Data with Headers\nSort range makes it very easy to sort data with headers.\nExample\nSort the Pokemon in the range A2:A21 by their Total stats, ascending from smallest to largest (A-Z).\nCopy the values to follow along.\nSort range, step by step:\nSelect all the data, range A2:B21\nClick on the Data menu and find Sort range\nClick on Sort range\nSelect Data has header row\nSelect Total stats which is the header for column B\nClick Sort\nWell Done! You have successfully sorted the Pokemon by their total stats.\nREMOVE ADS\nMulti-Level Sorting\nGoogle Sheets lets you sort your data in multiple levels.\nExample\nSort the Pokemon in the range A2:A21 by their Total stats, ascending from smallest to largest (A-Z) and then sort the results based on their Name.\nMulti-level sort range, step by step:\nSelect all the data, range A2:B21\nClick on the Data menu and find Sort range\nClick on Sort range\nSelect Data has header row\nSelect Total stats which is the header for column B\nClick on Add another sort column\nSelect Name which is the header for column A\nClick Sort\nLet's compare the results of this example with the previous example:\nThe image with the blue rectangle is the result of the first example and the image with the green rectangle is the result of the second example.\nLook at rows 14:16.\nThe order of Pokemon has changed. In the second example they are also sorted alphabetically.\nThis is because we added an additional sort rule to Sort range.",
      "examples": [
        "Name Total stats Bulbasaur 318 Ivysaur 405 Venusaur 525 Charmander 309 Charmeleon 405 Charizard 534 Squirtle 314 Wartortle 405 Blastoise 530 Caterpie 195 Metapod 205 Butterfree 395 Weedle 195 Kakuna 205 Beedrill 395 Pidgey 251 Pidgeotto 349 Pidgeotto 479 Rattata 253 Raticate 413",
        "A2:A21",
        "A2:B21",
        "B",
        "A",
        "14:16"
      ]
    },
    {
      "title": "Google Sheets Conditional Formatting",
      "summary": "Conditional Formatting\nConditional formatting is used to change the appearance of cells in a range based on your specified conditions.\nThe conditions are rules based on specified numerical values, matching text and more.\nChanging the appearance of cells can visually highlight interesting data points for analysis.\nGoogle Sheet provides a number of preset formatting options, as well as customizable format options and conditions.\nThe two main Conditional Formatting options are:\nSingle Color\nColor Scale\nSingle Color formatting applies a single customizable formatting option to all the cells that match a condition.\nColor Scale formatting applies a background color that smoothly changes between 2 or 3 colors based on the values of cells in a range.\nNote: Single Color formatting lets you customize both the background color and the font in the cells.\nConditional Formatting Example\nHere, the Speed values of each pokemon is formatted with a Color Scale:\nNote: Google Sheets can customize the color and behaviour of color scale conditional formatting.\nClear Formatting\nConditional Formatting can be removed by selecting the range of cells you want to remove the conditional formatting from and selecting the Clear formatting option from the Format menu:\nNote: You can read more about removing formatting in the Clear Format chapter.\nRules can also be removed in the right-hand side Conditional format rules menu.\nREMOVE ADS\nManage Formatting\nConditional Formatting can be managed in the right-hand menu.\nThe menu is accessed by selecting the range of cells that already have conditional format rules and selecting Conditional format from the Format menu.\nFrom this menu you can add extra rules:\nYou can remove rules by clicking the recycling bin icon:\nClick the four vertical dots on the left of a rule and drag up or down to rearrange the rules:\nNote: The rule at the top of the list is the one that will be applied.",
      "examples": []
    },
    {
      "title": "Google Sheets Single Color Formatting",
      "summary": "Single Color Formatting\nSingle Color is a premade type of conditional formatting in Google Sheets used to apply a customizable formatting option to all the cells that match a condition.\nHere is the Single Color part of the conditional format rules menu:\nYou can access the menu by selecting the Conditional formatting option in the Format menu.\nSingle Color Options\nFrom the conditional format rules menu you can choose:\nWhich cells the conditional formatting applies to\nWhich format rule is used\nThe formatting style\nApply to range\nIn the Apply to range field you can enter the cells and ranges that the Single Color applies to.\nYou can enter cells and ranges separated by a comma , into the field.\nYou can also click the icon in the right of the field to select data ranges:\nThis will open a dialog box where you can add ranges by selection:\nFormat rules\nYou can choose which rule to apply from the Format cells if... drop down menu. There are many options:\nEmpty or not Empty cells\nText Contains or not Contains\nText Starts or Ends with\nText is Exactly\nCalendar Dates\nGreater than\nLess than\nEqual to\nBetween or not Between\nCustom rules\nFormatting style\nThe Single Color formatting lets you customize both the background color and the font of the cells.\nSee the Format Colors chapter and Format Fonts chapter for detailed guides of how to customize colors and fonts.\nREMOVE ADS\nSingle Color Formatting Example (Text Ends With)\nHighlight the Pokemon name values ending with saur with Single Color conditional formatting.\nConditional formatting, step by step:\nSelect the range of Name values A2:A10\nClick on the Conditional Formatting option in the Format menu\nThe Conditional Formatting menu will appear in the right-hand side of the spreadsheet:\nSelect the Text ends with option from the Format rules drop-down menu:\nType saur in the input field:\nNow, the Name value cells will have a colored background highlighting if the name ends with \"saur\":",
      "examples": [
        "Name Type 1 Speed Bulbasaur Grass 45 Ivysaur Grass 60 Venusaur Grass 80 Charmander Fire 65 Charmeleon Fire 80 Charizard Fire 100 Squirtle Water 43 Wartortle Water 58 Blastoise Water 78",
        ",",
        "saur",
        "A2:A10"
      ]
    },
    {
      "title": "Google Sheets Color Scale Formatting",
      "summary": "Color Scale Formatting\nColor Scales are premade types of conditional formatting in Google Sheets used to highlight cells in a range to indicate how large or small the cell values are.\nHere is the Color scale part of the conditional format rules menu:\nYou can access the menu by selecting the Conditional formatting option in the Format menu.\nColor Scale Options\nFrom the conditional format rules menu you can choose:\nWhich cells the color scale applies to\nWhat colors the scale uses\nThe min, mid, and max points\nApply to range\nIn the Apply to range field you can enter the cells and ranges that the color scale applies to.\nYou can enter cells and ranges separated by a comma , into the field.\nYou can also click the icon in the right of the field to select data ranges:\nThis will open a dialog box where you can add ranges by selection:\nCustom color scale\nYou can customize the color scale by selecting min/mid/max point color icons on the right-hand side:\nThis will bring up a color picking menu. See the Format colors chapter for a detailed guide of how to customize colors.\nCustom Min/Mid/Max Points\nThe color scale will apply relative to the chosen min/mid/max points.\nThe default option is Min/Max value:\nWith the Min/Max value option, google sheets will choose the min and max points based on the largest and smallest values in the selected range.\nThe other options are:\nNumber\nPercent\nPercentile\nThese options will let you specify precisely what the min, mid, and max points should be.\nREMOVE ADS\nColor Scale Formatting Example (Min/Max Values)\nHighlight the Speed values of each Pokemon with Color scale conditional formatting.\nConditional formatting, step by step:\nSelect the range of Speed values C2:C10\nClick on the Conditional Formatting option in the Format menu\nThe Conditional Formatting menu will appear in the right-hand side of the spreadsheet:\nSelect the Color Scales option\nThere are 9 default color scale options to choose from.\nThe color at the right-hand side of the icons will apply to the highest values by default.\nClick on the Preview scale \"Choose Default Format\"\nSelect the \"White to green\" Color scale\nNow, the Speed value cells will have a colored background highlighting:\nDark green is used for the highest values, and white for the lowest values.\nCharizard has the highest Speed value (100) and Squirtle has the lowest Speed value (43).\nAll the cells in the range gradually change color from dark green, to ligher greens and then to white.",
      "examples": [
        "Name Type 1 Speed Bulbasaur Grass 45 Ivysaur Grass 60 Venusaur Grass 80 Charmander Fire 65 Charmeleon Fire 80 Charizard Fire 100 Squirtle Water 43 Wartortle Water 58 Blastoise Water 78",
        ",",
        "C2:C10"
      ]
    },
    {
      "title": "Google Sheets AND Function",
      "summary": "AND Function\nThe AND function is a premade function in Google Sheets, which returns TRUE or FALSE based on two or more conditions.\nIt is typed =AND and takes two or more conditions.\nThe conditions are referred to as [logical_expression1], [logical_expression2], and so on.\nThe conditions can check things like:\nIf a number is greater than another number >\nIf a number is smaller than another number <\nIf a number or text is equal to something =\nNote: The AND function is often used together with the IF function.\nExample AND Function\nCheck if the Pokemon type is fire and has speed greater than 70:\nThe function returns \"TRUE\" or \"FALSE\".\nExample AND function, step by step:\nSelect the cell D2\nType =AND\nClick the AND command\nSpecify the first condition B2=\"Fire\"\nType ,\nSpecify the second condition C2>70\nHit enter\nNote: You can add more conditions by repeating steps 5-6 before hitting enter.\nSince the value in cell B2 is not \"Fire\" the first condition is FALSE.\nSince the value in cell C2 is less than 70 the second condition is also FALSE.\nAll conditions need to be TRUE for the AND function to return TRUE.\nNote: Text values needs to be in quotes: \" \"\nThe function can be repeated with the filling function for each row to perform the same check for each Pokemon:\nOnly Charmeleon and Charizard both have Fire type and speed greater than 70, so the function returns \"TRUE\".\nREMOVE ADS\nExample AND Function (with IF)\nCombining the AND function with an IF function lets you check multiple conditions for the IF function:\nNote: The IF function lets you specify the return values.\nThe IF function is typed =IF and has 3 parts:\nThe AND function takes the place of the logical_test condition.\nHere, the IF function returns \"Yes\" or \"No\".\nExample AND function as the condition for IF function, step by step:\nSelect cell C2\nType =IF\nClick the IF command\nType AND\nClick the AND command\nSpecify the first condition B2=\"Fire\"\nType ,\nSpecify the second condition C2>70\nType ),\nSpecify the value \"Yes\" for when both conditions are TRUE\nType ,\nSpecify the value \"No\" for when either, or both, conditions are FALSE\nType ) and hit enter\nThe function can be repeated with the filling function for each row to perform the same check for each Pokemon:\nNow each row has a check for both being Fire type and Speed greater than 70:\nOnly Charmeleon and Charizard both have Fire type and speed greater than 70, so the function returns \"Yes\".",
      "examples": [
        "=AND([logical_expression1], [logical_expression2, ...])",
        "Name Type 1 Speed Fire Type AND more than 70 Speed Bulbasaur Grass 45 Ivysaur Grass 60 Venusaur Grass 80 Charmander Fire 65 Charmeleon Fire 80 Charizard Fire 100 Squirtle Water 43 Wartortle Water 58 Blastoise Water 78",
        "=IF(logical_expression, value_if_true, value_if_false)",
        "=AND",
        "[logical_expression1]",
        "[logical_expression2]",
        ">",
        "<",
        "=",
        "D2",
        "B2=\"Fire\"",
        ",",
        "C2>70",
        "B2",
        "C2",
        "=IF",
        "logical_test",
        "AND",
        "),",
        "\"Yes\"",
        "\"No\"",
        ")"
      ]
    },
    {
      "title": "Google Sheets AVERAGE Function",
      "summary": "AVERAGE Function\nThe AVERAGE function is a premade function in Google Sheets, which calculates the average (arithmetic mean).\nIt is typed =AVERAGE and gets a list of cells:\nYou can select cells one by one, but also ranges, or even multiple ranges.\nIt adds up all the cell values and divides that sum by the total number of values.\nExample:\nNote: There are multiple types of mean values. The most common type of mean is the arithmetic mean. You can learn more about the arithmetic mean here: Statistics Mean Chapter.\nNote: The AVERAGE function ignores cells with text.\nAverage Function Example\nLet's have a look at an example where we help the Pokemon trainers to calculate the average of Pokeballs per trainer.\nHow to use the =AVERAGE function, step by step:\nSelect the cell F2\nType =AVERAGE\nClick the AVERAGE command\nGoogle Sheets will often give suggestions of how to complete your function based on the data in the spreadsheet.\nIn this case, the suggestion is precisely what we are looking for, the range B2:E2.\nClick the suggestion, hit enter, and the function is complete!\nThe function can be repeated with the filling function for each row to calculate the average number of Pokeballs for all the Trainers:\nGood job! You have successfully calculated the average using the AVERAGE function.\nREMOVE ADS\nAnother Example\nThe suggestions are often very helpful for doing things quickly, but don't always suggest precisely what we want.\nLet's have a look at a similar example, where the Pokeon trainers have another item in their inventory:\nHow to use the =AVERAGE function, step by step:\nSelect the cell E2\nType =AVERAGE\nClick the AVERAGE command\nSpecify the cell B2 for the Pokeballs\nType ,\nSpecify the range D2:F2 for the rest of the Pokeballs\nHit enter\nThe function now calculates the average of the cell B2 together with the range D2:F2.\nThe function can be repeated with the filling function for each row to calculate the average number of Pokeballs for all the Trainers:\nNow, we can see the average number of Pokeballs for each of the trainers:",
      "examples": [
        "=AVERAGE(value1, [value2, ...])",
        "The average of the values (2, 3, 4) is 3.\nThere are 3 values in total\nThe sum of the values is (2 + 3 + 4 = 9)\n(9 / 3 = 3)\nThe average is 3",
        "Trainer Pokeball Great Ball Ultraball Master Ball Average Iva 10 4 1 1 Liam 12 3 0 1 Jenny 15 1 3 1 Iben 4 2 6 0 Adora 10 4 1 1 Kasper 9 2 1 0",
        "Trainer Pokeball Potion Great Ball Ultraball Master Ball Average Pokeballs Iva 10 3 4 1 1 Liam 12 4 3 0 1 Jenny 15 1 1 3 1 Iben 4 11 2 6 0 Adora 10 2 4 1 1 Kasper 9 3 2 1 0",
        "=AVERAGE",
        "F2",
        "B2:E2",
        "E2",
        "B2",
        ",",
        "D2:F2"
      ]
    },
    {
      "title": "Google Sheets AVERAGEIF Function",
      "summary": "AVERAGEIF Function\nThe AVERAGEIF function is a premade function in Google Sheets, which calculates the average of a range based on a true or false condition.\nIt is typed =AVERAGEIF and has three parts:\nThe condition is referred to as criterion, which can check things like:\nIf a number is greater than another number >\nIf a number is smaller than another number <\nIf a number or text is equal to something =\nThe [average_range] is the range where the function calculates the average.\nNote: The [average_range] is optional.\nIf not specified, the function calculates the average of the same range as condition.\nExample AVERAGEIF function\nFind the average speed of Grass type Pokemon:\nThe condition is that the type is \"Grass\".\nExample AVERAGEIF function, step by step:\nSelect the cell F3\nType =AVERAGEIF\nClick the AVERAGEIF command\nSpecify the range for the condition B2:B10 (the Type 1 values)\nType ,\nSpecify the criteria (the cell E3, which has the value \"Grass\")\nType ,\nSpecify the range for the average C2:C10 (the Speed values)\nHit enter\nThe function now calculates the average speed value of the Grass type Pokemon: Bulbasaur, Ivysaur and Venusaur.\nThe function can be repeated for Fire and Water type Pokemon to compare them:\nNote: You can use the filling function for the other rows, but make sure to use absolute references for the ranges.\nNow, we can see the average speed values of each type:",
      "examples": [
        "=AVERAGEIF(criteria_range, criterion, [average_range])",
        "Name Type 1 Speed Bulbasaur Grass 45 Type Average Speed Ivysaur Grass 60 Grass Venusaur Grass 80 Fire Charmander Fire 65 Water Charmeleon Fire 80 Charizard Fire 100 Squirtle Water 43 Wartortle Water 58 Blastoise Water 78",
        "=AVERAGEIF",
        "criterion",
        ">",
        "<",
        "=",
        "[average_range]",
        "F3",
        "B2:B10",
        ",",
        "E3",
        "C2:C10"
      ]
    },
    {
      "title": "Google Sheets AVERAGEIFS Function",
      "summary": "AVERAGEIFS Function\nThe AVERAGEIFS function is a premade function in Google Sheets, which calculates the average of a range based on one or more true or false condition.\nIt is typed =AVERAGEIFS:\nThe conditions are referred to as criterion1, criterion2, .. and so on, which can check things like:\nIf a number is greater than another number >\nIf a number is smaller than another number <\nIf a number or text is equal to something =\nThe criteria_range1, criteria_range2, and so on, are the ranges where the function check for the conditions.\nThe average_range is the range where the function calculates the average.\nExample AVERAGEIFS function\nFind the average defense of Grass type 1st Generation Pokemon:\nThe conditions are that the type is \"Grass\" and Generation is 1.\nExample AVERAGEIFS function, step by step:\nSelect the cell H3\nType =AVERAGEIFS\nClick the AVERAGEIFS command\nSpecify the range for the average C2:C13 (the Defense values)\nType ,\nSpecify the range for the first conditionB2:B13 (the Type 1 values)\nType ,\nSpecify the criteria (the cell F3, which has the value \"Grass\")\nType ,\nSpecify the range for the second conditionD2:D13 (the Generation values)\nType ,\nSpecify the criteria (the cell G3, which has the value \"1\")\nHit enter\nNote: You can add more conditions by repeating steps 9-12 before hitting enter.\nThe function now calculates the average defense value of the 1st Generation Grass type Pokemon: Bulbasaur, Ivysaur and Venusaur.\nThe function can be repeated for Fire type Pokemon and 2nd Generation to compare them:\nNote: You can use the filling function for the other rows, but make sure to use absolute references for the ranges.\nNow, we can see the average defense values of each type between generations:\nNotice how the 2nd Generation Grass type Pokemon got more defense, but the Fire type stayed the same.",
      "examples": [
        "=AVERAGEIFS(average_range, criteria_range1, criterion1, ...)",
        "Name Type 1 Defense Generation Bulbasaur Grass 49 1 Type Gen. Average Defense Ivysaur Grass 63 1 Grass 1 Venusaur Grass 83 1 Fire 1 Charmander Fire 43 1 Grass 2 Charmeleon Fire 58 1 Fire 2 Charizard Fire 78 1 Chikorita Grass 65 2 Bayleef Grass 80 2 Meganium Grass 100 2 Cyndaquil Fire 43 2 Quilava Fire 58 2 Typhlosion Fire 78 2",
        "=AVERAGEIFS",
        "criterion1, criterion2, ..",
        ">",
        "<",
        "=",
        "criteria_range1",
        "criteria_range2",
        "average_range",
        "H3",
        "C2:C13",
        ",",
        "B2:B13",
        "F3",
        "D2:D13",
        "G3"
      ]
    },
    {
      "title": "Google Sheets COUNT Function",
      "summary": "COUNT Function\nThe COUNT function is a premade function in Google Sheets, which counts cells with numbers.\nIt is typed =COUNT and gets a list of cells:\nYou can select cells one by one, but also ranges, or even multiple ranges.\nNote: The COUNT function only counts cells with numbers, not cells with letters. The COUNTA function is used if the cells have letters.\nCount Function Example\nApply the =COUNT function to range D2:D21. Counting the cells of Pokemon Total stats, which is numbers only:\nCOUNT function, step by step:\nSelect the cell D22\nType =COUNT\nClick the COUNT command\nSpecify range D2:D21\nHit enter\nThat's it! The =COUNT function successfully counted 20 cells with numbers.\nREMOVE ADS\nA Non-Working Example\nNow, let us try an example that will not work.\nApply the =COUNT function to the range A2:A21, which only has cells with letters.\nIt returns the value 0, no cells with numbers found. Range A2:A21 only had cells with letters.",
      "examples": [
        "=COUNT(value1, [value2, ...])",
        "Name Type 1 Type 2 Total stats Mankey Fighting 305 Poliwrath Water Fighting 510 Victreebel Grass Poison 490 Tentacool Water Poison 335 Magneton Electric Steel 465 Dewgong Water Ice 475 Cloyster Water Ice 525 Onix Rock Ground 385 Dragonair Dragon 420 Pidgeotto Normal Flying 349 Rattata Normal 253 Beedrill Bug Poison 395 Doduo Normal Flying 310 Kingler Water 475 Nidoqueen Poison Ground 505 Hitmonchan Fighting 455 Charmeleon Fire 405 Arbok Poison 438 Gastly Ghost Poison 310 Magikarp Water 200",
        "=COUNT",
        "D2:D21",
        "D22",
        "A2:A21",
        "0"
      ]
    },
    {
      "title": "Google Sheets COUNTA Function",
      "summary": "COUNTA Function\nThe COUNTA function is a premade function in Google Sheets, which counts cells that has values, both letters and numbers.\nIt is typed =COUNTA and gets a list of cells:\nYou can select cells one by one, but also ranges, or even multiple ranges.\nCounta Function Example\nApply the =COUNTA function to range D2:D21. Counting Pokemons by their names, which are letters only:\nCOUNTA function, step by step:\nSelect the cell A22\nType =COUNTA\nClick the COUNTA command\nSpecify range A2:A21\nHit enter\nThat's it! The =COUNTA function successfully counted 20 cells with values in the range A2:A21.\nREMOVE ADS\nAnother Example (Numbers)\nApply the =COUNTA function to the range D2:D21, which only has cells with numbers.\nThat is great! The COUNTA function counts cells in a range with values both numbers and letters.",
      "examples": [
        "=COUNTA(value1, [value2, ...])",
        "Name Type 1 Type 2 Total stats Mankey Fighting 305 Poliwrath Water Fighting 510 Victreebel Grass Poison 490 Tentacool Water Poison 335 Magneton Electric Steel 465 Dewgong Water Ice 475 Cloyster Water Ice 525 Onix Rock Ground 385 Dragonair Dragon 420 Pidgeotto Normal Flying 349 Rattata Normal 253 Beedrill Bug Poison 395 Doduo Normal Flying 310 Kingler Water 475 Nidoqueen Poison Ground 505 Hitmonchan Fighting 455 Charmeleon Fire 405 Arbok Poison 438 Gastly Ghost Poison 310 Magikarp Water 200",
        "=COUNTA",
        "D2:D21",
        "A22",
        "A2:A21",
        "COUNTA"
      ]
    },
    {
      "title": "Google Sheets COUNTBLANK Function",
      "summary": "COUNTBLANK Function\nThe COUNTBLANK function is a premade function in Google Sheets, which counts blank cells in a range.\nIt is typed =COUNTBLANK and gets a list of cells:\nYou can select cells one by one, but also ranges, or even multiple ranges.\nNote: The COUNTBLANK function is helpful to find empty cells in a range.\nCountblank Function Example\nApply the =COUNTBLANK function to range C2:C21, to find the Pokemons which do not have a 2nd Type:\nCOUNTBLANK function, step by step:\nSelect the cell C22\nType =COUNTBLANK\nClick the COUNTBLANK command\nSpecify range C2:C21\nHit enter\nThe COUNTBLANK function successfully counted 8 blank cells in the range C2:C21.",
      "examples": [
        "=COUNTBLANK(value1, [value2, ...])",
        "Name Type 1 Type 2 Total stats Mankey Fighting 305 Poliwrath Water Fighting 510 Victreebel Grass Poison 490 Tentacool Water Poison 335 Magneton Electric Steel 465 Dewgong Water Ice 475 Cloyster Water Ice 525 Onix Rock Ground 385 Dragonair Dragon 420 Pidgeotto Normal Flying 349 Rattata Normal 253 Beedrill Bug Poison 395 Doduo Normal Flying 310 Kingler Water 475 Nidoqueen Poison Ground 505 Hitmonchan Fighting 455 Charmeleon Fire 405 Arbok Poison 438 Gastly Ghost Poison 310 Magikarp Water 200",
        "=COUNTBLANK",
        "C2:C21",
        "C22",
        "COUNTBLANK",
        "8"
      ]
    },
    {
      "title": "Google Sheets COUNTIF Function",
      "summary": "COUNTIF Function\nThe COUNTIF function is a premade function in Google Sheets, which counts cells that match a specified condition.\nIt is typed =COUNTIF and has two parts:\nThe condition is referred to as criterion, which can check things like:\nIf a number is greater than another number >\nIf a number is smaller than another number <\nIf a number or text is equal to something =\nCountif Function Example\nApply the COUNTIF function to range B2:B21, to count how many Pokemons there are of Fighting, Water and Grass types:\nCOUNTIF function, step by step:\nSelect the cell G4\nType =COUNTIF\nClick the COUNTIF command\nSpecify the range B2:B21 for the Type 1 values\nType ,\nSpecify the criteria (the cell F4, which as the value \"Fighting\")\nHit enter\nThe function now counts the number of Fighting type Pokemon.\nThe function can be repeated for Water and Grass type Pokemon compare them:\nNote: You can use the filling function for the other rows, but make sure to use absolute references for the ranges.\nNow, we can see the number of Fighting, Water and Grass type Pokemon from this list:",
      "examples": [
        "=COUNTIF(range, criterion)",
        "Name Type 1 Type 2 Total stats Mankey Fighting 305 Poliwrath Water Fighting 510 Type Count Victreebel Grass Poison 490 Fighting Tentacool Water Poison 335 Water Magneton Electric Steel 465 Grass Dewgong Water Ice 475 Cloyster Water Ice 525 Onix Rock Ground 385 Dragonair Dragon 420 Pidgeotto Normal Flying 349 Rattata Normal 253 Beedrill Bug Poison 395 Doduo Normal Flying 310 Kingler Water 475 Nidoqueen Poison Ground 505 Hitmonchan Fighting 455 Charmeleon Fire 405 Arbok Poison 438 Gastly Ghost Poison 310 Magikarp Water 200",
        "=COUNTIF",
        "criterion",
        ">",
        "<",
        "=",
        "COUNTIF",
        "B2:B21",
        "G4",
        ",",
        "F4"
      ]
    },
    {
      "title": "Google Sheets COUNTIFS Function",
      "summary": "COUNTIFS Function\nThe COUNTIFS function is a premade function in Google Sheets, which counts cells in a range based on one or more true or false condition.\nIt is typed =COUNTIFS:\nThe conditions are referred to as critera1, criteria2, .. and so on, which can check things like:\nIf a number is greater than another number >\nIf a number is smaller than another number <\nIf a number or text is equal to something =\nThe criteria_range1, criteria_range2, and so on, are the ranges where the function check for the conditions.\nExample COUNTIFS function\nFind the number of 1st Generation Water type Pokemon:\nThe conditions are that the type is \"Water\" and Generation is 1.\nNote: The full dataset continues after row 14, all the way down to row 759.\nExample COUNTIFS function, step by step:\nSelect the cell G3\nType =COUNTIFS\nClick the COUNTIFS command\nSpecify the range for the type B2:B759 (the Type 1 values)\nType ,\nSpecify the criteria (the cell E3, which has the value \"Water\")\nType ,\nSpecify the range for the second conditionC2:C759 (the Generation values)\nType ,\nSpecify the criteria (the cell F3, which has the value \"1\")\nHit enter\nNote: You can add more conditions by repeating steps 7-10 before hitting enter.\nThe function now counts the number of 1st Generation Water type Pokemon.\nThe function can be repeated for Water type Pokemon for the following Generations to compare them:\nNote: You can use the filling function for the other rows, but make sure to use absolute references for the ranges.\nNow, we can see the total number of Water type Pokemon between generations 1-4:",
      "examples": [
        "=COUNTIFS(criteria_range1, criterion1, [criteria_range2, ...], [criterion2, ...])",
        "=COUNTIFS",
        "critera1, criteria2, ..",
        ">",
        "<",
        "=",
        "criteria_range1",
        "criteria_range2",
        "G3",
        "B2:B759",
        ",",
        "E3",
        "C2:C759",
        "F3"
      ]
    },
    {
      "title": "Google Sheets IF Function",
      "summary": "IF Function\nThe IF function is a premade function in Google Sheets, which returns values based on a true or false condition.\nIt is typed =IF and has 3 parts:\nThe condition is referred to as logical_expression, which can check things like:\nIf a number is greater than another number >\nIf a number is smaller than another number <\nIf a number or text is equal to something =\nNote: You can decide both the return values and the condition.\nExample IF function (equal to)\nCheck if the Pokemon type is grass:\nThe condition is if the \"Type 1\" value for the Pokemon is \"Grass\".\nThe function returns \"Yes\" or \"No\".\nExample IF function, step by step:\nSelect the cell D2\nType =IF\nClick the IF command\nSpecify the condition B2=\"Grass\"\nType ,\nSpecify the value \"Yes\" for when the condition is TRUE\nType ,\nSpecify the value \"No\" for when the condition is FALSE\nHit enter\nSince the value in cell B2 is \"Grass\", the condition is true and the function will return \"Yes\".\nNote: Text values needs to be in quotes: \" \"\nThe function can be repeated with the filling function for each row to perform the same check for each Pokemon:\nNow, each row has a check for Grass Type:\nREMOVE ADS\nExample IF Function (greater than)\nCheck if the Pokemon's total stats is greater than 500:\nThe function returns \"Yes\" or \"No\".\nExample IF function, step by step:\nSelect the cell D2\nType =IF\nClick the IF command\nSpecify the condition C2>500\nType ,\nSpecify the value \"Yes\" for when the condition is TRUE\nType ,\nSpecify the value \"No\" for when the condition is FALSE\nHit enter\nSince the value in cell C2 is 318, the condition is false and the function will return \"No\".\nThe function can be repeated with the filling function for each row to perform the same check for each Pokemon:\nNow, each row has a check for having more than 500 total stats:",
      "examples": [
        "=IF(logical_expression, value_if_true, value_if_false)",
        "Name Type 1 Total Grass Type Bulbasaur Grass 318 Ivysaur Grass 405 Venusaur Grass 525 Charmander Fire 309 Charmeleon Fire 405 Charizard Fire 534 Squirtle Water 314 Wartortle Water 405 Blastoise Water 530",
        "Name Type 1 Total More than 500 Total Stats Bulbasaur Grass 318 Ivysaur Grass 405 Venusaur Grass 525 Charmander Fire 309 Charmeleon Fire 405 Charizard Fire 534 Squirtle Water 314 Wartortle Water 405 Blastoise Water 530",
        "=IF",
        "logical_expression",
        ">",
        "<",
        "=",
        "D2",
        "B2=\"Grass\"",
        ",",
        "\"Yes\"",
        "\"No\"",
        "B2",
        "C2>500",
        "C2"
      ]
    },
    {
      "title": "Google Sheets IFS Function",
      "summary": "IFS Function\nThe IFS function is a premade function in Google Sheets, which returns values based on one or more true or false conditions.\nIt is typed =IFS and has two or more parts:\nThe conditions are referred to as logical_test1, logical_test2, ..., which can check things like:\nIf a number is greater than another number >\nIf a number is smaller than another number <\nIf a number or text is equal to something =\nEach condition is connected with a return value.\nNote: More than one condition can be true so the function will return the value for the first true condition.\nExample IFS function\nMake categories for how fast the Pokemon are:\nThe conditions and return values are:\nSpeed more than 90: \"Fast\"\nSpeed more than 50: \"Normal\"\nSpeed less than or equal to 50: \"Slow\"\nExample IFS function, step by step:\nSelect the cell D2\nType =IFS\nClick the IFS command\nSpecify the first condition C2>90\nType ,\nSpecify the value \"Fast\" for when the first condition is TRUE\nType ,\nSpecify the second condition C2>50\nType ,\nSpecify the value \"Normal\" for when the second condition is TRUE\nType ,\nSpecify the third condition C2<=50\nType ,\nSpecify the value \"Slow\" for when the third condition is TRUE\nHit enter\nSince the value in cell C2 is \"45\", the first and second conditions are false, and third condition is true (less than or equal to 50), the function will return \"Slow\".\nNote: Text values needs to be in quotes: \" \"\nThe function can be repeated with the filling function for each row to perform the same check for each Pokemon:\nNote: The third condition <=50 includes = so that 50 is included in \"less than or equal to 50\"\nNow, each Pokemon has a speed category:",
      "examples": [
        "=IFS(logical_test1, value_if_true1, [logical_test2, value_if_true2], [logical_test3; ...)",
        "Name Type 1 Speed Speed Category Bulbasaur Grass 45 Ivysaur Grass 60 Venusaur Grass 80 Charmander Fire 65 Charmeleon Fire 80 Charizard Fire 100 Squirtle Water 43 Wartortle Water 58 Blastoise Water 78",
        "=IFS",
        "logical_test1, logical_test2, ...",
        ">",
        "<",
        "=",
        "D2",
        "C2>90",
        ",",
        "\"Fast\"",
        "C2>50",
        "\"Normal\"",
        "C2<=50",
        "\"Slow\"",
        "C2",
        "<=50"
      ]
    },
    {
      "title": "Google Sheets MAX Function",
      "summary": "MAX Function\nThe MAX function is a premade function in Google Sheets, which finds the highest number in a range.\nIt is typed =MAX and gets a list of cells:\nYou can select cells one by one, but also ranges, or even multiple ranges.\nThe function ignores cells with text. It will only work for cells with numbers.\nNote: There is another function called =MIN, which finds the lowest value in a range, the opposite of MAX.\nLet's have a look at an example!\nMax Function Example\nFind the highest total stats in the range C2:C21:\nSelect the cell (F3)\nType =MAX\nClick the MAX command\nSpecify the range C2:C21 for the Total stats values\nHit enter\nNow, the function returns the highest value from the cells in the range:\nThat's great! The function has successfully found the highest value, 525. Cloyster has the highest Total stats of the Pokemons in this list.\nLet's add text to a cell in the range C2:C21 to see what happens. Type Alakazam to into the cell C8:\nNice going. The function ignores the text typed in the range. 510 is returned as the new highest value, since the old one was replaced with text. Poliwrath is now the Pokemon with the highest Total stats in the range C2:C21.",
      "examples": [
        "=MAX(value1, [value2, ...])",
        "Name Type 1 Total stats Mankey Fighting 305 Poliwrath Water 510 MAX Victreebel Grass 490 Tentacool Water 335 Magneton Electric 465 Dewgong Water 475 Cloyster Water 525 Onix Rock 385 Dragonair Dragon 420 Pidgeotto Normal 349 Rattata Normal 253 Beedrill Bug 395 Doduo Normal 310 Kingler Water 475 Nidoqueen Poison 505 Hitmonchan Fighting 455 Charmeleon Fire 405 Arbok Poison 438 Gastly Ghost 310 Magikarp Water 200",
        "=MAX",
        "=MIN",
        "C2:C21",
        "F3",
        "525",
        "C8",
        "510"
      ]
    },
    {
      "title": "Google Sheets MEDIAN Function",
      "summary": "MEDIAN Function\nThe MEDIAN function is a premade function in Google Sheets, which returns the middle value in the data.\nIt is typed =MEDIAN and gets a list of cells:\nYou can select cells one by one, but also ranges, or even multiple ranges.\nNote: The median is a type of average value, which describes where the center of the data is located. You can learn about median in our Statistics Median Tutorial.\nCalculating the median manually requires that the data is sorted and arranged from low to high. This is not necessary using the MEDIAN function, it does it for you.\nMedian Function Example\nFind the median of this list of numbers 1,1,2,2,3,4,4:\nMEDIAN function, step by step:\nSelect a cell H2\nType =MEDIAN\nClick the MEDIAN command\nSpecify the range A2:G2\nHit enter\nNow, the function returns the median:\nGreat! You successfully found the median using the =MEDIAN function.\nNote that it found the value in the middle of the data, which is cell D2, the one that is marked red:",
      "examples": [
        "=MEDIAN(value1, [value2, ...])",
        "=MEDIAN",
        "1,1,2,2,3,4,4",
        "H2",
        "A2:G2",
        "D2"
      ]
    },
    {
      "title": "Google Sheets MIN Function",
      "summary": "MIN Function\nThe MIN function is a premade function in Google Sheets, which finds the lowest number in a range.\nIt is typed =MIN and gets a list of cells:\nYou can select cells one by one, but also ranges, or even multiple ranges.\nThe function ignores cells with text. It will only work for cells with numbers.\nNote: There is another function called =MAX, which finds the highest value in a range, the opposite of MIN.\nLet's have a look at an example!\nMin Function Example\nFind the lowest total stats in the range C2:C21:\nSelect the cell F5\nType =MIN\nClick the MIN command\nSpecify a range C2:C21 for the Total stats values\nHit enter\nNow, the function returns the lowest value from the cells in the range:\nLook at that! The function has successfully found the lowest value, 200. Magikarp has the lowest Total stats of the Pokemons in this list.\nLet's add text to a cell in the range C2:C21 to see what happens. Type Kadabra into the cell C21:\nRight on! The function ignores the text typed in the range. 253 is returned as the new lowest value, as the old one was replaced with text. Rattata is now the Pokemon with the lowest Total stats in the range C2:C21.",
      "examples": [
        "=MIN(value1, [value2, ...])",
        "Name Type 1 Total stats Mankey Fighting 305 Poliwrath Water 510 MIN Victreebel Grass 490 Tentacool Water 335 Magneton Electric 465 Dewgong Water 475 Cloyster Water 525 Onix Rock 385 Dragonair Dragon 420 Pidgeotto Normal 349 Rattata Normal 253 Beedrill Bug 395 Doduo Normal 310 Kingler Water 475 Nidoqueen Poison 505 Hitmonchan Fighting 455 Charmeleon Fire 405 Arbok Poison 438 Gastly Ghost 310 Magikarp Water 200",
        "=MIN",
        "=MAX",
        "C2:C21",
        "F5",
        "200",
        "C21",
        "253"
      ]
    },
    {
      "title": "Google Sheets MODE Function",
      "summary": "MODE Function\nThe MODE function is a premade function in Google Sheets, which is used to find the most common value(s).\nThere are two versions, which are typed MODE.SNGL or MODE.MULT that gets a list of cells:\nYou can select cells one by one, but also ranges, or even multiple ranges.\nMODE.SNGL does the same as MODE and returns only one value (picking the first it finds).\nMODE.MULT returns multiple values if there are more than one that is the most common.\nNote: The mode is a type of average value, which describes where most of the data is located. You can read more about mode in the Statistics Mode Chapter.\nNote: The mode functions work with both text values and numbers.\nLet's have a look at some examples!\nMode Function Example (SNGL)\nFind the most common number of all the different Pokeballs in the trainers' inventories.\nThe MODE.SNGL function, step by step:\nSelect the cell B9\nType =MODE\nClick the MODE.SNGL command\nSpecify the range B2:E7 for all the different types of Pokeballs\nHit enter\nNow, the function returns the most common value in the range:\nIt returns the number 1 which is seen 7 times. The closest number to it is 3 and 4 which are seen 3 times each.\nREMOVE ADS\nMode Function Example (MULT)\nFind the most common number of Pokeballs in the trainers' inventories.\nThe MODE.MULT function, step by step:\nSelect the cell B9\nType =MODE\nClick the MODE.MULT command\nSpecify the range B2:B7 for the Pokeballs\nHit enter\nNow, the function returns the most common values in the range:\nIt returns the number 10 in the first cell (B9) and the number 12 in the second cell (B10). Both 10 and 12 are seen twice, which is more than any of the other values.",
      "examples": [
        "=MODE.SNGL(value1, [value2, ...])\n=MODE.MULT(value1, [value2, ...])",
        "Trainer Pokeball Great Ball Ultraball Master Ball Iva 10 4 1 1 Liam 12 3 0 1 Jenny 15 1 3 1 Iben 12 2 6 0 Adora 10 4 1 1 Kasper 9 2 1 0 MODE",
        "Trainer Pokeball Iva 10 Liam 12 Jenny 15 Iben 12 Adora 10 Kasper 9 MODE",
        "MODE.SNGL",
        "MODE.MULT",
        "MODE",
        "B9",
        "=MODE",
        "B2:E7",
        "1",
        "3",
        "4",
        "B2:B7",
        "10",
        "12",
        "B10"
      ]
    },
    {
      "title": "Google Sheets OR Function",
      "summary": "OR Function\nThe OR function is a premade function in Google Sheets, which returns TRUE or FALSE based on two or more conditions.\nIt is typed =OR.\nNote: The OR function is often used together with the IF function.\nThe conditions are referred to as [logical_expression1], [logical_expression2], and so on.\nThe conditions can check things like:\nIf a number is greater than another number >\nIf a number is smaller than another number <\nIf a number or text is equal to something =\nExample OR Function\nCheck if the Pokemon type is water OR has defense greater than 60:\nThe function returns \"TRUE\" or \"FALSE\".\nExample OR function, step by step:\nSelect the cell D2\nType =OR\nClick the OR command\nSpecify the first condition B2=\"Water\"\nType ,\nSpecify the second condition C2>60\nHit enter\nNote: You can add more conditions by repeating steps 5-6 before hitting enter.\nSince the value in cell B2 is not \"Water\" the first condition is FALSE.\nSince the value in cell C2 is less than 60 the second condition is also FALSE.\nAt least one condition need to be TRUE for the OR function to return TRUE.\nNote: Text values needs to be in quotes: \" \"\nThe function can be repeated with the filling function for each row to perform the same check for each Pokemon:\nNow, each row has a check for Water Type or Defense greater than 60:\nFor example:\nIvysaur is not Water type, but it has more than 60 defense, so the function returns \"TRUE\"\nCharmeleon is not Water type, and has less than 60 defense, so the function returns \"FALSE\"\nWartortle is both Water type and has more than 60 defense, so the function returns \"TRUE\"\nREMOVE ADS\nExample OR Function (with IF)\nCombining the OR function with an IF function lets you check multiple conditions for the IF function:\nNote: The IF function lets you specify the return values.\nThe IF function is typed =IF and has 3 parts:\nThe OR function takes the place of the logical_expression condition.\nHere, the IF function returns \"Yes\" or \"No\".\nExample OR function as the condition for IF function, step by step:\nSelect cell D2\nType =IF\nClick the IF command\nType OR\nClick the OR command\nSpecify the first condition B2=\"Water\"\nType ,\nSpecify the second condition C2>60\nType ),\nSpecify the value \"Yes\" for when either or both conditions are TRUE\nType ,\nSpecify the value \"No\" for when both conditions are FALSE\nType ) and hit enter\nThe function can be repeated with the filling function for each row to perform the same check for each Pokemon:\nNow, each row has a check for Water Type or Defense greater than 60:\nFor example:\nIvysaur is not Water type, but it has more than 60 defense, so the function returns \"Yes\"\nCharmeleon is not Water type, and has less than 60 defense, so the function returns \"No\"\nWartortle is both Water type and has more than 60 defense, so the function returns \"Yes\"",
      "examples": [
        "=OR(logical_expression1, [logical_expression2, ...])",
        "Name Type 1 Defense Water Type OR more than 60 Defense Bulbasaur Grass 49 Ivysaur Grass 63 Venusaur Grass 83 Charmander Fire 43 Charmeleon Fire 58 Charizard Fire 78 Squirtle Water 65 Wartortle Water 80 Blastoise Water 100",
        "=IF(logical_expression, value_if_true, value_if_false)",
        "=OR",
        "[logical_expression1]",
        "[logical_expression2]",
        ">",
        "<",
        "=",
        "D2",
        "B2=\"Water\"",
        ",",
        "C2>60",
        "B2",
        "C2",
        "=IF",
        "logical_expression",
        "OR",
        "),",
        "\"Yes\"",
        "\"No\"",
        ")"
      ]
    },
    {
      "title": "Google Sheets STDEV.P Function",
      "summary": "STDEV.P Function\nThe STDEV.P function is a premade function in Google Sheets, which calculates the Standard Deviation (Stdev) for the entire population.\nIt is typed =STDEV.P and gets a list of cells:\nYou can select cells one by one, but also ranges, or even multiple ranges.\nThe STDEV.P function ignores cells that do not contain numbers.\nNote: Standard deviation (Ï) measures how far a 'typical' observation is from the average of the data (Î¼). You can read more about standard deviation in the Statistics - Standard Deviation Chapter.\nTip: There is another function called =STDEV.S that can be used if you have the data for a sample.\nLet's have a look at an example!\nStdev.p Function Example\nFind the standard deviation of the total stats for all of the Pokemon in the population:\nNote: The full dataset continues after row 14, all the way down to row 759.\nThe STDEV.P function, step by step:\nSelect the cell E3\nType =STDEV.P\nClick the STDEV.P command\nSpecify the range B2:B759 for the Total stats for all the Pokemon\nHit enter\nNow, the function returns the standard deviation of all the Total stat values:\nThe STDEV.P function has successfully returned the Standard Deviation for the whole population as 113,9159026.",
      "examples": [
        "=STDEV.P(value1, [value2, ...])",
        "=STDEV.P",
        "=STDEV.S",
        "E3",
        "B2:B759",
        "113,9159026"
      ]
    },
    {
      "title": "Google Sheets STDEV.S Function",
      "summary": "STDEV.S Function\nThe STDEV.S function is a premade function in Google Sheets, which calculates the Standard Deviation (Stdev) for a sample of a population.\nIt is typed =STDEV.S and gets a list of cells:\nYou can select cells one by one, but also ranges, or even multiple ranges.\nThe STDEV.S function ignores cells that do not contain numbers.\nNote: Standard deviation (Ï) measures how far a 'typical' observation is from the average of the data (Î¼). You can read more about standard deviation in the Statistics - Standard Deviation Chapter.\nTip: There is another function called =STDEV.P that can be used if you have the data for the entire population.\nLet's have a look at an example!\nSTDEV.S Function Example\nFind the standard deviation of the total stats for the Pokemon in this sample:\nThe STDEV.S function, step by step:\nSelect the cell E3\nType =STDEV.S\nClick the STDEV.S command\nSpecify the range B2:B21 for the Total stats for the sample Pokemon\nHit enter\nNow, the function returns the standard deviation of all the Total stat values:\nThe STDEV.S function has successfully returned the Standard Deviation for the sample as 113,2319464.",
      "examples": [
        "=STDEV.S(value1, [value2, ...])",
        "Name Total Bulbasaur 318 Ivysaur 405 STDEV.S Venusaur 525 Charmander 309 Charmeleon 405 Charizard 534 Squirtle 314 Wartortle 405 Blastoise 530 Caterpie 195 Metapod 205 Butterfree 395 Weedle 195 Kakuna 205 Beedrill 395 Pidgey 251 Pidgeotto 349 Pidgeot 479 Rattata 253 Raticate 413",
        "=STDEV.S",
        "=STDEV.P",
        "E3",
        "B2:B21",
        "113,2319464"
      ]
    },
    {
      "title": "Google Sheets SUM Function",
      "summary": "SUM Function\nThe SUM function is a premade function in Google Sheets, which adds up numbers in a range.\nIt is typed =SUMand gets a list of cells:\nYou can select cells one by one, but also ranges, or even multiple ranges.\nNote: The =SUM function adds up both negative and positive cell values.\nLet's see some examples!\nSum Function Example\nCalculate the sum of all the Total stats for this list of Pokemon:\nThe SUM function, step by step:\nSelect the cell B12\nType =SUM\nClick the SUM command\nSpecify the range B2:B10 for the Total stats\nHit enter\nNow, the function calculates the sum of Total stats for the Pokemon in the list:\nGreat job! You have successfully calculated the sum of the stats using the =SUM function. The Pokemon's stats have a total sum of 3092.\nLet's change one of the values in the range, to see what happens. Type 350 into cell B7:\nRattata total stats was changed from 253 to 350.\nThe SUM function updated the total sum from 3092 to 3189.\nIt updates the SUM when values inside of the range are changed.\nLets change Rattata's stats to a negative number to see what happens. Type -350 into cell B7:\nThe SUM is updated to 2489. Adding a negative number subtracts that value from the range.",
      "examples": [
        "=SUM(value1, [value2, ...])",
        "Name Total stats Mankey 305 Magneton 465 Onix 385 Dragonair 420 Pidgeotto 349 Rattata 253 Charmeleon 405 Gastly 310 Magikarp 200 SUM",
        "=SUM",
        "B12",
        "B2:B10",
        "3092",
        "350",
        "B7",
        "253",
        "3189",
        "-350",
        "2489"
      ]
    },
    {
      "title": "Google Sheets SUMIF Function",
      "summary": "SUMIF Function\nThe SUMIF function is a premade function in Google Sheets, which calculates the sum of values in a range based on a true or false condition.\nIt is typed =SUMIF:\nThe condition is referred to as criterion, which can check things like:\nIf a number is greater than another number >\nIf a number is smaller than another number <\nIf a number or text is equal to something =\nThe [sum_range] is the range where the function calculates the sum.\nNote: The [sum_range] is optional.\nIf not specified, the function calculates the sum of the same range as the condition.\nExample SUMIF function\nFind the sum of Total stats for Grass type Pokemon:\nThe condition is that the type is \"Grass\".\nExample SUMIF function, step by step:\nSelect the cell F3\nType =SUMIF\nClick the SUMIF command\nSpecify the range for the conditionB2:B10 (the Type 1 values)\nType ,\nSpecify the criteria (the cell E3, which has the value \"Grass\")\nType ,\nSpecify the range for the sum C2:C10 (the Total values)\nType ,\nHit enter\nThe function now sums the Total stats for Grass type Pokemon.\nThe function can be repeated for the other Pokemon types to compare them:\nNote: You can use the filling function for the other rows, but make sure to use absolute references for the ranges.\nNow, we can see the sum of total stats for the different types of Pokemon:",
      "examples": [
        "=SUMIF(range, criterion, [sum_range])",
        "Name Type 1 Total Bulbasaur Grass 318 Type Total Sum Ivysaur Grass 405 Grass Venusaur Grass 525 Fire Charmander Fire 309 Water Charmeleon Fire 405 Charizard Fire 534 Squirtle Water 314 Wartortle Water 405 Blastoise Water 530",
        "=SUMIF",
        "criterion",
        ">",
        "<",
        "=",
        "[sum_range]",
        "F3",
        "B2:B10",
        ",",
        "E3",
        "C2:C10"
      ]
    },
    {
      "title": "Google Sheets SUMIFS Function",
      "summary": "SUMIFS Function\nThe SUMIFS function is a premade function in Google Sheets, which calculates the sum of a range based on one or more true or false condition.\nIt is typed =SUMIFS:\nThe conditions are referred to as criteria1, criteria2, and so on, which can check things like:\nIf a number is greater than another number >\nIf a number is smaller than another number <\nIf a number or text is equal to something =\nThe criteria_range1, criteria_range2, and so on, are the ranges where the function check for the conditions.\nThe [sum_range] is the range where the function calculates the sum.\nExample SUMIFS function\nFind the sum of total stats for Water type 1st Generation Pokemon:\nThe conditions are that the type is \"Water\" and Generation is 1.\nNote: The full dataset continues after row 14, all the way down to row 759.\nExample SUMIFS function, step by step:\nSelect the cell H3\nType =SUMIFS\nClick the SUMIFS command\nSpecify the range for the sum C2:C759 (the Total values)\nType ,\nSpecify the range for the first conditionB2:B759 (the Type 1 values)\nType ,\nSpecify the criteria (the cell F3, which has the value \"Water\")\nType ,\nSpecify the range for the second conditionD2:D759 (the Generation values)\nType ,\nSpecify the criteria (the cell G3, which has the value \"1\")\nHit enter\nNote: You can add more conditions by repeating steps 9-12 before hitting enter.\nThe function now calculates the sum of total stats for the 1st Generation Water type Pokemon.\nThe function can be repeated for the following Generations to compare them:\nNote: You can use the filling function for the other rows, but make sure to use absolute references for the ranges.\nNow, we can see the sum of total stats of Water type Pokemon between generations:",
      "examples": [
        "=SUMIFS(sum_range, criteria_range1, criterion1, [criteria_range2, ...], [criterion2, ...])",
        "=SUMIFS",
        "criteria1",
        "criteria2",
        ">",
        "<",
        "=",
        "criteria_range1",
        "criteria_range2",
        "[sum_range]",
        "H3",
        "C2:C759",
        ",",
        "B2:B759",
        "F3",
        "D2:D759",
        "G3"
      ]
    },
    {
      "title": "Google Sheets VLOOKUP Function",
      "summary": "VLOOKUP Function\nThe VLOOKUP function is a premade function in Google Sheets, which allows searches across columns.\nIt is typed =VLOOKUP and has the following parts:\nNote: The column which holds the data used to lookup must always be to the left.\nserach_key: Select the cell where search values will be entered.\nrange: The table range, including all cells in the table.\nindex: The data which is being looked up. The input is the number of the column, counted from the left:\n[is_sorted]: TRUE/1 if the range is sorted or FALSE/0 if it is not sorted.\nNote: Both 1 / 0 and True / False can be used in [is_sorted].\nLet's have a look at an example!\nVlookup Function Example\nLookup and return Pokemon names from this list by their ID#:\nThe VLOOKUP function, step by step:\nSelect the cell H4\nType =VLOOKUP\nClick the VLOOKUP command\nH4 is where the search result is displayed. In this case, the Pokemon's names based on their ID#.\nSelect the cell where search value will be entered (H3)\nH3 selected as serach_key. This is the cell where the search query is entered. In this case the Pokemon's ID#.\nType ,\nSpecify the table range A2:E21\nType ,\nType the number of the Name column, counted from the left: 2\nType TRUE\nHit enter\nIn this example the table is sorted by ID#, so the [is_sorted] value is TRUE.\nAn illustration for selecting column index number 2:\nNow, the function returns the Name value of the search_key specified in cell H3:\nGood job! The function returns the #N/A value. This is because there have not been entered any value to the Search ID# cell H3.\nLet us feed a value to it, type 7 into cell H3:\nHave a look at that! The VLOOKUP function has successfully found the Pokemon Squirtle which has the ID# 7.\nOne more time, type 4 into cell H3:\nIt still works! The function returned Charmanders name, which has 4 as its ID#. That's great.\nLet's try another example, using the Pokemon names as input instead.\nFirst, change the places of columns A and B.\nNote: You can click and drag coloumns in Google Sheet to rearrange them.\nClicking and holding coloumn A and dragging it between columns B and C will rearrange them like this:\nNow, the function is trying to look up 4 in the Name column, which returns the #N/A error.\nLet's switch the labels, and try to enter Caterpie into the cell H3, where the vlookup functions finds the search_key:\nNotice that the ID# returned is 1, although Caterpie's ID# is actually 10.\nThis result is another error.\nThis is because the Name values are not sorted like the ID numbers are.\nLet's change the value of the [is_sorted] part of the function from TRUE to FALSE:\nNow, the function correctly returns Caterpie's real ID number:",
      "examples": [
        "=VLOOKUP(search_key, range, index, [is_sorted])",
        "# Name Type 1 Type 2 Total 1 Bulbasaur Grass Poison 318 2 Ivysaur Grass Poison 405 Search ID# 3 Venusaur Grass Poison 525 Name 4 Charmander Fire 309 5 Charmeleon Fire 405 6 Charizard Fire Flying 534 7 Squirtle Water 314 8 Wartortle Water 405 9 Blastoise Water 530 10 Caterpie Bug 195 11 Metapod Bug 205 12 Butterfree Bug Flying 395 13 Weedle Bug Poison 195 14 Kakuna Bug Poison 205 15 Beedrill Bug Poison 395 16 Pidgey Normal Flying 251 17 Pidgeotto Normal Flying 349 18 Pidgeot Normal Flying 479 19 Rattata Normal 253 20 Raticate Normal 413",
        "=VLOOKUP",
        "H4",
        "H3",
        ",",
        "A2:E21",
        "2",
        "TRUE",
        "#N/A",
        "7",
        "4",
        "Caterpie"
      ]
    },
    {
      "title": "Google Sheets XOR Function",
      "summary": "XOR Function\nThe XOR function is a premade function in Google Sheets, which returns TRUE or FALSE based on two or more conditions.\nNote: The XOR function is often used together with the IF function.\nIt is typed =XOR:\nThe conditions are referred to as [logical_expression1], [logical_expression2], and so on.\nThe conditions can check things like:\nIf a number is greater than another number >\nIf a number is smaller than another number <\nIf a number or text is equal to something =\nFor two conditions, you can think of the XOR function as: \"either this or that, but not both\"\nExample XOR Function\nCheck if the Pokemon type is either Fire type OR has HP less than 60, but not both:\nThe function returns \"TRUE\" or \"FALSE\".\nExample XOR function, step by step:\nSelect the cell D2\nType =XOR\nClick the XOR command\nSpecify the first condition B2=\"Fire\"\nType ,\nSpecify the second condition C2<60\nHit enter\nNote: You can add more conditions by repeating steps 5-6 before hitting enter.\nThe XOR function returns \"TRUE\" if an odd number (1,3,5,..) of conditions are TRUE.\nSince the value in cell B2 is not \"Fire\" the first condition is FALSE.\nSince the value in cell C2 is less than 60 the second condition is TRUE.\nFor two conditions, only one condition should to be TRUE for the XOR function to return TRUE.\nNote: Text values needs to be in quotes: \" \"\nThe function can be repeated with the filling function for each row to perform the same check for each Pokemon:\nNow, each row has a check for Fire Type or HP less than 60, but not both:\nFor example:\nIvysaur is not Fire type, but it also does not have less than 60 defense, so the function returns \"FALSE\"\nCharmeleon is Fire type, and has less than 60 defense, so the function returns \"FALSE\"\nWartortle is not Fire type, but has less than 60 defense, so the function returns \"TRUE\"\nREMOVE ADS\nExample XOR Function (with IF)\nCombining the XOR function with an IF function lets you check multiple conditions for the IF function:\nNote: The IF function lets you specify the return values.\nThe IF function is typed =IF and has 3 parts:\nThe XOR function takes the place of the logical_expression condition.\nHere, the IF function returns \"Yes\" or \"No\".\nExample XOR function as the condition for IF function, step by step:\nSelect cell D2\nType =IF\nClick the IF command\nType XOR\nClick the XOR command\nSpecify the first condition B2=\"Fire\"\nType ,\nSpecify the second condition C2<60\nType ),\nSpecify the value \"Yes\" for when just one condition is TRUE\nType ,\nSpecify the value \"No\" for when both are FALSE, or TRUE at the same time\nType ) and hit enter\nThe function can be repeated with the filling function for each row to perform the same check for each Pokemon:\nNow, each row has a check for Water Type or Defense greater than 60, but not both:\nFor example:\nIvysaur is not Fire type, but it also does not have less than 60 defense, so the function returns \"No\"\nCharmeleon is Fire type, and has less than 60 defense, so the function returns \"No\"\nWartortle is not Fire type, but has less than 60 defense, so the function returns \"Yes\"",
      "examples": [
        "=XOR(logical_expression1, [logical2_expression, ...])",
        "Name Type 1 HP EITHER Fire Type OR less than 60 HP Bulbasaur Grass 45 Ivysaur Grass 60 Venusaur Grass 80 Charmander Fire 39 Charmeleon Fire 58 Charizard Fire 78 Squirtle Water 44 Wartortle Water 59 Blastoise Water 79",
        "=IF(logical_expression, value_if_true, value_if_false)",
        "=XOR",
        "[logical_expression1]",
        "[logical_expression2]",
        ">",
        "<",
        "=",
        "D2",
        "B2=\"Fire\"",
        ",",
        "C2<60",
        "B2",
        "C2",
        "=IF",
        "logical_expression",
        "XOR",
        "),",
        "\"Yes\"",
        "\"No\"",
        ")"
      ]
    }
  ],
  "glossary": [
    "average",
    "averageif",
    "averageifs",
    "backend",
    "count",
    "counta",
    "countblank",
    "countif",
    "countifs",
    "exercises",
    "font characteristics",
    "font color",
    "font size",
    "free",
    "gs division",
    "gs fill",
    "gs formatting",
    "gs formulas",
    "gs functions",
    "gs home",
    "gs multiplication",
    "gs overview",
    "gs parentheses",
    "gs ranges",
    "gs sort",
    "gs subtraction",
    "gs syntax",
    "if",
    "ifs",
    "javascript",
    "max",
    "median",
    "min",
    "mode",
    "or",
    "programs",
    "report error",
    "stdev.p",
    "stdev.s",
    "sum",
    "sumif",
    "sumifs",
    "vlookup",
    "w3.css",
    "w3schools spaces",
    "xor"
  ],
  "objectives": [
    "Data analytics",
    "Project management",
    "Finance and accounting"
  ]
}