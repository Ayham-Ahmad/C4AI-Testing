{
  "course_name": "React",
  "description": "React is a JavaScript library for building user interfaces. React is used to build single-page applications. React allows us to create reusable UI components. Tip: Sign in to track your progress - it's free. Our \"Show React\" tool makes it easy to demonstrate React. It shows both the code and the result. Run Example » Many chapters in this tutorial end with an exercise where you can check you level of knowledge. See all React Exercises REMOVE ADS Test your React skills with a quiz. React Quiz Sign Up for Free Note: This is an optional feature. You can study at W3Schools without creating an account. Before you continue you should have a basic understanding of the following: If you want to study these subjects first, find the tutorials on our Home page. In addition, you should also have some experience with the new JavaScript features introduced in ECMAScript 6 (ES6), you will learn about them in the React ES6 chapter.",
  "course_summary": [
    {
      "title": "React Introduction",
      "summary": "What is React?\nReact is a front-end JavaScript library.\nReact was developed by the Facebook Software Engineer Jordan Walke.\nReact is also known as React.js or ReactJS.\nReact is a tool for building UI components.\nHow does React Work?\nReact creates a VIRTUAL DOM in memory.\nInstead of manipulating the browser's DOM directly, React creates a virtual DOM in memory, where it does all the necessary manipulating, before making the changes in the browser DOM.\nReact only changes what needs to be changed!\nReact finds out what changes have been made, and changes only what needs to be changed.\nYou will learn the various aspects of how React does this in the rest of this tutorial.\nWhat You Should Already Know\nBefore you continue you should have a basic understanding of the following:\nHTML\nCSS\nJavaScript\nIf you want to study these subjects first, find the tutorials on our Home page.\nReact.JS History\nLatest version of React.JS is 19.0.0 (December 2024).\nInitial release to the Public (version 0.3.0) was in July 2013.\nReact.JS was first used in 2011 for Facebook's Newsfeed feature.\nFacebook Software Engineer, Jordan Walke, created it.",
      "examples": []
    },
    {
      "title": "React Getting Started",
      "summary": "To use React in production, you need npm which is included with Node.js.\nAlso, you need to set up a React Environment, and choose a build tool.\nSetting up a React Environment\nFirst, make sure you have Node.js installed. You can check by running this in your terminal:\nIf Node.js is installed, you will get a result with the version number:\nIf not, you will need to install Node.js.\nInstall a Build Tool (Vite)\nWhen you have Node.js installed, you can start creating a React application by choosing a build tool.\nWe will use the Vite build tool in this tutorial.\nRun this command to install Vite:\nIf the installation was a success, you will get a result like this:\nCreate a React Application\nRun this command to create a React application named my-react-app:\nIf you get this message, just press y and press Enter to continue:\nIf the creation was a success, you will get a result like this:\nInstall Dependencies\nAs the result above suggests, navigate to your new react application directory:\nAnd run this command to install dependencies:\nWhich will result in this:\nRun the React Application\nNow you are ready to run your first real React application!\nRun this command to run the React application my-react-app:\nWhich will result in this:\nA new browser window will pop up with your newly created React App! If not, open your browser and type localhost:5173 in the address bar.\nThe result:",
      "examples": [
        "node -v",
        "v22.15.0",
        "npm install -g create-vite",
        "added 1 package in 649ms",
        "npm create vite@latest my-react-app -- --template react",
        "Need to install the following packages:\ncreate-vite@6.5.0\nOk to proceed? (y)",
        "> npx\n> create-vite my-react-app --template react\n\n|\no  Scaffolding project in C:\\Users\\stale\\my-react-app...\n|\n—  Done. Now run:\n\ncd my-react-app\nnpm install\nnpm run dev",
        "cd my-react-app",
        "npm install",
        "added 154 packages, and audited 155 packages in 8s\n\n33 packages are looking for funding\nrun `npm fund` for details\n\nfound 0 vulnerabilities",
        "npm run dev",
        "VITE v6.3.5  ready in 217 ms\n\n➜ Local: http://localhost:5173/\n➜ Network: use --host to expose\n➜ press h + enter to show help",
        "my-react-app",
        "y",
        "Enter",
        "localhost:5173"
      ]
    },
    {
      "title": "Your First React App",
      "summary": "Now that your development environment is set up, let's try to modify the default app to display \"Hello, World!\".\nModify the React App\nLook in the my-react-app directory, and you will find a src folder. Inside the src folder there is a file called App.js, open it and it will look like this:\nExampleGet your own React.js Server\nThis is the default content of the App.jsx file in the src folder:\nTry replacing the entire file content with the code below and save the file.\nExample\nReplace all the content of the App.jsx file with the code below:\nSee the changes in the browser when you click Save.\nNotice that the changes are visible immediately after you save the file, you do not have to reload the browser!\nThe result:\nCongratulations! You've just modified your first React application.",
      "examples": [
        "import { useState } from 'react' import reactLogo from './assets/react.svg' import viteLogo from '/vite.svg' import './App.css' function App() { const [count, setCount] = useState(0) return ( <> <div> <a href=\"https://vitejs.dev\" target=\"_blank\"> <img src={viteLogo} className=\"logo\" alt=\"Vite logo\" /> </a> <a href=\"https://react.dev\" target=\"_blank\"> <img src={reactLogo} className=\"logo react\" alt=\"React logo\" /> </a> </div> <h1>Vite + React</h1> <div className=\"card\"> <button onClick={() => setCount((count) => count + 1)}> count is {count} </button> <p> Edit <code>src/App.jsx</code> and save to test HMR </p> </div> <p className=\"read-the-docs\"> Click on the Vite and React logos to learn more </p> </> ) } export default App",
        "function App() { return ( <div className=\"App\"> <h1>Hello World!</h1> </div> ); } export default App;",
        "my-react-app",
        "src",
        "App.js",
        "App.jsx"
      ]
    },
    {
      "title": "React Render HTML",
      "summary": "React's goal is in many ways to render HTML in a web page.\nReact renders HTML to the web page via a container, and a function called createRoot().\nThe Container\nReact uses a container to render HTML in a web page.\nTypically, this container is a <div id=\"root\"></div> element in the index.html file.\nIf you have followed the steps in the previous chapter, you should have a file called index.html in the root directory of your project:\nExampleGet your own React.js Server\nThe default content of the index.html file:\nTo better understand the content of the index.html file, let's remove all the code we don't need.\nExample\nThe index.html file should now look like this:\nThe file is now stripped from unnecessary code, and we can concentrate on learning React without any disturbing elements.\nThe createRoot Function\nThe createRoot function is located in the main.jsx file in the src folder, and is a built-in function that is used to create a root node for a React application.\nExample\nThe default content of the src/main.jsx file:\nThe createRoot() function takes one argument, an HTML element.\nThe purpose of the function is to define the HTML element where a React component should be displayed.\nTo better understand the createRoot function, let's remove unnecessary code and write our own \"Hello React!\" example:\nExample\nThe src/main.jsx file should now look like this:\nIf you save the file, the result in the browser will look like this:\nThe render Method\nDid you notice the render method?\nThe render method defines what to render in the HTML container.\nThe result is displayed in the <div id=\"root\"> element.\nExample\nDisplay a paragraph inside the \"root\" element:\nThe result will look like this:\nNote: the element id does not have to be \"root\", but this is the standard convention.\nREMOVE ADS\nShow React\nW3Schools has its own \"Show React\" tool where we will show the result of the code we explain in the tutorial.\nClick the \"Run Example\" button to see the result:\nExample\nThe same example shown in our \"Show React\" tool:\nThe HTML Code\nThe HTML code in this tutorial uses JSX which allows you to write HTML tags inside the JavaScript code:\nDon't worry if the syntax is unfamiliar, you will learn more about JSX later in this tutorial.\nExample\nCreate a variable that contains HTML code and display it in the \"root\" node:\nRun Example »\nThe Root Node\nThe root node is the HTML element where you want to display the result.\nIt is like a container for content, managed by React.\nIt does NOT have to be a <div> element and it does NOT have to have the id='root':\nExample\nThe root node can be called whatever you like.\nDisplay the result in the <header id=\"sandy\"> element:\nRun Example »",
      "examples": [
        "<!doctype html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\" /> <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" /> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /> <title>Vite + React</title> </head> <body> <div id=\"root\"></div> <script type=\"module\" src=\"/src/main.jsx\"></script> </body> </html>",
        "<!doctype html> <html lang=\"en\"> <body> <div id=\"root\"></div> <script type=\"module\" src=\"/src/main.jsx\"></script> </body> </html>",
        "import { StrictMode } from 'react' import { createRoot } from 'react-dom/client' import './index.css' import App from './App.jsx' createRoot(document.getElementById('root')).render( <StrictMode> <App /> </StrictMode> )",
        "import { createRoot } from 'react-dom/client' createRoot(document.getElementById('root')).render( <h1>Hello React!</h1> )",
        "import { createRoot } from 'react-dom/client' createRoot(document.getElementById('root')).render( <p>Welcome!</p> )",
        "import { createRoot } from 'react-dom/client' const myelement = ( <table> <tr> <th>Name</th> </tr> <tr> <td>John</td> </tr> <tr> <td>Elsa</td> </tr> </table> ); createRoot(document.getElementById('root')).render( myelement )",
        "<!doctype html> <html lang=\"en\"> <body> <header id=\"sandy\"></header> <script type=\"module\" src=\"/src/main.jsx\"></script> </body> </html>",
        "import { createRoot } from 'react-dom/client' createRoot(document.getElementById('sandy')).render( <p>Welcome!</p> )",
        "createRoot()",
        "<div id=\"root\"></div>",
        "index.html",
        "createRoot",
        "main.jsx",
        "src",
        "src/main.jsx",
        "render",
        "<div id=\"root\">",
        "<div>",
        "id='root'",
        "<header id=\"sandy\">"
      ]
    },
    {
      "title": "Upgrade React",
      "summary": "Upgrade to React 19\nUpgrading an existing React application to version 19 only requires two steps.\nIf you are already using the latest version of React, you can skip this section.\nStep 1: Install React 19\nTo install the latest version, from your project folder run the following from the terminal:\nStep 2: Use the new root API\nIn order to take advantage of React 19's concurrent features you'll need to use the new root API for client rendering.\nYour application will work without using the new root API. If you continue to use ReactDOM.render your application will behave like React 17.",
      "examples": [
        "// Before import ReactDOM from 'react-dom'; ReactDOM.render( <h1>Hello React!</h1>, document.getElementById('root') ); // After import ReactDOM from 'react-dom/client'; createRoot(document.getElementById('root')).render( <h1>Hello React!</h1> );",
        "npm i react@latest react-dom@latest",
        "ReactDOM.render"
      ]
    },
    {
      "title": "React ES6",
      "summary": "What is ES6?\nES6 stands for ECMAScript 6.\nECMAScript was created to standardize JavaScript, and ES6 is the 6th version of ECMAScript, it was published in 2015, and is also known as ECMAScript 2015.\nWhy Should I Learn ES6?\nReact uses ES6, and you should be familiar with some of the new features like:\nClasses\nArrow Functions\nVariables (let, const, var)\nArray Methods like .map()\nDestructuring\nModules\nTernary Operator\nSpread Operator",
      "examples": [
        ".map()"
      ]
    },
    {
      "title": "React ES6 Classes",
      "summary": "Classes\nES6 introduced classes.\nA class is a type of function, but instead of using the keyword function to initiate it, we use the keyword class, and the properties are assigned inside a constructor() method.\nExampleGet your own React.js Server\nA simple class constructor:\nNotice the case of the class name. We have begun the name, \"Car\", with an uppercase character. This is a standard naming convention for classes.\nNow you can create objects using the Car class:\nExample\nCreate an object called \"mycar\" based on the Car class:\nTry it Yourself »\nNote: The constructor function is called automatically when the object is initialized.\nREMOVE ADS\nMethod in Classes\nYou can add your own methods in a class:\nExample\nCreate a method named \"present\":\nTry it Yourself »\nAs you can see in the example above, you call the method by referring to the object's method name followed by parentheses (parameters would go inside the parentheses).\nClass Inheritance\nTo create a class inheritance, use the extends keyword.\nA class created with a class inheritance inherits all the methods from another class:\nExample\nCreate a class named \"Model\" which will inherit the methods from the \"Car\" class:\nTry it Yourself »\nThe super() method refers to the parent class.\nBy calling the super() method in the constructor method, we call the parent's constructor method and get access to the parent's properties and methods.\nTo learn more about classes, check out our JavaScript Classes section.",
      "examples": [
        "class Car { constructor(name) { this.brand = name; } }",
        "class Car { constructor(name) { this.brand = name; } } const mycar = new Car(\"Ford\");",
        "class Car { constructor(name) { this.brand = name; } present() { return 'I have a ' + this.brand; } } const mycar = new Car(\"Ford\"); mycar.present();",
        "class Car { constructor(name) { this.brand = name; } present() { return 'I have a ' + this.brand; } } class Model extends Car { constructor(name, mod) { super(name); this.model = mod; } show() { return this.present() + ', it is a ' + this.model } } const mycar = new Model(\"Ford\", \"Mustang\"); mycar.show();",
        "function",
        "class",
        "constructor()",
        "extends",
        "super()"
      ]
    },
    {
      "title": "React ES6 Arrow Functions",
      "summary": "Arrow Functions\nArrow functions allow us to write shorter function syntax:\nExampleGet your own React.js Server\nBefore:\nTry it Yourself »\nExample\nWith Arrow Function:\nTry it Yourself »\nIt gets shorter! If the function has only one statement, and the statement returns a value, you can remove the brackets and the return keyword:\nExample\nArrow Functions Return Value by Default:\nTry it Yourself »\nNote: This works only if the function has only one statement.\nIf you have parameters, you pass them inside the parentheses:\nExample\nArrow Function With Parameters:\nTry it Yourself »\nIn fact, if you have only one parameter, you can skip the parentheses as well:\nExample\nArrow Function Without Parentheses:\nTry it Yourself »\nREMOVE ADS\nWhat About this?\nThe handling of this is also different in arrow functions compared to regular functions.\nIn short, with arrow functions there is no binding of this.\nIn regular functions the this keyword represented the object that called the function, which could be the window, the document, a button or whatever.\nWith arrow functions, the this keyword always represents the object that defined the arrow function.\nLet us take a look at two examples to understand the difference.\nBoth examples call a method twice, first when the page loads, and once again when the user clicks a button.\nThe first example uses a regular function, and the second example uses an arrow function.\nThe result shows that the first example returns two different objects (window and button), and the second example returns the Header object twice.\nExample\nWith a regular function, this represents the object that called the function:\nTry it Yourself »\nExample\nWith an arrow function, this represents the Header object no matter who called the function:\nTry it Yourself »\nRemember these differences when you are working with functions. Sometimes the behavior of regular functions is what you want, if not, use arrow functions.",
      "examples": [
        "hello = function() { return \"Hello World!\"; }",
        "hello = () => { return \"Hello World!\"; }",
        "hello = () => \"Hello World!\";",
        "hello = (val) => \"Hello \" + val;",
        "hello = val => \"Hello \" + val;",
        "class Header { constructor() { this.color = \"Red\"; } //Regular function: changeColor = function() { document.getElementById(\"demo\").innerHTML += this; } } const myheader = new Header(); //The window object calls the function: window.addEventListener(\"load\", myheader.changeColor); //A button object calls the function: document.getElementById(\"btn\").addEventListener(\"click\", myheader.changeColor);",
        "class Header { constructor() { this.color = \"Red\"; } //Arrow function: changeColor = () => { document.getElementById(\"demo\").innerHTML += this; } } const myheader = new Header(); //The window object calls the function: window.addEventListener(\"load\", myheader.changeColor); //A button object calls the function: document.getElementById(\"btn\").addEventListener(\"click\", myheader.changeColor);",
        "return",
        "this"
      ]
    },
    {
      "title": "React ES6 Variables",
      "summary": "Variables\nBefore ES6 there was only one way of defining your variables: with the var keyword. If you did not define them, they would be assigned to the global object. Unless you were in strict mode, then you would get an error if your variables were undefined.\nNow, with ES6, there are three ways of defining your variables: var, let, and const.\nExampleGet your own React.js Server\nvar\nIf you use var outside of a function, it belongs to the global scope.\nIf you use var inside of a function, it belongs to that function.\nIf you use var inside of a block, i.e. a for loop, the variable is still available outside of that block.\nvar has a function scope, not a block scope.\nExample\nlet\nlet is the block scoped version of var, and is limited to the block (or expression) where it is defined.\nIf you use let inside of a block, i.e. a for loop, the variable is only available inside of that loop.\nlet has a block scope.\nREMOVE ADS\nExample\nconst\nconst is a variable that once it has been created, its value can never change.\nconst has a block scope.\nThe keyword const is a bit misleading.\nIt does not define a constant value. It defines a constant reference to a value.\nBecause of this you can NOT:\nReassign a constant value\nReassign a constant array\nReassign a constant object\nBut you CAN:\nChange the elements of constant array\nChange the properties of constant object",
      "examples": [
        "var x = 5.6;",
        "let x = 5.6;",
        "const x = 5.6;",
        "var",
        "let",
        "const"
      ]
    },
    {
      "title": "JavaScript Array map()",
      "summary": "The map() Method\nThe map() method creates a new array with the results of calling a function for every array element.\nExampleGet your own React.js Server\nMultiply each number by 2:\nTry it Yourself »\nmap() in React\nThe map() method is commonly used in React to render lists of elements:\nExample\nTry it Yourself »\nNote: When using map() in React to create list items, each item needs a unique key prop.\nmap() with Objects\nYou can also use map() with arrays of objects:\nExample\nTry it Yourself »\nmap() Parameters\nThe map() method takes three parameters:\ncurrentValue - The current element being processed\nindex - The index of the current element (optional)\narray - The array that map was called upon (optional)\nExample\nTry it Yourself »\nNote: The map() method always returns a new array. It does not modify the original array.",
      "examples": [
        "const numbers = [1, 2, 3, 4]; const doubled = numbers.map(x => x * 2);",
        "const fruitlist = ['apple', 'banana', 'cherry']; function MyList() { return ( <ul> {fruitlist.map(fruit => <li key={fruit}>{fruit}</li> )} </ul> ); }",
        "const users = [ { id: 1, name: 'John', age: 30 }, { id: 2, name: 'Jane', age: 25 }, { id: 3, name: 'Bob', age: 35 } ]; function UserList() { return ( <ul> {users.map(user => <li key={user.id}> {user.name} is {user.age} years old </li> )} </ul> ); }",
        "const fruitlist = ['apple', 'banana', 'cherry']; function App() { return ( <ul> {fruitlist.map((fruit, index, array) => { return ( <li key={fruit}> Number: {fruit}, Index: {index}, Array: {array} </li> ); })} </ul> ); }",
        "map()",
        "key",
        "currentValue",
        "index",
        "array"
      ]
    },
    {
      "title": "React ES6 Destructuring",
      "summary": "Destructuring in React\nDestructuring is a JavaScript feature that allows you to extract values from objects or arrays into distinct variables. In React, it's commonly used with props, hooks, and state management.\nNote: Destructuring makes React code cleaner and more readable by reducing repetitive object and array access.\nDestructing Arrays\nHere is the old way of assigning array items to a variable:\nExampleGet your own React.js Server\nBefore:\nTry it Yourself »\nHere is the new way of assigning array items to a variable:\nExample\nWith destructuring:\nTry it Yourself »\nWhen destructuring arrays, the order that variables are declared is important.\nIf we only want the car and suv we can simply leave out the truck but keep the comma:\nDestructuring comes in handy when a function returns an array:\nExample\nTry it Yourself »\nREMOVE ADS\nDestructuring Objects\nYou can use destructuring to extract the values from an object:\nExample\nUnpack the values from an object:\nTry it Yourself »\nFor objects, the order of the properties does not matter:\nExample\nUnpack the values in a random order:\nTry it Yourself »\nYou can extract only the value(s) you want:\nExample\nExtract only firstName from the object:\nTry it Yourself »\nFor potentially missing properties we can set default values:\nExample\nSet a default value for the missing property:\nTry it Yourself »\nWe can also destructure deeply nested objects by referencing the nested object then using a colon and curly braces to again destructure the items needed from the nested object:\nExample\nTry it Yourself »\nRead more about Destructuring in our JavaScript Tutorial.\nDestructuring in React Components\nDestructuring is particularly useful in React for working with props, hooks, and API responses. It helps make your code more concise and easier to read.\nProps Destructuring\nWhen a component receives props, you can use destructuring to extract the values you need.\nCheck out the difference between using and not using destructuring:\nLet's see a working example:\nExample\nUsing destructuring to extract props:\nTry it Yourself »\nuseState Hook Destructuring\nWhen a component uses the useState hook, we use destructuring to extract the values from it.\nExample\nUsing destructuring to extract values from useState:\nTry it Yourself »",
      "examples": [
        "const vehicles = ['mustang', 'f-150', 'expedition']; // old way const car = vehicles[0]; const truck = vehicles[1]; const suv = vehicles[2]; //You can now access each variable separately: document.getElementById('demo').innerHTML = truck;",
        "const vehicles = ['mustang', 'f-150', 'expedition']; const [car, truck, suv] = vehicles; //You can now access each variable separately: document.getElementById('demo').innerHTML = truck;",
        "const vehicles = ['mustang', 'f-150', 'expedition']; const [car,, suv] = vehicles;",
        "function dateInfo(dat) { const d = dat.getDate(); const m = dat.getMonth() + 1; const y = dat.getFullYear(); return [d, m, y]; } const [date, month, year] = dateInfo(new Date());",
        "const person = { firstName: \"John\", lastName: \"Doe\", age: 50 }; // Destructuring let {firstName, lastName, age} = person; //You can now access each variable separately: document.getElementById(\"demo\").innerHTML = firstName;",
        "const person = { firstName: \"John\", lastName: \"Doe\", age: 50 }; // Destructuring let {lastName, age, firstName} = person;",
        "const person = { firstName: \"John\", lastName: \"Doe\", age: 50 }; // Destructuring let {firstName} = person;",
        "const person = { firstName: \"John\", lastName: \"Doe\", age: 50 }; // Destructuring let {firstName, lastName, age, country = \"Norway\"} = person;",
        "const person = { firstName: \"John\", lastName: \"Doe\", age: 50, car: { brand: 'Ford', model: 'Mustang', } }; // Destructuring let {firstName, car: { brand, model }} = person; let message = `My name is ${firstName}, and I drive a ${brand} ${model}.`;",
        "//Using destructuring: function Greeting({ name, age }) { return <h1>Hello, {name}! You are {age} years old.</h1>; }",
        "//NOT using destructuring: function Greeting(props) { return <h1>Hello, {props.name}! You are {props.age} years old.</h1>; }",
        "import { createRoot } from 'react-dom/client' function Greeting({ name, age }) { return <h1>Hello, {name}! You are {age} years old.</h1>; } createRoot(document.getElementById('root')).render( <Greeting name=\"John\" age={25} /> );",
        "import { createRoot, useState } from 'react-dom/client' function Counter() { // Destructuring the array returned by useState const [count, setCount] = useState(0); return ( <button onClick={() => setCount(count + 1)}> Count: {count} </button> ); } createRoot(document.getElementById('root')).render( <Counter /> );"
      ]
    },
    {
      "title": "React ES6 Spread Operator",
      "summary": "Spread Operator\nThe JavaScript spread operator (...) allows us to quickly copy all or part of an existing array or object into another array or object.\nExampleGet your own React.js Server\nTry it Yourself »\nThe spread operator is often used in combination with destructuring.\nExample\nAssign the first and second items from numbers to variables and put the rest in an array:\nTry it Yourself »\nWe can use the spread operator with objects too:\nExample\nCombine these two objects:\nTry it Yourself »\nNotice that the properties that did not match were added, and the property that did match was overwritten by the last object.",
      "examples": [
        "const numbersOne = [1, 2, 3]; const numbersTwo = [4, 5, 6]; const numbersCombined = [...numbersOne, ...numbersTwo];",
        "const numbers = [1, 2, 3, 4, 5, 6]; const [one, two, ...rest] = numbers;",
        "const car = { brand: 'Ford', model: 'Mustang', color: 'red' } const car_more = { type: 'car', year: 2021, color: 'yellow' } const mycar = {...car, ...car_more}",
        "...",
        "numbers"
      ]
    },
    {
      "title": "React ES6 Modules",
      "summary": "Modules\nJavaScript modules allow you to break up your code into separate files.\nThis makes it easier to maintain the code-base.\nES Modules rely on the import and export statements.\nExport\nYou can export a function or variable from any file.\nLet us create a file named person.js, and fill it with the things we want to export.\nThere are two types of exports: Named and Default.\nNamed Exports\nYou can create named exports two ways:\nExampleGet your own React.js Server\nIn-line individually:\nExample\nAll at once at the bottom:\nREMOVE ADS\nDefault Exports\nLet us create another file, named message.js, and use it for demonstrating default export.\nYou can only have one default export in a file.\nExample\nInsert the following code into the newly created file:\nImport\nYou can import modules into a file in two ways, based on if they are named exports or default exports.\nNamed exports must be destructured using curly braces. Default exports do not.\nExample\nImport named exports from the file person.js:\nTry it Yourself »\nExample\nImport a default export from the file message.js:\nTry it Yourself »",
      "examples": [
        "export const name = \"Tobias\" export const age = 18",
        "const name = \"Tobias\" const age = 18 export { name, age }",
        "const message = () => { const name = \"Tobias\"; const age = 18; return name + ' is ' + age + 'years old.'; }; export default message;",
        "import { name, age } from \"./person.js\";",
        "import message from \"./message.js\";",
        "import",
        "export",
        "person.js",
        "message.js"
      ]
    },
    {
      "title": "React ES6 Ternary Operator",
      "summary": "Ternary Operator\nThe ternary operator is a simplified conditional operator like if / else.\nSyntax: condition ? <expression if true> : <expression if false>\nHere is an example using if / else:\nExampleGet your own React.js Server\nBefore:\nTry it Yourself »\nHere is the same example using a ternary operator:\nExample\nWith Ternary\nTry it Yourself »",
      "examples": [
        "if (authenticated) { renderApp(); } else { renderLogin(); }",
        "authenticated ? renderApp() : renderLogin();",
        "if",
        "else",
        "condition ? <expression if true> : <expression if false>"
      ]
    },
    {
      "title": "React ES6 Template Strings",
      "summary": "Template Strings\nTemplate strings allow you to write strings that span multiple lines and include embedded expressions:\nExampleGet your own React.js Server\nBefore:\nTry it Yourself »\nExample\nWith Template Strings:\nTry it Yourself »\nTemplate strings use backticks (`) instead of quotes and can include:\nMultiple lines without \\n\nExpressions inside ${}\nQuotes without escaping\nExample\nMulti-line Strings:\nTry it Yourself »\nNote: The indentation in multi-line strings becomes part of the string.\nExample\nThe indentation becomes part of the string:\nTry it Yourself »\nExpression Interpolation\nYou can include any valid JavaScript expression inside ${} in a template string:\nExample\nInsert variables inside template strings:\nTry it Yourself »\nExample\nInsert expressions inside template strings:\nTry it Yourself »\nExample\nUsing the map function inside template strings:\nTry it Yourself »\nExample\nUsing ternery operator inside template strings:\nTry it Yourself »\nTagged Templates\nYou can also use template strings with a function (called a tag) to modify the output.\nNote: Tagged templates are an advanced feature. You might not need them in most cases.\nThe function takes the text and the expression(s) as arguments.\nLook at the example below:\nExample\nTagged Template:\nTry it Yourself »\nExample Explained\nThe function name is highlight, you can name it whatever you want.\nThe first argument holds the text between the expressions, as an array.\nThe array items are splitted by the expression.\nIn this example strings[0] holds \"Hello \" and strings[1] holds \" how are you?\".\nThe second argument holds the expressions. In this example fname holds \"John\".\nInside the function you can use the arguments to create the final string, and return it.\nNote: If the template string contains multiple expressions, the text will still be held in the first argument, but the expressions will either be held in multiple arguments, or as an array in the second argument.\nExample\nTagged Template with multiple expressions:\nTry it Yourself »\nExample\nTagged Template with multiple expressions that are held in an array using the rest parameter:\nTry it Yourself »",
      "examples": [
        "const name = \"John\"; const age = 30; const message = \"Hello, \" + name + \"!\\n\" + \"You are \" + age + \" years old.\";",
        "const name = \"John\"; const age = 30; const message = `Hello, ${name}! You are ${age} years old.`;",
        "const html = ` <div> <h1>Title</h1> <p>Paragraph</p> </div> `;",
        "const x = ` John: Hello, how are you? Jane: I'm fine, thanks! `;",
        "let firstName = \"John\"; let lastName = \"Doe\"; let text = `Welcome ${firstName}, ${lastName}!`;",
        "let price = 10; let quantity = 5; let total = `Total: ${price * quantity}`;",
        "const items = [\"apple\", \"banana\", \"orange\"]; const list = `You have ${items.length} items: ${items.map(item => `- ${item}`).join('\\n')}`;",
        "const isAdmin = true; const message = `Status: ${isAdmin ? 'Admin' : 'User'}`;",
        "function highlight(strings, fname) { let x = fname.toUpperCase(); return strings[0] + x + strings[1]; } let name = \"John\"; let text = highlight`Hello ${name}, how are you?`;",
        "function highlight(strings, fname1, fname2) { let x = fname1.toUpperCase(); let y = fname2.toUpperCase(); return strings[0] + x + strings[1] + y + strings[2]; } let name1 = \"John\"; let name2 = \"Jane\"; let text = highlight`Hello ${name1} and ${name2}, how are you?`;",
        "function highlight(strings, ...fname) { let x = fname[0].toUpperCase(); let y = fname[1].toUpperCase(); return strings[0] + x + strings[1] + y + strings[2]; } let name1 = \"John\"; let name2 = \"Jane\"; let text = highlight`Hello ${name1} and ${name2}, how are you?`;",
        "${}",
        "map",
        "highlight",
        "strings[0]",
        "strings[1]",
        "fname"
      ]
    },
    {
      "title": "React JSX",
      "summary": "What is JSX?\nJSX stands for JavaScript XML.\nJSX allows us to write HTML in React.\nJSX makes it easier to write and add HTML in React.\nCoding JSX\nJSX allows us to write HTML elements in JavaScript and place them in the DOM without any createElement()  and/or appendChild() methods.\nJSX converts HTML tags into react elements.\nYou are not required to use JSX, but JSX makes it easier to write React applications.\nHere are two examples. The first uses JSX and the second does not:\nExample 1Get your own React.js Server\nJSX:\nRun Example »\nExample 2\nWithout JSX:\nRun Example »\nAs you can see in the first example, JSX allows us to write HTML directly within the JavaScript code.\nJSX is an extension of the JavaScript language based on ES6, and is translated into regular JavaScript at runtime.\nREMOVE ADS\nExpressions in JSX\nWith JSX you can write expressions inside curly braces { }.\nThe expression can be a React variable, or property, or any other valid JavaScript expression. JSX will execute the expression and return the result:\nExample\nExecute the expression 5 + 5:\nRun Example »\nInserting a Large Block of HTML\nTo write HTML on multiple lines, put the HTML inside parentheses:\nExample\nCreate a list with three list items:\nRun Example »\nOne Top Level Element\nThe HTML code must be wrapped in ONE top level element.\nSo if you like to write two paragraphs, you must put them inside a parent element, like a div element.\nExample\nWrap two paragraphs inside one DIV element:\nRun Example »\nJSX will throw an error if the HTML is not correct, or if the HTML misses a parent element.\nAlternatively, you can use a \"fragment\" to wrap multiple lines. This will prevent unnecessarily adding extra nodes to the DOM.\nA fragment looks like an empty HTML tag: <></>.\nExample\nWrap two paragraphs inside a fragment:\nRun Example »\nElements Must be Closed\nJSX follows XML rules, and therefore HTML elements must be properly closed.\nExample\nClose empty elements with />\nRun Example »\nJSX will throw an error if the HTML is not properly closed.\nAttribute class = className\nThe class attribute is a much used attribute in HTML, but since JSX is rendered as JavaScript, and the class keyword is a reserved word in JavaScript, you are not allowed to use it in JSX.\nUse attribute className instead.\nJSX solved this by using className instead. When JSX is rendered, it translates className attributes into class attributes.\nExample\nUse attribute className instead of class in JSX:\nRun Example »\nComments in JSX\nComments in JSX are written with {/* */}\nExample\nComments in JSX:\nRun Example »\nJSX in React Components\nReact uses components to build UIs. Components are independent and reusable bits of code.\nReact components are like JavaScript functions, and return HTML.\nJSX works perfect inside React components\nExample\nJSX in Components:\nRun Example »\nInside the components, you can do some other operations before returning the HTML:\nExample\nJSX in Components:\nRun Example »",
      "examples": [
        "const myElement = <h1>I Love JSX!</h1>; createRoot(document.getElementById('root')).render( myElement );",
        "const myElement = React.createElement('h1', {}, 'I do not use JSX!'); createRoot(document.getElementById('root')).render( myElement );",
        "const myElement = <h1>React is {5 + 5} times better with JSX</h1>;",
        "const myElement = ( <ul> <li>Apples</li> <li>Bananas</li> <li>Cherries</li> </ul> );",
        "const myElement = ( <div> <p>I am a paragraph.</p> <p>I am a paragraph too.</p> </div> );",
        "const myElement = ( <> <p>I am a paragraph.</p> <p>I am a paragraph too.</p> </> );",
        "const myElement = <input type=\"text\" />;",
        "const myElement = <h1 className=\"myclass\">Hello World</h1>;",
        "const myElement = <h1>Hello {/* Wonderful */} World </h1>;",
        "function Car() { return ( <> <h2>My Car</h2> <p>It is a Ford Mustang.</p> </> ); } createRoot(document.getElementById('root')).render( <Car /> )",
        "function Car() { const brand = \"Ford\"; const model = \"Mustang\"; return ( <> <h2>My Car</h2> <p>It is a {brand} {model}.</p> </> ); } createRoot(document.getElementById('root')).render( <Car /> )",
        "createElement()",
        "appendChild()",
        "{ }",
        "5 + 5",
        "div",
        "<></>",
        "/>",
        "class",
        "className",
        "{/* */}"
      ]
    },
    {
      "title": "React JSX Expressions",
      "summary": "One of the most powerful features of JSX is the ability to embed JavaScript expressions directly within your markup.\nExpressions\nYou can insert any valid JavaScript expression inside JSX by wrapping it in curly braces { }.\nReact will evaluate the expression and render the result in the DOM.\nExampleGet your own React.js Server\nExecute the expression 218 * 1.36:\nRun Example »\nVariables\nVariables are also valid expressions. Insert variables in JSX by wrapping it in curly braces { }.\nExample\nUse a variable inside JSX:\nRun Example »\nREMOVE ADS\nFunction Calls\nFunction calls are valid expressions. Insert function calls in JSX by wrapping it in curly braces { }.\nExample\nUse a function inside JSX:\nRun Example »\nObject Properties\nAccess object properties within JSX:\nExample\nRefer to an object property inside JSX:\nRun Example »",
      "examples": [
        "function Car() { return ( <> <h1>My car</h1> <p>It has {218 * 1.36} horsepower</p> </> ); }",
        "function Car() { const hp = 218 * 1.36; return ( <> <h1>My car</h1> <p>It has {hp} horsepower</p> </> ); }",
        "function kwtohp(kw) { return kw * 1.36; } function Car() { return ( <> <h1>My car</h1> <p>It has {kwtohp(218)} horsepower</p> </> ); }",
        "function Car() { const myobj = { name: \"Fiat\", model: \"500\", color: \"white\" }; return ( <> <h1>My car is a {myobj.color} {myobj.name} {myobj.model}</h1> </> ); }",
        "{ }",
        "218 * 1.36"
      ]
    },
    {
      "title": "React JSX Attributes",
      "summary": "JSX allows you to insert attributes into HTML elements, but there are a few important differences.\nclass = className\nThe class attribute is a much used attribute in HTML, but since JSX is rendered as JavaScript, and the class keyword is a reserved word in JavaScript, you are not allowed to use it in JSX.\nJSX solved this by using className instead. When JSX is rendered, it translates className attributes into class attributes.\nExampleGet your own React.js Server\nUse attribute className instead of class in JSX:\nRun Example »\nExpressions as Attributes\nYou can also use JavaScript expressions as attribute values. This is very useful for dynamic attributes.\nExample\nUse JavaScript expressions as attribute values:\nRun Example »\nNote that the attribute value is not wrapped in quotes, this is important when using expressions (JavaScript variables) as attribute values. If you use quotes, JSX will treat it as a string literals and not a JavaScript expression.\ncamelCase Event Attributes\nEvent attributes in JSX are written in camelCase.\nExample\nUse camelCase for event attributes:\nRun Example »\nBoolean Attributes\nIf you pass no value for an attribute, JSX treats it as true. To pass false, you must specify it as an expression.\nExample\nBoolean true in JSX, this will make the button disabled:\nRun Example »\nExample\nAlso true in JSX, this will also make the button disabled:\nRun Example »\nExample\nFalse in JSX, this will NOT make the button disabled:\nRun Example »\nThe style Attribute\nThe style attribute in JSX only accepts a JavaScript object with camelCased CSS property names, rather than a CSS string (as in HTML).\nExample\nUse the style attribute:\nRun Example »\nNotice two things about the example above.\nThe styles are stored in an object.\nStyle properties are written in camelCase, e.g. fontSize, instead of font-size.\nThis is an important difference between HTML and JSX.\nYou will learn more about CSS and styling in the React CSS Styling chapter.",
      "examples": [
        "function Car() { return ( <h1 className=\"myclass\">Hello World</h1> ); }",
        "function Car() { const x = \"myclass\"; return ( <h1 className={x}>Hello World</h1> ); }",
        "function Car() { const myfunc = () => { alert('Hello World'); }; return ( <button onClick={myfunc}>Click me</button> ); }",
        "<button onClick={myfunc} disabled>Click me</button>",
        "<button onClick={myfunc} disabled={true}>Click me</button>",
        "<button onClick={myfunc} disabled={false}>Click me</button>",
        "function Car() { const mystyles = { color: \"red\", fontSize: \"20px\", backgroundColor: \"lightyellow\", }; return ( <> <h1 style={mystyles}>My car</h1> </> ); }",
        "class",
        "className",
        "style",
        "fontSize",
        "font-size"
      ]
    },
    {
      "title": "React JSX If Statements",
      "summary": "Conditions - if statements\nReact supports if statements, but not inside JSX.\nTo be able to use conditional statements in JSX, you should put the if statements outside of the JSX, or you could use a ternary expression instead:\nWrite if statements outside of the JSX code:\nExampleGet your own React.js Server\nWrite \"Banana\" if x is less than 10, otherwise \"Apple\":\nRun Example »\nUse ternary expressions instead:\nExample\nWrite \"Banana\" if x is less than 10, otherwise \"Apple\":\nRun Example »\nNote that in order to embed a JavaScript expression inside JSX, the JavaScript must be wrapped with curly braces, {}.",
      "examples": [
        "function Fruit() { const x = 5; let y = \"Apple\"; if (x < 10) { y = \"Banana\"; } return ( <h1>{y}</h1> ); }",
        "function Fruit() { const x = 5; return ( <h1>{(x) < 10 ? \"Banana\" : \"Apple\"}</h1> ); }",
        "if",
        "x",
        "{}"
      ]
    },
    {
      "title": "React Components",
      "summary": "Components are like functions that return HTML elements.\nReact Components\nComponents are independent and reusable bits of code. They serve the same purpose as JavaScript functions, but work in isolation and return HTML.\nComponents come in two types, Class components and Function components, in this tutorial we will concentrate on Function components.\nIn older React code bases, you may find Class components primarily used.\nIt is now suggested to use Function components along with Hooks, instead of Class components.\nClass components are still supported, check the Class components section for more information.\nCreate Your First Component\nWhen creating a React component, the component's name MUST start with an upper case letter.\nReact components returns HTML code.\nExampleGet your own React.js Server\nCreate a Function component called Car\nREMOVE ADS\nRendering a Component\nNow your React application has a component called Car, which returns an <h2> element.\nTo use this component in your application, refer to it like this: <Car />\nExample\nDisplay the Car component in the \"root\" element:\nRun Example »\nProps\nArguments can be passed into a component as props, which stands for properties.\nYou send the arguments into the component as HTML attributes.\nYou will learn more about props in our React Props chapter.\nExample\nUse an attribute to pass a color to the Car component, and use it in the render function:\nRun Example »\nComponents in Components\nWe can refer to components inside other components:\nExample\nUse the Car component inside the Garage component:\nRun Example »\nRendering a Component Twice\nWe can render a component multiple times:\nExample\nUse the Car component twice inside the Garage component:\nRun Example »\nThe example above might be a bit useless, but if we change the content of the Car component, by using arguments, it makes more sense:\nExample\nUse the Car component to display two different cars:\nRun Example »\nComponents in Files\nReact is all about re-using code, and it can be a good idea to split your components into separate files.\nTo do that, create a new file in the src folder with a .jsx file extension and put the code inside it:\nNote that the filename must start with an uppercase character.\nExample\nThis is the new file, we named it Vehicle.jsx:\nTo be able to use the Car component, you have to import the Vehicle.jsx file in your application.\nExample\nNow we import the Vehicle.jsx file in the application, and we can use the Car component as if it was created here.\nRun Example »",
      "examples": [
        "function Car() { return ( <h2>Hi, I am a Car!</h2> ); }",
        "createRoot(document.getElementById('root')).render( <Car /> )",
        "function Car(props) { return ( <h2>I am a {props.color} Car!</h2> ); } createRoot(document.getElementById('root')).render( <Car color=\"red\"/> );",
        "function Car() { return ( <h2>I am a Car!</h2> ); } function Garage() { return ( <> <h1>Who lives in my Garage?</h1> <Car /> </> ); } createRoot(document.getElementById('root')).render( <Garage /> );",
        "function Car() { return ( <h2>I am a Car!</h2> ); } function Garage() { return ( <> <h1>Who lives in my Garage?</h1> <Car /> <Car /> </> ); } createRoot(document.getElementById('root')).render( <Garage /> );",
        "function Car(props) { return ( <h2>I am a {props.brand}!</h2> ); } function Garage() { return ( <> <h1>Who lives in my Garage?</h1> <Car brand=\"Ford\" /> <Car brand=\"BMW\" /> </> ); } createRoot(document.getElementById('root')).render( <Garage /> );",
        "function Car() { return ( <h2>Hi, I am a Car!</h2> ); } export default Car;",
        "import { createRoot } from 'react-dom/client' import Car from './Vehicle.jsx'; createRoot(document.getElementById('root')).render( <Car /> );",
        "Car",
        "<h2>",
        "<Car />",
        "props",
        "render",
        "Garage",
        "src",
        ".jsx",
        "Vehicle.jsx"
      ]
    },
    {
      "title": "React Class Components",
      "summary": "Before React 16.8, Class components were the only way to track state and lifecycle on a React component. Function components were considered \"state-less\".\nWith the addition of Hooks, Function components are now almost equivalent to Class components. The differences are so minor that you will probably never need to use a Class component in React.\nEven though Function components are preferred, there are no current plans on removing Class components from React.\nThis section will give you an overview of how to use Class components in React.\nFeel free to skip this section, and use Function Components instead.\nReact Components\nComponents are independent and reusable bits of code. They serve the same purpose as JavaScript functions, but work in isolation and return HTML via a render function.\nComponents come in two types, Class components and Function components, in this chapter you will learn about Class components.\nCreate a Class Component\nWhen creating a React component, the component's name must start with an upper case letter.\nThe component has to include the extends React.Component statement, this statement creates an inheritance to React.Component, and gives your component access to React.Component's functions.\nThe component also requires a render() method, this method returns HTML.\nExampleGet your own React.js Server\nCreate a Class component called Car\nNow your React application has a component called Car, which returns a <h2> element.\nTo use this component in your application, use similar syntax as normal HTML: <Car />\nExample\nDisplay the Car component in the \"root\" element:\nRun Example »\nREMOVE ADS\nComponent Constructor\nIf there is a constructor() function in your component, this function will be called when the component gets initiated.\nThe constructor function is where you initiate the component's properties.\nIn React, component properties should be kept in an object called state.\nYou will learn more about state later in this tutorial.\nThe constructor function is also where you honor the inheritance of the parent component by including the super() statement, which executes the parent component's constructor function, and your component has access to all the functions of the parent component (React.Component).\nExample\nCreate a constructor function in the Car component, and add a color property:\nUse the color property in the render function:\nExample\nRun Example »\nProps\nAnother way of handling component properties is by using props.\nProps are like function arguments, and you send them into the component as attributes.\nYou will learn more about props in the next chapter.\nExample\nUse an attribute to pass a color to the Car component, and use it in the render function:\nRun Example »\nProps in the Constructor\nIf your component has a constructor function, the props should always be passed to the constructor and also to the React.Component via the super() method.\nExample\nRun Example »\nComponents in Components\nWe can refer to components inside other components:\nExample\nUse the Car component inside the Garage component:\nRun Example »\nComponents in Files\nReact is all about re-using code, and it can be smart to insert some of your components in separate files.\nTo do that, create a new file with a .jsx file extension and put the code inside it:\nNote that the file must start by importing React (as before), and it has to end with the statement export default Car;.\nExample\nThis is the new file, we named it Vehicle.jsx:\nTo be able to use the Car component, you have to import the Vehicle.jsx file in your application.\nExample\nNow we import the Vehicle.jsx file in the application, and we can use the Car component as if it was created here.\nRun Example »\nReact Class Component State\nReact Class components have a built-in state object.\nYou might have noticed that we used state earlier in the component constructor section.\nThe state object is where you store property values that belongs to the component.\nWhen the state object changes, the component re-renders.\nCreating the state Object\nThe state object is initialized in the constructor:\nExample\nSpecify the state object in the constructor method:\nThe state object can contain as many properties as you like:\nExample\nSpecify all the properties your component need:\nUsing the state Object\nRefer to the state object anywhere in the component by using the this.state.propertyname syntax:\nExample:\nRefer to the state object in the render() method:\nRun Example »\nChanging the state Object\nTo change a value in the state object, use the this.setState() method.\nWhen a value in the state object changes, the component will re-render, meaning that the output will change according to the new value(s).\nExample:\nAdd a button with an onClick event that will change the color property:\nRun Example »\nAlways use the setState() method to change the state object, it will ensure that the component knows its been updated and calls the render() method (and all the other lifecycle methods).\nLifecycle of Components\nEach component in React has a lifecycle which you can monitor and manipulate during its three main phases.\nThe three phases are: Mounting, Updating, and Unmounting.\nMounting\nMounting means putting elements into the DOM.\nReact has four built-in methods that gets called, in this order, when mounting a component:\nconstructor()\ngetDerivedStateFromProps()\nrender()\ncomponentDidMount()\nThe render() method is required and will always be called, the others are optional and will be called if you define them.\nconstructor\nThe constructor() method is called before anything else, when the component is initiated, and it is the natural place to set up the initial state and other initial values.\nThe constructor() method is called with the props, as arguments, and you should always start by calling the super(props) before anything else, this will initiate the parent's constructor method and allows the component to inherit methods from its parent (React.Component).\nExample:\nThe constructor method is called, by React, every time you make a component:\nRun Example »\ngetDerivedStateFromProps\nThe getDerivedStateFromProps() method is called right before rendering the element(s) in the DOM.\nThis is the natural place to set the state object based on the initial props.\nIt takes state as an argument, and returns an object with changes to the state.\nThe example below starts with the favorite color being \"red\", but the getDerivedStateFromProps() method updates the favorite color based on the favcol attribute:\nExample:\nThe getDerivedStateFromProps method is called right before the render method:\nRun Example »\nrender\nThe render() method is required, and is the method that actually outputs the HTML to the DOM.\nExample:\nA simple component with a simple render() method:\nRun Example »\ncomponentDidMount\nThe componentDidMount() method is called after the component is rendered.\nThis is where you run statements that requires that the component is already placed in the DOM.\nExample:\nAt first my favorite color is red, but give me a second, and it is yellow instead:\nRun Example »\nUpdating\nThe next phase in the lifecycle is when a component is updated.\nA component is updated whenever there is a change in the component's state or props.\nReact has five built-in methods that gets called, in this order, when a component is updated:\ngetDerivedStateFromProps()\nshouldComponentUpdate()\nrender()\ngetSnapshotBeforeUpdate()\ncomponentDidUpdate()\nThe render() method is required and will always be called, the others are optional and will be called if you define them.\ngetDerivedStateFromProps\nAlso at updates the getDerivedStateFromProps method is called. This is the first method that is called when a component gets updated.\nThis is still the natural place to set the state object based on the initial props.\nThe example below has a button that changes the favorite color to blue, but since the getDerivedStateFromProps() method is called, which updates the state with the color from the favcol attribute, the favorite color is still rendered as yellow:\nExample:\nIf the component gets updated, the getDerivedStateFromProps() method is called:\nRun Example »\nshouldComponentUpdate\nIn the shouldComponentUpdate() method you can return a Boolean value that specifies whether React should continue with the rendering or not.\nThe default value is true.\nThe example below shows what happens when the shouldComponentUpdate() method returns false:\nExample:\nStop the component from rendering at any update:\nRun Example »\nExample:\nSame example as above, but this time the shouldComponentUpdate() method returns true instead:\nRun Example »\nrender\nThe render() method is of course called when a component gets updated, it has to re-render the HTML to the DOM, with the new changes.\nThe example below has a button that changes the favorite color to blue:\nExample:\nClick the button to make a change in the component's state:\nRun Example »\ngetSnapshotBeforeUpdate\nIn the getSnapshotBeforeUpdate() method you have access to the props and state before the update, meaning that even after the update, you can check what the values were before the update.\nIf the getSnapshotBeforeUpdate() method is present, you should also include the componentDidUpdate() method, otherwise you will get an error.\nThe example below might seem complicated, but all it does is this:\nWhen the component is mounting it is rendered with the favorite color \"red\".\nWhen the component has been mounted, a timer changes the state, and after one second, the favorite color becomes \"yellow\".\nThis action triggers the update phase, and since this component has a getSnapshotBeforeUpdate() method, this method is executed, and writes a message to the empty DIV1 element.\nThen the componentDidUpdate() method is executed and writes a message in the empty DIV2 element:\nExample:\nUse the getSnapshotBeforeUpdate() method to find out what the state object looked like before the update:\nRun Example »",
      "examples": [
        "class Car extends React.Component { render() { return <h2>Hi, I am a Car!</h2>; } }",
        "createRoot(document.getElementById('root')).render( <Car /> );",
        "class Car extends React.Component { constructor() { super(); this.state = {color: \"red\"}; } render() { return <h2>I am a Car!</h2>; } }",
        "class Car extends React.Component { constructor() { super(); this.state = {color: \"red\"}; } render() { return <h2>I am a {this.state.color} Car!</h2>; } }",
        "class Car extends React.Component { render() { return <h2>I am a {this.props.color} Car!</h2>; } } createRoot(document.getElementById('root')).render( <Car color=\"red\"/> );",
        "class Car extends React.Component { constructor(props) { super(props); } render() { return <h2>I am a {this.props.model}!</h2>; } } createRoot(document.getElementById('root')).render( <Car model=\"Mustang\"/> );",
        "class Car extends React.Component { render() { return <h2>I am a Car!</h2>; } } class Garage extends React.Component { render() { return ( <div> <h1>Who lives in my Garage?</h1> <Car /> </div> ); } } createRoot(document.getElementById('root')).render( <Garage /> );",
        "import React from 'react'; class Car extends React.Component { render() { return <h2>Hi, I am a Car!</h2>; } } export default Car;",
        "import { createRoot } from 'react-dom/client' import Car from './Vehicle.jsx'; createRoot(document.getElementById('root')).render( <Car /> );",
        "class Car extends React.Component { constructor(props) { super(props); this.state = {brand: \"Ford\"}; } render() { return ( <div> <h1>My Car</h1> </div> ); } }",
        "class Car extends React.Component { constructor(props) { super(props); this.state = { brand: \"Ford\", model: \"Mustang\", color: \"red\", year: 1964 }; } render() { return ( <div> <h1>My Car</h1> </div> ); } }",
        "class Car extends React.Component { constructor(props) { super(props); this.state = { brand: \"Ford\", model: \"Mustang\", color: \"red\", year: 1964 }; } render() { return ( <div> <h1>My {this.state.brand}</h1> <p> It is a {this.state.color} {this.state.model} from {this.state.year}. </p> </div> ); } }",
        "class Car extends React.Component { constructor(props) { super(props); this.state = { brand: \"Ford\", model: \"Mustang\", color: \"red\", year: 1964 }; } changeColor = () => { this.setState({color: \"blue\"}); } render() { return ( <div> <h1>My {this.state.brand}</h1> <p> It is a {this.state.color} {this.state.model} from {this.state.year}. </p> <button type=\"button\" onClick={this.changeColor} >Change color</button> </div> ); } }",
        "class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } render() { return ( <h1>My Favorite Color is {this.state.favoritecolor}</h1> ); } } createRoot(document.getElementById('root')).render( <Header /> );",
        "class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } static getDerivedStateFromProps(props, state) { return {favoritecolor: props.favcol }; } render() { return ( <h1>My Favorite Color is {this.state.favoritecolor}</h1> ); } } createRoot(document.getElementById('root')).render( <Header favcol=\"yellow\"/> );",
        "class Header extends React.Component { render() { return ( <h1>This is the content of the Header component</h1> ); } } createRoot(document.getElementById('root')).render( <Header /> );",
        "class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } componentDidMount() { setTimeout(() => { this.setState({favoritecolor: \"yellow\"}) }, 1000) } render() { return ( <h1>My Favorite Color is {this.state.favoritecolor}</h1> ); } } createRoot(document.getElementById('root')).render( <Header /> );",
        "class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } static getDerivedStateFromProps(props, state) { return {favoritecolor: props.favcol }; } changeColor = () => { this.setState({favoritecolor: \"blue\"}); } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <button type=\"button\" onClick={this.changeColor}>Change color</button> </div> ); } } createRoot(document.getElementById('root')).render( <Header favcol=\"yellow\" /> );",
        "class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } shouldComponentUpdate() { return false; } changeColor = () => { this.setState({favoritecolor: \"blue\"}); } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <button type=\"button\" onClick={this.changeColor}>Change color</button> </div> ); } } createRoot(document.getElementById('root')).render( <Header /> );",
        "class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } shouldComponentUpdate() { return true; } changeColor = () => { this.setState({favoritecolor: \"blue\"}); } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <button type=\"button\" onClick={this.changeColor}>Change color</button> </div> ); } } createRoot(document.getElementById('root')).render( <Header /> );",
        "class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } changeColor = () => { this.setState({favoritecolor: \"blue\"}); } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <button type=\"button\" onClick={this.changeColor}>Change color</button> </div> ); } } createRoot(document.getElementById('root')).render( <Header /> );",
        "class Header extends React.Component { constructor(props) { super(props); this.state = {favoritecolor: \"red\"}; } componentDidMount() { setTimeout(() => { this.setState({favoritecolor: \"yellow\"}) }, 1000) } getSnapshotBeforeUpdate(prevProps, prevState) { document.getElementById(\"div1\").innerHTML = \"Before the update, the favorite was \" + prevState.favoritecolor; } componentDidUpdate() { document.getElementById(\"div2\").innerHTML = \"The updated favorite is \" + this.state.favoritecolor; } render() { return ( <div> <h1>My Favorite Color is {this.state.favoritecolor}</h1> <div id=\"div1\"></div> <div id=\"div2\"></div> </div> ); } } createRoot(document.getElementById('root')).render( <Header /> );",
        "render",
        "extends React.Component",
        "render()",
        "Car",
        "<h2>",
        "<Car />",
        "constructor()",
        "state",
        "super()",
        "React.Component",
        "props",
        "constructor",
        "Garage",
        ".jsx",
        "export default Car;",
        "Vehicle.jsx",
        "this.state.propertyname",
        "this.setState()",
        "onClick",
        "setState()",
        "getDerivedStateFromProps()",
        "componentDidMount()",
        "super(props)",
        "favcol",
        "getDerivedStateFromProps",
        "shouldComponentUpdate()",
        "getSnapshotBeforeUpdate()",
        "componentDidUpdate()",
        "true",
        "false"
      ]
    },
    {
      "title": "React Props",
      "summary": "Props are arguments passed into React components.\nProps are passed to components via HTML attributes.\nprops stands for properties.\nReact Props\nReact Props are like function arguments in JavaScript and attributes in HTML.\nTo send props into a component, use the same syntax as HTML attributes:\nExampleGet your own React.js Server\nAdd a brand attribute to the Car element:\nThe component receives the argument as a props object:\nExample\nUse the brand attribute in the Car component:\nRun Example »\nThe name of the object is props, but you can call it anything you want.\nExample\nYou can use myobj instead of props in the component:\nRun Example »\nREMOVE ADS\nPass Multiple Properties\nYou can send as many properties as you want.\nEvery attribute is sent to the Car component as object properties.\nExample\nSend multiple properties to the Car component:\nAll properties are received in the Car component inside the props object:\nExample\nUse the property values in the Car component:\nRun Example »\nDifferent Data Types\nReact props can be of any data type, including variables, numbers, strings, objects, arrays, and more.\nStrings can be sent inside quotes as in the examples above, but numbers, variables, and objects need to be sent inside curly brackets.\nExample\nNumbers has to be sent inside curly brackets to be treated as numbers:\nRun Example »\nExample\nVariables has to be sent inside curly brackets:\nRun Example »\nExample\nObjects and Arrays has to be sent inside curly brackets:\nRun Example »\nObject Props\nThe component treats objects like objects, and you can use the dot notation to access the properties.\nExample\nUse the dot notation to access object properties:\nRun Example »\nArray Props\nArray props can be accessed using the indexes.\nExample\nUse the indexes to access array properties:\nRun Example »\nPass Props from Component to Component\nAttributes are also how you pass data from one component to another, as parameters.\nExample\nSend the brand attribute from the Garage component to the Car component:\nRun Example »\nNote: React Props are read-only! You will get an error if you try to change their value.",
      "examples": [
        "createRoot(document.getElementById('root')).render( <Car brand=\"Ford\" /> );",
        "function Car(props) { return ( <h2>I am a {props.brand}!</h2> ); }",
        "function Car(myobj) { return ( <h2>I am a {myobj.brand}!</h2> ); }",
        "createRoot(document.getElementById('root')).render( <Car brand=\"Ford\" model=\"Mustang\" color=\"red\" /> );",
        "function Car(props) { return ( <h2>I am a {props.color} {props.brand} {props.model}!</h2> ); }",
        "createRoot(document.getElementById('root')).render( <Car year={1969} /> );",
        "let x = \"Ford\"; createRoot(document.getElementById('root')).render( <Car brand={x} /> );",
        "let x = [1964, 1965, 1966]; let y = {name: \"Ford\", model: \"Mustang\"}; createRoot(document.getElementById('root')).render( <Car years={x} carinfo={y} /> );",
        "function Car(props) { return ( <> <h2>My {props.carinfo.name} {props.carinfo.model}!</h2> <p>It is {props.carinfo.color} and it is from {props.carinfo.year}!</p> </> ); } const carInfo = { name: \"Ford\", model: \"Mustang\", color: \"red\", year: 1969 }; createRoot(document.getElementById('root')).render( <Car carinfo={carInfo} /> );",
        "function Car(props) { return ( <h2>My car is a {props.carinfo[0]} {props.carinfo[1]}!</h2> ); } const carInfo = [\"Ford\", \"Mustang\"]; createRoot(document.getElementById('root')).render( <Car carinfo={carInfo} /> );",
        "function Car(props) { return ( <h2>I am a {props.brand}!</h2> ); } function Garage() { return ( <> <h1>Who lives in my garage?</h1> <Car brand=\"Ford\" /> </> ); } createRoot(document.getElementById('root')).render( <Garage /> );",
        "props",
        "brand",
        "Car",
        "myobj",
        "Garage"
      ]
    },
    {
      "title": "React Destructuring Props",
      "summary": "Destructuring Props\nYou can limit the properties a component receives by using destructuring.\nExampleGet your own React.js Server\nThe component knows it only need the color property, so in the function definition, it only specifies that:\nRun Example »\nNote: React uses curly brackets to destructure props: {color}.\nYou can also destruct the properties you need inside the component.\nThis way, the component receives all the properties, but the destructuring makes sure it only uses the ones it needs.\nExample\nThe component receives all the properties, but uses destructuring to limit the properties inside the component.\nRun Example »\nREMOVE ADS\nDestructuring ...rest\nWhen you don't know how many properties you will receive, you can use the ...rest operator.\nMeaning: you can specify the properties you need, and the rest will be stored in an object.\nExample\nThe component specifies the color and the brand, but the rest is stored in an object like this:\n{ model: \"Mustang\", year: 1969 }.\nRun Example »\nDefault Values\nWith Destructuring, you can set default values for props.\nIf a property has no value, the default value will be used.\nExample\nSet the default color value to \"blue\":\nRun Example »",
      "examples": [
        "function Car({color}) { return ( <h2>My car is {color}!</h2> ); } createRoot(document.getElementById('root')).render( <Car brand=\"Ford\" model=\"Mustang\" color=\"red\" year={1969} /> );",
        "function Car(props) { const {brand, model} = props; return ( <h2>I love my {brand} {model}!</h2> ); } createRoot(document.getElementById('root')).render( <Car brand=\"Ford\" model=\"Mustang\" color=\"red\" year={1969} /> );",
        "function Car({color, brand, ...rest}) { return ( <h2>My {brand} {rest.model} is {color}!</h2> ); } createRoot(document.getElementById('root')).render( <Car brand=\"Ford\" model=\"Mustang\" color=\"red\" year={1969} /> );",
        "function Car({color = \"blue\", brand}) { return ( <h2>My {color} {brand}!</h2> ); } createRoot(document.getElementById('root')).render( <Car brand=\"Ford\" /> );",
        "color",
        "{color}",
        "...rest",
        "{ model: \"Mustang\", year: 1969 }"
      ]
    },
    {
      "title": "React Props Children",
      "summary": "Props Children\nIn React, you can send the content between the opening and closing tags of a component, to another component.\nThis can be accessed in the other component using the props.children property.\nExampleGet your own React.js Server\nFrom the Parent component, send the content between the opening and closing tags of the Son and Daughter components:\nRun Example »",
      "examples": [
        "function Son(props) { return ( <div style={{background: 'lightgreen'}}> <h2>Son</h2> <div>{props.children}</div> </div> ); } function Daughter(props) { const {brand, model} = props; return ( <div style={{background: 'lightblue'}}> <h2>Daughter</h2> <div>{props.children}</div> </div> ); } function Parent() { return ( <div> <h1>My two Children</h1> <Son> <p> This was written in the Parent component, but displayed as a part of the Son component </p> </Son> <Daughter> <p> This was written in the Parent component, but displayed as a part of the Daughter component </p> </Daughter> </div> ); } createRoot(document.getElementById('root')).render( <Parent /> );",
        "props.children",
        "Parent",
        "Son",
        "Daughter"
      ]
    },
    {
      "title": "React Events",
      "summary": "Just like HTML DOM events, React can perform actions based on user events.\nReact has the same events as HTML: click, change, mouseover etc.\nAdding Events\nReact events are written in camelCase syntax:\nonClick instead of onclick.\nReact event handlers are written inside curly braces:\nonClick={shoot}  instead of onclick=\"shoot()\".\nReact:Get your own React.js Server\nHTML:\nExample:\nPut the shoot function inside the Football component:\nRun Example »\nREMOVE ADS\nPassing Arguments\nTo pass an argument to an event handler, use an arrow function.\nExample:\nSend \"Goal!\" as a parameter to the shoot function, using arrow function:\nRun Example »\nReact Event Object\nEvent handlers have access to the React event that triggered the function.\nIn our example the event is the \"click\" event.\nExample:\nArrow Function: Sending the event object manually:\nRun Example »\nThis will come in handy when we look at Form in a later chapter.",
      "examples": [
        "<button onClick={shoot}>Take the Shot!</button>",
        "<button onclick=\"shoot()\">Take the Shot!</button>",
        "function Football() { const shoot = () => { alert(\"Great Shot!\"); } return ( <button onClick={shoot}>Take the shot!</button> ); } createRoot(document.getElementById('root')).render( <Football /> );",
        "function Football() { const shoot = (a) => { alert(a); } return ( <button onClick={() => shoot(\"Goal!\")}>Take the shot!</button> ); } createRoot(document.getElementById('root')).render( <Football /> );",
        "function Football() { const shoot = (a, b) => { alert(b.type); /* 'b' represents the React event that triggered the function, in this case the 'click' event */ } return ( <button onClick={(event) => shoot(\"Goal!\", event)}>Take the shot!</button> ); } createRoot(document.getElementById('root')).render( <Football /> );",
        "onClick",
        "onclick",
        "onClick={shoot}",
        "onclick=\"shoot()\"",
        "shoot",
        "Football"
      ]
    },
    {
      "title": "React Conditional Rendering",
      "summary": "In React, you can conditionally render components.\nThere are several ways to do this.\nif Statement\nWe can use the if JavaScript operator to decide which component to render.\nExample:Get your own React.js Server\nWe'll use these two components:\nExample:\nNow, we'll create another component that chooses which component to render based on a condition:\nRun Example »\nTry changing the isGoal attribute to true:\nExample:\nRun Example »\nREMOVE ADS\nLogical && Operator\nAnother way to conditionally render a React component is by using the && operator.\nIn the example below, the heading will only be rendered if the props.brand property is not empty:\nExample:\nThe right side of && will only be rendered if the left side is true:\nRun Example »\nIf props.brand evaluates to true, the expression after && will render.\nTry emptying the brand property:\nExample:\nRun Example »\nTernary Operator\nAnother way to conditionally render elements is by using a ternary operator.\nWe will go back to the goal example.\nExample:\nReturn the MadeGoal component if isGoal is true, otherwise return the MissedGoal component:\nRun Example »\nTo learn more, see the ternary operator section.",
      "examples": [
        "function MissedGoal() { return <h1>MISSED!</h1>; } function MadeGoal() { return <h1>Goal!</h1>; }",
        "function Goal(props) { const isGoal = props.isGoal; if (isGoal) { return <MadeGoal/>; } return <MissedGoal/>; } createRoot(document.getElementById('root')).render( <Goal isGoal={false} /> );",
        "createRoot(document.getElementById('root')).render( <Goal isGoal={true} /> );",
        "function Car(props) { return ( <> {props.brand && <h1>My car is a {props.brand}!</h1>} </> ); } createRoot(document.getElementById('root')).render( <Car brand=\"Ford\" /> );",
        "createRoot(document.getElementById('root')).render( <Car /> );",
        "condition ? true : false",
        "function Goal(props) { const isGoal = props.isGoal; return ( <> { isGoal ? <MadeGoal/> : <MissedGoal/> } </> ); } createRoot(document.getElementById('root')).render( <Goal isGoal={false} /> );",
        "if",
        "isGoal",
        "true",
        "&&",
        "props.brand",
        "brand",
        "MadeGoal",
        "MissedGoal"
      ]
    },
    {
      "title": "React Lists",
      "summary": "In React, you will render lists with some type of loop.\nThe JavaScript map() array method is generally the preferred method.\nIf you need a refresher on the map() method, check out the ES6 Array map() section.\nExample:Get your own React.js Server\nLet's create a simple list using the map() method:\nRun Example »\nWhen you run this code in your React environment, it will work but you will receive a warning that there is no \"key\" provided for the list items.\nREMOVE ADS\nKeys in React Lists\nKeys allow React to keep track of elements. This way, if an item is updated or removed, only that item will be re-rendered instead of the entire list.\nKeys must be unique among siblings, but they don't have to be unique across the entire application.\nGenerally, the key should be a unique ID assigned to each item. As a last resort, you can use the array index as a key.\nExample:\nHere the example from above, with keys:\nRun Example »\nUsing Array Index as Keys\nWhile it's possible to use the array index as a key, it's not recommended unless:\nThe list is static (won't change)\nThe list will never be reordered or filtered\nThe items in the list have no IDs\nExample:\nUsing array indexes as keys (not recommended for dynamic lists):\nRun Example »",
      "examples": [
        "function MyCars() { const cars = ['Ford', 'BMW', 'Audi']; return ( <> <h1>My Cars:</h1> <ul> {cars.map((car) => <li>I am a { car }</li>)} </ul> </> ); } createRoot(document.getElementById('root')).render( <MyCars /> );",
        "function MyCars() { const cars = [ {id: 1001, brand: 'Ford'}, {id: 1002, brand: 'BMW'}, {id: 1003, brand: 'Audi'} ]; return ( <> <h1>My Cars:</h1> <ul> {cars.map((car) => <li key={car.id}>I am a { car.brand }</li>)} </ul> </> ); } createRoot(document.getElementById('root')).render( <MyCars /> );",
        "function MyCars() { const cars = ['Ford', 'BMW', 'Audi']; return ( <> <h1>My Cars:</h1> <ul> {cars.map((car, index) => <li key={index}>I am a { car }</li>)} </ul> </> ); } createRoot(document.getElementById('root')).render( <MyCars /> );",
        "map()"
      ]
    },
    {
      "title": "React Forms",
      "summary": "Just like in HTML, React uses forms to allow users to interact with the web page.\nAdding Forms in React\nYou add a form with React like any other element:\nExample:Get your own React.js Server\nAdd a form that allows users to enter their name:\nRun Example »\nThis will work as normal, the form will submit and the page will refresh.\nBut this is generally not what we want to happen in React.\nWe want to prevent this default behavior and let React control the form.\nHTML Forms vs. React Forms\nIn React, form elements like <input>, <textarea>, and <select> work a bit differently from traditional HTML.\nIn standard HTML, form elements maintain their own value based on user input.\nFor example, an <input type=\"text\"> field keeps track of its own value in the HTML DOM.\nIn React, the value of the form element is kept in the component's state property and updated only with the setState() function.\nIn other words; React provides a way to manage form data through component state, leading to what are known as \"controlled components.\"\nREMOVE ADS\nControlled Components\nIn a controlled component, form data is handled by the React component.\nThe value of the input element is driven by the React state, and any changes to that value are managed through event handlers that update the state.\nWhen the data is handled by the components, all the data is stored in the component state.\nWe can use the useState Hook to keep track of each input value and provide a \"single source of truth\" for the entire application.\nSee the React Hooks section for more information on Hooks.\nExample:\nUse the useState Hook to manage the input:\nRun Example »\nExample Explained:\n1. Import the useState Hook from React:\n2. Declare a state variable to hold the input's value and a function to update it:\n3. Create a function to handle the change event:\n4. Set the value of the input field to the state variable and the onChange attribute to handle the change event:\n5. Display the current value to show that the value is being updated:\nInitial Values\nTo add an initial value to the input field in the example above, add a value to the useState object:\nExample:\nUse initial value for name:\nRun Example »",
      "examples": [
        "function MyForm() { return ( <form> <label>Enter your name: <input type=\"text\" /> </label> </form> ) } createRoot(document.getElementById('root')).render( <MyForm /> );",
        "import { useState } from 'react'; import { createRoot } from 'react-dom/client'; function MyForm() { const [name, setName] = useState(\"\"); function handleChange(e) { setName(e.target.value); } return ( <form> <label>Enter your name: <input type=\"text\" value={name} onChange={handleChange} /> </label> <p>Current value: {name}</p> </form> ) } createRoot(document.getElementById('root')).render( <MyForm /> );",
        "function MyForm() { const [name, setName] = useState(\"John\"); ...",
        "import { useState } from 'react';",
        "const [name, setName] = useState(\"\");",
        "function handleChange(e) { setName(e.target.value); }",
        "<input type=\"text\" value={name} onChange={handleChange} />",
        "<p>Current value: {name}</p>",
        "<input>",
        "<textarea>",
        "<select>",
        "<input type=\"text\">",
        "state",
        "setState",
        "useState"
      ]
    },
    {
      "title": "React Submit Forms",
      "summary": "Submitting Forms\nYou can control the submit action by adding an event handler in the onSubmit attribute for the <form>:\nExample:Get your own React.js Server\nAdd a submit button and an event handler in the onSubmit attribute:\nRun Example »",
      "examples": [
        "import { useState } from 'react'; import { createRoot } from 'react-dom/client'; function MyForm() { const [name, setName] = useState(\"\"); function handleChange(e) { setName(e.target.value); } function handleSubmit(e) { e.preventDefault(); alert(name); } return ( <form onSubmit={handleSubmit}> <label>Enter your name: <input type=\"text\" value={name} onChange={handleChange} /> </label> <input type=\"submit\" /> </form> ) } createRoot(document.getElementById('root')).render( <MyForm /> );",
        "onSubmit",
        "<form>"
      ]
    },
    {
      "title": "React Forms - Textarea",
      "summary": "Textarea\nThe textarea element in React is slightly different from ordinary HTML.\nIn HTML the value of a textarea is the text between the start tag <textarea> and the end tag </textarea>.\nIn React the value of a textarea is placed in a value attribute, just like with the input element.\nWe'll use the useState Hook to manage the value of the textarea:\nExample:Get your own React.js Server\nReact uses the value attribute to control the textarea:\nRun Example »\nBy making these changes to the <textarea> element, React is able to handle it as any other input element.",
      "examples": [
        "<textarea> Content of the textarea. </textarea>",
        "import { createRoot } from 'react-dom/client' import { useState } from 'react' function MyForm() { const [mytxt, setMytxt] = useState(\"\"); function handleChange(e) { setMytxt(e.target.value); } return ( <form> <label>Write here: <textarea value={mytxt} onChange={handleChange} /> </label> <p>Current value: {mytxt}</p> </form> ) } createRoot(document.getElementById('root')).render( <MyForm /> );",
        "<textarea>",
        "</textarea>",
        "useState"
      ]
    },
    {
      "title": "React Forms - Select",
      "summary": "Select\nA drop down list, or a select box, in React is also a bit different from HTML.\nIn HTML, the selected value in the drop down list is defined with the selected attribute:\nHTML:Get your own React.js Server\nIn React, the selected value is defined with a value attribute on the select tag:\nExample:\nReact uses the value attribute to control the select box:\nRun Example »\nBy making these changes to the <select> element, React is able to handle it as any other input element.",
      "examples": [
        "<select> <option value=\"Ford\">Ford</option> <option value=\"Volvo\" selected>Volvo</option> <option value=\"Fiat\">Fiat</option> </select>",
        "function MyForm() { const [myCar, setMyCar] = useState(\"Volvo\"); const handleChange = (event) => { setMyCar(event.target.value) } return ( <form> <select value={myCar} onChange={handleChange}> <option value=\"Ford\">Ford</option> <option value=\"Volvo\">Volvo</option> <option value=\"Fiat\">Fiat</option> </select> </form> ) }",
        "selected",
        "value",
        "select",
        "<select>"
      ]
    },
    {
      "title": "React Forms - Multiple Input Fields",
      "summary": "Handling Multiple Inputs\nWhen you have multiple controlled input fields in a form, you can manage their state either by:\n1. Using a separate useState call for each input.\n2. Using a single useState call with an object to hold all form field values.\nWe will use the second approach, as it is more common for forms.\nMake sure each input field has a unique name attribute.\nAlso, when initializing the state, use an object instead of a string. If the input fields have no initial value, use an empty object.\nExample:Get your own React.js Server\nUse the useState Hook to manage the input:\nRun Example »\nExample Explained:\nThe first thing to notice is that when using a single useState call, we use an object to hold any initial values. In this case, with no initial values, we use an empty object:\nNext, the handleChange function is updated to handle multiple input fields.\nIn the function, we access the input fields in the event handler using the e.target.name and e.target.value syntax.\nTo update the state, use square brackets [bracket notation] around the property name.\nWhen refering to input values, we add the name of the state object, inputs, as well as the name of the input field:\nInitial Values\nTo add initial values to the input fields in the example above, add the proper keys and values to the useState object:\nExample:\nUse initial values for firstname and lastname:\nRun Example »",
      "examples": [
        "import { useState } from 'react'; import { createRoot } from 'react-dom/client'; function MyForm() { const [inputs, setInputs] = useState({}); const handleChange = (e) => { const name = e.target.name; const value = e.target.value; setInputs(values => ({...values, [name]: value})) } return ( <form> <label>First name: <input type=\"text\" name=\"firstname\" value={inputs.firstname} onChange={handleChange} /> </label> <label>Last name: <input type=\"text\" name=\"lastname\" value={inputs.lastname} onChange={handleChange} /> </label> <p>Current values: {inputs.firstname} {inputs.lastname}</p> </form> ) } createRoot(document.getElementById('root')).render( <MyForm /> );",
        "function MyForm() { const [inputs, setInputs] = useState({ firstname: 'John', lastname: 'Doe' }); ...",
        "const [inputs, setInputs] = useState({});",
        "function handleChange(e) { const name = e.target.name; const value = e.target.value; setInputs(values => ({...values, [name]: value})) }",
        "<input type=\"text\" name=\"firstname\" value={inputs.firstname} onChange={handleChange} /> <input type=\"text\" name=\"lastname\" value={inputs.lastname} onChange={handleChange} /> <p>Current values: {inputs.firstname} {inputs.lastname}</p>",
        "useState",
        "e.target.name",
        "e.target.value",
        "inputs"
      ]
    },
    {
      "title": "React Forms - Checkbox",
      "summary": "Checkbox\nFor checkboxes, use the checked attribute instead of value to control its state.\nWe'll use the useState Hook to manage the value of the textarea:\nIn the handleChange function, use the e.target.type property check if the current input is a checkbox or not.\nExample:Get your own React.js Server\nReact uses the checked attribute to control the checkbox:\nRun Example »\nInitial Values\nTo add initial values to the input fields in the example above, add the proper keys and values to the useState object:\nExample:\nUse initial values for the input fields:\nRun Example »",
      "examples": [
        "import { useState } from 'react'; import { createRoot } from 'react-dom/client'; function MyForm() { const [inputs, setInputs] = useState({}); const handleChange = (e) => { const target = e.target; const value = target.type === 'checkbox' ? target.checked : target.value; const name = target.name; setInputs(values => ({...values, [name]: value})) } const handleSubmit = (event) => { let fillings = ''; if (inputs.tomato) fillings += 'tomato'; if (inputs.onion) { if (inputs.tomato) fillings += ' and '; fillings += 'onion'; } if (fillings == '') fillings = 'no fillings'; alert(`${inputs.firstname} wants a burger with ${fillings}`); event.preventDefault(); }; return ( <form onSubmit={handleSubmit}> <label>My name is: <input type=\"text\" name=\"firstname\" value={inputs.firstname} onChange={handleChange} /> </label> <p>I want a burger with:</p> <label>Tomato: <input type=\"checkbox\" name=\"tomato\" checked={inputs.tomato} onChange={handleChange} /> </label> <label>Onion: <input type=\"checkbox\" name=\"onion\" checked={inputs.onion} onChange={handleChange} /> </label> <button type=\"submit\">Submit </form> ) } createRoot(document.getElementById('root')).render( <MyForm /> );",
        "function MyForm() { const [inputs, setInputs] = useState({ firstname: 'John', tomato: true, onion: false }); ...",
        "checked",
        "value",
        "useState",
        "handleChange",
        "e.target.type"
      ]
    },
    {
      "title": "React Forms - Radio",
      "summary": "Radio\nRadio buttons are typically used in groups where only one option can be selected.\nAll radio buttons in a group should share the same name attribute.\nYou control radio buttons based on whether the radio button's value matches the selected value in your state.\nExample:Get your own React.js Server\nReact uses the checked attribute to control the radio button:\nRun Example »",
      "examples": [
        "import { useState } from 'react'; import { createRoot } from 'react-dom/client'; function MyForm() { const [selectedFruit, setSelectedFruit] = useState('banana'); const handleChange = (event) => { setSelectedFruit(event.target.value); }; const handleSubmit = (event) => { alert(`Your favorite fruit is: ${selectedFruit}`); event.preventDefault(); }; return ( <form onSubmit={handleSubmit}> <p>Select your favorite fruit:</p> <label> <input type=\"radio\" name=\"fruit\" value=\"apple\" checked={selectedFruit === 'apple'} onChange={handleChange} /> Apple </label> <br /> <label> <input type=\"radio\" name=\"fruit\" value=\"banana\" checked={selectedFruit === 'banana'} onChange={handleChange} /> Banana </label> <br /> <label> <input type=\"radio\" name=\"fruit\" value=\"orange\" checked={selectedFruit === 'cherry'} onChange={handleChange} /> Cherry </label> <br /> <button type=\"submit\">Submit</button> </form> ); } createRoot(document.getElementById('root')).render( <MyForm /> );",
        "checked"
      ]
    },
    {
      "title": "React Portals",
      "summary": "React Portals provide a way to render HTML outside the parent component's DOM hierarchy.\nThis is particularly useful for components like modals, tooltips, and dialogs that need to break out of their container's layout.\nWhat are React Portals?\nA Portal is a React method that is included in the react-dom package.\nIt is used to render HTML outside the parent component's DOM hierarchy.\nNormally the returned HTML element is a child of the parent component, and returned like this:\nExampleGet your own React.js Server\nWithout using the createPortal method:\nBut by using the createPortal method, the HTML is not a child of the parent component, and is rendered outside the parent component's DOM hierarchy:\nExample\nWith the createPortal method:\nSyntax\nThe first argument (children) is any renderable React content, like elements, strings, or fragments.\nThe second argument (domNode) is a DOM element where the portal should be inserted instead.\nCreating a Modal with Portal\nReact Portals are particularly useful for components like modals, tooltips, and dialogs that need to break out of their container's layout.\nHere is an example of a modal component where the modal is rendered outside the parent component's DOM hierarchy:\nExample\nRun Example »\nExample Explained\nFirst, we import the necessary functions:\ncreatePortal from react-dom - for creating the portal\nuseState from react - for managing the modal's open/close state\nThe Modal component uses createPortal to render its content directly into the document.body element.\nWhy Use Portals\nPortals are particularly useful for:\nModals and dialogs\nTooltips\nFloating menus\nNotifications\nAny UI element that needs to \"break out\" of its container's layout, especially when the parent component has:\noverflow: hidden\nz-index conflicts\nComplex positioning requirements\nEvent Bubbling in Portals\nEven though a portal renders content in a different part of the DOM tree, events from the portal content still bubble up through the React component tree as if the portal wasn't there.\nFor example, if a button inside a portal is clicked, the event will still bubble up to the parent component, and the parent component's event handler will be triggered.\nExample\nClick the button to demonstrate that both the button and the parent div element will have its onClick event triggered:\nRun Example »\nExample Explained\nIn this example:\nThe PortalButton component is rendered as a floating button fixed to the bottom-right corner of the screen using a portal\nEven though the button exists outside the parent <div> in the DOM, clicking it will:\nFirst trigger the button's own onClick handler (incrementing the counter)\nThen trigger the parent div's onClick handler\nThis demonstrates that event bubbling works through React's component hierarchy, not the DOM hierarchy",
      "examples": [
        "function myChild() { return ( <div> Welcome </div> ); }",
        "import { createPortal } from 'react-dom'; function myChild() { return createPortal( <div> Welcome </div>, document.body ); }",
        "import { createPortal } from 'react-dom'; createPortal(children, domNode)",
        "import { createRoot } from 'react-dom/client'; import { useState } from 'react'; import { createPortal } from 'react-dom'; function Modal({ isOpen, onClose, children }) { if (!isOpen) return null; return createPortal( <div style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, backgroundColor: 'rgba(0, 0, 0, 0.5)', display: 'flex', alignItems: 'center', justifyContent: 'center' }}> <div style={{ background: 'white', padding: '20px', borderRadius: '8px' }}> {children} <button onClick={onClose}>Close</button> </div> </div>, document.body ); } function MyApp() { const [isOpen, setIsOpen] = useState(false); return ( <div> <h1>My App</h1> <button onClick={() => setIsOpen(true)}> Open Modal </button> <Modal isOpen={isOpen} onClose={() => setIsOpen(false)}> <h2>Modal Content</h2> <p>This content is rendered outside the App component!</p> </Modal> </div> ); } createRoot(document.getElementById('root')).render( <MyApp /> )",
        "import { createRoot } from 'react-dom/client'; import { useState } from 'react'; import { createPortal } from 'react-dom'; function PortalButton({ onClick, children }) { return createPortal( <button onClick={onClick} style={{ position: 'fixed', bottom: '20px', right: '20px', padding: '10px', background: 'blue', color: 'white' }}> {children} </button>, document.body ); } function App() { const [count1, setCount1] = useState(0); const [count2, setCount2] = useState(0); return ( <div style={{ padding: '20px', border: '2px solid black', margin: '20px' }} onClick={() => { setCount1(c => c + 1); }}> <h2>Div Clicked: {count1}</h2> <h2>Button Clicked: {count2}</h2> <p>The floating button is rendered outside this box using a portal, but its clicks still bubble up to this parent div!</p> <p>Try to click the div element as well, to see the count increase</p> <PortalButton onClick={(e) => { // This runs first setCount2(c => c + 1); }}> Floating Button </PortalButton> </div> ); } createRoot(document.getElementById('root')).render( <App /> );",
        "react-dom",
        "createPortal",
        "children",
        "domNode",
        "useState",
        "Modal",
        "document.body",
        "overflow: hidden",
        "z-index",
        "onClick",
        "PortalButton",
        "<div>"
      ]
    },
    {
      "title": "React Suspense",
      "summary": "React Suspense lets you display an alternative HTML while waiting for code or data to load.\nThe alternative HTML can be a component, text, or any valid content.\nWhat is Suspense?\nSuspense is a React feature that lets your components display an alternative HTML while waiting for code or data to load.\nThe most common use cases are:\nData fetching with suspense-enabled frameworks\nLoading components dynamically with React.lazy()\nUsing Suspense\nIf a component takes time to load, you can use a Suspense component, and it will display the fallback content while the component is loading.\nExampleGet your own React.js Server\nThe Fruits component takes two seconds to load, so we wrap it in a Suspense component to display a loading message while it is loading.\nRun Example »\nUsing Suspense with lazy Loading\nAnother common use of the Suspense component is when importing components with lazy loading:\nIn the example above we had to fake a delay of two seconds to see the loading message. A task like displaying three fruits from an array would be too fast to see the loading message at all.\nBut with lazy loading, we can import a component dynamically, and it will display a loading message while it is loading, even if the task is very fast.\nLets first create an example WITHOUT using lazy loading, where we do not fake a two seconds delay:\nExample\nThis example is too fast to see the loading message:\nRun Example »\nNow let us create an example WITH using lazy loading:\nExample\nSame example as above, but using lazy loading:\nRun Example »\nExample Explained\nlazy() lets you load a component dynamically\nSuspense shows a fallback while the component loads\nMultiple Components\nOne Suspense component can wrap multiple lazy components:\nExample\nRun Example »",
      "examples": [
        "import { createRoot } from 'react-dom/client'; import { Suspense } from 'react'; import Fruits from './Fruits'; function App() { return ( <div> <Suspense fallback={<div>Loading...</div>}> <Fruits /> </Suspense> </div> ); } createRoot(document.getElementById('root')).render( <App /> );",
        "import { createRoot } from 'react-dom/client'; import { Suspense } from 'react'; import Cars from './Cars'; function App() { return ( <div> <Suspense fallback={<div>Loading...</div>}> <Cars /> </Suspense> </div> ); } createRoot(document.getElementById('root')).render( <App /> );",
        "import { createRoot } from 'react-dom/client'; import { Suspense, lazy } from 'react'; const Cars = lazy(() => import('./Cars')); function App() { return ( <div> <Suspense fallback={<div>Loading...</div>}> <Cars /> </Suspense> </div> ); } createRoot(document.getElementById('root')).render( <App /> );",
        "import { createRoot } from 'react-dom/client'; import { Suspense, lazy } from 'react'; const Header = lazy(() => import('./Header')); const Content = lazy(() => import('./Content')); const Sidebar = lazy(() => import('./Sidebar')); function App() { return ( <div> <Suspense fallback={<div>Loading...</div>}> <Header /> <div style={{ display: 'flex' }}> <Sidebar /> <Content /> </div> </Suspense> </div> ); } createRoot(document.getElementById('root')).render( <App /> );",
        "React.lazy()",
        "Suspense",
        "Fruits",
        "lazy",
        "lazy()"
      ]
    },
    {
      "title": "Styling React Using CSS",
      "summary": "There are many ways to style React with CSS, this tutorial will take a closer look at three common ways:\nInline styling\nCSS stylesheets\nCSS Modules\nInline Styling\nTo style an element with the inline style attribute, the value must be a JavaScript object:\nExample:Get your own React.js Server\nInsert an object with the styling information:\nRun Example »\nNote: In JSX, JavaScript expressions are written inside curly braces, and since JavaScript objects also use curly braces, the styling in the example above is written inside two sets of curly braces {{}}.\ncamelCased Property Names\nSince the inline CSS is written in a JavaScript object, properties with hyphen separators, like background-color, must be written with camel case syntax:\nExample:\nUse backgroundColor instead of background-color:\nRun Example »\nJavaScript Object\nYou can also create an object with styling information, and refer to it in the style attribute:\nExample:\nCreate a style object named myStyle:\nRun Example »\nREMOVE ADS\nCSS Stylesheet\nYou can write your CSS styling in a separate file, just save the file with the .css file extension, and import it in your application.\nExample\nCreate a new file called \"MyStylesheet.css\" and insert some CSS code in it:\nNote: You can call the file whatever you like, just remember the correct file extension.\nImport the stylesheet in your application:\nExample\nUse the import statement to import the stylesheet:\nRun Example »\nReact knows that files imported with the .css extension, should be treated as a CSS Stylesheet.\nNote: The styles will only be available for the component that imported it.\nCSS Modules\nAnother way of adding styles to your application is to use CSS Modules.\nCSS Modules are convenient for components that are placed in separate files.\nThe CSS inside a module is available only for the component that imported it, and you do not have to worry about name conflicts.\nCreate the CSS module with the .module.css extension, example: my-style.module.css.\nExample\nCreate a new file called \"my-style.module.css\" and insert some CSS code in it:\nImport the stylesheet in your component:\nExample\nUse import styles to import the stylesheet:\nRun Example »\nYou will learn more about CSS Modules in the next chapter.",
      "examples": [
        "const Header = () => { return ( <> <h1 style={{color: \"red\"}}>Hello Style!</h1> <p>Add a little style!</p> </> ); }",
        "const Header = () => { return ( <> <h1 style={{backgroundColor: \"lightblue\"}}>Hello Style!</h1> <p>Add a little style!</p> </> ); }",
        "const Header = () => { const myStyle = { color: \"white\", backgroundColor: \"DodgerBlue\", padding: \"10px\", fontFamily: \"Sans-Serif\" }; return ( <> <h1 style={myStyle}>Hello Style!</h1> <p>Add a little style!</p> </> ); }",
        "body { background-color: #282c34; color: white; padding: 40px; font-family: Sans-Serif; text-align: center; }",
        "import { createRoot } from 'react-dom/client'; import './MyStylesheet.css'; const Header = () => { return ( <> <h1>Hello Style!</h1> <p>Add a little style!.</p> </> ); } createRoot(document.getElementById('root')).render( <Header /> );",
        ".bigred { color: Tomato; padding: 40px; font-family: Sans-Serif; text-align: center; }",
        "import { createRoot } from 'react-dom/client'; import styles from './my-style.module.css'; const Car = () => { return <h1 className={styles.bigred}>Hello Car!</h1>; } createRoot(document.getElementById('root')).render( <Car /> );",
        "{{}}",
        "background-color",
        "backgroundColor",
        "myStyle",
        ".css",
        "import",
        ".module.css",
        "my-style.module.css",
        "import styles"
      ]
    },
    {
      "title": "React CSS Modules",
      "summary": "CSS Modules let you write CSS that is scoped locally to a specific component.\nThis prevents CSS class name conflicts and makes your styles more maintainable.\nWhat are CSS Modules?\nIn React, CSS Modules are CSS files where class names are scoped locally by default.\nNote: CSS Modules are not a part of the React core library, but are supported by many React build tools.\nThe CSS file have to have the .module.css extension and can be used by importing it into your React file(s).\nCreating a CSS Module\nLet's create a CSS module called Button.module.css, where we style some buttons.\nExampleGet your own React.js Server\nCreate a file named Button.module.css, and insert some styles in it:\nUsing a CSS Module\nImport and use the CSS Module in your component:\nExample\nCreate a Button component that uses the CSS Module:\nRun Example »\nExample Explained\nWe import the styles object from the CSS Module\nWe use styles.mybutton to access the mybutton class\nThe actual class name of the button will be unique (e.g., _mybutton_q1obu_1)\nMultiple Classes\nIn the example above, we only used one class, but let's add more classes:\nExample\nAdd more styles in Button.module.css:\nTo demostrate the changes, we need to have two buttons, with two classes each:\nExample\nAn example with two buttons, with different styling:\nRun Example »\nComposing Classes\nCSS Modules allow you to combine classes using the composes keyword:\nWhich means that one class can inherit the styles of another class.\nFor the previous example, both the primary and the secondary classes are depending on the styles of the mybutton class.\nThis can be done by adding composes: mybutton to the primary and secondary classes:\nExample\nNow it is enough to use the primary and secondary classes in the component:\nExample\nRun Example »\nGlobal Classes\nWhen using CSS Modules, the classes in the .module.css file can only be used in the component that imports them. This is done by prefixing the class name with a hash of the file name and a unique identifier. It is safe to use the same class name in different files, as the names will be unique.\nHowever, sometimes you want your classes to be available globally, and use them in other components.\nYou can do this with the :global syntax:\nExample\nHere is a CSS Module with a global class named .myheader:\nThe :global wrapper makes the class available for everyone.\nIt is simply called .myheader and not prefixed and added a unique identifier like _myheader_q1obu_1\nYou can use it in your components like this:\nExample\nRun Example »\nCombine Global and Local Classes\nYou can combine global and local classes in the same CSS Module:\nExample\nA CSS Module with both global and local classes:\nUse it in your components like this:\nExample\nRun Example »",
      "examples": [
        ".mybutton { padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; }",
        "import styles from './Button.module.css'; function App() { return ( <div> <button className={styles.mybutton}> My Button </button> </div> ); }",
        ".mybutton { padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; } .primary { background-color: #007bff; color: white; } .secondary { background-color: #6c757d; color: white; }",
        "import styles from './Button.module.css'; function App() { return ( <div> <button className={`${styles.mybutton} ${styles.primary}`}> My Primary Button </button> <button className={`${styles.mybutton} ${styles.secondary}`}> My Secondary Button </button> </div> ); }",
        ".mybutton { padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; } .primary { composes: mybutton; background-color: #007bff; color: white; } .secondary { composes: mybutton; background-color: #6c757d; color: white; }",
        "import styles from './Button.module.css'; function App() { return ( <div> <button className={styles.primary}> Primary Button </button> <button className={styles.secondary}> Secondary Button </button> </div> ); }",
        ":global(.myheader) { padding: 10px 20px; font-size: 50px; color: white; background-color: dodgerblue; }",
        "import styles from './BlueHeader.module.css'; function App() { return ( <div> <h1 className=\"myheader\"> My Header </h1> </div> ); }",
        ":global(.myheader) { padding: 10px 20px; font-size: 50px; color: white; background-color: dodgerblue; } .myparagraph { font-size: 20px; color: white; background-color: purple; }",
        "import styles from './MyStyles.module.css'; function App() { return ( <div> <h1 className=\"myheader\"> My Header </h1> <p className={styles.myparagraph}> My Paragraph </p> </div> ); }",
        ".module.css",
        "Button.module.css",
        "styles.mybutton",
        "mybutton",
        "_mybutton_q1obu_1",
        "composes",
        "primary",
        "secondary",
        "composes: mybutton",
        ":global",
        ".myheader",
        "_myheader_q1obu_1"
      ]
    },
    {
      "title": "React CSS-in-JS",
      "summary": "What is CSS-in-JS?\nCSS-in-JS is a styling technique where you can write CSS directly in your JavaScript code.\nThis approach allows you to:\nWrite CSS using JavaScript\nCreate component-scoped styles\nUse dynamic styles based on props\nAvoid CSS class name conflicts\nIn this tutorial, we'll use the popular styled-components library.\nGetting Started\nCSS-in-JS is not a part of the React core library, but can be installed using many React build tools, like Vite, Webpack, or Create React App.\nTo install styled-components, run the following command:\nNow you can start writing CSS directly in your .jsx files:\nExampleGet your own React.js Server\nInsert styles directly in the .jsx files:\nRun Example »\nWithout CSS-in-JS, you would have to either:\nWrite CSS in a separate .css file and import it into your React components\nUse inline styles\nNotice that:\nWe use the styled object to create components\nStyles are written inside template literals (backticks)\nYou can use regular CSS syntax\nProps in Styled Components\nAnother powerful feature of CSS-in-JS is the ability to use props to make styles dynamic.\nLet's create an example where we have two buttons, one primary and one secondary.\nWe want to base their background color on the value of the btntype prop:\nExample\nRun Example »\nExtending Styles\nAnother way of letting multiple elements have the same styles is to extend existing styled components.\nFor example, we can create a PrimaryButton and SuccessButton that both have the same styles as the Button component, but they also have separate background colors:\nExample\nRun Example »\nComponent-Scoped Styles\nJust like with CSS Modules, styles created in CSS-in-JS are scoped to the component.\nThey are given unique names and can only be used in the component that imports them.\nIf we view the source of the page in the example above, the buttons will have unique class names like bSOFjJ and pkxvl, and will be refering to the CSS with the same unique class names in the style section.\nGlobal Styles\nYou can also create global styles, which will be given normal class name and will be available for all components:\nExample\nRun Example »\nIf we view the source of the result in the example above, the CSS will have normal names and will be available for all components.",
      "examples": [
        "import styled from 'styled-components'; const MyHeader = styled.h1` padding: 10px 20px; background-color: #007bff; color: white; `; function App() { return ( <> <MyHeader>Welcome!</MyHeader> </> ); }",
        "import styled from 'styled-components'; const Button = styled.button` padding: 10px 20px; border: none; border-radius: 4px; background-color: ${props => props.btntype === 'primary' ? '#007bff' : '#6c757d'}; color: white; cursor: pointer; `; function App() { return ( <div> <Button btntype=\"primary\">Primary Button</Button> <br /> <br /> <Button>Secondary Button</Button> </div> ); }",
        "import styled from 'styled-components'; const Button = styled.button` padding: 10px 20px; border: none; border-radius: 4px; color: white; cursor: pointer; `; const PrimaryButton = styled(Button)` background-color: #007bff; `; const SuccessButton = styled(Button)` background-color: #28a745; `; function App() { return ( <div> <PrimaryButton>Primary</PrimaryButton> <SuccessButton>Success</SuccessButton> </div> ); }",
        "import { createGlobalStyle } from 'styled-components'; const GlobalStyle = createGlobalStyle` h1 { color: white; background-color: purple; font-family: Arial, sans-serif; } .myparagraph { font-family: courier, monospace; color: blue; } `; function App() { return ( <> <GlobalStyle /> <h1>Welcome!</h1> <p className=\"myparagraph\">This paragraph is styled with global styles.</p> </> ); }",
        "npm install styled-components",
        "styled-components",
        "styled",
        "btntype",
        "PrimaryButton",
        "SuccessButton",
        "Button",
        "bSOFjJ",
        "pkxvl"
      ]
    },
    {
      "title": "React Router",
      "summary": "What is React Router?\nReact Router is a library that provides routing capabilities for React applications.\nRouting means handling navigation between different views.\nReact Router is the standard routing library for React applications. It enables you to:\nCreate multiple pages in your single-page application\nHandle URL parameters and query strings\nManage browser history and navigation\nCreate nested routes and layouts\nImplement protected routes for authentication\nWithout a router, your React application would be limited to a single page with no way to navigate between different views.\nInstall React Router\nIn the command line, navigate to your project directory and run the following command to install the package:\nWrap Your App with BrowserRouter\nYour application must be wrapped with the BrowserRouter component to enable routing:\nCreate Views\nTo demonstrate routing, we'll create three pages (or views) in our application: Home, About, and Contact:\nWe will create all three views in the same file for simplicity, but you can of course split them into separate files.\nExampleGet your own React.js Server\nBasic Routing\nReact Router uses three main components for basic routing:\nLink: Creates navigation links that update the URL\nRoutes: A container for all your route definitions\nRoute: Defines a mapping between a URL path and a component\nLet's add navigation links and routes for each link:\nExample\nNote that we need to import BrowserRouter, Routes, Route, Link from 'react-router-dom'.\nRun Example »\nIn this example:\nBrowserRouter wraps your app and enables routing functionality\nLink components create navigation links\nRoutes and Route define your routing configuration\nNested Routes\nYou can have a Route inside another Route, this is called nested routes.\nNested routes allow you change parts of the page when you navigate to a new URL, while other parts is not changed or reloaded, almost like having a page within a page.\nLet's use the example above, and add two new components that will be rendered inside the Products component.\nOne called CarProducts and one called BikeProducts:\nExample\nNote that we also need to import the Outlet component from 'react-router-dom'.\nRun Example »\nImportant notes about the example above:\nOutlet:\nThe <Outlet /> element in the Products component specifies where to render the child route's content.\nRoutes:\nThe Routes element contains the routes to CarProducts and BikeProducts as child routes of the Products parent route.\nURL Structure:\nThe URL structure is relative to the parent route's path. For example:\n\nWhen you navigate to '/products/car', the CarProducts component is rendered.\nWhen you navigate to '/products/bike', the BikeProducts component is rendered.\nWhen you navigate to '/products/car', the CarProducts component is rendered.\nWhen you navigate to '/products/bike', the BikeProducts component is rendered.\nStyle Active Links\nThere is a special version of the Link component called NavLink that knows whether the link's URL is \"active\" or not.\nThe NavLink is especially useful for:\nNavigation menus\nBreadcrumbs\nTabs\nA NavLink is considered active if the current URL matches its to prop.\nThe NavLink component makes it easier to style active links.\nTake the basic example from above, and add styles for active links using NavLink:\nExample\nCreate a new element called navLinkStyles and replace <Link> with <NavLink> in App.\nNote that we also need to import the NavLink component from 'react-router-dom'.\nRun Example »\nURL Parameters\nURL parameters are variables that you can add to your route paths. They are often used to pass data between components.\nIn the path http://localhost:5173/customer/Tobias, the URL parameter is Tobias.\nURL parameters let you create dynamic routes where part of the URL can change. Think of them as variables in your URL.\nReact Router provides the useParams hook to access these parameters in your components.\nHere's a simple example with a greeting page that can say hello to different customers:\nExample\nRun Example »\nIn this example:\n:firstname in the route path is the URL parameter\nIf you visit /customer/Emil, you'll see \"Hello, Emil\"\nIf you visit /customer/Tobias, you'll see \"Hello, Tobias\"\nIf you visit /customer/Linus, you'll see \"Hello, Linus\"\nYou can use any name in the URL, and the greeting will work!, try this http://localhost:5173/customer/John",
      "examples": [
        "function App() { return ( <BrowserRouter> {/* Your app content */} </BrowserRouter> ); }",
        "function Home() { return <h1>Home Page</h1>; } function About() { return <h1>About Page</h1>; } function Contact() { return <h1>Contact Page</h1>; }",
        "import { BrowserRouter, Routes, Route, Link } from 'react-router-dom'; function Home() { return <h1>Home Page</h1>; } function About() { return <h1>About Page</h1>; } function Contact() { return <h1>Contact Page</h1>; } function App() { return ( <BrowserRouter> {/* Navigation */} <nav> <Link to=\"/\">Home</Link> |{\" \"} <Link to=\"/about\">About</Link> |{\" \"} <Link to=\"/contact\">Contact</Link> </nav> {/* Routes */} <Routes> <Route path=\"/\" element={<Home />} /> <Route path=\"/about\" element={<About />} /> <Route path=\"/contact\" element={<Contact />} /> </Routes> </BrowserRouter> ); }",
        "import { BrowserRouter, Routes, Route, Link, Outlet } from 'react-router-dom'; function Home() { return <h1>Home Page</h1>; } function Products() { return ( <div> <h1>Products Page</h1> <nav style={{ marginBottom: '20px' }}> <Link to=\"/products/car\">Cars</Link> |{\" \"} <Link to=\"/products/bike\">Bikes</Link> </nav> <Outlet /> </div> ); } function CarProducts() { return ( <div> <h2>Cars</h2> <ul> <li>Audi</li> <li>BMW</li> <li>Volvo</li> </ul> </div> ); } function BikeProducts() { return ( <div> <h2>Bikes</h2> <ul> <li>Yamaha</li> <li>Suzuki</li> <li>Honda</li> </ul> </div> ); } function Contact() { return <h1>Contact Page</h1>; } function App() { return ( <BrowserRouter> {/* Navigation */} <nav> <Link to=\"/\">Home</Link> |{\" \"} <Link to=\"/products\">Products</Link> |{\" \"} <Link to=\"/contact\">Contact</Link> </nav> {/* Routes */} <Routes> <Route path=\"/\" element={<Home />} /> <Route path=\"/products\" element={<Products />}> <Route path=\"car\" element={<CarProducts />} /> <Route path=\"bike\" element={<BikeProducts />} /> </Route> <Route path=\"/contact\" element={<Contact />} /> </Routes> </BrowserRouter> ); }",
        "import { BrowserRouter, Routes, Route, NavLink } from 'react-router-dom'; // Style function for active links const navLinkStyles = ({ isActive }) => ({ color: isActive ? '#007bff' : '#333', textDecoration: isActive ? 'none' : 'underline', fontWeight: isActive ? 'bold' : 'normal', padding: '5px 10px' }); function Home() { return <h1>Home Page</h1>; } function About() { return <h1>About Page</h1>; } function Contact() { return <h1>Contact Page</h1>; } function App() { return ( <BrowserRouter> {/* Navigation with NavLink for active styling */} <nav style={{ marginBottom: '20px' }}> <NavLink to=\"/\" style={navLinkStyles}>Home</NavLink> |{\" \"} <NavLink to=\"/about\" style={navLinkStyles}>About</NavLink> |{\" \"} <NavLink to=\"/contact\" style={navLinkStyles}>Contact</NavLink> </nav> {/* Routes */} <Routes> <Route path=\"/\" element={<Home />} /> <Route path=\"/about\" element={<About />} /> <Route path=\"/contact\" element={<Contact />} /> </Routes> </BrowserRouter> ); }",
        "import { BrowserRouter, Routes, Route, Link, useParams } from 'react-router-dom'; function Info() { const { firstname } = useParams(); return <h1>Hello, {firstname}!</h1>; } function App() { return ( <BrowserRouter> <nav> <Link to=\"/customer/Emil\">Emil</Link> | <Link to=\"/customer/Tobias\">Tobias</Link> | <Link to=\"/customer/Linus\">Linus</Link> </nav> <Routes> <Route path=\"/customer/:firstname\" element={<Info />} /> </Routes> </BrowserRouter> ); }",
        "npm install react-router-dom",
        "BrowserRouter",
        "Link",
        "Routes",
        "Route",
        "BrowserRouter, Routes, Route, Link",
        "Products",
        "CarProducts",
        "BikeProducts",
        "Outlet",
        "<Outlet />",
        "'/products/car'",
        "'/products/bike'",
        "NavLink",
        "to",
        "navLinkStyles",
        "<Link>",
        "<NavLink>",
        "App",
        "http://localhost:5173/customer/Tobias",
        "Tobias",
        "useParams",
        ":firstname",
        "/customer/Emil",
        "/customer/Tobias",
        "/customer/Linus",
        "http://localhost:5173/customer/John"
      ]
    },
    {
      "title": "React Transitions",
      "summary": "What is useTransition?\nThe useTransition hook helps you keep your React app responsive during heavy updates.\nIt lets you mark some state updates as \"non-urgent\", allowing other, more urgent updates to happen first.\nWhen to Use Transitions?\nUse transitions when you have:\nA slow operation that might freeze the UI\nUpdates that aren't immediately critical\nSearch results that take time to display\nBasic Example\nHere's a simple example showing how to use transitions in a search feature:\nExampleGet your own React.js Server\nRun Example »\nIn this example:\nThe input field updates immediately (urgent update)\nThe search results update is marked as a transition (non-urgent)\nThe loading message shows while the transition is pending\nReal-World Example\nHere's a more practical example with a slow search feature:\nExample\nRun Example »\nHow this example works:\nWhen you type in the input field, it updates immediately\nThe search results update is wrapped in startTransition\nWhile the results are updating, isPending is true\nThe UI stays responsive even with many results\nuseTransition Hook\nThe useTransition hook returns two items:\nisPending: tells you if a transition is active\nstartTransition: function to mark updates as transitions\nNote: Use transitions only for non-urgent updates. For example, typing in an input field should be urgent, but filtering a large list can be a transition.",
      "examples": [
        "import { useState, useTransition } from 'react'; function SearchBar() { const [text, setText] = useState(''); const [results, setResults] = useState(''); const [isPending, startTransition] = useTransition(); const handleChange = (e) => { // Urgent: Update input right away setText(e.target.value); // Non-urgent: Update search results startTransition(() => { setResults(e.target.value); }); }; return ( <div> <input value={text} onChange={handleChange} /> {isPending ? ( <p>Loading...</p> ) : ( <p>Search results for: {results}</p> )} </div> ); }",
        "import { useState, useTransition } from 'react'; function SearchResults({ query }) { // Simulate slow search results const items = []; if (query) { for (let i = 0; i < 1000; i++) { items.push(<li key={i}>Result for {query} - {i}</li>); } } return <ul>{items}</ul>; } function App() { const [input, setInput] = useState(''); const [query, setQuery] = useState(''); const [isPending, startTransition] = useTransition(); const handleChange = (e) => { // Urgent: Update input field setInput(e.target.value); // Non-urgent: Update search results startTransition(() => { setQuery(e.target.value); }); }; return ( <div> <input type=\"text\" value={input} onChange={handleChange} placeholder=\"Type to search...\" /> {isPending && <p>Loading results...</p>} <SearchResults query={query} /> </div> ); }",
        "useTransition",
        "startTransition",
        "isPending"
      ]
    },
    {
      "title": "React forwardRef",
      "summary": "What is forwardRef?\nforwardRef lets your component pass a reference to one of its children. It's like giving a direct reference to a DOM element inside your component.\nCommon uses for forwardRef:\nFocusing input elements\nTriggering animations\nMeasuring DOM elements\nIntegrating with third-party libraries\nBasic Example\nHere's a simple example of forwarding a ref to an input element:\nExampleGet your own React.js Server\nRun Example »\nIn this example:\nWe wrap our input component with forwardRef\nThe component receives a ref as its second parameter\nThe parent can now control the input element directly\nNote: Only use forwardRef when you need direct access to a DOM element. For most cases, you can use props and state instead.",
      "examples": [
        "import { forwardRef, useRef } from 'react'; const MyInput = forwardRef((props, ref) => ( <input ref={ref} {...props} /> )); function App() { const inputRef = useRef(); const focusInput = () => { inputRef.current.focus(); }; return ( <div> <MyInput ref={inputRef} placeholder=\"Type here...\" /> <button onClick={focusInput}>Focus Input</button> </div> ); }",
        "forwardRef",
        "ref"
      ]
    },
    {
      "title": "React Higher Order Components",
      "summary": "What is a Higher Order Component?\nA Higher Order Component (HOC) is like a wrapper that adds extra features to your React components. Think of it like putting a case on your phone - the case adds new features (like water protection) without changing the phone itself.\nNote: HOCs are functions that take a component and return an enhanced version of that component.\nExample: Adding a Border\nTo demonstrate how HOCs work, let's create a simple example - adding a border to any component:\nExampleGet your own React.js Server\nCreate a function that adds a border around whatever component you pass to it:\nRun Example »\nIn this example:\nwithBorder is our HOC - it's a function that takes a component\nIt returns a new component that wraps the original in a div with a border\nThe original component (Greeting) remains unchanged\nWe can still use both the original and enhanced versions\nNote: Often, HOC's can be replaced with React Hooks, but HOC's are still useful for certain cross-cutting concerns like authentication or data fetching patterns.",
      "examples": [
        "// This is our HOC - it adds a border to any component function withBorder(WrappedComponent) { return function NewComponent(props) { return ( <div style={{ border: '2px solid blue', padding: '10px' }}> <WrappedComponent {...props} /> </div> ); }; } // Simple component without border function Greeting({ name }) { return <h1>Hello, {name}!</h1>; } // Create a new component with border const GreetingWithBorder = withBorder(Greeting); function App() { return ( <div> <Greeting name=\"John\" /> <GreetingWithBorder name=\"Jane\" /> </div> ); }",
        "withBorder",
        "div",
        "Greeting"
      ]
    },
    {
      "title": "React Sass Styling",
      "summary": "What is Sass?\nSass is a CSS pre-processor.\nSass files are executed on the server and sends CSS to the browser.\nSass adds extra features to CSS like variables, nesting, mixins, and more.\nYou can learn more about Sass in our Sass Tutorial.\nAdding Sass to React\nTo add Sass to a React project, you need to install the Sass package:\nInstall the package using npm:\nNow you are ready to include Sass files in your project!\nCreate a Sass file\nCreate a Sass file the same way as you create CSS files, but Sass files have the file extension .scss:\nExampleGet your own React.js Server\nIn the newly created .scss file, add some simple styling:\nImport the Sass file\nImport the Sass file in your React component:\nExample\nRun Example »\nYou can learn more about Sass in our Sass Tutorial.\nSass Modules\nSass has many Built-in Modules that you can use to manipulate colors, math, strings, etc.\nOne example is the sass:color module.\nIt has a function to make a color darker or lighter, just by giving it a percentage:\nExample\nLet us add the headers to our component:\nExample\nRun Example »\nYou can learn more about Sass in our Sass Tutorial.\nNote: Sass files are compiled to CSS at build time.",
      "examples": [
        "$myColor: red; h1 { color: $myColor; }",
        "import { createRoot } from 'react-dom/client'; import './MyStyle.scss'; function MyHeader() { return ( <h1>My Header</h1> ); } createRoot(document.getElementById('root')).render( <MyHeader /> );",
        "@use 'sass:color'; $myColor: red; h1 { color: $myColor; } h2 { color: color.adjust($myColor, $lightness: -20%); } h3 { color: color.adjust($myColor, $lightness: 20%); }",
        "import { createRoot } from 'react-dom/client'; import './MyStyle.scss'; function MyHeader() { return ( <div> <h1>My Header 1</h1> <h2>My Header 2</h2> <h3>My Header 3</h3> </div> ); } createRoot(document.getElementById('root')).render( <MyHeader /> );",
        "npm install sass",
        ".scss",
        "sass:color"
      ]
    },
    {
      "title": "React Hooks",
      "summary": "Hooks allow functions to have access to state and other React features without using classes.\nThey provide a more direct API to React concepts like props, state, context, refs, and lifecycle.\nWhat is a Hook?\nHooks are functions that let you \"hook into\" React state and lifecycle features from functional components.\nExample:Get your own React.js Server\nHere is an example of a Hook. Don't worry if it doesn't make sense. We will go into more detail in the next section.\nRun Example »\nYou must import Hooks from react.\nHere we are using the useState Hook to keep track of the application state.\nState generally refers to application data or properties that need to be tracked.\nHook Rules\nThere are 3 rules for hooks:\nHooks can only be called inside React function components.\nHooks can only be called at the top level of a component.\nHooks cannot be conditional\nNote: Hooks will not work in React class components.\nCustom Hooks\nIf you have stateful logic that needs to be reused in several components, you can build your own custom Hooks.\nWe'll go into more detail in the Custom Hooks section.",
      "examples": [
        "import { useState } from 'react'; import { createRoot } from 'react-dom/client'; function FavoriteColor() { const [color, setColor] = useState(\"red\"); return ( <> <h1>My favorite color is {color}!</h1> <button type=\"button\" onClick={() => setColor(\"blue\")} >Blue</button> <button type=\"button\" onClick={() => setColor(\"red\")} >Red</button> <button type=\"button\" onClick={() => setColor(\"pink\")} >Pink</button> <button type=\"button\" onClick={() => setColor(\"green\")} >Green</button> </> ); } createRoot(document.getElementById('root')).render( <FavoriteColor /> );",
        "import",
        "react",
        "useState"
      ]
    },
    {
      "title": "React useState Hook",
      "summary": "The React useState Hook allows us to track state in a function component.\nState generally refers to data or properties that need to be tracking in an application.\nImport useState\nTo use the useState Hook, we first need to import it into our component.\nExample:Get your own React.js Server\nAt the top of your component, import the useState Hook.\nNotice that we are destructuring useState from react as it is a named export.\nTo learn more about destructuring, check out the ES6 Destructuring section.\nInitialize useState\nWe initialize our state by calling useState in our function component.\nuseState accepts an initial state and returns two values:\nThe current state.\nA function that updates the state.\nExample:\nInitialize state at the top of the function component.\nNotice that again, we are destructuring the returned values from useState.\nThe first value, color, is our current state.\nThe second value, setColor, is the function that is used to update our state.\nThese names are variables that can be named anything you would like.\nLastly, we set the initial state to \"red\": useState(\"red\")\nREMOVE ADS\nRead State\nWe can now include our state anywhere in our component.\nExample:\nUse the state variable in the rendered component.\nRun Example »\nUpdate State\nTo update our state, we use our state updater function.\nExample:\nUse the state updater function to update the state:\nWe should never directly update state. Ex: color = \"blue\" is not allowed.\nExample:\nUse a button to update the state:\nRun Example »\nWhat Can State Hold?\nThe useState Hook can be used to keep track of strings, numbers, booleans, arrays, objects, and any combination of these!\nWe could create multiple state Hooks to track individual values.\nExample:\nCreate multiple state Hooks:\nRun Example »\nOr, we can just use one state and include an object instead!\nExample:\nCreate a single Hook that holds an object:\nRun Example »\nSince we are now tracking a single object: car, we need to reference that object when rendering the component. (Ex: car.brand)\nUpdating Objects and Arrays in State\nWhen state is updated, the entire state gets overwritten.\nWhat if we only want to update the color of our car?\nIf we only called setCar({color: \"blue\"}), this would remove the brand, model, and year from our state.\nWe can use the JavaScript spread operator to help us.\nExample:\nUse the JavaScript spread operator to update only the color of the car:\nRun Example »\nBecause we need the current value of state, we pass a function into our setCar function. This function receives the previous value.\nWe then return an object, spreading the previousState and overwriting only the color.",
      "examples": [
        "import { useState } from \"react\";",
        "import { useState } from \"react\"; function FavoriteColor() { const [color, setColor] = useState(\"red\"); }",
        "import { useState } from 'react'; import { createRoot } from 'react-dom/client'; function FavoriteColor() { const [color, setColor] = useState(\"red\"); return <h1>My favorite color is {color}!</h1> } createRoot(document.getElementById('root')).render( <FavoriteColor /> );",
        "<button type=\"button\" onClick={() => setColor(\"blue\")} >Blue</button>",
        "import { useState } from 'react'; import { createRoot } from 'react-dom/client'; function FavoriteColor() { const [color, setColor] = useState(\"red\"); return ( <> <h1>My favorite color is {color}!</h1> <button type=\"button\" onClick={() => setColor(\"blue\")} >Blue</button> </> ) } createRoot(document.getElementById('root')).render( <FavoriteColor /> );",
        "import { useState } from 'react'; import { createRoot } from 'react-dom/client'; function MyCar() { const [brand, setBrand] = useState(\"Ford\"); const [model, setModel] = useState(\"Mustang\"); const [year, setYear] = useState(\"1964\"); const [color, setColor] = useState(\"red\"); return ( <> <h1>My {brand}</h1> <p> It is a {color} {model} from {year}. </p> </> ) } createRoot(document.getElementById('root')).render( <MyCar /> );",
        "import { useState } from 'react'; import { createRoot } from 'react-dom/client'; function MyCar() { const [car, setCar] = useState({ brand: \"Ford\", model: \"Mustang\", year: \"1964\", color: \"red\" }); return ( <> <h1>My {car.brand}</h1> <p> It is a {car.color} {car.model} from {car.year}. </p> </> ) } createRoot(document.getElementById('root')).render( <MyCar /> );",
        "const updateColor = () => { setCar(previousState => { return { ...previousState, color: \"blue\" } }); }",
        "useState",
        "import",
        "react",
        "color",
        "setColor",
        "useState(\"red\")",
        "color = \"blue\"",
        "car",
        "car.brand",
        "setCar({color: \"blue\"})",
        "setCar",
        "previousState"
      ]
    },
    {
      "title": "React useEffect Hooks",
      "summary": "The useEffect Hook allows you to perform side effects in your components.\nSome examples of side effects are: fetching data, directly updating the DOM, and timers.\nuseEffect accepts two arguments. The second argument is optional.\nuseEffect(<function>, <dependency>)\nLet's use a timer as an example.\nExample:Get your own React.js Server\nUse setTimeout() to count 1 second after initial render:\nRun Example »\nBut wait!! It keeps counting even though it should only count once!\nuseEffect runs on every render. That means that when the count changes, a render happens, which then triggers another effect.\nThis is not what we want. There are several ways to control when side effects run.\nWe should always include the second parameter which accepts an array. We can optionally pass dependencies to useEffect in this array.\nExample\n1. No dependency passed:\nExample\n2. An empty array:\nExample\n3. Props or state values:\nSo, to fix this issue, let's only run this effect on the initial render.\nExample:\nOnly run the effect on the initial render:\nRun Example »\nExample:\nHere is an example of a useEffect Hook that is dependent on a variable. If the count variable updates, the effect will run again:\nRun Example »\nIf there are multiple dependencies, they should be included in the useEffect dependency array.\nREMOVE ADS\nEffect Cleanup\nSome effects require cleanup to reduce memory leaks.\nTimeouts, subscriptions, event listeners, and other effects that are no longer needed should be disposed.\nWe do this by including a return function at the end of the useEffect Hook.\nExample:\nClean up the timer at the end of the useEffect Hook:\nRun Example »\nNote: To clear the timer, we had to name it.",
      "examples": [
        "import { useState, useEffect } from 'react'; import { createRoot } from 'react-dom/client'; function Timer() { const [count, setCount] = useState(0); useEffect(() => { setTimeout(() => { setCount((count) => count + 1); }, 1000); }); return <h1>I've rendered {count} times!</h1>; } createRoot(document.getElementById('root')).render( <Timer /> );",
        "useEffect(() => { //Runs on every render });",
        "useEffect(() => { //Runs only on the first render }, []);",
        "useEffect(() => { //Runs on the first render //And any time any dependency value changes }, [prop, state]);",
        "import { useState, useEffect } from 'react'; import { createRoot } from 'react-dom/client'; function Timer() { const [count, setCount] = useState(0); useEffect(() => { setTimeout(() => { setCount((count) => count + 1); }, 1000); }, []); // <- add empty brackets here return <h1>I've rendered {count} times!</h1>; } createRoot(document.getElementById('root')).render( <Timer /> );",
        "import { useState, useEffect } from 'react'; import { createRoot } from 'react-dom/client'; function Counter() { const [count, setCount] = useState(0); const [calculation, setCalculation] = useState(0); useEffect(() => { setCalculation(() => count * 2); }, [count]); // <- add the count variable here return ( <> <p>Count: {count}</p> <button onClick={() => setCount((c) => c + 1)}>+</button> <p>Calculation: {calculation}</p> </> ); } createRoot(document.getElementById('root')).render( <Counter /> );",
        "import { useState, useEffect } from 'react'; import { createRoot } from 'react-dom/client'; function Timer() { const [count, setCount] = useState(0); useEffect(() => { let timer = setTimeout(() => { setCount((count) => count + 1); }, 1000); return () => clearTimeout(timer) }, []); return <h1>I've rendered {count} times!</h1>; } createRoot(document.getElementById('root')).render( <Timer /> );",
        "useEffect",
        "useEffect(<function>, <dependency>)",
        "setTimeout()",
        "count"
      ]
    },
    {
      "title": "React useContext Hook",
      "summary": "React Context\nReact Context is a way to manage state globally.\nIt can be used together with the useState Hook to share state between deeply nested components more easily than with useState alone.\nThe Problem\nState should be held by the highest parent component in the stack that requires access to the state.\nTo illustrate, we have many nested components. The component at the top and bottom of the stack need access to the state.\nTo do this without Context, we will need to pass the state as \"props\" through each nested component. This is called \"prop drilling\".\nExample:Get your own React.js Server\nPassing \"props\" through nested components:\nRun Example »\nEven though component 2 did not need the state, it had to pass the state along so that it could reach component 3.\nREMOVE ADS\nThe Solution\nThe solution is to create context.\nCreate Context\nTo create context, you must Import createContext and initialize it:\nNext we'll use the Context Provider to wrap the tree of components that need the state Context.\nContext Provider\nWrap child components in the Context Provider and supply the state value.\nNow, all components in this tree will have access to the user Context.\nUse the useContext Hook\nIn order to use the Context in a child component, we need to access it using the useContext Hook.\nFirst, include the useContext in the import statement:\nThen you can access the user Context in all components:\nFull Example\nExample:\nHere is the full example using React Context:\nRun Example »",
      "examples": [
        "import { useState } from 'react'; import { createRoot } from 'react-dom/client'; function Component1() { const [user, setUser] = useState(\"Linus\"); return ( <> <h1>{`Hello ${user}!`}</h1> <Component2 user={user} /> </> ); } function Component2({ user }) { return ( <> <h1>Component 2</h1> <Component3 user={user} /> </> ); } function Component3({ user }) { return ( <> <h1>Component 3</h1> <h2>{`Hello ${user} again!`}</h2> </> ); } createRoot(document.getElementById('root')).render( <Component1 /> );",
        "import { useState, createContext, useContext } from 'react'; import { createRoot } from 'react-dom/client'; const UserContext = createContext();",
        "function Component1() { const [user, setUser] = useState(\"Linus\"); return ( <UserContext.Provider value={user}> <h1>{`Hello ${user}!`}</h1> <Component2 /> </UserContext.Provider> ); }",
        "import { useState, createContext, useContext } from \"react\";",
        "function Component3() { const user = useContext(UserContext); return ( <> <h1>Component 3</h1> <h2>{`Hello ${user} again!`}</h2> </> ); }",
        "import { useState, createContext, useContext } from 'react'; import { createRoot } from 'react-dom/client'; const UserContext = createContext(); function Component1() { const [user, setUser] = useState(\"Linus\"); return ( <UserContext.Provider value={user}> <h1>{`Hello ${user}!`}</h1> <Component2 /> </UserContext.Provider> ); } function Component2() { return ( <> <h1>Component 2</h1> <Component3 /> </> ); } function Component3() { const user = useContext(UserContext); return ( <> <h1>Component 3</h1> <h2>{`Hello ${user} again!`}</h2> </> ); } createRoot(document.getElementById('root')).render( <Component1 /> );",
        "useState",
        "createContext",
        "useContext"
      ]
    },
    {
      "title": "React useRef Hook",
      "summary": "The useRef Hook allows you to persist values between renders.\nIt can be used to store a mutable value that does not cause a re-render when updated.\nIt can be used to access a DOM element directly.\nDoes Not Cause Re-renders\nIf we tried to count how many times our application renders using the useState Hook, we would be caught in an infinite loop since this Hook itself causes a re-render.\nTo avoid this, we can use the useRef Hook.\nExample:Get your own React.js Server\nUse useRef to track application renders.\nRun Example »\nuseRef() only returns one item. It returns an Object called current.\nWhen we initialize useRef we set the initial value: useRef(0).\nIt's like doing this: const count = {current: 0}. We can access the count by using count.current.\nREMOVE ADS\nAccessing DOM Elements\nThe useRef Hook is often used to access DOM elements directly.\nFirst, we create a ref using the useRef Hook: const inputElement = useRef();.\nThen, we attach the ref to a DOM element using the ref attribute in JSX: <input type=\"text\" ref={inputElement} />.\nFinally, we can access the DOM element using the current property: inputElement.current.\nExample:\nUse useRef to focus the input:\nRun Example »\nIn the example, the input field gets focus when the button is clicked, because the onClick function calls inputElement.current.focus().\nTracking State Changes\nThe useRef Hook can also be used to keep track of previous state values.\nThis is because we are able to persist useRef values between renders.\nExample:\nUse useRef to keep track of previous state values:\nRun Example »\nThis time we use a combination of useState, useEffect, and useRef to keep track of the previous state.\nIn the useEffect, we are updating the useRef current value each time the inputValue is updated by entering text into the input field.",
      "examples": [
        "import { useState, useRef, useEffect } from 'react'; import { createRoot } from 'react-dom/client'; function App() { const [inputValue, setInputValue] = useState(\"\"); const count = useRef(0); useEffect(() => { count.current = count.current + 1; }); return ( <> <p>Type in the input field:</p> <input type=\"text\" value={inputValue} onChange={(e) => setInputValue(e.target.value)} /> <h1>Render Count: {count.current}</h1> </> ); } createRoot(document.getElementById('root')).render( <App /> );",
        "import { useRef } from 'react'; import { createRoot } from 'react-dom/client'; function App() { const inputElement = useRef(); const focusInput = () => { inputElement.current.focus(); }; return ( <> <input type=\"text\" ref={inputElement} /> <button onClick={focusInput}>Focus Input</button> </> ); } createRoot(document.getElementById('root')).render( <App /> );",
        "import { useRef, useState, useEffect } from 'react'; import { createRoot } from 'react-dom/client'; function App() { const [inputValue, setInputValue] = useState(\"\"); const previousInputValue = useRef(\"\"); useEffect(() => { previousInputValue.current = inputValue; }, [inputValue]); return ( <> <input type=\"text\" value={inputValue} onChange={(e) => setInputValue(e.target.value)} /> <h2>Current Value: {inputValue}</h2> <h2>Previous Value: {previousInputValue.current}</h2> </> ); } createRoot(document.getElementById('root')).render( <App /> );",
        "useRef",
        "useState",
        "useRef()",
        "current",
        "useRef(0)",
        "const count = {current: 0}",
        "count.current",
        "const inputElement = useRef();",
        "<input type=\"text\" ref={inputElement} />",
        "inputElement.current",
        "inputElement.current.focus()",
        "useEffect",
        "inputValue"
      ]
    },
    {
      "title": "React useReducer Hook",
      "summary": "The useReducer Hook is similar to the useState Hook.\nIt allows for custom state logic.\nIf you find yourself keeping track of multiple pieces of state that rely on complex logic, useReducer may be useful.\nSyntax\nThe useReducer Hook accepts three arguments.\nThe reducer function contains your custom state logic and the initialStatecan be a simple value, but generally will contain an object. The init argument is optional and is used to initialize the state.\nThe useReducer Hook returns the current stateand a dispatchmethod.\nHere is an example where we use useReducer to keep track of the score of two players:\nExample:Get your own React.js Server\nRun Example »",
      "examples": [
        "import { useReducer } from 'react'; import { createRoot } from 'react-dom/client'; const initialScore = [ { id: 1, score: 0, name: \"John\", }, { id: 2, score: 0, name: \"Sally\", }, ]; const reducer = (state, action) => { switch (action.type) { case \"INCREASE\": return state.map((player) => { if (player.id === action.id) { return { ...player, score: player.score + 1 }; } else { return player; } }); default: return state; } }; function Score() { const [score, dispatch] = useReducer(reducer, initialScore); const handleIncrease = (player) => { dispatch({ type: \"INCREASE\", id: player.id }); }; return ( <> {score.map((player) => ( <div key={player.id}> <label> <input type=\"button\" onClick={() => handleIncrease(player)} value={player.name} /> {player.score} </label> </div> ))} </> ); } createRoot(document.getElementById('root')).render( <Score /> );",
        "useReducer(reducer, initialState, init)",
        "useReducer",
        "useState",
        "reducer",
        "initialState",
        "init",
        "state",
        "dispatch"
      ]
    },
    {
      "title": "React useCallback Hook",
      "summary": "The useCallback Hook is used to memoize a callback function.\nMemoizing a function means caching the result of a function so that it does not need to be recalculated.\nThe useCallback function only re-executes when one of its dependencies changes value.\nThis allows us to isolate resource intensive functions so that they will not automatically run on every render.\nThe useCallback and useMemo Hooks are similar:\nuseMemo returns a memoized value.\nuseCallback returns a memoized function.\nLearn more about useMemo in the useMemo chapter.\nSyntax\nThe useCallback Hook accepts two arguments.\ncallback: The function that you want to memoize.\ndependencies: An array of dependencies for the callback function. The memoized callback will only change if one of these dependencies has changed.\nExample:Get your own React.js Server\nWithout useCallback:\nRun Example »\nREMOVE ADS\nTry running the example above and click the buttons.\nYou will notice that all three components (Parent, Button 1 and Button 2) re-render each time you click the buttons.\nThis can be avoided by using the useCallback hook.\nBy using the useCallback hook, we can memoize the functions and only recreate them when their dependencies change.\nWhen clicking Button 1, only Parent and Button 1 should re-render, and when clicking Button 2, only Parent and Button 2 should re-render:\nExample:\nWith useCallback:\nRun Example »",
      "examples": [
        "//Without useCallback: import React, { useState } from 'react'; import { createRoot } from 'react-dom/client'; // Child component that receives a function prop const Button = React.memo(({ onClick, text }) => { alert(`Child ${text} button rendered`); return <button onClick={onClick}>{text}</button>; }); // Parent component without useCallback function WithoutCallbackExample() { const [count1, setCount1] = useState(0); const [count2, setCount2] = useState(0); // This function is recreated on every render const handleClick1 = () => { setCount1(count1 + 1); }; const handleClick2 = () => { setCount2(count2 + 1); }; alert(\"Parent rendered\"); return ( <div> <h2>Without useCallback:</h2> <p>Count 1: {count1}</p> <p>Count 2: {count2}</p> <Button onClick={handleClick1} text=\"Button 1\" /> <Button onClick={handleClick2} text=\"Button 2\" /> </div> ); } createRoot(document.getElementById('root')).render( <WithoutCallbackExample /> );",
        "//With useCallback: import React, { useState, useCallback } from 'react'; import { createRoot } from 'react-dom/client'; // Child component that receives a function prop const Button = React.memo(({ onClick, text }) => { console.log(`${text} button rendered`); return <button onClick={onClick}>{text}</button>; }); // Parent component with useCallback function WithCallbackExample() { const [count1, setCount1] = useState(0); const [count2, setCount2] = useState(0); // These functions are memoized and only recreated when dependencies change const handleClick1 = useCallback(() => { setCount1(count1 + 1); }, [count1]); const handleClick2 = useCallback(() => { setCount2(count2 + 1); }, [count2]); console.log(\"Parent rendered\"); return ( <div> <h2>With useCallback:</h2> <p>Count 1: {count1}</p> <p>Count 2: {count2}</p> <Button onClick={handleClick1} text=\"Button 1\" /> <Button onClick={handleClick2} text=\"Button 2\" /> </div> ); } createRoot(document.getElementById('root')).render( <WithCallbackExample /> );",
        "useCallback(callback, dependencies)",
        "useCallback",
        "useMemo",
        "callback",
        "dependencies"
      ]
    },
    {
      "title": "React useMemo Hook",
      "summary": "The React useMemo Hook returns a memoized value.\nThink of memoization as caching a value so that it does not need to be recalculated.\nThe useMemo Hook only runs when one of its dependencies update.\nThis can improve performance.\nThe useMemo and useCallback Hooks are similar:\nuseMemo returns a memoized value.\nuseCallback returns a memoized function.\nLearn more about useCallback in the useCallback chapter.\nWithout useMemo\nThe useMemo Hook can be used to keep expensive, resource intensive functions from needlessly running.\nIn this example, we have an expensive function that runs on every render.\nWhen changing the count or adding a todo, you will notice a delay in execution.\nExample:Get your own React.js Server\nA poor performing function. The expensiveCalculation function runs on every render:\nRun Example »\nREMOVE ADS\nUse useMemo\nTo fix this performance issue, we can use the useMemo Hook to memoize the expensiveCalculation function. This will cause the function to only run when needed.\nWe can wrap the expensive function call with useMemo.\nThe useMemoHook accepts a second parameter to declare dependencies. The expensive function will only run when its dependencies have changed.\nIn the following example, the expensive function will only run when count is changed and not when todo's are added.\nExample:\nPerformance example using the useMemo Hook:\nRun Example »",
      "examples": [
        "import { useState } from 'react'; import { createRoot } from 'react-dom/client'; const App = () => { const [count, setCount] = useState(0); const [todos, setTodos] = useState([]); const calculation = expensiveCalculation(count); const increment = () => { setCount((c) => c + 1); }; const addTodo = () => { setTodos((t) => [...t, \"New Todo\"]); }; return ( <div> <div> <h2>My Todos</h2> {todos.map((todo, index) => { return <p key={index}>{todo}</p>; })} <button onClick={addTodo}>Add Todo</button> </div> <hr /> <div> Count: {count} <button onClick={increment}>+</button> <h2>Expensive Calculation</h2> {calculation} <p>Note that this example executes the expensive function also when you click on the Add Todo button.</p> </div> </div> ); }; const expensiveCalculation = (num) => { console.log(\"Calculating...\"); for (let i = 0; i < 1000000000; i++) { num += 1; } return num; }; createRoot(document.getElementById('root')).render( <App /> );",
        "import { useState, useMemo } from 'react'; import { createRoot } from 'react-dom/client'; const App = () => { const [count, setCount] = useState(0); const [todos, setTodos] = useState([]); const calculation = useMemo(() => expensiveCalculation(count), [count]); const increment = () => { setCount((c) => c + 1); }; const addTodo = () => { setTodos((t) => [...t, \"New Todo\"]); }; return ( <div> <div> <h2>My Todos</h2> {todos.map((todo, index) => { return <p key={index}>{todo}</p>; })} <button onClick={addTodo}>Add Todo</button> </div> <hr /> <div> Count: {count} <button onClick={increment}>+</button> <h2>Expensive Calculation</h2> {calculation} </div> </div> ); }; const expensiveCalculation = (num) => { console.log(\"Calculating...\"); for (let i = 0; i < 1000000000; i++) { num += 1; } return num; }; createRoot(document.getElementById('root')).render( <App /> );",
        "useMemo",
        "useCallback",
        "expensiveCalculation",
        "count"
      ]
    },
    {
      "title": "React Custom Hooks",
      "summary": "You can make your own Hooks!\nWhen you have components that can be used by multiple components, we can extract that component into a custom Hook.\nCustom Hooks start with \"use\". Example: useFetch.\nBuild a Hook\nFirst, let us make an example without a custom Hook.\nIn the following code, we are fetching data from a URL and displaying it.\nWe will use the JSONPlaceholder service to fetch some fake data.\nTo learn more about fetching data, check out the JavaScript Fetch API section.\nExample:Get your own React.js Server\nUse the JSONPlaceholder service to fetch some fake titles and display them:\nRun Example »\nThe logic behind the fetch may be needed in other components as well, so we will turn that into a custom Hook.\nMove the fetch logic to a new file to be used as a custom Hook.\nThe file name must start with use, and end with .js, and be placed in the same directory as the component.\nWe will name the file useFetch.js.\nExample:\nMove the fetch component into the new file:\nNow we can import this Hook, and use it in any other component:\nExample:\nImport and use the newly created custom Hook:\nRun Example »\nExample Explained\nWe have created a new file called useFetch.js containing a function called useFetch which contains all of the logic needed to fetch our data.\nWe removed the hard-coded URL and replaced it with a url variable that can be passed to the custom Hook.\nLastly, we are returning our data from our Hook.\nIn main.jsx, we are importing our useFetch Hook and utilizing it like any other Hook. This is where we pass in the URL to fetch data from.\nNow we can reuse this custom Hook in any component to fetch data from any URL.",
      "examples": [
        "import { useState, useEffect } from 'react'; import { createRoot } from 'react-dom/client'; const Home = () => { const [data, setData] = useState(null); useEffect(() => { fetch(\"https://jsonplaceholder.typicode.com/todos\") .then((res) => res.json()) .then((data) => setData(data)); }, []); return ( <> {data && data.map((item) => { return <p key={item.id}>{item.title}</p>; })} </> ); }; createRoot(document.getElementById('root')).render( <Home /> );",
        "import { useState, useEffect } from \"react\"; const useFetch = (url) => { const [data, setData] = useState(null); useEffect(() => { fetch(url) .then((res) => res.json()) .then((data) => setData(data)); }, [url]); return [data]; }; export default useFetch;",
        "import { createRoot } from 'react-dom/client'; import useFetch from \"./useFetch\"; const Home = () => { const [data] = useFetch(\"https://jsonplaceholder.typicode.com/todos\"); return ( <> {data && data.map((item) => { return <p key={item.id}>{item.title}</p>; })} </> ); }; createRoot(document.getElementById('root')).render( <Home /> );",
        "useFetch",
        "use",
        ".js",
        "useFetch.js",
        "url",
        "main.jsx"
      ]
    },
    {
      "title": "React Online Compiler",
      "summary": "React.js Compiler (Editor)\nCreate your own website and React.js applications with a Node.js environment in W3Schools Spaces.\nW3Schools Spaces is a website-building tool that enables you to create and share your own website, as well as develop and host your React.js applications within a Node.js environment.\nYou have full control over the website's appearance and functionality by editing the code directly in your web browser.\nW3Schools Spaces is user-friendly and requires no setup, making it easy to use.\nGet started with React.js by selecting the Node.js environment in Spaces.\nThe code editor is packed with features to help you achieve more:\nTemplates: Start from scratch or use a template\nCloud-based: no installations required. You only need your browser\nTerminal & Log: debug and troubleshoot your code easily\nFile Navigator: switch between files inside the code editor\nAnd much more!\nLearn Faster\nPractice is key to mastering coding, and the best way to put your React.js knowledge into practice is by getting practical with code.\nUse W3Schools Spaces to build, test and deploy code.\nThe code editor lets you write and practice different types of computer languages. It includes React.js, but you can use it for other languages too.\nNew languages are added all the time:\nIf you don't know React, we suggest that you read our React Tutorial from scratch.\nEasy Package Management\nGet an overview of your packages and easily add or delete frameworks and libraries. Then, with just one click, you can make changes to your packages without manual installation.\nBuild Powerful Websites\nYou can use the code editor in W3School Spaces to build frontend or full-stack websites from scratch.\nOr you can use the 60+ templates available and save time:\nCreate your Spaces account today and explore them all!\nShare Your Website With The World\nHost and publish your websites in no time with W3School Spaces.\nW3Schools subdomain and SSL certificate are included for free with W3School Spaces. An SSL certificate makes your website safe and secure. It also helps people trust your website and makes it easier to find it online.\nWant a custom domain for your website?\nYou can buy a domain or transfer an existing one and connect it to your space.\nHow Does It Work?\nGet started in a few clicks with W3School Spaces.",
      "examples": []
    },
    {
      "title": "React Quiz",
      "summary": "You can test your React skills with W3Schools' Quiz.\nThe Test\nThe test contains 25 questions and there is no time limit.\nThe test is not official, it's just a nice way to see how much you know, or don't know, about React.\nCount Your Score\nYou will get 1 point for each correct answer. At the end of the Quiz, your total score will be displayed. Maximum score is 25 points.\nStart the Quiz\nGood luck!\nStart the React Quiz ❯\nIf you don't know React, we suggest that you read our React Tutorial from scratch.\nKickstart your career\nGet certified by completing the REACT exam",
      "examples": []
    },
    {
      "title": "React Exercises",
      "summary": "Exercises\nTest your React skills with exercises from all categories:\nGet Started\nFirst App\nRender\nES6 Classes\nES6 Arrow Function\nES6 Variables\nES6 Array Map\nES6 Destructuring\nES6 Spread\nES6 Modules\nES6 Ternary\nES6 Template Strings\nJSX\nJSX Expressions\nJSX Attributes\nJSX If Statements\nComponents\nProps\nProps Destructuring\nProps Children\nEvents\nConditionals\nLists\nForms\nForms Textarea\nForms Select\nForms Multiple Inputs\nForms Checkbox\nForms Radio\nPortals\nSuspense\nCSS Styling\nCSS Modules\nCSS in JS\nRouter\nTransitions\nForward Ref\nHigher Order Components\nSass Styling\nHooks useState\nHooks useEffect\nuseContext Hook\nuseRef Hook\nuseReducer Hook\nuseCallback Hook\nuseMemo Hook\nCustom Hooks\nLog in to track your progress\nIf you haven't already, sign up to become a W3Schooler, and get points for every exercise you complete.\nAs a logged on W3Schools user you will have access to many features like having your own web page, track your learning progress, receive personal guided paths, and more.\nThe Exercise\nWe have gathered a variety of React exercises from most of the chapters in our React Tutorial.\nThe exercises are a mix of \"multiple choice\" and \"fill in the blanks\" questions. The answer can be found in the corresponding tutorial chapter. If you're stuck, or answer wrong, you can try again or hit the \"Show Answer\" button to see the correct answer.\nREMOVE ADS",
      "examples": []
    },
    {
      "title": "React Syllabus",
      "summary": "Introduction\nThe W3Schools React Tutorial is comprehensive and beginner-friendly.\nIt will give you a fundamental knowledge of React.\nIt is designed for beginners and requires intermediate JavaScript knowledge.\nThe content has been carefully made to be bite-sized, simple, and easy to understand.\nThe content has been proven by millions of users over the years. It is updated and improved frequently.\nThe syllabus outline and its sequence are structured so you can learn React step by step, from basic components to advanced features.\nGet Started With React »\nLearning Outcomes\nMaster ES6 features used in React (classes, arrow functions, destructuring, modules).\nCreate and render React components using JSX syntax.\nWork with React components, both class and functional components.\nHandle component props and state management.\nImplement event handling and conditional rendering.\nCreate and manage lists with keys in React.\nBuild forms and handle user input in React applications.\nImplement navigation using React Router.\nUse React Hooks (useState, useEffect, useContext, useRef, etc.).\nApply performance optimization with React Memo.\nStyle React components using CSS and Sass.\nCreate custom hooks for reusable logic.\nNote: Are you a teacher teaching React? W3Schools Academy is a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more about Academy here.\nWhich Subjects Are React Relevant For?\nWeb Development:\nReact can be used for building modern web applications.\nFront-end Development:\nReact is a leading library for user interface development.\nSingle Page Applications:\nReact enables building dynamic single-page applications.\nUser Interface Design:\nReact provides a component-based approach to UI development.\nWeb Applications:\nReact is ideal for interactive web applications.\nMobile Development:\nReact Native extends React concepts to mobile development.\nModern JavaScript Development:\nReact embraces modern JavaScript features and practices.\nGet Started\nActivities\nIn this tutorial we offer different activities for you to learn React for free:\nLessons\nExercises\nQuizzes\nSign in to Track Progress\nYou can also create a free account to track your progress.\nAs a signed-in user, you get access to features such as:\nLearning paths\nSandbox and lab environments\nAchievements\nAnd much more!\nSign Up - It's free\nOverview of the Modules\nReact Home\nReact Intro\nReact Get Started\nReact Upgrade\nReact ES6\nES6 Classes\nES6 Arrow Functions\nES6 Variables\nES6 Array Methods\nES6 Destructuring\nES6 Spread Operator\nES6 Modules\nES6 Ternary Operator\nReact Render HTML\nReact JSX\nReact Components\nReact Class\nReact Props\nReact Events\nReact Conditionals\nReact Lists\nReact Forms\nReact Router\nReact Memo\nReact CSS Styling\nReact Sass Styling\nWhat is a Hook?\nuseState\nuseEffect\nuseContext\nuseRef\nuseReducer\nuseCallback\nuseMemo\nCustom Hooks\nGet Started\nSandbox and Lab Environment\nReact, like any programming library, is best learned through hands-on practice.\nTry this example using our editor:\nExample:Get your own React.js Server\nRun Example »\nIf you want to explore more and host your project, we have a feature called Spaces that allows you to build, test and deploy static websites for free.\nHere you get a secure sandbox environment called Spaces, where you can practice coding and test projects in real-time.\nSpaces allow you to test, build, and deploy code. This includes a W3Schools subdomain, hosting, and secure SSL certificates.\nSpaces require no installation and run directly in the browser.\nFeatures include:\nCollaboration\nFile navigator\nTerminal & log\nPackage manager\nDatabase\nEnvironment manager\nAnalytics\nCreate a Spaces Account\nReact Certification\nW3Schools offers an end-of-pathway certification program.\nHere you can take exams to get certified.\nThe React exam is a test that summarizes the W3Schools React syllabus.\nAfter passing the exam you get the \"Certified React Developer\" Certification.\nThere are two different types of certifications:\nNon-adaptive\nAdaptive\nThe non-adaptive is pass or no pass.\nThe adaptive certification is adaptive and graded; students will get a grade from intermediate, advanced to professional.\nBuy Certificate »\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach React?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo »",
      "examples": [
        "import React from 'react'; import ReactDOM from 'react-dom/client'; function Hello(props) { return <h1>Hello World!</h1>; } const container = document.getElementById(\"root\"); const root = ReactDOM.createRoot(container); root.render(<Hello />);"
      ]
    },
    {
      "title": "React Study Plan",
      "summary": "Introduction\nThe React study plan helps you teach your students React step-by-step.\nCreating a study plan for React is easy.\nYou can use a pre-built study plan or customize it.\nStudents have different skill levels. The study plans can be customized to ensure that everyone is challenged.\nSave time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of React to the final exam.\nW3Schools Academy\nThis study plan is a feature of W3Schools Academy.\nW3Schools Academy is a platform that has everything you need to teach coding, all in one place.\nIt offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom.\nYou need to have an active subscription to access the study plan feature. There are two different subscription tiers:\nEssentials ($1.99 / month per student)\nFull Access ($5.99 / month per student)\nCalculate your price and order here.\nLearn More »\nAcademy also offer other features such as:\nManaging your classroom\nTracking of student progress and reports\nLabs, assignments, and code challenges (prebuilt challenges or create your own ones)\nAuto-grading\nTeaching materials\nCertification exams\nGet a free demo »\nTeacher Materials\nW3Schools has everything you need to teach React.\nThe React training materials is available for you to include and use in your study plan:\nW3Schools React Tutorial\nReact Exercises\nReact Quiz\nReact Challenges (Coding challenges)\nReact Certification Exam (End of Pathway Exam)\nReact Syllabus\nWith the React Syllabus, your students will start with the basics, like understanding components, props, and state, and move to more advanced topics, like working with hooks, managing routing, and building interactive user interfaces. Each chapter includes simple examples, try-it-yourself sections, exercises, and quizzes to make learning easy, interactive, and fun.\nRead more about React Syllabus.\nStudy Plan Overview\nThe study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level.\nLearning Paths\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nInteractive Content\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTimeline and Pace\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nTrack Student Progress\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nEnd of Pathway Exam\nThe React study plan aligns with the React Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the React Tutorial.\nYou get reports of the students' results.\nThe React study plan aligns with the React Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the React Tutorial.\nYou get reports of the students' results.\nAccessibility\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nLearn More »\nSample Study Plan\nYou choose the timeline and pace of your study plans.\nSchools have different preferences.\nSome would like more intensive pace, e.g. 3 weeks, others 6 or more weeks.\nIt is completely up to you.\nFor example, this is how a 3-week React study plan could look like:\nWeek 1: Introduction\nWeek 2: ES6, Render HTML, JSX, Components & Component Props, Router & Events, Lists & Forms\nWeek 3: Styling, Hooks, React Certification Exam\nImage of Sample React study plan:\nReady to get started?\nStart with React Study Plans today.\nGet Started »\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach React programming?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo »",
      "examples": []
    },
    {
      "title": "React.js Server Create React.js Server Powerful Code Editor Practice Makes Perfect kAI",
      "summary": "Coding Skills\nAI Tutor\nProjects\nSecurely\nChoose your Plan\nBy subscribing to a plan you support the W3Schools mission to make\nlearning available to everyone - no matter their background.\n$0 /Forever\nThis is for you that are beginning to explore coding and web development\nTrack your progress\nSet your goals\nBuild and host 1 static website\n100 credits/month\nAccess various AI features like W3Schools kAI coding tutor and interview preparation.\nNo support\n$14.99 /Month\nThis is for you that want to learn and reach your goals faster. Build fullstack projects, ad free experience.\nAd-free experience\nUnlimited challenges\nUnlimited practice tests\nBuild and host 15 static websites\nBuild and host 1 full stack server\nChoose from 75+ templates\n10000 credits/month\nAccess various AI features like W3Schools kAI coding tutor and interview preparation.\nCancel anytime\nFor teachers\nSpend less time on admin tasks while engaging your students. Help them learn, practice and collaborate. All in one place.\nAd-free for focused learning\nDashboard to manage your classroom\nStudy plans for structured learning\nTrack progress with insights\nInteractive code challenges and projects\nAccess to all courses and certification exams\nSpaces for building and publishing projects\n25% OFF\nYou can also buy a domain or connect an existing one.\nSave Time with Templates\nJust landed in Spaces\nLearn to code more effectively\nand intelligently with kAI - AI tutor\nHi! I'm kAI, W3Schools AI Tutor...\nFeel free to ask me any coding-related questions, and I'll do my best to assist you.\nI can help you checking your code for errors, improving your code's structure, explaining coding concepts in a clear and understandable way, and more...\nI can even create complete websites for you based on your input, so what are you waiting for?\nSuper Simple to Share\nIncluded for free in all plans\nWant custom domains?\nHow it works\nCoding Made Easy\nCloud-based\nTerminal & Log\nHow To Libraries\nDatabase\nFile Navigator\nPackage Manager\nAnalytics\nEnvironment Manager\nSave Time & Money.\nAll Your Files in One Place.\nFix Your Code Faster.\nGet Full Data Visibility.\nIncreased Control and Security.\nFind What You Need Quicker.\nGet Traffic Insights.\nGet Inspired\nFrequently Asked Questions\nWith Basic Spaces, you can build frontend websites. Whereas with Fullstack Spaces, you can build frontend and backend websites.\nBasic Spaces include HTML, CSS, and Javascript. Full Stack Spaces include everything in Basic Spaces plus PHP, Python, React.js, Vue.js, Node.js, Handlebars, and Django.\nYour subscription will be automatically renewed every month.\nYour access to all the benefits for the paid period of time will continue. However, the subscription will not be renewed automatically.\nTo subscribe W3Schools accounts for multiple users, you can contact sales@w3schools.com",
      "examples": []
    },
    {
      "title": "React.js Interview Preparation",
      "summary": "Try W3Schools' comprehensive Front-End interview preparation feature.\nA tool that will help you get ready for your next interview.\nW3Schools interview preparation is an interactive feature powered by AI, where you can select the role of the interviewer, ask questions, and receive guidance.\nAfter the interview training you will get an evaluation of your performance that you can use to improve yourself.\nGet Started\nWhat to expect in a Front-End interview\nIf you are going to a Front-End interview, there are a few things you can expect:\nCoding Questions:\nYou will be asked coding questions, and you possibly also get a task to solve.\nExamples of technical questions:\nTell me about your experience as a Front-End developer.\nTell me about a personal project where you worked on implementing the user interface for a website.\nExamples of a task:\nCreate a webpage that shows a greeting message to the user.\nUse HTML and CSS to structure and style it. You can add a JavaScript function to change the message based on the time of the day.\nIf you don't know how to solve the task or answer the question, do not panic. It happens to everyone, even pro Front-End developers.\nShowcase your skills and projects:\nThey would like to see projects to understand your work better.\nYou can include current projects in your portfolio even if they are unfinished.\nExamples of projects to have in your portfolio:\nTo-do list app\nBlog template\nWeather dashboard\nE-commerce product page\nInteractive game or application\nREMOVE ADS\nWhat to do before the interview\nBefore you go to an interview, you should check out the company.\nIt will give you a better understanding of their values and what they do.\nCheck out:\nTheir webpage\nTheir social media platforms\nArticles and reviews\nMake sure you understand the job description:\nRead the description and take notes if you need help understanding something. You can call them before the interview and ask about the things you don't understand.\nYou can also ask a friend or a community member to help you.\nThere is a big community of Front-End developers on social media.\nReflect on why you are the right fit for this role:\nCompanies hire people they believe will be the right fit.\nThink about what value you can add to the role and the team.\nWrite them down.\nIt will help you discuss how you are the right candidate for the role.\nWe have created an interview tool to help you prepare:\nTry it out\nWhat is Front-End Development?\nFront-End development is an exciting career that allows you to create dynamic and responsive websites and apps. It's a good choice if you're interested in good user engagement and experience.\nTypical Languages Used in Front-End Development:\nHTML\nCSS\nJavaScript\nReact.js\nBootstrap\nand other CSS frameworks\nCareer Outlook\nThe demand for Front-End developers is high.\nYou can expect:\nCompetitive salary\nPossibility of working remotely\nOpportunity to grow as the industry innovates and adopts new technologies.\nThe Average Salary is $112,328 in the US.\nTypical Job Titles for a Front-End Developer:\nFront-End developer\nWeb Developer\nUI/UX Designer\nWeb App Developer\nand many more.\nTry W3Schools Pathfinder Jobs, where companies post in-demand job roles such as Front-End development, web development, Java development, and more.\nOur best tip: Prepare yourself so you can go in with confidence and enjoy the process!\nTry W3Schools interview preparation here: Interview Preperation\nBest of luck!",
      "examples": [
        "<head>\n<title>Simple Greeting Page</title>\n<style>\nbody {\nfont-family: Arial, sans-serif;\nbackground-color: #f0f0f0;\ncolor: #333;\npadding: 20px;\n}\n</style>\n</head>\n<body>\n\n<h1>Hello, welcome to our website!</h1>\n\n</body>\n</html>"
      ]
    },
    {
      "title": "W3Schools React Certificate",
      "summary": "W3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nW3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nWho Should Consider Getting Certified?\nAny student or professional within the digital industry.\nCertifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market.\nW3Schools is Trusted by Top Companies\nW3Schools has over two decades of experience with teaching coding online.\nOur certificates are recognized and valued by companies looking to employ skilled developers.\nSave Time and Money\nShow the world your coding skills by getting a certification.\nThe prices is a small fraction compared to the price of traditional education.\nDocument and validate your competence by getting certified!\nExam overview\nFee: 95 USD\nAchievable certification levels:\nIntermediate (40%)\nAdvanced (75%)\nProfessional (90%)\nNumber of questions:\nAdaptive, 60 on average\nRequirement to pass:\nMinimum 40% - Intermediate level\nTime limit: 60 minutes\nNumber of attempts to pass: 3\nExam deadline: None\nCertification Expiration: None\nFormat: Online, multiple choice\nRegister now »\nAdvance Faster in Your Career\nGetting a certificate proves your commitment to upgrading your skills.\nThe certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on.\nIt gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nKnowledge is power, especially in the current job market.\nDocumentation of your skills enables you to advance your career or helps you to start a new one.\nHow Does It Work?\nStudy for free at W3Schools.com\nStudy at your own speed\nTest your skills with W3Schools online quizzes\nApply for your certificate by paying an exam fee\nTake your exam online, at any time, and from any location\nGet Your Certificate and Share It With The World\nExample certificate:\nEach certificate gets a unique link that can be shared with others.\nValidate your certification with the link or QR code.\nCheck how it looks like in this Example.\nShare your certificate on Linked in the Certifications section in just one click!\nDocument Your Skills\nGetting a certificate proves your commitment to upgrade your skills, gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nGet Your Certificate »\nLooking to add multiple users?\nAre you an educator, manager or business owner looking for courses or certifications?\nWe are working with schools, companies and organizations from all over the world.\nGet courses and/or certifications for your team here.",
      "examples": []
    }
  ],
  "glossary": [
    "backend",
    "es6 classes",
    "es6 destructuring",
    "es6 modules",
    "es6 variables",
    "exercises",
    "free",
    "javascript",
    "note",
    "programs",
    "react checkbox",
    "react class",
    "react compiler",
    "react components",
    "react conditionals",
    "react es6",
    "react events",
    "react exercises",
    "react forms",
    "react hoc",
    "react home",
    "react hooks",
    "react intro",
    "react lists",
    "react portals",
    "react props",
    "react quiz",
    "react radio",
    "react router",
    "react sass",
    "react select",
    "react server",
    "react suspense",
    "react syllabus",
    "react textarea",
    "react transitions",
    "react upgrade",
    "react usecallback",
    "react usecontext",
    "react useeffect",
    "react usememo",
    "react usereducer",
    "react useref",
    "react usestate",
    "references",
    "report error",
    "w3schools spaces"
  ],
  "objectives": [
    "View your completed tutorials, exercises, and quizzes",
    "Keep an eye on your progress and daily streaks",
    "Set goals and create learning paths",
    "Create your own personal website"
  ]
}