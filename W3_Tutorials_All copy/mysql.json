{
  "course_name": "Mysql",
  "description": "MySQL is a widely used relational database management system (RDBMS). MySQL is free and open-source. MySQL is ideal for both small and large applications. Tip: Sign in to track your progress - it's free. With our online MySQL editor, you can edit the SQL statements, and click on a button to view the result. Click on the \"Try it Yourself\" button to see how it works. Many chapters in this tutorial end with an exercise where you can check your level of knowledge. See all MySQL Exercises REMOVE ADS Learn by examples! This tutorial supplements all explanations with clarifying examples. See All SQL Examples Test your MySQL skills at W3Schools! Start MySQL Quiz! Sign Up for Free Note: This is an optional feature. You can study at W3Schools without creating an account. At W3Schools you will find a complete reference of MySQL data types and functions: MySQL Data Types MySQL Functions",
  "course_summary": [
    {
      "title": "Introduction to MySQL",
      "summary": "MySQL is a very popular open-source relational database management system (RDBMS).\nWhat is MySQL?\nMySQL is a relational database management system\nMySQL is open-source\nMySQL is free\nMySQL is ideal for both small and large applications\nMySQL is very fast, reliable, scalable, and easy to use\nMySQL is cross-platform\nMySQL is compliant with the ANSI SQL standard\nMySQL was first released in 1995\nMySQL is developed, distributed, and supported by Oracle Corporation\nMySQL is named after co-founder Ulf Michael \"Monty\" Widenius's daughter: My\nWho Uses MySQL?\nHuge websites like Facebook, Twitter, Airbnb, Booking.com, Uber, GitHub, YouTube, etc.\nContent Management Systems like WordPress, Drupal, Joomla!, Contao, etc.\nA very large number of web developers around the world\nShow Data On Your Web Site\nTo build a web site that shows data from a database, you will need:\nAn RDBMS database program (like MySQL)\nA server-side scripting language, like PHP\nTo use SQL to get the data you want\nTo use HTML / CSS to style the page",
      "examples": []
    },
    {
      "title": "MySQL RDBMS",
      "summary": "What is RDBMS?\nRDBMS stands for Relational Database Management System.\nRDBMS is a program used to maintain a relational database.\nRDBMS is the basis for all modern database systems such as MySQL, Microsoft SQL Server, Oracle, and Microsoft Access.\nRDBMS uses SQL queries to access the data in the database.\nWhat is a Database Table?\nA table is a collection of related data entries, and it consists of columns and rows.\nA column holds specific information about every record in the table.\nA record (or row) is each individual entry that exists in a table.\nLook at a selection from the Northwind \"Customers\" table:\nThe columns in the \"Customers\" table above are: CustomerID, CustomerName, ContactName, Address, City, PostalCode and Country. The table has 5 records (rows).\nREMOVE ADS\nWhat is a Relational Database?\nA relational database defines database relationships in the form of tables. The tables are related to each other - based on data common to each.\nLook at the following three tables \"Customers\", \"Orders\", and \"Shippers\" from the Northwind database:\nCustomers Table\nThe relationship between the \"Customers\" table and the \"Orders\" table is the CustomerID column:\nOrders Table\nThe relationship between the \"Orders\" table and the \"Shippers\" table is the ShipperID column:\nShippers Table",
      "examples": []
    },
    {
      "title": "MySQL SQL",
      "summary": "What is SQL?\nSQL is the standard language for dealing with Relational Databases.\nSQL is used to insert, search, update, and delete database records.\nHow to Use SQL\nThe following SQL statement selects all the records in the \"Customers\" table:\nExampleGet your own SQL Server\nKeep in Mind That...\nSQL keywords are NOT case sensitive: select is the same as SELECT\nIn this tutorial we will write all SQL keywords in upper-case.\nSemicolon after SQL Statements?\nSome database systems require a semicolon at the end of each SQL statement.\nSemicolon is the standard way to separate each SQL statement in database systems that allow more than one SQL statement to be executed in the same call to the server.\nIn this tutorial, we will use semicolon at the end of each SQL statement.\nSome of The Most Important SQL Commands\nSELECT - extracts data from a database\nUPDATE - updates data in a database\nDELETE - deletes data from a database\nINSERT INTO - inserts new data into a database\nCREATE DATABASE - creates a new database\nALTER DATABASE - modifies a database\nCREATE TABLE - creates a new table\nALTER TABLE - modifies a table\nDROP TABLE - deletes a table\nCREATE INDEX - creates an index (search key)\nDROP INDEX - deletes an index",
      "examples": [
        "SELECT * FROM Customers;",
        "select",
        "SELECT",
        "UPDATE",
        "DELETE",
        "INSERT INTO",
        "CREATE DATABASE",
        "ALTER DATABASE",
        "CREATE TABLE",
        "ALTER TABLE",
        "DROP TABLE",
        "CREATE INDEX",
        "DROP INDEX"
      ]
    },
    {
      "title": "MySQL SELECT Statement",
      "summary": "The MySQL SELECT Statement\nThe SELECT statement is used to select data from a database.\nThe data returned is stored in a result table, called the result-set.\nSELECT Syntax\nHere, column1, column2, ... are the field names of the table you want to select data from. If you want to select all the fields available in the table, use the following syntax:\nDemo Database\nIn this tutorial we will use the well-known Northwind sample database.\nBelow is a selection from the \"Customers\" table in the Northwind sample database:\nSELECT Columns Example\nThe following SQL statement selects the \"CustomerName\", \"City\", and \"Country\" columns from the \"Customers\" table:\nExampleGet your own SQL Server\nSELECT * Example\nThe following SQL statement selects ALL the columns from the \"Customers\" table:\nExample\nREMOVE ADS\nThe MySQL SELECT DISTINCT Statement\nThe SELECT DISTINCT statement is used to return only distinct (different) values.\nInside a table, a column often contains many duplicate values; and sometimes you only want to list the different (distinct) values.\nSELECT DISTINCT Syntax\nSELECT Example Without DISTINCT\nThe following SQL statement selects all (including the duplicates) values from the \"Country\" column in the \"Customers\" table:\nExample\nNow, let us use the SELECT DISTINCT statement and see the result.\nSELECT DISTINCT Examples\nThe following SQL statement selects only the DISTINCT values from the \"Country\" column in the \"Customers\" table:\nExample\nThe following SQL statement counts and returns the number of different (distinct) countries in the \"Customers\" table:\nExample",
      "examples": [
        "SELECT column1, column2, ...\nFROM table_name;",
        "SELECT * FROM table_name;",
        "SELECT CustomerName, City, Country FROM Customers;",
        "SELECT * FROM Customers;",
        "SELECT DISTINCT column1, column2, ...\nFROM table_name;",
        "SELECT Country FROM Customers;",
        "SELECT DISTINCT Country FROM Customers;",
        "SELECT COUNT(DISTINCT Country) FROM Customers;",
        "SELECT",
        "SELECT DISTINCT"
      ]
    },
    {
      "title": "MySQL WHERE Clause",
      "summary": "The MySQL WHERE Clause\nThe WHERE clause is used to filter records.\nIt is used to extract only those records that fulfill a specified condition.\nWHERE Syntax\nNote: The WHERE clause is not only used in SELECT statements, it is also used in UPDATE, DELETE, etc.!\nDemo Database\nBelow is a selection from the \"Customers\" table in the Northwind sample database:\nREMOVE ADS\nWHERE Clause Example\nThe following SQL statement selects all the customers from \"Mexico\":\nExampleGet your own SQL Server\nText Fields vs. Numeric Fields\nSQL requires single quotes around text values (most database systems will also allow double quotes).\nHowever, numeric fields should not be enclosed in quotes:\nExample\nOperators in The WHERE Clause\nThe following operators can be used in the WHERE clause:",
      "examples": [
        "SELECT column1, column2, ...\nFROM table_name\nWHERE condition;",
        "SELECT * FROM Customers\nWHERE Country = 'Mexico';",
        "SELECT * FROM Customers\nWHERE CustomerID = 1;",
        "WHERE",
        "SELECT",
        "UPDATE",
        "DELETE"
      ]
    },
    {
      "title": "MySQL AND, OR and NOT Operators",
      "summary": "The MySQL AND, OR and NOT Operators\nThe WHERE clause can be combined with AND, OR, and NOT operators.\nThe AND and OR operators are used to filter records based on more than one condition:\nThe AND operator displays a record if all the conditions separated by AND are TRUE.\nThe OR operator displays a record if any of the conditions separated by OR is TRUE.\nThe NOT operator displays a record if the condition(s) is NOT TRUE.\nAND Syntax\nOR Syntax\nNOT Syntax\nDemo Database\nThe table below shows the complete \"Customers\" table from the Northwind sample database:\nREMOVE ADS\nAND Example\nThe following SQL statement selects all fields from \"Customers\" where country is \"Germany\" AND city is \"Berlin\":\nExampleGet your own SQL Server\nOR Example\nThe following SQL statement selects all fields from \"Customers\" where city is \"Berlin\" OR \"Stuttgart\":\nExample\nThe following SQL statement selects all fields from \"Customers\" where country is \"Germany\" OR \"Spain\":\nExample\nNOT Example\nThe following SQL statement selects all fields from \"Customers\" where country is NOT \"Germany\":\nExample\nCombining AND, OR and NOT\nYou can also combine the AND, OR and NOT operators.\nThe following SQL statement selects all fields from \"Customers\" where country is \"Germany\" AND city must be \"Berlin\" OR \"Stuttgart\" (use parenthesis to form complex expressions):\nExample\nThe following SQL statement selects all fields from \"Customers\" where country is NOT \"Germany\" and NOT \"USA\":\nExample",
      "examples": [
        "SELECT column1, column2, ...\nFROM table_name\nWHERE condition1 AND condition2 AND condition3 ...;",
        "SELECT column1, column2, ...\nFROM table_name\nWHERE condition1 OR condition2 OR condition3 ...;",
        "SELECT column1, column2, ...\nFROM table_name\nWHERE NOT condition;",
        "SELECT * FROM Customers\nWHERE Country = 'Germany' AND City = 'Berlin';",
        "SELECT * FROM Customers\nWHERE City = 'Berlin' OR City = 'Stuttgart';",
        "SELECT * FROM Customers\nWHERE Country = 'Germany' OR Country = 'Spain';",
        "SELECT * FROM Customers\nWHERE NOT Country = 'Germany';",
        "SELECT * FROM Customers\nWHERE Country = 'Germany' AND (City = 'Berlin' OR City = 'Stuttgart');",
        "SELECT * FROM Customers\nWHERE NOT Country = 'Germany' AND NOT Country = 'USA';",
        "WHERE",
        "AND",
        "OR",
        "NOT"
      ]
    },
    {
      "title": "MySQL ORDER BY Keyword",
      "summary": "The MySQL ORDER BY Keyword\nThe ORDER BY keyword is used to sort the result-set in ascending or descending order.\nThe ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.\nORDER BY Syntax\nDemo Database\nBelow is a selection from the \"Customers\" table in the Northwind sample database:\nORDER BY Example\nThe following SQL statement selects all customers from the \"Customers\" table, sorted by the \"Country\" column:\nExampleGet your own SQL Server\nREMOVE ADS\nORDER BY DESC Example\nThe following SQL statement selects all customers from the \"Customers\" table, sorted DESCENDING by the \"Country\" column:\nExample\nORDER BY Several Columns Example\nThe following SQL statement selects all customers from the \"Customers\" table, sorted by the \"Country\" and the \"CustomerName\" column. This means that it orders by Country, but if some rows have the same Country, it orders them by CustomerName:\nExample\nORDER BY Several Columns Example 2\nThe following SQL statement selects all customers from the \"Customers\" table, sorted ascending by the \"Country\" and descending by the \"CustomerName\" column:\nExample",
      "examples": [
        "SELECT column1, column2, ...\nFROM table_name\nORDER BY column1, column2, ... ASC|DESC;",
        "SELECT * FROM Customers\nORDER BY Country;",
        "SELECT * FROM Customers\nORDER BY Country DESC;",
        "SELECT * FROM Customers\nORDER BY Country, CustomerName;",
        "SELECT * FROM Customers\nORDER BY Country ASC, CustomerName DESC;",
        "ORDER BY",
        "DESC"
      ]
    },
    {
      "title": "MySQL INSERT INTO Statement",
      "summary": "The MySQL INSERT INTO Statement\nThe INSERT INTO statement is used to insert new records in a table.\nINSERT INTO Syntax\nIt is possible to write the INSERT INTO statement in two ways:\n1. Specify both the column names and the values to be inserted:\n2. If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query. However, make sure the order of the values is in the same order as the columns in the table. Here, the INSERT INTO syntax would be as follows:\nDemo Database\nBelow is a selection from the \"Customers\" table in the Northwind sample database:\nREMOVE ADS\nINSERT INTO Example\nThe following SQL statement inserts a new record in the \"Customers\" table:\nExampleGet your own SQL Server\nThe selection from the \"Customers\" table will now look like this:\nDid you notice that we did not insert any number into the CustomerID field?\nThe CustomerID column is an auto-increment field and will be generated automatically when a new record is inserted into the table.\nInsert Data Only in Specified Columns\nIt is also possible to only insert data in specific columns.\nThe following SQL statement will insert a new record, but only insert data in the \"CustomerName\", \"City\", and \"Country\" columns (CustomerID will be updated automatically):\nExample\nThe selection from the \"Customers\" table will now look like this:",
      "examples": [
        "INSERT INTO table_name (column1, column2, column3, ...)\nVALUES (value1, value2, value3, ...);",
        "INSERT INTO table_name\nVALUES (value1, value2, value3, ...);",
        "INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)\nVALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');",
        "INSERT INTO Customers (CustomerName, City, Country)\nVALUES ('Cardinal', 'Stavanger', 'Norway');",
        "INSERT INTO"
      ]
    },
    {
      "title": "MySQL NULL Values",
      "summary": "What is a NULL Value?\nA field with a NULL value is a field with no value.\nIf a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be saved with a NULL value.\nNote: A NULL value is different from a zero value or a field that contains spaces. A field with a NULL value is one that has been left blank during record creation!\nHow to Test for NULL Values?\nIt is not possible to test for NULL values with comparison operators, such as =, <, or <>.\nWe will have to use the IS NULL and IS NOT NULL operators instead.\nIS NULL Syntax\nIS NOT NULL Syntax\nDemo Database\nBelow is a selection from the \"Customers\" table in the Northwind sample database:\nREMOVE ADS\nThe IS NULL Operator\nThe IS NULL operator is used to test for empty values (NULL values).\nThe following SQL lists all customers with a NULL value in the \"Address\" field:\nExampleGet your own SQL Server\nTip: Always use IS NULL to look for NULL values.\nThe IS NOT NULL Operator\nThe IS NOT NULL operator is used to test for non-empty values (NOT NULL values).\nThe following SQL lists all customers with a value in the \"Address\" field:\nExample",
      "examples": [
        "SELECT column_names\nFROM table_name\nWHERE column_name IS NULL;",
        "SELECT column_names\nFROM table_name\nWHERE column_name IS NOT NULL;",
        "SELECT CustomerName, ContactName, Address\nFROM Customers\nWHERE Address IS NULL;",
        "SELECT CustomerName, ContactName, Address\nFROM Customers\nWHERE Address IS NOT NULL;",
        "IS NULL",
        "IS NOT NULL"
      ]
    },
    {
      "title": "MySQL UPDATE Statement",
      "summary": "The MySQL UPDATE Statement\nThe UPDATE statement is used to modify the existing records in a table.\nUPDATE Syntax\nNote: Be careful when updating records in a table! Notice the WHERE clause in the UPDATE statement. The WHERE clause specifies which record(s) that should be updated. If you omit the WHERE clause, all records in the table will be updated!\nDemo Database\nBelow is a selection from the \"Customers\" table in the Northwind sample database:\nUPDATE Table\nThe following SQL statement updates the first customer (CustomerID = 1) with a new contact person and a new city.\nExampleGet your own SQL Server\nThe selection from the \"Customers\" table will now look like this:\nREMOVE ADS\nUPDATE Multiple Records\nIt is the WHERE clause that determines how many records will be updated.\nThe following SQL statement will update the PostalCode to 00000 for all records where country is \"Mexico\":\nExample\nThe selection from the \"Customers\" table will now look like this:\nUpdate Warning!\nBe careful when updating records. If you omit the WHERE clause, ALL records will be updated!\nExample\nThe selection from the \"Customers\" table will now look like this:",
      "examples": [
        "UPDATE table_name\nSET column1 = value1, column2 = value2, ...\nWHERE condition;",
        "UPDATE Customers\nSET ContactName = 'Alfred Schmidt', City = 'Frankfurt'\nWHERE CustomerID = 1;",
        "UPDATE Customers\nSET PostalCode = 00000\nWHERE Country = 'Mexico';",
        "UPDATE Customers\nSET PostalCode = 00000;",
        "UPDATE",
        "WHERE"
      ]
    },
    {
      "title": "MySQL DELETE Statement",
      "summary": "The MySQL DELETE Statement\nThe DELETE statement is used to delete existing records in a table.\nDELETE Syntax\nNote: Be careful when deleting records in a table! Notice the WHERE clause in the DELETE statement. The WHERE clause specifies which record(s) should be deleted. If you omit the WHERE clause, all records in the table will be deleted!\nDemo Database\nBelow is a selection from the \"Customers\" table in the Northwind sample database:\nREMOVE ADS\nSQL DELETE Example\nThe following SQL statement deletes the customer \"Alfreds Futterkiste\" from the \"Customers\" table:\nExampleGet your own SQL Server\nThe \"Customers\" table will now look like this:\nDelete All Records\nIt is possible to delete all rows in a table without deleting the table. This means that the table structure, attributes, and indexes will be intact:\nThe following SQL statement deletes all rows in the \"Customers\" table, without deleting the table:\nExample",
      "examples": [
        "DELETE FROM table_name WHERE condition;",
        "DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';",
        "DELETE FROM table_name;",
        "DELETE FROM Customers;",
        "DELETE",
        "WHERE"
      ]
    },
    {
      "title": "MySQL LIMIT Clause",
      "summary": "The MySQL LIMIT Clause\nThe LIMIT clause is used to specify the number of records to return.\nThe LIMIT clause is useful on large tables with thousands of records. Returning a large number of records can impact performance.\nLIMIT Syntax\nDemo Database\nBelow is a selection from the \"Customers\" table in the Northwind sample database:\nREMOVE ADS\nMySQL LIMIT Examples\nThe following SQL statement selects the first three records from the \"Customers\" table:\nExampleGet your own SQL Server\nWhat if we want to select records 4 - 6 (inclusive)?\nMySQL provides a way to handle this: by using OFFSET.\nThe SQL query below says \"return only 3 records, start on record 4 (OFFSET 3)\":\nExample\nADD a WHERE CLAUSE\nThe following SQL statement selects the first three records from the \"Customers\" table, where the country is \"Germany\":\nExample\nADD an ORDER BY CLAUSE\nThe following SQL statement sorts the customers by country before returning the first three records from the selection:\nExample",
      "examples": [
        "SELECT column_name(s)\nFROM table_name\nWHERE condition\nLIMIT number;",
        "SELECT * FROM Customers\nLIMIT 3;",
        "SELECT * FROM Customers\nLIMIT 3 OFFSET 3;",
        "SELECT * FROM Customers\nWHERE Country='Germany'\nLIMIT 3;",
        "SELECT * FROM Customers\nORDER BY Country\nLIMIT 3;",
        "LIMIT"
      ]
    },
    {
      "title": "MySQL MIN() and MAX() Functions",
      "summary": "MySQL MIN() and MAX() Functions\nThe MIN() function returns the smallest value of the selected column.\nThe MAX() function returns the largest value of the selected column.\nMIN() Syntax\nMAX() Syntax\nDemo Database\nBelow is a selection from the \"Products\" table in the Northwind sample database:\nMIN() Example\nThe following SQL statement finds the price of the cheapest product:\nExampleGet your own SQL Server\nREMOVE ADS\nMAX() Example\nThe following SQL statement finds the price of the most expensive product:\nExample",
      "examples": [
        "SELECT MIN(column_name)\nFROM table_name\nWHERE condition;",
        "SELECT MAX(column_name)\nFROM table_name\nWHERE condition;",
        "SELECT MIN(Price) AS SmallestPrice\nFROM Products;",
        "SELECT MAX(Price) AS LargestPrice\nFROM Products;",
        "MIN()",
        "MAX()"
      ]
    },
    {
      "title": "MySQL COUNT(), AVG() and SUM() Functions",
      "summary": "MySQL COUNT(), AVG() and SUM() Functions\nThe COUNT() function returns the number of rows that matches a specified criterion.\nCOUNT() Syntax\nThe AVG() function returns the average value of a numeric column.\nAVG() Syntax\nThe SUM() function returns the total sum of a numeric column.\nSUM() Syntax\nDemo Database\nBelow is a selection from the \"Products\" table in the Northwind sample database:\nREMOVE ADS\nCOUNT() Example\nThe following SQL statement finds the number of products:\nExampleGet your own SQL Server\nNote: NULL values are not counted.\nAVG() Example\nThe following SQL statement finds the average price of all products:\nExample\nNote: NULL values are ignored.\nDemo Database\nBelow is a selection from the \"OrderDetails\" table in the Northwind sample database:\nSUM() Example\nThe following SQL statement finds the sum of the \"Quantity\" fields in the \"OrderDetails\" table:\nExample\nNote: NULL values are ignored.",
      "examples": [
        "SELECT COUNT(column_name)\nFROM table_name\nWHERE condition;",
        "SELECT AVG(column_name)\nFROM table_name\nWHERE condition;",
        "SELECT SUM(column_name)\nFROM table_name\nWHERE condition;",
        "SELECT COUNT(ProductID)\nFROM Products;",
        "SELECT AVG(Price)\nFROM Products;",
        "SELECT SUM(Quantity)\nFROM OrderDetails;",
        "COUNT()",
        "AVG()",
        "SUM()"
      ]
    },
    {
      "title": "MySQL LIKE Operator",
      "summary": "The MySQL LIKE Operator\nThe LIKE operator is used in a WHERE clause to search for a specified pattern in a column.\nThere are two wildcards often used in conjunction with the LIKE operator:\nThe percent sign (%) represents zero, one, or multiple characters\nThe underscore sign (_) represents one, single character\nThe percent sign and the underscore can also be used in combinations!\nLIKE Syntax\nTip: You can also combine any number of conditions using AND or OR operators.\nHere are some examples showing different LIKE operators with '%' and '_' wildcards:\nDemo Database\nThe table below shows the complete \"Customers\" table from the Northwind sample database:\nREMOVE ADS\nSQL LIKE Examples\nThe following SQL statement selects all customers with a CustomerName starting with \"a\":\nExampleGet your own SQL Server\nThe following SQL statement selects all customers with a CustomerName ending with \"a\":\nExample\nThe following SQL statement selects all customers with a CustomerName that have \"or\" in any position:\nExample\nThe following SQL statement selects all customers with a CustomerName that have \"r\" in the second position:\nExample\nThe following SQL statement selects all customers with a CustomerName that starts with \"a\" and are at least 3 characters in length:\nExample\nThe following SQL statement selects all customers with a ContactName that starts with \"a\" and ends with \"o\":\nExample\nThe following SQL statement selects all customers with a CustomerName that does NOT start with \"a\":\nExample",
      "examples": [
        "SELECT column1, column2, ...\nFROM table_name\nWHERE columnN LIKE pattern;",
        "SELECT * FROM Customers\nWHERE CustomerName LIKE 'a%';",
        "SELECT * FROM Customers\nWHERE CustomerName LIKE '%a';",
        "SELECT * FROM Customers\nWHERE CustomerName LIKE '%or%';",
        "SELECT * FROM Customers\nWHERE CustomerName LIKE '_r%';",
        "SELECT * FROM Customers\nWHERE CustomerName LIKE 'a__%';",
        "SELECT * FROM Customers\nWHERE ContactName LIKE 'a%o';",
        "SELECT * FROM Customers\nWHERE CustomerName NOT LIKE 'a%';",
        "LIKE",
        "WHERE",
        "AND",
        "OR"
      ]
    },
    {
      "title": "MySQL Wildcards",
      "summary": "MySQL Wildcard Characters\nA wildcard character is used to substitute one or more characters in a string.\nWildcard characters are used with the LIKE operator. The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.\nWildcard Characters in MySQL\nThe wildcards can also be used in combinations!\nHere are some examples showing different LIKE operators with '%' and '_' wildcards:\nDemo Database\nThe table below shows the complete \"Customers\" table from the Northwind sample database:\nREMOVE ADS\nUsing the % Wildcard\nThe following SQL statement selects all customers with a City starting with \"ber\":\nExampleGet your own SQL Server\nThe following SQL statement selects all customers with a City containing the pattern \"es\":\nExample\nUsing the _ Wildcard\nThe following SQL statement selects all customers with a City starting with any character, followed by \"ondon\":\nExample\nThe following SQL statement selects all customers with a City starting with \"L\", followed by any character, followed by \"n\", followed by any character, followed by \"on\":\nExample",
      "examples": [
        "SELECT * FROM Customers\nWHERE City LIKE 'ber%';",
        "SELECT * FROM Customers\nWHERE City LIKE '%es%';",
        "SELECT * FROM Customers\nWHERE City LIKE '_ondon';",
        "SELECT * FROM Customers\nWHERE City LIKE 'L_n_on';",
        "LIKE",
        "WHERE"
      ]
    },
    {
      "title": "MySQL IN Operator",
      "summary": "The MySQL IN Operator\nThe IN operator allows you to specify multiple values in a WHERE clause.\nThe IN operator is a shorthand for multiple OR conditions.\nIN Syntax\nor:\nDemo Database\nThe table below shows the complete \"Customers\" table from the Northwind sample database:\nREMOVE ADS\nIN Operator Examples\nThe following SQL statement selects all customers that are located in \"Germany\", \"France\" or \"UK\":\nExampleGet your own SQL Server\nThe following SQL statement selects all customers that are NOT located in \"Germany\", \"France\" or \"UK\":\nExample\nThe following SQL statement selects all customers that are from the same countries as the suppliers:\nExample",
      "examples": [
        "SELECT column_name(s)\nFROM table_name\nWHERE column_name IN (value1, value2, ...);",
        "SELECT column_name(s)\nFROM table_name\nWHERE column_name IN (SELECT STATEMENT);",
        "SELECT * FROM Customers\nWHERE Country IN ('Germany', 'France', 'UK');",
        "SELECT * FROM Customers\nWHERE Country NOT IN ('Germany', 'France', 'UK');",
        "SELECT * FROM Customers\nWHERE Country IN (SELECT Country FROM Suppliers);",
        "IN",
        "WHERE",
        "OR"
      ]
    },
    {
      "title": "MySQL BETWEEN Operator",
      "summary": "The MySQL BETWEEN Operator\nThe BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.\nThe BETWEEN operator is inclusive: begin and end values are included.\nBETWEEN Syntax\nDemo Database\nBelow is a selection from the \"Products\" table in the Northwind sample database:\nBETWEEN Example\nThe following SQL statement selects all products with a price between 10 and 20:\nExampleGet your own SQL Server\nREMOVE ADS\nNOT BETWEEN Example\nTo display the products outside the range of the previous example, use NOT BETWEEN:\nExample\nBETWEEN with IN Example\nThe following SQL statement selects all products with a price between 10 and 20. In addition; do not show products with a CategoryID of 1,2, or 3:\nExample\nBETWEEN Text Values Example\nThe following SQL statement selects all products with a ProductName between \"Carnarvon Tigers\" and \"Mozzarella di Giovanni\":\nExample\nThe following SQL statement selects all products with a ProductName between \"Carnarvon Tigers\" and \"Chef Anton's Cajun Seasoning\":\nExample\nNOT BETWEEN Text Values Example\nThe following SQL statement selects all products with a ProductName not between \"Carnarvon Tigers\" and \"Mozzarella di Giovanni\":\nExample\nSample Table\nBelow is a selection from the \"Orders\" table in the Northwind sample database:\nBETWEEN Dates Example\nThe following SQL statement selects all orders with an OrderDate between '01-July-1996' and '31-July-1996':\nExample",
      "examples": [
        "SELECT column_name(s)\nFROM table_name\nWHERE column_name BETWEEN value1 AND value2;",
        "SELECT * FROM Products\nWHERE Price BETWEEN 10 AND 20;",
        "SELECT * FROM Products\nWHERE Price NOT BETWEEN 10 AND 20;",
        "SELECT * FROM Products\nWHERE Price BETWEEN 10 AND 20\nAND CategoryID NOT IN (1,2,3);",
        "SELECT * FROM Products\nWHERE ProductName BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'\nORDER BY ProductName;",
        "SELECT * FROM Products\nWHERE ProductName BETWEEN \"Carnarvon Tigers\" AND \"Chef Anton's Cajun Seasoning\"\nORDER BY ProductName;",
        "SELECT * FROM Products\nWHERE ProductName NOT BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'\nORDER BY ProductName;",
        "SELECT * FROM Orders\nWHERE OrderDate BETWEEN '1996-07-01' AND '1996-07-31';",
        "BETWEEN",
        "NOT BETWEEN"
      ]
    },
    {
      "title": "MySQL Aliases",
      "summary": "MySQL Aliases\nAliases are used to give a table, or a column in a table, a temporary name.\nAliases are often used to make column names more readable.\nAn alias only exists for the duration of that query.\nAn alias is created with the AS keyword.\nAlias Column Syntax\nAlias Table Syntax\nDemo Database\nIn this tutorial we will use the well-known Northwind sample database.\nBelow is a selection from the \"Customers\" table:\nAnd a selection from the \"Orders\" table:\nREMOVE ADS\nAlias for Columns Examples\nThe following SQL statement creates two aliases, one for the CustomerID column and one for the CustomerName column:\nExampleGet your own SQL Server\nThe following SQL statement creates two aliases, one for the CustomerName column and one for the ContactName column. Note: Single or double quotation marks are required if the alias name contains spaces:\nExample\nThe following SQL statement creates an alias named \"Address\" that combine four columns (Address, PostalCode, City and Country):\nExample\nAlias for Tables Example\nThe following SQL statement selects all the orders from the customer with CustomerID=4 (Around the Horn). We use the \"Customers\" and \"Orders\" tables, and give them the table aliases of \"c\" and \"o\" respectively (Here we use aliases to make the SQL shorter):\nExample\nThe following SQL statement is the same as above, but without aliases:\nExample\nAliases can be useful when:\nThere are more than one table involved in a query\nFunctions are used in the query\nColumn names are big or not very readable\nTwo or more columns are combined together",
      "examples": [
        "SELECT column_name AS alias_name\nFROM table_name;",
        "SELECT column_name(s)\nFROM table_name AS alias_name;",
        "SELECT CustomerID AS ID, CustomerName AS Customer\nFROM Customers;",
        "SELECT CustomerName AS Customer, ContactName AS \"Contact Person\"\nFROM Customers;",
        "SELECT CustomerName, CONCAT_WS(', ', Address, PostalCode, City, Country) AS Address\nFROM Customers;",
        "SELECT o.OrderID, o.OrderDate, c.CustomerName\nFROM Customers AS c, Orders AS o\nWHERE c.CustomerName='Around the Horn' AND c.CustomerID=o.CustomerID;",
        "SELECT Orders.OrderID, Orders.OrderDate, Customers.CustomerName\nFROM Customers, Orders\nWHERE Customers.CustomerName='Around the Horn' AND Customers.CustomerID=Orders.CustomerID;",
        "AS"
      ]
    },
    {
      "title": "MySQL Joins",
      "summary": "MySQL Joining Tables\nA JOIN clause is used to combine rows from two or more tables, based on a related column between them.\nLet's look at a selection from the \"Orders\" table:\nThen, look at a selection from the \"Customers\" table:\nNotice that the \"CustomerID\" column in the \"Orders\" table refers to the \"CustomerID\" in the \"Customers\" table. The relationship between the two tables above is the \"CustomerID\" column.\nThen, we can create the following SQL statement (that contains an INNER JOIN), that selects records that have matching values in both tables:\nExampleGet your own SQL Server\nand it will produce something like this:\nREMOVE ADS\nSupported Types of Joins in MySQL\nINNER JOIN: Returns records that have matching values in both tables\nLEFT JOIN: Returns all records from the left table, and the matched records from the right table\nRIGHT JOIN: Returns all records from the right table, and the matched records from the left table\nCROSS JOIN: Returns all records from both tables",
      "examples": [
        "SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate\nFROM Orders\nINNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;",
        "JOIN",
        "INNER JOIN",
        "LEFT JOIN",
        "RIGHT JOIN",
        "CROSS JOIN"
      ]
    },
    {
      "title": "MySQL INNER JOIN Keyword",
      "summary": "MySQL INNER JOIN Keyword\nThe INNER JOIN keyword selects records that have matching values in both tables.\nINNER JOIN Syntax\nDemo Database\nIn this tutorial we will use the well-known Northwind sample database.\nBelow is a selection from the \"Orders\" table:\nAnd a selection from the \"Customers\" table:\nREMOVE ADS\nMySQL INNER JOIN Example\nThe following SQL statement selects all orders with customer information:\nExampleGet your own SQL Server\nNote: The INNER JOIN keyword selects all rows from both tables as long as there is a match between the columns. If there are records in the \"Orders\" table that do not have matches in \"Customers\", these orders will not be shown!\nJOIN Three Tables\nThe following SQL statement selects all orders with customer and shipper information:\nExample",
      "examples": [
        "SELECT column_name(s)\nFROM table1\nINNER JOIN table2\nON table1.column_name = table2.column_name;",
        "SELECT Orders.OrderID, Customers.CustomerName\nFROM Orders\nINNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;",
        "SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName\nFROM ((Orders\nINNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)\nINNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);",
        "INNER JOIN"
      ]
    },
    {
      "title": "MySQL LEFT JOIN Keyword",
      "summary": "MySQL LEFT JOIN Keyword\nThe LEFT JOIN keyword returns all records from the left table (table1), and the matching records (if any) from the right table (table2).\nLEFT JOIN Syntax\nDemo Database\nIn this tutorial we will use the well-known Northwind sample database.\nBelow is a selection from the \"Customers\" table:\nAnd a selection from the \"Orders\" table:\nMySQL LEFT JOIN Example\nThe following SQL statement will select all customers, and any orders they might have:\nExampleGet your own SQL Server\nNote: The LEFT JOIN keyword returns all records from the left table (Customers), even if there are no matches in the right table (Orders).",
      "examples": [
        "SELECT column_name(s)\nFROM table1\nLEFT JOIN table2\nON table1.column_name = table2.column_name;",
        "SELECT Customers.CustomerName, Orders.OrderID\nFROM Customers\nLEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID\nORDER BY Customers.CustomerName;",
        "LEFT JOIN"
      ]
    },
    {
      "title": "MySQL RIGHT JOIN Keyword",
      "summary": "MySQL RIGHT JOIN Keyword\nThe RIGHT JOIN keyword returns all records from the right table (table2), and the matching records (if any) from the left table (table1).\nRIGHT JOIN Syntax\nDemo Database\nIn this tutorial we will use the well-known Northwind sample database.\nBelow is a selection from the \"Orders\" table:\nAnd a selection from the \"Employees\" table:\nMySQL RIGHT JOIN Example\nThe following SQL statement will return all employees, and any orders they might have placed:\nExampleGet your own SQL Server\nNote: The RIGHT JOIN keyword returns all records from the right table (Employees), even if there are no matches in the left table (Orders).\nREMOVE ADS",
      "examples": [
        "SELECT column_name(s)\nFROM table1\nRIGHT JOIN table2\nON table1.column_name = table2.column_name;",
        "SELECT Orders.OrderID, Employees.LastName, Employees.FirstName\nFROM Orders\nRIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\nORDER BY Orders.OrderID;",
        "RIGHT JOIN"
      ]
    },
    {
      "title": "MySQL CROSS JOIN Keyword",
      "summary": "SQL CROSS JOIN Keyword\nThe CROSS JOIN keyword returns all records from both tables (table1 and table2).\nCROSS JOIN Syntax\nNote: CROSS JOIN can potentially return very large result-sets!\nDemo Database\nIn this tutorial we will use the well-known Northwind sample database.\nBelow is a selection from the \"Customers\" table:\nAnd a selection from the \"Orders\" table:\nREMOVE ADS\nMySQL CROSS JOIN Example\nThe following SQL statement selects all customers, and all orders:\nExampleGet your own SQL Server\nNote: The CROSS JOIN keyword returns all matching records from both tables whether the other table matches or not. So, if there are rows in \"Customers\" that do not have matches in \"Orders\", or if there are rows in \"Orders\" that do not have matches in \"Customers\", those rows will be listed as well.\nIf you add a WHERE clause (if table1 and table2 has a relationship), the CROSS JOIN will produce the same result as the INNER JOIN clause:\nExample",
      "examples": [
        "SELECT column_name(s)\nFROM table1\nCROSS JOIN table2;",
        "SELECT Customers.CustomerName, Orders.OrderID\nFROM Customers\nCROSS JOIN Orders;",
        "SELECT Customers.CustomerName, Orders.OrderID\nFROM Customers\nCROSS JOIN Orders\nWHERE Customers.CustomerID=Orders.CustomerID;",
        "CROSS JOIN",
        "WHERE",
        "INNER JOIN"
      ]
    },
    {
      "title": "MySQL Self Join",
      "summary": "MySQL Self Join\nA self join is a regular join, but the table is joined with itself.\nSelf Join Syntax\nT1 and T2 are different table aliases for the same table.\nDemo Database\nIn this tutorial we will use the well-known Northwind sample database.\nBelow is a selection from the \"Customers\" table:\nMySQL Self Join Example\nThe following SQL statement matches customers that are from the same city:\nExampleGet your own SQL Server",
      "examples": [
        "SELECT column_name(s)\nFROM table1 T1, table1 T2\nWHERE condition;",
        "SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City\nFROM Customers A, Customers B\nWHERE A.CustomerID <> B.CustomerID\nAND A.City = B.City\nORDER BY A.City;"
      ]
    },
    {
      "title": "MySQL UNION Operator",
      "summary": "The MySQL UNION Operator\nThe UNION operator is used to combine the result-set of two or more SELECT statements.\nThe UNION operator automatically removes duplicate rows from the result set.\nRequirements for UNION:\nEvery SELECT statement within UNION must have the same number of columns\nThe columns must also have similar data types\nThe columns in every SELECT statement must also be in the same order\nUNION Syntax\nNote: The column names in the result-set are usually equal to the column names in the first SELECT statement.\nDemo Database\nIn this tutorial we will use the well-known Northwind sample database.\nBelow is a selection from the \"Customers\" table:\nAnd a selection from the \"Suppliers\" table:\nREMOVE ADS\nSQL UNION Example\nThe following SQL statement returns the cities (only distinct values) from both the \"Customers\" and the \"Suppliers\" table:\nExampleGet your own SQL Server\nNote: If some customers or suppliers have the same city, each city will only be listed once, because UNION selects only distinct values. Use UNION ALL to also select duplicate values!\nSQL UNION With WHERE\nThe following SQL statement returns the German cities (only distinct values) from both the \"Customers\" and the \"Suppliers\" table:\nExample\nAnother UNION Example\nThe following SQL statement lists all customers and suppliers:\nExample\nNotice the \"AS Type\" above - it is an alias. SQL Aliases are used to give a table or a column a temporary name. An alias only exists for the duration of the query. So, here we have created a temporary column named \"Type\", that list whether the contact person is a \"Customer\" or a \"Supplier\".",
      "examples": [
        "SELECT column_name(s) FROM table1\nUNION\nSELECT column_name(s) FROM table2;",
        "SELECT City FROM Customers\nUNION\nSELECT City FROM Suppliers\nORDER BY City;",
        "SELECT City, Country FROM Customers\nWHERE Country='Germany'\nUNION\nSELECT City, Country FROM Suppliers\nWHERE Country='Germany'\nORDER BY City;",
        "SELECT 'Customer' AS Type, ContactName, City, Country\nFROM Customers\nUNION\nSELECT 'Supplier', ContactName, City, Country\nFROM Suppliers;",
        "UNION",
        "SELECT",
        "UNION ALL"
      ]
    },
    {
      "title": "MySQL UNION ALL Operator",
      "summary": "The MySQL UNION ALL Operator\nThe UNION ALL operator is used to combine the result-set of two or more SELECT statements.\nThe UNION ALL operator includes all rows from each statement, including any duplicates.\nRequirements for UNION ALL:\nEvery SELECT statement within UNION must have the same number of columns\nThe columns must also have similar data types\nThe columns in every SELECT statement must also be in the same order\nUNION ALL Syntax\nWhile the UNION operator removes duplicate values by default, the UNION ALL includes duplicate values:\nNote: The column names in the result-set are usually equal to the column names in the first SELECT statement.\nDemo Database\nIn this tutorial we will use the well-known Northwind sample database.\nBelow is a selection from the \"Customers\" table:\nAnd a selection from the \"Suppliers\" table:\nREMOVE ADS\nSQL UNION ALL Example\nThe following SQL statement returns the cities (duplicate values also) from both the \"Customers\" and the \"Suppliers\" table:\nExampleGet your own SQL Server\nSQL UNION ALL With WHERE\nThe following SQL statement returns the German cities (duplicate values also) from both the \"Customers\" and the \"Suppliers\" table:\nExample",
      "examples": [
        "SELECT column_name(s) FROM table1\nUNION ALL\nSELECT column_name(s) FROM table2;",
        "SELECT City FROM Customers\nUNION ALL\nSELECT City FROM Suppliers\nORDER BY City;",
        "SELECT City, Country FROM Customers\nWHERE Country='Germany'\nUNION ALL\nSELECT City, Country FROM Suppliers\nWHERE Country='Germany'\nORDER BY City;",
        "UNION ALL",
        "SELECT",
        "UNION"
      ]
    },
    {
      "title": "MySQL GROUP BY Statement",
      "summary": "The MySQL GROUP BY Statement\nThe GROUP BY statement groups rows that have the same values into summary rows, like \"find the number of customers in each country\".\nThe GROUP BY statement is often used with aggregate functions (COUNT(), MAX(), MIN(), SUM(), AVG()) to group the result-set by one or more columns.\nGROUP BY Syntax\nDemo Database\nBelow is a selection from the \"Customers\" table in the Northwind sample database:\nREMOVE ADS\nMySQL GROUP BY Examples\nThe following SQL statement lists the number of customers in each country:\nExampleGet your own SQL Server\nThe following SQL statement lists the number of customers in each country, sorted high to low:\nExample\nDemo Database\nBelow is a selection from the \"Orders\" table in the Northwind sample database:\nAnd a selection from the \"Shippers\" table:\nGROUP BY With JOIN Example\nThe following SQL statement lists the number of orders sent by each shipper:\nExample",
      "examples": [
        "SELECT column_name(s)\nFROM table_name\nWHERE condition\nGROUP BY column_name(s)\nORDER BY column_name(s);",
        "SELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country;",
        "SELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country\nORDER BY COUNT(CustomerID) DESC;",
        "SELECT Shippers.ShipperName, COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders\nLEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID\nGROUP BY ShipperName;",
        "GROUP BY",
        "COUNT()",
        "MAX()",
        "MIN()",
        "SUM()",
        "AVG()"
      ]
    },
    {
      "title": "MySQL HAVING Clause",
      "summary": "The MySQL HAVING Clause\nThe HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions.\nHAVING Syntax\nDemo Database\nBelow is a selection from the \"Customers\" table in the Northwind sample database:\nMySQL HAVING Examples\nThe following SQL statement lists the number of customers in each country. Only include countries with more than 5 customers:\nExampleGet your own SQL Server\nThe following SQL statement lists the number of customers in each country, sorted high to low (Only include countries with more than 5 customers):\nExample\nREMOVE ADS\nDemo Database\nBelow is a selection from the \"Orders\" table in the Northwind sample database:\nAnd a selection from the \"Employees\" table:\nMore HAVING Examples\nThe following SQL statement lists the employees that have registered more than 10 orders:\nExample\nThe following SQL statement lists if the employees \"Davolio\" or \"Fuller\" have registered more than 25 orders:\nExample",
      "examples": [
        "SELECT column_name(s)\nFROM table_name\nWHERE condition\nGROUP BY column_name(s)\nHAVING condition\nORDER BY column_name(s);",
        "SELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country\nHAVING COUNT(CustomerID) > 5;",
        "SELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country\nHAVING COUNT(CustomerID) > 5\nORDER BY COUNT(CustomerID) DESC;",
        "SELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders\nFROM (Orders\nINNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID)\nGROUP BY LastName\nHAVING COUNT(Orders.OrderID) > 10;",
        "SELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders\nFROM Orders\nINNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\nWHERE LastName = 'Davolio' OR LastName = 'Fuller'\nGROUP BY LastName\nHAVING COUNT(Orders.OrderID) > 25;",
        "HAVING",
        "WHERE"
      ]
    },
    {
      "title": "MySQL EXISTS Operator",
      "summary": "The MySQL EXISTS Operator\nThe EXISTS operator is used to test for the existence of any record in a subquery.\nThe EXISTS operator returns TRUE if the subquery returns one or more records.\nEXISTS Syntax\nDemo Database\nBelow is a selection from the \"Products\" table in the Northwind sample database:\nAnd a selection from the \"Suppliers\" table:\nREMOVE ADS\nMySQL EXISTS Examples\nThe following SQL statement returns TRUE and lists the suppliers with a product price less than 20:\nExampleGet your own SQL Server\nThe following SQL statement returns TRUE and lists the suppliers with a product price equal to 22:\nExample",
      "examples": [
        "SELECT column_name(s)\nFROM table_name\nWHERE EXISTS\n(SELECT column_name FROM table_name WHERE condition);",
        "SELECT SupplierName\nFROM Suppliers\nWHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price < 20);",
        "EXISTS"
      ]
    },
    {
      "title": "MySQL ANY and ALL Operators",
      "summary": "The MySQL ANY and ALL Operators\nThe ANY and ALL operators allow you to perform a comparison between a single column value and a range of other values.\nThe ANY Operator\nThe ANY operator:\nreturns a boolean value as a result\nreturns TRUE if ANY of the subquery values meet the condition\nANY means that the condition will be true if the operation is true for any of the values in the range.\nANY Syntax\nNote: The operator must be a standard comparison operator (=, <>, !=, >, >=, <, or <=).\nThe ALL Operator\nThe ALL operator:\nreturns a boolean value as a result\nreturns TRUE if ALL of the subquery values meet the condition\nis used with SELECT, WHERE and HAVING statements\nALL means that the condition will be true only if the operation is true for all values in the range.\nALL Syntax With SELECT\nALL Syntax With WHERE or HAVING\nNote: The operator must be a standard comparison operator (=, <>, !=, >, >=, <, or <=).\nDemo Database\nBelow is a selection from the \"Products\" table in the Northwind sample database:\nAnd a selection from the \"OrderDetails\" table:\nREMOVE ADS\nSQL ANY Examples\nThe following SQL statement lists the ProductName if it finds ANY records in the OrderDetails table has Quantity equal to 10 (this will return TRUE because the Quantity column has some values of 10):\nExampleGet your own SQL Server\nThe following SQL statement lists the ProductName if it finds ANY records in the OrderDetails table has Quantity larger than 99 (this will return TRUE because the Quantity column has some values larger than 99):\nExample\nThe following SQL statement lists the ProductName if it finds ANY records in the OrderDetails table has Quantity larger than 1000 (this will return FALSE because the Quantity column has no values larger than 1000):\nExample\nSQL ALL Examples\nThe following SQL statement lists ALL the product names:\nExample\nThe following SQL statement lists the ProductName if ALL the records in the OrderDetails table has Quantity equal to 10. This will of course return FALSE because the Quantity column has many different values (not only the value of 10):\nExample",
      "examples": [
        "SELECT column_name(s)\nFROM table_name\nWHERE column_name operator ANY\n(SELECT column_name\nFROM table_name\nWHERE condition);",
        "SELECT ALL column_name(s)\nFROM table_name\nWHERE condition;",
        "SELECT ProductName\nFROM Products\nWHERE ProductID = ANY\n(SELECT ProductID\nFROM OrderDetails\nWHERE Quantity = 10);",
        "SELECT ProductName\nFROM Products\nWHERE ProductID = ANY\n(SELECT ProductID\nFROM OrderDetails\nWHERE Quantity > 1000);",
        "SELECT ALL ProductName\nFROM Products\nWHERE TRUE;",
        "ANY",
        "ALL",
        "SELECT",
        "WHERE",
        "HAVING"
      ]
    },
    {
      "title": "MySQL INSERT INTO SELECT Statement",
      "summary": "The MySQL INSERT INTO SELECT Statement\nThe INSERT INTO SELECT statement copies data from one table and inserts it into another table.\nThe INSERT INTO SELECT statement requires that the data types in source and target tables matches.\nNote: The existing records in the target table are unaffected.\nINSERT INTO SELECT Syntax\nCopy all columns from one table to another table:\nCopy only some columns from one table into another table:\nDemo Database\nIn this tutorial we will use the well-known Northwind sample database.\nBelow is a selection from the \"Customers\" table:\nAnd a selection from the \"Suppliers\" table:\nREMOVE ADS\nMySQL INSERT INTO SELECT Examples\nThe following SQL statement copies \"Suppliers\" into \"Customers\" (the columns that are not filled with data, will contain NULL):\nExampleGet your own SQL Server\nThe following SQL statement copies \"Suppliers\" into \"Customers\" (fill all columns):\nExample\nThe following SQL statement copies only the German suppliers into \"Customers\":\nExample",
      "examples": [
        "INSERT INTO table2\nSELECT * FROM table1\nWHERE condition;",
        "INSERT INTO table2 (column1, column2, column3, ...)\nSELECT column1, column2, column3, ...\nFROM table1\nWHERE condition;",
        "INSERT INTO Customers (CustomerName, City, Country)\nSELECT SupplierName, City, Country FROM Suppliers;",
        "INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)\nSELECT SupplierName, ContactName, Address, City, PostalCode, Country FROM Suppliers;",
        "INSERT INTO Customers (CustomerName, City, Country)\nSELECT SupplierName, City, Country FROM Suppliers\nWHERE Country='Germany';",
        "INSERT INTO SELECT"
      ]
    },
    {
      "title": "MySQL CASE Statement",
      "summary": "The MySQL CASE Statement\nThe CASE statement goes through conditions and returns a value when the first condition is met (like an if-then-else statement). So, once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the ELSE clause.\nIf there is no ELSE part and no conditions are true, it returns NULL.\nCASE Syntax\nDemo Database\nBelow is a selection from the \"OrderDetails\" table in the Northwind sample database:\nREMOVE ADS\nMySQL CASE Examples\nThe following SQL goes through conditions and returns a value when the first condition is met:\nExampleGet your own SQL Server\nThe following SQL will order the customers by City. However, if City is NULL, then order by Country:\nExample",
      "examples": [
        "CASE\nWHEN condition1 THEN result1\nWHEN condition2 THEN result2\nWHEN conditionN THEN resultN\nELSE result\nEND;",
        "SELECT OrderID, Quantity,\nCASE\nWHEN Quantity > 30 THEN 'The quantity is greater than 30'\nWHEN Quantity = 30 THEN 'The quantity is 30'\nELSE 'The quantity is under 30'\nEND AS QuantityText\nFROM OrderDetails;",
        "SELECT CustomerName, City, Country\nFROM Customers\nORDER BY\n(CASE\nWHEN City IS NULL THEN Country\nELSE City\nEND);",
        "CASE",
        "ELSE"
      ]
    },
    {
      "title": "MySQL NULL Functions",
      "summary": "MySQL IFNULL() and COALESCE() Functions\nLook at the following \"Products\" table:\nSuppose that the \"UnitsOnOrder\" column is optional, and may contain NULL values.\nLook at the following SELECT statement:\nIn the example above, if any of the \"UnitsOnOrder\" values are NULL, the result will be NULL.\nMySQL IFNULL() Function\nThe MySQL IFNULL() function lets you return an alternative value if an expression is NULL.\nThe example below returns 0 if the value is NULL:\nMySQL COALESCE() Function\nOr we can use the COALESCE() function, like this:",
      "examples": [
        "SELECT ProductName, UnitPrice * (UnitsInStock + UnitsOnOrder)\nFROM Products;",
        "SELECT ProductName, UnitPrice * (UnitsInStock + IFNULL(UnitsOnOrder, 0))\nFROM Products;",
        "SELECT ProductName, UnitPrice * (UnitsInStock + COALESCE(UnitsOnOrder, 0))\nFROM Products;",
        "IFNULL()",
        "COALESCE()"
      ]
    },
    {
      "title": "MySQL Comments",
      "summary": "MySQL Comments\nComments are used to explain sections of SQL statements, or to prevent execution of SQL statements.\nSingle Line Comments\nSingle line comments start with --.\nAny text between -- and the end of the line will be ignored (will not be executed).\nThe following example uses a single-line comment as an explanation:\nExampleGet your own SQL Server\nThe following example uses a single-line comment to ignore the end of a line:\nExample\nThe following example uses a single-line comment to ignore a statement:\nExample\nREMOVE ADS\nMulti-line Comments\nMulti-line comments start with /* and end with */.\nAny text between /* and */ will be ignored.\nThe following example uses a multi-line comment as an explanation:\nExample\nThe following example uses a multi-line comment to ignore many statements:\nExample\nTo ignore just a part of a statement, also use the /* */ comment.\nThe following example uses a comment to ignore part of a line:\nExample\nThe following example uses a comment to ignore part of a statement:\nExample",
      "examples": [
        "-- Select all:\nSELECT * FROM Customers;",
        "SELECT * FROM Customers -- WHERE City='Berlin';",
        "-- SELECT * FROM Customers;\nSELECT * FROM Products;",
        "/*Select all the columns\nof all the records\nin the Customers table:*/\nSELECT * FROM Customers;",
        "/*SELECT * FROM Customers;\nSELECT * FROM Products;\nSELECT * FROM Orders;\nSELECT * FROM Categories;*/\nSELECT * FROM Suppliers;",
        "SELECT CustomerName, /*City,*/ Country FROM Customers;",
        "SELECT * FROM Customers WHERE (CustomerName LIKE 'L%'\nOR CustomerName LIKE 'R%' /*OR CustomerName LIKE 'S%'\nOR CustomerName LIKE 'T%'*/ OR CustomerName LIKE 'W%')\nAND Country='USA'\nORDER BY CustomerName;",
        "--",
        "/*",
        "*/"
      ]
    },
    {
      "title": "MySQL Operators",
      "summary": "MySQL Arithmetic Operators\nMySQL Bitwise Operators\nMySQL Comparison Operators\nREMOVE ADS\nMySQL Compound Operators\nMySQL Logical Operators",
      "examples": []
    },
    {
      "title": "MySQL CREATE DATABASE Statement",
      "summary": "The MySQL CREATE DATABASE Statement\nThe CREATE DATABASE statement is used to create a new SQL database.\nSyntax\nCREATE DATABASE Example\nThe following SQL statement creates a database called \"testDB\":\nExampleGet your own SQL Server\nTip: Make sure you have admin privilege before creating any database. Once a database is created, you can check it in the list of databases with the following SQL command: SHOW DATABASES;",
      "examples": [
        "CREATE DATABASE databasename;",
        "CREATE DATABASE testDB;",
        "CREATE DATABASE",
        "SHOW DATABASES"
      ]
    },
    {
      "title": "MySQL DROP DATABASE Statement",
      "summary": "The MySQL DROP DATABASE Statement\nThe DROP DATABASE statement is used to drop an existing SQL database.\nSyntax\nNote: Be careful before dropping a database. Deleting a database will result in loss of complete information stored in the database!\nDROP DATABASE Example\nThe following SQL statement drops the existing database \"testDB\":\nExampleGet your own SQL Server\nTip: Make sure you have admin privilege before dropping any database. Once a database is dropped, you can check it in the list of databases with the following SQL command: SHOW DATABASES;",
      "examples": [
        "DROP DATABASE databasename;",
        "DROP DATABASE testDB;",
        "DROP DATABASE",
        "SHOW DATABASES"
      ]
    },
    {
      "title": "MySQL CREATE TABLE Statement",
      "summary": "The MySQL CREATE TABLE Statement\nThe CREATE TABLE statement is used to create a new table in a database.\nSyntax\nThe column parameters specify the names of the columns of the table.\nThe datatype parameter specifies the type of data the column can hold (e.g. varchar, integer, date, etc.).\nTip: For an overview of the available data types, go to our complete Data Types Reference.\nMySQL CREATE TABLE Example\nThe following example creates a table called \"Persons\" that contains five columns: PersonID, LastName, FirstName, Address, and City:\nExampleGet your own SQL Server\nThe PersonID column is of type int and will hold an integer.\nThe LastName, FirstName, Address, and City columns are of type varchar and will hold characters, and the maximum length for these fields is 255 characters.\nThe empty \"Persons\" table will now look like this:\nTip: The empty \"Persons\" table can now be filled with data with the SQL INSERT INTO statement.\nREMOVE ADS\nCreate Table Using Another Table\nA copy of an existing table can also be created using CREATE TABLE.\nThe new table gets the same column definitions. All columns or specific columns can be selected.\nIf you create a new table using an existing table, the new table will be filled with the existing values from the old table.\nSyntax\nThe following SQL creates a new table called \"TestTables\" (which is a copy of the \"Customers\" table):\nExample",
      "examples": [
        "CREATE TABLE table_name (\ncolumn1 datatype,\ncolumn2 datatype,\ncolumn3 datatype,\n....\n);",
        "CREATE TABLE Persons (\nPersonID int,\nLastName varchar(255),\nFirstName varchar(255),\nAddress varchar(255),\nCity varchar(255)\n);",
        "CREATE TABLE new_table_name AS\nSELECT column1, column2,...\nFROM existing_table_name\nWHERE ....;",
        "CREATE TABLE TestTable AS\nSELECT customername, contactname\nFROM customers;",
        "CREATE TABLE"
      ]
    },
    {
      "title": "MySQL DROP TABLE Statement",
      "summary": "The MySQL DROP TABLE Statement\nThe DROP TABLE statement is used to drop an existing table in a database.\nSyntax\nNote: Be careful before dropping a table. Deleting a table will result in loss of complete information stored in the table!\nMySQL DROP TABLE Example\nThe following SQL statement drops the existing table \"Shippers\":\nExampleGet your own SQL Server\nMySQL TRUNCATE TABLE\nThe TRUNCATE TABLE statement is used to delete the data inside a table, but not the table itself.\nSyntax",
      "examples": [
        "DROP TABLE table_name;",
        "DROP TABLE Shippers;",
        "TRUNCATE TABLE table_name;",
        "DROP TABLE",
        "TRUNCATE TABLE"
      ]
    },
    {
      "title": "MySQL ALTER TABLE Statement",
      "summary": "MySQL ALTER TABLE Statement\nThe ALTER TABLE statement is used to add, delete, or modify columns in an existing table.\nThe ALTER TABLE statement is also used to add and drop various constraints on an existing table.\nALTER TABLE - ADD Column\nTo add a column in a table, use the following syntax:\nThe following SQL adds an \"Email\" column to the \"Customers\" table:\nExampleGet your own SQL Server\nALTER TABLE - DROP COLUMN\nTo delete a column in a table, use the following syntax (notice that some database systems don't allow deleting a column):\nThe following SQL deletes the \"Email\" column from the \"Customers\" table:\nExample\nALTER TABLE - MODIFY COLUMN\nTo change the data type of a column in a table, use the following syntax:\nREMOVE ADS\nMySQL ALTER TABLE Example\nLook at the \"Persons\" table:\nNow we want to add a column named \"DateOfBirth\" in the \"Persons\" table.\nWe use the following SQL statement:\nExample\nNotice that the new column, \"DateOfBirth\", is of type date and is going to hold a date. The data type specifies what type of data the column can hold. For a complete reference of all the data types available in MySQL, go to our complete Data Types reference.\nThe \"Persons\" table will now look like this:\nChange Data Type Example\nNow we want to change the data type of the column named \"DateOfBirth\" in the \"Persons\" table.\nWe use the following SQL statement:\nExample\nNotice that the \"DateOfBirth\" column is now of type year and is going to hold a year in a two- or four-digit format.\nDROP COLUMN Example\nNext, we want to delete the column named \"DateOfBirth\" in the \"Persons\" table.\nWe use the following SQL statement:\nExample\nThe \"Persons\" table will now look like this:",
      "examples": [
        "ALTER TABLE table_name\nADD column_name datatype;",
        "ALTER TABLE Customers\nADD Email varchar(255);",
        "ALTER TABLE table_name\nDROP COLUMN column_name;",
        "ALTER TABLE Customers\nDROP COLUMN Email;",
        "ALTER TABLE table_name\nMODIFY COLUMN column_name datatype;",
        "ALTER TABLE Persons\nADD DateOfBirth date;",
        "ALTER TABLE Persons\nMODIFY COLUMN DateOfBirth year;",
        "ALTER TABLE Persons\nDROP COLUMN DateOfBirth;",
        "ALTER TABLE"
      ]
    },
    {
      "title": "MySQL Constraints",
      "summary": "SQL constraints are used to specify rules for data in a table.\nCreate Constraints\nConstraints can be specified when the table is created with the CREATE TABLE statement, or after the table is created with the ALTER TABLE statement.\nSyntax\nMySQL Constraints\nSQL constraints are used to specify rules for the data in a table.\nConstraints are used to limit the type of data that can go into a table. This ensures the accuracy and reliability of the data in the table. If there is any violation between the constraint and the data action, the action is aborted.\nConstraints can be column level or table level. Column level constraints apply to a column, and table level constraints apply to the whole table.\nThe following constraints are commonly used in SQL:\nNOT NULL - Ensures that a column cannot have a NULL value\nUNIQUE - Ensures that all values in a column are different\nPRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table\nFOREIGN KEY - Prevents actions that would destroy links between tables\nCHECK - Ensures that the values in a column satisfies a specific condition\nDEFAULT - Sets a default value for a column if no value is specified\nCREATE INDEX - Used to create and retrieve data from the database very quickly",
      "examples": [
        "CREATE TABLE table_name (\ncolumn1 datatype constraint,\ncolumn2 datatype constraint,\ncolumn3 datatype constraint,\n....\n);",
        "CREATE TABLE",
        "ALTER TABLE",
        "NOT NULL",
        "UNIQUE",
        "PRIMARY KEY",
        "FOREIGN KEY",
        "CHECK",
        "DEFAULT",
        "CREATE INDEX"
      ]
    },
    {
      "title": "MySQL NOT NULL Constraint",
      "summary": "MySQL NOT NULL Constraint\nBy default, a column can hold NULL values.\nThe NOT NULL constraint enforces a column to NOT accept NULL values.\nThis enforces a field to always contain a value, which means that you cannot insert a new record, or update a record without adding a value to this field.\nNOT NULL on CREATE TABLE\nThe following SQL ensures that the \"ID\", \"LastName\", and \"FirstName\" columns will NOT accept NULL values when the \"Persons\" table is created:\nExampleGet your own SQL Server\nNOT NULL on ALTER TABLE\nTo create a NOT NULL constraint on the \"Age\" column when the \"Persons\" table is already created, use the following SQL:\nExample",
      "examples": [
        "CREATE TABLE Persons (\nID int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255) NOT NULL,\nAge int\n);",
        "ALTER TABLE Persons\nMODIFY Age int NOT NULL;",
        "NOT NULL"
      ]
    },
    {
      "title": "MySQL UNIQUE Constraint",
      "summary": "MySQL UNIQUE Constraint\nThe UNIQUE constraint ensures that all values in a column are different.\nBoth the UNIQUE and PRIMARY KEY constraints provide a guarantee for uniqueness for a column or set of columns.\nA PRIMARY KEY constraint automatically has a UNIQUE constraint.\nHowever, you can have many UNIQUE constraints per table, but only one PRIMARY KEY constraint per table.\nUNIQUE Constraint on CREATE TABLE\nThe following SQL creates a UNIQUE constraint on the \"ID\" column when the \"Persons\" table is created:\nTo name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax:\nREMOVE ADS\nUNIQUE Constraint on ALTER TABLE\nTo create a UNIQUE constraint on the \"ID\" column when the table is already created, use the following SQL:\nTo name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax:\nDROP a UNIQUE Constraint\nTo drop a UNIQUE constraint, use the following SQL:",
      "examples": [
        "CREATE TABLE Persons (\nID int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAge int,\nUNIQUE (ID)\n);",
        "CREATE TABLE Persons (\nID int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAge int,\nCONSTRAINT UC_Person UNIQUE (ID,LastName)\n);",
        "ALTER TABLE Persons\nADD UNIQUE (ID);",
        "ALTER TABLE Persons\nADD CONSTRAINT UC_Person UNIQUE (ID,LastName);",
        "ALTER TABLE Persons\nDROP INDEX UC_Person;",
        "UNIQUE",
        "PRIMARY KEY"
      ]
    },
    {
      "title": "MySQL PRIMARY KEY Constraint",
      "summary": "MySQL PRIMARY KEY Constraint\nThe PRIMARY KEY constraint uniquely identifies each record in a table.\nPrimary keys must contain UNIQUE values, and cannot contain NULL values.\nA table can have only ONE primary key; and in the table, this primary key can consist of single or multiple columns (fields).\nPRIMARY KEY on CREATE TABLE\nThe following SQL creates a PRIMARY KEY on the \"ID\" column when the \"Persons\" table is created:\nTo allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax:\nNote: In the example above there is only ONE PRIMARY KEY (PK_Person). However, the VALUE of the primary key is made up of TWO COLUMNS (ID + LastName).\nREMOVE ADS\nPRIMARY KEY on ALTER TABLE\nTo create a PRIMARY KEY constraint on the \"ID\" column when the table is already created, use the following SQL:\nTo allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax:\nNote: If you use ALTER TABLE to add a primary key, the primary key column(s) must have been declared to not contain NULL values (when the table was first created).\nDROP a PRIMARY KEY Constraint\nTo drop a PRIMARY KEY constraint, use the following SQL:",
      "examples": [
        "CREATE TABLE Persons (\nID int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAge int,\nPRIMARY KEY (ID)\n);",
        "CREATE TABLE Persons (\nID int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAge int,\nCONSTRAINT PK_Person PRIMARY KEY (ID,LastName)\n);",
        "ALTER TABLE Persons\nADD PRIMARY KEY (ID);",
        "ALTER TABLE Persons\nADD CONSTRAINT PK_Person PRIMARY KEY (ID,LastName);",
        "ALTER TABLE Persons\nDROP PRIMARY KEY;",
        "PRIMARY KEY",
        "ALTER TABLE"
      ]
    },
    {
      "title": "MySQL FOREIGN KEY Constraint",
      "summary": "MySQL FOREIGN KEY Constraint\nThe FOREIGN KEY constraint is used to prevent actions that would destroy links between tables.\nA FOREIGN KEY is a field (or collection of fields) in one table, that refers to the PRIMARY KEY in another table.\nThe table with the foreign key is called the child table, and the table with the primary key is called the referenced or parent table.\nLook at the following two tables:\nPersons Table\nOrders Table\nNotice that the \"PersonID\" column in the \"Orders\" table points to the \"PersonID\" column in the \"Persons\" table.\nThe \"PersonID\" column in the \"Persons\" table is the PRIMARY KEY in the \"Persons\" table.\nThe \"PersonID\" column in the \"Orders\" table is a FOREIGN KEY in the \"Orders\" table.\nThe FOREIGN KEY constraint prevents invalid data from being inserted into the foreign key column, because it has to be one of the values contained in the parent table.\nREMOVE ADS\nFOREIGN KEY on CREATE TABLE\nThe following SQL creates a FOREIGN KEY on the \"PersonID\" column when the \"Orders\" table is created:\nTo allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax:\nFOREIGN KEY on ALTER TABLE\nTo create a FOREIGN KEY constraint on the \"PersonID\" column when the \"Orders\" table is already created, use the following SQL:\nTo allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax:\nDROP a FOREIGN KEY Constraint\nTo drop a FOREIGN KEY constraint, use the following SQL:",
      "examples": [
        "CREATE TABLE Orders (\nOrderID int NOT NULL,\nOrderNumber int NOT NULL,\nPersonID int,\nPRIMARY KEY (OrderID),\nFOREIGN KEY (PersonID) REFERENCES Persons(PersonID)\n);",
        "CREATE TABLE Orders (\nOrderID int NOT NULL,\nOrderNumber int NOT NULL,\nPersonID int,\nPRIMARY KEY (OrderID),\nCONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID)\nREFERENCES Persons(PersonID)\n);",
        "ALTER TABLE Orders\nADD FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);",
        "ALTER TABLE Orders\nADD CONSTRAINT FK_PersonOrder\nFOREIGN KEY (PersonID) REFERENCES Persons(PersonID);",
        "ALTER TABLE Orders\nDROP FOREIGN KEY FK_PersonOrder;",
        "FOREIGN KEY",
        "PRIMARY KEY"
      ]
    },
    {
      "title": "MySQL CHECK Constraint",
      "summary": "MySQL CHECK Constraint\nThe CHECK constraint is used to limit the value range that can be placed in a column.\nIf you define a CHECK constraint on a column it will allow only certain values for this column.\nIf you define a CHECK constraint on a table it can limit the values in certain columns based on values in other columns in the row.\nCHECK on CREATE TABLE\nThe following SQL creates a CHECK constraint on the \"Age\" column when the \"Persons\" table is created. The CHECK constraint ensures that the age of a person must be 18, or older:\nTo allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax:\nREMOVE ADS\nCHECK on ALTER TABLE\nTo create a CHECK constraint on the \"Age\" column when the table is already created, use the following SQL:\nTo allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax:\nDROP a CHECK Constraint\nTo drop a CHECK constraint, use the following SQL:",
      "examples": [
        "CREATE TABLE Persons (\nID int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAge int,\nCHECK (Age>=18)\n);",
        "CREATE TABLE Persons (\nID int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAge int,\nCity varchar(255),\nCONSTRAINT CHK_Person CHECK (Age>=18 AND City='Sandnes')\n);",
        "ALTER TABLE Persons\nADD CHECK (Age>=18);",
        "ALTER TABLE Persons\nADD CONSTRAINT CHK_PersonAge CHECK (Age>=18 AND City='Sandnes');",
        "ALTER TABLE Persons\nDROP CHECK CHK_PersonAge;",
        "CHECK"
      ]
    },
    {
      "title": "MySQL DEFAULT Constraint",
      "summary": "MySQL DEFAULT Constraint\nThe DEFAULT constraint is used to set a default value for a column.\nThe default value will be added to all new records, if no other value is specified.\nDEFAULT on CREATE TABLE\nThe following SQL sets a DEFAULT value for the \"City\" column when the \"Persons\" table is created:\nThe DEFAULT constraint can also be used to insert system values, by using functions like CURRENT_DATE():\nDEFAULT on ALTER TABLE\nTo create a DEFAULT constraint on the \"City\" column when the table is already created, use the following SQL:\nDROP a DEFAULT Constraint\nTo drop a DEFAULT constraint, use the following SQL:",
      "examples": [
        "CREATE TABLE Persons (\nID int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAge int,\nCity varchar(255) DEFAULT 'Sandnes'\n);",
        "CREATE TABLE Orders (\nID int NOT NULL,\nOrderNumber int NOT NULL,\nOrderDate date DEFAULT CURRENT_DATE()\n);",
        "ALTER TABLE Persons\nALTER City SET DEFAULT 'Sandnes';",
        "ALTER TABLE Persons\nALTER City DROP DEFAULT;",
        "DEFAULT",
        "CURRENT_DATE()"
      ]
    },
    {
      "title": "MySQL CREATE INDEX Statement",
      "summary": "MySQL CREATE INDEX Statement\nThe CREATE INDEX statement is used to create indexes in tables.\nIndexes are used to retrieve data from the database more quickly than otherwise. The users cannot see the indexes, they are just used to speed up searches/queries.\nNote: Updating a table with indexes takes more time than updating a table without (because the indexes also need an update). So, only create indexes on columns that will be frequently searched against.\nCREATE INDEX Syntax\nCreates an index on a table. Duplicate values are allowed:\nCREATE UNIQUE INDEX Syntax\nCreates a unique index on a table. Duplicate values are not allowed:\nMySQL CREATE INDEX Example\nThe SQL statement below creates an index named \"idx_lastname\" on the \"LastName\" column in the \"Persons\" table:\nIf you want to create an index on a combination of columns, you can list the column names within the parentheses, separated by commas:\nDROP INDEX Statement\nThe DROP INDEX statement is used to delete an index in a table.",
      "examples": [
        "CREATE INDEX index_name\nON table_name (column1, column2, ...);",
        "CREATE UNIQUE INDEX index_name\nON table_name (column1, column2, ...);",
        "CREATE INDEX idx_lastname\nON Persons (LastName);",
        "CREATE INDEX idx_pname\nON Persons (LastName, FirstName);",
        "ALTER TABLE table_name\nDROP INDEX index_name;",
        "CREATE INDEX",
        "DROP INDEX"
      ]
    },
    {
      "title": "MySQL AUTO INCREMENT Field",
      "summary": "What is an AUTO INCREMENT Field?\nAuto-increment allows a unique number to be generated automatically when a new record is inserted into a table.\nOften this is the primary key field that we would like to be created automatically every time a new record is inserted.\nMySQL AUTO_INCREMENT Keyword\nMySQL uses the AUTO_INCREMENT keyword to perform an auto-increment feature.\nBy default, the starting value for AUTO_INCREMENT is 1, and it will increment by 1 for each new record.\nThe following SQL statement defines the \"Personid\" column to be an auto-increment primary key field in the \"Persons\" table:\nTo let the AUTO_INCREMENT sequence start with another value, use the following SQL statement:\nWhen we insert a new record into the \"Persons\" table, we do NOT have to specify a value for the \"Personid\" column (a unique value will be added automatically):\nThe SQL statement above would insert a new record into the \"Persons\" table. The \"Personid\" column would be assigned a unique value automatically. The \"FirstName\" column would be set to \"Lars\" and the \"LastName\" column would be set to \"Monsen\".",
      "examples": [
        "CREATE TABLE Persons (\nPersonid int NOT NULL AUTO_INCREMENT,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAge int,\nPRIMARY KEY (Personid)\n);",
        "ALTER TABLE Persons AUTO_INCREMENT=100;",
        "INSERT INTO Persons (FirstName,LastName)\nVALUES ('Lars','Monsen');",
        "AUTO_INCREMENT"
      ]
    },
    {
      "title": "MySQL Working With Dates",
      "summary": "MySQL Dates\nThe most difficult part when working with dates is to be sure that the format of the date you are trying to insert, matches the format of the date column in the database.\nAs long as your data contains only the date portion, your queries will work as expected. However, if a time portion is involved, it gets more complicated.\nMySQL Date Data Types\nMySQL comes with the following data types for storing a date or a date/time value in the database:\nDATE - format YYYY-MM-DD\nDATETIME - format: YYYY-MM-DD HH:MI:SS\nTIMESTAMP - format: YYYY-MM-DD HH:MI:SS\nYEAR - format YYYY or YY\nNote: The date data type are set for a column when you create a new table in your database!\nWorking with Dates\nLook at the following table:\nOrders Table\nNow we want to select the records with an OrderDate of \"2008-11-11\" from the table above.\nWe use the following SELECT statement:\nThe result-set will look like this:\nNote: Two dates can easily be compared if there is no time component involved!\nNow, assume that the \"Orders\" table looks like this (notice the added time-component in the \"OrderDate\" column):\nIf we use the same SELECT statement as above:\nwe will get no result! This is because the query is looking only for dates with no time portion.\nTip: To keep your queries simple and easy to maintain, do not use time-components in your dates, unless you have to!",
      "examples": [
        "SELECT * FROM Orders WHERE OrderDate='2008-11-11'",
        "DATE",
        "DATETIME",
        "TIMESTAMP",
        "YEAR",
        "SELECT"
      ]
    },
    {
      "title": "MySQL Views",
      "summary": "MySQL CREATE VIEW Statement\nIn SQL, a view is a virtual table based on the result-set of an SQL statement.\nA view contains rows and columns, just like a real table. The fields in a view are fields from one or more real tables in the database.\nYou can add SQL statements and functions to a view and present the data as if the data were coming from one single table.\nA view is created with the CREATE VIEW statement.\nCREATE VIEW Syntax\nNote: A view always shows up-to-date data! The database engine recreates the view, every time a user queries it.\nMySQL CREATE VIEW Examples\nThe following SQL creates a view that shows all customers from Brazil:\nExampleGet your own SQL Server\nWe can query the view above as follows:\nExample\nThe following SQL creates a view that selects every product in the \"Products\" table with a price higher than the average price:\nExample\nWe can query the view above as follows:\nExample\nREMOVE ADS\nMySQL Updating a View\nA view can be updated with the CREATE OR REPLACE VIEW statement.\nCREATE OR REPLACE VIEW Syntax\nThe following SQL adds the \"City\" column to the \"Brazil Customers\" view:\nExample\nMySQL Dropping a View\nA view is deleted with the DROP VIEW statement.\nDROP VIEW Syntax\nThe following SQL drops the \"Brazil Customers\" view:\nExample",
      "examples": [
        "CREATE VIEW view_name AS\nSELECT column1, column2, ...\nFROM table_name\nWHERE condition;",
        "CREATE VIEW [Brazil Customers] AS\nSELECT CustomerName, ContactName\nFROM Customers\nWHERE Country = 'Brazil';",
        "SELECT * FROM [Brazil Customers];",
        "CREATE VIEW [Products Above Average Price] AS\nSELECT ProductName, Price\nFROM Products\nWHERE Price > (SELECT AVG(Price) FROM Products);",
        "SELECT * FROM [Products Above Average Price];",
        "CREATE OR REPLACE VIEW view_name AS\nSELECT column1, column2, ...\nFROM table_name\nWHERE condition;",
        "CREATE OR REPLACE VIEW [Brazil Customers] AS\nSELECT CustomerName, ContactName, City\nFROM Customers\nWHERE Country = 'Brazil';",
        "DROP VIEW view_name;",
        "DROP VIEW [Brazil Customers];",
        "CREATE VIEW",
        "CREATE OR REPLACE VIEW",
        "DROP VIEW"
      ]
    },
    {
      "title": "MySQL Data Types",
      "summary": "The data type of a column defines what value the column can hold: integer, character, money, date and time, binary, and so on.\nMySQL Data Types (Version 8.0)\nEach column in a database table is required to have a name and a data type.\nAn SQL developer must decide what type of data that will be stored inside each column when creating a table. The data type is a guideline for SQL to understand what type of data is expected inside of each column, and it also identifies how SQL will interact with the stored data.\nIn MySQL there are three main data types: string, numeric, and date and time.\nString Data Types\nREMOVE ADS\nNumeric Data Types\nNote: All the numeric data types may have an extra option: UNSIGNED or ZEROFILL. If you add the UNSIGNED option, MySQL disallows negative values for the column. If you add the ZEROFILL option, MySQL automatically also adds the UNSIGNED attribute to the column.\nDate and Time Data Types",
      "examples": []
    },
    {
      "title": "MySQL Functions",
      "summary": "MySQL has many built-in functions.\nThis reference contains string, numeric, date, and some advanced functions in MySQL.\nMySQL String Functions\nREMOVE ADS\nMySQL Numeric Functions\nMySQL Date Functions\nMySQL Advanced Functions",
      "examples": []
    },
    {
      "title": "MySQL ASCII() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the ASCII value of the first character in \"CustomerName\":\nDefinition and Usage\nThe ASCII() function returns the ASCII value for the specific character.\nSyntax\nParameter Values\nTechnical Details\n❮ MySQL Functions",
      "examples": [
        "SELECT ASCII(CustomerName) AS NumCodeOfFirstChar\nFROM Customers;",
        "ASCII(character)"
      ]
    },
    {
      "title": "MySQL CHAR_LENGTH() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the length of the string:\nDefinition and Usage\nThe CHAR_LENGTH() function return the length of a string (in characters).\nNote: This function is equal to the CHARACTER_LENGTH() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the length of the text in the \"CustomerName\" column:\n❮ MySQL Functions",
      "examples": [
        "SELECT CHAR_LENGTH(\"SQL Tutorial\") AS LengthOfString;",
        "CHAR_LENGTH(string)",
        "SELECT CHAR_LENGTH(CustomerName) AS LengthOfName\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL CHARACTER_LENGTH() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the length of the string:\nDefinition and Usage\nThe CHARACTER_LENGTH() function return the length of a string (in characters).\nNote: This function is equal to the CHAR_LENGTH() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the length of the text in the \"CustomerName\" column:\n❮ MySQL Functions",
      "examples": [
        "SELECT CHARACTER_LENGTH(\"SQL Tutorial\") AS LengthOfString;",
        "CHARACTER_LENGTH(string)",
        "SELECT CHARACTER_LENGTH(CustomerName) AS LengthOfName\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL CONCAT() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nAdd several strings together:\nDefinition and Usage\nThe CONCAT() function adds two or more expressions together.\nNote: Also look at the CONCAT_WS() function.\nSyntax\nParameter Values\nNote: If any of the expressions is a NULL value, it returns NULL\nTechnical Details\nMore Examples\nExample\nAdd three columns into one \"Address\" column:\n❮ MySQL Functions",
      "examples": [
        "SELECT CONCAT(\"SQL \", \"Tutorial \", \"is \", \"fun!\") AS ConcatenatedString;",
        "CONCAT(expression1, expression2, expression3,...)",
        "SELECT CONCAT(Address, \" \", PostalCode, \" \", City) AS Address\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL CONCAT_WS() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nAdd several expressions together, and add a \"-\" separator between them:\nDefinition and Usage\nThe CONCAT_WS() function adds two or more expressions together with a separator.\nNote: Also look at the CONCAT() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nAdd three columns (and add a space between them) into one \"Address\" column:\n❮ MySQL Functions",
      "examples": [
        "SELECT CONCAT_WS(\"-\", \"SQL\", \"Tutorial\", \"is\", \"fun!\") AS ConcatenatedString;",
        "CONCAT_WS(separator, expression1, expression2, expression3,...)",
        "SELECT CONCAT_WS(\" \", Address, PostalCode, City) AS Address\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL FIELD() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the index position of  \"q\" in the string list:\nDefinition and Usage\nThe FIELD() function returns the index position of a value in a list of values.\nThis function performs a case-insensitive search.\nNote: If the specified value is not found in the list of values, this function will return 0. If value is NULL, this function will return 0.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the index position of \"c\" in the string list:\nExample\nReturn the index position of \"Q\" in the string list:\nExample\nReturn the index position of 5 in the numeric list:\n❮ MySQL Functions",
      "examples": [
        "SELECT FIELD(\"q\", \"s\", \"q\", \"l\");",
        "FIELD(value, val1, val2, val3, ...)",
        "SELECT FIELD(\"c\", \"a\", \"b\");",
        "SELECT FIELD(\"Q\", \"s\", \"q\", \"l\");",
        "SELECT FIELD(5, 0, 1, 2, 3, 4, 5);"
      ]
    },
    {
      "title": "MySQL FIND_IN_SET() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nSearch for \"q\" within the list of strings:\nDefinition and Usage\nThe FIND_IN_SET() function returns the position of a string within a list of strings.\nSyntax\nParameter Values\nReturn Values\nIf string is not found in string_list, this function returns 0\nIf string or string_list is NULL, this function returns NULL\nIf string_list is an empty string (\"\"), this function returns 0\nTechnical Details\nMore Examples\nExample\nSearch for \"a\" within the list of strings:\nExample\nSearch for \"q\" within the list of strings (string list is NULL):\n❮ MySQL Functions",
      "examples": [
        "SELECT FIND_IN_SET(\"q\", \"s,q,l\");",
        "FIND_IN_SET(string, string_list)",
        "SELECT FIND_IN_SET(\"a\", \"s,q,l\");",
        "SELECT FIND_IN_SET(\"q\", null);"
      ]
    },
    {
      "title": "MySQL FORMAT() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nFormat the number as \"#,###,###.##\" (and round with two decimal places):\nDefinition and Usage\nThe FORMAT() function formats a number to a format like \"#,###,###.##\", rounded to a specified number of decimal places, then it returns the result as a string.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nFormat the number as a format of \"#,###,###.##\" (and round with 0 decimal places):\n❮ MySQL Functions",
      "examples": [
        "SELECT FORMAT(250500.5634, 2);",
        "FORMAT(number, decimal_places)",
        "SELECT FORMAT(250500.5634, 0);"
      ]
    },
    {
      "title": "MySQL INSERT() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nInsert the string \"Example\" into the string \"W3Schools.com\". Replace the first nine characters:\nDefinition and Usage\nThe INSERT() function inserts a string within a string at the specified position and for a certain number of characters.\nSyntax\nParameter Values\nReturn Values\nIf position is outside the length of string, this function returns string\nIf number is higher than the length of the rest of the string, this function replaces string from position until the end of string\nTechnical Details\nMore Examples\nExample\nInsert the string \"no\" into the string \"W3Schools.com\". Replace three characters, starting from position 11:\n❮ MySQL Functions",
      "examples": [
        "SELECT INSERT(\"W3Schools.com\", 1, 9, \"Example\");",
        "INSERT(string, position, number, string2)",
        "SELECT INSERT(\"W3Schools.com\", 11, 3, \"no\");"
      ]
    },
    {
      "title": "MySQL INSTR() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nSearch for \"3\" in string \"W3Schools.com\", and return position:\nDefinition and Usage\nThe INSTR() function returns the position of the first occurrence of a string in another string.\nThis function performs a case-insensitive search.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nSearch for \"COM\" in string \"W3Schools.com\", and return position:\nExample\nSearch for \"a\" in CustomerName column, and return position:\n❮ MySQL Functions",
      "examples": [
        "SELECT INSTR(\"W3Schools.com\", \"3\") AS MatchPosition;",
        "INSTR(string1, string2)",
        "SELECT INSTR(\"W3Schools.com\", \"COM\") AS MatchPosition;",
        "SELECT INSTR(CustomerName, \"a\")\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL LCASE() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nConvert the text to lower-case:\nDefinition and Usage\nThe LCASE() function converts a string to lower-case.\nNote: The LOWER() function is a synonym for the LCASE() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert the text in \"CustomerName\" to lower-case:\n❮ MySQL Functions",
      "examples": [
        "SELECT LCASE(\"SQL Tutorial is FUN!\");",
        "LCASE(text)",
        "SELECT LCASE(CustomerName) AS LowercaseCustomerName\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL LEFT() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nExtract 3 characters from a string (starting from left):\nDefinition and Usage\nThe LEFT() function extracts a number of characters from a string (starting from left).\nTip: Also look at the RIGHT() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nExtract 5 characters from the text in the \"CustomerName\" column (starting from left):\n❮ MySQL Functions",
      "examples": [
        "SELECT LEFT(\"SQL Tutorial\", 3) AS ExtractString;",
        "LEFT(string, number_of_chars)",
        "SELECT LEFT(CustomerName, 5) AS ExtractString\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL LENGTH() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the length of the string, in bytes:\nDefinition and Usage\nThe LENGTH() function returns the length of a string (in bytes).\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the length of the text in the \"CustomerName\" column, in bytes:\n❮ MySQL Functions",
      "examples": [
        "SELECT LENGTH(\"SQL Tutorial\") AS LengthOfString;",
        "LENGTH(string)",
        "SELECT LENGTH(CustomerName) AS LengthOfName\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL LOCATE() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nSearch for \"3\" in string \"W3Schools.com\", and return position:\nDefinition and Usage\nThe LOCATE() function returns the position of the first occurrence of a substring in a string.\nIf the substring is not found within the original string, this function returns 0.\nThis function performs a case-insensitive search.\nNote: This function is equal to the POSITION() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nSearch for \"com\" in string \"W3Schools.com\" (start at position 3), and return position:\nExample\nSearch for \"a\" in CustomerName column, and return position:\n❮ MySQL Functions",
      "examples": [
        "SELECT LOCATE(\"3\", \"W3Schools.com\") AS MatchPosition;",
        "LOCATE(substring, string, start)",
        "SELECT LOCATE(\"com\", \"W3Schools.com\", 3) AS MatchPosition;",
        "SELECT LOCATE(\"a\", CustomerName)\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL LOWER() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nConvert the text to lower-case:\nDefinition and Usage\nThe LOWER() function converts a string to lower-case.\nNote: The LCASE() function is equal to the LOWER() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert the text in \"CustomerName\" to lower-case:\n❮ MySQL Functions",
      "examples": [
        "SELECT LOWER(\"SQL Tutorial is FUN!\");",
        "LOWER(text)",
        "SELECT LOWER(CustomerName) AS LowercaseCustomerName\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL LPAD() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nLeft-pad the string with \"ABC\", to a total length of 20:\nDefinition and Usage\nThe LPAD() function left-pads a string with another string, to a certain length.\nNote: Also look at the RPAD() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nLeft-pad the text in \"CustomerName\" with \"ABC\", to a total length of 30:\n❮ MySQL Functions",
      "examples": [
        "SELECT LPAD(\"SQL Tutorial\", 20, \"ABC\");",
        "LPAD(string, length, lpad_string)",
        "SELECT LPAD(CustomerName, 30, \"ABC\") AS LeftPadCustomerName\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL LTRIM() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nRemove leading spaces from a string:\nDefinition and Usage\nThe LTRIM() function removes leading spaces from a string.\nSyntax\nParameter Values\nTechnical Details\n❮ MySQL Functions",
      "examples": [
        "SELECT LTRIM(\"     SQL Tutorial\") AS LeftTrimmedString;",
        "LTRIM(string)"
      ]
    },
    {
      "title": "MySQL MID() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nExtract a substring from a string (start at position 5, extract 3 characters):\nDefinition and Usage\nThe MID() function extracts a substring from a string (starting at any position).\nNote: The MID() and SUBSTR() functions equals the SUBSTRING() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nExtract a substring from the text in a column (start at position 2, extract 5 characters):\nExample\nExtract a substring from a string (start from the end, at position -5, extract 5 characters):\n❮ MySQL Functions",
      "examples": [
        "SELECT MID(\"SQL Tutorial\", 5, 3) AS ExtractString;",
        "MID(string, start, length)",
        "SELECT MID(CustomerName, 2, 5) AS ExtractString\nFROM Customers;",
        "SELECT MID(\"SQL Tutorial\", -5, 5) AS ExtractString;"
      ]
    },
    {
      "title": "MySQL POSITION() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nSearch for \"3\" in string \"W3Schools.com\", and return position:\nDefinition and Usage\nThe POSITION() function returns the position of the first occurrence of a substring in a string.\nIf the substring is not found within the original string, this function returns 0.\nThis function performs a case-insensitive search.\nNote: The LOCATE() function is equal to the POSITION() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nSearch for \"COM\" in string \"W3Schools.com\", and return position:\nExample\nSearch for \"a\" in CustomerName column, and return position:\n❮ MySQL Functions",
      "examples": [
        "SELECT POSITION(\"3\" IN \"W3Schools.com\") AS MatchPosition;",
        "POSITION(substring IN string)",
        "SELECT POSITION(\"COM\" IN \"W3Schools.com\") AS MatchPosition;",
        "SELECT POSITION(\"a\" IN CustomerName)\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL REPEAT() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nRepeat a string 3 times:\nDefinition and Usage\nThe REPEAT() function repeats a string as many times as specified.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nRepeat the text in CustomerName 2 times:\nExample\nRepeat the string 0 times:\n❮ MySQL Functions",
      "examples": [
        "SELECT REPEAT(\"SQL Tutorial\", 3);",
        "REPEAT(string, number)",
        "SELECT REPEAT(CustomerName, 2)\nFROM Customers;",
        "SELECT REPEAT(\"SQL Tutorial\", 0);"
      ]
    },
    {
      "title": "MySQL REPLACE() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReplace \"SQL\" with \"HTML\":\nDefinition and Usage\nThe REPLACE() function replaces all occurrences of a substring within a string, with a new substring.\nNote: This function performs a case-sensitive replacement.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReplace \"X\" with \"M\":\nExample\nReplace \"X\" with \"m\":\nExample\nReplace \"x\" with \"m\":\n❮ MySQL Functions",
      "examples": [
        "SELECT REPLACE(\"SQL Tutorial\", \"SQL\", \"HTML\");",
        "REPLACE(string, substring, new_string)",
        "SELECT REPLACE(\"XYZ FGH XYZ\", \"X\", \"M\");",
        "SELECT REPLACE(\"XYZ FGH XYZ\", \"X\", \"m\");",
        "SELECT REPLACE(\"XYZ FGH XYZ\", \"x\", \"m\");"
      ]
    },
    {
      "title": "MySQL REVERSE() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReverse a string:\nDefinition and Usage\nThe REVERSE() function reverses a string and returns the result.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReverse the text in CustomerName:\n❮ MySQL Functions",
      "examples": [
        "SELECT REVERSE(\"SQL Tutorial\");",
        "REVERSE(string)",
        "SELECT REVERSE(CustomerName)\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL RIGHT() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nExtract 4 characters from a string (starting from right):\nDefinition and Usage\nThe RIGHT() function extracts a number of characters from a string (starting from right).\nTip: Also look at the LEFT() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nExtract 5 characters from the text in the \"CustomerName\" column (starting from right):\n❮ MySQL Functions",
      "examples": [
        "SELECT RIGHT(\"SQL Tutorial is cool\", 4) AS ExtractString;",
        "RIGHT(string, number_of_chars)",
        "SELECT RIGHT(CustomerName, 5) AS ExtractString\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL RPAD() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nRight-pad the string with \"ABC\", to a total length of 20:\nDefinition and Usage\nThe RPAD() function right-pads a string with another string, to a certain length.\nNote: Also look at the LPAD() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nRight-pad the text in \"CustomerName\" with \"ABC\", to a total length of 30:\n❮ MySQL Functions",
      "examples": [
        "SELECT RPAD(\"SQL Tutorial\", 20, \"ABC\");",
        "RPAD(string, length, rpad_string)",
        "SELECT RPAD(CustomerName, 30, \"ABC\") AS RightPadCustomerName\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL RTRIM() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nRemove trailing spaces from a string:\nDefinition and Usage\nThe RTRIM() function removes trailing spaces from a string.\nSyntax\nParameter Values\nTechnical Details\n❮ MySQL Functions",
      "examples": [
        "SELECT RTRIM(\"SQL Tutorial     \") AS RightTrimmedString;",
        "RTRIM(string)"
      ]
    },
    {
      "title": "MySQL SPACE() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn a string with 10 space characters:\nDefinition and Usage\nThe SPACE() function returns a string of the specified number of space characters.\nSyntax\nParameter Values\nTechnical Details\n❮ MySQL Functions",
      "examples": [
        "SELECT SPACE(10);",
        "SPACE(number)"
      ]
    },
    {
      "title": "MySQL STRCMP() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nCompare two strings:\nDefinition and Usage\nThe STRCMP() function compares two strings.\nSyntax\nParameter Values\nReturn Values\nIf string1 = string2, this function returns 0\nIf string1 < string2, this function returns -1\nIf string1 > string2, this function returns 1\nTechnical Details\nMore Examples\nExample\nCompare two strings:\n❮ MySQL Functions",
      "examples": [
        "SELECT STRCMP(\"SQL Tutorial\", \"SQL Tutorial\");",
        "STRCMP(string1, string2)",
        "SELECT STRCMP(\"SQL Tutorial\", \"HTML Tutorial\");"
      ]
    },
    {
      "title": "MySQL SUBSTR() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nExtract a substring from a string (start at position 5, extract 3 characters):\nDefinition and Usage\nThe SUBSTR() function extracts a substring from a string (starting at any position).\nNote: The SUBSTR() and MID() functions equals to the SUBSTRING() function.\nSyntax\nOR:\nParameter Values\nTechnical Details\nMore Examples\nExample\nExtract a substring from the text in a column (start at position 2, extract 5 characters):\nExample\nExtract a substring from a string (start from the end, at position -5, extract 5 characters):\n❮ MySQL Functions",
      "examples": [
        "SELECT SUBSTR(\"SQL Tutorial\", 5, 3) AS ExtractString;",
        "SUBSTR(string, start, length)",
        "SUBSTR(string FROM start FOR length)",
        "SELECT SUBSTR(CustomerName, 2, 5) AS ExtractString\nFROM Customers;",
        "SELECT SUBSTR(\"SQL Tutorial\", -5, 5) AS ExtractString;"
      ]
    },
    {
      "title": "MySQL SUBSTRING() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nExtract a substring from a string (start at position 5, extract 3 characters):\nDefinition and Usage\nThe SUBSTRING() function extracts a substring from a string (starting at any position).\nNote: The SUBSTR() and MID() functions equals to the SUBSTRING() function.\nSyntax\nOR:\nParameter Values\nTechnical Details\nMore Examples\nExample\nExtract a substring from the text in a column (start at position 2, extract 5 characters):\nExample\nExtract a substring from a string (start from the end, at position -5, extract 5 characters):\n❮ MySQL Functions",
      "examples": [
        "SELECT SUBSTRING(\"SQL Tutorial\", 5, 3) AS ExtractString;",
        "SUBSTRING(string, start, length)",
        "SUBSTRING(string FROM start FOR length)",
        "SELECT SUBSTRING(CustomerName, 2, 5) AS ExtractString\nFROM Customers;",
        "SELECT SUBSTRING(\"SQL Tutorial\", -5, 5) AS ExtractString;"
      ]
    },
    {
      "title": "MySQL SUBSTRING_INDEX() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn a substring of a string before a specified number of delimiter occurs:\nDefinition and Usage\nThe SUBSTRING_INDEX() function returns a substring of a string before a specified number of delimiter occurs.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn a substring of a string before a specified number of delimiter occurs:\n❮ MySQL Functions",
      "examples": [
        "SELECT SUBSTRING_INDEX(\"www.w3schools.com\", \".\", 1);",
        "SUBSTRING_INDEX(string, delimiter, number)",
        "SELECT SUBSTRING_INDEX(\"www.w3schools.com\", \".\", 2);"
      ]
    },
    {
      "title": "MySQL TRIM() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nRemove leading and trailing spaces from a string:\nDefinition and Usage\nThe TRIM() function removes leading and trailing spaces from a string.\nSyntax\nParameter Values\nTechnical Details\n❮ MySQL Functions",
      "examples": [
        "SELECT TRIM('    SQL Tutorial    ') AS TrimmedString;",
        "TRIM(string)"
      ]
    },
    {
      "title": "MySQL UCASE() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nConvert the text to upper-case:\nDefinition and Usage\nThe UCASE() function converts a string to upper-case.\nNote: This function is equal to the UPPER() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert the text in \"CustomerName\" to upper-case:\n❮ MySQL Functions",
      "examples": [
        "SELECT UCASE(\"SQL Tutorial is FUN!\");",
        "UCASE(text)",
        "SELECT UCASE(CustomerName) AS UppercaseCustomerName\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL UPPER() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nConvert the text to upper-case:\nDefinition and Usage\nThe UPPER() function converts a string to upper-case.\nNote: This function is equal to the UCASE() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert the text in \"CustomerName\" to upper-case:\n❮ MySQL Functions",
      "examples": [
        "SELECT UPPER(\"SQL Tutorial is FUN!\");",
        "UPPER(text)",
        "SELECT UPPER(CustomerName) AS UppercaseCustomerName\nFROM Customers;"
      ]
    },
    {
      "title": "MySQL ABS() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the absolute value of a number:\nDefinition and Usage\nThe ABS() function returns the absolute (positive) value of a number.\nSyntax\nParameter Values\nTechnical Details\n❮ MySQL Functions",
      "examples": [
        "SELECT ABS(-243.5);",
        "ABS(number)"
      ]
    },
    {
      "title": "MySQL ACOS() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the arc cosine of a number:\nDefinition and Usage\nThe ACOS() function returns the arc cosine of a number.\nThe specified number must be between -1 to 1, otherwise this function returns NULL.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the arc cosine of a number:\n❮ MySQL Functions",
      "examples": [
        "SELECT ACOS(0.25);",
        "ACOS(number)",
        "SELECT ACOS(-0.8);"
      ]
    },
    {
      "title": "MySQL ASIN() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the arc sine of a number:\nDefinition and Usage\nThe ASIN() function returns the arc sine of a number.\nThe specified number must be between -1 to 1, otherwise this function returns NULL.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the arc sine of a number:\n❮ MySQL Functions",
      "examples": [
        "SELECT ASIN(0.25);",
        "ASIN(number)",
        "SELECT ASIN(-0.8);"
      ]
    },
    {
      "title": "MySQL ATAN() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the arc tangent of a number:\nDefinition and Usage\nThe ATAN() function returns the arc tangent of one or two numbers.\nSyntax\nOR:\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the arc tangent of two values:\n❮ MySQL Functions",
      "examples": [
        "SELECT ATAN(2.5);",
        "ATAN(number)",
        "ATAN(a, b)",
        "SELECT ATAN(-0.8, 2);"
      ]
    },
    {
      "title": "MySQL ATAN2() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the arc tangent of two values:\nDefinition and Usage\nThe ATAN2() function returns the arc tangent of two numbers.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the arc tangent of two values:\n❮ MySQL Functions",
      "examples": [
        "SELECT ATAN2(0.50, 1);",
        "ATAN2(a, b)",
        "SELECT ATAN2(-0.8, 2);"
      ]
    },
    {
      "title": "MySQL AVG() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the average value for the \"Price\" column in the \"Products\" table:\nDefinition and Usage\nThe AVG() function returns the average value of an expression.\nNote: NULL values are ignored.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nSelect the records that have a price above the average price:\n❮ MySQL Functions",
      "examples": [
        "SELECT AVG(Price) AS AveragePrice FROM Products;",
        "AVG(expression)",
        "SELECT * FROM Products\nWHERE Price > (SELECT AVG(Price) FROM Products);"
      ]
    },
    {
      "title": "MySQL CEIL() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the smallest integer value that is greater than or equal to 25.75:\nDefinition and Usage\nThe CEIL() function returns the smallest integer value that is bigger than or equal to a number.\nNote: This function is equal to the CEILING() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the smallest integer value that is greater than or equal to 25:\n❮ MySQL Functions",
      "examples": [
        "SELECT CEIL(25.75);",
        "CEIL(number)",
        "SELECT CEIL(25);"
      ]
    },
    {
      "title": "MySQL CEILING() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the smallest integer value that is greater than or equal to 25.75:\nDefinition and Usage\nThe CEILING() function returns the smallest integer value that is bigger than or equal to a number.\nNote: This function is equal to the CEIL() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the smallest integer value that is greater than or equal to 25:\n❮ MySQL Functions",
      "examples": [
        "SELECT CEILING(25.75);",
        "CEILING(number)",
        "SELECT CEILING(25);"
      ]
    },
    {
      "title": "MySQL COS() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the cosine of a number:\nDefinition and Usage\nThe COS() function returns the cosine of a number.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the cosine of a number:\n❮ MySQL Functions",
      "examples": [
        "SELECT COS(2);",
        "COS(number)",
        "SELECT COS(PI());"
      ]
    },
    {
      "title": "MySQL COT() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the cotangent of a number:\nDefinition and Usage\nThe COT() function returns the cotangent of a number.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the cotangent of a number:\n❮ MySQL Functions",
      "examples": [
        "SELECT COT(6);",
        "COT(number)",
        "SELECT COT(-2);"
      ]
    },
    {
      "title": "MySQL COUNT() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the number of products in the \"Products\" table:\nDefinition and Usage\nThe COUNT() function returns the number of records returned by a select query.\nNote: NULL values are not counted.\nSyntax\nParameter Values\nTechnical Details\n❮ MySQL Functions",
      "examples": [
        "SELECT COUNT(ProductID) AS NumberOfProducts FROM Products;",
        "COUNT(expression)"
      ]
    },
    {
      "title": "MySQL DEGREES() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nConvert the radian value into degrees:\nDefinition and Usage\nThe DEGREES() function converts a value in radians to degrees.\nNote: See also the RADIANS() and PI() functions.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert the radian value into degrees:\n❮ MySQL Functions",
      "examples": [
        "SELECT DEGREES(1.5);",
        "DEGREES(number)",
        "SELECT DEGREES(PI()*2);"
      ]
    },
    {
      "title": "MySQL DIV Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nInteger division (10/5):\nDefinition and Usage\nThe DIV function is used for integer division (x is divided by y). An integer value is returned.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nInteger division (8/3):\n❮ MySQL Functions",
      "examples": [
        "SELECT 10 DIV 5;",
        "x DIV y",
        "SELECT 8 DIV 3;"
      ]
    },
    {
      "title": "MySQL EXP() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn e raised to the power of 1:\nDefinition and Usage\nThe EXP() function returns e raised to the power of the specified number.\nThe constant e (2.718281...), is the base of natural logarithms.\nTip: Also look at the LOG() and LN() functions.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn e raised to the power of 2:\n❮ MySQL Functions",
      "examples": [
        "SELECT EXP(1);",
        "EXP(number)",
        "SELECT EXP(2);"
      ]
    },
    {
      "title": "MySQL FLOOR() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the largest integer value that is less than or equal to 25.75:\nDefinition and Usage\nThe FLOOR() function returns the largest integer value that is smaller than or equal to a number.\nNote: Also look at the ROUND(), CEIL(), CEILING(), TRUNCATE(), and DIV functions.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the largest integer value that is greater than or equal to 25:\n❮ MySQL Functions",
      "examples": [
        "SELECT FLOOR(25.75);",
        "FLOOR(number)",
        "SELECT FLOOR(25);"
      ]
    },
    {
      "title": "MySQL GREATEST() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the greatest value of the list of arguments:\nDefinition and Usage\nThe GREATEST() function returns the greatest value of the list of arguments.\nNote: See also the LEAST() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the greatest value of the list of arguments:\n❮ MySQL Functions",
      "examples": [
        "SELECT GREATEST(3, 12, 34, 8, 25);",
        "GREATEST(arg1, arg2, arg3, ...)",
        "SELECT GREATEST(\"w3Schools.com\", \"microsoft.com\", \"apple.com\");"
      ]
    },
    {
      "title": "MySQL LEAST() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the smallest value of the list of arguments:\nDefinition and Usage\nThe LEAST() function returns the smallest value of the list of arguments.\nNote: See also the GREATEST() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the smallest value of the list of arguments:\n❮ MySQL Functions",
      "examples": [
        "SELECT LEAST(3, 12, 34, 8, 25);",
        "LEAST(arg1, arg2, arg3, ...)",
        "SELECT LEAST(\"w3Schools.com\", \"microsoft.com\", \"apple.com\");"
      ]
    },
    {
      "title": "MySQL LN() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the natural logarithm of 2:\nDefinition and Usage\nThe LN() function returns the natural logarithm of a number.\nNote: See also the LOG() and EXP() functions.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the natural logarithm of 1:\n❮ MySQL Functions",
      "examples": [
        "SELECT LN(2);",
        "LN(number)",
        "SELECT LN(1);"
      ]
    },
    {
      "title": "MySQL LOG() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the natural logarithm of 2:\nDefinition and Usage\nThe LOG() function returns the natural logarithm of a specified number, or the logarithm of the number to the specified base.\nNote: See also the LN() and EXP() functions.\nSyntax\nOR:\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the natural logarithm of 4 to a specified base (2):\n❮ MySQL Functions",
      "examples": [
        "SELECT LOG(2);",
        "LOG(number)",
        "LOG(base, number)",
        "SELECT LOG(2, 4);"
      ]
    },
    {
      "title": "MySQL LOG10() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the base-10 logarithm of 2:\nDefinition and Usage\nThe LOG10() function returns the natural logarithm of a number to base-10.\nNote: See also the LOG() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the base-10 logarithm of 4.5:\n❮ MySQL Functions",
      "examples": [
        "SELECT LOG10(2);",
        "LOG10(number)",
        "SELECT LOG10(4.5);"
      ]
    },
    {
      "title": "MySQL LOG2() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the base-2 logarithm of 6:\nDefinition and Usage\nThe LOG2() function returns the natural logarithm of a number to base-2.\nNote: See also the LOG() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the base-2 logarithm of 64:\n❮ MySQL Functions",
      "examples": [
        "SELECT LOG2(6);",
        "LOG2(number)",
        "SELECT LOG2(64);"
      ]
    },
    {
      "title": "MySQL MAX() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nFind the price of the most expensive product in the \"Products\" table:\nDefinition and Usage\nThe MAX() function returns the maximum value in a set of values.\nNote: See also the MIN() function.\nSyntax\nParameter Values\nTechnical Details\n❮ MySQL Functions",
      "examples": [
        "SELECT MAX(Price) AS LargestPrice FROM Products;",
        "MAX(expression)"
      ]
    },
    {
      "title": "MySQL MIN() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nFind the price of the cheapest product in the \"Products\" table:\nDefinition and Usage\nThe MIN() function returns the minimum value in a set of values.\nNote: See also the MAX() function.\nSyntax\nParameter Values\nTechnical Details\n❮ MySQL Functions",
      "examples": [
        "SELECT MIN(Price) AS SmallestPrice FROM Products;",
        "MIN(expression)"
      ]
    },
    {
      "title": "MySQL MOD() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the remainder of 18/4:\nDefinition and Usage\nThe MOD() function returns the remainder of a number divided by another number.\nSyntax\nOR:\nOR:\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the remainder of 18/4:\nExample\nReturn the remainder of 18/4:\n❮ MySQL Functions",
      "examples": [
        "SELECT MOD(18, 4);",
        "MOD(x, y)",
        "x MOD y",
        "x % y",
        "SELECT 18 MOD 4;",
        "SELECT 18 % 4;"
      ]
    },
    {
      "title": "MySQL PI() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the value of PI:\nDefinition and Usage\nThe PI() function returns the value of PI.\nNote: See also the DEGREES() and RADIANS() functions.\nSyntax\nTechnical Details\n❮ MySQL Functions",
      "examples": [
        "SELECT PI();",
        "PI()"
      ]
    },
    {
      "title": "MySQL POW() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn 4 raised to the second power:\nDefinition and Usage\nThe POW() function returns the value of a number raised to the power of another number.\nNote: This function is equal to the POWER() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn 8 raised to the third power:\n❮ MySQL Functions",
      "examples": [
        "SELECT POW(4, 2);",
        "POW(x, y)",
        "SELECT POW(8, 3);"
      ]
    },
    {
      "title": "MySQL POWER() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn 4 raised to the second power:\nDefinition and Usage\nThe POWER() function returns the value of a number raised to the power of another number.\nNote: This function is equal to the POW() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn 8 raised to the third power:\n❮ MySQL Functions",
      "examples": [
        "SELECT POWER(4, 2);",
        "POWER(x, y)",
        "SELECT POWER(8, 3);"
      ]
    },
    {
      "title": "MySQL RADIANS() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nConvert a degree value into radians:\nDefinition and Usage\nThe RADIANS() function converts a degree value into radians.\nNote: See also the DEGREES() and PI() functions.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert a degree value into radians:\n❮ MySQL Functions",
      "examples": [
        "SELECT RADIANS(180);",
        "RADIANS(number)",
        "SELECT RADIANS(-45);"
      ]
    },
    {
      "title": "MySQL RAND() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn a random decimal number (no seed value - so it returns a completely random number >= 0 and <1):\nDefinition and Usage\nThe RAND() function returns a random number between 0 (inclusive) and 1 (exclusive).\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn a random decimal number (with seed value of 6):\nExample\nReturn a random decimal number >= 5 and <10:\nExample\nReturn a random number >= 5 and <=10:\n❮ MySQL Functions",
      "examples": [
        "SELECT RAND();",
        "RAND(seed)",
        "SELECT RAND(6);",
        "SELECT RAND()*(10-5)+5;",
        "SELECT FLOOR(RAND()*(10-5+1)+5);"
      ]
    },
    {
      "title": "MySQL ROUND() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nRound the number to 2 decimal places:\nDefinition and Usage\nThe ROUND() function rounds a number to a specified number of decimal places.\nNote: See also the FLOOR(), CEIL(), CEILING(), and TRUNCATE() functions.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nRound the number to 0 decimal places:\nExample\nRound the Price column (to 1 decimal) in the \"Products\" table:\n❮ MySQL Functions",
      "examples": [
        "SELECT ROUND(135.375, 2);",
        "ROUND(number, decimals)",
        "SELECT ROUND(345.156, 0);",
        "SELECT ProductName, Price, ROUND(Price, 1) AS RoundedPrice\nFROM Products;"
      ]
    },
    {
      "title": "MySQL SIGN() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the sign of a number:\nDefinition and Usage\nThe SIGN() function returns the sign of a number.\nThis function will return one of the following:\nIf number > 0, it returns 1\nIf number = 0, it returns 0\nIf number < 0, it returns -1\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the sign of a number:\n❮ MySQL Functions",
      "examples": [
        "SELECT SIGN(255.5);",
        "SIGN(number)",
        "SELECT SIGN(-12);"
      ]
    },
    {
      "title": "MySQL SIN() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the sine of a number:\nDefinition and Usage\nThe SIN() function returns the sine of a number.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the sine of a number:\n❮ MySQL Functions",
      "examples": [
        "SELECT SIN(2);",
        "SIN(number)",
        "SELECT SIN(-1);"
      ]
    },
    {
      "title": "MySQL SQRT() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the square root of a number:\nDefinition and Usage\nThe SQRT() function returns the square root of a number.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the square root of a number:\n❮ MySQL Functions",
      "examples": [
        "SELECT SQRT(64);",
        "SQRT(number)",
        "SELECT SQRT(13);"
      ]
    },
    {
      "title": "MySQL SUM() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the sum of the \"Quantity\" field in the \"OrderDetails\" table:\nDefinition and Usage\nThe SUM() function calculates the sum of a set of values.\nNote: NULL values are ignored.\nSyntax\nParameter Values\nTechnical Details\n❮ MySQL Functions",
      "examples": [
        "SELECT SUM(Quantity) AS TotalItemsOrdered FROM OrderDetails;",
        "SUM(expression)"
      ]
    },
    {
      "title": "MySQL TAN() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the tangent of a number:\nDefinition and Usage\nThe TAN() function returns the tangent of a number.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the tangent of a number:\n❮ MySQL Functions",
      "examples": [
        "SELECT TAN(1.75);",
        "TAN(number)",
        "SELECT TAN(-3);"
      ]
    },
    {
      "title": "MySQL TRUNCATE() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn a number truncated to 2 decimal places:\nDefinition and Usage\nThe TRUNCATE() function truncates a number to the specified number of decimal places.\nNote: See also the FLOOR(), CEIL(), CEILING(), and ROUND() functions.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn a number truncated to 0 decimal places:\n❮ MySQL Functions",
      "examples": [
        "SELECT TRUNCATE(135.375, 2);",
        "TRUNCATE(number, decimals)",
        "SELECT TRUNCATE(345.156, 0);"
      ]
    },
    {
      "title": "MySQL ADDDATE() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nAdd 10 days to a date and return the date:\nDefinition and Usage\nThe ADDDATE() function adds a time/date interval to a date and then returns the date.\nSyntax\nOR:\nParameter Values\nMICROSECOND\nSECOND\nMINUTE\nHOUR\nDAY\nWEEK\nMONTH\nQUARTER\nYEAR\nSECOND_MICROSECOND\nMINUTE_MICROSECOND\nMINUTE_SECOND\nHOUR_MICROSECOND\nHOUR_SECOND\nHOUR_MINUTE\nDAY_MICROSECOND\nDAY_SECOND\nDAY_MINUTE\nDAY_HOUR\nYEAR_MONTH\nTechnical Details\nMore Examples\nExample\nAdd 15 minutes to a date and return the date:\nExample\nSubtract 3 hours to a date and return the date:\nExample\nSubtract 2 months to a date and return the date:\n❮ MySQL Functions",
      "examples": [
        "SELECT ADDDATE(\"2017-06-15\", INTERVAL 10 DAY);",
        "ADDDATE(date, INTERVAL value addunit)",
        "ADDDATE(date, days)",
        "SELECT ADDDATE(\"2017-06-15 09:34:21\", INTERVAL 15 MINUTE);",
        "SELECT ADDDATE(\"2017-06-15 09:34:21\", INTERVAL -3 HOUR);",
        "SELECT ADDDATE(\"2017-06-15\", INTERVAL -2 MONTH);"
      ]
    },
    {
      "title": "MySQL ADDTIME() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nAdd 2 seconds to a time and return the datetime:\nDefinition and Usage\nThe ADDTIME() function adds a time interval to a time/datetime and then returns the time/datetime.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nAdd 5 seconds and 3 microseconds to a time and return the datetime:\nExample\nAdd 2 hours, 10 minutes, 5 seconds, and 3 microseconds to a time and return the datetime:\nExample\nAdd 5 days, 2 hours, 10 minutes, 5 seconds, and 3 microseconds to a time and return the datetime:\nExample\nAdd 2 hours, 10 minutes, 5 seconds, and 3 microseconds to a time and return the time:\n❮ MySQL Functions",
      "examples": [
        "SELECT ADDTIME(\"2017-06-15 09:34:21\", \"2\");",
        "ADDTIME(datetime, addtime)",
        "SELECT ADDTIME(\"2017-06-15 09:34:21.000001\", \"5.000003\");",
        "SELECT ADDTIME(\"2017-06-15 09:34:21.000001\", \"2:10:5.000003\");",
        "SELECT ADDTIME(\"2017-06-15 09:34:21.000001\", \"5 2:10:5.000003\");",
        "SELECT ADDTIME(\"09:34:21.000001\", \"2:10:5.000003\");"
      ]
    },
    {
      "title": "MySQL CURDATE() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the current date:\nDefinition and Usage\nThe CURDATE() function returns the current date.\nNote: The date is returned as \"YYYY-MM-DD\" (string) or as YYYYMMDD (numeric).\nNote: This function equals the CURRENT_DATE() function.\nSyntax\nTechnical Details\nMore Examples\nExample\nReturn the current date + 1:\n❮ MySQL Functions",
      "examples": [
        "SELECT CURDATE();",
        "CURDATE()",
        "SELECT CURDATE() + 1;"
      ]
    },
    {
      "title": "MySQL CURRENT_DATE() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the current date:\nDefinition and Usage\nThe CURRENT_DATE() function returns the current date.\nNote: The date is returned as \"YYYY-MM-DD\" (string) or as YYYYMMDD (numeric).\nNote: This function equals the CURDATE() function.\nSyntax\nTechnical Details\nMore Examples\nExample\nReturn the current date + 1:\n❮ MySQL Functions",
      "examples": [
        "SELECT CURRENT_DATE();",
        "CURRENT_DATE()",
        "SELECT CURRENT_DATE() + 1;"
      ]
    },
    {
      "title": "MySQL CURRENT_TIME() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn current time:\nDefinition and Usage\nThe CURRENT_TIME() function returns the current time.\nNote: The time is returned as \"HH-MM-SS\" (string) or as HHMMSS.uuuuuu (numeric).\nNote: This function equals the CURTIME() function.\nSyntax\nTechnical Details\nMore Examples\nExample\nReturn current time + 1:\n❮ MySQL Functions",
      "examples": [
        "SELECT CURRENT_TIME();",
        "CURRENT_TIME()",
        "SELECT CURRENT_TIME() + 1;"
      ]
    },
    {
      "title": "MySQL CURRENT_TIMESTAMP() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the current date and time:\nDefinition and Usage\nThe CURRENT_TIMESTAMP() function returns the current date and time.\nNote: The date and time is returned as \"YYYY-MM-DD HH-MM-SS\" (string) or as YYYYMMDDHHMMSS.uuuuuu (numeric).\nSyntax\nTechnical Details\nMore Examples\nExample\nReturn the current date and time + 1:\n❮ MySQL Functions",
      "examples": [
        "SELECT CURRENT_TIMESTAMP();",
        "CURRENT_TIMESTAMP()",
        "SELECT CURRENT_TIMESTAMP() + 1;"
      ]
    },
    {
      "title": "MySQL CURTIME() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn current time:\nDefinition and Usage\nThe CURTIME() function returns the current time.\nNote: The time is returned as \"HH-MM-SS\" (string) or as HHMMSS.uuuuuu (numeric).\nNote: This function equals the CURRENT_TIME() function.\nSyntax\nTechnical Details\nMore Examples\nExample\nReturn current time + 1:\n❮ MySQL Functions",
      "examples": [
        "SELECT CURTIME();",
        "CURTIME()",
        "SELECT CURTIME() + 1;"
      ]
    },
    {
      "title": "MySQL DATE() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nExtract the date part:\nDefinition and Usage\nThe DATE() function extracts the date part from a datetime expression.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nExtract the date part:\nExample\nExtract the date part (will return NULL):\nExample\nExtract the date part:\n❮ MySQL Functions",
      "examples": [
        "SELECT DATE(\"2017-06-15\");",
        "DATE(expression)",
        "SELECT DATE(\"2017-06-15 09:34:21\");",
        "SELECT DATE(\"The date is 2017-06-15\");",
        "SELECT DATE(OrderDate) FROM Orders;"
      ]
    },
    {
      "title": "MySQL DATEDIFF() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the number of days between two date values:\nDefinition and Usage\nThe DATEDIFF() function returns the number of days between two date values.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the number of days between two date values:\nExample\nReturn the number of days between two date values:\n❮ MySQL Functions",
      "examples": [
        "SELECT DATEDIFF(\"2017-06-25\", \"2017-06-15\");",
        "DATEDIFF(date1, date2)",
        "SELECT DATEDIFF(\"2017-06-25 09:34:21\", \"2017-06-15 15:25:35\");",
        "SELECT DATEDIFF(\"2017-01-01\", \"2016-12-24\");"
      ]
    },
    {
      "title": "MySQL DATE_ADD() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nAdd 10 days to a date and return the date:\nDefinition and Usage\nThe DATE_ADD() function adds a time/date interval to a date and then returns the date.\nSyntax\nParameter Values\nMICROSECOND\nSECOND\nMINUTE\nHOUR\nDAY\nWEEK\nMONTH\nQUARTER\nYEAR\nSECOND_MICROSECOND\nMINUTE_MICROSECOND\nMINUTE_SECOND\nHOUR_MICROSECOND\nHOUR_SECOND\nHOUR_MINUTE\nDAY_MICROSECOND\nDAY_SECOND\nDAY_MINUTE\nDAY_HOUR\nYEAR_MONTH\nTechnical Details\nMore Examples\nExample\nAdd 15 minutes to a date and return the date:\nExample\nSubtract 3 hours to a date and return the date:\nExample\nSubtract 2 months to a date and return the date:\n❮ MySQL Functions",
      "examples": [
        "SELECT DATE_ADD(\"2017-06-15\", INTERVAL 10 DAY);",
        "DATE_ADD(date, INTERVAL value addunit)",
        "SELECT DATE_ADD(\"2017-06-15 09:34:21\", INTERVAL 15 MINUTE);",
        "SELECT DATE_ADD(\"2017-06-15 09:34:21\", INTERVAL -3 HOUR);",
        "SELECT DATE_ADD(\"2017-06-15\", INTERVAL -2 MONTH);"
      ]
    },
    {
      "title": "MySQL DATE_FORMAT() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nFormat a date:\nDefinition and Usage\nThe DATE_FORMAT() function formats a date as specified.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nFormat a date:\nExample\nFormat a date:\nExample\nFormat a date:\n❮ MySQL Functions",
      "examples": [
        "SELECT DATE_FORMAT(\"2017-06-15\", \"%Y\");",
        "DATE_FORMAT(date, format)",
        "SELECT DATE_FORMAT(\"2017-06-15\", \"%M %d %Y\");",
        "SELECT DATE_FORMAT(\"2017-06-15\", \"%W %M %e %Y\");",
        "SELECT DATE_FORMAT(BirthDate, \"%W %M %e %Y\") FROM Employees;"
      ]
    },
    {
      "title": "MySQL DATE_SUB() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nSubtract 10 days from a date and return the date:\nDefinition and Usage\nThe DATE_SUB() function subtracts a time/date interval from a date and then returns the date.\nSyntax\nParameter Values\nMICROSECOND\nSECOND\nMINUTE\nHOUR\nDAY\nWEEK\nMONTH\nQUARTER\nYEAR\nSECOND_MICROSECOND\nMINUTE_MICROSECOND\nMINUTE_SECOND\nHOUR_MICROSECOND\nHOUR_SECOND\nHOUR_MINUTE\nDAY_MICROSECOND\nDAY_SECOND\nDAY_MINUTE\nDAY_HOUR\nYEAR_MONTH\nTechnical Details\nMore Examples\nExample\nSubtract 15 minutes from a date and return the date:\nExample\nSubtract 3 hours from a date and return the date:\nExample\nAdd 2 months to a date and return the date:\n❮ MySQL Functions",
      "examples": [
        "SELECT DATE_SUB(\"2017-06-15\", INTERVAL 10 DAY);",
        "DATE_SUB(date, INTERVAL value interval)",
        "SELECT DATE_SUB(\"2017-06-15 09:34:21\", INTERVAL 15 MINUTE);",
        "SELECT DATE_SUB(\"2017-06-15 09:34:21\", INTERVAL 3 HOUR);",
        "SELECT DATE_SUB(\"2017-06-15\", INTERVAL -2 MONTH);"
      ]
    },
    {
      "title": "MySQL DAY() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the day of the month for a date:\nDefinition and Usage\nThe DAY() function returns the day of the month for a given date (a number from 1 to 31).\nNote: This function equals the DAYOFMONTH() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the day of the month for a date:\nExample\nReturn the day of the month for the current system date:\n❮ MySQL Functions",
      "examples": [
        "SELECT DAY(\"2017-06-15\");",
        "DAY(date)",
        "SELECT DAY(\"2017-06-15 09:34:21\");",
        "SELECT DAY(CURDATE());"
      ]
    },
    {
      "title": "MySQL DAYNAME() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the weekday name for a date:\nDefinition and Usage\nThe DAYNAME() function returns the weekday name for a given date.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the weekday name for a date:\nExample\nReturn the weekday name for the current system date:\n❮ MySQL Functions",
      "examples": [
        "SELECT DAYNAME(\"2017-06-15\");",
        "DAYNAME(date)",
        "SELECT DAYNAME(\"2017-06-15 09:34:21\");",
        "SELECT DAYNAME(CURDATE());"
      ]
    },
    {
      "title": "MySQL DAYOFMONTH() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the day of the month for a date:\nDefinition and Usage\nThe DAYOFMONTH() function returns the day of the month for a given date (a number from 1 to 31).\nNote: This function equals the DAY() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the day of the month for a date:\nExample\nReturn the day of the month for the current system date:\n❮ MySQL Functions",
      "examples": [
        "SELECT DAYOFMONTH(\"2017-06-15\");",
        "DAYOFMONTH(date)",
        "SELECT DAYOFMONTH(\"2017-06-15 09:34:21\");",
        "SELECT DAYOFMONTH(CURDATE());"
      ]
    },
    {
      "title": "MySQL DAYOFWEEK() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the weekday index for a date:\nDefinition and Usage\nThe DAYOFWEEK() function returns the weekday index for a given date (a number from 1 to 7).\nNote: 1=Sunday, 2=Monday, 3=Tuesday, 4=Wednesday, 5=Thursday, 6=Friday, 7=Saturday.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the weekday index for a date:\nExample\nReturn the weekday index for the current system date:\n❮ MySQL Functions",
      "examples": [
        "SELECT DAYOFWEEK(\"2017-06-15\");",
        "DAYOFWEEK(date)",
        "SELECT DAYOFWEEK(\"2017-06-15 09:34:21\");",
        "SELECT DAYOFWEEK(CURDATE());"
      ]
    },
    {
      "title": "MySQL DAYOFYEAR() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the day of the year for a date:\nDefinition and Usage\nThe DAYOFYEAR() function returns the day of the year for a given date (a number from 1 to 366).\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the day of the year for a date:\nExample\nReturn the day of the year for the current system date:\n❮ MySQL Functions",
      "examples": [
        "SELECT DAYOFYEAR(\"2017-06-15\");",
        "DAYOFYEAR(date)",
        "SELECT DAYOFYEAR(\"2017-01-01\");",
        "SELECT DAYOFYEAR(CURDATE());"
      ]
    },
    {
      "title": "MySQL EXTRACT() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nExtract the month from a date:\nDefinition and Usage\nThe EXTRACT() function extracts a part from a given date.\nSyntax\nParameter Values\nMICROSECOND\nSECOND\nMINUTE\nHOUR\nDAY\nWEEK\nMONTH\nQUARTER\nYEAR\nSECOND_MICROSECOND\nMINUTE_MICROSECOND\nMINUTE_SECOND\nHOUR_MICROSECOND\nHOUR_SECOND\nHOUR_MINUTE\nDAY_MICROSECOND\nDAY_SECOND\nDAY_MINUTE\nDAY_HOUR\nYEAR_MONTH\nTechnical Details\nMore Examples\nExample\nExtract the week from a date:\nExample\nExtract the minute from a datetime:\nExample\nExtract the year and month from a datetime:\n❮ MySQL Functions",
      "examples": [
        "SELECT EXTRACT(MONTH FROM \"2017-06-15\");",
        "EXTRACT(part FROM date)",
        "SELECT EXTRACT(WEEK FROM \"2017-06-15\");",
        "SELECT EXTRACT(MINUTE FROM \"2017-06-15 09:34:21\");",
        "SELECT EXTRACT(YEAR_MONTH FROM \"2017-06-15 09:34:21\");"
      ]
    },
    {
      "title": "MySQL FROM_DAYS() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn a date from a numeric representation of the day:\nDefinition and Usage\nThe FROM_DAYS() function returns a date from a numeric datevalue.\nThe FROM_DAYS() function is to be used only with dates within the Gregorian calendar.\nNote: This function is the opposite of the TO_DAYS() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn a date from a numeric representation of the day:\n❮ MySQL Functions",
      "examples": [
        "SELECT FROM_DAYS(685467);",
        "FROM_DAYS(number)",
        "SELECT FROM_DAYS(780500);"
      ]
    },
    {
      "title": "MySQL HOUR() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the hour part of a datetime:\nDefinition and Usage\nThe HOUR() function returns the hour part for a given date (from 0 to 838).\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the hour part of a datetime:\n❮ MySQL Functions",
      "examples": [
        "SELECT HOUR(\"2017-06-20 09:34:00\");",
        "HOUR(datetime)",
        "SELECT HOUR(\"838:59:59\");"
      ]
    },
    {
      "title": "MySQL LAST_DAY() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nExtract the last day of the month for the given date:\nDefinition and Usage\nThe LAST_DAY() function extracts the last day of the month for a given date.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nExtract the last day of the month for the given date:\n❮ MySQL Functions",
      "examples": [
        "SELECT LAST_DAY(\"2017-06-20\");",
        "LAST_DAY(date)",
        "SELECT LAST_DAY(\"2017-02-10 09:34:00\");"
      ]
    },
    {
      "title": "MySQL LOCALTIME() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn current date and time:\nDefinition and Usage\nThe LOCALTIME() function returns the current date and time.\nNote: The date and time is returned as \"YYYY-MM-DD HH-MM-SS\" (string) or as YYYYMMDDHHMMSS.uuuuuu (numeric).\nSyntax\nTechnical Details\nMore Examples\nExample\nReturn current date and time + 1:\n❮ MySQL Functions",
      "examples": [
        "SELECT LOCALTIME();",
        "LOCALTIME()",
        "SELECT LOCALTIME() + 1;"
      ]
    },
    {
      "title": "MySQL LOCALTIMESTAMP() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn current date and time:\nDefinition and Usage\nThe LOCALTIMESTAMP() function returns the current date and time.\nNote: The date and time is returned as \"YYYY-MM-DD HH-MM-SS\" (string) or as YYYYMMDDHHMMSS.uuuuuu (numeric).\nSyntax\nTechnical Details\nMore Examples\nExample\nReturn current date and time + 1:\n❮ MySQL Functions",
      "examples": [
        "SELECT LOCALTIMESTAMP();",
        "LOCALTIMESTAMP()",
        "SELECT LOCALTIMESTAMP() + 1;"
      ]
    },
    {
      "title": "MySQL MAKEDATE() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nCreate and return a date based on  a year and a number of days value:\nDefinition and Usage\nThe MAKEDATE() function creates and returns a date based on a year and a number of days value.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nCreate and return a date based on  a year and a number of days value:\nExample\nCreate and return a date based on  a year and a number of days value:\nExample\nCreate and return a date based on  a year and a number of days value:\n❮ MySQL Functions",
      "examples": [
        "SELECT MAKEDATE(2017, 3);",
        "MAKEDATE(year, day)",
        "SELECT MAKEDATE(2017, 175);",
        "SELECT MAKEDATE(2017, 100);",
        "SELECT MAKEDATE(2017, 366);"
      ]
    },
    {
      "title": "MySQL MAKETIME() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nCreate and return a time value based on an hour, minute, and second value:\nDefinition and Usage\nThe MAKETIME() function creates and returns a time based on an hour, minute, and second value.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nCreate and return a time value based on an hour, minute, and second value:\nExample\nCreate and return a time value based on an hour, minute, and second value:\nExample\nCreate and return a time value based on an hour, minute, and second value:\n❮ MySQL Functions",
      "examples": [
        "SELECT MAKETIME(11, 35, 4);",
        "MAKETIME(hour, minute, second)",
        "SELECT MAKETIME(16, 1, 0);",
        "SELECT MAKETIME(21, 59, 59);",
        "SELECT MAKETIME(838, 59, 59);"
      ]
    },
    {
      "title": "MySQL MICROSECOND() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the microsecond part of a datetime:\nDefinition and Usage\nThe MICROSECOND() function returns the microsecond part of a time/datetime (from 0 to 999999).\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the microsecond part of a time value:\n❮ MySQL Functions",
      "examples": [
        "SELECT MICROSECOND(\"2017-06-20 09:34:00.000023\");",
        "MICROSECOND(datetime)",
        "SELECT MICROSECOND(\"23:59:59.000045\");"
      ]
    },
    {
      "title": "MySQL MINUTE() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the minute part of a datetime value:\nDefinition and Usage\nThe MINUTE() function returns the minute part of a time/datetime (from 0 to 59).\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the minute part of a time value:\n❮ MySQL Functions",
      "examples": [
        "SELECT MINUTE(\"2017-06-20 09:34:00\");",
        "MINUTE(datetime)",
        "SELECT MINUTE(\"23:59:59\");"
      ]
    },
    {
      "title": "MySQL MONTH() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the month part of a date:\nDefinition and Usage\nThe MONTH() function returns the month part for a given date (a number from 1 to 12).\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the month part of a date:\nExample\nReturn the month part of the current system date:\n❮ MySQL Functions",
      "examples": [
        "SELECT MONTH(\"2017-06-15\");",
        "MONTH(date)",
        "SELECT MONTH(\"2017-06-15 09:34:21\");",
        "SELECT MONTH(CURDATE());"
      ]
    },
    {
      "title": "MySQL MONTHNAME() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the name of the month for a date:\nDefinition and Usage\nThe MONTHNAME() function returns the name of the month for a given date.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the name of the month for a date:\nExample\nReturn the name of the month for the current system date:\n❮ MySQL Functions",
      "examples": [
        "SELECT MONTHNAME(\"2017-06-15\");",
        "MONTHNAME(date)",
        "SELECT MONTHNAME(\"2017-06-15 09:34:21\");",
        "SELECT MONTHNAME(CURDATE());"
      ]
    },
    {
      "title": "MySQL NOW() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn current date and time:\nDefinition and Usage\nThe NOW() function returns the current date and time.\nNote: The date and time is returned as \"YYYY-MM-DD HH:MM:SS\" (string) or as YYYYMMDDHHMMSS.uuuuuu (numeric).\nSyntax\nTechnical Details\nMore Examples\nExample\nReturn current date and time + 1:\n❮ MySQL Functions",
      "examples": [
        "SELECT NOW();",
        "NOW()",
        "SELECT NOW() + 1;"
      ]
    },
    {
      "title": "MySQL PERIOD_ADD() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nAdd a specified number of months to a period:\nDefinition and Usage\nThe PERIOD_ADD() function adds a specified number of months to a period.\nThe PERIOD_ADD() function will return the result formatted as YYYYMM.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nAdd a specified number of months to a period:\nExample\nAdd a specified number of months to a period:\n❮ MySQL Functions",
      "examples": [
        "SELECT PERIOD_ADD(201703, 5);",
        "PERIOD_ADD(period, number)",
        "SELECT PERIOD_ADD(201703, 15);",
        "SELECT PERIOD_ADD(201703, -2);"
      ]
    },
    {
      "title": "MySQL PERIOD_DIFF() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the difference between two periods:\nDefinition and Usage\nThe PERIOD_DIFF() function returns the difference between two periods. The result will be in months.\nNote: period1 and period2 should be in the same format.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the difference between two periods:\nExample\nReturn the difference between two periods:\n❮ MySQL Functions",
      "examples": [
        "SELECT PERIOD_DIFF(201710, 201703);",
        "PERIOD_DIFF(period1, period2)",
        "SELECT PERIOD_DIFF(201703, 201803);",
        "SELECT PERIOD_DIFF(1703, 1612);"
      ]
    },
    {
      "title": "MySQL QUARTER() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the quarter of the year for the date:\nDefinition and Usage\nThe QUARTER() function returns the quarter of the year for a given date value (a number from 1 to 4).\nJanuary-March returns 1\nApril-June returns 2\nJuly-Sep returns 3\nOct-Dec returns 4\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the quarter of the year for the date:\nExample\nReturn the quarter of the year for the date:\n❮ MySQL Functions",
      "examples": [
        "SELECT QUARTER(\"2017-06-15\");",
        "QUARTER(date)",
        "SELECT QUARTER(\"2017-01-01 09:34:21\");",
        "SELECT QUARTER(CURDATE());"
      ]
    },
    {
      "title": "MySQL SECOND() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the seconds part of a datetime value:\nDefinition and Usage\nThe SECOND() function returns the seconds part of a time/datetime (from 0 to 59).\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the seconds part of a time value:\n❮ MySQL Functions",
      "examples": [
        "SELECT SECOND(\"2017-06-20 09:34:00.000023\");",
        "SECOND(datetime)",
        "SELECT SECOND(\"23:59:59\");"
      ]
    },
    {
      "title": "MySQL SEC_TO_TIME() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn a time value based on a specified seconds value:\nDefinition and Usage\nThe SEC_TO_TIME() function returns a time value (in format HH:MM:SS) based on the specified seconds.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn a time value based on a specified seconds value:\n❮ MySQL Functions",
      "examples": [
        "SELECT SEC_TO_TIME(1);",
        "SEC_TO_TIME(seconds)",
        "SELECT SEC_TO_TIME(-6897);"
      ]
    },
    {
      "title": "MySQL STR_TO_DATE() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn a date based on a string and a format:\nDefinition and Usage\nThe STR_TO_DATE() function returns a date based on a string and a format.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn a date based on a string and a format:\nExample\nReturn a date based on a string and a format:\nExample\nReturn a date based on a string and a format:\n❮ MySQL Functions",
      "examples": [
        "SELECT STR_TO_DATE(\"August 10 2017\", \"%M %d %Y\");",
        "STR_TO_DATE(string, format)",
        "SELECT STR_TO_DATE(\"August,5,2017\", \"%M %e %Y\");",
        "SELECT STR_TO_DATE(\"Monday, August 14, 2017\", \"%W %M %e %Y\");",
        "SELECT STR_TO_DATE(\"2017,8,14 10,40,10\", \"%Y,%m,%d %h,%i,%s\");"
      ]
    },
    {
      "title": "MySQL SUBDATE() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nSubtract 10 days from a date and return the date:\nDefinition and Usage\nThe SUBDATE() function subtracts a time/date interval from a date and then returns the date.\nSyntax\nOR:\nParameter Values\nMICROSECOND\nSECOND\nMINUTE\nHOUR\nDAY\nWEEK\nMONTH\nQUARTER\nYEAR\nSECOND_MICROSECOND\nMINUTE_MICROSECOND\nMINUTE_SECOND\nHOUR_MICROSECOND\nHOUR_SECOND\nHOUR_MINUTE\nDAY_MICROSECOND\nDAY_SECOND\nDAY_MINUTE\nDAY_HOUR\nYEAR_MONTH\nTechnical Details\nMore Examples\nExample\nSubtract 15 minutes from a date and return the date:\nExample\nSubtract 3 hours from a date and return the date:\nExample\nAdd 2 months to a date and return the date:\n❮ MySQL Functions",
      "examples": [
        "SELECT SUBDATE(\"2017-06-15\", INTERVAL 10 DAY);",
        "SUBDATE(date, INTERVAL value unit)",
        "SUBDATE(date, days)",
        "SELECT SUBDATE(\"2017-06-15 09:34:21\", INTERVAL 15 MINUTE);",
        "SELECT SUBDATE(\"2017-06-15 09:34:21\", INTERVAL 3 HOUR);",
        "SELECT SUBDATE(\"2017-06-15\", INTERVAL -2 MONTH);"
      ]
    },
    {
      "title": "MySQL SUBTIME() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nSubtract 5.000001 seconds and return the datetime:\nDefinition and Usage\nThe SUBTIME() function subtracts time from a time/datetime expression and then returns the new time/datetime.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nSubtract 3 hours, 2 minutes, 5.000001 seconds and return the datetime:\nExample\nSubtract 5 seconds and return the time:\nExample\nSubtract 3 minutes and return the time:\nExample\nAdd 3 hours, 2 minutes, and 5 seconds, and return the time:\n❮ MySQL Functions",
      "examples": [
        "SELECT SUBTIME(\"2017-06-15 10:24:21.000004\", \"5.000001\");",
        "SUBTIME(datetime, time_interval)",
        "SELECT SUBTIME(\"2017-06-15 10:24:21.000004\", \"3:2:5.000001\");",
        "SELECT SUBTIME(\"10:24:21\", \"5\");",
        "SELECT SUBTIME(\"10:24:21\", \"300\");",
        "SELECT SUBTIME(\"10:24:21\", \"-3:2:5\");"
      ]
    },
    {
      "title": "MySQL SYSDATE() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the current date and time:\nDefinition and Usage\nThe SYSDATE() function returns the current date and time.\nNote: The date and time is returned as \"YYYY-MM-DD HH:MM:SS\" (string) or as YYYYMMDDHHMMSS (numeric).\nSyntax\nTechnical Details\nMore Examples\nExample\nReturn the current date and time + 1:\n❮ MySQL Functions",
      "examples": [
        "SELECT SYSDATE();",
        "SYSDATE()",
        "SELECT SYSDATE() + 1;"
      ]
    },
    {
      "title": "MySQL TIME() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nExtract the time part from a time expression:\nDefinition and Usage\nThe TIME() function extracts the time part from a given time/datetime.\nNote: This function returns \"00:00:00\" if expression is not a datetime/time, or NULL if expression is NULL.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nExtract the time part from the datetime expression:\nExample\nExtract the time part from the datetime expression:\nExample\nExtract the time part from NULL:\n❮ MySQL Functions",
      "examples": [
        "SELECT TIME(\"19:30:10\");",
        "TIME(expression)",
        "SELECT TIME(\"2017-08-15 19:30:10\");",
        "SELECT TIME(\"2017-08-15 19:30:10.000001\");",
        "SELECT TIME(NULL);"
      ]
    },
    {
      "title": "MySQL TIME_FORMAT() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nFormat a time:\nDefinition and Usage\nThe TIME_FORMAT() function formats a time by a specified format.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nFormat a time:\nExample\nFormat a time:\nExample\nFormat a time:\n❮ MySQL Functions",
      "examples": [
        "SELECT TIME_FORMAT(\"19:30:10\", \"%H %i %s\");",
        "TIME_FORMAT(time, format)",
        "SELECT TIME_FORMAT(\"19:30:10\", \"%h %i %s %p\");",
        "SELECT TIME_FORMAT(\"19:30:10\", \"%r\");",
        "SELECT TIME_FORMAT(\"19:30:10\", \"%T\");"
      ]
    },
    {
      "title": "MySQL TIME_TO_SEC() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nConvert a time value into seconds:\nDefinition and Usage\nThe TIME_TO_SEC() function converts a time value into seconds.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert a time value into seconds:\nExample\nConvert a time value into seconds:\nExample\nConvert a time value into seconds:\n❮ MySQL Functions",
      "examples": [
        "SELECT TIME_TO_SEC(\"19:30:10\");",
        "TIME_TO_SEC(time)",
        "SELECT TIME_TO_SEC(\"00:00:05\");",
        "SELECT TIME_TO_SEC(\"03:30:00.999999\");",
        "SELECT TIME_TO_SEC(\"-03:30:00\");"
      ]
    },
    {
      "title": "MySQL TIMEDIFF() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the difference between two time expressions:\nDefinition and Usage\nThe TIMEDIFF() function returns the difference between two time/datetime expressions.\nNote: time1 and time2 should be in the same format, and the calculation is time1 - time2.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the difference between two datetime expressions:\n❮ MySQL Functions",
      "examples": [
        "SELECT TIMEDIFF(\"13:10:11\", \"13:10:10\");",
        "TIMEDIFF(time1, time2)",
        "SELECT TIMEDIFF(\"2017-06-25 13:10:11\", \"2017-06-15 13:10:10\");"
      ]
    },
    {
      "title": "MySQL TIMESTAMP() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn a datetime value based on the arguments:\nDefinition and Usage\nThe TIMESTAMP() function returns a datetime value based on a date or datetime value.\nNote: If there are specified two arguments with this function, it first adds the second argument to the first, and then returns a datetime value.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn a datetime value based on the arguments:\n❮ MySQL Functions",
      "examples": [
        "SELECT TIMESTAMP(\"2017-07-23\",  \"13:10:11\");",
        "TIMESTAMP(expression, time)",
        "SELECT TIMESTAMP(\"2017-07-23\");"
      ]
    },
    {
      "title": "MySQL TO_DAYS() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the number of days between the date and year 0:\nDefinition and Usage\nThe TO_DAYS() function returns the number of days between a date and year 0 (date \"0000-00-00\").\nThe TO_DAYS() function can be used only with dates within the Gregorian calendar.\nNote: This function is the opposite of the FROM_DAYS() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the number of days between the date and year 0:\n❮ MySQL Functions",
      "examples": [
        "SELECT TO_DAYS(\"2017-06-20\");",
        "TO_DAYS(date)",
        "SELECT TO_DAYS(\"2017-06-20 09:34:00\");"
      ]
    },
    {
      "title": "MySQL WEEK() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the week number for a date:\nDefinition and Usage\nThe WEEK() function returns the week number for a given date (a number from 0 to 53).\nSyntax\nParameter Values\nOptional. Specifies what day the week starts on. Can be one of the following:\n0 - First day of week is Sunday\n1 - First day of week is Monday and the first week of the year has more than 3 days\n2 - First day of week is Sunday\n3 - First day of week is Monday and the first week of the year has more than 3 days\n4 - First day of week is Sunday and the first week of the year has more than 3 days\n5 - First day of week is Monday\n6 - First day of week is Sunday and the first week of the year has more than 3 days\n7 - First day of week is Monday\nTechnical Details\nMore Examples\nExample\nReturn the week number for a date:\nExample\nReturn the week number for the current system date:\n❮ MySQL Functions",
      "examples": [
        "SELECT WEEK(\"2017-06-15\");",
        "WEEK(date, firstdayofweek)",
        "SELECT WEEK(\"2017-10-25\");",
        "SELECT WEEK(CURDATE());"
      ]
    },
    {
      "title": "MySQL WEEKDAY() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the weekday number for a date:\nDefinition and Usage\nThe WEEKDAY() function returns the weekday number for a given date.\nNote: 0 = Monday, 1 = Tuesday, 2 = Wednesday, 3 = Thursday, 4 = Friday, 5 = Saturday, 6 = Sunday.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the weekday number for a date:\nExample\nReturn the weekday number for the current system date:\n❮ MySQL Functions",
      "examples": [
        "SELECT WEEKDAY(\"2017-06-15\");",
        "WEEKDAY(date)",
        "SELECT WEEKDAY(\"2017-01-01\");",
        "SELECT WEEKDAY(CURDATE());"
      ]
    },
    {
      "title": "MySQL WEEKOFYEAR() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the week number for a date:\nDefinition and Usage\nThe WEEKOFYEAR() function returns the week number for a given date (a number from 1 to 53).\nNote: This function assumes that the first day of the week is Monday and the first week of the year has more than 3 days.\nTip: Also look at the WEEK() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the week number for a date:\nExample\nReturn the week number for the current system date:\n❮ MySQL Functions",
      "examples": [
        "SELECT WEEKOFYEAR(\"2017-06-15\");",
        "WEEKOFYEAR(date)",
        "SELECT WEEKOFYEAR(\"2017-01-01\");",
        "SELECT WEEKOFYEAR(CURDATE());"
      ]
    },
    {
      "title": "MySQL YEAR() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the year part of a date:\nDefinition and Usage\nThe YEAR() function returns the year part for a given date (a number from 1000 to 9999).\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the year part of a date:\nExample\nReturn the year part of the current system date:\n❮ MySQL Functions",
      "examples": [
        "SELECT YEAR(\"2017-06-15\");",
        "YEAR(date)",
        "SELECT YEAR(\"2017-06-15 09:34:21\");",
        "SELECT YEAR(CURDATE());"
      ]
    },
    {
      "title": "MySQL YEARWEEK() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the year and week number for a date:\nDefinition and Usage\nThe YEARWEEK() function returns the year and week number (a number from 0 to 53) for a given date.\nSyntax\nParameter Values\nOptional. Specifies what day the week starts on. Can be one of the following:\n0 - First day of week is Sunday\n1 - First day of week is Monday and the first week has more than 3 days\n2 - First day of week is Sunday\n3 - First day of week is Monday and the first week has more than 3 days\n4 - First day of week is Sunday and the first week has more than 3 days\n5 - First day of week is Monday\n6 - First day of week is Sunday and the first week has more than 3 days\n7 - First day of week is Monday\nTechnical Details\nMore Examples\nExample\nReturn the year and week number for a date:\nExample\nReturn the year and week number for the current system date:\n❮ MySQL Functions",
      "examples": [
        "SELECT YEARWEEK(\"2017-06-15\");",
        "YEARWEEK(date, firstdayofweek)",
        "SELECT YEARWEEK(\"2017-10-25\");",
        "SELECT YEARWEEK(CURDATE());"
      ]
    },
    {
      "title": "MySQL BIN() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn a binary representation of 15:\nDefinition and Usage\nThe BIN() function returns a binary representation of a number, as a string value.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn a binary representation of 111:\nExample\nReturn a binary representation of 8:\n❮ MySQL Functions",
      "examples": [
        "SELECT BIN(15);",
        "BIN(number)",
        "SELECT BIN(111);",
        "SELECT BIN(8);"
      ]
    },
    {
      "title": "MySQL BINARY Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nConvert a value to a binary string:\nDefinition and Usage\nThe BINARY function converts a value to a binary string.\nThis function is equivalent to using CAST(value AS BINARY).\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nHere MySQL performs a character-by-character comparison of  \"HELLO\" and \"hello\" and return 1 (because on a character-by-character basis, they are equivalent):\nExample\nHere MySQL performs a byte-by-byte comparison of  \"HELLO\" and \"hello\" and return 0 (because on a byte-by-byte basis, they are NOT equivalent):\n❮ MySQL Functions",
      "examples": [
        "SELECT BINARY \"W3Schools.com\";",
        "BINARY value",
        "SELECT \"HELLO\" = \"hello\";",
        "SELECT BINARY \"HELLO\" = \"hello\";"
      ]
    },
    {
      "title": "MySQL CASE Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nGo through conditions and return a value when the first condition is met:\nDefinition and Usage\nThe CASE statement goes through conditions and return a value when the first condition is met (like an IF-THEN-ELSE statement). So, once a condition is true, it will stop reading and return the result.\nIf no conditions are true, it will return the value in the ELSE clause.\nIf there is no ELSE part and no conditions are true, it returns NULL.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nThe following SQL will order the customers by City. However, if City is NULL, then order by Country:\nExample\n❮ MySQL Functions",
      "examples": [
        "SELECT OrderID, Quantity,\nCASE\nWHEN Quantity > 30 THEN \"The quantity is greater than 30\"\nWHEN Quantity = 30 THEN \"The quantity is 30\"\nELSE \"The quantity is under 30\"\nEND\nFROM OrderDetails;",
        "CASE\nWHEN condition1 THEN result1\nWHEN condition2 THEN result2\nWHEN conditionN THEN resultN\nELSE result\nEND;",
        "SELECT CustomerName, City, Country\nFROM Customers\nORDER BY\n(CASE\nWHEN City IS NULL THEN Country\nELSE City\nEND);"
      ]
    },
    {
      "title": "MySQL CAST() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nConvert a value to a DATE datatype:\nDefinition and Usage\nThe CAST() function converts a value (of any type) into the specified datatype.\nTip: See also the CONVERT() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert a value to a CHAR datatype:\nExample\nConvert a value to a TIME datatype:\nExample\nConvert a value to a SIGNED datatype:\n❮ MySQL Functions",
      "examples": [
        "SELECT CAST(\"2017-08-29\" AS DATE);",
        "CAST(value AS datatype)",
        "SELECT CAST(150 AS CHAR);",
        "SELECT CAST(\"14:06:10\" AS TIME);",
        "SELECT CAST(5-10 AS SIGNED);"
      ]
    },
    {
      "title": "MySQL COALESCE() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the first non-null value in a list:\nDefinition and Usage\nThe COALESCE() function returns the first non-null value in a list.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the first non-null value in a list:\n❮ MySQL Functions",
      "examples": [
        "SELECT COALESCE(NULL, NULL, NULL, 'W3Schools.com', NULL, 'Example.com');",
        "COALESCE(val1, val2, ...., val_n)",
        "SELECT COALESCE(NULL, 1, 2, 'W3Schools.com');"
      ]
    },
    {
      "title": "MySQL CONNECTION_ID() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the unique connection ID for the current connection:\nDefinition and Usage\nThe CONNECTION_ID() function returns the unique connection ID for the current connection.\nSyntax\nTechnical Details\n❮ MySQL Functions",
      "examples": [
        "SELECT CONNECTION_ID();",
        "CONNECTION_ID()"
      ]
    },
    {
      "title": "MySQL CONV() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nConvert a number from numeric base system 10 to numeric base system 2:\nDefinition and Usage\nThe CONV() function converts a number from one numeric base system to another, and returns the result as a string value.\nNote: This function returns NULL if any of the parameters are NULL.\nTip: Also look at the BIN() function.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert a number from numeric base system 2 to numeric base system 10:\nExample\nConvert a number from numeric base system 10 to numeric base system 16:\n❮ MySQL Functions",
      "examples": [
        "SELECT CONV(15, 10, 2);",
        "CONV(number, from_base, to_base)",
        "SELECT CONV(1111, 2, 10);",
        "SELECT CONV(88, 10, 16);"
      ]
    },
    {
      "title": "MySQL CONVERT() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nConvert a value to a DATE datatype:\nDefinition and Usage\nThe CONVERT() function converts a value into the specified datatype or character set.\nTip: Also look at the CAST() function.\nSyntax\nOR:\nParameter Values\nTechnical Details\nMore Examples\nExample\nConvert a value to a CHAR datatype:\nExample\nConvert a value to a TIME datatype:\nExample\nConvert a value to LATIN1 character set:\n❮ MySQL Functions",
      "examples": [
        "SELECT CONVERT(\"2017-08-29\", DATE);",
        "CONVERT(value, type)",
        "CONVERT(value USING charset)",
        "SELECT CONVERT(150, CHAR);",
        "SELECT CONVERT(\"14:06:10\", TIME);",
        "SELECT CONVERT(\"W3Schools.com\" USING latin1);"
      ]
    },
    {
      "title": "MySQL CURRENT_USER() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the user name and host name for the MySQL account:\nDefinition and Usage\nThe CURRENT_USER() function returns the user name and host name for the MySQL account that the server used to authenticate the current client.\nThe result is returned as a string in the UTF8 character set.\nTip: See also the USER() function.\nSyntax\nTechnical Details\n❮ MySQL Functions",
      "examples": [
        "SELECT CURRENT_USER();",
        "CURRENT_USER()"
      ]
    },
    {
      "title": "MySQL DATABASE() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the name of the current (default) database:\nDefinition and Usage\nThe DATABASE() function returns the name of the current database.\nIf there is no current database, this function returns NULL or \"\".\nSyntax\nTechnical Details\n❮ MySQL Functions",
      "examples": [
        "SELECT DATABASE();",
        "DATABASE()"
      ]
    },
    {
      "title": "MySQL IF() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn \"YES\" if the condition is TRUE, or \"NO\" if the condition is FALSE:\nDefinition and Usage\nThe IF() function returns a value if a condition is TRUE, or another value if a condition is FALSE.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn 5 if the condition is TRUE, or 10 if the condition is FALSE:\nExample\nTest whether two strings are the same and return \"YES\" if they are, or \"NO\" if not:\nExample\nReturn \"MORE\" if the condition is TRUE, or \"LESS\" if the condition is FALSE:\n❮ MySQL Functions",
      "examples": [
        "SELECT IF(500<1000, \"YES\", \"NO\");",
        "IF(condition, value_if_true, value_if_false)",
        "SELECT IF(500<1000, 5, 10);",
        "SELECT IF(STRCMP(\"hello\",\"bye\") = 0, \"YES\", \"NO\");",
        "SELECT OrderID, Quantity, IF(Quantity>10, \"MORE\", \"LESS\")\nFROM OrderDetails;"
      ]
    },
    {
      "title": "MySQL IFNULL() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the specified value IF the expression is NULL, otherwise return the expression:\nDefinition and Usage\nThe IFNULL() function returns a specified value if the expression is NULL.\nIf the expression is NOT NULL, this function returns the expression.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nReturn the specified value IF the expression is NULL, otherwise return the expression:\nExample\nReturn the specified value IF the expression is NULL, otherwise return the expression:\n❮ MySQL Functions",
      "examples": [
        "SELECT IFNULL(NULL, \"W3Schools.com\");",
        "IFNULL(expression, alt_value)",
        "SELECT IFNULL(\"Hello\", \"W3Schools.com\");",
        "SELECT IFNULL(NULL, 500);"
      ]
    },
    {
      "title": "MySQL ISNULL() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nTest whether an expression is NULL:\nDefinition and Usage\nThe ISNULL() function returns 1 or 0 depending on whether an expression is NULL.\nIf expression is NULL, this function returns 1. Otherwise, it returns 0.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nTest whether an expression is NULL:\nExample\nTest whether an expression is NULL:\nExample\nTest whether an expression is NULL:\n❮ MySQL Functions",
      "examples": [
        "SELECT ISNULL(NULL);",
        "ISNULL(expression)",
        "SELECT ISNULL(\"\");",
        "SELECT ISNULL(350);",
        "SELECT ISNULL(\"Hello world!\");"
      ]
    },
    {
      "title": "MySQL LAST_INSERT_ID() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the AUTO_INCREMENT id of the last row that has been inserted or updated in a table:\nDefinition and Usage\nThe LAST_INSERT_ID() function returns the AUTO_INCREMENT id of the last row that has been inserted or updated in a table.\nSyntax\nParameter Values\nTechnical Details\n❮ MySQL Functions",
      "examples": [
        "SELECT LAST_INSERT_ID();",
        "LAST_INSERT_ID(expression)"
      ]
    },
    {
      "title": "MySQL NULLIF() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nCompare two expressions:\nDefinition and Usage\nThe NULLIF() function compares two expressions and returns NULL if they are equal. Otherwise, the first expression is returned.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nCompare two expressions:\nExample\nCompare two expressions:\nExample\nCompare two expressions:\n❮ MySQL Functions",
      "examples": [
        "SELECT NULLIF(25, 25);",
        "NULLIF(expr1, expr2)",
        "SELECT NULLIF(25, \"Hello\");",
        "SELECT NULLIF(\"Hello\", \"world\");",
        "SELECT NULLIF(\"2017-08-25\", \"2017-08-25\");"
      ]
    },
    {
      "title": "MySQL SESSION_USER() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the current user name and host name for the MySQL connection:\nDefinition and Usage\nThe SESSION_USER() function returns the current user name and host name for the MySQL connection.\nNote: This function is equal to the SYSTEM_USER() and the USER() function.\nSyntax\nTechnical Details\n❮ MySQL Functions",
      "examples": [
        "SELECT SESSION_USER();",
        "SESSION_USER()"
      ]
    },
    {
      "title": "MySQL SYSTEM_USER() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the current user name and host name for the MySQL connection:\nDefinition and Usage\nThe SYSTEM_USER() function returns the current user name and host name for the MySQL connection.\nNote: This function is equal to the SESSION_USER() function and the USER() function.\nSyntax\nTechnical Details\n❮ MySQL Functions",
      "examples": [
        "SELECT SYSTEM_USER();",
        "SYSTEM_USER()"
      ]
    },
    {
      "title": "MySQL USER() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the current user name and host name for the MySQL connection:\nDefinition and Usage\nThe USER() function returns the current user name and host name for the MySQL connection.\nNote: This function is equal to the SESSION_USER() function and the SYSTEM_USER() function.\nTip: Also look at the CURRENT_USER() function.\nSyntax\nTechnical Details\n❮ MySQL Functions",
      "examples": [
        "SELECT USER();",
        "USER()"
      ]
    },
    {
      "title": "MySQL VERSION() Function",
      "summary": "❮ MySQL Functions\nExampleGet your own SQL Server\nReturn the current version of the MySQL database:\nDefinition and Usage\nThe VERSION() function returns the current version of the MySQL database, as a string.\nSyntax\nTechnical Details\n❮ MySQL Functions",
      "examples": [
        "SELECT VERSION();",
        "VERSION()"
      ]
    },
    {
      "title": "MySQL Examples",
      "summary": "MySQL SELECT\nExamples Explained\nMySQL WHERE\nExamples Explained\nMySQL AND, OR and NOT\nExamples Explained\nMySQL ORDER BY\nExamples Explained\nREMOVE ADS\nMySQL NULL Values\nExamples Explained\nMySQL LIMIT\nExamples Explained\nMySQL MIN() and MAX()\nExamples Explained\nMySQL COUNT(), AVG() and SUM()\nExamples Explained\nMySQL LIKE\nExamples Explained\nMySQL Wildcards\nExamples Explained\nMySQL IN\nExamples Explained\nMySQL BETWEEN\nExamples Explained\nMySQL Aliases\nExamples Explained\nMySQL Joins\nExamples Explained\nMySQL UNION\nExamples Explained\nMySQL GROUP BY\nExamples Explained\nMySQL HAVING\nExamples Explained\nMySQL EXISTS\nExample Explained\nMySQL ANY and ALL\nExamples Explained\nMySQL CASE\nExamples Explained\nMySQL Comments\nExamples Explained\nMySQL Database\nMySQL Database tutorials can be found here:",
      "examples": []
    },
    {
      "title": "MySQL Online Editor (Compiler)",
      "summary": "MySQL Editor\nWith our online MySQL editor, you can edit SQL statements, and view the result in your browser.\nExample\nClick on the \"Try it Yourself\" button to see how it works.\nPublish Your Code\nIf you want to create your own website, or web applications with a SQL Database, check out W3Schools Spaces.\nW3Schools Spaces is a website-building tool that enables you to create and share your website.\nIn addition to a server, you get a SQL Database where you can store and access your data.\nIt's easy to use and doesn't require any setup.\nThe code editor is packed with features to help you achieve more:\nTemplates: Start from scratch or use a template\nCloud-based: no installations required. You only need your browser\nTerminal & Log: debug and troubleshoot your code easily\nFile Navigator: switch between files inside the code editor\nAnd much more!\nLearn Faster\nPractice is key to mastering coding, and the best way to put your SQL knowledge into practice is by getting practical with code.\nUse W3Schools Spaces to build, test and deploy code.\nThe code editor lets you write and practice different types of computer languages.\nNew languages are added all the time:\nIf you don't know SQL, we suggest that you read our SQL Tutorial from scratch.\nEasy Package Management\nGet an overview of your packages and easily add or delete frameworks and libraries. Then, with just one click, you can make changes to your packages without manual installation.\nBuild Powerful Websites\nYou can use the code editor in W3School Spaces to build frontend or full-stack websites from scratch.\nOr you can use the 60+ templates available and save time:\nCreate your Spaces account today and explore them all!\nShare Your Website With The World\nHost and publish your websites in no time with W3School Spaces.\nW3Schools subdomain and SSL certificate are included for free with W3School Spaces. An SSL certificate makes your website safe and secure. It also helps people trust your website and makes it easier to find it online.\nWant a custom domain for your website?\nYou can buy a domain or transfer an existing one and connect it to your space.\nHow Does It Work?\nGet started in a few clicks with W3School Spaces.",
      "examples": [
        "SELECT * FROM Customers;"
      ]
    },
    {
      "title": "MySQL Quiz",
      "summary": "You can test your MySQL skills with W3Schools' Quiz.\nThe Test\nThe test contains 25 questions and there is no time limit.\nThe test is not official, it's just a nice way to see how much you know, or don't know, about MySQL and SQL.\nCount Your Score\nYou will get 1 point for each correct answer. At the end of the Quiz, your total score will be displayed. Maximum score is 25 points.\nStart the Quiz\nGood luck!\nStart the MySQL Quiz ❯\nIf you don't know MySQL, we suggest that you read our MySQL Tutorial from scratch.",
      "examples": []
    },
    {
      "title": "MySQL Exercises",
      "summary": "Exercises\nTest your MySQL skills with exercises from all categories:\nIntro\nRDBMS\nAbout SQL Statements\nSELECT\nWHERE\nAND OR NOT\nORDER BY\nINSERT\nNULL values\nUPDATE\nDELETE\nLIMIT\nMIN MAX\nCOUNT AVG SUM\nLIKE\nWildcards\nIN\nBETWEEN\nAlias\nJOIN\nINNER JOIN\nLEFT JOIN\nRIGHT JOIN\nCROSS JOIN\nUNION\nGROUP BY\nHAVING\nEXISTS\nANY, ALL\nINSERT INTO SELECT\nCASE\nIFNULL() and COALESCE()\nComments\nOperators\nCREATE DATABASE\nDROP DATABASE\nCREATE TABLE\nDROP TABLE\nALTER TABLE\nConstraints\nNOT NULL\nUNIQUE\nPRIMARY KEY\nFOREIGN KEY\nCHECK\nDEFAULT\nCREATE INDEX\nAUTO_INCREMENT\nDates\nViews\nLog in to track your progress\nIf you haven't already, sign up to become a W3Schooler, and get points for every exercise you complete.\nAs a logged on W3Schools user you will have access to many features like having your own web page, track your learning progress, receive personal guided paths, and more.\nThe Exercise\nThe exercises are a mix of \"multiple choice\" and \"fill in the blanks\" questions. There are between 3 and 9 questions in each catergory. The answer can be found in the corresponding tutorial chapter. If you're stuck, or answer wrong, you can try again or hit the \"Show Answer\" button to see the correct answer.",
      "examples": []
    },
    {
      "title": "MySQL Syllabus",
      "summary": "Introduction\nThe W3Schools MySQL Tutorial is comprehensive and beginner-friendly.\nIt will give you a fundamental knowledge of MySQL database management.\nIt is designed for beginners and requires basic SQL knowledge.\nThe content has been carefully made to be bite-sized, simple, and easy to understand.\nThe content has been proven by millions of users over the years. It is updated and improved frequently.\nThe syllabus outline and its sequence are structured so you can learn MySQL step by step, from basic queries to advanced database management.\nGet Started With MySQL »\nLearning Outcomes\nUnderstand basic SQL syntax and how to write queries.\nLearn database operations like SELECT, INSERT, UPDATE, and DELETE.\nWork with database and table structures using CREATE, DROP, and ALTER.\nUnderstand advanced SQL operations like JOINs, UNION, and GROUP BY.\nHandle NULL values and learn about constraints.\nUse SQL functions for strings, numbers, and dates.\nCreate and manage indexes and views.\nWork with advanced SQL features like wildcards and aliases.\nNote: Are you a teacher teaching MySQL? W3Schools Academy is a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more about Academy here.\nWhich Subjects Are MySQL Relevant For?\nDatabase Management:\nMySQL can be used for managing relational databases.\nWeb Development:\nMySQL is widely used in web applications.\nData Analysis:\nMySQL supports complex data analysis.\nApplication Development:\nMySQL integrates with various programming languages.\nBusiness Intelligence:\nMySQL handles business data efficiently.\nData Warehousing:\nMySQL supports large-scale data storage.\nEnterprise Systems:\nMySQL powers enterprise applications.\nGet Started\nActivities\nIn this tutorial we offer different activities for you to learn MySQL for free:\nLessons\nExercises\nQuizzes\nSign in to Track Progress\nYou can also create a free account to track your progress.\nAs a signed-in user, you get access to features such as:\nLearning paths\nSandbox and lab environments\nAchievements\nAnd much more!\nSign Up - It's free\nOverview of the Modules\nMySQL HOME\nMySQL Intro\nMySQL RDBMS\nMySQL SQL\nMySQL SELECT\nMySQL WHERE\nMySQL AND, OR, NOT\nMySQL ORDER BY\nMySQL INSERT INTO\nMySQL NULL Values\nMySQL UPDATE\nMySQL DELETE\nMySQL LIMIT\nMySQL MIN and MAX\nMySQL COUNT, AVG, SUM\nMySQL LIKE\nMySQL Wildcards\nMySQL IN\nMySQL BETWEEN\nMySQL Aliases\nMySQL Joins\nMySQL INNER JOIN\nMySQL LEFT JOIN\nMySQL RIGHT JOIN\nMySQL CROSS JOIN\nMySQL Self Join\nMySQL UNION\nMySQL GROUP BY\nMySQL HAVING\nMySQL EXISTS\nMySQL ANY, ALL\nMySQL INSERT SELECT\nMySQL CASE\nMySQL Null Functions\nMySQL Comments\nMySQL Operators\nMySQL Create DB\nMySQL Drop DB\nMySQL Create Table\nMySQL Drop Table\nMySQL Alter Table\nMySQL Constraints\nMySQL Not Null\nMySQL Unique\nMySQL Primary Key\nMySQL Foreign Key\nMySQL Check\nMySQL Default\nMySQL Create Index\nMySQL Auto Increment\nMySQL Dates\nMySQL Views\nGet Started\nSandbox and Lab Environment\nMySQL, like any database system, is best learned through hands-on practice.\nTry this example using our editor:\nExampleGet your own SQL Server\nIf you want to explore more and host your project, we have a feature called Spaces that allows you to build, test and run websites.\nHere you get a secure sandbox environment called Spaces. That includes a W3Schools subdomain, hosting, and secure SSL certificates.\nMySQL is not hosted on W3Schools Spaces; you need to set it up on a platform like PlanetScale or a hosting provider and connect your application to it.\nSpaces require no installation and run directly in the browser.\nFeatures include:\nCollaboration\nFile navigator\nTerminal & log\nPackage manager\nDatabase\nEnvironment manager\nAnalytics\nCreate a Spaces Account\nMySQL Certification\nW3Schools offers an end-of-pathway certification program.\nHere you can take exams to get certified.\nThe MySQL exam is a test that summarizes the W3Schools MySQL syllabus.\nAfter passing the exam you get the \"Certified MySQL Developer\" Certification.\nThe certification exam is adaptive and graded; students will get a grade from intermediate, advanced to professional.\nBuy Certificate »\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach MySQL?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo »",
      "examples": [
        "SELECT * FROM Customers;"
      ]
    },
    {
      "title": "MySQL Study Plan",
      "summary": "Introduction\nThe MySQL study plan helps you teach your students MySQL step-by-step.\nCreating a study plan for MySQL is easy.\nYou can use a pre-built study plan or customize it.\nStudents have different skill levels. The study plans can be customized to ensure that everyone is challenged.\nSave time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of MySQL to the final exam.\nW3Schools Academy\nThis study plan is a feature of W3Schools Academy.\nW3Schools Academy is a platform that has everything you need to teach coding, all in one place.\nIt offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom.\nYou need to have an active subscription to access the study plan feature. There are two different subscription tiers:\nEssentials ($1.99 / month per student)\nFull Access ($5.99 / month per student)\nCalculate your price and order here.\nLearn More »\nAcademy also offer other features such as:\nManaging your classroom\nTracking of student progress and reports\nLabs, assignments, and code challenges (prebuilt challenges or create your own ones)\nAuto-grading\nTeaching materials\nCertification exams\nGet a free demo »\nTeacher Materials\nW3Schools has everything you need to teach MySQL.\nThe MySQL training materials is available for you to include and use in your study plan:\nW3Schools MySQL Tutorial\nMySQL Exercises\nMySQL Quiz\nMySQL Challenges (Coding challenges)\nMySQL Certification Exam (End of Pathway Exam)\nMySQL Syllabus\nWith the MySQL Syllabus, your students will start with the basics, like understanding databases and writing simple SQL queries, and move to more advanced topics, like joining tables, managing data, and creating complex queries. Each chapter includes simple examples, try-it-yourself sections, exercises, and quizzes to make learning easy, interactive, and fun.\nRead more about MySQL Syllabus.\nStudy Plan Overview\nThe study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level.\nLearning Paths\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nInteractive Content\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTimeline and Pace\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nTrack Student Progress\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nEnd of Pathway Exam\nThe MySQL study plan aligns with the MySQL Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the MySQL Tutorial.\nYou get reports of the students' results.\nThe MySQL study plan aligns with the MySQL Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the MySQL Tutorial.\nYou get reports of the students' results.\nAccessibility\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nLearn More »\nSample Study Plan\nYou choose the timeline and pace of your study plans.\nSchools have different preferences.\nSome would like more intensive pace, e.g. 3 weeks, others 12 or more weeks.\nIt is completely up to you.\nFor example, this is how a 3-week MySQL study plan could look like:\nWeek 1: MySQL and RDBMS fundamentals, Query basics\nWeek 2: Data manipulations, Query techniques, Advanced queries\nWeek 3: Database management, MySQL Certification Exam\nImage of Sample MySQL study plan:\nReady to get started?\nStart with MySQL Study Plans today.\nGet Started »\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach MySQL programming?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo »",
      "examples": []
    },
    {
      "title": "W3Schools MySQL Certificate",
      "summary": "W3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nW3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nWho Should Consider Getting Certified?\nAny student or professional within the digital industry.\nCertifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market.\nW3Schools is Trusted by Top Companies\nW3Schools has over two decades of experience with teaching coding online.\nOur certificates are recognized and valued by companies looking to employ skilled developers.\nSave Time and Money\nShow the world your coding skills by getting a certification.\nThe prices is a small fraction compared to the price of traditional education.\nDocument and validate your competence by getting certified!\nExam overview\nFee: 95 USD\nAchievable certification levels:\nIntermediate (40%)\nAdvanced (75%)\nProfessional (90%)\nNumber of questions:\nAdaptive, 60 on average\nRequirement to pass:\nMinimum 40% - Intermediate level\nTime limit: 60 minutes\nNumber of attempts to pass: 3\nExam deadline: None\nCertification Expiration: None\nFormat: Online, multiple choice\nRegister now »\nAdvance Faster in Your Career\nGetting a certificate proves your commitment to upgrading your skills.\nThe certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on.\nIt gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nKnowledge is power, especially in the current job market.\nDocumentation of your skills enables you to advance your career or helps you to start a new one.\nHow Does It Work?\nStudy for free at W3Schools.com\nStudy at your own speed\nTest your skills with W3Schools online quizzes\nApply for your certificate by paying an exam fee\nTake your exam online, at any time, and from any location\nGet Your Certificate and Share It With The World\nExample certificate:\nEach certificate gets a unique link that can be shared with others.\nValidate your certification with the link or QR code.\nCheck how it looks like in this Example.\nShare your certificate on Linked in the Certifications section in just one click!\nDocument Your Skills\nGetting a certificate proves your commitment to upgrade your skills, gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nGet Your Certificate »\nLooking to add multiple users?\nAre you an educator, manager or business owner looking for courses or certifications?\nWe are working with schools, companies and organizations from all over the world.\nGet courses and/or certifications for your team here.",
      "examples": []
    }
  ],
  "glossary": [
    "abs",
    "acos",
    "adddate",
    "addtime",
    "ascii",
    "asin",
    "atan",
    "atan2",
    "avg",
    "backend",
    "bin",
    "binary",
    "case",
    "cast",
    "ceil",
    "ceiling",
    "char length",
    "character length",
    "coalesce",
    "concat",
    "concat ws",
    "connection id",
    "conv",
    "convert",
    "cos",
    "cot",
    "count",
    "curdate",
    "current date",
    "current time",
    "current timestamp",
    "current user",
    "curtime",
    "database",
    "date",
    "date add",
    "date format",
    "date sub",
    "datediff",
    "day",
    "dayname",
    "dayofmonth",
    "dayofweek",
    "dayofyear",
    "degrees",
    "div",
    "exercises",
    "exp",
    "extract",
    "field",
    "floor",
    "format",
    "free",
    "greatest",
    "hour",
    "if",
    "ifnull",
    "insert",
    "instr",
    "isnull",
    "javascript",
    "last day",
    "lcase",
    "least",
    "left",
    "length",
    "ln",
    "localtime",
    "localtimestamp",
    "locate",
    "log",
    "log10",
    "log2",
    "lower",
    "lpad",
    "ltrim",
    "makedate",
    "maketime",
    "max",
    "microsecond",
    "mid",
    "min",
    "minute",
    "mod",
    "month",
    "monthname",
    "mysql aliases",
    "mysql between",
    "mysql case",
    "mysql check",
    "mysql comments",
    "mysql constraints",
    "mysql database",
    "mysql dates",
    "mysql default",
    "mysql delete",
    "mysql editor",
    "mysql exercises",
    "mysql exists",
    "mysql functions",
    "mysql having",
    "mysql home",
    "mysql in",
    "mysql intro",
    "mysql joins",
    "mysql like",
    "mysql limit",
    "mysql operators",
    "mysql quiz",
    "mysql rdbms",
    "mysql references",
    "mysql select",
    "mysql sql",
    "mysql syllabus",
    "mysql union",
    "mysql unique",
    "mysql update",
    "mysql views",
    "mysql where",
    "mysql wildcards",
    "note",
    "now",
    "nullif",
    "period add",
    "period diff",
    "pi",
    "position",
    "pow",
    "power",
    "programs",
    "quarter",
    "radians",
    "rand",
    "references",
    "repeat",
    "replace",
    "report error",
    "reverse",
    "right",
    "round",
    "rpad",
    "rtrim",
    "second",
    "session user",
    "sign",
    "sin",
    "space",
    "sqrt",
    "strcmp",
    "subdate",
    "substr",
    "substring",
    "substring index",
    "subtime",
    "sum",
    "sysdate",
    "system user",
    "tan",
    "time",
    "time format",
    "timediff",
    "timestamp",
    "to days",
    "trim",
    "truncate",
    "ucase",
    "upper",
    "user",
    "version",
    "w3schools spaces",
    "week",
    "weekday",
    "weekofyear",
    "year",
    "yearweek"
  ],
  "objectives": [
    "View your completed tutorials, exercises, and quizzes",
    "Keep an eye on your progress and daily streaks",
    "Set goals and create learning paths",
    "Create your own personal website"
  ]
}