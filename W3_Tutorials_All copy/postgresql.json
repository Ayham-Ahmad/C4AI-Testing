{
  "course_name": "PostgreSQL",
  "description": "PostgreSQL is an advanced relational database system. PostgreSQL supports both relational (SQL) and non-relational (JSON) queries. PostgreSQL is free and open-source. In this tutorial you get a step by step guide on how to install and create a PostgreSQL database. You will learn how to create a project where you can create, read, update, and delete data. You will learn how to query, filter, and sort data from the database. In the tutorial we will use examples to show what SQL statements returns from the database: Sort the table by year: Many chapters in this tutorial end with an exercise where you can check your level of knowledge. See all PostgreSQL Exercises Learn by taking a quiz! The quiz will give you a signal of how much you know about PostgreSQL. Start PostgreSQL Quiz Sign Up for Free Note: This is an optional feature. You can study at W3Schools without creating an account.",
  "course_summary": [
    {
      "title": "PostgreSQL Introduction",
      "summary": "What is PostgreSQL?\nPostgreSQL is an free open-source database system that supports both relational (SQL) and non-relational (JSON) queries.\nPostgreSQL is a back-end database for dynamic websites and web applications.\nPostgreSQL supports the most important programming languages:\nPython\nJava\nC/C++\nC#\nNode.js\nGo\nRuby\nPerl\nTcl\nPostgreSQL supports basically all features that other database management systems support.\nPostgreSQL History\nPostgreSQL was invented at the Berkeley Computer Science Department, University of California.\nIt started as a project in 1986 with the goal of creating a database system with the minimal features needed to support multiple data types.\nIn the beginning, PostgreSQL ran on UNIX platforms, but now it can run on various platforms, including Windows and MacOS.",
      "examples": []
    },
    {
      "title": "Install Introduction",
      "summary": "Download PostgreSQL\nTo install PostgreSQL locally on your computer, visit the installer by EDB, and download the newest version compatible with your operating system.\nI will choose the newest Windows version:\nStart the Install\nWhen the downloading is complete, double click the downloaded file and start the installation:\nSpecify Directory\nYou can specify the location of PostgreSQL, I will go with the default choice:\nSelect Components\nTo use PostgreSQL, you will need to install the PostgreSQL Server. In this tutorial we will also use the pgAdmin 4 component, and the Command Line Tools:\nStorage Directory\nYou can also choose where to store the database data, I will go with the default choice:\nSelect Password\nYou will have to select a password to get access to the database. Since this is a local database, with no incoming connection, I will choose the password 12345678:\nSelect Port\nYou can set the port the server should listen on, I will go with the default choice:\nSelect Locale\nSelect the geographically location of the database server:\nFinal Check\nIf everything looks OK, click 'Next' to continue:\nStart Installation:\nClick 'Next' to start the installation:\nInstalling\nThis can take a while, please wait.\nComplete!\nNow you have installed PostgreSQL on your computer, and in the next chapter you will start using it!",
      "examples": []
    },
    {
      "title": "PostgreSQL Get Started",
      "summary": "Connect to the Database\nIf you have followed the steps from the Install PostgreSQL page, you now have a PostgreSQL database on you computer.\nThere are several ways to connect to the database, we will look at two ways in this tutorial:\nSQL Shell (psql)\npgAdmin 4\nBoth of them comes with the installation of PostgreSQL\nSQL Shell (psql)\nSQL Shell (psql) is a terminal based program where you can write and execute SQL syntax in the command-line terminal.\nOpen SQL Shell (psql)\nYou will find the SQL Shell (psql) tool in the start menu under PostgreSQL:\nTip: If you cannot find it, try searching for \"SQL Shell\" on your computer.\nOnce the program is open, you should see a window like the one below.\nInsert the name of the server.\nThe suggested choice is [localhost], which is correct, press [Enter] to accept:\nDatabase\nThe suggested database is [postgres], which is correct, press [Enter] to accept:\nPort\nThe suggested port is [5432], which is correct, at least in my case, press [Enter] to accept:\nUsername\nThe suggested username is [postgres], which is correct, at least for me, press [Enter] to accept:\nPassword\nEnter the password you chose when you installed the PostgreSQL database, my password is 12345678:\nResult\nThe result might look like an error, but if it shows psql (15.2) or any other version, and in the end you see the postgres=# command (and maybe a warning in between), then you have successfully connected to the database!\nExecute SQL Statements\nOnce you have connected to the database, you can start executing SQL statements.\nOur database is empty, so we cannot query any tables yet, but we can check the version with this SQL statement:\nTo insert SQL statements in the SQL Shell command, just write them after the postgres=# command like this:\nPress [Enter] and the result should look like this:\nRemember the Semicolon\nNote: Always end SQL statements with a semicolon ;\nSQL Shell waits for the semicolon and executes all lines as one SQL statement.\nA multiple lines SQL statement is not executed before we include a semicolon at the end.\nExample\nSame statement, but in two lines:\nNow we are ready to create tables and fill them with data, but first we want to take a look at an application called pgAdmin 4.\nLearn more about pgAdmin 4 in the next chapter.",
      "examples": [
        "SELECT version();",
        "psql (15.2)",
        "postgres=#",
        ";"
      ]
    },
    {
      "title": "PostgreSQL - pgAdmin4",
      "summary": "Connect to the Database\nIn the previous chapter we learned how to connect to the database using the SQL Shell (psql) application, which is a command-based application that allows us to interact with the PostgreSQL database.\nThere is another application that comes built-in with the PostgreSQL installation, the pgAdmin 4 application, which also offers to interact with the database, but in a more user-friendly way.\nLet us take a look and see how it works.\nStart pgAdmin4\nYou will find the pgAdmin4 application in the start menu under PostgreSQL:\nTip: If you cannot find it, try searching for \"pgAdmin4\" on your computer.\nOnce the program has started, you should see a window like the one below, choose a master password, Since this is a local database that will run only on my computer, I will once again choose the password 12345678:\npgAdmin4\nOnce you are inside the program, try to perform a simple SQL query.\nTo do that we have to navigate to the database.\nStart by opening the [Servers] option in the menu on the left:\nConnect to Server\nNow you need to enter the password that you created when you installed PostgreSQL, my password is 12345678:\nFind Database\nClick on the [Database] option on in the menu on the left:\nOpen Query Tool\nYou should find a database named postgres, right-click it choose the \"Query Tool\":\nQuery Tool\nIn the Query Tool we can start executing SQL statements.\nWrite SQL Statements\nOur database is empty, so we cannot query any tables yet, but we can check the version with this SQL statement:\nTo insert SQL statements in the Query Tool, just write in the input box like this:\nExecute SQL Statements\nTo execute a SQL statement, click the \"Play\" button above the input box:\nResult\nThe SQL statement is executed, and you can see the result in the \"Data Output\" area:\nNow we have learned two ways of connection to a database and execute SQL statements on it:\nSQL Shell (psql)\npgAdmin 4\nIn the next chapters we will use the SQL Shell application to create tables and insert data into the database.\nIf you want to use the pgAdmin interface instead, you can run all the SQL statements there, you should get the same result.",
      "examples": [
        "SELECT version();",
        "postgres"
      ]
    },
    {
      "title": "PostgreSQL Create Table",
      "summary": "Connect to the Database\nTo create a new database table using the SQL Shell, make sure you are connected to the database. If not, follow the steps in the Get Started chapter of this tutorial.\nOnce you are connected, you are ready to write SQL statements!\nCreate Table\nThe following SQL statement will create a table named cars in your PostgreSQL database:\nWhen you execute the above statement, an empty table named cars will be created, and the SQL Shell application will return the following:\nIn the SQL Shell application on your computer the operation above might look like this:\nSQL Statement Explained\nThe above SQL statement created an empty table with three fields: brand, model, and year.\nWhen creating fields in a table we have to specify the data type of each field.\nFor brand and model we are expecting string values, and string values are specified with the VARCHAR keyword.\nWe also have to specify the number of characters allowed in a string field, and since we do not know exactly, we just set it to 255.\nFor year we are expecting integer values (numbers without decimals), and integer values are specified with the INT keyword.\nDisplay Table\nYou can \"display\" the empty table you just created with another SQL statement:\nWhich will give you this result:\nIn the SQL Shell application on your computer the operation above might look like this:\nIn the next chapters we will learn how to insert data into a table, and also more on how to retrieve data from a table.",
      "examples": [
        "CREATE TABLE cars (\nbrand VARCHAR(255),\nmodel VARCHAR(255),\nyear INT\n);",
        "CREATE TABLE",
        "SELECT * FROM cars;",
        "brand | model | year\n-------+-------+------\n(0 rows)",
        "cars",
        "brand",
        "model",
        "year",
        "VARCHAR",
        "INT"
      ]
    },
    {
      "title": "PostgreSQL Insert Data",
      "summary": "Insert Into\nTo insert data into a table in PostgreSQL, we use the INSERT INTO statement.\nThe following SQL statement will insert one row of data into the cars table you created in the previous chapter.\nThe SQL Shell application will return the following:\nWhich means that 1 row was inserted.\nDon't think about the 0, for now, just accept that it represents something else and will always be 0.\nSQL Statement Explained\nAs you can see in the SQL statement above, string values must be written with apostrophes.\nNumeric values can be written without apostrophes, but you can include them if you want.\nDisplay Table\nTo check the result we can display the table with this SQL statement:\nWhich will return this result:\nInsert Multiple Rows\nTo insert multiple rows of data, we use the same INSERT INTO statement, but with multiple values:\nThe SQL Shell application will return the following:\nWhich means 3 rows were successfully inserted.\nDisplay Table\nTo check the result we can display the table with this SQL statement:\nExample\nClick the \"Run Example\" button to see the result of the select statement.",
      "examples": [
        "INSERT INTO cars (brand, model, year)\nVALUES ('Ford', 'Mustang', 1964);",
        "INSERT 0 1",
        "SELECT * FROM cars;",
        "brand |  model  | year\n-------+---------+------\nFord  | Mustang | 1964\n(1 row)",
        "INSERT INTO cars (brand, model, year)\nVALUES\n('Volvo', 'p1800', 1968),\n('BMW', 'M1', 1978),\n('Toyota', 'Celica', 1975);",
        "INSERT 0 3",
        "INSERT INTO",
        "cars",
        "1",
        "0",
        "3"
      ]
    },
    {
      "title": "PostgreSQL Select Data",
      "summary": "Select Data\nTo retrieve data from a data base, we use the SELECT statement.\nSpecify Columns\nBy specifying the column names, we can choose which columns to select:\nExample\nReturn ALL Columns\nSpecify a * instead of the column names to select all columns:\nExample",
      "examples": [
        "SELECT brand, year FROM cars;",
        "SELECT * FROM cars;",
        "SELECT",
        "*"
      ]
    },
    {
      "title": "PostgreSQL ADD COLUMN",
      "summary": "The ALTER TABLE Statement\nTo add a column to an existing table, we have to use the ALTER TABLE statement.\nThe ALTER TABLE statement is used to add, delete, or modify columns in an existing table.\nThe ALTER TABLE statement is also used to add and drop various constraints on an existing table.\nADD COLUMN\nWe want to add a column named color to our cars table.\nWhen adding columns we must also specify the data type of the column. Our color column will be a string, and we specify string types with the VARCHAR keyword. we also want to restrict the number of characters to 255:\nExample\nAdd a column named color:\nResult\nDisplay Table\nTo check the result we can display the table with this SQL statement:\nExample\nAs you can see, the cars table now has a color column.\nThe new column is empty, you will learn how to fill it with values in the next chapter.",
      "examples": [
        "ALTER TABLE cars\nADD color VARCHAR(255);",
        "ALTER TABLE",
        "SELECT * FROM cars;",
        "color",
        "cars",
        "VARCHAR"
      ]
    },
    {
      "title": "PostgreSQL UPDATE",
      "summary": "The UPDATE Statement\nThe UPDATE statement is used to modify the value(s) in existing records in a table.\nExample\nSet the color of the Volvo to 'red':\nResult\nWhich means that 1 row was affected by the UPDATE statement.\nNote: Be careful with the WHERE clause, in the example above ALL rows where brand = 'Volvo' gets updated.\nDisplay Table\nTo check the result we can display the table with this SQL statement:\nExample\nWarning! Remember WHERE\nBe careful when updating records. If you omit the WHERE clause, ALL records will be updated!\nExample\nWithout the WHERE clause, ALL records will be updated:\nResult\nWhich means that all 4 row was affected by the UPDATE statement.\nDisplay Table\nTo check the result we can display the table with this SQL statement:\nExample\nUpdate Multiple Columns\nTo update more than one column, separate the name/value pairs with a comma ,:\nExample\nUpdate color and year for the Toyota:\nResult\nWhich means that 1 row was affected by the UPDATE statement.\nDisplay Table\nTo check the result we can display the table with this SQL statement:\nExample",
      "examples": [
        "UPDATE cars\nSET color = 'red'\nWHERE brand = 'Volvo';",
        "UPDATE 1",
        "SELECT * FROM cars;",
        "UPDATE cars\nSET color = 'red';",
        "UPDATE 4",
        "UPDATE cars\nSET color = 'white', year = 1970\nWHERE brand = 'Toyota';",
        "UPDATE",
        "1",
        "WHERE",
        "4",
        ","
      ]
    },
    {
      "title": "PostgreSQL ALTER COLUMN",
      "summary": "The ALTER TABLE Statement\nTo change the data type, or the size of a table column we have to use the ALTER TABLE statement.\nThe ALTER TABLE statement is used to add, delete, or modify columns in an existing table.\nThe ALTER TABLE statement is also used to add and drop various constraints on an existing table.\nALTER COLUMN\nWe want to change the data type of the year column of the cars table from INT to VARCHAR(4).\nTo modify a column, use the ALTER COLUMN statement and the TYPE keyword followed by the new data type:\nExample\nChange the year column from INT to VARCHAR(4):\nResult\nNote: Some data types cannot be converted if the column has value. E.g. numbers can always be converted to text, but text cannot always be converted to numbers.\nChange Maximum Allowed Characters\nWe also want to change the maximum number of characters allowed in the color column of the cars table.\nUse the same syntax as above, use the ALTER COLUMN statement and the TYPE keyword followed by the new data type:\nExample\nChange the color column from VARCHAR(255) to VARCHAR(30):\nResult",
      "examples": [
        "ALTER TABLE cars\nALTER COLUMN year TYPE VARCHAR(4);",
        "ALTER TABLE",
        "ALTER TABLE cars\nALTER COLUMN color TYPE VARCHAR(30);",
        "year",
        "cars",
        "INT",
        "VARCHAR(4)",
        "ALTER COLUMN",
        "TYPE",
        "color",
        "VARCHAR(255)",
        "VARCHAR(30)"
      ]
    },
    {
      "title": "PostgreSQL DROP COLUMN",
      "summary": "The ALTER TABLE Statement\nTo remove a column from a table, we have to use the ALTER TABLE statement.\nThe ALTER TABLE statement is used to add, delete, or modify columns in an existing table.\nThe ALTER TABLE statement is also used to add and drop various constraints on an existing table.\nDROP COLUMN\nWe want to remove the column named color from the cars table.\nTo remove a column, use the DROP COLUMN statement:\nExample\nRemove the color column:\nResult\nDisplay Table\nTo check the result we can display the table with this SQL statement:\nExample\nAs you can see in the result, the color column has been removed from the cars table.",
      "examples": [
        "ALTER TABLE cars\nDROP COLUMN color;",
        "ALTER TABLE",
        "SELECT * FROM cars;",
        "color",
        "cars",
        "DROP COLUMN"
      ]
    },
    {
      "title": "PostgreSQL DELETE",
      "summary": "The DELETE Statement\nThe DELETE statement is used to delete existing records in a table.\nNote: Be careful when deleting records in a table! Notice the WHERE clause in the DELETE statement. The WHERE clause specifies which record(s) should be deleted.\nIf you omit the WHERE clause,\nall records in the table will be deleted!.\nTo delete the record(s) where brand is 'Volvo', use this statement:\nExample\nDelete all records where brand is 'Volvo':\nResult\nWhich means that 1 row was deleted.\nDisplay Table\nTo check the result we can display the table with this SQL statement:\nExample\nDelete All Records\nIt is possible to delete all rows in a table without deleting the table. This means that the table structure, attributes, and indexes will be intact.\nThe following SQL statement deletes all rows in the cars table, without deleting the table:\nExample\nDelete all records in the cars table:\nResult\nWhich means that all 3 rows were deleted.\nDisplay Table\nTo check the result we can display the table with this SQL statement:\nExample\nTRUNCATE TABLE\nBecause we omit the WHERE clause in the DELETE statement above, all records will be deleted from the cars table.\nThe same would have been achieved by using the TRUNCATE TABLE statement:\nExample\nDelete all records in the cars table:\nResult\nDisplay Table\nTo check the result we can display the table with this SQL statement:\nExample",
      "examples": [
        "DELETE FROM cars\nWHERE brand = 'Volvo';",
        "DELETE 1",
        "SELECT * FROM cars;",
        "DELETE FROM cars;",
        "DELETE 3",
        "TRUNCATE TABLE cars;",
        "TRUNCATE TABLE",
        "DELETE",
        "WHERE",
        "1",
        "cars",
        "3"
      ]
    },
    {
      "title": "PostgreSQL DROP TABLE",
      "summary": "The DROP TABLE Statement\nThe DROP TABLE statement is used to drop an existing table in a database.\nNote: Be careful before dropping a table. Deleting a table will result in loss of all information stored in the table!\nThe following SQL statement drops the existing table cars:\nExample\nDelete the cars table:\nResult\nDisplay Table\nTo check the result we can display the table with this SQL statement:\nExample\nWhich will result in an error, because the cars table no longer exists:\nResult",
      "examples": [
        "DROP TABLE cars;",
        "DROP TABLE",
        "SELECT * FROM cars;",
        "ERROR: relation \"cars\" does not exist\nLINE 1: SELECT * FROM cars;\n^",
        "cars"
      ]
    },
    {
      "title": "Create Demo Database",
      "summary": "Demo Database\nUp until now in this tutorial we have worked with a very small and simple table in our PostgreSQL database.\nNow we want to create more tables with more content to be able to demonstrate more database features.\nWe will create these 6 tables in our PostgreSQL database:\ncategories\ncustomers\nproducts\norders\norder_details\ntestproducts\nBelow we have listed all the SQL statements you need to create those tables, with content.\nYou are not required to create the tables on your own system to continue with this tutorial, but you might better understand how PostgreSQL and SQL statements work.\nMake sure you are connected to the database. If not, follow the steps in the SQL Shell chapter of this tutorial.\nOnce you are connected, you are ready to write SQL statements!\nCATEGORIES\nThe following SQL statement will create a table named categories:\nCREATE TABLE categories\nResult\nThe following SQL statement will fill the categories table with content:\nINSERT INTO categories\nResult\nThe result can also be seen here: Demo Database - categories\nCUSTOMERS\nThe following SQL statement will create a table named customers:\nCREATE TABLE customers\nResult\nThe following SQL statement will fill the customers table with content:\nINSERT INTO customers\nResult\nThe result can also be seen here: Demo Database - customers\nPRODUCTS\nThe following SQL statement will create a table named products:\nCREATE TABLE products\nResult\nThe following SQL statement will fill the products table with content:\nINSERT INTO products\nResult\nThe result can also be seen here: Demo Database - products\nORDERS\nThe following SQL statement will create a table named orders:\nCREATE TABLE orders\nResult\nThe following SQL statement will fill the orders table with content:\nINSERT INTO orders\nResult\nThe result can also be seen here: Demo Database - orders\nORDER_DETAILS\nThe following SQL statement will create a table named order_details:\nCREATE TABLE order_details\nResult\nThe following SQL statement will fill the order_details table with content:\nINSERT INTO order_details\nResult\nThe result can also be seen here: Demo Database - order_details\nTESTPRODUCTS\nWe will also add a table called testproducts for demonstration purposes later in the tutorial.\nThe following SQL statement will create a table named testproducts:\nCREATE TABLE testproducts\nResult\nWe will fill the table with 10 dummy products:\nINSERT INTO testproducts\nResult\nThe result can also be seen here: Demo Database - testproducts",
      "examples": [
        "CREATE TABLE categories (\ncategory_id SERIAL NOT NULL PRIMARY KEY,\ncategory_name VARCHAR(255),\ndescription VARCHAR(255)\n);",
        "CREATE TABLE",
        "INSERT INTO categories (category_name, description)\nVALUES\n('Beverages', 'Soft drinks, coffees, teas, beers, and ales'),\n('Condiments', 'Sweet and savory sauces, relishes, spreads, and seasonings'),\n('Confections', 'Desserts, candies, and sweet breads'),\n('Dairy Products', 'Cheeses'),\n('Grains/Cereals', 'Breads, crackers, pasta, and cereal'),\n('Meat/Poultry', 'Prepared meats'),\n('Produce', 'Dried fruit and bean curd'),\n('Seafood', 'Seaweed and fish');",
        "INSERT 0 8",
        "CREATE TABLE customers (\ncustomer_id SERIAL NOT NULL PRIMARY KEY,\ncustomer_name VARCHAR(255),\ncontact_name VARCHAR(255),\naddress VARCHAR(255),\ncity VARCHAR(255),\npostal_code VARCHAR(255),\ncountry VARCHAR(255)\n);",
        "INSERT INTO customers (customer_name, contact_name, address, city, postal_code, country)\nVALUES\n('Alfreds Futterkiste', 'Maria Anders', 'Obere Str. 57', 'Berlin', '12209', 'Germany'),\n('Ana Trujillo Emparedados y helados', 'Ana Trujillo', 'Avda. de la Constitucion 2222', 'Mexico D.F.', '05021', 'Mexico'),\n('Antonio Moreno Taquera', 'Antonio Moreno', 'Mataderos 2312', 'Mexico D.F.', '05023', 'Mexico'),\n('Around the Horn', 'Thomas Hardy', '120 Hanover Sq.', 'London', 'WA1 1DP', 'UK'),\n('Berglunds snabbkoep', 'Christina Berglund', 'Berguvsvegen 8', 'Lulea', 'S-958 22', 'Sweden'),\n('Blauer See Delikatessen', 'Hanna Moos', 'Forsterstr. 57', 'Mannheim', '68306', 'Germany'),\n('Blondel pere et fils', 'Frederique Citeaux', '24, place Kleber', 'Strasbourg', '67000', 'France'),\n('Bolido Comidas preparadas', 'Martin Sommer', 'C/ Araquil, 67', 'Madrid', '28023', 'Spain'),\n('Bon app', 'Laurence Lebihans', '12, rue des Bouchers', 'Marseille', '13008', 'France'),\n('Bottom-Dollar Marketse', 'Elizabeth Lincoln', '23 Tsawassen Blvd.', 'Tsawassen', 'T2F 8M4', 'Canada'),\n('Bs Beverages', 'Victoria Ashworth', 'Fauntleroy Circus', 'London', 'EC2 5NT', 'UK'),\n('Cactus Comidas para llevar', 'Patricio Simpson', 'Cerrito 333', 'Buenos Aires', '1010', 'Argentina'),\n('Centro comercial Moctezuma', 'Francisco Chang', 'Sierras de Granada 9993', 'Mexico D.F.', '05022', 'Mexico'),\n('Chop-suey Chinese', 'Yang Wang', 'Hauptstr. 29', 'Bern', '3012', 'Switzerland'),\n('Comercio Mineiro', 'Pedro Afonso', 'Av. dos Lusiadas, 23', 'Sao Paulo', '05432-043', 'Brazil'),\n('Consolidated Holdings', 'Elizabeth Brown', 'Berkeley Gardens 12 Brewery ', 'London', 'WX1 6LT', 'UK'),\n('Drachenblut Delikatessend', 'Sven Ottlieb', 'Walserweg 21', 'Aachen', '52066', 'Germany'),\n('Du monde entier', 'Janine Labrune', '67, rue des Cinquante Otages', 'Nantes', '44000', 'France'),\n('Eastern Connection', 'Ann Devon', '35 King George', 'London', 'WX3 6FW', 'UK'),\n('Ernst Handel', 'Roland Mendel', 'Kirchgasse 6', 'Graz', '8010', 'Austria'),\n('Familia Arquibaldo', 'Aria Cruz', 'Rua Oros, 92', 'Sao Paulo', '05442-030', 'Brazil'),\n('FISSA Fabrica Inter. Salchichas S.A.', 'Diego Roel', 'C/ Moralzarzal, 86', 'Madrid', '28034', 'Spain'),\n('Folies gourmandes', 'Martine Rance', '184, chaussee de Tournai', 'Lille', '59000', 'France'),\n('Folk och fe HB', 'Maria Larsson', 'Akergatan 24', 'Brecke', 'S-844 67', 'Sweden'),\n('Frankenversand', 'Peter Franken', 'Berliner Platz 43', 'Munchen', '80805', 'Germany'),\n('France restauration', 'Carine Schmitt', '54, rue Royale', 'Nantes', '44000', 'France'),\n('Franchi S.p.A.', 'Paolo Accorti', 'Via Monte Bianco 34', 'Torino', '10100', 'Italy'),\n('Furia Bacalhau e Frutos do Mar', 'Lino Rodriguez ', 'Jardim das rosas n. 32', 'Lisboa', '1675', 'Portugal'),\n('Galeria del gastronomo', 'Eduardo Saavedra', 'Rambla de Cataluna, 23', 'Barcelona', '08022', 'Spain'),\n('Godos Cocina Tipica', 'Jose Pedro Freyre', 'C/ Romero, 33', 'Sevilla', '41101', 'Spain'),\n('Gourmet Lanchonetes', 'Andre Fonseca', 'Av. Brasil, 442', 'Campinas', '04876-786', 'Brazil'),\n('Great Lakes Food Market', 'Howard Snyder', '2732 Baker Blvd.', 'Eugene', '97403', 'USA'),\n('GROSELLA-Restaurante', 'Manuel Pereira', '5th Ave. Los Palos Grandes', 'Caracas', '1081', 'Venezuela'),\n('Hanari Carnes', 'Mario Pontes', 'Rua do Paco, 67', 'Rio de Janeiro', '05454-876', 'Brazil'),\n('HILARION-Abastos', 'Carlos Hernandez', 'Carrera 22 con Ave. Carlos Soublette #8-35', 'San Cristobal', '5022', 'Venezuela'),\n('Hungry Coyote Import Store', 'Yoshi Latimer', 'City Center Plaza 516 Main St.', 'Elgin', '97827', 'USA'),\n('Hungry Owl All-Night Grocers', 'Patricia McKenna', '8 Johnstown Road', 'Cork', '', 'Ireland'),\n('Island Trading', 'Helen Bennett', 'Garden House Crowther Way', 'Cowes', 'PO31 7PJ', 'UK'),\n('Koniglich Essen', 'Philip Cramer', 'Maubelstr. 90', 'Brandenburg', '14776', 'Germany'),\n('La corne d abondance', 'Daniel Tonini', '67, avenue de l Europe', 'Versailles', '78000', 'France'),\n('La maison d Asie', 'Annette Roulet', '1 rue Alsace-Lorraine', 'Toulouse', '31000', 'France'),\n('Laughing Bacchus Wine Cellars', 'Yoshi Tannamuri', '1900 Oak St.', 'Vancouver', 'V3F 2K1', 'Canada'),\n('Lazy K Kountry Store', 'John Steel', '12 Orchestra Terrace', 'Walla Walla', '99362', 'USA'),\n('Lehmanns Marktstand', 'Renate Messner', 'Magazinweg 7', 'Frankfurt a.M. ', '60528', 'Germany'),\n('Lets Stop N Shop', 'Jaime Yorres', '87 Polk St. Suite 5', 'San Francisco', '94117', 'USA'),\n('LILA-Supermercado', 'Carlos Gonzalez', 'Carrera 52 con Ave. Bolivar #65-98 Llano Largo', 'Barquisimeto', '3508', 'Venezuela'),\n('LINO-Delicateses', 'Felipe Izquierdo', 'Ave. 5 de Mayo Porlamar', 'I. de Margarita', '4980', 'Venezuela'),\n('Lonesome Pine Restaurant', 'Fran Wilson', '89 Chiaroscuro Rd.', 'Portland', '97219', 'USA'),\n('Magazzini Alimentari Riuniti', 'Giovanni Rovelli', 'Via Ludovico il Moro 22', 'Bergamo', '24100', 'Italy'),\n('Maison Dewey', 'Catherine Dewey', 'Rue Joseph-Bens 532', 'Bruxelles', 'B-1180', 'Belgium'),\n('Mere Paillarde', 'Jean Fresniere', '43 rue St. Laurent', 'Montreal', 'H1J 1C3', 'Canada'),\n('Morgenstern Gesundkost', 'Alexander Feuer', 'Heerstr. 22', 'Leipzig', '04179', 'Germany'),\n('North/South', 'Simon Crowther', 'South House 300 Queensbridge', 'London', 'SW7 1RZ', 'UK'),\n('Oceano Atlantico Ltda.', 'Yvonne Moncada', 'Ing. Gustavo Moncada 8585 Piso 20-A', 'Buenos Aires', '1010', 'Argentina'),\n('Old World Delicatessen', 'Rene Phillips', '2743 Bering St.', 'Anchorage', '99508', 'USA'),\n('Ottilies Keseladen', 'Henriette Pfalzheim', 'Mehrheimerstr. 369', 'Koln', '50739', 'Germany'),\n('Paris specialites', 'Marie Bertrand', '265, boulevard Charonne', 'Paris', '75012', 'France'),\n('Pericles Comidas clasicas', 'Guillermo Fernandez', 'Calle Dr. Jorge Cash 321', 'Mexico D.F.', '05033', 'Mexico'),\n('Piccolo und mehr', 'Georg Pipps', 'Geislweg 14', 'Salzburg', '5020', 'Austria'),\n('Princesa Isabel Vinhoss', 'Isabel de Castro', 'Estrada da saude n. 58', 'Lisboa', '1756', 'Portugal'),\n('Que Delicia', 'Bernardo Batista', 'Rua da Panificadora, 12', 'Rio de Janeiro', '02389-673', 'Brazil'),\n('Queen Cozinha', 'Lucia Carvalho', 'Alameda dos Canarios, 891', 'Sao Paulo', '05487-020', 'Brazil'),\n('QUICK-Stop', 'Horst Kloss', 'Taucherstrasse 10', 'Cunewalde', '01307', 'Germany'),\n('Rancho grande', 'Sergio Gutiarrez', 'Av. del Libertador 900', 'Buenos Aires', '1010', 'Argentina'),\n('Rattlesnake Canyon Grocery', 'Paula Wilson', '2817 Milton Dr.', 'Albuquerque', '87110', 'USA'),\n('Reggiani Caseifici', 'Maurizio Moroni', 'Strada Provinciale 124', 'Reggio Emilia', '42100', 'Italy'),\n('Ricardo Adocicados', 'Janete Limeira', 'Av. Copacabana, 267', 'Rio de Janeiro', '02389-890', 'Brazil'),\n('Richter Supermarkt', 'Michael Holz', 'Grenzacherweg 237', 'Genève', '1203', 'Switzerland'),\n('Romero y tomillo', 'Alejandra Camino', 'Gran Via, 1', 'Madrid', '28001', 'Spain'),\n('Santa Gourmet', 'Jonas Bergulfsen', 'Erling Skakkes gate 78', 'Stavern', '4110', 'Norway'),\n('Save-a-lot Markets', 'Jose Pavarotti', '187 Suffolk Ln.', 'Boise', '83720', 'USA'),\n('Seven Seas Imports', 'Hari Kumar', '90 Wadhurst Rd.', 'London', 'OX15 4NB', 'UK'),\n('Simons bistro', 'Jytte Petersen', 'Vinbeltet 34', 'Kobenhavn', '1734', 'Denmark'),\n('Specialites du monde', 'Dominique Perrier', '25, rue Lauriston', 'Paris', '75016', 'France'),\n('Split Rail Beer & Ale', 'Art Braunschweiger', 'P.O. Box 555', 'Lander', '82520', 'USA'),\n('Supremes delices', 'Pascale Cartrain', 'Boulevard Tirou, 255', 'Charleroi', 'B-6000', 'Belgium'),\n('The Big Cheese', 'Liz Nixon', '89 Jefferson Way Suite 2', 'Portland', '97201', 'USA'),\n('The Cracker Box', 'Liu Wong', '55 Grizzly Peak Rd.', 'Butte', '59801', 'USA'),\n('Toms Spezialiteten', 'Karin Josephs', 'Luisenstr. 48', 'Manster', '44087', 'Germany'),\n('Tortuga Restaurante', 'Miguel Angel Paolino', 'Avda. Azteca 123', 'Mexico D.F.', '05033', 'Mexico'),\n('Tradicao Hipermercados', 'Anabela Domingues', 'Av. Ines de Castro, 414', 'Sao Paulo', '05634-030', 'Brazil'),\n('Trails Head Gourmet Provisioners', 'Helvetius Nagy', '722 DaVinci Blvd.', 'Kirkland', '98034', 'USA'),\n('Vaffeljernet', 'Palle Ibsen', 'Smagsloget 45', 'Arhus', '8200', 'Denmark'),\n('Victuailles en stock', 'Mary Saveley', '2, rue du Commerce', 'Lyon', '69004', 'France'),\n('Vins et alcools Chevalier', 'Paul Henriot', '59 rue de l Abbaye', 'Reims', '51100', 'France'),\n('Die Wandernde Kuh', 'Rita Moller', 'Adenauerallee 900', 'Stuttgart', '70563', 'Germany'),\n('Wartian Herkku', 'Pirkko Koskitalo', 'Torikatu 38', 'Oulu', '90110', 'Finland'),\n('Wellington Importadora', 'Paula Parente', 'Rua do Mercado, 12', 'Resende', '08737-363', 'Brazil'),\n('White Clover Markets', 'Karl Jablonski', '305 - 14th Ave. S. Suite 3B', 'Seattle', '98128', 'USA'),\n('Wilman Kala', 'Matti Karttunen', 'Keskuskatu 45', 'Helsinki', '21240', 'Finland'),\n('Wolski', 'Zbyszek', 'ul. Filtrowa 68', 'Walla', '01-012', 'Poland');",
        "INSERT 0 91",
        "CREATE TABLE products (\nproduct_id SERIAL NOT NULL PRIMARY KEY,\nproduct_name VARCHAR(255),\ncategory_id INT,\nunit VARCHAR(255),\nprice DECIMAL(10, 2)\n);",
        "INSERT INTO products (product_id, product_name, category_id, unit, price)\nVALUES\n(1, 'Chais', 1, '10 boxes x 20 bags', 18),\n(2, 'Chang', 1, '24 - 12 oz bottles', 19),\n(3, 'Aniseed Syrup', 2, '12 - 550 ml bottles', 10),\n(4, 'Chef Antons Cajun Seasoning', 2, '48 - 6 oz jars', 22),\n(5, 'Chef Antons Gumbo Mix', 2, '36 boxes', 21.35),\n(6, 'Grandmas Boysenberry Spread', 2, '12 - 8 oz jars', 25),\n(7, 'Uncle Bobs Organic Dried Pears', 7, '12 - 1 lb pkgs.', 30),\n(8, 'Northwoods Cranberry Sauce', 2, '12 - 12 oz jars', 40),\n(9, 'Mishi Kobe Niku', 6, '18 - 500 g pkgs.', 97),\n(10, 'Ikura', 8, '12 - 200 ml jars', 31),\n(11, 'Queso Cabrales', 4, '1 kg pkg.', 21),\n(12, 'Queso Manchego La Pastora', 4, '10 - 500 g pkgs.', 38),\n(13, 'Konbu', 8, '2 kg box', 6),\n(14, 'Tofu', 7, '40 - 100 g pkgs.', 23.25),\n(15, 'Genen Shouyu', 2, '24 - 250 ml bottles', 15.5),\n(16, 'Pavlova', 3, '32 - 500 g boxes', 17.45),\n(17, 'Alice Mutton', 6, '20 - 1 kg tins', 39),\n(18, 'Carnarvon Tigers', 8, '16 kg pkg.', 62.5),\n(19, 'Teatime Chocolate Biscuits', 3, '10 boxes x 12 pieces', 9.2),\n(20, 'Sir Rodneys Marmalade', 3, '30 gift boxes', 81),\n(21, 'Sir Rodneys Scones', 3, '24 pkgs. x 4 pieces', 10),\n(22, 'Gustafs Kneckebrod', 5, '24 - 500 g pkgs.', 21),\n(23, 'Tunnbrod', 5, '12 - 250 g pkgs.', 9),\n(24, 'Guarani Fantastica', 1, '12 - 355 ml cans', 4.5),\n(25, 'NuNuCa Nui-Nougat-Creme', 3, '20 - 450 g glasses', 14),\n(26, 'Gumber Gummiberchen', 3, '100 - 250 g bags', 31.23),\n(27, 'Schoggi Schokolade', 3, '100 - 100 g pieces', 43.9),\n(28, 'Rassle Sauerkraut', 7, '25 - 825 g cans', 45.6),\n(29, 'Thoringer Rostbratwurst', 6, '50 bags x 30 sausgs.', 123.79),\n(30, 'Nord-Ost Matjeshering', 8, '10 - 200 g glasses', 25.89),\n(31, 'Gorgonzola Telino', 4, '12 - 100 g pkgs', 12.5),\n(32, 'Mascarpone Fabioli', 4, '24 - 200 g pkgs.', 32),\n(33, 'Geitost', 4, '500 g', 2.5),\n(34, 'Sasquatch Ale', 1, '24 - 12 oz bottles', 14),\n(35, 'Steeleye Stout', 1, '24 - 12 oz bottles', 18),\n(36, 'Inlagd Sill', 8, '24 - 250 g jars', 19),\n(37, 'Gravad lax', 8, '12 - 500 g pkgs.', 26),\n(38, 'Cote de Blaye', 1, '12 - 75 cl bottles', 263.5),\n(39, 'Chartreuse verte', 1, '750 cc per bottle', 18),\n(40, 'Boston Crab Meat', 8, '24 - 4 oz tins', 18.4),\n(41, 'Jacks New England Clam Chowder', 8, '12 - 12 oz cans', 9.65),\n(42, 'Singaporean Hokkien Fried Mee', 5, '32 - 1 kg pkgs.', 14),\n(43, 'Ipoh Coffee', 1, '16 - 500 g tins', 46),\n(44, 'Gula Malacca', 2, '20 - 2 kg bags', 19.45),\n(45, 'Rogede sild', 8, '1k pkg.', 9.5),\n(46, 'Spegesild', 8, '4 - 450 g glasses', 12),\n(47, 'Zaanse koeken', 3, '10 - 4 oz boxes', 9.5),\n(48, 'Chocolade', 3, '10 pkgs.', 12.75),\n(49, 'Maxilaku', 3, '24 - 50 g pkgs.', 20),\n(50, 'Valkoinen suklaa', 3, '12 - 100 g bars', 16.25),\n(51, 'Manjimup Dried Apples', 7, '50 - 300 g pkgs.', 53),\n(52, 'Filo Mix', 5, '16 - 2 kg boxes', 7),\n(53, 'Perth Pasties', 6, '48 pieces', 32.8),\n(54, 'Tourtiare', 6, '16 pies', 7.45),\n(55, 'Pate chinois', 6, '24 boxes x 2 pies', 24),\n(56, 'Gnocchi di nonna Alice', 5, '24 - 250 g pkgs.', 38),\n(57, 'Ravioli Angelo', 5, '24 - 250 g pkgs.', 19.5),\n(58, 'Escargots de Bourgogne', 8, '24 pieces', 13.25),\n(59, 'Raclette Courdavault', 4, '5 kg pkg.', 55),\n(60, 'Camembert Pierrot', 4, '15 - 300 g rounds', 34),\n(61, 'Sirop d arable', 2, '24 - 500 ml bottles', 28.5),\n(62, 'Tarte au sucre', 3, '48 pies', 49.3),\n(63, 'Vegie-spread', 2, '15 - 625 g jars', 43.9),\n(64, 'Wimmers gute Semmelknadel', 5, '20 bags x 4 pieces', 33.25),\n(65, 'Louisiana Fiery Hot Pepper Sauce', 2, '32 - 8 oz bottles', 21.05),\n(66, 'Louisiana Hot Spiced Okra', 2, '24 - 8 oz jars', 17),\n(67, 'Laughing Lumberjack Lager', 1, '24 - 12 oz bottles', 14),\n(68, 'Scottish Longbreads', 3, '10 boxes x 8 pieces', 12.5),\n(69, 'Gudbrandsdalsost', 4, '10 kg pkg.', 36),\n(70, 'Outback Lager', 1, '24 - 355 ml bottles', 15),\n(71, 'Flotemysost', 4, '10 - 500 g pkgs.', 21.5),\n(72, 'Mozzarella di Giovanni', 4, '24 - 200 g pkgs.', 34.8),\n(73, 'Red Kaviar', 8, '24 - 150 g jars', 15),\n(74, 'Longlife Tofu', 7, '5 kg pkg.', 10),\n(75, 'Rhenbreu Klosterbier', 1, '24 - 0.5 l bottles', 7.75),\n(76, 'Lakkalikeeri', 1, '500 ml ', 18),\n(77, 'Original Frankfurter grune Soae', 2, '12 boxes', 13);",
        "INSERT 0 77",
        "CREATE TABLE orders (\norder_id SERIAL NOT NULL PRIMARY KEY,\ncustomer_id INT,\norder_date DATE\n);",
        "INSERT INTO orders (order_id, customer_id, order_date)\nVALUES\n(10248, 90, '2021-07-04'),\n(10249, 81, '2021-07-05'),\n(10250, 34, '2021-07-08'),\n(10251, 84, '2021-07-08'),\n(10252, 76, '2021-07-09'),\n(10253, 34, '2021-07-10'),\n(10254, 14, '2021-07-11'),\n(10255, 68, '2021-07-12'),\n(10256, 88, '2021-07-15'),\n(10257, 35, '2021-07-16'),\n(10258, 20, '2021-07-17'),\n(10259, 13, '2021-07-18'),\n(10260, 55, '2021-07-19'),\n(10261, 61, '2021-07-19'),\n(10262, 65, '2021-07-22'),\n(10263, 20, '2021-07-23'),\n(10264, 24, '2021-07-24'),\n(10265, 7, '2021-07-25'),\n(10266, 87, '2021-07-26'),\n(10267, 25, '2021-07-29'),\n(10268, 33, '2021-07-30'),\n(10269, 89, '2021-07-31'),\n(10270, 87, '2021-08-01'),\n(10271, 75, '2021-08-01'),\n(10272, 65, '2021-08-02'),\n(10273, 63, '2021-08-05'),\n(10274, 85, '2021-08-06'),\n(10275, 49, '2021-08-07'),\n(10276, 80, '2021-08-08'),\n(10277, 52, '2021-08-09'),\n(10278, 5, '2021-08-12'),\n(10279, 44, '2021-08-13'),\n(10280, 5, '2021-08-14'),\n(10281, 69, '2021-08-14'),\n(10282, 69, '2021-08-15'),\n(10283, 46, '2021-08-16'),\n(10284, 44, '2021-08-19'),\n(10285, 63, '2021-08-20'),\n(10286, 63, '2021-08-21'),\n(10287, 67, '2021-08-22'),\n(10288, 66, '2021-08-23'),\n(10289, 11, '2021-08-26'),\n(10290, 15, '2021-08-27'),\n(10291, 61, '2021-08-27'),\n(10292, 81, '2021-08-28'),\n(10293, 80, '2021-08-29'),\n(10294, 65, '2021-08-30'),\n(10295, 85, '2021-09-02'),\n(10296, 46, '2021-09-03'),\n(10297, 7, '2021-09-04'),\n(10298, 37, '2021-09-05'),\n(10299, 67, '2021-09-06'),\n(10300, 49, '2021-09-09'),\n(10301, 86, '2021-09-09'),\n(10302, 76, '2021-09-10'),\n(10303, 30, '2021-09-11'),\n(10304, 80, '2021-09-12'),\n(10305, 55, '2021-09-13'),\n(10306, 69, '2021-09-16'),\n(10307, 48, '2021-09-17'),\n(10308, 2, '2021-09-18'),\n(10309, 37, '2021-09-19'),\n(10310, 77, '2021-09-20'),\n(10311, 18, '2021-09-20'),\n(10312, 86, '2021-09-23'),\n(10313, 63, '2021-09-24'),\n(10314, 65, '2021-09-25'),\n(10315, 38, '2021-09-26'),\n(10316, 65, '2021-09-27'),\n(10317, 48, '2021-09-30'),\n(10318, 38, '2021-10-01'),\n(10319, 80, '2021-10-02'),\n(10320, 87, '2021-10-03'),\n(10321, 38, '2021-10-03'),\n(10322, 58, '2021-10-04'),\n(10323, 39, '2021-10-07'),\n(10324, 71, '2021-10-08'),\n(10325, 39, '2021-10-09'),\n(10326, 8, '2021-10-10'),\n(10327, 24, '2021-10-11'),\n(10328, 28, '2021-10-14'),\n(10329, 75, '2021-10-15'),\n(10330, 46, '2021-10-16'),\n(10331, 9, '2021-10-16'),\n(10332, 51, '2021-10-17'),\n(10333, 87, '2021-10-18'),\n(10334, 84, '2021-10-21'),\n(10335, 37, '2021-10-22'),\n(10336, 60, '2021-10-23'),\n(10337, 25, '2021-10-24'),\n(10338, 55, '2021-10-25'),\n(10339, 51, '2021-10-28'),\n(10340, 9, '2021-10-29'),\n(10341, 73, '2021-10-29'),\n(10342, 25, '2021-10-30'),\n(10343, 44, '2021-10-31'),\n(10344, 89, '2021-11-01'),\n(10345, 63, '2021-11-04'),\n(10346, 65, '2021-11-05'),\n(10347, 21, '2021-11-06'),\n(10348, 86, '2021-11-07'),\n(10349, 75, '2021-11-08'),\n(10350, 41, '2021-11-11'),\n(10351, 20, '2021-11-11'),\n(10352, 28, '2021-11-12'),\n(10353, 59, '2021-11-13'),\n(10354, 58, '2021-11-14'),\n(10355, 4, '2021-11-15'),\n(10356, 86, '2021-11-18'),\n(10357, 46, '2021-11-19'),\n(10358, 41, '2021-11-20'),\n(10359, 72, '2021-11-21'),\n(10360, 7, '2021-11-22'),\n(10361, 63, '2021-11-22'),\n(10362, 9, '2021-11-25'),\n(10363, 17, '2021-11-26'),\n(10364, 19, '2021-11-26'),\n(10365, 3, '2021-11-27'),\n(10366, 29, '2021-11-28'),\n(10367, 83, '2021-11-28'),\n(10368, 20, '2021-11-29'),\n(10369, 75, '2021-12-02'),\n(10370, 14, '2021-12-03'),\n(10371, 41, '2021-12-03'),\n(10372, 62, '2021-12-04'),\n(10373, 37, '2021-12-05'),\n(10374, 91, '2021-12-05'),\n(10375, 36, '2021-12-06'),\n(10376, 51, '2021-12-09'),\n(10377, 72, '2021-12-09'),\n(10378, 24, '2021-12-10'),\n(10379, 61, '2021-12-11'),\n(10380, 37, '2021-12-12'),\n(10381, 46, '2021-12-12'),\n(10382, 20, '2021-12-13'),\n(10383, 4, '2021-12-16'),\n(10384, 5, '2021-12-16'),\n(10385, 75, '2021-12-17'),\n(10386, 21, '2021-12-18'),\n(10387, 70, '2021-12-18'),\n(10388, 72, '2021-12-19'),\n(10389, 10, '2021-12-20'),\n(10390, 20, '2021-12-23'),\n(10391, 17, '2021-12-23'),\n(10392, 59, '2021-12-24'),\n(10393, 71, '2021-12-25'),\n(10394, 36, '2021-12-25'),\n(10395, 35, '2021-12-26'),\n(10396, 25, '2021-12-27'),\n(10397, 60, '2021-12-27'),\n(10398, 71, '2021-12-30'),\n(10399, 83, '2021-12-31'),\n(10400, 19, '2022-01-01'),\n(10401, 65, '2022-01-01'),\n(10402, 20, '2022-01-02'),\n(10403, 20, '2022-01-03'),\n(10404, 49, '2022-01-03'),\n(10405, 47, '2022-01-06'),\n(10406, 62, '2022-01-07'),\n(10407, 56, '2022-01-07'),\n(10408, 23, '2022-01-08'),\n(10409, 54, '2022-01-09'),\n(10410, 10, '2022-01-10'),\n(10411, 10, '2022-01-10'),\n(10412, 87, '2022-01-13'),\n(10413, 41, '2022-01-14'),\n(10414, 21, '2022-01-14'),\n(10415, 36, '2022-01-15'),\n(10416, 87, '2022-01-16'),\n(10417, 73, '2022-01-16'),\n(10418, 63, '2022-01-17'),\n(10419, 68, '2022-01-20'),\n(10420, 88, '2022-01-21'),\n(10421, 61, '2022-01-21'),\n(10422, 27, '2022-01-22'),\n(10423, 31, '2022-01-23'),\n(10424, 51, '2022-01-23'),\n(10425, 41, '2022-01-24'),\n(10426, 29, '2022-01-27'),\n(10427, 59, '2022-01-27'),\n(10428, 66, '2022-01-28'),\n(10429, 37, '2022-01-29'),\n(10430, 20, '2022-01-30'),\n(10431, 10, '2022-01-30'),\n(10432, 75, '2022-01-31'),\n(10433, 60, '2022-02-03'),\n(10434, 24, '2022-02-03'),\n(10435, 16, '2022-02-04'),\n(10436, 7, '2022-02-05'),\n(10437, 87, '2022-02-05'),\n(10438, 79, '2022-02-06'),\n(10439, 51, '2022-02-07'),\n(10440, 71, '2022-02-10'),\n(10441, 55, '2022-02-10'),\n(10442, 20, '2022-02-11'),\n(10443, 66, '2022-02-12'),\n(10444, 5, '2022-02-12'),\n(10445, 5, '2022-02-13'),\n(10446, 79, '2022-02-14'),\n(10447, 67, '2022-02-14'),\n(10448, 64, '2022-02-17'),\n(10449, 7, '2022-02-18'),\n(10450, 84, '2022-02-19'),\n(10451, 63, '2022-02-19'),\n(10452, 71, '2022-02-20'),\n(10453, 4, '2022-02-21'),\n(10454, 41, '2022-02-21'),\n(10455, 87, '2022-02-24'),\n(10456, 39, '2022-02-25'),\n(10457, 39, '2022-02-25'),\n(10458, 76, '2022-02-26'),\n(10459, 84, '2022-02-27'),\n(10460, 24, '2022-02-28'),\n(10461, 46, '2022-02-28'),\n(10462, 16, '2022-03-03'),\n(10463, 76, '2022-03-04'),\n(10464, 28, '2022-03-04'),\n(10465, 83, '2022-03-05'),\n(10466, 15, '2022-03-06'),\n(10467, 49, '2022-03-06'),\n(10468, 39, '2022-03-07'),\n(10469, 89, '2022-03-10'),\n(10470, 9, '2022-03-11'),\n(10471, 11, '2022-03-11'),\n(10472, 72, '2022-03-12'),\n(10473, 38, '2022-03-13'),\n(10474, 58, '2022-03-13'),\n(10475, 76, '2022-03-14'),\n(10476, 35, '2022-03-17'),\n(10477, 60, '2022-03-17'),\n(10478, 84, '2022-03-18'),\n(10479, 65, '2022-03-19'),\n(10480, 23, '2022-03-20'),\n(10481, 67, '2022-03-20'),\n(10482, 43, '2022-03-21'),\n(10483, 89, '2022-03-24'),\n(10484, 11, '2022-03-24'),\n(10485, 47, '2022-03-25'),\n(10486, 35, '2022-03-26'),\n(10487, 62, '2022-03-26'),\n(10488, 25, '2022-03-27'),\n(10489, 59, '2022-03-28'),\n(10490, 35, '2022-03-31'),\n(10491, 28, '2022-03-31'),\n(10492, 10, '2022-04-01'),\n(10493, 41, '2022-04-02'),\n(10494, 15, '2022-04-02'),\n(10495, 42, '2022-04-03'),\n(10496, 81, '2022-04-04'),\n(10497, 44, '2022-04-04'),\n(10498, 35, '2022-04-07'),\n(10499, 46, '2022-04-08'),\n(10500, 41, '2022-04-09'),\n(10501, 6, '2022-04-09'),\n(10502, 58, '2022-04-10'),\n(10503, 37, '2022-04-11'),\n(10504, 89, '2022-04-11'),\n(10505, 51, '2022-04-14'),\n(10506, 39, '2022-04-15'),\n(10507, 3, '2022-04-15'),\n(10508, 56, '2022-04-16'),\n(10509, 6, '2022-04-17'),\n(10510, 71, '2022-04-18'),\n(10511, 9, '2022-04-18'),\n(10512, 21, '2022-04-21'),\n(10513, 86, '2022-04-22'),\n(10514, 20, '2022-04-22'),\n(10515, 63, '2022-04-23'),\n(10516, 37, '2022-04-24'),\n(10517, 53, '2022-04-24'),\n(10518, 80, '2022-04-25'),\n(10519, 14, '2022-04-28'),\n(10520, 70, '2022-04-29'),\n(10521, 12, '2022-04-29'),\n(10522, 44, '2022-04-30'),\n(10523, 72, '2022-05-01'),\n(10524, 5, '2022-05-01'),\n(10525, 9, '2022-05-02'),\n(10526, 87, '2022-05-05'),\n(10527, 63, '2022-05-05'),\n(10528, 32, '2022-05-06'),\n(10529, 50, '2022-05-07'),\n(10530, 59, '2022-05-08'),\n(10531, 54, '2022-05-08'),\n(10532, 19, '2022-05-09'),\n(10533, 24, '2022-05-12'),\n(10534, 44, '2022-05-12'),\n(10535, 3, '2022-05-13'),\n(10536, 44, '2022-05-14'),\n(10537, 68, '2022-05-14'),\n(10538, 11, '2022-05-15'),\n(10539, 11, '2022-05-16'),\n(10540, 63, '2022-05-19'),\n(10541, 34, '2022-05-19'),\n(10542, 39, '2022-05-20'),\n(10543, 46, '2022-05-21'),\n(10544, 48, '2022-05-21'),\n(10545, 43, '2022-05-22'),\n(10546, 84, '2022-05-23'),\n(10547, 72, '2022-05-23'),\n(10548, 79, '2022-05-26'),\n(10549, 63, '2022-05-27'),\n(10550, 30, '2022-05-28'),\n(10551, 28, '2022-05-28'),\n(10552, 35, '2022-05-29'),\n(10553, 87, '2022-05-30'),\n(10554, 56, '2022-05-30'),\n(10555, 71, '2022-06-02'),\n(10556, 73, '2022-06-03'),\n(10557, 44, '2022-06-03'),\n(10558, 4, '2022-06-04'),\n(10559, 7, '2022-06-05'),\n(10560, 25, '2022-06-06'),\n(10561, 24, '2022-06-06'),\n(10562, 66, '2022-06-09'),\n(10563, 67, '2022-06-10'),\n(10564, 65, '2022-06-10'),\n(10565, 51, '2022-06-11'),\n(10566, 7, '2022-06-12'),\n(10567, 37, '2022-06-12'),\n(10568, 29, '2022-06-13'),\n(10569, 65, '2022-06-16'),\n(10570, 51, '2022-06-17'),\n(10571, 20, '2022-06-17'),\n(10572, 5, '2022-06-18'),\n(10573, 3, '2022-06-19'),\n(10574, 82, '2022-06-19'),\n(10575, 52, '2022-06-20'),\n(10576, 80, '2022-06-23'),\n(10577, 82, '2022-06-23'),\n(10578, 11, '2022-06-24'),\n(10579, 45, '2022-06-25'),\n(10580, 56, '2022-06-26'),\n(10581, 21, '2022-06-26'),\n(10582, 6, '2022-06-27'),\n(10583, 87, '2022-06-30'),\n(10584, 7, '2022-06-30'),\n(10585, 88, '2022-07-01'),\n(10586, 66, '2022-07-02'),\n(10587, 61, '2022-07-02'),\n(10588, 63, '2022-07-03'),\n(10589, 32, '2022-07-04'),\n(10590, 51, '2022-07-07'),\n(10591, 83, '2022-07-07'),\n(10592, 44, '2022-07-08'),\n(10593, 44, '2022-07-09'),\n(10594, 55, '2022-07-09'),\n(10595, 20, '2022-07-10'),\n(10596, 89, '2022-07-11'),\n(10597, 59, '2022-07-11'),\n(10598, 65, '2022-07-14'),\n(10599, 11, '2022-07-15'),\n(10600, 36, '2022-07-16'),\n(10601, 35, '2022-07-16'),\n(10602, 83, '2022-07-17'),\n(10603, 71, '2022-07-18'),\n(10604, 28, '2022-07-18'),\n(10605, 51, '2022-07-21'),\n(10606, 81, '2022-07-22'),\n(10607, 71, '2022-07-22'),\n(10608, 79, '2022-07-23'),\n(10609, 18, '2022-07-24'),\n(10610, 41, '2022-07-25'),\n(10611, 91, '2022-07-25'),\n(10612, 71, '2022-07-28'),\n(10613, 35, '2022-07-29'),\n(10614, 6, '2022-07-29'),\n(10615, 90, '2022-07-30'),\n(10616, 32, '2022-07-31'),\n(10617, 32, '2022-07-31'),\n(10618, 51, '2022-08-01'),\n(10619, 51, '2022-08-04'),\n(10620, 42, '2022-08-05'),\n(10621, 38, '2022-08-05'),\n(10622, 67, '2022-08-06'),\n(10623, 25, '2022-08-07'),\n(10624, 78, '2022-08-07'),\n(10625, 2, '2022-08-08'),\n(10626, 5, '2022-08-11'),\n(10627, 71, '2022-08-11'),\n(10628, 7, '2022-08-12'),\n(10629, 30, '2022-08-12'),\n(10630, 39, '2022-08-13'),\n(10631, 41, '2022-08-14'),\n(10632, 86, '2022-08-14'),\n(10633, 20, '2022-08-15'),\n(10634, 23, '2022-08-15'),\n(10635, 49, '2022-08-18'),\n(10636, 87, '2022-08-19'),\n(10637, 62, '2022-08-19'),\n(10638, 47, '2022-08-20'),\n(10639, 70, '2022-08-20'),\n(10640, 86, '2022-08-21'),\n(10641, 35, '2022-08-22'),\n(10642, 73, '2022-08-22'),\n(10643, 1, '2022-08-25'),\n(10644, 88, '2022-08-25'),\n(10645, 34, '2022-08-26'),\n(10646, 37, '2022-08-27'),\n(10647, 61, '2022-08-27'),\n(10648, 67, '2022-08-28'),\n(10649, 50, '2022-08-28'),\n(10650, 21, '2022-08-29'),\n(10651, 86, '2022-09-01'),\n(10652, 31, '2022-09-01'),\n(10653, 25, '2022-09-02'),\n(10654, 5, '2022-09-02'),\n(10655, 66, '2022-09-03'),\n(10656, 32, '2022-09-04'),\n(10657, 71, '2022-09-04'),\n(10658, 63, '2022-09-05'),\n(10659, 62, '2022-09-05'),\n(10660, 36, '2022-09-08'),\n(10661, 37, '2022-09-09'),\n(10662, 48, '2022-09-09'),\n(10663, 9, '2022-09-10'),\n(10664, 28, '2022-09-10'),\n(10665, 48, '2022-09-11'),\n(10666, 68, '2022-09-12'),\n(10667, 20, '2022-09-12'),\n(10668, 86, '2022-09-15'),\n(10669, 73, '2022-09-15'),\n(10670, 25, '2022-09-16'),\n(10671, 26, '2022-09-17'),\n(10672, 5, '2022-09-17'),\n(10673, 90, '2022-09-18'),\n(10674, 38, '2022-09-18'),\n(10675, 25, '2022-09-19'),\n(10676, 80, '2022-09-22'),\n(10677, 3, '2022-09-22'),\n(10678, 71, '2022-09-23'),\n(10679, 7, '2022-09-23'),\n(10680, 55, '2022-09-24'),\n(10681, 32, '2022-09-25'),\n(10682, 3, '2022-09-25'),\n(10683, 18, '2022-09-26'),\n(10684, 56, '2022-09-26'),\n(10685, 31, '2022-09-29'),\n(10686, 59, '2022-09-30'),\n(10687, 37, '2022-09-30'),\n(10688, 83, '2022-10-01'),\n(10689, 5, '2022-10-01'),\n(10690, 34, '2022-10-02'),\n(10691, 63, '2022-10-03'),\n(10692, 1, '2022-10-03'),\n(10693, 89, '2022-10-06'),\n(10694, 63, '2022-10-06'),\n(10695, 90, '2022-10-07'),\n(10696, 89, '2022-10-08'),\n(10697, 47, '2022-10-08'),\n(10698, 20, '2022-10-09'),\n(10699, 52, '2022-10-09'),\n(10700, 71, '2022-10-10'),\n(10701, 37, '2022-10-13'),\n(10702, 1, '2022-10-13'),\n(10703, 24, '2022-10-14'),\n(10704, 62, '2022-10-14'),\n(10705, 35, '2022-10-15'),\n(10706, 55, '2022-10-16'),\n(10707, 4, '2022-10-16'),\n(10708, 77, '2022-10-17'),\n(10709, 31, '2022-10-17'),\n(10710, 27, '2022-10-20'),\n(10711, 71, '2022-10-21'),\n(10712, 37, '2022-10-21'),\n(10713, 71, '2022-10-22'),\n(10714, 71, '2022-10-22'),\n(10715, 9, '2022-10-23'),\n(10716, 64, '2022-10-24'),\n(10717, 25, '2022-10-24'),\n(10718, 39, '2022-10-27'),\n(10719, 45, '2022-10-27'),\n(10720, 61, '2022-10-28'),\n(10721, 63, '2022-10-29'),\n(10722, 71, '2022-10-29'),\n(10723, 89, '2022-10-30'),\n(10724, 51, '2022-10-30'),\n(10725, 21, '2022-10-31'),\n(10726, 19, '2022-11-03'),\n(10727, 66, '2022-11-03'),\n(10728, 62, '2022-11-04'),\n(10729, 47, '2022-11-04'),\n(10730, 9, '2022-11-05'),\n(10731, 14, '2022-11-06'),\n(10732, 9, '2022-11-06'),\n(10733, 5, '2022-11-07'),\n(10734, 31, '2022-11-07'),\n(10735, 45, '2022-11-10'),\n(10736, 37, '2022-11-11'),\n(10737, 85, '2022-11-11'),\n(10738, 74, '2022-11-12'),\n(10739, 85, '2022-11-12'),\n(10740, 89, '2022-11-13'),\n(10741, 4, '2022-11-14'),\n(10742, 10, '2022-11-14'),\n(10743, 4, '2022-11-17'),\n(10744, 83, '2022-11-17'),\n(10745, 63, '2022-11-18'),\n(10746, 14, '2022-11-19'),\n(10747, 59, '2022-11-19'),\n(10748, 71, '2022-11-20'),\n(10749, 38, '2022-11-20'),\n(10750, 87, '2022-11-21'),\n(10751, 68, '2022-11-24'),\n(10752, 53, '2022-11-24'),\n(10753, 27, '2022-11-25'),\n(10754, 49, '2022-11-25'),\n(10755, 9, '2022-11-26'),\n(10756, 75, '2022-11-27'),\n(10757, 71, '2022-11-27'),\n(10758, 68, '2022-11-28'),\n(10759, 2, '2022-11-28'),\n(10760, 50, '2022-12-01'),\n(10761, 65, '2022-12-02'),\n(10762, 24, '2022-12-02'),\n(10763, 23, '2022-12-03'),\n(10764, 20, '2022-12-03'),\n(10765, 63, '2022-12-04'),\n(10766, 56, '2022-12-05'),\n(10767, 76, '2022-12-05'),\n(10768, 4, '2022-12-08'),\n(10769, 83, '2022-12-08'),\n(10770, 34, '2022-12-09'),\n(10771, 20, '2022-12-10'),\n(10772, 44, '2022-12-10'),\n(10773, 20, '2022-12-11'),\n(10774, 24, '2022-12-11'),\n(10775, 78, '2022-12-12'),\n(10776, 20, '2022-12-15'),\n(10777, 31, '2022-12-15'),\n(10778, 5, '2022-12-16'),\n(10779, 52, '2022-12-16'),\n(10780, 46, '2022-12-16'),\n(10781, 87, '2022-12-17'),\n(10782, 12, '2022-12-17'),\n(10783, 34, '2022-12-18'),\n(10784, 49, '2022-12-18'),\n(10785, 33, '2022-12-18'),\n(10786, 62, '2022-12-19'),\n(10787, 41, '2022-12-19'),\n(10788, 63, '2022-12-22'),\n(10789, 23, '2022-12-22'),\n(10790, 31, '2022-12-22'),\n(10791, 25, '2022-12-23'),\n(10792, 91, '2022-12-23'),\n(10793, 4, '2022-12-24'),\n(10794, 61, '2022-12-24'),\n(10795, 20, '2022-12-24'),\n(10796, 35, '2022-12-25'),\n(10797, 17, '2022-12-25'),\n(10798, 38, '2022-12-26'),\n(10799, 39, '2022-12-26'),\n(10800, 72, '2022-12-26'),\n(10801, 8, '2022-12-29'),\n(10802, 73, '2022-12-29'),\n(10803, 88, '2022-12-30'),\n(10804, 72, '2022-12-30'),\n(10805, 77, '2022-12-30'),\n(10806, 84, '2022-12-31'),\n(10807, 27, '2022-12-31'),\n(10808, 60, '2023-01-01'),\n(10809, 88, '2023-01-01'),\n(10810, 42, '2023-01-01'),\n(10811, 47, '2023-01-02'),\n(10812, 66, '2023-01-02'),\n(10813, 67, '2023-01-05'),\n(10814, 84, '2023-01-05'),\n(10815, 71, '2023-01-05'),\n(10816, 32, '2023-01-06'),\n(10817, 39, '2023-01-06'),\n(10818, 49, '2023-01-07'),\n(10819, 12, '2023-01-07'),\n(10820, 65, '2023-01-07'),\n(10821, 75, '2023-01-08'),\n(10822, 82, '2023-01-08'),\n(10823, 46, '2023-01-09'),\n(10824, 24, '2023-01-09'),\n(10825, 17, '2023-01-09'),\n(10826, 7, '2023-01-12'),\n(10827, 9, '2023-01-12'),\n(10828, 64, '2023-01-13'),\n(10829, 38, '2023-01-13'),\n(10830, 81, '2023-01-13'),\n(10831, 70, '2023-01-14'),\n(10832, 41, '2023-01-14'),\n(10833, 56, '2023-01-15'),\n(10834, 81, '2023-01-15'),\n(10835, 1, '2023-01-15'),\n(10836, 20, '2023-01-16'),\n(10837, 5, '2023-01-16'),\n(10838, 47, '2023-01-19'),\n(10839, 81, '2023-01-19'),\n(10840, 47, '2023-01-19'),\n(10841, 76, '2023-01-20'),\n(10842, 80, '2023-01-20'),\n(10843, 84, '2023-01-21'),\n(10844, 59, '2023-01-21'),\n(10845, 63, '2023-01-21'),\n(10846, 76, '2023-01-22'),\n(10847, 71, '2023-01-22'),\n(10848, 16, '2023-01-23'),\n(10849, 39, '2023-01-23'),\n(10850, 84, '2023-01-23'),\n(10851, 67, '2023-01-26'),\n(10852, 65, '2023-01-26'),\n(10853, 6, '2023-01-27'),\n(10854, 20, '2023-01-27'),\n(10855, 55, '2023-01-27'),\n(10856, 3, '2023-01-28'),\n(10857, 5, '2023-01-28'),\n(10858, 40, '2023-01-29'),\n(10859, 25, '2023-01-29'),\n(10860, 26, '2023-01-29'),\n(10861, 89, '2023-01-30'),\n(10862, 44, '2023-01-30'),\n(10863, 35, '2023-02-02'),\n(10864, 4, '2023-02-02'),\n(10865, 63, '2023-02-02'),\n(10866, 5, '2023-02-03'),\n(10867, 48, '2023-02-03'),\n(10868, 62, '2023-02-04'),\n(10869, 72, '2023-02-04'),\n(10870, 91, '2023-02-04'),\n(10871, 9, '2023-02-05'),\n(10872, 30, '2023-02-05'),\n(10873, 90, '2023-02-06'),\n(10874, 30, '2023-02-06'),\n(10875, 5, '2023-02-06'),\n(10876, 9, '2023-02-09'),\n(10877, 67, '2023-02-09'),\n(10878, 63, '2023-02-10'),\n(10879, 90, '2023-02-10'),\n(10880, 24, '2023-02-10'),\n(10881, 12, '2023-02-11'),\n(10882, 71, '2023-02-11'),\n(10883, 48, '2023-02-12'),\n(10884, 45, '2023-02-12'),\n(10885, 76, '2023-02-12'),\n(10886, 34, '2023-02-13'),\n(10887, 29, '2023-02-13'),\n(10888, 30, '2023-02-16'),\n(10889, 65, '2023-02-16'),\n(10890, 18, '2023-02-16'),\n(10891, 44, '2023-02-17'),\n(10892, 50, '2023-02-17'),\n(10893, 39, '2023-02-18'),\n(10894, 71, '2023-02-18'),\n(10895, 20, '2023-02-18'),\n(10896, 50, '2023-02-19'),\n(10897, 37, '2023-02-19'),\n(10898, 54, '2023-02-20'),\n(10899, 46, '2023-02-20'),\n(10900, 88, '2023-02-20'),\n(10901, 35, '2023-02-23'),\n(10902, 24, '2023-02-23'),\n(10903, 34, '2023-02-24'),\n(10904, 89, '2023-02-24'),\n(10905, 88, '2023-02-24'),\n(10906, 91, '2023-02-25'),\n(10907, 74, '2023-02-25'),\n(10908, 66, '2023-02-26'),\n(10909, 70, '2023-02-26'),\n(10910, 90, '2023-02-26'),\n(10911, 30, '2023-02-26'),\n(10912, 37, '2023-02-26'),\n(10913, 62, '2023-02-26'),\n(10914, 62, '2023-02-27'),\n(10915, 80, '2023-02-27'),\n(10916, 64, '2023-02-27'),\n(10917, 69, '2023-03-02'),\n(10918, 10, '2023-03-02'),\n(10919, 47, '2023-03-02'),\n(10920, 4, '2023-03-03'),\n(10921, 83, '2023-03-03'),\n(10922, 34, '2023-03-03'),\n(10923, 41, '2023-03-03'),\n(10924, 5, '2023-03-04'),\n(10925, 34, '2023-03-04'),\n(10926, 2, '2023-03-04'),\n(10927, 40, '2023-03-05'),\n(10928, 29, '2023-03-05'),\n(10929, 25, '2023-03-05'),\n(10930, 76, '2023-03-06'),\n(10931, 68, '2023-03-06'),\n(10932, 9, '2023-03-06'),\n(10933, 38, '2023-03-06'),\n(10934, 44, '2023-03-09'),\n(10935, 88, '2023-03-09'),\n(10936, 32, '2023-03-09'),\n(10937, 12, '2023-03-10'),\n(10938, 63, '2023-03-10'),\n(10939, 49, '2023-03-10'),\n(10940, 9, '2023-03-11'),\n(10941, 71, '2023-03-11'),\n(10942, 66, '2023-03-11'),\n(10943, 11, '2023-03-11'),\n(10944, 10, '2023-03-12'),\n(10945, 52, '2023-03-12'),\n(10946, 83, '2023-03-12'),\n(10947, 11, '2023-03-13'),\n(10948, 30, '2023-03-13'),\n(10949, 10, '2023-03-13'),\n(10950, 49, '2023-03-16'),\n(10951, 68, '2023-03-16'),\n(10952, 1, '2023-03-16'),\n(10953, 4, '2023-03-16'),\n(10954, 47, '2023-03-17'),\n(10955, 24, '2023-03-17'),\n(10956, 6, '2023-03-17'),\n(10957, 35, '2023-03-18'),\n(10958, 54, '2023-03-18'),\n(10959, 31, '2023-03-18'),\n(10960, 35, '2023-03-19'),\n(10961, 62, '2023-03-19'),\n(10962, 63, '2023-03-19'),\n(10963, 28, '2023-03-19'),\n(10964, 74, '2023-03-20'),\n(10965, 55, '2023-03-20'),\n(10966, 14, '2023-03-20'),\n(10967, 79, '2023-03-23'),\n(10968, 20, '2023-03-23'),\n(10969, 15, '2023-03-23'),\n(10970, 8, '2023-03-24'),\n(10971, 26, '2023-03-24'),\n(10972, 40, '2023-03-24'),\n(10973, 40, '2023-03-24'),\n(10974, 75, '2023-03-25'),\n(10975, 10, '2023-03-25'),\n(10976, 35, '2023-03-25'),\n(10977, 24, '2023-03-26'),\n(10978, 50, '2023-03-26'),\n(10979, 20, '2023-03-26'),\n(10980, 24, '2023-03-27'),\n(10981, 34, '2023-03-27'),\n(10982, 10, '2023-03-27'),\n(10983, 71, '2023-03-27'),\n(10984, 71, '2023-03-30'),\n(10985, 37, '2023-03-30'),\n(10986, 54, '2023-03-30'),\n(10987, 19, '2023-03-31'),\n(10988, 65, '2023-03-31'),\n(10989, 61, '2023-03-31'),\n(10990, 20, '2023-04-01'),\n(10991, 63, '2023-04-01'),\n(10992, 77, '2023-04-01'),\n(10993, 24, '2023-04-01'),\n(10994, 83, '2023-04-02'),\n(10995, 58, '2023-04-02'),\n(10996, 63, '2023-04-02'),\n(10997, 46, '2023-04-03'),\n(10998, 91, '2023-04-03'),\n(10999, 56, '2023-04-03'),\n(11000, 65, '2023-04-06'),\n(11001, 24, '2023-04-06'),\n(11002, 71, '2023-04-06'),\n(11003, 78, '2023-04-06'),\n(11004, 50, '2023-04-07'),\n(11005, 90, '2023-04-07'),\n(11006, 32, '2023-04-07'),\n(11007, 60, '2023-04-08'),\n(11008, 20, '2023-04-08'),\n(11009, 30, '2023-04-08'),\n(11010, 66, '2023-04-09'),\n(11011, 1, '2023-04-09'),\n(11012, 25, '2023-04-09'),\n(11013, 69, '2023-04-09'),\n(11014, 47, '2023-04-10'),\n(11015, 70, '2023-04-10'),\n(11016, 4, '2023-04-10'),\n(11017, 20, '2023-04-13'),\n(11018, 48, '2023-04-13'),\n(11019, 64, '2023-04-13'),\n(11020, 56, '2023-04-14'),\n(11021, 63, '2023-04-14'),\n(11022, 34, '2023-04-14'),\n(11023, 11, '2023-04-14'),\n(11024, 19, '2023-04-15'),\n(11025, 87, '2023-04-15'),\n(11026, 27, '2023-04-15'),\n(11027, 10, '2023-04-16'),\n(11028, 39, '2023-04-16'),\n(11029, 14, '2023-04-16'),\n(11030, 71, '2023-04-17'),\n(11031, 71, '2023-04-17'),\n(11032, 89, '2023-04-17'),\n(11033, 68, '2023-04-17'),\n(11034, 55, '2023-04-20'),\n(11035, 76, '2023-04-20'),\n(11036, 17, '2023-04-20'),\n(11037, 30, '2023-04-21'),\n(11038, 76, '2023-04-21'),\n(11039, 47, '2023-04-21'),\n(11040, 32, '2023-04-22'),\n(11041, 14, '2023-04-22'),\n(11042, 15, '2023-04-22'),\n(11043, 74, '2023-04-22'),\n(11044, 91, '2023-04-23'),\n(11045, 10, '2023-04-23'),\n(11046, 86, '2023-04-23'),\n(11047, 19, '2023-04-24'),\n(11048, 10, '2023-04-24'),\n(11049, 31, '2023-04-24'),\n(11050, 24, '2023-04-27'),\n(11051, 41, '2023-04-27'),\n(11052, 34, '2023-04-27'),\n(11053, 59, '2023-04-27'),\n(11054, 12, '2023-04-28'),\n(11055, 35, '2023-04-28'),\n(11056, 19, '2023-04-28'),\n(11057, 53, '2023-04-29'),\n(11058, 6, '2023-04-29'),\n(11059, 67, '2023-04-29'),\n(11060, 27, '2023-04-30'),\n(11061, 32, '2023-04-30'),\n(11062, 66, '2023-04-30'),\n(11063, 37, '2023-04-30'),\n(11064, 71, '2023-05-01'),\n(11065, 46, '2023-05-01'),\n(11066, 89, '2023-05-01'),\n(11067, 17, '2023-05-04'),\n(11068, 62, '2023-05-04'),\n(11069, 80, '2023-05-04'),\n(11070, 44, '2023-05-05'),\n(11071, 46, '2023-05-05'),\n(11072, 20, '2023-05-05'),\n(11073, 58, '2023-05-05'),\n(11074, 73, '2023-05-06'),\n(11075, 68, '2023-05-06'),\n(11076, 9, '2023-05-06'),\n(11077, 65, '2023-05-06');",
        "INSERT 0 830",
        "CREATE TABLE order_details (\norder_detail_id SERIAL NOT NULL PRIMARY KEY,\norder_id INT,\nproduct_id INT,\nquantity INT\n);",
        "INSERT INTO order_details (order_id, product_id, quantity)\nVALUES\n(10248, 11, 12),\n(10248, 42, 10),\n(10248, 72, 5),\n(10249, 14, 9),\n(10249, 51, 40),\n(10250, 41, 10),\n(10250, 51, 35),\n(10250, 65, 15),\n(10251, 22, 6),\n(10251, 57, 15),\n(10251, 65, 20),\n(10252, 20, 40),\n(10252, 33, 25),\n(10252, 60, 40),\n(10253, 31, 20),\n(10253, 39, 42),\n(10253, 49, 40),\n(10254, 24, 15),\n(10254, 55, 21),\n(10254, 74, 21),\n(10255, 2, 20),\n(10255, 16, 35),\n(10255, 36, 25),\n(10255, 59, 30),\n(10256, 53, 15),\n(10256, 77, 12),\n(10257, 27, 25),\n(10257, 39, 6),\n(10257, 77, 15),\n(10258, 2, 50),\n(10258, 5, 65),\n(10258, 32, 6),\n(10259, 21, 10),\n(10259, 37, 1),\n(10260, 41, 16),\n(10260, 57, 50),\n(10260, 62, 15),\n(10260, 70, 21),\n(10261, 21, 20),\n(10261, 35, 20),\n(10262, 5, 12),\n(10262, 7, 15),\n(10262, 56, 2),\n(10263, 16, 60),\n(10263, 24, 28),\n(10263, 30, 60),\n(10263, 74, 36),\n(10264, 2, 35),\n(10264, 41, 25),\n(10265, 17, 30),\n(10265, 70, 20),\n(10266, 12, 12),\n(10267, 40, 50),\n(10267, 59, 70),\n(10267, 76, 15),\n(10268, 29, 10),\n(10268, 72, 4),\n(10269, 33, 60),\n(10269, 72, 20),\n(10270, 36, 30),\n(10270, 43, 25),\n(10271, 33, 24),\n(10272, 20, 6),\n(10272, 31, 40),\n(10272, 72, 24),\n(10273, 10, 24),\n(10273, 31, 15),\n(10273, 33, 20),\n(10273, 40, 60),\n(10273, 76, 33),\n(10274, 71, 20),\n(10274, 72, 7),\n(10275, 24, 12),\n(10275, 59, 6),\n(10276, 10, 15),\n(10276, 13, 10),\n(10277, 28, 20),\n(10277, 62, 12),\n(10278, 44, 16),\n(10278, 59, 15),\n(10278, 63, 8),\n(10278, 73, 25),\n(10279, 17, 15),\n(10280, 24, 12),\n(10280, 55, 20),\n(10280, 75, 30),\n(10281, 19, 1),\n(10281, 24, 6),\n(10281, 35, 4),\n(10282, 30, 6),\n(10282, 57, 2),\n(10283, 15, 20),\n(10283, 19, 18),\n(10283, 60, 35),\n(10283, 72, 3),\n(10284, 27, 15),\n(10284, 44, 21),\n(10284, 60, 20),\n(10284, 67, 5),\n(10285, 1, 45),\n(10285, 40, 40),\n(10285, 53, 36),\n(10286, 35, 100),\n(10286, 62, 40),\n(10287, 16, 40),\n(10287, 34, 20),\n(10287, 46, 15),\n(10288, 54, 10),\n(10288, 68, 3),\n(10289, 3, 30),\n(10289, 64, 9),\n(10290, 5, 20),\n(10290, 29, 15),\n(10290, 49, 15),\n(10290, 77, 10),\n(10291, 13, 20),\n(10291, 44, 24),\n(10291, 51, 2),\n(10292, 20, 20),\n(10293, 18, 12),\n(10293, 24, 10),\n(10293, 63, 5),\n(10293, 75, 6),\n(10294, 1, 18),\n(10294, 17, 15),\n(10294, 43, 15),\n(10294, 60, 21),\n(10294, 75, 6),\n(10295, 56, 4),\n(10296, 11, 12),\n(10296, 16, 30),\n(10296, 69, 15),\n(10297, 39, 60),\n(10297, 72, 20),\n(10298, 2, 40),\n(10298, 36, 40),\n(10298, 59, 30),\n(10298, 62, 15),\n(10299, 19, 15),\n(10299, 70, 20),\n(10300, 66, 30),\n(10300, 68, 20),\n(10301, 40, 10),\n(10301, 56, 20),\n(10302, 17, 40),\n(10302, 28, 28),\n(10302, 43, 12),\n(10303, 40, 40),\n(10303, 65, 30),\n(10303, 68, 15),\n(10304, 49, 30),\n(10304, 59, 10),\n(10304, 71, 2),\n(10305, 18, 25),\n(10305, 29, 25),\n(10305, 39, 30),\n(10306, 30, 10),\n(10306, 53, 10),\n(10306, 54, 5),\n(10307, 62, 10),\n(10307, 68, 3),\n(10308, 69, 1),\n(10308, 70, 5),\n(10309, 4, 20),\n(10309, 6, 30),\n(10309, 42, 2),\n(10309, 43, 20),\n(10309, 71, 3),\n(10310, 16, 10),\n(10310, 62, 5),\n(10311, 42, 6),\n(10311, 69, 7),\n(10312, 28, 4),\n(10312, 43, 24),\n(10312, 53, 20),\n(10312, 75, 10),\n(10313, 36, 12),\n(10314, 32, 40),\n(10314, 58, 30),\n(10314, 62, 25),\n(10315, 34, 14),\n(10315, 70, 30),\n(10316, 41, 10),\n(10316, 62, 70),\n(10317, 1, 20),\n(10318, 41, 20),\n(10318, 76, 6),\n(10319, 17, 8),\n(10319, 28, 14),\n(10319, 76, 30),\n(10320, 71, 30),\n(10321, 35, 10),\n(10322, 52, 20),\n(10323, 15, 5),\n(10323, 25, 4),\n(10323, 39, 4),\n(10324, 16, 21),\n(10324, 35, 70),\n(10324, 46, 30),\n(10324, 59, 40),\n(10324, 63, 80),\n(10325, 6, 6),\n(10325, 13, 12),\n(10325, 14, 9),\n(10325, 31, 4),\n(10325, 72, 40),\n(10326, 4, 24),\n(10326, 57, 16),\n(10326, 75, 50),\n(10327, 2, 25),\n(10327, 11, 50),\n(10327, 30, 35),\n(10327, 58, 30),\n(10328, 59, 9),\n(10328, 65, 40),\n(10328, 68, 10),\n(10329, 19, 10),\n(10329, 30, 8),\n(10329, 38, 20),\n(10329, 56, 12),\n(10330, 26, 50),\n(10330, 72, 25),\n(10331, 54, 15),\n(10332, 18, 40),\n(10332, 42, 10),\n(10332, 47, 16),\n(10333, 14, 10),\n(10333, 21, 10),\n(10333, 71, 40),\n(10334, 52, 8),\n(10334, 68, 10),\n(10335, 2, 7),\n(10335, 31, 25),\n(10335, 32, 6),\n(10335, 51, 48),\n(10336, 4, 18),\n(10337, 23, 40),\n(10337, 26, 24),\n(10337, 36, 20),\n(10337, 37, 28),\n(10337, 72, 25),\n(10338, 17, 20),\n(10338, 30, 15),\n(10339, 4, 10),\n(10339, 17, 70),\n(10339, 62, 28),\n(10340, 18, 20),\n(10340, 41, 12),\n(10340, 43, 40),\n(10341, 33, 8),\n(10341, 59, 9),\n(10342, 2, 24),\n(10342, 31, 56),\n(10342, 36, 40),\n(10342, 55, 40),\n(10343, 64, 50),\n(10343, 68, 4),\n(10343, 76, 15),\n(10344, 4, 35),\n(10344, 8, 70),\n(10345, 8, 70),\n(10345, 19, 80),\n(10345, 42, 9),\n(10346, 17, 36),\n(10346, 56, 20),\n(10347, 25, 10),\n(10347, 39, 50),\n(10347, 40, 4),\n(10347, 75, 6),\n(10348, 1, 15),\n(10348, 23, 25),\n(10349, 54, 24),\n(10350, 50, 15),\n(10350, 69, 18),\n(10351, 38, 20),\n(10351, 41, 13),\n(10351, 44, 77),\n(10351, 65, 10),\n(10352, 24, 10),\n(10352, 54, 20),\n(10353, 11, 12),\n(10353, 38, 50),\n(10354, 1, 12),\n(10354, 29, 4),\n(10355, 24, 25),\n(10355, 57, 25),\n(10356, 31, 30),\n(10356, 55, 12),\n(10356, 69, 20),\n(10357, 10, 30),\n(10357, 26, 16),\n(10357, 60, 8),\n(10358, 24, 10),\n(10358, 34, 10),\n(10358, 36, 20),\n(10359, 16, 56),\n(10359, 31, 70),\n(10359, 60, 80),\n(10360, 28, 30),\n(10360, 29, 35),\n(10360, 38, 10),\n(10360, 49, 35),\n(10360, 54, 28),\n(10361, 39, 54),\n(10361, 60, 55),\n(10362, 25, 50),\n(10362, 51, 20),\n(10362, 54, 24),\n(10363, 31, 20),\n(10363, 75, 12),\n(10363, 76, 12),\n(10364, 69, 30),\n(10364, 71, 5),\n(10365, 11, 24),\n(10366, 65, 5),\n(10366, 77, 5),\n(10367, 34, 36),\n(10367, 54, 18),\n(10367, 65, 15),\n(10367, 77, 7),\n(10368, 21, 5),\n(10368, 28, 13),\n(10368, 57, 25),\n(10368, 64, 35),\n(10369, 29, 20),\n(10369, 56, 18),\n(10370, 1, 15),\n(10370, 64, 30),\n(10370, 74, 20),\n(10371, 36, 6),\n(10372, 20, 12),\n(10372, 38, 40),\n(10372, 60, 70),\n(10372, 72, 42),\n(10373, 58, 80),\n(10373, 71, 50),\n(10374, 31, 30),\n(10374, 58, 15),\n(10375, 14, 15),\n(10375, 54, 10),\n(10376, 31, 42),\n(10377, 28, 20),\n(10377, 39, 20),\n(10378, 71, 6),\n(10379, 41, 8),\n(10379, 63, 16),\n(10379, 65, 20),\n(10380, 30, 18),\n(10380, 53, 20),\n(10380, 60, 6),\n(10380, 70, 30),\n(10381, 74, 14),\n(10382, 5, 32),\n(10382, 18, 9),\n(10382, 29, 14),\n(10382, 33, 60),\n(10382, 74, 50),\n(10383, 13, 20),\n(10383, 50, 15),\n(10383, 56, 20),\n(10384, 20, 28),\n(10384, 60, 15),\n(10385, 7, 10),\n(10385, 60, 20),\n(10385, 68, 8),\n(10386, 24, 15),\n(10386, 34, 10),\n(10387, 24, 15),\n(10387, 28, 6),\n(10387, 59, 12),\n(10387, 71, 15),\n(10388, 45, 15),\n(10388, 52, 20),\n(10388, 53, 40),\n(10389, 10, 16),\n(10389, 55, 15),\n(10389, 62, 20),\n(10389, 70, 30),\n(10390, 31, 60),\n(10390, 35, 40),\n(10390, 46, 45),\n(10390, 72, 24),\n(10391, 13, 18),\n(10392, 69, 50),\n(10393, 2, 25),\n(10393, 14, 42),\n(10393, 25, 7),\n(10393, 26, 70),\n(10393, 31, 32),\n(10394, 13, 10),\n(10394, 62, 10),\n(10395, 46, 28),\n(10395, 53, 70),\n(10395, 69, 8),\n(10396, 23, 40),\n(10396, 71, 60),\n(10396, 72, 21),\n(10397, 21, 10),\n(10397, 51, 18),\n(10398, 35, 30),\n(10398, 55, 120),\n(10399, 68, 60),\n(10399, 71, 30),\n(10399, 76, 35),\n(10399, 77, 14),\n(10400, 29, 21),\n(10400, 35, 35),\n(10400, 49, 30),\n(10401, 30, 18),\n(10401, 56, 70),\n(10401, 65, 20),\n(10401, 71, 60),\n(10402, 23, 60),\n(10402, 63, 65),\n(10403, 16, 21),\n(10403, 48, 70),\n(10404, 26, 30),\n(10404, 42, 40),\n(10404, 49, 30),\n(10405, 3, 50),\n(10406, 1, 10),\n(10406, 21, 30),\n(10406, 28, 42),\n(10406, 36, 5),\n(10406, 40, 2),\n(10407, 11, 30),\n(10407, 69, 15),\n(10407, 71, 15),\n(10408, 37, 10),\n(10408, 54, 6),\n(10408, 62, 35),\n(10409, 14, 12),\n(10409, 21, 12),\n(10410, 33, 49),\n(10410, 59, 16),\n(10411, 41, 25),\n(10411, 44, 40),\n(10411, 59, 9),\n(10412, 14, 20),\n(10413, 1, 24),\n(10413, 62, 40),\n(10413, 76, 14),\n(10414, 19, 18),\n(10414, 33, 50),\n(10415, 17, 2),\n(10415, 33, 20),\n(10416, 19, 20),\n(10416, 53, 10),\n(10416, 57, 20),\n(10417, 38, 50),\n(10417, 46, 2),\n(10417, 68, 36),\n(10417, 77, 35),\n(10418, 2, 60),\n(10418, 47, 55),\n(10418, 61, 16),\n(10418, 74, 15),\n(10419, 60, 60),\n(10419, 69, 20),\n(10420, 9, 20),\n(10420, 13, 2),\n(10420, 70, 8),\n(10420, 73, 20),\n(10421, 19, 4),\n(10421, 26, 30),\n(10421, 53, 15),\n(10421, 77, 10),\n(10422, 26, 2),\n(10423, 31, 14),\n(10423, 59, 20),\n(10424, 35, 60),\n(10424, 38, 49),\n(10424, 68, 30),\n(10425, 55, 10),\n(10425, 76, 20),\n(10426, 56, 5),\n(10426, 64, 7),\n(10427, 14, 35),\n(10428, 46, 20),\n(10429, 50, 40),\n(10429, 63, 35),\n(10430, 17, 45),\n(10430, 21, 50),\n(10430, 56, 30),\n(10430, 59, 70),\n(10431, 17, 50),\n(10431, 40, 50),\n(10431, 47, 30),\n(10432, 26, 10),\n(10432, 54, 40),\n(10433, 56, 28),\n(10434, 11, 6),\n(10434, 76, 18),\n(10435, 2, 10),\n(10435, 22, 12),\n(10435, 72, 10),\n(10436, 46, 5),\n(10436, 56, 40),\n(10436, 64, 30),\n(10436, 75, 24),\n(10437, 53, 15),\n(10438, 19, 15),\n(10438, 34, 20),\n(10438, 57, 15),\n(10439, 12, 15),\n(10439, 16, 16),\n(10439, 64, 6),\n(10439, 74, 30),\n(10440, 2, 45),\n(10440, 16, 49),\n(10440, 29, 24),\n(10440, 61, 90),\n(10441, 27, 50),\n(10442, 11, 30),\n(10442, 54, 80),\n(10442, 66, 60),\n(10443, 11, 6),\n(10443, 28, 12),\n(10444, 17, 10),\n(10444, 26, 15),\n(10444, 35, 8),\n(10444, 41, 30),\n(10445, 39, 6),\n(10445, 54, 15),\n(10446, 19, 12),\n(10446, 24, 20),\n(10446, 31, 3),\n(10446, 52, 15),\n(10447, 19, 40),\n(10447, 65, 35),\n(10447, 71, 2),\n(10448, 26, 6),\n(10448, 40, 20),\n(10449, 10, 14),\n(10449, 52, 20),\n(10449, 62, 35),\n(10450, 10, 20),\n(10450, 54, 6),\n(10451, 55, 120),\n(10451, 64, 35),\n(10451, 65, 28),\n(10451, 77, 55),\n(10452, 28, 15),\n(10452, 44, 100),\n(10453, 48, 15),\n(10453, 70, 25),\n(10454, 16, 20),\n(10454, 33, 20),\n(10454, 46, 10),\n(10455, 39, 20),\n(10455, 53, 50),\n(10455, 61, 25),\n(10455, 71, 30),\n(10456, 21, 40),\n(10456, 49, 21),\n(10457, 59, 36),\n(10458, 26, 30),\n(10458, 28, 30),\n(10458, 43, 20),\n(10458, 56, 15),\n(10458, 71, 50),\n(10459, 7, 16),\n(10459, 46, 20),\n(10459, 72, 40),\n(10460, 68, 21),\n(10460, 75, 4),\n(10461, 21, 40),\n(10461, 30, 28),\n(10461, 55, 60),\n(10462, 13, 1),\n(10462, 23, 21),\n(10463, 19, 21),\n(10463, 42, 50),\n(10464, 4, 16),\n(10464, 43, 3),\n(10464, 56, 30),\n(10464, 60, 20),\n(10465, 24, 25),\n(10465, 29, 18),\n(10465, 40, 20),\n(10465, 45, 30),\n(10465, 50, 25),\n(10466, 11, 10),\n(10466, 46, 5),\n(10467, 24, 28),\n(10467, 25, 12),\n(10468, 30, 8),\n(10468, 43, 15),\n(10469, 2, 40),\n(10469, 16, 35),\n(10469, 44, 2),\n(10470, 18, 30),\n(10470, 23, 15),\n(10470, 64, 8),\n(10471, 7, 30),\n(10471, 56, 20),\n(10472, 24, 80),\n(10472, 51, 18),\n(10473, 33, 12),\n(10473, 71, 12),\n(10474, 14, 12),\n(10474, 28, 18),\n(10474, 40, 21),\n(10474, 75, 10),\n(10475, 31, 35),\n(10475, 66, 60),\n(10475, 76, 42),\n(10476, 55, 2),\n(10476, 70, 12),\n(10477, 1, 15),\n(10477, 21, 21),\n(10477, 39, 20),\n(10478, 10, 20),\n(10479, 38, 30),\n(10479, 53, 28),\n(10479, 59, 60),\n(10479, 64, 30),\n(10480, 47, 30),\n(10480, 59, 12),\n(10481, 49, 24),\n(10481, 60, 40),\n(10482, 40, 10),\n(10483, 34, 35),\n(10483, 77, 30),\n(10484, 21, 14),\n(10484, 40, 10),\n(10484, 51, 3),\n(10485, 2, 20),\n(10485, 3, 20),\n(10485, 55, 30),\n(10485, 70, 60),\n(10486, 11, 5),\n(10486, 51, 25),\n(10486, 74, 16),\n(10487, 19, 5),\n(10487, 26, 30),\n(10487, 54, 24),\n(10488, 59, 30),\n(10488, 73, 20),\n(10489, 11, 15),\n(10489, 16, 18),\n(10490, 59, 60),\n(10490, 68, 30),\n(10490, 75, 36),\n(10491, 44, 15),\n(10491, 77, 7),\n(10492, 25, 60),\n(10492, 42, 20),\n(10493, 65, 15),\n(10493, 66, 10),\n(10493, 69, 10),\n(10494, 56, 30),\n(10495, 23, 10),\n(10495, 41, 20),\n(10495, 77, 5),\n(10496, 31, 20),\n(10497, 56, 14),\n(10497, 72, 25),\n(10497, 77, 25),\n(10498, 24, 14),\n(10498, 40, 5),\n(10498, 42, 30),\n(10499, 28, 20),\n(10499, 49, 25),\n(10500, 15, 12),\n(10500, 28, 8),\n(10501, 54, 20),\n(10502, 45, 21),\n(10502, 53, 6),\n(10502, 67, 30),\n(10503, 14, 70),\n(10503, 65, 20),\n(10504, 2, 12),\n(10504, 21, 12),\n(10504, 53, 10),\n(10504, 61, 25),\n(10505, 62, 3),\n(10506, 25, 18),\n(10506, 70, 14),\n(10507, 43, 15),\n(10507, 48, 15),\n(10508, 13, 10),\n(10508, 39, 10),\n(10509, 28, 3),\n(10510, 29, 36),\n(10510, 75, 36),\n(10511, 4, 50),\n(10511, 7, 50),\n(10511, 8, 10),\n(10512, 24, 10),\n(10512, 46, 9),\n(10512, 47, 6),\n(10512, 60, 12),\n(10513, 21, 40),\n(10513, 32, 50),\n(10513, 61, 15),\n(10514, 20, 39),\n(10514, 28, 35),\n(10514, 56, 70),\n(10514, 65, 39),\n(10514, 75, 50),\n(10515, 9, 16),\n(10515, 16, 50),\n(10515, 27, 120),\n(10515, 33, 16),\n(10515, 60, 84),\n(10516, 18, 25),\n(10516, 41, 80),\n(10516, 42, 20),\n(10517, 52, 6),\n(10517, 59, 4),\n(10517, 70, 6),\n(10518, 24, 5),\n(10518, 38, 15),\n(10518, 44, 9),\n(10519, 10, 16),\n(10519, 56, 40),\n(10519, 60, 10),\n(10520, 24, 8),\n(10520, 53, 5),\n(10521, 35, 3),\n(10521, 41, 10),\n(10521, 68, 6),\n(10522, 1, 40),\n(10522, 8, 24),\n(10522, 30, 20),\n(10522, 40, 25),\n(10523, 17, 25),\n(10523, 20, 15),\n(10523, 37, 18),\n(10523, 41, 6),\n(10524, 10, 2),\n(10524, 30, 10),\n(10524, 43, 60),\n(10524, 54, 15),\n(10525, 36, 30),\n(10525, 40, 15),\n(10526, 1, 8),\n(10526, 13, 10),\n(10526, 56, 30),\n(10527, 4, 50),\n(10527, 36, 30),\n(10528, 11, 3),\n(10528, 33, 8),\n(10528, 72, 9),\n(10529, 55, 14),\n(10529, 68, 20),\n(10529, 69, 10),\n(10530, 17, 40),\n(10530, 43, 25),\n(10530, 61, 20),\n(10530, 76, 50),\n(10531, 59, 2),\n(10532, 30, 15),\n(10532, 66, 24),\n(10533, 4, 50),\n(10533, 72, 24),\n(10533, 73, 24),\n(10534, 30, 10),\n(10534, 40, 10),\n(10534, 54, 10),\n(10535, 11, 50),\n(10535, 40, 10),\n(10535, 57, 5),\n(10535, 59, 15),\n(10536, 12, 15),\n(10536, 31, 20),\n(10536, 33, 30),\n(10536, 60, 35),\n(10537, 31, 30),\n(10537, 51, 6),\n(10537, 58, 20),\n(10537, 72, 21),\n(10537, 73, 9),\n(10538, 70, 7),\n(10538, 72, 1),\n(10539, 13, 8),\n(10539, 21, 15),\n(10539, 33, 15),\n(10539, 49, 6),\n(10540, 3, 60),\n(10540, 26, 40),\n(10540, 38, 30),\n(10540, 68, 35),\n(10541, 24, 35),\n(10541, 38, 4),\n(10541, 65, 36),\n(10541, 71, 9),\n(10542, 11, 15),\n(10542, 54, 24),\n(10543, 12, 30),\n(10543, 23, 70),\n(10544, 28, 7),\n(10544, 67, 7),\n(10545, 11, 10),\n(10546, 7, 10),\n(10546, 35, 30),\n(10546, 62, 40),\n(10547, 32, 24),\n(10547, 36, 60),\n(10548, 34, 10),\n(10548, 41, 14),\n(10549, 31, 55),\n(10549, 45, 100),\n(10549, 51, 48),\n(10550, 17, 8),\n(10550, 19, 10),\n(10550, 21, 6),\n(10550, 61, 10),\n(10551, 16, 40),\n(10551, 35, 20),\n(10551, 44, 40),\n(10552, 69, 18),\n(10552, 75, 30),\n(10553, 11, 15),\n(10553, 16, 14),\n(10553, 22, 24),\n(10553, 31, 30),\n(10553, 35, 6),\n(10554, 16, 30),\n(10554, 23, 20),\n(10554, 62, 20),\n(10554, 77, 10),\n(10555, 14, 30),\n(10555, 19, 35),\n(10555, 24, 18),\n(10555, 51, 20),\n(10555, 56, 40),\n(10556, 72, 24),\n(10557, 64, 30),\n(10557, 75, 20),\n(10558, 47, 25),\n(10558, 51, 20),\n(10558, 52, 30),\n(10558, 53, 18),\n(10558, 73, 3),\n(10559, 41, 12),\n(10559, 55, 18),\n(10560, 30, 20),\n(10560, 62, 15),\n(10561, 44, 10),\n(10561, 51, 50),\n(10562, 33, 20),\n(10562, 62, 10),\n(10563, 36, 25),\n(10563, 52, 70),\n(10564, 17, 16),\n(10564, 31, 6),\n(10564, 55, 25),\n(10565, 24, 25),\n(10565, 64, 18),\n(10566, 11, 35),\n(10566, 18, 18),\n(10566, 76, 10),\n(10567, 31, 60),\n(10567, 51, 3),\n(10567, 59, 40),\n(10568, 10, 5),\n(10569, 31, 35),\n(10569, 76, 30),\n(10570, 11, 15),\n(10570, 56, 60),\n(10571, 14, 11),\n(10571, 42, 28),\n(10572, 16, 12),\n(10572, 32, 10),\n(10572, 40, 50),\n(10572, 75, 15),\n(10573, 17, 18),\n(10573, 34, 40),\n(10573, 53, 25),\n(10574, 33, 14),\n(10574, 40, 2),\n(10574, 62, 10),\n(10574, 64, 6),\n(10575, 59, 12),\n(10575, 63, 6),\n(10575, 72, 30),\n(10575, 76, 10),\n(10576, 1, 10),\n(10576, 31, 20),\n(10576, 44, 21),\n(10577, 39, 10),\n(10577, 75, 20),\n(10577, 77, 18),\n(10578, 35, 20),\n(10578, 57, 6),\n(10579, 15, 10),\n(10579, 75, 21),\n(10580, 14, 15),\n(10580, 41, 9),\n(10580, 65, 30),\n(10581, 75, 50),\n(10582, 57, 4),\n(10582, 76, 14),\n(10583, 29, 10),\n(10583, 60, 24),\n(10583, 69, 10),\n(10584, 31, 50),\n(10585, 47, 15),\n(10586, 52, 4),\n(10587, 26, 6),\n(10587, 35, 20),\n(10587, 77, 20),\n(10588, 18, 40),\n(10588, 42, 100),\n(10589, 35, 4),\n(10590, 1, 20),\n(10590, 77, 60),\n(10591, 3, 14),\n(10591, 7, 10),\n(10591, 54, 50),\n(10592, 15, 25),\n(10592, 26, 5),\n(10593, 20, 21),\n(10593, 69, 20),\n(10593, 76, 4),\n(10594, 52, 24),\n(10594, 58, 30),\n(10595, 35, 30),\n(10595, 61, 120),\n(10595, 69, 65),\n(10596, 56, 5),\n(10596, 63, 24),\n(10596, 75, 30),\n(10597, 24, 35),\n(10597, 57, 20),\n(10597, 65, 12),\n(10598, 27, 50),\n(10598, 71, 9),\n(10599, 62, 10),\n(10600, 54, 4),\n(10600, 73, 30),\n(10601, 13, 60),\n(10601, 59, 35),\n(10602, 77, 5),\n(10603, 22, 48),\n(10603, 49, 25),\n(10604, 48, 6),\n(10604, 76, 10),\n(10605, 16, 30),\n(10605, 59, 20),\n(10605, 60, 70),\n(10605, 71, 15),\n(10606, 4, 20),\n(10606, 55, 20),\n(10606, 62, 10),\n(10607, 7, 45),\n(10607, 17, 100),\n(10607, 33, 14),\n(10607, 40, 42),\n(10607, 72, 12),\n(10608, 56, 28),\n(10609, 1, 3),\n(10609, 10, 10),\n(10609, 21, 6),\n(10610, 36, 21),\n(10611, 1, 6),\n(10611, 2, 10),\n(10611, 60, 15),\n(10612, 10, 70),\n(10612, 36, 55),\n(10612, 49, 18),\n(10612, 60, 40),\n(10612, 76, 80),\n(10613, 13, 8),\n(10613, 75, 40),\n(10614, 11, 14),\n(10614, 21, 8),\n(10614, 39, 5),\n(10615, 55, 5),\n(10616, 38, 15),\n(10616, 56, 14),\n(10616, 70, 15),\n(10616, 71, 15),\n(10617, 59, 30),\n(10618, 6, 70),\n(10618, 56, 20),\n(10618, 68, 15),\n(10619, 21, 42),\n(10619, 22, 40),\n(10620, 24, 5),\n(10620, 52, 5),\n(10621, 19, 5),\n(10621, 23, 10),\n(10621, 70, 20),\n(10621, 71, 15),\n(10622, 2, 20),\n(10622, 68, 18),\n(10623, 14, 21),\n(10623, 19, 15),\n(10623, 21, 25),\n(10623, 24, 3),\n(10623, 35, 30),\n(10624, 28, 10),\n(10624, 29, 6),\n(10624, 44, 10),\n(10625, 14, 3),\n(10625, 42, 5),\n(10625, 60, 10),\n(10626, 53, 12),\n(10626, 60, 20),\n(10626, 71, 20),\n(10627, 62, 15),\n(10627, 73, 35),\n(10628, 1, 25),\n(10629, 29, 20),\n(10629, 64, 9),\n(10630, 55, 12),\n(10630, 76, 35),\n(10631, 75, 8),\n(10632, 2, 30),\n(10632, 33, 20),\n(10633, 12, 36),\n(10633, 13, 13),\n(10633, 26, 35),\n(10633, 62, 80),\n(10634, 7, 35),\n(10634, 18, 50),\n(10634, 51, 15),\n(10634, 75, 2),\n(10635, 4, 10),\n(10635, 5, 15),\n(10635, 22, 40),\n(10636, 4, 25),\n(10636, 58, 6),\n(10637, 11, 10),\n(10637, 50, 25),\n(10637, 56, 60),\n(10638, 45, 20),\n(10638, 65, 21),\n(10638, 72, 60),\n(10639, 18, 8),\n(10640, 69, 20),\n(10640, 70, 15),\n(10641, 2, 50),\n(10641, 40, 60),\n(10642, 21, 30),\n(10642, 61, 20),\n(10643, 28, 15),\n(10643, 39, 21),\n(10643, 46, 2),\n(10644, 18, 4),\n(10644, 43, 20),\n(10644, 46, 21),\n(10645, 18, 20),\n(10645, 36, 15),\n(10646, 1, 15),\n(10646, 10, 18),\n(10646, 71, 30),\n(10646, 77, 35),\n(10647, 19, 30),\n(10647, 39, 20),\n(10648, 22, 15),\n(10648, 24, 15),\n(10649, 28, 20),\n(10649, 72, 15),\n(10650, 30, 30),\n(10650, 53, 25),\n(10650, 54, 30),\n(10651, 19, 12),\n(10651, 22, 20),\n(10652, 30, 2),\n(10652, 42, 20),\n(10653, 16, 30),\n(10653, 60, 20),\n(10654, 4, 12),\n(10654, 39, 20),\n(10654, 54, 6),\n(10655, 41, 20),\n(10656, 14, 3),\n(10656, 44, 28),\n(10656, 47, 6),\n(10657, 15, 50),\n(10657, 41, 24),\n(10657, 46, 45),\n(10657, 47, 10),\n(10657, 56, 45),\n(10657, 60, 30),\n(10658, 21, 60),\n(10658, 40, 70),\n(10658, 60, 55),\n(10658, 77, 70),\n(10659, 31, 20),\n(10659, 40, 24),\n(10659, 70, 40),\n(10660, 20, 21),\n(10661, 39, 3),\n(10661, 58, 49),\n(10662, 68, 10),\n(10663, 40, 30),\n(10663, 42, 30),\n(10663, 51, 20),\n(10664, 10, 24),\n(10664, 56, 12),\n(10664, 65, 15),\n(10665, 51, 20),\n(10665, 59, 1),\n(10665, 76, 10),\n(10666, 29, 36),\n(10666, 65, 10),\n(10667, 69, 45),\n(10667, 71, 14),\n(10668, 31, 8),\n(10668, 55, 4),\n(10668, 64, 15),\n(10669, 36, 30),\n(10670, 23, 32),\n(10670, 46, 60),\n(10670, 67, 25),\n(10670, 73, 50),\n(10670, 75, 25),\n(10671, 16, 10),\n(10671, 62, 10),\n(10671, 65, 12),\n(10672, 38, 15),\n(10672, 71, 12),\n(10673, 16, 3),\n(10673, 42, 6),\n(10673, 43, 6),\n(10674, 23, 5),\n(10675, 14, 30),\n(10675, 53, 10),\n(10675, 58, 30),\n(10676, 10, 2),\n(10676, 19, 7),\n(10676, 44, 21),\n(10677, 26, 30),\n(10677, 33, 8),\n(10678, 12, 100),\n(10678, 33, 30),\n(10678, 41, 120),\n(10678, 54, 30),\n(10679, 59, 12),\n(10680, 16, 50),\n(10680, 31, 20),\n(10680, 42, 40),\n(10681, 19, 30),\n(10681, 21, 12),\n(10681, 64, 28),\n(10682, 33, 30),\n(10682, 66, 4),\n(10682, 75, 30),\n(10683, 52, 9),\n(10684, 40, 20),\n(10684, 47, 40),\n(10684, 60, 30),\n(10685, 10, 20),\n(10685, 41, 4),\n(10685, 47, 15),\n(10686, 17, 30),\n(10686, 26, 15),\n(10687, 9, 50),\n(10687, 29, 10),\n(10687, 36, 6),\n(10688, 10, 18),\n(10688, 28, 60),\n(10688, 34, 14),\n(10689, 1, 35),\n(10690, 56, 20),\n(10690, 77, 30),\n(10691, 1, 30),\n(10691, 29, 40),\n(10691, 43, 40),\n(10691, 44, 24),\n(10691, 62, 48),\n(10692, 63, 20),\n(10693, 9, 6),\n(10693, 54, 60),\n(10693, 69, 30),\n(10693, 73, 15),\n(10694, 7, 90),\n(10694, 59, 25),\n(10694, 70, 50),\n(10695, 8, 10),\n(10695, 12, 4),\n(10695, 24, 20),\n(10696, 17, 20),\n(10696, 46, 18),\n(10697, 19, 7),\n(10697, 35, 9),\n(10697, 58, 30),\n(10697, 70, 30),\n(10698, 11, 15),\n(10698, 17, 8),\n(10698, 29, 12),\n(10698, 65, 65),\n(10698, 70, 8),\n(10699, 47, 12),\n(10700, 1, 5),\n(10700, 34, 12),\n(10700, 68, 40),\n(10700, 71, 60),\n(10701, 59, 42),\n(10701, 71, 20),\n(10701, 76, 35),\n(10702, 3, 6),\n(10702, 76, 15),\n(10703, 2, 5),\n(10703, 59, 35),\n(10703, 73, 35),\n(10704, 4, 6),\n(10704, 24, 35),\n(10704, 48, 24),\n(10705, 31, 20),\n(10705, 32, 4),\n(10706, 16, 20),\n(10706, 43, 24),\n(10706, 59, 8),\n(10707, 55, 21),\n(10707, 57, 40),\n(10707, 70, 28),\n(10708, 5, 4),\n(10708, 36, 5),\n(10709, 8, 40),\n(10709, 51, 28),\n(10709, 60, 10),\n(10710, 19, 5),\n(10710, 47, 5),\n(10711, 19, 12),\n(10711, 41, 42),\n(10711, 53, 120),\n(10712, 53, 3),\n(10712, 56, 30),\n(10713, 10, 18),\n(10713, 26, 30),\n(10713, 45, 110),\n(10713, 46, 24),\n(10714, 2, 30),\n(10714, 17, 27),\n(10714, 47, 50),\n(10714, 56, 18),\n(10714, 58, 12),\n(10715, 10, 21),\n(10715, 71, 30),\n(10716, 21, 5),\n(10716, 51, 7),\n(10716, 61, 10),\n(10717, 21, 32),\n(10717, 54, 15),\n(10717, 69, 25),\n(10718, 12, 36),\n(10718, 16, 20),\n(10718, 36, 40),\n(10718, 62, 20),\n(10719, 18, 12),\n(10719, 30, 3),\n(10719, 54, 40),\n(10720, 35, 21),\n(10720, 71, 8),\n(10721, 44, 50),\n(10722, 2, 3),\n(10722, 31, 50),\n(10722, 68, 45),\n(10722, 75, 42),\n(10723, 26, 15),\n(10724, 10, 16),\n(10724, 61, 5),\n(10725, 41, 12),\n(10725, 52, 4),\n(10725, 55, 6),\n(10726, 4, 25),\n(10726, 11, 5),\n(10727, 17, 20),\n(10727, 56, 10),\n(10727, 59, 10),\n(10728, 30, 15),\n(10728, 40, 6),\n(10728, 55, 12),\n(10728, 60, 15),\n(10729, 1, 50),\n(10729, 21, 30),\n(10729, 50, 40),\n(10730, 16, 15),\n(10730, 31, 3),\n(10730, 65, 10),\n(10731, 21, 40),\n(10731, 51, 30),\n(10732, 76, 20),\n(10733, 14, 16),\n(10733, 28, 20),\n(10733, 52, 25),\n(10734, 6, 30),\n(10734, 30, 15),\n(10734, 76, 20),\n(10735, 61, 20),\n(10735, 77, 2),\n(10736, 65, 40),\n(10736, 75, 20),\n(10737, 13, 4),\n(10737, 41, 12),\n(10738, 16, 3),\n(10739, 36, 6),\n(10739, 52, 18),\n(10740, 28, 5),\n(10740, 35, 35),\n(10740, 45, 40),\n(10740, 56, 14),\n(10741, 2, 15),\n(10742, 3, 20),\n(10742, 60, 50),\n(10742, 72, 35),\n(10743, 46, 28),\n(10744, 40, 50),\n(10745, 18, 24),\n(10745, 44, 16),\n(10745, 59, 45),\n(10745, 72, 7),\n(10746, 13, 6),\n(10746, 42, 28),\n(10746, 62, 9),\n(10746, 69, 40),\n(10747, 31, 8),\n(10747, 41, 35),\n(10747, 63, 9),\n(10747, 69, 30),\n(10748, 23, 44),\n(10748, 40, 40),\n(10748, 56, 28),\n(10749, 56, 15),\n(10749, 59, 6),\n(10749, 76, 10),\n(10750, 14, 5),\n(10750, 45, 40),\n(10750, 59, 25),\n(10751, 26, 12),\n(10751, 30, 30),\n(10751, 50, 20),\n(10751, 73, 15),\n(10752, 1, 8),\n(10752, 69, 3),\n(10753, 45, 4),\n(10753, 74, 5),\n(10754, 40, 3),\n(10755, 47, 30),\n(10755, 56, 30),\n(10755, 57, 14),\n(10755, 69, 25),\n(10756, 18, 21),\n(10756, 36, 20),\n(10756, 68, 6),\n(10756, 69, 20),\n(10757, 34, 30),\n(10757, 59, 7),\n(10757, 62, 30),\n(10757, 64, 24),\n(10758, 26, 20),\n(10758, 52, 60),\n(10758, 70, 40),\n(10759, 32, 10),\n(10760, 25, 12),\n(10760, 27, 40),\n(10760, 43, 30),\n(10761, 25, 35),\n(10761, 75, 18),\n(10762, 39, 16),\n(10762, 47, 30),\n(10762, 51, 28),\n(10762, 56, 60),\n(10763, 21, 40),\n(10763, 22, 6),\n(10763, 24, 20),\n(10764, 3, 20),\n(10764, 39, 130),\n(10765, 65, 80),\n(10766, 2, 40),\n(10766, 7, 35),\n(10766, 68, 40),\n(10767, 42, 2),\n(10768, 22, 4),\n(10768, 31, 50),\n(10768, 60, 15),\n(10768, 71, 12),\n(10769, 41, 30),\n(10769, 52, 15),\n(10769, 61, 20),\n(10769, 62, 15),\n(10770, 11, 15),\n(10771, 71, 16),\n(10772, 29, 18),\n(10772, 59, 25),\n(10773, 17, 33),\n(10773, 31, 70),\n(10773, 75, 7),\n(10774, 31, 2),\n(10774, 66, 50),\n(10775, 10, 6),\n(10775, 67, 3),\n(10776, 31, 16),\n(10776, 42, 12),\n(10776, 45, 27),\n(10776, 51, 120),\n(10777, 42, 20),\n(10778, 41, 10),\n(10779, 16, 20),\n(10779, 62, 20),\n(10780, 70, 35),\n(10780, 77, 15),\n(10781, 54, 3),\n(10781, 56, 20),\n(10781, 74, 35),\n(10782, 31, 1),\n(10783, 31, 10),\n(10783, 38, 5),\n(10784, 36, 30),\n(10784, 39, 2),\n(10784, 72, 30),\n(10785, 10, 10),\n(10785, 75, 10),\n(10786, 8, 30),\n(10786, 30, 15),\n(10786, 75, 42),\n(10787, 2, 15),\n(10787, 29, 20),\n(10788, 19, 50),\n(10788, 75, 40),\n(10789, 18, 30),\n(10789, 35, 15),\n(10789, 63, 30),\n(10789, 68, 18),\n(10790, 7, 3),\n(10790, 56, 20),\n(10791, 29, 14),\n(10791, 41, 20),\n(10792, 2, 10),\n(10792, 54, 3),\n(10792, 68, 15),\n(10793, 41, 14),\n(10793, 52, 8),\n(10794, 14, 15),\n(10794, 54, 6),\n(10795, 16, 65),\n(10795, 17, 35),\n(10796, 26, 21),\n(10796, 44, 10),\n(10796, 64, 35),\n(10796, 69, 24),\n(10797, 11, 20),\n(10798, 62, 2),\n(10798, 72, 10),\n(10799, 13, 20),\n(10799, 24, 20),\n(10799, 59, 25),\n(10800, 11, 50),\n(10800, 51, 10),\n(10800, 54, 7),\n(10801, 17, 40),\n(10801, 29, 20),\n(10802, 30, 25),\n(10802, 51, 30),\n(10802, 55, 60),\n(10802, 62, 5),\n(10803, 19, 24),\n(10803, 25, 15),\n(10803, 59, 15),\n(10804, 10, 36),\n(10804, 28, 24),\n(10804, 49, 4),\n(10805, 34, 10),\n(10805, 38, 10),\n(10806, 2, 20),\n(10806, 65, 2),\n(10806, 74, 15),\n(10807, 40, 1),\n(10808, 56, 20),\n(10808, 76, 50),\n(10809, 52, 20),\n(10810, 13, 7),\n(10810, 25, 5),\n(10810, 70, 5),\n(10811, 19, 15),\n(10811, 23, 18),\n(10811, 40, 30),\n(10812, 31, 16),\n(10812, 72, 40),\n(10812, 77, 20),\n(10813, 2, 12),\n(10813, 46, 35),\n(10814, 41, 20),\n(10814, 43, 20),\n(10814, 48, 8),\n(10814, 61, 30),\n(10815, 33, 16),\n(10816, 38, 30),\n(10816, 62, 20),\n(10817, 26, 40),\n(10817, 38, 30),\n(10817, 40, 60),\n(10817, 62, 25),\n(10818, 32, 20),\n(10818, 41, 20),\n(10819, 43, 7),\n(10819, 75, 20),\n(10820, 56, 30),\n(10821, 35, 20),\n(10821, 51, 6),\n(10822, 62, 3),\n(10822, 70, 6),\n(10823, 11, 20),\n(10823, 57, 15),\n(10823, 59, 40),\n(10823, 77, 15),\n(10824, 41, 12),\n(10824, 70, 9),\n(10825, 26, 12),\n(10825, 53, 20),\n(10826, 31, 35),\n(10826, 57, 15),\n(10827, 10, 15),\n(10827, 39, 21),\n(10828, 20, 5),\n(10828, 38, 2),\n(10829, 2, 10),\n(10829, 8, 20),\n(10829, 13, 10),\n(10829, 60, 21),\n(10830, 6, 6),\n(10830, 39, 28),\n(10830, 60, 30),\n(10830, 68, 24),\n(10831, 19, 2),\n(10831, 35, 8),\n(10831, 38, 8),\n(10831, 43, 9),\n(10832, 13, 3),\n(10832, 25, 10),\n(10832, 44, 16),\n(10832, 64, 3),\n(10833, 7, 20),\n(10833, 31, 9),\n(10833, 53, 9),\n(10834, 29, 8),\n(10834, 30, 20),\n(10835, 59, 15),\n(10835, 77, 2),\n(10836, 22, 52),\n(10836, 35, 6),\n(10836, 57, 24),\n(10836, 60, 60),\n(10836, 64, 30),\n(10837, 13, 6),\n(10837, 40, 25),\n(10837, 47, 40),\n(10837, 76, 21),\n(10838, 1, 4),\n(10838, 18, 25),\n(10838, 36, 50),\n(10839, 58, 30),\n(10839, 72, 15),\n(10840, 25, 6),\n(10840, 39, 10),\n(10841, 10, 16),\n(10841, 56, 30),\n(10841, 59, 50),\n(10841, 77, 15),\n(10842, 11, 15),\n(10842, 43, 5),\n(10842, 68, 20),\n(10842, 70, 12),\n(10843, 51, 4),\n(10844, 22, 35),\n(10845, 23, 70),\n(10845, 35, 25),\n(10845, 42, 42),\n(10845, 58, 60),\n(10845, 64, 48),\n(10846, 4, 21),\n(10846, 70, 30),\n(10846, 74, 20),\n(10847, 1, 80),\n(10847, 19, 12),\n(10847, 37, 60),\n(10847, 45, 36),\n(10847, 60, 45),\n(10847, 71, 55),\n(10848, 5, 30),\n(10848, 9, 3),\n(10849, 3, 49),\n(10849, 26, 18),\n(10850, 25, 20),\n(10850, 33, 4),\n(10850, 70, 30),\n(10851, 2, 5),\n(10851, 25, 10),\n(10851, 57, 10),\n(10851, 59, 42),\n(10852, 2, 15),\n(10852, 17, 6),\n(10852, 62, 50),\n(10853, 18, 10),\n(10854, 10, 100),\n(10854, 13, 65),\n(10855, 16, 50),\n(10855, 31, 14),\n(10855, 56, 24),\n(10855, 65, 15),\n(10856, 2, 20),\n(10856, 42, 20),\n(10857, 3, 30),\n(10857, 26, 35),\n(10857, 29, 10),\n(10858, 7, 5),\n(10858, 27, 10),\n(10858, 70, 4),\n(10859, 24, 40),\n(10859, 54, 35),\n(10859, 64, 30),\n(10860, 51, 3),\n(10860, 76, 20),\n(10861, 17, 42),\n(10861, 18, 20),\n(10861, 21, 40),\n(10861, 33, 35),\n(10861, 62, 3),\n(10862, 11, 25),\n(10862, 52, 8),\n(10863, 1, 20),\n(10863, 58, 12),\n(10864, 35, 4),\n(10864, 67, 15),\n(10865, 38, 60),\n(10865, 39, 80),\n(10866, 2, 21),\n(10866, 24, 6),\n(10866, 30, 40),\n(10867, 53, 3),\n(10868, 26, 20),\n(10868, 35, 30),\n(10868, 49, 42),\n(10869, 1, 40),\n(10869, 11, 10),\n(10869, 23, 50),\n(10869, 68, 20),\n(10870, 35, 3),\n(10870, 51, 2),\n(10871, 6, 50),\n(10871, 16, 12),\n(10871, 17, 16),\n(10872, 55, 10),\n(10872, 62, 20),\n(10872, 64, 15),\n(10872, 65, 21),\n(10873, 21, 20),\n(10873, 28, 3),\n(10874, 10, 10),\n(10875, 19, 25),\n(10875, 47, 21),\n(10875, 49, 15),\n(10876, 46, 21),\n(10876, 64, 20),\n(10877, 16, 30),\n(10877, 18, 25),\n(10878, 20, 20),\n(10879, 40, 12),\n(10879, 65, 10),\n(10879, 76, 10),\n(10880, 23, 30),\n(10880, 61, 30),\n(10880, 70, 50),\n(10881, 73, 10),\n(10882, 42, 25),\n(10882, 49, 20),\n(10882, 54, 32),\n(10883, 24, 8),\n(10884, 21, 40),\n(10884, 56, 21),\n(10884, 65, 12),\n(10885, 2, 20),\n(10885, 24, 12),\n(10885, 70, 30),\n(10885, 77, 25),\n(10886, 10, 70),\n(10886, 31, 35),\n(10886, 77, 40),\n(10887, 25, 5),\n(10888, 2, 20),\n(10888, 68, 18),\n(10889, 11, 40),\n(10889, 38, 40),\n(10890, 17, 15),\n(10890, 34, 10),\n(10890, 41, 14),\n(10891, 30, 15),\n(10892, 59, 40),\n(10893, 8, 30),\n(10893, 24, 10),\n(10893, 29, 24),\n(10893, 30, 35),\n(10893, 36, 20),\n(10894, 13, 28),\n(10894, 69, 50),\n(10894, 75, 120),\n(10895, 24, 110),\n(10895, 39, 45),\n(10895, 40, 91),\n(10895, 60, 100),\n(10896, 45, 15),\n(10896, 56, 16),\n(10897, 29, 80),\n(10897, 30, 36),\n(10898, 13, 5),\n(10899, 39, 8),\n(10900, 70, 3),\n(10901, 41, 30),\n(10901, 71, 30),\n(10902, 55, 30),\n(10902, 62, 6),\n(10903, 13, 40),\n(10903, 65, 21),\n(10903, 68, 20),\n(10904, 58, 15),\n(10904, 62, 35),\n(10905, 1, 20),\n(10906, 61, 15),\n(10907, 75, 14),\n(10908, 7, 20),\n(10908, 52, 14),\n(10909, 7, 12),\n(10909, 16, 15),\n(10909, 41, 5),\n(10910, 19, 12),\n(10910, 49, 10),\n(10910, 61, 5),\n(10911, 1, 10),\n(10911, 17, 12),\n(10911, 67, 15),\n(10912, 11, 40),\n(10912, 29, 60),\n(10913, 4, 30),\n(10913, 33, 40),\n(10913, 58, 15),\n(10914, 71, 25),\n(10915, 17, 10),\n(10915, 33, 30),\n(10915, 54, 10),\n(10916, 16, 6),\n(10916, 32, 6),\n(10916, 57, 20),\n(10917, 30, 1),\n(10917, 60, 10),\n(10918, 1, 60),\n(10918, 60, 25),\n(10919, 16, 24),\n(10919, 25, 24),\n(10919, 40, 20),\n(10920, 50, 24),\n(10921, 35, 10),\n(10921, 63, 40),\n(10922, 17, 15),\n(10922, 24, 35),\n(10923, 42, 10),\n(10923, 43, 10),\n(10923, 67, 24),\n(10924, 10, 20),\n(10924, 28, 30),\n(10924, 75, 6),\n(10925, 36, 25),\n(10925, 52, 12),\n(10926, 11, 2),\n(10926, 13, 10),\n(10926, 19, 7),\n(10926, 72, 10),\n(10927, 20, 5),\n(10927, 52, 5),\n(10927, 76, 20),\n(10928, 47, 5),\n(10928, 76, 5),\n(10929, 21, 60),\n(10929, 75, 49),\n(10929, 77, 15),\n(10930, 21, 36),\n(10930, 27, 25),\n(10930, 55, 25),\n(10930, 58, 30),\n(10931, 13, 42),\n(10931, 57, 30),\n(10932, 16, 30),\n(10932, 62, 14),\n(10932, 72, 16),\n(10932, 75, 20),\n(10933, 53, 2),\n(10933, 61, 30),\n(10934, 6, 20),\n(10935, 1, 21),\n(10935, 18, 4),\n(10935, 23, 8),\n(10936, 36, 30),\n(10937, 28, 8),\n(10937, 34, 20),\n(10938, 13, 20),\n(10938, 43, 24),\n(10938, 60, 49),\n(10938, 71, 35),\n(10939, 2, 10),\n(10939, 67, 40),\n(10940, 7, 8),\n(10940, 13, 20),\n(10941, 31, 44),\n(10941, 62, 30),\n(10941, 68, 80),\n(10941, 72, 50),\n(10942, 49, 28),\n(10943, 13, 15),\n(10943, 22, 21),\n(10943, 46, 15),\n(10944, 11, 5),\n(10944, 44, 18),\n(10944, 56, 18),\n(10945, 13, 20),\n(10945, 31, 10),\n(10946, 10, 25),\n(10946, 24, 25),\n(10946, 77, 40),\n(10947, 59, 4),\n(10948, 50, 9),\n(10948, 51, 40),\n(10948, 55, 4),\n(10949, 6, 12),\n(10949, 10, 30),\n(10949, 17, 6),\n(10949, 62, 60),\n(10950, 4, 5),\n(10951, 33, 15),\n(10951, 41, 6),\n(10951, 75, 50),\n(10952, 6, 16),\n(10952, 28, 2),\n(10953, 20, 50),\n(10953, 31, 50),\n(10954, 16, 28),\n(10954, 31, 25),\n(10954, 45, 30),\n(10954, 60, 24),\n(10955, 75, 12),\n(10956, 21, 12),\n(10956, 47, 14),\n(10956, 51, 8),\n(10957, 30, 30),\n(10957, 35, 40),\n(10957, 64, 8),\n(10958, 5, 20),\n(10958, 7, 6),\n(10958, 72, 5),\n(10959, 75, 20),\n(10960, 24, 10),\n(10960, 41, 24),\n(10961, 52, 6),\n(10961, 76, 60),\n(10962, 7, 45),\n(10962, 13, 77),\n(10962, 53, 20),\n(10962, 69, 9),\n(10962, 76, 44),\n(10963, 60, 2),\n(10964, 18, 6),\n(10964, 38, 5),\n(10964, 69, 10),\n(10965, 51, 16),\n(10966, 37, 8),\n(10966, 56, 12),\n(10966, 62, 12),\n(10967, 19, 12),\n(10967, 49, 40),\n(10968, 12, 30),\n(10968, 24, 30),\n(10968, 64, 4),\n(10969, 46, 9),\n(10970, 52, 40),\n(10971, 29, 14),\n(10972, 17, 6),\n(10972, 33, 7),\n(10973, 26, 5),\n(10973, 41, 6),\n(10973, 75, 10),\n(10974, 63, 10),\n(10975, 8, 16),\n(10975, 75, 10),\n(10976, 28, 20),\n(10977, 39, 30),\n(10977, 47, 30),\n(10977, 51, 10),\n(10977, 63, 20),\n(10978, 8, 20),\n(10978, 21, 40),\n(10978, 40, 10),\n(10978, 44, 6),\n(10979, 7, 18),\n(10979, 12, 20),\n(10979, 24, 80),\n(10979, 27, 30),\n(10979, 31, 24),\n(10979, 63, 35),\n(10980, 75, 40),\n(10981, 38, 60),\n(10982, 7, 20),\n(10982, 43, 9),\n(10983, 13, 84),\n(10983, 57, 15),\n(10984, 16, 55),\n(10984, 24, 20),\n(10984, 36, 40),\n(10985, 16, 36),\n(10985, 18, 8),\n(10985, 32, 35),\n(10986, 11, 30),\n(10986, 20, 15),\n(10986, 76, 10),\n(10986, 77, 15),\n(10987, 7, 60),\n(10987, 43, 6),\n(10987, 72, 20),\n(10988, 7, 60),\n(10988, 62, 40),\n(10989, 6, 40),\n(10989, 11, 15),\n(10989, 41, 4),\n(10990, 21, 65),\n(10990, 34, 60),\n(10990, 55, 65),\n(10990, 61, 66),\n(10991, 2, 50),\n(10991, 70, 20),\n(10991, 76, 90),\n(10992, 72, 2),\n(10993, 29, 50),\n(10993, 41, 35),\n(10994, 59, 18),\n(10995, 51, 20),\n(10995, 60, 4),\n(10996, 42, 40),\n(10997, 32, 50),\n(10997, 46, 20),\n(10997, 52, 20),\n(10998, 24, 12),\n(10998, 61, 7),\n(10998, 74, 20),\n(10998, 75, 30),\n(10999, 41, 20),\n(10999, 51, 15),\n(10999, 77, 21),\n(11000, 4, 25),\n(11000, 24, 30),\n(11000, 77, 30),\n(11001, 7, 60),\n(11001, 22, 25),\n(11001, 46, 25),\n(11001, 55, 6),\n(11002, 13, 56),\n(11002, 35, 15),\n(11002, 42, 24),\n(11002, 55, 40),\n(11003, 1, 4),\n(11003, 40, 10),\n(11003, 52, 10),\n(11004, 26, 6),\n(11004, 76, 6),\n(11005, 1, 2),\n(11005, 59, 10),\n(11006, 1, 8),\n(11006, 29, 2),\n(11007, 8, 30),\n(11007, 29, 10),\n(11007, 42, 14),\n(11008, 28, 70),\n(11008, 34, 90),\n(11008, 71, 21),\n(11009, 24, 12),\n(11009, 36, 18),\n(11009, 60, 9),\n(11010, 7, 20),\n(11010, 24, 10),\n(11011, 58, 40),\n(11011, 71, 20),\n(11012, 19, 50),\n(11012, 60, 36),\n(11012, 71, 60),\n(11013, 23, 10),\n(11013, 42, 4),\n(11013, 45, 20),\n(11013, 68, 2),\n(11014, 41, 28),\n(11015, 30, 15),\n(11015, 77, 18),\n(11016, 31, 15),\n(11016, 36, 16),\n(11017, 3, 25),\n(11017, 59, 110),\n(11017, 70, 30),\n(11018, 12, 20),\n(11018, 18, 10),\n(11018, 56, 5),\n(11019, 46, 3),\n(11019, 49, 2),\n(11020, 10, 24),\n(11021, 2, 11),\n(11021, 20, 15),\n(11021, 26, 63),\n(11021, 51, 44),\n(11021, 72, 35),\n(11022, 19, 35),\n(11022, 69, 30),\n(11023, 7, 4),\n(11023, 43, 30),\n(11024, 26, 12),\n(11024, 33, 30),\n(11024, 65, 21),\n(11024, 71, 50),\n(11025, 1, 10),\n(11025, 13, 20),\n(11026, 18, 8),\n(11026, 51, 10),\n(11027, 24, 30),\n(11027, 62, 21),\n(11028, 55, 35),\n(11028, 59, 24),\n(11029, 56, 20),\n(11029, 63, 12),\n(11030, 2, 100),\n(11030, 5, 70),\n(11030, 29, 60),\n(11030, 59, 100),\n(11031, 1, 45),\n(11031, 13, 80),\n(11031, 24, 21),\n(11031, 64, 20),\n(11031, 71, 16),\n(11032, 36, 35),\n(11032, 38, 25),\n(11032, 59, 30),\n(11033, 53, 70),\n(11033, 69, 36),\n(11034, 21, 15),\n(11034, 44, 12),\n(11034, 61, 6),\n(11035, 1, 10),\n(11035, 35, 60),\n(11035, 42, 30),\n(11035, 54, 10),\n(11036, 13, 7),\n(11036, 59, 30),\n(11037, 70, 4),\n(11038, 40, 5),\n(11038, 52, 2),\n(11038, 71, 30),\n(11039, 28, 20),\n(11039, 35, 24),\n(11039, 49, 60),\n(11039, 57, 28),\n(11040, 21, 20),\n(11041, 2, 30),\n(11041, 63, 30),\n(11042, 44, 15),\n(11042, 61, 4),\n(11043, 11, 10),\n(11044, 62, 12),\n(11045, 33, 15),\n(11045, 51, 24),\n(11046, 12, 20),\n(11046, 32, 15),\n(11046, 35, 18),\n(11047, 1, 25),\n(11047, 5, 30),\n(11048, 68, 42),\n(11049, 2, 10),\n(11049, 12, 4),\n(11050, 76, 50),\n(11051, 24, 10),\n(11052, 43, 30),\n(11052, 61, 10),\n(11053, 18, 35),\n(11053, 32, 20),\n(11053, 64, 25),\n(11054, 33, 10),\n(11054, 67, 20),\n(11055, 24, 15),\n(11055, 25, 15),\n(11055, 51, 20),\n(11055, 57, 20),\n(11056, 7, 40),\n(11056, 55, 35),\n(11056, 60, 50),\n(11057, 70, 3),\n(11058, 21, 3),\n(11058, 60, 21),\n(11058, 61, 4),\n(11059, 13, 30),\n(11059, 17, 12),\n(11059, 60, 35),\n(11060, 60, 4),\n(11060, 77, 10),\n(11061, 60, 15),\n(11062, 53, 10),\n(11062, 70, 12),\n(11063, 34, 30),\n(11063, 40, 40),\n(11063, 41, 30),\n(11064, 17, 77),\n(11064, 41, 12),\n(11064, 53, 25),\n(11064, 55, 4),\n(11064, 68, 55),\n(11065, 30, 4),\n(11065, 54, 20),\n(11066, 16, 3),\n(11066, 19, 42),\n(11066, 34, 35),\n(11067, 41, 9),\n(11068, 28, 8),\n(11068, 43, 36),\n(11068, 77, 28),\n(11069, 39, 20),\n(11070, 1, 40),\n(11070, 2, 20),\n(11070, 16, 30),\n(11070, 31, 20),\n(11071, 7, 15),\n(11071, 13, 10),\n(11072, 2, 8),\n(11072, 41, 40),\n(11072, 50, 22),\n(11072, 64, 130),\n(11073, 11, 10),\n(11073, 24, 20),\n(11074, 16, 14),\n(11075, 2, 10),\n(11075, 46, 30),\n(11075, 76, 2),\n(11076, 6, 20),\n(11076, 14, 20),\n(11076, 19, 10),\n(11077, 2, 24),\n(11077, 3, 4),\n(11077, 4, 1),\n(11077, 6, 1),\n(11077, 7, 1),\n(11077, 8, 2),\n(11077, 10, 1),\n(11077, 12, 2),\n(11077, 13, 4),\n(11077, 14, 1),\n(11077, 16, 2),\n(11077, 20, 1),\n(11077, 23, 2),\n(11077, 32, 1),\n(11077, 39, 2),\n(11077, 41, 3),\n(11077, 46, 3),\n(11077, 52, 2),\n(11077, 55, 2),\n(11077, 60, 2),\n(11077, 64, 2),\n(11077, 66, 1),\n(11077, 73, 2),\n(11077, 75, 4),\n(11077, 77, 2);",
        "INSERT 0 2155",
        "CREATE TABLE testproducts (\ntestproduct_id SERIAL NOT NULL PRIMARY KEY,\nproduct_name VARCHAR(255),\ncategory_id INT\n);",
        "INSERT INTO testproducts (product_name, category_id)\nVALUES\n('Johns Fruit Cake', 3),\n('Marys Healthy Mix', 9),\n('Peters Scary Stuff', 10),\n('Jims Secret Recipe', 11),\n('Elisabeths Best Apples', 12),\n('Janes Favorite Cheese', 4),\n('Billys Home Made Pizza', 13),\n('Ellas Special Salmon', 8),\n('Roberts Rich Spaghetti', 5),\n('Mias Popular Ice', 14);",
        "INSERT 0 10",
        "categories",
        "customers",
        "products",
        "orders",
        "order_details",
        "testproducts"
      ]
    },
    {
      "title": "PostgreSQL Operators",
      "summary": "Operators in the WHERE clause\nWe can operate with different operators in the WHERE clause:\nEqual To\nThe = operator is used when you want to return all records where a column is equal to a specified value:\nExample\nReturn all records where the brand is 'Volvo':\nLess Than\nThe < operator is used when you want to return all records where a column is less than a specified value.\nExample\nReturn all records where the year is less than 1975:\nGreater Than\nThe > operator is used when you want to return all records where a columns is greater than a specified value.\nExample\nReturn all records where the year is greater than 1975:\nLess Than or Equal To\nThe <= operator is used when you want to return all records where a column is less than, or equal to, a specified value.\nExample\nReturn all records where the year is less than or equal to 1975:\nGreater Than or Equal to\nThe >= operator is used when you want to return all records where a columns is greater than, or equal to, a specified value.\nExample\nReturn all records where the year is greater than or equal 1975:\nNot Equal To\nThe <> operator is used when you want to return all records where a column is NOT equal to a specified value:\nExample\nReturn all records where the brand is NOT 'Volvo':\nYou will get the same result with the != operator:\nExample\nReturn all records where the brand is NOT 'Volvo':\nLIKE\nThe LIKE operator is used when you want to return all records where a column is equal to a specified pattern.\nThe pattern can be an absolute value like 'Volvo', or with a wildcard that has a special meaning.\nThere are two wildcards often used in conjunction with the LIKE operator:\nThe percent sign %, represents zero, one, or multiple characters.\nThe underscore sign _, represents one single character.\nExample\nReturn all records where the model STARTS with a capital 'M':\nThe LIKE operator is case sensitive.\nILIKE\nSame as the LIKE operator, but ILIKE is case insensitive.\nExample\nReturn all records where the model start with a 'm':\nAND\nThe logical AND operator is used when you want to check more that one condition:\nExample\nReturn all records where the brand is 'Volvo' and the year is 1968:\nOR\nThe logical OR operator is used when you can accept that only one of many conditions is true:\nExample\nReturn all records where the brand is 'Volvo' OR the year is 1975:\nIN\nThe IN operator is used when a column's value matches any of the values in a list:\nExample\nReturn all records where the brand is present in this list: ('Volvo', 'Mercedes', 'Ford'):\nBETWEEN\nThe BETWEEN operator is used to check if a column's value is between a specified range of values:\nExample\nReturn all records where the year is between 1970 and 1980:\nThe BETWEEN operator includes the from and to values, meaning that in the above example, the result would include cars made in 1970 and 1980 as well.\nIS NULL\nThe IS NULL operator is used to check if a column's value is NULL:\nExample\nReturn all records where the model is NULL:\nNOT\nThe NOT operator can be used together with LIKE, ILIKE, IN, BETWEEN, and NULL operators to reverse the truth of the operator.\nExample: NOT LIKE\nReturn all records where the brand does NOT start with a capital 'B' (case sensitive):\nExample: NOT ILIKE\nReturn all records where the brand does NOT start with a 'b' (case insensitive):\nExample: NOT IN\nReturn all records where the brand is NOT present in this list: ('Volvo', 'Mercedes', 'Ford'):\nExample: NOT BETWEEN\nReturn all records where the year is NOT between 1970 and 1980:\nThe NOT BETWEEN operator excludes the from and to values, meaning that in the above example, the result would not include cars made in 1970 and 1980.\nExample: IS NOT NULL\nReturn all records where the model is NOT null:\nThe cars table has no columns with NULL values, so the example above will return all 4 rows.",
      "examples": [
        "SELECT * FROM cars\nWHERE brand = 'Volvo';",
        "SELECT * FROM cars\nWHERE year < 1975;",
        "SELECT * FROM cars\nWHERE year > 1975;",
        "SELECT * FROM cars\nWHERE year <= 1975;",
        "SELECT * FROM cars\nWHERE year >= 1975;",
        "SELECT * FROM cars\nWHERE brand <> 'Volvo';",
        "SELECT * FROM cars\nWHERE brand != 'Volvo';",
        "SELECT * FROM cars\nWHERE model LIKE 'M%';",
        "SELECT * FROM cars\nWHERE model ILIKE 'm%';",
        "SELECT * FROM cars\nWHERE brand = 'Volvo' AND year = 1968;",
        "SELECT * FROM cars\nWHERE brand = 'Volvo' OR year = 1975;",
        "SELECT * FROM cars\nWHERE brand IN ('Volvo', 'Mercedes', 'Ford');",
        "SELECT * FROM cars\nWHERE year BETWEEN 1970 AND 1980;",
        "SELECT * FROM cars\nWHERE model IS NULL;",
        "SELECT * FROM cars\nWHERE brand NOT LIKE 'B%';",
        "SELECT * FROM cars\nWHERE brand NOT ILIKE 'b%';",
        "SELECT * FROM cars\nWHERE brand NOT IN ('Volvo', 'Mercedes', 'Ford');",
        "SELECT * FROM cars\nWHERE year NOT BETWEEN 1970 AND 1980;",
        "SELECT * FROM cars\nWHERE model IS NOT NULL;",
        "WHERE",
        "=",
        "<",
        ">",
        "<=",
        ">=",
        "<>",
        "!=",
        "LIKE",
        "ILIKE",
        "AND",
        "OR",
        "IN",
        "BETWEEN",
        "IS NULL",
        "NOT",
        "NOT LIKE",
        "NOT IN",
        "NOT BETWEEN",
        "%",
        "_",
        "from",
        "to",
        "NULL",
        "cars"
      ]
    },
    {
      "title": "PostgreSQL Select Data",
      "summary": "Select Data\nTo retrieve data from a data base, we use the SELECT statement.\nSpecify Columns\nBy specifying the column names, we can choose which columns to select:\nExample\nReturn ALL Columns\nSpecify a * instead of the column names to select all columns:\nExample",
      "examples": [
        "SELECT customer_name, country FROM customers;",
        "SELECT * FROM customers;",
        "SELECT",
        "*"
      ]
    },
    {
      "title": "PostgreSQL SELECT DISTINCT",
      "summary": "The SELECT DISTINCT Statement\nThe SELECT DISTINCT statement is used to return only distinct (different) values.\nInside a table, a column often contains many duplicate values and sometimes you only want to list the different (distinct) values.\nExample\nSelect only the DISTINCT values from the country column in the customers table:\nEven though the customers table has 91 records, it only has 21 different countries, and that is what you get as a result when executing the SELECT DISTINCT statement above\nSELECT COUNT(DISTINCT)\nWe can also use the DISTINCT keyword in combination with the COUNT statement, which in the example below will return the number of different countries there are in the customers table.\nExample\nReturn the number of different countries there are in the customers table:",
      "examples": [
        "SELECT DISTINCT country FROM customers;",
        "SELECT COUNT(DISTINCT country) FROM customers;",
        "SELECT DISTINCT",
        "country",
        "customers",
        "DISTINCT",
        "COUNT"
      ]
    },
    {
      "title": "PostgreSQL WHERE - Filter Data",
      "summary": "Filter Records\nThe WHERE clause is used to filter records.\nIt is used to extract only those records that fulfill a specified condition.\nIf we want to return only the records where city is London, we can specify that in the WHERE clause:\nExample\nText Fields vs. Numeric Fields\nPostgreSQL requires quotes around text values.\nHowever, numeric fields should not be enclosed in quotes:\nExample\nQuotes around numeric fields will not fail, but it is good practice to always write numeric values without quotes.\nGreater than\nUse the > operator to return all records where customer_id is greater than 80:\nExample\nQuotes around numeric fields will not fail, but it is good practice to always write numeric values without quotes.",
      "examples": [
        "SELECT * FROM customers\nWHERE city = 'London';",
        "SELECT * FROM customers\nWHERE customer_id = 19;",
        "SELECT * FROM customers\nWHERE customer_id > 80;",
        "WHERE",
        "city",
        "London",
        ">",
        "customer_id"
      ]
    },
    {
      "title": "PostgreSQL ORDER BY",
      "summary": "Sort Data\nThe ORDER BY keyword is used to sort the result in ascending or descending order.\nThe ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.\nExample\nSort the table by price:\nDESC\nThe ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.\nExample\nSort the table by price, in descending order:\nSort Alphabetically\nFor string values the ORDER BY keyword will order alphabetically:\nExample\nSort the table by product name:\nAlphabetically DESC\nTo sort the table reverse alphabetically, use the DESC keyword:\nExample\nSort the table by product name, in descending order:",
      "examples": [
        "SELECT * FROM products\nORDER BY price;",
        "SELECT * FROM products\nORDER BY price DESC;",
        "SELECT * FROM products\nORDER BY product_name;",
        "SELECT * FROM products\nORDER BY product_name DESC;",
        "ORDER BY",
        "DESC"
      ]
    },
    {
      "title": "PostgreSQL LIMIT",
      "summary": "The LIMIT Clause\nThe LIMIT clause is used to limit the maximum number of records to return.\nExample\nReturn only the 20 first records from the customers table:\nThe OFFSET Clause\nThe OFFSET clause is used to specify where to start selecting the records to return.\nIf you want to return 20 records, but start at number 40, you can use both LIMIT and OFFSET.\nNote: The first record is number 0, so when you specify OFFSET 40 it means starting at record number 41.\nExample\nReturn 20 records, starting from the 41th record:",
      "examples": [
        "SELECT * FROM customers\nLIMIT 20;",
        "SELECT * FROM customers\nLIMIT 20 OFFSET 40;",
        "LIMIT",
        "customers",
        "OFFSET",
        "0",
        "OFFSET 40"
      ]
    },
    {
      "title": "PostgreSQL MIN and MAX Functions",
      "summary": "MIN\nThe MIN() function returns the smallest value of the selected column.\nExample\nReturn the lowest price in the products table:\nMAX\nThe MAX() function returns the largest value of the selected column.\nExample\nReturn the highest price in the products table:\nSet Column Name\nWhen you use MIN() or MAX(), the returned column will be named min or max by default. To give the column a new name, use the AS keyword.\nExample\nReturn the lowest price, and name the column lowest_price:",
      "examples": [
        "SELECT MIN(price)\nFROM products;",
        "SELECT MAX(price)\nFROM products;",
        "SELECT MIN(price) AS lowest_price\nFROM products;",
        "MIN()",
        "products",
        "MAX()",
        "min",
        "max",
        "AS",
        "lowest_price"
      ]
    },
    {
      "title": "PostgreSQL COUNT Function",
      "summary": "COUNT\nThe COUNT() function returns the number of rows that matches a specified criterion.\nIf the specified criterion is a column name, the COUNT() function returns the number of columns with that name.\nExample\nReturn the number of customers from the customers table:\nNote: NULL values are not counted.\nBy specifying a WHERE clause, you can e.g. return the number of customers that comes from London:\nExample\nReturn the number of customers from London:",
      "examples": [
        "SELECT COUNT(customer_id)\nFROM customers;",
        "SELECT COUNT(customer_id)\nFROM customers\nWHERE city = 'London';",
        "COUNT()",
        "customers",
        "WHERE"
      ]
    },
    {
      "title": "PostgreSQL SUM Function",
      "summary": "SUM\nThe SUM() function returns the total sum of a numeric column.\nThe following SQL statement finds the sum of the quantity fields in the order_details table:\nExample\nReturn the total amount of ordered items:\nNote: NULL values are ignored.",
      "examples": [
        "SELECT SUM(quantity)\nFROM order_details;",
        "SUM()",
        "quantity",
        "order_details"
      ]
    },
    {
      "title": "PostgreSQL AVG Function",
      "summary": "AVG\nThe AVG() function returns the average value of a numeric column.\nExample\nReturn the average price of all the products in the products table:\nNote: NULL values are ignored.\nWith 2 Decimals\nThe above example returned the average price of all products, the result was 28.8663636363636364.\nWe can use the ::NUMERIC operator to round the average price to a number with 2 decimals:\nExample\nReturn the average price of all the products, rounded to 2 decimals:",
      "examples": [
        "SELECT AVG(price)\nFROM products;",
        "SELECT AVG(price)::NUMERIC(10,2)\nFROM products;",
        "AVG()",
        "products",
        "28.8663636363636364",
        "::NUMERIC"
      ]
    },
    {
      "title": "PostgreSQL LIKE Operator",
      "summary": "LIKE\nThe LIKE operator is used in a WHERE clause to search for a specified pattern in a column.\nThere are two wildcards often used in conjunction with the LIKE operator:\n% The percent sign represents zero, one, or multiple characters\n_ The underscore sign represents one, single character\nStarts with\nTo return records that starts with a specific letter or phrase, add the % at the end of the letter or phrase.\nExample\nReturn all customers with a name that starts with the letter 'A':\nContains\nTo return records that contains a specific letter or phrase, add the % both before and after the letter or phrase.\nExample\nReturn all customers with a name that contains the letter 'A':\nILIKE\nNote: The LIKE operator is case sensitive, if you want to do a case insensitive search, use the ILIKE operator instead.\nExample\nReturn all customers with a name that contains the letter 'A' or 'a':\nEnds with\nTo return records that ends with a specific letter or phrase, add the % before the letter or phrase.\nExample\nReturn all customers with a name that ends with the phrase 'en':\nThe Undescore _ Wildcard\nThe _ wildcard represents a single character.\nIt can be any character or number, but each _ represents one, and only one, character.\nExample\nReturn all customers from a city that starts with 'L' followed by one wildcard character, then 'nd' and then two wildcard characters:",
      "examples": [
        "SELECT * FROM customers\nWHERE customer_name LIKE 'A%';",
        "SELECT * FROM customers\nWHERE customer_name LIKE '%A%';",
        "SELECT * FROM customers\nWHERE customer_name ILIKE '%A%';",
        "SELECT * FROM customers\nWHERE customer_name LIKE '%en';",
        "SELECT * FROM customers\nWHERE city LIKE 'L_nd__';",
        "LIKE",
        "WHERE",
        "%",
        "_",
        "ILIKE"
      ]
    },
    {
      "title": "PostgreSQL IN Operator",
      "summary": "IN\nThe IN operator allows you to specify a list of possible values in the WHERE clause.\nThe IN operator is a shorthand for multiple OR conditions.\nExample\nReturn all customers from 'Germany', France' or 'UK':\nNOT IN\nBy using the NOT keyword in front of the IN operator, you return all records that are NOT any of the values in the list.\nExample\nReturn all customers that are NOT from 'Germany', France' or 'UK':\nIN (SELECT)\nYou can also use a SELECT statement inside the parenthesis to return all records that are in the result of the SELECT statement.\nExample\nReturn all customers that have an order in the orders table:\nNOT IN (SELECT)\nThe result in the example above returned 89 records, that means that there are 2 customers that haven't placed any orders.\nLet us check if that is correct, by using the NOT IN operator.\nExample\nReturn all customers that have NOT placed any orders in the orders table:",
      "examples": [
        "SELECT * FROM customers\nWHERE country IN ('Germany', 'France', 'UK');",
        "SELECT * FROM customers\nWHERE country NOT IN ('Germany', 'France', 'UK');",
        "SELECT * FROM customers\nWHERE customer_id IN (SELECT customer_id FROM orders);",
        "SELECT * FROM customers\nWHERE customer_id NOT IN (SELECT customer_id FROM orders);",
        "IN",
        "OR",
        "NOT",
        "SELECT",
        "orders",
        "NOT IN"
      ]
    },
    {
      "title": "PostgreSQL BETWEEN Operator",
      "summary": "BETWEEN\nThe BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.\nThe BETWEEN operator is inclusive: begin and end values are included.\nExample\nSelect all products with a price between 10 and 15:\nBETWEEN Text Values\nThe BETWEEN operator can also be used on text values.\nThe result returns all records that are alphabetically between the specified values.\nExample\nSelect all products between 'Pavlova' and 'Tofu':\nIf we add an ORDER BY clause to the example above, it will be a bit easier to read:\nExample\nSame example as above, but we sort it by product_name:\nBETWEEN Date Values\nThe BETWEEN operator can also be used on date values.\nExample\nSelect all orders between 12. of April 2023 and 5. of May 2023:",
      "examples": [
        "SELECT * FROM Products\nWHERE Price BETWEEN 10 AND 15;",
        "SELECT * FROM Products\nWHERE product_name BETWEEN 'Pavlova' AND 'Tofu';",
        "SELECT * FROM Products\nWHERE product_name BETWEEN 'Pavlova' AND 'Tofu'\nORDER BY product_name;",
        "SELECT * FROM orders\nWHERE order_date BETWEEN '2023-04-12' AND '2023-05-05';",
        "BETWEEN",
        "ORDER BY",
        "product_name"
      ]
    },
    {
      "title": "PostgreSQL AS",
      "summary": "Aliases\nSQL aliases are used to give a table, or a column in a table, a temporary name.\nAliases are often used to make column names more readable.\nAn alias only exists for the duration of that query.\nAn alias is created with the AS keyword.\nExample\nUsing aliases for columns:\nAS is Optional\nActually, you can skip the AS keyword and get the same result:\nExample\nSame result without AS:\nConcatenate Columns\nThe AS keyword is often used when two or more fields are concatenated into one.\nTo concatenate two fields use ||.\nExample\nConcatenate two fields and call them product:\nNote: In the result of the example above we are missing a space between product_name and unit. To add a space when concatenating, use || ' ' ||.\nExample\nConcatenate, with space:\nUsing Aliases With a Space Character\nIf you want your alias to contain one or more spaces, like \"My Great Products\", surround your alias with double quotes.\nExample\nSurround your alias with double quotes:",
      "examples": [
        "SELECT customer_id AS id\nFROM customers;",
        "SELECT customer_id id\nFROM customers;",
        "SELECT product_name || unit AS product\nFROM products;",
        "SELECT product_name || ' ' || unit AS product\nFROM products;",
        "SELECT product_name AS \"My Great Products\"\nFROM products;",
        "AS",
        "||",
        "product",
        "|| ' ' ||",
        "My Great Products"
      ]
    },
    {
      "title": "PostgreSQL JOINS",
      "summary": "JOIN\nA JOIN clause is used to combine rows from two or more tables, based on a related column between them.\nLet's look at a selection from the products table:\nThen, look at a selection from the categories table:\nNotice that the category_id column in the products table refers to the category_id in the categories table. The relationship between the two tables above is the category_id column.\nThen, we can create the following SQL statement (with a JOIN), that selects records that have matching values in both tables:\nExample\nJoin products to categories using the category_id column:\nIf we pull out the same selection from products table above, we get this result:\nResult\nDifferent Types of Joins\nHere are the different types of the Joins in PostgreSQL:\nINNER JOIN: Returns records that have matching values in both tables\nLEFT JOIN: Returns all records from the left table, and the matched records from the right table\nRIGHT JOIN: Returns all records from the right table, and the matched records from the left table\nFULL JOIN: Returns all records when there is a match in either left or right table",
      "examples": [
        "product_id |  product_name  | category_id\n------------+----------------+-------------\n33 | Geitost        |           4\n34 | Sasquatch Ale  |           1\n35 | Steeleye Stout |           1\n36 | Inlagd Sill    |           8",
        "category_id | category_name\n-------------+----------------\n1 | Beverages\n2 | Condiments\n3 | Confections\n4 | Dairy Products",
        "SELECT product_id, product_name, category_name\nFROM products\nINNER JOIN categories ON products.category_id = categories.category_id;",
        "product_id |  product_name  | category_name\n------------+----------------+----------------\n33 | Geitost        | Dairy Products\n34 | Sasquatch Ale  | Beverages\n35 | Steeleye Stout | Beverages\n36 | Inlagd Sill    | Seafood",
        "JOIN",
        "products",
        "categories",
        "category_id",
        "INNER JOIN",
        "LEFT JOIN",
        "RIGHT JOIN",
        "FULL JOIN"
      ]
    },
    {
      "title": "PostgreSQL INNER JOIN",
      "summary": "INNER JOIN\nThe INNER JOIN keyword selects records that have matching values in both tables.\nLet's look at an example using our dummy testproducts table:\nWe will try to join the testproducts table with the categories table:\nNotice that many of the products in testproducts have a category_id that does not match any of the categories in the categories table.\nBy using INNER JOIN we will not get the records where there is not a match, we will only get the records that matches both tables:\nExample\nJoin testproducts to categories using the category_id column:\nResult\nOnly the records with a match in BOTH tables are returned:\nNote: JOIN and INNER JOIN will give the same result.\nINNER is the default join type for JOIN, so when you write JOIN the parser actually writes INNER JOIN.",
      "examples": [
        "testproduct_id |      product_name      | category_id\n----------------+------------------------+-------------\n1 | Johns Fruit Cake       |           3\n2 | Marys Healthy Mix      |           9\n3 | Peters Scary Stuff     |          10\n4 | Jims Secret Recipe     |          11\n5 | Elisabeths Best Apples |          12\n6 | Janes Favorite Cheese  |           4\n7 | Billys Home Made Pizza |          13\n8 | Ellas Special Salmon   |           8\n9 | Roberts Rich Spaghetti |           5\n10 | Mias Popular Ice        |          14\n(10 rows)",
        "category_id | category_name  |                       description\n-------------+----------------+------------------------------------------------------------\n1 | Beverages      | Soft drinks, coffees, teas, beers, and ales\n2 | Condiments     | Sweet and savory sauces, relishes, spreads, and seasonings\n3 | Confections    | Desserts, candies, and sweet breads\n4 | Dairy Products | Cheeses\n5 | Grains/Cereals | Breads, crackers, pasta, and cereal\n6 | Meat/Poultry   | Prepared meats\n7 | Produce        | Dried fruit and bean curd\n8 | Seafood        | Seaweed and fish\n(8 rows)",
        "SELECT testproduct_id, product_name, category_name\nFROM testproducts\nINNER JOIN categories ON testproducts.category_id = categories.category_id;",
        "testproduct_id |      product_name      | category_name\n----------------+------------------------+----------------\n1 | Johns Fruit Cake       | Confections\n6 | Janes Favorite Cheese  | Dairy Products\n8 | Ellas Special Salmon   | Seafood\n9 | Roberts Rich Spaghetti | Grains/Cereals\n(4 rows)",
        "INNER JOIN",
        "testproducts",
        "categories",
        "category_id",
        "JOIN",
        "INNER"
      ]
    },
    {
      "title": "PostgreSQL LEFT JOIN",
      "summary": "LEFT JOIN\nThe LEFT JOIN keyword selects ALL records from the \"left\" table, and the matching records from the \"right\" table. The result is 0 records from the right side if there is no match.\nLet's look at an example using our dummy testproducts table:\nWe will try to join the testproducts table with the categories table:\nNote: Many of the products in testproducts have a category_id that does not match any of the categories in the categories table.\nBy using LEFT JOIN we will get all records from testpoducts, even the ones with no match in the categories table:\nExample\nJoin testproducts to categories using the category_id column:\nResult\nAll records from testproducts, and only the matched records from categories:\nNote: LEFT JOIN and LEFT OUTER JOIN will give the same result.\nOUTER is the default join type for LEFT JOIN, so when you write LEFT JOIN the parser actually writes LEFT OUTER JOIN.",
      "examples": [
        "testproduct_id |      product_name      | category_id\n----------------+------------------------+-------------\n1 | Johns Fruit Cake       |           3\n2 | Marys Healthy Mix      |           9\n3 | Peters Scary Stuff     |          10\n4 | Jims Secret Recipe     |          11\n5 | Elisabeths Best Apples |          12\n6 | Janes Favorite Cheese  |           4\n7 | Billys Home Made Pizza |          13\n8 | Ellas Special Salmon   |           8\n9 | Roberts Rich Spaghetti |           5\n10 | Mias Popular Ice        |          14\n(10 rows)",
        "category_id | category_name  |                       description\n-------------+----------------+------------------------------------------------------------\n1 | Beverages      | Soft drinks, coffees, teas, beers, and ales\n2 | Condiments     | Sweet and savory sauces, relishes, spreads, and seasonings\n3 | Confections    | Desserts, candies, and sweet breads\n4 | Dairy Products | Cheeses\n5 | Grains/Cereals | Breads, crackers, pasta, and cereal\n6 | Meat/Poultry   | Prepared meats\n7 | Produce        | Dried fruit and bean curd\n8 | Seafood        | Seaweed and fish\n(8 rows)",
        "SELECT testproduct_id, product_name, category_name\nFROM testproducts\nLEFT JOIN categories ON testproducts.category_id = categories.category_id;",
        "testproduct_id |      product_name      | category_name\n----------------+------------------------+----------------\n1 | Johns Fruit Cake       | Confections\n2 | Marys Healthy Mix      |\n3 | Peters Scary Stuff     |\n4 | Jims Secret Recipe     |\n5 | Elisabeths Best Apples |\n6 | Janes Favorite Cheese  | Dairy Products\n7 | Billys Home Made Pizza |\n8 | Ellas Special Salmon   | Seafood\n9 | Roberts Rich Spaghetti | Grains/Cereals\n10 | Mias Popular Ice       |\n(10 rows)",
        "LEFT JOIN",
        "testproducts",
        "categories",
        "category_id",
        "testpoducts",
        "LEFT OUTER JOIN",
        "OUTER"
      ]
    },
    {
      "title": "PostgreSQL RIGHT JOIN",
      "summary": "RIGHT JOIN\nThe RIGHT JOIN keyword selects ALL records from the \"right\" table, and the matching records from the \"left\" table. The result is 0 records from the left side if there is no match.\nLet's look at an example using our dummy testproducts table:\nWe will try to join the testproducts table with the categories table:\nNote: Many of the products in testproducts have a category_id that does not match any of the categories in the categories table.\nBy using RIGHT JOIN we will get all records from categories, even the ones with no match in the testproducts table:\nExample\nJoin testproducts to categories using the category_id column:\nResult\nAll records from categories, and only the matched records from testproducts:\nNote: RIGHT JOIN and RIGHT OUTER JOIN will give the same result.\nOUTER is the default join type for RIGHT JOIN, so when you write RIGHT JOIN the parser actually writes RIGHT OUTER JOIN.",
      "examples": [
        "testproduct_id |      product_name      | category_id\n----------------+------------------------+-------------\n1 | Johns Fruit Cake       |           3\n2 | Marys Healthy Mix      |           9\n3 | Peters Scary Stuff     |          10\n4 | Jims Secret Recipe     |          11\n5 | Elisabeths Best Apples |          12\n6 | Janes Favorite Cheese  |           4\n7 | Billys Home Made Pizza |          13\n8 | Ellas Special Salmon   |           8\n9 | Roberts Rich Spaghetti |           5\n10 | Mias Popular Ice       |          14\n(10 rows)",
        "category_id | category_name  |                       description\n-------------+----------------+------------------------------------------------------------\n1 | Beverages      | Soft drinks, coffees, teas, beers, and ales\n2 | Condiments     | Sweet and savory sauces, relishes, spreads, and seasonings\n3 | Confections    | Desserts, candies, and sweet breads\n4 | Dairy Products | Cheeses\n5 | Grains/Cereals | Breads, crackers, pasta, and cereal\n6 | Meat/Poultry   | Prepared meats\n7 | Produce        | Dried fruit and bean curd\n8 | Seafood        | Seaweed and fish\n(8 rows)",
        "SELECT testproduct_id, product_name, category_name\nFROM testproducts\nRIGHT JOIN categories ON testproducts.category_id = categories.category_id;",
        "testproduct_id |      product_name      | category_name\n----------------+------------------------+----------------\n1 | Johns Fruit Cake       | Confections\n6 | Janes Favorite Cheese  | Dairy Products\n8 | Ellas Special Salmon   | Seafood\n9 | Roberts Rich Spaghetti | Grains/Cereals\n|                        | Condiments\n|                        | Meat/Poultry\n|                        | Beverages\n|                        | Produce\n(8 rows)",
        "RIGHT JOIN",
        "testproducts",
        "categories",
        "category_id",
        "RIGHT OUTER JOIN",
        "OUTER"
      ]
    },
    {
      "title": "PostgreSQL FULL JOIN",
      "summary": "FULL JOIN\nThe FULL JOIN keyword selects ALL records from both tables, even if there is not a match. For rows with a match the values from both tables are available, if there is not a match the empty fields will get the value NULL.\nLet's look at an example using our dummy testproducts table:\nWe will try to join the testproducts table with the categories table:\nNote: Many of the products in testproducts have a category_id that does not match any of the categories in the categories table.\nBy using FULL JOIN we will get all records from both the categories table and the testproducts table:\nExample\nJoin testproducts to categories using the category_id column:\nResult\nAll records from both tables are returned.\nRows with no match will get a NULL value in fields from the opposite table:\nNote: FULL JOIN and FULL OUTER JOIN will give the same result.\nOUTER is the default join type for FULL JOIN, so when you write FULL JOIN the parser actually writes FULL OUTER JOIN.",
      "examples": [
        "testproduct_id |      product_name      | category_id\n----------------+------------------------+-------------\n1 | Johns Fruit Cake       |           3\n2 | Marys Healthy Mix      |           9\n3 | Peters Scary Stuff     |          10\n4 | Jims Secret Recipe     |          11\n5 | Elisabeths Best Apples |          12\n6 | Janes Favorite Cheese  |           4\n7 | Billys Home Made Pizza |          13\n8 | Ellas Special Salmon   |           8\n9 | Roberts Rich Spaghetti |           5\n10 | Mias Popular Ice       |          14\n(10 rows)",
        "category_id | category_name  |                       description\n-------------+----------------+------------------------------------------------------------\n1 | Beverages      | Soft drinks, coffees, teas, beers, and ales\n2 | Condiments     | Sweet and savory sauces, relishes, spreads, and seasonings\n3 | Confections    | Desserts, candies, and sweet breads\n4 | Dairy Products | Cheeses\n5 | Grains/Cereals | Breads, crackers, pasta, and cereal\n6 | Meat/Poultry   | Prepared meats\n7 | Produce        | Dried fruit and bean curd\n8 | Seafood        | Seaweed and fish\n(8 rows)",
        "SELECT testproduct_id, product_name, category_name\nFROM testproducts\nFULL JOIN categories ON testproducts.category_id = categories.category_id;",
        "testproduct_id |      product_name       | category_name\n----------------+-------------------------+----------------\n1 | Johns Fruit Cake        | Confections\n2 | Marys Healthy Mix       |\n3 | Peters Scary Stuff      |\n4 | Jims Secret Recipe      |\n5 | Elisabeths Best Apples  |\n6 | Janes Favorite Cheese   | Dairy Products\n7 | Billys Home Made Pizza  |\n8 | Ellas Special Salmon    | Seafood\n9 | Roberts Rich Spaghetti  | Grains/Cereals\n10 | Mias Popular Ice        |\n|                         | Condiments\n|                         | Meat/Poultry\n|                         | Beverages\n|                         | Produce\n(14 rows)",
        "FULL JOIN",
        "NULL",
        "testproducts",
        "categories",
        "category_id",
        "FULL OUTER JOIN",
        "OUTER"
      ]
    },
    {
      "title": "PostgreSQL CROSS JOIN",
      "summary": "CROSS JOIN\nThe CROSS JOIN keyword matches ALL records from the \"left\" table with EACH record from the \"right\" table.\nThat means that all records from the \"right\" table will be returned for each record in the \"left\" table.\nThis way of joining can potentially return very large table, and you should not use it if you do not have to.\nLet's look at an example using our dummy testproducts table:\nWe will try to join the testproducts table with the categories table:\nNote: The CROSS JOIN method will return ALL categories for EACH testproduct, meaning that it will return 80 rows (10 * 8).\nExample\nJoin testproducts to categories using the CROSS JOIN keyword:\nResult\nAll categories for each testproduct will be returned:",
      "examples": [
        "testproduct_id |      product_name      | category_id\n----------------+------------------------+-------------\n1 | Johns Fruit Cake       |           3\n2 | Marys Healthy Mix      |           9\n3 | Peters Scary Stuff     |          10\n4 | Jims Secret Recipe     |          11\n5 | Elisabeths Best Apples |          12\n6 | Janes Favorite Cheese  |           4\n7 | Billys Home Made Pizza |          13\n8 | Ellas Special Salmon   |           8\n9 | Roberts Rich Spaghetti |           5\n10 | Mias Popular Ice       |          14\n(10 rows)",
        "category_id | category_name  |                       description\n-------------+----------------+------------------------------------------------------------\n1 | Beverages      | Soft drinks, coffees, teas, beers, and ales\n2 | Condiments     | Sweet and savory sauces, relishes, spreads, and seasonings\n3 | Confections    | Desserts, candies, and sweet breads\n4 | Dairy Products | Cheeses\n5 | Grains/Cereals | Breads, crackers, pasta, and cereal\n6 | Meat/Poultry   | Prepared meats\n7 | Produce        | Dried fruit and bean curd\n8 | Seafood        | Seaweed and fish\n(8 rows)",
        "SELECT testproduct_id, product_name, category_name\nFROM testproducts\nCROSS JOIN categories;",
        "testproduct_id |      product_name      | category_name\n----------------+------------------------+----------------\n1 | Johns Fruit Cake       | Beverages\n1 | Johns Fruit Cake       | Condiments\n1 | Johns Fruit Cake       | Confections\n1 | Johns Fruit Cake       | Dairy Products\n1 | Johns Fruit Cake       | Grains/Cereals\n1 | Johns Fruit Cake       | Meat/Poultry\n1 | Johns Fruit Cake       | Produce\n1 | Johns Fruit Cake       | Seafood\n2 | Marys Healthy Mix      | Beverages\n2 | Marys Healthy Mix      | Condiments\n2 | Marys Healthy Mix      | Confections\n2 | Marys Healthy Mix      | Dairy Products\n2 | Marys Healthy Mix      | Grains/Cereals\n2 | Marys Healthy Mix      | Meat/Poultry\n2 | Marys Healthy Mix      | Produce\n2 | Marys Healthy Mix      | Seafood\n3 | Peters Scary Stuff     | Beverages\n3 | Peters Scary Stuff     | Condiments\n3 | Peters Scary Stuff     | Confections\n3 | Peters Scary Stuff     | Dairy Products\n3 | Peters Scary Stuff     | Grains/Cereals\n3 | Peters Scary Stuff     | Meat/Poultry\n3 | Peters Scary Stuff     | Produce\n3 | Peters Scary Stuff     | Seafood\n4 | Jims Secret Recipe     | Beverages\n4 | Jims Secret Recipe     | Condiments\n4 | Jims Secret Recipe     | Confections\n4 | Jims Secret Recipe     | Dairy Products\n4 | Jims Secret Recipe     | Grains/Cereals\n4 | Jims Secret Recipe     | Meat/Poultry\n4 | Jims Secret Recipe     | Produce\n4 | Jims Secret Recipe     | Seafood\n5 | Elisabeths Best Apples | Beverages\n5 | Elisabeths Best Apples | Condiments\n5 | Elisabeths Best Apples | Confections\n5 | Elisabeths Best Apples | Dairy Products\n5 | Elisabeths Best Apples | Grains/Cereals\n5 | Elisabeths Best Apples | Meat/Poultry\n5 | Elisabeths Best Apples | Produce\n5 | Elisabeths Best Apples | Seafood\n6 | Janes Favorite Cheese  | Beverages\n6 | Janes Favorite Cheese  | Condiments\n6 | Janes Favorite Cheese  | Confections\n6 | Janes Favorite Cheese  | Dairy Products\n6 | Janes Favorite Cheese  | Grains/Cereals\n6 | Janes Favorite Cheese  | Meat/Poultry\n6 | Janes Favorite Cheese  | Produce\n6 | Janes Favorite Cheese  | Seafood\n7 | Billys Home Made Pizza | Beverages\n7 | Billys Home Made Pizza | Condiments\n7 | Billys Home Made Pizza | Confections\n7 | Billys Home Made Pizza | Dairy Products\n7 | Billys Home Made Pizza | Grains/Cereals\n7 | Billys Home Made Pizza | Meat/Poultry\n7 | Billys Home Made Pizza | Produce\n7 | Billys Home Made Pizza | Seafood\n8 | Ellas Special Salmon   | Beverages\n8 | Ellas Special Salmon   | Condiments\n8 | Ellas Special Salmon   | Confections\n8 | Ellas Special Salmon   | Dairy Products\n8 | Ellas Special Salmon   | Grains/Cereals\n8 | Ellas Special Salmon   | Meat/Poultry\n8 | Ellas Special Salmon   | Produce\n8 | Ellas Special Salmon   | Seafood\n9 | Roberts Rich Spaghetti | Beverages\n9 | Roberts Rich Spaghetti | Condiments\n9 | Roberts Rich Spaghetti | Confections\n9 | Roberts Rich Spaghetti | Dairy Products\n9 | Roberts Rich Spaghetti | Grains/Cereals\n9 | Roberts Rich Spaghetti | Meat/Poultry\n9 | Roberts Rich Spaghetti | Produce\n9 | Roberts Rich Spaghetti | Seafood\n10 | Mias Popular Ice       | Beverages\n10 | Mias Popular Ice       | Condiments\n10 | Mias Popular Ice       | Confections\n10 | Mias Popular Ice       | Dairy Products\n10 | Mias Popular Ice       | Grains/Cereals\n10 | Mias Popular Ice       | Meat/Poultry\n10 | Mias Popular Ice       | Produce\n10 | Mias Popular Ice       | Seafood\n(80 rows)",
        "CROSS JOIN",
        "testproducts",
        "categories",
        "testproduct"
      ]
    },
    {
      "title": "PostgreSQL UNION Operator",
      "summary": "UNION\nThe UNION operator is used to combine the result-set of two or more queries.\nThe queries in the union must follow these rules:\nThey must have the same number of columns\nThe columns must have the same data types\nThe columns must be in the same order\nExample\nCombine products and testproducts using the UNION operator:\nUNION vs UNION ALL\nWith the UNION operator, if some rows in the two queries returns the exact same result, only one row will be listed, because UNION selects only distinct values.\nUse UNION ALL to return duplicate values.\nLet's make some changes to the queries, so that we have duplicate values in the result:\nExample - UNION\nExample - UNION ALL",
      "examples": [
        "SELECT product_id, product_name\nFROM products\nUNION\nSELECT testproduct_id, product_name\nFROM testproducts\nORDER BY product_id;",
        "SELECT product_id\nFROM products\nUNION\nSELECT testproduct_id\nFROM testproducts\nORDER BY product_id;",
        "SELECT product_id\nFROM products\nUNION ALL\nSELECT testproduct_id\nFROM testproducts\nORDER BY product_id;",
        "UNION",
        "products",
        "testproducts",
        "UNION ALL"
      ]
    },
    {
      "title": "PostgreSQL GROUP BY Clause",
      "summary": "GROUP BY\nThe GROUP BY clause groups rows that have the same values into summary rows, like \"find the number of customers in each country\".\nThe GROUP BY clause is often used with aggregate functions like COUNT(), MAX(), MIN(), SUM(), AVG() to group the result-set by one or more columns.\nExample\nLists the number of customers in each country:\nGROUP BY With JOIN\nThe following SQL statement lists the number of orders made by each customer:\nExample",
      "examples": [
        "SELECT COUNT(customer_id), country\nFROM customers\nGROUP BY country;",
        "SELECT customers.customer_name, COUNT(orders.order_id)\nFROM orders\nLEFT JOIN customers ON orders.customer_id = customers.customer_id\nGROUP BY customer_name;",
        "GROUP BY",
        "COUNT()",
        "MAX()",
        "MIN()",
        "SUM()",
        "AVG()"
      ]
    },
    {
      "title": "PostgreSQL HAVING Clause",
      "summary": "HAVING\nThe HAVING clause was added to SQL because the WHERE clause cannot be used with aggregate functions.\nAggregate functions are often used with GROUP BY clauses, and by adding HAVING we can write condition like we do with WHERE clauses.\nExample\nList only countries that are represented more than 5 times:\nMore HAVING Examples\nThe following SQL statement lists only orders with a total price of 400$ or more:\nExample\nLists customers that have ordered for 1000$ or more:\nExample",
      "examples": [
        "SELECT COUNT(customer_id), country\nFROM customers\nGROUP BY country\nHAVING COUNT(customer_id) > 5;",
        "SELECT order_details.order_id, SUM(products.price)\nFROM order_details\nLEFT JOIN products ON order_details.product_id = products.product_id\nGROUP BY order_id\nHAVING SUM(products.price) > 400.00;",
        "SELECT customers.customer_name, SUM(products.price)\nFROM order_details\nLEFT JOIN products ON order_details.product_id = products.product_id\nLEFT JOIN orders ON order_details.order_id = orders.order_id\nLEFT JOIN customers ON orders.customer_id = customers.customer_id\nGROUP BY customer_name\nHAVING SUM(products.price) > 1000.00;",
        "HAVING",
        "WHERE",
        "GROUP BY"
      ]
    },
    {
      "title": "PostgreSQL EXISTS Operator",
      "summary": "EXISTS\nThe EXISTS operator is used to test for the existence of any record in a sub query.\nThe EXISTS operator returns TRUE if the sub query returns one or more records.\nExample\nReturn all customers that is represented in the orders table:\nThe result in example above showed that 89 customers had at least one order in the orders table.\nNOT EXISTS\nTo check which customers that do not have any orders, we can use the NOT operator together with the EXISTS operator :\nExample\nReturn all customers that is NOT represented in the orders table:",
      "examples": [
        "SELECT customers.customer_name\nFROM customers\nWHERE EXISTS (\nSELECT order_id\nFROM orders\nWHERE customer_id = customers.customer_id\n);",
        "SELECT customers.customer_name\nFROM customers\nWHERE NOT EXISTS (\nSELECT order_id\nFROM orders\nWHERE customer_id = customers.customer_id\n);",
        "EXISTS",
        "orders",
        "NOT"
      ]
    },
    {
      "title": "PostgreSQL ANY Operator",
      "summary": "ANY\nThe ANY operator allows you to perform a comparison between a single column value and a range of other values.\nThe ANY operator:\nreturns a Boolean value as a result\nreturns TRUE if ANY of the sub query values meet the condition\nANY means that the condition will be true if the operation is true for any of the values in the range.\nExample\nList products that have ANY records in the order_details table with a quantity larger than 120:",
      "examples": [
        "SELECT product_name\nFROM products\nWHERE product_id = ANY (\nSELECT product_id\nFROM order_details\nWHERE quantity > 120\n);",
        "ANY",
        "order_details"
      ]
    },
    {
      "title": "PostgreSQL ALL Operator",
      "summary": "ALL\nThe ALL operator:\nreturns a Boolean value as a result\nreturns TRUE if ALL of the sub query values meet the condition\nis used with SELECT, WHERE and HAVING statements\nALL means that the condition will be true only if the operation is true for all values in the range.\nExample\nList the products if ALL the records in the order_details with quantity larger than 10.\nNote: This will of course return FALSE because the quantity column has many different values (not only the value of 10):",
      "examples": [
        "SELECT product_name\nFROM products\nWHERE product_id = ALL (\nSELECT product_id\nFROM order_details\nWHERE quantity > 10\n);",
        "ALL",
        "SELECT",
        "WHERE",
        "HAVING"
      ]
    },
    {
      "title": "PostgreSQL CASE Expression",
      "summary": "CASE\nThe CASE expression goes through conditions and returns a value when the first condition is met (like an if-then-else statement).\nOnce a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the ELSE clause.\nIf there is no ELSE part and no conditions are true, it returns NULL.\nExample\nReturn specific values if the price meets a specific condition:\nWith an Alias\nWhen a column name is not specified for the \"case\" field, the parser uses case as the column name.\nTo specify a column name, add an alias after the END keyword.\nExample\nSame example, but with an alias for the case column::\nYou can read more about aliases in our PostgreSQL AS chapter.",
      "examples": [
        "SELECT product_name,\nCASE\nWHEN price < 10 THEN 'Low price product'\nWHEN price > 50 THEN 'High price product'\nELSE\n'Normal product'\nEND\nFROM products;",
        "SELECT product_name,\nCASE\nWHEN price < 10 THEN 'Low price product'\nWHEN price > 50 THEN 'High price product'\nELSE\n'Normal product'\nEND AS \"price category\"\nFROM products;",
        "CASE",
        "ELSE",
        "case",
        "END"
      ]
    },
    {
      "title": "PostgreSQL Exercises",
      "summary": "Exercises\nTest your PostgreSQL skills with exercises from all categories:\nCreate table\nInsert Data\nSelect Data\nAdd Column\nUpdate Data\nALTER COLUMN\nDROP COLUMN\nDELETE\nDROP TABLE\nOPERATORS\nSELECT\nSELECT DISTINCT\nWHERE\nORDER BY\nLIMIT\nMIN and MAX\nCOUNT\nSUM\nAVG\nLIKE\nIN\nBETWEEN\nAS\nJoins\nINNER JOIN\nLEFT JOIN\nRIGHT JOIN\nFULL JOIN\nCROSS JOIN\nUNION\nGROUP BY\nHAVING\nEXISTS\nANY\nALL\nCASE\nLog in to track your progress\nIf you haven't already, sign up to become a W3Schooler, and get points for every exercise you complete.\nAs a logged on W3Schools user you will have access to many features like having your own web page, track your learning progress, receive personal guided paths, and more.\nThe Exercise\nThe exercises are a mix of \"multiple choice\" and \"fill in the blanks\" questions. There are between 3 and 9 questions in each category. The answer can be found in the corresponding tutorial chapter. If you're stuck, or answer wrong, you can try again or hit the \"Show Answer\" button to see the correct answer.\nIf you don't know PostgreSQL, we suggest that you read our PostgreSQL Tutorial from scratch.",
      "examples": []
    },
    {
      "title": "PostgreSQL Quiz",
      "summary": "You can test your PostgreSQL skills with W3Schools' Quiz.\nThe Test\nThe test contains 25 questions and there is no time limit.\nThe test is not official, it's just a nice way to see how much you know about PostgreSQL.\nCount Your Score\nYou will get 1 point for each correct answer. At the end of the Quiz, your total score will be displayed. Maximum score is 25 points.\nStart the Quiz\nGood luck!\nStart the PostgreSQL Quiz ❯\nIf you do not know PostgreSQL, we suggest that you read our PostgreSQL utorial from scratch.",
      "examples": []
    },
    {
      "title": "PostgreSQL Syllabus",
      "summary": "Introduction\nThe W3Schools PostgreSQL Tutorial is comprehensive and beginner-friendly.\nIt will give you a fundamental knowledge of PostgreSQL database management.\nIt is designed for beginners and requires only basic SQL knowledge.\nThe content has been carefully made to be bite-sized, simple, and easy to understand.\nThe content has been proven by millions of users over the years. It is updated and improved frequently.\nThe syllabus outline and its sequence are structured so you can learn PostgreSQL step by step, from the introduction to advanced database management.\nGet Started With PostgreSQL »\nLearning Outcomes\nUnderstand the basic concepts of PostgreSQL databases.\nCreate and manage PostgreSQL databases and tables.\nWrite and optimize SQL queries for PostgreSQL.\nWork with PostgreSQL data types and functions.\nImplement database constraints and relationships.\nHandle database administration tasks.\nNote: Are you a teacher teaching PostgreSQL? W3Schools Academy is a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more about Academy here.\nWhich Subjects Are PostgreSQL Relevant For?\nDatabase Management:\nPostgreSQL can be usedfor managing relational databases.\nWeb Development:\nPostgreSQL is widely used in web applications.\nData Analysis:\nPostgreSQL supports data analysis tasks.\nEnterprise Applications:\nPostgreSQL is suitable for large-scale enterprise systems.\nGIS Applications:\nPostgreSQL has strong support for geographic data.\nData Warehousing:\nPostgreSQL handles large data warehouses efficiently.\nApplication Development:\nPostgreSQL integrates well with various programming languages.\nGet Started\nActivities\nIn this tutorial we offer different activities for you to learn PostgreSQL for free:\nLessons\nExercises\nQuizzes\nSign in to Track Progress\nYou can also create a free account to track your progress.\nAs a signed-in user, you get access to features such as:\nLearning paths\nSandbox and lab environments\nAchievements\nAnd much more!\nSign Up - It's free\nOverview of the Modules\nPostgreSQL Home\nPostgreSQL Intro\nPostgreSQL Install\nPostgreSQL Get Started\nPostgreSQL pgAdmin 4\nPostgreSQL CREATE TABLE\nPostgreSQL INSERT INTO\nPostgreSQL Fetch Data\nPostgreSQL ADD COLUMN\nPostgreSQL UPDATE\nPostgreSQL ALTER COLUMN\nPostgreSQL DROP COLUMN\nPostgreSQL DELETE\nPostgreSQL DROP TABLE\nCreate Demo Database\nPostgreSQL Operators\nPostgreSQL SELECT\nPostgreSQL SELECT DISTINCT\nPostgreSQL WHERE\nPostgreSQL ORDER BY\nPostgreSQL LIMIT\nPostgreSQL MIN and MAX\nPostgreSQL COUNT\nPostgreSQL SUM\nPostgreSQL AVG\nPostgreSQL LIKE\nPostgreSQL IN\nPostgreSQL BETWEEN\nPostgreSQL AS\nPostgreSQL Joins\nPostgreSQL INNER JOIN\nPostgreSQL LEFT JOIN\nPostgreSQL RIGHT JOIN\nPostgreSQL FULL JOIN\nPostgreSQL CROSS JOIN\nPostgreSQL UNION\nPostgreSQL GROUP BY\nPostgreSQL HAVING\nPostgreSQL EXISTS\nPostgreSQL ANY\nPostgreSQL ALL\nPostgreSQL CASE\nGet Started\nSandbox and Lab Environment\nPostgreSQL, like any database system, is best learned through hands-on practice.\nTry this example using our editor:\nExample\nSort the table by year:\nIf you want to explore more and host your project, we have a feature called Spaces that allows you to build, test and run websites.\nHere you get a secure sandbox environment called Spaces, where you can practice coding and test projects in real-time.\nThis includes a W3Schools subdomain, hosting, and secure SSL certificates.\nPostgreSQL is not hosted on W3Schools Spaces; you need to set it up on a platform like Supabase or Heroku and connect your application to it.\nSpaces require no installation and run directly in the browser.\nFeatures include:\nCollaboration\nFile navigator\nTerminal & log\nPackage manager\nDatabase\nEnvironment manager\nAnalytics\nCreate a Spaces Account\nPostgreSQL Certification\nW3Schools offers an end-of-pathway certification program.\nHere you can take exams to get certified.\nThe PostgreSQL exam is a test that summarizes the W3Schools PostgreSQL syllabus.\nAfter passing the exam you get the \"Certified PostgreSQL Developer\" Certification.\nThe certification exam is adaptive and graded; students will get a grade from intermediate, advanced to professional.\nBuy Certificate »\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach PostgreSQL?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo »",
      "examples": [
        "SELECT * FROM cars\nORDER BY year;"
      ]
    },
    {
      "title": "PostgreSQL Study Plan",
      "summary": "Introduction\nThe PostgreSQL study plan helps you teach your students PostgreSQL step-by-step.\nCreating a study plan for PostgreSQL is easy.\nYou can use a pre-built study plan or customize it.\nStudents have different skill levels. The study plans can be customized to ensure that everyone is challenged.\nSave time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of PostgreSQL to the final exam.\nW3Schools Academy\nThis study plan is a feature of W3Schools Academy.\nW3Schools Academy is a platform that has everything you need to teach coding, all in one place.\nIt offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom.\nYou need to have an active subscription to access the study plan feature. There are two different subscription tiers:\nEssentials ($1.99 / month per student)\nFull Access ($5.99 / month per student)\nCalculate your price and order here.\nLearn More »\nAcademy also offer other features such as:\nManaging your classroom\nTracking of student progress and reports\nLabs, assignments, and code challenges (prebuilt challenges or create your own ones)\nAuto-grading\nTeaching materials\nCertification exams\nGet a free demo »\nTeacher Materials\nW3Schools has everything you need to teach PostgreSQL.\nThe PostgreSQL training materials is available for you to include and use in your study plan:\nW3Schools PostgreSQL Tutorial\nPostgreSQL Exercises\nPostgreSQL Quiz\nPostgreSQL Challenges (Coding challenges)\nPostgreSQL Certification Exam (End of Pathway Exam)\nPostgreSQL Syllabus\nWith the PostgreSQL Syllabus, your students will start with the basics, like understanding databases and writing simple SQL queries, and move to more advanced topics, like working with joins, managing data, and using functions. Each chapter includes simple examples, try-it-yourself sections, exercises, and quizzes to make learning easy, interactive, and fun.\nRead more about PostgreSQL Syllabus.\nStudy Plan Overview\nThe study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level.\nLearning Paths\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nInteractive Content\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTimeline and Pace\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nTrack Student Progress\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nEnd of Pathway Exam\nThe PostgreSQL study plan aligns with the PostgreSQL Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the PostgreSQL Tutorial.\nYou get reports of the students' results.\nThe PostgreSQL study plan aligns with the PostgreSQL Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the PostgreSQL Tutorial.\nYou get reports of the students' results.\nAccessibility\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nLearn More »\nSample Study Plan\nYou choose the timeline and pace of your study plans.\nSchools have different preferences.\nSome would like more intensive pace, e.g. 3 weeks, others 12 or more weeks.\nIt is completely up to you.\nFor example, this is how a 3-week PostgreSQL study plan could look like:\nWeek 1: Basic Database Management\nWeek 2: Database operations\nWeek 3: Querying data, PostgreSQL Certification Exam\nImage of Sample PostgreSQL study plan:\nReady to get started?\nStart with PostgreSQL Study Plans today.\nGet Started »\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach PostgreSQL programming?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo »",
      "examples": []
    },
    {
      "title": "W3Schools PostgreSQL Certificate",
      "summary": "W3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nW3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nWho Should Consider Getting Certified?\nAny student or professional within the digital industry.\nCertifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market.\nW3Schools is Trusted by Top Companies\nW3Schools has over two decades of experience with teaching coding online.\nOur certificates are recognized and valued by companies looking to employ skilled developers.\nSave Time and Money\nShow the world your coding skills by getting a certification.\nThe prices is a small fraction compared to the price of traditional education.\nDocument and validate your competence by getting certified!\nExam overview\nFee: 95 USD\nAchievable certification levels:\nIntermediate (40%)\nAdvanced (75%)\nProfessional (90%)\nNumber of questions:\nAdaptive, 60 on average\nRequirement to pass:\nMinimum 40% - Intermediate level\nTime limit: 60 minutes\nNumber of attempts to pass: 3\nExam deadline: None\nCertification Expiration: None\nFormat: Online, multiple choice\nRegister now »\nAdvance Faster in Your Career\nGetting a certificate proves your commitment to upgrading your skills.\nThe certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on.\nIt gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nKnowledge is power, especially in the current job market.\nDocumentation of your skills enables you to advance your career or helps you to start a new one.\nHow Does It Work?\nStudy for free at W3Schools.com\nStudy at your own speed\nTest your skills with W3Schools online quizzes\nApply for your certificate by paying an exam fee\nTake your exam online, at any time, and from any location\nGet Your Certificate and Share It With The World\nExample certificate:\nEach certificate gets a unique link that can be shared with others.\nValidate your certification with the link or QR code.\nCheck how it looks like in this Example.\nShare your certificate on Linked in the Certifications section in just one click!\nDocument Your Skills\nGetting a certificate proves your commitment to upgrade your skills, gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nGet Your Certificate »\nLooking to add multiple users?\nAre you an educator, manager or business owner looking for courses or certifications?\nWe are working with schools, companies and organizations from all over the world.\nGet courses and/or certifications for your team here.",
      "examples": []
    }
  ],
  "glossary": [
    "backend",
    "database",
    "exercises",
    "free",
    "javascript",
    "note",
    "postgresql all",
    "postgresql any",
    "postgresql as",
    "postgresql avg",
    "postgresql between",
    "postgresql case",
    "postgresql count",
    "postgresql delete",
    "postgresql exercises",
    "postgresql exists",
    "postgresql having",
    "postgresql home",
    "postgresql in",
    "postgresql install",
    "postgresql intro",
    "postgresql joins",
    "postgresql like",
    "postgresql limit",
    "postgresql operators",
    "postgresql quiz",
    "postgresql select",
    "postgresql sum",
    "postgresql syllabus",
    "postgresql syntax",
    "postgresql union",
    "postgresql update",
    "postgresql where",
    "programs",
    "report error",
    "w3.css",
    "w3schools spaces"
  ],
  "objectives": [
    "View your completed tutorials, exercises, and quizzes",
    "Keep an eye on your progress and daily streaks",
    "Set goals and create learning paths",
    "Create your own personal website"
  ]
}