{
  "course_name": "Go",
  "description": "Go is a popular programming language. Go is used to create computer programs. Our \"Try it Yourself\" editor makes it easy to learn Go. You can edit Go code and view the result in your browser. Click on the \"Try it Yourself\" button to see how it works. Insert the missing part of the code below to output \"Hello World\". Start the Exercise Sign Up for Free Note: This is an optional feature. You can study at W3Schools without creating an account.",
  "course_summary": [
    {
      "title": "Go Introduction",
      "summary": "What is Go?\nGo is a cross-platform, open source programming language\nGo can be used to create high-performance applications\nGo is a fast, statically typed, compiled language known for its simplicity and efficiency\nGo was developed at Google by Robert Griesemer, Rob Pike, and Ken Thompson in 2007\nGo's syntax is similar to C++\nWhat is Go Used For?\nWeb development (server-side)\nDeveloping network-based programs\nDeveloping cross-platform enterprise applications\nCloud-native development\nWhy Use Go?\nGo is fun and easy to learn\nGo has fast run time and compilation time\nGo supports concurrency\nGo has memory management\nGo works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc.)\nGo Compared to Python and C++\nNotes:\nCompilation time refers to translating the code into an executable program\nConcurrency is performing multiple things out-of-order, or at the same time, without affecting the final outcome\nStatically typed means that the variable types are known at compile time\nGet Started\nThis tutorial will teach you the basics of Go.\nIt is not necessary to have any prior programming experience.",
      "examples": []
    },
    {
      "title": "Go Getting Started",
      "summary": "Go Get Started\nTo start using Go, you need two things:\nA text editor, like VS Code, to write Go code\nA compiler, like GCC, to translate the Go code into a language that the computer will understand\nThere are many text editors and compilers to choose from. In this tutorial, we will use an IDE (see below).\nGo Install\nYou can find the relevant installation files at https://golang.org/dl/.\nFollow the instructions related to your operating system. To check if Go was installed successfully, you can run the following command in a terminal window:\nWhich should show the version of your Go installation.\nGo Install IDE\nAn IDE (Integrated Development Environment) is used to edit AND compile the code.\nPopular IDE's include Visual Studio Code (VS Code), Vim, Eclipse, and Notepad. These are all free, and they can be used to both edit and debug Go code.\nNote: Web-based IDE's can work as well, but functionality is limited.\nWe will use VS Code in our tutorial, which we believe is a good place to start.\nYou can find the latest version of VS Code at https://code.visualstudio.com/.\nGo Quickstart\nLet's create our first Go program.\nLaunch the VS Code editor\nOpen the extension manager or alternatively, press Ctrl + Shift + x\nIn the search box, type \"go\" and hit enter\nFind the Go extension by the GO team at Google and install the extension\nAfter the installation is complete, open the command palette by pressing Ctrl + Shift + p\nRun the Go: Install/Update Tools command\nSelect all the provided tools and click OK\nVS Code is now configured to use Go.\nOpen up a terminal window and type:\nDo not worry if you do not understand why we type the above command. Just think of it as something that you always do, and that you will learn more about in a later chapter.\nCreate a new file (File > New File). Copy and paste the following code and save the file as helloworld.go (File > Save As):\nNow, run the code: Open a terminal in VS Code and type:\nCongratulations! You have now written and executed your first Go program.\nIf you want to save the program as an executable, type and run:\nLearning Go At W3Schools\nWhen learning Go at W3Schools.com, you can use our \"Try it Yourself\" tool. It shows both the code and the result. This will make it easier for you to understand every part as we move forward:\nhelloworld.go\nCode:\nResult:",
      "examples": [
        "go version",
        "go mod init example.com/hello",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nfmt.Println(\"Hello World!\")\n}",
        "go run .\\helloworld.go",
        "go build .\\helloworld.go",
        "Ctrl + Shift + x",
        "Ctrl + Shift + p",
        "Go: Install/Update Tools",
        "File > New File",
        "helloworld.go",
        "File > Save As",
        "Hello World!"
      ]
    },
    {
      "title": "Go Syntax",
      "summary": "Go Syntax\nA Go file consists of the following parts:\nPackage declaration\nImport packages\nFunctions\nStatements and expressions\nLook at the following code, to understand it better:\nExample\nExample explained\nLine 1: In Go, every program is part of a package. We define this using the package keyword. In this example, the program belongs to the main package.\nLine 2: import (\"fmt\") lets us import files included in the fmt package.\nLine 3: A blank line. Go ignores white space. Having white spaces in code makes it more readable.\nLine 4: func main() {} is a function. Any code inside its curly brackets {} will be executed.\nLine 5: fmt.Println() is a function made available from the fmt package. It is used to output/print text. In our example it will output \"Hello World!\".\nNote: In Go, any executable code belongs to the main package.\nGo Statements\nfmt.Println(\"Hello World!\") is a statement.\nIn Go, statements are separated by ending a line (hitting the Enter key) or by a semicolon \";\".\nHitting the Enter key adds \";\" to the end of the line implicitly (does not show up in the source code).\nThe left curly bracket { cannot come at the start of a line.\nRun the following code and see what happens:\nExample\nGo Compact Code\nYou can write more compact code, like shown below (this is not recommended because it makes the code more difficult to read):\nExample\nGo Exercises\nTest Yourself With Exercises\nExercise:\nInsert the missing part of the code below to output \"Hello World\".\nStart the Exercise",
      "examples": [
        "package main\nimport (\"fmt\")\n\nfunc main() {\nfmt.Println(\"Hello World!\")\n}",
        "package main\nimport (\"fmt\")\n\nfunc main()\n{\nfmt.Println(\"Hello World!\")\n}",
        "package main; import (\"fmt\"); func main() { fmt.Println(\"Hello World!\");}",
        "package main import (\"fmt\")\nfunc main() { (\"Hello World!\") }",
        "package",
        "main",
        "import (\"fmt\")",
        "fmt",
        "func main() {}",
        "{}",
        "fmt.Println()",
        "fmt.Println(\"Hello World!\")",
        ";",
        "{"
      ]
    },
    {
      "title": "Go Comments",
      "summary": "Go Comments\nA comment is a text that is ignored upon execution.\nComments can be used to explain the code, and to make it more readable.\nComments can also be used to prevent code execution when testing an alternative code.\nGo supports single-line or multi-line comments.\nGo Single-line Comments\nSingle-line comments start with two forward slashes (//).\nAny text between // and the end of the line is ignored by the compiler (will not be executed).\nExample\nThe following example uses a single-line comment at the end of a code line:\nExample\nGo Multi-line Comments\nMulti-line comments start with /* and ends with */.\nAny text between /* and */ will be ignored by the compiler:\nExample\nTip: It is up to you which you want to use. Normally, we use // for short comments, and /* */ for longer comments.\nREMOVE ADS\nComment to Prevent Code Execution\nYou can also use comments to prevent the code from being executed.\nThe commented code can be saved for later reference and troubleshooting.\nExample\nGo Exercises\nTest Yourself With Exercises\nExercise:\nComments in Go are written with a special character, which one?\nStart the Exercise",
      "examples": [
        "// This is a comment\npackage main\nimport (\"fmt\")\n\nfunc main() {\n// This is a comment\nfmt.Println(\"Hello World!\")\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nfmt.Println(\"Hello World!\") // This is a comment\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\n/* The code below will print Hello World\nto the screen, and it is amazing */\nfmt.Println(\"Hello World!\")\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nfmt.Println(\"Hello World!\")\n// fmt.Println(\"This line does not execute\")\n}",
        "package main import (\"fmt\")\nfunc main() { this is a comment fmt.Println(\"Hello World!\") }",
        "//",
        "/*",
        "*/",
        "/* */"
      ]
    },
    {
      "title": "Go Variables",
      "summary": "Variables are containers for storing data values.\nGo Variable Types\nIn Go, there are different types of variables, for example:\nint- stores integers (whole numbers), such as 123 or -123\nfloat32- stores floating point numbers, with decimals, such as 19.99 or -19.99\nstring - stores text, such as \"Hello World\". String values are surrounded by double quotes\nbool- stores values with two states: true or false\nMore about different variable types, will be explained in the Go Data Types chapter.\nDeclaring (Creating) Variables\nIn Go, there are two ways to declare a variable:\nUse the var keyword, followed by variable name and type:\nSyntax\nNote: You always have to specify either type or value (or both).\nUse the := sign, followed by the variable value:\nSyntax\nNote: In this case, the type of the variable is inferred from the value (means that the compiler decides the type of the variable, based on the value).\nNote: It is not possible to declare a variable using :=, without assigning a value to it.\nVariable Declaration With Initial Value\nIf the value of a variable is known from the start, you can declare the variable and assign a value to it on one line:\nExample\nNote: The variable types of student2 and x is inferred from their values.\nREMOVE ADS\nVariable Declaration Without Initial Value\nIn Go, all variables are initialized. So, if you declare a variable without an initial value, its value will be set to the default value of its type:\nExample\nIn this example there are 3 variables:\na\nb\nc\nThese variables are declared but they have not been assigned initial values.\nBy running the code, we can see that they already have the default values of their respective types:\na is \"\"\nb is 0\nc is false\nValue Assignment After Declaration\nIt is possible to assign a value to a variable after it is declared. This is helpful for cases the value is not initially known.\nExample\nNote: It is not possible to declare a variable using \":=\" without assigning a value to it.\nDifference Between var and :=\nThere are some small differences between the var var :=:\nExample\nThis example shows declaring variables outside of a function, with the var keyword:\nExample\nSince := is used outside of a function, running the program results in an error.\nResult:\nGo Exercises\nTest Yourself With Exercises\nExercise:\nCreate a variable named myNum and assign the value 50 to it.\nStart the Exercise",
      "examples": [
        "var variablename type = value",
        "variablename := value",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar student1 string = \"John\" //type is string\nvar student2 = \"Jane\" //type is inferred\nx := 2 //type is inferred\n\nfmt.Println(student1)\nfmt.Println(student2)\nfmt.Println(x)\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar a string\nvar b int\nvar c bool\n\nfmt.Println(a)\nfmt.Println(b)\nfmt.Println(c)\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar student1 string\nstudent1 = \"John\"\nfmt.Println(student1)\n}",
        "package main\nimport (\"fmt\")\n\nvar a int\nvar b int = 2\nvar c = 3\n\nfunc main() {\na = 1\nfmt.Println(a)\nfmt.Println(b)\nfmt.Println(c)\n}",
        "package main\nimport (\"fmt\")\n\na := 1\n\nfunc main() {\nfmt.Println(a)\n}",
        "package main import (\"fmt\")\nfunc main() { var = fmt.Println() }",
        "int",
        "float32",
        "string",
        "bool",
        "var",
        "type",
        "value",
        ":=",
        "student2",
        "x",
        "a",
        "b",
        "c",
        "\"\"",
        "0",
        "false",
        "./prog.go:5:1: syntax error: non-declaration statement outside function body",
        "myNum",
        "50"
      ]
    },
    {
      "title": "Go Multiple Variable Declaration",
      "summary": "Go Multiple Variable Declaration\nIn Go, it is possible to declare multiple variables on the same line.\nExample\nThis example shows how to declare multiple variables on the same line:\nNote: If you use the type keyword, it is only possible to declare one type of variable per line.\nIf the type keyword is not specified, you can declare different types of variables on the same line:\nExample\nGo Variable Declaration in a Block\nMultiple variable declarations can also be grouped together into a block for greater readability:\nExample",
      "examples": [
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar a, b, c, d int = 1, 3, 5, 7\n\nfmt.Println(a)\nfmt.Println(b)\nfmt.Println(c)\nfmt.Println(d)\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar a, b = 6, \"Hello\"\nc, d := 7, \"World!\"\n\nfmt.Println(a)\nfmt.Println(b)\nfmt.Println(c)\nfmt.Println(d)\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar (\na int\nb int = 1\nc string = \"hello\"\n)\n\nfmt.Println(a)\nfmt.Println(b)\nfmt.Println(c)\n}",
        "type"
      ]
    },
    {
      "title": "Go Variable Naming Rules",
      "summary": "Go Variable Naming Rules\nA variable can have a short name (like x and y) or a more descriptive name (age, price, carname, etc.).\nGo variable naming rules:\nA variable name must start with a letter or an underscore character (_)\nA variable name cannot start with a digit\nA variable name can only contain alpha-numeric characters and underscores (a-z, A-Z, 0-9, and _ )\nVariable names are case-sensitive (age, Age and AGE are three different variables)\nThere is no limit on the length of the variable name\nA variable name cannot contain spaces\nThe variable name cannot be any Go keywords\nMulti-Word Variable Names\nVariable names with more than one word can be difficult to read.\nThere are several techniques you can use to make them more readable:\nCamel Case\nEach word, except the first, starts with a capital letter:\nPascal Case\nEach word starts with a capital letter:\nSnake Case\nEach word is separated by an underscore character:",
      "examples": [
        "myVariableName = \"John\"",
        "MyVariableName = \"John\"",
        "my_variable_name = \"John\"",
        "a-z, A-Z",
        "0-9",
        "_"
      ]
    },
    {
      "title": "Go Constants",
      "summary": "Go Constants\nIf a variable should have a fixed value that cannot be changed, you can use the const keyword.\nThe const keyword declares the variable as \"constant\", which means that it is unchangeable and read-only.\nSyntax\nNote: The value of a constant must be assigned when you declare it.\nDeclaring a Constant\nHere is an example of declaring a constant in Go:\nExample\nConstant Rules\nConstant names follow the same naming rules as variables\nConstant names are usually written in uppercase letters (for easy identification and differentiation from variables)\nConstants can be declared both inside and outside of a function\nConstant Types\nThere are two types of constants:\nTyped constants\nUntyped constants\nTyped Constants\nTyped constants are declared with a defined type:\nExample\nREMOVE ADS\nUntyped Constants\nUntyped constants are declared without a type:\nExample\nNote: In this case, the type of the constant is inferred from the value (means the compiler decides the type of the constant, based on the value).\nConstants: Unchangeable and Read-only\nWhen a constant is declared, it is not possible to change the value later:\nExample\nResult:\nMultiple Constants Declaration\nMultiple constants can be grouped together into a block for readability:\nExample",
      "examples": [
        "const CONSTNAME type = value",
        "package main\nimport (\"fmt\")\n\nconst PI = 3.14\n\nfunc main() {\nfmt.Println(PI)\n}",
        "package main\nimport (\"fmt\")\n\nconst A int = 1\n\nfunc main() {\nfmt.Println(A)\n}",
        "package main\nimport (\"fmt\")\n\nconst A = 1\n\nfunc main() {\nfmt.Println(A)\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nconst A = 1\nA = 2\nfmt.Println(A)\n}",
        "package main\nimport (\"fmt\")\n\nconst (\nA int = 1\nB = 3.14\nC = \"Hi!\"\n)\n\nfunc main() {\nfmt.Println(A)\nfmt.Println(B)\nfmt.Println(C)\n}",
        "const",
        "./prog.go:8:7: cannot assign to A"
      ]
    },
    {
      "title": "Go Output Functions",
      "summary": "Go has three functions to output text:\nPrint()\nPrintln()\nPrintf()\nThe Print() Function\nThe Print() function prints its arguments with their default format.\nExample\nPrint the values of i and j:\nResult:\nExample\nIf we want to print the arguments in new lines, we need to use \\n.\nResult:\nTip: \\n creates new lines.\nExample\nIt is also possible to only use one Print() for printing multiple variables.\nResult:\nExample\nIf we want to add a space between string arguments, we need to use \" \":\nResult:\nExample\nPrint() inserts a space between the arguments if neither are strings:\nResult:\nREMOVE ADS\nThe Println() Function\nThe Println() function is similar to Print() with the difference that a whitespace is added between the arguments, and a newline is added at the end:\nExample\nResult:\nThe Printf() Function\nThe Printf() function first formats its argument based on the given formatting verb and then prints them.\nHere we will use two formatting verbs:\n%v is used to print the value of the arguments\n%T is used to print the type of the arguments\nExample\nResult:\nTip: Look at all the formatting verbs in the Go Formatting Verbs chapter.",
      "examples": [
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar i,j string = \"Hello\",\"World\"\n\nfmt.Print(i)\nfmt.Print(j)\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar i,j string = \"Hello\",\"World\"\n\nfmt.Print(i, \"\\n\")\nfmt.Print(j, \"\\n\")\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar i,j string = \"Hello\",\"World\"\n\nfmt.Print(i, \"\\n\",j)\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar i,j = 10,20\n\nfmt.Print(i,j)\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar i,j string = \"Hello\",\"World\"\n\nfmt.Println(i,j)\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar i string = \"Hello\"\nvar j int = 15\n\nfmt.Printf(\"i has value: %v and type: %T\\n\", i, i)\nfmt.Printf(\"j has value: %v and type: %T\", j, j)\n}",
        "Print()",
        "Println()",
        "Printf()",
        "i",
        "j",
        "HelloWorld",
        "\\n",
        "Hello\nWorld",
        "Hello World",
        "10 20",
        "%v",
        "%T",
        "i has value: Hello and type: string\nj has value: 15 and type: int"
      ]
    },
    {
      "title": "Go Formatting Verbs",
      "summary": "Formatting Verbs for Printf()\nGo offers several formatting verbs that can be used with the Printf() function.\nGeneral Formatting Verbs\nThe following verbs can be used with all data types:\nExample\nResult:\nInteger Formatting Verbs\nThe following verbs can be used with the integer data type:\nExample\nResult:\nREMOVE ADS\nString Formatting Verbs\nThe following verbs can be used with the string data type:\nExample\nResult:\nBoolean Formatting Verbs\nThe following verb can be used with the boolean data type:\nExample\nResult:\nFloat Formatting Verbs\nThe following verbs can be used with the float data type:\nExample\nResult:",
      "examples": [
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar i = 15.5\nvar txt = \"Hello World!\"\n\nfmt.Printf(\"%v\\n\", i)\nfmt.Printf(\"%#v\\n\", i)\nfmt.Printf(\"%v%%\\n\", i)\nfmt.Printf(\"%T\\n\", i)\n\nfmt.Printf(\"%v\\n\", txt)\nfmt.Printf(\"%#v\\n\", txt)\nfmt.Printf(\"%T\\n\", txt)\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar i = 15\n\nfmt.Printf(\"%b\\n\", i)\nfmt.Printf(\"%d\\n\", i)\nfmt.Printf(\"%+d\\n\", i)\nfmt.Printf(\"%o\\n\", i)\nfmt.Printf(\"%O\\n\", i)\nfmt.Printf(\"%x\\n\", i)\nfmt.Printf(\"%X\\n\", i)\nfmt.Printf(\"%#x\\n\", i)\nfmt.Printf(\"%4d\\n\", i)\nfmt.Printf(\"%-4d\\n\", i)\nfmt.Printf(\"%04d\\n\", i)\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar txt = \"Hello\"\n\nfmt.Printf(\"%s\\n\", txt)\nfmt.Printf(\"%q\\n\", txt)\nfmt.Printf(\"%8s\\n\", txt)\nfmt.Printf(\"%-8s\\n\", txt)\nfmt.Printf(\"%x\\n\", txt)\nfmt.Printf(\"% x\\n\", txt)\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar i = true\nvar j = false\n\nfmt.Printf(\"%t\\n\", i)\nfmt.Printf(\"%t\\n\", j)\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar i = 3.141\n\nfmt.Printf(\"%e\\n\", i)\nfmt.Printf(\"%f\\n\", i)\nfmt.Printf(\"%.2f\\n\", i)\nfmt.Printf(\"%6.2f\\n\", i)\nfmt.Printf(\"%g\\n\", i)\n}",
        "Printf()",
        "15.5\n15.5\n15.5%\nfloat64\nHello World!\n\"Hello World!\"\nstring",
        "1111\n15\n+15\n17\n0o17\nf\nF\n0xf\n15\n15\n0015",
        "Hello\n\"Hello\"\nHello\nHello\n48656c6c6f\n48 65 6c 6c 6f",
        "true\nfalse",
        "3.141000e+00\n3.141000\n3.14\n3.14\n3.141"
      ]
    },
    {
      "title": "Go Data Types",
      "summary": "Go Data Types\nData type is an important concept in programming. Data type specifies the size and type of variable values.\nGo is statically typed, meaning that once a variable type is defined, it can only store data of that type.\nGo has three basic data types:\nbool: represents a boolean value and is either true or false\nNumeric: represents integer types, floating point values, and complex types\nstring: represents a string value\nExample\nThis example shows some of the different data types in Go:\nGo Exercises\nTest Yourself With Exercises\nExercise:\nAdd the correct data type for the following variables:\nStart the Exercise",
      "examples": [
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar a bool = true     // Boolean\nvar b int = 5         // Integer\nvar c float32 = 3.14  // Floating point number\nvar d string = \"Hi!\"  // String\n\nfmt.Println(\"Boolean: \", a)\nfmt.Println(\"Integer: \", b)\nfmt.Println(\"Float:   \", c)\nfmt.Println(\"String:  \", d)\n}",
        "package main import (\"fmt\")\nfunc main() { var myNum = 90 var myWord = \"Hello\" var myBool = true }"
      ]
    },
    {
      "title": "Go Boolean Data Type",
      "summary": "Boolean Data Type\nA boolean data type is declared with the bool keyword and can only take the values true or false.\nThe default value of a boolean data type is false.\nExample\nThis example shows some different ways to declare Boolean variables:\nNote: Boolean values are mostly used for conditional testing which you will learn more about in the Go Conditions chapter.",
      "examples": [
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar b1 bool = true // typed declaration with initial value\nvar b2 = true // untyped declaration with initial value\nvar b3 bool // typed declaration without initial value\nb4 := true // untyped declaration with initial value\n\nfmt.Println(b1) // Returns true\nfmt.Println(b2) // Returns true\nfmt.Println(b3) // Returns false\nfmt.Println(b4) // Returns true\n}",
        "bool",
        "true",
        "false"
      ]
    },
    {
      "title": "Go Integer Data Types",
      "summary": "Go Integer Data Types\nInteger data types are used to store a whole number without decimals, like 35, -50, or 1345000.\nThe integer data type has two categories:\nSigned integers - can store both positive and negative values\nUnsigned integers - can only store non-negative values\nTip: The default type for integer is int. If you do not specify a type, the type will be int.\nSigned Integers\nSigned integers, declared with one of the int keywords, can store both positive and negative values:\nExample\nGo has five keywords/types of signed integers:\nREMOVE ADS\nUnsigned Integers\nUnsigned integers, declared with one of the uint keywords, can only store non-negative values:\nExample\nGo has five keywords/types of unsigned integers:\nWhich Integer Type to Use?\nThe type of integer to choose, depends on the value the variable has to store.\nExample\nThis example will result in an error because 1000 is out of range for int8 (which is from -128 to 127):\nResult:",
      "examples": [
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar x int = 500\nvar y int = -4500\nfmt.Printf(\"Type: %T, value: %v\", x, x)\nfmt.Printf(\"Type: %T, value: %v\", y, y)\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar x uint = 500\nvar y uint = 4500\nfmt.Printf(\"Type: %T, value: %v\", x, x)\nfmt.Printf(\"Type: %T, value: %v\", y, y)\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar x int8 = 1000\nfmt.Printf(\"Type: %T, value: %v\", x, x)\n}",
        "int",
        "int8",
        "int16",
        "int32",
        "int64",
        "uint",
        "uint8",
        "uint16",
        "uint32",
        "uint64",
        "./prog.go:5:7: constant 1000 overflows int8"
      ]
    },
    {
      "title": "Go Float Data Types",
      "summary": "Go Float Data Types\nThe float data types are used to store positive and negative numbers with a decimal point, like 35.3, -2.34, or 3597.34987.\nThe float data type has two keywords:\nTip: The default type for float is float64. If you do not specify a type, the type will be float64.\nThe float32 Keyword\nExample\nThis example shows how to declare some variables of type float32:\nThe float64 Keyword\nThe float64 data type can store a larger set of numbers than float32.\nExample\nThis example shows how to declare a variable of type float64:\nWhich Float Type to Use?\nThe type of float to choose, depends on the value the variable has to store.\nExample\nThis example will result in an error because 3.4e+39 is out of range for float32:\nResult:",
      "examples": [
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar x float32 = 123.78\nvar y float32 = 3.4e+38\nfmt.Printf(\"Type: %T, value: %v\\n\", x, x)\nfmt.Printf(\"Type: %T, value: %v\", y, y)\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar x float64 = 1.7e+308\nfmt.Printf(\"Type: %T, value: %v\", x, x)\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar x float32= 3.4e+39\nfmt.Println(x)\n}",
        "float32",
        "float64",
        "./prog.go:5:7: constant 3.4e+39 overflows float32"
      ]
    },
    {
      "title": "Go String Data Type",
      "summary": "String Data Type\nThe string data type is used to store a sequence of characters (text). String values must be surrounded by double quotes:\nExample\nResult:",
      "examples": [
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar txt1 string = \"Hello!\"\nvar txt2 string\ntxt3 := \"World 1\"\n\nfmt.Printf(\"Type: %T, value: %v\\n\", txt1, txt1)\nfmt.Printf(\"Type: %T, value: %v\\n\", txt2, txt2)\nfmt.Printf(\"Type: %T, value: %v\\n\", txt3, txt3)\n}",
        "string",
        "Type: string, value: Hello!\nType: string, value:\nType: string, value: World 1"
      ]
    },
    {
      "title": "Go Arrays",
      "summary": "Go Arrays\nArrays are used to store multiple values of the same type in a single variable, instead of declaring separate variables for each value.\nDeclare an Array\nIn Go, there are two ways to declare an array:\nSyntax\nSyntax\nNote: The length specifies the number of elements to store in the array. In Go, arrays have a fixed length. The length of the array is either defined by a number or is inferred (means that the compiler decides the length of the array, based on the number of values).\nArray Examples\nExample\nThis example declares two arrays (arr1 and arr2) with defined lengths:\nResult:\nExample\nThis example declares two arrays (arr1 and arr2) with inferred lengths:\nResult:\nExample\nThis example declares an array of strings:\nResult:\nREMOVE ADS\nAccess Elements of an Array\nYou can access a specific array element by referring to the index number.\nIn Go, array indexes start at 0. That means that [0] is the first element, [1] is the second element, etc.\nExample\nThis example shows how to access the first and third elements in the prices array:\nResult:\nChange Elements of an Array\nYou can also change the value of a specific array element by referring to the index number.\nExample\nThis example shows how to change the value of the third element in the prices array:\nResult:\nArray Initialization\nIf an array or one of its elements has not been initialized in the code, it is assigned the default value of its type.\nTip: The default value for int is 0, and the default value for string is \"\".\nExample\nResult:\nInitialize Only Specific Elements\nIt is possible to initialize only specific elements in an array.\nExample\nThis example initializes only the second and third elements of the array:\nResult:\nThe array above has 5 elements.\n1:10 means: assign 10 to array index 1 (second element).\n2:40 means: assign 40 to array index 2 (third element).\nFind the Length of an Array\nThe len() function is used to find the length of an array:\nExample\nResult:\nGo Exercises\nTest Yourself With Exercises\nExercise:\nCreate an array, named cars, of type string:\nStart the Exercise",
      "examples": [
        "var array_name = [length]datatype{values} // here length is defined\n\nor\n\nvar array_name = [...]datatype{values} // here length is inferred",
        "array_name := [length]datatype{values} // here length is defined\n\nor\n\narray_name := [...]datatype{values} // here length is inferred",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar arr1 = [3]int{1,2,3}\narr2 := [5]int{4,5,6,7,8}\n\nfmt.Println(arr1)\nfmt.Println(arr2)\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar arr1 = [...]int{1,2,3}\narr2 := [...]int{4,5,6,7,8}\n\nfmt.Println(arr1)\nfmt.Println(arr2)\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar cars = [4]string{\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}\nfmt.Print(cars)\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nprices := [3]int{10,20,30}\n\nfmt.Println(prices[0])\nfmt.Println(prices[2])\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nprices := [3]int{10,20,30}\n\nprices[2] = 50\nfmt.Println(prices)\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\narr1 := [5]int{} //not initialized\narr2 := [5]int{1,2} //partially initialized\narr3 := [5]int{1,2,3,4,5} //fully initialized\n\nfmt.Println(arr1)\nfmt.Println(arr2)\nfmt.Println(arr3)\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\narr1 := [5]int{1:10,2:40}\n\nfmt.Println(arr1)\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\narr1 := [4]string{\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}\narr2 := [...]int{1,2,3,4,5,6}\n\nfmt.Println(len(arr1))\nfmt.Println(len(arr2))\n}",
        "package main import (\"fmt\")\nfunc main() { var = [4]{\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"} fmt.Print() }",
        "var",
        ":=",
        "[1 2 3]\n[4 5 6 7 8]",
        "[Volvo BMW Ford Mazda]",
        "10\n30",
        "[10 20 50]",
        "[0 0 0 0 0]\n[1 2 0 0 0]\n[1 2 3 4 5]",
        "[0 10 40 0 0]",
        "1:10",
        "10",
        "1",
        "2:40",
        "40",
        "2",
        "len()",
        "4\n6"
      ]
    },
    {
      "title": "Go Slices",
      "summary": "Go Slices\nSlices are similar to arrays, but are more powerful and flexible.\nLike arrays, slices are also used to store multiple values of the same type in a single variable.\nHowever, unlike arrays, the length of a slice can grow and shrink as you see fit.\nIn Go, there are several ways to create a slice:\nUsing the []datatype{values} format\nCreate a slice from an array\nUsing the make() function\nCreate a Slice With []datatype{values}\nSyntax\nA common way of declaring a slice is like this:\nThe code above declares an empty slice of 0 length and 0 capacity.\nTo initialize the slice during declaration, use this:\nThe code above declares a slice of integers of length 3 and also the capacity of 3.\nIn Go, there are two functions that can be used to return the length and capacity of a slice:\nlen() function - returns the length of the slice (the number of elements in the slice)\ncap() function - returns the capacity of the slice (the number of elements the slice can grow or shrink to)\nExample\nThis example shows how to create slices using the []datatype{values} format:\nResult:\nIn the example above, we see that in the first slice (myslice1), the actual elements are not specified, so both the length and capacity of the slice will be zero. In the second slice (myslice2), the elements are specified, and both length and capacity is equal to the number of actual elements specified.\nREMOVE ADS\nCreate a Slice From an Array\nYou can create a slice by slicing an array:\nSyntax\nExample\nThis example shows how to create a slice from an array:\nResult:\nIn the example above myslice is a slice with length 2. It is made from arr1 which is an array with length 6.\nThe slice starts from the third element of the array which has value 12 (remember that array indexes start at 0. That means that [0] is the first element, [1] is the second element, etc.). The slice can grow to the end of the array. This means that the capacity of the slice is 4.\nIf myslice started from element 0, the slice capacity would be 6.\nCreate a Slice With The make() Function\nThe make() function can also be used to create a slice.\nSyntax\nNote: If the capacity parameter is not defined, it will be equal to length.\nExample\nThis example shows how to create slices using the make() function:\nResult:",
      "examples": [
        "slice_name := []datatype{values}",
        "myslice := []int{}",
        "myslice := []int{1,2,3}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nmyslice1 := []int{}\nfmt.Println(len(myslice1))\nfmt.Println(cap(myslice1))\nfmt.Println(myslice1)\n\nmyslice2 := []string{\"Go\", \"Slices\", \"Are\", \"Powerful\"}\nfmt.Println(len(myslice2))\nfmt.Println(cap(myslice2))\nfmt.Println(myslice2)\n}",
        "var myarray = [length]datatype{values} // An array\nmyslice := myarray[start:end] // A slice made from the array",
        "package main\nimport (\"fmt\")\n\nfunc main() {\narr1 := [6]int{10, 11, 12, 13, 14,15}\nmyslice := arr1[2:4]\n\nfmt.Printf(\"myslice = %v\\n\", myslice)\nfmt.Printf(\"length = %d\\n\", len(myslice))\nfmt.Printf(\"capacity = %d\\n\", cap(myslice))\n}",
        "slice_name := make([]type, length, capacity)",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nmyslice1 := make([]int, 5, 10)\nfmt.Printf(\"myslice1 = %v\\n\", myslice1)\nfmt.Printf(\"length = %d\\n\", len(myslice1))\nfmt.Printf(\"capacity = %d\\n\", cap(myslice1))\n\n// with omitted capacity\nmyslice2 := make([]int, 5)\nfmt.Printf(\"myslice2 = %v\\n\", myslice2)\nfmt.Printf(\"length = %d\\n\", len(myslice2))\nfmt.Printf(\"capacity = %d\\n\", cap(myslice2))\n}",
        "len()",
        "cap()",
        "0\n0\n[]\n4\n4\n[Go Slices Are Powerful]",
        "myslice = [12 13]\nlength = 2\ncapacity = 4",
        "myslice",
        "arr1",
        "make()",
        "myslice1 = [0 0 0 0 0]\nlength = 5\ncapacity = 10\nmyslice2 = [0 0 0 0 0]\nlength = 5\ncapacity = 5"
      ]
    },
    {
      "title": "Go Access, Change, Append and Copy Slices",
      "summary": "Access Elements of a Slice\nYou can access a specific slice element by referring to the index number.\nIn Go, indexes start at 0. That means that [0] is the first element, [1] is the second element, etc.\nExample\nThis example shows how to access the first and third elements in the prices slice:\nResult:\nChange Elements of a Slice\nYou can also change a specific slice element by referring to the index number.\nExample\nThis example shows how to change the third element in the prices slice:\nResult:\nAppend Elements To a Slice\nYou can append elements to the end of a slice using the append()function:\nSyntax\nExample\nThis example shows how to append elements to the end of a slice:\nResult:\nREMOVE ADS\nAppend One Slice To Another Slice\nTo append all the elements of one slice to another slice, use the append()function:\nSyntax\nNote: The '...' after slice2 is necessary when appending the elements of one slice to another.\nExample\nThis example shows how to append one slice to another slice:\nResult:\nChange The Length of a Slice\nUnlike arrays, it is possible to change the length of a slice.\nExample\nThis example shows how to change the length of a slice:\nResult:\nMemory Efficiency\nWhen using slices, Go loads all the underlying elements into the memory.\nIf the array is large and you need only a few elements, it is better to copy those elements using the copy() function.\nThe copy() function creates a new underlying array with only the required elements for the slice. This will reduce the memory used for the program.\nSyntax\nThe copy() function takes in two slices dest and src, and copies data from src to dest. It returns the number of elements copied.\nExample\nThis example shows how to use the copy() function:\nResult:\nThe capacity of the new slice is now less than the capacity of the original slice because the new underlying array is smaller.",
      "examples": [
        "package main\nimport (\"fmt\")\n\nfunc main() {\nprices := []int{10,20,30}\n\nfmt.Println(prices[0])\nfmt.Println(prices[2])\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nprices := []int{10,20,30}\nprices[2] = 50\nfmt.Println(prices[0])\nfmt.Println(prices[2])\n}",
        "slice_name = append(slice_name, element1, element2, ...)",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nmyslice1 := []int{1, 2, 3, 4, 5, 6}\nfmt.Printf(\"myslice1 = %v\\n\", myslice1)\nfmt.Printf(\"length = %d\\n\", len(myslice1))\nfmt.Printf(\"capacity = %d\\n\", cap(myslice1))\n\nmyslice1 = append(myslice1, 20, 21)\nfmt.Printf(\"myslice1 = %v\\n\", myslice1)\nfmt.Printf(\"length = %d\\n\", len(myslice1))\nfmt.Printf(\"capacity = %d\\n\", cap(myslice1))\n}",
        "slice3 = append(slice1, slice2...)",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nmyslice1 := []int{1,2,3}\nmyslice2 := []int{4,5,6}\nmyslice3 := append(myslice1, myslice2...)\n\nfmt.Printf(\"myslice3=%v\\n\", myslice3)\nfmt.Printf(\"length=%d\\n\", len(myslice3))\nfmt.Printf(\"capacity=%d\\n\", cap(myslice3))\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\narr1 := [6]int{9, 10, 11, 12, 13, 14} // An array\nmyslice1 := arr1[1:5] // Slice array\nfmt.Printf(\"myslice1 = %v\\n\", myslice1)\nfmt.Printf(\"length = %d\\n\", len(myslice1))\nfmt.Printf(\"capacity = %d\\n\", cap(myslice1))\n\nmyslice1 = arr1[1:3] // Change length by re-slicing the array\nfmt.Printf(\"myslice1 = %v\\n\", myslice1)\nfmt.Printf(\"length = %d\\n\", len(myslice1))\nfmt.Printf(\"capacity = %d\\n\", cap(myslice1))\n\nmyslice1 = append(myslice1, 20, 21, 22, 23) // Change length by appending items\nfmt.Printf(\"myslice1 = %v\\n\", myslice1)\nfmt.Printf(\"length = %d\\n\", len(myslice1))\nfmt.Printf(\"capacity = %d\\n\", cap(myslice1))\n}",
        "copy(dest, src)",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nnumbers := []int{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}\n// Original slice\nfmt.Printf(\"numbers = %v\\n\", numbers)\nfmt.Printf(\"length = %d\\n\", len(numbers))\nfmt.Printf(\"capacity = %d\\n\", cap(numbers))\n\n// Create copy with only needed numbers\nneededNumbers := numbers[:len(numbers)-10]\nnumbersCopy := make([]int, len(neededNumbers))\ncopy(numbersCopy, neededNumbers)\n\nfmt.Printf(\"numbersCopy = %v\\n\", numbersCopy)\nfmt.Printf(\"length = %d\\n\", len(numbersCopy))\nfmt.Printf(\"capacity = %d\\n\", cap(numbersCopy))\n}",
        "10\n30",
        "10\n50",
        "append()",
        "myslice1 = [1 2 3 4 5 6]\nlength = 6\ncapacity = 6\nmyslice1 = [1 2 3 4 5 6 20 21]\nlength = 8\ncapacity = 12",
        "myslice3=[1 2 3 4 5 6]\nlength=6\ncapacity=6",
        "myslice1 = [10 11 12 13]\nlength = 4\ncapacity = 5\nmyslice1 = [10 11]\nlength = 2\ncapacity = 5\nmyslice1 = [10 11 20 21 22 23]\nlength = 6\ncapacity = 10",
        "copy()",
        "// Original slice\nnumbers = [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15]\nlength = 15\ncapacity = 15\n// New slice\nnumbersCopy = [1 2 3 4 5]\nlength = 5\ncapacity = 5"
      ]
    },
    {
      "title": "Go Operators",
      "summary": "Go Operators\nOperators are used to perform operations on variables and values.\nThe + operator adds together two values, like in the example below:\nExample\nAlthough the + operator is often used to add together two values, it can also be used to add together a variable and a value, or a variable and another variable:\nExample\nGo divides the operators into the following groups:\nArithmetic operators\nAssignment operators\nComparison operators\nLogical operators\nBitwise operators",
      "examples": [
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar a = 15 + 25\nfmt.Println(a)\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar (\nsum1 = 100 + 50 // 150 (100 + 50)\nsum2 = sum1 + 250 // 400 (150 + 250)\nsum3 = sum2 + sum2 // 800 (400 + 400)\n)\nfmt.Println(sum3)\n}",
        "+"
      ]
    },
    {
      "title": "Go Arithmetic Operators",
      "summary": "Arithmetic Operators\nArithmetic operators are used to perform common mathematical operations.\nGo Exercises\nTest Yourself With Exercises\nExercise:\nMultiply 10 with 5, and print the result.\nStart the Exercise",
      "examples": [
        "package main import (\"fmt\")\nfunc main() { fmt.Print(105) }"
      ]
    },
    {
      "title": "Go Assignment Operators",
      "summary": "Assignment Operators\nAssignment operators are used to assign values to variables.\nIn the example below, we use the assignment operator (=) to assign the value 10 to a variable called x:\nExample\nThe addition assignment operator (+=) adds a value to a variable:\nExample\nA list of all assignment operators:",
      "examples": [
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar x = 10\nfmt.Println(x)\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar x = 10\nx +=5\nfmt.Println(x)\n}",
        "=",
        "+="
      ]
    },
    {
      "title": "Go Comparison Operators",
      "summary": "Comparison Operators\nComparison operators are used to compare two values.\nNote: The return value of a comparison is either true (1) or false (0).\nIn the following example, we use the greater than operator (>) to find out if 5 is greater than 3:\nExample\nA list of all comparison operators:\nYou will learn more about comparison operators and how to use them in the Go Conditions chapter.",
      "examples": [
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar x = 5\nvar y = 3\nfmt.Println(x>y) // returns 1 (true) because 5 is greater than 3\n}",
        "1",
        "0",
        ">"
      ]
    },
    {
      "title": "Go Logical Operators",
      "summary": "Logical Operators\nLogical operators are used to determine the logic between variables or values:",
      "examples": []
    },
    {
      "title": "Go Bitwise Operators",
      "summary": "Bitwise Operators\nBitwise operators are used on (binary) numbers:",
      "examples": []
    },
    {
      "title": "Go Conditions",
      "summary": "Conditional statements are used to perform different actions based on different conditions.\nGo Conditions\nA condition can be either true or false.\nGo supports the usual comparison operators from mathematics:\nLess than <\nLess than or equal <=\nGreater than >\nGreater than or equal >=\nEqual to ==\nNot equal to !=\nAdditionally, Go supports the usual logical operators:\nLogical AND &&\nLogical OR ||\nLogical NOT !\nYou can use these operators or their combinations to create conditions for different decisions.\nGo has the following conditional statements:\nUse if to specify a block of code to be executed, if a specified condition is true\nUse else to specify a block of code to be executed, if the same condition is false\nUse else if to specify a new condition to test, if the first condition is false\nUse switch to specify many alternative blocks of code to be executed",
      "examples": [
        "true",
        "false",
        "<",
        "<=",
        ">",
        ">=",
        "==",
        "!=",
        "&&",
        "||",
        "!",
        "if",
        "else",
        "else if",
        "switch"
      ]
    },
    {
      "title": "Go if statement",
      "summary": "The if Statement\nUse the if statement to specify a block of Go code to be executed if a condition is true.\nSyntax\nNote that if is in lowercase letters. Uppercase letters (If or IF) will generate an error.\nIn the example below, we test two values to find out if 20 is greater than 18. If the condition is true, print some text:\nExample\nWe can also test variables:\nExample\nIn the example above we use two variables, x and y, to test whether x is greater than y (using the > operator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that \"x is greater than y\".\nREMOVE ADS\nGo Exercises\nTest Yourself With Exercises\nExercise:\nPrint \"Hello World\" if x is greater than y.\nStart the Exercise",
      "examples": [
        "if condition {\n// code to be executed if condition is true\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nif 20 > 18 {\nfmt.Println(\"20 is greater than 18\")\n}\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nx:= 20\ny:= 18\nif x > y {\nfmt.Println(\"x is greater than y\")\n}\n}",
        "package main import (\"fmt\")\nfunc main() { var x = 50 var y = 10 x y { fmt.Print(\"Hello World\") } }",
        "if",
        "true",
        ">"
      ]
    },
    {
      "title": "Go if else Statement",
      "summary": "The else Statement\nUse the else statement to specify a block of code to be executed if the condition is false.\nSyntax\nUsing The if else Statement\nExample\nIn this example, time (20) is greater than 18, so the if condition is false. Because of this, we move on to the else condition and print to the screen \"Good evening\". If the time was less than 18, the program would print \"Good day\":\nExample\nIn this example, the temperature is 14 so the condition for if is false so the code line inside the else statement is executed:\nThe brackets in the else statement should be like } else {:\nExample\nHaving the else brackets in a different line will raise an error:\nResult:",
      "examples": [
        "if condition {\n// code to be executed if condition is true\n} else {\n// code to be executed if condition is false\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\ntime := 20\nif (time < 18) {\nfmt.Println(\"Good day.\")\n} else {\nfmt.Println(\"Good evening.\")\n}\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\ntemperature := 14\nif (temperature > 15) {\nfmt.Println(\"It is warm out there\")\n} else {\nfmt.Println(\"It is cold out there\")\n}\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\ntemperature := 14\nif (temperature > 15) {\nfmt.Println(\"It is warm out there.\")\n} // this raises an error\nelse {\nfmt.Println(\"It is cold out there.\")\n}\n}",
        "else",
        "false",
        "if",
        "} else {",
        "./prog.go:9:3: syntax error: unexpected else, expecting }"
      ]
    },
    {
      "title": "Go else if Statement",
      "summary": "The else if Statement\nUse the else if statement to specify a new condition if the first condition is false.\nSyntax\nUsing The else if Statement\nExample\nThis example shows how to use an else if statement.\nResult:\nIn the example above, time (22) is greater than 10, so the first condition is false. The next condition, in the else if statement, is also false, so we move on to else condition since condition1 and condition2 are both false - and print to the screen \"Good evening\".\nHowever, if the time was 14, our program would print \"Good day.\"\nExample\nAnother example for the use of else if.\nResult:\nExample\nNote: If condition1 and condition2 are BOTH true, only the code for condition1 are executed:\nResult:",
      "examples": [
        "if condition1 {\n// code to be executed if condition1 is true\n} else if condition2 {\n// code to be executed if condition1 is false and condition2 is true\n} else {\n// code to be executed if condition1 and condition2 are both false\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\ntime := 22\nif time < 10 {\nfmt.Println(\"Good morning.\")\n} else if time < 20 {\nfmt.Println(\"Good day.\")\n} else {\nfmt.Println(\"Good evening.\")\n}\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\na := 14\nb := 14\nif a < b {\nfmt.Println(\"a is less than b.\")\n} else if a > b {\nfmt.Println(\"a is more than b.\")\n} else {\nfmt.Println(\"a and b are equal.\")\n}\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nx := 30\nif x >= 10 {\nfmt.Println(\"x is larger than or equal to 10.\")\n} else if x > 20 {\nfmt.Println(\"x is larger than 20.\")\n} else {\nfmt.Println(\"x is less than 10.\")\n}\n}",
        "else if",
        "false",
        "Good evening.",
        "else",
        "a and b are equal.",
        "x is larger than or equal to 10."
      ]
    },
    {
      "title": "Go Nested if Statement",
      "summary": "The Nested if Statement\nYou can have if statements inside if statements, this is called a nested if.\nSyntax\nExample\nThis example shows how to use nested if statements:\nResult:",
      "examples": [
        "if condition1 {\n// code to be executed if condition1 is true\nif condition2 {\n// code to be executed if both condition1 and condition2 are true\n}\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nnum := 20\nif num >= 10 {\nfmt.Println(\"Num is more than 10.\")\nif num > 15 {\nfmt.Println(\"Num is also more than 15.\")\n}\n} else {\nfmt.Println(\"Num is less than 10.\")\n}\n}",
        "if",
        "Num is more than 10.\nNum is also more than 15."
      ]
    },
    {
      "title": "Go switch Statement",
      "summary": "The switch Statement\nUse the switch statement to select one of many code blocks to be executed.\nThe switch statement in Go is similar to the ones in C, C++, Java, JavaScript, and PHP. The difference is that it only runs the matched case so it does not need a break statement.\nSingle-Case switch Syntax\nSyntax\nThis is how it works:\nThe expression is evaluated once\nThe value of the switch expression is compared with the values of each case\nIf there is a match, the associated block of code is executed\nThe default keyword is optional. It specifies some code to run if there is no case match\nSingle-Case switch Example\nThe example below uses a weekday number to calculate the weekday name:\nExample\nResult:\nREMOVE ADS\nThe default Keyword\nThe default keyword specifies some code to run if there is no case match:\nExample\nResult:\nAll the case values should have the same type as the switch expression. Otherwise, the compiler will raise an error:\nExample\nResult:\nGo Exercises\nTest Yourself With Exercises\nExercise:\nInsert the missing parts to complete the following switch statement.\nStart the Exercise",
      "examples": [
        "switch expression {\ncase x:\n// code block\ncase y:\n// code block\ncase z:\n...\ndefault:\n// code block\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nday := 4\n\nswitch day {\ncase 1:\nfmt.Println(\"Monday\")\ncase 2:\nfmt.Println(\"Tuesday\")\ncase 3:\nfmt.Println(\"Wednesday\")\ncase 4:\nfmt.Println(\"Thursday\")\ncase 5:\nfmt.Println(\"Friday\")\ncase 6:\nfmt.Println(\"Saturday\")\ncase 7:\nfmt.Println(\"Sunday\")\n}\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nday := 8\n\nswitch day {\ncase 1:\nfmt.Println(\"Monday\")\ncase 2:\nfmt.Println(\"Tuesday\")\ncase 3:\nfmt.Println(\"Wednesday\")\ncase 4:\nfmt.Println(\"Thursday\")\ncase 5:\nfmt.Println(\"Friday\")\ncase 6:\nfmt.Println(\"Saturday\")\ncase 7:\nfmt.Println(\"Sunday\")\ndefault:\nfmt.Println(\"Not a weekday\")\n}\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\na := 3\n\nswitch a {\ncase 1:\nfmt.Println(\"a is one\")\ncase \"b\":\nfmt.Println(\"a is b\")\n}\n}",
        "package main import (\"fmt\")\nfunc main() { var day = 2 switch { (1): fmt.Print(\"Saturday\") (2): fmt.Print(\"Sunday\") } }",
        "switch",
        "break",
        "case",
        "default",
        "Thursday",
        "Not a weekday",
        "./prog.go:11:2: cannot use \"b\" (type untyped string) as type int"
      ]
    },
    {
      "title": "Go Multi-case switch Statement",
      "summary": "The Multi-case switch Statement\nIt is possible to have multiple values for each case in the switch statement:\nSyntax\nMulti-case switch Example\nThe example below uses the weekday number to return different text:\nExample\nResult:",
      "examples": [
        "switch expression {\ncase x,y:\n// code block if expression is evaluated to x or y\ncase v,w:\n// code block if expression is evaluated to v or w\ncase z:\n...\ndefault:\n// code block if expression is not found in any cases\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nday := 5\n\nswitch day {\ncase 1,3,5:\nfmt.Println(\"Odd weekday\")\ncase 2,4:\nfmt.Println(\"Even weekday\")\ncase 6,7:\nfmt.Println(\"Weekend\")\ndefault:\nfmt.Println(\"Invalid day of day number\")\n}\n}",
        "case",
        "switch",
        "Odd weekday"
      ]
    },
    {
      "title": "Go For Loops",
      "summary": "The for loop loops through a block of code a specified number of times.\nThe for loop is the only loop available in Go.\nGo for Loop\nLoops are handy if you want to run the same code over and over again, each time with a different value.\nEach execution of a loop is called an iteration.\nThe for loop can take up to three statements:\nSyntax\nstatement1 Initializes the loop counter value.\nstatement2 Evaluated for each loop iteration. If it evaluates to TRUE, the loop continues. If it evaluates to FALSE, the loop ends.\nstatement3 Increases the loop counter value.\nNote: These statements don't need to be present as loops arguments. However, they need to be present in the code in some form.\nfor Loop Examples\nExample 1\nThis example will print the numbers from 0 to 4:\nResult:\ni:=0; - Initialize the loop counter (i), and set the start value to 0\ni < 5; - Continue the loop as long as i is less than 5\ni++ - Increase the loop counter value by 1 for each iteration\nExample 2\nThis example counts to 100 by tens:\nResult:\ni:=0; - Initialize the loop counter (i), and set the start value to 0\ni <= 100; - Continue the loop as long as i is less than or equal to 100\ni+=10 - Increase the loop counter value by 10 for each iteration\nREMOVE ADS\nThe continue Statement\nThe continue statement is used to skip one or more iterations in the loop. It then continues with the next iteration in the loop.\nExample\nThis example skips the value of 3:\nResult:\nThe break Statement\nThe break statement is used to break/terminate the loop execution.\nExample\nThis example breaks out of the loop when i is equal to 3:\nResult:\nNote: continue and break are usually used with conditions.\nNested Loops\nIt is possible to place a loop inside another loop.\nHere, the \"inner loop\" will be executed one time for each iteration of the \"outer loop\":\nExample\nResult:\nThe Range Keyword\nThe range keyword is used to more easily iterate through the elements of an array, slice or map. It returns both the index and the value.\nThe range keyword is used like this:\nSyntax\nExample\nThis example uses range to iterate over an array and print both the indexes and the values at each (idx stores the index, val stores the value):\nResult:\nTip: To only show the value or the index, you can omit the other output using an underscore (_).\nExample\nHere, we want to omit the indexes (idx stores the index, val stores the value):\nResult:\nExample\nHere, we want to omit the values (idx stores the index, val stores the value):\nResult:\nGo Exercises\nTest Yourself With Exercises\nExercise:\nPrint i as long as i is less than 6.\nStart the Exercise",
      "examples": [
        "for statement1; statement2; statement3 {\n// code to be executed for each iteration\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nfor i:=0; i < 5; i++ {\nfmt.Println(i)\n}\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nfor i:=0; i <= 100; i+=10 {\nfmt.Println(i)\n}\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nfor i:=0; i < 5; i++ {\nif i == 3 {\ncontinue\n}\nfmt.Println(i)\n}\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nfor i:=0; i < 5; i++ {\nif i == 3 {\nbreak\n}\nfmt.Println(i)\n}\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nadj := [2]string{\"big\", \"tasty\"}\nfruits := [3]string{\"apple\", \"orange\", \"banana\"}\nfor i:=0; i < len(adj); i++ {\nfor j:=0; j < len(fruits); j++ {\nfmt.Println(adj[i],fruits[j])\n}\n}\n}",
        "for index, value := range array|slice|map {\n// code to be executed for each iteration\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nfruits := [3]string{\"apple\", \"orange\", \"banana\"}\nfor idx, val := range fruits {\nfmt.Printf(\"%v\\t%v\\n\", idx, val)\n}\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nfruits := [3]string{\"apple\", \"orange\", \"banana\"}\nfor _, val := range fruits {\nfmt.Printf(\"%v\\n\", val)\n}\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nfruits := [3]string{\"apple\", \"orange\", \"banana\"}\n\nfor idx, _ := range fruits {\nfmt.Printf(\"%v\\n\", idx)\n}\n}",
        "package main import (\"fmt\")\nfunc main() { i:=0; i < 6; { fmt.Println(i) } }",
        "for",
        "0\n1\n2\n3\n4",
        "0\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100",
        "continue",
        "0\n1\n2\n4",
        "break",
        "0\n1\n2",
        "big apple\nbig orange\nbig banana\ntasty apple\ntasty orange\ntasty banana",
        "range",
        "idx",
        "val",
        "0      apple\n1      orange\n2      banana",
        "_",
        "apple\norange\nbanana"
      ]
    },
    {
      "title": "Go Functions",
      "summary": "A function is a block of statements that can be used repeatedly in a program.\nA function will not execute automatically when a page loads.\nA function will be executed by a call to the function.\nCreate a Function\nTo create (often referred to as declare) a function, do the following:\nUse the func keyword.\nSpecify a name for the function, followed by parentheses ().\nFinally, add code that defines what the function should do, inside curly braces {}.\nSyntax\nCall a Function\nFunctions are not executed immediately. They are \"saved for later use\", and will be executed when they are called.\nIn the example below, we create a function named \"myMessage()\". The opening curly brace ( { ) indicates the beginning of the function code, and the closing curly brace ( } ) indicates the end of the function. The function outputs \"I just got executed!\". To call the function, just write its name followed by two parentheses ():\nExample\nResult:\nA function can be called multiple times.\nExample\nResult:\nREMOVE ADS\nNaming Rules for Go Functions\nA function name must start with a letter\nA function name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )\nFunction names are case-sensitive\nA function name cannot contain spaces\nIf the function name consists of multiple words, techniques introduced for multi-word variable naming can be used\nTip: Give the function a name that reflects what the function does!\nGo Exercises\nTest Yourself With Exercises\nExercise:\nCreate a function named myFunction and call it inside main().\nStart the Exercise",
      "examples": [
        "func FunctionName() {\n// code to be executed\n}",
        "package main\nimport (\"fmt\")\n\nfunc myMessage() {\nfmt.Println(\"I just got executed!\")\n}\n\nfunc main() {\nmyMessage() // call the function\n}",
        "package main\nimport (\"fmt\")\n\nfunc myMessage() {\nfmt.Println(\"I just got executed!\")\n}\n\nfunc main() {\nmyMessage()\nmyMessage()\nmyMessage()\n}",
        "package main import (\"fmt\")\nfunc { fmt.Println(\"I just got executed!\") }\nfunc main() { }",
        "func",
        "I just got executed!",
        "I just got executed!\nI just got executed!\nI just got executed!",
        "A-z",
        "0-9",
        "_"
      ]
    },
    {
      "title": "Go Function Parameters and Arguments",
      "summary": "Parameters and Arguments\nInformation can be passed to functions as a parameter. Parameters act as variables inside the function.\nParameters and their types are specified after the function name, inside the parentheses. You can add as many parameters as you want, just separate them with a comma:\nSyntax\nFunction With Parameter Example\nThe following example has a function with one parameter (fname) of type string. When the familyName() function is called, we also pass along a name (e.g. Liam), and the name is used inside the function, which outputs several different first names, but an equal last name:\nExample\nResult:\nNote: When a parameter is passed to the function, it is called an argument. So, from the example above: fname is a parameter, while Liam, Jenny and Anja are arguments.\nREMOVE ADS\nMultiple Parameters\nInside the function, you can add as many parameters as you want:\nExample\nResult:\nNote: When you are working with multiple parameters, the function call must have the same number of arguments as there are parameters, and the arguments must be passed in the same order.",
      "examples": [
        "func FunctionName(param1 type, param2 type, param3 type) {\n// code to be executed\n}",
        "package main\nimport (\"fmt\")\n\nfunc familyName(fname string) {\nfmt.Println(\"Hello\", fname, \"Refsnes\")\n}\n\nfunc main() {\nfamilyName(\"Liam\")\nfamilyName(\"Jenny\")\nfamilyName(\"Anja\")\n}",
        "package main\nimport (\"fmt\")\n\nfunc familyName(fname string, age int) {\nfmt.Println(\"Hello\", age, \"year old\", fname, \"Refsnes\")\n}\n\nfunc main() {\nfamilyName(\"Liam\", 3)\nfamilyName(\"Jenny\", 14)\nfamilyName(\"Anja\", 30)\n}",
        "fname",
        "string",
        "Hello Liam Refsnes\nHello Jenny Refsnes\nHello Anja Refsnes",
        "Liam",
        "Jenny",
        "Anja",
        "Hello 3 year old Liam Refsnes\nHello 14 year old Jenny Refsnes\nHello 30 year old Anja Refsnes"
      ]
    },
    {
      "title": "Go Function Returns",
      "summary": "Return Values\nIf you want the function to return a value, you need to define the data type of the return value (such as int, string, etc), and also use the return keyword inside the function:\nSyntax\nFunction Return Example\nExample\nHere, myFunction() receives two integers (x and y) and returns their addition (x + y) as integer (int):\nResult:\nNamed Return Values\nIn Go, you can name the return values of a function.\nExample\nHere, we name the return value as result (of type int), and return the value with a naked return (means that we use the return statement without specifying the variable name):\nResult:\nThe example above can also be written like this. Here, the return statement specifies the variable name:\nExample\nREMOVE ADS\nStore the Return Value in a Variable\nYou can also store the return value in a variable, like this:\nExample\nHere, we store the return value in a variable called total:\nMultiple Return Values\nGo functions can also return multiple values.\nExample\nHere, myFunction() returns one integer (result) and one string (txt1):\nResult:\nExample\nHere, we store the two return values into two variables (a and b):\nResult:\nIf we (for some reason) do not want to use some of the returned values, we can add an underscore (_), to omit this value.\nExample\nHere, we want to omit the first returned value (result - which is stored in variable a):\nResult:\nExample\nHere, we want to omit the second returned value (txt1 - which is stored in variable b):\nResult:",
      "examples": [
        "func FunctionName(param1 type, param2 type) type {\n// code to be executed\nreturn output\n}",
        "package main\nimport (\"fmt\")\n\nfunc myFunction(x int, y int) int {\nreturn x + y\n}\n\nfunc main() {\nfmt.Println(myFunction(1, 2))\n}",
        "package main\nimport (\"fmt\")\n\nfunc myFunction(x int, y int) (result int) {\nresult = x + y\nreturn\n}\n\nfunc main() {\nfmt.Println(myFunction(1, 2))\n}",
        "package main\nimport (\"fmt\")\n\nfunc myFunction(x int, y int) (result int) {\nresult = x + y\nreturn result\n}\n\nfunc main() {\nfmt.Println(myFunction(1, 2))\n}",
        "package main\nimport (\"fmt\")\n\nfunc myFunction(x int, y int) (result int) {\nresult = x + y\nreturn\n}\n\nfunc main() {\ntotal := myFunction(1, 2)\nfmt.Println(total)\n}",
        "package main\nimport (\"fmt\")\n\nfunc myFunction(x int, y string) (result int, txt1 string) {\nresult = x + x\ntxt1 = y + \" World!\"\nreturn\n}\n\nfunc main() {\nfmt.Println(myFunction(5, \"Hello\"))\n}",
        "package main\nimport (\"fmt\")\n\nfunc myFunction(x int, y string) (result int, txt1 string) {\nresult = x + x\ntxt1 = y + \" World!\"\nreturn\n}\n\nfunc main() {\na, b := myFunction(5, \"Hello\")\nfmt.Println(a, b)\n}",
        "package main\nimport (\"fmt\")\n\nfunc myFunction(x int, y string) (result int, txt1 string) {\nresult = x + x\ntxt1 = y + \" World!\"\nreturn\n}\n\nfunc main() {\n_, b := myFunction(5, \"Hello\")\nfmt.Println(b)\n}",
        "int",
        "string",
        "return",
        "myFunction()",
        "x",
        "y",
        "x + y",
        "3",
        "result",
        "total",
        "txt1",
        "10 Hello World!",
        "a",
        "b",
        "_",
        "Hello World!",
        "10"
      ]
    },
    {
      "title": "Go Recursion Functions",
      "summary": "Recursion Functions\nGo accepts recursion functions. A function is recursive if it calls itself and reaches a stop condition.\nIn the following example, testcount() is a function that calls itself. We use the x variable as the data, which increments with 1 (x + 1) every time we recurse. The recursion ends when the x variable equals to 11 (x == 11).\nExample\nResult:\nRecursion is a common mathematical and programming concept. This has the benefit of meaning that you can loop through data to reach a result.\nThe developer should be careful with recursion functions as it can be quite easy to slip into writing a function which never terminates, or one that uses excess amounts of memory or processor power. However, when written correctly recursion can be a very efficient and mathematically-elegant approach to programming.\nIn the following example, factorial_recursion() is a function that calls itself. We use the x variable as the data, which decrements (-1) every time we recurse. The recursion ends when the condition is not greater than 0 (i.e. when it is 0).\nExample\nResult:\nTo a new developer it can take some time to work out how exactly this works, best way to find out is by testing and modifying it.",
      "examples": [
        "package main\nimport (\"fmt\")\n\nfunc testcount(x int) int {\nif x == 11 {\nreturn 0\n}\nfmt.Println(x)\nreturn testcount(x + 1)\n}\n\nfunc main(){\ntestcount(1)\n}",
        "package main\nimport (\"fmt\")\n\nfunc factorial_recursion(x float64) (y float64) {\nif x > 0 {\ny = x * factorial_recursion(x-1)\n} else {\ny = 1\n}\nreturn\n}\n\nfunc main() {\nfmt.Println(factorial_recursion(4))\n}",
        "testcount()",
        "x",
        "x + 1",
        "x == 11",
        "1\n2\n3\n4\n5\n6\n7\n8\n9\n10",
        "factorial_recursion()",
        "24"
      ]
    },
    {
      "title": "Go Struct",
      "summary": "Go Structures\nA struct (short for structure) is used to create a collection of members of different data types, into a single variable.\nWhile arrays are used to store multiple values of the same data type into a single variable, structs are used to store multiple values of different data types into a single variable.\nA struct can be useful for grouping data together to create records.\nDeclare a Struct\nTo declare a structure in Go, use the type and struct keywords:\nSyntax\nExample\nHere we declare a struct type Person with the following members: name, age, job and salary:\nTip: Notice that the struct members above have different data types. name and job is of type string, while age and salary is of type int.\nAccess Struct Members\nTo access any member of a structure, use the dot operator (.) between the structure variable name and the structure member:\nExample\nResult:\nREMOVE ADS\nPass Struct as Function Arguments\nYou can also pass a structure as a function argument, like this:\nExample\nResult:",
      "examples": [
        "type struct_name struct {\nmember1 datatype;\nmember2 datatype;\nmember3 datatype;\n...\n}",
        "type Person struct {\nname string\nage int\njob string\nsalary int\n}",
        "package main\nimport (\"fmt\")\n\ntype Person struct {\nname string\nage int\njob string\nsalary int\n}\n\nfunc main() {\nvar pers1 Person\nvar pers2 Person\n\n// Pers1 specification\npers1.name = \"Hege\"\npers1.age = 45\npers1.job = \"Teacher\"\npers1.salary = 6000\n\n// Pers2 specification\npers2.name = \"Cecilie\"\npers2.age = 24\npers2.job = \"Marketing\"\npers2.salary = 4500\n\n// Access and print Pers1 info\nfmt.Println(\"Name: \", pers1.name)\nfmt.Println(\"Age: \", pers1.age)\nfmt.Println(\"Job: \", pers1.job)\nfmt.Println(\"Salary: \", pers1.salary)\n\n// Access and print Pers2 info\nfmt.Println(\"Name: \", pers2.name)\nfmt.Println(\"Age: \", pers2.age)\nfmt.Println(\"Job: \", pers2.job)\nfmt.Println(\"Salary: \", pers2.salary)\n}",
        "package main\nimport (\"fmt\")\n\ntype Person struct {\nname string\nage int\njob string\nsalary int\n}\n\nfunc main() {\nvar pers1 Person\nvar pers2 Person\n\n// Pers1 specification\npers1.name = \"Hege\"\npers1.age = 45\npers1.job = \"Teacher\"\npers1.salary = 6000\n\n// Pers2 specification\npers2.name = \"Cecilie\"\npers2.age = 24\npers2.job = \"Marketing\"\npers2.salary = 4500\n\n// Print Pers1 info by calling a function\nprintPerson(pers1)\n\n// Print Pers2 info by calling a function\nprintPerson(pers2)\n}\n\nfunc printPerson(pers Person) {\nfmt.Println(\"Name: \", pers.name)\nfmt.Println(\"Age: \", pers.age)\nfmt.Println(\"Job: \", pers.job)\nfmt.Println(\"Salary: \", pers.salary)\n}",
        "type",
        "struct",
        "Person",
        "name",
        "age",
        "job",
        "salary",
        "Name: Hege\nAge: 45\nJob: Teacher\nSalary: 6000\nName: Cecilie\nAge: 24\nJob: Marketing\nSalary: 4500"
      ]
    },
    {
      "title": "Go Maps",
      "summary": "Go Maps\nMaps are used to store data values in key:value pairs.\nEach element in a map is a key:value pair.\nA map is an unordered and changeable collection that does not allow duplicates.\nThe length of a map is the number of its elements. You can find it using the len() function.\nThe default value of a map is nil.\nMaps hold references to an underlying hash table.\nGo has multiple ways for creating maps.\nCreate Maps Using var and :=\nSyntax\nExample\nThis example shows how to create maps in Go. Notice the order in the code and in the output\nResult:\nNote: The order of the map elements defined in the code is different from the way that they are stored. The data are stored in a way to have efficient data retrieval from the map.\nREMOVE ADS\nCreate Maps Using the make() Function:\nSyntax\nExample\nThis example shows how to create maps in Go using the make()function.\nResult:\nCreate an Empty Map\nThere are two ways to create an empty map. One is by using the make()function and the other is by using the following syntax.\nSyntax\nNote: The make()function is the right way to create an empty map. If you make an empty map in a different way and write to it, it will causes a runtime panic.\nExample\nThis example shows the difference between declaring an empty map using with the make()function and without it.\nResult:\nAllowed Key Types\nThe map key can be of any data type for which the equality operator (==) is defined. These include:\nBooleans\nNumbers\nStrings\nArrays\nPointers\nStructs\nInterfaces (as long as the dynamic type supports equality)\nInvalid key types are:\nSlices\nMaps\nFunctions\nThese types are invalid because the equality operator (==) is not defined for them.\nAllowed Value Types\nThe map values can be any type.\nAccess Map Elements\nYou can access map elements by:\nSyntax\nExample\nResult:\nUpdate and Add Map Elements\nUpdating or adding an elements are done by:\nSyntax\nExample\nThis example shows how to update and add elements to a map.\nResult:\nRemove Element from Map\nRemoving elements is done using the delete() function.\nSyntax\nExample\nResult:\nCheck For Specific Elements in a Map\nYou can check if a certain key exists in a map using:\nSyntax\nIf you only want to check the existence of a certain key, you can use the blank identifier (_) in place of val.\nExample\nResult:\nIn this example, we checked for existence of different keys in the map.\nThe key \"color\" does not exist in the map. So the value is an empty string ('').\nThe ok2 variable is used to find out if the key exist or not. Because we would have got the same value if the value of the \"color\" key was empty. This is the case for val3.\nMaps Are References\nMaps are references to hash tables.\nIf two map variables refer to the same hash table, changing the content of one variable affect the content of the other.\nExample\nResult:\nIterate Over Maps\nYou can use range to iterate over maps.\nExample\nThis example shows how to iterate over the elements in a map. Note the order of the elements in the output.\nResult:\nIterate Over Maps in a Specific Order\nMaps are unordered data structures. If you need to iterate over a map in a specific order, you must have a separate data structure that specifies that order.\nExample\nResult:",
      "examples": [
        "var a = map[KeyType]ValueType{key1:value1, key2:value2,...}\nb := map[KeyType]ValueType{key1:value1, key2:value2,...}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar a = map[string]string{\"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": \"1964\"}\nb := map[string]int{\"Oslo\": 1, \"Bergen\": 2, \"Trondheim\": 3, \"Stavanger\": 4}\n\nfmt.Printf(\"a\\t%v\\n\", a)\nfmt.Printf(\"b\\t%v\\n\", b)\n}",
        "var a = make(map[KeyType]ValueType)\nb := make(map[KeyType]ValueType)",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar a = make(map[string]string) // The map is empty now\na[\"brand\"] = \"Ford\"\na[\"model\"] = \"Mustang\"\na[\"year\"] = \"1964\"\n// a is no longer empty\nb := make(map[string]int)\nb[\"Oslo\"] = 1\nb[\"Bergen\"] = 2\nb[\"Trondheim\"] = 3\nb[\"Stavanger\"] = 4\n\nfmt.Printf(\"a\\t%v\\n\", a)\nfmt.Printf(\"b\\t%v\\n\", b)\n}",
        "var a map[KeyType]ValueType",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar a = make(map[string]string)\nvar b map[string]string\n\nfmt.Println(a == nil)\nfmt.Println(b == nil)\n}",
        "value = map_name[key]",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar a = make(map[string]string)\na[\"brand\"] = \"Ford\"\na[\"model\"] = \"Mustang\"\na[\"year\"] = \"1964\"\n\nfmt.Printf(a[\"brand\"])\n}",
        "map_name[key] = value",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar a = make(map[string]string)\na[\"brand\"] = \"Ford\"\na[\"model\"] = \"Mustang\"\na[\"year\"] = \"1964\"\n\nfmt.Println(a)\n\na[\"year\"] = \"1970\" // Updating an element\na[\"color\"] = \"red\" // Adding an element\n\nfmt.Println(a)\n}",
        "delete(map_name, key)",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar a = make(map[string]string)\na[\"brand\"] = \"Ford\"\na[\"model\"] = \"Mustang\"\na[\"year\"] = \"1964\"\n\nfmt.Println(a)\n\ndelete(a,\"year\")\n\nfmt.Println(a)\n}",
        "val, ok :=map_name[key]",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar a = map[string]string{\"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": \"1964\", \"day\":\"\"}\n\nval1, ok1 := a[\"brand\"] // Checking for existing key and its value\nval2, ok2 := a[\"color\"] // Checking for non-existing key and its value\nval3, ok3 := a[\"day\"]   // Checking for existing key and its value\n_, ok4 := a[\"model\"]    // Only checking for existing key and not its value\n\nfmt.Println(val1, ok1)\nfmt.Println(val2, ok2)\nfmt.Println(val3, ok3)\nfmt.Println(ok4)\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\nvar a = map[string]string{\"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": \"1964\"}\nb := a\n\nfmt.Println(a)\nfmt.Println(b)\n\nb[\"year\"] = \"1970\"\nfmt.Println(\"After change to b:\")\n\nfmt.Println(a)\nfmt.Println(b)\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\na := map[string]int{\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4}\n\nfor k, v := range a {\nfmt.Printf(\"%v : %v, \", k, v)\n}\n}",
        "package main\nimport (\"fmt\")\n\nfunc main() {\na := map[string]int{\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4}\n\nvar b []string             // defining the order\nb = append(b, \"one\", \"two\", \"three\", \"four\")\n\nfor k, v := range a {        // loop with no order\nfmt.Printf(\"%v : %v, \", k, v)\n}\n\nfmt.Println()\n\nfor _, element := range b {  // loop with the defined order\nfmt.Printf(\"%v : %v, \", element, a[element])\n}\n}",
        "len()",
        "var",
        ":=",
        "a   map[brand:Ford model:Mustang year:1964]\nb   map[Bergen:2 Oslo:1 Stavanger:4 Trondheim:3]",
        "make()",
        "false\ntrue",
        "==",
        "Ford",
        "map[brand:Ford model:Mustang year:1964]\nmap[brand:Ford color:red model:Mustang year:1970]",
        "delete()",
        "map[brand:Ford model:Mustang year:1964]\nmap[brand:Ford model:Mustang]",
        "_",
        "Ford true\nfalse\ntrue\ntrue",
        "map[brand:Ford model:Mustang year:1964]\nmap[brand:Ford model:Mustang year:1964]\nAfter change to b:\nmap[brand:Ford model:Mustang year:1970]\nmap[brand:Ford model:Mustang year:1970]",
        "range",
        "two : 2, three : 3, four : 4, one : 1,",
        "two : 2, three : 3, four : 4, one : 1,\none : 1, two : 2, three : 3, four : 4,"
      ]
    },
    {
      "title": "Go Exercises",
      "summary": "You can test your Go skills with W3Schools' Exercises.\nExercises\nWe have gathered a variety of Go exercises (with answers) for each Go Chapter.\nTry to solve an exercise by editing some code, or show the answer to see what you've done wrong.\nCount Your Score\nYou will get 1 point for each correct answer. Your score and total score will always be displayed.\nStart Go Exercises\nGood luck!\nStart Go Exercises ❯\nIf you don't know Go, we suggest that you read our Go Tutorial from scratch.",
      "examples": []
    },
    {
      "title": "Go Compiler",
      "summary": "Go Compiler (Editor)\nWith our online Go compiler, you can edit Go code, and view the result in your browser.\nExample\nClick on the \"Try it Yourself\" button to see how it works.\nGo Compiler Explained\nThe window to the left is editable - edit the code and click on the \"Run\" button to view the result in the right window.\nThe icons are explained in the table below:\nIf you don't know Go, we suggest that you read our Go Tutorial from scratch.",
      "examples": [
        "package main\nimport (\"fmt\")\n\nfunc main() {\nfmt.Println(\"Hello World!\")\n}",
        "Hello World!"
      ]
    },
    {
      "title": "Go Exercises",
      "summary": "Introduction\nThe W3Schools Go Tutorial is comprehensive and beginner-friendly.\nIt will give you a fundamental knowledge of Go programming.\nIt is designed for beginners and requires no prior programming experience.\nThe content has been carefully made to be bite-sized, simple, and easy to understand.\nThe content has been proven by millions of users over the years. It is updated and improved frequently.\nThe syllabus outline and its sequence are structured so you can learn Go step by step, from the introduction to advanced features.\nGet Started With Go »\nLearning Outcomes\nUnderstand Go fundamentals and basic syntax\nWork with Go variables and data types (Boolean, Integer, Float, String)\nCreate and manipulate arrays and slices\nUse Go operators (Arithmetic, Assignment, Comparison, Logical, Bitwise)\nImplement control structures (if statements, switch, loops)\nCreate and work with functions (parameters, returns, recursion)\nUnderstand and implement structs\nWork with Go maps for key-value storage\nNote: Are you a teacher teaching Go? W3Schools Academy is a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more about Academy here.\nWhich Subjects Are Go Relevant For?\nBackend Development:\nGo is excellent for building server-side applications.\nCloud Computing:\nGo is widely used in cloud infrastructure.\nSystem Programming:\nGo provides low-level system access.\nMicroservices:\nGo excels at building microservices.\nDevOps:\nGo is popular for DevOps tooling.\nNetwork Programming:\nGo has strong networking capabilities.\nConcurrent Programming:\nGo makes concurrent programming simple.\nGet Started\nActivities\nIn this tutorial we offer different activities for you to learn Go for free:\nLessons\nExercises\nSign in to Track Progress\nYou can also create a free account to track your progress.\nAs a signed-in user, you get access to features such as:\nLearning paths\nSandbox and lab environments\nAchievements\nAnd much more!\nSign Up - It's free\nOverview of the Modules\nGo Home\nGo Introduction\nGo Get Started\nGo Syntax\nGo Comments\nGo Variables\nDeclare Multiple Variables\nNaming Rules\nGo Constants\nGo Output\nFormatting Verbs\nGo Data Types\nBoolean\nInteger\nFloat\nString\nGo Arrays\nGo Slices\nModify Slice\nGo Operators\nArithmetic\nAssignment\nComparison\nLogical\nBitwise\nGo Conditions\nif Statement\nif else Statement\nelse if Statement\nNested if\nGo Switch\nMulti-case\nGo Loops\nGo Functions\nParameters/Arguments\nFunction Returns\nRecursion\nGo Struct\nGo Maps\nGet Started\nSandbox and Lab Environment\nGo, like any programming language, is best learned through hands-on practice.\nTry this example using our editor:\nExample\nThe Try It's Yourself feature is available for you to throughout the tutorial.\nGo Certification\nW3Schools offers an end-of-pathway certification program.\nHere you can take exams to get certified.\nThe Go exam is a test that summarizes the W3Schools Go syllabus.\nAfter passing the exam you get the \"Certified Go Developer\" Certification.\nThe certification exam is adaptive and graded; students will get a grade from intermediate, advanced to professional.\nBuy Certificate »\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach Go?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo »",
      "examples": [
        "package main\nimport (\"fmt\")\n\nfunc main() {\nfmt.Println(\"Hello World!\")\n}"
      ]
    },
    {
      "title": "Go Study Plan",
      "summary": "Introduction\nThe Go study plan helps you teach your students Go step-by-step.\nCreating a study plan for Go is easy.\nYou can use a pre-built study plan or customize it.\nStudents have different skill levels. The study plans can be customized to ensure that everyone is challenged.\nSave time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of Go to the final exam.\nW3Schools Academy\nThis study plan is a feature of W3Schools Academy.\nW3Schools Academy is a platform that has everything you need to teach coding, all in one place.\nIt offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom.\nYou need to have an active subscription to access the study plan feature. There are two different subscription tiers:\nEssentials ($1.99 / month per student)\nFull Access ($5.99 / month per student)\nCalculate your price and order here.\nLearn More »\nAcademy also offer other features such as:\nManaging your classroom\nTracking of student progress and reports\nLabs, assignments, and code challenges (prebuilt challenges or create your own ones)\nAuto-grading\nTeaching materials\nCertification exams\nGet a free demo »\nTeacher Materials\nW3Schools has everything you need to teach Go.\nThe Go training materials is available for you to include and use in your study plan:\nW3Schools Go Tutorial\nGo Exercises\nGo Challenges (Coding challenges)\nGo Certification Exam (End of Pathway Exam)\nGo Syllabus\nWith the Go Syllabus, your students will start with the basics, like understanding variables, data types, and simple syntax, and move to more advanced topics, like working with functions, packages, and concurrency. Each chapter includes simple examples, try-it-yourself sections, exercises, and quizzes to make learning easy, interactive, and fun.\nRead more about Go Syllabus.\nStudy Plan Overview\nThe study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level.\nLearning Paths\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nInteractive Content\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTimeline and Pace\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nTrack Student Progress\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nEnd of Pathway Exam\nThe Go study plan aligns with the Go Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the Go Tutorial.\nYou get reports of the students' results.\nThe Go study plan aligns with the Go Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the Go Tutorial.\nYou get reports of the students' results.\nAccessibility\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nLearn More »\nSample Study Plan\nYou choose the timeline and pace of your study plans.\nSchools have different preferences.\nSome would like more intensive pace, e.g. 3 weeks, others 12 or more weeks.\nIt is completely up to you.\nFor example, this is how a 5-week Go study plan could look like:\nWeek 1: Introduction, Variables, Constants\nWeek 2: Output, Data Types, Arrays, Slices, Operators\nWeek 3: Conditions, Switch, Functions, Loops, Struct & Maps, Exam Practice, Go Certification Exam\nImage of Sample Go study plan:\nReady to get started?\nStart with Go Study Plans today.\nGet Started »\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach Go programming?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo »",
      "examples": []
    },
    {
      "title": "W3Schools Go Certificate",
      "summary": "W3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nW3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nWho Should Consider Getting Certified?\nAny student or professional within the digital industry.\nCertifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market.\nW3Schools is Trusted by Top Companies\nW3Schools has over two decades of experience with teaching coding online.\nOur certificates are recognized and valued by companies looking to employ skilled developers.\nSave Time and Money\nShow the world your coding skills by getting a certification.\nThe prices is a small fraction compared to the price of traditional education.\nDocument and validate your competence by getting certified!\nExam overview\nFee: 95 USD\nAchievable certification levels:\nIntermediate (40%)\nAdvanced (75%)\nProfessional (90%)\nNumber of questions:\nAdaptive, 60 on average\nRequirement to pass:\nMinimum 40% - Intermediate level\nTime limit: 60 minutes\nNumber of attempts to pass: 3\nExam deadline: None\nCertification Expiration: None\nFormat: Online, multiple choice\nRegister now »\nAdvance Faster in Your Career\nGetting a certificate proves your commitment to upgrading your skills.\nThe certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on.\nIt gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nKnowledge is power, especially in the current job market.\nDocumentation of your skills enables you to advance your career or helps you to start a new one.\nHow Does It Work?\nStudy for free at W3Schools.com\nStudy at your own speed\nTest your skills with W3Schools online quizzes\nApply for your certificate by paying an exam fee\nTake your exam online, at any time, and from any location\nGet Your Certificate and Share It With The World\nExample certificate:\nEach certificate gets a unique link that can be shared with others.\nValidate your certification with the link or QR code.\nCheck how it looks like in this Example.\nShare your certificate on Linked in the Certifications section in just one click!\nDocument Your Skills\nGetting a certificate proves your commitment to upgrade your skills, gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nGet Your Certificate »\nLooking to add multiple users?\nAre you an educator, manager or business owner looking for courses or certifications?\nWe are working with schools, companies and organizations from all over the world.\nGet courses and/or certifications for your team here.",
      "examples": []
    }
  ],
  "glossary": [
    "arithmetic",
    "assignment",
    "backend",
    "bitwise",
    "boolean",
    "comparison",
    "exercise",
    "exercises",
    "float",
    "formatting verbs",
    "free",
    "function returns",
    "go arrays",
    "go comments",
    "go compiler",
    "go conditions",
    "go constants",
    "go exercises",
    "go functions",
    "go home",
    "go loops",
    "go maps",
    "go operators",
    "go output",
    "go slices",
    "go struct",
    "go switch",
    "go syllabus",
    "go syntax",
    "go variables",
    "if statement",
    "integer",
    "javascript",
    "logical",
    "modify slice",
    "multi-case",
    "naming rules",
    "nested if",
    "note",
    "parameters arguments",
    "programs",
    "recursion",
    "report error",
    "string",
    "w3.css",
    "w3schools spaces"
  ],
  "objectives": [
    "View your completed tutorials, exercises, and quizzes",
    "Keep an eye on your progress and daily streaks",
    "Set goals and create learning paths",
    "Create your own personal website"
  ]
}