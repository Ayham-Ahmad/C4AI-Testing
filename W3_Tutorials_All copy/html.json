{
  "course_name": "Html",
  "description": "HTML is the standard markup language for Web pages. With HTML you can create your own Website. HTML is easy to learn - You will enjoy it! Study our HTML Tutorial for free,\nno registration needed. Upgrade your learning with our\ninteractive HTML Course and Get Certified. Tip: Sign in to track your progress - it's free. With our \"Try it Yourself\" editor, you can edit the HTML code and view the result in the browser: Click on the \"Try it Yourself\" button to see how it works. This tutorial supplements all explanations with clarifying examples. See all HTML Examples REMOVE ADS Many chapters in this tutorial end with an exercise where you can check your level of knowledge. See all HTML Exercises Test your HTML skills with our HTML Quiz! Start HTML Quiz! Sign Up for Free Note: This is an optional feature. You can study at W3Schools without creating an account. At W3Schools you will find complete references about HTML elements, attributes, events, color names, entities, character-sets, URL enco",
  "course_summary": [
    {
      "title": "HTML Introduction",
      "summary": "HTML is the standard markup language for creating Web pages.\nWhat is HTML?\nHTML stands for Hyper Text Markup Language\nHTML is the standard markup language for creating Web pages\nHTML describes the structure of a Web page\nHTML consists of a series of elements\nHTML elements tell the browser how to display the content\nHTML elements label pieces of content such as \"this is a heading\", \"this is a paragraph\", \"this is a link\", etc.\nA Simple HTML Document\nExample\nExample Explained\nThe <!DOCTYPE html> declaration defines that this document is an HTML5 document\nThe <html> element is the root element of an HTML page\nThe <head> element contains meta information about the HTML page\nThe <title> element specifies a title for the HTML page (which is shown in the browser's title bar or in the page's tab)\nThe <body> element defines the document's body, and is a container for all the visible contents, such as headings, paragraphs, images, hyperlinks, tables, lists, etc.\nThe <h1> element defines a large heading\nThe <p> element defines a paragraph\nWhat is an HTML Element?\nAn HTML element is defined by a start tag, some content, and an end tag:\nThe HTML element is everything from the start tag to the end tag:\nNote: Some HTML elements have no content (like the <br> element). These elements are called empty elements. Empty elements do not have an end tag!\nREMOVE ADS\nWeb Browsers\nThe purpose of a web browser (Chrome, Edge, Firefox, Safari) is to read HTML documents and display them correctly.\nA browser does not display the HTML tags, but uses them to determine how to display the document:\nHTML Page Structure\nBelow is a visualization of an HTML page structure:\nNote: The content inside the <body> section will be displayed in a browser. The content inside the <title> element will be shown in the browser's title bar or in the page's tab.\nHTML History\nSince the early days of the World Wide Web, there have been many versions of HTML:\nThis tutorial follows the latest HTML5 standard.\nVideo: HTML Introduction",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<head>\n<title>Page Title</title>\n</head>\n<body>\n\n<h1>My First Heading</h1>\n<p>My first paragraph.</p>\n\n</body>\n</html>",
        "<!DOCTYPE html>",
        "<html>",
        "<head>",
        "<title>",
        "<body>",
        "<h1>",
        "<p>"
      ]
    },
    {
      "title": "HTML Editors",
      "summary": "A simple text editor is all you need to learn HTML.\nLearn HTML Using Notepad or TextEdit\nWeb pages can be created and modified by using professional HTML editors.\nHowever, for learning HTML we recommend a simple text editor like Notepad (PC) or TextEdit (Mac).\nWe believe that using a simple text editor is a good way to learn HTML.\nFollow the steps below to create your first web page with Notepad or TextEdit.\nStep 1: Open Notepad (PC)\nWindows 8 or later:\nOpen the Start Screen (the window symbol at the bottom left on your screen). Type Notepad.\nWindows 7 or earlier:\nOpen Start > Programs > Accessories > Notepad\nStep 1: Open TextEdit (Mac)\nOpen Finder > Applications > TextEdit\nAlso change some preferences to get the application to save files correctly. In Preferences > Format > choose \"Plain Text\"\nThen under \"Open and Save\", check the box that says \"Display HTML files as HTML code instead of formatted text\".\nThen open a new document to place the code.\nStep 2: Write Some HTML\nWrite or copy the following HTML code into Notepad:\nREMOVE ADS\nStep 3: Save the HTML Page\nSave the file on your computer. Select File > Save as in the Notepad menu.\nName the file \"index.htm\" and set the encoding to UTF-8 (which is the preferred encoding for HTML files).\nTip: You can use either .htm or .html as file extension. There is no difference; it is up to you.\nStep 4: View the HTML Page in Your Browser\nOpen the saved HTML file in your favorite browser (double click on the file, or right-click - and choose \"Open with\").\nThe result will look much like this:\nW3Schools Online Editor - \"Try it Yourself\"\nWith our free online editor, you can edit the HTML code and view the result in your browser.\nIt is the perfect tool when you want to test code fast. It also has color coding and the ability to save and share code with others:\nExample\nClick on the \"Try it Yourself\" button to see how it works.\nW3Schools Spaces\nIf you want to create your own website and save your code online, try our free website builder, called W3schools Spaces:\nW3Schools Spaces\nW3Schools Spaces\nEverything you need right in the browser.\nVideo: HTML Editors",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<body>\n\n<h1>My First Heading</h1>\n\n<p>My first paragraph.</p>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<head>\n<title>Page Title</title>\n</head>\n<body>\n\n<h1>This is a Heading</h1>\n<p>This is a paragraph.</p>\n\n</body>\n</html>"
      ]
    },
    {
      "title": "HTML Basic Examples",
      "summary": "In this chapter we will show some basic HTML examples.\nDon't worry if we use tags you have not learned about yet.\nHTML Documents\nAll HTML documents must start with a document type declaration: <!DOCTYPE html>.\nThe HTML document itself begins with <html> and ends with </html>.\nThe visible part of the HTML document is between <body> and </body>.\nExample\nThe <!DOCTYPE> Declaration\nThe <!DOCTYPE> declaration represents the document type, and helps browsers to display web pages correctly.\nIt must only appear once, at the top of the page (before any HTML tags).\nThe <!DOCTYPE> declaration is not case sensitive.\nThe <!DOCTYPE> declaration for HTML5 is:\nHTML Headings\nHTML headings are defined with the <h1> to <h6> tags.\n<h1> defines the most important heading. <h6> defines the least important heading:\nExample\nREMOVE ADS\nHTML Paragraphs\nHTML paragraphs are defined with the <p> tag:\nExample\nHTML Links\nHTML links are defined with the <a> tag:\nExample\nThe link's destination is specified in the href attribute.\nAttributes are used to provide additional information about HTML elements.\nYou will learn more about attributes in a later chapter.\nHTML Images\nHTML images are defined with the <img> tag.\nThe source file (src), alternative text (alt), width, and height are provided as attributes:\nExample\nHow to View HTML Source\nHave you ever seen a Web page and wondered \"Hey! How did they do that?\"\nView HTML Source Code:\nClick CTRL + U in an HTML page, or right-click on the page and select \"View Page Source\". This will open a new tab containing the HTML source code of the page.\nInspect an HTML Element:\nRight-click on an element (or a blank area), and choose \"Inspect\" to see what elements are made up of (you will see both the HTML and the CSS). You can also edit the HTML or CSS on-the-fly in the Elements or Styles panel that opens.",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<body>\n\n<h1>My First Heading</h1>\n<p>My first paragraph.</p>\n\n</body>\n</html>",
        "<!DOCTYPE html>",
        "<h1>This is heading 1</h1>\n<h2>This is heading 2</h2>\n<h3>This is heading 3</h3>",
        "<p>This is a paragraph.</p>\n<p>This is another paragraph.</p>",
        "<a href=\"https://www.w3schools.com\">This is a link</a>",
        "<img src=\"w3schools.jpg\" alt=\"W3Schools.com\" width=\"104\" height=\"142\">",
        "<html>",
        "</html>",
        "<body>",
        "</body>",
        "<!DOCTYPE>",
        "<h1>",
        "<h6>",
        "<p>",
        "<a>",
        "href",
        "<img>",
        "src",
        "alt",
        "width",
        "height"
      ]
    },
    {
      "title": "HTML Elements",
      "summary": "An HTML element is defined by a start tag, some content, and an end tag.\nHTML Elements\nThe HTML element is everything from the start tag to the end tag:\nExamples of some HTML elements:\nNote: Some HTML elements have no content (like the <br> element). These elements are called empty elements. Empty elements do not have an end tag!\nNested HTML Elements\nHTML elements can be nested (this means that elements can contain other elements).\nAll HTML documents consist of nested HTML elements.\nThe following example contains four HTML elements (<html>, <body>, <h1> and <p>):\nExample\nExample Explained\nThe <html> element is the root element and it defines the whole HTML document.\nIt has a start tag <html> and an end tag </html>.\nThen, inside the <html> element there is a <body> element:\nThe <body> element defines the document's body.\nIt has a start tag <body> and an end tag </body>.\nThen, inside the <body> element there are two other elements: <h1> and <p>:\nThe <h1> element defines a heading.\nIt has a start tag <h1> and an end tag </h1>:\nThe <p> element defines a paragraph.\nIt has a start tag <p> and an end tag </p>:\nREMOVE ADS\nNever Skip the End Tag\nSome HTML elements will display correctly, even if you forget the end tag:\nExample\nHowever, never rely on this! Unexpected results and errors may occur if you forget the end tag!\nEmpty HTML Elements\nHTML elements with no content are called empty elements.\nThe <br> tag defines a line break, and is an empty element without a closing tag:\nExample\nHTML is Not Case Sensitive\nHTML tags are not case sensitive: <P> means the same as <p>.\nThe HTML standard does not require lowercase tags, but W3C recommends lowercase in HTML, and demands lowercase for stricter document types like XHTML.\nAt W3Schools we always use lowercase tag names.\nHTML Tag Reference\nW3Schools' tag reference contains additional information about these tags and their attributes.\nFor a complete list of all available HTML tags, visit our HTML Tag Reference.\nVideo: HTML Elements",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<body>\n\n<h1>My First Heading</h1>\n<p>My first paragraph.</p>\n\n</body>\n</html>",
        "<body>\n\n<h1>My First Heading</h1>\n<p>My first paragraph.</p>\n\n</body>",
        "<h1>My First Heading</h1>\n<p>My first paragraph.</p>",
        "<h1>My First Heading</h1>",
        "<p>My first paragraph.</p>",
        "<html>\n<body>\n\n<p>This is a paragraph\n<p>This is a paragraph\n\n</body>\n</html>",
        "<p>This is a <br> paragraph with a line break.</p>",
        "<html>",
        "<body>",
        "<h1>",
        "<p>",
        "</html>",
        "</body>",
        "</h1>",
        "</p>",
        "<br>",
        "<P>"
      ]
    },
    {
      "title": "HTML Attributes",
      "summary": "HTML attributes provide additional information about HTML elements.\nHTML Attributes\nAll HTML elements can have attributes\nAttributes provide additional information about elements\nAttributes are always specified in the start tag\nAttributes usually come in name/value pairs like: name=\"value\"\nThe href Attribute\nThe <a> tag defines a hyperlink. The href attribute specifies the URL of the page the link goes to:\nExample\nYou will learn more about links in our HTML Links chapter.\nThe src Attribute\nThe <img> tag is used to embed an image in an HTML page. The src attribute specifies the path to the image to be displayed:\nExample\nThere are two ways to specify the URL in the src attribute:\n1. Absolute URL - Links to an external image that is hosted on another website. Example: src=\"https://www.w3schools.com/images/img_girl.jpg\".\nNotes: External images might be under copyright. If you do not get permission to use it, you may be in violation of copyright laws. In addition, you cannot control external images; it can suddenly be removed or changed.\n2. Relative URL - Links to an image that is hosted within the website. Here, the URL does not include the domain name. If the URL begins without a slash, it will be relative to the current page. Example: src=\"img_girl.jpg\". If the URL begins with a slash, it will be relative to the domain. Example: src=\"/images/img_girl.jpg\".\nTip: It is almost always best to use relative URLs. They will not break if you change domain.\nThe width and height Attributes\nThe <img> tag should also contain the width and height attributes, which specify the width and height of the image (in pixels):\nExample\nThe alt Attribute\nThe required alt attribute for the <img> tag specifies an alternate text for an image, if the image for some reason cannot be displayed. This can be due to a slow connection, or an error in the src attribute, or if the user uses a screen reader.\nExample\nExample\nSee what happens if we try to display an image that does not exist:\nYou will learn more about images in our HTML Images chapter.\nREMOVE ADS\nThe style Attribute\nThe style attribute is used to add styles to an element, such as color, font, size, and more.\nExample\nYou will learn more about styles in our HTML Styles chapter.\nThe lang Attribute\nYou should always include the lang attribute inside the <html> tag, to declare the language of the Web page. This is meant to assist search engines and browsers.\nThe following example specifies English as the language:\nCountry codes can also be added to the language code in the lang attribute. So, the first two characters define the language of the HTML page, and the last two characters define the country.\nThe following example specifies English as the language and United States as the country:\nYou can see all the language codes in our HTML Language Code Reference.\nThe title Attribute\nThe title attribute defines some extra information about an element.\nThe value of the title attribute will be displayed as a tooltip when you mouse over the element:\nExample\nWe Suggest: Always Use Lowercase Attributes\nThe HTML standard does not require lowercase attribute names.\nThe title attribute (and all other attributes) can be written with uppercase or lowercase like title or TITLE.\nHowever, W3C recommends lowercase attributes in HTML, and demands lowercase attributes for stricter document types like XHTML.\nAt W3Schools we always use lowercase attribute names.\nWe Suggest: Always Quote Attribute Values\nThe HTML standard does not require quotes around attribute values.\nHowever, W3C recommends quotes in HTML, and demands quotes for stricter document types like XHTML.\nGood:\nBad:\nSometimes you have to use quotes. This example will not display the title attribute correctly, because it contains a space:\nExample\nAt W3Schools we always use quotes around attribute values.\nSingle or Double Quotes?\nDouble quotes around attribute values are the most common in HTML, but single quotes can also be used.\nIn some situations, when the attribute value itself contains double quotes, it is necessary to use single quotes:\nOr vice versa:\nChapter Summary\nAll HTML elements can have attributes\nThe href attribute of <a> specifies the URL of the page the link goes to\nThe src attribute of <img> specifies the path to the image to be displayed\nThe width and height attributes of <img> provide size information for images\nThe alt attribute of <img> provides an alternate text for an image\nThe style attribute is used to add styles to an element, such as color, font, size, and more\nThe lang attribute of the <html> tag declares the language of the Web page\nThe title attribute defines some extra information about an element\nHTML Attribute Reference\nA complete list of all attributes for each HTML element, is listed in our: HTML Attribute Reference.\nVideo: HTML Attributes",
      "examples": [
        "<a href=\"https://www.w3schools.com\">Visit W3Schools</a>",
        "<img src=\"img_girl.jpg\">",
        "<img src=\"img_girl.jpg\" width=\"500\" height=\"600\">",
        "<img src=\"img_girl.jpg\" alt=\"Girl with a jacket\">",
        "<img src=\"img_typo.jpg\" alt=\"Girl with a jacket\">",
        "<p style=\"color:red;\">This is a red paragraph.</p>",
        "<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n...\n</body>\n</html>",
        "<!DOCTYPE html>\n<html lang=\"en-US\">\n<body>\n...\n</body>\n</html>",
        "<p title=\"I'm a tooltip\">This is a paragraph.</p>",
        "<a href=\"https://www.w3schools.com/html/\">Visit our HTML tutorial</a>",
        "<a href=https://www.w3schools.com/html/>Visit our HTML tutorial</a>",
        "<p title=Description of W3Schools>",
        "<p title='John \"ShotGun\" Nelson'>",
        "<p title=\"John 'ShotGun' Nelson\">",
        "<a>",
        "href",
        "<img>",
        "src",
        "width",
        "height",
        "alt",
        "style",
        "lang",
        "<html>",
        "title"
      ]
    },
    {
      "title": "HTML Headings Heading 1",
      "summary": "HTML headings are titles or subtitles that you want to display on a webpage.\nExample\nHeading 2\nHeading 3\nHTML Headings\nHTML headings are defined with the <h1> to <h6> tags.\n<h1> defines the most important heading. <h6> defines the least important heading.\nExample\nNote: Browsers automatically add some white space (a margin) before and after a heading.\nHeadings Are Important\nSearch engines use the headings to index the structure and content of your web pages.\nUsers often skim a page by its headings. It is important to use headings to show the document structure.\n<h1> headings should be used for main headings, followed by <h2> headings, then the less important <h3>, and so on.\nNote: Use HTML headings for headings only. Don't use headings to make text BIG or bold.\nBigger Headings\nEach HTML heading has a default size. However, you can specify the size for any heading with the style attribute, using the CSS font-size property:\nExample\nREMOVE ADS\nHTML Tag Reference\nW3Schools' tag reference contains additional information about these tags and their attributes.\nFor a complete list of all available HTML tags, visit our HTML Tag Reference.\nVideo: HTML Headings",
      "examples": [
        "<h1>Heading 1</h1>\n<h2>Heading 2</h2>\n<h3>Heading 3</h3>\n<h4>Heading 4</h4>\n<h5>Heading 5</h5>\n<h6>Heading 6</h6>",
        "<h1 style=\"font-size:60px;\">Heading 1</h1>",
        "<h1>",
        "<h6>",
        "<h2>",
        "<h3>",
        "style",
        "font-size"
      ]
    },
    {
      "title": "HTML Paragraphs",
      "summary": "A paragraph always starts on a new line, and is usually a block of text.\nHTML Paragraphs\nThe HTML <p> element defines a paragraph.\nA paragraph always starts on a new line, and browsers automatically add some white space (a margin) before and after a paragraph.\nExample\nHTML Display\nYou cannot be sure how HTML will be displayed.\nLarge or small screens, and resized windows will create different results.\nWith HTML, you cannot change the display by adding extra spaces or extra lines in your HTML code.\nThe browser will automatically remove any extra spaces and lines when the page is displayed:\nExample\nREMOVE ADS\nHTML Horizontal Rules\nThe <hr> tag defines a thematic break in an HTML page, and is most often displayed as a horizontal rule.\nThe <hr> element is used to separate content (or define a change) in an HTML page:\nExample\nThe <hr> tag is an empty tag, which means that it has no end tag.\nHTML Line Breaks\nThe HTML <br> element defines a line break.\nUse <br> if you want a line break (a new line) without starting a new paragraph:\nExample\nThe <br> tag is an empty tag, which means that it has no end tag.\nThe Poem Problem\nThis poem will display on a single line:\nExample\nSolution - The HTML <pre> Element\nThe HTML <pre> element defines preformatted text.\nThe text inside a <pre> element is displayed in a fixed-width font (usually Courier), and it preserves both spaces and line breaks:\nExample\nHTML Tag Reference\nW3Schools' tag reference contains additional information about HTML elements and their attributes.\nFor a complete list of all available HTML tags, visit our HTML Tag Reference.\nVideo: HTML Paragraphs",
      "examples": [
        "<p>This is a paragraph.</p>\n<p>This is another paragraph.</p>",
        "<p>\nThis paragraph\ncontains a lot of lines\nin the source code,\nbut the browser\nignores it.\n</p>\n\n<p>\nThis paragraph\ncontains         a lot of spaces\nin the source         code,\nbut the        browser\nignores it.\n</p>",
        "<h1>This is heading 1</h1>\n<p>This is some text.</p>\n<hr>\n<h2>This is heading 2</h2>\n<p>This is some other text.</p>\n<hr>",
        "<p>This is<br>a paragraph<br>with line breaks.</p>",
        "<p>\nMy Bonnie lies over the ocean.\n\nMy Bonnie lies over the sea.\n\nMy Bonnie lies over the ocean.\n\nOh, bring back my Bonnie to me.\n</p>",
        "<pre>\nMy Bonnie lies over the ocean.\n\nMy Bonnie lies over the sea.\n\nMy Bonnie lies over the ocean.\n\nOh, bring back my Bonnie to me.\n</pre>",
        "<p>",
        "<hr>",
        "<br>",
        "<pre>"
      ]
    },
    {
      "title": "HTML Styles",
      "summary": "The HTML style attribute is used to add styles to an element, such as color, font, size, and more.\nExample\nI am Red\nI am Blue\nI am Big\nThe HTML Style Attribute\nSetting the style of an HTML element, can be done with the style attribute.\nThe HTML style attribute has the following syntax:\nThe property is a CSS property. The value is a CSS value.\nYou will learn more about CSS later in this tutorial.\nBackground Color\nThe CSS background-color property defines the background color for an HTML element.\nExample\nSet the background color for a page to powderblue:\nExample\nSet background color for two different elements:\nREMOVE ADS\nText Color\nThe CSS color property defines the text color for an HTML element:\nExample\nFonts\nThe CSS font-family property defines the font to be used for an HTML element:\nExample\nText Size\nThe CSS font-size property defines the text size for an HTML element:\nExample\nText Alignment\nThe CSS text-align property defines the horizontal text alignment for an HTML element:\nExample\nChapter Summary\nUse the style attribute for styling HTML elements\nUse background-color for background color\nUse color for text colors\nUse font-family for text fonts\nUse font-size for text sizes\nUse text-align for text alignment\nVideo: HTML Styles",
      "examples": [
        "<tagname style=\"property:value;\">",
        "<body style=\"background-color:powderblue;\">\n\n<h1>This is a heading</h1>\n<p>This is a paragraph.</p>\n\n</body>",
        "<body>\n\n<h1 style=\"background-color:powderblue;\">This is a heading</h1>\n<p style=\"background-color:tomato;\">This is a paragraph.</p>\n\n</body>",
        "<h1 style=\"color:blue;\">This is a heading</h1>\n<p style=\"color:red;\">This is a paragraph.</p>",
        "<h1 style=\"font-family:verdana;\">This is a heading</h1>\n<p style=\"font-family:courier;\">This is a paragraph.</p>",
        "<h1 style=\"font-size:300%;\">This is a heading</h1>\n<p style=\"font-size:160%;\">This is a paragraph.</p>",
        "<h1 style=\"text-align:center;\">Centered Heading</h1>\n<p style=\"text-align:center;\">Centered paragraph.</p>",
        "style",
        "background-color",
        "color",
        "font-family",
        "font-size",
        "text-align"
      ]
    },
    {
      "title": "HTML Text Formatting",
      "summary": "HTML contains several elements for defining text with a special meaning.\nExample\nThis text is bold\nThis text is italic\nThis is subscript and superscript\nHTML Formatting Elements\nFormatting elements were designed to display special types of text:\n<b> - Bold text\n<strong> - Important text\n<i> - Italic text\n<em> - Emphasized text\n<mark> - Marked text\n<small> - Smaller text\n<del> - Deleted text\n<ins> - Inserted text\n<sub> - Subscript text\n<sup> - Superscript text\nHTML <b> and <strong> Elements\nThe HTML <b> element defines bold text, without any extra importance.\nExample\nThe HTML <strong> element defines text with strong importance. The content inside is typically displayed in bold.\nExample\nREMOVE ADS\nHTML <i> and <em> Elements\nThe HTML <i> element defines a part of text in an alternate voice or mood. The content inside is typically displayed in italic.\nTip: The <i> tag is often used to indicate a technical term, a phrase from another language, a thought, a ship name, etc.\nExample\nThe HTML <em> element defines emphasized text. The content inside is typically displayed in italic.\nTip: A screen reader will pronounce the words in <em> with an emphasis, using verbal stress.\nExample\nHTML <small> Element\nThe HTML <small> element defines smaller text:\nExample\nHTML <mark> Element\nThe HTML <mark> element defines text that should be marked or highlighted:\nExample\nHTML <del> Element\nThe HTML <del> element defines text that has been deleted from a document. Browsers will usually strike a line through deleted text:\nExample\nHTML <ins> Element\nThe HTML <ins> element defines a text that has been inserted into a document. Browsers will usually underline inserted text:\nExample\nHTML <sub> Element\nThe HTML <sub> element defines subscript text. Subscript text appears half a character below the normal line, and is sometimes rendered in a smaller font. Subscript text can be used for chemical formulas, like H2O:\nExample\nHTML <sup> Element\nThe HTML <sup> element defines superscript text. Superscript text appears half a character above the normal line, and is sometimes rendered in a smaller font. Superscript text can be used for footnotes, like WWW[1]:\nExample\nHTML Text Formatting Elements\nFor a complete list of all available HTML tags, visit our HTML Tag Reference.\nVideo: HTML Formatting",
      "examples": [
        "<b>This text is bold</b>",
        "<strong>This text is important!</strong>",
        "<i>This text is italic</i>",
        "<em>This text is emphasized</em>",
        "<small>This is some smaller text.</small>",
        "<p>Do not forget to buy <mark>milk</mark> today.</p>",
        "<p>My favorite color is <del>blue</del> red.</p>",
        "<p>My favorite color is <del>blue</del> <ins>red</ins>.</p>",
        "<p>This is <sub>subscripted</sub> text.</p>",
        "<p>This is <sup>superscripted</sup> text.</p>",
        "<b>",
        "<strong>",
        "<i>",
        "<em>",
        "<mark>",
        "<small>",
        "<del>",
        "<ins>",
        "<sub>",
        "<sup>"
      ]
    },
    {
      "title": "HTML Quotation and Citation Elements",
      "summary": "In this chapter we will go through the <blockquote>,<q>, <abbr>, <address>, <cite>, and <bdo> HTML elements.\nExample\nHere is a quote from WWF's website:\nHTML <blockquote> for Quotations\nThe HTML <blockquote> element defines a section that is quoted from another source.\nBrowsers usually indent <blockquote> elements.\nExample\nHTML <q> for Short Quotations\nThe HTML <q> tag defines a short quotation.\nBrowsers normally insert quotation marks around the quotation.\nExample\nREMOVE ADS\nHTML <abbr> for Abbreviations\nThe HTML <abbr> tag defines an abbreviation or an acronym, like \"HTML\", \"CSS\", \"Mr.\", \"Dr.\", \"ASAP\", \"ATM\".\nMarking abbreviations can give useful information to browsers, translation systems and search-engines.\nTip: Use the global title attribute to show the description for the abbreviation/acronym when you mouse over the element.\nExample\nHTML <address> for Contact Information\nThe HTML <address> tag defines the contact information for the author/owner of a document or an article.\nThe contact information can be an email address, URL, physical address, phone number, social media handle, etc.\nThe text in the <address> element usually renders in italic, and browsers will always add a line break before and after the <address> element.\nExample\nHTML <cite> for Work Title\nThe HTML <cite> tag defines the title of a creative work (e.g. a book, a poem, a song, a movie, a painting, a sculpture, etc.).\nNote: A person's name is not the title of a work.\nThe text in the <cite> element usually renders in italic.\nExample\nHTML <bdo> for Bi-Directional Override\nBDO stands for Bi-Directional Override.\nThe HTML <bdo> tag is used to override the current text direction:\nExample\nHTML Quotation and Citation Elements\nFor a complete list of all available HTML tags, visit our HTML Tag Reference.",
      "examples": [
        "<p>Here is a quote from WWF's website:</p>\n<blockquote cite=\"http://www.worldwildlife.org/who/index.html\">\nFor 60 years, WWF has worked to help people and nature thrive. As the world's leading conservation organization, WWF works in nearly 100 countries. At every level, we collaborate with people around the world to develop and deliver innovative solutions that protect communities, wildlife, and the places in which they live.\n</blockquote>",
        "<p>WWF's goal is to: <q>Build a future where people live in harmony with nature.</q></p>",
        "<p>The <abbr title=\"World Health Organization\">WHO</abbr> was founded in 1948.</p>",
        "<address>\nWritten by John Doe.<br>\nVisit us at:<br>\nExample.com<br>\nBox 564, Disneyland<br>\nUSA\n</address>",
        "<p><cite>The Scream</cite> by Edvard Munch. Painted in 1893.</p>",
        "<bdo dir=\"rtl\">This text will be written from right to left</bdo>",
        "<blockquote>",
        "<q>",
        "<abbr>",
        "<address>",
        "<cite>",
        "<bdo>"
      ]
    },
    {
      "title": "HTML Comments",
      "summary": "HTML comments are not displayed in the browser, but they can help document your HTML source code.\nHTML Comment Tag\nYou can add comments to your HTML source by using the following syntax:\nNotice that there is an exclamation point (!) in the start tag, but not in the end tag.\nNote: Comments are not displayed by the browser, but they can help document your HTML source code.\nAdd Comments\nWith comments you can place notifications and reminders in your HTML code:\nExample\nHide Content\nComments can be used to hide content.\nThis can be helpful if you hide content temporarily:\nExample\nYou can also hide more than one line. Everything between the <!-- and the --> will be hidden from the display.\nExample\nHide a section of HTML code:\nComments are also great for debugging HTML, because you can comment out HTML lines of code, one at a time, to search for errors.\nREMOVE ADS\nHide Inline Content\nComments can be used to hide parts in the middle of the HTML code.\nExample\nHide a part of a paragraph:\nVideo: HTML Comments",
      "examples": [
        "<!-- Write your comments here -->",
        "<!-- This is a comment -->\n\n<p>This is a paragraph.</p>\n\n<!-- Remember to add more information here -->",
        "<p>This is a paragraph.</p>\n\n<!-- <p>This is another paragraph </p> -->\n\n<p>This is a paragraph too.</p>",
        "<p>This is a paragraph.</p>\n<!--\n<p>Look at this cool image:</p>\n<img border=\"0\" src=\"pic_trulli.jpg\" alt=\"Trulli\">\n-->\n<p>This is a paragraph too.</p>",
        "<p>This <!-- great text --> is a paragraph.</p>",
        "<!--",
        "-->"
      ]
    },
    {
      "title": "HTML Colors",
      "summary": "HTML colors are specified with predefined color names, or with RGB, HEX, HSL, RGBA, or HSLA values.\nColor Names\nIn HTML, a color can be specified by using a color name:\nTry it Yourself »\nHTML supports 140 standard color names.\nBackground Color\nYou can set the background color for HTML elements:\nExample\nText Color\nYou can set the color of text:\nHello World\nLorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.\nUt wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.\nExample\nREMOVE ADS\nBorder Color\nYou can set the color of borders:\nHello World\nHello World\nHello World\nExample\nColor Values\nIn HTML, colors can also be specified using RGB values, HEX values, HSL values, RGBA values, and HSLA values.\nThe following three <div> elements have their background color set with RGB, HEX, and HSL values:\nThe following two <div> elements have their background color set with RGBA and HSLA values, which add an Alpha channel to the color (here we have 50% transparency):\nExample\nLearn more about Color Values\nYou will learn more about RGB, HEX and HSL in the next chapters.\nVideo: HTML Colors",
      "examples": [
        "<h1 style=\"background-color:DodgerBlue;\">Hello World</h1>\n<p style=\"background-color:Tomato;\">Lorem ipsum...</p>",
        "<h1 style=\"color:Tomato;\">Hello World</h1>\n<p style=\"color:DodgerBlue;\">Lorem ipsum...</p>\n<p style=\"color:MediumSeaGreen;\">Ut wisi enim...</p>",
        "<h1 style=\"border:2px solid Tomato;\">Hello World</h1>\n<h1 style=\"border:2px solid DodgerBlue;\">Hello World</h1>\n<h1 style=\"border:2px solid Violet;\">Hello World</h1>",
        "<h1 style=\"background-color:rgb(255, 99, 71);\">...</h1>\n<h1 style=\"background-color:#ff6347;\">...</h1>\n<h1 style=\"background-color:hsl(9, 100%, 64%);\">...</h1>\n\n<h1 style=\"background-color:rgba(255, 99, 71, 0.5);\">...</h1>\n<h1 style=\"background-color:hsla(9, 100%, 64%, 0.5);\">...</h1>"
      ]
    },
    {
      "title": "HTML RGB and RGBA Colors",
      "summary": "An RGB color value represents RED, GREEN, and BLUE light sources.\nAn RGBA color value is an extension of RGB with an Alpha channel (opacity).\nRGB Color Values\nIn HTML, a color can be specified as an RGB value, using this formula:\nrgb(red, green, blue)\nEach parameter (red, green, and blue) defines the intensity of the color with a value between 0 and 255.\nThis means that there are 256 x 256 x 256 = 16777216 possible colors!\nFor example, rgb(255, 0, 0) is displayed as red, because red is set to its highest value (255), and the other two (green and blue) are set to 0.\nAnother example, rgb(0, 255, 0) is displayed as green, because green is set to its highest value (255), and the other two (red and blue) are set to 0.\nTo display black, set all color parameters to 0, like this: rgb(0, 0, 0).\nTo display white, set all color parameters to 255, like this: rgb(255, 255, 255).\nExample\nExperiment by mixing the RGB values below:\nrgb(255, 99, 71)\nRED\nGREEN\nBLUE\nREMOVE ADS\nShades of Gray\nShades of gray are often defined using equal values for all three parameters:\nExample\nRGBA Color Values\nRGBA color values are an extension of RGB color values with an Alpha channel - which specifies the opacity for a color.\nAn RGBA color value is specified with:\nrgba(red, green, blue, alpha)\nThe alpha parameter is a number between 0.0 (fully transparent) and 1.0 (not transparent at all):\nExample\nExperiment by mixing the RGBA values below:\nrgba(255, 99, 71, 0.5)\nRED\nGREEN\nBLUE\nALPHA",
      "examples": []
    },
    {
      "title": "HTML HEX Colors",
      "summary": "A hexadecimal color is specified with: #RRGGBB, where the RR (red), GG (green) and BB (blue) hexadecimal integers specify the components of the color.\nHEX Color Values\nIn HTML, a color can be specified using a hexadecimal value in the form:\n#rrggbb\nWhere rr (red), gg (green) and bb (blue) are hexadecimal values between 00 and ff (same as decimal 0-255).\nFor example, #ff0000 is displayed as red, because red is set to its highest value (ff), and the other two (green and blue) are set to 00.\nAnother example, #00ff00 is displayed as green, because green is set to its highest value (ff), and the other two (red and blue) are set to 00.\nTo display black, set all color parameters to 00, like this: #000000.\nTo display white, set all color parameters to ff, like this: #ffffff.\nExperiment by mixing the HEX values below:\n#ff6347\nRED\nGREEN\nBLUE\nExample\nREMOVE ADS\nShades of Gray\nShades of gray are often defined using equal values for all three parameters:\nExample",
      "examples": []
    },
    {
      "title": "HTML HSL and HSLA Colors",
      "summary": "HSL stands for hue, saturation, and lightness.\nHSLA color values are an extension of HSL with an Alpha channel (opacity).\nHSL Color Values\nIn HTML, a color can be specified using hue, saturation, and lightness (HSL) in the form:\nhsl(hue, saturation, lightness)\nHue is a degree on the color wheel from 0 to 360. 0 is red, 120 is green, and 240 is blue.\nSaturation is a percentage value. 0% means a shade of gray, and 100% is the full color.\nLightness is also a percentage value. 0% is black, and 100% is white.\nExperiment by mixing the HSL values below:\nhsl(0, 100%, 50%)\nHUE\nSATURATION\nLIGHTNESS\nExample\nSaturation\nSaturation can be described as the intensity of a color.\n100% is pure color, no shades of gray.\n50% is 50% gray, but you can still see the color.\n0% is completely gray; you can no longer see the color.\nExample\nREMOVE ADS\nLightness\nThe lightness of a color can be described as how much light you want to give the color, where 0% means no light (black), 50% means 50% light (neither dark nor light), and 100% means full lightness (white).\nExample\nShades of Gray\nShades of gray are often defined by setting the hue and saturation to 0, and adjusting the lightness from 0% to 100% to get darker/lighter shades:\nExample\nHSLA Color Values\nHSLA color values are an extension of HSL color values, with an Alpha channel - which specifies the opacity for a color.\nAn HSLA color value is specified with:\nhsla(hue, saturation, lightness, alpha)\nThe alpha parameter is a number between 0.0 (fully transparent) and 1.0 (not transparent at all):\nExperiment by mixing the HSLA values below:\nhsla(0, 100%, 50%, 0.5)\nHUE\nSATURATION\nLIGHTNESS\nALPHA\nExample",
      "examples": []
    },
    {
      "title": "HTML Styles - CSS CSS = Styles and Colors",
      "summary": "CSS stands for Cascading Style Sheets.\nCSS saves a lot of work. It can control the layout of multiple web pages all at once.\nWhat is CSS?\nCascading Style Sheets (CSS) is used to format the layout of a webpage.\nWith CSS, you can control the color, font, the size of text, the spacing between elements, how elements are positioned and laid out, what background images or background colors are to be used, different displays for different devices and screen sizes, and much more!\nTip: The word cascading means that a style applied to a parent element will also apply to all children elements within the parent. So, if you set the color of the body text to \"blue\", all headings, paragraphs, and other text elements within the body will also get the same color (unless you specify something else)!\nUsing CSS\nCSS can be added to HTML documents in 3 ways:\nInline - by using the style attribute inside HTML elements\nInternal - by using a <style> element in the <head> section\nExternal - by using a <link> element to link to an external CSS file\nThe most common way to add CSS, is to keep the styles in external CSS files. However, in this tutorial we will use inline and internal styles, because this is easier to demonstrate, and easier for you to try it yourself.\nInline CSS\nAn inline CSS is used to apply a unique style to a single HTML element.\nAn inline CSS uses the style attribute of an HTML element.\nThe following example sets the text color of the <h1> element to blue, and the text color of the <p> element to red:\nExample\nREMOVE ADS\nInternal CSS\nAn internal CSS is used to define a style for a single HTML page.\nAn internal CSS is defined in the <head> section of an HTML page, within a <style> element.\nThe following example sets the text color of ALL the <h1> elements (on that page) to blue, and the text color of ALL the <p> elements to red. In addition, the page will be displayed with a \"powderblue\" background color:\nExample\nExternal CSS\nAn external style sheet is used to define the style for many HTML pages.\nTo use an external style sheet, add a link to it in the <head> section of each HTML page:\nExample\nThe external style sheet can be written in any text editor. The file must not contain any HTML code, and must be saved with a .css extension.\nHere is what the \"styles.css\" file looks like:\n\"styles.css\":\nTip: With an external style sheet, you can change the look of an entire web site, by changing one file!\nCSS Colors, Fonts and Sizes\nHere, we will demonstrate some commonly used CSS properties. You will learn more about them later.\nThe CSS color property defines the text color to be used.\nThe CSS font-family property defines the font to be used.\nThe CSS font-size property defines the text size to be used.\nExample\nUse of CSS color, font-family and font-size properties:\nCSS Border\nThe CSS border property defines a border around an HTML element.\nTip: You can define a border for nearly all HTML elements.\nExample\nUse of CSS border property:\nCSS Padding\nThe CSS padding property defines a padding (space) between the text and the border.\nExample\nUse of CSS border and padding properties:\nCSS Margin\nThe CSS margin property defines a margin (space) outside the border.\nExample\nUse of CSS border and margin properties:\nLink to External CSS\nExternal style sheets can be referenced with a full URL or with a path relative to the current web page.\nExample\nThis example uses a full URL to link to a style sheet:\nTry it Yourself »\nExample\nThis example links to a style sheet located in the html folder on the current web site:\nTry it Yourself »\nExample\nThis example links to a style sheet located in the same folder as the current page:\nTry it Yourself »\nYou can read more about file paths in the chapter HTML File Paths.\nChapter Summary\nUse the HTML style attribute for inline styling\nUse the HTML <style> element to define internal CSS\nUse the HTML <link> element to refer to an external CSS file\nUse the HTML <head> element to store <style> and <link> elements\nUse the CSS color property for text colors\nUse the CSS font-family property for text fonts\nUse the CSS font-size property for text sizes\nUse the CSS border property for borders\nUse the CSS padding property for space inside the border\nUse the CSS margin property for space outside the border\nTip: You can learn much more about CSS in our CSS Tutorial.\nHTML Style Tags\nFor a complete list of all available HTML tags, visit our HTML Tag Reference.\nVideo: HTML CSS",
      "examples": [
        "<h1 style=\"color:blue;\">A Blue Heading</h1>\n\n<p style=\"color:red;\">A red paragraph.</p>",
        "<!DOCTYPE html>\n<html>\n<head>\n<style>\nbody {background-color: powderblue;}\nh1   {color: blue;}\np    {color: red;}\n</style>\n</head>\n<body>\n\n<h1>This is a heading</h1>\n<p>This is a paragraph.</p>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<head>\n<link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n\n<h1>This is a heading</h1>\n<p>This is a paragraph.</p>\n\n</body>\n</html>",
        "body {\nbackground-color: powderblue;\n}\nh1 {\ncolor: blue;\n}\np {\ncolor: red;\n}",
        "<!DOCTYPE html>\n<html>\n<head>\n<style>\nh1 {\ncolor: blue;\nfont-family: verdana;\nfont-size: 300%;\n}\np {\ncolor: red;\nfont-family: courier;\nfont-size: 160%;\n}\n</style>\n</head>\n<body>\n\n<h1>This is a heading</h1>\n<p>This is a paragraph.</p>\n\n</body>\n</html>",
        "p {\nborder: 2px solid powderblue;\n}",
        "p {\nborder: 2px solid powderblue;\npadding: 30px;\n}",
        "p {\nborder: 2px solid powderblue;\nmargin: 50px;\n}",
        "<link rel=\"stylesheet\" href=\"https://www.w3schools.com/html/styles.css\">",
        "<link rel=\"stylesheet\" href=\"/html/styles.css\">",
        "<link rel=\"stylesheet\" href=\"styles.css\">",
        "style",
        "<style>",
        "<head>",
        "<link>",
        "<h1>",
        "<p>",
        "color",
        "font-family",
        "font-size",
        "border",
        "padding",
        "margin"
      ]
    },
    {
      "title": "HTML Links",
      "summary": "Links are found in nearly all web pages. Links allow users to click their way from page to page.\nHTML Links - Hyperlinks\nHTML links are hyperlinks.\nYou can click on a link and jump to another document.\nWhen you move the mouse over a link, the mouse arrow will turn into a little hand.\nNote: A link does not have to be text. A link can be an image or any other HTML element!\nHTML Links - Syntax\nThe HTML <a> tag defines a hyperlink. It has the following syntax:\nThe most important attribute of the <a> element is the href attribute, which indicates the link's destination.\nThe link text is the part that will be visible to the reader.\nClicking on the link text, will send the reader to the specified URL address.\nExample\nThis example shows how to create a link to W3Schools.com:\nBy default, links will appear as follows in all browsers:\nAn unvisited link is underlined and blue\nA visited link is underlined and purple\nAn active link is underlined and red\nTip: Links can of course be styled with CSS, to get another look!\nHTML Links - The target Attribute\nBy default, the linked page will be displayed in the current browser window. To change this, you must specify another target for the link.\nThe target attribute specifies where to open the linked document.\nThe target attribute can have one of the following values:\n_self - Default. Opens the document in the same window/tab as it was clicked\n_blank - Opens the document in a new window or tab\n_parent - Opens the document in the parent frame\n_top - Opens the document in the full body of the window\nExample\nUse target=\"_blank\" to open the linked document in a new browser window or tab:\nAbsolute URLs vs. Relative URLs\nBoth examples above are using an absolute URL (a full web address) in the href attribute.\nA local link (a link to a page within the same website) is specified with a relative URL (without the \"https://www\" part):\nExample\nREMOVE ADS\nHTML Links - Use an Image as a Link\nTo use an image as a link, just put the <img> tag inside the <a> tag:\nExample\nLink to an Email Address\nUse mailto: inside the href attribute to create a link that opens the user's email program (to let them send a new email):\nExample\nButton as a Link\nTo use an HTML button as a link, you have to add some JavaScript code.\nJavaScript allows you to specify what happens at certain events, such as a click of a button:\nExample\nTip: Learn more about JavaScript in our JavaScript Tutorial.\nLink Titles\nThe title attribute specifies extra information about an element. The information is most often shown as a tooltip text when the mouse moves over the element.\nExample\nMore on Absolute URLs and Relative URLs\nExample\nUse a full URL to link to a web page:\nTry it Yourself »\nExample\nLink to a page located in the html folder on the current web site:\nTry it Yourself »\nExample\nLink to a page located in the same folder as the current page:\nTry it Yourself »\nYou can read more about file paths in the chapter HTML File Paths.\nChapter Summary\nUse the <a> element to define a link\nUse the href attribute to define the link address\nUse the target attribute to define where to open the linked document\nUse the <img> element (inside <a>) to use an image as a link\nUse the mailto: scheme inside the href attribute to create a link that opens the user's email program\nHTML Link Tags\nFor a complete list of all available HTML tags, visit our HTML Tag Reference.\nVideo: HTML Links",
      "examples": [
        "<a href=\"url\">link text</a>",
        "<a href=\"https://www.w3schools.com/\">Visit W3Schools.com!</a>",
        "<a href=\"https://www.w3schools.com/\" target=\"_blank\">Visit W3Schools!</a>",
        "<h2>Absolute URLs</h2>\n<p><a href=\"https://www.w3.org/\">W3C</a></p>\n<p><a href=\"https://www.google.com/\">Google</a></p>\n\n<h2>Relative URLs</h2>\n<p><a href=\"html_images.asp\">HTML Images</a></p>\n<p><a href=\"/css/default.asp\">CSS Tutorial</a></p>",
        "<a href=\"default.asp\">\n<img src=\"smiley.gif\" alt=\"HTML tutorial\" style=\"width:42px;height:42px;\">\n</a>",
        "<a href=\"mailto:someone@example.com\">Send email</a>",
        "<button onclick=\"document.location='default.asp'\">HTML Tutorial</button>",
        "<a href=\"https://www.w3schools.com/html/\" title=\"Go to W3Schools HTML section\">Visit our HTML Tutorial</a>",
        "<a href=\"https://www.w3schools.com/html/default.asp\">HTML tutorial</a>",
        "<a href=\"/html/default.asp\">HTML tutorial</a>",
        "<a href=\"default.asp\">HTML tutorial</a>",
        "<a>",
        "href",
        "target",
        "_self",
        "_blank",
        "_parent",
        "_top",
        "<img>",
        "mailto:",
        "title"
      ]
    },
    {
      "title": "HTML Links - Different Colors",
      "summary": "An HTML link is displayed in a different color depending on whether it has been visited, is unvisited, or is active.\nHTML Link Colors\nBy default, a link will appear like this (in all browsers):\nAn unvisited link is underlined and blue\nA visited link is underlined and purple\nAn active link is underlined and red\nYou can change the link state colors, by using CSS:\nExample\nHere, an unvisited link will be green with no underline. A visited link will be pink with no underline. An active link will be yellow and underlined. In addition, when mousing over a link (a:hover) it will become red and underlined:\nREMOVE ADS\nLink Buttons\nA link can also be styled as a button, by using CSS:\nExample\nTo learn more about CSS, go to our CSS Tutorial.\nHTML Link Tags\nFor a complete list of all available HTML tags, visit our HTML Tag Reference.",
      "examples": [
        "<style>\na:link {\ncolor: green;\nbackground-color: transparent;\ntext-decoration: none;\n}\n\na:visited {\ncolor: pink;\nbackground-color: transparent;\ntext-decoration: none;\n}\n\na:hover {\ncolor: red;\nbackground-color: transparent;\ntext-decoration: underline;\n}\n\na:active {\ncolor: yellow;\nbackground-color: transparent;\ntext-decoration: underline;\n}\n</style>",
        "<style>\na:link, a:visited {\nbackground-color: #f44336;\ncolor: white;\npadding: 15px 25px;\ntext-align: center;\ntext-decoration: none;\ndisplay: inline-block;\n}\n\na:hover, a:active {\nbackground-color: red;\n}\n</style>"
      ]
    },
    {
      "title": "HTML Links - Create Bookmarks",
      "summary": "HTML links can be used to create bookmarks, so that readers can jump to specific parts of a web page.\nCreate a Bookmark in HTML\nBookmarks can be useful if a web page is very long.\nTo create a bookmark - first create the bookmark, then add a link to it.\nWhen the link is clicked, the page will scroll down or up to the location with the bookmark.\nExample\nFirst, use the id attribute to create a bookmark:\nThen, add a link to the bookmark (\"Jump to Chapter 4\"), from within the same page:\nExample\nYou can also add a link to a bookmark on another page:\nREMOVE ADS\nChapter Summary\nUse the id attribute (id=\"value\") to define bookmarks in a page\nUse the href attribute (href=\"#value\") to link to the bookmark\nHTML Link Tags\nFor a complete list of all available HTML tags, visit our HTML Tag Reference.",
      "examples": [
        "<h2 id=\"C4\">Chapter 4</h2>",
        "<a href=\"#C4\">Jump to Chapter 4</a>",
        "<a href=\"html_demo.html#C4\">Jump to Chapter 4</a>",
        "id",
        "href"
      ]
    },
    {
      "title": "HTML Images",
      "summary": "Images can improve the design and the appearance of a web page.\nExample\nExample\nExample\nHTML Images Syntax\nThe HTML <img> tag is used to embed an image in a web page.\nImages are not technically inserted into a web page; images are linked to web pages. The <img> tag creates a holding space for the referenced image.\nThe <img> tag is empty, it contains attributes only, and does not have a closing tag.\nThe <img> tag has two required attributes:\nsrc - Specifies the path to the image\nalt - Specifies an alternate text for the image\nSyntax\nThe src Attribute\nThe required src attribute specifies the path (URL) to the image.\nNote: When a web page loads, it is the browser, at that moment, that gets the image from a web server and inserts it into the page. Therefore, make sure that the image actually stays in the same spot in relation to the web page, otherwise your visitors will get a broken link icon. The broken link icon and the alt text are shown if the browser cannot find the image.\nExample\nREMOVE ADS\nThe alt Attribute\nThe required alt attribute provides an alternate text for an image, if the user for some reason cannot view it (because of slow connection, an error in the src attribute, or if the user uses a screen reader).\nThe value of the alt attribute should describe the image:\nExample\nIf a browser cannot find an image, it will display the value of the alt attribute:\nExample\nTip: A screen reader is a software program that reads the HTML code, and allows the user to \"listen\" to the content. Screen readers are useful for people who are visually impaired or learning disabled.\nImage Size - Width and Height\nYou can use the style attribute to specify the width and height of an image.\nExample\nAlternatively, you can use the width and height attributes:\nExample\nThe width and height attributes always define the width and height of the image in pixels.\nNote: Always specify the width and height of an image. If width and height are not specified, the web page might flicker while the image loads.\nWidth and Height, or Style?\nThe width, height, and style attributes are all valid in HTML.\nHowever, we suggest using the style attribute. It prevents styles sheets from changing the size of images:\nExample\nImages in Another Folder\nIf you have your images in a sub-folder, you must include the folder name in the src attribute:\nExample\nImages on Another Server/Website\nSome web sites point to an image on another server.\nTo point to an image on another server, you must specify an absolute (full) URL in the src attribute:\nExample\nNotes on external images: External images might be under copyright. If you do not get permission to use it, you may be in violation of copyright laws. In addition, you cannot control external images; they can suddenly be removed or changed.\nAnimated Images\nHTML allows animated GIFs:\nExample\nImage as a Link\nTo use an image as a link, put the <img> tag inside the <a> tag:\nExample\nImage Floating\nUse the CSS float property to let the image float to the right or to the left of a text:\nExample\nTip: To learn more about CSS Float, read our CSS Float Tutorial.\nCommon Image Formats\nHere are the most common image file types, which are supported in all browsers (Chrome, Edge, Firefox, Safari, Opera):\nChapter Summary\nUse the HTML <img> element to define an image\nUse the HTML src attribute to define the URL of the image\nUse the HTML alt attribute to define an alternate text for an image, if it cannot be displayed\nUse the HTML width and height attributes or the CSS width and height properties to define the size of the image\nUse the CSS float property to let the image float to the left or to the right\nNote: Loading large images takes time, and can slow down your web page. Use images carefully.\nHTML Image Tags\nFor a complete list of all available HTML tags, visit our HTML Tag Reference.\nVideo: HTML Images",
      "examples": [
        "<img src=\"pic_trulli.jpg\" alt=\"Italian Trulli\">",
        "<img src=\"img_girl.jpg\" alt=\"Girl in a jacket\">",
        "<img src=\"img_chania.jpg\" alt=\"Flowers in Chania\">",
        "<img src=\"url\" alt=\"alternatetext\">",
        "<img src=\"wrongname.gif\" alt=\"Flowers in Chania\">",
        "<img src=\"img_girl.jpg\" alt=\"Girl in a jacket\" style=\"width:500px;height:600px;\">",
        "<img src=\"img_girl.jpg\" alt=\"Girl in a jacket\" width=\"500\" height=\"600\">",
        "<!DOCTYPE html>\n<html>\n<head>\n<style>\nimg {\nwidth: 100%;\n}\n</style>\n</head>\n<body>\n\n<img src=\"html5.gif\" alt=\"HTML5 Icon\" width=\"128\" height=\"128\">\n\n<img src=\"html5.gif\" alt=\"HTML5 Icon\" style=\"width:128px;height:128px;\">\n\n</body>\n</html>",
        "<img src=\"/images/html5.gif\" alt=\"HTML5 Icon\" style=\"width:128px;height:128px;\">",
        "<img src=\"https://www.w3schools.com/images/w3schools_green.jpg\" alt=\"W3Schools.com\">",
        "<img src=\"programming.gif\" alt=\"Computer Man\" style=\"width:48px;height:48px;\">",
        "<a href=\"default.asp\">\n<img src=\"smiley.gif\" alt=\"HTML tutorial\" style=\"width:42px;height:42px;\">\n</a>",
        "<p><img src=\"smiley.gif\" alt=\"Smiley face\" style=\"float:right;width:42px;height:42px;\">\nThe image will float to the right of the text.</p>\n\n<p><img src=\"smiley.gif\" alt=\"Smiley face\" style=\"float:left;width:42px;height:42px;\">\nThe image will float to the left of the text.</p>",
        "<img>",
        "src",
        "alt",
        "style",
        "width",
        "height",
        "<a>",
        "float"
      ]
    },
    {
      "title": "HTML Image Maps",
      "summary": "With HTML image maps, you can create clickable areas on an image.\nImage Maps\nThe HTML <map> tag defines an image map. An image map is an image with clickable areas. The areas are defined with one or more <area> tags.\nTry to click on the computer, phone, or the cup of coffee in the image below:\nExample\nHere is the HTML source code for the image map above:\nHow Does it Work?\nThe idea behind an image map is that you should be able to perform different actions depending on where in the image you click.\nTo create an image map you need an image, and some HTML code that describes the clickable areas.\nREMOVE ADS\nThe Image\nThe image is inserted using the <img> tag. The only difference from other images is that you must add a usemap attribute:\nThe usemap value starts with a hash tag # followed by the name of the image map, and is used to create a relationship between the image and the image map.\nTip: You can use any image as an image map!\nCreate Image Map\nThen, add a <map> element.\nThe <map> element is used to create an image map, and is linked to the image by using the required name attribute:\nThe name attribute must have the same value as the <img>'s usemap attribute .\nThe Areas\nThen, add the clickable areas.\nA clickable area is defined using an <area> element.\nShape\nYou must define the shape of the clickable area, and you can choose one of these values:\nrect - defines a rectangular region\ncircle - defines a circular region\npoly - defines a polygonal region\ndefault - defines the entire region\nYou must also define some coordinates to be able to place the clickable area onto the image.\nShape=\"rect\"\nThe coordinates for shape=\"rect\" come in pairs, one for the x-axis and one for the y-axis.\nSo, the coordinates 34,44 is located 34 pixels from the left margin and 44 pixels from the top:\nThe coordinates 270,350 is located 270 pixels from the left margin and 350 pixels from the top:\nNow we have enough data to create a clickable rectangular area:\nExample\nThis is the area that becomes clickable and will send the user to the page \"computer.htm\":\nShape=\"circle\"\nTo add a circle area, first locate the coordinates of the center of the circle:\n337,300\nThen specify the radius of the circle:\n44 pixels\nNow you have enough data to create a clickable circular area:\nExample\nThis is the area that becomes clickable and will send the user to the page \"coffee.htm\":\nShape=\"poly\"\nThe shape=\"poly\" contains several coordinate points, which creates a shape formed with straight lines (a polygon).\nThis can be used to create any shape.\nLike maybe a croissant shape!\nHow can we make the croissant in the image below become a clickable link?\nWe have to find the x and y coordinates for all edges of the croissant:\nThe coordinates come in pairs, one for the x-axis and one for the y-axis:\nExample\nThis is the area that becomes clickable and will send the user to the page \"croissant.htm\":\nImage Map and JavaScript\nA clickable area can also trigger a JavaScript function.\nAdd a click event to the <area> element to execute a JavaScript function:\nExample\nHere, we use the onclick attribute to execute a JavaScript function when the area is clicked:\nChapter Summary\nUse the HTML <map> element to define an image map\nUse the HTML <area> element to define the clickable areas in the image map\nUse the HTML usemap attribute of the <img> element to point to an image map\nHTML Image Tags\nFor a complete list of all available HTML tags, visit our HTML Tag Reference.",
      "examples": [
        "<img src=\"workplace.jpg\" alt=\"Workplace\" usemap=\"#workmap\">\n\n<map name=\"workmap\">\n<area shape=\"rect\" coords=\"34,44,270,350\" alt=\"Computer\" href=\"computer.htm\">\n<area shape=\"rect\" coords=\"290,172,333,250\" alt=\"Phone\" href=\"phone.htm\">\n<area shape=\"circle\" coords=\"337,300,44\" alt=\"Coffee\" href=\"coffee.htm\">\n</map>",
        "<img src=\"workplace.jpg\" alt=\"Workplace\" usemap=\"#workmap\">",
        "<map name=\"workmap\">",
        "<area shape=\"rect\" coords=\"34, 44, 270, 350\" href=\"computer.htm\">",
        "<area shape=\"circle\" coords=\"337, 300, 44\" href=\"coffee.htm\">",
        "<area shape=\"poly\" coords=\"140,121,181,116,204,160,204,222,191,270,140,329,85,355,58,352,37,322,40,259,103,161,128,147\" href=\"croissant.htm\">",
        "<map name=\"workmap\">\n<area shape=\"circle\" coords=\"337,300,44\" href=\"coffee.htm\" onclick=\"myFunction()\">\n</map>\n\n<script>\nfunction myFunction() {\nalert(\"You clicked the coffee cup!\");\n}\n</script>",
        "<map>",
        "<area>",
        "<img>",
        "usemap",
        "#",
        "name",
        "rect",
        "circle",
        "poly",
        "default",
        "shape=\"rect\"",
        "34,44",
        "270,350",
        "337,300",
        "44",
        "shape=\"poly\"",
        "click"
      ]
    },
    {
      "title": "HTML Background Images",
      "summary": "A background image can be specified for almost any HTML element.\nBackground Image on an HTML element\nTo add a background image on an HTML element, use the HTML style attribute and the CSS background-image property:\nExample\nAdd a background image on a <p> element:\nYou can also specify the background image in the <style> element, in the <head> section:\nExample\nSpecify the background image in the <style> element:\nBackground Image on a Page\nIf you want the entire page to have a background image, you must specify the background image on the <body> element:\nExample\nAdd a background image for the entire page:\nBackground Repeat\nIf the background image is smaller than the element, the image will repeat itself, horizontally and vertically, until it reaches the end of the element:\nExample\nTo avoid the background image from repeating itself, set the background-repeat property to no-repeat.\nExample\nREMOVE ADS\nBackground Cover\nIf you want the background image to cover the entire element, you can set the background-size property to cover.\nAlso, to make sure the entire element is always covered, set the background-attachment property to fixed:\nThis way, the background image will cover the entire element, with no stretching (the image will keep its original proportions):\nExample\nBackground Stretch\nIf you want the background image to stretch to fit the entire element, you can set the background-size property to 100% 100%:\nTry resizing the browser window, and you will see that the image will stretch, but always cover the entire element.\nExample\nLearn More CSS\nFrom the examples above you have learned that background images can be styled by using the CSS background properties.\nTo learn more about CSS background properties, study our CSS Background Tutorial.",
      "examples": [
        "<p style=\"background-image: url('img_girl.jpg');\">",
        "<style>\np {\nbackground-image: url('img_girl.jpg');\n}\n</style>",
        "<style>\nbody {\nbackground-image: url('img_girl.jpg');\n}\n</style>",
        "<style>\nbody {\nbackground-image: url('example_img_girl.jpg');\n}\n</style>",
        "<style>\nbody {\nbackground-image: url('example_img_girl.jpg');\nbackground-repeat: no-repeat;\n}\n</style>",
        "<style>\nbody {\nbackground-image: url('img_girl.jpg');\nbackground-repeat: no-repeat;\nbackground-attachment: fixed;\nbackground-size: cover;\n}\n</style>",
        "<style>\nbody {\nbackground-image: url('img_girl.jpg');\nbackground-repeat: no-repeat;\nbackground-attachment: fixed;\nbackground-size: 100% 100%;\n}\n</style>",
        "style",
        "background-image",
        "<style>",
        "<head>",
        "<body>",
        "background-repeat",
        "no-repeat",
        "background-size",
        "cover.",
        "background-attachment",
        "fixed:",
        "100% 100%"
      ]
    },
    {
      "title": "HTML <picture> Element",
      "summary": "The HTML <picture> element allows you to display different pictures for different devices or screen sizes.\nThe HTML <picture> Element\nThe HTML <picture> element gives web developers more flexibility in specifying image resources.\nThe <picture> element contains one or more <source> elements, each referring to different images through the srcset attribute. This way the browser can choose the image that best fits the current view and/or device.\nEach <source> element has a media attribute that defines when the image is the most suitable.\nExample\nShow different images for different screen sizes:\nNote: Always specify an <img> element as the last child element of the <picture> element. The <img> element is used by browsers that do not support the <picture> element, or if none of the <source> tags match.\nREMOVE ADS\nWhen to use the Picture Element\nThere are two main purposes for the <picture> element:\n1. Bandwidth\nIf you have a small screen or device, it is not necessary to load a large image file. The browser will use the first <source> element with matching attribute values, and ignore any of the following elements.\n2. Format Support\nSome browsers or devices may not support all image formats. By using the <picture> element, you can add images of all formats, and the browser will use the first format it recognizes, and ignore any of the following elements.\nExample\nThe browser will use the first image format it recognizes:\nNote: The browser will use the first <source> element with matching attribute values, and ignore any following <source> elements.\nHTML Image Tags\nFor a complete list of all available HTML tags, visit our HTML Tag Reference.",
      "examples": [
        "<picture>\n<source media=\"(min-width: 650px)\" srcset=\"img_food.jpg\">\n<source media=\"(min-width: 465px)\" srcset=\"img_car.jpg\">\n<img src=\"img_girl.jpg\">\n</picture>",
        "<picture>\n<source srcset=\"img_avatar.png\">\n<source srcset=\"img_girl.jpg\">\n<img src=\"img_beatles.gif\" alt=\"Beatles\" style=\"width:auto;\">\n</picture>",
        "<picture>",
        "<source>",
        "srcset",
        "media",
        "<img>"
      ]
    },
    {
      "title": "HTML Favicon",
      "summary": "A favicon is a small image displayed next to the page title in the browser tab.\nHow To Add a Favicon in HTML\nYou can use any image you like as your favicon. You can also create your own favicon on sites like https://www.favicon.cc.\nTip: A favicon is a small image, so it should be a simple image with high contrast.\nA favicon image is displayed to the left of the page title in the browser tab, like this:\nTo add a favicon to your website, either save your favicon image to the root directory of your webserver, or create a folder in the root directory called images, and save your favicon image in this folder. A common name for a favicon image is \"favicon.ico\".\nNext, add a <link> element to your \"index.html\" file, after the <title> element, like this:\nExample\nNow, save the \"index.html\" file and reload it in your browser. Your browser tab should now display your favicon image to the left of the page title.\nREMOVE ADS\nFavicon File Format Support\nThe following table shows the file format support for a favicon image:\nChapter Summary\nUse the HTML <link> element to insert a favicon\nHTML Link Tag\nFor a complete list of all available HTML tags, visit our HTML Tag Reference.",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<head>\n<title>My Page Title</title>\n<link rel=\"icon\" type=\"image/x-icon\" href=\"/images/favicon.ico\">\n</head>\n<body>\n\n<h1>This is a Heading</h1>\n<p>This is a paragraph.</p>\n\n</body>\n</html>",
        "<link>",
        "<title>"
      ]
    },
    {
      "title": "HTML Page Title",
      "summary": "Every web page should have a page title to describe the meaning of the page.\nThe Title Element\nThe <title> element adds a title to your page:\nExample\nThe title is shown in the browser's title bar:\nWhat is a Good Title?\nThe title should describe the content and the meaning of the page.\nThe page title is very important for search engine optimization (SEO). The text is used by search engine algorithms to decide the order when listing pages in search results.\nThe <title> element:\ndefines a title in the browser toolbar\nprovides a title for the page when it is added to favorites\ndisplays a title for the page in search engine-results\nSo, try to make the title as accurate and meaningful as possible!\nHTML Title Tag\nFor a complete list of all available HTML tags, visit our HTML Tag Reference.",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<head>\n<title>HTML Tutorial</title>\n</head>\n<body>\n\nThe content of the document......\n\n</body>\n</html>",
        "<title>"
      ]
    },
    {
      "title": "HTML Tables",
      "summary": "HTML tables allow web developers to arrange data into rows and columns.\nExample\nDefine an HTML Table\nA table in HTML consists of table cells inside rows and columns.\nExample\nA simple HTML table:\nTable Cells\nEach table cell is defined by a <td> and a </td> tag.\ntd stands for table data.\nEverything between <td> and </td> is the content of a table cell.\nExample\nNote: A table cell can contain all sorts of HTML elements: text, images, lists, links, other tables, etc.\nREMOVE ADS\nTable Rows\nEach table row starts with a <tr> and ends with a </tr> tag.\ntr stands for table row.\nExample\nYou can have as many rows as you like in a table; just make sure that the number of cells are the same in each row.\nNote: There are times when a row can have less or more cells than another. You will learn about that in a later chapter.\nTable Headers\nSometimes you want your cells to be table header cells. In those cases use the <th> tag instead of the <td> tag:\nth stands for table header.\nExample\nLet the first row be table header cells:\nBy default, the text in <th> elements are bold and centered, but you can change that with CSS.\nHTML Table Tags\nFor a complete list of all available HTML tags, visit our HTML Tag Reference.\nVideo: HTML Tables\nStyling Tables\nFilter Table\nSort Table\nResponsive Table\nZebra Striped Table",
      "examples": [
        "<table>\n<tr>\n<th>Company</th>\n<th>Contact</th>\n<th>Country</th>\n</tr>\n<tr>\n<td>Alfreds Futterkiste</td>\n<td>Maria Anders</td>\n<td>Germany</td>\n</tr>\n<tr>\n<td>Centro comercial Moctezuma</td>\n<td>Francisco Chang</td>\n<td>Mexico</td>\n</tr>\n</table>",
        "<table>\n<tr>\n<td>Emil</td>\n<td>Tobias</td>\n<td>Linus</td>\n</tr>\n</table>",
        "<table>\n<tr>\n<td>Emil</td>\n<td>Tobias</td>\n<td>Linus</td>\n</tr>\n<tr>\n<td>16</td>\n<td>14</td>\n<td>10</td>\n</tr>\n</table>",
        "<table>\n<tr>\n<th>Person 1</th>\n<th>Person 2</th>\n<th>Person 3</th>\n</tr>\n<tr>\n<td>Emil</td>\n<td>Tobias</td>\n<td>Linus</td>\n</tr>\n<tr>\n<td>16</td>\n<td>14</td>\n<td>10</td>\n</tr>\n</table>",
        "<td>",
        "</td>",
        "td",
        "<tr>",
        "</tr>",
        "tr",
        "<th>",
        "th"
      ]
    },
    {
      "title": "HTML Table Borders",
      "summary": "HTML tables can have borders of different styles and shapes.\nHow To Add a Border\nTo add a border, use the CSS border property on table, th, and td elements:\nExample\nCollapsed Table Borders\nTo avoid having double borders like in the example above, set the CSS border-collapse property to collapse.\nThis will make the borders collapse into a single border:\nExample\nREMOVE ADS\nStyle Table Borders\nIf you set a background color of each cell, and give the border a white color (the same as the document background), you get the impression of an invisible border:\nExample\nRound Table Borders\nWith the border-radius property, the borders get rounded corners:\nExample\nSkip the border around the table by leaving out table from the css selector:\nExample\nDotted Table Borders\nWith the border-style property, you can set the appearance of the border.\nThe following values are allowed:\ndotted\ndashed\nsolid\ndouble\ngroove\nridge\ninset\noutset\nnone\nhidden\nExample\nBorder Color\nWith the border-color property, you can set the color of the border.\nExample",
      "examples": [
        "table, th, td {\nborder: 1px solid black;\n}",
        "table, th, td {\nborder: 1px solid black;\nborder-collapse: collapse;\n}",
        "table, th, td {\nborder: 1px solid white;\nborder-collapse: collapse;\n}\nth, td {\nbackground-color: #96D4D4;\n}",
        "table, th, td {\nborder: 1px solid black;\nborder-radius: 10px;\n}",
        "th, td {\nborder: 1px solid black;\nborder-radius: 10px;\n}",
        "th, td {\nborder-style: dotted;\n}",
        "th, td {\nborder-color: #96D4D4;\n}",
        "border",
        "table",
        "th",
        "td",
        "border-collapse",
        "collapse",
        "border-radius",
        "border-style",
        "dotted",
        "dashed",
        "solid",
        "double",
        "groove",
        "ridge",
        "inset",
        "outset",
        "none",
        "hidden",
        "border-color"
      ]
    },
    {
      "title": "HTML Table Sizes",
      "summary": "HTML tables can have different sizes for each column, row or the entire table.\nUse the style attribute with the width or height properties to specify the size of a table, row or column.\nHTML Table Width\nTo set the width of a table, add the style attribute to the <table> element:\nExample\nSet the width of the table to 100%:\nNote: Using a percentage as the size unit for a width means how wide will this element be compared to its parent element, which in this case is the <body> element.\nHTML Table Column Width\nTo set the size of a specific column, add the style attribute on a <th> or <td> element:\nExample\nSet the width of the first column to 70%:\nREMOVE ADS\nHTML Table Row Height\nTo set the height of a specific row, add the style attribute on a table row element:\nExample\nSet the height of the second row to 200 pixels:",
      "examples": [
        "<table style=\"width:100%\">\n<tr>\n<th>Firstname</th>\n<th>Lastname</th>\n<th>Age</th>\n</tr>\n<tr>\n<td>Jill</td>\n<td>Smith</td>\n<td>50</td>\n</tr>\n<tr>\n<td>Eve</td>\n<td>Jackson</td>\n<td>94</td>\n</tr>\n</table>",
        "<table style=\"width:100%\">\n<tr>\n<th style=\"width:70%\">Firstname</th>\n<th>Lastname</th>\n<th>Age</th>\n</tr>\n<tr>\n<td>Jill</td>\n<td>Smith</td>\n<td>50</td>\n</tr>\n<tr>\n<td>Eve</td>\n<td>Jackson</td>\n<td>94</td>\n</tr>\n</table>",
        "<table style=\"width:100%\">\n<tr>\n<th>Firstname</th>\n<th>Lastname</th>\n<th>Age</th>\n</tr>\n<tr style=\"height:200px\">\n<td>Jill</td>\n<td>Smith</td>\n<td>50</td>\n</tr>\n<tr>\n<td>Eve</td>\n<td>Jackson</td>\n<td>94</td>\n</tr>\n</table>",
        "style",
        "width",
        "height",
        "<table>",
        "<body>",
        "<th>",
        "<td>"
      ]
    },
    {
      "title": "HTML Table Headers",
      "summary": "HTML tables can have headers for each column or row, or for many columns/rows.\nHTML Table Headers\nTable headers are defined with th elements. Each th element represents a table cell.\nExample\nVertical Table Headers\nTo use the first column as table headers, define the first cell in each row as a <th> element:\nExample\nREMOVE ADS\nAlign Table Headers\nBy default, table headers are bold and centered:\nTo left-align the table headers, use the CSS text-align property:\nExample\nHeader for Multiple Columns\nYou can have a header that spans over two or more columns.\nTo do this, use the colspan attribute on the <th> element:\nExample\nYou will learn more about colspan and rowspan in the Table colspan & rowspan chapter.\nTable Caption\nYou can add a caption that serves as a heading for the entire table.\nTo add a caption to a table, use the <caption> tag:\nExample\nNote: The <caption> tag should be inserted immediately after the <table> tag.",
      "examples": [
        "<table>\n<tr>\n<th>Firstname</th>\n<th>Lastname</th>\n<th>Age</th>\n</tr>\n<tr>\n<td>Jill</td>\n<td>Smith</td>\n<td>50</td>\n</tr>\n<tr>\n<td>Eve</td>\n<td>Jackson</td>\n<td>94</td>\n</tr>\n</table>",
        "<table>\n<tr>\n<th>Firstname</th>\n<td>Jill</td>\n<td>Eve</td>\n</tr>\n<tr>\n<th>Lastname</th>\n<td>Smith</td>\n<td>Jackson</td>\n</tr>\n<tr>\n<th>Age</th>\n<td>94</td>\n<td>50</td>\n</tr>\n</table>",
        "th {\ntext-align: left;\n}",
        "<table>\n<tr>\n<th colspan=\"2\">Name</th>\n<th>Age</th>\n</tr>\n<tr>\n<td>Jill</td>\n<td>Smith</td>\n<td>50</td>\n</tr>\n<tr>\n<td>Eve</td>\n<td>Jackson</td>\n<td>94</td>\n</tr>\n</table>",
        "<table style=\"width:100%\">\n<caption>Monthly savings</caption>\n<tr>\n<th>Month</th>\n<th>Savings</th>\n</tr>\n<tr>\n<td>January</td>\n<td>$100</td>\n</tr>\n<tr>\n<td>February</td>\n<td>$50</td>\n</tr>\n</table>",
        "th",
        "<th>",
        "text-align",
        "colspan",
        "<caption>",
        "<table>"
      ]
    },
    {
      "title": "HTML Table Padding & Spacing",
      "summary": "HTML tables can adjust the padding inside the cells, and also the space between the cells.\nHTML Table - Cell Padding\nCell padding is the space between the cell edges and the cell content.\nBy default the padding is set to 0.\nTo add padding on table cells, use the CSS padding property:\nExample\nTo add padding only above the content, use the padding-top property.\nAdd padding to the other sides with the padding-bottom, padding-left, and padding-right properties:\nExample\nHTML Table - Cell Spacing\nCell spacing is the space between each cell.\nBy default the space is set to 2 pixels.\nTo change the space between table cells, use the CSS border-spacing property on the table element:\nExample",
      "examples": [
        "th, td {\npadding: 15px;\n}",
        "th, td {\npadding-top: 10px;\npadding-bottom: 20px;\npadding-left: 30px;\npadding-right: 40px;\n}",
        "table {\nborder-spacing: 30px;\n}",
        "padding",
        "padding-top",
        "padding-bottom",
        "padding-left",
        "padding-right",
        "border-spacing",
        "table"
      ]
    },
    {
      "title": "HTML Table Colspan & Rowspan",
      "summary": "HTML tables can have cells that span over multiple rows and/or columns.\nHTML Table - Colspan\nTo make a cell span over multiple columns, use the colspan attribute:\nExample\nNote: The value of the colspan attribute represents the number of columns to span.\nHTML Table - Rowspan\nTo make a cell span over multiple rows, use the rowspan attribute:\nExample\nNote: The value of the rowspan attribute represents the number of rows to span.\nREMOVE ADS",
      "examples": [
        "<table>\n<tr>\n<th colspan=\"2\">Name</th>\n<th>Age</th>\n</tr>\n<tr>\n<td>Jill</td>\n<td>Smith</td>\n<td>43</td>\n</tr>\n<tr>\n<td>Eve</td>\n<td>Jackson</td>\n<td>57</td>\n</tr>\n</table>",
        "<table>\n<tr>\n<th>Name</th>\n<td>Jill</td>\n</tr>\n<tr>\n<th rowspan=\"2\">Phone</th>\n<td>555-1234</td>\n</tr>\n<tr>\n<td>555-8745</td>\n</tr>\n</table>",
        "colspan",
        "rowspan"
      ]
    },
    {
      "title": "HTML Table Styling",
      "summary": "Use CSS to make your tables look better.\nHTML Table - Zebra Stripes\nIf you add a background color on every other table row, you will get a nice zebra stripes effect.\nTo style every other table row element, use the :nth-child(even) selector like this:\nExample\nNote: If you use (odd) instead of (even), the styling will occur on row 1,3,5 etc. instead of 2,4,6 etc.\nHTML Table - Vertical Zebra Stripes\nTo make vertical zebra stripes, style every other column, instead of every other row.\nSet the :nth-child(even) for table data elements like this:\nExample\nNote: Put the :nth-child() selector on both th and td elements if you want to have the styling on both headers and regular table cells.\nREMOVE ADS\nCombine Vertical and Horizontal Zebra Stripes\nYou can combine the styling from the two examples above and you will have stripes on every other row and every other column.\nIf you use a transparent color you will get an overlapping effect.\nUse an rgba() color to specify the transparency of the color:\nExample\nHorizontal Dividers\nIf you specify borders only at the bottom of each table row, you will have a table with horizontal dividers.\nAdd the border-bottom property to all tr elements to get horizontal dividers:\nExample\nHoverable Table\nUse the :hover selector on tr to highlight table rows on mouse over:\nExample",
      "examples": [
        "tr:nth-child(even) {\nbackground-color: #D6EEEE;\n}",
        "td:nth-child(even), th:nth-child(even) {\nbackground-color: #D6EEEE;\n}",
        "tr:nth-child(even) {\nbackground-color: rgba(150, 212, 212, 0.4);\n}\n\nth:nth-child(even),td:nth-child(even) {\nbackground-color: rgba(150, 212, 212, 0.4);\n}",
        "tr {\nborder-bottom: 1px solid #ddd;\n}",
        "tr:hover {background-color: #D6EEEE;}",
        ":nth-child(even)",
        "(odd)",
        "(even)",
        ":nth-child()",
        "th",
        "td",
        "rgba()",
        "border-bottom",
        "tr",
        ":hover"
      ]
    },
    {
      "title": "HTML Table Colgroup",
      "summary": "The <colgroup> element is used to style specific columns of a table.\nHTML Table Colgroup\nIf you want to style the first two columns of a table, use the <colgroup> and <col> elements.\nThe <colgroup> element should be used as a container for the column specifications.\nEach group is specified with a <col> element.\nThe span attribute specifies how many columns get the style.\nThe style attribute specifies the style to give the columns.\nNote: There is a very limited selection of legal CSS properties for colgroups.\nExample\nNote: The <colgroup> tag must be a child of a <table> element and should be placed before any other table elements, like <thead>, <tr>, <td> etc., but after the <caption> element, if present.\nLegal CSS Properties\nThere is only a very limited selection of CSS properties that are allowed to be used in the colgroup:\nwidth property\nvisibility property\nbackground properties\nborder properties\nAll other CSS properties will have no effect on your tables.\nREMOVE ADS\nMultiple Col Elements\nIf you want to style multiple columns with different styles, use more than one <col> element inside the <colgroup>:\nExample\nEmpty Colgroups\nIf you want to style columns in the middle of a table, insert an \"empty\" <col> element (with no styles) for the columns before:\nExample\nHide Columns\nYou can hide columns with the visibility: collapse property:\nExample",
      "examples": [
        "<table>\n<colgroup>\n<col span=\"2\" style=\"background-color: #D6EEEE\">\n</colgroup>\n<tr>\n<th>MON</th>\n<th>TUE</th>\n<th>WED</th>\n<th>THU</th>\n...",
        "<table>\n<colgroup>\n<col span=\"2\" style=\"background-color: #D6EEEE\">\n<col span=\"3\" style=\"background-color: pink\">\n</colgroup>\n<tr>\n<th>MON</th>\n<th>TUE</th>\n<th>WED</th>\n<th>THU</th>\n...",
        "<table>\n<colgroup>\n<col span=\"3\">\n<col span=\"2\" style=\"background-color: pink\">\n</colgroup>\n<tr>\n<th>MON</th>\n<th>TUE</th>\n<th>WED</th>\n<th>THU</th>\n...",
        "<table>\n<colgroup>\n<col span=\"2\">\n<col span=\"3\" style=\"visibility: collapse\">\n</colgroup>\n<tr>\n<th>MON</th>\n<th>TUE</th>\n<th>WED</th>\n<th>THU</th>\n...",
        "<colgroup>",
        "<col>",
        "span",
        "style",
        "<table>",
        "<thead>",
        "<tr>",
        "<td>",
        "<caption>",
        "width",
        "visibility",
        "background",
        "border",
        "visibility: collapse"
      ]
    },
    {
      "title": "HTML Lists",
      "summary": "HTML lists allow web developers to group a set of related items in lists.\nExample\nAn unordered HTML list:\nItem\nItem\nItem\nItem\nAn ordered HTML list:\nFirst item\nSecond item\nThird item\nFourth item\nUnordered HTML List\nAn unordered list starts with the <ul> tag. Each list item starts with the <li> tag.\nThe list items will be marked with bullets (small black circles) by default:\nExample\nTry it Yourself »\nOrdered HTML List\nAn ordered list starts with the <ol> tag. Each list item starts with the <li> tag.\nThe list items will be marked with numbers by default:\nExample\nREMOVE ADS\nHTML Description Lists\nHTML also supports description lists.\nA description list is a list of terms, with a description of each term.\nThe <dl> tag defines the description list, the <dt> tag defines the term (name), and the <dd> tag describes each term:\nExample\nHTML List Tags\nFor a complete list of all available HTML tags, visit our HTML Tag Reference.\nVideo: HTML Lists",
      "examples": [
        "<ul>\n<li>Coffee</li>\n<li>Tea</li>\n<li>Milk</li>\n</ul>",
        "<ol>\n<li>Coffee</li>\n<li>Tea</li>\n<li>Milk</li>\n</ol>",
        "<dl>\n<dt>Coffee</dt>\n<dd>- black hot drink</dd>\n<dt>Milk</dt>\n<dd>- white cold drink</dd>\n</dl>",
        "<ul>",
        "<li>",
        "<ol>",
        "<dl>",
        "<dt>",
        "<dd>"
      ]
    },
    {
      "title": "HTML Unordered Lists",
      "summary": "The HTML <ul> tag defines an unordered (bulleted) list.\nUnordered HTML List\nAn unordered list starts with the <ul> tag. Each list item starts with the <li> tag.\nThe list items will be marked with bullets (small black circles) by default:\nExample\nTry it Yourself »\nUnordered HTML List - Choose List Item Marker\nThe CSS list-style-type property is used to define the style of the list item marker. It can have one of the following values:\nDisc\nExample - Disc\nCircle\nExample - Circle\nSquare\nExample - Square\nNo List Marker\nExample - None\nREMOVE ADS\nNested HTML Lists\nLists can be nested (list inside list):\nExample\nNote: A list item (<li>) can contain a new list, and other HTML elements, like images and links, etc.\nHorizontal List with CSS\nHTML lists can be styled in many different ways with CSS.\nOne popular way is to style a list horizontally, to create a navigation menu:\nExample\nTip: You can learn much more about CSS in our CSS Tutorial.\nChapter Summary\nUse the HTML <ul> element to define an unordered list\nUse the CSS list-style-type property to define the list item marker\nUse the HTML <li> element to define a list item\nLists can be nested\nList items can contain other HTML elements\nUse the CSS property float:left to display a list horizontally\nHTML List Tags\nFor a complete list of all available HTML tags, visit our HTML Tag Reference.",
      "examples": [
        "<ul>\n<li>Coffee</li>\n<li>Tea</li>\n<li>Milk</li>\n</ul>",
        "<ul style=\"list-style-type:disc;\">\n<li>Coffee</li>\n<li>Tea</li>\n<li>Milk</li>\n</ul>",
        "<ul style=\"list-style-type:circle;\">\n<li>Coffee</li>\n<li>Tea</li>\n<li>Milk</li>\n</ul>",
        "<ul style=\"list-style-type:square;\">\n<li>Coffee</li>\n<li>Tea</li>\n<li>Milk</li>\n</ul>",
        "<ul style=\"list-style-type:none;\">\n<li>Coffee</li>\n<li>Tea</li>\n<li>Milk</li>\n</ul>",
        "<ul>\n<li>Coffee</li>\n<li>Tea\n<ul>\n<li>Black tea</li>\n<li>Green tea</li>\n</ul>\n</li>\n<li>Milk</li>\n</ul>",
        "<!DOCTYPE html>\n<html>\n<head>\n<style>\nul {\nlist-style-type: none;\nmargin: 0;\npadding: 0;\noverflow: hidden;\nbackground-color: #333333;\n}\n\nli {\nfloat: left;\n}\n\nli a {\ndisplay: block;\ncolor: white;\ntext-align: center;\npadding: 16px;\ntext-decoration: none;\n}\n\nli a:hover {\nbackground-color: #111111;\n}\n</style>\n</head>\n<body>\n\n<ul>\n<li><a href=\"#home\">Home</a></li>\n<li><a href=\"#news\">News</a></li>\n<li><a href=\"#contact\">Contact</a></li>\n<li><a href=\"#about\">About</a></li>\n</ul>\n\n</body>\n</html>",
        "<ul>",
        "<li>",
        "list-style-type",
        "float:left"
      ]
    },
    {
      "title": "HTML Ordered Lists",
      "summary": "The HTML <ol> tag defines an ordered list. An ordered list can be numerical or alphabetical.\nOrdered HTML List\nAn ordered list starts with the <ol> tag. Each list item starts with the <li> tag.\nThe list items will be marked with numbers by default:\nExample\nOrdered HTML List - The Type Attribute\nThe type attribute of the <ol> tag, defines the type of the list item marker:\nNumbers\nNumbers:\nUppercase Letters\nUppercase Letters:\nLowercase Letters\nLowercase Letters:\nRoman Numbers - Uppercase\nUppercase Roman Numbers:\nRoman Numbers - Lowercase\nLowercase Roman Numbers:\nREMOVE ADS\nControl List Counting\nBy default, an ordered list will start counting from 1. If you want to start counting from a specified number, you can use the start attribute:\nExample\nNested HTML Lists\nLists can be nested (list inside list):\nExample\nNote: A list item (<li>) can contain a new list, and other HTML elements, like images and links, etc.\nChapter Summary\nUse the HTML <ol> element to define an ordered list\nUse the HTML type attribute to define the numbering type\nUse the HTML <li> element to define a list item\nLists can be nested\nList items can contain other HTML elements\nHTML List Tags\nFor a complete list of all available HTML tags, visit our HTML Tag Reference.",
      "examples": [
        "<ol>\n<li>Coffee</li>\n<li>Tea</li>\n<li>Milk</li>\n</ol>",
        "<ol type=\"1\">\n<li>Coffee</li>\n<li>Tea</li>\n<li>Milk</li>\n</ol>",
        "<ol type=\"A\">\n<li>Coffee</li>\n<li>Tea</li>\n<li>Milk</li>\n</ol>",
        "<ol type=\"a\">\n<li>Coffee</li>\n<li>Tea</li>\n<li>Milk</li>\n</ol>",
        "<ol type=\"I\">\n<li>Coffee</li>\n<li>Tea</li>\n<li>Milk</li>\n</ol>",
        "<ol type=\"i\">\n<li>Coffee</li>\n<li>Tea</li>\n<li>Milk</li>\n</ol>",
        "<ol start=\"50\">\n<li>Coffee</li>\n<li>Tea</li>\n<li>Milk</li>\n</ol>",
        "<ol>\n<li>Coffee</li>\n<li>Tea\n<ol>\n<li>Black tea</li>\n<li>Green tea</li>\n</ol>\n</li>\n<li>Milk</li>\n</ol>",
        "<ol>",
        "<li>",
        "type",
        "start"
      ]
    },
    {
      "title": "HTML Other Lists",
      "summary": "HTML also supports description lists.\nHTML Description Lists\nA description list is a list of terms, with a description of each term.\nThe <dl> tag defines the description list, the <dt> tag defines the term (name), and the <dd> tag describes each term:\nExample\nChapter Summary\nUse the HTML <dl> element to define a description list\nUse the HTML <dt> element to define the description term\nUse the HTML <dd> element to describe the term in a description list\nHTML List Tags\nFor a complete list of all available HTML tags, visit our HTML Tag Reference.",
      "examples": [
        "<dl>\n<dt>Coffee</dt>\n<dd>- black hot drink</dd>\n<dt>Milk</dt>\n<dd>- white cold drink</dd>\n</dl>",
        "<dl>",
        "<dt>",
        "<dd>"
      ]
    },
    {
      "title": "HTML Block and Inline Elements",
      "summary": "Every HTML element has a default display value, depending on what type of element it is.\nThe two most common display values are block and inline.\nBlock-level Elements\nA block-level element always starts on a new line, and the browsers automatically add some space (a margin) before and after the element.\nA block-level element always takes up the full width available (stretches out to the left and right as far as it can).\nTwo commonly used block elements are: <p> and <div>.\nThe <p> element defines a paragraph in an HTML document.\nThe <div> element defines a division or a section in an HTML document.\nThe <p> element is a block-level element.\nExample\nHere are the block-level elements in HTML:\nInline Elements\nAn inline element does not start on a new line.\nAn inline element only takes up as much width as necessary.\nThis is a <span> element inside a paragraph.\nExample\nHere are the inline elements in HTML:\nNote: An inline element cannot contain a block-level element!\nREMOVE ADS\nThe <div> Element\nThe <div> element is often used as a container for other HTML elements.\nThe <div> element has no required attributes, but style, class and id are common.\nWhen used together with CSS, the <div> element can be used to style blocks of content:\nExample\nYou will learn more about the <div> element in the next chapter.\nThe <span> Element\nThe <span> element is an inline container used to mark up a part of a text, or a part of a document.\nThe <span> element has no required attributes, but style, class and id are common.\nWhen used together with CSS, the <span> element can be used to style parts of the text:\nExample\nChapter Summary\nA block-level element always starts on a new line and takes up the full width available\nAn inline element does not start on a new line and it only takes up as much width as necessary\nThe <div> element is a block-level element and is often used as a container for other HTML elements\nThe <span> element is an inline container used to mark up a part of a text, or a part of a document\nHTML Tags\nFor a complete list of all available HTML tags, visit our HTML Tag Reference.\nVideo: HTML Block and Inline",
      "examples": [
        "<p>Hello World</p>\n<div>Hello World</div>",
        "<address>\n<article>\n<aside>\n<blockquote>\n<canvas>\n<dd>\n<div>\n<dl>\n<dt>\n<fieldset>\n<figcaption>\n<figure>\n<footer>\n<form>\n<h1>-<h6>\n<header>\n<hr>\n<li>\n<main>\n<nav>\n<noscript>\n<ol>\n<p>\n<pre>\n<section>\n<table>\n<tfoot>\n<ul>\n<video>",
        "<span>Hello World</span>",
        "<a>\n<abbr>\n<acronym>\n<b>\n<bdo>\n<big>\n<br>\n<button>\n<cite>\n<code>\n<dfn>\n<em>\n<i>\n<img>\n<input>\n<kbd>\n<label>\n<map>\n<object>\n<output>\n<q>\n<samp>\n<script>\n<select>\n<small>\n<span>\n<strong>\n<sub>\n<sup>\n<textarea>\n<time>\n<tt>\n<var>",
        "<div style=\"background-color:black;color:white;padding:20px;\">\n<h2>London</h2>\n<p>London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.</p>\n</div>",
        "<p>My mother has <span style=\"color:blue;font-weight:bold;\">blue</span> eyes and my father has <span style=\"color:darkolivegreen;font-weight:bold;\">dark green</span> eyes.</p>",
        "<p>",
        "<div>",
        "style",
        "class",
        "id",
        "<span>"
      ]
    },
    {
      "title": "HTML Div Element",
      "summary": "The <div> element is used as a container for other HTML elements.\nThe <div> Element\nThe <div> element is by default a block element, meaning that it takes all available width, and comes with line breaks before and after.\nExample\nA <div> element takes up all available width:\nResult\nThe <div> element has no required attributes, but style, class and id are common.\n<div> as a container\nThe <div> element is often used to group sections of a web page together.\nExample\nA <div> element with HTML elements:\nResult\nLondon\nLondon is the capital city of England.\nLondon has over 9 million inhabitants.\nREMOVE ADS\nCenter align a <div> element\nIf you have a <div> element that is not 100% wide, and you want to center-align it, set the CSS margin property to auto.\nExample\nResult\nLondon\nLondon is the capital city of England.\nLondon has over 9 million inhabitants.\nMultiple <div> elements\nYou can have many <div> containers on the same page.\nExample\nResult\nLondon\nLondon is the capital city of England.\nLondon has over 9 million inhabitants.\nOslo\nOslo is the capital city of Norway.\nOslo has over 700,000 inhabitants.\nRome\nRome is the capital city of Italy.\nRome has over 4 million inhabitants.\nAligning <div> elements side by side\nWhen building web pages, you often want to have two or more <div> elements side by side, like this:\nLondon\nLondon is the capital city of England.\nLondon has over 9 million inhabitants.\nOslo\nOslo is the capital city of Norway.\nOslo has over 700,000 inhabitants.\nRome\nRome is the capital city of Italy.\nRome has over 4 million inhabitants.\nThere are different methods for aligning elements side by side, all include some CSS styling. We will look at the most common methods:\nFloat\nThe CSS float property was not originally meant to align <div> elements side-by-side, but has been used for this purpose for many years.\nThe CSS float property is used for positioning and formatting content and allows elements to be positioned horizontally, rather than vertically.\nExample\nHow to use float to align div elements side by side:\nResult\nLondon\nLondon is the capital city of England.\nLondon has over 9 million inhabitants.\nOslo\nOslo is the capital city of Norway.\nOslo has over 700,000 inhabitants.\nRome\nRome is the capital city of Italy.\nRome has over 4 million inhabitants.\nLearn more about float in our CSS float tutorial.\nInline-block\nIf you change the <div> element's display property from block to inline-block, the <div> elements will no longer add a line break before and after, and will be displayed side by side instead of on top of each other.\nExample\nHow to use display: inline-block to align div elements side by side:\nResult\nLondon\nLondon is the capital city of England.\nLondon has over 9 million inhabitants.\nOslo\nOslo is the capital city of Norway.\nOslo has over 700,000 inhabitants.\nRome\nRome is the capital city of Italy.\nRome has over 4 million inhabitants.\nFlex\nThe CSS Flexbox Layout Module was introduced to make it easier to design flexible responsive layout structure without using float or positioning.\nTo make the CSS flex method work, surround the <div> elements with another <div> element and give it the status as a flex container.\nExample\nHow to use flex to align div elements side by side:\nResult\nLondon\nLondon is the capital city of England.\nLondon has over 9 million inhabitants.\nOslo\nOslo is the capital city of Norway.\nOslo has over 700,000 inhabitants.\nRome\nRome is the capital city of Italy.\nRome has over 4 million inhabitants.\nLearn more about flex in our CSS flexbox tutorial.\nGrid\nThe CSS Grid Layout Module offers a grid-based layout system, with rows and columns, making it easier to design web pages without having to use floats and positioning.\nSounds almost the same as flex, but has the ability to define more than one row and position each row individually.\nThe CSS grid method requires that you surround the <div> elements with another <div> element and give the status as a grid container, and you must specify the width of each column.\nExample\nHow to use grid to align <div> elements side by side:\nResult\nLondon\nLondon is the capital city of England.\nLondon has over 9 million inhabitants.\nOslo\nOslo is the capital city of Norway.\nOslo has over 700,000 inhabitants.\nRome\nRome is the capital city of Italy.\nRome has over 4 million inhabitants.\nLearn more about grid in our CSS grid tutorial.\nHTML Tags\nFor a complete list of all available HTML tags, visit our HTML Tag Reference.",
      "examples": [
        "Lorem Ipsum <div>I am a div</div> dolor sit amet.",
        "<div>\n<h2>London</h2>\n<p>London is the capital city of England.</p>\n<p>London has over 9 million inhabitants.</p>\n</div>",
        "<style>\ndiv {\nwidth:300px;\nmargin:auto;\n}\n</style>",
        "<div>\n<h2>London</h2>\n<p>London is the capital city of England.</p>\n<p>London has over 9 million inhabitants.</p>\n</div>\n\n<div>\n<h2>Oslo</h2>\n<p>Oslo is the capital city of Norway.</p>\n<p>Oslo has over 700,000 inhabitants.</p>\n</div>\n\n<div>\n<h2>Rome</h2>\n<p>Rome is the capital city of Italy.</p>\n<p>Rome has over 4 million inhabitants.</p>\n</div>",
        "<style>\n.mycontainer {\nwidth:100%;\noverflow:auto;\n}\n.mycontainer div {\nwidth:33%;\nfloat:left;\n}\n</style>",
        "<style>\ndiv {\nwidth: 30%;\ndisplay: inline-block;\n}\n</style>",
        "<style>\n.mycontainer {\ndisplay: flex;\n}\n.mycontainer > div {\nwidth:33%;\n}\n</style>",
        "<style>\n.grid-container {\ndisplay: grid;\ngrid-template-columns: 33% 33% 33%;\n}\n</style>",
        "<div>",
        "style",
        "class",
        "id",
        "margin",
        "auto",
        "float",
        "display",
        "block",
        "inline-block"
      ]
    },
    {
      "title": "HTML class Attribute",
      "summary": "The HTML class attribute is used to specify a class for an HTML element.\nMultiple HTML elements can share the same class.\nThe class Attribute\nThe class attribute is often used to point to a class name in a style sheet. It can also be used by JavaScript to access and manipulate elements with the specific class name.\nIn the following example we have three <div> elements with a class attribute with the value of \"city\". All of the three <div> elements will be styled equally according to the .city style definition in the head section:\nExample\nIn the following example we have two <span> elements with a class attribute with the value of \"note\". Both <span> elements will be styled equally according to the .note style definition in the head section:\nExample\nTip: The class attribute can be used on any HTML element.\nNote: The class name is case sensitive!\nTip: You can learn much more about CSS in our CSS Tutorial.\nREMOVE ADS\nThe Syntax For Class\nTo create a class; write a period (.) character, followed by a class name. Then, define the CSS properties within curly braces {}:\nExample\nCreate a class named \"city\":\nMultiple Classes\nHTML elements can belong to more than one class.\nTo define multiple classes, separate the class names with a space, e.g. <div class=\"city main\">. The element will be styled according to all the classes specified.\nIn the following example, the first <h2> element belongs to both the city class and also to the main class, and will get the CSS styles from both of the classes:\nExample\nDifferent Elements Can Share Same Class\nDifferent HTML elements can point to the same class name.\nIn the following example, both <h2> and <p> point to the \"city\" class and will share the same style:\nExample\nUse of the class Attribute in JavaScript\nThe class name can also be used by JavaScript to perform certain tasks for specific elements.\nJavaScript can access elements with a specific class name with the getElementsByClassName() method:\nExample\nClick on a button to hide all elements with the class name \"city\":\nDon't worry if you don't understand the code in the example above.\nYou will learn more about JavaScript in our HTML JavaScript chapter, or you can study our JavaScript Tutorial.\nChapter Summary\nThe HTML class attribute specifies one or more class names for an element\nClasses are used by CSS and JavaScript to select and access specific elements\nThe class attribute can be used on any HTML element\nThe class name is case sensitive\nDifferent HTML elements can point to the same class name\nJavaScript can access elements with a specific class name with the getElementsByClassName() method\nVideo: HTML Class",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<head>\n<style>\n.city {\nbackground-color: tomato;\ncolor: white;\nborder: 2px solid black;\nmargin: 20px;\npadding: 20px;\n}\n</style>\n</head>\n<body>\n\n<div class=\"city\">\n<h2>London</h2>\n<p>London is the capital of England.</p>\n</div>\n\n<div class=\"city\">\n<h2>Paris</h2>\n<p>Paris is the capital of France.</p>\n</div>\n\n<div class=\"city\">\n<h2>Tokyo</h2>\n<p>Tokyo is the capital of Japan.</p>\n</div>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<head>\n<style>\n.note {\nfont-size: 120%;\ncolor: red;\n}\n</style>\n</head>\n<body>\n\n<h1>My <span class=\"note\">Important</span> Heading</h1>\n<p>This is some <span class=\"note\">important</span> text.</p>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<head>\n<style>\n.city {\nbackground-color: tomato;\ncolor: white;\npadding: 10px;\n}\n</style>\n</head>\n<body>\n\n<h2 class=\"city\">London</h2>\n<p>London is the capital of England.</p>\n\n<h2 class=\"city\">Paris</h2>\n<p>Paris is the capital of France.</p>\n\n<h2 class=\"city\">Tokyo</h2>\n<p>Tokyo is the capital of Japan.</p>\n\n</body>\n</html>",
        "<h2 class=\"city main\">London</h2>\n<h2 class=\"city\">Paris</h2>\n<h2 class=\"city\">Tokyo</h2>",
        "<h2 class=\"city\">Paris</h2>\n<p class=\"city\">Paris is the capital of France</p>",
        "<script>\nfunction myFunction() {\nvar x = document.getElementsByClassName(\"city\");\nfor (var i = 0; i < x.length; i++) {\nx[i].style.display = \"none\";\n}\n}\n</script>",
        "class",
        "<div>",
        ".city",
        "<span>",
        ".note",
        "<h2>",
        "city",
        "main",
        "<p>",
        "getElementsByClassName()"
      ]
    },
    {
      "title": "HTML id Attribute",
      "summary": "The HTML id attribute is used to specify a unique id for an HTML element.\nYou cannot have more than one element with the same id in an HTML document.\nThe id Attribute\nThe id attribute specifies a unique id for an HTML element. The value of the id attribute must be unique within the HTML document.\nThe id attribute is used to point to a specific style declaration in a style sheet. It is also used by JavaScript to access and manipulate the element with the specific id.\nThe syntax for id is: write a hash character (#), followed by an id name. Then, define the CSS properties within curly braces {}.\nIn the following example we have an <h1> element that points to the id name \"myHeader\". This <h1> element will be styled according to the #myHeader style definition in the head section:\nExample\nNote: The id name is case sensitive!\nNote: The id name must contain at least one character, cannot start with a number, and must not contain whitespaces (spaces, tabs, etc.).\nDifference Between Class and ID\nA class name can be used by multiple HTML elements, while an id name must only be used by one HTML element within the page:\nExample\nTip: You can learn much more about CSS in our CSS Tutorial.\nREMOVE ADS\nHTML Bookmarks with ID and Links\nHTML bookmarks are used to allow readers to jump to specific parts of a webpage.\nBookmarks can be useful if your page is very long.\nTo use a bookmark, you must first create it, and then add a link to it.\nThen, when the link is clicked, the page will scroll to the location with the bookmark.\nExample\nFirst, create a bookmark with the id attribute:\nThen, add a link to the bookmark (\"Jump to Chapter 4\"), from within the same page:\nExample\nOr, add a link to the bookmark (\"Jump to Chapter 4\"), from another page:\nUsing the id Attribute in JavaScript\nThe id attribute can also be used by JavaScript to perform some tasks for that specific element.\nJavaScript can access an element with a specific id with the getElementById() method:\nExample\nUse the id attribute to manipulate text with JavaScript:\nTip: Study JavaScript in the HTML JavaScript chapter, or in our JavaScript Tutorial.\nChapter Summary\nThe id attribute is used to specify a unique id for an HTML element\nThe value of the id attribute must be unique within the HTML document\nThe id attribute is used by CSS and JavaScript to style/select a specific element\nThe value of the id attribute is case sensitive\nThe id attribute is also used to create HTML bookmarks\nJavaScript can access an element with a specific id with the getElementById() method\nVideo: HTML ID",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<head>\n<style>\n#myHeader {\nbackground-color: lightblue;\ncolor: black;\npadding: 40px;\ntext-align: center;\n}\n</style>\n</head>\n<body>\n\n<h1 id=\"myHeader\">My Header</h1>\n\n</body>\n</html>",
        "<style>\n/* Style the element with the id \"myHeader\" */\n#myHeader {\nbackground-color: lightblue;\ncolor: black;\npadding: 40px;\ntext-align: center;\n}\n\n/* Style all elements with the class name \"city\" */\n.city {\nbackground-color: tomato;\ncolor: white;\npadding: 10px;\n}\n</style>\n\n<!-- An element with a unique id -->\n<h1 id=\"myHeader\">My Cities</h1>\n\n<!-- Multiple elements with same class -->\n<h2 class=\"city\">London</h2>\n<p>London is the capital of England.</p>\n\n<h2 class=\"city\">Paris</h2>\n<p>Paris is the capital of France.</p>\n\n<h2 class=\"city\">Tokyo</h2>\n<p>Tokyo is the capital of Japan.</p>",
        "<h2 id=\"C4\">Chapter 4</h2>",
        "<a href=\"#C4\">Jump to Chapter 4</a>",
        "<a href=\"html_demo.html#C4\">Jump to Chapter 4</a>",
        "<script>\nfunction displayResult() {\ndocument.getElementById(\"myHeader\").innerHTML = \"Have a nice day!\";\n}\n</script>",
        "id",
        "<h1>",
        "#myHeader",
        "getElementById()"
      ]
    },
    {
      "title": "HTML Iframes",
      "summary": "An HTML iframe is used to display a web page within a web page.\nHTML Iframe Syntax\nThe HTML <iframe> tag specifies an inline frame.\nAn inline frame is used to embed another document within the current HTML document.\nSyntax\nTip: It is a good practice to always include a title attribute for the <iframe>. This is used by screen readers to read out what the content of the iframe is.\nIframe - Set Height and Width\nUse the height and width attributes to specify the size of the iframe.\nThe height and width are specified in pixels by default:\nExample\nOr you can add the style attribute and use the CSS height and width properties:\nExample\nREMOVE ADS\nIframe - Remove the Border\nBy default, an iframe has a border around it.\nTo remove the border, add the style attribute and use the CSS border property:\nExample\nWith CSS, you can also change the size, style and color of the iframe's border:\nExample\nIframe - Target for a Link\nAn iframe can be used as the target frame for a link.\nThe target attribute of the link must refer to the name attribute of the iframe:\nExample\nChapter Summary\nThe HTML <iframe> tag specifies an inline frame\nThe src attribute defines the URL of the page to embed\nAlways include a title attribute (for screen readers)\nThe height and width attributes specify the size of the iframe\nUse border:none; to remove the border around the iframe\nHTML iframe Tag\nFor a complete list of all available HTML tags, visit our HTML Tag Reference.\nVideo: HTML Iframe",
      "examples": [
        "<iframe src=\"url\" title=\"description\"></iframe>",
        "<iframe src=\"demo_iframe.htm\" height=\"200\" width=\"300\" title=\"Iframe Example\"></iframe>",
        "<iframe src=\"demo_iframe.htm\" style=\"height:200px;width:300px;\" title=\"Iframe Example\"></iframe>",
        "<iframe src=\"demo_iframe.htm\" style=\"border:none;\" title=\"Iframe Example\"></iframe>",
        "<iframe src=\"demo_iframe.htm\" style=\"border:2px solid red;\" title=\"Iframe Example\"></iframe>",
        "<iframe src=\"demo_iframe.htm\" name=\"iframe_a\" title=\"Iframe Example\"></iframe>\n\n<p><a href=\"https://www.w3schools.com\" target=\"iframe_a\">W3Schools.com</a></p>",
        "<iframe>",
        "title",
        "height",
        "width",
        "style",
        "border",
        "target",
        "name",
        "src",
        "border:none;"
      ]
    },
    {
      "title": "HTML JavaScript",
      "summary": "JavaScript makes HTML pages more dynamic and interactive.\nExample\nMy First JavaScript\nTry it Yourself »\nThe HTML <script> Tag\nThe HTML <script> tag is used to define a client-side script (JavaScript).\nThe <script> element either contains script statements, or it points to an external script file through the src attribute.\nCommon uses for JavaScript are image manipulation, form validation, and dynamic changes of content.\nTo select an HTML element, JavaScript most often uses the document.getElementById() method.\nThis JavaScript example writes \"Hello JavaScript!\" into an HTML element with id=\"demo\":\nExample\nTip: You can learn much more about JavaScript in our JavaScript Tutorial.\nA Taste of JavaScript\nHere are some examples of what JavaScript can do:\nExample\nJavaScript can change content:\nExample\nJavaScript can change styles:\nExample\nJavaScript can change attributes:\nREMOVE ADS\nThe HTML <noscript> Tag\nThe HTML <noscript> tag defines an alternate content to be displayed to users that have disabled scripts in their browser or have a browser that doesn't support scripts:\nExample\nHTML Script Tags\nFor a complete list of all available HTML tags, visit our HTML Tag Reference.\nVideo: HTML and JavaScript",
      "examples": [
        "<script>\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\n</script>",
        "document.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";",
        "document.getElementById(\"demo\").style.fontSize = \"25px\";\ndocument.getElementById(\"demo\").style.color = \"red\";\ndocument.getElementById(\"demo\").style.backgroundColor = \"yellow\";",
        "document.getElementById(\"image\").src = \"picture.gif\";",
        "<script>\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\n</script>\n<noscript>Sorry, your browser does not support JavaScript!</noscript>",
        "<script>",
        "src",
        "document.getElementById()",
        "<noscript>"
      ]
    },
    {
      "title": "HTML File Paths",
      "summary": "A file path describes the location of a file in a web site's folder structure.\nFile Path Examples\nHTML File Paths\nA file path describes the location of a file in a web site's folder structure.\nFile paths are used when linking to external files, like:\nWeb pages\nImages\nStyle sheets\nJavaScripts\nAbsolute File Paths\nAn absolute file path is the full URL to a file:\nExample\nTry it Yourself »\nThe <img> tag is explained in the chapter: HTML Images.\nREMOVE ADS\nRelative File Paths\nA relative file path points to a file relative to the current page.\nIn the following example, the file path points to a file in the images folder located at the root of the current website:\nExample\nTry it Yourself »\nIn the following example, the file path points to a file in the images folder located in the current folder:\nExample\nTry it Yourself »\nIn the following example, the file path points to a file in the images folder located in the folder one level up from the current folder:\nExample\nTry it Yourself »\nBest Practice\nIt is best practice to use relative file paths (if possible).\nWhen using relative file paths, your web pages will not be bound to your current base URL. All links will work on your own computer (localhost) as well as on your current public domain and your future public domains.",
      "examples": [
        "<img src=\"https://www.w3schools.com/images/picture.jpg\" alt=\"Mountain\">",
        "<img src=\"/images/picture.jpg\" alt=\"Mountain\">",
        "<img src=\"images/picture.jpg\" alt=\"Mountain\">",
        "<img src=\"../images/picture.jpg\" alt=\"Mountain\">"
      ]
    },
    {
      "title": "HTML - The Head Element",
      "summary": "The HTML <head> element is a container for the following elements: <title>, <style>, <meta>, <link>, <script>, and <base>.\nThe HTML <head> Element\nThe <head> element is a container for metadata (data about data) and is placed between the <html> tag and the <body> tag.\nHTML metadata is data about the HTML document. Metadata is not displayed on the page.\nMetadata typically define the document title, character set, styles, scripts, and other meta information.\nThe HTML <title> Element\nThe <title> element defines the title of the document. The title must be text-only, and it is shown in the browser's title bar or in the page's tab.\nThe <title> element is required in HTML documents!\nThe content of a page title is very important for search engine optimization (SEO)! The page title is used by search engine algorithms to decide the order when listing pages in search results.\nThe <title> element:\ndefines a title in the browser toolbar\nprovides a title for the page when it is added to favorites\ndisplays a title for the page in search engine-results\nSo, try to make the title as accurate and meaningful as possible!\nA simple HTML document:\nExample\nThe HTML <style> Element\nThe <style> element is used to define style information for a single HTML page:\nExample\nREMOVE ADS\nThe HTML <link> Element\nThe <link> element defines the relationship between the current document and an external resource.\n\nThe <link> tag is most often used to link to external style sheets:\nExample\nTip: To learn all about CSS, visit our CSS Tutorial.\nThe HTML <meta> Element\nThe <meta> element is typically used to specify the character set, page description, keywords, author of the document, and viewport settings.\nThe metadata will not be displayed on the page, but is used by browsers (how to display content or reload page), by search engines (keywords), and other web services.\nExamples\nDefine the character set used:\nDefine keywords for search engines:\nDefine a description of your web page:\nDefine the author of a page:\nRefresh document every 30 seconds:\nSetting the viewport to make your website look good on all devices:\nExample of <meta> tags:\nExample\nSetting The Viewport\nThe viewport is the user's visible area of a web page. It varies with the device - it will be smaller on a mobile phone than on a computer screen.\nYou should include the following <meta> element in all your web pages:\nThis gives the browser instructions on how to control the page's dimensions and scaling.\nThe width=device-width part sets the width of the page to follow the screen-width of the device (which will vary depending on the device).\nThe initial-scale=1.0 part sets the initial zoom level when the page is first loaded by the browser.\nHere is an example of a web page without the viewport meta tag, and the same web page with the viewport meta tag:\nTip: If you are browsing this page with a phone or a tablet, you can click on the two links below to see the difference.\nThe HTML <script> Element\nThe <script> element is used to define client-side JavaScripts.\nThe following JavaScript writes \"Hello JavaScript!\" into an HTML element with id=\"demo\":\nExample\nTip: To learn all about JavaScript, visit our JavaScript Tutorial.\nThe HTML <base> Element\nThe <base> element specifies the base URL and/or target for all relative URLs in a page.\nThe <base> tag must have either an href or a target attribute present, or both.\nThere can only be one single <base> element in a document!\nExample\nSpecify a default URL and a default target for all links on a page:\nChapter Summary\nThe <head> element is a container for metadata (data about data)\nThe <head> element is placed between the <html> tag and the <body> tag\nThe <title> element is required and it defines the title of the document\nThe <style> element is used to define style information for a single document\nThe <link> tag is most often used to link to external style sheets\nThe <meta> element is typically used to specify the character set, page description, keywords, author of the document, and viewport settings\nThe <script> element is used to define client-side JavaScripts\nThe <base> element specifies the base URL and/or target for all relative URLs in a page\nHTML head Elements\nFor a complete list of all available HTML tags, visit our HTML Tag Reference.\nVideo: HTML Head",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<head>\n<title>A Meaningful Page Title</title>\n</head>\n<body>\n\nThe content of the document......\n\n</body>\n</html>",
        "<style>\nbody {background-color: powderblue;}\nh1 {color: red;}\np {color: blue;}\n</style>",
        "<link rel=\"stylesheet\" href=\"mystyle.css\">",
        "<meta charset=\"UTF-8\">",
        "<meta name=\"keywords\" content=\"HTML, CSS, JavaScript\">",
        "<meta name=\"description\" content=\"Free Web tutorials\">",
        "<meta name=\"author\" content=\"John Doe\">",
        "<meta http-equiv=\"refresh\" content=\"30\">",
        "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
        "<meta charset=\"UTF-8\">\n<meta name=\"description\" content=\"Free Web tutorials\">\n<meta name=\"keywords\" content=\"HTML, CSS, JavaScript\">\n<meta name=\"author\" content=\"John Doe\">",
        "<script>\nfunction myFunction() {\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\n}\n</script>",
        "<head>\n<base href=\"https://www.w3schools.com/\" target=\"_blank\">\n</head>\n\n<body>\n<img src=\"images/stickman.gif\" width=\"24\" height=\"39\" alt=\"Stickman\">\n<a href=\"tags/tag_base.asp\">HTML base Tag</a>\n</body>",
        "<head>",
        "<title>",
        "<style>",
        "<meta>",
        "<link>",
        "<script>",
        "<base>",
        "<html>",
        "<body>",
        "width=device-width",
        "initial-scale=1.0"
      ]
    },
    {
      "title": "HTML Layout Elements and Techniques London London London",
      "summary": "Websites often display content in multiple columns (like a magazine or a newspaper).\nExample\nCities\nLondon\nParis\nTokyo\nLondon is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.\nStanding on the River Thames, London has been a major settlement for two millennia, its history going back to its founding by the Romans, who named it Londinium.\nFooter\nHTML Layout Elements\nHTML has several semantic elements that define the different parts of a web page:\n<header> - Defines a header for a document or a section\n<nav> - Defines a set of navigation links\n<section> - Defines a section in a document\n<article> - Defines independent, self-contained content\n<aside> - Defines content aside from the content (like a sidebar)\n<footer> - Defines a footer for a document or a section\n<details> - Defines additional details that the user can open and close on demand\n<summary> - Defines a heading for the <details> element\nYou can read more about semantic elements in our HTML Semantics chapter.\nHTML Layout Techniques\nThere are four different techniques to create multicolumn layouts. Each technique has its pros and cons:\nCSS frameworks\nCSS float property\nCSS flexbox\nCSS grid\nREMOVE ADS\nCSS Frameworks\nIf you want to create your layout fast, you can use a CSS framework, like W3.CSS or Bootstrap.\nEver heard about W3Schools Spaces? Here you can create your website from scratch or use a template, and host it for free.\n* no credit card required\nCSS Float Layout\nIt is common to do entire web layouts using the CSS float property. Float is easy to learn - you just need to remember how the float and clear properties work. Disadvantages: Floating elements are tied to the document flow, which may harm the flexibility. Learn more about float in our CSS Float and Clear chapter.\nExample\nCities\nLondon\nParis\nTokyo\nLondon is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.\nStanding on the River Thames, London has been a major settlement for two millennia, its history going back to its founding by the Romans, who named it Londinium.\nFooter\nCSS Flexbox Layout\nUse of flexbox ensures that elements behave predictably when the page layout must accommodate different screen sizes and different display devices.\nLearn more about flexbox in our CSS Flexbox chapter.\nExample\nCities\nLondon\nParis\nTokyo\nLondon is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.\nStanding on the River Thames, London has been a major settlement for two millennia, its history going back to its founding by the Romans, who named it Londinium.\nFooter\nCSS Grid Layout\nThe CSS Grid Layout Module offers a grid-based layout system, with rows and columns, making it easier to design web pages without having to use floats and positioning.\nLearn more about CSS grids in our CSS Grid Intro chapter.",
      "examples": [
        "<header>",
        "<nav>",
        "<section>",
        "<article>",
        "<aside>",
        "<footer>",
        "<details>",
        "<summary>",
        "float",
        "clear"
      ]
    },
    {
      "title": "HTML Responsive Web Design Hello World W3.CSS Demo",
      "summary": "Responsive web design is about creating web pages that look good on all devices!\nA responsive web design will automatically adjust for different screen sizes and viewports.\nWhat is Responsive Web Design?\nResponsive Web Design is about using HTML and CSS to automatically resize, hide, shrink, or enlarge, a website, to make it look good on all devices (desktops, tablets, and phones):\nTry it Yourself »\nSetting The Viewport\nTo create a responsive website, add the following <meta> tag to all your web pages:\nExample\nThis will set the viewport of your page, which will give the browser instructions on how to control the page's dimensions and scaling.\nHere is an example of a web page without the viewport meta tag, and the same web page with the viewport meta tag:\nTip: If you are browsing this page on a phone or a tablet, you can click on the two links above to see the difference.\nREMOVE ADS\nResponsive Images\nResponsive images are images that scale nicely to fit any browser size.\nUsing the width Property\nIf the CSS width property is set to 100%, the image will be responsive and scale up and down:\nExample\nNotice that in the example above, the image can be scaled up to be larger than its original size. A better solution, in many cases, will be to use the max-width property instead.\nUsing the max-width Property\nIf the max-width property is set to 100%, the image will scale down if it has to, but never scale up to be larger than its original size:\nExample\nShow Different Images Depending on Browser Width\nThe HTML <picture> element allows you to define different images for different browser window sizes.\nResize the browser window to see how the image below changes depending on the width:\nExample\nResponsive Text Size\nThe text size can be set with a \"vw\" unit, which means the \"viewport width\".\nThat way the text size will follow the size of the browser window:\nResize the browser window to see how the text size scales.\nExample\nViewport is the browser window size. 1vw = 1% of viewport width. If the viewport is 50cm wide, 1vw is 0.5cm.\nMedia Queries\nIn addition to resize text and images, it is also common to use media queries in responsive web pages.\nWith media queries you can define completely different styles for different browser sizes.\nExample: resize the browser window to see that the three div elements below will display horizontally on large screens and stack vertically on small screens:\nExample\nTip: To learn more about Media Queries and Responsive Web Design, read our RWD Tutorial.\nResponsive Web Page - Full Example\nA responsive web page should look good on large desktop screens and on small mobile phones.\nTry it Yourself »\nEver heard about W3Schools Spaces? Here you can create your website from scratch or use a template, and host it for free.\n* no credit card required\nResponsive Web Design - Frameworks\nAll popular CSS Frameworks offer responsive design.\nThey are free, and easy to use.\nW3.CSS\nW3.CSS is a modern CSS framework with support for desktop, tablet, and mobile design by default.\nW3.CSS is smaller and faster than similar CSS frameworks.\nW3.CSS is designed to be independent of jQuery or any other JavaScript library.\nResize the page to see the responsiveness!\nLondon\nLondon is the capital city of England.\nIt is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.\nParis\nParis is the capital of France.\nThe Paris area is one of the largest population centers in Europe, with more than 12 million inhabitants.\nTokyo\nTokyo is the capital of Japan.\nIt is the center of the Greater Tokyo Area, and the most populous metropolitan area in the world.\nExample\nTo learn more about W3.CSS, read our W3.CSS Tutorial.\nBootstrap\nAnother popular CSS framework is Bootstrap:\nExample\nTo learn more about Bootstrap, go to our Bootstrap Tutorial.",
      "examples": [
        "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
        "<img src=\"img_girl.jpg\" style=\"width:100%;\">",
        "<img src=\"img_girl.jpg\" style=\"max-width:100%;height:auto;\">",
        "<picture>\n<source srcset=\"img_smallflower.jpg\" media=\"(max-width: 600px)\">\n<source srcset=\"img_flowers.jpg\" media=\"(max-width: 1500px)\">\n<source srcset=\"flowers.jpg\">\n<img src=\"img_smallflower.jpg\" alt=\"Flowers\">\n</picture>",
        "<h1 style=\"font-size:10vw\">Hello World</h1>",
        "<style>\n.left, .right {\nfloat: left;\nwidth: 20%; /* The width is 20%, by default */\n}\n\n.main {\nfloat: left;\nwidth: 60%; /* The width is 60%, by default */\n}\n\n/* Use a media query to add a breakpoint at 800px: */\n@media screen and (max-width: 800px) {\n.left, .main, .right {\nwidth: 100%; /* The width is 100%, when the viewport is 800px or smaller */\n}\n}\n</style>",
        "<!DOCTYPE html>\n<html>\n<head>\n<title>W3.CSS</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\">\n</head>\n<body>\n\n<div class=\"w3-container w3-green\">\n<h1>W3Schools Demo</h1>\n<p>Resize this responsive page!</p>\n</div>\n\n<div class=\"w3-row-padding\">\n<div class=\"w3-third\">\n<h2>London</h2>\n<p>London is the capital city of England.</p>\n<p>It is the most populous city in the United Kingdom,\nwith a metropolitan area of over 13 million inhabitants.</p>\n</div>\n\n<div class=\"w3-third\">\n<h2>Paris</h2>\n<p>Paris is the capital of France.</p>\n<p>The Paris area is one of the largest population centers in Europe,\nwith more than 12 million inhabitants.</p>\n</div>\n\n<div class=\"w3-third\">\n<h2>Tokyo</h2>\n<p>Tokyo is the capital of Japan.</p>\n<p>It is the center of the Greater Tokyo Area,\nand the most populous metropolitan area in the world.</p>\n</div>\n</div>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<title>Bootstrap 5 Example</title>\n<meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js\"></script>\n</head>\n<body>\n\n<div class=\"container-fluid p-5 bg-primary text-white text-center\">\n<h1>My First Bootstrap Page</h1>\n<p>Resize this responsive page to see the effect!</p>\n</div>\n\n<div class=\"container mt-5\">\n<div class=\"row\">\n<div class=\"col-sm-4\">\n<h3>Column 1</h3>\n<p>Lorem ipsum...</p>\n</div>\n<div class=\"col-sm-4\">\n<h3>Column 2</h3>\n<p>Lorem ipsum...</p>\n</div>\n<div class=\"col-sm-4\">\n<h3>Column 3</h3>\n<p>Lorem ipsum...</p>\n</div>\n</div>\n</div>",
        "<meta>",
        "width",
        "max-width",
        "<picture>"
      ]
    },
    {
      "title": "HTML Computer Code Elements",
      "summary": "HTML contains several elements for defining user input and computer code.\nExample\nHTML <kbd> For Keyboard Input\nThe HTML <kbd> element is used to define keyboard input. The content inside is displayed in the browser's default monospace font.\nExample\nDefine some text as keyboard input in a document:\nResult:\nHTML <samp> For Program Output\nThe HTML <samp> element is used to define sample output from a computer program. The content inside is displayed in the browser's default monospace font.\nExample\nDefine some text as sample output from a computer program in a document:\nResult:\nFile not found.\nPress F1 to continue\nREMOVE ADS\nHTML <code> For Computer Code\nThe HTML <code> element  is used to define a piece of computer code. The content inside is displayed in the browser's default monospace font.\nExample\nDefine some text as computer code in a document:\nResult:\nPreserve Line-Breaks\nNotice that the <code> element does NOT preserve extra whitespace and line-breaks.\nTo preserve extra whitespace and line-breaks, you can put the <code> element inside a <pre> element:\nExample\nResult:\nHTML <var> For Variables\nThe HTML <var> element  is used to define a variable in programming or in a mathematical expression. The content inside is typically displayed in italic.\nExample\nDefine some text as variables in a document:\nResult:\nChapter Summary\nThe <kbd> element defines keyboard input\nThe <samp> element defines sample output from a computer program\nThe <code> element defines a piece of computer code\nThe <var> element defines a variable in programming or in a mathematical expression\nThe <pre> element defines preformatted text\nHTML Computer Code Elements\nFor a complete list of all available HTML tags, visit our HTML Tag Reference.",
      "examples": [
        "<code>\nx = 5;\ny = 6;\nz = x + y;\n</code>",
        "<p>Save the document by pressing <kbd>Ctrl + S</kbd></p>",
        "<p>Message from my computer:</p>\n<p><samp>File not found.<br>Press F1 to continue</samp></p>",
        "<pre>\n<code>\nx = 5;\ny = 6;\nz = x + y;\n</code>\n</pre>",
        "<p>The area of a triangle is: 1/2 x <var>b</var> x <var>h</var>, where <var>b</var> is the base, and <var>h</var> is the vertical height.</p>",
        "<kbd>",
        "<samp>",
        "<code>",
        "x = 5; y = 6; z = x + y;",
        "<pre>",
        "x = 5;\ny = 6;\nz = x + y;",
        "<var>"
      ]
    },
    {
      "title": "HTML Semantic Elements",
      "summary": "Semantic elements = elements with a meaning.\nWhat are Semantic Elements?\nA semantic element clearly describes its meaning to both the browser and the developer.\nExamples of non-semantic elements: <div> and <span> - Tells nothing about its content.\nExamples of semantic elements: <img>, <table>, and <article> - Clearly defines its content.\nSemantic Elements in HTML\nMany web sites contain HTML code like: <div id=\"nav\"> <div class=\"header\"> <div id=\"footer\"> to indicate navigation, header, and footer.\nIn HTML there are several semantic elements that can be used to define different parts of a web page:\n<article>\n<aside>\n<details>\n<figcaption>\n<figure>\n<footer>\n<header>\n<main>\n<mark>\n<nav>\n<section>\n<summary>\n<time>\nHTML <section> Element\nThe <section> element defines a section in a document.\nAccording to W3C's HTML documentation: \"A section is a thematic grouping of content, typically with a heading.\"\nExamples of where a <section> element can be used:\nChapters\nIntroduction\nNews items\nContact information\nA web page could normally be split into sections for introduction, content, and contact information.\nExample\nTwo sections in a document:\nREMOVE ADS\nHTML <article> Element\nThe <article> element specifies independent, self-contained content.\nAn article should make sense on its own, and it should be possible to distribute it independently from the rest of the web site.\nExamples of where the <article> element can be used:\nForum posts\nBlog posts\nUser comments\nProduct cards\nNewspaper articles\nExample\nThree articles with independent, self-contained content:\nExample 2\nUse CSS to style the <article> element:\nNesting <article> in <section> or Vice Versa?\nThe <article> element specifies independent, self-contained content.\nThe <section> element defines a section in a document.\nCan we use the definitions to decide how to nest those elements? No, we cannot!\nSo, you will find HTML pages with <section> elements containing <article> elements, and <article> elements containing <section> elements.\nHTML <header> Element\nThe <header> element represents a container for introductory content or a set of navigational links.\nA <header> element typically contains:\none or more heading elements (<h1> - <h6>)\nlogo or icon\nauthorship information\nNote: You can have several <header> elements in one HTML document. However, <header> cannot be placed within a <footer>, <address> or another <header> element.\nExample\nA header for an <article>:\nHTML <footer> Element\nThe <footer> element defines a footer for a document or section.\nA <footer> element typically contains:\nauthorship information\ncopyright information\ncontact information\nsitemap\nback to top links\nrelated documents\nYou can have several <footer> elements in one document.\nExample\nA footer section in a document:\nHTML <nav> Element\nThe <nav> element defines a set of navigation links.\nNotice that NOT all links of a document should be inside a <nav> element. The <nav> element is intended only for major blocks of navigation links.\nBrowsers, such as screen readers for disabled users, can use this element to determine whether to omit the initial rendering of this content.\nExample\nA set of navigation links:\nHTML <aside> Element\nThe <aside> element defines some content aside from the content it is placed in (like a sidebar).\nThe <aside> content should be indirectly related to the surrounding content.\nExample\nDisplay some content aside from the content it is placed in:\nExample 2\nUse CSS to style the <aside> element:\nHTML <figure> and <figcaption> Elements\nThe <figure> tag specifies self-contained content, like illustrations, diagrams, photos, code listings, etc.\nThe <figcaption> tag defines a caption for a <figure> element. The <figcaption> element can be placed as the first or as the last child of a <figure> element.\nThe <img> element defines the actual image/illustration.\nExample\nWhy Semantic Elements?\nAccording to the W3C: \"A semantic Web allows data to be shared and reused across applications, enterprises, and communities.\"\nSemantic Elements in HTML\nBelow is a list of some of the semantic elements in HTML.\nFor a complete list of all available HTML tags, visit our HTML Tag Reference.",
      "examples": [
        "<section>\n<h1>WWF</h1>\n<p>The World Wide Fund for Nature (WWF) is an international organization working on issues regarding the conservation, research and restoration of the environment, formerly named the World Wildlife Fund. WWF was founded in 1961.</p>\n</section>\n\n<section>\n<h1>WWF's Panda symbol</h1>\n<p>The Panda has become the symbol of WWF. The well-known panda logo of WWF originated from a panda named Chi Chi that was transferred from the Beijing Zoo to the London Zoo in the same year of the establishment of WWF.</p>\n</section>",
        "<article>\n<h2>Google Chrome</h2>\n<p>Google Chrome is a web browser developed by Google, released in 2008. Chrome is the world's most popular web browser today!</p>\n</article>\n\n<article>\n<h2>Mozilla Firefox</h2>\n<p>Mozilla Firefox is an open-source web browser developed by Mozilla. Firefox has been the second most popular web browser since January, 2018.</p>\n</article>\n\n<article>\n<h2>Microsoft Edge</h2>\n<p>Microsoft Edge is a web browser developed by Microsoft, released in 2015. Microsoft Edge replaced Internet Explorer.</p>\n</article>",
        "<html>\n<head>\n<style>\n.all-browsers {\nmargin: 0;\npadding: 5px;\nbackground-color: lightgray;\n}\n\n.all-browsers > h1, .browser {\nmargin: 10px;\npadding: 5px;\n}\n\n.browser {\nbackground: white;\n}\n\n.browser > h2, p {\nmargin: 4px;\nfont-size: 90%;\n}\n</style>\n</head>\n<body>\n\n<article class=\"all-browsers\">\n<h1>Most Popular Browsers</h1>\n<article class=\"browser\">\n<h2>Google Chrome</h2>\n<p>Google Chrome is a web browser developed by Google, released in 2008. Chrome is the world's most popular web browser today!</p>\n</article>\n<article class=\"browser\">\n<h2>Mozilla Firefox</h2>\n<p>Mozilla Firefox is an open-source web browser developed by Mozilla. Firefox has been the second most popular web browser since January, 2018.</p>\n</article>\n<article class=\"browser\">\n<h2>Microsoft Edge</h2>\n<p>Microsoft Edge is a web browser developed by Microsoft, released in 2015. Microsoft Edge replaced Internet Explorer.</p>\n</article>\n</article>\n\n</body>\n</html>",
        "<article>\n<header>\n<h1>What Does WWF Do?</h1>\n<p>WWF's mission:</p>\n</header>\n<p>WWF's mission is to stop the degradation of our planet's natural environment,\nand build a future in which humans live in harmony with nature.</p>\n</article>",
        "<footer>\n<p>Author: Hege Refsnes</p>\n<p><a href=\"mailto:hege@example.com\">hege@example.com</a></p>\n</footer>",
        "<nav>\n<a href=\"/html/\">HTML</a> |\n<a href=\"/css/\">CSS</a> |\n<a href=\"/js/\">JavaScript</a> |\n<a href=\"/jquery/\">jQuery</a>\n</nav>",
        "<p>My family and I visited The Epcot center this summer. The weather was nice, and Epcot was amazing! I had a great summer together with my family!</p>\n\n<aside>\n<h4>Epcot Center</h4>\n<p>Epcot is a theme park at Walt Disney World Resort featuring exciting attractions, international pavilions, award-winning fireworks and seasonal special events.</p>\n</aside>",
        "<html>\n<head>\n<style>\naside {\nwidth: 30%;\npadding-left: 15px;\nmargin-left: 15px;\nfloat: right;\nfont-style: italic;\nbackground-color: lightgray;\n}\n</style>\n</head>\n<body>\n\n<p>My family and I visited The Epcot center this summer. The weather was nice, and Epcot was amazing! I had a great summer together with my family!</p>\n\n<aside>\n<p>The Epcot center is a theme park at Walt Disney World Resort featuring exciting attractions, international pavilions, award-winning fireworks and seasonal special events.</p>\n</aside>\n\n<p>My family and I visited The Epcot center this summer. The weather was nice, and Epcot was amazing! I had a great summer together with my family!</p>\n<p>My family and I visited The Epcot center this summer. The weather was nice, and Epcot was amazing! I had a great summer together with my family!</p>\n\n</body>\n</html>",
        "<figure>\n<img src=\"pic_trulli.jpg\" alt=\"Trulli\">\n<figcaption>Fig1. - Trulli, Puglia, Italy.</figcaption>\n</figure>",
        "<div>",
        "<span>",
        "<img>",
        "<table>",
        "<article>",
        "<section>",
        "<header>",
        "<footer>",
        "<address>",
        "<nav>",
        "<aside>",
        "<figure>",
        "<figcaption>"
      ]
    },
    {
      "title": "HTML Style Guide",
      "summary": "Consistent, clean, and tidy HTML code makes it easier for others to read and understand your code.\nHere are some guidelines and tips for creating good HTML code.\nAlways Declare Document Type\nAlways declare the document type as the first line in your document.\nThe correct document type for HTML is:\nUse Lowercase Element Names\nHTML allows mixing uppercase and lowercase letters in element names.\nHowever, we recommend using lowercase element names, because:\nMixing uppercase and lowercase names looks bad\nDevelopers normally use lowercase names\nLowercase looks cleaner\nLowercase is easier to type\nGood:\nBad:\nREMOVE ADS\nClose All HTML Elements\nIn HTML, you do not have to close all elements (for example the <p> element).\nHowever, we strongly recommend closing all HTML elements, like this:\nGood:\nBad:\nUse Lowercase Attribute Names\nHTML allows mixing uppercase and lowercase letters in attribute names.\nHowever, we recommend using lowercase attribute names, because:\nMixing uppercase and lowercase names looks bad\nDevelopers normally use lowercase names\nLowercase looks cleaner\nLowercase is easier to type\nGood:\nBad:\nAlways Quote Attribute Values\nHTML allows attribute values without quotes.\nHowever, we recommend quoting attribute values, because:\nDevelopers normally quote attribute values\nQuoted values are easier to read\nYou MUST use quotes if the value contains spaces\nGood:\nBad:\nVery bad:\nThis will not work, because the value contains spaces:\nAlways Specify alt, width, and height for Images\nAlways specify the alt attribute for images. This attribute is important if the image for some reason cannot be displayed.\nAlso, always define the width and height of images. This reduces flickering, because the browser can reserve space for the image before loading.\nGood:\nBad:\nSpaces and Equal Signs\nHTML allows spaces around equal signs. But space-less is easier to read and groups entities better together.\nGood:\nBad:\nAvoid Long Code Lines\nWhen using an HTML editor, it is NOT convenient to scroll right and left to read the HTML code.\nTry to avoid too long code lines.\nBlank Lines and Indentation\nDo not add blank lines, spaces, or indentations without a reason.\nFor readability, add blank lines to separate large or logical code blocks.\nFor readability, add two spaces of indentation. Do not use the tab key.\nGood:\nBad:\nGood Table Example:\nGood List Example:\nNever Skip the <title> Element\nThe <title> element is required in HTML.\nThe contents of a page title is very important for search engine optimization (SEO)! The page title is used by search engine algorithms to decide the order when listing pages in search results.\nThe <title> element:\ndefines a title in the browser toolbar\nprovides a title for the page when it is added to favorites\ndisplays a title for the page in search-engine results\nSo, try to make the title as accurate and meaningful as possible:\nOmitting <html> and <body>?\nAn HTML page will validate without the <html> and <body> tags:\nExample\nHowever, we strongly recommend to always add the <html> and <body> tags!\nOmitting <body> can produce errors in older browsers.\nOmitting <html> and <body> can also crash DOM and XML software.\nOmitting <head>?\nThe HTML <head> tag can also be omitted.\nBrowsers will add all elements before <body>, to a default <head> element.\nExample\nHowever, we recommend using the <head> tag.\nClose Empty HTML Elements?\nIn HTML, it is optional to close empty elements.\nAllowed:\nAlso Allowed:\nIf you expect XML/XHTML software to access your page, keep the closing slash (/), because it is required in XML and XHTML.\nAdd the lang Attribute\nYou should always include the lang attribute inside the <html> tag, to declare the language of the Web page. This is meant to assist search engines and browsers.\nExample\nMeta Data\nTo ensure proper interpretation and correct search engine indexing, both the language and the character encoding <meta charset=\"charset\"> should be defined as early as possible in an HTML document:\nSetting The Viewport\nThe viewport is the user's visible area of a web page. It varies with the device - it will be smaller on a mobile phone than on a computer screen.\nYou should include the following <meta> element in all your web pages:\nThis gives the browser instructions on how to control the page's dimensions and scaling.\nThe width=device-width part sets the width of the page to follow the screen-width of the device (which will vary depending on the device).\nThe initial-scale=1.0 part sets the initial zoom level when the page is first loaded by the browser.\nHere is an example of a web page without the viewport meta tag, and the same web page with the viewport meta tag:\nTip: If you are browsing this page with a phone or a tablet, you can click on the two links below to see the difference.\nHTML Comments\nShort comments should be written on one line, like this:\nComments that span more than one line, should be written like this:\nLong comments are easier to observe if they are indented with two spaces.\nUsing Style Sheets\nUse simple syntax for linking to style sheets (the type attribute is not necessary):\nShort CSS rules can be written compressed, like this:\nLong CSS rules should be written over multiple lines:\nPlace the opening bracket on the same line as the selector\nUse one space before the opening bracket\nUse two spaces of indentation\nUse semicolon after each property-value pair, including the last\nOnly use quotes around values if the value contains spaces\nPlace the closing bracket on a new line, without leading spaces\nLoading JavaScript in HTML\nUse simple syntax for loading external scripts (the type attribute is not necessary):\nAccessing HTML Elements with JavaScript\nUsing \"untidy\" HTML code can result in JavaScript errors.\nThese two JavaScript statements will produce different results:\nExample\nVisit the JavaScript Style Guide.\nUse Lower Case File Names\nSome web servers (Apache, Unix) are case sensitive about file names: \"london.jpg\" cannot be accessed as \"London.jpg\".\nOther web servers (Microsoft, IIS) are not case sensitive: \"london.jpg\" can be accessed as \"London.jpg\".\nIf you use a mix of uppercase and lowercase, you have to be aware of this.\nIf you move from a case-insensitive to a case-sensitive server, even small errors will break your website!\nTo avoid these problems, always use lowercase file names!\nFile Extensions\nHTML files should have a .html extension (.htm is allowed).\nCSS files should have a .css extension.\nJavaScript files should have a .js extension.\nDifferences Between .htm and .html?\nThere is no difference between the .htm and .html file extensions!\nBoth will be treated as HTML by any web browser and web server.\nDefault Filenames\nWhen a URL does not specify a filename at the end (like \"https://www.w3schools.com/\"), the server just adds a default filename, such as \"index.html\", \"index.htm\", \"default.html\", or \"default.htm\".\nIf your server is configured only with \"index.html\" as the default filename, your file must be named \"index.html\", and not \"default.html\".\nHowever, servers can be configured with more than one default filename; usually you can set up as many default filenames as you want.",
      "examples": [
        "<!DOCTYPE html>",
        "<body>\n<p>This is a paragraph.</p>\n</body>",
        "<BODY>\n<P>This is a paragraph.</P>\n</BODY>",
        "<section>\n<p>This is a paragraph.</p>\n<p>This is a paragraph.</p>\n</section>",
        "<section>\n<p>This is a paragraph.\n<p>This is a paragraph.\n</section>",
        "<a href=\"https://www.w3schools.com/html/\">Visit our HTML tutorial</a>",
        "<a HREF=\"https://www.w3schools.com/html/\">Visit our HTML tutorial</a>",
        "<table class=\"striped\">",
        "<table class=striped>",
        "<table class=table striped>",
        "<img src=\"html5.gif\" alt=\"HTML5\" style=\"width:128px;height:128px\">",
        "<img src=\"html5.gif\">",
        "<link rel=\"stylesheet\" href=\"styles.css\">",
        "<link rel = \"stylesheet\" href = \"styles.css\">",
        "<body>\n\n<h1>Famous Cities</h1>\n\n<h2>Tokyo</h2>\n<p>Tokyo is the capital of Japan, the center of the Greater Tokyo Area, and the most populous metropolitan area in the world.</p>\n\n<h2>London</h2>\n<p>London is the capital city of England. It is the most populous city in the United Kingdom.</p>\n\n<h2>Paris</h2>\n<p>Paris is the capital of France. The Paris area is one of the largest population centers in Europe.</p>\n\n</body>",
        "<body>\n<h1>Famous Cities</h1>\n<h2>Tokyo</h2><p>Tokyo is the capital of Japan, the center of the Greater Tokyo Area, and the most populous metropolitan area in the world.</p>\n<h2>London</h2><p>London is the capital city of England. It is the most populous city in the United Kingdom.</p>\n<h2>Paris</h2><p>Paris is the capital of France. The Paris area is one of the largest population centers in Europe.</p>\n</body>",
        "<table>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n<tr>\n<td>A</td>\n<td>Description of A</td>\n</tr>\n<tr>\n<td>B</td>\n<td>Description of B</td>\n</tr>\n</table>",
        "<ul>\n<li>London</li>\n<li>Paris</li>\n<li>Tokyo</li>\n</ul>",
        "<title>HTML Style Guide and Coding Conventions</title>",
        "<!DOCTYPE html>\n<head>\n<title>Page Title</title>\n</head>\n\n<h1>This is a heading</h1>\n<p>This is a paragraph.</p>",
        "<!DOCTYPE html>\n<html>\n<title>Page Title</title>\n<body>\n\n<h1>This is a heading</h1>\n<p>This is a paragraph.</p>\n\n</body>\n</html>",
        "<meta charset=\"utf-8\">",
        "<meta charset=\"utf-8\" />",
        "<!DOCTYPE html>\n<html lang=\"en-us\">\n<head>\n<title>Page Title</title>\n</head>\n<body>\n\n<h1>This is a heading</h1>\n<p>This is a paragraph.</p>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html lang=\"en-us\">\n<head>\n<meta charset=\"UTF-8\">\n<title>Page Title</title>\n</head>",
        "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
        "<!-- This is a comment -->",
        "<!--\nThis is a long comment example. This is a long comment example.\nThis is a long comment example. This is a long comment example.\n-->",
        "p.intro {font-family:Verdana;font-size:16em;}",
        "body {\nbackground-color: lightgrey;\nfont-family: \"Arial Black\", Helvetica, sans-serif;\nfont-size: 16em;\ncolor: black;\n}",
        "<script src=\"myscript.js\">",
        "getElementById(\"Demo\").innerHTML = \"Hello\";\n\ngetElementById(\"demo\").innerHTML = \"Hello\";",
        "<p>",
        "alt",
        "width",
        "height",
        "<title>",
        "<html>",
        "<body>",
        "<head>",
        "lang",
        "<meta charset=\"charset\">",
        "<meta>",
        "width=device-width",
        "initial-scale=1.0",
        "type"
      ]
    },
    {
      "title": "HTML Entities",
      "summary": "Reserved characters in HTML must be replaced with entities:\n< (less than) = &lt;\n> (greater than) = &gt;\nHTML Character Entities\nSome characters are reserved in HTML.\nIf you use the less than (<) or greater than (>) signs in your HTML text, the browser might mix them with tags.\nEntity names or entity numbers can be used to display reserved HTML characters.\nEntity names look like this:\nEntity numbers look like this:\nTo display a less than sign (<) we must write: &lt; or &#60;\nEntity names are easier to remember than entity numbers.\nNon-breaking Space\nA commonly used HTML entity is the non-breaking space: &nbsp;\nA non-breaking space is a space that will not break into a new line.\nTwo words separated by a non-breaking space will stick together (not break into a new line). This is handy when breaking the words might be disruptive.\nExamples:\n§ 10\n10 km/h\n10 PM\nAnother common use of the non-breaking space is to prevent browsers from truncating spaces in HTML pages.\nIf you write 10 spaces in your text, the browser will remove 9 of them. To add real spaces to your text, you can use the &nbsp; character entity.\nThe non-breaking hyphen (&#8209;) is used to define a hyphen character (‑) that does not break into a new line.\nREMOVE ADS\nSome Useful HTML Character Entities\nNote\nEntity names are case sensitive.\nCombining Diacritical Marks\nA diacritical mark is a \"glyph\" added to a letter.\nSome diacritical marks, like grave (  ̀) and acute (  ́) are called accents.\nDiacritical marks can be used in combination with alphanumeric characters to produce a character that is not present in the character set (encoding) used in the page.\nHere are some examples:\nThere are more examples in the next chapter.",
      "examples": [
        "&entity_name;",
        "&#entity_number;"
      ]
    },
    {
      "title": "HTML Symbols",
      "summary": "HTML Symbol Entities\nSymbols or letters that are not present on your keyboard can be added to HTML using entities.\nTo add such symbols to an HTML page, you can use the entity name or the entity number (a decimal or a hexadecimal reference) for the symbol:\nExample\nDisplay the euro sign:\nWill display as:\nSome HTML Symbol Entities\nLearn More:\nFull Currency Reference\nFull Arrows Reference\nFull Symbols Reference\nSome HTML Mathematical Entities\nLearn More:\nFull Math Symbols Reference\nFull Symbols Reference\nREMOVE ADS\nSome HTML Greek Letters Entities\nLearn More:\nFull Greek Reference\nFull Symbols Reference\nMore Symbols\nCurrency Symbols\nLetterlike Symbols\nNumber Forms\nMath Operators\nMath Symbols\nMath Alphanumeric\nEnclosed Alphanumeric\nMisc Technical\nBox Drawings\nBlock Elements\nGeometric Shapes\nWeather Symbols\nAstrological Symbols\nMusical Symbols\nDomino & Dices\nMahjong Tiles\nChess Symbols\nCard Symbols\nArrows\nArrows A\nArrows B\nArrows C\nSymbols and Arrows\nYin Yang Symbols\nRecycling Symbols\nLife & Religion\nPlaces & Traffic\nMisc Symbols\nDingbats\nBraille\nAegean Numbers\nGothic\nAlchemical\nMeroitic Hieroglyphs\nEgyptian Hieroglyphs\nColored Symbols",
      "examples": [
        "<p>I will display &euro;</p>\n<p>I will display &#8364;</p>\n<p>I will display &#x20AC;</p>"
      ]
    },
    {
      "title": "Using Emojis in HTML",
      "summary": "What are Emojis?\nEmojis look like images, but they are not.\nEmojis are letters (characters) from the UTF-8 (Unicode) character set:\n😄 😍 💗\nUTF-8 covers almost all of the characters and symbols in the world.\nHTML Emojis Examples\nSmileys\nHands\nPeople\nOffice\nPlaces\nTransport\nAnimals\nFood\nPlants\nFruits\nSports\nEarth & Sky\nWeather\nClothing\nAudio/Video\nCelebration\nEntertainment\nSymbols\nLearn More:\nFull HTML Emoji Reference\nThe HTML charset Attribute\nTo display an HTML page correctly, a web browser must know the character set used in the page.\nThis is specified in the <meta> tag:\nIf not specified, UTF-8 is the default character set in HTML.\nUTF-8 Characters\nMany UTF-8 characters cannot be typed on a keyboard, but they can always be displayed using numbers (called entity numbers):\nA is 65\nB is 66\nC is 67\nExample\nExample Explained\nThe <meta charset=\"UTF-8\"> element defines the character set.\nThe characters A, B, and C, are displayed by the numbers 65, 66, and 67.\nTo let the browser understand that you are displaying a character, you must start the entity number with &# and end it with ; (semicolon).\nREMOVE ADS\nEmoji Characters\nEmojis are also characters from the UTF-8 alphabet:\n😄 is 128516\n😍 is 128525\n💗 is 128151\nExample\nSince Emojis are characters, they can be copied, displayed, and sized just like any other character in HTML.\nExample",
      "examples": [
        "<meta charset=\"UTF-8\">",
        "<!DOCTYPE html>\n<html>\n<meta charset=\"UTF-8\">\n<body>\n\n<p>I will display A B C</p>\n<p>I will display &#65; &#66; &#67;</p>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<meta charset=\"UTF-8\">\n<body>\n\n<h1>My First Emoji</h1>\n\n<p>&#128512;</p>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<meta charset=\"UTF-8\">\n<body>\n\n<h1>Sized Emojis</h1>\n\n<p style=\"font-size:48px\">\n&#128512; &#128516; &#128525; &#128151;\n</p>\n\n</body>\n</html>",
        "<meta>"
      ]
    },
    {
      "title": "HTML Encoding (Character Sets)",
      "summary": "The HTML charset Attribute\nTo display an HTML page correctly, a web browser must know which character set to use.\nThe character set is specified in the <meta> tag:\nThe HTML specification encourages web developers to use the UTF-8 character set.\nUTF-8 covers almost all of the characters and symbols in the world!\nLearn More:\nFull UTF-8 Reference\nThe ASCII Character Set\nASCII was the first character encoding standard for the web.\nIt defined 128 different latin characters that could be used on the internet:\nEnglish letters (a-z and A-Z)\nNumbers (0-9)\nSome special characters: ! $ + - ( ) @ < > . # ?\nThe ANSI Character Set\nANSI (Windows-1252) was the first Windows character set:\nIdentical to ASCII for the first 127 characters\nSpecial characters from 128 to 159\nIdentical to UTF-8 from 160 to 255\nThe ISO-8859-1 Character Set\nThe default character set for HTML 4 was ISO-8859-1.\nIt supported 256 characters:\nIdentical to ASCII for the first 127 characters\nDoes not use the characters from 128 to 159\nIdentical to ANSI and UTF-8 from 160 to 255\nHTML 4 Example\nHTML 5 Example\nThe UTF-8 Character Set\nIdentical to ASCII for the values from 0 to 127\nDoes not use the characters from 128 to 159\nIdentical to ANSI and 8859-1 from 160 to 255\nContinues from the value 256 to 10 000 characters\nLearn More:\nFull UTF-8 Reference\nREMOVE ADS\nHTML UTF-8 Characters\nBasic Latin\nLatin Extended A-B\nLatin IPA Extentions\nSpacing Modifiers\nDiacritical Marks\nGreek and Coptic\nSlavic / Cyrillic\nGeorgian\nArmenian\nGlagolitic\nArabic\nHebrew\nSyriac\nHindi / Devanagari\nThai\nEthiopic\nCherokee\nAboriginal\nRunic\nGeneral Punctuation",
      "examples": [
        "<meta charset=\"UTF-8\">",
        "<meta charset=\"Windows-1252\">",
        "<meta http-equiv=\"Content-Type\" content=\"text/html;charset=ISO-8859-1\">",
        "<meta charset=\"ISO-8859-1\">",
        "<meta>"
      ]
    },
    {
      "title": "HTML Uniform Resource Locators",
      "summary": "A URL is another word for a web address.\nA URL can be composed of words (e.g. w3schools.com), or an Internet Protocol (IP) address (e.g. 192.68.20.50).\nMost people enter the name when surfing, because names are easier to remember than numbers.\nURL - Uniform Resource Locator\nWeb browsers request pages from web servers by using a URL.\nA Uniform Resource Locator (URL) is used to address a document (or other data) on the web.\nA web address like https://www.w3schools.com/html/default.asp follows these syntax rules:\nExplanation:\nscheme - defines the type of Internet service (most common is http or https)\nprefix - defines a domain prefix (default for http is www)\ndomain - defines the Internet domain name (like w3schools.com)\nport - defines the port number at the host (default for http is 80)\npath - defines a path at the server (If omitted: the root directory of the site)\nfilename - defines the name of a document or resource\nCommon URL Schemes\nThe table below lists some common schemes:\nREMOVE ADS\nURL Encoding\nURLs can only be sent over the Internet using the ASCII character-set. If a URL contains characters outside the ASCII set, the URL has to be converted.\nURL encoding converts non-ASCII characters into a format that can be transmitted over the Internet.\nURL encoding replaces non-ASCII characters with a \"%\" followed by hexadecimal digits.\nURLs cannot contain spaces. URL encoding normally replaces a space with a plus (+) sign, or %20.\nTry It Yourself\nIf you click \"Submit\", the browser will URL encode the input before it is sent to the server.\nA page at the server will display the received input.\nTry some other input and click Submit again.\nASCII Encoding Examples\nYour browser will encode input, according to the character-set used in your page.\nThe default character-set in HTML5 is UTF-8.\nFor a complete reference of all URL encodings, visit our URL Encoding Reference.",
      "examples": [
        "scheme://prefix.domain:port/path/filename"
      ]
    },
    {
      "title": "HTML Versus XHTML",
      "summary": "XHTML is a stricter, more XML-based version of HTML.\nWhat is XHTML?\nXHTML stands for EXtensible HyperText Markup Language\nXHTML is a stricter, more XML-based version of HTML\nXHTML is HTML defined as an XML application\nXHTML is supported by all major browsers\nWhy XHTML?\nXML is a markup language where all documents must be marked up correctly (be \"well-formed\").\nXHTML was developed to make HTML more extensible and flexible to work with other data formats (such as XML). In addition, browsers ignore errors in HTML pages, and try to display the website even if it has some errors in the markup. So XHTML comes with a much stricter error handling.\nIf you want to study XML, please read our XML Tutorial.\nThe Most Important Differences from HTML\n<!DOCTYPE> is mandatory\nThe xmlns attribute in <html> is mandatory\n<html>, <head>, <title>, and <body> are mandatory\nElements must always be properly nested\nElements must always be closed\nElements must always be in lowercase\nAttribute names must always be in lowercase\nAttribute values must always be quoted\nAttribute minimization is forbidden\nREMOVE ADS\nXHTML - <!DOCTYPE ....> Is Mandatory\nAn XHTML document must have an XHTML <!DOCTYPE> declaration.\nThe <html>, <head>, <title>, and <body> elements must also be present, and the xmlns attribute in <html> must specify the xml namespace for the document.\nExample\nHere is an XHTML document with a minimum of required tags:\nXHTML Elements Must be Properly Nested\nIn XHTML, elements must always be properly nested within each other, like this:\nCorrect:\nWrong:\nXHTML Elements Must Always be Closed\nIn XHTML, elements must always be closed, like this:\nCorrect:\nWrong:\nXHTML Empty Elements Must Always be Closed\nIn XHTML, empty elements must always be closed, like this:\nCorrect:\nWrong:\nXHTML Elements Must be in Lowercase\nIn XHTML, element names must always be in lowercase, like this:\nCorrect:\nWrong:\nXHTML Attribute Names Must be in Lowercase\nIn XHTML, attribute names must always be in lowercase, like this:\nCorrect:\nWrong:\nXHTML Attribute Values Must be Quoted\nIn XHTML, attribute values must always be quoted, like this:\nCorrect:\nWrong:\nXHTML Attribute Minimization is Forbidden\nIn XHTML, attribute minimization is forbidden:\nCorrect:\nWrong:\nValidate HTML With The W3C Validator\nPut your web address in the box below:",
      "examples": [
        "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\"\n\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<title>Title of document</title>\n</head>\n<body>\n\nsome content here...\n\n</body>\n</html>",
        "<b><i>Some text</i></b>",
        "<b><i>Some text</b></i>",
        "<p>This is a paragraph</p>\n<p>This is another paragraph</p>",
        "<p>This is a paragraph\n<p>This is another paragraph",
        "A break: <br />\nA horizontal rule: <hr />\nAn image: <img src=\"happy.gif\" alt=\"Happy face\" />",
        "A break: <br>\nA horizontal rule: <hr>\nAn image: <img src=\"happy.gif\" alt=\"Happy face\">",
        "<body>\n<p>This is a paragraph</p>\n</body>",
        "<BODY>\n<P>This is a paragraph</P>\n</BODY>",
        "<a href=\"https://www.w3schools.com/html/\">Visit our HTML tutorial</a>",
        "<a HREF=\"https://www.w3schools.com/html/\">Visit our HTML tutorial</a>",
        "<a href=https://www.w3schools.com/html/>Visit our HTML tutorial</a>",
        "<input type=\"checkbox\" name=\"vehicle\" value=\"car\" checked=\"checked\" />\n<input type=\"text\" name=\"lastname\" disabled=\"disabled\" />",
        "<input type=\"checkbox\" name=\"vehicle\" value=\"car\" checked />\n<input type=\"text\" name=\"lastname\" disabled />"
      ]
    },
    {
      "title": "HTML Forms",
      "summary": "An HTML form is used to collect user input. The user input is most often sent to a server for processing.\nExample\nThe <form> Element\nThe HTML <form> element is used to create an HTML form for user input:\nThe <form> element is a container for different types of input elements, such as: text fields, checkboxes, radio buttons, submit buttons, etc.\nAll the different form elements are covered in this chapter: HTML Form Elements.\nThe <input> Element\nThe HTML <input> element is the most used form element.\nAn <input> element can be displayed in many ways, depending on the type attribute.\nHere are some examples:\nAll the different input types are covered in this chapter: HTML Input Types.\nREMOVE ADS\nText Fields\nThe <input type=\"text\"> defines a single-line input field for text input.\nExample\nA form with input fields for text:\nThis is how the HTML code above will be displayed in a browser:\nNote: The form itself is not visible. Also note that the default width of an input field is 20 characters.\nThe <label> Element\nNotice the use of the <label> element in the example above.\nThe <label> tag defines a label for many form elements.\nThe <label> element is useful for screen-reader users, because the screen-reader will read out loud the label when the user focuses on the input element.\nThe <label> element also helps users who have difficulty clicking on very small regions (such as radio buttons or checkboxes) - because when the user clicks the text within the <label> element, it toggles the radio button/checkbox.\nThe for attribute of the <label> tag should be equal to the id attribute of the <input> element to bind them together.\nRadio Buttons\nThe <input type=\"radio\"> defines a radio button.\nRadio buttons let a user select ONE of a limited number of choices.\nExample\nA form with radio buttons:\nThis is how the HTML code above will be displayed in a browser:\nChoose your favorite Web language:\nCheckboxes\nThe <input type=\"checkbox\"> defines a checkbox.\nCheckboxes let a user select ZERO or MORE options of a limited number of choices.\nExample\nA form with checkboxes:\nThis is how the HTML code above will be displayed in a browser:\nThe Submit Button\nThe <input type=\"submit\"> defines a button for submitting the form data to a form-handler.\nThe form-handler is typically a file on the server with a script for processing input data.\nThe form-handler is specified in the form's action attribute.\nExample\nA form with a submit button:\nThis is how the HTML code above will be displayed in a browser:\nThe Name Attribute for <input>\nNotice that each input field must have a name attribute to be submitted.\nIf the name attribute is omitted, the value of the input field will not be sent at all.\nExample\nThis example will not submit the value of the \"First name\" input field:\nVideo: HTML Forms",
      "examples": [
        "<form>\n.\nform elements\n.\n</form>",
        "<form>\n<label for=\"fname\">First name:</label><br>\n<input type=\"text\" id=\"fname\" name=\"fname\"><br>\n<label for=\"lname\">Last name:</label><br>\n<input type=\"text\" id=\"lname\" name=\"lname\">\n</form>",
        "<p>Choose your favorite Web language:</p>\n\n<form>\n<input type=\"radio\" id=\"html\" name=\"fav_language\" value=\"HTML\">\n<label for=\"html\">HTML</label><br>\n<input type=\"radio\" id=\"css\" name=\"fav_language\" value=\"CSS\">\n<label for=\"css\">CSS</label><br>\n<input type=\"radio\" id=\"javascript\" name=\"fav_language\" value=\"JavaScript\">\n<label for=\"javascript\">JavaScript</label>\n</form>",
        "<form>\n<input type=\"checkbox\" id=\"vehicle1\" name=\"vehicle1\" value=\"Bike\">\n<label for=\"vehicle1\"> I have a bike</label><br>\n<input type=\"checkbox\" id=\"vehicle2\" name=\"vehicle2\" value=\"Car\">\n<label for=\"vehicle2\"> I have a car</label><br>\n<input type=\"checkbox\" id=\"vehicle3\" name=\"vehicle3\" value=\"Boat\">\n<label for=\"vehicle3\"> I have a boat</label>\n</form>",
        "<form action=\"/action_page.php\">\n<label for=\"fname\">First name:</label><br>\n<input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\"><br>\n<label for=\"lname\">Last name:</label><br>\n<input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\"><br><br>\n<input type=\"submit\" value=\"Submit\">\n</form>",
        "<form action=\"/action_page.php\">\n<label for=\"fname\">First name:</label><br>\n<input type=\"text\" id=\"fname\" value=\"John\"><br><br>\n<input type=\"submit\" value=\"Submit\">\n</form>",
        "<form>",
        "<input>",
        "type",
        "<input type=\"text\">",
        "<label>",
        "for",
        "id",
        "<input type=\"radio\">",
        "<input type=\"checkbox\">",
        "<input type=\"submit\">",
        "action",
        "name"
      ]
    },
    {
      "title": "HTML Form Attributes",
      "summary": "This chapter describes the different attributes for the HTML <form> element.\nThe Action Attribute\nThe action attribute defines the action to be performed when the form is submitted.\nUsually, the form data is sent to a file on the server when the user clicks on the submit button.\nIn the example below, the form data is sent to a file called \"action_page.php\". This file contains a server-side script that handles the form data:\nExample\nOn submit, send form data to \"action_page.php\":\nTip: If the action attribute is omitted, the action is set to the current page.\nThe Target Attribute\nThe target attribute specifies where to display the response that is received after submitting the form.\nThe target attribute can have one of the following values:\nThe default value is _self which means that the response will open in the current window.\nExample\nHere, the submitted result will open in a new browser tab:\nThe Method Attribute\nThe method attribute specifies the HTTP method to be used when submitting the form data.\nThe form-data can be sent as URL variables (with method=\"get\") or as HTTP post transaction (with method=\"post\").\nThe default HTTP method when submitting form data is GET.\nExample\nThis example uses the GET method when submitting the form data:\nExample\nThis example uses the POST method when submitting the form data:\nNotes on GET:\nAppends the form data to the URL, in name/value pairs\nNEVER use GET to send sensitive data! (the submitted form data is visible in the URL!)\nThe length of a URL is limited (2048 characters)\nUseful for form submissions where a user wants to bookmark the result\nGET is good for non-secure data, like query strings in Google\nNotes on POST:\nAppends the form data inside the body of the HTTP request (the submitted form data is not shown in the URL)\nPOST has no size limitations, and can be used to send large amounts of data.\nForm submissions with POST cannot be bookmarked\nTip: Always use POST if the form data contains sensitive or personal information!\nREMOVE ADS\nThe Autocomplete Attribute\nThe autocomplete attribute specifies whether a form should have autocomplete on or off.\nWhen autocomplete is on, the browser automatically complete values based on values that the user has entered before.\nExample\nA form with autocomplete on:\nThe Novalidate Attribute\nThe novalidate attribute is a boolean attribute.\nWhen present, it specifies that the form-data (input) should not be validated when submitted.\nExample\nA form with a novalidate attribute:\nList of All <form> Attributes",
      "examples": [
        "<form action=\"/action_page.php\">\n<label for=\"fname\">First name:</label><br>\n<input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\"><br>\n<label for=\"lname\">Last name:</label><br>\n<input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\"><br><br>\n<input type=\"submit\" value=\"Submit\">\n</form>",
        "<form action=\"/action_page.php\" target=\"_blank\">",
        "<form action=\"/action_page.php\" method=\"get\">",
        "<form action=\"/action_page.php\" method=\"post\">",
        "<form action=\"/action_page.php\" autocomplete=\"on\">",
        "<form action=\"/action_page.php\" novalidate>",
        "<form>",
        "action",
        "target",
        "_self",
        "method",
        "method=\"get\"",
        "method=\"post\"",
        "autocomplete",
        "novalidate"
      ]
    },
    {
      "title": "HTML Form Elements",
      "summary": "This chapter describes all the different HTML form elements.\nThe HTML <form> Elements\nThe HTML <form> element can contain one or more of the following form elements:\n<input>\n<label>\n<select>\n<textarea>\n<button>\n<fieldset>\n<legend>\n<datalist>\n<output>\n<option>\n<optgroup>\nThe <input> Element\nOne of the most used form elements is the <input> element.\nThe <input> element can be displayed in several ways, depending on the type attribute.\nExample\nAll the different values of the type attribute are covered in the next chapter: HTML Input Types.\nThe <label> Element\nThe <label> element defines a label for several form elements.\nThe <label> element is useful for screen-reader users, because the screen-reader will read out loud the label when the user focus on the input element.\nThe <label> element also help users who have difficulty clicking on very small regions (such as radio buttons or checkboxes) - because when the user clicks the text within the <label> element, it toggles the radio button/checkbox.\nThe for attribute of the <label> tag should be equal to the id attribute of the <input> element to bind them together.\nThe <select> Element\nThe <select> element defines a drop-down list:\nExample\nThe <option> element defines an option that can be selected.\nBy default, the first item in the drop-down list is selected.\nTo define a pre-selected option, add the selected attribute to the option:\nExample\nVisible Values:\nUse the size attribute to specify the number of visible values:\nExample\nAllow Multiple Selections:\nUse the multiple attribute to allow the user to select more than one value:\nExample\nThe <textarea> Element\nThe <textarea> element defines a multi-line input field (a text area):\nExample\nThe rows attribute specifies the visible number of lines in a text area.\nThe cols attribute specifies the visible width of a text area.\nThis is how the HTML code above will be displayed in a browser:\nYou can also define the size of the text area by using CSS:\nExample\nREMOVE ADS\nThe <button> Element\nThe <button> element defines a clickable button:\nExample\nThis is how the HTML code above will be displayed in a browser:\nNote: Always specify the type attribute for the button element. Different browsers may use different default types for the button element.\nThe <fieldset> and <legend> Elements\nThe <fieldset> element is used to group related data in a form.\nThe <legend> element defines a caption for the <fieldset> element.\nExample\nThis is how the HTML code above will be displayed in a browser:\nThe <datalist> Element\nThe <datalist> element specifies a list of pre-defined options for an <input> element.\nUsers will see a drop-down list of the pre-defined options as they input data.\nThe list attribute of the <input> element, must refer to the id attribute of the <datalist> element.\nExample\nThe <output> Element\nThe <output> element represents the result of a calculation (like one performed by a script).\nExample\nPerform a calculation and show the result in an <output> element:\nHTML Form Elements\nFor a complete list of all available HTML tags, visit our HTML Tag Reference.",
      "examples": [
        "<label for=\"fname\">First name:</label>\n<input type=\"text\" id=\"fname\" name=\"fname\">",
        "<label for=\"cars\">Choose a car:</label>\n<select id=\"cars\" name=\"cars\">\n<option value=\"volvo\">Volvo</option>\n<option value=\"saab\">Saab</option>\n<option value=\"fiat\">Fiat</option>\n<option value=\"audi\">Audi</option>\n</select>",
        "<option value=\"fiat\" selected>Fiat</option>",
        "<label for=\"cars\">Choose a car:</label>\n<select id=\"cars\" name=\"cars\" size=\"3\">\n<option value=\"volvo\">Volvo</option>\n<option value=\"saab\">Saab</option>\n<option value=\"fiat\">Fiat</option>\n<option value=\"audi\">Audi</option>\n</select>",
        "<label for=\"cars\">Choose a car:</label>\n<select id=\"cars\" name=\"cars\" size=\"4\" multiple>\n<option value=\"volvo\">Volvo</option>\n<option value=\"saab\">Saab</option>\n<option value=\"fiat\">Fiat</option>\n<option value=\"audi\">Audi</option>\n</select>",
        "<textarea name=\"message\" rows=\"10\" cols=\"30\">\nThe cat was playing in the garden.\n</textarea>",
        "<textarea name=\"message\" style=\"width:200px; height:600px;\">\nThe cat was playing in the garden.\n</textarea>",
        "<button type=\"button\" onclick=\"alert('Hello World!')\">Click Me!</button>",
        "<form action=\"/action_page.php\">\n<fieldset>\n<legend>Personalia:</legend>\n<label for=\"fname\">First name:</label><br>\n<input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\"><br>\n<label for=\"lname\">Last name:</label><br>\n<input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\"><br><br>\n<input type=\"submit\" value=\"Submit\">\n</fieldset>\n</form>",
        "<form action=\"/action_page.php\">\n<input list=\"browsers\">\n<datalist id=\"browsers\">\n<option value=\"Edge\">\n<option value=\"Firefox\">\n<option value=\"Chrome\">\n<option value=\"Opera\">\n<option value=\"Safari\">\n</datalist>\n</form>",
        "<form action=\"/action_page.php\"\noninput=\"x.value=parseInt(a.value)+parseInt(b.value)\">\n0\n<input type=\"range\"  id=\"a\" name=\"a\" value=\"50\">\n100 +\n<input type=\"number\" id=\"b\" name=\"b\" value=\"50\">\n=\n<output name=\"x\" for=\"a b\"></output>\n<br><br>\n<input type=\"submit\">\n</form>",
        "<form>",
        "<input>",
        "<label>",
        "<select>",
        "<textarea>",
        "<button>",
        "<fieldset>",
        "<legend>",
        "<datalist>",
        "<output>",
        "<option>",
        "<optgroup>",
        "type",
        "for",
        "id",
        "selected",
        "size",
        "multiple",
        "rows",
        "cols",
        "list"
      ]
    },
    {
      "title": "HTML Input Types",
      "summary": "This chapter describes the different types for the HTML <input> element.\nHTML Input Types\nHere are the different input types you can use in HTML:\n<input type=\"button\">\n<input type=\"checkbox\">\n<input type=\"color\">\n<input type=\"date\">\n<input type=\"datetime-local\">\n<input type=\"email\">\n<input type=\"file\">\n<input type=\"hidden\">\n<input type=\"image\">\n<input type=\"month\">\n<input type=\"number\">\n<input type=\"password\">\n<input type=\"radio\">\n<input type=\"range\">\n<input type=\"reset\">\n<input type=\"search\">\n<input type=\"submit\">\n<input type=\"tel\">\n<input type=\"text\">\n<input type=\"time\">\n<input type=\"url\">\n<input type=\"week\">\nTip: The default value of the type attribute is \"text\".\nInput Type Text\n<input type=\"text\"> defines a single-line text input field:\nExample\nThis is how the HTML code above will be displayed in a browser:\nInput Type Password\n<input type=\"password\"> defines a password field:\nExample\nThis is how the HTML code above will be displayed in a browser:\nThe characters in a password field are masked (shown as asterisks or circles).\nREMOVE ADS\nInput Type Submit\n<input type=\"submit\"> defines a button for submitting form data to a form-handler.\nThe form-handler is typically a server page with a script for processing input data.\nThe form-handler is specified in the form's action attribute:\nExample\nThis is how the HTML code above will be displayed in a browser:\nIf you omit the submit button's value attribute, the button will get a default text:\nExample\nInput Type Reset\n<input type=\"reset\"> defines a reset button that will reset all form values to their default values:\nExample\nThis is how the HTML code above will be displayed in a browser:\nIf you change the input values and then click the \"Reset\" button, the form-data will be reset to the default values.\nInput Type Radio\n<input type=\"radio\"> defines a radio button.\nRadio buttons let a user select ONLY ONE of a limited number of choices:\nExample\nThis is how the HTML code above will be displayed in a browser:\nInput Type Checkbox\n<input type=\"checkbox\"> defines a checkbox.\nCheckboxes let a user select ZERO or MORE options of a limited number of choices.\nExample\nThis is how the HTML code above will be displayed in a browser:\nInput Type Button\n<input type=\"button\"> defines a button:\nExample\nThis is how the HTML code above will be displayed in a browser:\nInput Type Color\nThe <input type=\"color\"> is used for input fields that should contain a color.\nDepending on browser support, a color picker can show up in the input field.\nExample\nInput Type Date\nThe <input type=\"date\"> is used for input fields that should contain a date.\nDepending on browser support, a date picker can show up in the input field.\nExample\nYou can also use the min and max attributes to add restrictions to dates:\nExample\nInput Type Datetime-local\nThe <input type=\"datetime-local\"> specifies a date and time input field, with no time zone.\nDepending on browser support, a date picker can show up in the input field.\nExample\nInput Type Email\nThe <input type=\"email\"> is used for input fields that should contain an e-mail address.\nDepending on browser support, the e-mail address can be automatically validated when submitted.\nSome smartphones recognize the email type, and add \".com\" to the keyboard to match email input.\nExample\nInput Type Image\nThe <input type=\"image\"> defines an image as a submit button.\nThe path to the image is specified in the src attribute.\nExample\nInput Type File\nThe <input type=\"file\"> defines a file-select field and a \"Browse\" button for file uploads.\nExample\nInput Type Hidden\nThe <input type=\"hidden\"> defines a hidden input field (not visible to a user).\nA hidden field lets web developers include data that cannot be seen or modified by users when a form is submitted.\nA hidden field often stores what database record that needs to be updated when the form is submitted.\nNote: While the value is not displayed to the user in the page's content, it is visible (and can be edited) using any browser's developer tools or \"View Source\" functionality. Do not use hidden inputs as a form of security!\nExample\nInput Type Month\nThe <input type=\"month\"> allows the user to select a month and year.\nDepending on browser support, a date picker can show up in the input field.\nExample\nInput Type Number\nThe <input type=\"number\"> defines a numeric input field.\nYou can also set restrictions on what numbers are accepted.\nThe following example displays a numeric input field, where you can enter a value from 1 to 5:\nExample\nInput Restrictions\nHere is a list of some common input restrictions:\nYou will learn more about input restrictions in the next chapter.\nThe following example displays a numeric input field, where you can enter a value from 0 to 100, in steps of 10. The default value is 30:\nExample\nInput Type Range\nThe <input type=\"range\"> defines a control for entering a number whose exact value is not important (like a slider control). Default range is 0 to 100. However, you can set restrictions on what numbers are accepted with the min, max, and step attributes:\nExample\nInput Type Search\nThe <input type=\"search\"> is used for search fields (a search field behaves like a regular text field).\nExample\nInput Type Tel\nThe <input type=\"tel\"> is used for input fields that should contain a telephone number.\nExample\nInput Type Time\nThe <input type=\"time\"> allows the user to select a time (no time zone).\nDepending on browser support, a time picker can show up in the input field.\nExample\nInput Type Url\nThe <input type=\"url\"> is used for input fields that should contain a URL address.\nDepending on browser support, the url field can be automatically validated when submitted.\nSome smartphones recognize the url type, and adds \".com\" to the keyboard to match url input.\nExample\nInput Type Week\nThe <input type=\"week\"> allows the user to select a week and year.\nDepending on browser support, a date picker can show up in the input field.\nExample\nHTML Input Type Attribute",
      "examples": [
        "<form>\n<label for=\"fname\">First name:</label><br>\n<input type=\"text\" id=\"fname\" name=\"fname\"><br>\n<label for=\"lname\">Last name:</label><br>\n<input type=\"text\" id=\"lname\" name=\"lname\">\n</form>",
        "<form>\n<label for=\"username\">Username:</label><br>\n<input type=\"text\" id=\"username\" name=\"username\"><br>\n<label for=\"pwd\">Password:</label><br>\n<input type=\"password\" id=\"pwd\" name=\"pwd\">\n</form>",
        "<form action=\"/action_page.php\">\n<label for=\"fname\">First name:</label><br>\n<input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\"><br>\n<label for=\"lname\">Last name:</label><br>\n<input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\"><br><br>\n<input type=\"submit\" value=\"Submit\">\n</form>",
        "<form action=\"/action_page.php\">\n<label for=\"fname\">First name:</label><br>\n<input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\"><br>\n<label for=\"lname\">Last name:</label><br>\n<input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\"><br><br>\n<input type=\"submit\">\n</form>",
        "<form action=\"/action_page.php\">\n<label for=\"fname\">First name:</label><br>\n<input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\"><br>\n<label for=\"lname\">Last name:</label><br>\n<input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\"><br><br>\n<input type=\"submit\" value=\"Submit\">\n<input type=\"reset\" value=\"Reset\">\n</form>",
        "<p>Choose your favorite Web language:</p>\n\n<form>\n<input type=\"radio\" id=\"html\" name=\"fav_language\" value=\"HTML\">\n<label for=\"html\">HTML</label><br>\n<input type=\"radio\" id=\"css\" name=\"fav_language\" value=\"CSS\">\n<label for=\"css\">CSS</label><br>\n<input type=\"radio\" id=\"javascript\" name=\"fav_language\" value=\"JavaScript\">\n<label for=\"javascript\">JavaScript</label>\n</form>",
        "<form>\n<input type=\"checkbox\" id=\"vehicle1\" name=\"vehicle1\" value=\"Bike\">\n<label for=\"vehicle1\"> I have a bike</label><br>\n<input type=\"checkbox\" id=\"vehicle2\" name=\"vehicle2\" value=\"Car\">\n<label for=\"vehicle2\"> I have a car</label><br>\n<input type=\"checkbox\" id=\"vehicle3\" name=\"vehicle3\" value=\"Boat\">\n<label for=\"vehicle3\"> I have a boat</label>\n</form>",
        "<input type=\"button\" onclick=\"alert('Hello World!')\" value=\"Click Me!\">",
        "<form>\n<label for=\"favcolor\">Select your favorite color:</label>\n<input type=\"color\" id=\"favcolor\" name=\"favcolor\">\n</form>",
        "<form>\n<label for=\"birthday\">Birthday:</label>\n<input type=\"date\" id=\"birthday\" name=\"birthday\">\n</form>",
        "<form>\n<label for=\"datemax\">Enter a date before 1980-01-01:</label>\n<input type=\"date\" id=\"datemax\" name=\"datemax\" max=\"1979-12-31\"><br><br>\n<label for=\"datemin\">Enter a date after 2000-01-01:</label>\n<input type=\"date\" id=\"datemin\" name=\"datemin\" min=\"2000-01-02\">\n</form>",
        "<form>\n<label for=\"birthdaytime\">Birthday (date and time):</label>\n<input type=\"datetime-local\" id=\"birthdaytime\" name=\"birthdaytime\">\n</form>",
        "<form>\n<label for=\"email\">Enter your email:</label>\n<input type=\"email\" id=\"email\" name=\"email\">\n</form>",
        "<form>\n<input type=\"image\" src=\"img_submit.gif\" alt=\"Submit\" width=\"48\" height=\"48\">\n</form>",
        "<form>\n<label for=\"myfile\">Select a file:</label>\n<input type=\"file\" id=\"myfile\" name=\"myfile\">\n</form>",
        "<form>\n<label for=\"fname\">First name:</label>\n<input type=\"text\" id=\"fname\" name=\"fname\"><br><br>\n<input type=\"hidden\" id=\"custId\" name=\"custId\" value=\"3487\">\n<input type=\"submit\" value=\"Submit\">\n</form>",
        "<form>\n<label for=\"bdaymonth\">Birthday (month and year):</label>\n<input type=\"month\" id=\"bdaymonth\" name=\"bdaymonth\">\n</form>",
        "<form>\n<label for=\"quantity\">Quantity (between 1 and 5):</label>\n<input type=\"number\" id=\"quantity\" name=\"quantity\" min=\"1\" max=\"5\">\n</form>",
        "<form>\n<label for=\"quantity\">Quantity:</label>\n<input type=\"number\" id=\"quantity\" name=\"quantity\" min=\"0\" max=\"100\" step=\"10\" value=\"30\">\n</form>",
        "<form>\n<label for=\"vol\">Volume (between 0 and 50):</label>\n<input type=\"range\" id=\"vol\" name=\"vol\" min=\"0\" max=\"50\">\n</form>",
        "<form>\n<label for=\"gsearch\">Search Google:</label>\n<input type=\"search\" id=\"gsearch\" name=\"gsearch\">\n</form>",
        "<form>\n<label for=\"phone\">Enter your phone number:</label>\n<input type=\"tel\" id=\"phone\" name=\"phone\" pattern=\"[0-9]{3}-[0-9]{2}-[0-9]{3}\">\n</form>",
        "<form>\n<label for=\"appt\">Select a time:</label>\n<input type=\"time\" id=\"appt\" name=\"appt\">\n</form>",
        "<form>\n<label for=\"homepage\">Add your homepage:</label>\n<input type=\"url\" id=\"homepage\" name=\"homepage\">\n</form>",
        "<form>\n<label for=\"week\">Select a week:</label>\n<input type=\"week\" id=\"week\" name=\"week\">\n</form>",
        "<input>",
        "<input type=\"button\">",
        "<input type=\"checkbox\">",
        "<input type=\"color\">",
        "<input type=\"date\">",
        "<input type=\"datetime-local\">",
        "<input type=\"email\">",
        "<input type=\"file\">",
        "<input type=\"hidden\">",
        "<input type=\"image\">",
        "<input type=\"month\">",
        "<input type=\"number\">",
        "<input type=\"password\">",
        "<input type=\"radio\">",
        "<input type=\"range\">",
        "<input type=\"reset\">",
        "<input type=\"search\">",
        "<input type=\"submit\">",
        "<input type=\"tel\">",
        "<input type=\"text\">",
        "<input type=\"time\">",
        "<input type=\"url\">",
        "<input type=\"week\">",
        "type",
        "action",
        "min",
        "max",
        "src",
        "step"
      ]
    },
    {
      "title": "HTML Input Attributes",
      "summary": "This chapter describes the different attributes for the HTML <input> element.\nThe value Attribute\nThe input value attribute specifies an initial value for an input field:\nExample\nInput fields with initial (default) values:\nThe readonly Attribute\nThe input readonly attribute specifies that an input field is read-only.\nA read-only input field cannot be modified (however, a user can tab to it, highlight it, and copy the text from it).\nThe value of a read-only input field will be sent when submitting the form!\nExample\nA read-only input field:\nThe disabled Attribute\nThe input disabled attribute specifies that an input field should be disabled.\nA disabled input field is unusable and un-clickable.\nThe value of a disabled input field will not be sent when submitting the form!\nExample\nA disabled input field:\nREMOVE ADS\nThe size Attribute\nThe input size attribute specifies the visible width, in characters, of an input field.\nThe default value for size is 20.\nNote: The size attribute works with the following input types: text, search, tel, url, email, and password.\nExample\nSet a width for an input field:\nThe maxlength Attribute\nThe input maxlength attribute specifies the maximum number of characters allowed in an input field.\nNote: When a maxlength is set, the input field will not accept more than the specified number of characters. However, this attribute does not provide any feedback. So, if you want to alert the user, you must write JavaScript code.\nExample\nSet a maximum length for an input field:\nThe min and max Attributes\nThe input min and max attributes specify the minimum and maximum values for an input field.\nThe min and max attributes work with the following input types: number, range, date, datetime-local, month, time and week.\nTip: Use the max and min attributes together to create a range of legal values.\nExample\nSet a max date, a min date, and a range of legal values:\nThe multiple Attribute\nThe input multiple attribute specifies that the user is allowed to enter more than one value in an input field.\nThe multiple attribute works with the following input types: email, and file.\nExample\nA file upload field that accepts multiple values:\nThe pattern Attribute\nThe input pattern attribute specifies a regular expression that the input field's value is checked against, when the form is submitted.\nThe pattern attribute works with the following input types: text, date, search, url, tel, email, and password.\nTip: Use the global title attribute to describe the pattern to help the user.\nTip: Learn more about regular expressions in our JavaScript tutorial.\nExample\nAn input field that can contain only three letters (no numbers or special characters):\nThe placeholder Attribute\nThe input placeholder attribute specifies a short hint that describes the expected value of an input field (a sample value or a short description of the expected format).\nThe short hint is displayed in the input field before the user enters a value.\nThe placeholder attribute works with the following input types: text, search, url, number, tel, email, and password.\nExample\nAn input field with a placeholder text:\nThe required Attribute\nThe input required attribute specifies that an input field must be filled out before submitting the form.\nThe required attribute works with the following input types: text, search, url, tel, email, password, date pickers, number, checkbox, radio, and file.\nExample\nA required input field:\nThe step Attribute\nThe input step attribute specifies the legal number intervals for an input field.\nExample: if step=\"3\", legal numbers could be -3, 0, 3, 6, etc.\nTip: This attribute can be used together with the max and min attributes to create a range of legal values.\nThe step attribute works with the following input types: number, range, date, datetime-local, month, time and week.\nExample\nAn input field with a specified legal number intervals:\nNote: Input restrictions are not foolproof, and JavaScript provides many ways to add illegal input. To safely restrict input, it must also be checked by the receiver (the server)!\nThe autofocus Attribute\nThe input autofocus attribute specifies that an input field should automatically get focus when the page loads.\nExample\nLet the \"First name\" input field automatically get focus when the page loads:\nThe height and width Attributes\nThe input height and width attributes specify the height and width of an <input type=\"image\"> element.\nTip: Always specify both the height and width attributes for images. If height and width are set, the space required for the image is reserved when the page is loaded. Without these attributes, the browser does not know the size of the image, and cannot reserve the appropriate space to it. The effect will be that the page layout will change during loading (while the images load).\nExample\nDefine an image as the submit button, with height and width attributes:\nThe list Attribute\nThe input list attribute refers to a <datalist> element that contains pre-defined options for an <input> element.\nExample\nAn <input> element with pre-defined values in a <datalist>:\nThe autocomplete Attribute\nThe input autocomplete attribute specifies whether a form or an input field should have autocomplete on or off.\nAutocomplete allows the browser to predict the value. When a user starts to type in a field, the browser should display options to fill in the field, based on earlier typed values.\nThe autocomplete attribute works with <form> and the following <input> types: text, search, url, tel, email, password, datepickers, range, and color.\nExample\nAn HTML form with autocomplete on, and off for one input field:\nTip: In some browsers you may need to activate an autocomplete function for this to work (Look under \"Preferences\" in the browser's menu).\nHTML Form and Input Elements\nFor a complete list of all available HTML tags, visit our HTML Tag Reference.",
      "examples": [
        "<form>\n<label for=\"fname\">First name:</label><br>\n<input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\"><br>\n<label for=\"lname\">Last name:</label><br>\n<input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\">\n</form>",
        "<form>\n<label for=\"fname\">First name:</label><br>\n<input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\" readonly><br>\n<label for=\"lname\">Last name:</label><br>\n<input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\">\n</form>",
        "<form>\n<label for=\"fname\">First name:</label><br>\n<input type=\"text\" id=\"fname\" name=\"fname\" size=\"50\"><br>\n<label for=\"pin\">PIN:</label><br>\n<input type=\"text\" id=\"pin\" name=\"pin\" size=\"4\">\n</form>",
        "<form>\n<label for=\"fname\">First name:</label><br>\n<input type=\"text\" id=\"fname\" name=\"fname\" size=\"50\"><br>\n<label for=\"pin\">PIN:</label><br>\n<input type=\"text\" id=\"pin\" name=\"pin\" maxlength=\"4\" size=\"4\">\n</form>",
        "<form>\n<label for=\"datemax\">Enter a date before 1980-01-01:</label>\n<input type=\"date\" id=\"datemax\" name=\"datemax\" max=\"1979-12-31\"><br><br>\n\n<label for=\"datemin\">Enter a date after 2000-01-01:</label>\n<input type=\"date\" id=\"datemin\" name=\"datemin\" min=\"2000-01-02\"><br><br>\n\n<label for=\"quantity\">Quantity (between 1 and 5):</label>\n<input type=\"number\" id=\"quantity\" name=\"quantity\" min=\"1\" max=\"5\">\n</form>",
        "<form>\n<label for=\"files\">Select files:</label>\n<input type=\"file\" id=\"files\" name=\"files\" multiple>\n</form>",
        "<form>\n<label for=\"country_code\">Country code:</label>\n<input type=\"text\" id=\"country_code\" name=\"country_code\"\npattern=\"[A-Za-z]{3}\" title=\"Three letter country code\">\n</form>",
        "<form>\n<label for=\"phone\">Enter a phone number:</label>\n<input type=\"tel\" id=\"phone\" name=\"phone\"\nplaceholder=\"123-45-678\"\npattern=\"[0-9]{3}-[0-9]{2}-[0-9]{3}\">\n</form>",
        "<form>\n<label for=\"username\">Username:</label>\n<input type=\"text\" id=\"username\" name=\"username\" required>\n</form>",
        "<form>\n<label for=\"points\">Points:</label>\n<input type=\"number\" id=\"points\" name=\"points\" step=\"3\">\n</form>",
        "<form>\n<label for=\"fname\">First name:</label><br>\n<input type=\"text\" id=\"fname\" name=\"fname\" autofocus><br>\n<label for=\"lname\">Last name:</label><br>\n<input type=\"text\" id=\"lname\" name=\"lname\">\n</form>",
        "<form>\n<label for=\"fname\">First name:</label>\n<input type=\"text\" id=\"fname\" name=\"fname\"><br><br>\n<label for=\"lname\">Last name:</label>\n<input type=\"text\" id=\"lname\" name=\"lname\"><br><br>\n<input type=\"image\" src=\"img_submit.gif\" alt=\"Submit\" width=\"48\" height=\"48\">\n</form>",
        "<form>\n<input list=\"browsers\">\n<datalist id=\"browsers\">\n<option value=\"Edge\">\n<option value=\"Firefox\">\n<option value=\"Chrome\">\n<option value=\"Opera\">\n<option value=\"Safari\">\n</datalist>\n</form>",
        "<form action=\"/action_page.php\" autocomplete=\"on\">\n<label for=\"fname\">First name:</label>\n<input type=\"text\" id=\"fname\" name=\"fname\"><br><br>\n<label for=\"lname\">Last name:</label>\n<input type=\"text\" id=\"lname\" name=\"lname\"><br><br>\n<label for=\"email\">Email:</label>\n<input type=\"email\" id=\"email\" name=\"email\" autocomplete=\"off\"><br><br>\n<input type=\"submit\" value=\"Submit\">\n</form>",
        "<input>",
        "value",
        "readonly",
        "disabled",
        "size",
        "maxlength",
        "min",
        "max",
        "multiple",
        "pattern",
        "placeholder",
        "required",
        "step",
        "autofocus",
        "height",
        "width",
        "<input type=\"image\">",
        "list",
        "<datalist>",
        "autocomplete",
        "<form>"
      ]
    },
    {
      "title": "HTML Input form* Attributes",
      "summary": "This chapter describes the different form* attributes for the HTML <input> element.\nThe form Attribute\nThe input form attribute specifies the form the <input> element belongs to.\nThe value of this attribute must be equal to the id attribute of the <form> element it belongs to.\nExample\nAn input field located outside of the HTML form (but still a part of the form):\nThe formaction Attribute\nThe input formaction attribute specifies the URL of the file that will process the input when the form is submitted.\nNote: This attribute overrides the action attribute of the <form> element.\nThe formaction attribute works with the following input types: submit and image.\nExample\nAn HTML form with two submit buttons, with different actions:\nThe formenctype Attribute\nThe input formenctype attribute specifies how the form-data should be encoded when submitted (only for forms with method=\"post\").\nNote: This attribute overrides the enctype attribute of the <form> element.\nThe formenctype attribute works with the following input types: submit and image.\nExample\nA form with two submit buttons. The first sends the form-data with default encoding, the second sends the form-data encoded as \"multipart/form-data\":\nREMOVE ADS\nThe formmethod Attribute\nThe input formmethod attribute defines the HTTP method for sending form-data to the action URL.\nNote: This attribute overrides the method attribute of the <form> element.\nThe formmethod attribute works with the following input types: submit and image.\nThe form-data can be sent as URL variables (method=\"get\") or as an HTTP post transaction (method=\"post\").\nNotes on the \"get\" method:\nThis method appends the form-data to the URL in name/value pairs\nThis method is useful for form submissions where a user want to bookmark the result\nThere is a limit to how much data you can place in a URL (varies between browsers), therefore, you cannot be sure that all of the form-data will be correctly transferred\nNever use the \"get\" method to pass sensitive information! (password or other sensitive information will be visible in the browser's address bar)\nNotes on the \"post\" method:\nThis method sends the form-data as an HTTP post transaction\nForm submissions with the \"post\" method cannot be bookmarked\nThe \"post\" method is more robust and secure than \"get\", and \"post\" does not have size limitations\nExample\nA form with two submit buttons. The first sends the form-data with method=\"get\". The second sends the form-data with method=\"post\":\nThe formtarget Attribute\nThe input formtarget attribute specifies a name or a keyword that indicates where to display the response that is received after submitting the form.\nNote: This attribute overrides the target attribute of the <form> element.\nThe formtarget attribute works with the following input types: submit and image.\nExample\nA form with two submit buttons, with different target windows:\nThe formnovalidate Attribute\nThe input formnovalidate attribute specifies that an <input> element should not be validated when submitted.\nNote: This attribute overrides the novalidate attribute of the <form> element.\nThe formnovalidate attribute works with the following input types: submit.\nExample\nA form with two submit buttons (with and without validation):\nThe novalidate Attribute\nThe novalidate attribute is a <form> attribute.\nWhen present, novalidate specifies that all of the form-data should not be validated when submitted.\nExample\nSpecify that no form-data should be validated on submit:\nHTML Form and Input Elements\nFor a complete list of all available HTML tags, visit our HTML Tag Reference.",
      "examples": [
        "<form action=\"/action_page.php\" id=\"form1\">\n<label for=\"fname\">First name:</label>\n<input type=\"text\" id=\"fname\" name=\"fname\"><br><br>\n<input type=\"submit\" value=\"Submit\">\n</form>\n\n<label for=\"lname\">Last name:</label>\n<input type=\"text\" id=\"lname\" name=\"lname\" form=\"form1\">",
        "<form action=\"/action_page.php\">\n<label for=\"fname\">First name:</label>\n<input type=\"text\" id=\"fname\" name=\"fname\"><br><br>\n<label for=\"lname\">Last name:</label>\n<input type=\"text\" id=\"lname\" name=\"lname\"><br><br>\n<input type=\"submit\" value=\"Submit\">\n<input type=\"submit\" formaction=\"/action_page2.php\" value=\"Submit as Admin\">\n</form>",
        "<form action=\"/action_page_binary.asp\" method=\"post\">\n<label for=\"fname\">First name:</label>\n<input type=\"text\" id=\"fname\" name=\"fname\"><br><br>\n<input type=\"submit\" value=\"Submit\">\n<input type=\"submit\" formenctype=\"multipart/form-data\"\nvalue=\"Submit as Multipart/form-data\">\n</form>",
        "<form action=\"/action_page.php\" method=\"get\">\n<label for=\"fname\">First name:</label>\n<input type=\"text\" id=\"fname\" name=\"fname\"><br><br>\n<label for=\"lname\">Last name:</label>\n<input type=\"text\" id=\"lname\" name=\"lname\"><br><br>\n<input type=\"submit\" value=\"Submit using GET\">\n<input type=\"submit\" formmethod=\"post\" value=\"Submit using POST\">\n</form>",
        "<form action=\"/action_page.php\">\n<label for=\"email\">Enter your email:</label>\n<input type=\"email\" id=\"email\" name=\"email\"><br><br>\n<input type=\"submit\" value=\"Submit\">\n<input type=\"submit\" formnovalidate=\"formnovalidate\"\nvalue=\"Submit without validation\">\n</form>",
        "<form action=\"/action_page.php\" novalidate>\n<label for=\"email\">Enter your email:</label>\n<input type=\"email\" id=\"email\" name=\"email\"><br><br>\n<input type=\"submit\" value=\"Submit\">\n</form>",
        "form*",
        "<input>",
        "form",
        "formaction",
        "action",
        "<form>",
        "formenctype",
        "formmethod",
        "formtarget",
        "formnovalidate",
        "novalidate"
      ]
    },
    {
      "title": "HTML Canvas Graphics",
      "summary": "The HTML <canvas> element is used to draw graphics on a web page.\nThe graphic to the left is created with <canvas>. It shows four elements: a red rectangle, a gradient rectangle, a multicolor rectangle, and a multicolor text.\nWhat is HTML Canvas?\nThe HTML <canvas> element is used to draw graphics, on the fly, via JavaScript.\nThe <canvas> element is only a container for graphics. You must use JavaScript to actually draw the graphics.\nCanvas has several methods for drawing paths, boxes, circles, text, and adding images.\nCanvas is supported by all major browsers.\nCanvas Examples\nA canvas is a rectangular area on an HTML page. By default, a canvas has no border and no content.\nThe markup looks like this:\nNote: Always specify an id attribute (to be referred to in a script), and a width and height attribute to define the size of the canvas. To add a border, use the style attribute.\nHere is an example of a basic, empty canvas:\nExample\nREMOVE ADS\nAdd a JavaScript\nAfter creating the rectangular canvas area, you must add a JavaScript to do the drawing.\nHere are some examples:\nDraw a Line\nExample\nDraw a Circle\nExample\nDraw a Text\nExample\nStroke Text\nExample\nDraw Linear Gradient\nExample\nDraw Circular Gradient\nExample\nDraw Image\nExample\nHTML Canvas Tutorial\nTo learn more about <canvas>, please read our HTML Canvas Tutorial.",
      "examples": [
        "<canvas id=\"myCanvas\" width=\"200\" height=\"100\"></canvas>",
        "<canvas id=\"myCanvas\" width=\"200\" height=\"100\" style=\"border:1px solid #000000;\">\n</canvas>",
        "<script>\nvar c = document.getElementById(\"myCanvas\");\nvar ctx = c.getContext(\"2d\");\nctx.moveTo(0, 0);\nctx.lineTo(200, 100);\nctx.stroke();\n</script>",
        "<script>\nvar c = document.getElementById(\"myCanvas\");\nvar ctx = c.getContext(\"2d\");\nctx.beginPath();\nctx.arc(95, 50, 40, 0, 2 * Math.PI);\nctx.stroke();\n</script>",
        "<script>\nvar c = document.getElementById(\"myCanvas\");\nvar ctx = c.getContext(\"2d\");\nctx.font = \"30px Arial\";\nctx.fillText(\"Hello World\", 10, 50);\n</script>",
        "<script>\nvar c = document.getElementById(\"myCanvas\");\nvar ctx = c.getContext(\"2d\");\nctx.font = \"30px Arial\";\nctx.strokeText(\"Hello World\", 10, 50);\n</script>",
        "<script>\nvar c = document.getElementById(\"myCanvas\");\nvar ctx = c.getContext(\"2d\");\n\n// Create gradient\nvar grd = ctx.createLinearGradient(0, 0, 200, 0);\ngrd.addColorStop(0, \"red\");\ngrd.addColorStop(1, \"white\");\n\n// Fill with gradient\nctx.fillStyle = grd;\nctx.fillRect(10, 10, 150, 80);\n</script>",
        "<script>\nvar c = document.getElementById(\"myCanvas\");\nvar ctx = c.getContext(\"2d\");\n\n// Create gradient\nvar grd = ctx.createRadialGradient(75, 50, 5, 90, 60, 100);\ngrd.addColorStop(0, \"red\");\ngrd.addColorStop(1, \"white\");\n\n// Fill with gradient\nctx.fillStyle = grd;\nctx.fillRect(10, 10, 150, 80);\n</script>",
        "<script>\nvar c = document.getElementById(\"myCanvas\");\nvar ctx = c.getContext(\"2d\");\nvar img = document.getElementById(\"scream\");\nctx.drawImage(img, 10, 10);\n</script>",
        "<canvas>",
        "id",
        "width",
        "height",
        "style"
      ]
    },
    {
      "title": "HTML SVG Graphics",
      "summary": "SVG (Scalable Vector Graphics)\nSVG defines vector-based graphics in XML, which can be directly embedded in HTML pages.\nSVG graphics are scalable, and do not lose any quality if they are zoomed or resized:\nSVG is supported by all major browsers.\nWhat is SVG?\nSVG stands for Scalable Vector Graphics\nSVG is used to define vector-based graphics for the Web\nSVG defines graphics in XML format\nEach element and attribute in SVG files can be animated\nSVG is a W3C recommendation\nSVG integrates with other standards, such as CSS, DOM, XSL and JavaScript\nThe <svg> Element\nThe HTML <svg> element is a container for SVG graphics.\nSVG has several methods for drawing paths, rectangles, circles, polygons, text, and much more.\nSVG Circle\nExample\nREMOVE ADS\nSVG Rectangle\nExample\nSVG Rectangle with Opacity and Rounded Corners\nExample\nSVG Star\nExample\nSVG Gradient Ellipse and Text\nExample\nDifferences Between SVG and Canvas\nSVG is a language for describing 2D graphics in XML, while Canvas draws 2D graphics, on the fly (with JavaScript).\nSVG is XML based, which means that every element is available within the SVG DOM. You can attach JavaScript event handlers to SVG graphics.\nIn SVG, each drawn shape is remembered as an object. If attributes of an SVG object are changed, the browser can automatically re-render the shape.\nCanvas is rendered pixel by pixel. In canvas, once the graphic is drawn, it is forgotten by the browser. If its position should be changed, the entire scene needs to be redrawn, including any objects that might have been covered by the graphic.\nComparison of SVG and Canvas\nThe table below shows some important differences between Canvas and SVG:\nResolution independent\nSupport for event handlers\nGood text rendering capabilities\nSlow rendering if complex\nNot suited for game applications\nResolution dependent\nNo support for event handlers\nPoor text rendering capabilities\nYou can save the resulting image as .png or .jpg\nWell suited for graphic-intensive games\nSVG Tutorial\nTo learn more about SVG, please read our SVG Tutorial.",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<body>\n\n<svg width=\"100\" height=\"100\">\n<circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"green\" stroke-width=\"4\" fill=\"yellow\" />\n</svg>\n\n</body>\n</html>",
        "<svg width=\"400\" height=\"120\">\n<rect x=\"10\" y=\"10\" width=\"200\" height=\"100\" stroke=\"red\" stroke-width=\"6\" fill=\"blue\" />\n</svg>",
        "<svg width=\"400\" height=\"180\">\n<rect x=\"50\" y=\"20\" rx=\"20\" ry=\"20\" width=\"150\" height=\"150\"\nstyle=\"fill:red;stroke:black;stroke-width:5;opacity:0.5\" />\n</svg>",
        "<svg width=\"300\" height=\"200\">\n<polygon points=\"100,10 40,198 190,78 10,78 160,198\"\nstyle=\"fill:lime;stroke:purple;stroke-width:5;fill-rule:evenodd;\" />\n</svg>",
        "<svg height=\"130\" width=\"500\">\n<defs>\n<linearGradient id=\"grad1\">\n<stop offset=\"0%\" stop-color=\"yellow\" />\n<stop offset=\"100%\" stop-color=\"red\" />\n</linearGradient>\n</defs>\n<ellipse cx=\"100\" cy=\"70\" rx=\"85\" ry=\"55\" fill=\"url(#grad1)\" />\n<text fill=\"#ffffff\" font-size=\"45\" font-family=\"Verdana\" x=\"50\" y=\"86\">SVG</text>\nSorry, your browser does not support inline SVG.\n</svg>",
        "<svg>"
      ]
    },
    {
      "title": "HTML Multimedia",
      "summary": "Multimedia on the web is sound, music, videos, movies, and animations.\nWhat is Multimedia?\nMultimedia comes in many different formats. It can be almost anything you can hear or see, like images, music, sound, videos, records, films, animations, and more.\nWeb pages often contain multimedia elements of different types and formats.\nBrowser Support\nThe first web browsers had support for text only, limited to a single font in a single color.\nLater came browsers with support for colors, fonts, images, and multimedia!\nMultimedia Formats\nMultimedia elements (like audio or video) are stored in media files.\nThe most common way to discover the type of a file, is to look at the file extension.\nMultimedia files have formats and different extensions like: .wav, .mp3, .mp4, .mpg, .wmv, and .avi.\nCommon Video Formats\nNote: Only MP4, WebM, and Ogg video are supported by the HTML standard.\nREMOVE ADS\nCommon Audio Formats\nMP3 is the best format for compressed recorded music. The term MP3 has become synonymous with digital music.\nIf your website is about recorded music, MP3 is the choice.\nNote: Only MP3, WAV, and Ogg audio are supported by the HTML standard.",
      "examples": []
    },
    {
      "title": "HTML Video",
      "summary": "The HTML <video> element is used to show a video on a web page.\nVideo\nExample\nCourtesy of Big Buck Bunny:\nThe HTML <video> Element\nTo show a video in HTML, use the <video> element:\nExample\nHow it Works\nThe controls attribute adds video controls, like play, pause, and volume.\nIt is a good idea to always include width and height attributes. If height and width are not set, the page might flicker while the video loads.\nThe <source> element allows you to specify alternative video files which the browser may choose from. The browser will use the first recognized format.\nThe text between the <video> and </video> tags will only be displayed in browsers that do not support the <video> element.\nHTML <video> Autoplay\nTo start a video automatically, use the autoplay attribute:\nExample\nNote: Chromium browsers do not allow autoplay in most cases. However, muted autoplay is always allowed.\nAdd muted after autoplay to let your video start playing automatically (but muted):\nExample\nBrowser Support\nThe numbers in the table specify the first browser version that fully supports the <video> element.\nREMOVE ADS\nHTML Video Formats\nThere are three supported video formats: MP4, WebM, and Ogg. The browser support for the different formats is:\nHTML Video - Media Types\nHTML Video - Methods, Properties, and Events\nThe HTML DOM defines methods, properties, and events for the <video> element.\nThis allows you to load, play, and pause videos, as well as setting duration and volume.\nThere are also DOM events that can notify you when a video begins to play, is paused, etc.\nExample: Using JavaScript\nVideo courtesy of Big Buck Bunny.\nFor a full DOM reference, go to our HTML Audio/Video DOM Reference.\nHTML Video Tags",
      "examples": [
        "<video width=\"320\" height=\"240\" controls>\n<source src=\"movie.mp4\" type=\"video/mp4\">\n<source src=\"movie.ogg\" type=\"video/ogg\">\nYour browser does not support the video tag.\n</video>",
        "<video width=\"320\" height=\"240\" autoplay>\n<source src=\"movie.mp4\" type=\"video/mp4\">\n<source src=\"movie.ogg\" type=\"video/ogg\">\nYour browser does not support the video tag.\n</video>",
        "<video width=\"320\" height=\"240\" autoplay muted>\n<source src=\"movie.mp4\" type=\"video/mp4\">\n<source src=\"movie.ogg\" type=\"video/ogg\">\nYour browser does not support the video tag.\n</video>",
        "<video>",
        "controls",
        "width",
        "height",
        "<source>",
        "</video>",
        "autoplay",
        "muted"
      ]
    },
    {
      "title": "HTML Audio",
      "summary": "The HTML <audio> element is used to play an audio file on a web page.\nThe HTML <audio> Element\nTo play an audio file in HTML, use the <audio> element:\nExample\nHTML Audio - How It Works\nThe controls attribute adds audio controls, like play, pause, and volume.\nThe <source> element allows you to specify alternative audio files which the browser may choose from. The browser will use the first recognized format.\nThe text between the <audio> and </audio> tags will only be displayed in browsers that do not support the <audio> element.\nHTML <audio> Autoplay\nTo start an audio file automatically, use the autoplay attribute:\nExample\nNote: Chromium browsers do not allow autoplay in most cases. However, muted autoplay is always allowed.\nAdd muted after autoplay to let your audio file start playing automatically (but muted):\nExample\nBrowser Support\nThe numbers in the table specify the first browser version that fully supports the <audio> element.\nREMOVE ADS\nHTML Audio Formats\nThere are three supported audio formats: MP3, WAV, and OGG. The browser support for the different formats is:\n*From Edge 79\nHTML Audio - Media Types\nHTML Audio - Methods, Properties, and Events\nThe HTML DOM defines methods, properties, and events for the <audio> element.\nThis allows you to load, play, and pause audios, as well as set duration and volume.\nThere are also DOM events that can notify you when an audio begins to play, is paused, etc.\nFor a full DOM reference, go to our HTML Audio/Video DOM Reference.\nHTML Audio Tags",
      "examples": [
        "<audio controls>\n<source src=\"horse.ogg\" type=\"audio/ogg\">\n<source src=\"horse.mp3\" type=\"audio/mpeg\">\nYour browser does not support the audio element.\n</audio>",
        "<audio controls autoplay>\n<source src=\"horse.ogg\" type=\"audio/ogg\">\n<source src=\"horse.mp3\" type=\"audio/mpeg\">\nYour browser does not support the audio element.\n</audio>",
        "<audio controls autoplay muted>\n<source src=\"horse.ogg\" type=\"audio/ogg\">\n<source src=\"horse.mp3\" type=\"audio/mpeg\">\nYour browser does not support the audio element.\n</audio>",
        "<audio>",
        "controls",
        "<source>",
        "</audio>",
        "autoplay",
        "muted"
      ]
    },
    {
      "title": "HTML Plug-ins",
      "summary": "Plug-ins are computer programs that extend the standard functionality of the browser.\nPlug-ins\nPlug-ins were designed to be used for many different purposes:\nTo run Java applets\nTo run Microsoft ActiveX controls\nTo display Flash movies\nTo display maps\nTo scan for viruses\nTo verify a bank id\nWarning !\nMost browsers no longer support Java Applets and Plug-ins.\nActiveX controls are no longer supported in any browsers.\nThe support for Shockwave Flash has also been turned off in modern browsers.\nThe <object> Element\nThe <object> element is supported by all browsers.\nThe <object> element defines an embedded object within an HTML document.\nIt was designed to embed plug-ins (like Java applets, PDF readers, and Flash Players) in web pages, but can also be used to include HTML in HTML:\nExample\nOr images if you like:\nExample\nREMOVE ADS\nThe <embed> Element\nThe <embed> element is supported in all major browsers.\nThe <embed> element also defines an embedded object within an HTML document.\nWeb browsers have supported the <embed> element for a long time. However, it has not been a part of the HTML specification before HTML5.\nExample\nNote that the <embed> element does not have a closing tag. It can not contain alternative text.\nThe <embed> element can also be used to include HTML in HTML:\nExample",
      "examples": [
        "<object width=\"100%\" height=\"500px\" data=\"snippet.html\"></object>",
        "<object data=\"audi.jpeg\"></object>",
        "<embed src=\"audi.jpeg\">",
        "<embed width=\"100%\" height=\"500px\" src=\"snippet.html\">",
        "<object>",
        "<embed>"
      ]
    },
    {
      "title": "HTML YouTube Videos",
      "summary": "The easiest way to play videos in HTML, is to use YouTube.\nStruggling with Video Formats?\nConverting videos to different formats can be difficult and time-consuming.\nAn easier solution is to let YouTube play the videos in your web page.\nYouTube Video Id\nYouTube will display an id (like tgbNymZ7vqY), when you save (or play) a video.\nYou can use this id, and refer to your video in the HTML code.\nPlaying a YouTube Video in HTML\nTo play your video on a web page, do the following:\nUpload the video to YouTube\nTake a note of the video id\nDefine an <iframe> element in your web page\nLet the src attribute point to the video URL\nUse the width and height attributes to specify the dimension of the player\nAdd any other parameters to the URL (see below)\nExample\nYouTube Autoplay + Mute\nYou can let your video start playing automatically when a user visits the page, by adding autoplay=1 to the YouTube URL. However, automatically starting a video is annoying for your visitors!\nNote: Chromium browsers do not allow autoplay in most cases. However, muted autoplay is always allowed.\nAdd mute=1 after autoplay=1 to let your video start playing automatically (but muted).\nYouTube - Autoplay + Muted\nREMOVE ADS\nYouTube Playlist\nA comma separated list of videos to play (in addition to the original URL).\nYouTube Loop\nAdd playlist=videoID and loop=1 to let your video loop forever.\nloop=0 (default) - The video will play only once.\nloop=1 - The video will loop (forever).\nYouTube - Loop forever\nYouTube Controls\nAdd controls=0 to NOT display controls in the video player.\ncontrols=0 - Player controls does not display.\ncontrols=1 (default) - Player controls is displayed.\nYouTube - Controls",
      "examples": [
        "<iframe width=\"420\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/tgbNymZ7vqY\">\n</iframe>",
        "<iframe width=\"420\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/tgbNymZ7vqY?autoplay=1&mute=1\">\n</iframe>",
        "<iframe width=\"420\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/tgbNymZ7vqY?playlist=tgbNymZ7vqY&loop=1\">\n</iframe>",
        "<iframe width=\"420\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/tgbNymZ7vqY?controls=0\">\n</iframe>",
        "<iframe>",
        "src",
        "width",
        "height",
        "autoplay=1",
        "mute=1",
        "playlist=videoID",
        "loop=1",
        "loop=0",
        "controls=0",
        "controls=1"
      ]
    },
    {
      "title": "HTML - What is a Web API?",
      "summary": "A Web API is a developer's dream.\nIt can extend the functionality of the browser\nIt can greatly simplify complex functions\nIt can provide easy syntax to complex code\nWhat is Web API?\nAPI stands for Application Programming Interface. An API is some kind of interface that includes a set of functions and subroutines that allow programmers to access specific features or data of an application, operating system or other services.\nA Web API is an application programming interface for the Web.\nHTML APIs\nAll browsers have a set of built-in Web APIs to support complex operations, and to help accessing data.\nHere are some of the main HTML5 APIs:\n1. Geolocation API - This API is used to access the current location of a user (with latitude and longitude).\n2. Drag and Drop API - This API enables you to use drag-and-drop features in browsers.\n3. Web Storage API - This API has mechanisms to let browsers store key/value pairs (in a more intuitive way than cookies).\n4. Web Workers API - This API allows a JavaScript to run in the background, without affecting the performance of the page. Users can continue to do whatever they want: clicking, selecting things, etc., while the web worker runs in the background.\n5. Server-Sent Events API - This API allows a web page to automatically get updates from a server.\n6. Canvas API - This API lets you draw graphics, on the fly, via JavaScript.\nREMOVE ADS\nNotes on Using HTML APIs\nWhen implementing an HTML API, you should always:\nCheck Browser Capability - Always check that the target browsers support the API. Always add script or message to be run if a browser does not support it.\nAdd Robust Error Handling - Add robust error handling to take care of scenarios where an API may not function as expected, to ensure a seamless user experience.\nRequest User Permission - When using an API that accesses sensitive data, like the Geolocation API (which will access the user's geographical position), always prompt  the user for consent before proceeding.\nThird Party APIs\nThird party APIs are not built into your browser.\nTo use these APIs, you will have to download the code from the Web.\nExamples:\nYouTube API - Allows you to display videos on a web site.\nTwitter API - Allows you to display Tweets on a web site.\nFacebook API - Allows you to display Facebook info on a web site.",
      "examples": []
    },
    {
      "title": "HTML Geolocation API",
      "summary": "The Geolocation API is used to get the user's current location.\nLocate the User's Position\nThe Geolocation API is used to access the user's current location.\nSince this can compromise privacy, the location is not available unless the user approves it.\nTry It\nNote: The Geolocation API is only available on secure contexts such as HTTPS.\nTip: The Geolocation API is most accurate for devices with GPS, like smartphones or smartwatches.\nBrowser Support\nThe numbers in the table specify the first browser version that fully supports Geolocation.\nUsing HTML Geolocation API\nThe Geolocation API is accessed via a call to navigator.geolocation. This will cause the browser to ask the user for permission to access their location data. If the user accept, the browser will search for the best available functionality on the device to access this information (for example GPS).\nThe getCurrentPosition() method is used to return the user's current location.\nThe example below returns the latitude and longitude of the user's current location:\nExample\nExample explained:\nCheck if Geolocation is supported\nIf Geolocation is supported, run the getCurrentPosition() method. If not, display a message to the user\nThe success() function outputs the user's location in latitude and longitude\nThe error() function alerts a text if the browser retrieves an error in getCurrentPosition()\nREMOVE ADS\nError Handling and Rejections\nThe second parameter of the getCurrentPosition() method is used to handle errors. It specifies a function to run if it fails to get the user's location.\nHere is an example of a more specific error handling:\nExample\nLocation-specific Information\nGeolocation is also very useful for location-specific information, like:\nUp-to-date local information\nShowing Points-of-interest near the user\nTurn-by-turn navigation (GPS)\nThe getCurrentPosition() Method - Return Data\nThe getCurrentPosition() method returns an object on success. The latitude, longitude and accuracy properties are always returned. The other properties are returned if available:\nGeolocation Object - Other interesting Methods\nThe Geolocation object also has other interesting methods:\nwatchPosition() - Returns the current location of the user and continues to return updated location as the user moves (like the GPS in a car).\nclearWatch() - Stops the watchPosition() method.\nThe example below shows the watchPosition() method. You need an accurate GPS device to test this (like a smartphone):\nExample",
      "examples": [
        "<script>\nconst x = document.getElementById(\"demo\");\n\nfunction getLocation() {\nif (navigator.geolocation) {\nnavigator.geolocation.getCurrentPosition(success, error);\n} else {\nx.innerHTML = \"Geolocation is not supported by this browser.\";\n}\n}\n\nfunction success(position) {\nx.innerHTML = \"Latitude: \" + position.coords.latitude +\n\"<br>Longitude: \" + position.coords.longitude;\n}\n\nfunction error() {\nalert(\"Sorry, no position available.\");\n}\n</script>",
        "function error(error) {\nswitch(error.code) {\ncase error.PERMISSION_DENIED:\nx.innerHTML = \"User denied the request for Geolocation.\"\nbreak;\ncase error.POSITION_UNAVAILABLE:\nx.innerHTML = \"Location information is unavailable.\"\nbreak;\ncase error.TIMEOUT:\nx.innerHTML = \"The request to get user location timed out.\"\nbreak;\ncase error.UNKNOWN_ERROR:\nx.innerHTML = \"An unknown error occurred.\"\nbreak;\n}\n}",
        "<script>\nconst x = document.getElementById(\"demo\");\n\nfunction getLocation() {\nif (navigator.geolocation) {\nnavigator.geolocation.watchPosition(success, error);\n} else {\nx.innerHTML = \"Geolocation is not supported by this browser.\";\n}\n}\n\nfunction success(position) {\nx.innerHTML = \"Latitude: \" + position.coords.latitude +\n\"<br>Longitude: \" + position.coords.longitude;\n}\n\nfunction error(error) {\nswitch(error.code) {\ncase error.PERMISSION_DENIED:\nx.innerHTML = \"User denied the request for Geolocation.\"\nbreak;\ncase error.POSITION_UNAVAILABLE:\nx.innerHTML = \"Location information is unavailable.\"\nbreak;\ncase error.TIMEOUT:\nx.innerHTML = \"The request to get user location timed out.\"\nbreak;\ncase error.UNKNOWN_ERROR:\nx.innerHTML = \"An unknown error occurred.\"\nbreak;\n}\n}\n</script>",
        "navigator.geolocation",
        "getCurrentPosition()",
        "watchPosition()",
        "clearWatch()"
      ]
    },
    {
      "title": "HTML Drag and Drop API",
      "summary": "The HTML Drag and Drop API enables an element to be dragged and dropped.\nExample\nDrag the W3Schools image into the second rectangle.\nDrag and Drop\nDrag and drop is a very common feature. It is when you \"grab\" an object and drag it to a different location.\nBrowser Support\nThe numbers in the table specify the first browser version that fully supports Drag and Drop.\nHTML Drag and Drop API Example\nThe example below is a simple drag and drop example:\nExample\nIt might seem complicated, but lets go through all the different parts of a drag and drop event.\nREMOVE ADS\nMake an Element Draggable\nFirst of all: To make an element draggable, set the draggable attribute to true:\nor:\nWhat to Drag - ondragstart and setData()\nThen, specify what should happen when the element is dragged.\nIn the example above, the ondragstart attribute of the <img> element calls a function (dragstartHandler(ev)), that specifies what data to be dragged.\nThe dataTransfer.setData() method sets the data type and the value of the dragged data:\nIn this case, the data type is \"text\" and the value is the id of the draggable element (\"img1\").\nWhere to Drop - ondragover\nThe ondragover attrribute of the <div> element calls a function (dragoverHandler(ev)), that specifies where the dragged data can be dropped.\nBy default, data/elements cannot be dropped in other elements. To allow a drop, we must prevent the default handling of the element.\nThis is done by calling the preventDefault() method for the ondragover event:\nDo the Drop - ondrop\nWhen the dragged data is dropped, a drop event occurs.\nIn the example above, the ondrop attribute of the <div> element calls a function, dropHandler(event):\nCode explained:\nCall preventDefault() to prevent the browser default handling of the data (default is open as link on drop)\nGet the dragged data with the dataTransfer.getData() method. This method will return any data that was set to the same type in the setData() method\nThe dragged data is the id of the dragged element (\"img1\")\nAppend the dragged element into the drop element\nMore Examples\nExample\nHow to drag and drop an <h1> element to a <div> element:\nExample\nHow to drag and drop an <a> element to a <div> element:\nExample\nHow to drag and drop an image back and forth between two <div> elements:",
      "examples": [
        "<!DOCTYPE HTML>\n<html>\n<head>\n<script>\nfunction dragstartHandler(ev) {\nev.dataTransfer.setData(\"text\", ev.target.id);\n}\n\nfunction dragoverHandler(ev) {\nev.preventDefault();\n}\n\nfunction dropHandler(ev) {\nev.preventDefault();\nconst data = ev.dataTransfer.getData(\"text\");\nev.target.appendChild(document.getElementById(data));\n}\n</script>\n</head>\n<body>\n\n<div id=\"div1\" ondrop=\"dropHandler(event)\" ondragover=\"dragoverHandler(event)\"></div>\n\n<img id=\"img1\" src=\"img_logo.gif\" draggable=\"true\" ondragstart=\"dragstartHandler(event)\" width=\"336\" height=\"69\">\n\n</body>\n</html>",
        "<img id=\"img1\" draggable=\"true\">",
        "<p id=\"p1\" draggable=\"true\">Draggable text</p>",
        "function dragstartHandler(ev) {\nev.dataTransfer.setData(\"text\", ev.target.id);\n}",
        "function dragoverHandler(ev) {\nev.preventDefault();\n}",
        "function dropHandler(ev) {\nev.preventDefault();\nconst data = ev.dataTransfer.getData(\"text\");\nev.target.appendChild(document.getElementById(data));\n}",
        "<script>\nfunction dragstartHandler(ev) {\nev.dataTransfer.setData(\"text\", ev.target.id);\n}\n\nfunction dragoverHandler(ev) {\nev.preventDefault();\n}\n\nfunction dropHandler(ev) {\nev.preventDefault();\nconst data = ev.dataTransfer.getData(\"text\");\nev.target.appendChild(document.getElementById(data));\n}\n</script>\n</head>\n<body>\n\n<div id=\"div1\" ondrop=\"dropHandler(event)\" ondragover=\"dragoverHandler(event)\"></div>\n\n<h1 id=\"h1\" draggable=\"true\" ondragstart=\"dragstartHandler(event)\">W3Schools.com</h1>",
        "<script>\nfunction dragstartHandler(ev) {\nev.dataTransfer.setData(\"text\", ev.target.id);\n}\n\nfunction dragoverHandler(ev) {\nev.preventDefault();\n}\n\nfunction dropHandler(ev) {\nev.preventDefault();\nconst data = ev.dataTransfer.getData(\"text\");\nev.target.appendChild(document.getElementById(data));\n}\n</script>\n</head>\n<body>\n\n<div id=\"div1\" ondrop=\"dropHandler(event)\" ondragover=\"dragoverHandler(event)\"></div>\n\n<a id=\"link1\" href=\"https://w3schools.com\" draggable=\"true\" ondragstart=\"dragstartHandler(event)\">W3Schools.com</a>",
        "draggable",
        "ondragstart",
        "dataTransfer.setData()",
        "ondragover",
        "preventDefault()",
        "dataTransfer.getData()",
        "setData()"
      ]
    },
    {
      "title": "HTML Web Storage API",
      "summary": "HTML Web Storage API; better than cookies.\nWhat is HTML Web Storage?\nWith web storage, applications can store data locally within the user's browser.\nBefore HTML5, application data had to be stored in cookies, included in every server request. Web storage is more secure, and large amounts of data can be stored locally, without affecting website performance.\nUnlike cookies, the storage limit is far larger (at least 5MB) and information is never transferred to the server.\nWeb storage is per origin (per domain and protocol). All pages, from one origin, can store and access the same data.\nWeb Storage API Objects\nWeb storage provides two objects for storing data in the browser:\nwindow.localStorage - stores data with no expiration date (data is not lost when the browser tab is closed)\nwindow.sessionStorage - stores data for one session (data is lost when the browser tab is closed)\nBrowser Support\nThe numbers in the table specify the first browser version that fully supports Web Storage.\nTest Web Storage API Support\nBefore using web storage, we can quickly check browser support for localStorage and sessionStorage:\nExample\nTest browser support:\nREMOVE ADS\nThe localStorage Object\nThe localStorage object stores the data with no expiration date. The data will not be lost when the browser is closed, and will be available the next day, week, or year.\nExample\nUse localStorage to set and retrieve name and value pairs:\nExample explained:\nUse the localStorage.setItem() method to create name/value pairs\nUse the localStorage.getItem() method to retrieve the values set\nRetrieve the value of \"lastname\" and insert it into an element with id=\"result\"\nRetrieve the value of \"bgcolor\" and insert it into the style backgroundColor of the element with id=\"result\"\nThe syntax for removing the \"lastname\" localStorage item is as follows:\nNote: Name/value pairs are always stored as strings. Remember to convert them to another format when needed!\nCounting Clicks with localStorage\nThe following example counts the number of times a user has clicked a button. In this code the value string is converted to a number to be able to increase the counter:\nExample\nThe sessionStorage Object\nThe sessionStorage object is equal to the localStorage object, except that it stores the data for only one session! The data is deleted when the user closes the specific browser tab.\nCounting Clicks with sessionStorage\nThe following example counts the number of times a user has clicked a button, in the current session:\nExample",
      "examples": [
        "<script>\nconst x = document.getElementById(\"result\");\nif (typeof(Storage) !== \"undefined\") {\nx.innerHTML = \"Your browser supports Web storage!\";\n} else {\nx.innerHTML = \"Sorry, no Web storage support!\";\n}\n</script>",
        "<script>\nconst x = document.getElementById(\"result\");\n\nif (typeof(Storage) !== \"undefined\") {\n// Store\nlocalStorage.setItem(\"lastname\", \"Smith\");\nlocalStorage.setItem(\"bgcolor\", \"yellow\");\n// Retrieve\nx.innerHTML = localStorage.getItem(\"lastname\");\nx.style.backgroundColor = localStorage.getItem(\"bgcolor\");\n} else {\nx.innerHTML = \"Sorry, no Web storage support!\";\n}\n</script>",
        "localStorage.removeItem(\"lastname\");",
        "<script>\nfunction clickCounter() {\nconst x = document.getElementById(\"result\");\nif (typeof(Storage) !== \"undefined\") {\nif (localStorage.clickcount) {\nlocalStorage.clickcount = Number(localStorage.clickcount)+1;\n} else {\nlocalStorage.clickcount = 1;\n}\nx.innerHTML = \"You have clicked the button \" + localStorage.clickcount + \" time(s)!\";\n} else {\nx.innerHTML = \"Sorry, no Web storage support!\";\n}\n}\n</script>",
        "<script>\nfunction clickCounter() {\nconst x = document.getElementById(\"result\");\nif (typeof(Storage) !== \"undefined\") {\nif (sessionStorage.clickcount) {\nsessionStorage.clickcount = Number(sessionStorage.clickcount)+1;\n} else {\nsessionStorage.clickcount = 1;\n}\nx.innerHTML = \"You have clicked the button \" + sessionStorage.clickcount + \" time(s) in this session!\";\n} else {\nx.innerHTML = \"Sorry, no Web storage support!\";\n}\n}\n</script>",
        "window.localStorage",
        "window.sessionStorage",
        "localStorage",
        "localStorage.setItem()",
        "localStorage.getItem()",
        "sessionStorage"
      ]
    },
    {
      "title": "HTML Web Workers API",
      "summary": "A web worker is an external JavaScript file that runs in the background, without affecting the performance of the page.\nWhat is a Web Worker?\nWhen executing scripts in an HTML page, the page becomes unresponsive until the script is finished.\nA web worker is an external JavaScript file that runs in the background, independently of other scripts, without affecting the performance of the page. You can continue to do whatever you want: clicking, selecting things, etc., while the web worker runs in the background.\nWeb workers are useful for heavy code that can't be run on the main thread, without causing long tasks that make the page unresponsive.\nBrowser Support\nThe numbers in the table specify the first browser version that fully support the Web Workers API.\nWeb Workers API Example\nThe example below creates a simple web worker that count numbers in the background:\nExample\nStart Worker Stop Worker var w; function startWorker() { if(typeof(Worker)!==\"undefined\") { if(typeof(w)==\"undefined\") { w=new Worker(\"demo_workers.js\"); } w.onmessage = function (event) { document.getElementById(\"result\").innerHTML=event.data; }; } else { document.getElementById(\"result\").innerHTML=\"Sorry, your browser does not support Web Workers...\"; } } function stopWorker() { w.terminate(); w = undefined; }\nNote: Normally web workers are not used for such simple scripts, but for more CPU intensive tasks!\nCheck Web Worker API Support\nBefore using web worker, we can quickly check browser support:\nExample\nTest browser support:\nREMOVE ADS\nCreate a .js Web Worker File\nNow, let's create a web worker in an external JavaScript file.\nHere we create a script that counts. The script is stored in the \"demo_workers.js\" file:\nNote: The important part of the code above is the postMessage() method - which is used to post messages back to the HTML page.\nCreate a Web Worker Object\nOnce we have created the .js web worker file, we can call it from an HTML page.\nThe following lines checks if a worker (w) already exists, if not - it creates a new web worker object and points to the .js file: \"demo_workers.js\":\nThen we can SEND and RETRIEVE messages from the web worker.\nData is sent between web workers and the main thread via a system of messages - both sides send their messages using the postMessage() method, and respond to messages via the onmessage event handler.\nAdd an onmessage event listener to the web worker object.\nWhen the web worker in the .js posts a message, the code within the event listener is executed. The data from the web worker is stored in event.data.\nTerminate a Web Worker\nWhen a web worker object is created, it will continue to listen for messages until it is terminated.\nTo terminate a web worker object, and free browser/computer resources, use the terminate() method:\nReuse the Web Worker\nIf you set the web worker variable to undefined, after it has been terminated, you can reuse the worker/code:\nFull Web Worker Example\nWe have already seen the Web Worker code in the .js file.\nBelow is the full code for the HTML page:\nExample\nWeb Workers and the DOM\nSince web workers are in external .js files, they do not have access to the following JavaScript objects:\nThe window object\nThe document object\nThe parent object",
      "examples": [
        "<script>\nconst x = document.getElementById(\"result\");\nif(typeof(Worker) !== \"undefined\") {\nx.innerHTML = \"Your browser support Web Workers!\";\n} else {\nx.innerHTML = \"Sorry, your browser does not support Web Workers.\";\n}\n</script>",
        "var i = 0;\n\nfunction timedCount() {\ni = i + 1;\npostMessage(i);\nsetTimeout(\"timedCount()\",500);\n}\n\ntimedCount();",
        "if (typeof(w) == \"undefined\") {\nw = new Worker(\"demo_workers.js\");\n}",
        "w.onmessage = function(event){\ndocument.getElementById(\"result\").innerHTML = event.data;\n};",
        "w.terminate();",
        "w = undefined;",
        "<!DOCTYPE html>\n<html>\n<body>\n\n<p>Count numbers: <output id=\"result\"></output></p>\n<button onclick=\"startWorker()\">Start Worker</button>\n<button onclick=\"stopWorker()\">Stop Worker</button>\n\n<script>\nlet w;\n\nfunction startWorker() {\nconst x = document.getElementById(\"result\");\nif (typeof(Worker) !== \"undefined\") {\nif (typeof(w) == \"undefined\") {\nw = new Worker(\"demo_workers.js\");\n}\nw.onmessage = function(event) {\nx.innerHTML = event.data;\n};\n} else {\nx.innerHTML = \"Sorry! No Web Worker support.\";\n}\n}\n\nfunction stopWorker() {\nw.terminate();\nw = undefined;\n}\n</script>\n\n</body>\n</html>",
        "postMessage()",
        "onmessage",
        "event.data",
        "terminate()"
      ]
    },
    {
      "title": "HTML Server-Sent Events API",
      "summary": "The Server-Sent Events (SSE) API enables pushing messages/updates from a server to the web page via HTTP connection.\nServer-Sent Events - One Way Messaging\nA server-sent event is when a web page automatically gets messages/updates from a server.\nNormally, a web page has to request data from the server, but with server-sent events, the updates are pushed automatically.\nExamples: Facebook/Twitter updates, stock market updates, news feeds, sport results, etc.\nBrowser Support\nThe numbers in the table specify the first browser version that fully support the Server-Sent Events API.\nReceive Server-Sent Event Notifications\nThe EventSource object is used to receive server-sent event notifications:\nExample\nExample explained:\nCreate a new EventSource object, and specify the URL of the page sending the updates (in this example \"demo_sse.php\")\nEach time an update is received, the onmessage event occurs\nWhen an onmessage event occurs, put the received data into the element with id=\"result\"\nCheck Browser Support\nIn the tryit example above there were some extra lines of code to check browser support for server-sent events:\nREMOVE ADS\nServer-Side Code Example\nFor the example above to work, you need a server capable of sending data updates (like PHP or ASP).\nThe server-side event stream syntax is simple. Set the \"Content-Type\" header to \"text/event-stream\". Now you can start sending event streams.\nCode in PHP (demo_sse.php):\nCode in ASP (VB) (demo_sse.asp):\nCode explained:\nSet the \"Content-Type\" header to \"text/event-stream\"\nSpecify that the page should not cache\nOutput the data to send (Always start with \"data: \")\nFlush the output data back to the web page\nThe EventSource Object\nIn the examples above we used the onmessage event to get messages. But other events are also available:",
      "examples": [
        "<script>\nconst x = document.getElementById(\"result\");\n// Check browser support for SSE\nif(typeof(EventSource) !== \"undefined\") {\nvar source = new EventSource(\"demo_sse.php\");\nsource.onmessage = function(event) {\nx.innerHTML += event.data + \"<br>\";\n};\n} else {\nx.innerHTML = \"Sorry, no support for server-sent events.\";\n}\n</script>",
        "if(typeof(EventSource) !== \"undefined\") {\n// Yes! Server-sent events support!\n// Some code.....\n} else {\n// Sorry! No server-sent events support..\n}",
        "<?php\nheader('Content-Type: text/event-stream');\nheader('Cache-Control: no-cache');\n\n$time = date('r');\necho \"data: The server time is: {$time}\\n\\n\";\nflush();\n?>",
        "<%\nResponse.ContentType = \"text/event-stream\"\nResponse.Expires = -1\nResponse.Write(\"data: The server time is: \" & now())\nResponse.Flush()\n%>",
        "EventSource",
        "onmessage"
      ]
    },
    {
      "title": "HTML Examples",
      "summary": "HTML Basic\nExamples explained\nHTML Attributes\nExamples explained\nHTML Headings\nExamples explained\nHTML Paragraphs\nExamples explained\nHTML Styles\nExamples explained\nREMOVE ADS\nHTML Text Formatting\nExamples explained\nHTML Quotations and Citations\nExamples explained\nHTML Comments\nExamples explained\nHTML CSS\nExamples explained\nHTML Links\nExamples explained\nHTML Images\nExamples explained\nHTML Tables\nExamples explained\nHTML Lists\nExamples explained\nHTML Block and inline elements\nExamples explained\nHTML Div Element\nExamples explained\nHTML Classes\nExamples explained\nHTML Id\nExamples explained\nHTML Layout\nExamples explained\nHTML IFrame\nExamples explained\nHTML head Elements\nExamples explained\nHTML Scripts\nExamples explained\nHTML Computercode Elements\nExamples explained\nHTML Forms\nExamples explained\nHTML Form Elements\nExamples explained\nHTML Input Types\nExamples explained\nHTML Input Attributes\nExamples explained\nHTML Canvas Graphics\nExamples explained\nHTML SVG Graphics\nExamples explained\nHTML Media\nExamples explained\nHTML Geolocation\nExamples explained\nHTML Local Storage\nExamples explained\nHTML Media\nExamples explained\nMore HTML Examples",
      "examples": []
    },
    {
      "title": "HTML Online Editor This is a Heading",
      "summary": "HTML Editor\nWith our online HTML editor, you can edit HTML, CSS and JavaScript code, and view the result in your browser.\nExample\nThis is a paragraph.\nClick on the \"Try it Yourself\" button to see how it works.\nPublish Your Code\nIf you want to save your HTML, CSS and JavaScript code, and create your own website, check out W3Schools Spaces.\nW3Schools Spaces is a website-building tool that lets you make and share your own website.\nYou can change the website's look and how it works by editing the code right in your web browser.\nIt's easy to use and doesn't require any setup:\nThe code editor is packed with features to help you achieve more:\nTemplates: Start from scratch or use a template\nCloud-based: no installations required. You only need your browser\nTerminal & Log: debug and troubleshoot your code easily\nFile Navigator: switch between files inside the code editor\nAnd much more!\nLearn Faster\nPractice is key to mastering coding, and the best way to put your HTML knowledge into practice is by getting practical with code.\nUse W3Schools Spaces to build, test and deploy code.\nThe code editor lets you write and practice different types of computer languages. It includes HTML/CSS/JavaScript, but you can use it for other languages too, such as PHP, Python, Node.js, etc.\nIf you don't know HTML, we suggest that you read our HTML Tutorial from scratch.\nBuild Powerful Websites\nYou can also use the code editor in W3School Spaces to build frontend or full-stack websites from scratch.\nOr you can use the 60+ templates available and save time:\nCreate your Spaces account today and explore them all!\nShare It With The World\nHost and publish your websites in no time with W3School Spaces.\nW3Schools subdomain and SSL certificate are included for free with W3School Spaces. An SSL certificate makes your website safe and secure. It also helps people trust your website and makes it easier to find it online.\nWant a custom domain for your website?\nYou can buy a domain or transfer an existing one and connect it to your space.\nHow Does It Work?\nGet started in a few clicks with W3School Spaces.",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<title>HTML Tutorial</title>\n<body>\n\n<h1>This is a heading</h1>\n<p>This is a paragraph.</p>\n\n</body>\n</html>"
      ]
    },
    {
      "title": "HTML Quiz",
      "summary": "You can test your HTML skills with W3Schools' Quiz.\nThe Test\nThe test contains 40 questions and there is no time limit.\nThe test is not official, it's just a nice way to see how much you know, or don't know, about HTML.\nCount Your Score\nYou will get 1 point for each correct answer. At the end of the Quiz, your total score will be displayed. Maximum score is 40 points.\nStart the Quiz\nGood luck!\nStart the HTML Quiz ❯\nIf you don't know HTML, we suggest that you read our HTML Tutorial from scratch.\nKickstart your career\nGet certified by completing the HTML course",
      "examples": []
    },
    {
      "title": "HTML Exercises",
      "summary": "Exercises\nTest your HTML skills with exercises from all categories:\nIntroduction\nBasic\nElements\nAttributes\nHeadings\nParagraphs\nStyles\nFormatting\nQuotations\nComments\nColors\nRGB Colors\nHex Colors\nHSL Colors\nCSS\nLinks\nLink Colors\nBookmarks\nImages\nImage Map\nBackground Images\nPicture\nFavicon\nTitle\nTables\nTable Borders\nTable Sizes\nTable Headers\nTable Padding/Spacing\nTable Colspan and Rowspan\nLists\nUnordered Lists\nOrdered Lists\nDescription Lists\nBlock and Inline\nDiv element\nClasses\nId\nIframes\nScripts\nHead\nResponsive\nComputercode\nSemantic Elements\nEntities\nForms\nForm Attributes\nForm Elements\nInput Types\nInput Attributes\nInput Form Attributes\nLog in to track your progress\nIf you haven't already, sign up to become a W3Schooler, and get points for every exercise you complete.\nAs a logged-in W3Schools user you will have access to many features like having your own web page, track your learning progress, receive personal guided paths, and more.\nThe Exercise\nThe exercises are a mix of \"multiple choice\" and \"fill in the blanks\" questions. There are between 3 and 9 questions in each category. The answer can be found in the corresponding tutorial chapter. If you're stuck, or answer wrong, you can try again or hit the \"Show Answer\" button to see the correct answer.\nKickstart your career\nGet certified by completing the HTML course",
      "examples": []
    },
    {
      "title": "HTML Website Hosting Create Website with HTML Powerful Code Editor Practice Makes Perfect kAI",
      "summary": "Coding Skills\nAI Tutor\nProjects\nSecurely\nChoose your Plan\nBy subscribing to a plan you support the W3Schools mission to make\nlearning available to everyone - no matter their background.\n$0 /Forever\nThis is for you that are beginning to explore coding and web development\nTrack your progress\nSet your goals\nBuild and host 1 static website\n100 credits/month\nAccess various AI features like W3Schools kAI coding tutor and interview preparation.\nNo support\n$14.99 /Month\nThis is for you that want to learn and reach your goals faster. Build fullstack projects, ad free experience.\nAd-free experience\nUnlimited challenges\nUnlimited practice tests\nBuild and host 15 static websites\nBuild and host 1 full stack server\nChoose from 75+ templates\n10000 credits/month\nAccess various AI features like W3Schools kAI coding tutor and interview preparation.\nCancel anytime\nFor teachers\nSpend less time on admin tasks while engaging your students. Help them learn, practice and collaborate. All in one place.\nAd-free for focused learning\nDashboard to manage your classroom\nStudy plans for structured learning\nTrack progress with insights\nInteractive code challenges and projects\nAccess to all courses and certification exams\nSpaces for building and publishing projects\n25% OFF\nYou can also buy a domain or connect an existing one.\nSave Time with Templates\nJust landed in Spaces\nLearn to code more effectively\nand intelligently with kAI - AI tutor\nHi! I'm kAI, W3Schools AI Tutor...\nFeel free to ask me any coding-related questions, and I'll do my best to assist you.\nI can help you checking your code for errors, improving your code's structure, explaining coding concepts in a clear and understandable way, and more...\nI can even create complete websites for you based on your input, so what are you waiting for?\nSuper Simple to Share\nIncluded for free in all plans\nWant custom domains?\nHow it works\nCoding Made Easy\nCloud-based\nTerminal & Log\nHow To Libraries\nDatabase\nFile Navigator\nPackage Manager\nAnalytics\nEnvironment Manager\nSave Time & Money.\nAll Your Files in One Place.\nFix Your Code Faster.\nGet Full Data Visibility.\nIncreased Control and Security.\nFind What You Need Quicker.\nGet Traffic Insights.\nGet Inspired\nFrequently Asked Questions\nWith Basic Spaces, you can build frontend websites. Whereas with Fullstack Spaces, you can build frontend and backend websites.\nBasic Spaces include HTML, CSS, and Javascript. Full Stack Spaces include everything in Basic Spaces plus PHP, Python, React.js, Vue.js, Node.js, Handlebars, and Django.\nYour subscription will be automatically renewed every month.\nYour access to all the benefits for the paid period of time will continue. However, the subscription will not be renewed automatically.\nTo subscribe W3Schools accounts for multiple users, you can contact sales@w3schools.com",
      "examples": []
    },
    {
      "title": "HTML Syllabus",
      "summary": "Introduction\nThe W3Schools HTML Tutorial is comprehensive and beginner-friendly.\nIt will give you a fundamental knowledge of HTML.\nIt is designed for beginners and requires no prior experience with programming.\nThe content has been carefully made to be bite-sized, simple, and easy to understand.\nThe content has been proven by millions of users over the years. It is updated and improved frequently.\nThe syllabus outline and its sequence are structured so you can learn HTML step by step, from the introduction to creating your first application with HTML.\nGet Started With HTML »\nLearning Outcomes\nUnderstand the basic structure of an HTML document.\nMake use of HTML tags (for example, headings, paragraphs, images, and links).\nMake and format lists, both ordered and unordered.\nApply attributes to edit elements (e.g., colors, sizes, links).\nMake tables and forms.\nAdd multimedia such as images and videos to a website.\nUse semantic tags for a well-structured website.\nCreate hyperlinks to link websites.\nCreate accessible websites with text, images, and links.\nNote: Are you a teacher teaching HTML? W3Schools Academy is a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more about Academy here.\nWhich Subjects Are HTML Relevant For?\nWeb pages:\nHTML is the standard markup language for creating Web pages.\nComputer Science (CS) / Information Technology (IT):\nHTML is fundamental to understanding the internet, web development, and programming.\nDigital Media:\nText, photos, and other media can be added to digital platforms using HTML, which is essential for content creation and management.\nBusiness / Entrepreneurship:\nUnderstanding how to create a website is helpful for projects related to the internet.\nArt and Design:\nHTML supports web design, creativity, and visual communication ideas that are all part of web design.\nSTEM (Science, Technology, Engineering, Mathematics):\nBuilding web pages with HTML is a part of technology integration in STEM projects, teaching logical thinking and problem-solving.\nCareer and Technical Education (CTE):\nHTML is part of the curriculum for career-focused courses, especially those related to web development, IT support, and digital marketing.\nGet Started\nActivities\nIn this tutorial we offer different activities for you to learn HTML for free:\nLessons\nExercises\nQuizzes\nSign in to Track Progress\nYou can also create a free account to track your progress.\nAs a signed-in user, you get access to features such as:\nLearning paths\nSandbox and lab environments\nAchievements\nAnd much more!\nSign Up - It's free\nOverview of the Modules\nHTML HOME\nHTML Introduction\nHTML Editors\nHTML Basic\nHTML Elements\nHTML Attributes\nHTML Headings\nHTML Paragraphs\nHTML Styles\nHTML Formatting\nHTML Quotations\nHTML Comments\nHTML Colors\nHTML CSS\nHTML Links\nHTML Images\nHTML Page Title\nHTML Favicon\nHTML Tables\nHTML Lists\nHTML Block & Inline\nHTML Div Element\nHTML class Attribute\nHTML id Attribute\nHTML Iframes\nHTML JavaScript\nHTML File Paths\nHTML Head Element\nHTML Layout\nHTML Responsiv\nHTML Computercode\nHTML Semantics\nHTML Style Guide\nHTML Entities\nHTML Symbols\nHTML Emojis\nHTML Charset\nHTML URL Encode\nHTML vs. XHTML\nHTML Forms\nHTML From Attributes\nHTML Form Elements\nHTML Input Types\nHTML Input Attributes\nHTML Input Form Attributes\nHTML Canvas\nHTML SVG\nHTML Media\nHTML Video\nHTML Audio\nHTML Plug-ins\nHTML YouTube\nHTML Geolocation\nHTML Drag/Drop\nHTML Web Storage\nHTML Web Workers\nHTML SSE\nGet Started\nSandbox and Lab Environment\nHTML, like any other coding language, is best learned by working hands-on with code.\nEasily try code with our \"Try it Yourself\" editor.\nHere, you can edit HTML code and view the result:\nExample\nIf you want to explore more and host your project, we have a feature called Spaces that allows you to build, test and deploy static websites for free.\nHere you get a secure sandbox environment called Spaces, where you can practice coding and test projects in real-time.\nSpaces allow you to test, build, and deploy code. This includes a W3Schools subdomain, hosting, and secure SSL certificates.\nSpaces require no installation and run directly in the browser.\nFeatures include:\nCollaboration\nFile navigator\nTerminal & log\nPackage manager\nDatabase\nEnvironment manager\nAnalytics\nCreate a Spaces Account\nHTML Certification\nW3Schools offers an end-of-pathway certification program.\nHere you can take exams to get certified.\nThe HTML exam is a test that summarizes the W3Schools HTML syllabus.\nAfter passing the exam you get the \"Certified HTML Developer\" Certification.\nThere are two different types of certifications:\nNon-adaptive\nAdaptive\nThe non-adaptive is pass or no pass.\nThe adaptive certification is adaptive and graded; students will get a grade from intermediate, advanced to professional.\nBuy Certificate »\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach HTML?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo »",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<head>\n<title>Page Title</title>\n</head>\n<body>\n\n<h1>This is a Heading</h1>\n<p>This is a paragraph.</p>\n\n</body>\n</html>"
      ]
    },
    {
      "title": "HTML Study Plan",
      "summary": "Introduction\nThe HTML study plan helps you teach your students HTML step-by-step.\nCreating a study plan for HTML is easy.\nYou can use a pre-built study plan or customize it.\nStudents have different skill levels. The study plans can be customized to ensure that everyone is challenged.\nSave time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of HTML to the final exam.\nW3Schools Academy\nThis study plan is a feature of W3Schools Academy.\nW3Schools Academy is a platform that has everything you need to teach coding, all in one place.\nIt offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom.\nYou need to have an active subscription to access the study plan feature. There are two different subscription tiers:\nEssentials ($1.99 / month per student)\nFull Access ($5.99 / month per student)\nCalculate your price and order here.\nLearn More »\nAcademy also offer other features such as:\nManaging your classroom\nTracking of student progress and reports\nLabs, assignments, and code challenges (prebuilt challenges or create your own ones)\nAuto-grading\nTeaching materials\nCertification exams\nGet a free demo »\nTeacher Materials\nW3Schools has everything you need to teach HTML.\nThe HTML training materials is available for you to include and use in your study plan:\nW3Schools HTML Tutorial\nHTML Exercises\nHTML Quiz\nHTML Challenges (Coding challenges)\nHTML Certification Exam (End of Pathway Exam)\nHTML Syllabus\nWith the HTML Syllabus, your students will start with the basics, like creating simple web pages, and move to more advanced topics, like adding images, links, and forms. Each chapter has examples, try-its, exercises, and quizzes to make learning easy, interactive and fun.\nRead more about HTML Syllabus.\nStudy Plan Overview\nThe study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level.\nLearning Paths\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nInteractive Content\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTimeline and Pace\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nTrack Student Progress\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nEnd of Pathway Exam\nThe HTML study plan aligns with the HTML Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the HTML Tutorial.\nYou get reports of the students' results.\nThe HTML study plan aligns with the HTML Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the HTML Tutorial.\nYou get reports of the students' results.\nAccessibility\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nLearn More »\nSample Study Plan\nYou choose the timeline and pace of your study plans.\nSchools have different preferences.\nSome would like more intensive pace, e.g. 4 weeks, others 12 or more weeks.\nIt is completely up to you.\nFor example, this is how a 4-week HTML study plan could look like:\nWeek 1: Introduction and Basics, Formatting and Style, Colors, Links\nWeek 2: Images, Tables, Lists\nWeek 3: More HTML Elements, Logic, Forms\nWeek 4: Graphics, Media, APIs, HTML Certification Exam\nImage of Sample HTML study plan:\nReady to get started?\nStart with HTML Study Plans today.\nGet Started »\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach HTML programming?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo »",
      "examples": []
    },
    {
      "title": "HTML Interview Preparation",
      "summary": "Try W3Schools' comprehensive Front-End interview preparation feature.\nA tool that will help you get ready for your next interview.\nW3Schools interview preparation is an interactive feature powered by AI, where you can select the role of the interviewer, ask questions, and receive guidance.\nAfter the interview training you will get an evaluation of your performance that you can use to improve yourself.\nGet Started\nWhat to expect in a Front-End interview\nIf you are going to a Front-End interview, there are a few things you can expect:\nCoding Questions:\nYou will be asked coding questions, and you possibly also get a task to solve.\nExamples of technical questions:\nTell me about your experience as a Front-End developer.\nTell me about a personal project where you worked on implementing the user interface for a website.\nExamples of a task:\nCreate a webpage that shows a greeting message to the user.\nUse HTML and CSS to structure and style it. You can add a JavaScript function to change the message based on the time of the day.\nIf you don't know how to solve the task or answer the question, do not panic. It happens to everyone, even pro Front-End developers.\nShowcase your skills and projects:\nThey would like to see projects to understand your work better.\nYou can include current projects in your portfolio even if they are unfinished.\nExamples of projects to have in your portfolio:\nTo-do list app\nBlog template\nWeather dashboard\nE-commerce product page\nInteractive game or application\nWhat to do before the interview\nBefore you go to an interview, you should check out the company.\nIt will give you a better understanding of their values and what they do.\nCheck out:\nTheir webpage\nTheir social media platforms\nArticles and reviews\nMake sure you understand the job description:\nRead the description and take notes if you need help understanding something. You can call them before the interview and ask about the things you don't understand.\nYou can also ask a friend or a community member to help you.\nThere is a big community of Front-End developers on social media.\nReflect on why you are the right fit for this role:\nCompanies hire people they believe will be the right fit.\nThink about what value you can add to the role and the team.\nWrite them down.\nIt will help you discuss how you are the right candidate for the role.\nWe have created an interview tool to help you prepare:\nTry it out\nWhat is Front-End Development?\nFront-End development is an exciting career that allows you to create dynamic and responsive websites and apps. It's a good choice if you're interested in good user engagement and experience.\nTypical Languages Used in Front-End Development:\nHTML\nCSS\nJavaScript\nReact.js\nBootstrap\nand other CSS frameworks\nCareer Outlook\nThe demand for Front-End developers is high.\nYou can expect:\nCompetitive salary\nPossibility of working remotely\nOpportunity to grow as the industry innovates and adopts new technologies.\nThe Average Salary is $112,328 in the US.\nTypical Job Titles for a Front-End Developer:\nFront-End developer\nWeb Developer\nUI/UX Designer\nWeb App Developer\nand many more.\nTry W3Schools Pathfinder Jobs, where companies post in-demand job roles such as Front-End development, web development, Java development, and more.\nOur best tip: Prepare yourself so you can go in with confidence and enjoy the process!\nTry W3Schools interview preparation here: Interview Preperation\nBest of luck!",
      "examples": [
        "<head>\n<title>Simple Greeting Page</title>\n<style>\nbody {\nfont-family: Arial, sans-serif;\nbackground-color: #f0f0f0;\ncolor: #333;\npadding: 20px;\n}\n</style>\n</head>\n<body>\n\n<h1>Hello, welcome to our website!</h1>\n\n</body>\n</html>"
      ]
    },
    {
      "title": "W3Schools HTML Bootcamp HTML & CSS Bootcamp",
      "summary": "Learn More\nWhat You Will Learn\nHTML\nHow to use the latest HTML 5 standard to create your own Website.\nHow to format text, add graphics, create links, input forms, frames and tables, etc.\nHow to save it all in a text file that any browser can read and display.\nCSS\nHow to control the style and layout of multiple web pages all at once.\nHow to change the appearance and layout of all the pages in a Web site.\nJavaScript\nHow to program the behavior of web pages.\nHow to change the content and style of web pages.\nSelf-paced Courses\nStart learning Front-end with the W3Schools program and lay the foundations of your Web Development skills. This program is a great foundation for you that wants to get started with Front-end Development. It covers HTML, CSS and JavaScript.\nHTML is the standard markup language for Web pages. With HTML you can create your own Website.\nCSS is the language we use to style an HTML document. CSS describes how HTML elements should be displayed.\nJavaScript is the programming language of the Web.\nThis is a structured and interactive version of the w3schools HTML, CSS, and JavaScript Tutorials together with the W3schools certification.\nThe program is a set of self-paced courses with text based modules, practical interactive examples and exercises to check your understanding as you progress. Complete the modules and the final certification exams to get the w3schools certification.\nWhat You Get\n4x Certifications:\nCertified HTML Developer\nCertified CSS Developer\nCertified JavaScript Developer\nCertified Front End Developer\nCertificate of Completion\nYou get sharable certificates that can be added to your CV, Resume or LinkedIn.\nCheck out what it looks like in this example!\nThree Reasons to Join the Program\nLearn More\nHow it Works\nStep 1. Course enrollment\nEnroll by paying the enrollment fee and gain access to the course and final exam. There is no deadline to take the exam. All questions in the exam are based on W3Schools content.\nStep 2. Complete the course learning modules\nThe courses are self-paced with text based modules, practical interactive examples and exercises to check your understanding as you progress. Complete the learning modules to unlock the final exam.\nStep 3. Take the exams\nThe exams are taken at the end of each course after finishing the course learning modules. Immediately after completing the exam, you will be informed of your score and of your pass/fail status. You will get three attempts to pass each exam. You can use the new attempts to improve your score. The best result of the attempts will count.\nStep 4: Become certified\nPass the exams and get your certifications and your Certified Developer titles! Each certificate gets a unique link that can be shared with others. Validate your certificates with a link or a QR code.\nLearn More",
      "examples": []
    },
    {
      "title": "W3Schools HTML Certificate",
      "summary": "W3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nW3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nWho Should Consider Getting Certified?\nAny student or professional within the digital industry.\nCertifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market.\nW3Schools is Trusted by Top Companies\nW3Schools has over two decades of experience with teaching coding online.\nOur certificates are recognized and valued by companies looking to employ skilled developers.\nSave Time and Money\nShow the world your coding skills by getting a certification.\nThe prices is a small fraction compared to the price of traditional education.\nDocument and validate your competence by getting certified!\nExam overview\nFee: 95 USD\nAchievable certification levels:\nIntermediate (40%)\nAdvanced (75%)\nProfessional (90%)\nNumber of questions:\nAdaptive, 60 on average\nRequirement to pass:\nMinimum 40% - Intermediate level\nTime limit: 60 minutes\nNumber of attempts to pass: 3\nExam deadline: None\nCertification Expiration: None\nFormat: Online, multiple choice\nRegister now »\nAdvance Faster in Your Career\nGetting a certificate proves your commitment to upgrading your skills.\nThe certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on.\nIt gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nKnowledge is power, especially in the current job market.\nDocumentation of your skills enables you to advance your career or helps you to start a new one.\nHow Does It Work?\nStudy for free at W3Schools.com\nStudy at your own speed\nTest your skills with W3Schools online quizzes\nApply for your certificate by paying an exam fee\nTake your exam online, at any time, and from any location\nGet Your Certificate and Share It With The World\nExample certificate:\nEach certificate gets a unique link that can be shared with others.\nValidate your certification with the link or QR code.\nCheck how it looks like in this Example.\nShare your certificate on Linked in the Certifications section in just one click!\nDocument Your Skills\nGetting a certificate proves your commitment to upgrade your skills, gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nGet Your Certificate »\nLooking to add multiple users?\nAre you an educator, manager or business owner looking for courses or certifications?\nWe are working with schools, companies and organizations from all over the world.\nGet courses and/or certifications for your team here.",
      "examples": []
    },
    {
      "title": "You Have Learned HTML, Now What?",
      "summary": "HTML Summary\nThis tutorial has taught you how to use HTML to create your own web site.\nHTML is the universal markup language for the Web. HTML lets you format text, add graphics, create links, input forms, frames and tables, etc., and save it all in a text file that any browser can read and display.\nFor more information on HTML, please take a look at our HTML examples and our HTML reference.\nYou can also test your HTML skills with HTML Exercises and HTML Quizzes.\nNow You Know HTML, What's Next?\nLearn CSS\nCSS lets you style your HTML pages.\nCSS gives you total control of the layout, without messing up the document content.\nTo learn more about CSS, please visit our CSS tutorial.\nLearn JavaScript\nJavaScript makes your website more dynamic. A dynamic website can react to events and allow user interaction.\nJavaScript is the most popular scripting language on the internet and it works with all major browsers.\nIf you want to learn more about JavaScript, please visit our JavaScript tutorial.\nPublishing Your Website\nTo make your website available to the world, you must publish it.\nFor this, you have two options:\nUse an Internet Service Provider\nHost your own website\nUsing an Internet Service Provider\nAn Internet service provider (ISP) is a company that provides services for accessing and using the Internet.\nInternet services typically provided by ISPs include Internet access, Internet transit, domain name registration, web hosting, Usenet service, and colocation.\nUsing an Internet Service Provider (ISP) is the most common option.\nAdvantages:\nConnection Speed - ISPs have very fast connections to the internet.\nPowerful Hardware - ISPs have powerful web servers that can be shared by several clients. You can also expect an effective load balancing and necessary backup servers\nSecurity and Stability - ISPs are specialists on web hosting. Expect more than 99% up time, the latest software patches, and the best virus protection\nThings to Consider:\n24-hour support - The ISP should offer 24-hours support. Toll-free phone could also be vital\nDaily Backup - The ISP must run a daily backup routine\nTraffic Volume - Check the ISP's traffic volume restrictions (do not end up paying a fortune for unexpected high traffic)\nBandwidth or Content Restrictions - Check the ISP's bandwidth and content restrictions (Is it possible to publish pictures, video, or sound?)\nE-mail Capabilities - Make sure the ISP supports the e-mail capabilities you need\nDatabase Access - Make sure the ISP supports the database access you need\nHosting Your Own Website\nHosting your own website, on your own server, is also an option.\nThings to Consider:\nHardware Expenses - To run a \"real\" web site, you must buy powerful server hardware (a low cost PC will not do the job). You will also need a permanent (24/7) high-speed connection\nSoftware Expenses - Server-licenses are often higher than client-licenses. Server-licenses also might have limits on number of users\nLabor Expenses - Don't expect low labor expenses. You have to install your own hardware and software. You also have to deal with bugs and viruses, and keep your server constantly running\nKickstart your career\nGet certified by completing the HTML course",
      "examples": []
    },
    {
      "title": "HTML Accessibility",
      "summary": "HTML Accessibility\nAlways write HTML code with accessibility in mind!\nProvide the user a good way to navigate and interact with your site. Make your HTML code as semantic as possible.\nSemantic HTML\nSemantic HTML means using correct HTML elements for their correct purpose as much as possible. Semantic elements are elements with a meaning; if you need a button, use the <button> element (and not a <div> element).\nSemantic\nNon-semantic\nSemantic HTML gives context to screen readers, which read the contents of a page out loud.\nWith the button example in mind:\nbuttons have more suitable styling by default\na screen reader identifies it as a button\nfocusable\nclickable\nA button is also accessible for people relying on keyboard-only navigation; it can be clickable with both mouse and keys, and it can be tabbed between (using the tab key on the keyboard).\nExamples of non-semantic elements: <div> and <span> - Tells nothing about its content.\nExamples of semantic elements: <form>, <table>, and <article> - Clearly defines its content.\nHeadings Are Important\nHeadings are defined with the <h1> to <h6> tags:\nExample\nSearch engines use the headings to index the structure and content of your web pages.\nUsers skim your pages by its headings. It is important to use headings to show the document structure and the relationships between different sections.\nScreen readers also use headings as a navigational tool. The different types of heading specify the outline of the page. <h1> headings should be used for main headings, followed by <h2> headings, then the less important <h3>, and so on.\nNote: Use HTML headings for headings only. Don't use headings to make text BIG or bold.\nREMOVE ADS\nAlternative Text\nThe alt attribute provides an alternate text for an image, if the user for some reason cannot view it (because of slow connection, an error in the src attribute, or if the user uses a screen reader).\nThe value of the alt attribute should describe the image:\nExample\nIf a browser cannot find an image, it will display the value of the alt attribute:\nExample\nDeclare the Language\nYou should always include the lang attribute inside the <html> tag, to declare the language of the Web page. This is meant to assist search engines and browsers.\nThe following example specifies English as the language:\nUse Clear Language\nAlways use a clear language, that is easy to understand. Also try to avoid characters that cannot be read clearly by a screen reader. For example:\nKeep sentences as short as possible\nAvoid dashes. Instead of writing 1-3, write 1 to 3\nAvoid abbreviations. Instead of writing Feb, write February\nAvoid slang words\nCreate Good Link Text\nA link text should explain clearly what information the reader will get by clicking on that link.\nExamples of good and bad links:\nGood\nFind out more about the HTML language\nRead more about how to eat healthy\nBuy tickets to Mars here\nBad\nClick here\nRead more..\nBuy tickets to Mars here\nNote: This page is an introduction in web accessibility. Visit our Accessibility Tutorial for more details.",
      "examples": [
        "<button>Report an Error</button>",
        "<div>Report an Error</div>",
        "<h1>Heading 1</h1>\n<h2>Heading 2</h2>\n<h3>Heading 3</h3>\n<h4>Heading 4</h4>\n<h5>Heading 5</h5>\n<h6>Heading 6</h6>",
        "<img src=\"img_chania.jpg\" alt=\"A narrow city street with flowers in Chania\">",
        "<img src=\"wrongname.gif\" alt=\"A narrow city street with flowers in Chania\">",
        "<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n\n...\n\n</body>\n</html>",
        "Find out more about the HTML language\nRead more about how to eat healthy\nBuy tickets to Mars here",
        "Click here\nRead more..\nBuy tickets to Mars here",
        "<button>",
        "<div>",
        "<span>",
        "<form>",
        "<table>",
        "<article>",
        "<h1>",
        "<h6>",
        "<h2>",
        "<h3>",
        "alt",
        "src",
        "lang",
        "<html>"
      ]
    },
    {
      "title": "HTML Element Reference",
      "summary": "HTML Tags Ordered Alphabetically",
      "examples": []
    },
    {
      "title": "HTML Attribute Reference",
      "summary": "HTML Attribute Reference\nThe table below lists all HTML attributes and what elements they can be used within:",
      "examples": []
    },
    {
      "title": "HTML Global Attributes",
      "summary": "HTML Global Attributes\nThe global attributes are attributes that can be used with all HTML elements.",
      "examples": []
    },
    {
      "title": "HTML Reference - Browser Support",
      "summary": "HTML Reference With Browser Support\nThe table below lists all HTML elements and their attributes, along with browser support:\n* Not supported by default, but can be enabled in about:config (set dom.dialog_element.enabled to true).",
      "examples": []
    },
    {
      "title": "HTML Event Attributes",
      "summary": "Global Event Attributes\nHTML has the ability to let events trigger actions in a browser, like starting a JavaScript when a user clicks on an element.\nTo learn more about programming events, please visit our JavaScript tutorial.\nBelow are the global event attributes that can be added to HTML elements to define event actions.\nWindow Event Attributes\nEvents triggered for the window object (applies to the <body> tag):\nREMOVE ADS\nForm Events\nEvents triggered by actions inside a HTML form (applies to almost all HTML elements, but is most used in form elements):\nKeyboard Events\nMouse Events\nDrag Events\nClipboard Events\nMedia Events\nEvents triggered by medias like videos, images and audio (applies to all HTML elements, but is most common in media elements, like <audio>, <embed>, <img>, <object>, and <video>).\nTip: Look at our HTML Audio and Video DOM Reference for more information.\nMisc Events",
      "examples": []
    },
    {
      "title": "HTML Color Names",
      "summary": "Color Names Supported by All Browsers\nAll modern browsers support the following 140 color names (click on a color name, or a hex value, to view the color as the background-color along with different text colors):\nFor a full overview of HTML colors, visit our colors tutorial.",
      "examples": []
    },
    {
      "title": "HTML Canvas Reference",
      "summary": "The <canvas> element defines a bitmapped area in an HTML page.\nThe Canvas API allows JavaScript to draw graphics on the canvas.\nThe Canvas API can draw shapes, lines, curves, boxes, text, and images, with colors, rotations, transparencies, and other pixel manipulations.\nYou can add a canvas element anywhere in an HTML page with the <canvas> tag:\nExample\nYou can access a <canvas> element with the HTML DOM method getElementById().\nTo draw in the canvas you need to create a 2D context object:\nNote\nThe HTML <canvas> element itself has no drawing abilities.\nYou must use JavaScript to draw any graphics.\nThe getContext() method returns an object with tools (methods) for drawing.\nDrawing on the Canvas\nAfter you have created a 2D context, you can draw on the canvas.\nThe fillRect() method draws a black rectangle with a top-left corner at position 20,20. The rectangle is 150 pixel wide and 100 pixels high.\nExample\nUsing Colors\nThe fillStyle property sets the fill color of the drawing object:\nExample\nYou can also create a new <canvas> element with the document.createElement() method, and add the element to an existing HTML page:\nExample\nPaths\nThe common way to draw on the canvas is to:\nBegin a Path - beginPath()\nMove to a Point - moveTo()\nDraw in the Path - lineTo()\nDraw the Path - stroke()\nExample\nComplete Canvas API Reference\nThis reference covers all Properties and Methods of the getContext(\"2d\") Object, used to draw text, lines, boxes, circles, pictures, and more on the canvas.\nDrawing Methods\nThere are only 3 methods to draw directly on the canvas:\nPath Methods\nREMOVE ADS\nText\nColors, Styles, and Shadows\nTransformations\nImage Drawing\nThe ImageData Object / Pixel Manipulation\nCompositing\nOther Methods\nStandard Properties and Events\nThe canvas object also supports the standard properties and events.\nRelated Pages\nCanvas tutorial: Canvas Tutorial\nHTML tutorial: HTML5 Canvas\nHTML reference: HTML <canvas> tag\nBrowser Support\nThe <canvas> element is an HTML5 standard (2014).\nCanvas API is supported in all modern browsers:",
      "examples": [
        "<canvas id=\"myCanvas\" width=\"300\" height=\"150\"></canvas>",
        "const myCanvas = document.getElementById(\"myCanvas\");\nconst ctx = myCanvas.getContext(\"2d\");",
        "const myCanvas = document.getElementById(\"myCanvas\");\nconst ctx = myCanvas.getContext(\"2d\");\n\nctx.fillRect(20, 20, 150, 100);",
        "const myCanvas = document.getElementById(\"myCanvas\");\nconst ctx = myCanvas.getContext(\"2d\");\n\nctx.fillStyle = \"red\";\nctx.fillRect(20, 20, 150, 100);",
        "const myCanvas = document.createElement(\"canvas\");\ndocument.body.appendChild(myCanvas);\nconst ctx = myCanvas.getContext(\"2d\");\n\nctx.fillStyle = \"red\";\nctx.fillRect(20, 20, 150, 100);",
        "const canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.beginPath();\nctx.moveTo(20, 20);\nctx.lineTo(20, 100);\nctx.lineTo(70, 100);\nctx.stroke();",
        "<canvas>",
        "getElementById()",
        "getContext()",
        "document.createElement()",
        "Canvas API"
      ]
    },
    {
      "title": "HTML Audio/Video DOM Reference",
      "summary": "HTML Audio and Video DOM Reference\nThe HTML5 DOM has methods, properties, and events for the <audio> and <video> elements.\nHTML Audio/Video Methods\nHTML Audio/Video Properties\nREMOVE ADS\nHTML Audio/Video Events",
      "examples": [
        "<audio>",
        "<video>"
      ]
    },
    {
      "title": "HTML <!DOCTYPE>",
      "summary": "The HTML Document Type\nAll HTML documents must start with a <!DOCTYPE> declaration.\nThe declaration is not an HTML tag. It is an \"information\" to the browser about what document type to expect.\nIn HTML5, the <!DOCTYPE> declaration is simple:\nIn older documents (HTML 4 or XHTML), the declaration is more complicated because the declaration must refer to a DTD (Document Type Definition).\nYou can read more about document types in the <!DOCTYPE> reference.\nValid HTML Elements in Different DOCTYPES",
      "examples": [
        "<!DOCTYPE html>",
        "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">",
        "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">",
        "<!DOCTYPE>"
      ]
    },
    {
      "title": "HTML Character Sets",
      "summary": "Common HTML Character Sets\nThe default character set in HTML5 is UTF-8.\nFor a closer look, visit our Complete HTML Character Set Reference.",
      "examples": []
    },
    {
      "title": "HTML URL Encoding Reference",
      "summary": "URL - Uniform Resource Locator\nWeb browsers request pages from web servers by using a URL.\nThe URL is the address of a web page, like: https://www.w3schools.com.\nURL Encoding (Percent Encoding)\nURL encoding converts characters into a format that can be transmitted over the Internet.\nURLs can only be sent over the Internet using the ASCII character-set.\nSince URLs often contain characters outside the ASCII set, the URL has to be converted into a valid ASCII format.\nURL encoding replaces unsafe ASCII characters with a \"%\" followed by two hexadecimal digits.\nURLs cannot contain spaces. URL encoding normally replaces a space with a plus (+) sign or with %20.\nTry It Yourself\nIf you click the \"Submit\" button below, the browser will URL encode the input before it is sent to the server. A page at the server will display the received input.\nTry some other input and click Submit again.\nURL Encoding Functions\nIn JavaScript, PHP, and ASP there are functions that can be used to URL encode a string.\nPHP has the rawurlencode() function, and ASP has the Server.URLEncode() function.\nIn JavaScript you can use the encodeURIComponent() function.\nClick the \"URL Encode\" button to see how the JavaScript function encodes the text.\nNote: The JavaScript function encodes space as %20.\nREMOVE ADS\nASCII Encoding Reference\nYour browser will encode input, according to the character-set used in your page.\nThe default character-set in HTML5 is UTF-8.\nURL Encoding Reference\nThe ASCII control characters %00-%1F were originally designed to control hardware devices.\nControl characters have nothing to do inside a URL.",
      "examples": []
    },
    {
      "title": "HTML Language Code Reference",
      "summary": "ISO Language Codes\nYou should always include the lang attribute inside the <html> tag, to declare the language of the Web page. This is meant to assist search engines and browsers:\nIn XHTML, the language is declared inside the <html> tag as follows:\nISO 639-1 Language Codes\nISO 639-1 defines abbreviations for languages:\nSee also: Reference for Country Codes.",
      "examples": [
        "<html lang=\"en\">\n...\n</html>",
        "<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\">\n...\n</html>",
        "lang",
        "<html>"
      ]
    },
    {
      "title": "HTTP Status Messages",
      "summary": "HTML Error Messages\nWhen a browser requests a service from a web server, an error might occur, and the server might return an error code like \"404 Not Found\".\nIt is common to name these errors HTML error messages.\nBut these messages are something called HTTP status messages. In fact, the server always returns a message for every request. The most common message is 200 OK.\nBelow is a list of HTTP status messages that might be returned:\n1xx: Information\n2xx: Successful\n3xx: Redirection\nREMOVE ADS\n4xx: Client Error\n5xx: Server Error",
      "examples": []
    },
    {
      "title": "HTTP Request Methods",
      "summary": "What is HTTP?\nThe Hypertext Transfer Protocol (HTTP) is designed to enable communications between clients and servers.\nHTTP works as a request-response protocol between a client and server.\nExample: A client (browser) sends an HTTP request to the server; then the server returns a response to the client. The response contains status information about the request and may also contain the requested content.\nHTTP Methods\nGET\nPOST\nPUT\nHEAD\nDELETE\nPATCH\nOPTIONS\nCONNECT\nTRACE\nThe two most common HTTP methods are: GET and POST.\nThe GET Method\nGET is used to request data from a specified resource.\nNote that the query string (name/value pairs) is sent in the URL of a GET request:\nSome notes on GET requests:\nGET requests can be cached\nGET requests remain in the browser history\nGET requests can be bookmarked\nGET requests should never be used when dealing with sensitive data\nGET requests have length restrictions\nGET requests are only used to request data (not modify)\nThe POST Method\nPOST is used to send data to a server to create/update a resource.\nThe data sent to the server with POST is stored in the request body of the HTTP request:\nSome notes on POST requests:\nPOST requests are never cached\nPOST requests do not remain in the browser history\nPOST requests cannot be bookmarked\nPOST requests have no restrictions on data length\nCompare GET vs. POST\nThe following table compares the two HTTP methods: GET and POST.\nREMOVE ADS\nThe PUT Method\nPUT is used to send data to a server to create/update a resource.\nThe difference between POST and PUT is that PUT requests are idempotent. That is, calling the same PUT request multiple times will always produce the same result. In contrast, calling a POST request repeatedly have side effects of creating the same resource multiple times.\nThe HEAD Method\nHEAD is almost identical to GET, but without the response body.\nIn other words, if GET /users returns a list of users, then HEAD /users will make the same request but will not return the list of users.\nA HEAD request is useful for checking what a GET request will return before actually making a GET request - a HEAD request can read the Content-Length header to check the size of the file, without actually downloading the file.\nThe DELETE Method\nThe DELETE method deletes the specified resource.\nThe PATCH Method\nThe PATCH method is used to apply partial modifications to a resource.\nThe OPTIONS Method\nThe OPTIONS method describes the communication options for the target resource.\nThe CONNECT Method\nThe CONNECT method is used to start a two-way communications (a tunnel) with the requested resource.\nThe TRACE Method\nThe TRACE method is used to perform a message loop-back test that tests the path for the target resource (useful for debugging purposes).",
      "examples": [
        "/test/demo_form.php?name1=value1&name2=value2",
        "POST /test/demo_form.php HTTP/1.1\nHost: w3schools.com\n\nname1=value1&name2=value2"
      ]
    },
    {
      "title": "Pixels to Ems Conversion",
      "summary": "Pixel to Em Converter\nThe tool below allows you to work out the em sizes from pixels (or vice versa).\nSet a default pixel size for body (usually 16px)\nThen, convert a pixel value to em, based on the default pixel size\nOr, convert an em value to pixels, based on the default pixel size\nSet a default pixel size:\nConvert PX to EM:\npx\nConvert EM to PX:\nem\nResult:\nBody Font Size\nIn the table below, select a body font size in pixels (px) to display a complete \"px to em and percent\" conversion table.\nTip: The default font size is usually 16px.\nWhat is the difference between PX, EM and Percent?\nPixel is a static measurement, while percent and EM are relative measurements. The size of an EM or percent depends on its parent. If the text size of body is 16 pixels, then 150% or 1.5 EM will be 24 pixels (1.5 * 16). Look at CSS Units for more measurement units.",
      "examples": []
    },
    {
      "title": "Keyboard Shortcuts",
      "summary": "Keyboard Shortcuts For Windows and Mac\nKeyboard shortcuts are often used in modern operating systems and computer software programs.\nLearning and using keyboard shortcuts can save you a lot of time.\nBasic Shortcuts\nText Editing\nREMOVE ADS\nWeb Browsers\nScreenshots\nNote: Due to different keyboard setups, some shortcuts may not be compatible for all users.",
      "examples": []
    }
  ],
  "glossary": [
    "backend",
    "background images",
    "colspan   rowspan",
    "exercises",
    "free",
    "hex",
    "hsl",
    "html accessibility",
    "html apis",
    "html attributes",
    "html audio",
    "html basic",
    "html bootcamp",
    "html canvas",
    "html charsets",
    "html classes",
    "html colors",
    "html comments",
    "html computercode",
    "html css",
    "html div",
    "html doctypes",
    "html editor",
    "html editors",
    "html elements",
    "html emojis",
    "html entities",
    "html events",
    "html exercises",
    "html favicon",
    "html formatting",
    "html forms",
    "html geolocation",
    "html graphics",
    "html head",
    "html headings",
    "html home",
    "html id",
    "html iframes",
    "html images",
    "html javascript",
    "html layout",
    "html links",
    "html lists",
    "html media",
    "html paragraphs",
    "html quiz",
    "html quotations",
    "html references",
    "html responsive",
    "html semantics",
    "html sse",
    "html styles",
    "html summary",
    "html svg",
    "html syllabus",
    "html symbols",
    "html tables",
    "html video",
    "html website",
    "html youtube",
    "http messages",
    "http methods",
    "image map",
    "javascript",
    "keyboard shortcuts",
    "link bookmarks",
    "link colors",
    "note",
    "ordered lists",
    "other lists",
    "padding   spacing",
    "programs",
    "references",
    "report error",
    "rgb",
    "table borders",
    "table colgroup",
    "table headers",
    "table sizes",
    "table styling",
    "unordered lists",
    "w3schools spaces"
  ],
  "objectives": [
    "View your completed tutorials, exercises, and quizzes",
    "Keep an eye on your progress and daily streaks",
    "Set goals and create learning paths",
    "Create your own personal website"
  ]
}