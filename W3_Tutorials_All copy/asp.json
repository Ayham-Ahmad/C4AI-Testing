{
  "course_name": "Asp",
  "description": "ASP stands for Active Server Pages ASP is a development framework for building web pages. ASP supports many different development models: ASP and ASP.NET are server side technologies. Both technologies enable computer code to be executed by an Internet server. When a browser requests an ASP or ASP.NET file, the ASP engine reads the file, executes any code in the file, and returns the result to the browser. ASP (aka Classic ASP) was introduced in 1998 as Microsoft's first server side scripting language. Classic ASP pages have the file extension .asp and are normally written in VBScript. ASP.NET was released in 2002 as a successor to Classic ASP. ASP.NET pages have the extension .aspx and are normally written in C# (C sharp). ASP.NET 4.6 is the latest official version of ASP.NET. ASP.NET 5 was expected to be an important redesign of ASP.NET. However, the development of ASP.NET 5 was stopped in favor of ASP.NET Core.",
  "course_summary": [
    {
      "title": "ASP.NET Web Pages - Tutorial",
      "summary": "Easy Learning with \"Run Example\"\nOur \"Run Example\" tool displays the ASP.NET code and the HTML output simultaneously.\nClick on the \"Run Example\" button to see how it works:\nWeb Pages Example\nASP.NET Web Pages\nWeb Pages is one of many programming models for creating ASP.NET web sites and web applications.\nWeb Pages provides an easy way to combine HTML, CSS, and server code:\nEasy to learn, understand, and use\nUses an SPA application model (Single Page Application)\nSimilar to PHP and Classic ASP\nVB (Visual Basic) or C# (C sharp) scripting languages\nIn addition, Web Pages applications are easily extendable with programmable helpers for databases, videos, graphics, social networking and more.\nWeb Pages Tutorial\nIf you are new to ASP.NET, Web Pages is a perfect place to start.\nIn this Web Pages tutorial you will learn how to combine HTML, CSS, JavaScript and server code, using server code written in VB or C# .\nYou will also learn how to extend your web pages with programmable Web Helpers.\nREMOVE ADS\nWeb Pages Examples\nLearn by examples!\nBecause ASP.NET code is executed on the server, you cannot view the code in your browser. You will only see the output as plain HTML.\nAt W3Schools every example displays the hidden ASP.NET code. This makes it easier for you to understand how it works.\nWeb Pages Examples\nWeb Pages References\nAt the end of this tutorial you will find a complete set of ASP.NET references with objects, components, properties and methods.\nWeb Pages References",
      "examples": [
        "<html>\n<body>\n<h1>Hello Web Pages</h1>\n<p>The time is @DateTime.Now</p>\n</body>\n</html>"
      ]
    },
    {
      "title": "ASP.NET Web Pages - Adding Razor Code",
      "summary": "ASP.NET Web Pages use Razor markup with C# or VB code\nRazor Markup\nRazor is a simple markup syntax for embedding server code (C# or VB) into ASP.NET web pages.\nExample\nThe page above contains both ordinary HTML markup and Razor markup.\nRazor Syntax for C#\nC# code blocks are enclosed in @{ ... }\nInline expressions (variables or functions) start with @\nCode statements end with semicolon\nVariables are declared with the var keyword, or the datatype (int, string, etc.)\nStrings are enclosed with quotation marks\nC# code is case sensitive\nC# files have the extension .cshtml\nC# Example\nREMOVE ADS\nRazor Syntax for VB\nVB code blocks are enclosed in @Code ... End Code\nInline expressions (variables or functions) start with @\nVariables are declared with the Dim keyword\nStrings are enclosed with quotation marks\nVB code is not case sensitive\nVB files have the extension .vbhtml\nVB Example\nMore About C# and Visual Basic\nIf you want to learn more about Razor, and the C# and Visual Basic programming languages:\nGo to the Razor section of this tutorial.",
      "examples": [
        "<!DOCTYPE html>\n\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\" />\n<title>Web Pages Demo</title>\n</head>\n<body>\n<h1>Hello Web Pages</h1>\n<p>The time is @DateTime.Now</p>\n</body>\n</html>",
        "<!-- Single statement block -->\n@{ var myMessage = \"Hello World\"; }\n\n<!-- Inline expression or variable -->\n<p>The value of myMessage is: @myMessage</p>\n\n<!-- Multi-statement block -->\n@{\nvar greeting = \"Welcome to our site!\";\nvar weekDay = DateTime.Now.DayOfWeek;\nvar greetingMessage = greeting + \" Today is: \" + weekDay;\n}\n<p>The greeting is: @greetingMessage</p>",
        "<!-- Single statement block Â -->\n@Code dim myMessage = \"Hello World\" End Code\n\n<!-- Inline expression or variable -->\n<p>The value of myMessage is: @myMessage</p>\n\n<!-- Multi-statement block -->\n@Code\ndim greeting = \"Welcome to our site!\"\ndim weekDay = DateTime.Now.DayOfWeek\ndim greetingMessage = greeting & \" Today is: \" & weekDay\nEnd Code\n\n<p>The greeting is: @greetingMessage</p>"
      ]
    },
    {
      "title": "ASP.NET Web Pages - Page Layout",
      "summary": "With Web Pages it is easy to create a web site with a consistent layout.\nA Consistent Look\nOn the Internet you will discover many web sites with a consistent look and feel:\nEvery page have the same header\nEvery page have the same footer\nEvery page have the same style and layout\nWith Web Pages this can be done very efficiently. You can have reusable blocks of content (content blocks), like headers and footers, in separate files.\nYou can also define a consistent layout for all your pages, using a layout template (layout file).\nContent Blocks\nMany websites have content that is displayed on every page (like headers and footers).\nWith Web Pages you can use the @RenderPage() method to import content from separate files.\nContent block (from another file) can be imported anywhere in a web page, and can contain text, markup, and code, just like any regular web page.\nUsing common headers and footers as an example, this saves you a lot of work. You don't have to write the same content in every page, and when you change the header or footer files, the content is updated in all your pages.\nThis is how it looks in code:\nExample\nREMOVE ADS\nUsing a Layout Page\nIn the previous section, you saw that including the same content in many web pages is easy.\nAnother approach to creating a consistent look is to use a layout page. A layout page contains the structure, but not the content, of a web page. When a web page (content page) is linked to a layout page, it will be displayed according to the layout page (template).\nThe layout page is just like a normal web page, except from a call to the @RenderBody() method where the content page will be included.\nEach content page must start with a Layout directive.\nThis is how it looks in code:\nLayout Page:\nAny Web Page:\nD.R.Y. - Don't Repeat Yourself\nWith two ASP.NET tools, Content Blocks and Layout Pages, you can give your web applications a consistent look.\nThese tools also save you a lot of work, since you don't have to repeat the same information on all pages. Centralizing markup, style, and code makes web applications much more manageable and easier to maintain.\nPreventing Files from Being Browsed\nWith ASP.NET, files with a name that starts with an underscore cannot be browsed from the web.\nIf you want to prevent your content blocks or layout files from being viewed by your users, rename the files to:\n_header.cshtml\n_footer.cshtml\n_Layout.cshtml\nHiding Sensitive Information\nWith ASP.NET, the common way to hide sensitive information (database passwords, email passwords, etc.) is to keep the information in a separate file named \"_AppStart\".\n_AppStart.cshtml",
      "examples": [
        "<html>\n<body>\n@RenderPage(\"header.cshtml\")\n<h1>Hello Web Pages</h1>\n<p>This is a paragraph</p>\n@RenderPage(\"footer.cshtml\")\n</body>\n</html>",
        "<html>\n<body>\n<p>This is header text</p>\n@RenderBody()\n<p>&copy; 2014 W3Schools. All rights reserved.</p>\n</body>\n</html>",
        "@{Layout=\"Layout.cshtml\";}\n\n<h1>Welcome to W3Schools</h1>\n\n<p>\nLorem ipsum dolor sit amet, consectetur adipisicing elit,sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laborisnisi ut aliquip ex ea commodo consequat.\n</p>",
        "@{\nWebMail.SmtpServer = \"mailserver.example.com\";\nWebMail.EnableSsl = true;\nWebMail.UserName = \"username@example.com\";\nWebMail.Password = \"your-password\";\nWebMail.From = \"your-name-here@example.com\";\n}"
      ]
    },
    {
      "title": "ASP.NET Web Pages - Folders",
      "summary": "This chapter is about folders and folder paths.\nIn this chapter you will learn:\nAbout Logical and Physical folder structures\nAbout Virtual and Physical names\nAbout web URLs and Paths\nLogical Folder Structure\nBelow is a typical folder structure for an ASP.NET web pages web site:\nThe \"Account\" folder contains logon and security files\nThe \"App_Data\" folder contains databases and data files\nThe \"Images\" folder contains images\nThe \"Scripts\" folder contains browser scripts\nThe \"Shared\" folder contains common files (like layout and style files)\nPhysical Folder Structure\nThe physical structure for the \"Images\" folder at the website above might look like this on a computer:\nC:\\Johnny\\Documents\\MyWebSites\\Demo\\Images\nVirtual and Physical Names\nFrom the example above:\nThe virtual name of a web picture might be \"Images/pic31.jpg\".\nBut the physical name is \"C:\\Johnny\\Documents\\MyWebSites\\Demo\\Images\\pic31.jpg\"\nREMOVE ADS\nURLs and Paths\nURLs are used to access files from the web: https://www.w3schools.com/html/html5_intro.asp\nThe URL corresponds to a physical file on a server: C:\\MyWebSites\\w3schools\\html\\html5_intro.asp\nA virtual path is shorthand to represent physical paths. If you use virtual paths, you can move your pages to a different domain (or server) without having to update the paths.\nThe root on a disk drive is written like C:\\, but the root on a web site isÂ  / (forward slash).\nThe virtual path of a web folder is (almost) never the same as the physical folder.\nIn your code you will, reference both the physical path and the virtual path, depending on what you are coding.\nASP.NET has 3 tools for working with folder paths: the ~ operator, the Server.MapPath method, and the Href method.\nThe ~ Operator\nTo specify the virtual root in programming code, use the ~ operator.\nIf you use the ~ operator, instead of a path, you can move your website to a different folder or location without changing any code:\nThe Server.MapPath Method\nThe Server.MapPath method converts a virtual path (/default.cshtml) to a physical path that the server can understand (C:\\Johnny\\MyWebSited\\Demo\\default.cshtml).\nYou will use this method when you need to open data files located on the server (data files can only be accessed with a full physical path):\nYou will learn more about reading from (and writing to) data files on the server in the next chapter of this tutorial.\nThe Href Method\nThe Href method converts a path used in the code to a path that the browser can understand (the browser cannot understand the ~ operator).\nYou use the Href method to create paths to resources like image files, and CSS files.\nYou will often use this method in HTML <a>, <img>, and <link> elements:\nThe Href method is a method of the WebPage Object.",
      "examples": [
        "var myImagesFolder = \"~/images\";\nvar myStyleSheet = \"~/styles/StyleSheet.css\";",
        "var pathName = \"~/dataFile.txt\";\nvar fileName = Server.MapPath(pathName);",
        "@{var myStyleSheet = \"~/Shared/Site.css\";}\n\n<!-- This creates a link to the CSS file. -->\n<link rel=\"stylesheet\" type=\"text/css\" href=\"@Href(myStyleSheet)\" />\n\n<!-- Same as : -->\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/Shared/Site.css\" />"
      ]
    },
    {
      "title": "ASP.NET Web Pages - Global Pages",
      "summary": "This chapter is about the global pages AppStart and PageStart.\nBefore Web Startup: _AppStart\nMost server side code are written inside individual web pages. For example, if a web page contains an input form, the web page typically contains server code for reading the data.\nHowever, by creating a page named _AppStart in the root of your site, you can have startup code executed before the site starts. If this page exists, ASP.NET runs it the first time any page in the site is requested.\nTypical use for _AppStart is startup code and initialization of global values like counters and global names.\nNote 1: _AppStart should have the same file extension as your web pages, like: _AppStart.cshtml.\nNote 2: _AppStart has an underscore prefix. Because of this, the files cannot be browsed directly.\nBefore Every Page: _PageStart\nJust like _AppStart runs before your site starts, you can write code that runs before any page in each folder.\nFor each folder in your web, you can add a file named _PageStart.\nTypical use for _PageStart is setting the layout page for all pages in a folder, or checking that a user is logged in before running a page.\nHow Does it Work?\nThe following diagram shows how it works:\nWhen a request comes in, ASP.NET checks whether _AppStart exists. If so, and this is the first request to the site, _AppStart runs.\nThen ASP.NET checks whether _PageStart exists. If so, _PageStart runs, before the requested page.\nIf you include a call to RunPage() inside _PageStart you specify where you want the requested page to run. If not, the _PageStart runs before the requested page.",
      "examples": []
    },
    {
      "title": "ASP.NET Web Pages - HTML Forms",
      "summary": "A form is a section of an HTML document where you put input controls (text boxes, check boxes, radio buttons, and pull-down lists).\nCreating an HTML Input Page\nRazor Example\nREMOVE ADS\nRazor Example - Displaying Images\nSuppose you have 3 images in your image folder, and you want to display images dynamically by the users choice.\nThis is easily done by a little Razor code.\nIf you have an image called \"Photo1.jpg\" in your images folder on your web site, you can display the image using an HTML <img> element like this:\nThe example below shows how to display a selected picture which the user selects from a drop-down list:\nRazor Example\nExample explained\nThe server creates a variable called imagePath.\nThe HTML page has a drop-down list (a <select> element) named Choice. It lets the user select a friendly name (like Photo 1), and passes a file name (like Photo1.jpg) when the page is submitted to the web server.\nThe Razor code reads the value of Choice by Request[\"Choice\"]. If it has a value the code constructs a path to the image images/Photo1.jpg, and stores it in the variable imagePath.\nIn the HTML page there is an <img> element to display the image. The src attribute is set to the value of the imagePath variable when the page displays.\nThe <img> element is in an if block to prevent trying to display an image with no name (like the first time the page is displayed).",
      "examples": [
        "<html>\n<body>\n@{\nif (IsPost) {\nstring companyname = Request[\"CompanyName\"];\nstring contactname = Request[\"ContactName\"];\n<p>You entered: <br />\nCompany Name: @companyname <br />\nContact Name: @contactname </p>\n}\nelse\n{\n<form method=\"post\" action=\"\">\nCompany Name:<br />\n<input type=\"text\" name=\"CompanyName\" value=\"\" /><br />\nContact Name:<br />\n<input type=\"text\" name=\"ContactName\" value=\"\" /><br /><br />\n<input type=\"submit\" value=\"Submit\" class=\"submit\" />\n</form>\n}\n}\n</body>\n</html>",
        "<img src=\"images/Photo1.jpg\" alt=\"Sample\" />",
        "@{\nvar imagePath=\"\";\nif (Request[\"Choice\"] != null)\n{imagePath=\"images/\" + Request[\"Choice\"];}\n}\n<!DOCTYPE html>\n<html>\n<body>\n<h1>Display Images</h1>\n<form method=\"post\" action=\"\">\nI want to see:\n<select name=\"Choice\">\n<option value=\"Photo1.jpg\">Photo 1</option>\n<option value=\"Photo2.jpg\">Photo 2</option>\n<option value=\"Photo3.jpg\">Photo 3</option>\n</select>\n<input type=\"submit\" value=\"Submit\" />\n@if (imagePath != \"\")\n{\n<p>\n<img src=\"@imagePath\" alt=\"Sample\" />\n</p>\n}\n</form>\n</body>\n</html>"
      ]
    },
    {
      "title": "ASP.NET Web Pages - Objects",
      "summary": "Web Pages is much often about Objects.\nThe Page Object\nYou have already seen some Page Object methods in use:\nIn the previous chapter you saw two Page Object properties being used (IsPost, and Request):\nSome Page Object Methods\nREMOVE ADS\nSome Page Object Properties\nThe Page Property (of the Page Object)\nThe Page property of the Page Object, provides property-like access to data shared between pages and layout pages.\nYou can use (add) your own properties to the Page property:\nPage.Title\nPage.Version\nPage.anythingyoulike\nThe pages property is very helpful. For instance, it makes it possible to set the page title in content files, and use it in the layout file:\nHome.cshtml\nLayout.cshtml",
      "examples": [
        "@RenderPage(\"header.cshtml\")\n\n@RenderBody()",
        "If (IsPost) {\n\nif (Request[\"Choice\"] != null) {",
        "@{\nLayout=\"~/Shared/Layout.cshtml\";\nPage.Title=\"Home Page\"\n}\n\n<h1>Welcome to W3Schools</h1>\n\n<h2>Web Site Main Ingredients</h2>\n\n<p>A Home Page (Default.cshtml)</p>\n<p>A Layout File (Layout.cshtml)</p>\n<p>A Style Sheet (Site.css)</p>",
        "<!DOCTYPE html>\n<html>\n<head>\n<title>@Page.Title</title>\n</head>\n<body>\n@RenderBody()\n</body>\n</html>"
      ]
    },
    {
      "title": "ASP.NET Web Pages - Files",
      "summary": "This chapter is about working with text files.\nWorking with Text Files\nSometimes you will want to access data stored in text files.\nText files used to store data is often called flat files.\nCommon flat file formats are .txt, .xml, and .csv (comma-delimited values).\nIn this chapter you will learn:\nHow to read and display data from a text file\nAdd a Text File Manually\nIn the example to follow, you will need a text file to work with.\nOn your web site, if you don't have an App_Data folder, create one.\nIn the App_Data folder, create a new file named Persons.txt.\nAdd the following content to the file:\nPersons.txt\nREMOVE ADS\nDisplaying Data from a Text File\nThe example below shows how to display data from a text file:\nExample\nExample explained\nServer.MapPath finds the exact text file path.\nFile.ReadAllLines opens the text file and reads all lines from the file into an array.\nFor each dataItem in each dataline of the array the data is displayed.\nDisplaying Data from an Excel File\nWith Microsoft Excel, you can save a spreadsheet as a comma separated text file (.csv file). When you do so, each row in the spreadsheet is saved as a text line, and each data column is separated by a comma.\nYou can use the example above to read an Excel .csv file (just change the file name to the name of the Excel file).",
      "examples": [
        "George,Lucas\nSteven,Spielberg\nAlfred,Hitchcock",
        "@{\nvar dataFile = Server.MapPath(\"~/App_Data/Persons.txt\");\nArray userData = File.ReadAllLines(dataFile);\n}\n\n<!DOCTYPE html>\n<html>\n<body>\n\n<h1>Reading Data from a File</h1>\n@foreach (string dataLine in userData)\n{\nforeach (string dataItem in dataLine.Split(','))\n{@dataItem <text>&nbsp;</text>}\n<br />\n}\n</body>\n</html>"
      ]
    },
    {
      "title": "ASP.NET Web Pages - Databases",
      "summary": "This chapter is about working with databases.\nWhat We Will Do\nIn this chapter we will:\nCreate a web page to list data from a database\nDisplaying Data from Database\nWith Web Pages, you can easily display data from a database.\nYou can connect to an existing database, or create a new database from scratch.\nIn this example we will connect to an existing SQL Server Compact database.\nAdding a Customers Page\nIn the \"DemoWebPages\" folder, create a new CSHTML file named \"Products.cshtml\".\nReplace the code in the file with the code from the example below:\nProducts.cshtml\nExample Explained\nThe Database.Open(name) method will connect to a database in two steps:\nFirst, it searches the application's App_Data folder for a database that matches the name parameter without the file-name extension.\nIf no file is found, it looks for a \"connection string\" in the application's Web.config file.\n(A connection string contains information about how to connect to a database. It can include a file path, or the name of an SQL database, with full user name and password)\nThis two-step search makes it possible to test the application with a local database, and run the application on a web host using a connection string.\nREMOVE ADS\nASP.NET Database Object Reference",
      "examples": [
        "@{\nvar db = Database.Open(\"SmallBakery\");\nvar selectQueryString = \"SELECT * FROM Product ORDER BY Name\";\n}\n<html>\n<body>\n<h1>Small Bakery Products</h1>\n<table>\n<tr>\n<th>Id</th>\n<th>Product</th>\n<th>Description</th>\n<th>Price</th>\n</tr>\n@foreach(var row in db.Query(selectQueryString))\n{\n<tr>\n<td>@row.Id</td>\n<td>@row.Name</td>\n<td>@row.Description</td>\n<td align=\"right\">@row.Price</td>\n</tr>\n}\n</table>\n</body>\n</html>"
      ]
    },
    {
      "title": "ASP.NET Web Pages - Helpers",
      "summary": "Web Helpers greatly simplifies web development and common programming tasks.\nASP.NET Helpers\nASP.NET helpers are components that can be accessed by single lines of Razor code.\nYou can build your own helpers using Razor syntax stored as .cshtml files, or use built-in ASP.NET helpers.\nYou will learn how to use Razor helpers in the next chapters of this tutorial.\nBelow is a short description of some useful Razor helpers:\nThe WebGrid Helper\nThe WebGrid helper simplifies the way to display data:\nAutomatically sets up an HTML table to display data\nSupports different options for formatting\nSupports paging (First, next, previous, last) through data\nSupports sorting by clicking on column headings\nThe Chart Helper\nThe \"Chart Helper\" can display chart images of different types with many formatting options and labels.\nThe Chart helper can display data from arrays , from databases, or from files.\nThe WebMail Helper\nThe WebMail helper provides functions for sending email messages using SMTP (Simple Mail Transfer Protocol).\nThe WebImage Helper\nThe WebImage helper provides functionality to manage images in a web page.\nKeywords: flip, rotate, resize, watermark.\nREMOVE ADS\nThird Party Helpers\nWith Razor you can take advantage of built-in or third party helpers to simplify the use of email, databases, multimedia, and social networks as well as many other issues like navigation and web security.\nAnalytics (Google)\nBing\nCrypto\nFacebook\nFileUpload\nGamerCard\nGravatar Object Reference\nJson\nLinkShare\nModelState\nObjectInfo\nRecaptcha\nServerInfo\nTwitter\nVideo\nWebCache\nWebImage",
      "examples": []
    },
    {
      "title": "ASP.NET Web Pages - The WebGrid Helper",
      "summary": "WebGrid - One of many useful ASP.NET Web Helpers.\nDoing the HTML Yourself\nIn a previous chapter, you displayed database data by using razor code, and doing the HTML markup yourself:\nDatabase Example\nREMOVE ADS\nUsing The WebGrid Helper\nUsing the WebGrid helper is an easier way to display data.\nThe WebGrid helper:\nAutomatically sets up an HTML table to display data\nSupports different options for formatting\nSupports paging through data\nSupports Sorting by clicking on column headings\nWebGrid Example\nWebGrid Object Reference",
      "examples": [
        "@{\nvar db = Database.Open(\"SmallBakery\");\nvar selectQueryString = \"SELECT * FROM Product ORDER BY Name\";\n}\n<html>\n<body>\n<h1>Small Bakery Products</h1>\n<table>\n<tr>\n<th>Id</th>\n<th>Product</th>\n<th>Description</th>\n<th>Price</th>\n</tr>\n@foreach(var row in db.Query(selectQueryString))\n{\n<tr>\n<td>@row.Id</td>\n<td>@row.Name</td>\n<td>@row.Description</td>\n<td style=\"text-align:right\">@row.Price</td>\n</tr>\n}\n</table>\n</body>\n</html>",
        "@{\nvar db = Database.Open(\"SmallBakery\") ;\nvar selectQueryString = \"SELECT * FROM Product ORDER BY Name\";\nvar data = db.Query(selectQueryString);\nvar grid = new WebGrid(data);\n}\n<html>\n<head>\n<title>Displaying Data Using the WebGrid Helper</title>\n</head>\n<body>\n<h1>Small Bakery Products</h1>\n<div id=\"grid\">\n@grid.GetHtml()\n</div>\n</body>\n</html>"
      ]
    },
    {
      "title": "ASP.NET Web Pages - The Chart Helper",
      "summary": "The Chart Helper - One of many useful ASP.NET Web Helpers.\nThe Chart Helper\nIn the previous chapters, you learned how to use an ASP.NET \"Helper\".\nYou learned how to display data in a grid using the \"WebGrid Helper\".\nThis chapter explains how to display data in graphical form, using the \"Chart Helper\".\nThe \"Chart Helper\" can create chart images of different types with many formatting options and labels. It can create standard charts like area charts, bar charts, column charts, line charts, and pie charts, along with more specialized charts like stock charts.\nThe data you display in a chart can be from an array, from a database, or from data in a file.\nChart From an Array\nThe example below shows the code needed to display a chart from an array of values:\nExample\n- new Chart creates a new chart object and sets its width and height\n- the AddTitle method specifies the chart title\n- the AddSeries method adds data to the chart\n- the chartType parameter defines the type of chart\n- the xValue parameter defines x-axis names\n- the yValues parameter defines the y-axis values\n- the Write() method displays the chart\nREMOVE ADS\nChart From Database Data\nYou can run a database query and then use data from the results to create a chart:\nExample\n- var db = Database.Open opens the database (and assigns the database object to the variable db)\n- var dbdata = db.Query runs a database query and stores the result in dbdata\n- new Chart creates a chart new object and sets its width and height\n- the AddTitle method specifies the chart title\n- the DataBindTable method binds the data source to the chart\n- the Write() method displays the chart\nAn alternative to using the DataBindTable method is to use AddSeries (See previous example). DataBindTable is easier to use, but AddSeries is more flexible because you can specify the chart and data more explicitly:\nExample\nChart From XML Data\nThe third option for charting is to use an XML file as the data for the chart:\nExample\nChart Object Reference",
      "examples": [
        "@{\nvar myChart = new Chart(width: 600, height: 400)\n.AddTitle(\"Employees\")\n.AddSeries(chartType: \"column\",\nxValue: new[] { Â \"Peter\", \"Andrew\", \"Julie\", \"Mary\", \"Dave\" },\nyValues: new[] { \"2\", \"6\", \"4\", \"5\", \"3\" })\n.Write();\n}",
        "@{\nvar db = Database.Open(\"SmallBakery\");\nvar dbdata = db.Query(\"SELECT Name, Price FROM Product\");\nvar myChart = new Chart(width: 600, height: 400)\n.AddTitle(\"Product Sales\")\n.DataBindTable(dataSource: dbdata, xField: \"Name\")\n.Write();\n}",
        "@{\nvar db = Database.Open(\"SmallBakery\");\nvar dbdata = db.Query(\"SELECT Name, Price FROM Product\");\nvar myChart = new Chart(width: 600, height: 400)\n.AddTitle(\"Product Sales\")\n.AddSeries(chartType:\"Pie\",\nxValue: dbdata, xField: \"Name\",\nyValues: dbdata, yFields: \"Price\")\n.Write();\n}",
        "@using System.Data;\n\n@{\nvar dataSet = new DataSet();\ndataSet.ReadXmlSchema(Server.MapPath(\"data.xsd\"));\ndataSet.ReadXml(Server.MapPath(\"data.xml\"));\nvar dataView = new DataView(dataSet.Tables[0]);\nvar myChart = new Chart(width: 600, height: 400)\n.AddTitle(\"Sales Per Employee\")\n.AddSeries(\"Default\", chartType: \"Pie\",\nxValue: dataView, xField: \"Name\",\nyValues: dataView, yFields: \"Sales\")\n.Write();}\n}"
      ]
    },
    {
      "title": "ASP.NET Web Pages - The WebMail Helper",
      "summary": "The WebMail Helper - One of many useful ASP.NET Web Helpers.\nWith the WebMail object you can easily send emails from a web page.\nThe WebMail Helper\nThe WebMail Helper makes it easy to send an email from a web application using SMTP (Simple Mail transfer Protocol).\nScenario: Email Support\nTo demonstrate the use of email, we will create an input page for support, let the user submit the page to another page, and send an email about the support problem.\nFirst: Edit Your AppStart Page\nIf you have built the Demo application in this tutorial, you already have a page called _AppStart.cshtml with the following content:\n_AppStart.cshtml\nTo initiate the WebMail helper, add the the following WebMail properties to your AppStart page:\n_AppStart.cshtml\nProperties explained:\nSmtpServer: The name the SMTP server that will be used to send the emails.\nSmtpPort: The port the server will use to send SMTP transactions (emails).\nEnableSsl: True, if the server should use SSL (Secure Socket Layer) encryption.\nUserName: The name of the SMTP email account used to send the email.\nPassword: The password of the SMTP email account.\nFrom: The email to appear in the from address (often the same as UserName).\nREMOVE ADS\nSecond: Create an Email Input Page\nThen create an input page, and name it Email_Input:\nEmail_Input.cshtml\nThe purpose of the input page is to collect information, then submit the data to a new page that can send the information as an email.\nThird: Create An Email Send Page\nThen create the page that will be used to send the email, and name it Email_Send:\nEmail_Send.cshtml\nWebMail Object Reference - Properties\nWebMail Object Reference - Methods\nThe Send() method has the following parameters:\nAnd the following optional parameters:\nTechnical Data\nInitializing the WebMail Helper\nTo use the WebMail helper, you need access to an SMTP server. SMTP is the \"output\" part of email. If you use a web host, you probably already know the name of the SMTP server. If you work in a corporate network, your IT department can give you the name. If you are working at home, you might be able to use your ordinary email provider.\nIn order to send an email you will need:\nThe name of the SMTP server\nThe port number (most often 25)\nAn email user name\nAn email password\nIn the root of your web, create a page (or edit the page ) named _AppStart.cshtml.\nPut the following code inside the file:\n_AppStart.cshtml\nThe code above will run each time the web site (application) starts. It feeds your WebMail Object with initial values.\nPlease substitute:\nsmtp.example.com with the name the SMTP server that will be used to send the emails.\n25 with the port number the server will use to send SMTP transactions (emails).\nfalse with true, if the server should use SSL (Secure Socket Layer) encryption.\nsupport@example.com with the name of the SMTP email account used to send emails.\npassword with the password of the SMTP email account.\njohn@example with the email to appear in the from address.\nYou don't have to initiate the WebMail object in your AppStart file, but you must set these properties before you call the WebMail.Send() method.",
      "examples": [
        "@{\nWebSecurity.InitializeDatabaseConnection(\"Users\", \"UserProfile\", \"UserId\", \"Email\", true);\n}",
        "@{\nWebSecurity.InitializeDatabaseConnection(\"Users\", \"UserProfile\", \"UserId\", \"Email\", true);\nWebMail.SmtpServer = \"smtp.example.com\";\nWebMail.SmtpPort = 25;\nWebMail.EnableSsl = false;\nWebMail.UserName = \"support@example.com\";\nWebMail.Password = \"password-goes-here\";\nWebMail.From = \"john@example.com\";\n}",
        "<!DOCTYPE html>\n<html>\n<body>\n<h1>Request for Assistance</h1>\n\n<form method=\"post\" action=\"EmailSend.cshtml\">\n<label>Username:</label>\n<input type=\"text\" name=\"customerEmail\" />\n<label>Details about the problem:</label>\n<textarea name=\"customerRequest\" cols=\"45\" rows=\"4\"></textarea>\n<p><input type=\"submit\" value=\"Submit\" /></p>\n</form>\n\n</body>\n</html>",
        "@{ // Read input\nvar customerEmail = Request[\"customerEmail\"];\nvar customerRequest = Request[\"customerRequest\"];\ntry\n{\n// Send email\nWebMail.Send(to:\"someone@example.com\", subject: \"Help request from - \" + customerEmail, body: customerRequest );\n}\ncatch (Exception ex )\n{\n<text>@ex</text>\n}\n}",
        "@{\nWebMail.SmtpServer = \"smtp.example.com\";\nWebMail.SmtpPort = 25;\nWebMail.EnableSsl = false;\nWebMail.UserName = \"support@example.com\";\nWebMail.Password = \"password\";\nWebMail.From = \"john@example.com\"\n}"
      ]
    },
    {
      "title": "ASP.NET Web Pages - WebSecurity Object",
      "summary": "Description\nThe WebSecurity Object provides security and authentication for ASP.NET Web Pages applications.\nWith the WebSecurity object you can create user accounts, login and logout users, reset or change passwords, and more.\nWebSecurity Object Reference - Properties\nWebSecurity Object Reference - Methods\nREMOVE ADS\nInitializing the WebSecurity Database\nYou must create or initialize an WebSecurity database before you can use the WebSecurity object in your code.\nIn the root of your web, create a page (or edit the page ) named _AppStart.cshtml.\nPut the following code inside the file:\n_AppStart.cshtml\nThe code above will run each time the web site (application) starts. It initializes the WebSecurity database.\n\"Users\" is the name of the WebSecurity database (Users.sdf).\n\"UserProfile\" is the name of the database table that contains the user profile information.\n\"UserId\" is the name of the column that contains the user IDs (primary key).\n\"Email\" is the name of the column that contains user names.\nThe last parameter true is a boolean value indicating that the user profile and membership tables should be created automatically if they don't exist, otherwise false.\nAlthough true indicates automatic creation of the database tables, the database itself will not be created automatically. It must exist.\nThe WebSecurity Database\nThe UserProfile table contains one record for each user, with a user ID (primary key) and the user's name (email):\nThe Membership table will contain membership information about when the user was created and if (and when) the membership was confirmed.\nMuch like this (some columns are not shown):\nSimple Membership Configuration\nYou might get errors using the WebSecurity object, if your site is not configured to use the ASP.NET Web Pages membership system SimpleMembership.\nThis can occur if a hosting provider's server is configured differently than your local server. To fix this, add the following element to the site's Web.config file:",
      "examples": [
        "@{\nWebSecurity.InitializeDatabaseConnection(\"Users\", \"UserProfile\", \"UserId\", \"Email\", true);\n}",
        "<appSettings>\n<add key=\"enableSimpleMembership\" value=\"true\" />\n</appSettings>"
      ]
    },
    {
      "title": "ASP.NET Web Pages - Publishing the Website",
      "summary": "1. Use the Latest Version of ASP.NET\nBefore you continue, make sure your hosting computer runs the latest version of ASP.NET (4.0 or 4.5).\n2. Copy the Web Folders\nCopy your website (all folders and content) from your development computer to an application folder on your remote hosting computer (server).\nIf your application contains data, don't copy the data (see point 4 below).\n3. The DLL Files\nMake sure the bin folder, on your remote hosting computer, contains the same dll files as on your development computer.\nAfter copying the bin folder, it should contain files like this:\nMicrosoft.Web.Infrastructure.dll\nNuGet.Core.dll\nSystem.Web.Helpers.dll\nSystem.Web.Razor.dll\nSystem.Web.WebPages.Administration.dll\nSystem.Web.WebPages.Deployment.dll\nSystem.Web.WebPages.dll\nSystem.Web.WebPages.Razor.dll\nWebMatrix.Data.dll\nWebMatrix.WebData\n4. Copy Your Data\nIf your application contains data or a database. For instance an SQL Server Compact database (a .sdf file in App_Data folder), consider the following:\nDo you want to publish your test data to the remote server?\nMost likely not.\nIf you have test data on your development computer, it may overwrite production data on your remote hosting computer.\nIf you have to copy an SQL database (.sdf file), perhaps you should delete everything in the database, and then copy the empty .sdf file from your development computer to the server.\nTHAT'S IT. GOOD LUCK !",
      "examples": []
    },
    {
      "title": "ASP.NET Web Pages - Examples in C# and VB",
      "summary": "Learn ASP.NET Web Pages by C# and Visual Basic examples.\nDisplay Date and Time\nReusable Header and Footer\nBasic HTML Form\nExamples Explained\nDisplay Date and Time\nReusable Header and Footer\nBasic HTML Form\nExamples Explained\nFor Loop\nFor Each Loop\nWhile Loop\nArray\n\nIf Condition\nIf Else Condition\nElse If Condition\nSwitch Condition\nExamples Explained\nFor Loop\nFor Each Loop\nWhile Loop\nArray\n\nIf Condition\nIf Else Condition\nElse If Condition\nSelect Condition\nExamples Explained\nDisplay Database Data\nDisplay Data with WebGrid\nExamples Explained\nDisplay Database Data\nDisplay Data with WebGrid\nExamples Explained\nDisplay a Bar Chart from an Array\nDisplay a Bar Chart from a Database\nDisplay a Pie Chart from a Database\nDisplay a Pie Chart from an XML File\nExamples Explained\nDisplay a Bar Chart from an Array\nDisplay a Bar Chart from a Database\nDisplay a Pie Chart from a Database\nDisplay a Pie Chart from an XML File\nExamples Explained",
      "examples": []
    },
    {
      "title": "ASP.NET Web Pages - Classes",
      "summary": "ASP.NET Classes Reference",
      "examples": []
    },
    {
      "title": "ASP.NET Razor - Markup",
      "summary": "Razor is not a programming language. It's a server side markup language.\nWhat is Razor?\nRazor is a markup syntax that lets you embed server-based code (Visual Basic and C#) into web pages.\nServer-based code can create dynamic web content on the fly, while a web page is written to the browser. When a web page is called, the server executes the server-based code inside the page before it returns the page to the browser. By running on the server, the code can perform complex tasks, like accessing databases.\nRazor is based on ASP.NET, and designed for creating web applications. It has the power of traditional ASP.NET markup, but it is easier to use, and easier to learn.\nRazor Syntax\nRazor uses a syntax very similar to PHP and Classic ASP.\nRazor:\nPHP:\nClassic ASP:\nRazor Helpers\nASP.NET helpers are components that can be accessed by single lines of Razor code.\nYou can build your own helpers using Razor syntax, or use built-in ASP.NET helpers.\nBelow is a short description of some useful Razor helpers:\nWeb Grid\nWeb Graphics\nGoogle Analytics\nFacebook Integration\nTwitter Integration\nSending Email\nValidation\nRazor Programming Languages\nRazor supports both C# (C sharp) and VB (Visual Basic).",
      "examples": [
        "<ul>\n@for (int i = 0; i < 10; i++) {\n<li>@i</li>\n}\n</ul>",
        "<ul>\n<?php\nfor ($i = 0; $i < 10; $i++) {\necho(\"<li>$i</li>\");\n}\n?>\n</ul>",
        "<ul>\n<%for i = 0 to 10%>\n<li><%=i%></li>\n<%next%>\n</ul>"
      ]
    },
    {
      "title": "ASP.NET Razor - C# and VB Code Syntax",
      "summary": "Razor supports both C# (C sharp) and VB (Visual Basic).\nMain Razor Syntax Rules for C#\nRazor code blocks are enclosed in @{ ... }\nInline expressions (variables and functions) start with @\nCode statements end with semicolon\nVariables are declared with the var keyword\nStrings are enclosed with quotation marks\nC# code is case sensitive\nC# files have the extension .cshtml\nC# Example\nMain Razor Syntax Rules for VB\nRazor code blocks are enclosed in @Code ... End Code\nInline expressions (variables and functions) start with @\nVariables are declared with the Dim keyword\nStrings are enclosed with quotation marks\nVB code is not case sensitive\nVB files have the extension .vbhtml\nExample\nREMOVE ADS\nHow Does it Work?\nRazor is a simple programming syntax for embedding server code in web pages.\nRazor syntax is based on the ASP.NET framework, the part of the Microsoft.NET Framework that's specifically designed for creating web applications.\nThe Razor syntax gives you all the power of ASP.NET, but is using a simplified syntax that's easier to learn if you're a beginner, and makes you more productive if you're an expert.\nRazor web pages can be described as HTML pages with two kinds of content: HTML content and Razor code.\nWhen the server reads the page, it runs the Razor code first, before it sends the HTML page to the browser. The code that is executed on the server can perform tasks that cannot be done in the browser, for example accessing a server database. Server code can create dynamic HTML content on the fly, before it is sent to the browser. Seen from the browser, the HTML generated by server code is no different than static HTML content.\nASP.NET web pages with Razor syntax have the special file extension cshtml (Razor using C#) or vbhtml (Razor using VB).\nWorking With Objects\nServer coding often involves objects.\n\nThe \"DateTime\" object is a typical built-in ASP.NET object, but objects can also be self-defined, a web page, a text box, a file, a database record, etc.\n\nObjects may have methods they can perform. A database record might have a \"Save\" method, an image object might have a \"Rotate\" method, an email object might have a \"Send\" method, and so on.\n\nObjects also have properties that describe their characteristics. A database record might have a FirstName and a LastName property (among others).\nThe ASP.NET DateTime object has a Now property (written as DateTime.Now), and the Now property has a Day property (written as DateTime.Now.Day). The example below shows how to access some properties of the DateTime object:\nExample\nIf and Else Conditions\nAn important feature of dynamic web pages is that you can determine what to do based on conditions.\nThe common way to do this is with the if ... else statements:\nExample\nReading User Input\nAnother important feature of dynamic web pages is that you can read user input.\nInput is read by the Request[] function, and posting (input) is tested by the IsPost condition:\nExample",
      "examples": [
        "<!-- Single statement block -->\n@{ var myMessage = \"Hello World\"; }\n\n<!-- Inline expression or variable -->\n<p>The value of myMessage is: @myMessage</p>\n\n<!-- Multi-statement block -->\n@{\nvar greeting = \"Welcome to our site!\";\nvar weekDay = DateTime.Now.DayOfWeek;\nvar greetingMessage = greeting + \" Here in Huston it is: \" + weekDay;\n}\n<p>The greeting is: @greetingMessage</p>",
        "<!-- Single statement block Â -->\n@Code dim myMessage = \"Hello World\" End Code\n\n<!-- Inline expression or variable -->\n<p>The value of myMessage is: @myMessage</p>\n\n<!-- Multi-statement block -->\n@Code\ndim greeting = \"Welcome to our site!\"\ndim weekDay = DateTime.Now.DayOfWeek\ndim greetingMessage = greeting & \" Here in Huston it is: \" & weekDay\nEnd Code\n\n<p>The greeting is: @greetingMessage</p>",
        "<table border=\"1\">\n<tr>\n<th width=\"100px\">Name</th>\n<td width=\"100px\">Value</td>\n</tr>\n<tr>\n<td>Day</td><td>@DateTime.Now.Day</td>\n</tr>\n<tr>\n<td>Hour</td><td>@DateTime.Now.Hour</td>\n</tr>\n<tr>\n<td>Minute</td><td>@DateTime.Now.Minute</td>\n</tr>\n<tr>\n<td>Second</td><td>@DateTime.Now.Second</td>\n</tr>\n</td>\n</table>",
        "@{\nvar txt = \"\";\nif(DateTime.Now.Hour > 12)\n{txt = \"Good Evening\";}\nelse\n{txt = \"Good Morning\";}\n}\n<html>\n<body>\n<p>The message is @txt</p>\n</body>\n</html>",
        "@{\nvar totalMessage = \"\";\nif(IsPost)\n{\nvar num1 = Request[\"text1\"];\nvar num2 = Request[\"text2\"];\nvar total = num1.AsInt() + num2.AsInt();\ntotalMessage = \"Total = \" + total;\n}\n}\n<html>\n<body style=\"background-color: beige; font-family: Verdana, Arial;\">\n<form action=\"\" method=\"post\">\n<p><label for=\"text1\">First Number:</label><br>\n<input type=\"text\" name=\"text1\" /></p>\n<p><label for=\"text2\">Second Number:</label><br>\n<input type=\"text\" name=\"text2\" /></p>\n<p><input type=\"submit\" value=\" Add \" /></p>\n</form>\n<p>@totalMessage</p>\n</body>\n</html>"
      ]
    },
    {
      "title": "ASP.NET Razor - C# Variables",
      "summary": "Variables are named entities used to store data.\nVariables\nVariables are used to store data.\nThe name of a variable must begin with an alphabetic character and cannot contain whitespace or reserved characters.\n\nA variable can be of a specific type, indicating the kind of data it stores. String variables store string values (\"Welcome to W3Schools\"), integer variables store number values (103), date variables store date values, etc.\n\nVariables are declared using the var keyword, or by using the type (if you want to declare the type), but ASP.NET can usually determine data types automatically.\nExamples\nData Types\nBelow is a list ofÂ  common data types:\nREMOVE ADS\nOperators\nAn operator tells ASP.NET what kind of command to perform in an expression.\nThe C# language supports many operators. Below is a list ofÂ common operators:\nConverting Data Types\nConverting from one data type to another is sometimes useful.\n\nThe most common example is to convert string input to another type, such as an integer or a date.\nAs a rule, user input comes as strings, even if the user entered a number. Therefore, numeric input values must be converted to numbers before they can be used in calculations.\nBelow is a list ofÂ common conversion methods:",
      "examples": [
        "// Using the var keyword:\nvar greeting = \"Welcome to W3Schools\";\nvar counter = 103;\nvar today = DateTime.Today;\n\n// Using data types:\nstring greeting = \"Welcome to W3Schools\";\nint counter = 103;\nDateTime today = DateTime.Today;"
      ]
    },
    {
      "title": "ASP.NET Razor - C# Loops and Arrays",
      "summary": "Statements can be executed repeatedly in loops.\nFor Loops\nIf you need to run the same statements repeatedly, you can program a loop.\nIf you know how many times you want to loop, you can use a for loop. This kind of loop is especially useful for counting up or counting down:\nExample\nFor Each Loops\nIf you work with a collection or an array, you often use a for each loop.\nA collection is a group of similar objects, and the for each loop lets you carry out a task on each item. The for each loop walks through a collection until it is finished.\nThe example below walks through the ASP.NET Request.ServerVariables collection.\nExample\nREMOVE ADS\nWhile Loops\nThe while loop is a general purpose loop.\nA while loop begins with the while keyword, followed by parentheses, where you specify how long the loop continues, then a block to repeat.\nWhile loops typically add to, or subtract from, a variable used for counting.\nIn the example below, the += operator adds 1 to the variable i, each time the loop runs.\nExample\nArrays\nAn array is useful when you want to store similar variables but don't want to create a separate variable for each of them:\nExample",
      "examples": [
        "<html>\n<body>\n@for(var i = 10; i < 21; i++)\n{<p>Line @i</p>}\n</body>\n</html>",
        "<html>\n<body>\n<ul>\n@foreach (var x in Request.ServerVariables)\n{<li>@x</li>}\n</ul>\n</body>\n</html>",
        "<html>\n<body>\n@{\nvar i = 0;\nwhile (i < 5)\n{\ni += 1;\n<p>Line @i</p>\n}\n}\n</body>\n</html>",
        "@{\nstring[] members = {\"Jani\", \"Hege\", \"Kai\", \"Jim\"};\nint i = Array.IndexOf(members, \"Kai\")+1;\nint len = members.Length;\nstring x = members[2-1];\n}\n<html>\n<body>\n<h3>Members</h3>\n@foreach (var person in members)\n{\n<p>@person</p>\n}\n<p>The number of names in Members are @len</p>\n<p>The person at position 2 is @x</p>\n<p>Kai is now in position @i</p>\n</body>\n</html>"
      ]
    },
    {
      "title": "ASP.NET Razor - C# Logic Conditions",
      "summary": "Programming Logic: Execute code based on conditions.\nThe If Condition\nC# lets you execute code based on conditions.\nTo test a condition you use an if statement. The if statement returns true or false, based on your test:\nThe if statement starts a code block\nThe condition is written inside parenthesis\nThe code inside the braces is executed if the test is true\nExample\nThe Else Condition\nAn if statement can include an else condition.\nThe else condition defines the code to be executed if the condition is false.\nExample\nNote: In the example above, if the first condition is true, it will be executed. The else condition covers \"everything else\".\nREMOVE ADS\nThe Else If Condition\nMultiple conditions can be tested with an else if condition:\nExample\nIn the example above, if the first condition is true, it will be executed.\nIf not, then if the next condition is true, this condition will be executed.\nYou can have any number of else if conditions.\nIf none of the if and else if conditions are true, the last else block (without a condition) covers \"everything else\".\nSwitch Conditions\nA switch block can be used to test a number of individual conditions:\nExample\nThe test value (day) is in parentheses. Each individual test condition has a case value that ends with a colon, and any number of code lines ending with a break statement. If the test value matches the case value, the code lines are executed.\nA switch block can have a default case (default:) for \"everything else\" that runs if none of the cases are true.",
      "examples": [
        "@{var price=50;}\n<html>\n<body>\n@if (price>30)\n{\n<p>The price is too high.</p>\n}\n</body>\n</html>",
        "@{var price=20;}\n<html>\n<body>\n@if (price>30)\n{\n<p>The price is too high.</p>\n}\nelse\n{\n<p>The price is OK.</p>\n}\n</body>\n</html>",
        "@{var price=25;}\n<html>\n<body>\n@if (price>=30)\n{\n<p>The price is high.</p>\n}\nelse if (price>20 && price<30)\n{\n<p>The price is OK.</p>\n}\nelse\n{\n<p>The price is low.</p>\n}\n</body>\n</html>",
        "@{\nvar weekday=DateTime.Now.DayOfWeek;\nvar day=weekday.ToString();\nvar message=\"\";\n}\n<html>\n<body>\n@switch(day)\n{\ncase \"Monday\":\nmessage=\"This is the first weekday.\";\nbreak;\ncase \"Thursday\":\nmessage=\"Only one day before weekend.\";\nbreak;\ncase \"Friday\":\nmessage=\"Tomorrow is weekend!\";\nbreak;\ndefault:\nmessage=\"Today is \" + day;\nbreak;\n}\n<p>@message</p>\n</body>\n</html>"
      ]
    },
    {
      "title": "ASP.NET Razor - VB Variables",
      "summary": "Variables are named entities used to store data.\nVariables\nVariables are used to store data.\nThe name of a variable must begin with an alphabetic character and cannot contain whitespace or reserved characters.\n\nA variable can be of a specific type, indicating the kind of data it stores. String variables store string values (\"Welcome to W3Schools\"), integer variables store number values (103), date variables store date values, etc.\n\nVariables are declared using the Dim keyword, or by using the type (if you want to declare the type), but ASP.NET can usually determine data types automatically.\nExamples\nData Types\nBelow is a list ofÂ  common data types:\nREMOVE ADS\nOperators\nAn operator tells ASP.NET what kind of command to perform in an expression.\nThe VB language supports many operators. Below is a list of common operators:\nConverting Data Types\nConverting from one data type to another is sometimes useful.\n\nThe most common example is to convert string input to another type, such as an integer or a date.\nAs a rule, user input comes as strings, even if the user entered a number. Therefore, numeric input values must be converted to numbers before they can be used in calculations.\nBelow is a list of common conversion methods:",
      "examples": [
        "// Using the Dim keyword:\nDim greeting = \"Welcome to W3Schools\"\nDim counter = 103\nDim today = DateTime.Today\n\n// Using data types:\nDim greeting As String = \"Welcome to W3Schools\"\nDim counter As Integer = 103\nDim today As DateTime = DateTime.Today"
      ]
    },
    {
      "title": "ASP.NET Razor - VB Loops and Arrays",
      "summary": "Statements can be executed repeatedly in loops.\nFor Loops\nIf you need to run the same statements repeatedly, you can program a loop.\nIf you know how many times you want to loop, you can use a for loop. This kind of loop is especially useful for counting up or counting down:\nExample\nFor Each Loops\nIf you work with a collection or an array, you often use a for each loop.\nA collection is a group of similar objects, and the for each loop lets you carry out a task on each item. The for each loop walks through a collection until it is finished.\nThe example below walks through the ASP.NET Request.ServerVariables collection.\nExample\nREMOVE ADS\nWhile Loops\nThe while loop is a general purpose loop.\nA while loop begins with the while keyword, followed by parentheses, where you specify how long the loop continues, then a block to repeat.\nWhile loops typically add to, or subtract from, a variable used for counting.\nIn the example below, the += operator adds 1 to the variable i, each time the loop runs.\nExample\nArrays\nAn array is useful when you want to store similar variables but don't want to create a separate variable for each of them:\nExample",
      "examples": [
        "<html>\n<body>\n@For i=10 To 21\n@<p>Line #@i</p>\nNext i\n</body>\n</html>",
        "<html>\n<body>\n<ul>\n@For Each x In Request.ServerVariables\n@<li>@x</li>\nNext x\n</ul>\n</body>\n</html>",
        "<html>\n<body>\n@Code\nDim i=0\nDo While i<5\ni += 1\n@<p>Line #@i</p>\nLoop\nEnd Code\n</body>\n</html>",
        "@Code\nDim members As String()={\"Jani\",\"Hege\",\"Kai\",\"Jim\"}\ni=Array.IndexOf(members,\"Kai\")+1\nlen=members.Length\nx=members(2-1)\nend Code\n<html>\n<body>\n<h3>Members</h3>\n@For Each person In members\n@<p>@person</p>\nNext person\n<p>The number of names in Members are @len</p>\n<p>The person at position 2 is @x</p>\n<p>Kai is now in position @i</p>\n</body>\n</html>"
      ]
    },
    {
      "title": "ASP.NET Razor - VB Logic Conditions",
      "summary": "Programming Logic: Execute code based on conditions.\nThe If Condition\nVB lets you execute code based on conditions.\nTo test a condition you use the if statement. The if statement returns true or false, based on your test:\nThe if statement starts a code block\nThe condition is written between if and then\nThe code between if ... then and end if is executed if the test is true\nExample\nThe Else Condition\nAn if statement can include an else condition.\nThe else condition defines the code to be executed if the condition is false.\nExample\nNote: In the example above, if the first condition is true, it will be executed. The else condition covers \"everything else\".\nREMOVE ADS\nThe ElseIf Condition\nMultiple conditions can be tested with an else if condition:\nExample\nIn the example above, if the first condition is true, it will be executed.\nIf not, then if the next condition is true, this condition will be executed.\nYou can have any number of else if conditions.\nIf none of the if or else if conditions are true, the last else block (without a condition) covers \"everything else\".\nSelect Conditions\nA select block can be used to test a number of individual conditions:\nExample\n\"Select Case\" is followed by the test value (day). Each individual test condition has a case value, and any number of code lines. If the test value matches the case value, the code lines are executed.\nA select block can have a default case (Case Else) for \"everything else\" that runs if none of the other cases are true.",
      "examples": [
        "@Code\nDim price=50\nEnd Code\n<html>\n<body>\n@If price>30 Then\n@<p>The price is too high.</p>\nEnd If\n</body>\n</html>",
        "@Code\nDim price=20\nEnd Code\n<html>\n<body>\n@if price>30 then\n@<p>The price is too high.</p>\nElse\n@<p>The price is OK.</p>\nEnd If\n</body>\n</html>",
        "@Code\nDim price=25\nEnd Code\n<html>\n<body>\n@If price>=30 Then\n@<p>The price is high.</p>\nElseIf price>20 And price<30 then\n@<p>The price is OK.</p>\nElse\n@<p>The price is low.</p>\nEnd If\n</body>\n</html>",
        "@Code\nDim weekday=DateTime.Now.DayOfWeek\nDim day=weekday.ToString()\nDim message=\"\"\nEnd Code\n<html>\n<body>\n@Select Case day\nCase \"Monday\"\nmessage=\"This is the first weekday.\"\nCase \"Thursday\"\nmessage=\"Only one day before weekend.\"\nCase \"Friday\"\nmessage=\"Tomorrow is weekend!\"\nCase Else\nmessage=\"Today is \" & day\nEnd Select\n<p>@message</p>\n</body>\n</html>"
      ]
    },
    {
      "title": "ASP Tutorial",
      "summary": "Learn ASP\nASP is an old (but still powerful) tool for making dynamic Web pages.\nASP is a technology (much like PHP) for executing scripts on a web server.\nIn this tutorial you will learn all you need to know about ASP.\nEasy Learning with \"Show Example\"\nThis ASP tutorial contains hundreds of examples.\nOur \"Show Example\" tool makes it easy to learn ASP, because it shows ASP code with parallel HTML output.\nExample\nClick on the \"Show Example\" button to see how it works!\nWhat is ASP?\nASP stands for Active Server Pages\nASP is a Microsoft Technology\nASP is a program that runs inside a web server\nWhat is an ASP File?\nAn ASP file has the file extension \".asp\"\nAn ASP file is just the same as an HTML file\nAn ASP file can contain server scripts in addition to HTML\nServer scripts in an ASP file are executed on the server\nREMOVE ADS\nWhat can ASP do for you?\nEdit, change, add content, or customize any web page\nRespond to user queries or data submitted from HTML forms\nAccess databases or other server data and return results to a browser\nProvide web security since ASP code cannot be viewed in a browser\nOffer simplicity and speed\nHow Does it Work?\nWhen a browser requests a normal HTML file, the server just returns the file.\nWhen a browser requests an ASP file, the server passes the request to the ASP engine which reads the ASP file and executes the server scripts in the file.\nFinally the ASP file is returned to the browser as plain HTML.\nASP References\nAt W3Schools you will find complete ASP references about built-in objects and components, and their properties and methods.\nASP References\nASP Examples\nLearn by 100 examples! Because ASP scripts are executed on the server, you can not view ASP code in a browser, you will only see the output from ASP which is plain HTML. At W3Schools every example displays the hidden ASP code. This will make it easier for you to understand how it works.\nASP Examples!",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<body>\n<%\nresponse.write(\"My first ASP script!\")\n%>\n</body>\n</html>"
      ]
    },
    {
      "title": "ASP Syntax",
      "summary": "All our examples shows the ASP code in red.\nThis makes it easier for you to understand how ASP works.\nASP Uses VBScript\nThe default scripting language in ASP is VBScript.\nA scripting language is a lightweight programming language.\nVBScript is a light version of Microsoft's Visual Basic.\nASP Files\nASP files can be ordinary HTML files. In addition, ASP files can also contain server scripts.\nScripts surrounded by <% and %> are executed on the server.\nThe Response.Write() method is used by ASP to write output to HTML.\nThe following example writes \"Hello World\" into HTML:\nExample\nVBScript is case insensitive. Response.Write() can be written as response.write().\nUsing JavaScript in ASP\nTo set JavaScript as the scripting language for a web page you must insert a language specification at the top of the page:\nExample\nThis tutorial uses the VBScript scripting language.\nREMOVE ADS\nMore Examples\nThere is an easy shortcut to Response.Write(). You can use an equal sign (=) instead.\nThe following example also writes \"Hello World\" into HTML:\nExample\nHTML tags can be a part of the output:\nExample\nHTML attributes can be a part of the output:\nExample\nVBScript Examples\nThis tutorial contains a lot of VBScript examples.\nVBScript Examples\nVBScript Reference\nThis tutorial has complete VBScript reference.\nVBScript Reference",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<body>\n<%\nResponse.Write(\"Hello World!\")\n%>\n</body>\n</html>",
        "<%@ language=\"javascript\"%>\n<!DOCTYPE html>\n<html>\n<body>\n<%\nResponse.Write(\"Hello World!\")\n%>\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<body>\n<%\n=\"Hello World!\"\n%>\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<body>\n<%\nResponse.Write(\"<h2>You can use HTML tags to format the text!</h2>\")\n%>\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<body>\n<%\nResponse.Write(\"<p style='color:#0000ff'>This text is styled.</p>\")\n%>\n</body>\n</html>"
      ]
    },
    {
      "title": "ASP Variables",
      "summary": "Variables are \"containers\" for storing information.\nMore Examples\nDeclare a variable\nThis example demonstrates how to declare a variable, assign a value to it, and use the value in a text.\nCreate an array\nArrays are used to store a series of related data items. This example demonstrates how to create an array that stores names.\nLoop through the HTML headings\nHow to loop through the six headings in HTML.\nTime-based greeting using VBScript\nThis example will display a different message to the user depending on the time on the server.\nTime-based greeting using JavaScript\nThis example is the same as the one above, but the syntax is different.\nCreate and change a variable\nHow to create a variable, assign a value to it, and then change the value of it.\nInsert a variable value in a text\nHow to insert a variable value in a text.\nDo You Remember Algebra from School?\nDo you remember algebra from school? x=5, y=6, z=x+y\nDo you remember that a letter (like x) could be used to hold a value (like 5), and that you could use the information above to calculate the value of z to be 11?\nThese letters are called variables, and variables can be used to hold values (x=5) or expressions (z=x+y).\nVBScript Variables\nAs with algebra, VBScript variables are used to hold values or expressions.\nA variable can have a short name, like x, or a more descriptive name, like carname.\nRules for VBScript variable names:\nMust begin with a letter\nCannot contain a period (.)\nCannot exceed 255 characters\nIn VBScript, all variables are of type variant, that can store different types of data.\nREMOVE ADS\nDeclaring (Creating) VBScript Variables\nCreating variables in VBScript is most often referred to as \"declaring\" variables.\nYou can declare VBScript variables with the Dim, Public or the Private statement. Like this:\nNow you have created two variables. The name of the variables are \"x\" and \"carname\".\nYou can also declare variables by using its name in a script. Like this:\nNow you have also created a variable. The name of the variable is \"carname\". However, this method is not a good practice, because you can misspell the variable name later in your script, and that can cause strange results when your script is running.\nIf you misspell for example the \"carname\" variable to \"carnime\", the script will automatically create a new variable called \"carnime\".Â  To prevent your script from doing this, you can use the Option Explicit statement. This statement forces you to declare all your variables with the dim, public or private statement.\nPut the Option Explicit statement on the top of your script. Like this:\nAssigning Values to Variables\nYou assign a value to a variable like this:\nThe variable name is on the left side of the expression and the value you want to assign to the variable is on the right. Now the variable \"carname\" has the value of \"Volvo\", and the variable \"x\" has the value of \"10\".\nVBScript Array Variables\nAn array variable is used to store multiple values in a single variable.\nIn the following example, an array containing 3 elements is declared:\nThe number shown in the parentheses is 2. We start at zero so this array contains 3 elements. This is a fixed-size array. You assign data to each of the elements of the array like this:\nSimilarly, the data can be retrieved from any element using the index of the particular array element you want. Like this:\nYou can have up to 60 dimensions in an array. Multiple dimensions are declared by separating the numbers in the parentheses with commas. Here we have a two-dimensional array consisting of 5 rows and 7 columns:\nAssign data to a two-dimensional array:\nExample\nThe Lifetime of Variables\nA variable declared outside a procedure can be accessed and changed by any script in the ASP file.\nA variable declared inside a procedure is created and destroyed every time the procedure is executed. No scripts outside the procedure can access or change the variable.\nTo declare variables accessible to more than one ASP file, declare them as session variables or application variables.\nSession Variables\nSession variables are used to store information about ONE single user, and are available to all pages in one application. Typically information stored in session variables are name, id, and preferences.\nApplication Variables\nApplication variables are also available to all pages in one application. Application variables are used to store information about ALL users in one specific application.",
      "examples": [
        "Dim x\nDim carname",
        "carname=\"Volvo\"",
        "Option Explicit\nDim carname\ncarname=some value",
        "carname=\"Volvo\"\nx=10",
        "Dim names(2)",
        "names(0)=\"Tove\"\nnames(1)=\"Jani\"\nnames(2)=\"Stale\"",
        "mother=names(0)",
        "Dim table(4,6)",
        "<html>\n<body>\n\n<%\nDim x(2,2)\nx(0,0)=\"Volvo\"\nx(0,1)=\"BMW\"\nx(0,2)=\"Ford\"\nx(1,0)=\"Apple\"\nx(1,1)=\"Orange\"\nx(1,2)=\"Banana\"\nx(2,0)=\"Coke\"\nx(2,1)=\"Pepsi\"\nx(2,2)=\"Sprite\"\nfor i=0 to 2\nresponse.write(\"<p>\")\nfor j=0 to 2\nresponse.write(x(i,j) & \"<br />\")\nnext\nresponse.write(\"</p>\")\nnext\n%>\n\n</body>\n</html>"
      ]
    },
    {
      "title": "ASP Procedures",
      "summary": "In ASP you can call a JavaScript procedure from a VBScript and vice versa.\nProcedures\nThe ASP source code can contain procedures and functions:\nExample\nInsert the <%@ language=\"language\" %> line above the <html> tag to write the procedure/function in another scripting language:\nExample\nREMOVE ADS\nDifferences Between VBScript and JavaScript\nWhen calling a VBScript or a JavaScript procedure from an ASP file written in VBScript, you can use the \"call\" keyword followed by the procedure name. If a procedure requires parameters, the parameter list must be enclosed in parentheses when using the \"call\" keyword. If you omit the \"call\" keyword, the parameter list must not be enclosed in parentheses. If the procedure has no parameters, the parentheses are optional.\nWhen calling a JavaScript or a VBScript procedure from an ASP file written in JavaScript, always use parentheses after the procedure name.\nVBScript Procedures\nVBScript has two kinds procedures:\nSub procedure\nFunction procedure\nVBScript Sub Procedures\nA Sub procedure:\nis a series of statements, enclosed by the Sub and End Sub statements\ncan perform actions, but does not return a value\ncan take arguments\nor\nExample\nVBScript Function Procedures\nA Function procedure:\nis a series of statements, enclosed by the Function and End Function statements\ncan perform actions and can return a value\ncan take arguments that are passed to it by a calling procedure\nwithout arguments, must include an empty set of parentheses ()\nreturns a value by assigning a value to its name\nor\nExample\nCalling a Procedure\nThis simple function procedures is called to calculate the sum of two arguments:\nExample\nThe function \"myfunction\" will return the sum of argument \"a\" and argument \"b\". In this case 14.\nWhen you call a procedure you can use the Call statement, like this:\nOr, you can omit the Call statement, like this:\nMore Examples\nCall procedures using VBScript\nHow to call both a JavaScript procedure and a VBScript procedure in an ASP file.",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<head>\n<%\nsub vbproc(num1,num2)\nresponse.write(num1*num2)\nend sub\n%>\n</head>\n<body>\n\n<p>Result: <%call vbproc(3,4)%></p>\n\n</body>\n</html>",
        "<%@ language=\"javascript\" %>\n<!DOCTYPE html>\n<html>\n<head>\n<%\nfunction jsproc(num1,num2)\n{\nResponse.Write(num1*num2)\n}\n%>\n</head>\n<body>\n\n<p>Result: <%jsproc(3,4)%></p>\n\n</body>\n</html>",
        "Sub mysub()\nsome statements\nEnd Sub",
        "Sub mysub(argument1,argument2)\nsome statements\nEnd Sub",
        "Sub mysub()\nresponse.write(\"I was written by a sub procedure\")\nEnd Sub",
        "Function myfunction()\nsome statements\nmyfunction=some value\nEnd Function",
        "Function myfunction(argument1,argument2)\nsome statements\nmyfunction=some value\nEnd Function",
        "function myfunction()\nmyfunction=Date()\nend function",
        "Function myfunction(a,b)\nmyfunction=a+b\nEnd Function\n\nresponse.write(myfunction(5,9))",
        "Call MyProc(argument)",
        "MyProc argument"
      ]
    },
    {
      "title": "VBScript Conditional Statements",
      "summary": "Conditional Statements\nConditional statements are used to perform different actions for different decisions.\nIn VBScript we have four conditional statements:\nIf statement - executes a set of code when a condition is true\nIf...Then...Else statement - select one of two sets of lines to execute\nIf...Then...ElseIf statement - select one of many sets of lines to execute\nSelect Case statement - select one of many sets of lines to execute\nIf...Then...Else\nUse the If...Then...Else statement if you want to\nexecute some code if a condition is true\nselect one of two blocks of code to execute\nIf you want to execute only one statement when a condition is true, you can write the code on one line:\nThere is no ..Else.. in this syntax. You just tell the code to perform one action if a condition is true (in this case If i=10).\nIf you want to execute more than one statement when a condition is true, you must put each statement on separate lines, and end the statement with the keyword \"End If\":\nThere is no ..Else.. in the example above either. You just tell the code to perform multiple actions if the condition is true.\nIf you want to execute a statement if a condition is true and execute another statement if the condition is not true, you must add the \"Else\" keyword:\nExample\nIn the example above, the first block of code will be executed if the condition is true, and the other block will be executed otherwise (if i is greater than 10).\nREMOVE ADS\nIf...Then...ElseIf\nYou can use the If...Then...ElseIf statement if you want to select one of many blocks of code to execute:\nExample\nSelect Case\nYou can also use the \"Select Case\" statement if you want to select one of many blocks of code to execute:\nExample\nThis is how it works: First we have a single expression (most often a variable), that is evaluated once. The value of the expression is then compared with the values for each Case in the structure. If there is a match, the block of code associated with that Case is executed.",
      "examples": [
        "If i=10 Then response.write(\"Hello\")",
        "If i=10 Then\nresponse.write(\"Hello\")\ni = i+1\nEnd If",
        "i=hour(time)\nIf i < 10 Then\nresponse.write(\"Good morning!\")\nElse\nresponse.write(\"Have a nice day!\")\nEnd If",
        "i=hour(time)\nIf i = 10 Then\nresponse.write(\"Just started...!\")\nElseIf i = 11 Then\nresponse.write(\"Hungry!\")\nElseIf i = 12 Then\nresponse.write(\"Ah, lunch-time!\")\nElseIf i = 16 Then\nresponse.write(\"Time to go home!\")\nElse\nresponse.write(\"Unknown\")\nEnd If",
        "d=weekday(date)\nSelect Case d\nCase 1\nresponse.write(\"Sleepy Sunday\")\nCase 2\nresponse.write(\"Monday again!\")\nCase 3\nresponse.write(\"Just Tuesday!\")\nCase 4\nresponse.write(\"Wednesday!\")\nCase 5\nresponse.write(\"Thursday...\")\nCase 6\nresponse.write(\"Finally Friday!\")\nCase else\nresponse.write(\"Super Saturday!!!!\")\nEnd Select"
      ]
    },
    {
      "title": "VBScript Looping",
      "summary": "Looping Statements\nLooping statements are used to run the same block of code a specified number of times.\nIn VBScript we have four looping statements:\nFor...Next statement - runs code a specified number of times\nFor Each...Next statement - runs code for each item in a collection or each element of an array\nDo...Loop statement - loops while or until a condition is true\nWhile...Wend statement - Do not use it - use the Do...Loop statement instead\nFor...Next Loop\nUse the For...Next statement to run a block of code a specified number of times.\nThe For statement specifies the counter variable (i), and its start and end values. The Next statement increases the counter variable (i) by one.\nExample\nThe Step Keyword\nWith the Step keyword, you can increase or decrease the counter variable by the value you specify.\nIn the example below, the counter variable (i) is INCREASED by two, each time the loop repeats.\nTo decrease the counter variable, you must use a negative Step value. You must specify an end value that is less than the start value.\nIn the example below, the counter variable (i) is DECREASED by two, each time the loop repeats.\nExit a For...Next\nYou can exit a For...Next statement with the Exit For keyword.\nREMOVE ADS\nFor Each...Next Loop\nA For Each...Next loop repeats a block of code for each item in a collection, or for each element of an array.\nExample\nDo...Loop\nIf you don't know how many repetitions you want, use a Do...Loop statement.\nThe Do...Loop statement repeats a block of code while a condition is true, or untilÂ a condition becomes true.\nRepeat Code While a Condition is True\nYou use the While keyword to check a condition in a Do...Loop statement.\nIf i equals 9, the code inside the loop above will never be executed.\nThe code inside this loop will be executed at least one time, even if i is less than 10.\nRepeat Code Until a Condition Becomes True\nYou use the Until keyword to check a condition in a Do...Loop statement.\nIf i equals 10, the code inside the loop will never be executed.\nThe code inside this loop will be executed at least one time, even if i is equal to 10.\nExit a Do...Loop\nYou can exit a Do...Loop statement with the Exit Do keyword.\nThe code inside this loop will be executed as long as i is different from 10, and as long as i is greater than 10.\nMore Examples\nLooping through headers\nHow to loop through the six headings in html.\nDo...While loop\nHow to make a simple Do...While loop.",
      "examples": [
        "<html>\n<body>\n\n<%\nFor i = 0 To 5\nresponse.write(\"The number is \" & i & \"<br />\")\nNext\n%>\n\n</body>\n</html>",
        "For i=2 To 10 Step 2\nsome code\nNext",
        "For i=10 To 2 Step -2\nsome code\nNext",
        "For i=1 To 10\nIf i=5 Then Exit For\nsome code\nNext",
        "<html>\n<body>\n\n<%\nDim cars(2)\ncars(0)=\"Volvo\"\ncars(1)=\"Saab\"\ncars(2)=\"BMW\"\n\nFor Each x In cars\nresponse.write(x & \"<br />\")\nNext\n%>\n\n</body>\n</html>",
        "Do While i>10\nsome code\nLoop",
        "Do\nsome code\nLoop While i>10",
        "Do Until i=10\nsome code\nLoop",
        "Do\nsome code\nLoop Until i=10",
        "Do Until i=10\ni=i-1\nIf i<10 Then Exit Do\nLoop"
      ]
    },
    {
      "title": "ASP Forms and User Input",
      "summary": "The Request.QueryString and Request.Form commands are used to retrieve user input from forms.\nMore Examples\nA form with method=\"get\"\nHow to interact with the user, with the Request.QueryString command.\nA form with method=\"post\"\nHow to interact with the user, with the Request.Form command.\nA form with radio buttons\nHow to interact with the user, through radio buttons, with the Request.Form command.\nUser Input\nThe Request object can be used to retrieve user information from forms.\nUser input can be retrieved with the Request.QueryString or Request.Form command.\nRequest.QueryString\nThe Request.QueryString command is used to collect values in a form with method=\"get\".\nInformation sent from a form with the GET method is visible to everyone (it will be displayed in the browser's address bar) and has limits on the amount of information to send.\nExample HTML form\nIf a user typed \"Bill\" and \"Gates\" in the HTML form above, the URL sent to the server would look like this:\nAssume that \"simpleform.asp\" contains the following ASP script:\nThe browser will display the following in the body of the document:\nREMOVE ADS\nRequest.Form\nThe Request.Form command is used to collect values in a form with method=\"post\".\nInformation sent from a form with the POST method is invisible to others and has no limits on the amount of information to send.\nExample HTML form\nIf a user typed \"Bill\" and \"Gates\" in the HTML form above, the URL sent to the server would look like this:\nAssume that \"simpleform.asp\" contains the following ASP script:\nThe browser will display the following in the body of the document:\nForm Validation\nUser input should be validated on the browser whenever possible (by client scripts). Browser validation is faster and reduces the server load.\nYou should consider server validation if the user input will be inserted into a database. A good way to validate a form on the server is to post the form to itself, instead of jumping to a different page. The user will then get the error messages on the same page as the form. This makes it easier to discover the error.",
      "examples": [
        "<form method=\"get\" action=\"simpleform.asp\">\nFirst Name: <input type=\"text\" name=\"fname\"><br>\nLast Name: <input type=\"text\" name=\"lname\"><br><br>\n<input type=\"submit\" value=\"Submit\">\n</form>",
        "https://www.w3schools.com/simpleform.asp?fname=Bill&lname=Gates",
        "<body>\nWelcome\n<%\nresponse.write(request.querystring(\"fname\"))\nresponse.write(\" \" & request.querystring(\"lname\"))\n%>\n</body>",
        "Welcome Bill Gates",
        "<form method=\"post\" action=\"simpleform.asp\">\nFirst Name: <input type=\"text\" name=\"fname\"><br>\nLast Name: <input type=\"text\" name=\"lname\"><br><br>\n<input type=\"submit\" value=\"Submit\">\n</form>",
        "https://www.w3schools.com/simpleform.asp",
        "<body>\nWelcome\n<%\nresponse.write(request.form(\"fname\"))\nresponse.write(\" \" & request.form(\"lname\"))\n%>\n</body>"
      ]
    },
    {
      "title": "ASP Cookies",
      "summary": "A cookie is often used to identify a user.\nMore Examples\nWelcome cookie\nHow to create a Welcome cookie.\nWhat is a Cookie?\nA cookie is often used to identify a user. A cookie is a small file that the server embeds on the user's computer. Each time the same computer requests a page with a browser, it will send the cookie too. With ASP, you can both create and retrieve cookie values.\nHow to Create a Cookie?\nThe \"Response.Cookies\" command is used to create cookies.\nNote: The Response.Cookies command must appear BEFORE the <html> tag.\nIn the example below, we will create a cookie named \"firstname\" and assign the value \"Alex\" to it:\nIt is also possible to assign properties to a cookie, like setting a date when the cookie should expire:\nHow to Retrieve a Cookie Value?\nThe \"Request.Cookies\" command is used to retrieve a cookie value.\nIn the example below, we retrieve the value of the cookie named \"firstname\" and display it on a page:\nOutput: Firstname=Alex\nREMOVE ADS\nA Cookie with Keys\nIf a cookie contains a collection of multiple values, we say that the cookie has Keys.\nIn the example below, we will create a cookie collection named \"user\". The \"user\" cookie has Keys that contains information about a user:\nRead all Cookies\nLook at the following code:\nAssume that your server has sent all the cookies above to a user.\nNow we want to read all the cookies sent to a user. The example below shows how to do it (note that the code below checks if a cookie has Keys with the HasKeys property):\nOutput:\nfirstname=Alex\nuser:firstname=John\nuser:lastname=Smith\nuser:country=Norway\nuser:age=25\nWhat if a Browser Does NOT Support Cookies?\nIf your application deals with browsers that do not support cookies, you will have to use other methods to pass information from one page to another in your application. There are two ways of doing this:\n1. Add parameters to a URL\nYou can add parameters to a URL:\nAnd retrieve the values in the \"welcome.asp\" file like this:\n2. Use a form\nYou can use a form. The form passes the user input to \"welcome.asp\" when the user clicks on the Submit button:\nRetrieve the values in the \"welcome.asp\" file like this:",
      "examples": [
        "<%\nResponse.Cookies(\"firstname\")=\"Alex\"\n%>",
        "<%\nResponse.Cookies(\"firstname\")=\"Alex\"\nResponse.Cookies(\"firstname\").Expires=#May 10,2012#\n%>",
        "<%\nfname=Request.Cookies(\"firstname\")\nresponse.write(\"Firstname=\" & fname)\n%>",
        "<%\nResponse.Cookies(\"user\")(\"firstname\")=\"John\"\nResponse.Cookies(\"user\")(\"lastname\")=\"Smith\"\nResponse.Cookies(\"user\")(\"country\")=\"Norway\"\nResponse.Cookies(\"user\")(\"age\")=\"25\"\n%>",
        "<%\nResponse.Cookies(\"firstname\")=\"Alex\"\nResponse.Cookies(\"user\")(\"firstname\")=\"John\"\nResponse.Cookies(\"user\")(\"lastname\")=\"Smith\"\nResponse.Cookies(\"user\")(\"country\")=\"Norway\"\nResponse.Cookies(\"user\")(\"age\")=\"25\"\n%>",
        "<!DOCTYPE html>\n<html>\n<body>\n\n<%\ndim x,y\nfor each x in Request.Cookies\nresponse.write(\"<p>\")\nif Request.Cookies(x).HasKeys then\nfor each y in Request.Cookies(x)\nresponse.write(x & \":\" & y & \"=\"Â & Request.Cookies(x)(y))\nresponse.write(\"<br>\")\nnext\nelse\nResponse.Write(x & \"=\" & Request.Cookies(x) & \"<br>\")\nend if\nresponse.write \"</p>\"\nnext\n%>\n\n</body>\n</html>",
        "<a href=\"welcome.asp?fname=John&lname=Smith\">Go to Welcome Page</a>",
        "<%\nfname=Request.querystring(\"fname\")\nlname=Request.querystring(\"lname\")\nresponse.write(\"<p>Hello \" & fname & \" \" & lname & \"!</p>\")\nresponse.write(\"<p>Welcome to my Web site!</p>\")\n%>",
        "<form method=\"post\" action=\"welcome.asp\">\nFirst Name: <input type=\"text\" name=\"fname\" value=\"\">\nLast Name: <input type=\"text\" name=\"lname\" value=\"\">\n<input type=\"submit\" value=\"Submit\">\n</form>",
        "<%\nfname=Request.form(\"fname\")\nlname=Request.form(\"lname\")\nresponse.write(\"<p>Hello \" & fname & \" \" & lname & \"!</p>\")\nresponse.write(\"<p>Welcome to my Web site!</p>\")\n%>"
      ]
    },
    {
      "title": "ASP Session Object",
      "summary": "A Session object stores information about, or change settings for a user session.\nThe Session object\nWhen you are working with an application on your computer, you open it, do some changes and then you close it. This is much like a Session. The computer knows who you are. It knows when you open the application and when you close it. However, on the internet there is one problem: the web server does not know who you are and what you do, because the HTTP address doesn't maintain state.\nASP solves this problem by creating a unique cookie for each user. The cookie is sent to the user's computer and it contains information that identifies the user. This interface is called the Session object.\nThe Session object stores information about, or change settings for a user session.\nVariables stored in a Session object hold information about one single user, and are available to all pages in one application. Common information stored in session variables are name, id, and preferences. The server creates a new Session object for each new user, and destroys the Session object when the session expires.\nWhen does a Session Start?\nA session starts when:\nA new user requests an ASP file, and the Global.asa file includes a Session_OnStart procedure\nA value is stored in a Session variable\nA user requests an ASP file, and the Global.asa file uses the <object> tag to instantiate an object with session scope\nWhen does a Session End?\nA session ends if a user has not requested or refreshed a page in the application for a specified period. By default, this is 20 minutes.\nIf you want to set a timeout interval that is shorter or longer than the default, use the Timeout property.\nThe example below sets a timeout interval of 5 minutes:\nUse the Abandon method to end a session immediately:\nNote: The main problem with sessions is WHEN they should end. We do not know if the user's last request was the final one or not. So we do not know how long we should keep the session \"alive\". Waiting too long for an idle session uses up resources on the server, but if the session is deleted too soon the user has to start all over again because the server has deleted all the information. Finding the right timeout interval can be difficult!\nTip: Only store SMALL amounts of data in session variables!\nREMOVE ADS\nStore and Retrieve Session Variables\nThe most important thing about the Session object is that you can store variables in it.\nThe example below will set the Session variable username to \"Donald Duck\" and the Session variable age to \"50\":\nWhen the value is stored in a session variable it can be reached from ANY page in the ASP application:\nThe line above returns: \"Welcome Donald Duck\".\nYou can also store user preferences in the Session object, and then access that preference to choose what page to return to the user.\nThe example below specifies a text-only version of the page if the user has a low screen resolution:\nRemove Session Variables\nThe Contents collection contains all session variables.\nIt is possible to remove a session variable with the Remove method.\nThe example below removes the session variable \"sale\" if the value of the session variable \"age\" is lower than 18:\nTo remove all variables in a session, use the RemoveAll method:\nLoop Through the Contents Collection\nThe Contents collection contains all session variables. You can loop through the Contents collection, to see what's stored in it:\nResult:\nIf you do not know the number of items in the Contents collection, you can use the Count property:\nResult:\nLoop Through the StaticObjects Collection\nYou can loop through the StaticObjects collection, to see the values of all objects stored in the Session object:",
      "examples": [
        "<%\nSession.Timeout=5\n%>",
        "<%\nSession.Abandon\n%>",
        "<%\nSession(\"username\")=\"Donald Duck\"\nSession(\"age\")=50\n%>",
        "Welcome <%Response.Write(Session(\"username\"))%>",
        "<%If Session(\"screenres\")=\"low\" Then%>\nThis is the text version of the page\n<%Else%>\nThis is the multimedia version of the page\n<%End If%>",
        "<%\nIf Session.Contents(\"age\")<18 then\nSession.Contents.Remove(\"sale\")\nEnd If\n%>",
        "<%\nSession.Contents.RemoveAll()\n%>",
        "<%\nSession(\"username\")=\"Donald Duck\"\nSession(\"age\")=50\n\ndim i\nFor Each i in Session.Contents\nResponse.Write(i & \"<br>\")\nNext\n%>",
        "username\nage",
        "<%\ndim i\ndim j\nj=Session.Contents.Count\nResponse.Write(\"Session variables: \" & j)\nFor i=1 to j\nResponse.Write(Session.Contents(i) & \"<br>\")\nNext\n%>",
        "Session variables: 2\nDonald Duck\n50",
        "<%\ndim i\nFor Each i in Session.StaticObjects\nResponse.Write(i & \"<br>\")\nNext\n%>"
      ]
    },
    {
      "title": "ASP Application Object",
      "summary": "A group of ASP files that work together to perform some purpose is called an application.\nApplication Object\nAn application on the Web may consist of several ASP files that work together to perform some purpose. The Application object is used to tie these files together.\nThe Application object is used to store and access variables from any page, just like the Session object. The difference is that ALL users share ONE Application object (with Sessions there is ONE Session object for EACH user).\nThe Application object holds information that will be used by many pages in the application (like database connection information). The information can be accessed from any page. The information can also be changed in one place, and the changes will automatically be reflected on all pages.\nStore and Retrieve Application Variables\nApplication variables can be accessed and changed by any page in an application.\nYou can create Application variables in \"Global.asa\" like this:\nIn the example above we have created two Application variables: \"vartime\" and \"users\".\nYou can access the value of an Application variable like this:\nREMOVE ADS\nLoop Through the Contents Collection\nThe Contents collection contains all application variables. You can loop through the Contents collection, to see what's stored in it:\nIf you do not know the number of items in the Contents collection, you can use the Count property:\nLoop Through the StaticObjects Collection\nYou can loop through the StaticObjects collection, to see the values of all objects stored in the Application object:\nLock and Unlock\nYou can lock an application with the \"Lock\" method. When an application is locked, the users cannot change the Application variables (other than the one currently accessing it). You can unlock an application with the \"Unlock\" method. This method removes the lock from the Application variable:",
      "examples": [
        "<script language=\"vbscript\" runat=\"server\">\n\nSub Application_OnStart\napplication(\"vartime\")=\"\"\napplication(\"users\")=1\nEnd Sub\n\n</script>",
        "There are\n<%\nResponse.Write(Application(\"users\"))\n%>\nactive connections.",
        "<%\ndim i\nFor Each i in Application.Contents\nResponse.Write(i & \"<br>\")\nNext\n%>",
        "<%\ndim i\ndim j\nj=Application.Contents.Count\nFor i=1 to j\nResponse.Write(Application.Contents(i) & \"<br>\")\nNext\n%>",
        "<%\ndim i\nFor Each i in Application.StaticObjects\nResponse.Write(i & \"<br>\")\nNext\n%>",
        "<%\nApplication.Lock\n'do some application object operations\nApplication.Unlock\n%>"
      ]
    },
    {
      "title": "ASP Including Files",
      "summary": "The #include Directive\nYou can insert the content of one ASP file into another ASP file before the server executes it, with the #include directive.\nThe #include directive is used to create functions, headers, footers, or elements that will be reused on multiple pages.\nHow to Use the #include Directive\nHere is a file called \"mypage.asp\":\nHere is the \"wisdom.inc\" file:\nHere is the \"time.inc\" file:\nIf you look at the source code in a browser, it will look something like this:\nREMOVE ADS\nSyntax for Including Files\nTo include a file in an ASP page, place the #include directive inside comment tags:\nThe Virtual Keyword\nUse the virtual keyword to indicate a path beginning with a virtual directory.\nIf a file named \"header.inc\" resides in a virtual directory named /html, the following line would insert the contents of \"header.inc\":\nThe File Keyword\nUse the file keyword to indicate a relative path. A relative path begins with the directory that contains the including file.\nIf you have a file in the html directory, and the file \"header.inc\" resides in html\\headers, the following line would insert \"header.inc\" in your file:\nNote that the path to the included file (headers\\header.inc) is relative to the including file. If the file containing this #include statement is not in the html directory, the statement will not work.\nTips and Notes\nIn the sections above we have used the file extension \".inc\" for included files. Notice that if a user tries to browse an INC file directly, its content will be displayed. If your included file contains confidential information or information you do not want any users to see, it is better to use an ASP extension. The source code in an ASP file will not be visible after the interpretation. An included file can also include other files, and one ASP file can include the same file more than once.\nImportant: Included files are processed and inserted before the scripts are executed. The following script will NOT work because ASP executes the #include directive before it assigns a value to the variable:\nYou cannot open or close a script delimiter in an INC file. The following script will NOT work:\nBut this script will work:",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<body>\n<h3>Words of Wisdom:</h3>\n<p><!--#include file=\"wisdom.inc\"--></p>\n<h3>The time is:</h3>\n<p><!--#include file=\"time.inc\"--></p>\n</body>\n</html>",
        "\"One should never increase, beyond what is necessary,\nthe number of entities required to explain anything.\"",
        "<%\nResponse.Write(Time)\n%>",
        "<!DOCTYPE html>\n<html>\n<body>\n<h3>Words of Wisdom:</h3>\n<p>\"One should never increase, beyond what is necessary,\nthe number of entities required to explain anything.\"</p>\n<h3>The time is:</h3>\n<p>11:33:42 AM</p>\n</body>\n</html>",
        "<!--#include virtual=\"somefilename\"-->\n\nor\n\n<!--#include file =\"somefilename\"-->",
        "<!-- #include virtual =\"/html/header.inc\" -->",
        "<!-- #include file =\"headers\\header.inc\" -->",
        "<%\nfname=\"header.inc\"\n%>\n<!--#include file=\"<%fname%>\"-->",
        "<%\nFor i = 1 To n\n<!--#include file=\"count.inc\"-->\nNext\n%>",
        "<% For i = 1 to n %>\n<!--#include file=\"count.inc\" -->\n<% Next %>"
      ]
    },
    {
      "title": "ASP The Global.asa file",
      "summary": "The Global.asa file\nThe Global.asa file is an optional file that can contain declarations of objects, variables, and methods that can be accessed by every page in an ASP application.\nAll valid browser scripts (JavaScript, VBScript, JScript, PerlScript, etc.) can be used within Global.asa.\nThe Global.asa file can contain only the following:\nApplication events\nSession events\n<object> declarations\nTypeLibrary declarations\nthe #include directive\nNote: The Global.asa file must be stored in the root directory of the ASP application, and each application can only have one Global.asa file.\nEvents in Global.asa\nIn Global.asa you can tell the application and session objects what to do when the application/session starts and what to do when the application/session ends. The code for this is placed in event handlers. The Global.asa file can contain four types of events:\nSession_OnStart - This event occurs EVERY time a NEW user requests his or her first page in the ASP application.\nSession_OnEnd - This event occurs EVERY time a user ends a session. A user-session ends after a page has not been requested by the user for a specified time (by default this is 20 minutes).\nApplication_OnEnd - This event occurs after the LAST user has ended the session. Typically, this event occurs when a Web server stops. This procedure is used to clean up settings after the Application stops, like delete records or write information to text files.\nA Global.asa file could look something like this:\nNote: Because we cannot use the ASP script delimiters (<% and %>) to insert scripts in the Global.asa file, we put subroutines inside an HTML <script> element.\nREMOVE ADS\n<object> Declarations\nIt is possible to create objects with session or application scope in Global.asa by using the <object> tag.\nNote: The <object> tag should be outside the <script> tag!\nSyntax\nEither ProgID or ClassID must be specified.\nEither ProgID or ClassID must be specified.\nExamples\nThe first example creates an object of session scope named \"MyAd\" by using the ProgID parameter:\nThe second example creates an object of application scope named \"MyConnection\" by using the ClassID parameter:\nThe objects declared in the Global.asa file can be used by any script in the application:\nTypeLibrary Declarations\nA TypeLibrary is a container for the contents of a DLL file corresponding to a COM object. By including a call to the TypeLibrary in the Global.asa file, the constants of the COM object can be accessed, and errors can be better reported by the ASP code. If your Web application relies on COM objects that have declared data types in type libraries, you can declare the type libraries in Global.asa.\nSyntax\nEither the file parameter or the uuid parameter is required\nEither the file parameter or the uuid parameter is required\nError Values\nThe server can return one of the following error messages:\nNote: METADATA tags can appear anywhere in the Global.asa file (both inside and outside <script> tags). However, it is recommended that METADATA tags appear near the top of the Global.asa file.\nRestrictions\nRestrictions on what you can include in the Global.asa file:\nYou cannot display text written in the Global.asa file. This file can't display information\nYou can only use Server and Application objects in the Application_OnStart and Application_OnEnd subroutines. In theÂ Session_OnEnd subroutine, you can use Server, Application, and Session objects. In the Session_OnStart subroutine you can use any built-in object\nHow to use the Subroutines\nGlobal.asa is often used to initialize variables.\nThe example below shows how to detect the exact time a visitor first arrives on a Web site. The time is stored in a Session variable named \"started\", and the value of the \"started\" variable can be accessed from any ASP page in the application:\nGlobal.asa can also be used to control page access.\nThe example below shows how to redirect every new visitor to another page, in this case to a page called \"newpage.asp\":\nAnd you can include functions in the Global.asa file.\nIn the example below the Application_OnStart subroutine occurs when the Web server starts. Then the Application_OnStart subroutine calls another subroutine named \"getcustomers\". The \"getcustomers\" subroutine opens a database and retrieves a record set from the \"customers\" table. The record set is assigned to an array, where it can be accessed from any ASP page without querying the database:\nGlobal.asa Example\nIn this example we will create a Global.asa file that counts the number of current visitors.\nThe Application_OnStart sets the Application variable \"visitors\" to 0 when the server starts\nThe Session_OnStart subroutine adds one to the variable \"visitors\" every time a new visitor arrives\nThe Session_OnEnd subroutine subtracts one from \"visitors\" each time this subroutine is triggered\nThe Global.asa file:\nTo display the number of current visitors in an ASP file:",
      "examples": [
        "<script language=\"vbscript\" runat=\"server\">\n\nsub Application_OnStart\n'some code\nend sub\n\nsub Application_OnEnd\n'some code\nend sub\n\nsub Session_OnStart\n'some code\nend sub\n\nsub Session_OnEnd\n'some code\nend sub\n\n</script>",
        "<object runat=\"server\" scope=\"scope\" id=\"id\" {progid=\"progID\"|classid=\"classID\"}>\n....\n</object>",
        "<object runat=\"server\" scope=\"session\" id=\"MyAd\" progid=\"MSWC.AdRotator\">\n</object>",
        "<object runat=\"server\" scope=\"application\" id=\"MyConnection\"\nclassid=\"Clsid:8AD3067A-B3FC-11CF-A560-00A0C9081C21\">\n</object>",
        "GLOBAL.ASA:\n\n<object runat=\"server\" scope=\"session\" id=\"MyAd\" progid=\"MSWC.AdRotator\">\n</object>\n\nYou could reference the object \"MyAd\" from any page in the ASP application:\n\nSOME .ASP FILE:\n\n<%=MyAd.GetAdvertisement(\"/banners/adrot.txt\")%>",
        "<!--METADATA TYPE=\"TypeLib\"\nfile=\"filename\" uuid=\"id\" version=\"number\" lcid=\"localeid\"\n-->",
        "<script language=\"vbscript\" runat=\"server\">\nsub Session_OnStart\nSession(\"started\")=now()\nend sub\n</script>",
        "<script language=\"vbscript\" runat=\"server\">\nsub Session_OnStart\nResponse.Redirect(\"newpage.asp\")\nend sub\n</script>",
        "<script language=\"vbscript\" runat=\"server\">\n\nsub Application_OnStart\ngetcustomers\nend sub\n\nsub getcustomers\nset conn=Server.CreateObject(\"ADODB.Connection\")\nconn.Provider=\"Microsoft.Jet.OLEDB.4.0\"\nconn.Open \"c:/webdata/northwind.mdb\"\nset rs=conn.execute(\"select name from customers\")\nApplication(\"customers\")=rs.GetRows\nrs.Close\nconn.Close\nend sub\n\n</script>",
        "<script language=\"vbscript\" runat=\"server\">\n\nSub Application_OnStart\nApplication(\"visitors\")=0\nEnd Sub\n\nSub Session_OnStart\nApplication.Lock\nApplication(\"visitors\")=Application(\"visitors\")+1\nApplication.UnLock\nEnd Sub\n\nSub Session_OnEnd\nApplication.Lock\nApplication(\"visitors\")=Application(\"visitors\")-1\nApplication.UnLock\nEnd Sub\n\n</script>",
        "<!DOCTYPE html>\n<html>\n<head>\n</head>\n<body>\n<p>There are <%response.write(Application(\"visitors\"))%> online now!</p>\n</body>\n</html>"
      ]
    },
    {
      "title": "ASP AJAX",
      "summary": "AJAX is about updating parts of a web page, without reloading the whole page.\nWhat is AJAX?\nAJAX = Asynchronous JavaScript and XML.\nAJAX is a technique for creating fast and dynamic web pages.\nAJAX allows web pages to be updated asynchronously by exchanging small amounts of data with the server behind the scenes. This means that it is possible to update parts of a web page, without reloading the whole page.\nClassic web pages, (which do not use AJAX) must reload the entire page if the content should change.\nExamples of applications using AJAX: Google Maps, Gmail, Youtube, and Facebook tabs.\nHow AJAX Works\nAJAX is Based on Internet Standards\nAJAX is based on internet standards, and uses a combination of:\nXMLHttpRequest object (to exchange data asynchronously with a server)\nJavaScript/DOM (to display/interact with the information)\nCSS (to style the data)\nXML (often used as the format for transferring data)\nAJAX applications are browser- and platform-independent!\nREMOVE ADS\nGoogle Suggest\nAJAX was made popular in 2005 by Google, with Google Suggest.\nGoogle Suggest is using AJAX to create a very dynamic web interface: When you start typing in Google's search box, a JavaScript sends the letters off to a server and the server returns a list of suggestions.\nStart Using AJAX Today\nIn our ASP tutorial, we will demonstrate how AJAX can update parts of a web page, without reloading the whole page. The server script will be written in ASP.\nIf you want to learn more about AJAX, visit our AJAX tutorial.\nAJAX ASP Example\nThe following example will demonstrate how a web page can communicate with a web server while a user type characters in an input field:\nExample\nStart typing a name in the input field below:\nSuggestions:\nExample Explained\nIn the example above, when a user types a character in the input field, a function called \"showHint()\" is executed.\nThe function is triggered by the onkeyup event.\nHere is the HTML code:\nExample\nCode explanation:\nFirst, check if the input field is empty (str.length == 0). If it is, clear the content of the txtHint placeholder and exit the function.\nHowever, if the input field is not empty, do the following:\nCreate an XMLHttpRequest object\nCreate the function to be executed when the server response is ready\nSend the request off to an ASP file (gethint.asp) on the server\nNotice that q parameter is added gethint.asp?q=\"+str\nThe str variable holds the content of the input field\nThe ASP File - \"gethint.asp\"\nThe ASP file checks an array of names, and returns the corresponding name(s) to the browser:\nAJAX can be used for interactive communication with a database.\nAJAX Database Example\nThe following example will demonstrate how a web page can fetch information from a database with AJAX:\nExample\nTry it Yourself Â»\nExample Explained - The HTML Page\nWhen a user selects a customer in the dropdown list above, a function called \"showCustomer()\" is executed. The function is triggered by the \"onchange\" event:\nSource code explanation:\nIf no customer is selected (str.length==0), the function clears the content of the txtHint placeholder and exits the function.\nIf a customer is selected, the showCustomer() function executes the following:\nCreate an XMLHttpRequest object\nCreate the function to be executed when the server response is ready\nSend the request off to a file on the server\nNotice that a parameter (q) is added to the URL (with the content of the dropdown list)\nThe ASP File\nThe page on the server called by the JavaScript above is an ASP file called \"getcustomer.asp\".\nThe source code in \"getcustomer.asp\" runs a query against a database, and returns the result in an HTML table:",
      "examples": [
        "<html>\n<head>\n<script>\nfunction showHint(str) {\nif (str.length == 0) {\ndocument.getElementById(\"txtHint\").innerHTML = \"\";\nreturn;\n} else {\nvar xmlhttp = new XMLHttpRequest();\nxmlhttp.onreadystatechange = function() {\nif (this.readyState == 4 && this.status == 200) {\ndocument.getElementById(\"txtHint\").innerHTML = this.responseText;\n}\n};\nxmlhttp.open(\"GET\", \"gethint.asp?q=\" + str, true);\nxmlhttp.send();\n}\n}\n</script>\n</head>\n<body>\n\n<p><b>Start typing a name in the input field below:</b></p>\n<form>\nFirst name: <input type=\"text\" onkeyup=\"showHint(this.value)\">\n</form>\n<p>Suggestions: <span id=\"txtHint\"></span></p>\n</body>\n</html>",
        "<%\nresponse.expires=-1\ndim a(30)\n'Fill up array with names\na(1)=\"Anna\"\na(2)=\"Brittany\"\na(3)=\"Cinderella\"\na(4)=\"Diana\"\na(5)=\"Eva\"\na(6)=\"Fiona\"\na(7)=\"Gunda\"\na(8)=\"Hege\"\na(9)=\"Inga\"\na(10)=\"Johanna\"\na(11)=\"Kitty\"\na(12)=\"Linda\"\na(13)=\"Nina\"\na(14)=\"Ophelia\"\na(15)=\"Petunia\"\na(16)=\"Amanda\"\na(17)=\"Raquel\"\na(18)=\"Cindy\"\na(19)=\"Doris\"\na(20)=\"Eve\"\na(21)=\"Evita\"\na(22)=\"Sunniva\"\na(23)=\"Tove\"\na(24)=\"Unni\"\na(25)=\"Violet\"\na(26)=\"Liza\"\na(27)=\"Elizabeth\"\na(28)=\"Ellen\"\na(29)=\"Wenche\"\na(30)=\"Vicky\"\n\n'get the q parameter from URL\nq=ucase(request.querystring(\"q\"))\n\n'lookup all hints from array if length of q>0\nif len(q)>0 then\nhint=\"\"\nfor i=1 to 30\nif q=ucase(mid(a(i),1,len(q))) then\nif hint=\"\" then\nhint=a(i)\nelse\nhint=hint & \" , \" & a(i)\nend if\nend if\nnext\nend if\n\n'Output \"no suggestion\" if no hint were found\n'or output the correct values\nif hint=\"\" then\nresponse.write(\"no suggestion\")\nelse\nresponse.write(hint)\nend if\n%>",
        "<!DOCTYPE html>\n<html>\n<head>\n<script>\nfunction showCustomer(str)\n{\nif (str==\"\")\n{\ndocument.getElementById(\"txtHint\").innerHTML=\"\";\nreturn;\n}\nif (window.XMLHttpRequest)\n{// code for IE7+, Firefox, Chrome, Opera, Safari\nxmlhttp=new XMLHttpRequest();\n}\nelse\n{// code for IE6, IE5\nxmlhttp=new ActiveXObject(\"Microsoft.XMLHTTP\");\n}\nxmlhttp.onreadystatechange=function()\n{\nif (this.readyState==4 && this.status==200)\n{\ndocument.getElementById(\"txtHint\").innerHTML=this.responseText;\n}\n}\nxmlhttp.open(\"GET\",\"getcustomer.asp?q=\"+str,true);\nxmlhttp.send();\n}\n</script>\n</head\n<body>\n\n<form>\n<select name=\"customers\" onchange=\"showCustomer(this.value)\">\n<option value=\"\">Select a customer:</option>\n<option value=\"ALFKI\">Alfreds Futterkiste</option>\n<option value=\"NORTS \">North/South</option>\n<option value=\"WOLZA\">Wolski Zajazd</option>\n</select>\n</form>\n<\n\n<div id=\"txtHint\">Customer info will be listed here...</div>\n\n</body>\n</html>",
        "<%\nresponse.expires=-1\nsql=\"SELECT * FROM CUSTOMERS WHERE CUSTOMERID=\"\nsql=sql & \"'\" & request.querystring(\"q\") & \"'\"\n\nset conn=Server.CreateObject(\"ADODB.Connection\")\nconn.Provider=\"Microsoft.Jet.OLEDB.4.0\"\nconn.Open(Server.Mappath(\"/datafolder/northwind.mdb\"))\nset rs=Server.CreateObject(\"ADODB.recordset\")\nrs.Open sql,conn\n\nresponse.write(\"<table>\")\ndo until rs.EOF\nfor each x in rs.Fields\nresponse.write(\"<tr><td><b>\" & x.name & \"</b></td>\")\nresponse.write(\"<td>\" & x.value & \"</td></tr>\")\nnext\nrs.MoveNext\nloop\nresponse.write(\"</table>\")\n%>"
      ]
    },
    {
      "title": "ASP Sending e-mail with CDOSYS",
      "summary": "CDOSYS is a built-in component in ASP. This component is used to send e-mails with ASP.\nSending e-mail with CDOSYS\nCDO (Collaboration Data Objects) is a Microsoft technology that is designed to simplify the creation of messaging applications.\nCDOSYS is a built-in component in ASP. We will show you how to use this component to send e-mail with ASP.\nHow about CDONTs?\nMicrosoft has discontinued the use of CDONTs on Windows 2000, Windows XP and Windows 2003. If you have used CDONTs in your ASP applications, you should update the code and use the new CDO technology.\nExamples using CDOSYS\nSending a text e-mail:\nSending a text e-mail with Bcc and CC fields:\nSending an HTML e-mail:\nSending an HTML e-mail that sends a webpage from a website:\nREMOVE ADS\nSending an HTML e-mail that sends a webpage from a file on your computer:\nSending a text e-mail with an Attachment:\nSending a text e-mail using a remote server:",
      "examples": [
        "<%\nSet myMail = CreateObject(\"CDO.Message\")\nmyMail.Subject = \"Sending email with CDO\"\nmyMail.From = \"mymail@mydomain.com\"\nmyMail.To = \"someone@somedomain.com\"\nmyMail.TextBody = \"This is a message.\"\nmyMail.Send\nset myMail = nothing\n%>",
        "<%\nSet myMail = CreateObject(\"CDO.Message\")\nmyMail.Subject = \"Sending email with CDO\"\nmyMail.From = \"mymail@mydomain.com\"\nmyMail.To = \"someone@somedomain.com\"\nmyMail.Bcc = \"someoneelse@somedomain.com\"\nmyMail.Cc = \"someoneelse2@somedomain.com\"\nmyMail.TextBody = \"This is a message.\"\nmyMail.Send\nset myMail = nothing\n%>",
        "<%\nSet myMail = CreateObject(\"CDO.Message\")\nmyMail.Subject = \"Sending email with CDO\"\nmyMail.From = \"mymail@mydomain.com\"\nmyMail.To = \"someone@somedomain.com\"\nmyMail.HTMLBody = \"<h1>This is a message.</h1>\"\nmyMail.Send\nset myMail = nothing\n%>",
        "<%\nSet myMail = CreateObject(\"CDO.Message\")\nmyMail.Subject = \"Sending email with CDO\"\nmyMail.From = \"mymail@mydomain.com\"\nmyMail.To =\"someone@somedomain.com\"\nmyMail.CreateMHTMLBody \"https://www.w3schools.com/asp/\"\nmyMail.Send\nset myMail = nothing\n%>",
        "<%\nSet myMail = CreateObject(\"CDO.Message\")\nmyMail.Subject = \"Sending email with CDO\"\nmyMail.From = \"mymail@mydomain.com\"\nmyMail.To = \"someone@somedomain.com\"\nmyMail.CreateMHTMLBody \"file://c:/mydocuments/test.htm\"\nmyMail.Send\nset myMail = nothing\n%>",
        "<%\nSet myMail = CreateObject(\"CDO.Message\")\nmyMail.Subject = \"Sending email with CDO\"\nmyMail.From = \"mymail@mydomain.com\"\nmyMail.To = \"someone@somedomain.com\"\nmyMail.TextBody = \"This is a message.\"\nmyMail.AddAttachment \"c:\\mydocuments\\test.txt\"\nmyMail.Send\nset myMail = nothing\n%>",
        "<%\nSet myMail = CreateObject(\"CDO.Message\")\nmyMail.Subject = \"Sending email with CDO\"\nmyMail.From = \"mymail@mydomain.com\"\nmyMail.To = \"someone@somedomain.com\"\nmyMail.TextBody = \"This is a message.\"\nmyMail.Configuration.Fields.Item _\n(\"http://schemas.microsoft.com/cdo/configuration/sendusing\") = 2\n'Name or IP of remote SMTP server\nmyMail.Configuration.Fields.Item _\n(\"http://schemas.microsoft.com/cdo/configuration/smtpserver\") = \"smtp.server.com\"\n'Server port\nmyMail.Configuration.Fields.Item _\n(\"http://schemas.microsoft.com/cdo/configuration/smtpserverport\") = 25\nmyMail.Configuration.Fields.Update\nmyMail.Send\nset myMail = nothing\n%>"
      ]
    },
    {
      "title": "ASP and VBScript Examples",
      "summary": "ASP Output\nWriting plain text\nWriting HTML Tags\nWriting HTML attributes\nVbScript Variables\nCreate a variable\nCreate a variable and change its value\nInsert a variable value in a text\nCreate an array\nVBScript Looping\nFor..Next loop\nLooping through HTML headers\nFor..Each loop\nDo...While loop\nVBScript Date and Time Functions\nDate and time\nGet the name of a day\nGet the name of a month\nGet todays' day and month\nCountdown to year 3000\nCalculate the day which is n days from today\nFormat date and time\nIs this a date?\nSome Other Built-in VBScript Functions\nUppercase or lowercase a string\nTrim a string\nHow to reverse a string?\nHow to round a number?\nA random number\nReturn a random number between 0-99\nReturn a specified number of characters from left/right of a string\nReplace some characters in a string\nReturn a specified number of characters from a string\nProcedures\nSub procedure\nFunction procedure\nVBScript vs JavaScript\nCall a procedure using VBScript in ASP\nCall a procedure using JavaScript in ASP\nCall a JavaScript procedure and a VBScript procedure using VBScript in ASP\nTime-based greeting using VBScript\nTime-based greeting using JavaScript\nREMOVE ADS\nVBScript Conditional Statements\nIf...Then..Else statement\nIf...Then..ElseIf statement\nSelect Case statement\nRandom link\nASP Forms\nInteract with a user in a form that uses the \"get\" method\nInteract with a user in a form that uses the \"post\" method\nInteract with a user in aÂ  form with radio buttons\nASP Cookies\nCreate a welcome cookie\nASP Response Object\nWrite text using ASP\nFormat text with HTML tags\nRedirect the user to another URL\nRandom links\nControlling the buffer\nClear the buffer\nEnd a script in the middle of processing\nSet how many minutes a page will be cached in a browser before it expires\nSet a date/time when a page cached in a browser will expire\nCheck if the user is still connected\nSet the type of content\nSet the name of character set\nASP Request Object\nSend extra information within a link\nA QueryString collection in its simplest use\nHow to use information from forms\nMore information from a form\nA form collection in its simplest use\nHow to use information from forms\nMore information from a form\nA form with radio buttons\nA form with checkboxes\nHow to find the visitors' browser type, IP address and more\nList all servervariables you can ask for\nWelcome cookie\nTotal number of bytes the user sent\nASP Session Object\nReturn session id number for a user\nGet a session's timeout\nASP Server Object\nWhen was a file last modified?\nOpen a textfile for reading\nHome made hit counter\nASP FileSystem Object\nDoes a specified file exist?\nDoes a specified folder exist?\nDoes a specified drive exist?\nGet the name of a specified drive\nGet the name of the parent folder of a specified path\nGet the file extension\nGet the base name of a file or folder\nASP TextStream Object\nRead textfile\nRead only a part of a textfile\nRead one line of a textfile\nRead all lines from a textfile\nSkip a part of a textfile\nSkip a line of a textfile\nReturn current line-number in a text file\nGet column number of the current character in a text file\nASP Drive Object\nGet the available space of a specified drive\nGet the free space of a specified drive\nGet the total size of a specified drive\nGet the drive letter of a specified drive\nGet the drive type of a specified drive\nGet the file system of a specified drive\nIs the drive ready?\nGet the path of a specified drive\nGet the root folder of a specified drive\nGet the serial number of a specified drive\nASP File Object\nWhen was the file created?\nWhen was the file last modified?\nWhen was the file last accessed?\nReturn the attributes of a specified file\nASP Dictionary Object\nDoes a specified key exist?\nReturn an array of all items\nReturn an array of all keys\nReturn the value of an item\nSet a key\nReturn the number of key/item pairs\nASP AdRotator\nDisplay a different image each time a user visits a page\nASP Browser Capabilities\nFind the type, capabilities, and version of each browser that visits your site\nASP ContentRotator\nDisplay a different content each time a user visits a page (ASP 3.0)\nASP Content Linking\nBuild a table of contents\nNavigate between pages in a text file",
      "examples": []
    },
    {
      "title": "W3Schools Classic ASP Certificate",
      "summary": "W3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate Â»\nW3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate Â»\nWho Should Consider Getting Certified?\nAny student or professional within the digital industry.\nCertifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market.\nW3Schools is Trusted by Top Companies\nW3Schools has over two decades of experience with teaching coding online.\nOur certificates are recognized and valued by companies looking to employ skilled developers.\nSave Time and Money\nShow the world your coding skills by getting a certification.\nThe prices is a small fraction compared to the price of traditional education.\nDocument and validate your competence by getting certified!\nExam overview\nFee: 95 USD\nAchievable certification levels:\nIntermediate (40%)\nAdvanced (75%)\nProfessional (90%)\nNumber of questions:\nAdaptive, 60 on average\nRequirement to pass:\nMinimum 40% - Intermediate level\nTime limit: 60 minutes\nNumber of attempts to pass: 3\nExam deadline: None\nCertification Expiration: None\nFormat: Online, multiple choice\nRegister now Â»\nAdvance Faster in Your Career\nGetting a certificate proves your commitment to upgrading your skills.\nThe certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on.\nIt gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nKnowledge is power, especially in the current job market.\nDocumentation of your skills enables you to advance your career or helps you to start a new one.\nHow Does It Work?\nStudy for free at W3Schools.com\nStudy at your own speed\nTest your skills with W3Schools online quizzes\nApply for your certificate by paying an exam fee\nTake your exam online, at any time, and from any location\nGet Your Certificate and Share It With The World\nExample certificate:\nEach certificate gets a unique link that can be shared with others.\nValidate your certification with the link or QR code.\nCheck how it looks like in this Example.\nShare your certificate on Linked in the Certifications section in just one click!\nDocument Your Skills\nGetting a certificate proves your commitment to upgrade your skills, gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nGet Your Certificate Â»\nLooking to add multiple users?\nAre you an educator, manager or business owner looking for courses or certifications?\nWe are working with schools, companies and organizations from all over the world.\nGet courses and/or certifications for your team here.",
      "examples": []
    },
    {
      "title": "VBScript Functions",
      "summary": "This page contains all the built-in VBScript functions. The page is divided into following sections:\nDate/Time functions\nConversion functions\nFormat functions\nMath functions\nArray functions\nString functions\nOther functions\nDate/Time Functions\nREMOVE ADS\nConversion Functions\nFormat Functions\nMath Functions\nArray Functions\nString Functions\nOther Functions",
      "examples": []
    },
    {
      "title": "VBScript Keywords",
      "summary": "VBScript Keywords\nUsed to indicate an uninitialized variable value. A variable value is uninitialized when it is first created and no value is assigned to it, or when a variable value is explicitly set to empty.\nExample:\nDim xÂ Â  'the variable x is uninitialized!\nx=\"ff\"Â Â  'the variable x is NOT uninitialized anymore\nx=EmptyÂ Â  'the variable x is uninitialized!\nNote: This is not the same as Null!!\nUsed to test if a variable is uninitialized.\nExample: If (IsEmpty(x)) 'is x uninitialized?\nExample: Set myObject=Nothing\nExample: If (myObject Is Nothing) 'is it unset?\nNote: If you compare a value to Nothing, you will not get the right result! Example: If (myObject = Nothing) 'always false!\nOne way to think of Null is that someone has explicitly set the value to \"invalid\", unlike Empty where the value is \"not set\".\nNote: This is not the same as Empty or Nothing!!\nExample: x=Null 'x contains no valid data\nExample: if (IsNull(x)) 'is x invalid?",
      "examples": []
    },
    {
      "title": "ASP Response Object",
      "summary": "The ASP Response object is used to send output to the user from the server.\nMore Examples\nWrite text with ASP\nHow to write text with ASP.\nFormat text with HTML tags in ASP\nHow to combine text and HTML tags with ASP.\nRedirect the user to a different URL\nHow to redirect the user to a different URL.\nShow a random link\nHow to create a random link.\nControlling the buffer\nHow to control the buffer.\nClear the buffer\nHow to clear the buffer.\nEnd a script in the middle of processing and return the result\nHow to end a script in the middle of processing.\nSet how many minutes a page will be cached in a browser before it expires\nHow to specify how many minutes a page will be cached in a browser before it expires.\nSet a date/time when a page cached in a browser will expire\nHow to specify a date/time a page cached in a browser will expire.\nCheck if the user is still connected to the server\nHow to check if a user is disconnected from the server.\nSet the type of content\nHow to specify the type of content.\nSet the name of the character set\nHow to specify the name of the character set.\nREMOVE ADS\nResponse Object\nThe ASP Response object is used to send output to the user from the server. Its collections, properties, and methods are described below:\nCollections\nProperties\nMethods",
      "examples": []
    },
    {
      "title": "ASP Request Object",
      "summary": "The Request object is used to get information from a visitor.\nQueryString Collection Examples\nSend query information when a user clicks on a link\nHow to send query information to a page within a link, and retrieve that information on the destination page (which is, in this example, the same page).\nA QueryString collection in its simplest use\nUse the QueryString collection to retrieve the values from a form (the form uses the get method - the information sent is visible to everybody).\nHow to use information from forms\nHow to use the values retrieved from a form.\nMore information from a form\nWhat the QueryString collection contains if several input fields have equal names. It also shows how to use the Count keyword to count the \"name\" property.\nForm Collection Examples\nA form collection in its simplest use\nHow the Form collection retrieves the values from a form (the form uses the post method - the information sent is invisible to others).\nHow to use information from forms\nHow to use the values retrieved from a form.\nMore information from a form\nWhat the Form collection contains if several input fields have equal names. It also shows how to use the Count keyword to count the \"name\" property.\nA form with radio buttons\nHow to interact with the user through radio buttons.\nA form with checkboxes\nHow to interact with the user through checkboxes.\nOther Examples\nGet the server variables\nHow to get the visitor's browser type, IP address, and more.\nCreate a welcome cookie\nHow to create a Welcome Cookie.\nFind the total number of bytes the user sent\nHow to find the total number of bytes the user sent in the Request object.\nREMOVE ADS\nRequest Object\nWhen a browser asks for a page from a server, it is called a request. The Request object is used to get information from a visitor. Its collections, properties, and methods are described below:\nCollections\nProperties\nMethods",
      "examples": []
    },
    {
      "title": "ASP Application Object",
      "summary": "A group of ASP files that work together to perform some purpose is called an application. The Application object is used to tie these files together.\nApplication Object\nAn application on the Web may consists of several ASP files that work together to perform some purpose. The Application object is used to tie these files together.\nThe Application object is used to store and access variables from any page, just like the Session object. The difference is that ALL users share ONE Application object (with Sessions there is ONE Session object for EACH user).\nThe Application object holds information that will be used by many pages in the application (like database connection information). The information can be accessed from any page. The information can also be changed in one place, and the changes will automatically be reflected on all pages.\nThe Application object's collections, methods, and events are described below:\nCollections\nMethods\nEvents",
      "examples": []
    },
    {
      "title": "ASP Session Object",
      "summary": "A Session object stores information about, or change settings for a user session.\nMore Examples\nSet and return the LCID\nSet or return an integer that specifies a location or region. Contents like date, time, and currency will be displayed according to that location or region.\nReturn the SessionID\nReturn a unique id for each user. The id is generated by the server.\nA session's timeout\nSet and return the timeout (in minutes) of a session.\nSession Object\nWhen you are working with an application on your computer, you open it, do some changes and then you close it. This is much like a Session. The computer knows who you are. It knows when you open the application and when you close it. However, on the internet there is one problem: the web server does not know who you are and what you do, because the HTTP address doesn't maintain state.\nASP solves this problem by creating a unique cookie for each user. The cookie is sent to the user's computer and it contains information that identifies the user. This interface is called the Session object.\nThe Session object stores information about, or change settings for a user session.\nVariables stored in a Session object hold information about one single user, and are available to all pages in one application. Common information stored in session variables are name, id, and preferences. The server creates a new Session object for each new user, and destroys the Session object when the session expires.\nThe Session object's collections, properties, methods, and events are described below:\nCollections\nREMOVE ADS\nProperties\nMethods\nEvents",
      "examples": []
    },
    {
      "title": "ASP Server Object",
      "summary": "The Server object is used to access properties and methods on the server.\nMore Examples\nWhen was a file last modified?\nCheck when a file was last modified.\nOpen a text file for reading\nOpen \"Textfile.txt\" for reading.\nHomemade hit counter\nServer Object\nThe ASP Server object is used to access properties and methods on the server. Its properties and methods are described below:\nProperties\nMethods",
      "examples": []
    },
    {
      "title": "ASP ASPError Object",
      "summary": "The ASPError object displays information about errors in scripts.\nThe ASPError Object\nThe ASPError object was implemented in ASP 3.0 and is available in IIS5 and later.\nThe ASPError object is used to display detailed information of any error that occurs in scripts in an ASP page.\nNote: The ASPError object is created when Server.GetLastError is called, so the error information can only be accessed by using the Server.GetLastError method.\nThe ASPError object's properties are described below (all properties are read-only):\nProperties",
      "examples": []
    },
    {
      "title": "ASP FileSystemObject Object",
      "summary": "The FileSystemObject object is used to access the file system on a server.\nMore Examples\nDoes a specified file exist?\nHow to check if a file exists.\nDoes a specified folder exist?\nHow to check if a folder exists.\nDoes a specified drive exist?\nHow to check if a drive exists.\nGet the name of a specified drive\nHow to get the name of a specified drive.\nGet the name of the parent folder of a specified path\nHow to get the name of the parent folder of a specified path.\nGet file name\nHow to get the file name of the last component in a specified path.\nGet the file extension\nHow to get the file extension of the last component in a specified path.\nGet the base name of a file or folder\nHow to get the base name of a file or folder, in a specified path.\nThe FileSystemObject Object\nThe FileSystemObject object is used to access the file system on a server.\nThis object can manipulate files, folders, and directory paths. It is also possible to retrieve file system information with this object.\nThe following code creates a text file (c:\\test.txt) and then writes some text to the file:\nREMOVE ADS\nProperties\nMethods",
      "examples": [
        "<%\ndim fs,fname\nset fs=Server.CreateObject(\"Scripting.FileSystemObject\")\nset fname=fs.CreateTextFile(\"c:\\test.txt\",true)\nfname.WriteLine(\"Hello World!\")\nfname.Close\nset fname=nothing\nset fs=nothing\n%>"
      ]
    },
    {
      "title": "ASP TextStream Object",
      "summary": "The TextStream object is used to access the contents of a text file.\nMore Examples\nRead textfile\nHow to read from a text file.\nRead only a part of a textfile\nHow to only read a part of a TextStream file.\nRead one line of a textfile\nHow to read one line from a TextStream file.\nRead all lines from a textfile\nHow to read all the lines from a TextStream file.\nSkip a part of a textfile\nHow to skip a specified number of characters when reading the TextStream file.\nSkip a line of a textfile\nHow to skip a line when reading the TextStream file.\nReturn line-number\nHow to return the current line number in a TextStream file.\nGet column number\nHow to get the column number of the current character in a file.\nThe TextStream Object\nThe TextStream object is used to access the contents of text files.\nThe following code creates a text file (c:\\test.txt) and then writes some text to the file (the variable f is an instance of the TextStream object):\nREMOVE ADS\nTo create an instance of the TextStream object you can use the CreateTextFile or OpenTextFile methods of the FileSystemObject object, or you can use the OpenAsTextStream method of the File object.\nThe TextStream object's properties and methods are described below:\nProperties\nMethods",
      "examples": [
        "<%\ndim fs,f\nset fs=Server.CreateObject(\"Scripting.FileSystemObject\")\nset f=fs.CreateTextFile(\"c:\\test.txt\",true)\nf.WriteLine(\"Hello World!\")\nf.Close\nset f=nothing\nset fs=nothing\n%>"
      ]
    },
    {
      "title": "ASP Drive Object",
      "summary": "The Drive object is used to get information about a local disk drive or a network share.\nMore Examples\nGet the total size of a specified drive\nHow to get the total size of a specified drive.\nGet the available space of a specified drive\nHow to get the available space of a specified drive.\nGet the free space of a specified drive\nHow to get the free space of a specified drive.\nGet the drive letter of a specified drive\nHow to get the drive letter of a specified drive.\nGet the drive type of a specified drive\nHow to get the drive type of a specified drive.\nGet the file system of a specified drive\nHow to get the file system of a specified drive.\nIs the drive ready?\nHow to check whether a specified drive is ready.\nGet the path of a specified drive\nHow to get the path of a specified drive.\nGet the root folder of a specified drive\nHow to get the root folder of a specified drive.\nGet the serialnumber of a specified drive\nHow to get the serialnumber of a specified drive.\nREMOVE ADS\nThe Drive Object\nThe Drive object is used to return information about a local disk drive or a network share. The Drive object can return information about a drive's type of file system, free space, serial number, volume name, and more.\nNote: You cannot return information about a drive's content with the Drive object. For this purpose you will have to use the Folder object.\nTo work with the properties of the Drive object, you will have to create an instance of the Drive object through the FileSystemObject object. First; create a FileSystemObject object and then instantiate the Drive object through the GetDrive method or the Drives property of the FileSystemObject object.\nThe Drive object's properties are described below:\nProperties",
      "examples": []
    },
    {
      "title": "ASP File Object",
      "summary": "The File object is used to return information about a specified file.\nMore Examples\nWhen was the file last modified?\nHow to get the date and time a specified file was last modified.\nWhen was the file last accessed?\nHow to get the date and time a specified file was last accessed.\nReturn the attributes of a specified file\nHow to return the attributes of a specified file.\nThe File Object\nThe File object is used to return information about a specified file.\nTo work with the properties and methods of the File object, you will have to create an instance of the File object through the FileSystemObject object. First; create a FileSystemObject object and then instantiate the File object through the GetFile method of the FileSystemObject object or through the Files property of the Folder object.\nThe following code uses the GetFile method of the FileSystemObject object to instantiate the File object and the DateCreated property to return the date when the specified file was created:\nExample\nREMOVE ADS\nThe File object's properties and methods are described below:\nProperties\nMethods",
      "examples": [
        "<%\nDim fs,f\nSet fs=Server.CreateObject(\"Scripting.FileSystemObject\")\nSet f=fs.GetFile(\"c:\\test.txt\")\nResponse.Write(\"File created: \" & f.DateCreated)\nset f=nothing\nset fs=nothing\n%>"
      ]
    },
    {
      "title": "ASP Folder Object",
      "summary": "The Folder Object is used to return information about a specified folder.\nThe Folder Object\nThe Folder object is used to return information about a specified folder.\nTo work with the properties and methods of the Folder object, you will have to create an instance of the Folder object through the FileSystemObject object. First; create a FileSystemObject object and then instantiate the Folder object through the GetFolder method of the FileSystemObject object.\nThe following code uses the GetFolder method of the FileSystemObject object to instantiate the Folder object and the DateCreated property to return the date when the specified folder was created:\nThe Folder object's collections, properties, and methods are described below:\nCollections\nREMOVE ADS\nProperties\nMethods",
      "examples": [
        "<%\nDim fs,fo\nSet fs=Server.CreateObject(\"Scripting.FileSystemObject\")\nSet fo=fs.GetFolder(\"c:\\test\")\nResponse.Write(\"Folder created: \" & fo.DateCreated)\nset fo=nothing\nset fs=nothing\n%>\n\nOutput:\n\nFolder created: 10/22/2008 10:01:19 AM"
      ]
    },
    {
      "title": "ASP Dictionary Object",
      "summary": "The Dictionary object stores information in name/value pairs.\nMore Examples\nDoes a specified key exist?\nHow to create a Dictionary object, and then use the Exists method to check if a specified key exists.\nReturn an array of all items\nHow to use the Items method to return an array of all the items.\nReturn an array of all keys\nHow to use the Keys method to return an array of all the keys.\nReturn the value of an item\nHow to use the Item property to return the value of an item.\nSet a key\nHow to use the Key property to set a key in a Dictionary object.\nReturn the number of key/item pairs\nHow to use the Count property to return the number of key/item pairs.\nThe Dictionary Object\nThe Dictionary object is used to store information in name/value pairs (referred to as key and item). The Dictionary object might seem similar to Arrays, however, the Dictionary object is a more desirable solution to manipulate related data.\nComparing Dictionaries and Arrays:\nKeys are used to identify the items in a Dictionary object\nYou do not have to call ReDim to change the size of the Dictionary object\nWhen deleting an item from a Dictionary, the remaining items will automatically shift up\nDictionaries cannot be multidimensional, Arrays can\nDictionaries have more built-in functions than Arrays\nDictionaries work better than arrays on accessing random elements frequently\nDictionaries work better than arrays on locating items by their content\nThe following example creates a Dictionary object, adds some key/item pairs to it, and retrieves the item value for the key gr:\nREMOVE ADS\nThe Dictionary object's properties and methods are described below:\nProperties\nMethods",
      "examples": [
        "<%\nDim d\nSet d=Server.CreateObject(\"Scripting.Dictionary\")\nd.Add \"re\",\"Red\"\nd.Add \"gr\",\"Green\"\nd.Add \"bl\",\"Blue\"\nd.Add \"pi\",\"Pink\"\nResponse.Write(\"The value of key gr is: \" & d.Item(\"gr\"))\n%>\n\nOutput:\n\nThe value of key gr is: Green"
      ]
    },
    {
      "title": "ASP AdRotator Component",
      "summary": "ASP AdRotator Component\nThe ASP AdRotator component creates an AdRotator object that displays a different image each time a user enters or refreshes a page. A text file includes information about the images.\nNote: The AdRotator does not work with Internet Information Server 7 (IIS7).\nSyntax\nASP AdRotator Example\nAssume that we have the following text file, named \"ads.txt\":\nThe lines below the asterisk in the text file above specifies the name of the images (ads) to be displayed, the hyperlink addresses, the alternate text (for the images), and the display rates (in percent).\nThe first line in the text file above specifies what to happen when a visitor clicks on one of the images. The redirection page (banners.asp) will receive a querystring with the URL to redirect to.\nTip: To specify the height, width, and border of the image, you can insert the following lines under REDIRECT:\nThe \"banners.asp\" file looks like this:\nExample\nThat's all!!\nREMOVE ADS\nASP AdRotator Properties\nASP AdRotator Methods",
      "examples": [
        "<%\nset adrotator=server.createobject(\"MSWC.AdRotator\")\nadrotator.GetAdvertisement(\"textfile.txt\")\n%>",
        "REDIRECT banners.asp\n*\nw3s.gif\nhttps://www.w3schools.com\nFree Tutorials from W3Schools\n50\nxmlspy.gif\nhttps://www.altova.com\nXML Editor from Altova\n50",
        "REDIRECT banners.asp\nWIDTH 468\nHEIGHT 60\nBORDER 0\n*\nw3s.gif\n...",
        "<%\nurl=Request.QueryString(\"url\")\nIf url<>\"\" then Response.Redirect(url)\n%>\n\n<!DOCTYPE html>\n<html>\n<body>\n<%\nset adrotator=Server.CreateObject(\"MSWC.AdRotator\")\nresponse.write(adrotator.GetAdvertisement(\"textfile.txt\"))\n%>\n</body>\n</html>"
      ]
    },
    {
      "title": "ASP Browser Capabilities Component",
      "summary": "ASP Browser Capabilities Component\nThe ASP Browser Capabilities component creates a BrowserType object that determines the type, capabilities and version number of a visitor's browser.\nWhen a browser connects to a server, a User Agent header is also sent to the server. This header contains information about the browser.\nThe BrowserType object compares the information in the header with information in a file on the server called \"Browscap.ini\".\nIf there is a match between the browser type and version number in the header and the information in the \"Browscap.ini\" file, the BrowserType object can be used to list the properties of the matching browser. If there is no match for the browser type and version number in the Browscap.ini file, it will set every property to \"UNKNOWN\".\nSyntax\nASP Browser Capabilities Example\nThe example below creates a BrowserType object in an ASP file, and displays some of the capabilities of your browser:\nExample\nOutput:\nShow Example Â»\nREMOVE ADS\nThe Browscap.ini File\nThe \"Browscap.ini\" file is used to declare properties and to set default values for browsers.\nThis section is not a tutorial on how to maintain \"Browscap.ini\" files, it only shows you the basics; so you get an idea what the file is all about.\nThe \"Browscap.ini\" file can contain the following:\nActiveXControls - Support ActiveX controls?\nBackgroundsounds - Support background sounds?\nCdf - Support Channel Definition Format for Webcasting?\nTables - Support tables?\nCookies - Support cookies?\nFrames - Support frames?\nJavaapplets - Support Java applets?\nJavascript - Supports JScript?\nVbscript - Supports VBScript?\nBrowser - Specifies the name of the browser\nBeta - Is the browser beta software?\nPlatform - Specifies the platform that the browser runs on\nVersion - Specifies the version number of the browser\nA \"Browscap.ini\" file might look something like this:",
      "examples": [
        "<%\nSet MyBrow=Server.CreateObject(\"MSWC.BrowserType\")\n%>",
        "<!DOCTYPE html>\n<html>\n<body>\n<%\nSet MyBrow=Server.CreateObject(\"MSWC.BrowserType\")\n%>\n\n<table border=\"0\" width=\"100%\">\n<tr>\n<th>Client OS</th><th><%=MyBrow.platform%></th>\n</tr><tr>\n<td >Web Browser</td><td ><%=MyBrow.browser%></td>\n</tr><tr>\n<td>Browser version</td><td><%=MyBrow.version%></td>\n</tr><tr>\n<td>Frame support?</td><td><%=MyBrow.frames%></td>\n</tr><tr>\n<td>Table support?</td><td><%=MyBrow.tables%></td>\n</tr><tr>\n<td>Sound support?</td><td><%=MyBrow.backgroundsounds%></td>\n</tr><tr>\n<td>Cookies support?</td><td><%=MyBrow.cookies%></td>\n</tr><tr>\n<td>VBScript support?</td><td><%=MyBrow.vbscript%></td>\n</tr><tr>\n<td>JavaScript support?</td><td><%=MyBrow.javascript%></td>\n</tr>\n</table>\n\n</body>\n</html>",
        "[;comments]\n[HTTPUserAgentHeader]\n[parent=browserDefinition]\n[property1=value1]\n[propertyN=valueN]\n[Default Browser Capability Settings]\n[defaultProperty1=defaultValue1]\n[defaultPropertyN=defaultValueN]",
        ";IE 5.0\n[IE 5.0]\nbrowser=IE\nVersion=5.0\nmajorver=#5\nminorver=#0\nframes=TRUE\ntables=TRUE\ncookies=TRUE\nbackgroundsounds=TRUE\nvbscript=TRUE\njavascript=TRUE\njavaapplets=TRUE\nActiveXControls=TRUE\nbeta=False\n\n;DEFAULT BROWSER\n[*]\nbrowser=Default\nframes=FALSE\ntables=TRUE\ncookies=FALSE\nbackgroundsounds=FALSE\nvbscript=FALSE\njavascript=FALSE"
      ]
    },
    {
      "title": "ASP Content Linking Component",
      "summary": "More Examples\nThe Content Linking Component\nBuild a table of contents.\nThe Content Linking Component 2\nUse the Content Linking Component to navigate between the pages in a text file.\nASP Content Linking Component\nThe ASP Content Linking component is used to create a quick and easy navigation system!\nThe Content Linking component returns a Nextlink object that is used to hold a list of Web pages to be navigated.\nSyntax\nASP Content Linking Example\nFirst we create a text file - \"links.txt\":\nThe text file above contains the pages to be navigated. The pages must be listed in the same order you want them to be displayed, and it must also contain a description for each file name (use the tab key to separate file name from description).\nNote: If you want to add a page, or change the order of the pages in the list; you only have to modify the text file! The navigation will automatically be corrected!\nThen we create an include file, \"nlcode.inc\". The .inc file creates a NextLink object to navigate between the pages listed in \"links.txt\".\n\"nlcode.inc\":\nIn each of the .asp pages listed in the text file \"links.txt\", put one line of code: <!-- #include file=\"nlcode.inc\"-->. This line will include the code in \"nlcode.inc\" on every page listed in \"links.txt\" and the navigation will work.\nREMOVE ADS\nASP Content Linking Component's Methods\nOutput:\nThere are 4 items in the list\nOutput:\nItem number 3\nNext description is: ASP Variables\nNext URL is: asp_variables.asp\nThird description is: ASP Variables\nThird URL is: asp_variables.asp\nPrevious description is: ASP Variables\nPrevious URL is: asp_variables.asp",
      "examples": [
        "<%\nSet nl=Server.CreateObject(\"MSWC.NextLink\")\n%>",
        "asp_intro.asp ASP Intro\nasp_syntax.asp ASP Syntax\nasp_variables.asp ASP Variables\nasp_procedures.asp ASP Procedures",
        "<%\ndim nl\nSet nl=Server.CreateObject(\"MSWC.NextLink\")\nif (nl.GetListIndex(\"links.txt\")>1) then\nResponse.Write(\"<a href='\" & nl.GetPreviousURL(\"links.txt\"))\nResponse.Write(\"'>Previous Page</a>\")\nend if\nResponse.Write(\"<a href='\" & nl.GetNextURL(\"links.txt\"))\nResponse.Write(\"'>Next Page</a>\")\n%>"
      ]
    },
    {
      "title": "ASP Content Rotator Component (ASP 3.0)",
      "summary": "ASP Content Rotator Component\nThe ASP Content Rotator component creates a ContentRotator object that displays a different content string each time a visitor enters or refreshes a page.\nA text file, called the Content Schedule File, includes the information about the content strings.\nThe content strings can contain HTML tags so you can display any type of content that HTML can represent: text, images, colors, or hyperlinks.\nSyntax\nASP Content Rotator Example\nThe following example displays a different content each time a visitor views the Web page.\nFirst, create a text file named \"textads.txt\" and place it in a subfolder called \"text\".\n\"textads.txt\":\nNotice the #number at the beginning of each content string. This number is an optional parameter that indicates the relative weight of the HTML content string. In the text file above, the Content Rotator will display the first and second content string three-tenth of the time, and the third string four-tenths of the time.\nThen, create an ASP file, and insert the following code:\nExample\nREMOVE ADS\nASP Content Rotator Component's Methods\nOutput:\nOutput:\nThis is a great day!!\nVisit W3Schools.com",
      "examples": [
        "<%\nSet cr=Server.CreateObject(\"MSWC.ContentRotator\")\n%>",
        "%% #3\n<h2>This is a great day!!</h2>\n\n%% #3\n<img src=\"smiley.gif\">\n\n%% #4\n<a href=\"https://www.w3schools.com\">Visit W3Schools.com</a>",
        "<html>\n<body>\n<%\nset cr=server.createobject(\"MSWC.ContentRotator\")\nresponse.write(cr.ChooseContent(\"text/textads.txt\"))\n%>\n</body>\n</html>"
      ]
    },
    {
      "title": "ASP Quick Reference",
      "summary": "ASP Quick Reference from W3Schools. Print it, and fold it in your pocket.\nBasic Syntax\nASP scripts are surrounded by <% and %>.Â  To write some output to a browser:\n<html>\n<body>\n<% response.write(\"Hello World!\") %>\n</body>\n</html>\nThe default language in ASP is VBScript. To use another scripting language, insert a language specification at the top of the ASP page:\n<%@ language=\"javascript\" %>\n<html>\n<body>\n<%\n....\n%>\nForms and User Input\nRequest.QueryString is used to collect values in a form with method=\"get\". Information sent from a form with the GET method is visible to everyone (it will be displayed in the browser's address bar) and has limits on the amount of information to send.\nRequest.Form is used to collect values in a form with method=\"post\". Information sent from a form with the POST method is invisible to others and has no limits on the amount of information to send.\nASP Cookies\nA cookie is often used to identify a user. A cookie is a small file that the server embeds on the user's computer. Each time the same computer requests for a page with a browser, it will send the cookie too.\nThe Response.Cookies command is used to create cookies:\n<%\nResponse.Cookies(\"firstname\")=\"Alex\"\nResponse.Cookies(\"firstname\").Expires=\"May 10,2002\"\n%>\nNote: The Response.Cookies command must appear BEFORE the <html> tag!\nThe \"Request.Cookies\" command is used to retrieve a cookie value:\n<%\nfname=Request.Cookies(\"firstname\")\nresponse.write(\"Firstname=\" & fname)\n%>\nREMOVE ADS\nIncluding Files\nYou can insert the content of one ASP file into another ASP file before the server executes it, with the #include directive. The #include directive is used to create functions, headers, footers, or elements that will be reused on multiple pages\nSyntax:\n<!--#include virtual=\"somefile.inc\"-->\nor\n<!--#include file =\"somefile.inc\"-->\nUse the virtual keyword to indicate a path beginning with a virtual directory. If a file named \"header.inc\" resides in a virtual directory named /html, the following line would insert the contents of \"header.inc\":\n<!-- #include virtual =\"/html/header.inc\" -->\nUse the file keyword to indicate a relative path. A relative path begins with the directory that contains the including file. If you have a file in the html directory, and the file \"header.inc\" resides in html\\headers, the following line would insert \"header.inc\" in your file:\n<!-- #include file =\"headers\\header.inc\" -->\nUse the file keyword with the syntax (..\\) to include a file from a higher-level directory.\nGlobal.asa\nThe Global.asa file is an optional file that can contain declarations of objects, variables, and methods that can be accessed by every page in an ASP application.\nNote: The Global.asa file must be stored in the root directory of the ASP application, and each application can only have one Global.asa file.\nThe Global.asa file can contain only the following:\nApplication events\nSession events\n<object> declarations\nTypeLibrary declarations\nthe #include directive\nApplication and Session Events\nIn Global.asa you can tell the application and session objects what to do when the application/session starts and what to do when the application/session ends. The code for this is placed in event handlers. Note: We do not use <% and %>, to insert scripts in the Global.asa file, we have to put the subroutines inside the HTML <script> tag:\n<script language=\"vbscript\" runat=\"server\">\nsub Application_OnStart\n' some code\nend sub\nsub Application_OnEnd\n' some code\nend sub\nsub Session_OnStart\n' some code\nend sub\nsub Session_OnEnd\n' some code\nend sub\n</script>\n<object> Declarations\nIt is also possible to create objects with session or application scope in Global.asa by using the <object> tag. Note: The <object> tag should be outside the <script> tag!\nSyntax:\n<object runat=\"server\" scope=\"scope\" id=\"id\"\n{progid=\"progID\"|classid=\"classID\"}>\n.......\n</object>\nTypeLibrary Declarations\nA TypeLibrary is a container for the contents of a DLL file corresponding to a COM object. By including a call to the TypeLibrary in the Global.asa file, the constants of the COM object can be accessed, and errors can be better reported by the ASP code. If your Web application relies on COM objects that have declared data types in type libraries, you can declare the type libraries in Global.asa.\nSyntax:\n<!--METADATA TYPE=\"TypeLib\"\nfile=\"filename\"\nuuid=\"typelibraryuuid\"\nversion=\"versionnumber\"\nlcid=\"localeid\"\n-->\nThe Session Object\nThe Session object is used to store information about, or change settings for a user session. Variables stored in the Session object hold information about one single user, and are available to all pages in one application.\nCollections\nContents - Holds every item added to the session with script commands\nStaticObjects - Holds every object added to the session with the <object> tag, and a given session\nContents.Remove(item/index) - Deletes an item from the Contents collection\nContents.RemoveAll() - Deletes every item from the Contents collection\nProperties\nCodePage - Sets the code page that will be used to display dynamic content\nLCID - Sets the locale identifier that will be used to display dynamic content\nSessionID - Returns the session id\nTimeout - Sets the timeout for the session\nMethod\nAbandon - Kills every object in a session object\nApplication Object\nA group of ASP files that work together to perform some purpose is called an application. The Application object in ASP is used to tie these files together. All users share one Application object. The Application object should hold information that will be used by many pages in the application (like database connection information).\nCollections\nContents - Holds every item added to the application with script commands\nStaticObjects - Holds every object added to the application with the <object> tag\nContents.Remove - Deletes an item from a collection\nContents.RemoveAll - Deletes every item from a collection\nMethods\nLock - Prevents a user from changing the application object properties\nUnlock - Allows a user to change the application object properties\nThe Response Object\nThe Response Object is used to send output to the user from the server.\nCollection\nCookies(name) - Sets a cookie value. If the cookie does not exist, it will be created, and take the value that is specified\nProperties\nBuffer - Whether to buffer the output or not. When the output is buffered, the server will hold back the response until all of the server scripts have been processed, or until the script calls the Flush or End method. If this property is set, it should be before the <html> tag in the ASP file\nCacheControl - Sets whether proxy servers can cache the output or not. When set to Public, the output can be cached by a proxy server\nCharset(charset_name) - Sets the name of the character set (like \"ISO8859-1\") to the content type header\nContentType - Sets the HTTP content type (like \"text/html\", \"image/gif\", \"image/jpeg\", \"text/plain\"). Default is \"text/html\"\nExpires - Sets how long a page will be cached on a browser before it expires\nExpiresAbsolute - Sets a date and time when a page cached on a browser will expire\nIsClientConnected - Checks if the client is still connected to the server\nPics(pics_label) - Adds a value to the pics label response header\nStatus - Specifies the value of the status line\nMethods\nAddHeader(name, value) - Adds an HTML header with a specified value\nAppendToLog string - Adds a string to the end of the server log entry\nBinaryWrite(data_to_write) - Writes the given information without any character-set conversion\nClear - Clears the buffered output. Use this method to handle errors. If Response.Buffer is not set to true, this method will cause a run-time error\nEnd - Stops processing the script, and return the current result\nFlush - Sends buffered output immediately. If Response.Buffer is not set to true, this method will cause a run-time error\nRedirect(url) - Redirects the user to another url\nWrite(data_to_write) - Writes a text to the user\nRequest Object\nWhen a browser asks for a page from a server, it is called a request. The Request Object is used to get information from the user.\nCollection\nClientCertificate - Holds field values stored in the client certificate\nCookies(name) - Holds cookie values\nForm(element_name) - Holds form (input) values. The form must use the post method\nQueryString(variable_name) - Holds variable values in the query string\nServerVariables(server_variable) - Holds server variable values\nProperty\nTotalBytes - Holds the total number of bytes the client is sending in the body of the request\nMethod\nBinaryRead - Fetches the data that is sent to the server from the client as part of a post request\nServer Object\nThe Server Object is used to access properties and methods on the server.\nProperty\nScriptTimeout - Sets how long a script can run before it is terminated\nMethod\nCreateObject(type_of_object) - Creates an instance of an object\nExecute(path) - Executes an ASP file from inside another ASP file. After executing the called ASP file, the control is returned to the original ASP file\nGetLastError() - Returns an ASPError object that will describe the error that occurred\nHTMLEncode(string) - Applies HTML encoding to a string\nMapPath(path) - Maps a relative or virtual path to a physical path\nTransfer(path) - Sends all of the state information to another ASP file for processing. After the transfer, procedural control is not returned to the original ASP file\nURLEncode(string) - Applies URL encoding rules to a string\nSource : https://www.w3schools.com/asp/asp_quickref.asp",
      "examples": []
    },
    {
      "title": "ADO Introduction",
      "summary": "ADO can be used to access databases from your web pages.\nWhat you should already know\nBefore you continue you should have a basic understanding of the following:\nHTML\nASP\nSQL\nIf you want to study these subjects first, go to our Home page\nWhat is ADO?\nADO is a Microsoft technology\nADO stands for ActiveX Data Objects\nADO is a Microsoft Active-X component\nADO is automatically installed with Microsoft IIS\nADO is a programming interface to access data in a database\nAccessing a Database from an ASP Page\nThe common way to access a database from inside an ASP page is to:\nCreate an ADO connection to a database\nOpen the database connection\nCreate an ADO recordset\nOpen the recordset\nExtract the data you need from the recordset\nClose the recordset\nClose the connection",
      "examples": []
    },
    {
      "title": "ADO Database Connection",
      "summary": "Before a database can be accessed from a web page, a database connection has to be established.\nCreate a DSN-less Database Connection\nThe easiest way to connect to a database is to use a DSN-less connection. A DSN-less connection can be used against any Microsoft Access database on your web site.\nIf you have a database called \"northwind.mdb\" located in a web directory like \"c:/webdata/\", you can connect to the database with the following ASP code:\nNote, from the example above, that you have to specify the Microsoft Access database driver (Provider) and the physical path to the database on your computer.\nCreate an ODBC Database Connection\nIf you have an ODBC database called \"northwind\" you can connect to the database with the following ASP code:\nWith an ODBC connection, you can connect to any database, on any computer in your network, as long as an ODBC connection is available.\nAn ODBC Connection to an MS Access Database\nHere is how to create a connection to a MS Access Database:\nOpen the ODBC icon in your Control Panel.\nChoose the System DSN tab.\nClick on Add in the System DSN tab.\nSelect the Microsoft Access Driver. Click Finish.\nIn the next screen, click Select to locate the database.\nGive the database a Data Source Name (DSN).\nClick OK.\nNote that this configuration has to be done on the computer where your web site is located. If you are running Personal Web Server (PWS) or Internet Information Server (IIS) on your own computer, the instructions above will work, but if your web site is located on a remote server, you have to have physical access to that server, or ask your web host to do this for you.\nThe ADO Connection Object\nThe ADO Connection object is used to create an open connection to a data source.Â Through this connection, you can access and manipulate a database.\nView all methods and properties of the Connection object.",
      "examples": [
        "<%\nset conn=Server.CreateObject(\"ADODB.Connection\")\nconn.Provider=\"Microsoft.Jet.OLEDB.4.0\"\nconn.Open \"c:/webdata/northwind.mdb\"\n%>",
        "<%\nset conn=Server.CreateObject(\"ADODB.Connection\")\nconn.Open \"northwind\"\n%>"
      ]
    },
    {
      "title": "ADO Recordset",
      "summary": "To be able to read database data, the data must first be loaded into a recordset.\nCreate an ADO Table Recordset\nAfter an ADO Database Connection has been created, as demonstrated in the previous chapter, it is possible to create an ADO Recordset.\nSuppose we have a database named \"Northwind\", we can get access to the \"Customers\" table inside the database with the following lines:\nCreate an ADO SQL Recordset\nWe can also get access to the data in the \"Customers\" table using SQL:\nExtract Data from the Recordset\nAfter a recordset is opened, we can extract data from recordset.\nSuppose we have a database named \"Northwind\", we can get access to the \"Customers\" table inside the database with the following lines:\nThe ADO Recordset Object\nThe ADO Recordset object is used to hold a set of records from a database table.\nView all methods and properties of the Recordset object.",
      "examples": [
        "<%\nset conn=Server.CreateObject(\"ADODB.Connection\")\nconn.Provider=\"Microsoft.Jet.OLEDB.4.0\"\nconn.Open \"c:/webdata/northwind.mdb\"\n\nset rs=Server.CreateObject(\"ADODB.recordset\")\nrs.Open \"Customers\", conn\n%>",
        "<%\nset conn=Server.CreateObject(\"ADODB.Connection\")\nconn.Provider=\"Microsoft.Jet.OLEDB.4.0\"\nconn.Open \"c:/webdata/northwind.mdb\"\n\nset rs=Server.CreateObject(\"ADODB.recordset\")\nrs.Open \"Select * from Customers\", conn\n%>",
        "<%\nset conn=Server.CreateObject(\"ADODB.Connection\")\nconn.Provider=\"Microsoft.Jet.OLEDB.4.0\"\nconn.Open \"c:/webdata/northwind.mdb\"\n\nset rs=Server.CreateObject(\"ADODB.recordset\")\nrs.Open \"Select * from Customers\", conn\n\nfor each x in rs.fields\nresponse.write(x.name)\nresponse.write(\" = \")\nresponse.write(x.value)\nnext\n%>"
      ]
    },
    {
      "title": "ADO Display Data",
      "summary": "A common way to display data from a recordset, is to display the data in an HTML table.\nDisplay the Field Names and Field Values\nWe have a database named \"Northwind\" and we want to display the data from the \"Customers\" table (remember to save the file with an .asp extension):\nREMOVE ADS\nDisplay the Data in an HTML Table\nWe can also display the data from the \"Customers\" table inside an HTML table with the following lines (remember to save the file with an .asp extension):\nAdd Headers to the HTML Table\nWe want to add headers to the HTML table to make it more readable (remember to save the file with an .asp extension):\nAdd Colors to the HTML Table\nWe want to add colors to the HTML table to make it look nice (remember to save the file with an .asp extension):",
      "examples": [
        "<html>\n<body>\n\n<%\nset conn=Server.CreateObject(\"ADODB.Connection\")\nconn.Provider=\"Microsoft.Jet.OLEDB.4.0\"\nconn.Open \"c:/webdata/northwind.mdb\"\n\nset rs = Server.CreateObject(\"ADODB.recordset\")\nrs.Open \"SELECT * FROM Customers\", conn\n\ndo until rs.EOF\nfor each x in rs.Fields\nResponse.Write(x.name)\nResponse.Write(\" = \")\nResponse.Write(x.value & \"<br>\")\nnext\nResponse.Write(\"<br>\")\nrs.MoveNext\nloop\n\nrs.close\nconn.close\n%>\n\n</body>\n</html>",
        "<html>\n<body>\n\n<%\nset conn=Server.CreateObject(\"ADODB.Connection\")\nconn.Provider=\"Microsoft.Jet.OLEDB.4.0\"\nconn.Open \"c:/webdata/northwind.mdb\"\n\nset rs = Server.CreateObject(\"ADODB.recordset\")\nrs.Open \"SELECT Companyname, Contactname FROM Customers\", conn\n%>\n\n<table border=\"1\" width=\"100%\">\n<%do until rs.EOF%>\n<tr>\n<%for each x in rs.Fields%>\n<td><%Response.Write(x.value)%></td>\n<%next\nrs.MoveNext%>\n</tr>\n<%loop\nrs.close\nconn.close\n%>\n</table>\n\n</body>\n</html>",
        "<html>\n<body>\n\n<%\nset conn=Server.CreateObject(\"ADODB.Connection\")\nconn.Provider=\"Microsoft.Jet.OLEDB.4.0\"\nconn.Open \"c:/webdata/northwind.mdb\"\n\nset rs = Server.CreateObject(\"ADODB.recordset\")\nsql=\"SELECT Companyname, Contactname FROM Customers\"\nrs.Open sql, conn\n%>\n\n<table border=\"1\" width=\"100%\">\n<tr>\n<%for each x in rs.Fields\nresponse.write(\"<th>\" & x.name & \"</th>\")\nnext%>\n</tr>\n<%do until rs.EOF%>\n<tr>\n<%for each x in rs.Fields%>\n<td><%Response.Write(x.value)%></td>\n<%next\nrs.MoveNext%>\n</tr>\n<%loop\nrs.close\nconn.close\n%>\n</table>\n\n</body>\n</html>",
        "<html>\n<body>\n\n<%\nset conn=Server.CreateObject(\"ADODB.Connection\")\nconn.Provider=\"Microsoft.Jet.OLEDB.4.0\"\nconn.Open \"c:/webdata/northwind.mdb\"\n\nset rs = Server.CreateObject(\"ADODB.recordset\")\nsql=\"SELECT Companyname, Contactname FROM Customers\"\nrs.Open sql, conn\n%>\n\n<table border=\"1\" style=\"width:100%;background-color:#fff5ee;\">\n<tr>\n<%for each x in rs.Fields\nresponse.write(\"<th style='text-align:left;background-color:#b0c4de;'>\" & x.name & \"</th>\")\nnext%>\n</tr>\n<%do until rs.EOF%>\n<tr>\n<%for each x in rs.Fields%>\n<td><%Response.Write(x.value)%></td>\n<%next\nrs.MoveNext%>\n</tr>\n<%loop\nrs.close\nconn.close\n%>\n</table>\n\n</body>\n</html>"
      ]
    },
    {
      "title": "ADO Query Data",
      "summary": "We may use SQL to create queries to specify only a selection of records (and fields) to view.\nDisplay Selected Data\nDisplay companies that starts with \"A\"\nHere we want to display only the records from the \"Customers\" table that have a \"Companyname\" that starts with \"A\" (remember to save the file with an .asp extension):\nDisplay customers from Spain\nHere we want to display only the customers from Spain (remember to save the file with an .asp extension):\nCreate a filter for the user\nHere we want to create a filter and let the user choose which country to show customers from (remember to save the file with an .asp extension):",
      "examples": [
        "<html>\n<body>\n\n<%\nset conn=Server.CreateObject(\"ADODB.Connection\")\nconn.Provider=\"Microsoft.Jet.OLEDB.4.0\"\nconn.Open \"c:/webdata/northwind.mdb\"\n\nset rs=Server.CreateObject(\"ADODB.recordset\")\nsql=\"SELECT Companyname, Contactname FROM Customers WHERE CompanyName LIKE 'A%'\"\nrs.Open sql, conn\n%>\n\n<table border=\"1\" width=\"100%\">\n<tr>\n<%for each x in rs.Fields\nresponse.write(\"<th>\" & x.name & \"</th>\")\nnext%>\n</tr>\n<%do until rs.EOF%>\n<tr>\n<%for each x in rs.Fields%>\n<td><%Response.Write(x.value)%></td>\n<%next\nrs.MoveNext%>\n</tr>\n<%loop\nrs.close\nconn.close%>\n</table>\n\n</body>\n</html>",
        "<html>\n<body>\n\n<%\nset conn=Server.CreateObject(\"ADODB.Connection\")\nconn.Provider=\"Microsoft.Jet.OLEDB.4.0\"\nconn.Open \"c:/webdata/northwind.mdb\"\n\nset rs=Server.CreateObject(\"ADODB.recordset\")\nsql=\"SELECT Companyname, Contactname FROM Customers WHERE Country='Spain'\"\nrs.Open sql, conn\n%>\n\n<table border=\"1\" width=\"100%\">\n<tr>\n<%for each x in rs.Fields\nresponse.write(\"<th>\" & x.name & \"</th>\")\nnext%>\n</tr>\n<%do until rs.EOF%>\n<tr>\n<%for each x in rs.Fields%>\n<td><%Response.Write(x.value)%> </td>\n<%next\nrs.MoveNext%>\n</tr>\n<%loop\nrs.close\nconn.close\n%>\n</table>\n\n</body>\n</html>",
        "<html>\n<body>\n\n<%\nset conn=Server.CreateObject(\"ADODB.Connection\")\nconn.Provider=\"Microsoft.Jet.OLEDB.4.0\"\nconn.Open \"c:/webdata/northwind.mdb\"\n\nset rs=Server.CreateObject(\"ADODB.recordset\")\nsql=\"SELECT DISTINCT Country FROM Customers ORDER BY Country\"\nrs.Open sql, conn\n\ncountry=request.form(\"country\")\n%>\n\n<form method=\"post\">\nChoose Country <select name=\"country\">\n<% do until rs.EOF\nresponse.write(\"<option\")\nif rs.fields(\"country\")=country then\nresponse.write(\" selected\")\nend if\nresponse.write(\">\")\nresponse.write(rs.fields(\"Country\"))\nrs.MoveNext\nloop\nrs.Close\nset rs=Nothing %>\n</select>\n<input type=\"submit\" value=\"Show customers\">\n</form>\n\n<%\nif country<>\"\" then\nsql=\"SELECT Companyname,Contactname,Country FROM Customers WHERE country='\" & country & \"'\"\nset rs=Server.CreateObject(\"ADODB.Recordset\")\nrs.Open sql,conn\n%>\n\n<table width=\"100%\" cellspacing=\"0\" cellpadding=\"2\" border=\"1\">\n<tr>\n<th>Companyname</th>\n<th>Contactname</th>\n<th>Country</th>\n</tr>\n\n<%\ndo until rs.EOF\nresponse.write(\"<tr>\")\nresponse.write(\"<td>\" & rs.fields(\"companyname\") & \"</td>\")\nresponse.write(\"<td>\" & rs.fields(\"contactname\") & \"</td>\")\nresponse.write(\"<td>\" & rs.fields(\"country\") & \"</td>\")\nresponse.write(\"</tr>\")\nrs.MoveNext\nloop\nrs.close\nconn.Close\nset rs=Nothing\nset conn=Nothing%>\n</table>\n<% end if %>\n\n</body>\n</html>"
      ]
    },
    {
      "title": "ADO Sort Data",
      "summary": "We may use SQL to specify how to sort the data in the record set.\nSort the Data\nHere we want to display the \"Companyname\" and \"Contactname\" fields from the \"Customers\" table, ordered by \"Companyname\" (remember to save the file with an .asp extension):\nHere we want to display the \"Companyname\" and \"Contactname\" fields from the \"Customers\" table, ordered descending by \"Companyname\" (remember to save the file with an .asp extension):",
      "examples": [
        "<html>\n<body>\n\n<%\nset conn=Server.CreateObject(\"ADODB.Connection\")\nconn.Provider=\"Microsoft.Jet.OLEDB.4.0\"\nconn.Open \"c:/webdata/northwind.mdb\"\n\nset rs = Server.CreateObject(\"ADODB.recordset\")\nsql=\"SELECT Companyname, Contactname FROM Customers ORDER BY CompanyName\"\nrs.Open sql, conn\n%>\n\n<table border=\"1\" width=\"100%\">\n<tr>\n<%for each x in rs.Fields\nresponse.write(\"<th>\" & x.name & \"</th>\")\nnext%>\n</tr>\n<%do until rs.EOF%>\n<tr>\n<%for each x in rs.Fields%>\n<td><%Response.Write(x.value)%></td>\n<%next\nrs.MoveNext%>\n</tr>\n<%loop\nrs.close\nconn.close%>\n</table>\n\n</body>\n</html>",
        "<html>\n<body>\n\n<%\nset conn=Server.CreateObject(\"ADODB.Connection\")\nconn.Provider=\"Microsoft.Jet.OLEDB.4.0\"\nconn.Open \"c:/webdata/northwind.mdb\"\n\nset rs = Server.CreateObject(\"ADODB.recordset\")\nsql=\"SELECT Companyname, Contactname FROM Customers ORDER BY CompanyName DESC\"\nrs.Open sql, conn\n%>\n\n<table border=\"1\" width=\"100%\">\n<tr>\n<%for each x in rs.Fields\nresponse.write(\"<th>\" & x.name & \"</th>\")\nnext%>\n</tr>\n<%do until rs.EOF%>\n<tr>\n<%for each x in rs.Fields%>\n<td><%Response.Write(x.value)%></td>\n<%next\nrs.MoveNext%>\n</tr>\n<%loop\nrs.close\nconn.close%>\n</table>\n\n</body>\n</html>"
      ]
    },
    {
      "title": "ADO Add Records",
      "summary": "We may use the SQL INSERT INTO command to add a record to a table in a database.\nAdd a Record to a Table in a Database\nWe want to add a new record to the Customers table in the Northwind database. We first create a form that contains the fields we want to collect data from:\nREMOVE ADS\nWhen the user presses the submit button the form is sent to a file called \"demo_add.asp\". The \"demo_add.asp\" file contains the code that will add a new record to the Customers table:\nImportant\nIf you use the SQL INSERT command be aware of the following:\nIf the table contains a primary key, make sure to append a unique, non-Null value to the primary key field (if not, the provider may not append the record, or an error occurs)\nIf the table contains an AutoNumber field, do not include this field in the SQL INSERT command (the value of this field will be taken care of automatically by the provider)\nWhat about Fields With no Data?\nIn a MS Access database, you can enter zero-length strings (\"\") in Text, Hyperlink, and Memo fields IF you set the AllowZeroLength property to Yes.\nNote: Not all databases support zero-length strings and may cause an error when a record with blank fields is added. It is important to check what data types your database supports.",
      "examples": [
        "<html>\n<body>\n\n<form method=\"post\" action=\"demo_add.asp\">\n<table>\n<tr>\n<td>CustomerID:</td>\n<td><input name=\"custid\"></td>\n</tr><tr>\n<td>Company Name:</td>\n<td><input name=\"compname\"></td>\n</tr><tr>\n<td>Contact Name:</td>\n<td><input name=\"contname\"></td>\n</tr><tr>\n<td>Address:</td>\n<td><input name=\"address\"></td>\n</tr><tr>\n<td>City:</td>\n<td><input name=\"city\"></td>\n</tr><tr>\n<td>Postal Code:</td>\n<td><input name=\"postcode\"></td>\n</tr><tr>\n<td>Country:</td>\n<td><input name=\"country\"></td>\n</tr>\n</table>\n<br><br>\n<input type=\"submit\" value=\"Add New\">\n<input type=\"reset\" value=\"Cancel\">\n</form>\n\n</body>\n</html>",
        "<html>\n<body>\n\n<%\nset conn=Server.CreateObject(\"ADODB.Connection\")\nconn.Provider=\"Microsoft.Jet.OLEDB.4.0\"\nconn.Open \"c:/webdata/northwind.mdb\"\n\nsql=\"INSERT INTO customers (customerID,companyname,\"\nsql=sql & \"contactname,address,city,postalcode,country)\"\nsql=sql & \" VALUES \"\nsql=sql & \"('\" & Request.Form(\"custid\") & \"',\"\nsql=sql & \"'\" & Request.Form(\"compname\") & \"',\"\nsql=sql & \"'\" & Request.Form(\"contname\") & \"',\"\nsql=sql & \"'\" & Request.Form(\"address\") & \"',\"\nsql=sql & \"'\" & Request.Form(\"city\") & \"',\"\nsql=sql & \"'\" & Request.Form(\"postcode\") & \"',\"\nsql=sql & \"'\" & Request.Form(\"country\") & \"')\"\n\non error resume next\nconn.Execute sql,recaffected\nif err<>0 then\nResponse.Write(\"No update permissions!\")\nelse\nResponse.Write(\"<h3>\" & recaffected & \" record added</h3>\")\nend if\nconn.close\n%>\n\n</body>\n</html>"
      ]
    },
    {
      "title": "ADO Update Records",
      "summary": "We may use the SQL UPDATE command to update a record in a table in a database.\nUpdate a Record in a Table\nWe want to update a record in the Customers table in the Northwind database. We first create a table that lists all records in the Customers table:\nREMOVE ADS\nIf the user clicks on the button in the \"customerID\" column he or she will be taken to a new file called \"demo_update.asp\". The \"demo_update.asp\" file contains the source code on how to create input fields based on the fields from one record in the database table. It also contains a \"Update record\" button that will save your changes:",
      "examples": [
        "<html>\n<body>\n<%\nset conn=Server.CreateObject(\"ADODB.Connection\")\nconn.Provider=\"Microsoft.Jet.OLEDB.4.0\"\nconn.Open \"c:/webdata/northwind.mdb\"\nset rs=Server.CreateObject(\"ADODB.Recordset\")\nrs.open \"SELECT * FROM customers\",conn\n%>\n\n<h2>List Database</h2>\n<table border=\"1\" width=\"100%\">\n<tr>\n<%\nfor each x in rs.Fields\nresponse.write(\"<th>\" & ucase(x.name) & \"</th>\")\nnext\n%>\n</tr>\n<% do until rs.EOF %>\n<tr>\n<form method=\"post\" action=\"demo_update.asp\">\n<%\nfor each x in rs.Fields\nif lcase(x.name)=\"customerid\" then%>\n<td>\n<input type=\"submit\" name=\"customerID\" value=\"<%=x.value%>\">\n</td>\n<%else%>\n<td><%Response.Write(x.value)%></td>\n<%end if\nnext\n%>\n</form>\n<%rs.MoveNext%>\n</tr>\n<%\nloop\nconn.close\n%>\n</table>\n\n</body>\n</html>",
        "<html>\n<body>\n\n<h2>Update Record</h2>\n<%\nset conn=Server.CreateObject(\"ADODB.Connection\")\nconn.Provider=\"Microsoft.Jet.OLEDB.4.0\"\nconn.Open \"c:/webdata/northwind.mdb\"\n\ncid=Request.Form(\"customerID\")\n\nif Request.form(\"companyname\")=\"\" then\nset rs=Server.CreateObject(\"ADODB.Recordset\")\nrs.open \"SELECT * FROM customers WHERE customerID='\" & cid & \"'\",conn\n%>\n<form method=\"post\" action=\"demo_update.asp\">\n<table>\n<%for each x in rs.Fields%>\n<tr>\n<td><%=x.name%></td>\n<td><input name=\"<%=x.name%>\" value=\"<%=x.value%>\"></td>\n<%next%>\n</tr>\n</table>\n<br><br>\n<input type=\"submit\" value=\"Update record\">\n</form>\n<%\nelse\nsql=\"UPDATE customers SET \"\nsql=sql & \"companyname='\" & Request.Form(\"companyname\") & \"',\"\nsql=sql & \"contactname='\" & Request.Form(\"contactname\") & \"',\"\nsql=sql & \"address='\" & Request.Form(\"address\") & \"',\"\nsql=sql & \"city='\" & Request.Form(\"city\") & \"',\"\nsql=sql & \"postalcode='\" & Request.Form(\"postalcode\") & \"',\"\nsql=sql & \"country='\" & Request.Form(\"country\") & \"'\"\nsql=sql & \" WHERE customerID='\" & cid & \"'\"\non error resume next\nconn.Execute sql\nif err<>0 then\nresponse.write(\"No update permissions!\")\nelse\nresponse.write(\"Record \" & cid & \" was updated!\")\nend if\nend if\nconn.close\n%>\n\n</body>\n</html>"
      ]
    },
    {
      "title": "ADO Delete Records",
      "summary": "We may use the SQL DELETE command to delete a record in a table in a database.\nDelete a Record in a Table\nWe want to delete a record in the Customers table in the Northwind database. We first create a table that lists all records in the Customers table:\nREMOVE ADS\nIf the user clicks on the button in the \"customerID\" column he or she will be taken to a new file called \"demo_delete.asp\". The \"demo_delete.asp\" file contains the source code on how to create input fields based on the fields from one record in the database table. It also contains a \"Delete record\" button that will delete the current record:",
      "examples": [
        "<html>\n<body>\n<%\nset conn=Server.CreateObject(\"ADODB.Connection\")\nconn.Provider=\"Microsoft.Jet.OLEDB.4.0\"\nconn.Open \"c:/webdata/northwind.mdb\"\nset rs=Server.CreateObject(\"ADODB.Recordset\")\nrs.open \"SELECT * FROM customers\",conn\n%>\n\n<h2>List Database</h2>\n<table border=\"1\" width=\"100%\">\n<tr>\n<%\nfor each x in rs.Fields\nresponse.write(\"<th>\" & ucase(x.name) & \"</th>\")\nnext\n%>\n</tr>\n<% do until rs.EOF %>\n<tr>\n<form method=\"post\" action=\"demo_delete.asp\">\n<%\nfor each x in rs.Fields\nif x.name=\"customerID\" then%>\n<td>\n<input type=\"submit\" name=\"customerID\" value=\"<%=x.value%>\">\n</td>\n<%else%>\n<td><%Response.Write(x.value)%></td>\n<%end if\nnext\n%>\n</form>\n<%rs.MoveNext%>\n</tr>\n<%\nloop\nconn.close\n%>\n</table>\n\n</body>\n</html>",
        "<html>\n<body>\n\n<h2>Delete Record</h2>\n<%\nset conn=Server.CreateObject(\"ADODB.Connection\")\nconn.Provider=\"Microsoft.Jet.OLEDB.4.0\"\nconn.Open \"c:/webdata/northwind.mdb\"\n\ncid=Request.Form(\"customerID\")\n\nif Request.form(\"companyname\")=\"\" then\nset rs=Server.CreateObject(\"ADODB.Recordset\")\nrs.open \"SELECT * FROM customers WHERE customerID='\" & cid & \"'\",conn\n%>\n<form method=\"post\" action=\"demo_delete.asp\">\n<table>\n<%for each x in rs.Fields%>\n<tr>\n<td><%=x.name%></td>\n<td><input name=\"<%=x.name%>\" value=\"<%=x.value%>\"></td>\n<%next%>\n</tr>\n</table>\n<br><br>\n<input type=\"submit\" value=\"Delete record\">\n</form>\n<%\nelse\nsql=\"DELETE FROM customers\"\nsql=sql & \" WHERE customerID='\" & cid & \"'\"\non error resume next\nconn.Execute sql\nif err<>0 then\nresponse.write(\"No update permissions!\")\nelse\nresponse.write(\"Record \" & cid & \" was deleted!\")\nend if\nend if\nconn.close\n%>\n\n</body>\n</html>"
      ]
    },
    {
      "title": "ADO Command Object",
      "summary": "Command Object\nThe ADO Command object is used to execute a single query against a database. The query can perform actions like creating, adding, retrieving, deleting or updating records.\nIf the query is used to retrieve data, the data will be returned as a RecordSet object. This means that the retrieved data can be manipulated by properties, collections, methods, and events of the Recordset object.\nThe major feature of the Command object is the ability to use stored queries and procedures with parameters.\nProgID\nProperties\nMethods\nCollections",
      "examples": [
        "set objCommand=Server.CreateObject(\"ADODB.command\")"
      ]
    },
    {
      "title": "ADO Connection Object",
      "summary": "Connection Object\nThe ADO Connection Object is used to create an open connection to a data source.Â Through this connection, you can access and manipulate a database.\nIf you want to access a database multiple times, you should establish a connection using the Connection object. You can also make a connection to a database by passing a connection string via a Command or Recordset object. However, this type of connection is only good for one specific, single query.\nProgID\nProperties\nREMOVE ADS\nMethods\nEvents\nNote:Â  You cannot handle events using VBScript or JScript (only Visual Basic, Visual C++, and Visual J++ languages can handle events).\nCollections",
      "examples": [
        "set objConnection=Server.CreateObject(\"ADODB.connection\")"
      ]
    },
    {
      "title": "ADO Error Object",
      "summary": "Error Object\nThe ADO Error object contains details about data access errors that have been generated during a single operation.\nADO generates one Error object for each error. Each Error object contains details of the specific error, and are stored in the Errors collection. To access the errors, you must refer to a specific connection.\nTo loop through the Errors collection:\nSyntax\nProperties",
      "examples": [
        "<%\nfor each objErr in objConn.Errors\nresponse.write(\"<p>\")\nresponse.write(\"Description: \")\nresponse.write(objErr.Description & \"<br>\")\nresponse.write(\"Help context: \")\nresponse.write(objErr.HelpContext & \"<br>\")\nresponse.write(\"Help file: \")\nresponse.write(objErr.HelpFile & \"<br>\")\nresponse.write(\"Native error: \")\nresponse.write(objErr.NativeError & \"<br>\")\nresponse.write(\"Error number: \")\nresponse.write(objErr.Number & \"<br>\")\nresponse.write(\"Error source: \")\nresponse.write(objErr.Source & \"<br>\")\nresponse.write(\"SQL state: \")\nresponse.write(objErr.SQLState & \"<br>\")\nresponse.write(\"</p>\")\nnext\n%>",
        "objErr.property"
      ]
    },
    {
      "title": "ADO Field Object",
      "summary": "Field Object\nThe ADO Field object contains information about a column in a Recordset object. There is one Field object for each column in the Recordset.\nProgID\nProperties\nMethods\nCollections",
      "examples": [
        "set objField=Server.CreateObject(\"ADODB.field\")"
      ]
    },
    {
      "title": "ADO Parameter Object",
      "summary": "Parameter Object\nThe ADO Parameter object provides information about a single parameter used in a stored procedure or query.\nA Parameter object is added to the Parameters Collection when it is created. The Parameters Collection is associated with a specific Command object, which uses the Collection to pass parameters in and out of stored procedures and queries.\nParameters can be used to create Parameterized Commands. These commands are (after they have been defined and stored) using parameters to alter some details of the command before it is executed. For example, an SQL SELECT statement could use a parameter to define the criteria of a WHERE clause.\nThere are four types of parameters: input parameters, output parameters, input/output parameters and return parameters.\nSyntax\nProperties\nMethods",
      "examples": [
        "objectname.property\nobjectname.method"
      ]
    },
    {
      "title": "ADO Property Object",
      "summary": "Property Object\nThe ADO Property object represents a dynamic characteristic of an ADO object that is defined by the provider.\nEach provider that talks with ADO has different ways of interacting with ADO. Therefore, ADO needs to store information about the provider in some way. The solution is that the provider gives specific information (dynamic properties) to ADO. ADO stores each provider property in a Property object that is again stored in the Properties Collection. The Collection is assigned to either a Command object, Connection object, Field object, or a Recordset object.\nProgID\nProperties",
      "examples": [
        "set objProperty=Server.CreateObject(\"ADODB.property\")"
      ]
    },
    {
      "title": "ADO Record Object",
      "summary": "Record Object (ADO version 2.5)\nThe ADO Record object is used to hold a row in a Recordset, a directory, or a file from a file system.\nOnly structured databases could be accessed by ADO in versions prior 2.5. In a structured database, each table has the exact same number of columns in each row, and each column is composed of the same data type.\nThe Record object allows access to data-sets where the number of columns and/or the data type can be different from row to row.\nSyntax\nProperties\nMethods\nREMOVE ADS\nCollections\nThe Fields Collection's Properties\nExample:\ncountfields=rec.Fields.Count\nExample:\nitemfields=rec.Fields.Item(1)\nor\nitemfields = rec.Fields.Item(\"Name\")",
      "examples": [
        "objectname.property\nobjectname.method"
      ]
    },
    {
      "title": "ADO Recordset Object",
      "summary": "Recordset Object\nThe ADO Recordset object is used to hold a set of records from a database table. A Recordset object consist of records and columns (fields).\nIn ADO, this object is the most important and the one used most often to manipulate data from a database.\nProgID\nRecordset objects can support two types of updating:\nImmediate updating - all changes are written immediately to the database once you call the Update method.\nBatch updating - the provider will cache multiple changes and then send them to the database with the UpdateBatch method.\nIn ADO there are 4 different cursor types defined:\nDynamic cursor - Allows you to see additions, changes, and deletions by other users.\nKeyset cursor - Like a dynamic cursor, except that you cannot see additions by other users, and it prevents access to records that other users have deleted. Data changes by other users will still be visible.\nStatic cursor - Provides a static copy of a recordset for you to use to find data or generate reports. Additions, changes, or deletions by other users will not be visible. This is the only type of cursor allowed when you open a client-side Recordset object.\nForward-only cursor - Allows you to only scroll forward through the Recordset. Additions, changes, or deletions by other users will not be visible.\nThe cursor type can be set by the CursorType property or by the CursorType parameter in the Open method.\nNote: Not all providers support all methods or properties of the Recordset object.\nREMOVE ADS\nProperties\nMethods\nCancels changes made to a record of a Recordset object\nEvents\nNote:Â  You cannot handle events using VBScript or JScript (only Visual Basic, Visual C++, and Visual J++ languages can handle events).\nCollections\nThe Fields Collection's Properties\nExample:\ncountfields=rs.Fields.Count\nExample:\nitemfields=rs.Fields.Item(1)\nor\nitemfields=rs.Fields.Item(\"Name\")\nThe Properties Collection's Properties\nExample:\ncountprop=rs.Properties.Count\nExample:\nitemprop = rs.Properties.Item(1)\nor\nitemprop=rs.Properties.Item(\"Name\")",
      "examples": [
        "set objRecordset=Server.CreateObject(\"ADODB.recordset\")"
      ]
    },
    {
      "title": "ADO Stream Object",
      "summary": "Stream Object (ADO version 2.5)\nThe ADO Stream Object is used to read, write, and manage a stream of binary data or text.\nA Stream object can be obtained in three ways:\nFrom a URL pointing to a document, a folder, or a Record object\nBy instantiating a Stream object to store data for your application\nBy opening the default Stream object associated with a Record object\nSyntax\nProperties\nREMOVE ADS\nMethods",
      "examples": [
        "objectname.property\nobjectname.method"
      ]
    },
    {
      "title": "ADO Data Types",
      "summary": "The table below shows the ADO Data Type mapping between Access, SQL Server, and Oracle:\n* In Oracle 8.0.x - decimal and int are equal to number and number(10).",
      "examples": []
    }
  ],
  "glossary": [
    "ado add",
    "ado command",
    "ado connect",
    "ado connection",
    "ado datatypes",
    "ado delete",
    "ado display",
    "ado error",
    "ado field",
    "ado intro",
    "ado objects",
    "ado parameter",
    "ado property",
    "ado query",
    "ado record",
    "ado recordset",
    "ado sort",
    "ado stream",
    "ado update",
    "asp",
    "asp #include",
    "asp adrotator",
    "asp ajax",
    "asp application",
    "asp browsercap",
    "asp classic",
    "asp conditionals",
    "asp cookies",
    "asp dictionary",
    "asp drive",
    "asp error",
    "asp file",
    "asp filesystem",
    "asp folder",
    "asp forms",
    "asp home",
    "asp intro",
    "asp looping",
    "asp net",
    "asp procedures",
    "asp reference",
    "asp request",
    "asp response",
    "asp server",
    "asp session",
    "asp syntax",
    "asp textstream",
    "asp tutorials",
    "asp variables",
    "aspx",
    "backend",
    "exercises",
    "free",
    "javascript",
    "not",
    "note",
    "programs",
    "razor intro",
    "razor syntax",
    "references",
    "report error",
    "w3schools spaces",
    "webpages charts",
    "webpages classes",
    "webpages databases",
    "webpages email",
    "webpages files",
    "webpages folders",
    "webpages forms",
    "webpages global",
    "webpages helpers",
    "webpages intro",
    "webpages layout",
    "webpages objects",
    "webpages publish",
    "webpages razor",
    "webpages security",
    "webpages webgrid"
  ],
  "objectives": [
    "Classic ASP",
    "ASP.NET Web Forms",
    "ASP.NET MVC",
    "ASP.NET Web Pages",
    "ASP.NET API",
    "ASP.NET Core"
  ]
}