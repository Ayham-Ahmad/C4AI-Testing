{
  "course_name": "Java",
  "description": "Java is a popular programming language. Java is used to develop mobile apps, web apps, desktop apps, games and much more. Tip: Sign in to track your progress - it's free. Our \"Try it Yourself\" editor makes it easy to learn Java. You can edit Java code and view the result in your browser. Try it Yourself » Click on the \"Run example\" button to see how it works. We recommend reading this tutorial, in the sequence listed in the left menu. Java is an object oriented language and some concepts may be new. Take breaks when needed, and go over the examples as many times as needed. Many chapters in this tutorial end with an exercise where you can check your level of knowledge. See all Java Exercises REMOVE ADS Test your Java skills with a quiz. Start Java Quiz Learn by examples! This tutorial supplements all explanations with clarifying examples. See All Java Examples Sign Up for Free Note: This is an optional feature. You can study at W3Schools without creating an account.",
  "course_summary": [
    {
      "title": "Java Introduction",
      "summary": "What is Java?\nJava is a popular and powerful programming language, created in 1995.\nIt is owned by Oracle, and more than 3 billion devices run Java.\nIt is used for:\nMobile applications (specially Android apps)\nDesktop applications\nWeb applications\nWeb servers and application servers\nGames\nDatabase connection\nAnd much, much more!\nWhy Use Java?\nJava works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc.)\nIt is one of the most popular programming languages in the world\nIt has a large demand in the current job market\nIt is easy to learn and simple to use\nIt is open-source and free\nIt is secure, fast and powerful\nIt has huge community support (tens of millions of developers)\nJava is an object oriented language which gives a clear structure to programs and allows code to be reused, lowering development costs\nAs Java is close to C++ and C#, it makes it easy for programmers to switch to Java or vice versa\nJava Example\nJava is often used in everyday programming tasks, like saying hello to a user:\nExampleGet your own Java Server\nResult:\nTry it Yourself »\nGet Started\nBy the end of this tutorial, you will know how to write basic Java programs and apply your skills to real-life examples.\nYou don't need any prior programming experience - just curiosity and practice!\nVideo: Java Introduction",
      "examples": [
        "public class Main { public static void main(String[] args) { String name = \"John\"; System.out.println(\"Hello \" + name); } }",
        "Hello John"
      ]
    },
    {
      "title": "Java Getting Started",
      "summary": "Get Started With Java\nAt W3Schools, you can try Java without installing anything.\nOur Online Java Editor runs directly in your browser, and shows both the code and the result:\nCode:\nResult:\nTry it Yourself »\nThis editor will be used in the entire tutorial to demonstrate the different aspects of Java.\nJava Install\nHowever, if you want to run Java on your own computer, follow the instructions below.\nSome PCs might have Java already installed.\nTo check if you have Java installed on a Windows PC, search in the start bar for Java or type the following in Command Prompt (cmd.exe):\nIf Java is installed, you will see something like this (depending on version):\nIf you do not have Java installed on your computer, you can download it at oracle.com.\nNote: In this tutorial, we will write Java code in a text editor. However, it is possible to write Java in an Integrated Development Environment, such as IntelliJ IDEA, Netbeans or Eclipse, which are particularly useful when managing larger collections of Java files.\nJava Quickstart\nIn Java, every application begins with a class name, and that class must match the filename.\nLet's create our first Java file, called Main.java, which can be done in any text editor (like Notepad).\nThe file should contain a \"Hello World\" message, which is written with the following code:\nTry it Yourself »\nDon't worry if you don't understand the code above - we will discuss it in detail in later chapters. For now, focus on how to run the code above.\nSave the code in Notepad as \"Main.java\". Open Command Prompt (cmd.exe), navigate to the directory where you saved your file, and type \"javac Main.java\":\nThis will compile your code. If there are no errors in the code, the command prompt will take you to the next line. Now, type \"java Main\" to run the file:\nThe output should read:\nCongratulations! You have written and executed your first Java program.\nVideo: Java Get Started",
      "examples": [
        "public class Main { public static void main(String[] args) { System.out.println(\"Hello World\"); } }",
        "C:\\Users\\Your Name>java -version",
        "C:\\Users\\Your Name>javac Main.java",
        "C:\\Users\\Your Name>java Main",
        "Hello World",
        "java version \"22.0.0\" 2024-08-21 LTS\nJava(TM) SE Runtime Environment 22.9 (build 22.0.0+13-LTS)\nJava HotSpot(TM) 64-Bit Server VM 22.9 (build 22.0.0+13-LTS, mixed mode)",
        "Main.java"
      ]
    },
    {
      "title": "Java Syntax",
      "summary": "Java Syntax\nIn the previous chapter, we created a Java file called Main.java, and we used the following code to print \"Hello World\" to the screen:\nExampleGet your own Java Server\nTry it Yourself »\nExample explained\nEvery line of code that runs in Java must be inside a class. The class name should always start with an uppercase first letter. In our example, we named the class Main.\nNote: Java is case-sensitive. MyClass and myclass would be treated as two completely different names.\nThe name of the Java file must match the class name. So if your class is called Main, the file must be saved as Main.java. This is because Java uses the class name to find and run your code. If the names don't match, Java will give an error and the program will not run.\nWhen saving the file, save it using the class name and add .java to the end of the filename. To run the example above on your computer, make sure that Java is properly installed: Go to the Get Started Chapter for how to install Java. The output should be:\nThe main Method\nThe main() method is required in every Java program. It is where the program starts running:\nAny code placed inside the main() method will be executed.\nFor now, you don't need to understand the keywords public, static, and void. You will learn about them later in this tutorial. Just remember: main() is the starting point of every Java program.\nSystem.out.println()\nInside the main() method, we can use the println() method to print a line of text to the screen:\nExample\nTry it Yourself »\nNote: The curly braces {} mark the beginning and the end of a block of code.\nSystem.out.println() may look long, but you can think of it as a single command that means: \"Send this text to the screen.\"\nHere's what each part means (you will learn the details later):\nSystem is a built-in Java class.\nout is a member of System, short for \"output\".\nprintln() is a method, short for \"print line\".\nFinally, remember that each Java statement must end with a semicolon (;).\nVideo: Java Syntax",
      "examples": [
        "public class Main { public static void main(String[] args) { System.out.println(\"Hello World\"); } }",
        "public static void main(String[] args)",
        "public static void main(String[] args) { System.out.println(\"Hello World\"); }",
        "Main.java",
        "class",
        "MyClass",
        "myclass",
        "Main",
        ".java",
        "Hello World",
        "main()",
        "public",
        "static",
        "void",
        "println()",
        "{}",
        "System.out.println()",
        "System",
        "out",
        ";"
      ]
    },
    {
      "title": "Java Statements",
      "summary": "Statements\nA computer program is a list of \"instructions\" to be \"executed\" by a computer.\nIn a programming language, these programming instructions are called statements.\nThe following statement \"instructs\" the compiler to print the text \"Java is fun!\" to the screen:\nExampleGet your own Java Server\nIt is important that you end the statement with a semicolon ;.\nIf you forget the semicolon (;), an error will occur and the program will not run:\nExample\nResult:\nTip: You can think of a statement like a sentence in English. Just as sentences end with a period ., Java statements end with a semicolon ;.\nMany Statements\nMost Java programs contain many statements.\nThe statements are executed, one by one, in the same order as they are written:\nExample\nFrom the example above, we have three statements:\nSystem.out.println(\"Hello World!\");\nSystem.out.println(\"Have a good day!\");\nSystem.out.println(\"Learning Java is fun!\");\nThe first statement is executed first (print \"Hello World!\" to the screen).\nThen the second statement is executed (print \"Have a good day!\" to the screen).\nAnd at last, the third statement is executed (print \"Learning Java is fun!\" to the screen).\nYou will learn more about statements while reading this tutorial. For now, just remember to always end them with a semicolon to avoid any errors.",
      "examples": [
        "System.out.println(\"Java is fun!\");",
        "System.out.println(\"Java is fun!\")",
        "System.out.println(\"Hello World!\"); System.out.println(\"Have a good day!\"); System.out.println(\"Learning Java is fun!\");",
        ";",
        "error: ';' expected",
        ".",
        "System.out.println(\"Hello World!\");",
        "System.out.println(\"Have a good day!\");",
        "System.out.println(\"Learning Java is fun!\");"
      ]
    },
    {
      "title": "Java Output / Print",
      "summary": "Print Text\nYou learned from the previous chapter that you can use the println() method to output values or print text in Java:\nExampleGet your own Java Server\nTry it Yourself »\nYou can add as many println() methods as you want. Note that it will add a new line for each method:\nExample\nTry it Yourself »\nDouble Quotes\nText must be wrapped inside double quotations marks \"\".\nIf you forget the double quotes, an error occurs:\nExample\nTry it Yourself »\nThe Print() Method\nThere is also a print() method, which is similar to println().\nThe only difference is that it does not insert a new line at the end of the output:\nExample\nTry it Yourself »\nNote that we add an extra space (after \"Hello World!\" in the example above) for better readability.\nIn this tutorial, we will only use println() as it makes the code output easier to read.\nVideo: Java Output / Print",
      "examples": [
        "System.out.println(\"Hello World!\");",
        "System.out.println(\"Hello World!\"); System.out.println(\"I am learning Java.\"); System.out.println(\"It is awesome!\");",
        "System.out.println(\"This sentence will work!\");",
        "System.out.println(This sentence will produce an error);",
        "System.out.print(\"Hello World! \"); System.out.print(\"I will print on the same line.\");",
        "println()",
        "\"\"",
        "print()"
      ]
    },
    {
      "title": "Java Output Numbers",
      "summary": "Print Numbers\nYou can also use the println() method to print numbers.\nHowever, unlike text, we don't put numbers inside double quotes:\nExampleGet your own Java Server\nTry it Yourself »\nYou can also perform mathematical calculations inside the println() method:\nExample\nTry it Yourself »\nExample\nTry it Yourself »",
      "examples": [
        "System.out.println(3); System.out.println(358); System.out.println(50000);",
        "System.out.println(3 + 3);",
        "System.out.println(2 * 5);",
        "println()"
      ]
    },
    {
      "title": "Java Comments",
      "summary": "Java Comments\nComments can be used to explain Java code, and to make it more readable. It can also be used to prevent execution when testing alternative code.\nSingle-line Comments\nSingle-line comments start with two forward slashes (//).\nAny text between // and the end of the line is ignored by Java (will not be executed).\nThis example uses a single-line comment before a line of code:\nExampleGet your own Java Server\nTry it Yourself »\nThis example uses a single-line comment at the end of a line of code:\nExample\nTry it Yourself »\nREMOVE ADS\nJava Multi-line Comments\nMulti-line comments start with /* and ends with */.\nAny text between /* and */ will be ignored by Java.\nThis example uses a multi-line comment (a comment block) to explain the code:\nExample\nTry it Yourself »\nIt's up to you which one you use. Normally, we use // for short comments, and /* */ for longer.\nVideo: Java Comments",
      "examples": [
        "// This is a comment System.out.println(\"Hello World\");",
        "System.out.println(\"Hello World\"); // This is a comment",
        "/* The code below will print the words Hello World to the screen, and it is amazing */ System.out.println(\"Hello World\");",
        "//",
        "/*",
        "*/",
        "/* */"
      ]
    },
    {
      "title": "Java Variables",
      "summary": "Java Variables\nVariables are containers for storing data values.\nIn Java, there are different types of variables, for example:\nString - stores text, such as \"Hello\". String values are surrounded by double quotes\nint - stores integers (whole numbers), without decimals, such as 123 or -123\nfloat - stores floating point numbers, with decimals, such as 19.99 or -19.99\nchar - stores single characters, such as 'a' or 'B'. Char values are surrounded by single quotes\nboolean - stores values with two states: true or false\nDeclaring (Creating) Variables\nTo create a variable in Java, you need to:\nChoose a type (like int or String)\nGive the variable a name (like x, age, or name)\nOptionally assign it a value using =\nHere's the basic syntax:\nSyntaxGet your own Java Server\nFor example, if you want to store some text, you can use a String:\nExample\nCreate a variable called name of type String and assign it the value \"John\".\nThen we use println() to print the name variable:\nTry it Yourself »\nTo create a variable that should store a number, you can use int:\nExample\nCreate a variable called myNum of type int and assign it the value 15:\nTry it Yourself »\nYou can also declare a variable without assigning the value, and assign the value later:\nExample\nTry it Yourself »\nNote that if you assign a new value to an existing variable, it will overwrite the previous value:\nExample\nChange the value of myNum from 15 to 20:\nTry it Yourself »\nFinal Variables\nIf you don't want others (or yourself) to overwrite existing values, use the final keyword (this will declare the variable as \"final\" or \"constant\", which means unchangeable and read-only):\nExample\nTry it Yourself »\nOther Types\nA demonstration of how to declare variables of other types:\nExample\nYou will learn more about data types in the next section.\nVideo: Java Variables",
      "examples": [
        "type variableName = value;",
        "String name = \"John\"; System.out.println(name);",
        "int myNum = 15; System.out.println(myNum);",
        "int myNum; myNum = 15; System.out.println(myNum);",
        "int myNum = 15; myNum = 20; // myNum is now 20 System.out.println(myNum);",
        "final int myNum = 15; myNum = 20; // will generate an error: cannot assign a value to a final variable",
        "int myNum = 5; float myFloatNum = 5.99f; char myLetter = 'D'; boolean myBool = true; String myText = \"Hello\";",
        "String",
        "int",
        "float",
        "char",
        "boolean",
        "x",
        "age",
        "name",
        "=",
        "println()",
        "myNum",
        "15",
        "20",
        "final"
      ]
    },
    {
      "title": "Java Print Variables",
      "summary": "Display Variables\nThe println() method is often used to display variables.\nTo combine both text and a variable, use the + character:\nExampleGet your own Java Server\nTry it Yourself »\nYou can also use the + character to add a variable to another variable:\nExample\nTry it Yourself »\nIn Java, the + symbol has two meanings:\nFor text (strings), it joins them together (called concatenation).\nFor numbers, it adds values together.\nFor numeric values, the + character works as a mathematical operator (notice that we use int (integer) variables here):\nExample\nTry it Yourself »\nFrom the example above, here's what happens step by step:\nx stores the value 5\ny stores the value 6\nprintln() displays the result of x + y, which is 11\nMixing Text and Numbers\nBe careful when combining text and numbers in the same line of code. Without parentheses, Java will treat the numbers as text after the first string:\nExample\nTry it Yourself »\nExplanation:\nIn the first line, Java combines \"The sum is \" with x, creating the string \"The sum is 5\". Then y is added to that string, so it becomes \"The sum is 56\".\nIn the second line, the parentheses make sure x + y is calculated first (resulting in 11), so the output is \"The sum is 11\".",
      "examples": [
        "String name = \"John\"; System.out.println(\"Hello \" + name);",
        "String firstName = \"John \"; String lastName = \"Doe\"; String fullName = firstName + lastName; System.out.println(fullName);",
        "int x = 5; int y = 6; System.out.println(x + y); // Print the value of x + y",
        "int x = 5; int y = 6; System.out.println(\"The sum is \" + x + y); // Prints: The sum is 56 System.out.println(\"The sum is \" + (x + y)); // Prints: The sum is 11",
        "println()",
        "+",
        "int",
        "x",
        "y",
        "x + y",
        "\"The sum is \"",
        "\"The sum is 5\"",
        "\"The sum is 56\"",
        "11",
        "\"The sum is 11\""
      ]
    },
    {
      "title": "Java Declare Multiple Variables",
      "summary": "Declare Many Variables\nTo declare more than one variable of the same type, you can use a comma-separated list:\nExampleGet your own Java Server\nInstead of writing:\nYou can write:\nTry it Yourself »\nNote: Declaring many variables in one line is shorter, but writing one variable per line can sometimes make the code easier to read.\nOne Value to Multiple Variables\nYou can also assign the same value to multiple variables in one line:\nExample\nTry it Yourself »",
      "examples": [
        "int x = 5; int y = 6; int z = 50; System.out.println(x + y + z); // 61",
        "int x = 5, y = 6, z = 50; System.out.println(x + y + z); // 61",
        "int x, y, z; x = y = z = 50; System.out.println(x + y + z); // 150"
      ]
    },
    {
      "title": "Java Identifiers",
      "summary": "Identifiers\nAll Java variables must be identified with unique names.\nThese unique names are called identifiers.\nIdentifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).\nNote: It is recommended to use descriptive names in order to create understandable and maintainable code:\nExampleGet your own Java Server\nTry it Yourself »\nThe general rules for naming variables are:\nNames can contain letters, digits, underscores, and dollar signs\nNames must begin with a letter\nNames should start with a lowercase letter, and cannot contain whitespace\nNames can also begin with $ and _\nNames are case-sensitive (\"myVar\" and \"myvar\" are different variables)\nReserved words (like Java keywords, such as int or boolean) cannot be used as names\nInvalid Identifiers\nHere are some examples of invalid identifiers that would cause errors:\nExample",
      "examples": [
        "// Good int minutesPerHour = 60; // OK, but not so easy to understand what m actually is int m = 60;",
        "// Invalid identifiers: int 2ndNumber = 5; // Cannot start with a digit int my var = 10; // Cannot contain spaces int int = 20; // Cannot use reserved keywords",
        "int",
        "boolean"
      ]
    },
    {
      "title": "Java Constants (final)",
      "summary": "Constants (final keyword)\nWhen you do not want a variable's value to change, use the final keyword.\nA variable declared with final becomes a constant, which means unchangeable and read-only:\nExampleGet your own Java Server\nTry it Yourself »\nWhen to Use final?\nYou should declare variables as final when their values should never change. For example, the number of minutes in an hour, or your birth year:\nExample\nTry it Yourself »\nNote: By convention, final variables in Java are usually written in upper case (e.g. BIRTHYEAR). It is not required, but useful for code readability and common for many programmers.",
      "examples": [
        "final int myNum = 15; myNum = 20; // Error: cannot assign a value to final variable 'myNum'",
        "final int MINUTES_PER_HOUR = 60; final int BIRTHYEAR = 1980;",
        "final",
        "BIRTHYEAR"
      ]
    },
    {
      "title": "Java Variables - Examples",
      "summary": "Real-Life Examples\nOften in our examples, we simplify variable names to match their data type (myInt or myNum for int types, myChar for char types, and so on). This is done to avoid confusion.\nHowever, for a practical example of using variables, we have created a program that stores different data about a college student:\nExampleGet your own Java Server\nTry it Yourself »\nCalculate the Area of a Rectangle\nIn this real-life example, we create a program to calculate the area of a rectangle (by multiplying the length and width):\nExample\nTry it Yourself »",
      "examples": [
        "// Student data String studentName = \"John Doe\"; int studentID = 15; int studentAge = 23; float studentFee = 75.25f; char studentGrade = 'B'; // Print variables System.out.println(\"Student name: \" + studentName); System.out.println(\"Student id: \" + studentID); System.out.println(\"Student age: \" + studentAge); System.out.println(\"Student fee: \" + studentFee); System.out.println(\"Student grade: \" + studentGrade);",
        "// Create integer variables int length = 4; int width = 6; int area; // Calculate the area of a rectangle area = length * width; // Print variables System.out.println(\"Length is: \" + length); System.out.println(\"Width is: \" + width); System.out.println(\"Area of the rectangle is: \" + area);",
        "int",
        "char"
      ]
    },
    {
      "title": "Java Data Types",
      "summary": "Java Data Types\nAs explained in the previous chapter, a variable in Java must be a specified data type:\nExampleGet your own Java Server\nTry it Yourself »\nData types are divided into two groups:\nPrimitive data types - includes byte, short, int, long, float, double, boolean and char\nNon-primitive data types - such as String, Arrays and Classes (you will learn more about these in a later chapter)\nPrimitive Data Types\nA primitive data type specifies the type of a variable and the kind of values it can hold.\nThere are eight primitive data types in Java:\nYou Cannot Change the Type\nOnce a variable is declared with a type, it cannot change to another type later in the program:\nExample\nTry it Yourself »\nNote: This rule makes Java safer, because the compiler will stop you if you try to mix up types by mistake.\nIf you really need to change between types, you must use type casting or conversion methods (for example, turning an int into a double).\nVideo: Java Data Types",
      "examples": [
        "int myNum = 5; // Integer (whole number) float myFloatNum = 5.99f; // Floating point number char myLetter = 'D'; // Character boolean myBool = true; // Boolean String myText = \"Hello\"; // String",
        "int myNum = 5; // myNum is an int // myNum = \"Hello\"; // Error: cannot assign a String to an int String myText = \"Hi\"; // myText is a String // myText = 123; // Error: cannot assign a number to a String",
        "byte",
        "short",
        "int",
        "long",
        "float",
        "double",
        "boolean",
        "char",
        "String"
      ]
    },
    {
      "title": "Java Numbers",
      "summary": "Numbers\nPrimitive number types are divided into two groups:\nInteger types stores whole numbers, positive or negative (such as 123 or -456), without decimals. Valid types are byte, short, int and long. Which type you should use, depends on the numeric value.\nFloating point types represents numbers with a fractional part, containing one or more decimals. There are two types: float and double.\nEven though there are many numeric types in Java, the most used for numbers are int (for whole numbers) and double (for floating point numbers). However, we will describe them all as you continue to read.\nInteger Types\nByte\nThe byte data type can store whole numbers from -128 to 127. This can be used instead of int or other integer types to save memory when you are certain that the value will be within -128 and 127:\nExampleGet your own Java Server\nTry it Yourself »\nShort\nThe short data type can store whole numbers from -32768 to 32767:\nExample\nTry it Yourself »\nInt\nThe int data type can store whole numbers from -2147483648 to 2147483647. In general, and in our tutorial, the int data type is the preferred data type when we create variables with a numeric value.\nExample\nTry it Yourself »\nLong\nThe long data type can store whole numbers from -9223372036854775808 to 9223372036854775807. This is used when int is not large enough to store the value. Note that you should end the value with an \"L\":\nExample\nTry it Yourself »\nFloating Point Types\nYou should use a floating point type whenever you need a number with a decimal, such as 9.99 or 3.14515.\nThe float and double data types can store fractional numbers. Note that you should end the value with an \"f\" for floats and \"d\" for doubles:\nFloat Example\nTry it Yourself »\nDouble Example\nTry it Yourself »\nUse float or double?\nThe precision of a floating point value indicates how many digits the value can have after the decimal point. The precision of float is only 6-7 decimal digits, while double variables have a precision of about 16 digits.\nTherefore it is safer to use double for most calculations.\nScientific Numbers\nA floating point number can also be a scientific number with an \"e\" to indicate the power of 10:\nExample\nTry it Yourself »",
      "examples": [
        "byte myNum = 100; System.out.println(myNum);",
        "short myNum = 5000; System.out.println(myNum);",
        "int myNum = 100000; System.out.println(myNum);",
        "long myNum = 15000000000L; System.out.println(myNum);",
        "float myNum = 5.75f; System.out.println(myNum);",
        "double myNum = 19.99d; System.out.println(myNum);",
        "float f1 = 35e3f; double d1 = 12E4d; System.out.println(f1); System.out.println(d1);",
        "byte",
        "short",
        "int",
        "long",
        "float",
        "double"
      ]
    },
    {
      "title": "Java Boolean Data Types",
      "summary": "Boolean Types\nVery often in programming, you will need a data type that can only have one of two values, like:\nYES / NO\nON / OFF\nTRUE / FALSE\nFor this, Java has a boolean data type, which can only take the values true or false:\nExampleGet your own Java Server\nTry it Yourself »\nBoolean values are mostly used for conditional testing.\nYou will learn much more about booleans and conditions later in this tutorial.",
      "examples": [
        "boolean isJavaFun = true; boolean isFishTasty = false; System.out.println(isJavaFun); // Outputs true System.out.println(isFishTasty); // Outputs false",
        "boolean",
        "true",
        "false"
      ]
    },
    {
      "title": "Java Characters",
      "summary": "Characters\nThe char data type is used to store a single character. The character must be surrounded by single quotes, like 'A' or 'c':\nExampleGet your own Java Server\nTry it Yourself »\nAlternatively, if you are familiar with ASCII values, you can use those to display certain characters:\nExample\nTry it Yourself »\nTip: A list of all ASCII values can be found in our ASCII Table Reference.\nStrings\nThe String data type is used to store a sequence of characters (text). String values must be surrounded by double quotes:\nExample\nTry it Yourself »\nThe String type is so much used and integrated in Java, that some call it \"the special ninth type\".\nA String in Java is actually a non-primitive data type, because it refers to an object. The String object has methods that are used to perform certain operations on strings. Don't worry if you don't understand the term \"object\" just yet. We will learn more about strings and objects in a later chapter.",
      "examples": [
        "char myGrade = 'B'; System.out.println(myGrade);",
        "char myVar1 = 65, myVar2 = 66, myVar3 = 67; System.out.println(myVar1); System.out.println(myVar2); System.out.println(myVar3);",
        "String greeting = \"Hello World\"; System.out.println(greeting);",
        "char",
        "String"
      ]
    },
    {
      "title": "Java Data Types Example",
      "summary": "Real-Life Example\nHere's a real-life example of using different data types, to calculate and output the total cost of a number of items:\nExampleGet your own Java Server\nTry it Yourself »",
      "examples": [
        "// Create variables of different data types int items = 50; float costPerItem = 9.99f; float totalCost = items * costPerItem; char currency = '$'; // Print variables System.out.println(\"Number of items: \" + items); System.out.println(\"Cost per item: \" + costPerItem + currency); System.out.println(\"Total cost = \" + totalCost + currency);"
      ]
    },
    {
      "title": "Java Non-Primitive Data Types",
      "summary": "Non-Primitive Data Types\nNon-primitive data types are called reference types because they refer to objects.\nThe main differences between primitive and non-primitive data types are:\nPrimitive types in Java are predefined and built into the language, while non-primitive types are created by the programmer (except for String).\nNon-primitive types can be used to call methods to perform certain operations, whereas primitive types cannot.\nPrimitive types start with a lowercase letter (like int), while non-primitive types typically starts with an uppercase letter (like String).\nPrimitive types always hold a value, whereas non-primitive types can be null.\nExamples of non-primitive types are Strings, Arrays, Classes etc. You will learn more about these in a later chapter.",
      "examples": [
        "String",
        "int",
        "null"
      ]
    },
    {
      "title": "Java var",
      "summary": "The var Keyword\nThe var keyword was introduced in Java 10 (released in 2018).\nThe var keyword lets the compiler automatically detect the type of a variable based on the value you assign to it.\nThis helps you write cleaner code and avoid repeating types, especially for long or complex types.\nFor example, instead of writing int x = 5;, you can write:\nExampleGet your own Java Server\nTry it Yourself »\nWhen using var, the compiler understands that 5 is an int.\nExample with Different Types\nHere are some examples showing how var can be used to create variables of different types, based on the values you assign:\nExample\nTry it Yourself »\nImportant Notes\n1. var only works when you assign a value at the same time (you can't declare var x; without assigning a value):\n2. Once the type is chosen, it stays the same. See example below:\nWhen to Use var\nFor simple variables, it's usually clearer to write the type directly (int, double, char, etc.).\nBut for more complex types, such as ArrayList or HashMap, var can make the code shorter and easier to read:\nExample\nTry it Yourself »\nDon't worry if the example above looks a bit advanced - you will learn more about these complex types later. For now, just remember that var was introduced in Java 10, and if you work with others, you might see it in their code - so it's good to know what it means.",
      "examples": [
        "var x = 5; // x is an int System.out.println(x);",
        "var myNum = 5; // int var myDouble = 9.98; // double var myChar = 'D'; // char var myBoolean = true; // boolean var myString = \"Hello\"; // String",
        "// Without var ArrayList<String> cars = new ArrayList<String>(); // With var var cars = new ArrayList<String>();",
        "var x; // Error\nvar x = 5;  // OK",
        "var x = 5;  // x is now an int\nx = 10;     // OK - still an int\nx = 9.99;   // Error - can't assign a double to an int",
        "var",
        "int x = 5;",
        "5",
        "int",
        "var x;",
        "double",
        "char",
        "ArrayList",
        "HashMap"
      ]
    },
    {
      "title": "Java Type Casting",
      "summary": "Java Type Casting\nType casting means converting one data type into another. For example, turning an int into a double.\nIn Java, there are two main types of casting:\nWidening Casting (automatic) - converting a smaller type to a larger type size\nbyte -> short -> char -> int -> long -> float -> double\nNarrowing Casting (manual) - converting a larger type to a smaller type size\ndouble -> float -> long -> int -> char -> short -> byte\nWidening Casting\nWidening casting is done automatically when passing a smaller size type into a larger size type.\nThis works because there is no risk of losing information. For example, an int value can safely fit inside a double:\nExampleGet your own Java Server\nTry it Yourself »\nNarrowing Casting\nNarrowing casting must be done manually by placing the type in parentheses () in front of the value.\nThis is required because narrowing may result in data loss (for example, dropping decimals when converting a double to an int):\nExample\nTry it Yourself »\nReal-Life Example\nHere is a real-life example of type casting. We calculate the percentage of a user's score in relation to the maximum score in a game.\nWe use type casting to make sure that the result is a floating-point value, rather than an integer:\nExample\nTry it Yourself »\nVideo: Java Type Casting",
      "examples": [
        "public class Main { public static void main(String[] args) { int myInt = 9; double myDouble = myInt; // Automatic casting: int to double System.out.println(myInt); // Outputs 9 System.out.println(myDouble); // Outputs 9.0 } }",
        "public class Main { public static void main(String[] args) { double myDouble = 9.78d; int myInt = (int) myDouble; // Manual casting: double to int System.out.println(myDouble); // Outputs 9.78 System.out.println(myInt); // Outputs 9 } }",
        "// Set the maximum possible score in the game to 500 int maxScore = 500; // The actual score of the user int userScore = 423; /* Calculate the percentage of the user's score in relation to the maximum available score. Convert userScore to double to make sure that the division is accurate */ double percentage = (double) userScore / maxScore * 100.0d; System.out.println(\"User's percentage is \" + percentage);",
        "int",
        "double",
        "byte",
        "short",
        "char",
        "long",
        "float",
        "()"
      ]
    },
    {
      "title": "Java Operators",
      "summary": "Java Operators\nOperators are used to perform operations on variables and values.\nIn the example below, we use the + operator to add together two values:\nExampleGet your own Java Server\nTry it Yourself »\nAlthough the + operator is often used to add together two values, like in the example above, it can also be used to add together a variable and a value, or a variable and another variable:\nExample\nTry it Yourself »\nJava divides the operators into the following groups:\nArithmetic operators\nAssignment operators\nComparison operators\nLogical operators\nBitwise operators",
      "examples": [
        "int x = 100 + 50;",
        "int sum1 = 100 + 50; // 150 (100 + 50) int sum2 = sum1 + 250; // 400 (150 + 250) int sum3 = sum2 + sum2; // 800 (400 + 400)",
        "+"
      ]
    },
    {
      "title": "Java Arithmetic Operators",
      "summary": "Arithmetic Operators\nArithmetic operators are used to perform common mathematical operations.\nHere is an example using different arithmetic operators in one example:\nExampleGet your own Java Server\nTry it Yourself »\nNote: When dividing two integers in Java, the result will also be an integer. For example, 10 / 3 gives 3. If you want a decimal result, use double values, like 10.0 / 3.\nExample\nTry it Yourself »\nIncrementing and Decrementing\nIncrementing and decrementing are very common in programming, especially when working with counters, loops, and arrays (which you will learn more about in later chapters).\nThe ++ operator increases a value by 1, while the -- operator decreases a value by 1:\nExample\nTry it Yourself »\nImagine you are building a program to count how many people enter and leave a room. You can use ++ to increase the counter when someone enters, and -- to decrease it when someone leaves:\nExample\nTry it Yourself »",
      "examples": [
        "int x = 10; int y = 3; System.out.println(x + y); // 13 System.out.println(x - y); // 7 System.out.println(x * y); // 30 System.out.println(x / y); // 3 System.out.println(x % y); // 1 int z = 5; ++z; System.out.println(z); // 6 --z; System.out.println(z); // 5",
        "int a = 10; int b = 3; System.out.println(a / b); // Integer division, result is 3 double c = 10.0d; double d = 3.0d; System.out.println(c / d); // Decimal division, result is 3.333...",
        "int x = 5; ++x; // Increment x by 1 System.out.println(x); // 6 --x; // Decrement x by 1 System.out.println(x); // 5",
        "int peopleInRoom = 0; // 3 people enter peopleInRoom++; peopleInRoom++; peopleInRoom++; System.out.println(peopleInRoom); // 3 // 1 person leaves peopleInRoom--; System.out.println(peopleInRoom); // 2",
        "10 / 3",
        "3",
        "double",
        "10.0 / 3",
        "++",
        "--"
      ]
    },
    {
      "title": "Java Assignment Operators",
      "summary": "Assignment Operators\nAssignment operators are used to assign values to variables.\nIn the example below, we use the assignment operator (=) to assign the value 10 to a variable called x:\nExampleGet your own Java Server\nTry it Yourself »\nThe addition assignment operator (+=) adds a value to a variable:\nExample\nTry it Yourself »\nA list of all assignment operators:\nNote: Most assignment operators are just shorter ways of writing code. For example, x += 5 is the same as x = x + 5, but shorter and often easier to read.\nReal-Life Example: Tracking Savings\nAssignment operators can also be used in real-life scenarios. For example, you can use the += operator to keep track of savings when you add money to an account:\nExample",
      "examples": [
        "int x = 10;",
        "int x = 10; x += 5;",
        "int savings = 100; savings += 50; // add 50 to savings System.out.println(\"Total savings: \" + savings);",
        "=",
        "+=",
        "x += 5",
        "x = x + 5"
      ]
    },
    {
      "title": "Java Comparison Operators",
      "summary": "Comparison Operators\nComparison operators are used to compare two values (or variables). This is important in programming, because it helps us to find answers and make decisions.\nThe return value of a comparison is either true or false. These values are known as Boolean values, and you will learn more about them in the Booleans and If..Else chapter.\nIn the following example, we use the greater than operator (>) to find out if 5 is greater than 3:\nExampleGet your own Java Server\nTry it Yourself »\nA list of all comparison operators:\nReal-Life Examples\nComparison operators are often used in real-world conditions, such as checking if a person is old enough to vote:\nExample\nTry it Yourself »\nAnother common use is checking if a password is long enough:\nExample\nTry it Yourself »",
      "examples": [
        "int x = 5; int y = 3; System.out.println(x > y); // returns true, because 5 is higher than 3",
        "int age = 18; System.out.println(age >= 18); // true, old enough to vote System.out.println(age < 18); // false, not old enough",
        "int passwordLength = 5; System.out.println(passwordLength >= 8); // false, too short System.out.println(passwordLength < 8); // true, needs more characters",
        "true",
        "false",
        ">"
      ]
    },
    {
      "title": "Java Logical Operators",
      "summary": "Logical Operators\nAs with comparison operators, you can also test for true or false values with logical operators.\nLogical operators are used to determine the logic between variables or values, by combining multiple conditions::\nReal-Life Example: Login Check\nThe example below shows how logical operators can be used in a real situation, e.g. when checking login status and access rights:\nExampleGet your own Java Server\nResult:\nTry it Yourself »",
      "examples": [
        "boolean isLoggedIn = true; boolean isAdmin = false; System.out.println(\"Regular user: \" + (isLoggedIn && !isAdmin)); System.out.println(\"Has access: \" + (isLoggedIn || isAdmin)); System.out.println(\"Not logged in: \" + (!isLoggedIn));",
        "true",
        "false",
        "Is regular user: true\nHas any access: true\nNot logged in: false"
      ]
    },
    {
      "title": "Java Operator Precedence",
      "summary": "Java Operator Precedence\nWhen a calculation contains more than one operator, Java follows order of operations rules to decide which part to calculate first.\nFor example, multiplication happens before addition:\nExampleGet your own Java Server\nTry it Yourself »\nWhy Does This Happen?\nIn 2 + 3 * 4, the multiplication is done first, so the answer is 14.\nIf you want the addition to happen first, you must use parentheses: (2 + 3) * 4, which gives 20.\nTip: Always use parentheses ( ) if you want to make sure the calculation is done in the order you expect. It also makes your code easier to read.\nOrder of Operations\nHere are some common operators, from highest to lowest priority:\n() - Parentheses\n*, /, % - Multiplication, Division, Modulus\n+, - - Addition, Subtraction\n>, <, >=, <= - Comparison\n==, != - Equality\n&& - Logical AND\n|| - Logical OR\n= - Assignment\nAnother Example\nSubtraction and addition are done from left to right, unless you add parentheses:\nExample\nTry it Yourself »\nRemember: Parentheses always come first. Use them to control the order of your calculations.\nVideo: Java Operators",
      "examples": [
        "int result1 = 2 + 3 * 4; // 2 + 12 = 14 int result2 = (2 + 3) * 4; // 5 * 4 = 20 System.out.println(result1); System.out.println(result2);",
        "int result1 = 10 - 2 + 5; // (10 - 2) + 5 = 13 int result2 = 10 - (2 + 5); // 10 - 7 = 3 System.out.println(result1); System.out.println(result2);",
        "2 + 3 * 4",
        "14",
        "(2 + 3) * 4",
        "20",
        "( )",
        "()",
        "*",
        "/",
        "%",
        "+",
        "-",
        ">",
        "<",
        ">=",
        "<=",
        "==",
        "!=",
        "&&",
        "||",
        "="
      ]
    },
    {
      "title": "Java Strings",
      "summary": "Java Strings\nStrings are used for storing text.\nA String variable contains a collection of characters surrounded by double quotes:\nExampleGet your own Java Server\nCreate a variable of type String and assign it a value:\nTry it Yourself »\nString Length\nA String in Java is actually an object, which means it contains methods that can perform certain operations on strings.\nFor example, you can find the length of a string with the length() method:\nExample\nTry it Yourself »\nMore String Methods\nThere are many string methods available in Java.\nFor example:\nThe toUpperCase() method converts a string to upper case letters.\nThe toLowerCase() method converts a string to lower case letters.\nExample\nTry it Yourself »\nFinding a Character in a String\nThe indexOf() method returns the index (the position) of the first occurrence of a specified text in a string (including whitespace):\nExample\nTry it Yourself »\nJava counts positions from zero.\n0 is the first position in a string, 1 is the second, 2 is the third ...\nYou can use the charAt() method to access a character at a specific position in a string:\nExample\nTry it Yourself »\nComparing Strings\nTo compare two strings, you can use the equals() method:\nExample\nTry it Yourself »\nRemoving Whitespace\nThe trim() method removes whitespace from the beginning and the end of a string:\nExample\nResult:\nTry it Yourself »\nComplete String Reference\nFor a complete reference of String methods, go to our Java String Methods Reference.\nThe reference contains descriptions and examples of all string methods.\nVideo: Java Strings",
      "examples": [
        "String greeting = \"Hello\";",
        "String txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; System.out.println(\"The length of the txt string is: \" + txt.length());",
        "String txt = \"Hello World\"; System.out.println(txt.toUpperCase()); // Outputs \"HELLO WORLD\" System.out.println(txt.toLowerCase()); // Outputs \"hello world\"",
        "String txt = \"Please locate where 'locate' occurs!\"; System.out.println(txt.indexOf(\"locate\")); // Outputs 7",
        "String txt = \"Hello\"; System.out.println(txt.charAt(0)); // H System.out.println(txt.charAt(4)); // o",
        "String txt1 = \"Hello\"; String txt2 = \"Hello\"; String txt3 = \"Greetings\"; String txt4 = \"Great things\"; System.out.println(txt1.equals(txt2)); // true System.out.println(txt3.equals(txt4)); // false",
        "String txt = \" Hello World \"; System.out.println(\"Before: [\" + txt + \"]\"); System.out.println(\"After: [\" + txt.trim() + \"]\");",
        "String",
        "length()",
        "toUpperCase()",
        "toLowerCase()",
        "indexOf()",
        "charAt()",
        "equals()",
        "trim()",
        "Before: [   Hello World   ]\nAfter: [Hello World]"
      ]
    },
    {
      "title": "Java String Concatenation",
      "summary": "String Concatenation\nThe + operator can be used between strings to combine them. This is called concatenation:\nExampleGet your own Java Server\nTry it Yourself »\nNote that we have added an empty text (\" \") to create a space between firstName and lastName on print.\nConcatenation in Sentences\nYou can use string concatenation to build sentences with both text and variables:\nExample\nResult:\nTry it Yourself »\nThe concat() Method\nYou can also use the concat() method to concatenate strings:\nExample\nTry it Yourself »\nYou can also join more than two strings by chaining concat() calls:\nExample\nTry it Yourself »\nNote: While you can use concat() to join multiple strings, most developers prefer the + operator because it is shorter and easier to read.",
      "examples": [
        "String firstName = \"John\"; String lastName = \"Doe\"; System.out.println(firstName + \" \" + lastName);",
        "String name = \"John\"; int age = 25; System.out.println(\"My name is \" + name + \" and I am \" + age + \" years old.\");",
        "String firstName = \"John \"; String lastName = \"Doe\"; System.out.println(firstName.concat(lastName));",
        "String a = \"Java \"; String b = \"is \"; String c = \"fun!\"; String result = a.concat(b).concat(c); System.out.println(result);",
        "+",
        "My name is John and I am 25 years old.",
        "concat()"
      ]
    },
    {
      "title": "Java Numbers and Strings",
      "summary": "Adding Numbers and Strings\nWARNING!\nJava uses the + operator for both addition and concatenation.\nNumbers are added. Strings are concatenated.\nIf you add two numbers, the result will be a number:\nExampleGet your own Java Server\nTry it Yourself »\nIf you add two strings, the result will be a string concatenation:\nExample\nTry it Yourself »\nIf you add a number and a string, the result will be a string concatenation:\nExample\nTry it Yourself »",
      "examples": [
        "int x = 10; int y = 20; int z = x + y; // z will be 30 (an integer/number)",
        "String x = \"10\"; String y = \"20\"; String z = x + y; // z will be 1020 (a String)",
        "String x = \"10\"; int y = 20; String z = x + y; // z will be 1020 (a String)",
        "+"
      ]
    },
    {
      "title": "Java Special Characters",
      "summary": "Strings - Special Characters\nBecause strings must be written within quotes, Java will misunderstand this string, and generate an error:\nThe solution to avoid this problem, is to use the backslash escape character.\nThe backslash (\\) escape character turns special characters into string characters:\nThe sequence \\\"  inserts a double quote in a string:\nExampleGet your own Java Server\nTry it Yourself »\nThe sequence \\'  inserts a single quote in a string:\nExample\nTry it Yourself »\nThe sequence \\\\  inserts a single backslash in a string:\nExample\nTry it Yourself »\nOther common escape sequences that are valid in Java are:\nNote: Most of these escape codes are rarely used in modern programming. The most common ones are \\n (new line), \\\" (double quote), and \\\\ (backslash).",
      "examples": [
        "String txt = \"We are the so-called \"Vikings\" from the north.\";",
        "String txt = \"We are the so-called \\\"Vikings\\\" from the north.\";",
        "String txt = \"It\\'s alright.\";",
        "String txt = \"The character \\\\ is called backslash.\";",
        "\\",
        "\\\"",
        "\\'",
        "\\\\",
        "\\n"
      ]
    },
    {
      "title": "Java Math",
      "summary": "The Java Math class has many methods that allows you to perform mathematical tasks on numbers.\nMath.max(x,y)\nThe Math.max(x,y) method can be used to find the highest value of x and y:\nExampleGet your own Java Server\nTry it Yourself »\nMath.min(x,y)\nThe Math.min(x,y) method can be used to find the lowest value of x and y:\nExample\nTry it Yourself »\nMath.sqrt(x)\nThe Math.sqrt(x) method returns the square root of x:\nExample\nTry it Yourself »\nREMOVE ADS\nMath.abs(x)\nThe Math.abs(x) method returns the absolute (positive) value of x:\nExample\nTry it Yourself »\nMath.pow(x, y)\nThe Math.pow(x, y) method returns the value of x raised to the power of y:\nExample\nTry it Yourself »\nNote: Math.pow(2, 8) means 2 multiplied by itself 8 times:\n2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 = 256\nNote: The Math.pow() method always returns a double, even if the result is a whole number. For example, Math.pow(2, 8) returns 256.0 (not 256).\nRounding Methods\nJava has several methods for rounding numbers:\nMath.round(x) - rounds to the nearest integer\nMath.ceil(x) - rounds up (returns the smallest integer greater than or equal to x)\nMath.floor(x) - rounds down (returns the largest integer less than or equal to x)\nExample\nTry it Yourself »\nRandom Numbers\nMath.random() returns a random number between 0.0 (inclusive), and 1.0 (exclusive):\nExample\nTry it Yourself »\nTo get more control over the random number, for example, if you only want a random number between 0 and 100, you can use the following formula:\nExample\nTry it Yourself »\nNote: Math.random() returns a double. To get an integer, you need to cast it with (int).\nComplete Math Reference\nFor a complete reference of Math methods, go to our Java Math Methods Reference.",
      "examples": [
        "Math.max(5, 10);",
        "Math.min(5, 10);",
        "Math.sqrt(64);",
        "Math.abs(-4.7);",
        "Math.pow(2, 8); // 256.0",
        "Math.round(4.6); // 5 Math.ceil(4.1); // 5.0 Math.floor(4.9); // 4.0",
        "Math.random();",
        "int randomNum = (int)(Math.random() * 101); // 0 to 100",
        "Math.max(x,y)",
        "Math.min(x,y)",
        "Math.sqrt(x)",
        "Math.abs(x)",
        "Math.pow(x, y)",
        "Math.pow(2, 8)",
        "2",
        "Math.pow()",
        "double",
        "256.0",
        "256",
        "Math.round(x)",
        "Math.ceil(x)",
        "Math.floor(x)",
        "Math.random()",
        "(int)"
      ]
    },
    {
      "title": "Java Booleans",
      "summary": "Java Booleans\nVery often in programming, you will need a data type that can only have one of two values, like:\nYES / NO\nON / OFF\nTRUE / FALSE\nFor this, Java has a boolean data type, which can store true or false values.\nThe name boolean comes from George Boole, a mathematician who first defined the logic system used in computers today.\nBoolean Values\nA boolean type is declared with the boolean keyword and can only take the values true or false:\nExampleGet your own Java Server\nTry it Yourself »\nIn practice, booleans are most often the result of expressions, and are used to test conditions in programs (see below).\nBoolean Expressions\nA boolean expression returns a boolean value: true or false.\nThis is useful to build logic and make decisions in programs.\nFor example, you can use a comparison operator, such as the greater than (>) operator, to find out if an expression (or a variable) is true or false:\nExample\nTry it Yourself »\nOr even easier:\nExample\nTry it Yourself »\nIn the examples below, we use the equal to (==) operator to evaluate an expression:\nExample\nTry it Yourself »\nExample\nTry it Yourself »\nReal Life Example\nLet's think of a \"real life example\" where we need to find out if a person is old enough to vote.\nIn the example below, we use the >= comparison operator to find out if the age (25) is greater than OR equal to the voting age limit, which is set to 18:\nExample\nTry it Yourself »\nAn even better approach would be to wrap the code above in an if...else statement, so we can perform different actions depending on the result:\nExample\nOutput \"Old enough to vote!\" if myAge is greater than or equal to 18. Otherwise output \"Not old enough to vote.\":\nTry it Yourself »\nBooleans are the basis for all Java comparisons and conditions.\nYou will learn more about conditions (if...else) in the next chapter.",
      "examples": [
        "boolean isJavaFun = true; boolean isFishTasty = false; System.out.println(isJavaFun); // Outputs true System.out.println(isFishTasty); // Outputs false",
        "int x = 10; int y = 9; System.out.println(x > y); // returns true, because 10 is greater than 9",
        "System.out.println(10 > 9); // returns true, because 10 is greater than 9",
        "int x = 10; System.out.println(x == 10); // returns true, because the value of x is equal to 10",
        "System.out.println(10 == 15); // returns false, because 10 is not equal to 15",
        "int myAge = 25; int votingAge = 18; System.out.println(myAge >= votingAge);",
        "int myAge = 25; int votingAge = 18; if (myAge >= votingAge) { System.out.println(\"Old enough to vote!\"); } else { System.out.println(\"Not old enough to vote.\"); }",
        "boolean",
        "true",
        "false",
        ">",
        "==",
        ">=",
        "25",
        "18",
        "if...else",
        "myAge"
      ]
    },
    {
      "title": "Java If ... Else",
      "summary": "Java Conditions and If Statements\nConditions and if statements let you control the flow of your program - deciding which code runs, and which code is skipped.\nThink of it like real life: If it rains, take an umbrella. Otherwise, do nothing.\nEvery if statement needs a condition that results in true or false.\nThis means if statements work hand-in-hand with boolean values:\nExampleGet your own Java Server\nTry it Yourself »\nMost often, conditions are created using comparison operators, like the ones below:\nLess than: a < b\nLess than or equal to: a <= b\nGreater than: a > b\nGreater than or equal to: a >= b\nEqual to: a == b\nNot equal to: a != b\nYou can use these conditions to perform different actions for different decisions.\nJava has the following conditional statements:\nUse if to specify a block of code to be executed, if a specified condition is true\nUse else to specify a block of code to be executed, if the same condition is false\nUse else if to specify a new condition to test, if the first condition is false\nUse switch to specify many alternative blocks of code to be executed\nThe if Statement\nThe if statement specifies a block of code to be executed if a condition is true:\nSyntax\nThe condition inside the if statement must result in a boolean value - it can be either a boolean expression (like x > y) or a boolean variable (like isLightOn).\nAlso note that if is in lowercase letters. Uppercase letters (If or IF) will generate an error.\nIn the example below, we test two values to find out if 20 is greater than 18. If the condition is true, print some text:\nExample\nTry it Yourself »\nYou can also compare variables:\nExample\nTry it Yourself »\nExample explained\nIn the example above we use two variables, x and y, to test whether x is greater than y (using the > operator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that \"x is greater than y\".\nComparison is also often used to check if two values are equal, using the == operator:\nExample\nTry it Yourself »\nHere the condition x == y is true, because both x and y are 20, so the message \"x is equal to y\" is printed.\nUsing Boolean Variables\nYou can also test boolean variables directly in an if statement:\nExample\nTry it Yourself »\nNote: Writing if (isLightOn) is the same as writing if (isLightOn == true), but shorter and easier to read.\nHere is the same example with the value false to see that the program continues even when the code block does not run:\nExample\nTry it Yourself »\nIf Without Braces\nIf an if statement has only one line of code, you can write it without curly braces { }:\nExample\nTry it Yourself »\nPotential Problem\nWithout braces, only the first line after the if belongs to it. Any other lines will run no matter what, which can lead to unexpected results:\nExample\nTry it Yourself »\nThe Safe Way\nTo avoid mistakes, always use curly braces { }. This makes it clear which lines belong to the if statement:\nExample\nTry it Yourself »\nTip: Always using braces { } makes your code clearer, easier to read, and prevents subtle bugs.\nIn the next chapters, you will also learn how to handle else (when the condition is false), else if (to test multiple conditions), and switch (to handle many possible values).",
      "examples": [
        "boolean isRaining = true; if (isRaining) { System.out.println(\"Bring an umbrella!\"); }",
        "if (condition) { // block of code to be executed if the condition is true }",
        "if (20 > 18) { System.out.println(\"20 is greater than 18\"); }",
        "int x = 20; int y = 18; if (x > y) { System.out.println(\"x is greater than y\"); }",
        "int x = 20; int y = 20; if (x == y) { System.out.println(\"x is equal to y\"); }",
        "boolean isLightOn = true; if (isLightOn) { System.out.println(\"The light is on.\"); }",
        "boolean isLightOn = false; if (isLightOn) { System.out.println(\"The light is on.\"); // This will not be printed } System.out.println(\"This line runs no matter what, because it is outside the if statement.\");",
        "if (20 > 18) System.out.println(\"20 is greater than 18\");",
        "int x = 20; int y = 18; if (x > y) System.out.println(\"x is greater than y\"); // Belongs to if System.out.println(\"This line runs no matter what (not part of the if statement)\"); // Output: // x is greater than y // This line runs no matter what (not part of the if statement)",
        "int x = 20; int y = 18; if (x > y) { System.out.println(\"x is greater than y\"); System.out.println(\"Both lines are part of the if\"); } // Some code outside if System.out.println(\"I am outside if, not part of if!\");",
        "if",
        "true",
        "false",
        "boolean",
        "else",
        "else if",
        "switch",
        "x > y",
        "isLightOn",
        ">",
        "==",
        "x == y",
        "x",
        "y",
        "if (isLightOn)",
        "if (isLightOn == true)",
        "{ }"
      ]
    },
    {
      "title": "Java Else",
      "summary": "The else Statement\nThe else statement lets you run a block of code when the condition in the if statement is false.\nSyntaxGet your own Java Server\nThink of it like real life: If it rains, bring an umbrella. Otherwise (else), go outside without one:\nExample\nTry it Yourself »\nSince isRaining is false, the condition inside the if statement is not met. That means the if block is skipped, and the else block runs instead, printing \"No rain today, no need for an umbrella!\".\nAnother Example\nThis example says good day or good evening depending on the time:\nExample\nTry it Yourself »\nIn the example above, time (20) is greater than 18, so the condition is false. Because of this, we move on to the else condition and print to the screen \"Good evening\". If the time was less than 18, the program would print \"Good day\".\nNotes\nelse does not have a condition - it runs when the if condition is false.\nDo not put a semicolon right after if (condition). That would end the statement early and make else behave unexpectedly.",
      "examples": [
        "if (condition) { // block of code to be executed if the condition is true } else { // block of code to be executed if the condition is false }",
        "boolean isRaining = false; if (isRaining) { System.out.println(\"Bring an umbrella!\"); } else { System.out.println(\"No rain today, no need for an umbrella!\"); }",
        "int time = 20; if (time < 18) { System.out.println(\"Good day.\"); } else { System.out.println(\"Good evening.\"); } // Outputs \"Good evening.\"",
        "else",
        "if",
        "false",
        "isRaining",
        "if (condition)"
      ]
    },
    {
      "title": "Java Else If",
      "summary": "The else if Statement\nUse the else if statement to specify a new condition if the first condition is false.\nSyntaxGet your own Java Server\nThink of it like real life: If it rains, bring an umbrella. Else if it's sunny, wear sunglasses. Else, just go outside normally.\nExample\nTry it Yourself »\nSince weather is 2, the first condition (weather == 1) is not met, so the if block is skipped. The program then checks the else if condition (weather == 2), which is true. That means the else if block runs and prints \"Wear sunglasses.\".\nAnother Example\nThis example chooses between three different messages depending on the time of day:\nExample\nTry it Yourself »\nIn the example above, time (22) is greater than 10, so the first condition is false. The next condition, in the else if statement, is also false, so we move on to the else condition since condition1 and condition2 is both false - and print to the screen \"Good evening\".\nHowever, if the time was 14, our program would print \"Good day.\":\nExample\nTry it Yourself »",
      "examples": [
        "if (condition1) { // block of code to be executed if condition1 is true } else if (condition2) { // block of code to be executed if the condition1 is false and condition2 is true } else { // block of code to be executed if the condition1 is false and condition2 is false }",
        "int weather = 2; // 1 = raining, 2 = sunny, 3 = cloudy if (weather == 1) { System.out.println(\"Bring an umbrella.\"); } else if (weather == 2) { System.out.println(\"Wear sunglasses.\"); } else { System.out.println(\"Just go outside normally.\"); } // Outputs \"Wear sunglasses.\"",
        "int time = 22; if (time < 10) { System.out.println(\"Good morning.\"); } else if (time < 18) { System.out.println(\"Good day.\"); } else { System.out.println(\"Good evening.\"); } // Outputs \"Good evening.\"",
        "int time = 14; if (time < 10) { System.out.println(\"Good morning.\"); } else if (time < 18) { System.out.println(\"Good day.\"); } else { System.out.println(\"Good evening.\"); } // Outputs \"Good day.\"",
        "else if",
        "false",
        "weather",
        "2",
        "weather == 1",
        "if",
        "weather == 2",
        "true",
        "else"
      ]
    },
    {
      "title": "Java Short Hand If...Else (Ternary Operator)",
      "summary": "Short Hand if...else\nThere is also a short-hand if else, which is known as the ternary operator because it consists of three operands.\nIt can be used to replace multiple lines of code with a single line, and is most often used to replace simple if else statements:\nSyntaxGet your own Java Server\nInstead of writing:\nExample\nTry it Yourself »\nYou can simply write:\nExample\nTry it Yourself »",
      "examples": [
        "variable = (condition) ? expressionTrue : expressionFalse;",
        "int time = 20; if (time < 18) { System.out.println(\"Good day.\"); } else { System.out.println(\"Good evening.\"); }",
        "int time = 20; String result = (time < 18) ? \"Good day.\" : \"Good evening.\"; System.out.println(result);"
      ]
    },
    {
      "title": "Java Nested If",
      "summary": "Nested If\nYou can also place an if statement inside another if. This is called a nested if statement.\nA nested if lets you check for a condition only if another condition is already true.\nSyntaxGet your own Java Server\nExample\nIn this example, we first check if x is greater than 10. If it is, we then check if y is greater than 20:\nExample\nResult:\nTry it Yourself »\nReal-Life Example\nNested if statements are useful when you need to test multiple conditions that depend on each other. For example, checking if a person is old enough to vote, and if they are a citizen:\nExample\nResult:\nTry it Yourself »\nNotes\nYou can nest as many if statements as you want, but avoid making the code too deep - it can become hard to read.\nNested if is often used together with else and else if for more complex decision making.",
      "examples": [
        "if (condition1) { // code to run if condition1 is true if (condition2) { // code to run if both condition1 and condition2 are true } }",
        "int x = 15; int y = 25; if (x > 10) { System.out.println(\"x is greater than 10\"); // Nested if if (y > 20) { System.out.println(\"y is also greater than 20\"); } }",
        "int age = 20; boolean isCitizen = true; if (age >= 18) { System.out.println(\"Old enough to vote.\"); if (isCitizen) { System.out.println(\"And you are a citizen, so you can vote!\"); } else { System.out.println(\"But you must be a citizen to vote.\"); } } else { System.out.println(\"Not old enough to vote.\"); }",
        "if",
        "true",
        "x",
        "y",
        "x is greater than 10\ny is also greater than 20",
        "Old enough to vote.\nAnd you are a citizen, so you can vote!",
        "else",
        "else if"
      ]
    },
    {
      "title": "Java Logical Operators in Conditions",
      "summary": "Logical Operators in Conditions\nYou can combine or reverse conditions using logical operators. These work together with if, else, and else if to build more complex decisions.\n&& (AND) - all conditions must be true\n|| (OR) - at least one condition must be true\n! (NOT) - reverses a condition (true = false, false = true)\nAND (&&)\nUse AND (&&) when both conditions must be true:\nExampleGet your own Java Server\nTest if a is greater than b, and if c is greater than a:\nTry it Yourself »\nOR (||)\nUse OR (||) when at least one of the conditions can be true:\nExample\nTest if a is greater than b, or if a is greater than c:\nTry it Yourself »\nNOT (!)\nUse NOT (!) to reverse a condition:\nExample\nTest if a is not greater than b:\nTry it Yourself »\nReal-Life Style Example\nIn real programs, logical operators are often used for access control. For example, to get access to a system, there are specific requirements:\nYou must be logged in, and then you either need to be an admin, or have a high security clearance (level 1 or 2):\nExample\nTry it Yourself »",
      "examples": [
        "int a = 200; int b = 33; int c = 500; if (a > b && c > a) { System.out.println(\"Both conditions are true\"); }",
        "int a = 200; int b = 33; int c = 500; if (a > b || a > c) { System.out.println(\"At least one condition is true\"); }",
        "int a = 33; int b = 200; if (!(a > b)) { System.out.println(\"a is NOT greater than b\"); }",
        "boolean isLoggedIn = true; boolean isAdmin = false; int securityLevel = 3; // 1 = highest if (isLoggedIn && (isAdmin || securityLevel <= 2)) { System.out.println(\"Access granted\"); } else { System.out.println(\"Access denied\"); } // Try changing securityLevel to test different outcomes: // // securityLevel 1 = Access granted // securityLevel 2 = Access granted // securityLevel 3 = Access denied // securityLevel 4 = Access denied // // If isAdmin = true, access is granted.",
        "if",
        "else",
        "else if",
        "&&",
        "||",
        "!",
        "a",
        "b",
        "c"
      ]
    },
    {
      "title": "Java If ... Else Examples",
      "summary": "Real-Life Examples\nThis example shows how you can use if..else to \"open a door\" if the user enters the correct code:\nExampleGet your own Java Server\nTry it Yourself »\nThis example shows how you can use if..else to find out if a number is positive or negative:\nExample\nTry it Yourself »\nFind out if a person is old enough to vote:\nExample\nTry it Yourself »\nFind out if a person is old enough to vote, and if they are a citizen (using nested if statements):\nExample\nTry it Yourself »\nFind out if a number is even or odd:\nExample\nTry it Yourself »\nCheck temperature:\nExample\nTry it Yourself »\nSystem access control example - You must be logged in, and then you either need to be an admin, or have a high security clearance (level 1 or 2) to get access:\nExample\nTry it Yourself »",
      "examples": [
        "int doorCode = 1337; if (doorCode == 1337) { System.out.println(\"Correct code. The door is now open.\"); } else { System.out.println(\"Wrong code. The door remains closed.\"); }",
        "int myNum = 10; // Is this a positive or negative number? if (myNum > 0) { System.out.println(\"The value is a positive number.\"); } else if (myNum < 0) { System.out.println(\"The value is a negative number.\"); } else { System.out.println(\"The value is 0.\"); }",
        "int myAge = 25; int votingAge = 18; if (myAge >= votingAge) { System.out.println(\"Old enough to vote!\"); } else { System.out.println(\"Not old enough to vote.\"); }",
        "int age = 20; boolean isCitizen = true; if (age >= 18) { System.out.println(\"Old enough to vote.\"); if (isCitizen) { System.out.println(\"And you are a citizen, so you can vote!\"); } else { System.out.println(\"But you must be a citizen to vote.\"); } } else { System.out.println(\"Not old enough to vote.\"); }",
        "int myNum = 5; if (myNum % 2 == 0) { System.out.println(myNum + \" is even\"); } else { System.out.println(myNum + \" is odd\"); }",
        "int temperature = 30; if (temperature < 0) { System.out.println(\"It's freezing!\"); } else if (temperature < 20) { System.out.println(\"It's cool.\"); } else { System.out.println(\"It's warm.\"); }",
        "boolean isLoggedIn = true; boolean isAdmin = false; int securityLevel = 3; // 1 = highest if (isLoggedIn && (isAdmin || securityLevel <= 2)) { System.out.println(\"Access granted\"); } else { System.out.println(\"Access denied\"); } // Try changing securityLevel to test different outcomes: // // securityLevel 1 = Access granted // securityLevel 2 = Access granted // securityLevel 3 = Access denied // securityLevel 4 = Access denied // // If isAdmin = true, access is granted."
      ]
    },
    {
      "title": "Java Switch",
      "summary": "Java Switch Statements\nInstead of writing many if..else statements, you can use the switch statement.\nThink of it like ordering food in a restaurant: If you choose number 1, you get Pizza. If you choose 2, you get a Burger. If you choose 3, you get Pasta. Otherwise, you get nothing.\nThe switch statement selects one of many code blocks to be executed:\nSyntaxGet your own Java Server\nThis is how it works:\nThe switch expression is evaluated once.\nThe result is compared with each case value.\nIf there is a match, the matching block of code runs.\nThe break statement stops the switch after the matching case has run.\nThe default statement runs if there is no match.\nThe example below uses the weekday number to calculate the weekday name:\nExample\nTry it Yourself »\nThe break Keyword\nWhen Java reaches a break keyword, it breaks out of the switch block.\nThis will stop the execution of more code and case testing inside the block.\nWhen a match is found, and the job is done, it's time for a break. There is no need for more testing.\nA break can save a lot of execution time because it \"ignores\" the execution of all the rest of the code in the switch block.\nREMOVE ADS\nThe default Keyword\nThe default keyword specifies some code to run if there is no case match:\nExample\nTry it Yourself »\nNote that if the default statement is used as the last statement in a switch block, it does not need a break.",
      "examples": [
        "switch(expression) { case x: // code block break; case y: // code block break; default: // code block }",
        "int day = 4; switch (day) { case 1: System.out.println(\"Monday\"); break; case 2: System.out.println(\"Tuesday\"); break; case 3: System.out.println(\"Wednesday\"); break; case 4: System.out.println(\"Thursday\"); break; case 5: System.out.println(\"Friday\"); break; case 6: System.out.println(\"Saturday\"); break; case 7: System.out.println(\"Sunday\"); break; } // Outputs \"Thursday\" (day 4)",
        "int day = 4; switch (day) { case 6: System.out.println(\"Today is Saturday\"); break; case 7: System.out.println(\"Today is Sunday\"); break; default: System.out.println(\"Looking forward to the Weekend\"); } // Outputs \"Looking forward to the Weekend\"",
        "if..else",
        "switch",
        "case",
        "break",
        "default"
      ]
    },
    {
      "title": "Java While Loop",
      "summary": "Loops\nLoops can execute a block of code as long as a specified condition is true.\nLoops are handy because they save time, reduce errors, and they make code more readable.\nJava While Loop\nThe while loop repeats a block of code as long as the specified condition is true:\nSyntaxGet your own Java Server\nIn the example below, the code in the loop will run again and again, as long as a variable (i) is less than 5:\nExample\nTry it Yourself »\nNote: Do not forget to increase the variable used in the condition (i++), otherwise the loop will never end!\nDo you wonder why we used the letter i in the example above? It's a counter variable and a common choice in simple loops because it's short, traditional, and stands for 'index' or 'iterator'.\nCountdown Example\nYou can also use a while loop to count down. This example counts from 3 to 1, and then prints \"Happy New Year!!\" at the end:\nExample\nTry it Yourself »\nWhile Loop With False Condition\nIn the previous examples, the condition was true at the start, so the loop ran one or more times. But if the condition is false at the beginning, the code inside the loop will never run:\nExample\nTry it Yourself »\nNote: A while loop may never run if the condition is false from the start. In the next chapter, you will learn about the do while loop, which always runs the code at least once before checking the condition.",
      "examples": [
        "while (condition) { // code block to be executed }",
        "int i = 0; while (i < 5) { System.out.println(i); i++; }",
        "int countdown = 3; while (countdown > 0) { System.out.println(countdown); countdown--; } System.out.println(\"Happy New Year!!\");",
        "int i = 10; while (i < 5) { System.out.println(\"This will never be printed\"); }",
        "while",
        "i",
        "i++",
        "do while"
      ]
    },
    {
      "title": "Java Do/While Loop",
      "summary": "The Do/While Loop\nThe do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true. Then it will repeat the loop as long as the condition is true.\nSyntaxGet your own Java Server\nNote: The semicolon ; after the while condition is required!\nDo/While Example\nThe example below uses a do/while loop. The loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested:\nExample\nTry it Yourself »\nDo not forget to increase the variable used in the condition (i++), otherwise the loop will never end!\nCondition is False from the Start\nIn the while loop chapter, we saw that if the condition is false at the beginning, the loop never runs at all.\nThe do/while loop is different: it will always run the code block at least once, even if the condition is false from the start.\nIn the example below, the variable i starts at 10, so i < 5 is false immediately. Still, the loop runs once before checking the condition:\nExample\nTry it Yourself »\nSummary: A do/while loop always runs at least once, even if the condition is false at the start. This is the key difference from a while loop, which would skip the code block completely in the same situation.\nThis behavior makes do/while useful when you want something to happen at least once, such as showing a message or asking the user for input.",
      "examples": [
        "do { // code block to be executed } while (condition);",
        "int i = 0;\ndo { System.out.println(i); i++; } while (i < 5);",
        "int i = 10; do { System.out.println(\"i is \" + i); i++; } while (i < 5);",
        "do/while",
        "while",
        ";",
        "i++",
        "i",
        "i < 5"
      ]
    },
    {
      "title": "Java While Loop Examples",
      "summary": "Real-Life Examples\nTo demonstrate a practical example of the while loop, we have created a simple \"countdown\" program:\nExampleGet your own Java Server\nTry it Yourself »\nTo demonstrate a practical example of the while loop combined with an if else statement, let's say we play a game of Yatzy:\nExample\nPrint \"Yatzy!\" If the dice number is 6:\nTry it Yourself »\nIf the loop passes the values ranging from 1 to 5, it prints \"No Yatzy\". Whenever it passes the value 6, it prints \"Yatzy!\".",
      "examples": [
        "int countdown = 3; while (countdown > 0) { System.out.println(countdown); countdown--; } System.out.println(\"Happy New Year!!\");",
        "int dice = 1; while (dice <= 6) { if (dice < 6) { System.out.println(\"No Yatzy.\"); } else { System.out.println(\"Yatzy!\"); } dice = dice + 1; }"
      ]
    },
    {
      "title": "Java For Loop",
      "summary": "Java For Loop\nWhen you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop:\nSyntaxGet your own Java Server\nStatement 1 is executed (one time) before the execution of the code block.\nStatement 2 defines the condition for executing the code block.\nStatement 3 is executed (every time) after the code block has been executed.\nPrint Numbers\nThe example below will print the numbers 0 to 4:\nExample\nTry it Yourself »\nExample explained\nStatement 1 sets a variable before the loop starts: int i = 0\nStatement 2 defines the condition for the loop to run: i < 5. If the condition is true, the loop will run again; if it is false, the loop ends.\nStatement 3 increases a value each time the code block has run: i++\nPrint Even Numbers\nThis example prints even values between 0 and 10:\nExample\nTry it Yourself »\nSum of Numbers\nThis example calculates the sum of numbers from 1 to 5:\nExample\nTry it Yourself »\nCountdown\nThis example prints a countdown from 5 to 1:\nExample\nTry it Yourself »\nFor Loop With False Condition\nJust like a while loop, a for loop may also never run. If the condition is false right from the start, the code inside the loop will be skipped entirely:\nExample\nTry it Yourself »\nIn this example, the loop starts with i = 10. The condition i < 5 is already false, so the loop body is skipped, and nothing is printed.",
      "examples": [
        "for (statement 1; statement 2; statement 3) { // code block to be executed }",
        "for (int i = 0; i < 5; i++) {\nSystem.out.println(i);\n}",
        "for (int i = 0; i <= 10; i = i + 2) {\nSystem.out.println(i);\n}",
        "int sum = 0;\nfor (int i = 1; i <= 5; i++) {\nsum = sum + i;\n}\nSystem.out.println(\"Sum is \" + sum);",
        "for (int i = 5; i > 0; i--) {\nSystem.out.println(i);\n}",
        "for (int i = 10; i < 5; i++) { System.out.println(\"This will never be printed\"); }",
        "for",
        "while",
        "int i = 0",
        "i < 5",
        "i++",
        "false",
        "i = 10"
      ]
    },
    {
      "title": "Java Nested Loops",
      "summary": "Nested Loops\nIt is also possible to place a loop inside another loop. This is called a nested loop.\nThe \"inner loop\" will be executed one time for each iteration of the \"outer loop\":\nExampleGet your own Java Server\nTry it Yourself »\nMultiplication Table Example\nThis example uses nested loops to print a simple multiplication table (1 to 3):\nExample\nTry it Yourself »\nNested loops are useful when working with tables, matrices, or multi-dimensional data structures.",
      "examples": [
        "// Outer loop for (int i = 1; i <= 2; i++) { System.out.println(\"Outer: \" + i); // Executes 2 times // Inner loop for (int j = 1; j <= 3; j++) { System.out.println(\" Inner: \" + j); // Executes 6 times (2 * 3) } }",
        "for (int i = 1; i <= 3; i++) {\nfor (int j = 1; j <= 3; j++) {\nSystem.out.print(i * j + \" \");\n}\nSystem.out.println();\n}",
        "1 2 3 2 4 6 3 6 9"
      ]
    },
    {
      "title": "Java For Each Loop",
      "summary": "The for-each Loop\nThere is also a \"for-each\" loop, which is used exclusively to loop through elements in an array (or other data structures):\nSyntaxGet your own Java Server\nThe for-each loop is simpler and more readable than a regular for loop, since you don't need a counter (like i < array.length).\nThe following example prints all elements in the cars array:\nExample\nTry it Yourself »\nHere is a similar example with numbers. We create an array of integers and use a for-each loop to print each value:\nExample\nTry it Yourself »\nNote: Don't worry if you don't fully understand arrays yet. You will learn more about them in the Java Arrays chapter.",
      "examples": [
        "for (type variableName : arrayName) { // code block to be executed }",
        "String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; for (String car : cars) { System.out.println(car); }",
        "int[] numbers = {10, 20, 30, 40}; for (int num : numbers) { System.out.println(num); }",
        "for",
        "i < array.length"
      ]
    },
    {
      "title": "Java For Loop Examples",
      "summary": "Real-Life Examples\nTo demonstrate a practical example of the for loop, let's create a program that counts to 100 by tens:\nExampleGet your own Java Server\nTry it Yourself »\nIn this example, we create a program that only print even values between 0 and 10:\nExample\nTry it Yourself »\nAnd in this example, we create a program that prints the multiplication table for a specified number:\nExample\nTry it Yourself »\nHere is a simple program that prints the seat numbers in a theater row:\nExample\nTry it Yourself »\nUse a loop to calculate the factorial of a given number:\nExample\nTry it Yourself »\nFactorial means multiplying a number by every number below it, down to 1. For example, the factorial of 5 is: 5 * 4 * 3 * 2 * 1 = 120",
      "examples": [
        "for (int i = 0; i <= 100; i += 10) { System.out.println(i); }",
        "for (int i = 0; i <= 10; i = i + 2) { System.out.println(i); }",
        "int number = 2; // Print the multiplication table for the number 2 for (int i = 1; i <= 10; i++) { System.out.println(number + \" x \" + i + \" = \" + (number * i)); }",
        "for (int seat = 1; seat <= 5; seat++) { System.out.println(\"Seat number: \" + seat); }",
        "int n = 5; int fact = 1; for (int i = 1; i <= n; i++) { fact *= i; } System.out.println(\"Factorial of \" + n + \" is \" + fact); // Output: Factorial of 5 is 120"
      ]
    },
    {
      "title": "Java Break and Continue",
      "summary": "Break\nYou have already seen the break statement used in an earlier chapter of this tutorial. It was used to \"jump out\" of a switch statement.\nThe break statement can also be used to jump out of a loop.\nThis example stops the loop when i is equal to 4:\nExampleGet your own Java Server\nTry it Yourself »\nContinue\nThe continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.\nThis example skips the value of 4:\nExample\nTry it Yourself »\nGood to Remember:\nbreak = stop the loop completely.\ncontinue = skip this round, but keep looping.\nCombining Break and Continue\nYou can also combine break and continue.\nThis example skips printing 2 and stops the loop at 4:\nExample\nTry it Yourself »\nREMOVE ADS\nBreak and Continue in While Loop\nYou can also use break and continue in while loops:\nBreak Example\nTry it Yourself »\nContinue Example\nTry it Yourself »\nReal-Life Example\nImagine processing a list of numbers where you want to skip negative values, but stop completely if you find a zero:\nExample\nTry it Yourself »\nNote: Don't worry if you don't fully understand the example above. It uses an array (int[] numbers = {3, -1, 7, 0, 9};) to store the numbers, and you will learn more about arrays in the next chapter.",
      "examples": [
        "for (int i = 0; i < 10; i++) { if (i == 4) { break; } System.out.println(i); }",
        "for (int i = 0; i < 10; i++) { if (i == 4) { continue; } System.out.println(i); }",
        "for (int i = 0; i < 6; i++) { if (i == 2) { continue; } if (i == 4) { break; } System.out.println(i);\n}",
        "int i = 0; while (i < 10) { System.out.println(i); i++; if (i == 4) { break; } }",
        "int i = 0; while (i < 10) { if (i == 4) { i++; continue; } System.out.println(i); i++; }",
        "int[] numbers = {3, -1, 7, 0, 9}; for (int n : numbers) { if (n < 0) { continue; // skip negative numbers } if (n == 0) { break; // stop loop when zero is found } System.out.println(n); }",
        "break",
        "switch",
        "continue",
        "for (int i = 0; i < 6; i++) { if (i == 2) { continue; } if (i == 4) { break; } System.out.println(i);",
        "int[] numbers = {3, -1, 7, 0, 9};"
      ]
    },
    {
      "title": "Java Arrays",
      "summary": "Java Arrays\nArrays are used to store multiple values in a single variable, instead of declaring separate variables for each value.\nTo declare an array, define the variable type with square brackets [ ] :\nWe have now declared a variable that holds an array of strings. To insert values to it, you can place the values in a comma-separated list, inside curly braces { }:\nTo create an array of integers, you could write:\nAccess the Elements of an Array\nYou can access an array element by referring to the index number.\nThis statement accesses the value of the first element in cars:\nExampleGet your own Java Server\nTry it Yourself »\nNote: Array indexes start with 0: [0] is the first element. [1] is the second element, etc.\nThink of an array as numbered boxes, where each box stores an element:\nChange an Array Element\nTo change the value of a specific element, refer to the index number:\nExample\nTry it Yourself »\nArray Length\nTo find out how many elements an array has, use the length property:\nExample\nTry it Yourself »\nThe new Keyword\nYou can also create an array by specifying its size with new. This makes an empty array with space for a fixed number of elements, which you can fill later:\nExample\nTry it Yourself »\nHowever, if you already know the values, you don't need to write new. Both of these create the same array:\nExample\nNote: You cannot write new String[4] {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}.\nIn Java, when using new, you either:\nUse new String[4] to create an empty array with 4 slots, and then fill them later\nOr use new String[] {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"} (without specifying the number of elements) to create the array and assign values at the same time\nTip: The shortcut syntax is most often used when the values are known at the start. Use new with a size when you want to create an empty array and fill it later.",
      "examples": [
        "String[] cars;",
        "String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};",
        "int[] myNum = {10, 20, 30, 40};",
        "String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; System.out.println(cars[0]); // Outputs Volvo",
        "cars[0] = \"Opel\";",
        "String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; cars[0] = \"Opel\"; System.out.println(cars[0]); // Now outputs Opel instead of Volvo",
        "String[] cars = new String[4]; // size is 4 cars[0] = \"Volvo\"; cars[1] = \"BMW\"; cars[2] = \"Ford\"; cars[3] = \"Mazda\"; System.out.println(cars[0]); // Outputs Volvo",
        "// With new String[] cars = new String[] {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; // Shortcut (most common) String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};",
        "[ ]",
        "{ }",
        "length",
        "new",
        "new String[4] {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}",
        "new String[4]",
        "new String[] {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}"
      ]
    },
    {
      "title": "Java Arrays Loop",
      "summary": "Loop Through an Array\nYou can loop through the array elements with the for loop, and use the length property to specify how many times the loop should run.\nThis example creates an array of strings and then uses a for loop to print each element, one by one:\nExampleGet your own Java Server\nTry it Yourself »\nHere is a similar example with numbers. We create an array of integers and use a for loop to print each value:\nExample\nTry it Yourself »\nCalculate the Sum of Elements\nNow that you know how to work with arrays and loops, let's use them together to calculate the sum of all elements in an array:\nExample\nTry it Yourself »\nLoop Through an Array with For-Each\nThere is also a \"for-each\" loop, which is used exclusively to loop through elements in an array (or other data structures):\nSyntax\nThe colon (:) is read as \"in\". So you can read the loop as: \"for each variable in array\".\nThe following example uses a for-each loop to print all elements in the cars array:\nExample\nTry it Yourself »\nThis means: for each String in the cars array (here called car), print its value.\nCompared to a regular for loop, the for-each loop is easier to write and read because it does not need a counter (like i < cars.length). However, it only gives you the values, not their positions (indexes) in the array.\nSo, if you need both the position (index) of each element and its value, a regular for loop is the right choice. For example, when printing seat numbers in a theater row, you need to show both the seat number (the index) and who is sitting there (the value):\nExample\nTry it Yourself »\nNote: The for-each loop is great when you only need to read elements. If you want to change the elements later, or keep track of their index, use a regular for loop instead.",
      "examples": [
        "String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; for (int i = 0; i < cars.length; i++) { System.out.println(cars[i]); }",
        "int[] numbers = {10, 20, 30, 40}; for (int i = 0; i < numbers.length; i++) { System.out.println(numbers[i]); }",
        "int[] numbers = {1, 5, 10, 25}; int sum = 0; // Loop through the array and add each element to sum for (int i = 0; i < numbers.length; i++) { sum += numbers[i]; } System.out.println(\"The sum is: \" + sum);",
        "for (type variable : arrayname) { // code block to be executed }",
        "String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; for (String car : cars) { System.out.println(car); }",
        "String[] seats = {\"Jenny\", \"Liam\", \"Angie\", \"Bo\"}; for (int i = 0; i < seats.length; i++) { System.out.println(\"Seat number \" + i + \" is taken by \" + seats[i]); }",
        "for",
        "length",
        ":",
        "String",
        "cars",
        "car",
        "i < cars.length"
      ]
    },
    {
      "title": "Java Arrays - Real-Life Examples",
      "summary": "Real-Life Example\nTo demonstrate a practical example of using arrays, let's create a program that calculates the average of different ages:\nExampleGet your own Java Server\nTry it Yourself »\nAnd in this example, we create a program that finds the lowest age among different ages:\nExample\nTry it Yourself »\nCreate a program with a list of numbers where you want to skip negative values, but stop completely if you find a zero:\nExample\nTry it Yourself »\nCreate a program that keeps track of the highest and lowest values in an array:\nExample\nTry it Yourself »\nCreate a program that prints the seat numbers in a theater row, showing both the seat number (the index) and who is sitting there (the value):\nExample\nTry it Yourself »",
      "examples": [
        "// An array storing different ages int ages[] = {20, 22, 18, 35, 48, 26, 87, 70}; float avg, sum = 0; // Get the length of the array int length = ages.length; // Loop through the elements of the array for (int age : ages) { sum += age; } // Calculate the average by dividing the sum by the length avg = sum / length; // Print the average System.out.println(\"The average age is: \" + avg);",
        "// An array storing different ages int ages[] = {20, 22, 18, 35, 48, 26, 87, 70}; // Get the length of the array int length = ages.length; // Create a 'lowest age' variable and assign the first array element of ages to it int lowestAge = ages[0]; // Loop through the elements of the ages array to find the lowest age for (int age : ages) { // Check if the current age is smaller than the current 'lowest age' if (lowestAge > age) { // If the smaller age is found, update 'lowest age' with that element lowestAge = age; } } // Output the value of the lowest age System.out.println(\"The lowest age in the array is: \" + lowestAge);",
        "int[] numbers = {3, -1, 7, 0, 9}; for (int n : numbers) { if (n < 0) { continue; // skip negative numbers } if (n == 0) { break; // stop loop when zero is found } System.out.println(n); }",
        "int[] numbers = {45, 12, 98, 33, 27}; int max = numbers[0]; int min = numbers[0]; for (int n : numbers) { if (n > max) { max = n; } if (n < min) { min = n; } } System.out.println(\"Max: \" + max); System.out.println(\"Min: \" + min);",
        "String[] seats = {\"Jenny\", \"Liam\", \"Angie\", \"Bo\"}; for (int i = 0; i < seats.length; i++) { System.out.println(\"Seat number \" + i + \" is taken by \" + seats[i]); }"
      ]
    },
    {
      "title": "Java Multi-Dimensional Arrays",
      "summary": "Multidimensional Arrays\nA multidimensional array is an array that contains other arrays.\nYou can use it to store data in a table with rows and columns.\nTo create a two-dimensional array, write each row inside its own curly braces:\nHere, myNumbers has two arrays (two rows):\nFirst row: {1, 4, 2}\nSecond row: {3, 6, 8}\nThink of it like this:\nAccess Elements\nTo access an element of a two-dimensional array, you need two indexes: the first for the row, and the second for the column.\nRemember: Array indexes start at 0. That means row 0 is the first row, and column 0 is the first column. (So row index 1 is the second row, and column index 2 is the third column.)\nThis statement accesses the element in the second row (index 1) and third column (index 2) of the myNumbers array:\nExampleGet your own Java Server\nTry it Yourself »\nThis example prints the value at row 0, column 1:\nExample\nTry it Yourself »\nChange Element Values\nYou can overwrite an existing element using the same two-index notation (row, then column):\nExample\nTry it Yourself »\nRows and Columns (Lengths)\nYou can use length to get the number of rows, and myNumbers[row].length for the number of columns in a given row:\nExample: Sizes\nTry it Yourself »\nNote: Notice how rows can have different lengths - In this example, the second row has more elements than the first, and that's perfectly valid in Java.\nLoop Through a Multidimensional Array\nUse a for loop inside another for loop to visit every element (row by row):\nExample\nTry it Yourself »\nOr use a for-each loop in both levels, which many find easier to read:\nExample\nTry it Yourself »",
      "examples": [
        "int[][] myNumbers = { {1, 4, 2}, {3, 6, 8} };",
        "int[][] myNumbers = { {1, 4, 2}, {3, 6, 8} }; System.out.println(myNumbers[1][2]); // Outputs 8",
        "int[][] myNumbers = { {1, 4, 2}, {3, 6, 8} }; myNumbers[1][2] = 9; System.out.println(myNumbers[1][2]); // Outputs 9 instead of 8",
        "int[][] myNumbers = { {1, 4, 2}, {3, 6, 8, 5, 2} }; System.out.println(\"Rows: \" + myNumbers.length); // 2 System.out.println(\"Cols in row 0: \" + myNumbers[0].length); // 3 System.out.println(\"Cols in row 1: \" + myNumbers[1].length); // 5",
        "int[][] myNumbers = { {1, 4, 2}, {3, 6, 8, 5, 2} }; for (int row = 0; row < myNumbers.length; row++) { for (int col = 0; col < myNumbers[row].length; col++) { System.out.println(\"myNumbers[\" + row + \"][\" + col + \"] = \" + myNumbers[row][col]); } }",
        "int[][] myNumbers = { {1, 4, 2}, {3, 6, 8, 5, 2} }; for (int[] row : myNumbers) { for (int num : row) { System.out.println(num); } }",
        "{1, 4, 2}",
        "{3, 6, 8}",
        "0",
        "1",
        "2",
        "length",
        "myNumbers[row].length",
        "for"
      ]
    },
    {
      "title": "Java Methods",
      "summary": "A method is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a method.\nMethods are used to perform certain actions, and they are also known as functions.\nWhy use methods? To reuse code: define the code once, and use it many times.\nCreate a Method\nA method must be declared within a class. It is defined with the name of the method, followed by parentheses (). Java provides some pre-defined methods, such as System.out.println(), but you can also create your own methods to perform certain actions:\nExampleGet your own Java Server\nCreate a method inside Main:\nmyMethod() is the name of the method\nstatic means that the method belongs to the Main class and not an object of the Main class. You will learn more about objects and how to access methods through objects later in this tutorial.\nvoid means that this method does not have a return value. You will learn more about return values later in this chapter\nCall a Method\nTo call a method in Java, write the method's name followed by two parentheses () and a semicolon;\nIn the following example, myMethod() is used to print a text (the action), when it is called:\nExample\nInside main, call the myMethod() method:\nTry it Yourself »\nA method can also be called multiple times:\nExample\nTry it Yourself »\nIn the next chapter, Method Parameters, you will learn how to pass data (parameters) into a method.",
      "examples": [
        "public class Main { static void myMethod() { // code to be executed } }",
        "public class Main { static void myMethod() { System.out.println(\"I just got executed!\"); } public static void main(String[] args) { myMethod(); } } // Outputs \"I just got executed!\"",
        "public class Main { static void myMethod() { System.out.println(\"I just got executed!\"); } public static void main(String[] args) { myMethod(); myMethod(); myMethod(); } } // I just got executed! // I just got executed! // I just got executed!",
        "System.out.println()",
        "myMethod()",
        "static",
        "void",
        "main"
      ]
    },
    {
      "title": "Java Method Parameters",
      "summary": "Parameters and Arguments\nInformation can be passed to methods as a parameter. Parameters act as variables inside the method.\nParameters are specified after the method name, inside the parentheses. You can add as many parameters as you want, just separate them with a comma.\nThe following example has a method that takes a String called fname as parameter. When the method is called, we pass along a first name, which is used inside the method to print the full name:\nExampleGet your own Java Server\nTry it Yourself »\nWhen a parameter is passed to the method, it is called an argument. So, from the example above: fname is a parameter, while Liam, Jenny and Anja are arguments.\nMultiple Parameters\nYou can have as many parameters as you like:\nExample\nTry it Yourself »\nNote that when you are working with multiple parameters, the method call must have the same number of arguments as there are parameters, and the arguments must be passed in the same order.\nA Method with If...Else\nIt is common to use if...else statements inside methods:\nExample\nTry it Yourself »",
      "examples": [
        "public class Main { static void myMethod(String fname) { System.out.println(fname + \" Refsnes\"); } public static void main(String[] args) { myMethod(\"Liam\"); myMethod(\"Jenny\"); myMethod(\"Anja\"); } } // Liam Refsnes // Jenny Refsnes // Anja Refsnes",
        "public class Main { static void myMethod(String fname, int age) { System.out.println(fname + \" is \" + age); } public static void main(String[] args) { myMethod(\"Liam\", 5); myMethod(\"Jenny\", 8); myMethod(\"Anja\", 31); } } // Liam is 5 // Jenny is 8 // Anja is 31",
        "public class Main { // Create a checkAge() method with an integer variable called age static void checkAge(int age) { // If age is less than 18, print \"access denied\" if (age < 18) { System.out.println(\"Access denied - You are not old enough!\"); // If age is greater than, or equal to, 18, print \"access granted\" } else { System.out.println(\"Access granted - You are old enough!\"); } } public static void main(String[] args) { checkAge(20); // Call the checkAge method and pass along an age of 20 } } // Outputs \"Access granted - You are old enough!\"",
        "String",
        "fname",
        "Liam",
        "Jenny",
        "Anja",
        "if...else"
      ]
    },
    {
      "title": "Java Return",
      "summary": "Return Values\nIn the previous page, we used the void keyword in all examples (like static void myMethod(int x)), which indicates that the method should not return a value.\nIf you want the method to return a value, you can use a primitive data type (such as int, char, etc.) instead of void, and use the return keyword inside the method:\nExampleGet your own Java Server\nTry it Yourself »\nThis example returns the sum of a method's two parameters:\nExample\nTry it Yourself »\nYou can also store the result in a variable (recommended, as it is easier to read and maintain):\nExample\nTry it Yourself »\nPractical Example\nHere is a simple and fun \"game example\" using a method that returns a value, to show the double of the numbers 1 through 5 (using a for loop):\nExample\nTry it Yourself »",
      "examples": [
        "public class Main { static int myMethod(int x) { return 5 + x; } public static void main(String[] args) { System.out.println(myMethod(3)); } } // Outputs 8 (5 + 3)",
        "public class Main { static int myMethod(int x, int y) { return x + y; } public static void main(String[] args) { System.out.println(myMethod(5, 3)); } } // Outputs 8 (5 + 3)",
        "public class Main { static int myMethod(int x, int y) { return x + y; } public static void main(String[] args) { int z = myMethod(5, 3); System.out.println(z); } } // Outputs 8 (5 + 3)",
        "public class Main { // Method that doubles the number static int doubleGame(int x) { return x * 2; } public static void main(String[] args) { for (int i = 1; i <= 5; i++) { System.out.println(\"Double of \" + i + \" is \" + doubleGame(i)); } } }",
        "void",
        "static void myMethod(int x)",
        "int",
        "char",
        "return",
        "for"
      ]
    },
    {
      "title": "Java Method Overloading",
      "summary": "Method Overloading\nWith method overloading, multiple methods can have the same name with different parameters:\nExampleGet your own Java Server\nConsider the following example, which has two methods that add numbers of different type:\nExample\nTry it Yourself »\nInstead of defining two methods that should do the same thing, it is better to overload one.\nIn the example below, we overload the plusMethod method to work for both int and double:\nExample\nTry it Yourself »\nNote: Multiple methods can have the same name as long as the number and/or type of parameters are different.",
      "examples": [
        "int myMethod(int x) float myMethod(float x) double myMethod(double x, double y)",
        "static int plusMethodInt(int x, int y) { return x + y; } static double plusMethodDouble(double x, double y) { return x + y; } public static void main(String[] args) { int myNum1 = plusMethodInt(8, 5); double myNum2 = plusMethodDouble(4.3, 6.26); System.out.println(\"int: \" + myNum1); System.out.println(\"double: \" + myNum2); }",
        "static int plusMethod(int x, int y) { return x + y; } static double plusMethod(double x, double y) { return x + y; } public static void main(String[] args) { int myNum1 = plusMethod(8, 5); double myNum2 = plusMethod(4.3, 6.26); System.out.println(\"int: \" + myNum1); System.out.println(\"double: \" + myNum2); }",
        "plusMethod",
        "int",
        "double"
      ]
    },
    {
      "title": "Java Scope",
      "summary": "Java Scope\nIn Java, variables are only accessible inside the region where they are created. This is called scope.\nMethod Scope\nVariables declared directly inside a method are available anywhere in the method following the line of code in which they were declared:\nExampleGet your own Java Server\nTry it Yourself »\nBlock Scope\nA block of code refers to all of the code between curly braces { }.\nVariables declared inside a block of code are only accessible by the code between the curly braces, and only after the line in which the variable was declared:\nExample\nTry it Yourself »\nA block of code can stand alone, or be part of an if, while, or for statement. In a for loop, the variable declared in the loop header (like int i = 0) only exists inside the loop.\nLoop Scope\nVariables declared inside a for loop only exist inside the loop:\nExample\nTry it Yourself »\nThe for loop has its own block ({ ... }).\nThe variable i declared in the loop header (int i = 0) is only accessible inside that loop block.\nOnce the loop ends, i is destroyed, so you can't use it outside.\nWhy this matters\nLoop variables are not available outside the loop.\nYou can safely reuse the same variable name (i, j, etc.) in different loops in the same method:\nExample\nTry it Yourself »\nClass Scope\nVariables declared inside a class but outside any method have class scope (also called fields). These variables can be accessed by all methods in the class:\nExample\nTry it Yourself »\nNote: You will learn more about classes and objects in the Java OOP chapters.",
      "examples": [
        "public class Main { public static void main(String[] args) { // Code here CANNOT use x int x = 100; // Code here CAN use x System.out.println(x); } }",
        "public class Main { public static void main(String[] args) { // Code here CANNOT use x { // This is a block // Code here CANNOT use x int x = 100; // Code here CAN use x System.out.println(x); } // The block ends here // Code here CANNOT use x } }",
        "public class Main { public static void main(String[] args) { for (int i = 0; i < 5; i++) { System.out.println(i); // i is accessible here } // i is NOT accessible here } }",
        "public class Main { public static void main(String[] args) { for (int i = 0; i < 3; i++) { System.out.println(\"Loop 1: \" + i); } for (int i = 0; i < 2; i++) { System.out.println(\"Loop 2: \" + i); } } }",
        "public class Main { int x = 5; // Class variable public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj.x); // Accessible here } }",
        "{ }",
        "if",
        "while",
        "for",
        "int i = 0",
        "{ ... }",
        "i",
        "j"
      ]
    },
    {
      "title": "Java Recursion",
      "summary": "Java Recursion\nRecursion is the technique of making a function call itself. This technique provides a way to break complicated problems down into simpler problems which are easier to solve.\nRecursion may be a bit difficult to understand. The best way to figure out how it works is to experiment with it.\nRecursion Example\nAdding two numbers together is easy to do, but adding a range of numbers is more complicated. In the following example, recursion is used to add a range of numbers together by breaking it down into the simple task of adding two numbers:\nExampleGet your own Java Server\nUse recursion to add all numbers from 1 to 10.\nTry it Yourself »\nExample Explained\nWhen the sum() method is called, it adds parameter k to the sum of all numbers smaller than k and returns the result. When k becomes 0, the method just returns 0. When running, the program follows these steps:\nSince the method does not call itself when k is 0, the program stops there and returns the result.\nHalting Condition\nJust as loops can run into the problem of infinite looping, recursive methods can run into the problem of infinite recursion. Infinite recursion is when the method never stops calling itself. Every recursive method should have a halting condition, which is the condition where the method stops calling itself. In the previous example, the halting condition is when the parameter k becomes 0.\nIt is helpful to see a variety of different examples to better understand the concept. In this example, the method adds a range of numbers between a start and an end. The halting condition for this recursive method is when end is not greater than start:\nExample\nUse recursion to add all numbers from 5 to 10 (5+6+7+8+9+10):\nTry it Yourself »\nBe careful with recursion: it's easy to accidentally write a method that never stops or uses too much memory. But when written correctly, recursion can be both efficient and elegant.\nCountdown with Recursion\nThis example demonstrates how to use recursion to create a countdown function:\nExample\nThe method calls itself with n - 1 until n becomes 0.\nCalculate Factorial with Recursion\nThis example uses a recursive method to calculate the factorial of 5:\nFactorial means multiplying a number by every number below it, down to 1. For example, the factorial of 5 is: 5 * 4 * 3 * 2 * 1 = 120. By definition, 0! is also 1.",
      "examples": [
        "public class Main { public static int sum(int k) { if (k > 0) { return k + sum(k - 1); } else { return 0; } } public static void main(String[] args) { int result = sum(10); System.out.println(result); } }",
        "public class Main { public static int sum(int start, int end) { if (end > start) { return end + sum(start, end - 1); } else { return end; } } public static void main(String[] args) { int result = sum(5, 10); System.out.println(result); } }",
        "public class Main { static void countdown(int n) { if (n > 0) { System.out.print(n + \" \"); countdown(n - 1); } } public static void main(String[] args) { countdown(5); } }",
        "public class Main { static int factorial(int n) { if (n > 1) { return n * factorial(n - 1); } else { return 1; } } public static void main(String[] args) { System.out.println(\"Factorial of 5 is \" + factorial(5)); } }",
        "sum()",
        "k",
        "n - 1",
        "n",
        "0",
        "0!"
      ]
    },
    {
      "title": "Java OOP",
      "summary": "Java - What is OOP?\nOOP stands for Object-Oriented Programming.\nProcedural programming is about writing procedures or methods that perform operations on the data, while object-oriented programming is about creating objects that contain both data and methods.\nObject-oriented programming has several advantages over procedural programming:\nOOP is faster and easier to execute\nOOP provides a clear structure for the programs\nOOP helps to keep the Java code DRY \"Don't Repeat Yourself\", and makes the code easier to maintain, modify and debug\nOOP makes it possible to create full reusable applications with less code and shorter development time\nTip: The \"Don't Repeat Yourself\" (DRY) principle is about reducing the repetition of code. You should extract out the codes that are common for the application, and place them at a single place and reuse them instead of repeating it.\nJava - What are Classes and Objects?\nClasses and objects are the two main aspects of object-oriented programming.\nLook at the following illustration to see the difference between class and objects:\nclass\nFruit\nobjects\nApple\nBanana\nMango\nAnother example:\nclass\nCar\nobjects\nVolvo\nAudi\nToyota\nSo, a class is a template for objects, and an object is an instance of a class.\nWhen the individual objects are created, they inherit all the variables and methods from the class.\nYou will learn much more about classes and objects in the next chapter.",
      "examples": []
    },
    {
      "title": "Java Classes and Objects",
      "summary": "Java Classes/Objects\nJava is an object-oriented programming language.\nEverything in Java is associated with classes and objects, along with its attributes and methods. For example: in real life, a car is an object. The car has attributes, such as weight and color, and methods, such as drive and brake.\nA Class is like an object constructor, or a \"blueprint\" for creating objects.\nCreate a Class\nTo create a class, use the keyword class.\nIn this example, we create a class named \"Main\" with a variable x:\nRemember from the Java Syntax chapter that a class should always start with an uppercase first letter, and that the name of the java file should match the class name.\nCreate an Object\nIn Java, an object is created from a class. We have already created the class named Main, so now we can use this to create objects.\nTo create an object of Main, specify the class name, followed by the object name, and use the keyword new:\nExampleGet your own Java Server\nCreate an object called \"myObj\" and print the value of x:\nTry it Yourself »\nREMOVE ADS\nMultiple Objects\nYou can create multiple objects of one class:\nExample\nCreate two objects of Main:\nTry it Yourself »\nUsing Multiple Classes\nYou can also create an object of a class and access it in another class. This is often used for better organization of classes (one class has all the attributes and methods, while the other class holds the main() method (code to be executed)).\nRemember that the name of the java file should match the class name. In this example, we have created two files in the same directory/folder:\nMain.java\nSecond.java\nWhen both files have been compiled:\nRun the Second.java file:\nAnd the output will be:\nYou will learn much more about classes and objects in the next chapters.",
      "examples": [
        "public class Main { int x = 5; }",
        "public class Main { int x = 5; public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj.x); } }",
        "public class Main { int x = 5; public static void main(String[] args) { Main myObj1 = new Main(); // Object 1 Main myObj2 = new Main(); // Object 2 System.out.println(myObj1.x); System.out.println(myObj2.x); } }",
        "class Second { public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj.x); } }",
        "C:\\Users\\Your Name>javac Main.java\nC:\\Users\\Your Name>javac Second.java",
        "C:\\Users\\Your Name>java Second",
        "class",
        "Main",
        "x",
        "new",
        "myObj",
        "main()",
        "5"
      ]
    },
    {
      "title": "Java Class Attributes",
      "summary": "Java Class Attributes\nIn the previous chapter, we used the term \"variable\" for x in the example (as shown below). It is actually an attribute of the class. Or you could say that class attributes are variables within a class:\nCreate a class called \"Main\" with two attributes: x and y:\nAnother term for class attributes is fields.\nAccessing Attributes\nYou can access attributes by creating an object of the class, and by using the dot syntax (.):\nThe following example will create an object of the Main class, with the name myObj. We use the x attribute on the object to print its value:\nExampleGet your own Java Server\nCreate an object called \"myObj\" and print the value of x:\nTry it Yourself »\nModify Attributes\nYou can also modify attribute values:\nExample\nSet the value of x to 40:\nTry it Yourself »\nOr override existing values:\nExample\nChange the value of x to 25:\nTry it Yourself »\nIf you don't want the ability to override existing values, declare the attribute as final:\nExample\nTry it Yourself »\nThe final keyword is useful when you want a variable to always store the same value, like PI (3.14159...).\nThe final keyword is called a \"modifier\". You will learn more about these in the Java Modifiers Chapter.\nREMOVE ADS\nMultiple Objects\nIf you create multiple objects of one class, you can change the attribute values in one object, without affecting the attribute values in the other:\nExample\nChange the value of x to 25 in myObj2, and leave x in myObj1 unchanged:\nTry it Yourself »\nMultiple Attributes\nYou can specify as many attributes as you want:\nExample\nTry it Yourself »\nThe next chapter will teach you how to create class methods and how to access them with objects.",
      "examples": [
        "public class Main { int x = 5; int y = 3; }",
        "public class Main { int x = 5; public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj.x); } }",
        "public class Main { int x; public static void main(String[] args) { Main myObj = new Main(); myObj.x = 40; System.out.println(myObj.x); } }",
        "public class Main { int x = 10; public static void main(String[] args) { Main myObj = new Main(); myObj.x = 25; // x is now 25 System.out.println(myObj.x); } }",
        "public class Main { final int x = 10; public static void main(String[] args) { Main myObj = new Main(); myObj.x = 25; // will generate an error: cannot assign a value to a final variable System.out.println(myObj.x); } }",
        "public class Main { int x = 5; public static void main(String[] args) { Main myObj1 = new Main(); // Object 1 Main myObj2 = new Main(); // Object 2 myObj2.x = 25; System.out.println(myObj1.x); // Outputs 5 System.out.println(myObj2.x); // Outputs 25 } }",
        "public class Main { String fname = \"John\"; String lname = \"Doe\"; int age = 24; public static void main(String[] args) { Main myObj = new Main(); System.out.println(\"Name: \" + myObj.fname + \" \" + myObj.lname); System.out.println(\"Age: \" + myObj.age); } }",
        "x",
        "Main",
        "y",
        ".",
        "myObj",
        "final",
        "myObj2",
        "myObj1"
      ]
    },
    {
      "title": "Java Class Methods",
      "summary": "Java Class Methods\nYou learned from the Java Methods chapter that methods are declared within a class, and that they are used to perform certain actions:\nCreate a method named myMethod() in Main:\nmyMethod() prints a text (the action), when it is called. To call a method, write the method's name followed by two parentheses () and a semicolon;\nExampleGet your own Java Server\nInside main, call myMethod():\nTry it Yourself »\nStatic vs. Public\nYou will often see Java programs that have either static or public attributes and methods.\nIn the example above, we created a static method, which means that it can be accessed without creating an object of the class, unlike public, which can only be accessed by objects:\nExample\nAn example to demonstrate the differences between static and public methods:\nTry it Yourself »\nNote: You will learn more about these keywords (called modifiers) in the Java Modifiers chapter.\nAccess Methods With an Object\nExample\nCreate a Car object named myCar. Call the fullThrottle() and speed() methods on the myCar object, and run the program:\nTry it Yourself »\nExample explained\n1) We created a custom Main class with the class keyword.\n2) We created the fullThrottle() and speed() methods in the Main class.\n3) The fullThrottle() method and the speed() method will print out some text, when they are called.\n4) The speed() method accepts an int parameter called maxSpeed - we will use this in 8).\n5) In order to use the Main class and its methods, we need to create an object of the Main Class.\n6) Then, go to the main() method, which you know by now is a built-in Java method that runs your program (any code inside main is executed).\n7) By using the new keyword we created an object with the name myCar.\n8) Then, we call the fullThrottle() and speed() methods on the myCar object, and run the program using the name of the object (myCar), followed by a dot (.), followed by the name of the method (fullThrottle(); and speed(200);). Notice that we add an int parameter of 200 inside the speed() method.\nRemember that..\nThe dot (.) is used to access the object's attributes and methods.\nTo call a method in Java, write the method name followed by a set of parentheses (), followed by a semicolon (;).\nA class must have a matching filename (Main and Main.java).\nREMOVE ADS\nUsing Multiple Classes\nLike we specified in the Classes chapter, it is a good practice to create an object of a class and access it in another class.\nRemember that the name of the java file should match the class name. In this example, we have created two files in the same directory:\nMain.java\nSecond.java\nWhen both files have been compiled:\nRun the Second.java file:\nAnd the output will be:",
      "examples": [
        "public class Main { static void myMethod() { System.out.println(\"Hello World!\"); } }",
        "public class Main { static void myMethod() { System.out.println(\"Hello World!\"); } public static void main(String[] args) { myMethod(); } } // Outputs \"Hello World!\"",
        "public class Main { // Static method static void myStaticMethod() { System.out.println(\"Static methods can be called without creating objects\"); } // Public method public void myPublicMethod() { System.out.println(\"Public methods must be called by creating objects\"); } // Main method public static void main(String[] args) { myStaticMethod(); // Call the static method // myPublicMethod(); This would compile an error Main myObj = new Main(); // Create an object of Main myObj.myPublicMethod(); // Call the public method on the object } }",
        "// Create a Main class public class Main { // Create a fullThrottle() method public void fullThrottle() { System.out.println(\"The car is going as fast as it can!\"); } // Create a speed() method and add a parameter public void speed(int maxSpeed) { System.out.println(\"Max speed is: \" + maxSpeed); } // Inside main, call the methods on the myCar object public static void main(String[] args) { Main myCar = new Main(); // Create a myCar object myCar.fullThrottle(); // Call the fullThrottle() method myCar.speed(200); // Call the speed() method } } // The car is going as fast as it can! // Max speed is: 200",
        "public class Main { public void fullThrottle() { System.out.println(\"The car is going as fast as it can!\"); } public void speed(int maxSpeed) { System.out.println(\"Max speed is: \" + maxSpeed); } }",
        "class Second { public static void main(String[] args) { Main myCar = new Main(); // Create a myCar object myCar.fullThrottle(); // Call the fullThrottle() method myCar.speed(200); // Call the speed() method } }",
        "C:\\Users\\Your Name>javac Main.java\nC:\\Users\\Your Name>javac Second.java",
        "C:\\Users\\Your Name>java Second",
        "myMethod()",
        "main",
        "static",
        "public",
        "myCar",
        "fullThrottle()",
        "speed()",
        "Main",
        "class",
        "int",
        "maxSpeed",
        "main()",
        "new",
        ".",
        "fullThrottle();",
        "speed(200);",
        ";",
        "The car is going as fast as it can!\nMax speed is: 200"
      ]
    },
    {
      "title": "Java Constructors",
      "summary": "Java Constructors\nA constructor in Java is a special method that is used to initialize objects.\nThe constructor is called when an object of a class is created.\nIt can be used to set initial values for object attributes:\nExampleGet your own Java Server\nCreate a constructor:\nTry it Yourself »\nNote that the constructor name must match the class name, and it cannot have a return type (like void).\nAlso note that the constructor is called when the object is created.\nAll classes have constructors by default: if you do not create a class constructor yourself, Java creates one for you. However, then you are not able to set initial values for object attributes.\nREMOVE ADS\nConstructor Parameters\nConstructors can also take parameters, which is used to initialize attributes.\nThe following example adds an int y parameter to the constructor. Inside the constructor we set x to y (x=y). When we call the constructor, we pass a parameter to the constructor (5), which will set the value of x to 5:\nExample\nTry it Yourself »\nYou can have as many parameters as you want:\nExample\nTry it Yourself »",
      "examples": [
        "// Create a Main class public class Main { int x; // Create a class attribute // Create a class constructor for the Main class public Main() { x = 5; // Set the initial value for the class attribute x } public static void main(String[] args) { Main myObj = new Main(); // Create an object of class Main (This will call the constructor) System.out.println(myObj.x); // Print the value of x } } // Outputs 5",
        "public class Main { int x; public Main(int y) { x = y; } public static void main(String[] args) { Main myObj = new Main(5); System.out.println(myObj.x); } } // Outputs 5",
        "public class Main { int modelYear; String modelName; public Main(int year, String name) { modelYear = year; modelName = name; } public static void main(String[] args) { Main myCar = new Main(1969, \"Mustang\"); System.out.println(myCar.modelYear + \" \" + myCar.modelName); } } // Outputs 1969 Mustang",
        "void",
        "int y"
      ]
    },
    {
      "title": "Java this",
      "summary": "Java this Keyword\nThe this keyword in Java refers to the current object in a method or constructor.\nThe this keyword is often used to avoid confusion when class attributes have the same name as method or constructor parameters.\nAccessing Class Attributes\nSometimes a constructor or method has a parameter with the same name as a class variable. When this happens, the parameter temporarily hides the class variable inside that method or constructor.\nTo refer to the class variable and not the parameter, you can use the this keyword:\nExampleGet your own Java Server\nOutput:\nTry it Yourself »\nTip: Think of this.x = x; as: \"this.x (the class variable) gets the value of x (the parameter).\"\nWithout this, the code above x = x; would set the parameter x equal to itself, and the class variable would stay uninitialized (0).\nCalling a Constructor from Another Constructor\nYou can also use this() to call another constructor in the same class.\nThis is useful when you want to provide default values or reuse initialization code instead of repeating it.\nExample\nOutput:\nTry it Yourself »\nNote: The call to this() must be the first statement inside the constructor.\nWhen to use this?\nWhen a constructor or method has a parameter with the same name as a class variable, use this to update the class variable correctly.\nTo call another constructor in the same class and reuse code.",
      "examples": [
        "public class Main { int x; // Class variable x // Constructor with one parameter x public Main(int x) { this.x = x; // refers to the class variable x } public static void main(String[] args) { // Create an object of Main and pass the value 5 to the constructor Main myObj = new Main(5); System.out.println(\"Value of x = \" + myObj.x); } }",
        "public class Main { int modelYear; String modelName; // Constructor with one parameter public Main(String modelName) { // Call the two-parameter constructor to reuse code and set a default year this(2020, modelName); } // Constructor with two parameters public Main(int modelYear, String modelName) { // Use 'this' to assign values to the class variables this.modelYear = modelYear; this.modelName = modelName; } // Method to print car information public void printInfo() { System.out.println(modelYear + \" \" + modelName); } public static void main(String[] args) { // Create a car with only model name (uses default year) Main car1 = new Main(\"Corvette\"); // Create a car with both model year and name Main car2 = new Main(1969, \"Mustang\"); car1.printInfo(); car2.printInfo(); } }",
        "this",
        "public class Main { int x; // Class variable x // Constructor with one parameter x public Main(int x) { this.x = x; // refers to the class variable x",
        "public static void main(String[] args) { // Create an object of Main and pass the value 5 to the constructor Main myObj = new Main(5); System.out.println(\"Value of x = \" + myObj.x);",
        "Value of x = 5",
        "this.x = x;",
        "this.x",
        "x",
        "x = x;",
        "0",
        "this()",
        "2020 Corvette\n1969 Mustang"
      ]
    },
    {
      "title": "Java Modifiers",
      "summary": "Modifiers\nBy now, you are quite familiar with the public keyword that appears in almost all of our examples:\nThe public keyword is an access modifier, meaning that it is used to set the access level for classes, attributes, methods and constructors.\nWe divide modifiers into two groups:\nAccess Modifiers - controls the access level\nNon-Access Modifiers - do not control access level, but provides other functionality\nAccess Modifiers\nFor classes, you can use either public or default:\nFor attributes, methods and constructors, you can use the one of the following:\nPublic vs. Private Example\nIn the example below, the class has one public attribute and one private attribute.\nThink of it like real life:\npublic - a public park, everyone can enter\nprivate - your house key, only you can use it\nExampleGet your own Java Server\nTry it Yourself »\nExample explained\nHere, name is declared as public, so it can be accessed from outside the Person class. But age is declared as private, so it can only be used inside the Person class.",
      "examples": [
        "public class Main",
        "class Person { public String name = \"John\"; // Public - accessible everywhere private int age = 30; // Private - only accessible inside this class } public class Main { public static void main(String[] args) { Person p = new Person(); System.out.println(p.name); // Works fine System.out.println(p.age); // Error: age has private access in Person } }",
        "public",
        "private",
        "protected",
        "name",
        "Person",
        "age"
      ]
    },
    {
      "title": "Java Non-Access Modifiers",
      "summary": "Non-Access Modifiers\nNon-access modifiers do not control visibility (like public or private), but instead add other features to classes, methods, and attributes.\nThe most commonly used non-access modifiers are final, static, and abstract.\nFinal\nIf you don't want the ability to override existing attribute values, declare attributes as final:\nExampleGet your own Java Server\nTry it Yourself »\nStatic\nA static method means that it can be accessed without creating an object of the class, unlike public:\nExample\nAn example to demonstrate the differences between static and public methods:\nTry it Yourself »\nAbstract\nAn abstract method belongs to an abstract class, and it does not have a body. The body is provided by the subclass:\nTry it Yourself »\nNon-Access Modifiers List\nFor classes, you can use either final or abstract:\nFor attributes and methods, you can use the one of the following:",
      "examples": [
        "public class Main { final int x = 10; final double PI = 3.14; public static void main(String[] args) { Main myObj = new Main(); myObj.x = 50; // will generate an error: cannot assign a value to a final variable myObj.PI = 25; // will generate an error: cannot assign a value to a final variable System.out.println(myObj.x); } }",
        "public class Main { // Static method static void myStaticMethod() { System.out.println(\"Static methods can be called without creating objects\"); } // Public method public void myPublicMethod() { System.out.println(\"Public methods must be called by creating objects\"); } // Main method public static void main(String[ ] args) { myStaticMethod(); // Call the static method // myPublicMethod(); This would output an error Main myObj = new Main(); // Create an object of Main myObj.myPublicMethod(); // Call the public method } }",
        "// abstract class\nabstract class Main { public String fname = \"John\"; public int age = 24; public abstract void study(); // abstract method } // Subclass (inherit from Main) class Student extends Main { public int graduationYear = 2018; public void study() { // the body of the abstract method is provided here System.out.println(\"Studying all day long\"); } }",
        "// Code from filename: Second.java class Second { public static void main(String[] args) { // create an object of the Student class (which inherits attributes and methods from Main) Student myObj = new Student(); System.out.println(\"Name: \" + myObj.fname); System.out.println(\"Age: \" + myObj.age); System.out.println(\"Graduation Year: \" + myObj.graduationYear); myObj.study(); // call abstract method\n} }",
        "public",
        "private",
        "final",
        "static",
        "abstract",
        "abstract void run();",
        "transient",
        "synchronized",
        "volatile"
      ]
    },
    {
      "title": "Java Encapsulation",
      "summary": "Encapsulation\nThe meaning of Encapsulation, is to make sure that \"sensitive\" data is hidden from users. To achieve this, you must:\ndeclare class variables/attributes as private\nprovide public get and set methods to access and update the value of a private variable\nGet and Set\nYou learned from the previous chapter that private variables can only be accessed within the same class (an outside class has no access to it). However, it is possible to access them if we provide public get and set methods.\nThe get method returns the variable value, and the set method sets the value.\nSyntax for both is that they start with either get or set, followed by the name of the variable, with the first letter in upper case:\nExampleGet your own Java Server\nThe get method returns the value of the variable name.\nThe set method takes a parameter (newName) and assigns it to the name variable. The this keyword is used to refer to the current object.\nHowever, as the name variable is declared as private, we cannot access it from outside this class:\nExample\nRun Example »\nIf the variable was declared as public, we would expect the following output:\nHowever, as we try to access a private variable, we get an error:\nInstead, we use the getName() and setName() methods to access and update the variable:\nExample\nTry it Yourself »\nWhy Encapsulation?\nBetter control of class attributes and methods\nClass attributes can be made read-only (if you only use the get method), or write-only (if you only use the set method)\nFlexible: the programmer can change one part of the code without affecting other parts\nIncreased security of data",
      "examples": [
        "public class Person { private String name; // private = restricted access // Getter public String getName() { return name; } // Setter public void setName(String newName) { this.name = newName; } }",
        "public class Main { public static void main(String[] args) { Person myObj = new Person(); myObj.name = \"John\"; // error System.out.println(myObj.name); // error } }",
        "public class Main { public static void main(String[] args) { Person myObj = new Person(); myObj.setName(\"John\"); // Set the value of the name variable to \"John\" System.out.println(myObj.getName()); } } // Outputs \"John\"",
        "private",
        "get",
        "set",
        "name",
        "newName",
        "this",
        "public",
        "John",
        "MyClass.java:4: error: name has private access in Person\nmyObj.name = \"John\";\n^\nMyClass.java:5: error: name has private access in Person\nSystem.out.println(myObj.name);\n^\n2 errors",
        "getName()",
        "setName()"
      ]
    },
    {
      "title": "Java Packages",
      "summary": "Java Packages & API\nA package in Java is used to group related classes. Think of it as a folder in a file directory. We use packages to avoid name conflicts, and to write a better maintainable code. Packages are divided into two categories:\nBuilt-in Packages (packages from the Java API)\nUser-defined Packages (create your own packages)\nBuilt-in Packages\nThe Java API is a library of prewritten classes, that are free to use, included in the Java Development Environment.\nThe library contains components for managing input, database programming, and much much more. The complete list can be found at Oracles website: https://docs.oracle.com/javase/8/docs/api/.\nThe library is divided into packages and classes. Meaning you can either import a single class (along with its methods and attributes), or a whole package that contain all the classes that belong to the specified package.\nTo use a class or a package from the library, you need to use the import keyword:\nSyntaxGet your own Java Server\nImport a Class\nIf you find a class you want to use, for example, the Scanner class, which is used to get user input, write the following code:\nExample\nIn the example above, java.util is a package, while Scanner is a class of the java.util package.\nTo use the Scanner class, create an object of the class and use any of the available methods found in the Scanner class documentation. In our example, we will use the nextLine() method, which is used to read a complete line:\nExample\nUsing the Scanner class to get user input:\nRun Example »\nREMOVE ADS\nImport a Package\nThere are many packages to choose from. In the previous example, we used the Scanner class from the java.util package. This package also contains date and time facilities, random-number generator and other utility classes.\nTo import a whole package, end the sentence with an asterisk sign (*). The following example will import ALL the classes in the java.util package:\nExample\nRun Example »\nUser-defined Packages\nTo create your own package, you need to understand that Java uses a file system directory to store them. Just like folders on your computer:\nExample\nTo create a package, use the package keyword:\nMyPackageClass.java\nRun Example »\nSave the file as MyPackageClass.java, and compile it:\nThen compile the package:\nThis forces the compiler to create the \"mypack\" package.\nThe -d keyword specifies the destination for where to save the class file. You can use any directory name, like c:/user (windows), or, if you want to keep the package within the same directory, you can use the dot sign \".\", like in the example above.\nNote: The package name should be written in lower case to avoid conflict with class names.\nWhen we compiled the package in the example above, a new folder was created, called \"mypack\".\nTo run the MyPackageClass.java file, write the following:\nThe output will be:",
      "examples": [
        "import package.name.Class; // Import a single class import package.name.*; // Import the whole package",
        "import java.util.Scanner;",
        "import java.util.Scanner; class Main { public static void main(String[] args) { Scanner myObj = new Scanner(System.in); System.out.println(\"Enter username\"); String userName = myObj.nextLine(); System.out.println(\"Username is: \" + userName); } }",
        "import java.util.*;",
        "└── root └── mypack └── MyPackageClass.java",
        "package mypack; class MyPackageClass { public static void main(String[] args) { System.out.println(\"This is my package!\"); } }",
        "C:\\Users\\Your Name>javac MyPackageClass.java",
        "C:\\Users\\Your Name>javac -d . MyPackageClass.java",
        "C:\\Users\\Your Name>java mypack.MyPackageClass",
        "import",
        "Scanner",
        "java.util",
        "nextLine()",
        "*",
        "package",
        "-d",
        ".",
        "This is my package!"
      ]
    },
    {
      "title": "Java Inheritance",
      "summary": "Java Inheritance (Subclass and Superclass)\nIn Java, it is possible to inherit attributes and methods from one class to another. We group the \"inheritance concept\" into two categories:\nsubclass (child) - the class that inherits from another class\nsuperclass (parent) - the class being inherited from\nTo inherit from a class, use the extends keyword.\nIn the example below, the Car class (subclass) inherits the attributes and methods from the Vehicle class (superclass):\nExampleGet your own Java Server\nTry it Yourself »\nDid you notice the protected modifier in Vehicle?\nWe set the brand attribute in Vehicle to a protected access modifier. If it was set to private, the Car class would not be able to access it.\n- It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class.\nTip: Also take a look at the next chapter, Polymorphism, which uses inherited methods to perform different tasks.\nREMOVE ADS\nThe final Keyword\nIf you don't want other classes to inherit from a class, use the final keyword:\nIf you try to access a final class, Java will generate an error:\nThe output will be something like this:",
      "examples": [
        "class Vehicle { protected String brand = \"Ford\"; // Vehicle attribute public void honk() { // Vehicle method System.out.println(\"Tuut, tuut!\"); } } class Car extends Vehicle { private String modelName = \"Mustang\"; // Car attribute public static void main(String[] args) { // Create a myCar object Car myCar = new Car(); // Call the honk() method (from the Vehicle class) on the myCar object myCar.honk(); // Display the value of the brand attribute (from the Vehicle class) and the value of the modelName from the Car class System.out.println(myCar.brand + \" \" + myCar.modelName); } }",
        "final class Vehicle { ... } class Car extends Vehicle { ... }",
        "extends",
        "Car",
        "Vehicle",
        "protected",
        "private",
        "final",
        "Main.java:9: error: cannot inherit from final Vehicle\nclass Main extends Vehicle {\n^\n1 error)"
      ]
    },
    {
      "title": "Java Polymorphism",
      "summary": "Java Polymorphism\nPolymorphism means \"many forms\", and it occurs when we have many classes that are related to each other by inheritance.\nLike we specified in the previous chapter; Inheritance lets us inherit attributes and methods from another class. Polymorphism uses those methods to perform different tasks. This allows us to perform a single action in different ways.\nFor example, think of a superclass called Animal that has a method called animalSound(). Subclasses of Animals could be Pigs, Cats, Dogs, Birds - And they also have their own implementation of an animal sound (the pig oinks, and the cat meows, etc.):\nExampleGet your own Java Server\nRemember from the Inheritance chapter that we use the extends keyword to inherit from a class.\nNow we can create Pig and Dog objects and call the animalSound() method on both of them:\nExample\nTry it Yourself »\n- It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class.",
      "examples": [
        "class Animal { public void animalSound() { System.out.println(\"The animal makes a sound\"); } } class Pig extends Animal { public void animalSound() { System.out.println(\"The pig says: wee wee\"); } } class Dog extends Animal { public void animalSound() { System.out.println(\"The dog says: bow wow\"); } }",
        "class Animal { public void animalSound() { System.out.println(\"The animal makes a sound\"); } } class Pig extends Animal { public void animalSound() { System.out.println(\"The pig says: wee wee\"); } } class Dog extends Animal { public void animalSound() { System.out.println(\"The dog says: bow wow\"); } } class Main { public static void main(String[] args) { Animal myAnimal = new Animal(); // Create a Animal object Animal myPig = new Pig(); // Create a Pig object Animal myDog = new Dog(); // Create a Dog object myAnimal.animalSound(); myPig.animalSound(); myDog.animalSound(); } }",
        "Animal",
        "animalSound()",
        "extends",
        "Pig",
        "Dog"
      ]
    },
    {
      "title": "Java super",
      "summary": "Java super Keyword\nIn Java, the super keyword is used to refer to the parent class of a subclass.\nThe most common use of the super keyword is to eliminate the confusion between superclasses and subclasses that have methods with the same name.\nIt can be used in two main ways:\nTo access attributes and methods from the parent class\nTo call the parent class constructor\nAccess Parent Methods\nIf a subclass has a method with the same name as one in its parent class, you can use super to call the parent version:\nExampleGet your own Java Server\nOutput:\nTry it Yourself »\nNote: Use super when you want to call a method from the parent class that has been overridden in the child class.\nAccess Parent Attributes\nYou can also use super to access an attribute from the parent class if they have an attribute with the same name:\nExample\nOutput:\nTry it Yourself »\nCall Parent Constructor\nUse super() to call the constructor of the parent class. This is especially useful for reusing initialization code.\nExample\nOutput:\nTry it Yourself »\nNote: The call to super() must be the first statement in the subclass constructor.",
      "examples": [
        "class Animal { public void animalSound() { System.out.println(\"The animal makes a sound\"); } } class Dog extends Animal { public void animalSound() { super.animalSound(); // Call the parent method System.out.println(\"The dog says: bow wow\"); } } public class Main { public static void main(String[] args) { Dog myDog = new Dog(); myDog.animalSound(); } }",
        "class Animal { String type = \"Animal\"; } class Dog extends Animal { String type = \"Dog\"; public void printType() { System.out.println(super.type); // Access parent attribute } } public class Main { public static void main(String[] args) { Dog myDog = new Dog(); myDog.printType(); } }",
        "class Animal { Animal() { System.out.println(\"Animal is created\"); } } class Dog extends Animal { Dog() { super(); // Call parent constructor System.out.println(\"Dog is created\"); } } public class Main { public static void main(String[] args) { Dog myDog = new Dog(); } }",
        "super",
        "The animal makes a sound\nThe dog says: bow wow",
        "Animal",
        "super()",
        "Animal is created\nDog is created"
      ]
    },
    {
      "title": "Java Inner Classes",
      "summary": "Java Inner Classes\nIn Java, it is also possible to nest classes (a class within a class). The purpose of nested classes is to group classes that belong together, which makes your code more readable and maintainable.\nTo access the inner class, create an object of the outer class, and then create an object of the inner class:\nExampleGet your own Java Server\nTry it Yourself »\nPrivate Inner Class\nUnlike a \"regular\" class, an inner class can be private or protected. If you don't want outside objects to access the inner class, declare the class as private:\nExample\nIf you try to access a private inner class from an outside class, an error occurs:\nTry it Yourself »\nREMOVE ADS\nStatic Inner Class\nAn inner class can also be static, which means that you can access it without creating an object of the outer class:\nExample\nTry it Yourself »\nNote: just like static attributes and methods, a static inner class does not have access to members of the outer class.\nAccess Outer Class From Inner Class\nOne advantage of inner classes, is that they can access attributes and methods of the outer class:\nExample\nTry it Yourself »",
      "examples": [
        "class OuterClass { int x = 10; class InnerClass { int y = 5; } } public class Main { public static void main(String[] args) { OuterClass myOuter = new OuterClass(); OuterClass.InnerClass myInner = myOuter.new InnerClass(); System.out.println(myInner.y + myOuter.x); } } // Outputs 15 (5 + 10)",
        "class OuterClass { int x = 10; private class InnerClass { int y = 5; } } public class Main { public static void main(String[] args) { OuterClass myOuter = new OuterClass(); OuterClass.InnerClass myInner = myOuter.new InnerClass(); System.out.println(myInner.y + myOuter.x); } }",
        "class OuterClass { int x = 10; static class InnerClass { int y = 5; } } public class Main { public static void main(String[] args) { OuterClass.InnerClass myInner = new OuterClass.InnerClass(); System.out.println(myInner.y); } } // Outputs 5",
        "class OuterClass { int x = 10; class InnerClass { public int myInnerMethod() { return x; } } } public class Main { public static void main(String[] args) { OuterClass myOuter = new OuterClass(); OuterClass.InnerClass myInner = myOuter.new InnerClass(); System.out.println(myInner.myInnerMethod()); } } // Outputs 10",
        "private",
        "protected",
        "Main.java:13: error: OuterClass.InnerClass has private access in OuterClass\nOuterClass.InnerClass myInner = myOuter.new InnerClass();\n^",
        "static"
      ]
    },
    {
      "title": "Java Abstraction",
      "summary": "Abstract Classes and Methods\nData abstraction is the process of hiding certain details and showing only essential information to the user.\nAbstraction can be achieved with either abstract classes or interfaces (which you will learn more about in the next chapter).\nThe abstract keyword is a non-access modifier, used for classes and methods:\nAbstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).\nAbstract method: can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from).\nAn abstract class can have both abstract and regular methods:\nFrom the example above, it is not possible to create an object of the Animal class:\nTo access the abstract class, it must be inherited from another class. Let's convert the Animal class we used in the Polymorphism chapter to an abstract class:\nRemember from the Inheritance chapter that we use the extends keyword to inherit from a class.\nExampleGet your own Java Server\nTry it Yourself »\nTo achieve security - hide certain details and only show the important details of an object.\nNote: Abstraction can also be achieved with Interfaces, which you will learn more about in the next chapter.",
      "examples": [
        "abstract class Animal { public abstract void animalSound(); public void sleep() { System.out.println(\"Zzz\"); } }",
        "Animal myObj = new Animal(); // will generate an error",
        "// Abstract class abstract class Animal { // Abstract method (does not have a body) public abstract void animalSound(); // Regular method public void sleep() { System.out.println(\"Zzz\"); } } // Subclass (inherit from Animal) class Pig extends Animal { public void animalSound() { // The body of animalSound() is provided here System.out.println(\"The pig says: wee wee\"); } } class Main { public static void main(String[] args) { Pig myPig = new Pig(); // Create a Pig object myPig.animalSound(); myPig.sleep(); } }",
        "abstract",
        "extends"
      ]
    },
    {
      "title": "Java Interface",
      "summary": "Interfaces\nAnother way to achieve abstraction in Java, is with interfaces.\nAn interface is a completely \"abstract class\" that is used to group related methods with empty bodies:\nExampleGet your own Java Server\nTo access the interface methods, the interface must be \"implemented\" (kinda like inherited) by another class with the implements keyword (instead of extends). The body of the interface method is provided by the \"implement\" class:\nExample\nTry it Yourself »\nLike abstract classes, interfaces cannot be used to create objects (in the example above, it is not possible to create an \"Animal\" object in the MyMainClass)\nInterface methods do not have a body - the body is provided by the \"implement\" class\nOn implementation of an interface, you must override all of its methods\nInterface methods are by default abstract and public\nInterface attributes are by default public, static and final\nAn interface cannot contain a constructor (as it cannot be used to create objects)\n1) To achieve security - hide certain details and only show the important details of an object (interface).\n2) Java does not support \"multiple inheritance\" (a class can only inherit from one superclass). However, it can be achieved with interfaces, because the class can implement multiple interfaces. Note: To implement multiple interfaces, separate them with a comma (see example below).\nREMOVE ADS\nMultiple Interfaces\nTo implement multiple interfaces, separate them with a comma:\nExample\nTry it Yourself »",
      "examples": [
        "// interface interface Animal { public void animalSound(); // interface method (does not have a body) public void run(); // interface method (does not have a body) }",
        "// Interface interface Animal { public void animalSound(); // interface method (does not have a body) public void sleep(); // interface method (does not have a body) } // Pig \"implements\" the Animal interface class Pig implements Animal { public void animalSound() { // The body of animalSound() is provided here System.out.println(\"The pig says: wee wee\"); } public void sleep() { // The body of sleep() is provided here System.out.println(\"Zzz\"); } } class Main { public static void main(String[] args) { Pig myPig = new Pig(); // Create a Pig object myPig.animalSound(); myPig.sleep(); } }",
        "interface FirstInterface { public void myMethod(); // interface method } interface SecondInterface { public void myOtherMethod(); // interface method } class DemoClass implements FirstInterface, SecondInterface { public void myMethod() { System.out.println(\"Some text..\"); } public void myOtherMethod() { System.out.println(\"Some other text...\"); } } class Main { public static void main(String[] args) { DemoClass myObj = new DemoClass(); myObj.myMethod(); myObj.myOtherMethod(); } }",
        "interface",
        "implements",
        "extends",
        "abstract",
        "public",
        "static",
        "final"
      ]
    },
    {
      "title": "Java Anonymous Class",
      "summary": "Anonymous Class\nAn anonymous class is a class without a name. It is created and used at the same time.\nYou often use anonymous classes to override methods of an existing class or interface, without writing a separate class file.\nHere, we create an anonymous class that extends another class and overrides its method:\nThe output will be:\nTry it Yourself »\nAnonymous Class from an Interface\nYou can also use an anonymous class to implement an interface on the fly:\nThe output will be:\nTry it Yourself »\nUse anonymous classes when you need to create a short class for one-time use. For example:\nOverriding a method without creating a new subclass\nImplementing an interface quickly\nPassing small pieces of behavior as objects",
      "examples": [
        "// Normal class class Animal { public void makeSound() { System.out.println(\"Animal sound\"); } } public class Main { public static void main(String[] args) { // Anonymous class that overrides makeSound() Animal myAnimal = new Animal() { public void makeSound() { System.out.println(\"Woof woof\"); } }; // semicolon is required to end the line of code that creates the object myAnimal.makeSound(); } }",
        "// Interface interface Greeting { void sayHello(); } public class Main { public static void main(String[] args) { // Anonymous class that implements Greeting Greeting greet = new Greeting() { public void sayHello() { System.out.println(\"Hello, World!\"); } }; greet.sayHello(); } }",
        "Woof woof",
        "Hello, World!"
      ]
    },
    {
      "title": "Java Enums",
      "summary": "Enums\nAn enum is a special \"class\" that represents a group of constants (unchangeable variables, like final variables).\nTo create an enum, use the enum keyword (instead of class or interface), and separate the constants with a comma. Note that they should be in uppercase letters:\nExampleGet your own Java Server\nYou can access enum constants with the dot syntax:\nEnum is short for \"enumerations\", which means \"specifically listed\".\nEnum inside a Class\nYou can also have an enum inside a class:\nExample\nThe output will be:\nEnum in a Switch Statement\nEnums are often used in switch statements to check for corresponding values:\nExample\nThe output will be:\nREMOVE ADS\nLoop Through an Enum\nThe enum type has a values() method, which returns an array of all enum constants. This method is useful when you want to loop through the constants of an enum:\nExample\nThe output will be:\nAn enum can, just like a class, have attributes and methods. The only difference is that enum constants are public, static and final (unchangeable - cannot be overridden).\nAn enum cannot be used to create objects, and it cannot extend other classes (but it can implement interfaces).\nUse enums when you have values that you know aren't going to change, like month days, days, colors, deck of cards, etc.",
      "examples": [
        "enum Level { LOW, MEDIUM, HIGH }",
        "public class Main { enum Level { LOW, MEDIUM, HIGH } public static void main(String[] args) { Level myVar = Level.MEDIUM; System.out.println(myVar); } }",
        "enum Level { LOW, MEDIUM, HIGH } public class Main { public static void main(String[] args) { Level myVar = Level.MEDIUM; switch(myVar) { case LOW: System.out.println(\"Low level\"); break; case MEDIUM: System.out.println(\"Medium level\"); break; case HIGH: System.out.println(\"High level\"); break; } } }",
        "for (Level myVar : Level.values()) { System.out.println(myVar); }",
        "Level myVar = Level.MEDIUM;",
        "enum",
        "final",
        "MEDIUM",
        "switch",
        "Medium level",
        "values()",
        "LOW\nMEDIUM\nHIGH",
        "class",
        "public",
        "static"
      ]
    },
    {
      "title": "Java Enum Constructor",
      "summary": "Enum Constructor\nAn enum can also have a constructor just like a class.\nThe constructor is called automatically when the constants are created. You cannot call it yourself.\nHere, each constant in the enum has a value (a string) that is set through the constructor:\nThe output will be:\nTry it Yourself »\nNote: The constructor for an enum must be private. If you don't write private, Java adds it automatically.\nLoop Through Enum with Constructor\nYou can also loop through the constants and print their values using the values() method:\nThe output will be:\nTry it Yourself »",
      "examples": [
        "enum Level { // Enum constants (each has its own description) LOW(\"Low level\"), MEDIUM(\"Medium level\"), HIGH(\"High level\"); // Field (variable) to store the description text private String description; // Constructor (runs once for each constant above) private Level(String description) { this.description = description; } // Getter method to read the description public String getDescription() { return description; } } public class Main { public static void main(String[] args) { Level myVar = Level.MEDIUM; // Pick one enum constant System.out.println(myVar.getDescription()); // Prints \"Medium level\" } }",
        "for (Level myVar : Level.values()) { System.out.println(myVar + \": \" + myVar.getDescription()); }",
        "enum",
        "Medium level",
        "private",
        "values()",
        "LOW: Low level\nMEDIUM: Medium level\nHIGH: High level"
      ]
    },
    {
      "title": "Java User Input (Scanner)",
      "summary": "Java User Input\nThe Scanner class is used to get user input, and it is found in the java.util package.\nTo use the Scanner class, create an object of the class and use any of the available methods found in the Scanner class documentation. In our example, we will use the nextLine() method, which is used to read Strings:\nExampleGet your own Java Server\nRun Example »\nIf you don't know what a package is, read our Java Packages Tutorial.\nInput Types\nIn the example above, we used the nextLine() method, which is used to read Strings. To read other types, look at the table below:\nIn the example below, we use different methods to read data of various types:\nExample\nRun Example »\nNote: If you enter wrong input (e.g. text in a numerical input), you will get an exception/error message (like \"InputMismatchException\").\nYou can read more about exceptions and how to handle errors in the Exceptions chapter.\nComplete Scanner Reference\nTip: For a complete reference of Scanner methods, go to our Java Scanner Reference.",
      "examples": [
        "import java.util.Scanner; // Import the Scanner class class Main { public static void main(String[] args) { Scanner myObj = new Scanner(System.in); // Create a Scanner object System.out.println(\"Enter username\"); String userName = myObj.nextLine(); // Read user input System.out.println(\"Username is: \" + userName); // Output user input } }",
        "import java.util.Scanner; class Main { public static void main(String[] args) { Scanner myObj = new Scanner(System.in); System.out.println(\"Enter name, age and salary:\"); // String input String name = myObj.nextLine(); // Numerical input int age = myObj.nextInt(); double salary = myObj.nextDouble(); // Output input by user System.out.println(\"Name: \" + name); System.out.println(\"Age: \" + age); System.out.println(\"Salary: \" + salary); } }",
        "Scanner",
        "java.util",
        "nextLine()",
        "nextBoolean()",
        "boolean",
        "nextByte()",
        "byte",
        "nextDouble()",
        "double",
        "nextFloat()",
        "float",
        "nextInt()",
        "int",
        "String",
        "nextLong()",
        "long",
        "nextShort()",
        "short"
      ]
    },
    {
      "title": "Java Date and Time",
      "summary": "Java Dates\nJava does not have a built-in Date class, but we can import the java.time package to work with the date and time API. The package includes many date and time classes. For example:\nIf you don't know what a package is, read our Java Packages Tutorial.\nDisplay Current Date\nTo display the current date, import the java.time.LocalDate class, and use its now() method:\nExampleGet your own Java Server\nThe output will be:\nDisplay Current Time\nTo display the current time (hour, minute, second, and nanoseconds), import the java.time.LocalTime class, and use its now() method:\nExample\nThis example displays the server's local time, which may differ from your local time:\nREMOVE ADS\nDisplay Current Date and Time\nTo display the current date and time, import the java.time.LocalDateTime class, and use its now() method:\nExample\nThe output will be something like this:\nFormatting Date and Time\nThe \"T\" in the example above is used to separate the date from the time. You can use the DateTimeFormatter class with the ofPattern() method in the same package to format or parse date-time objects. The following example will remove both the \"T\" and nanoseconds from the date-time:\nExample\nThe output will be:\nThe ofPattern() method accepts all sorts of values, if you want to display the date and time in a different format. For example:",
      "examples": [
        "import java.time.LocalDate; // import the LocalDate class public class Main { public static void main(String[] args) { LocalDate myObj = LocalDate.now(); // Create a date object System.out.println(myObj); // Display the current date } }",
        "import java.time.LocalTime; // import the LocalTime class public class Main { public static void main(String[] args) { LocalTime myObj = LocalTime.now(); System.out.println(myObj); } }",
        "import java.time.LocalDateTime; // import the LocalDateTime class public class Main { public static void main(String[] args) { LocalDateTime myObj = LocalDateTime.now(); System.out.println(myObj); } }",
        "import java.time.LocalDateTime; // Import the LocalDateTime class import java.time.format.DateTimeFormatter; // Import the DateTimeFormatter class public class Main { public static void main(String[] args) { LocalDateTime myDateObj = LocalDateTime.now(); System.out.println(\"Before formatting: \" + myDateObj); DateTimeFormatter myFormatObj = DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm:ss\"); String formattedDate = myDateObj.format(myFormatObj); System.out.println(\"After formatting: \" + formattedDate); } }",
        "java.time",
        "LocalDate",
        "LocalTime",
        "LocalDateTime",
        "DateTimeFormatter",
        "java.time.LocalDate",
        "now()",
        "var d = new Date(); var m = d.getMonth() + 1; if (m < 10) m = \"0\" + m var day = d.getDate(); if (day < 10) day = \"0\" + day; var x = d.getFullYear() + \"-\" + m + \"-\" + day; document.write(x); 2025-09-20",
        "java.time.LocalTime",
        "var d = new Date(); var h = d.getHours(); if (h < 10) h = \"0\" + h; var n = d.getMinutes(); if (n < 10) n = \"0\" + n; var s = d.getSeconds(); if (s < 10) s = \"0\" + s; var ms = d.getMilliseconds(); while (ms.toString().length < 3) { ms = \"0\" + ms; } var ex = Math.floor(Math.random() * 999); while (ex.toString().length < 3) { ex = \"0\" + ex; } var x =h-2 + \":\" + n + \":\" + s + \".\" + ms + ex document.write(x); 12:31:23.959288",
        "java.time.LocalDateTime",
        "var d = new Date(); // Subtract two hours d.setHours(d.getHours() - 2); var m = d.getMonth() + 1; if (m < 10) m = \"0\" + m; var day = d.getDate(); if (day < 10) day = \"0\" + day; var h = d.getHours(); if (h < 10) h = \"0\" + h; var n = d.getMinutes(); if (n < 10) n = \"0\" + n; var s = d.getSeconds(); if (s < 10) s = \"0\" + s; var ms = d.getMilliseconds(); while (ms.toString().length < 3) { ms = \"0\" + ms; } var ex = Math.floor(Math.random() * 999); while (ex.toString().length < 3) { ex = \"0\" + ex; } var x = d.getFullYear() + \"-\" + m + \"-\" + day + \"T\" + h + \":\" + n + \":\" + s + \".\" + ms + ex; document.write(x); 2025-09-20T12:31:23.959169",
        "ofPattern()",
        "var d = new Date(); // Subtract two hours d.setHours(d.getHours() - 2); var m = d.getMonth() + 1; if (m < 10) m = \"0\" + m var day = d.getDate(); if (day < 10) day = \"0\" + day; var h = d.getHours(); if (h < 10) h = \"0\" + h; var n = d.getMinutes(); if (n < 10) n = \"0\" + n; var s = d.getSeconds(); if (s < 10) s = \"0\" + s; var ms = d.getMilliseconds(); while (ms.toString().length < 3) { ms = \"0\" + ms; } var ex = Math.floor(Math.random() * 999); while (ex.toString().length < 3) { ex = \"0\" + ex; } var x = \"Before Formatting:\" + \" \" + d.getFullYear() + \"-\" + m + \"-\" + day + \"T\" + h + \":\" + n + \":\" + s + \".\" + ms + ex document.write(x); Before Formatting: 2025-09-20T12:31:24.037542\nvar d = new Date(); // Subtract two hours d.setHours(d.getHours() - 2); var m = d.getMonth() + 1; if (m < 10) m = \"0\" + m var day = d.getDate(); if (day < 10) day = \"0\" + day; var h = d.getHours(); if (h < 10) h = \"0\" + h; var n = d.getMinutes(); if (n < 10) n = \"0\" + n; var s = d.getSeconds(); if (s < 10) s = \"0\" + s; var x = \"After Formatting:\" + \" \" + day + \"-\" + m + \"-\" + d.getFullYear() + \" \" + h + \":\" + n + \":\" + s; document.write(x); After Formatting: 20-09-2025 12:31:24"
      ]
    },
    {
      "title": "Java Errors",
      "summary": "Java Errors\nEven experienced Java developers make mistakes. The key is learning how to spot and fix them!\nThese pages cover common errors and helpful debugging tips to help you understand what's going wrong and how to fix it.\nTypes of Errors in Java\nCommon Compile-Time Errors\nCompile-time errors occur when the program cannot compile due to syntax or type issues.\nHere are some examples:\n1) Missing Semicolon\nExampleGet your own Java Server\nResult:\nTry it Yourself »\nTip: Java requires a semicolon at the end of every statement (int x = 5;).\n2) Undeclared Variables\nExample\nResult:\nTry it Yourself »\nTip: You must declare a variable before using it (int myVar = 50;).\n3) Mismatched Types\nExample\nResult:\nTry it Yourself »\nTip: Make sure the value matches the variable type (String x = \"Hello\";).\nCommon Runtime Errors\nRuntime errors occur when the program compiles but crashes or behaves unexpectedly.\nHere are some examples:\n1) Division by Zero\nExample\nResult:\nTry it Yourself »\n2) Array Index Out of Bounds\nExample\nResult:\nTry it Yourself »\nLogical Errors\nLogical errors happen when the code runs, but the result is not what you thought:\nExample:\nResult:\nTry it Yourself »\nExpected Result: 12\nLogical Error: The code mistakenly subtracts instead of adds.\nTip: Test your program with different inputs to catch logic flaws (try using x + y instead). This is part of debugging, which you will learn more about in the next chapter.\nGood Habits to Avoid Errors\nUse meaningful variable names\nRead the error message carefully. What line does it mention?\nCheck for missing semicolons or braces\nLook for typos in variable or method names\nIn the next chapter, you will learn how to debug your code - how to find and fix bugs/errors in your program.",
      "examples": [
        "int x = 5 System.out.println(x);",
        "System.out.println(myVar);",
        "int x = \"Hello\";",
        "int x = 10; int y = 0; int result = x / y; System.out.println(result);",
        "int[] numbers = {1, 2, 3}; System.out.println(numbers[8]);",
        "int x = 10; int y = 2; int sum = x - y; System.out.println(\"x + y = \" + sum);",
        "error: ';' expected",
        "int x = 5;",
        "cannot find symbol\nsymbol: variable myVar",
        "int myVar = 50;",
        "incompatible types: String cannot be converted to int",
        "String x = \"Hello\";",
        "Exception in thread \"main\" java.lang.ArithmeticException: / by zero",
        "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: Index 8 out of bounds for length 3",
        "x + y = 8",
        "12",
        "x + y"
      ]
    },
    {
      "title": "Java Debugging",
      "summary": "Java Debugging\nAfter learning about common errors, the next step is understanding how to debug your Java code - that is, how to find and fix those errors effectively.\nThis page introduces simple debugging techniques that are useful for beginners and helpful even for experienced developers.\nWhat is Debugging?\nDebugging is the process of identifying and fixing errors or bugs in your code.\nIt often involves:\nReading error messages\nTracing variable values step by step\nTesting small pieces of code independently\nTip: Debugging is a skill that improves with practice. The more you debug, the better you get at spotting problems quickly.\nPrint Statements for Debugging\nThe most basic (and often most effective) way to debug Java code is to use System.out.println() to print values and check the flow of the program.\nIn this example, the first line \"Before division\" will print, but the second line is never reached because the program crashes due to division by zero:\nExampleGet your own Java Server\nResult:\nTry it Yourself »\nTip: Add print statements before and after key lines of code to find out where things go wrong.\nCheck Variable Values\nIf something unexpected happens, print out the values of your variables:\nExample\nTry it Yourself »\nTip: This is a good way to test whether a condition is working correctly - try changing age to 18 or 19 and observe the output!\nDebugging with IDEs\nModern IDEs like IntelliJ IDEA, Eclipse, and NetBeans come with built-in debugging tools.\nSet breakpoints to pause the program at specific lines\nStep through code line by line\nInspect variable values in real time\nTip: Use your IDE's debugger to find errors faster - it's more powerful than print statements alone!\nDebugging Checklist\nRead the full error message, it often tells you exactly what's wrong\nCheck if all variables are initialized before use\nPrint variable values to trace the problem\nWatch for off-by-one errors in loops and arrays\nComment out sections of code to find bugs\nIn the next chapter, you will learn about how to handle errors gracefully in your programs with Java Exceptions.",
      "examples": [
        "int x = 10; int y = 0; System.out.println(\"Before division\"); // Debug output int result = x / y; // Crashes System.out.println(\"Result: \" + result); // Never runs",
        "int age = 17; System.out.println(\"Age: \" + age); if (age >= 18) { System.out.println(\"Access granted\"); } else { System.out.println(\"Access denied\"); }",
        "System.out.println()",
        "\"Before division\"",
        "Before division\nException in thread \"main\" java.lang.ArithmeticException: / by zero",
        "age"
      ]
    },
    {
      "title": "Java Exceptions - Try...Catch",
      "summary": "Java Exceptions\nAs mentioned in the Errors chapter, different types of errors can occur while running a program - such as coding mistakes, invalid input, or unexpected situations.\nWhen an error occurs, Java will normally stop and generate an error message. The technical term for this is: Java will throw an exception (throw an error).\nException Handling (try and catch)\nException handling lets you catch and handle errors during runtime - so your program doesn't crash.\nIt uses different keywords:\nThe try statement allows you to define a block of code to be tested for errors while it is being executed.\nThe catch statement allows you to define a block of code to be executed, if an error occurs in the try block.\nThe try and catch keywords come in pairs:\nSyntaxGet your own Java Server\nConsider the following example:\nThis will generate an error, because myNumbers[10] does not exist.\nThe output will be something like this:\nNote: ArrayIndexOutOfBoundsException occurs when you try to access an index number that does not exist.\nIf an error occurs, we can use try...catch to catch the error and execute some code to handle it:\nExample\nThe output will be:\nFinally\nThe finally statement lets you execute code, after try...catch, regardless of the result:\nExample\nThe output will be:\nREMOVE ADS\nThe throw keyword\nThe throw statement allows you to create a custom error.\nThe throw statement is used together with an exception type. There are many exception types available in Java: ArithmeticException, FileNotFoundException, ArrayIndexOutOfBoundsException, SecurityException, etc:\nExample\nThrow an exception if age is below 18 (print \"Access denied\"). If age is 18 or older, print \"Access granted\":\nThe output will be:\nIf age was 20, you would not get an exception:\nExample\nThe output will be:\nErrors and Exception Types\nThe table below shows some of the most common errors and exceptions in Java, with a short description of each:\nTip: For a list of all errors and exception types, go to our Java Errors and Exception Types Reference.",
      "examples": [
        "try { // Block of code to try } catch(Exception e) { // Block of code to handle errors }",
        "public class Main { public static void main(String[ ] args) { int[] myNumbers = {1, 2, 3}; System.out.println(myNumbers[10]); // error! } }",
        "public class Main { public static void main(String[ ] args) { try { int[] myNumbers = {1, 2, 3}; System.out.println(myNumbers[10]); } catch (Exception e) { System.out.println(\"Something went wrong.\"); } } }",
        "public class Main { public static void main(String[] args) { try { int[] myNumbers = {1, 2, 3}; System.out.println(myNumbers[10]); } catch (Exception e) { System.out.println(\"Something went wrong.\"); } finally { System.out.println(\"The 'try catch' is finished.\"); } } }",
        "public class Main { static void checkAge(int age) { if (age < 18) { throw new ArithmeticException(\"Access denied - You must be at least 18 years old.\"); } else { System.out.println(\"Access granted - You are old enough!\"); } } public static void main(String[] args) { checkAge(15); // Set age to 15 (which is below 18...) } }",
        "checkAge(20);",
        "try",
        "catch",
        "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 10\nat Main.main(Main.java:4)",
        "ArrayIndexOutOfBoundsException",
        "try...catch",
        "Something went wrong.",
        "finally",
        "Something went wrong.\nThe 'try catch' is finished.",
        "throw",
        "ArithmeticException",
        "FileNotFoundException",
        "SecurityException",
        "Exception in thread \"main\" java.lang.ArithmeticException: Access denied - You must be at least 18 years old.\nat Main.checkAge(Main.java:4)\nat Main.main(Main.java:12)",
        "Access granted - You are old enough!",
        "null"
      ]
    },
    {
      "title": "Java Multiple Exceptions",
      "summary": "Multiple Exceptions\nSometimes, different errors (exceptions) can happen in the same try block. You can handle them with multiple catch blocks.\nOne try, Many catch\nYou can add more than one catch block, and Java will run the first one that matches the thrown exception type:\nExampleGet your own Java Server\nResult:\nTry it Yourself »\nExplanation: Only the first exception (ArrayIndexOutOfBoundsException) is thrown, so only the first matching catch runs.\nOrder Matters\nYou should always put more specific exceptions first, and general ones later. Otherwise, the general catch will grab the error and the specific ones will never run:\nExample (bad order)\nTip: Always put Exception (the general one) at the end.\nMulti-Catch\nSince Java 7, you can catch multiple exceptions in one catch block using the | symbol. This is useful when different exceptions should be handled in the same way, so you don't have to repeat code:\nExample\nTry it Yourself »",
      "examples": [
        "public class Main { public static void main(String[] args) { try { int[] numbers = {1, 2, 3}; System.out.println(numbers[10]); // ArrayIndexOutOfBoundsException int result = 10 / 0; // ArithmeticException } catch (ArrayIndexOutOfBoundsException e) { System.out.println(\"Array index does not exist.\"); } catch (ArithmeticException e) { System.out.println(\"Cannot divide by zero.\"); } catch (Exception e) { System.out.println(\"Something else went wrong.\"); } } }",
        "try { int result = 10 / 0; } catch (Exception e) { System.out.println(\"General error.\"); } catch (ArithmeticException e) { // This will never be reached System.out.println(\"Divide by zero.\"); }",
        "try { int result = 10 / 0; int[] numbers = {1, 2, 3}; System.out.println(numbers[10]); } catch (ArithmeticException | ArrayIndexOutOfBoundsException e) { System.out.println(\"Math error or array error occurred.\"); }",
        "try",
        "catch",
        "Array index does not exist.",
        "ArrayIndexOutOfBoundsException",
        "Exception",
        "|"
      ]
    },
    {
      "title": "Java try-with-resources",
      "summary": "Java Close Resources\nWhen working with files, streams, or other resources, it is important to close them after use. If you forget to close a resource, it may keep using memory or even prevent you from opening the file again until the program ends.\nNote: You have not yet learned about files and streams in detail. These topics will come in the next chapters. For now, just focus on how try-with-resources works.\nIn older code, you had to close \"resources\" manually by calling their close() method:\nExampleGet your own Java Server\nJava try-with-resources\nSince Java 7, you can use try-with-resources. It is a special form of try that works with resources (like files and streams). The resource is declared inside parentheses try(...), and Java will close it automatically when the block finishes - even if an error occurs.\nExample (try-with-resources)\nRun Example »\nWhy use try-with-resources?\nSafer - resources are always closed, even if an exception occurs.\nCleaner - no need to write close() calls.\nShorter code - less boilerplate, easier to read.\nRule of thumb: Whenever you work with files, streams, or database connections, use try-with-resources to make sure they are closed properly.\nNext: Learn about how to handle files in Java.",
      "examples": [
        "import java.io.FileOutputStream; import java.io.IOException; public class Main { public static void main(String[] args) { try { FileOutputStream output = new FileOutputStream(\"filename.txt\"); output.write(\"Hello\".getBytes()); output.close(); // must close manually System.out.println(\"Successfully wrote to the file.\"); } catch (IOException e) { System.out.println(\"Error writing file.\"); } } }",
        "import java.io.FileOutputStream; import java.io.IOException; public class Main { public static void main(String[] args) { // resource is opened inside try() try (FileOutputStream output = new FileOutputStream(\"filename.txt\")) { output.write(\"Hello\".getBytes()); // no need to call close() here System.out.println(\"Successfully wrote to the file.\"); } catch (IOException e) { System.out.println(\"Error writing file.\"); } } }",
        "close()",
        "try",
        "try(...)"
      ]
    },
    {
      "title": "Java Files",
      "summary": "File handling is an important part of any application.\nJava has several methods for creating, reading, updating, and deleting files.\nJava File Handling\nThe File class from the java.io package, allows us to work with files.\nTo use the File class, create an object of the class, and specify the filename or directory name:\nExampleGet your own Java Server\nIf you don't know what a package is, read our Java Packages Tutorial.\nThe File class has many useful methods for creating and getting information about files. For example:\nYou will learn how to create, write, read and delete files in the next chapters:",
      "examples": [
        "import java.io.File; // Import the File class File myObj = new File(\"filename.txt\"); // Specify the filename",
        "File",
        "java.io",
        "canRead()",
        "canWrite()",
        "createNewFile()",
        "delete()",
        "exists()",
        "getName()",
        "getAbsolutePath()",
        "length()",
        "list()",
        "mkdir()"
      ]
    },
    {
      "title": "Java Create Files",
      "summary": "Create a File\nIn Java, you can create a new file with the createNewFile() method from the File class.\nThis method returns:\ntrue - if the file was created successfully\nfalse - if the file already exists\nNote that the method is enclosed in a try...catch block. This is necessary because it throws an IOException if an error occurs (if the file cannot be created for some reason):\nExampleGet your own Java Server\nThe output will be:\nExplanation: The program tries to create a file called filename.txt. If the file does not exist, it will be created and a success message is printed. If the file already exists, you will see the message \"File already exists.\" instead.\nNote: The createNewFile() method only creates an empty file. It does not add any content inside. You will learn how to write text to files in the next chapter.\nCreate a File in a Specific Folder\nTo create a file in a specific directory (requires permission), specify the path of the file and use double backslashes to escape the \"\\\" character (for Windows). On Mac and Linux you can just write the path, like: /Users/name/filename.txt\nExample\nRun Example »",
      "examples": [
        "import java.io.File; // Import the File class import java.io.IOException; // Import IOException to handle errors public class CreateFile { public static void main(String[] args) { try { File myObj = new File(\"filename.txt\"); // Create File object if (myObj.createNewFile()) { // Try to create the file System.out.println(\"File created: \" + myObj.getName()); } else { System.out.println(\"File already exists.\"); } } catch (IOException e) { System.out.println(\"An error occurred.\"); e.printStackTrace(); // Print error details } } }",
        "File myObj = new File(\"C:\\\\Users\\\\MyName\\\\filename.txt\");",
        "createNewFile()",
        "File",
        "true",
        "false",
        "try...catch",
        "IOException",
        "File created: filename.txt",
        "filename.txt",
        "\"File already exists.\"",
        "\\"
      ]
    },
    {
      "title": "Java Write To Files",
      "summary": "Write To a File\nIf you are just starting with Java, the easiest way to write text to a file is by using the FileWriter class.\nIn the example below, we use FileWriter together with its write() method to create and write some text into a file.\nNote: When you are done, you should close the writer with the close() method:\nExampleGet your own Java Server\nThe output will be:\nExplanation: This program tries to write some text into a file named filename.txt. If everything works, the program will print \"Successfully wrote to the file.\" in the console. If something goes wrong (for example, the file cannot be opened), it will print \"An error occurred.\" instead.\nWrite To a File with try-with-resources\nSince Java 7, you can use try-with-resources. This makes sure the writer is closed automatically, even if an error occurs:\nExample\nThe output will be:\nRun Example »\nAppend to a File\nNormally, FileWriter will overwrite a file if it already exists. If you want to add new content at the end of the file (without deleting what's already there), you can use the two-argument constructor and pass true as the second parameter. This puts the writer into append mode:\nExample\nThe output will be:\nRun Example »\nExplanation: This program adds the text \"Appended text!\" to the end of filename.txt instead of replacing the file's content.\nNote: If the file does not already exist, Java will create it before appending.\nTip: To see what's inside the file, go to the Java Read Files chapter.\nOther Ways to Write to Files\nThere are several classes you can use to write files in Java:\nFileWriter - easiest choice for basic text.\nBufferedWriter - better for large text files, because it is faster and supports handy features.\nFileOutputStream - best for binary data (images, audio, PDFs)\nYou will learn more about FileOutputStream and BufferedWriter in a later chapter.",
      "examples": [
        "import java.io.FileWriter; // Import the FileWriter class import java.io.IOException; // Import the IOException class public class WriteToFile { public static void main(String[] args) { try { FileWriter myWriter = new FileWriter(\"filename.txt\"); myWriter.write(\"Files in Java might be tricky, but it is fun enough!\"); myWriter.close(); // must close manually System.out.println(\"Successfully wrote to the file.\"); } catch (IOException e) { System.out.println(\"An error occurred.\"); e.printStackTrace(); } } }",
        "import java.io.FileWriter; import java.io.IOException; public class WriteToFile { public static void main(String[] args) { // FileWriter will be closed automatically here try (FileWriter myWriter = new FileWriter(\"filename.txt\")) { myWriter.write(\"Files in Java might be tricky, but it is fun enough!\"); System.out.println(\"Successfully wrote to the file.\"); } catch (IOException e) { System.out.println(\"An error occurred.\"); e.printStackTrace(); } } }",
        "import java.io.FileWriter; import java.io.IOException; public class AppendToFile { public static void main(String[] args) { // true = append mode try (FileWriter myWriter = new FileWriter(\"filename.txt\", true)) { myWriter.write(\"\\nAppended text!\"); System.out.println(\"Successfully appended to the file.\"); } catch (IOException e) { System.out.println(\"An error occurred.\"); e.printStackTrace(); } } }",
        "FileWriter",
        "write()",
        "close()",
        "Successfully wrote to the file.",
        "filename.txt",
        "\"Successfully wrote to the file.\"",
        "\"An error occurred.\"",
        "true",
        "Successfully appended to the file.",
        "\"Appended text!\"",
        "BufferedWriter",
        "FileOutputStream"
      ]
    },
    {
      "title": "Java Read Files",
      "summary": "Read a File\nIn the previous chapters, you learned how to create and write to a file.\nIn the following example, we use the Scanner class to read the contents of the text file we created in the previous chapter:\nExampleGet your own Java Server\nThe output will be:\nExplanation: This program opens the file named filename.txt and reads it line by line using a Scanner. Each line is printed to the console. If the file cannot be found, the program will print \"An error occurred.\" instead.\nREMOVE ADS\nGet File Information\nTo get more information about a file, use any of the File methods:\nExample\nThe output will be:\nOther Ways to Read Files\nThere are several classes you can use to read files in Java:\nScanner - best for simple text and when you want to parse numbers or words easily.\nBufferedReader - best for large text files, because it is faster and reads line by line.\nFileInputStream - best for binary data (images, audio, PDFs) or when you need full control of raw bytes.\nYou will learn more about FileInputStream and BufferedReader in later chapters.\nTip: To delete a file, read our Java Delete Files chapter.\nTip: For a list of all Scanner methods, go to our Java Scanner Reference.",
      "examples": [
        "import java.io.File; // Import the File class import java.io.FileNotFoundException; // Import this class to handle errors import java.util.Scanner; // Import the Scanner class to read text files public class ReadFile { public static void main(String[] args) { File myObj = new File(\"filename.txt\"); // try-with-resources: Scanner will be closed automatically try (Scanner myReader = new Scanner(myObj)) { while (myReader.hasNextLine()) { String data = myReader.nextLine(); System.out.println(data); } } catch (FileNotFoundException e) { System.out.println(\"An error occurred.\"); e.printStackTrace(); } } }",
        "import java.io.File; // Import the File class public class GetFileInfo {\npublic static void main(String[] args) { File myObj = new File(\"filename.txt\"); if (myObj.exists()) { System.out.println(\"File name: \" + myObj.getName()); System.out.println(\"Absolute path: \" + myObj.getAbsolutePath()); System.out.println(\"Writeable: \" + myObj.canWrite()); System.out.println(\"Readable \" + myObj.canRead()); System.out.println(\"File size in bytes \" + myObj.length()); } else { System.out.println(\"The file does not exist.\"); } } }",
        "Scanner",
        "Files in Java might be tricky, but it is fun enough!",
        "filename.txt",
        "\"An error occurred.\"",
        "File",
        "File name: filename.txt\nAbsolute path: C:\\Users\\MyName\\filename.txt\nWriteable: true\nReadable: true\nFile size in bytes: 0",
        "BufferedReader",
        "FileInputStream"
      ]
    },
    {
      "title": "Java Delete Files",
      "summary": "Delete a File\nTo delete a file in Java, use the delete() method:\nExampleGet your own Java Server\nThe output will be:\nDelete a Folder\nYou can also delete a folder. However, it must be empty:\nExample\nThe output will be:",
      "examples": [
        "import java.io.File; // Import the File class public class DeleteFile { public static void main(String[] args) { File myObj = new File(\"filename.txt\"); if (myObj.delete()) { System.out.println(\"Deleted the file: \" + myObj.getName()); } else { System.out.println(\"Failed to delete the file.\"); } } }",
        "import java.io.File; public class DeleteFolder { public static void main(String[] args) { File myObj = new File(\"C:\\\\Users\\\\MyName\\\\Test\"); if (myObj.delete()) { System.out.println(\"Deleted the folder: \" + myObj.getName()); } else { System.out.println(\"Failed to delete the folder.\"); } } }",
        "delete()",
        "Deleted the file: filename.txt",
        "import java.io.File; public class DeleteFolder { public static void main(String[] args) { File myObj = new File(\"C:\\\\Users\\\\MyName\\\\Test\"); if (myObj.delete()) { System.out.println(\"Deleted the folder: \" + myObj.getName()); } else { System.out.println(\"Failed to delete the folder.\"); } }",
        "Deleted the folder: Test"
      ]
    },
    {
      "title": "Java I/O Streams",
      "summary": "I/O Streams (Input/Output Streams)\nYou've already seen how to create, read, and write simple text files.\nIn Java, there is an important difference between working with the File class and working with I/O Streams (Input/Output Stream):\nThe File class (from java.io) is used to get information about files and directories:\nDoes the file exist?\nWhat is its name or size?\nCreate or delete files and folders\nBut: the File class does not read or write the contents of the file.\nDoes the file exist?\nWhat is its name or size?\nCreate or delete files and folders\nBut: the File class does not read or write the contents of the file.\nSo far, we have used FileWriter for writing text and Scanner for reading text. These are easy to use, but they are mainly designed for simple text files.\nI/O Streams are more flexible, because they work with text and binary data (like images, audio, PDFs).\nTypes of Streams\nByte Streams\nWork with raw binary data (like images, audio, and PDF files).\nExamples: FileInputStream, FileOutputStream.\nCharacter Streams\nWork with text (characters and strings). These streams automatically handle character encoding.\nExamples: FileReader, FileWriter, BufferedReader, BufferedWriter.\nTip: Use character streams when working with text, and byte streams when working with binary data.",
      "examples": [
        "File",
        "java.io",
        "FileWriter",
        "Scanner",
        "FileInputStream",
        "FileOutputStream",
        "FileReader",
        "BufferedReader",
        "BufferedWriter"
      ]
    },
    {
      "title": "Java FileInputStream",
      "summary": "FileInputStream\nSo far, you have used the Scanner class to read text files. Scanner is very convenient for text because it can split input into lines, words, or numbers. However, sometimes you need more control. For example, when reading binary data (like images, audio, or PDFs), or when you need full control of raw bytes. In those cases, you use FileInputStream.\nRead a Text File (Basic Example)\nThis example uses FileInputStream to read a text file, one byte at a time, and print the result as characters:\nExampleGet your own Java Server\nThe output will be:\nRun Example »\nExplanation: This program opens filename.txt, reads it byte by byte, and prints the result as characters in the console.\nCopy a Binary File (Real-World Example)\nThe real strength of FileInputStream is that it can handle any file type, not just text. Here is an example that copies an image file:\nExample\nExplanation: This program reads image.jpg and writes it into copy.jpg. Since it works with raw bytes, it can copy any kind of file - text, images, audio, or PDFs.\nNote: The program also uses FileOutputStream. While FileInputStream is used to read bytes from a file, FileOutputStream is used to write bytes to a file. Together, they make it possible to copy any kind of file.\nYou will learn more about FileOutputStream in the next chapter.\nChoosing the Right Class\nJava gives you several ways to read files. Here's when to pick each one:\nScanner - best for simple text and when you want to parse numbers or words easily.\nBufferedReader - best for large text files, because it is faster and reads line by line.\nFileInputStream - best for binary data (images, audio, PDFs) or when you need full control of raw bytes.",
      "examples": [
        "import java.io.FileInputStream; // Import FileInputStream import java.io.IOException; // Import IOException public class Main { public static void main(String[] args) { // try-with-resources: FileInputStream will be closed automatically try (FileInputStream input = new FileInputStream(\"filename.txt\")) { int i; // variable to store each byte that is read // Read one byte at a time until end of file (-1 means \"no more data\") while ((i = input.read()) != -1) { // Convert the byte to a character and print it to the console System.out.print((char) i); } } catch (IOException e) { // If an error happens (e.g. file not found), print an error message System.out.println(\"Error reading file.\"); } } }",
        "import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; public class CopyFile { public static void main(String[] args) { // Copy image.jpg into copy.jpg try (FileInputStream input = new FileInputStream(\"image.jpg\"); FileOutputStream output = new FileOutputStream(\"copy.jpg\")) { int i; while ((i = input.read()) != -1) { output.write(i); // write the raw byte to the new file } System.out.println(\"File copied successfully.\"); } catch (IOException e) { System.out.println(\"Error handling file.\"); } } }",
        "Scanner",
        "FileInputStream",
        "Some text from filename.txt",
        "filename.txt",
        "image.jpg",
        "copy.jpg",
        "FileOutputStream",
        "BufferedReader"
      ]
    },
    {
      "title": "Java FileOutputStream",
      "summary": "FileOutputStream\nEarlier, you learned how to write text to files using FileWriter.\nThe FileOutputStream class works in a similar way, but it writes data as raw bytes. That means you can use it not only for text files, but also for binary files (like images, PDFs, or audio).\nWrite a Text File (Basic Example)\nThis example writes a short text string to a file using FileOutputStream.\nNote: If the file already exists, its contents will be replaced (overwritten).\nExampleGet your own Java Server\nThe output will be:\nRun Example »\nExplanation: This program creates (or overwrites) filename.txt and writes Hello World! into it. If everything works, it prints \"Successfully wrote to file.\" in the console. Otherwise, it shows an error message.\nCopy a Binary File (Real-World Example)\nThe real strength of FileOutputStream is that it can handle any file type, not just text. Here is an example that copies an image file:\nExample\nExplanation: This program reads image.jpg and writes it into copy.jpg. Since it works with raw bytes, it can copy any kind of file - text, images, audio, or PDFs.\nNote: On the previous page, you saw FileInputStream for reading bytes. Here, it is paired with FileOutputStream to write bytes. Together, they make it possible to copy files.\nAppend to a File\nBy default, FileOutputStream overwrites the file if it already exists. To add (append) new content instead, pass true as the second argument:\nExample\nThe output will be:\nRun Example »\nExplanation: This program adds Appended text! to the end of filename.txt, keeping the existing content.\nChoosing the Right Class\nJava gives you several ways to write to files. Here's when to pick each one:\nFileWriter - best for basic text files. Simple and easy to use.\nBufferedWriter - best for large text files, because it is faster and lets you add new lines easily.\nFileOutputStream - best for binary data (images, PDFs, audio) or when you need full control of raw bytes.",
      "examples": [
        "import java.io.FileOutputStream; import java.io.IOException; public class Main { public static void main(String[] args) { // The text we want to write String text = \"Hello World!\"; // try-with-resources: stream will be closed automatically try (FileOutputStream output = new FileOutputStream(\"filename.txt\")) { output.write(text.getBytes()); // convert text to bytes and write System.out.println(\"Successfully wrote to file.\"); } catch (IOException e) { System.out.println(\"Error writing file.\"); e.printStackTrace(); } } }",
        "import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; public class CopyFile { public static void main(String[] args) { // Copy image.jpg into copy.jpg try (FileInputStream input = new FileInputStream(\"image.jpg\"); FileOutputStream output = new FileOutputStream(\"copy.jpg\")) { int b; while ((b = input.read()) != -1) { output.write(b); // write each raw byte to the new file } System.out.println(\"File copied successfully.\"); } catch (IOException e) { System.out.println(\"Error handling file.\"); } } }",
        "import java.io.FileOutputStream; import java.io.IOException; public class Main { public static void main(String[] args) { String text = \"\\nAppended text!\"; // true = append mode (keeps existing content) try (FileOutputStream output = new FileOutputStream(\"filename.txt\", true)) { output.write(text.getBytes()); System.out.println(\"Successfully appended to file.\"); } catch (IOException e) { System.out.println(\"Error writing file.\"); e.printStackTrace(); } } }",
        "FileWriter",
        "FileOutputStream",
        "Successfully wrote to file.",
        "filename.txt",
        "Hello World!",
        "\"Successfully wrote to file.\"",
        "image.jpg",
        "copy.jpg",
        "FileInputStream",
        "true",
        "Successfully appended to file.",
        "Appended text!",
        "BufferedWriter"
      ]
    },
    {
      "title": "Java BufferedReader",
      "summary": "BufferedReader and BufferedWriter\nBufferedReader and BufferedWriter make reading and writing text files faster.\nBufferedReader lets you read text line by line with readLine().\nBufferedWriter lets you write text efficiently and add new lines with newLine().\nThese classes are usually combined with FileReader and FileWriter, which handle opening or creating the file. The buffered classes then make reading/writing faster by using a memory buffer.\nRead a Text File (Line by Line)\nUse BufferedReader with FileReader to read each line of a file:\nExampleGet your own Java Server\nThe output will be:\nRun Example »\nComparing File Reading Classes\nJava gives you several ways to read files. Here's when to pick each one:\nScanner - best for simple text. It can split text into lines, words, or numbers (e.g., nextInt(), nextLine()).\nBufferedReader - best for large text files. It is faster, uses less memory, and can read full lines with readLine().\nFileInputStream - best for binary files (like images, PDFs, or audio)",
      "examples": [
        "import java.io.BufferedReader; import java.io.FileReader; import java.io.IOException; public class Main { public static void main(String[] args) { try (BufferedReader br = new BufferedReader(new FileReader(\"filename.txt\"))) { String line; while ((line = br.readLine()) != null) { System.out.println(line); } } catch (IOException e) { System.out.println(\"Error reading file.\"); } } }",
        "BufferedReader",
        "BufferedWriter",
        "readLine()",
        "newLine()",
        "FileReader",
        "FileWriter",
        "Some text from filename.txt",
        "Scanner",
        "nextInt()",
        "nextLine()",
        "FileInputStream"
      ]
    },
    {
      "title": "Java BufferedWriter",
      "summary": "BufferedWriter\nThe BufferedWriter class is used to write text to a file, one line or one string at a time. If the file already exists, its contents will be replaced (overwritten).\nWrite to a Text File\nUse BufferedWriter with FileWriter to write text to a file. The write() method adds text, and you can use newLine() to insert a line break:\nExampleGet your own Java Server\nThe output will be:\nTry it Yourself »\nExplanation: This program creates (or overwrites) filename.txt and writes two lines of text into it. The newLine() method inserts a line break between \"First line\" and \"Second line\". If everything goes well, the console will print \"Successfully wrote to the file.\"\nAppend to a Text File\nTo add new content to the end of a file (instead of overwriting), pass true to FileWriter:\nExample\nThe output will be:\nTry it Yourself »\nExplanation: This program keeps the existing content of filename.txt and adds a new line with the text \"Appended line\" at the end. If everything works, the console prints \"Successfully appended to the file.\"\nComparing File Writing Classes\nJava gives you several ways to write to files. Here's when to pick each one:\nFileWriter - best for simple text writing. Quick and easy to use.\nBufferedWriter - better for larger text files, because it is faster and lets you easily add line breaks with newLine().\nFileOutputStream - best for binary files (like images, PDFs, or audio)",
      "examples": [
        "import java.io.BufferedWriter; import java.io.FileWriter; import java.io.IOException; public class Main { public static void main(String[] args) { try (BufferedWriter bw = new BufferedWriter(new FileWriter(\"filename.txt\"))) { bw.write(\"First line\"); bw.newLine(); // add line break bw.write(\"Second line\"); System.out.println(\"Successfully wrote to the file.\"); } catch (IOException e) { System.out.println(\"Error writing file.\"); } } }",
        "import java.io.BufferedWriter; import java.io.FileWriter; import java.io.IOException; public class Main { public static void main(String[] args) { // true = append mode try (BufferedWriter bw = new BufferedWriter(new FileWriter(\"filename.txt\", true))) { bw.newLine(); // move to a new line bw.write(\"Appended line\"); // add new text at the end System.out.println(\"Successfully appended to the file.\"); } catch (IOException e) { System.out.println(\"Error writing file.\"); } } }",
        "BufferedWriter",
        "FileWriter",
        "write()",
        "newLine()",
        "Successfully wrote to the file.",
        "filename.txt",
        "\"First line\"",
        "\"Second line\"",
        "\"Successfully wrote to the file.\"",
        "true",
        "Successfully appended to the file.",
        "\"Appended line\"",
        "\"Successfully appended to the file.\"",
        "FileOutputStream"
      ]
    },
    {
      "title": "Java Data Structures",
      "summary": "Java Data Structures\nData structures are ways to store and organize data so you can use it efficiently.\nAn array is an example of a data structure, which allows multiple elements to be stored in a single variable.\nSome of the most common are:\nArrayList\nHashSet\nHashMap\nTip: Data structures are like supercharged arrays - more flexible and feature-rich!\nWe'll explore all of these - and many more - in detail later, but for now, here's a quick introduction to each one.\nArrayList\nAn ArrayList is a resizable array that can grow as needed.\nIt allows you to store elements and access them by index.\nExampleGet your own Java Server\nTry it Yourself »\nHashSet\nA HashSet is a collection where every element is unique - no duplicates are allowed.\nExample\nTry it Yourself »\nNote: In the example above, even though BMW is added twice it only appears once in the set because every element in a set has to be unique.\nHashMap\nA HashMap stores key-value pairs, which are great when you want to store values and find them by a key (like a name or ID):\nExample\nTry it Yourself »\nData Structures Overview\nIterators\nWhen learning about data structures, you will often hear about iterators too.\nAn iterator is a way to loop through elements in a data structure.\nIt is called an \"iterator\" because \"iterating\" is the technical term for looping.\nExample\nUsing an Iterator with ArrayList:\nTry it Yourself »\nNext, let's take a closer look at each data structure in more detail.",
      "examples": [
        "// Import the ArrayList class import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars); } }",
        "// Import the HashSet class import java.util.HashSet; public class Main { public static void main(String[] args) { HashSet<String> cars = new HashSet<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"BMW\"); // Duplicate cars.add(\"Mazda\"); System.out.println(cars); } }",
        "// Import the HashMap class import java.util.HashMap; public class Main { public static void main(String[] args) { // Create a HashMap object called capitalCities HashMap<String, String> capitalCities = new HashMap<String, String>(); // Add keys and values (Country, City) capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities); } }",
        "import java.util.ArrayList; import java.util.Iterator; public class Main { public static void main(String[] args) { // Create an ArrayList of Strings ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Get an iterator for the ArrayList Iterator<String> it = cars.iterator(); // Iterate through the list using the iterator while(it.hasNext()) { System.out.println(it.next()); } } }",
        "java.util",
        "ArrayList",
        "HashSet",
        "HashMap",
        "// Import the ArrayList class import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars);"
      ]
    },
    {
      "title": "Java Collections Framework",
      "summary": "The Collections Framework\nBefore we explore ArrayList, HashSet, HashMap, and other data structures in more detail, it's important to understand that all of these are part of something bigger - the Java Collections Framework.\nThe Java Collections Framework provides a set of interfaces (like List, Set, and Map) and a set of classes (ArrayList, HashSet, HashMap, etc.) that implement those interfaces.\nAll of these are part of the java.util package.\nThey are used to store, search, sort, and organize data more easily - all using standardized methods and patterns.\nTip: Think of the Collections Framework as a toolbox.\nInterfaces like List define what tools can do, and classes like ArrayList are the actual tools that do the work.\nCore Interfaces in the Collections Framework\nHere are some common interfaces, along with their classes:\nOverview of Classes\nThe table below gives an overview of the common data structure classes and their characteristics:\nUse List classes when you care about order, you may have duplicates, and want to access elements by index.\nUse Set classes when you need to store unique values only.\nUse Map classes when you need to store pairs of keys and values, like a name and its phone number.\nWhat's Next?\nIn the next chapters, you will learn how to use each of these data structures in detail - how to add, remove, sort, and search elements, and choose the right structure for your task.",
      "examples": [
        "ArrayList",
        "HashSet",
        "HashMap",
        "List",
        "Set",
        "Map",
        "java.util",
        "LinkedList",
        "TreeSet",
        "LinkedHashSet",
        "TreeMap",
        "LinkedHashMap"
      ]
    },
    {
      "title": "Java List",
      "summary": "Java List Interface\nThe List interface is part of the Java Collections Framework and represents an ordered collection of elements.\nYou can access elements by their index, add duplicates, and maintain the insertion order.\nSince List is an interface, you cannot create a List object directly.\nInstead, you use a class that implements the List interface, such as:\nArrayList - like a resizable array with fast random access\nLinkedList - like a train of cars you can easily attach or remove\nTip: Use List when you care about order, you may have duplicates, and want to access elements by index.\nCommon List Methods\nList vs. Array\nIn the next chapters, you will learn how to use ArrayList and LinkedList.",
      "examples": [
        "List",
        "ArrayList",
        "LinkedList",
        "add()",
        "get()",
        "set()",
        "remove()",
        "size()"
      ]
    },
    {
      "title": "Java ArrayList",
      "summary": "Java ArrayList\nAn ArrayList is like a resizable array.\nIt is part of the java.util package and implements the List interface.\nThe difference between a built-in array and an ArrayList in Java, is that the size of an array cannot be modified (if you want to add or remove elements to/from an array, you have to create a new one). While elements can be added and removed from an ArrayList whenever you want.\nCreate an ArrayList\nTo use an ArrayList, you must first import it from java.util:\nExampleGet your own Java Server\nCreate an ArrayList object called cars that will store strings:\nNow you can use methods like add(), get(), set(), and remove() to manage your list of elements.\nAdd Elements\nTo add elements to an ArrayList, use the add() method:\nExample\nTry it Yourself »\nYou can also add an element at a specified position by referring to the index number:\nExample\nTry it Yourself »\nAn ArrayList keeps elements in the same order you add them, so the first item you add will be at index 0, the next at index 1, and so on.\nAccess an Element\nTo access an element in the ArrayList, use the get() method and refer to the index number:\nExample\nTry it Yourself »\nREMOVE ADS\nChange an Element\nTo modify an element, use the set() method and refer to the index number:\nExample\nTry it Yourself »\nRemove an Element\nTo remove an element, use the remove() method and refer to the index number:\nExample\nTry it Yourself »\nTo remove all the elements in the ArrayList, use the clear() method:\nExample\nTry it Yourself »\nArrayList Size\nTo find out how many elements an ArrayList have, use the size method:\nExample\nTry it Yourself »\nLoop Through an ArrayList\nLoop through the elements of an ArrayList with a for loop, and use the size() method to specify how many times the loop should run:\nExample\nTry it Yourself »\nYou can also loop through an ArrayList with the for-each loop:\nExample\nTry it Yourself »\nOther Types\nElements in an ArrayList are actually objects. In the examples above, we created elements (objects) of type \"String\". Remember that a String in Java is an object (not a primitive type). To use other types, such as int, you must specify an equivalent wrapper class: Integer. For other primitive types, use: Boolean for boolean, Character for char, Double for double, etc:\nExample\nCreate an ArrayList to store numbers (add elements of type Integer):\nTry it Yourself »\nSort an ArrayList\nAnother useful class in the java.util package is the Collections class, which include the sort() method for sorting lists alphabetically or numerically:\nExample\nSort an ArrayList of Strings:\nTry it Yourself »\nExample\nSort an ArrayList of Integers:\nTry it Yourself »\nThe var Keyword\nFrom Java 10, you can use the var keyword to declare an ArrayList variable without writing the type twice. The compiler figures out the type from the value you assign.\nThis makes code shorter, but many developers still use the full type for clarity. Since var is valid Java, you may see it in other code, so it's good to know that it exists:\nExample\nTry it Yourself »\nThe List Interface\nNote: Sometimes you will see both List and ArrayList in Java code, like this:\nTry it Yourself »\nThis means the variable (cars) is declared as a List (the interface), but it stores an ArrayList object (the actual list). Since ArrayList implements the List interface, this is possible.\nIt works the same way, but some developers prefer this style because it gives them more flexibility to change the type later.\nComplete ArrayList Reference\nFor a complete reference of ArrayList methods, go to our Java ArrayList Reference.",
      "examples": [
        "import java.util.ArrayList; // Import the ArrayList class ArrayList<String> cars = new ArrayList<String>(); // Create an ArrayList object",
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars); } }",
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(0, \"Mazda\"); // Insert element at the beginning of the list (0) System.out.println(cars); } }",
        "cars.get(0); // Get the first element",
        "cars.set(0, \"Opel\");",
        "cars.remove(0);",
        "cars.clear();",
        "cars.size();",
        "public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); for (int i = 0; i < cars.size(); i++) { System.out.println(cars.get(i)); } } }",
        "public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); for (String i : cars) { System.out.println(i); } } }",
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<Integer> myNumbers = new ArrayList<Integer>(); myNumbers.add(10); myNumbers.add(15); myNumbers.add(20); myNumbers.add(25); for (int i : myNumbers) { System.out.println(i); } } }",
        "import java.util.ArrayList; import java.util.Collections; // Import the Collections class public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); Collections.sort(cars); // Sort cars for (String i : cars) { System.out.println(i); } } }",
        "import java.util.ArrayList; import java.util.Collections; // Import the Collections class public class Main { public static void main(String[] args) { ArrayList<Integer> myNumbers = new ArrayList<Integer>(); myNumbers.add(33); myNumbers.add(15); myNumbers.add(20); myNumbers.add(34); myNumbers.add(8); myNumbers.add(12); Collections.sort(myNumbers); // Sort myNumbers for (int i : myNumbers) { System.out.println(i); } } }",
        "// Without var ArrayList<String> cars = new ArrayList<String>(); // With var var cars = new ArrayList<String>();",
        "import java.util.List; import java.util.ArrayList; List<String> cars = new ArrayList<>();",
        "ArrayList",
        "java.util",
        "List",
        "add()",
        "get()",
        "set()",
        "remove()",
        "clear()",
        "size",
        "for",
        "size()",
        "String",
        "int",
        "Integer",
        "Boolean",
        "Character",
        "Double",
        "Collections",
        "sort()",
        "var"
      ]
    },
    {
      "title": "Java LinkedList",
      "summary": "Java LinkedList\nIn the previous chapter, you learned about the ArrayList class. The LinkedList class is almost identical to the ArrayList:\nExampleGet your own Java Server\nTry it Yourself »\nArrayList vs. LinkedList\nThe LinkedList class is a collection which can contain many objects of the same type, just like the ArrayList.\nThe LinkedList class has the same methods as ArrayList because both follow the List interface. This means you can add, change, remove, or clear elements in a LinkedList just like you would with an ArrayList.\nHowever, while the ArrayList class and the LinkedList class can be used in the same way, they are built very differently.\nHow the ArrayList works\nThe ArrayList class has a regular array inside it. When an element is added, it is placed into the array. If the array is not big enough, a new, larger array is created to replace the old one and the old one is removed.\nHow the LinkedList works\nThe LinkedList stores its elements in \"containers.\" The list has a link to the first container and each container has a link to the next container in the list. To add an element to the list, the element is placed into a new container and that container is linked to one of the other containers in the list.\nWhen To Use\nUse an ArrayList for storing and accessing data, and LinkedList to manipulate data.\nLinkedList Methods\nFor many cases, the ArrayList is more efficient as it is common to need access to random elements in the list, but the LinkedList provides several methods to do certain operations more efficiently:\nThe var Keyword\nFrom Java 10, you can use the var keyword to declare a LinkedList variable without writing the type twice. The compiler figures out the type from the value you assign.\nThis makes code shorter, but many developers still use the full type for clarity. Since var is valid Java, you may see it in other code, so it's good to know that it exists:\nExample\nTry it Yourself »\nThe List Interface\nNote: Sometimes you will see both List and LinkedList in Java code, like this:\nTry it Yourself »\nThis means the variable (cars) is declared as a List (the interface), but it stores a LinkedList object (the actual list). Since LinkedList implements the List interface, this is possible.\nIt works the same way, but some developers prefer this style because it gives them more flexibility to change the type later.\nComplete LinkedList Reference\nFor a complete reference of LinkedList methods, go to our Java LinkedList Reference.",
      "examples": [
        "// Import the LinkedList class import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars); } }",
        "// Without var LinkedList<String> cars = new LinkedList<String>(); // With var var cars = new LinkedList<String>();",
        "import java.util.List; import java.util.LinkedList; List<String> cars = new LinkedList<>();",
        "ArrayList",
        "LinkedList",
        "List",
        "addFirst()",
        "addLast()",
        "removeFirst()",
        "removeLast()",
        "getFirst()",
        "getLast()",
        "var"
      ]
    },
    {
      "title": "Java List Sorting",
      "summary": "Java Sort a List\nIn the previous chapters, you learned how to use two popular lists in Java: ArrayList and LinkedList, which are found in the java.util package.\nAnother useful class in the java.util package is the Collections class, which include the sort() method for sorting lists alphabetically or numerically.\nSort an ArrayList\nSort an ArrayList of Strings alphabetically in ascending order:\nExampleGet your own Java Server\nTry it Yourself »\nSort an ArrayList of Integers numerically in ascending order:\nExample\nTry it Yourself »\nReverse the Order\nYou can also sort a list in reverse order, by using the reverseOrder() method.\nIn the following example, we sort an ArrayList of Strings alphabetically in reverse/descending order:\nExample\nTry it Yourself »\nSort an ArrayList of Integers numerically in reverse/descending order:\nExample\nTry it Yourself »",
      "examples": [
        "import java.util.ArrayList; import java.util.Collections; // Import the Collections class public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); Collections.sort(cars); // Sort cars for (String i : cars) { System.out.println(i); } } }",
        "import java.util.ArrayList; import java.util.Collections; // Import the Collections class public class Main { public static void main(String[] args) { ArrayList<Integer> myNumbers = new ArrayList<Integer>(); myNumbers.add(33); myNumbers.add(15); myNumbers.add(20); myNumbers.add(34); myNumbers.add(8); myNumbers.add(12); Collections.sort(myNumbers); // Sort myNumbers for (int i : myNumbers) { System.out.println(i); } } }",
        "import java.util.ArrayList; import java.util.Collections; // Import the Collections class public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); Collections.sort(cars, Collections.reverseOrder()); // Sort cars for (String i : cars) { System.out.println(i); } } }",
        "import java.util.ArrayList; import java.util.Collections; // Import the Collections class public class Main { public static void main(String[] args) { ArrayList<Integer> myNumbers = new ArrayList<Integer>(); myNumbers.add(33); myNumbers.add(15); myNumbers.add(20); myNumbers.add(34); myNumbers.add(8); myNumbers.add(12); Collections.sort(myNumbers, Collections.reverseOrder()); // Sort myNumbers for (int i : myNumbers) { System.out.println(i); } } }",
        "ArrayList",
        "LinkedList",
        "java.util",
        "Collections",
        "sort()",
        "reverseOrder()"
      ]
    },
    {
      "title": "Java Set",
      "summary": "Java Set Interface\nThe Set interface is part of the Java Collections Framework and is used to store a collection of unique elements.\nUnlike a List, a Set does not allow duplicates, and it does not preserve the order of elements (unless you're using TreeSet or LinkedHashSet).\nCommon classes that implement Set:\nHashSet - fast and unordered\nTreeSet - sorted set\nLinkedHashSet - ordered by insertion\nTip: Use a Set when you need to store unique values only.\nCommon Set Methods\nSet vs. List\nNext, you'll explore the HashSet class in detail.",
      "examples": [
        "Set",
        "List",
        "TreeSet",
        "LinkedHashSet",
        "HashSet",
        "add()",
        "remove()",
        "contains()",
        "size()",
        "clear()"
      ]
    },
    {
      "title": "Java HashSet",
      "summary": "Java HashSet\nA HashSet is a collection of elements where every element is unique.\nIt is part of the java.util package and implements the Set interface.\nCreate a HashSet\nExampleGet your own Java Server\nCreate a HashSet object called cars that will store strings:\nNow you can use methods like add(), contains(), and remove() to manage your collection of unique elements.\nAdd Elements\nTo add elements to a HashSet, use the add() method:\nExample\nTry it Yourself »\nNote: In the example above, even though \"BMW\" is added twice, it only appears once in the set because sets do not allow duplicate elements.\nCheck If an Element Exists\nTo check whether an element exists in a HashSet, use the contains() method:\nExample\nTry it Yourself »\nRemove an Element\nTo remove an element, use the remove() method:\nExample\nTry it Yourself »\nTo remove all elements, use the clear() method:\nExample\nTry it Yourself »\nREMOVE ADS\nHashSet Size\nUse size() to count how many unique elements are in the set:\nExample\nTry it Yourself »\nNote: Duplicate values are not counted - only unique elements are included in the size.\nLoop Through a HashSet\nLoop through the elements of an HashSet with a for-each loop:\nExample\nTry it Yourself »\nOther Types\nElements in an HashSet are actually objects. In the examples above, we created elements (objects) of type \"String\". Remember that a String in Java is an object (not a primitive type). To use other types, such as int, you must specify an equivalent wrapper class: Integer. For other primitive types, use: Boolean for boolean, Character for char, Double for double, etc:\nExample\nUse a HashSet that stores Integer objects:\nTry it Yourself »\nThe var Keyword\nFrom Java 10, you can use the var keyword to declare a HashSet variable without writing the type twice. The compiler figures out the type from the value you assign.\nThis makes code shorter, but many developers still use the full type for clarity. Since var is valid Java, you may see it in other code, so it's good to know that it exists:\nExample\nTry it Yourself »\nThe Set Interface\nNote: Sometimes you will see both Set and HashSet in Java code, like this:\nTry it Yourself »\nThis means the variable (cars) is declared as a Set (the interface), but it stores a HashSet object (the actual set). Since HashSet implements the Set interface, this is possible.\nIt works the same way, but some developers prefer this style because it gives them more flexibility to change the type later.\nWhen Order Matters\nIn the next chapter, you will learn about TreeSet, which stores unique elements in sorted order.",
      "examples": [
        "import java.util.HashSet; // Import the HashSet class HashSet<String> cars = new HashSet<String>();",
        "// Import the HashSet class import java.util.HashSet; public class Main { public static void main(String[] args) { HashSet<String> cars = new HashSet<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"BMW\"); // Duplicate cars.add(\"Mazda\"); System.out.println(cars); } }",
        "cars.contains(\"Mazda\");",
        "cars.remove(\"Volvo\");",
        "cars.clear();",
        "cars.size();",
        "for (String i : cars) { System.out.println(i); }",
        "import java.util.HashSet; public class Main { public static void main(String[] args) { // Create a HashSet object called numbers HashSet<Integer> numbers = new HashSet<Integer>(); // Add values to the set numbers.add(4); numbers.add(7); numbers.add(8); // Show which numbers between 1 and 10 are in the set for (int i = 1; i <= 10; i++) { if (numbers.contains(i)) { System.out.println(i + \" was found in the set.\"); } else { System.out.println(i + \" was not found in the set.\"); } } } }",
        "// Without var HashSet<String> cars = new HashSet<String>(); // With var var cars = new HashSet<String>();",
        "import java.util.Set; import java.util.HashSet; Set<String> cars = new HashSet<>();",
        "HashSet",
        "java.util",
        "Set",
        "add()",
        "contains()",
        "remove()",
        "\"BMW\"",
        "clear()",
        "size()",
        "String",
        "int",
        "Integer",
        "Boolean",
        "Character",
        "Double",
        "var",
        "TreeSet"
      ]
    },
    {
      "title": "Java TreeSet",
      "summary": "Java TreeSet\nA TreeSet is a collection that stores unique elements in sorted order.\nIt is part of the java.util package and implements the Set interface.\nTip: Unlike HashSet, which has no order, TreeSet keeps its elements sorted automatically.\nCreate a TreeSet\nExampleGet your own Java Server\nCreate a TreeSet object called cars that will store strings:\nNow you can use methods like add(), contains(), and remove() to manage your sorted set of elements.\nAdd Elements\nTo add elements to a TreeSet, use the add() method:\nExample\nTry it Yourself »\nOutput: The elements will be sorted automatically (e.g., [BMW, Ford, Mazda, Volvo]).\nNote: Duplicates like \"BMW\" will only appear once.\nCheck if an Element Exists\nUse contains() to check if an element exists:\nExample\nTry it Yourself »\nRemove an Element\nUse remove() to remove an element:\nExample\nTry it Yourself »\nRemove All Elements\nUse clear() to remove all elements:\nExample\nTry it Yourself »\nTreeSet Size\nUse size() to count how many unique elements are in the set:\nExample\nTry it Yourself »\nNote: Duplicate values are not counted - only unique elements are included in the size.\nLoop Through a TreeSet\nLoop through the elements of a TreeSet with a for-each loop:\nExample\nTry it Yourself »\nUsing TreeSet with Numbers\nTreeSet also works with numbers and sorts them from smallest to largest:\nExample\nTry it Yourself »\nOutput: The numbers will be printed in sorted order (10, 20, 30, 40).\nHashSet vs TreeSet\nTip: Use HashSet when you care about speed, and TreeSet when you need sorted elements.\nThe var Keyword\nFrom Java 10, you can use the var keyword to declare a TreeSet variable without writing the type twice. The compiler figures out the type from the value you assign.\nThis makes code shorter, but many developers still use the full type for clarity. Since var is valid Java, you may see it in other code, so it's good to know that it exists:\nExample\nTry it Yourself »\nThe Set Interface\nNote: Sometimes you will see both Set and TreeSet in Java code, like this:\nTry it Yourself »\nThis means the variable (cars) is declared as a Set (the interface), but it stores a TreeSet object (the actual set). Since TreeSet implements the Set interface, this is possible.\nIt works the same way, but some developers prefer this style because it gives them more flexibility to change the type later.",
      "examples": [
        "import java.util.TreeSet; // Import the TreeSet class TreeSet<String> cars = new TreeSet<>();",
        "import java.util.TreeSet; public class Main { public static void main(String[] args) { TreeSet<String> cars = new TreeSet<>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"BMW\"); // Duplicate cars.add(\"Mazda\"); System.out.println(cars); } }",
        "cars.contains(\"Mazda\");",
        "cars.remove(\"Volvo\");",
        "cars.clear();",
        "cars.size();",
        "TreeSet<String> cars = new TreeSet<>(); // add elements... for (String i : cars) { System.out.println(i); }",
        "import java.util.TreeSet; public class Main { public static void main(String[] args) { TreeSet<Integer> numbers = new TreeSet<>(); numbers.add(40); numbers.add(10); numbers.add(30); numbers.add(20); for (int n : numbers) { System.out.println(n); } } }",
        "// Without var TreeSet<String> cars = new TreeSet<String>(); // With var var cars = new TreeSet<String>();",
        "import java.util.Set; import java.util.TreeSet; Set<String> cars = new TreeSet<>();",
        "TreeSet",
        "java.util",
        "Set",
        "HashSet",
        "add()",
        "contains()",
        "remove()",
        "clear()",
        "size()",
        "var"
      ]
    },
    {
      "title": "Java LinkedHashSet",
      "summary": "Java LinkedHashSet\nA LinkedHashSet is a collection that stores unique elements and remembers the order they were added.\nIt is part of the java.util package and implements the Set interface.\nTip: Use LinkedHashSet when you want a set that does not allow duplicates and keeps the original insertion order.\nCreate a LinkedHashSet\nExampleGet your own Java Server\nCreate a LinkedHashSet object called cars that will store strings:\nNow you can use methods like add(), contains(), and remove() to manage your collection.\nAdd Elements\nTo add elements to a LinkedHashSet, use the add() method:\nExample\nTry it Yourself »\nOutput: The elements will appear in the order they were added (e.g., [Volvo, BMW, Ford, Mazda]).\nNote: Duplicates like \"BMW\" are ignored.\nCheck if an Element Exists\nUse contains() to check for an element:\nExample\nTry it Yourself »\nRemove an Element\nUse remove() to remove an element:\nExample\nTry it Yourself »\nRemove All Elements\nUse clear() to remove all elements:\nExample\nTry it Yourself »\nLinkedHashSet Size\nUse size() to count how many unique elements are in the set:\nExample\nTry it Yourself »\nNote: Duplicate values are not counted - only unique elements are included in the size.\nLoop Through a LinkedHashSet\nLoop through the elements of a LinkedHashSet with a for-each loop:\nExample\nTry it Yourself »\nHashSet vs LinkedHashSet\nTip: Use HashSet when you only care about uniqueness and speed. Use LinkedHashSet when order matters.\nThe var Keyword\nFrom Java 10, you can use the var keyword to declare a LinkedHashSet variable without writing the type twice. The compiler figures out the type from the value you assign.\nThis makes code shorter, but many developers still use the full type for clarity. Since var is valid Java, you may see it in other code, so it's good to know that it exists:\nExample\nTry it Yourself »\nThe Set Interface\nNote: Sometimes you will see both Set and LinkedHashSet in Java code, like this:\nTry it Yourself »\nThis means the variable (cars) is declared as a Set (the interface), but it stores a LinkedHashSet object (the actual set). Since LinkedHashSet implements the Set interface, this is possible.\nIt works the same way, but some developers prefer this style because it gives them more flexibility to change the type later.",
      "examples": [
        "import java.util.LinkedHashSet; // Import the LinkedHashSet class LinkedHashSet<String> cars = new LinkedHashSet<>();",
        "import java.util.LinkedHashSet; public class Main { public static void main(String[] args) { LinkedHashSet<String> cars = new LinkedHashSet<>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"BMW\"); // Duplicate cars.add(\"Mazda\"); System.out.println(cars); } }",
        "cars.contains(\"Mazda\");",
        "cars.remove(\"Volvo\");",
        "cars.clear();",
        "cars.size();",
        "LinkedHashSet<String> cars = new LinkedHashSet<>(); // Add elements... for (String car : cars) { System.out.println(car); }",
        "// Without var LinkedHashSet<String> cars = new LinkedHashSet<String>(); // With var var cars = new LinkedHashSet<String>();",
        "import java.util.Set; import java.util.LinkedHashSet; Set<String> cars = new LinkedHashSet<>();",
        "LinkedHashSet",
        "java.util",
        "Set",
        "add()",
        "contains()",
        "remove()",
        "clear()",
        "size()",
        "HashSet",
        "var"
      ]
    },
    {
      "title": "Java Map",
      "summary": "Java Map Interface\nThe Map interface is a part of the Java Collections Framework and is used to store key-value pairs. Each key must be unique, but values can be duplicated.\nA Map is useful when you want to associate a key (like a name or ID) with a value (like an age or description).\nCommon classes that implement Map:\nHashMap - fast and unordered\nTreeMap - sorted by key\nLinkedHashMap - ordered by insertion\nTip: Use a Map when you want to associate values with unique keys, like storing user IDs with names.\nCommon Map Methods\nMap vs. Set vs. List\nNext, we'll look at how to use HashMap to store items in key/value pairs.",
      "examples": [
        "Map",
        "HashMap",
        "TreeMap",
        "LinkedHashMap",
        "put()",
        "get()",
        "remove()",
        "containsKey()",
        "keySet()"
      ]
    },
    {
      "title": "Java HashMap",
      "summary": "Java HashMap\nA HashMap stores items in key/value pairs, where each key maps to a specific value.\nIt is part of the java.util package and implements the Map interface.\nInstead of accessing elements by an index (like with ArrayList), you use a key to retrieve its associated value.\nA HashMap can store many different combinations, such as:\nString keys and Integer values\nString keys and String values\nCreate a HashMap\nCreate a HashMap object called capitalCities that will store String keys and String values:\nExampleGet your own Java Server\nNow you can use methods like put() to add key/value pairs, get() to retrieve a value by key, and remove() to delete an entry - all by using keys instead of index numbers.\nAdd Items\nTo add items to a HashMap, use the put() method:\nExample\nTry it Yourself »\nNote: In the example above, if the same key (like \"Norway\") is added more than once, the latest value will overwrite the previous one, because keys in a HashMap must be unique.\nAccess an Item\nTo access a value in the HashMap, use the get() method and refer to its key:\nExample\nTry it Yourself »\nRemove an Item\nTo remove an item, use the remove() method and refer to the key:\nExample\nTry it Yourself »\nTo remove all items, use the clear() method:\nExample\nTry it Yourself »\nREMOVE ADS\nHashMap Size\nTo find out how many items there are, use the size() method:\nExample\nTry it Yourself »\nNote: The size only counts unique keys. If a key is added more than once, only the latest value is kept.\nLoop Through a HashMap\nLoop through the items of a HashMap with a for-each loop.\nNote: Use the keySet() method if you only want the keys, and use the values() method if you only want the values:\nExample\nTry it Yourself »\nExample\nTry it Yourself »\nExample\nTry it Yourself »\nOther Types\nKeys and values in a HashMap are actually objects. In the examples above, we used objects of type \"String\". Remember that a String in Java is an object (not a primitive type). To use other types, such as int, you must specify an equivalent wrapper class: Integer. For other primitive types, use: Boolean for boolean, Character for char, Double for double, etc:\nExample\nCreate a HashMap object called people that will store String keys and Integer values:\nTry it Yourself »\nWhen Order Matters\nIn the next chapter, you will learn about TreeMap, which stores key/value pairs in sorted order by key.\nThe var Keyword\nFrom Java 10, you can use the var keyword to declare a HashMap variable without writing the type twice. The compiler figures out the type from the value you assign.\nThis makes code shorter, but many developers still use the full type for clarity. Since var is valid Java, you may see it in other code, so it's good to know that it exists:\nExample\nTry it Yourself »\nThe Map Interface\nNote: Sometimes you will see both Map and HashMap in Java code, like this:\nTry it Yourself »\nThis means the variable (capitalCities) is declared as a Map (the interface), but it stores a HashMap object (the actual map). Since HashMap implements the Map interface, this is possible.\nIt works the same way, but some developers prefer this style because it gives them more flexibility to change the type later.\nComplete HashMap Reference\nFor a complete reference of HashMap methods, go to our Java HashMap Reference.",
      "examples": [
        "import java.util.HashMap; // Import the HashMap class HashMap<String, String> capitalCities = new HashMap<>();",
        "// Import the HashMap class import java.util.HashMap; public class Main { public static void main(String[] args) { // Create a HashMap object called capitalCities HashMap<String, String> capitalCities = new HashMap<String, String>(); // Add keys and values (Country, City) capitalCities.put(\"England\", \"London\"); capitalCities.put(\"India\", \"New Dehli\"); capitalCities.put(\"Austria\", \"Wien\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"Norway\", \"Oslo\"); // Duplicate capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities); } }",
        "capitalCities.get(\"England\");",
        "capitalCities.remove(\"England\");",
        "capitalCities.clear();",
        "capitalCities.size();",
        "// Print keys for (String i : capitalCities.keySet()) { System.out.println(i); }",
        "// Print values for (String i : capitalCities.values()) { System.out.println(i); }",
        "// Print keys and values for (String i : capitalCities.keySet()) { System.out.println(\"key: \" + i + \" value: \" + capitalCities.get(i)); }",
        "// Import the HashMap class import java.util.HashMap; public class Main { public static void main(String[] args) { // Create a HashMap object called people HashMap<String, Integer> people = new HashMap<String, Integer>(); // Add keys and values (Name, Age) people.put(\"John\", 32); people.put(\"Steve\", 30); people.put(\"Angie\", 33); for (String i : people.keySet()) { System.out.println(\"key: \" + i + \" value: \" + people.get(i)); } } }",
        "// Without var HashMap<String, String> capitalCities = new HashMap<String, String>(); // With var var capitalCities = new HashMap<String, String>();",
        "import java.util.Map; import java.util.HashMap; Map<String, String> capitalCities = new HashMap<>();",
        "HashMap",
        "java.util",
        "Map",
        "String",
        "Integer",
        "capitalCities",
        "put()",
        "get()",
        "remove()",
        "clear()",
        "size()",
        "keySet()",
        "values()",
        "int",
        "Boolean",
        "Character",
        "Double",
        "TreeMap",
        "var"
      ]
    },
    {
      "title": "Java TreeMap",
      "summary": "Java TreeMap\nA TreeMap is a collection that stores key/value pairs in sorted order by key.\nIt is part of the java.util package and implements the Map interface.\nTip: Unlike HashMap, which does not maintain order, TreeMap keeps its keys sorted.\nCreate a TreeMap\nCreate a TreeMap that stores String keys and String values:\nExampleGet your own Java Server\nNow you can use methods like put(), get(), and remove() to manage sorted key/value pairs.\nAdd Items\nUse the put() method to add key/value pairs:\nExample\nTry it Yourself »\nOutput: The keys are sorted alphabetically (e.g., {Austria=Wien, England=London, India=New Dehli, Norway=Oslo, USA=Washington DC}).\nNote: Duplicates like \"Norway\" will only appear once.\nAccess an Item\nUse get() with the key to access its value:\nExample\nTry it Yourself »\nRemove Items\nUse remove() to delete a key/value pair by key:\nExample\nTry it Yourself »\nUse clear() to remove all items:\nExample\nTry it Yourself »\nTreeMap Size\nUse size() to count the number of key/value pairs:\nExample\nTry it Yourself »\nNote: The size only counts unique keys. If a key is added more than once, only the latest value is kept.\nLoop Through a TreeMap\nLoop through the items of a TreeMap with a for-each loop.\nNote: Use the keySet() method if you only want the keys, and use the values() method if you only want the values:\nExample\nTry it Yourself »\nExample\nTry it Yourself »\nExample\nTry it Yourself »\nTreeMap vs HashMap\nTip: Use HashMap for performance, and TreeMap when you need sorted keys.\nThe var Keyword\nFrom Java 10, you can use the var keyword to declare a TreeMap variable without writing the type twice. The compiler figures out the type from the value you assign.\nThis makes code shorter, but many developers still use the full type for clarity. Since var is valid Java, you may see it in other code, so it's good to know that it exists:\nExample\nTry it Yourself »\nThe Map Interface\nNote: Sometimes you will see both Map and TreeMap in Java code, like this:\nTry it Yourself »\nThis means the variable (capitalCities) is declared as a Map (the interface), but it stores a TreeMap object (the actual map). Since TreeMap implements the Map interface, this is possible.\nIt works the same way, but some developers prefer this style because it gives them more flexibility to change the type later.",
      "examples": [
        "import java.util.TreeMap; // Import the TreeMap class TreeMap<String, String> capitalCities = new TreeMap<>();",
        "import java.util.TreeMap; public class Main { public static void main(String[] args) { TreeMap<String, String> capitalCities = new TreeMap<>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"India\", \"New Dehli\"); capitalCities.put(\"Austria\", \"Wien\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"Norway\", \"Oslo\"); // Duplicate capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities); } }",
        "capitalCities.get(\"England\");",
        "capitalCities.remove(\"England\");",
        "capitalCities.clear();",
        "capitalCities.size();",
        "// Print keys for (String i : capitalCities.keySet()) { System.out.println(i); }",
        "// Print values for (String i : capitalCities.values()) { System.out.println(i); }",
        "// Print keys and values for (String i : capitalCities.keySet()) { System.out.println(\"key: \" + i + \" value: \" + capitalCities.get(i)); }",
        "// Without var TreeMap<String, String> capitalCities = new TreeMap<String, String>(); // With var var capitalCities = new TreeMap<String, String>();",
        "import java.util.Map; import java.util.TreeMap; Map<String, String> capitalCities = new TreeMap<>();",
        "TreeMap",
        "java.util",
        "Map",
        "HashMap",
        "String",
        "put()",
        "get()",
        "remove()",
        "clear()",
        "size()",
        "keySet()",
        "values()",
        "var"
      ]
    },
    {
      "title": "Java LinkedHashMap",
      "summary": "Java LinkedHashMap\nA LinkedHashMap stores keys and values, and keeps them in the same order you put them in.\nIt is part of the java.util package and implements the Map interface.\nTip: Use LinkedHashMap when you want predictable iteration order (insertion order).\nCreate a LinkedHashMap\nCreate a LinkedHashMap object called capitalCities that will store String keys and String values:\nExampleGet your own Java Server\nNow you can use methods like put() to add key/value pairs, get() to retrieve a value by key, and remove() to delete an entry - all while maintaining insertion order.\nAdd Items\nUse the put() method to add items to the LinkedHashMap:\nExample\nTry it Yourself »\nOutput: The items will appear in the order they were added (e.g., {England=London, India=New Dehli, Austria=Wien, Norway=Oslo, USA=Washington DC}).\nNote: Duplicates like \"Norway\" are ignored.\nAccess an Item\nUse get() with a key to get its associated value:\nExample\nTry it Yourself »\nRemove an Item\nUse remove() to remove an item by key:\nExample\nTry it Yourself »\nUse clear() to remove all items:\nExample\nTry it Yourself »\nLinkedHashMap Size\nUse size() to check how many key/value pairs are in the map:\nExample\nTry it Yourself »\nNote: The size only counts unique keys. If a key is added more than once, only the latest value is kept.\nLoop Through a LinkedHashMap\nYou can loop through a LinkedHashMap using a for-each loop. Use:\nkeySet() to get all keys\nvalues() to get all values\nExample\nTry it Yourself »\nExample\nTry it Yourself »\nExample\nTry it Yourself »\nHashMap vs LinkedHashMap\nTip: Use LinkedHashMap when you want the map to remember the order in which entries were added.\nThe var Keyword\nFrom Java 10, you can use the var keyword to declare a LinkedHashMap variable without writing the type twice. The compiler figures out the type from the value you assign.\nThis makes code shorter, but many developers still use the full type for clarity. Since var is valid Java, you may see it in other code, so it's good to know that it exists:\nExample\nTry it Yourself »\nThe Map Interface\nNote: Sometimes you will see both Map and LinkedHashMap in Java code, like this:\nTry it Yourself »\nThis means the variable (capitalCities) is declared as a Map (the interface), but it stores a LinkedHashMap object (the actual map). Since LinkedHashMap implements the Map interface, this is possible.\nIt works the same way, but some developers prefer this style because it gives them more flexibility to change the type later.",
      "examples": [
        "import java.util.LinkedHashMap; // Import the LinkedHashMap class LinkedHashMap<String, String> capitalCities = new LinkedHashMap<>();",
        "// Import the LinkedHashMap class import java.util.LinkedHashMap; public class Main { public static void main(String[] args) { LinkedHashMap<String, String> capitalCities = new LinkedHashMap<>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"India\", \"New Dehli\"); capitalCities.put(\"Austria\", \"Wien\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"Norway\", \"Oslo\"); // Duplicate capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities); } }",
        "capitalCities.get(\"England\");",
        "capitalCities.remove(\"England\");",
        "capitalCities.clear();",
        "capitalCities.size();",
        "// Print keys for (String key : capitalCities.keySet()) { System.out.println(key); }",
        "// Print values for (String value : capitalCities.values()) { System.out.println(value); }",
        "// Print keys and values for (String key : capitalCities.keySet()) { System.out.println(\"Key: \" + key + \", Value: \" + capitalCities.get(key)); }",
        "// Without var LinkedHashMap<String, String> capitalCities = new LinkedHashMap<String, String>(); // With var var capitalCities = new LinkedHashMap<String, String>();",
        "import java.util.Map; import java.util.LinkedHashMap; Map<String, String> capitalCities = new LinkedHashMap<>();",
        "LinkedHashMap",
        "java.util",
        "Map",
        "capitalCities",
        "String",
        "put()",
        "get()",
        "remove()",
        "clear()",
        "size()",
        "keySet()",
        "values()",
        "HashMap",
        "var"
      ]
    },
    {
      "title": "Java Iterator",
      "summary": "Java Iterator\nAn Iterator is an object that can be used to loop through collections, like ArrayList and HashSet.\nIt is called an \"iterator\" because \"iterating\" is the technical term for looping.\nTo use an Iterator, you must import it from the java.util package.\nGetting an Iterator\nThe iterator() method can be used to get an Iterator for any collection:\nExampleGet your own Java Server\nTry it Yourself »\nLooping Through a Collection\nTo loop through a collection, use the hasNext() and next() methods of the Iterator:\nExample\nTry it Yourself »\nREMOVE ADS\nRemoving Items from a Collection\nIterators are designed to easily change the collections that they loop through. The remove() method can remove items from a collection while looping.\nExample\nUse an iterator to remove numbers less than 10 from a collection:\nTry it Yourself »\nNote: Trying to remove items using a for loop or a for-each loop would not work correctly because the collection is changing size at the same time that the code is trying to loop.\nThe var Keyword with Iterators\nYou can also use the var keyword with iterators. This avoids repeating the long type name Iterator<String>, since the compiler already knows the type from the collection.\nThis makes code shorter, but many developers still use the full type for clarity. Since var is valid from Java version 10, you may see it in other code, so it's good to know that it exists:\nExample\nTry it Yourself »\nHere, var makes the iterator declaration shorter, but the actual type is still Iterator<String>.",
      "examples": [
        "// Import the ArrayList class and the Iterator class import java.util.ArrayList; import java.util.Iterator; public class Main { public static void main(String[] args) { // Make a collection ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Get the iterator Iterator<String> it = cars.iterator(); // Print the first item System.out.println(it.next()); } }",
        "while(it.hasNext()) { System.out.println(it.next()); }",
        "import java.util.ArrayList; import java.util.Iterator; public class Main { public static void main(String[] args) { ArrayList<Integer> numbers = new ArrayList<Integer>(); numbers.add(12); numbers.add(8); numbers.add(2); numbers.add(23); Iterator<Integer> it = numbers.iterator(); while(it.hasNext()) { Integer i = it.next(); if(i < 10) { it.remove(); } } System.out.println(numbers); } }",
        "// Without var Iterator<String> it = cars.iterator(); // With var var it = cars.iterator();",
        "Iterator",
        "ArrayList",
        "HashSet",
        "java.util",
        "iterator()",
        "hasNext()",
        "next()",
        "remove()",
        "var",
        "Iterator<String>"
      ]
    },
    {
      "title": "Java Wrapper Classes",
      "summary": "Java Wrapper Classes\nWrapper classes provide a way to use primitive data types (int, boolean, etc..) as objects.\nThe table below shows the primitive type and the equivalent wrapper class:\nSometimes you must use wrapper classes, for example when working with Collection objects, such as ArrayList, where primitive types cannot be used (the list can only store objects):\nExampleGet your own Java Server\nTry it Yourself »\nCreating Wrapper Objects\nTo create a wrapper object, use the wrapper class instead of the primitive type. To get the value, you can just print the object:\nExample\nTry it Yourself »\nREMOVE ADS\nSince you're now working with objects, you can use certain methods to get information about the specific object.\nFor example, the following methods are used to get the value associated with the corresponding wrapper object: intValue(), byteValue(), shortValue(), longValue(), floatValue(), doubleValue(), charValue(), booleanValue().\nThis example will output the same result as the example above:\nExample\nTry it Yourself »\nAnother useful method is the toString() method, which is used to convert wrapper objects to strings.\nIn the following example, we convert an Integer to a String, and use the length() method of the String class to output the length of the \"string\":\nExample\nTry it Yourself »",
      "examples": [
        "ArrayList<int> myNumbers = new ArrayList<int>(); // Invalid",
        "ArrayList<Integer> myNumbers = new ArrayList<Integer>(); // Valid",
        "public class Main { public static void main(String[] args) { Integer myInt = 5; Double myDouble = 5.99; Character myChar = 'A'; System.out.println(myInt); System.out.println(myDouble); System.out.println(myChar); } }",
        "public class Main { public static void main(String[] args) { Integer myInt = 5; Double myDouble = 5.99; Character myChar = 'A'; System.out.println(myInt.intValue()); System.out.println(myDouble.doubleValue()); System.out.println(myChar.charValue()); } }",
        "public class Main { public static void main(String[] args) { Integer myInt = 100; String myString = myInt.toString(); System.out.println(myString.length()); } }",
        "int",
        "boolean",
        "ArrayList",
        "intValue()",
        "byteValue()",
        "shortValue()",
        "longValue()",
        "floatValue()",
        "doubleValue()",
        "charValue()",
        "booleanValue()",
        "toString()",
        "Integer",
        "String",
        "length()"
      ]
    },
    {
      "title": "Java Generics",
      "summary": "Java Generics\nGenerics allow you to write classes, interfaces, and methods that work with different data types, without having to specify the exact type in advance.\nThis makes your code more flexible, reusable, and type-safe.\nWhy Use Generics?\nCode Reusability: Write one class or method that works with different data types.\nType Safety: Catch type errors at compile time instead of runtime.\nCleaner Code: No need for casting when retrieving objects.\nGeneric Class Example\nYou can create a class that works with different data types using generics:\nTry it Yourself »\nT is a generic type parameter. It's like a placeholder for a data type.\nWhen you create a Box<String>, T becomes String.\nWhen you create a Box<Integer>, T becomes Integer.\nThis way, the same class can be reused with different data types without rewriting the code.\nGeneric Method Example\nYou can also create methods that work with any data type using generics:\nTry it Yourself »\nExample Explained\n<T> is a generic type parameter - it means the method can work with any type: String, Integer, Double, etc.\nThe method printArray() takes an array of type T and prints every element.\nWhen you call the method, Java figures out what T should be based on the argument you pass in.\nThis is useful when you want to write one method that works with multiple types, instead of repeating code for each one.\nBounded Types\nYou can use the extends keyword to limit the types a generic class or method can accept.\nFor example, you can require that the type must be a subclass of Number:\nTry it Yourself »\nEven though int values are used in the first case, the .doubleValue() method converts them to double, so the result is shown with a decimal point.\nExample Explained\n<T extends Number>: Restricts T to only work with numeric types like Integer, Double, or Float.\n.doubleValue(): Converts any number to a double for calculation.\nWorks for any array of numbers as long as the elements are subclasses of Number.\nGeneric Collections\nJava Collections like ArrayList and HashMap use generics internally:\nSummary\nGenerics make your code flexible and type-safe.\nUse T or another letter to define a type placeholder.\nGenerics can be applied to classes, methods, and interfaces.\nUse bounds to limit what types are allowed.",
      "examples": [
        "class Box<T> {\nT value; // T is a placeholder for any data type\n\nvoid set(T value) {\nthis.value = value;\n}\n\nT get() {\nreturn value;\n}\n}\n\npublic class Main {\npublic static void main(String[] args) {\n// Create a Box to hold a String\nBox<String> stringBox = new Box<>();\nstringBox.set(\"Hello\");\nSystem.out.println(\"Value: \" + stringBox.get());\n\n// Create a Box to hold an Integer\nBox<Integer> intBox = new Box<>();\nintBox.set(50);\nSystem.out.println(\"Value: \" + intBox.get());\n}\n}",
        "public class Main {\n// Generic method: works with any type T\npublic static <T> void printArray(T[] array) {\nfor (T item : array) {\nSystem.out.println(item);\n}\n}\n\npublic static void main(String[] args) {\n// Array of Strings\nString[] names = {\"Jenny\", \"Liam\"};\n\n// Array of Integers\nInteger[] numbers = {1, 2, 3};\n\n// Call the generic method with both arrays\nprintArray(names);\nprintArray(numbers);\n}\n}",
        "class Stats<T extends Number> {\nT[] nums;\n\n// Constructor\nStats(T[] nums) {\nthis.nums = nums;\n}\n\n// Calculate average\ndouble average() {\ndouble sum = 0;\nfor (T num : nums) {\nsum += num.doubleValue();\n}\nreturn sum / nums.length;\n}\n}\n\npublic class Main {\npublic static void main(String[] args) {\n// Use with Integer\nInteger[] intNums = {10, 20, 30, 40};\nStats<Integer> intStats = new Stats<>(intNums);\nSystem.out.println(\"Integer average: \" + intStats.average());\n\n// Use with Double\nDouble[] doubleNums = {1.5, 2.5, 3.5};\nStats<Double> doubleStats = new Stats<>(doubleNums);\nSystem.out.println(\"Double average: \" + doubleStats.average());\n}\n}",
        "ArrayList<String> list = new ArrayList<>();\nlist.add(\"Apple\");\nString fruit = list.get(0); // No need to cast",
        "T",
        "Box<String>",
        "String",
        "Box<Integer>",
        "Integer",
        "<T>",
        "Double",
        "printArray()",
        "extends",
        "Number",
        "int",
        ".doubleValue()",
        "double",
        "<T extends Number>",
        "Float",
        "ArrayList",
        "HashMap"
      ]
    },
    {
      "title": "Java Annotations",
      "summary": "Java Annotations\nAnnotations are special notes you add to your Java code. They start with the @ symbol.\nThey don't change how your program runs, but they give extra information to the compiler or tools.\nBuilt-in Annotations\nJava includes several built-in annotations. Here are some of the most commonly used:\n@Override Annotation\nThe @Override annotation helps the compiler check that a method really overrides a method from a superclass.\nIt's not required, but it's highly recommended because it helps catch errors.\nIn this example, we clearly indicate that we are overriding a method:\nExampleGet your own Java Server\nTry it Yourself »\nIf you accidentally write the wrong method name (e.g. makesound()), the compiler will show an error like:\nExample\nResult:\nTry it Yourself »\nThat's the power of @Override - it prevents silent mistakes.\nIf you try to remove the @Override line in the example above, the compiler won't warn you, and the method won't override anything. Your program may still run, but it could behave unexpectedly because the intended method was never actually overridden.\n@Deprecated Annotation\nThe @Deprecated annotation warns developers not to use a method because it may be removed or replaced in the future:\nExample\nTry it Yourself »\nEven though the method runs and prints the message, most IDEs or compilers will show a warning like this:\n@SuppressWarnings Annotation\nThe @SuppressWarnings annotation tells the compiler to ignore specific warnings, like \"unchecked\" or \"deprecation\":\nResult:\nTry it Yourself »\nUsing raw types like ArrayList without specifying a type (e.g. ArrayList<String>) usually causes an \"unchecked\" warning.\nThe annotation @SuppressWarnings(\"unchecked\") tells the compiler to ignore that warning. This is useful when working with old code or when you're sure the operation is safe.\nHowever, instead of hiding the warning, you can fix it like this:\nThis approach is type-safe and avoids the need for suppression.",
      "examples": [
        "class Animal {\nvoid makeSound() {\nSystem.out.println(\"Animal sound\");\n}\n}\n\nclass Dog extends Animal {\n@Override\nvoid makeSound() {\nSystem.out.println(\"Woof!\");\n}\n}",
        "class Animal {\nvoid makeSound() {\nSystem.out.println(\"Animal sound\");\n}\n}\n\nclass Dog extends Animal {\n@Override\nvoid makesound() { // Typo here!\nSystem.out.println(\"Woof!\");\n}\n}\n\npublic class Main {\npublic static void main(String[] args) {\nAnimal myDog = new Dog();\nmyDog.makeSound();\n}\n}",
        "public class Main {\n@Deprecated\nstatic void oldMethod() {\nSystem.out.println(\"This method is outdated.\");\n}\n\npublic static void main(String[] args) {\noldMethod(); // This will show a warning in most IDEs\n}\n}",
        "import java.util.ArrayList;\n\npublic class Main {\n@SuppressWarnings(\"unchecked\")\npublic static void main(String[] args) {\nArrayList cars = new ArrayList();\ncars.add(\"Volvo\");\nSystem.out.println(cars);\n}\n}",
        "ArrayList<String> cars = new ArrayList<>();",
        "@",
        "@Override",
        "@Deprecated",
        "@SuppressWarnings",
        "makesound()",
        "Main.java:8: error: method does not override or implement a method from a supertype\n@Override\n^\n1 error",
        "warning: [deprecation] oldMethod() in Main has been deprecated",
        "[Volvo]",
        "ArrayList",
        "ArrayList<String>",
        "@SuppressWarnings(\"unchecked\")"
      ]
    },
    {
      "title": "Java Regular Expressions",
      "summary": "What is a Regular Expression?\nA regular expression is a sequence of characters that forms a search pattern. When you search for data in a text, you can use this search pattern to describe what you are searching for.\nA regular expression can be a single character, or a more complicated pattern.\nRegular expressions can be used to perform all types of text search and text replace operations.\nJava does not have a built-in Regular Expression class, but we can import the java.util.regex package to work with regular expressions. The package includes the following classes:\nPattern Class - Defines a pattern (to be used in a search)\nMatcher Class - Used to search for the pattern\nPatternSyntaxException Class - Indicates syntax error in a regular expression pattern\nExampleGet your own Java Server\nFind out if there are any occurrences of the word \"w3schools\" in a sentence:\nTry it Yourself »\nExample Explained\nIn this example, The word \"w3schools\" is being searched for in a sentence.\nFirst, the pattern is created using the Pattern.compile() method. The first parameter indicates which pattern is being searched for and the second parameter has a flag to indicates that the search should be case-insensitive. The second parameter is optional.\nThe matcher() method is used to search for the pattern in a string. It returns a Matcher object which contains information about the search that was performed.\nThe find() method returns true if the pattern was found in the string and false if it was not found.\nREMOVE ADS\nFlags\nFlags in the compile() method change how the search is performed. Here are a few of them:\nPattern.CASE_INSENSITIVE - The case of letters will be ignored when performing a search.\nPattern.LITERAL - Special characters in the pattern will not have any special meaning and will be treated as ordinary characters when performing a search.\nPattern.UNICODE_CASE - Use it together with the CASE_INSENSITIVE flag to also ignore the case of letters outside of the English alphabet\nRegular Expression Patterns\nThe first parameter of the Pattern.compile() method is the pattern. It describes what is being searched for.\nBrackets are used to find a range of characters:\nMetacharacters\nMetacharacters are characters with a special meaning:\nQuantifiers\nQuantifiers define quantities:",
      "examples": [
        "import java.util.regex.Matcher; import java.util.regex.Pattern; public class Main { public static void main(String[] args) { Pattern pattern = Pattern.compile(\"w3schools\", Pattern.CASE_INSENSITIVE); Matcher matcher = pattern.matcher(\"Visit W3Schools!\"); boolean matchFound = matcher.find(); if(matchFound) { System.out.println(\"Match found\"); } else { System.out.println(\"Match not found\"); } } } // Outputs Match found",
        "java.util.regex",
        "Pattern",
        "Matcher",
        "PatternSyntaxException",
        "Pattern.compile()",
        "matcher()",
        "find()",
        "compile()",
        "Pattern.CASE_INSENSITIVE",
        "Pattern.LITERAL",
        "Pattern.UNICODE_CASE",
        "CASE_INSENSITIVE"
      ]
    },
    {
      "title": "Java Threads",
      "summary": "Java Threads\nThreads allows a program to operate more efficiently by doing multiple things at the same time.\nThreads can be used to perform complicated tasks in the background without interrupting the main program.\nCreating a Thread\nThere are two ways to create a thread.\nIt can be created by extending the Thread class and overriding its run() method:\nExtend SyntaxGet your own Java Server\nAnother way to create a thread is to implement the Runnable interface:\nImplement Syntax\nRunning Threads\nIf the class extends the Thread class, the thread can be run by creating an instance of the class and call its start() method:\nExtend Example\nTry it Yourself »\nIf the class implements the Runnable interface, the thread can be run by passing an instance of the class to a Thread object's constructor and then calling the thread's start() method:\nImplement Example\nTry it Yourself »\nDifferences between \"extending\" and \"implementing\" Threads\nThe major difference is that when a class extends the Thread class, you cannot extend any other class, but by implementing the Runnable interface, it is possible to extend from another class as well, like: class MyClass extends OtherClass implements Runnable.\nConcurrency Problems\nBecause threads run at the same time as other parts of the program, there is no way to know in which order the code will run. When the threads and main program are reading and writing the same variables, the values are unpredictable. The problems that result from this are called concurrency problems.\nExample\nA code example where the value of the variable amount is unpredictable:\nTry it Yourself »\nTo avoid concurrency problems, it is best to share as few attributes between threads as possible. If attributes need to be shared, one possible solution is to use the isAlive() method of the thread to check whether the thread has finished running before using any attributes that the thread can change.\nExample\nUse isAlive() to prevent concurrency problems:\nTry it Yourself »",
      "examples": [
        "public class Main extends Thread { public void run() { System.out.println(\"This code is running in a thread\"); } }",
        "public class Main implements Runnable { public void run() { System.out.println(\"This code is running in a thread\"); } }",
        "public class Main extends Thread { public static void main(String[] args) { Main thread = new Main(); thread.start(); System.out.println(\"This code is outside of the thread\"); } public void run() { System.out.println(\"This code is running in a thread\"); } }",
        "public class Main implements Runnable { public static void main(String[] args) { Main obj = new Main(); Thread thread = new Thread(obj); thread.start(); System.out.println(\"This code is outside of the thread\"); } public void run() { System.out.println(\"This code is running in a thread\"); } }",
        "public class Main extends Thread { public static int amount = 0; public static void main(String[] args) { Main thread = new Main(); thread.start(); System.out.println(amount); amount++; System.out.println(amount); } public void run() { amount++; } }",
        "public class Main extends Thread { public static int amount = 0; public static void main(String[] args) { Main thread = new Main(); thread.start(); // Wait for the thread to finish while(thread.isAlive()) { System.out.println(\"Waiting...\"); } // Update amount and print its value System.out.println(\"Main: \" + amount); amount++; System.out.println(\"Main: \" + amount); } public void run() { amount++; } }",
        "Thread",
        "run()",
        "public class Main extends Thread { public void run() { System.out.println(\"This code is running in a thread\");",
        "Runnable",
        "start()",
        "MyClass extends OtherClass implements Runnable",
        "public class Main extends Thread { public static int amount = 0; public static void main(String[] args) { Main thread = new Main(); thread.start(); System.out.println(amount); amount++; System.out.println(amount);",
        "public void run() { amount++;",
        "isAlive()",
        "public class Main extends Thread { public static int amount = 0; public static void main(String[] args) { Main thread = new Main(); thread.start(); // Wait for the thread to finish while(thread.isAlive()) { System.out.println(\"Waiting...\");",
        "// Update amount and print its value System.out.println(\"Main: \" + amount); amount++; System.out.println(\"Main: \" + amount);"
      ]
    },
    {
      "title": "Java Lambda Expressions",
      "summary": "Java Lambda Expressions\nLambda Expressions were added in Java 8.\nA lambda expression is a short block of code that takes in parameters and returns a value. Lambdas look similar to methods, but they do not need a name, and they can be written right inside a method body.\nSyntax\nThe simplest lambda expression contains a single parameter and an expression:\nTo use more than one parameter, wrap them in parentheses:\nSimple expressions must return a value immediately. They cannot contain multiple statements, such as loops or if conditions. To do more complex work, use a code block with curly braces. If the lambda should return a value, use the return keyword:\nUsing Lambda Expressions\nLambdas are often passed as arguments to methods. For example, you can use a lambda in the forEach() method of an ArrayList:\nExampleGet your own Java Server\nTry it Yourself »\nREMOVE ADS\nLambdas in Variables\nA lambda expression can be stored in a variable. The variable's type must be an interface with exactly one method (a functional interface). The lambda must match that method's parameters and return type.\nJava includes many built-in functional interfaces, such as Consumer (from the java.util package) used with lists.\nExample\nTry it Yourself »\nLambdas as Method Parameters\nYou can also pass a lambda expression to a method. The method's parameter must be a functional interface. Calling the interface's method will then run the lambda expression:\nExample\nTry it Yourself »\nAnonymous Class vs. Lambda Expression\nIn Java 8+, you can often replace an anonymous class with a lambda expression - but only if the interface is a functional interface (one abstract method).\nTry it Yourself »\nTry it Yourself »\nRule of thumb: Use a lambda for short, single-method interfaces. Use an anonymous class when you need to override multiple methods, add fields, or extend a class.",
      "examples": [
        "parameter -> expression",
        "(parameter1, parameter2) -> expression",
        "(parameter1, parameter2) -> { // code block return result; }",
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<Integer> numbers = new ArrayList<Integer>(); numbers.add(5); numbers.add(9); numbers.add(8); numbers.add(1); numbers.forEach((n) -> { System.out.println(n); }); } }",
        "import java.util.ArrayList; import java.util.function.Consumer; public class Main { public static void main(String[] args) { ArrayList<Integer> numbers = new ArrayList<Integer>(); numbers.add(5); numbers.add(9); numbers.add(8); numbers.add(1); Consumer<Integer> method = (n) -> { System.out.println(n); }; numbers.forEach(method); } }",
        "interface StringFunction { String run(String str); } public class Main { public static void main(String[] args) { StringFunction exclaim = (s) -> s + \"!\"; StringFunction ask = (s) -> s + \"?\"; printFormatted(\"Hello\", exclaim); printFormatted(\"Hello\", ask); } public static void printFormatted(String str, StringFunction format) { String result = format.run(str); System.out.println(result); } }",
        "// Functional interface (one abstract method) interface Greeting { void sayHello(); } public class Main { public static void main(String[] args) { Greeting g = new Greeting() { public void sayHello() { System.out.println(\"Hello from anonymous class\"); } }; g.sayHello(); } }",
        "// Same functional interface interface Greeting { void sayHello(); } public class Main { public static void main(String[] args) { Greeting g = () -> System.out.println(\"Hello from lambda\"); g.sayHello(); } }",
        "if",
        "return",
        "forEach()",
        "ArrayList",
        "Consumer",
        "java.util",
        "lambda"
      ]
    },
    {
      "title": "Java Advanced Sorting (Comparator and Comparable)",
      "summary": "Java Advanced Sorting\nIn the List Sorting Chapter, you learned how to sort lists alphabetically and numerically, but what if the list has objects in it?\nTo sort objects you need to specify a rule that decides how objects should be sorted. For example, if you have a list of cars you might want to sort them by year, the rule could be that cars with an earlier year go first.\nThe Comparator and Comparable interfaces allow you to specify what rule is used to sort objects.\nBeing able to specify a sorting rule also allows you to change how strings and numbers are sorted.\nComparators\nAn object that implements the Comparator interface is called a comparator.\nThe Comparator interface allows you to create a class with a compare() method that compares two objects to decide which one should go first in a list.\nThe compare() method should return a number which is:\nNegative if the first object should go first in a list.\nPositive if the second object should go first in a list.\nZero if the order does not matter.\nA class that implements the Comparator interface might look something like this:\nTo use the comparator, pass it as an argument into a sorting method:\nHere is a complete example using a comparator to sort a list of cars by year:\nExampleGet your own Java Server\nUsing a Lambda Expression\nTo make the code shorter, the comparator can be replaced with a lambda expression which has the same arguments and return value as the compare() method:\nExample\nUse a lambda expression as a comparator:\nSpecial Sorting Rules\nComparators can also be used to make special sorting rules for strings and numbers. In this example we use a comparator to list all of the even numbers before the odd ones:\nExample\nThe Comparable Interface\nThe Comparable interface allows an object to specify its own sorting rule with a compareTo() method.\nThe compareTo() method takes an object as an argument and compares the comparable with the argument to decide which one should go first in a list.\nLike the comparator, the compareTo() method returns a number which is:\nNegative if the comparable should go first in a list.\nPositive if the other object should go first in a list.\nZero if the order does not matter.\nMany native Java classes implement the Comparable interface, such as String and Integer.\nThis is why strings and numbers do not need a comparator to be sorted.\nAn object that implements the Comparable interface might look something like this:\nHere is the same example as before but using the Comparable interface instead of a comparator:\nExample\nA Common Sorting Trick\nThe most obvious way to sort two numbers naturally is to write something like this:\nBut it can actually be done with just a single line:\nThis trick can also be used to easily sort things in reverse:\nComparator vs. Comparable\nA comparator is an object with one method that is used to compare two different objects.\nA comparable is an object which can compare itself with other objects.\nIt is easier to use the Comparable interface when possible, but the Comparator interface is more powerful because it allows you to sort any kind of object even if you cannot change its code.",
      "examples": [
        "// Sort Car objects by year class SortByYear implements Comparator { public int compare(Object obj1, Object obj2) { // Make sure that the objects are Car objects Car a = (Car) obj1; Car b = (Car) obj2; // Compare the objects if (a.year < b.year) return -1; // The first car has a smaller year if (a.year > b.year) return 1; // The first car has a larger year return 0; // Both cars have the same year } }",
        "// Use a comparator to sort the cars Comparator myComparator = new SortByYear(); Collections.sort(myCars, myComparator);",
        "import java.util.ArrayList; import java.util.Collections; import java.util.Comparator; // Define a Car class class Car { public String brand; public String model; public int year; public Car(String b, String m, int y) { brand = b; model = m; year = y; } } // Create a comparator class SortByYear implements Comparator { public int compare(Object obj1, Object obj2) { // Make sure that the objects are Car objects Car a = (Car) obj1; Car b = (Car) obj2; // Compare the year of both objects if (a.year < b.year) return -1; // The first car has a smaller year if (a.year > b.year) return 1; // The first car has a larger year return 0; // Both cars have the same year } } public class Main { public static void main(String[] args) { // Create a list of cars ArrayList<Car> myCars = new ArrayList<Car>(); myCars.add(new Car(\"BMW\", \"X5\", 1999)); myCars.add(new Car(\"Honda\", \"Accord\", 2006)); myCars.add(new Car(\"Ford\", \"Mustang\", 1970)); // Use a comparator to sort the cars Comparator myComparator = new SortByYear(); Collections.sort(myCars, myComparator); // Display the cars for (Car c : myCars) { System.out.println(c.brand + \" \" + c.model + \" \" + c.year); } } }",
        "Collections.sort(myCars, (obj1, obj2) -> { Car a = (Car) obj1; Car b = (Car) obj2; if (a.year < b.year) return -1; if (a.year > b.year) return 1; return 0; });",
        "import java.util.ArrayList; import java.util.Collections; import java.util.Comparator; class SortEvenFirst implements Comparator { public int compare(Object obj1, Object obj2) { // Make sure the objects are integers Integer a = (Integer)obj1; Integer b = (Integer)obj2; // Check each number to see if it is even // A number is even if the remainder when dividing by 2 is 0 boolean aIsEven = (a % 2) == 0; boolean bIsEven = (b % 2) == 0; if (aIsEven == bIsEven) { // If both numbers are even or both are odd then use normal sorting rules if (a < b) return -1; if (a > b) return 1; return 0; } else { // If a is even then it goes first, otherwise b goes first if (aIsEven) { return -1; } else { return 1; } } } } public class Main { public static void main(String[] args) { ArrayList<Integer> myNumbers = new ArrayList<Integer>(); myNumbers.add(33); myNumbers.add(15); myNumbers.add(20); myNumbers.add(34); myNumbers.add(8); myNumbers.add(12); Comparator myComparator = new SortEvenFirst(); Collections.sort(myNumbers, myComparator); for (int i : myNumbers) { System.out.println(i); } } }",
        "class Car implements Comparable { public String brand; public String model; public int year; // Decide how this object compares to other objects public int compareTo(Object obj) { Car other = (Car)obj; if(year < other.year) return -1; // This object is smaller than the other one if(year > other.year) return 1; // This object is larger than the other one return 0; // Both objects are the same } }",
        "import java.util.ArrayList; import java.util.Collections; import java.util.Comparator; // Define a Car class which is comparable class Car implements Comparable { public String brand; public String model; public int year; public Car(String b, String m, int y) { brand = b; model = m; year = y; } // Decide how this object compares to other objects public int compareTo(Object obj) { Car other = (Car)obj; if(year < other.year) return -1; // This object is smaller than the other one if(year > other.year) return 1; // This object is larger than the other one return 0; // Both objects are the same } } public class Main { public static void main(String[] args) { // Create a list of cars ArrayList<Car> myCars = new ArrayList<Car>(); myCars.add(new Car(\"BMW\", \"X5\", 1999)); myCars.add(new Car(\"Honda\", \"Accord\", 2006)); myCars.add(new Car(\"Ford\", \"Mustang\", 1970)); // Sort the cars Collections.sort(myCars); // Display the cars for (Car c : myCars) { System.out.println(c.brand + \" \" + c.model + \" \" + c.year); } } }",
        "if(a.year < b.year) return -1; // a is less than b if(a.year > b.year) return 1; // a is greater than b return 0; // a is equal to b",
        "return a.year - b.year;",
        "return b.year - a.year;",
        "Comparator",
        "Comparable",
        "compare()",
        "compareTo()",
        "String",
        "Integer"
      ]
    },
    {
      "title": "Java Projects",
      "summary": "Projects and Practical Applications\nLearn how to apply your Java knowledge to real-world projects.\nIn this section, we will build small applications using the features you've learned throughout the tutorial.\nWhy Build Projects?\nProjects are an essential part of learning Java. Start small and gradually add more features:\nUnderstand how real programs are structured\nPractice combining concepts (e.g., methods, loops, file handling)\nImprove your debugging and problem-solving skills\nPrepare for job interviews and relevant exercises\nTip: The more you build, the better you understand.\nProject Examples\nYou can start with very small projects that use simple input and output. For example, write a program that:\nAsks for your name\nAsks for your age\nPrints: Hi <name>! You will turn <age+1> next year.\nOnce you are comfortable, try slightly bigger projects that combine loops, conditions, and arrays:\nCreate a small shopping list program (store items and print them)\nGuess a Number Game\nCalculate a Student's Average\nAs your skills grow, move on to more advanced projects that use methods, classes, and file handling:\nSimple Calculator\nAddress Book\nTo-Do List\nQuiz Game\nProject: Calculate a Student's Average\nLet's create a program to calculate a student's average from multiple grades.\nThe program asks the user to enter 1 to 5 grades and calculates the average. Then it displays the average and a corresponding letter grade (A to F):\nExampleGet your own Java Server\nExample output:\nRun Example »\nKey Concepts Used: loops, methods, conditions, input handling with Scanner, and basic logic.\nPractice Challenge\nBuild your own small project. For example, write a program that:\nAsks the user to enter up to 5 items they need to buy\nStores the items in an array\nPrints the full shopping list\nCounts how many items were entered\nExtra Challenge: Add a feature that lets the user search for an item and tells them if it is in the list.\nOpen your favorite Java IDE (for example IntelliJ IDEA or VS Code) and experiment on your own!\nStart small, add one feature at a time, and test your code often.\nTip: Visit our Java How To page for step-by-step examples of common tasks you can use in your own projects.",
      "examples": [
        "import java.util.Scanner; public class Main { // Returns a letter grade based on the average static char gradeFunction(double avg) { if (avg >= 90) return 'A'; else if (avg >= 80) return 'B'; else if (avg >= 70) return 'C'; else if (avg >= 60) return 'D'; else return 'F'; } public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.print(\"How many grades (1 to 5)? \"); int count = scanner.nextInt(); // Validate the input count if (count < 1 || count > 5) { System.out.println(\"Invalid number. You must enter between 1 and 5 grades.\"); scanner.close(); return; // Exit } double sum = 0.0; // Read each grade for (int i = 1; i <= count; i++) { System.out.print(\"Enter grade \" + i + \": \"); double grade = scanner.nextDouble(); sum += grade; } double avg = sum / count; System.out.println(\"Average: \" + avg); System.out.println(\"Letter grade: \" + gradeFunction(avg)); scanner.close(); } }",
        "Hi <name>! You will turn <age+1> next year.",
        "How many grades (1 to 5)? 3\nEnter grade 1: 85\nEnter grade 2: 91\nEnter grade 3: 78\nAverage: 84.66666666666667\nLetter grade: B",
        "Scanner"
      ]
    },
    {
      "title": "Java How To's",
      "summary": "Java How To's\nThese examples show how to solve common tasks in Java.\nNumbers\nAdd Two Numbers - Add two numbers and print the result.\nSwap Two Variables - Exchange values between two variables.\nEven or Odd Number - Check if a number is even or odd.\nReverse a Number - Reverse a number.\nPositive or Negative - Check if a number is positive or negative.\nSquare Root - Find the square root of a number.\nArea of Rectangle - Calculate the area of a rectangle.\nConvert Celsius to Fahrenheit - Convert a temperature from Celsius to Fahrenheit.\nSum of Digits - Add up the digits of a number.\nArmstrong Number - Check Armstrong number.\nRandom Number - Generate a random number.\nStrings\nCount Words - Count how many words are in a sentence.\nCount Vowels in a String - Count how many vowels are in a string.\nRemove Vowels from a String - Remove vowels from a string.\nCount Digits in a String - Count digits in a string.\nReverse a String - Reverse the characters in a string.\nPalindrome Check - Check if a string is the same forward and backward.\nCheck Anagram Strings - Check if two strings contain the same characters in different order.\nConvert String to Array - Split a string into an array of words.\nRemove Whitespace - Delete spaces, tabs, and newlines from a string.\nCount Character Frequency - Count how many times each character appears in a string.\nArrays\nSum of Array Elements - Add all the elements in an array.\nFind Array Average - Calculate the average value of array elements.\nSort an Array - Sort array elements.\nFind Smallest Element - Find the lowest value in an array.\nFind Largest Element - Find the largest value in an array.\nSecond Largest Array - Find the second largest value in an array.\nMin and Max in Array - Find the minimum and maximum value in an array.\nMerge Two Arrays - Combine two arrays into one.\nRemove Duplicates - Remove duplicates from an array using a Set.\nFind Duplicates - Find duplicate elements in an array.\nShuffle an Array - Randomize the order of array elements.\nAlgorithms\nFactorial of a Number - Find the factorial of a number.\nFibonacci Sequence - Print the first 10 Fibonacci numbers.\nFind GCD - Find the Greatest Common Divisor (GCD).\nCheck Prime Number - Check if a number is prime.\nCollections\nArrayList Loop - Loop through an ArrayList.\nHashMap Loop - Loop through a HashMap.\nLoop Through an Enum - Iterate over enum values.",
      "examples": []
    },
    {
      "title": "Java How To Add Two Numbers",
      "summary": "Add Two Numbers\nLearn how to add two numbers in Java:\nExampleGet your own Java Server\nExplanation: We create two integer variables (x and y) and assign them values. The expression x + y is stored in the variable sum. Finally, we print the result with System.out.println().\nAdd Two Numbers with User Input\nLearn how to add two numbers with user input:\nExample\nExplanation: Here we use the Scanner class to read two numbers from the keyboard. The method nextInt() reads an integer from the user. We then add the two numbers together and print the result.",
      "examples": [
        "int x = 5; int y = 6; int sum = x + y; System.out.println(sum); // Print the sum of x + y",
        "import java.util.Scanner; // Import the Scanner class class MyClass { public static void main(String[] args) { int x, y, sum; Scanner myObj = new Scanner(System.in); // Create a Scanner object System.out.println(\"Type a number:\"); x = myObj.nextInt(); // Read user input System.out.println(\"Type another number:\"); y = myObj.nextInt(); // Read user input sum = x + y; // Calculate the sum of x + y System.out.println(\"Sum is: \" + sum); // Print the sum } }",
        "x",
        "y",
        "x + y",
        "sum",
        "System.out.println()",
        "Scanner",
        "nextInt()"
      ]
    },
    {
      "title": "Java How To Swap Two Variables",
      "summary": "Swap Two Variables\nExchange the values of two variables using a temporary variable:\nExampleGet your own Java Server\nTry it Yourself »\nExplanation: We save a in a temporary variable, move b into a, and then move the saved value into b.",
      "examples": [
        "int a = 5; int b = 10; int temp = a; a = b; b = temp; System.out.println(\"a = \" + a + \", b = \" + b);",
        "a",
        "b"
      ]
    },
    {
      "title": "Java How To Find Even or Odd Numbers",
      "summary": "Check Whether a Number is Even or Odd\nFind out if a number is even or odd:\nExampleGet your own Java Server\nExplanation: The operator % gives the remainder when dividing a number.\n- If number % 2 equals 0, the number divides evenly by 2, it is even.\n- Otherwise, it has a remainder, it is odd.\nRelated Pages\nJava Numbers Tutorial\nJava Operators Tutorial\nJava Math Tutorial",
      "examples": [
        "int number = 5; // Find out if the number above is even or odd if (number % 2 == 0) { System.out.println(number + \" is even.\"); } else { System.out.println(number + \" is odd.\"); }",
        "int number = 5; // Find out if the number above is even or odd if (number % 2 == 0) { System.out.println(number + \" is even.\"); } else { System.out.println(number + \" is odd.\");",
        "%",
        "number % 2",
        "0"
      ]
    },
    {
      "title": "Java How To Reverse a Number",
      "summary": "Reverse a Number\nTake an integer and print it in reverse order:\nExampleGet your own Java Server\nTry it Yourself »\nExplanation: We start with the number 1234. Inside the loop:\n- num % 10 gives us the last digit (4, then 3, then 2, then 1).\n- We add this digit to reversed, making the new number grow step by step.\n- num /= 10 removes the last digit from the original number.\nWhen the loop finishes, reversed contains 4321.",
      "examples": [
        "int num = 1234; int reversed = 0; while (num != 0) { int digit = num % 10; reversed = reversed * 10 + digit; num /= 10; } System.out.println(\"Reversed: \" + reversed);",
        "1234",
        "num % 10",
        "reversed",
        "num /= 10",
        "4321"
      ]
    },
    {
      "title": "Java How To Find Positive or Negative Numbers",
      "summary": "Find Out if a Number is Positive or Negative\nFind out if a number is positive or negative:\nExampleGet your own Java Server\nExplanation: We use simple comparisons with > and <.\n- If the number is greater than 0, it is positive.\n- If the number is less than 0, it is negative.\n- If it is neither, it must be exactly 0.\nRelated Pages\nJava If..Else Tutorial",
      "examples": [
        "int myNum = 10; // Is this a positive or negative number? if (myNum > 0) { System.out.println(\"The value is a positive number.\"); } else if (myNum < 0) { System.out.println(\"The value is a negative number.\"); } else { System.out.println(\"The value is 0.\"); }",
        "int myNum = 10; // Is this a positive or negative number? if (myNum > 0) { System.out.println(\"The value is a positive number.\"); } else if (myNum < 0) { System.out.println(\"The value is a negative number.\"); } else { System.out.println(\"The value is 0.\");",
        ">",
        "<"
      ]
    },
    {
      "title": "Java How To Find the Square Root of a Number",
      "summary": "Square Root of a Number\nYou can use Math.sqrt() to find the square root of a number:\nExampleGet your own Java Server\nFind the square root of 64:\nRelated Pages\nJava Math Tutorial\nJava Math Reference",
      "examples": [
        "Math.sqrt(64);",
        "Math.sqrt()"
      ]
    },
    {
      "title": "Java How To Get the Area of a Rectangle",
      "summary": "Area of Rectangle\nThe area of a rectangle can be found by multiplying the length of the rectangle by the width:\nExampleGet your own Java Server\nExplanation: We store the rectangle's length and width in two variables.\nThen we multiply them (length * width) to get the area.\nFinally, we print the result, which in this example is 10.",
      "examples": [
        "int length = 5; int width = 2; int area = length * width; System.out.println(\"Area of rectangle: \" + area);",
        "length * width",
        "10"
      ]
    },
    {
      "title": "Java How To - Convert Celsius to Fahrenheit",
      "summary": "Convert Celsius to Fahrenheit\nUse the formula F = C * 9/5 + 32 to convert temperatures:\nExampleGet your own Java Server\nTry it Yourself »\nExplanation: We apply the standard conversion formula. Multiplying by 9/5 and adding 32 converts Celsius into Fahrenheit.",
      "examples": [
        "double celsius = 23.5; double fahrenheit = celsius * 9 / 5 + 32; System.out.println(celsius + \"C = \" + fahrenheit + \"F\");",
        "F = C * 9/5 + 32"
      ]
    },
    {
      "title": "Java How To - Sum of Digits",
      "summary": "Sum of Digits of a Number\nAdd up all digits (e.g., 352: 3 + 5 + 2 = 10):\nExampleGet your own Java Server\nTry it Yourself »\nExplanation: We use n % 10 to extract the last digit, add it to the sum, and then remove the digit with n /= 10.",
      "examples": [
        "int n = 352; int sum = 0; while (n > 0) { sum += n % 10; n /= 10; } System.out.println(\"Sum of digits: \" + sum);",
        "n % 10",
        "n /= 10"
      ]
    },
    {
      "title": "Java How To Check Armstrong Number",
      "summary": "Check Armstrong Number\nAn Armstrong number is equal to the sum of its digits raised to the power of the number of digits (e.g. 153).\nExampleGet your own Java Server\nTry it Yourself »\nExplanation: An Armstrong number means: take each digit, raise it to the power of the number of digits, and add them together.\nFor 153 (3 digits):\n- First digit: 1³ = 1\n- Second digit: 5³ = 125\n- Third digit: 3³ = 27\nNow add them: 1 + 125 + 27 = 153.\nSince the sum is the same as the original number, 153 is an Armstrong number.",
      "examples": [
        "int num = 153; int original = num; int result = 0; int digits = String.valueOf(num).length(); while (num != 0) { int digit = num % 10; result += Math.pow(digit, digits); num /= 10; } System.out.println(original + (result == original ? \" is Armstrong\" : \" is not Armstrong\"));",
        "153",
        "1³ = 1",
        "5³ = 125",
        "3³ = 27",
        "1 + 125 + 27 = 153"
      ]
    },
    {
      "title": "Java How To Generate Random Numbers",
      "summary": "How To Generate a Random Number\nYou can use Math.random() method to generate a random number.\nMath.random() returns a random number between 0.0 (inclusive), and 1.0 (exclusive):\nExampleGet your own Java Server\nTry it Yourself »\nTo get more control over the random number, for example, if you only want a random number between 0 and 100, you can use the following formula:\nExample\nTry it Yourself »\nRelated Pages\nJava Math Tutorial\nJava Math Reference\nJava Type Casting",
      "examples": [
        "Math.random();",
        "int randomNum = (int)(Math.random() * 101); // 0 to 100",
        "Math.random()"
      ]
    },
    {
      "title": "Java How To Count Words",
      "summary": "Count Number of Words in a String\nYou can easily count the number of words in a string with the following example:\nExampleGet your own Java Server\nExplanation: The method split(\"\\\\s\") breaks the string into an array wherever it finds a space.\nIn the example, the string \"One Two Three Four\" is split into 4 words.\nThe length of that array tells us the total number of words.\nRelated Pages\nJava String Tutorial\nJava String Methods",
      "examples": [
        "String words = \"One Two Three Four\"; int countWords = words.split(\"\\\\s\").length; System.out.println(countWords);",
        "split(\"\\\\s\")",
        "\"One Two Three Four\"",
        "length"
      ]
    },
    {
      "title": "Java How To - Count Vowels in a String",
      "summary": "Count Vowels in a String\nLoop through each character and count a, e, i, o, u (case-insensitive).\nExampleGet your own Java Server\nTry it Yourself »\nExplanation: We convert the string to lowercase, loop through each character, and count whenever we see a vowel.\nGeneral Example\nThe example above checks each vowel with multiple conditions. That works fine, but if you want a more general solution, you can store the vowels in a Set and check characters against it:\nExample\nTry it Yourself »\nExplanation: We first add all vowels to a Set. Then we loop through the characters of the string (converted to lowercase). Each character is checked against the set, and if it exists, the counter goes up. This method is easier to extend if you want to count other characters (like consonants, digits, or symbols).",
      "examples": [
        "String text = \"Hello Java\"; int count = 0; for (char c : text.toLowerCase().toCharArray()) { if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') { count++; } } System.out.println(\"Vowels: \" + count);",
        "import java.util.Set; import java.util.HashSet; public class Main { public static void main(String[] args) { String text = \"Hello Java\"; Set<Character> vowels = new HashSet<>(); for (char v : new char[]{'a','e','i','o','u'}) { vowels.add(v); } int count = 0; for (char c : text.toLowerCase().toCharArray()) { if (vowels.contains(c)) { count++; } } System.out.println(\"Vowels: \" + count); } }",
        "a, e, i, o, u",
        "Set"
      ]
    },
    {
      "title": "Java How To Remove Vowels from a String",
      "summary": "Remove Vowels from a String\nDelete all vowels (a, e, i, o, u) from a string (case-insensitive).\nExampleGet your own Java Server\nTry it Yourself »\nExplanation: The regular expression [aeiouAEIOU] matches all vowels (both lowercase and uppercase). Replacing them with an empty string removes them. For \"Hello Java\", the result is \"Hll Jv\".",
      "examples": [
        "String text = \"Hello Java\"; String result = text.replaceAll(\"[aeiouAEIOU]\", \"\"); System.out.println(result);",
        "a, e, i, o, u",
        "[aeiouAEIOU]",
        "\"Hello Java\"",
        "\"Hll Jv\""
      ]
    },
    {
      "title": "Java How To Count Digits in a String",
      "summary": "Count Digits in a String\nGo through each character and count how many are digits (0-9).\nExampleGet your own Java Server\nTry it Yourself »\nExplanation: We loop through each character of the string. The method Character.isDigit() checks if the character is a digit. For the example above, the program finds 5 digits.",
      "examples": [
        "String text = \"W3Schools was founded in 1998\"; int count = 0; for (char c : text.toCharArray()) { if (Character.isDigit(c)) { count++; } } System.out.println(\"Digits: \" + count);",
        "Character.isDigit()"
      ]
    },
    {
      "title": "Java How To Reverse a String",
      "summary": "Reverse a String\nYou can easily reverse a string by characters with the following example:\nExampleGet your own Java Server\nExplanation: We start with an empty string reversedStr.\n- On each loop, we take one character from the original string using charAt().\n- Instead of adding it to the end, we place it in front of the existing reversedStr.\n- This way, the characters are built in reverse order.\nFor example, from \"Hello\" we get \"olleH\".\nRelated Pages\nJava String Tutorial\nJava String Methods",
      "examples": [
        "String originalStr = \"Hello\"; String reversedStr = \"\"; for (int i = 0; i < originalStr.length(); i++) { reversedStr = originalStr.charAt(i) + reversedStr; } System.out.println(\"Reversed string: \"+ reversedStr);",
        "reversedStr",
        "charAt()",
        "\"Hello\"",
        "\"olleH\""
      ]
    },
    {
      "title": "Java How To - Palindrome Check",
      "summary": "How To Check if a String Is a Palindrome\nLearn how to check whether a word reads the same forward and backward (like \"level\"):\nExampleGet your own Java Server\nTry it Yourself »\nExplanation: We compare the first character with the last, the second with the second-last, and so on.\n- If all pairs match, the string is a palindrome.\n- If any pair does not match, it is not a palindrome.\nFor example, in \"level\":\nl == l\ne == e\nUsing StringBuilder\nYou can also use StringBuilder, which is a special Java class that makes it easy to work with and change strings (for example, reversing them):\nExample:\nTry it Yourself »\nExplanation: We take the string text and use StringBuilder.reverse() to create its reverse. If the original and reversed strings are the same (ignoring case with equalsIgnoreCase()), then it is a palindrome.",
      "examples": [
        "String text = \"level\"; boolean isPalindrome = true; for (int i = 0; i < text.length() / 2; i++) { if (text.charAt(i) != text.charAt(text.length() - 1 - i)) { isPalindrome = false; break; } } if (isPalindrome) { System.out.println(text + \" is a palindrome\"); } else { System.out.println(text + \" is not a palindrome\"); }",
        "String text = \"level\"; String reversed = new StringBuilder(text).reverse().toString(); if (text.equalsIgnoreCase(reversed)) { System.out.println(text + \" is a palindrome\"); } else { System.out.println(text + \" is not a palindrome\"); }",
        "\"level\"",
        "l == l",
        "e == e",
        "StringBuilder",
        "text",
        "StringBuilder.reverse()",
        "equalsIgnoreCase()"
      ]
    },
    {
      "title": "Java How To Check Anagram Strings",
      "summary": "Check Anagram Strings\nTwo strings are anagrams if they contain the same characters in a different order:\nExampleGet your own Java Server\nTry it Yourself »\nExplanation: We convert both strings to arrays, sort them, and check if they are equal. If yes, the strings are anagrams.",
      "examples": [
        "import java.util.Arrays; String str1 = \"listen\"; String str2 = \"silent\"; char[] arr1 = str1.toCharArray(); char[] arr2 = str2.toCharArray(); Arrays.sort(arr1); Arrays.sort(arr2); boolean isAnagram = Arrays.equals(arr1, arr2); System.out.println(isAnagram ? \"Anagram\" : \"Not Anagram\");"
      ]
    },
    {
      "title": "Java How To Convert a String to an Array",
      "summary": "Convert a String to an Array\nThere are many ways to convert a string to an array. The simplest way is to use the toCharArray() method:\nExampleGet your own Java Server\nConvert a string to a char array:\nExplanation: The method toCharArray() turns the string into an array of characters. Each letter of \"Hello\" becomes one element in the array, so myArray[0] is H.\nYou can also loop through the array to print all array elements:\nExample\nExplanation: The loop goes through each element in the array and prints it. So for \"Hello\", it prints the letters one by one: H, e, l, l, o.\nRelated Pages\nJava Strings Tutorial\nJava Array Tutorial\nThe toCharArray() String Method",
      "examples": [
        "// Create a string String myStr = \"Hello\"; // Convert the string to a char array char[] myArray = myStr.toCharArray(); // Print the first element of the array System.out.println(myArray[0]);",
        "// Create a string String myStr = \"Hello\"; // Convert the string to a char array char[] myArray = myStr.toCharArray(); // Print array elements for (char i : myArray) { System.out.println(i); }",
        "toCharArray()",
        "char",
        "\"Hello\"",
        "myArray[0]",
        "H"
      ]
    },
    {
      "title": "Java How To - Remove Whitespace from a String",
      "summary": "Remove Whitespace from a String\nThere are two common ways to remove whitespace in Java: using trim() and using replaceAll().\nRemove Whitespace at the Beginning and End\nThe trim() method only removes whitespace from the start and end of the string.\nExampleGet your own Java Server\nTry it Yourself »\nExplanation: trim() is useful when you only want to clean up leading and trailing spaces, but it will not touch spaces inside the string.\nRemove All Whitespace\nIf you want to remove all spaces, tabs, and newlines in a string, use replaceAll() with a regular expression.\nExample\nTry it Yourself »\nExplanation: The regular expression \\\\s+ matches any whitespace character (spaces, tabs, newlines). Replacing them with an empty string removes all whitespace from the text.",
      "examples": [
        "String text = \" Java \"; String trimmed = text.trim(); System.out.println(trimmed); // \"Java\"",
        "String text = \" Java \\t is \\n fun \"; String noSpaces = text.replaceAll(\"\\\\s+\", \"\"); System.out.println(noSpaces); // \"Javaisfun\"",
        "trim()",
        "replaceAll()",
        "\\\\s+"
      ]
    },
    {
      "title": "Java How To - Character Frequency in a String",
      "summary": "How To Count Character Frequency in a String\nUse a HashMap to count how many times each character appears:\nExampleGet your own Java Server\nTry it Yourself »\nExplanation: We loop through each character in the string and use a HashMap to keep track of counts.\n- freq.getOrDefault(c, 0) means \"get the current count of this character, or 0 if it hasn't been seen yet.\"\n- We then add 1 and put the new value back in the map.\nFor the string \"banana\", the result is {a=3, b=1, n=2}.",
      "examples": [
        "import java.util.HashMap; public class Main { public static void main(String[] args) { String text = \"banana\"; HashMap<Character, Integer> freq = new HashMap<>(); for (char c : text.toCharArray()) { freq.put(c, freq.getOrDefault(c, 0) + 1); } System.out.println(freq); // Output: {a=3, b=1, n=2} } }",
        "HashMap",
        "freq.getOrDefault(c, 0)",
        "\"banana\"",
        "{a=3, b=1, n=2}"
      ]
    },
    {
      "title": "Java How To Calculate the Sum of Elements",
      "summary": "Calculate the Sum of an Array\nGet the sum of array elements:\nExampleGet your own Java Server",
      "examples": [
        "int[] myArray = {1, 5, 10, 25}; int sum = 0; int i; // Loop through the array elements and store the sum in the sum variable for (i = 0; i < myArray.length; i++) { sum += myArray[i]; } System.out.println(\"The sum is: \" + sum);",
        "int[] myArray = {1, 5, 10, 25}; int sum = 0; int i; // Loop through the array elements and store the sum in the sum variable for (i = 0; i < myArray.length; i++) { sum += myArray[i];",
        "System.out.println(\"The sum is: \" + sum);"
      ]
    },
    {
      "title": "Java How To Find the Average of Array Elements",
      "summary": "How To Calculate the Average of Array Elements\nCreate a program that calculates the average of different ages:\nExampleGet your own Java Server\nTry it Yourself »\nRelated Pages\nJava Array Tutorial",
      "examples": [
        "// An array storing different ages int ages[] = {20, 22, 18, 35, 48, 26, 87, 70}; float avg, sum = 0; // Get the length of the array int length = ages.length; // Loop through the elements of the array for (int age : ages) { sum += age; } // Calculate the average by dividing the sum by the length avg = sum / length; // Print the average System.out.println(\"The average age is: \" + avg);"
      ]
    },
    {
      "title": "Java How To Sort an Array",
      "summary": "How To Sort an Array\nYou can use the sort() method, found in java.util.Arrays, to sort an array:\nExampleGet your own Java Server\nTry it Yourself »\nRelated Pages\nJava Array Tutorial\nJava Arrays Class Reference",
      "examples": [
        "import java.util.Arrays; public class Main { public static void main(String[] args) { String[] cars = {\"Volvo\", \"BMW\", \"Tesla\", \"Ford\", \"Fiat\", \"Mazda\", \"Audi\"}; Arrays.sort(cars); for (String i : cars) { System.out.println(i); } } }",
        "sort()",
        "java.util.Arrays",
        "import java.util.Arrays; public class Main { public static void main(String[] args) { String[] cars = {\"Volvo\", \"BMW\", \"Tesla\", \"Ford\", \"Fiat\", \"Mazda\", \"Audi\"}; Arrays.sort(cars); for (String i : cars) { System.out.println(i);"
      ]
    },
    {
      "title": "Java How To - Smallest Element in an Array",
      "summary": "How To Find the Smallest Element in an Array\nCreate a program that finds the lowest age among different ages:\nExampleGet your own Java Server\nTry it Yourself »\nRelated Pages\nJava Array Tutorial",
      "examples": [
        "// An array storing different ages int ages[] = {20, 22, 18, 35, 48, 26, 87, 70}; // Create a 'lowest age' variable and assign the first array element of ages to it int lowestAge = ages[0]; // Loop through the elements of the ages array to find the lowest age for (int age : ages) { // Check if the current age is smaller than the current 'lowest age' if (lowestAge > age) { // If the smaller age is found, update 'lowest age' with that element lowestAge = age; } } // Output the value of the lowest age System.out.println(\"The lowest age in the array is: \" + lowestAge);"
      ]
    },
    {
      "title": "Java How To - Largest Element in an Array",
      "summary": "Find the Largest Element in an Array\nScan the array and keep track of the biggest value found so far:\nExampleGet your own Java Server\nTry it Yourself »\nExplanation: We start by assuming the first element is the largest. Then we loop through the array and update the variable whenever we find a bigger value.",
      "examples": [
        "int[] nums = {12, 7, 25, 3, 18}; int largest = nums[0]; for (int n : nums) { if (n > largest) { largest = n; } } System.out.println(\"Largest element: \" + largest);"
      ]
    },
    {
      "title": "Java How To - Second Largest Array Element",
      "summary": "How To Find the Second Largest Element in an Array\nFind the second highest number without sorting the whole array:\nExampleGet your own Java Server\nTry it Yourself »",
      "examples": [
        "int[] nums = {12, 5, 9, 21, 21, 7}; Integer first = null, second = null; for (int n : nums) { if (first == null || n > first) { second = first; first = n; } else if ((second == null || n > second) && n != first) { second = n; } } if (second != null) { System.out.println(\"Second largest: \" + second); } else { System.out.println(\"No distinct second largest value.\"); }"
      ]
    },
    {
      "title": "Java How To Find Min and Max in Array",
      "summary": "Find the Minimum and Maximum Element in an Array\nGo through the array and keep track of the highest and lowest values:\nExampleGet your own Java Server\nTry it Yourself »\nExplanation: Start by assuming the first element is both the maximum and minimum. As you loop through the array, update max if you find a larger number and min if you find a smaller number.",
      "examples": [
        "int[] numbers = {45, 12, 98, 33, 27}; int max = numbers[0]; int min = numbers[0]; for (int n : numbers) { if (n > max) { max = n; } if (n < min) { min = n; } } System.out.println(\"Max: \" + max); System.out.println(\"Min: \" + min);",
        "max",
        "min"
      ]
    },
    {
      "title": "Java How To - Merge Two Arrays",
      "summary": "How To Merge Two Arrays\nCombine two int arrays into a single array:\nExampleGet your own Java Server\nTry it Yourself »",
      "examples": [
        "int[] a = {1, 2, 3}; int[] b = {4, 5}; int[] merged = new int[a.length + b.length]; int idx = 0; for (int n : a) merged[idx++] = n; for (int n : b) merged[idx++] = n; for (int n : merged) { System.out.print(n + \" \"); } // Output: 1 2 3 4 5",
        "int"
      ]
    },
    {
      "title": "Java How To - Remove Duplicates from an Array",
      "summary": "How To Remove Duplicates from an Array\nConvert an array into a Set to remove duplicates:\nExampleGet your own Java Server\nTry it Yourself »",
      "examples": [
        "import java.util.Arrays; import java.util.HashSet; import java.util.Set; public class Main { public static void main(String[] args) { Integer[] numbers = {1, 2, 2, 3, 4, 4, 5}; Set<Integer> unique = new HashSet<>(Arrays.asList(numbers)); System.out.println(unique); } }",
        "Set"
      ]
    },
    {
      "title": "Java How To Find Duplicates in an Array",
      "summary": "Find Duplicate Elements in an Array\nPrint which elements appear more than once:\nExampleGet your own Java Server\nTry it Yourself »\nExplanation: We go through the array one element at a time.\n- The outer loop picks a number (like the first 1).\n- The inner loop compares it with all the numbers that come after it.\n- If a match is found, we print it as a duplicate.\nIn this example, the program finds 2 twice and 1 twice, so it prints them as duplicates.",
      "examples": [
        "int[] nums = {1, 2, 3, 2, 4, 5, 1}; for (int i = 0; i < nums.length; i++) { for (int j = i + 1; j < nums.length; j++) { if (nums[i] == nums[j]) { System.out.println(\"Duplicate: \" + nums[i]); } } }",
        "1",
        "2"
      ]
    },
    {
      "title": "Java How To - Shuffle an Array",
      "summary": "How To Shuffle an Array\nRandomly change the order of elements in an array using Collections.shuffle():\nExampleGet your own Java Server\nTry it Yourself »",
      "examples": [
        "import java.util.Arrays; import java.util.Collections; import java.util.List; public class Main { public static void main(String[] args) { String[] fruits = {\"Apple\", \"Banana\", \"Cherry\", \"Mango\"}; List<String> list = Arrays.asList(fruits); Collections.shuffle(list); System.out.println(list); } }",
        "Collections.shuffle()"
      ]
    },
    {
      "title": "Java How To - Calculate Factorial of a Number",
      "summary": "How To Calculate Factorial of a Number\nUse a loop to calculate the factorial of a given number:\nExampleGet your own Java Server\nTry it Yourself »",
      "examples": [
        "int n = 5; int fact = 1; for (int i = 1; i <= n; i++) { fact *= i; } System.out.println(\"Factorial of \" + n + \" is \" + fact); // Output: Factorial of 5 is 120"
      ]
    },
    {
      "title": "Java How To - Fibonacci Sequence",
      "summary": "How To Generate Fibonacci Sequence\nPrint the first 10 numbers of the Fibonacci sequence:\nExampleGet your own Java Server\nTry it Yourself »",
      "examples": [
        "int n1 = 0, n2 = 1, count = 10; System.out.print(\"Fibonacci: \" + n1 + \" \" + n2); for (int i = 2; i < count; i++) { int n3 = n1 + n2; System.out.print(\" \" + n3); n1 = n2; n2 = n3; } // Output: Fibonacci: 0 1 1 2 3 5 8 13 21 34"
      ]
    },
    {
      "title": "Java How To Find the GCD",
      "summary": "Find the Greatest Common Divisor (GCD)\nThe GCD (Greatest Common Divisor) is the largest number that divides two numbers without leaving a remainder.\nExampleGet your own Java Server\nTry it Yourself »\nExplanation:\nWe want the largest number that divides both 36 and 60 without a remainder.\nThe loop starts at 1 and goes up to the smaller number (36).\nAt each step, we check if i divides both numbers (using %, the remainder operator).\nIf it does, we update gcd to that value.\nFor example:\n36 % 12 == 0 and 60 % 12 == 0, so 12 is a divisor of both.\nLater, the loop finds gcd = 12 as the largest common divisor.\nSo the program prints GCD: 12.",
      "examples": [
        "int a = 36; int b = 60; int gcd = 1; for (int i = 1; i <= a && i <= b; i++) { if (a % i == 0 && b % i == 0) { gcd = i; } } System.out.println(\"GCD: \" + gcd);",
        "36",
        "60",
        "1",
        "i",
        "%",
        "gcd",
        "36 % 12 == 0",
        "60 % 12 == 0",
        "gcd = 12",
        "GCD: 12"
      ]
    },
    {
      "title": "Java How To - Check if a Number Is Prime",
      "summary": "Check if a Number Is Prime\nA prime number is only divisible by 1 and itself.\nTo test if a number is prime, we try dividing it by every number from 2 up to its square root:\nExampleGet your own Java Server\nTry it Yourself »\nExplanation: We start with the number 29. Since 29 is greater than 1, the loop checks if it can be divided evenly by any number from 2 up to the square root of 29 (about 5.38). The numbers 2, 3, 4, and 5 do not divide 29 without a remainder, so the program concludes that 29 is prime.",
      "examples": [
        "int n = 29; // Number used to check boolean isPrime = n > 1; for (int i = 2; i * i <= n; i++) { if (n % i == 0) { isPrime = false; break; } } System.out.println(n + (isPrime ? \" is prime\" : \" is not prime\"));",
        "29"
      ]
    },
    {
      "title": "Java How To Loop Through an ArrayList",
      "summary": "Loop Through an ArrayList\nLoop through the elements of an ArrayList:\nExampleGet your own Java Server\nTry it Yourself »\nRelated Pages\nJava ArrayList Tutorial\nJava ArrayList Methods",
      "examples": [
        "public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); for (String i : cars) { System.out.println(i); } } }",
        "ArrayList"
      ]
    },
    {
      "title": "Java How To Loop Through a HashMap",
      "summary": "Loop Through a HashMap\nLoop through the items of a HashMap with a for-each loop.\nNote: Use the keySet() method if you only want the keys, and use the values() method if you only want the values:\nExampleGet your own Java Server\nTry it Yourself »\nExample\nTry it Yourself »\nExample\nTry it Yourself »\nRelated Pages\nJava HashMap Tutorial\nJava HashMap Methods",
      "examples": [
        "// Print keys for (String i : capitalCities.keySet()) { System.out.println(i); }",
        "// Print values for (String i : capitalCities.values()) { System.out.println(i); }",
        "// Print keys and values for (String i : capitalCities.keySet()) { System.out.println(\"key: \" + i + \" value: \" + capitalCities.get(i)); }",
        "HashMap",
        "keySet()",
        "values()"
      ]
    },
    {
      "title": "Java How To Loop Through an Enum",
      "summary": "Loop Through an Enum\nThe enum type has a values() method, which returns an array of all enum constants. This method is useful when you want to loop through the constants of an enum:\nExampleGet your own Java Server\nRelated Pages\nJava Enums Tutorial",
      "examples": [
        "enum Level { LOW, MEDIUM, HIGH } public class Main { public static void main(String[] args) { for (Level myVar : Level.values()) { System.out.println(myVar); } } }",
        "values()"
      ]
    },
    {
      "title": "Java Reference Documentation",
      "summary": "This section contains a Java reference documentation.\nJava Reference\nA list of Java keywords and methods can be found here:",
      "examples": []
    },
    {
      "title": "Java Keywords",
      "summary": "Java Reserved Keywords\nJava has a set of keywords that are reserved words that cannot be used as variables, methods, classes, or any other identifiers:\nNote: true, false, and null are not keywords, but they are literals and reserved words that cannot be used as identifiers.",
      "examples": [
        "true",
        "false",
        "null"
      ]
    },
    {
      "title": "Java assert Keyword",
      "summary": "❮ Java Keywords\nExample Get your own Java Server\nUse assert to test the truth value of expressions:\nTry it Yourself »\nDefinition and Usage\nThe assert keyword evaluates a boolean expression and throws an AssertionError exception if the expression evaluates to false. When the exception is thrown we say that the assertion failed.\nAn optional expression can be added which will be used as the exception message if the assertion fails.\nAssertions are disabled by default. assert statements are ignored unless assertions are enabled.\nThe purpose of assertions is to clearly mark where a program is doing something unintended when debugging and testing a program.\n❮ Java Keywords",
      "examples": [
        "public class Main { public static void main(String[] args) { // Enable assertions ClassLoader loader = ClassLoader.getSystemClassLoader(); loader.setDefaultAssertionStatus(true); // Run the assert example AssertExample example = new AssertExample(); example.run(); } } class AssertExample { public void run() { int a = 12; try { assert a == 12; // Assertion without a fail message assert a == 12 : \"a is not 12\"; assert a == 15 : \"a is not 15\"; } catch (AssertionError e) { System.out.println(e.getMessage()); } } }",
        "assert",
        "AssertionError",
        "false"
      ]
    },
    {
      "title": "Java abstract Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nAn abstract method belongs to an abstract class, and it does not have a body. The body is provided by the subclass:\nTry it Yourself »\nDefinition and Usage\nThe abstract keyword is a non-access modifier, used for classes and methods.\nClass: An abstract class is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).\nMethod: An abstract method can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from).\nRelated Pages\nRead more about modifiers in our Java Modifiers Tutorial.\n❮ Java Keywords",
      "examples": [
        "// Code from filename: Main.java // abstract class\nabstract class Main { public String fname = \"John\"; public int age = 24; public abstract void study(); // abstract method } // Subclass (inherit from Main) class Student extends Main { public int graduationYear = 2018; public void study() { // the body of the abstract method is provided here System.out.println(\"Studying all day long\"); } } // End code from filename: Main.java // Code from filename: Second.java class Second { public static void main(String[] args) { // create an object of the Student class (which inherits attributes and methods from Main) Student myObj = new Student(); System.out.println(\"Name: \" + myObj.fname); System.out.println(\"Age: \" + myObj.age); System.out.println(\"Graduation Year: \" + myObj.graduationYear); myObj.study(); // call abstract method } }",
        "abstract"
      ]
    },
    {
      "title": "Java boolean Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nA boolean data type with true or false values:\nTry it Yourself »\nDefinition and Usage\nThe boolean keyword is a data type that can only take the values true or false.\nBoolean values are mostly used for conditional testing (read the Java Booleans Tutorial for more information).\nRelated Pages\nRead more about data types in our Java Data Types Tutorial.\nRead more about booleans in our Java Booleans Tutorial.\n❮ Java Keywords",
      "examples": [
        "boolean isJavaFun = true; boolean isFishTasty = false; System.out.println(isJavaFun); // Outputs true System.out.println(isFishTasty); // Outputs false",
        "boolean",
        "true",
        "false"
      ]
    },
    {
      "title": "Java break Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nEnd the loop when i is equal to 4:\nTry it Yourself »\nDefinition and Usage\nThe break keyword is used to break out a for loop, a while loop or a switch block.\nMore Examples\nExample\nBreak out of a while loop:\nTry it Yourself »\nRelated Pages\nUse the continue keyword to end the current iteration in a loop, but continue with the next.\nRead more about for loops in our Java For Loops Tutorial.\nRead more about while loops in our Java While Loops Tutorial.\nRead more about break and continue in our Java Break Tutorial.\n❮ Java Keywords",
      "examples": [
        "for (int i = 0; i < 10; i++) { if (i == 4) { break; } System.out.println(i); }",
        "int i = 0;\nwhile (i < 10) { System.out.println(i); i++; if (i == 4) { break; } }",
        "i",
        "break",
        "for",
        "while",
        "switch",
        "continue"
      ]
    },
    {
      "title": "Java byte Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nTry it Yourself »\nDefinition and Usage\nThe byte keyword is a data type that can store whole numbers from -128 to 127.\nRelated Pages\nRead more about data types in our Java Data Types Tutorial.\n❮ Java Keywords",
      "examples": [
        "byte myNum = 100; System.out.println(myNum);",
        "byte"
      ]
    },
    {
      "title": "Java case Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nCalculate the weekday name:\nTry it Yourself »\nDefinition and Usage\nThe case keyword marks a block of code in a switch statement.\nRelated Pages\nRead more about the switch statement in our Java Switch Tutorial.\n❮ Java Keywords",
      "examples": [
        "int day = 4; switch (day) { case 1: System.out.println(\"Monday\"); break; case 2: System.out.println(\"Tuesday\"); break; case 3: System.out.println(\"Wednesday\"); break; case 4: System.out.println(\"Thursday\"); break; case 5: System.out.println(\"Friday\"); break; case 6: System.out.println(\"Saturday\"); break; case 7: System.out.println(\"Sunday\"); break; } // Outputs \"Thursday\" (day 4)",
        "case",
        "switch"
      ]
    },
    {
      "title": "Java catch Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nIf an error occur, use try...catch to catch the error and execute some code to handle it:\nTry it Yourself »\nDefinition and Usage\nThe catch keyword catches exceptions generated by try statements.\nThe catch statement allows you to define a block of code to be executed, if an error occurs in the try block.\nRelated Pages\nRead more about exceptions in our Java Try..Catch Tutorial.\n❮ Java Keywords",
      "examples": [
        "try { int[] myNumbers = {1, 2, 3}; System.out.println(myNumbers[10]); } catch (Exception e) { System.out.println(\"Something went wrong.\"); }",
        "catch",
        "try"
      ]
    },
    {
      "title": "Java char Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nTry it Yourself »\nDefinition and Usage\nThe char keyword is a data type that is used to store a single character.\nA char value must be surrounded by single quotes, like 'A' or 'c'.\nRelated Pages\nRead more about data types in our Java Data Types Tutorial.\n❮ Java Keywords",
      "examples": [
        "char myGrade = 'B'; System.out.println(myGrade);",
        "char"
      ]
    },
    {
      "title": "Java class Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nCreate a class named \"Main\":\nTry it Yourself »\nDefinition and Usage\nThe class keyword is used to create a class.\nEvery line of code that runs in Java must be inside a class. A class should always start with an uppercase first letter, and the name of the java file must match the class name.\nA class is like an object constructor. See the example below to see how we can use it to create an object.\nMore Examples\nExample\nCreate an object of Main called \"myObj\" and print the value of x:\nTry it Yourself »\nRelated Pages\nRead more about classes and objects in our Java Classes/Objects Tutorial.\n❮ Java Keywords",
      "examples": [
        "public class Main { public static void main(String[] args) { System.out.println(\"Hello World\"); } }",
        "public class Main { int x = 5; public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj.x); } }",
        "class",
        "Main",
        "myObj"
      ]
    },
    {
      "title": "Java continue Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nSkip the iteration if the variable i is 4, but continue with the next iteration:\nTry it Yourself »\nDefinition and Usage\nThe continue keyword is used to end the current iteration in a for loop (or a while loop), and continues to the next iteration.\nMore Examples\nExample\nUse the continue keyword in a while loop\nTry it Yourself »\nRelated Pages\nUse the break keyword to break out of a loop.\nRead more about for loops in our Java For Loops Tutorial.\nRead more about while loops in our Java While Loops Tutorial.\nRead more about break and continue in our Java Break Tutorial.\n❮ Java Keywords",
      "examples": [
        "for (int i = 0; i < 10; i++) { if (i == 4) { continue; } System.out.println(i); }",
        "int i = 0;\nwhile (i < 10) { if (i == 4) { i++; continue; } System.out.println(i); i++; }",
        "i",
        "continue",
        "for",
        "while",
        "break"
      ]
    },
    {
      "title": "Java default Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nSpecify some code to run if there is no case match in a switch block:\nTry it Yourself »\nDefinition and Usage\nThe default keyword specifies the default block of code in a switch statement.\nThe default keyword specifies some code to run if there is no case match in the switch.\nNote: if the default keyword is used as the last statement in a switch block, it does not need a break.\nRelated Pages\nRead more about the switch statement in our Java Switch Tutorial.\n❮ Java Keywords",
      "examples": [
        "int day = 4; switch (day) { case 6: System.out.println(\"Today is Saturday\"); break; case 7: System.out.println(\"Today is Sunday\"); break; default: System.out.println(\"Looking forward to the Weekend\"); } / Outputs \"Looking forward to the Weekend\"",
        "default",
        "switch",
        "break"
      ]
    },
    {
      "title": "Java do Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nThe following loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested:\nTry it Yourself »\nDefinition and Usage\nThe do keyword is used together with while to create a do-while loop.\nThe while loop loops through a block of code as long as a specified condition is true:\nThe do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.\nNote: Do not forget to increase the variable used in the condition, otherwise the loop will never end!\nRelated Pages\nRead more about while loops in our Java While Loop Tutorial.\n❮ Java Keywords",
      "examples": [
        "int i = 0; do { System.out.println(i); i++; } while (i < 5);",
        "do",
        "while",
        "true",
        "do/while"
      ]
    },
    {
      "title": "Java double Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nTry it Yourself »\nDefinition and Usage\nThe double keyword is a data type that can store fractional numbers from 1.7e−308 to 1.7e+308.\nNote that you should end the value with a \"d\":\nRelated Pages\nRead more about data types in our Java Data Types Tutorial.\n❮ Java Keywords",
      "examples": [
        "double myNum = 19.99d; System.out.println(myNum);",
        "double"
      ]
    },
    {
      "title": "Java else Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nUse the else statement to specify a block of code to be executed if the condition is false.\nTry it Yourself »\nDefinition and Usage\nThe else statement specifies a block of Java code to be executed if a condition is false in an if statement.\nJava has the following conditional statements:\nUse if to specify a block of code to be executed, if a specified condition is true\nUse else to specify a block of code to be executed, if the same condition is false\nUse else if to specify a new condition to test, if the first condition is false\nUse switch to specify many alternative blocks of code to be executed\nMore Examples\nExample\nUse the else if statement to specify a new condition if the first condition is false.\nTry it Yourself »\nRelated Pages\nRead more about conditions in our Java If...Else Tutorial.\n❮ Java Keywords",
      "examples": [
        "int time = 20; if (time < 18) { System.out.println(\"Good day.\"); } else { System.out.println(\"Good evening.\"); } // Outputs \"Good evening.\"",
        "int time = 22; if (time < 10) { System.out.println(\"Good morning.\"); } else if (time < 20) { System.out.println(\"Good day.\"); } else { System.out.println(\"Good evening.\"); } // Outputs \"Good evening.\"",
        "else",
        "false",
        "if",
        "else if",
        "switch"
      ]
    },
    {
      "title": "Java enum Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nCreate an enum with constants (unchangeable variables):\nYou can access enum constants with the dot syntax:\nDefinition and Usage\nThe enum keyword declares an enumerated (unchangeable) type.\nAn enum is a special \"class\" that represents a group of constants (unchangeable variables, like final variables).\nTo create an enum, use the enum keyword (instead of class or interface), and separate the constants with a comma. Note that they should be in uppercase letters.\nAn enum can, just like a class, have attributes and methods. The only difference is that enum constants are public, static and final (unchangeable - cannot be overridden).\nAn enum cannot be used to create objects, and it can not extend other classes (but it can implement interfaces).\nUse enums when you have values that you know aren't going to change, like month days, days, colors, deck of cards, etc.\nRelated Pages\nRead more about enums in our Java Enum Tutorial.\n❮ Java Keywords",
      "examples": [
        "enum Level { LOW, MEDIUM, HIGH }",
        "Level myVar = Level.MEDIUM;",
        "enum",
        "class",
        "public",
        "static",
        "final"
      ]
    },
    {
      "title": "Java exports Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nUse exports in a module's module-info.java file:\nDefinition and Usage\nThe exports keyword allows a package from a module to be used by other modules.\nIf the to keyword is added, the exported package is only allowed to be used by the modules that are listed.\nNote: The exports keyword is a module directive meant to be used in the module-info.java file of a module.\nThe exports keyword was new in Java 9.\n❮ Java Keywords",
      "examples": [
        "module mymodule { exports com.w3schools.package1; exports com.w3Schools.package2 to module1, module2; }",
        "exports",
        "to"
      ]
    },
    {
      "title": "Java extends Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nThe Car class (subclass) inherits the attributes and methods from the Vehicle class (superclass):\nTry it Yourself »\nDefinition and Usage\nThe extends keyword extends a class (indicates that a class is inherited from another class).\nIn Java, it is possible to inherit attributes and methods from one class to another. We group the \"inheritance concept\" into two categories:\nsubclass (child) - the class that inherits from another class\nsuperclass (parent) - the class being inherited from\nTo inherit from a class, use the extends keyword.\nRelated Pages\nRead more about inheritance in our Java Inheritance Tutorial.\n❮ Java Keywords",
      "examples": [
        "class Vehicle { protected String brand = \"Ford\"; // Vehicle attribute public void honk() { // Vehicle method System.out.println(\"Tuut, tuut!\"); } } class Car extends Vehicle { private String modelName = \"Mustang\"; // Car attribute public static void main(String[] args) { // Create a myCar object Car myCar = new Car(); // Call the honk() method (from the Vehicle class) on the myCar object myCar.honk(); // Display the value of the brand attribute (from the Vehicle class) and the value of the modelName from the Car class System.out.println(myCar.brand + \" \" + myCar.modelName); } }",
        "Car",
        "Vehicle",
        "extends"
      ]
    },
    {
      "title": "Java final Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nSet a variable to final, to prevent it from being overridden/modified:\nTry it Yourself »\nDefinition and Usage\nThe final keyword is a non-access modifier used for classes, attributes and methods, which makes them non-changeable (impossible to inherit or override).\nThe final keyword is useful when you want a variable to always store the same value, like PI (3.14159...).\nThe final keyword is called a \"modifier\". You will learn more about these in the Java Modifiers Chapter.\nRelated Pages\nRead more about attributes our Java Class Attributes Tutorial.\n❮ Java Keywords",
      "examples": [
        "public class Main { final int x = 10; public static void main(String[] args) { Main myObj = new Main(); myObj.x = 25; // will generate an error: cannot assign a value to a final variable System.out.println(myObj.x); } }",
        "final"
      ]
    },
    {
      "title": "Java finally Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nExecute code, after try...catch, regardless of the result:\nTry it Yourself »\nDefinition and Usage\nThe finally keyword is used to execute code (used with exceptions - try..catch statements) no matter if there is an exception or not.\nRelated Pages\nRead more about exceptions in our Java Try..Catch Tutorial.\n❮ Java Keywords",
      "examples": [
        "try { int[] myNumbers = {1, 2, 3}; System.out.println(myNumbers[10]); } catch (Exception e) { System.out.println(\"Something went wrong.\"); } finally { System.out.println(\"The 'try catch' is finished.\"); }",
        "finally"
      ]
    },
    {
      "title": "Java float Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nTry it Yourself »\nDefinition and Usage\nThe float keyword is a data type that can store fractional numbers from 3.4e−038 to 3.4e+038.\nNote that you should end the value with an \"f\":\nRelated Pages\nRead more about data types in our Java Data Types Tutorial.\n❮ Java Keywords",
      "examples": [
        "float myNum = 5.75f; System.out.println(myNum);",
        "float"
      ]
    },
    {
      "title": "Java for Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nPrint the numbers 0 to 4:\nTry it Yourself »\nDefinition and Usage\nThe for loop loops through a block of code a number of times.\nFrom the example above:\nStatement 1 sets a variable before the loop starts (int i = 0).\nStatement 2 defines the condition for the loop to run (i must be less than 5). If the condition is true, the loop will start over again, if it is false, the loop will end.\nStatement 3 increases a value (i++) each time the code block in the loop has been executed.\nMore Examples\nThere is also a \"for-each\" loop, which is used exclusively to loop through elements in an array:\nThe following example outputs all elements in the cars array, using a \"for-each\" loop:\nExample\nTry it Yourself »\nRelated Pages\nRead more about for loops in our Java For Loop Tutorial.\n❮ Java Keywords",
      "examples": [
        "for (int i = 0; i < 5; i++) { System.out.println(i); }",
        "String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; for (String i : cars) { System.out.println(i); }",
        "for"
      ]
    },
    {
      "title": "Java if Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nTest two values to find out if 20 is greater than 18. If the condition is true, print some text:\nTry it Yourself »\nDefinition and Usage\nThe if statement specifies a block of Java code to be executed if a condition is true.\nJava has the following conditional statements:\nUse if to specify a block of code to be executed, if a specified condition is true\nUse else to specify a block of code to be executed, if the same condition is false\nUse else if to specify a new condition to test, if the first condition is false\nUse switch to specify many alternative blocks of code to be executed\nMore Examples\nExample\nUse the if statement to test variables:\nTry it Yourself »\nExample\nUse the else statement to specify a block of code to be executed if the condition is false.\nTry it Yourself »\nExample\nUse the else if statement to specify a new condition if the first condition is false.\nTry it Yourself »\nRelated Pages\nRead more about conditions in our Java If...Else Tutorial.\n❮ Java Keywords",
      "examples": [
        "if (20 > 18) { System.out.println(\"20 is greater than 18\"); }",
        "int x = 20; int y = 18; if (x > y) { System.out.println(\"x is greater than y\"); }",
        "int time = 20; if (time < 18) { System.out.println(\"Good day.\"); } else { System.out.println(\"Good evening.\"); } // Outputs \"Good evening.\"",
        "int time = 22; if (time < 10) { System.out.println(\"Good morning.\"); } else if (time < 20) { System.out.println(\"Good day.\"); } else { System.out.println(\"Good evening.\"); } // Outputs \"Good evening.\"",
        "true",
        "if",
        "else",
        "else if",
        "switch",
        "false"
      ]
    },
    {
      "title": "Java implements Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nAn interface is an abstract \"class\" that is used to group related methods with \"empty\" bodies:\nTo access the interface methods, the interface must be \"implemented\" (kinda like inherited) by another class with the implements keyword (instead of extends). The body of the interface method is provided by the \"implement\" class:\nTry it Yourself »\nDefinition and Usage\nThe implements keyword is used to implement an interface.\nThe interface keyword is used to declare a special type of class that only contains abstract methods.\nTo access the interface methods, the interface must be \"implemented\" (kinda like inherited) by another class with the implements keyword (instead of extends). The body of the interface method is provided by the \"implement\" class.\nIt cannot be used to create objects (in the example above, it is not possible to create an \"Animal\" object in the MyMainClass)\nInterface methods does not have a body - the body is provided by the \"implement\" class\nOn implementation of an interface, you must override all of its methods\nInterface methods are by default abstract and public\nInterface attributes are by default public, static and final\nAn interface cannot contain a constructor (as it cannot be used to create objects)\nTo achieve security - hide certain details and only show the important details of an object (interface).\nJava does not support \"multiple inheritance\" (a class can only inherit from one superclass). However, it can be achieved with interfaces, because the class can implement multiple interfaces. Note: To implement multiple interfaces, separate them with a comma (see example below).\nMultiple Interfaces\nTo implement multiple interfaces, separate them with a comma:\nExample\nTry it Yourself »\nRelated Pages\nRead more about interfaces in our Java Interface Tutorial.\n❮ Java Keywords",
      "examples": [
        "// interface interface Animal { public void animalSound(); // interface method (does not have a body) public void sleep(); // interface method (does not have a body) } // Pig \"implements\" the Animal interface class Pig implements Animal { public void animalSound() { // The body of animalSound() is provided here System.out.println(\"The pig says: wee wee\"); } public void sleep() { // The body of sleep() is provided here System.out.println(\"Zzz\"); } } class MyMainClass { public static void main(String[] args) { Pig myPig = new Pig(); // Create a Pig object myPig.animalSound(); myPig.sleep(); } }",
        "interface FirstInterface { public void myMethod(); // interface method } interface SecondInterface { public void myOtherMethod(); // interface method } // DemoClass \"implements\" FirstInterface and SecondInterface class DemoClass implements FirstInterface, SecondInterface { public void myMethod() { System.out.println(\"Some text..\"); } public void myOtherMethod() { System.out.println(\"Some other text...\"); } } class MyMainClass { public static void main(String[] args) { DemoClass myObj = new DemoClass(); myObj.myMethod(); myObj.myOtherMethod(); } }",
        "interface",
        "implements",
        "extends",
        "abstract",
        "public",
        "static",
        "final"
      ]
    },
    {
      "title": "Java import Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nImport the Scanner class from the Java API:\nRun Example »\nDefinition and Usage\nThe import keyword is used to import a package, class or interface.\nRelated Pages\nRead more about packages in our Java Packages Tutorial.\n❮ Java Keywords",
      "examples": [
        "import java.util.Scanner; class MyClass { public static void main(String[] args) { Scanner myObj = new Scanner(System.in); System.out.println(\"Enter username\"); String userName = myObj.nextLine(); System.out.println(\"Username is: \" + userName); } }",
        "Scanner",
        "import"
      ]
    },
    {
      "title": "Java instanceof Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nCheck whether an object is an instance of a specific class:\nTry it Yourself »\nDefinition and Usage\nThe instanceof keyword checks whether an object is an instance of a specific class or an interface.\nThe instanceof keyword compares the instance with type. The return value is either true or false.\nRelated Pages\nRead more about objects in our Java Classes/Objects Tutorial.\n❮ Java Keywords",
      "examples": [
        "public class Main { public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj instanceof Main); // returns true } }",
        "instanceof",
        "true",
        "false"
      ]
    },
    {
      "title": "Java int Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nTry it Yourself »\nDefinition and Usage\nThe int keyword is a data type that can store whole numbers from -2147483648 to 2147483647.\nRelated Pages\nRead more about data types in our Java Data Types Tutorial.\n❮ Java Keywords",
      "examples": [
        "int myNum = 100000; System.out.println(myNum);",
        "int"
      ]
    },
    {
      "title": "Java interface Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nAn interface is an abstract \"class\" that is used to group related methods with \"empty\" bodies:\nTo access the interface methods, the interface must be \"implemented\" (kinda like inherited) by another class with the implements keyword (instead of extends). The body of the interface method is provided by the \"implement\" class:\nTry it Yourself »\nDefinition and Usage\nThe interface keyword is used to declare a special type of class that only contains abstract methods.\nTo access the interface methods, the interface must be \"implemented\" (kinda like inherited) by another class with the implements keyword (instead of extends). The body of the interface method is provided by the \"implement\" class.\nIt cannot be used to create objects (in the example above, it is not possible to create an \"Animal\" object in the MyMainClass)\nInterface methods does not have a body - the body is provided by the \"implement\" class\nOn implementation of an interface, you must override all of its methods\nInterface methods are by default abstract and public\nInterface attributes are by default public, static and final\nAn interface cannot contain a constructor (as it cannot be used to create objects)\nTo achieve security - hide certain details and only show the important details of an object (interface).\nJava does not support \"multiple inheritance\" (a class can only inherit from one superclass). However, it can be achieved with interfaces, because the class can implement multiple interfaces. Note: To implement multiple interfaces, separate them with a comma (see example below).\nMultiple Interfaces\nTo implement multiple interfaces, separate them with a comma:\nExample\nTry it Yourself »\nRelated Pages\nRead more about interfaces in our Java Interface Tutorial.\n❮ Java Keywords",
      "examples": [
        "// interface interface Animal { public void animalSound(); // interface method (does not have a body) public void sleep(); // interface method (does not have a body) } // Pig \"implements\" the Animal interface class Pig implements Animal { public void animalSound() { // The body of animalSound() is provided here System.out.println(\"The pig says: wee wee\"); } public void sleep() { // The body of sleep() is provided here System.out.println(\"Zzz\"); } } class MyMainClass { public static void main(String[] args) { Pig myPig = new Pig(); // Create a Pig object myPig.animalSound(); myPig.sleep(); } }",
        "interface FirstInterface { public void myMethod(); // interface method } interface SecondInterface { public void myOtherMethod(); // interface method } // DemoClass \"implements\" FirstInterface and SecondInterface class DemoClass implements FirstInterface, SecondInterface { public void myMethod() { System.out.println(\"Some text..\"); } public void myOtherMethod() { System.out.println(\"Some other text...\"); } } class MyMainClass { public static void main(String[] args) { DemoClass myObj = new DemoClass(); myObj.myMethod(); myObj.myOtherMethod(); } }",
        "interface",
        "implements",
        "extends",
        "abstract",
        "public",
        "static",
        "final"
      ]
    },
    {
      "title": "Java long Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nTry it Yourself »\nDefinition and Usage\nThe long keyword is a data type that can store whole numbers from -9223372036854775808 to 9223372036854775808.\nNote that you should end the value with an \"L\":\nRelated Pages\nRead more about data types in our Java Data Types Tutorial.\n❮ Java Keywords",
      "examples": [
        "long myNum = 15000000000L; System.out.println(myNum);",
        "long"
      ]
    },
    {
      "title": "Java module Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nDeclare a module:\nDefinition and Usage\nThe module keyword is used to declare a module. Following the keyword is the name of the module and braces which can contain directives describing the module.\nNote: The module keyword is meant to be used in the module-info.java file of a module.\nThe module keyword was new in Java 9.\n❮ Java Keywords",
      "examples": [
        "module mymodule { }",
        "module"
      ]
    },
    {
      "title": "Java native Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nLoad a method from a compiled library:\nDefinition and Usage\nThe native keyword declares a method as belonging to an external compiled library which is native to the operating system.\nIn order to use native methods, an external library must be loaded from a .dll, .so or similar kind of file. The compiled code in the external file should be written to support the Java Native Interface.\n❮ Java Keywords",
      "examples": [
        "class Main { static { System.loadLibrary(\"libraryname\"); } public static void main(String[] args) { test(); } private static native void test(); }",
        "native",
        ".dll",
        ".so"
      ]
    },
    {
      "title": "Java new Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nCreate an object called \"myObj\" and print the value of x:\nTry it Yourself »\nDefinition and Usage\nThe new keyword creates new objects.\nRelated Pages\nRead more about objects in our Java Classes/Objects Tutorial.\n❮ Java Keywords",
      "examples": [
        "public class Main { int x = 5; public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj.x); } }",
        "myObj",
        "new"
      ]
    },
    {
      "title": "Java package Keyword",
      "summary": "❮ Java Keywords\nRun Example »\nDefinition and Usage\nThe package keyword creates a package.\nRelated Pages\nRead more about packages in our Java Packages Tutorial.\n❮ Java Keywords",
      "examples": [
        "package mypack; class MyPackageClass { public static void main(String[] args) { System.out.println(\"This is my package!\"); } }",
        "package"
      ]
    },
    {
      "title": "Java private Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nA class with private attributes:\nTry it Yourself »\nDefinition and Usage\nThe private keyword is an access modifier used for attributes, methods and constructors, making them only accessible within the declared class.\nRelated Pages\nRead more about modifiers in our Java Modifiers Tutorial.\n❮ Java Keywords",
      "examples": [
        "public class Main { private String fname = \"John\"; private String lname = \"Doe\"; private String email = \"john@doe.com\"; private int age = 24; public static void main(String[] args) { Main myObj = new Main(); System.out.println(\"Name: \" + myObj.fname + \" \" + myObj.lname); System.out.println(\"Email: \" + myObj.email); System.out.println(\"Age: \" + myObj.age); } }",
        "private"
      ]
    },
    {
      "title": "Java protected Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nThe Student subclass accesses a Person class with protected attributes:\nTry it Yourself »\nDefinition and Usage\nThe protected keyword is an access modifier used for attributes, methods and constructors, making them accessible in the same package and subclasses.\nRelated Pages\nRead more about modifiers in our Java Modifiers Tutorial.\n❮ Java Keywords",
      "examples": [
        "class Person { protected String fname = \"John\"; protected String lname = \"Doe\"; protected String email = \"john@doe.com\"; protected int age = 24; } class Student extends Person { private int graduationYear = 2018; public static void main(String[] args) { Student myObj = new Student(); System.out.println(\"Name: \" + myObj.fname + \" \" + myObj.lname); System.out.println(\"Email: \" + myObj.email); System.out.println(\"Age: \" + myObj.age); System.out.println(\"Graduation Year: \" + myObj.graduationYear); } }",
        "Student",
        "Person",
        "protected"
      ]
    },
    {
      "title": "Java public Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nSecond accesses a public Main class with public attributes:\nTry it Yourself »\nDefinition and Usage\nThe public keyword is an access modifier used for classes, attributes, methods and constructors, making them accessible by any other class.\nRelated Pages\nRead more about modifiers in our Java Modifiers Tutorial.\n❮ Java Keywords",
      "examples": [
        "/* Code from filename: Main.java public class Main { public String fname = \"John\"; public String lname = \"Doe\"; public String email = \"john@doe.com\"; public int age = 24; } */ class Second { public static void main(String[] args) { Main myObj = new Main(); System.out.println(\"Name: \" + myObj.fname + \" \" + myObj.lname); System.out.println(\"Email: \" + myObj.email); System.out.println(\"Age: \" + myObj.age); } }",
        "Second",
        "public",
        "Main"
      ]
    },
    {
      "title": "Java return Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nA method with a return value:\nTry it Yourself »\nDefinition and Usage\nThe return keyword finishes the execution of a method, and can be used to return a value from a method.\nMore Examples\nTip: Use the void keyword to specify that a method should not have a return value:\nExample\nA method without any return values:\nTry it Yourself »\nRelated Pages\nRead more about methods in our Java Methods Tutorial.\n❮ Java Keywords",
      "examples": [
        "public class Main { static int myMethod(int x) { return 5 + x; } public static void main(String[] args) { System.out.println(myMethod(3)); } } // Outputs 8 (5 + 3)",
        "public class Main { static void myMethod() { System.out.println(\"I just got executed!\"); } public static void main(String[] args) { myMethod(); } }",
        "return",
        "void"
      ]
    },
    {
      "title": "Java requires Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nUse requires in a module's module-info.java file:\nDefinition and Usage\nThe requires keyword is a module directive that specifies a different module which this module depends on.\nThere are two modifiers which can be added to the requires directive: transitive and static\nThe transitive modifier allows other modules to use this module without also having to declare this same requirement.\nThe static modifier makes the requirement optional during runtime. It allows this module to run even if the other module is not present.\nNote: The requires keyword is a module directive meant to be used in the module-info.java file of a module.\nThe requires keyword was new in Java 9.\n❮ Java Keywords",
      "examples": [
        "module mymodule { requires module1; requires transitive module2; requires static module3; }",
        "requires",
        "transitive",
        "static"
      ]
    },
    {
      "title": "Java short Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nTry it Yourself »\nDefinition and Usage\nThe short keyword is a data type that can store whole numbers from -32768 to 32767.\nRelated Pages\nRead more about data types in our Java Data Types Tutorial.\n❮ Java Keywords",
      "examples": [
        "short myNum = 5000; System.out.println(myNum);",
        "short"
      ]
    },
    {
      "title": "Java static Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nA static method can be accessed without creating an object of the class first:\nTry it Yourself »\nDefinition and Usage\nThe static keyword is a non-access modifier used for methods and attributes. Static methods/attributes can be accessed without creating an object of a class.\nRelated Pages\nRead more about modifiers in our Java Modifiers Tutorial.\n❮ Java Keywords",
      "examples": [
        "public class Main { // Static method static void myStaticMethod() { System.out.println(\"Static methods can be called without creating objects\"); } // Public method public void myPublicMethod() { System.out.println(\"Public methods must be called by creating objects\"); } // Main method public static void main(String[ ] args) { myStaticMethod(); // Call the static method // myPublicMethod(); This would output an error Main myObj = new Main(); // Create an object of Main myObj.myPublicMethod(); // Call the public method } }",
        "static"
      ]
    },
    {
      "title": "Java super Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nUsing super to call the superclass of Dog (subclass):\nTry it Yourself »\nDefinition and Usage\nThe super keyword refers to superclass (parent) objects.\nIt is used to call superclass methods, and to access the superclass constructor.\nThe most common use of the super keyword is to eliminate the confusion between superclasses and subclasses that have methods with the same name.\nTo understand the super keyword, you should have a basic understanding of Inheritance and Polymorphism.\nRelated Pages\nRead more about inheritance (subclasses and superclasses) in our Java Inheritance Tutorial.\nRead more about polymorphism in our Java Polymorphism Tutorial.\n❮ Java Keywords",
      "examples": [
        "class Animal { // Superclass (parent) public void animalSound() { System.out.println(\"The animal makes a sound\"); } } class Dog extends Animal { // Subclass (child) public void animalSound() { super.animalSound(); // Call the superclass method System.out.println(\"The dog says: bow wow\"); } } public class Main { public static void main(String args[]) { Animal myDog = new Dog(); // Create a Dog object myDog.animalSound(); // Call the method on the Dog object } }",
        "super",
        "Dog"
      ]
    },
    {
      "title": "Java switch Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nUse the switch statement to calculate the weekday name:\nTry it Yourself »\nDefinition and Usage\nThe switch keyword selects one of many code blocks to be executed.\nFrom the example above, it works like this:\nThe switch expression is evaluated once.\nThe value of the expression is compared with the values of each case.\nIf there is a match, the associated block of code is executed.\nThe break keyword is used to break out of the switch block when a match is found\nRelated Pages\nRead more about the switch statement in our Java Switch Tutorial.\n❮ Java Keywords",
      "examples": [
        "int day = 4; switch (day) { case 1: System.out.println(\"Monday\"); break; case 2: System.out.println(\"Tuesday\"); break; case 3: System.out.println(\"Wednesday\"); break; case 4: System.out.println(\"Thursday\"); break; case 5: System.out.println(\"Friday\"); break; case 6: System.out.println(\"Saturday\"); break; case 7: System.out.println(\"Sunday\"); break; } // Outputs \"Thursday\" (day 4)",
        "switch",
        "case",
        "break"
      ]
    },
    {
      "title": "Java synchronized Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nUse the synchronized modifier to prevent race conditions between threads:\nTry it Yourself »\nDefinition and Usage\nThe synchronized keyword is a modifier that locks a method so that only one thread can use it at a time. This prevents problems that arise from race conditions between threads.\nIn the example above, removing the synchronized keyword from the transfer() method may cause the values of a and b to be modified by another thread in between operations. This would result in the total amount between the two variables to change.\nRelated Pages\nRead more about modifiers in our Java Modifiers Tutorial.\nRead more about threads in our Java Threads Tutorial.\n❮ Java Keywords",
      "examples": [
        "public class Main implements Runnable { public static int a, b; public static void main(String[] args) { a = 100; b = 100; // Check the total amount shared between a and b before the transfers System.out.println(\"Total before: \" + (a + b)); // Run threads which will transfer amounts between a and b Thread thread1 = new Thread(new Main()); Thread thread2 = new Thread(new Main()); thread1.start(); thread2.start(); // Wait for the threads to finish running try { thread1.join(); thread2.join(); } catch (InterruptedException e) { e.printStackTrace(); } // Check the total amount shared between a and b after the transfers // It should be the same amount as before System.out.println(\"Total after: \" + (a + b)); } public void run() { for (int i = 0; i < 10000000; i++) { transfer(); } } public static synchronized void transfer() { // Choose a random amount to transfer int amount = (int) (5.0 * Math.random()); // Transfer between a and b if (a > b) { a -= amount; b += amount; } else { a += amount; b -= amount; } } }",
        "synchronized",
        "transfer()",
        "a",
        "b"
      ]
    },
    {
      "title": "Java this Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nUsing this with a class attribute (x):\nTry it Yourself »\nDefinition and Usage\nThe this keyword refers to the current object in a method or constructor.\nThe most common use of the this keyword is to eliminate the confusion between class attributes and parameters with the same name (because a class attribute is shadowed by a method or constructor parameter). If you omit the keyword in the example above, the output would be \"0\" instead of \"5\".\nthis can also be used to:\nInvoke current class constructor\nInvoke current class method\nReturn the current class object\nPass an argument in the method call\nPass an argument in the constructor call\nRelated Pages\nRead more about objects in our Java Classes/Objects Tutorial.\nRead more about constructors in our Java Constructors Tutorial.\nRead more about methods in our Java Methods Tutorial.\n❮ Java Keywords",
      "examples": [
        "public class Main { int x; // Constructor with a parameter public Main(int x) { this.x = x; } // Call the constructor public static void main(String[] args) { Main myObj = new Main(5); System.out.println(\"Value of x = \" + myObj.x); } }",
        "this"
      ]
    },
    {
      "title": "Java throw Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nThrow an exception if age is below 18 (print \"Access denied\"). If age is 18 or older, print \"Access granted\":\nTry it Yourself »\nDefinition and Usage\nThe throw keyword is used to create a custom error.\nThe throw statement is used together with an exception type. There are many exception types available in Java: ArithmeticException, ClassNotFoundException, ArrayIndexOutOfBoundsException, SecurityException, etc.\nThe exception type is often used together with a custom method, like in the example above.\nDifferences between throw and throws:\nthrow is followed by an object (new type)\nused inside the method\nthrows is followed by a class\nand used with the method signature\nRelated Pages\nRead more about exceptions in our Java Try..Catch Tutorial.\n❮ Java Keywords",
      "examples": [
        "public class Main { static void checkAge(int age) { if (age < 18) { throw new ArithmeticException(\"Access denied - You must be at least 18 years old.\"); } else { System.out.println(\"Access granted - You are old enough!\"); } } public static void main(String[] args) { checkAge(15); // Set age to 15 (which is below 18...) } }",
        "throw",
        "ArithmeticException",
        "ClassNotFoundException",
        "ArrayIndexOutOfBoundsException",
        "SecurityException",
        "throws"
      ]
    },
    {
      "title": "Java throws Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nThrow an exception if age is below 18 (print \"Access denied\"). If age is 18 or older, print \"Access granted\":\nTry it Yourself »\nDefinition and Usage\nThe throws keyword indicates what exception type may be thrown by a method.\nThere are many exception types available in Java: ArithmeticException, ClassNotFoundException, ArrayIndexOutOfBoundsException, SecurityException, etc.\nDifferences between throw and throws:\nthrow is followed by an object (new type)\nused inside the method\nthrows is followed by a class\nand used with the method signature\nRelated Pages\nRead more about exceptions in our Java Try..Catch Tutorial.\n❮ Java Keywords",
      "examples": [
        "public class Main { static void checkAge(int age) throws ArithmeticException { if (age < 18) { throw new ArithmeticException(\"Access denied - You must be at least 18 years old.\"); } else { System.out.println(\"Access granted - You are old enough!\"); } } public static void main(String[] args) { checkAge(15); // Set age to 15 (which is below 18...) } }",
        "throws",
        "ArithmeticException",
        "ClassNotFoundException",
        "ArrayIndexOutOfBoundsException",
        "SecurityException",
        "throw"
      ]
    },
    {
      "title": "Java transient Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nThe transient keyword prevents an attribute from being serialized:\nTry it Yourself »\nDefinition and Usage\nThe transient keyword is a modifier that tells Java to ignore an attribute when serializing an object.\nRelated Pages\nRead more about modifiers in our Java Modifiers Tutorial.\n❮ Java Keywords",
      "examples": [
        "import java.io.*; public class Main { public static void main(String[] args) { Person person = new Person(); person.fname = \"John\"; person.lname = \"Doe\"; person.age = 24; person.accessCode = 5044; // Serialize the object ByteArrayOutputStream output = new ByteArrayOutputStream(); try { ObjectOutputStream objOut = new ObjectOutputStream(output); objOut.writeObject(person); } catch (IOException e) {} // Deserialize the object Person person2 = new Person(); try { ObjectInputStream objIn = new ObjectInputStream(new ByteArrayInputStream(output.toByteArray())); person2 = (Person)objIn.readObject(); } catch(Exception e) {} // Print the deseralized object System.out.println(\"First name: \" + person2.fname); System.out.println(\"Last name: \" + person2.lname); System.out.println(\"Age: \" + person2.age); System.out.println(\"Access code: \" + person2.accessCode); } } class Person implements Serializable { String fname = \"John\"; String lname = \"Doe\"; int age = 24; transient int accessCode = 0; }",
        "transient"
      ]
    },
    {
      "title": "Java try Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nIf an error occur, use try...catch to catch the error and execute some code to handle it:\nTry it Yourself »\nDefinition and Usage\nThe try keyword creates a try...catch statement.\nThe try statement allows you to define a block of code to be tested for errors while it is being executed.\nThe catch statement allows you to define a block of code to be executed, if an error occurs in the try block.\nRelated Pages\nRead more about exceptions in our Java Try..Catch Tutorial.\n❮ Java Keywords",
      "examples": [
        "try { int[] myNumbers = {1, 2, 3}; System.out.println(myNumbers[10]); } catch (Exception e) { System.out.println(\"Something went wrong.\"); }",
        "try",
        "catch"
      ]
    },
    {
      "title": "Java var Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nUse var to declare variables:\nTry it Yourself »\nDefinition and Usage\nThe var keyword allows a variable to be initialized without having to declare its type. The type of the variable depends on the type of the data that is being assigned to it.\nThe var keyword was introduced in Java 10.\nRelated Pages\nRead more about variables in our Java Variables Tutorial.\n❮ Java Keywords",
      "examples": [
        "public class Main { public int test = 10; public static void main(String[] args) { var x = 5; var main = new Main(); System.out.println(x); System.out.println(main.test); } }",
        "var"
      ]
    },
    {
      "title": "Java void Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nA method without any return values:\nTry it Yourself »\nDefinition and Usage\nThe void keyword specifies that a method should not have a return value.\nMore Examples\nTip: If you want a method to return a value, you can use a primitive data type (such as int, char, etc.) instead of void, and use the return keyword inside the method:\nExample\nTry it Yourself »\nRelated Pages\nRead more about methods in our Java Methods Tutorial.\n❮ Java Keywords",
      "examples": [
        "public class Main { static void myMethod() { System.out.println(\"I just got executed!\"); } public static void main(String[] args) { myMethod(); } }",
        "public class Main { static int myMethod(int x) { return 5 + x; } public static void main(String[] args) { System.out.println(myMethod(3)); } } // Outputs 8 (5 + 3)",
        "void",
        "int",
        "char",
        "return"
      ]
    },
    {
      "title": "Java volatile Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nCreate a volatile attribute:\nTry it Yourself »\nDefinition and Usage\nThe volatile keyword is a modifier that ensures that an attribute's value is always the same when read from all threads.\nOrdinarily the value of an attribute may be written into a thread's local cache and not updated in the main memory for some amount of time. In this case, other threads will see a different value for the attribute. The volatile keyword makes sure that threads always update the value of an attribute in main memory.\nRelated Pages\nRead more about modifiers in our Java Modifiers Tutorial.\n❮ Java Keywords",
      "examples": [
        "public class Main { public static volatile int x = 5; public static void main(String[] args) { System.out.println(x); } }",
        "volatile"
      ]
    },
    {
      "title": "Java while Keyword",
      "summary": "❮ Java Keywords\nExampleGet your own Java Server\nIn the example below, the code in the loop will run, over and over again, as long as a variable i is less than 5:\nTry it Yourself »\nDefinition and Usage\nThe while loop loops through a block of code as long as a specified condition is true.\nNote: Do not forget to increase the variable used in the condition, otherwise the loop will never end!\nMore Examples\nThe do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true:\nExample\nTry it Yourself »\nRelated Pages\nRead more about while loops in our Java While Loop Tutorial.\n❮ Java Keywords",
      "examples": [
        "int i = 0; while (i < 5) { System.out.println(i); i++; }",
        "int i = 0; do { System.out.println(i); i++; } while (i < 5);",
        "i",
        "while",
        "true",
        "do/while"
      ]
    },
    {
      "title": "Java String Methods",
      "summary": "All String Methods\nThe String class has a set of built-in methods that you can use on strings.\nRelated Pages\nJava Strings Tutorial",
      "examples": [
        "String"
      ]
    },
    {
      "title": "Java String charAt() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nReturn the first character (0) of a string:\nTry it Yourself »\nDefinition and Usage\nThe charAt() method returns the character at the specified index in a string.\nThe index of the first character is 0, the second character is 1, and so on.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "String myStr = \"Hello\"; char result = myStr.charAt(0); System.out.println(result);",
        "public char charAt(int index)",
        "charAt()",
        "int",
        "char",
        "IndexOutOfBoundsException"
      ]
    },
    {
      "title": "Java String codePointAt() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nReturn the Unicode of the first character in a string (the Unicode value of \"H\" is 72):\nTry it Yourself »\nDefinition and Usage\nThe codePointAt() method returns the Unicode value of the character at the specified index in a string.\nThe index of the first character is 0, the second character is 1, and so on.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "String myStr = \"Hello\"; int result = myStr.codePointAt(0); System.out.println(result);",
        "public int codePointAt(int index)",
        "codePointAt()",
        "int",
        "IndexOutOfBoundsException"
      ]
    },
    {
      "title": "Java String codePointBefore() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nReturn the Unicode of the first character in a string (the Unicode value of \"H\" is 72):\nTry it Yourself »\nDefinition and Usage\nThe codePointBefore() method returns the Unicode value of the character before the specified index in a string.\nThe index of the first character is 1, the second character is 2, and so on.\nNote: The value 0 will generate an error, as this is a negative number (out of reach).\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "String myStr = \"Hello\"; int result = myStr.codePointBefore(1); System.out.println(result);",
        "public int codePointBefore(int index)",
        "codePointBefore()",
        "int",
        "IndexOutOfBoundsException"
      ]
    },
    {
      "title": "Java String codePointCount() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nReturn the number of Unicode values found in a string:\nTry it Yourself »\nDefinition and Usage\nThe codePointCount() method returns the number of Unicode values found in a string.\nUse the startIndex and endIndex parameters to specify where to begin and end the search.\nThe index of the first character is 0, the second character is 1, and so on.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "String myStr = \"Hello\"; int result = myStr.codePointCount(0, 5); System.out.println(result);",
        "public int codePointCount(int startIndex, int endIndex)",
        "codePointCount()",
        "int",
        "IndexOutOfBoundsException"
      ]
    },
    {
      "title": "Java String compareTo() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nCompare two strings:\nTry it Yourself »\nDefinition and Usage\nThe compareTo() method compares two strings lexicographically.\nThe comparison is based on the Unicode value of each character in the strings.\nThe method returns 0 if the string is equal to the other string. A value less than 0 is returned if the string is less than the other string (less characters) and a value greater than 0 if the string is greater than the other string (more characters).\nTip: Use compareToIgnoreCase() to compare two strings lexicographyically, ignoring lower case and upper case differences.\nTip: Use the equals() method to compare two strings without consideration of Unicode values.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details",
      "examples": [
        "String myStr1 = \"Hello\"; String myStr2 = \"Hello\"; System.out.println(myStr1.compareTo(myStr2)); // Returns 0 because they are equal",
        "public int compareTo(String string2)",
        "public int compareTo(Object object)",
        "compareTo()",
        "String",
        "Object",
        "int"
      ]
    },
    {
      "title": "Java String compareToIgnoreCase() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nCompare two strings, ignoring lower case and upper case differences:\nTry it Yourself »\nDefinition and Usage\nThe compareToIgnoreCase() method compares two strings lexicographically, ignoring lower case and upper case differences.\nThe comparison is based on the Unicode value of each character in the string converted to lower case.\nThe method returns 0 if the string is equal to the other string, ignoring case differences. A value less than 0 is returned if the string is less than the other string (less characters) and a value greater than 0 if the string is greater than the other string (more characters).\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "String myStr1 = \"HELLO\"; String myStr2 = \"hello\"; System.out.println(myStr1.compareToIgnoreCase(myStr2));",
        "public int compareToIgnoreCase(String string2)",
        "compareToIgnoreCase()",
        "String",
        "int"
      ]
    },
    {
      "title": "Java String concat() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nConcatenate two strings:\nTry it Yourself »\nDefinition and Usage\nThe concat() method appends (concatenate) a string to the end of another string.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "String firstName = \"John \"; String lastName = \"Doe\"; System.out.println(firstName.concat(lastName));",
        "public String concat(String string2)",
        "concat()",
        "String"
      ]
    },
    {
      "title": "Java String contains() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nFind out if a string contains a sequence of characters:\nTry it Yourself »\nDefinition and Usage\nThe contains() method checks whether a string contains a sequence of characters.\nReturns true if the characters exist and false if not.\nSyntax\nParameter Values\nThe CharSequence interface is a readable sequence of char values, found in the java.lang package.\nTechnical Details\ntrue - sequence of characters exists\nfalse - sequence of characters do not exist",
      "examples": [
        "String myStr = \"Hello\"; System.out.println(myStr.contains(\"Hel\")); // true System.out.println(myStr.contains(\"e\")); // true System.out.println(myStr.contains(\"Hi\")); // false",
        "public boolean contains(CharSequence chars)",
        "contains()",
        "true",
        "false",
        "boolean",
        "NullPointerException"
      ]
    },
    {
      "title": "Java String contentEquals() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nFind out if a string contains a sequence of characters:\nTry it Yourself »\nDefinition and Usage\nThe contentEquals() method searches a string to find out if it contains the exact same sequence of characters in the specified string or StringBuffer.\nReturns true if the characters exist and false if not.\nSyntax\nOne of the following:\nParameter Values\nThe StringBuffer class is like a String, only it can be modified, found in the java.lang package.\nThe CharSequence interface is a readable sequence of char values, found in the java.lang package.\nTechnical Details\ntrue - sequence of characters exists\nfalse - sequence of characters do not exist",
      "examples": [
        "String myStr = \"Hello\"; System.out.println(myStr.contentEquals(\"Hello\")); // true System.out.println(myStr.contentEquals(\"e\")); // false System.out.println(myStr.contentEquals(\"Hi\")); // false",
        "public boolean contentEquals(StringBuffer chars)",
        "public boolean contentEquals(CharSequence chars)",
        "contentEquals()",
        "true",
        "false",
        "boolean"
      ]
    },
    {
      "title": "Java String copyValueOf() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nReturn a String that represents certain characters of a char array:\nTry it Yourself »\nDefinition and Usage\nThe copyValueOf() method returns a String that represents the characters of a char array.\nThis method returns a new String array and copies the characters into it.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "char[] myStr1 = {'H', 'e', 'l', 'l', 'o'}; String myStr2 = \"\"; myStr2 = myStr2.copyValueOf(myStr1, 0, 5); System.out.println(\"Returned String: \" + myStr2);",
        "public static String copyValueOf(char[] data, int offset, int count)",
        "copyValueOf()",
        "String",
        "char",
        "int",
        "StringIndexOutOfBoundsException"
      ]
    },
    {
      "title": "Java String endsWith() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nFind out if the string ends with the specified characters:\nTry it Yourself »\nDefinition and Usage\nThe endsWith() method checks whether a string ends with the specified character(s).\nTip: Use the startsWith() method to check whether a string starts with the specified character(s).\nSyntax\nParameter Values\nTechnical Details\ntrue - if the string ends with the specified character(s)\nfalse - if the string does not end with the specified character(s)",
      "examples": [
        "String myStr = \"Hello\"; System.out.println(myStr.endsWith(\"Hel\")); // false System.out.println(myStr.endsWith(\"llo\")); // true System.out.println(myStr.endsWith(\"o\")); // true",
        "public boolean endsWith(String chars)",
        "endsWith()",
        "String",
        "boolean",
        "true",
        "false"
      ]
    },
    {
      "title": "Java String equals() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nCompare strings to find out if they are equal:\nTry it Yourself »\nDefinition and Usage\nThe equals() method compares two strings, and returns true if the strings are equal, and false if not.\nTip: Use the compareTo() method to compare two strings lexicographically.\nSyntax\nParameter Values\nTechnical Details\ntrue - if the strings are equal\nfalse - if the strings are not equal",
      "examples": [
        "String myStr1 = \"Hello\"; String myStr2 = \"Hello\"; String myStr3 = \"Another String\"; System.out.println(myStr1.equals(myStr2)); // Returns true because they are equal System.out.println(myStr1.equals(myStr3)); // false",
        "public boolean equals(Object anotherObject)",
        "equals()",
        "Object",
        "boolean",
        "true",
        "false",
        "equals"
      ]
    },
    {
      "title": "Java String equalsIgnoreCase() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nCompare strings to find out if they are equal, ignoring case differences:\nTry it Yourself »\nDefinition and Usage\nThe equalsIgnoreCase() method compares two strings, ignoring lower case and upper case differences.\nThis method returns true if the strings are equal, and false if not.\nTip: Use the compareToIgnoreCase() method to compare two strings lexicographically, ignoring case differences.\nSyntax\nParameter Values\nTechnical Details\ntrue - if the strings are equal, ignoring case differences\nfalse - if the strings are not equal",
      "examples": [
        "String myStr1 = \"Hello\"; String myStr2 = \"HELLO\"; String myStr3 = \"Another String\"; System.out.println(myStr1.equalsIgnoreCase(myStr2)); // true System.out.println(myStr1.equalsIgnoreCase(myStr3)); // false",
        "public boolean equalsIgnoreCase(String anotherString)",
        "equalsIgnoreCase()",
        "String",
        "boolean",
        "true",
        "false"
      ]
    },
    {
      "title": "Java String format() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nReturn a formatted string:\nTry it Yourself »\nNote: You will find more \"Try it Yourself\" examples at the bottom of this page.\nDefinition and Usage\nThe format() method returns a formatted string using a locale, format and additional arguments.\nIf a locale is not passed to this method then the locale given by Locale.getDefault() is used.\nData from the additional arguments is formatted and written into placeholders in the format string, which are marked by a % symbol. The way in which arguments are formatted depends on the sequence of characters that follows the % symbol.\nPlaceholders\nThe placeholders have the form %[arg$][flags][width][.precision]conversion. The components in [square brackets] are optional.\nAn explanation of each of the components:\narg$ - Optional. A number followed by a $ sign which indicates which of the additional arguments to use, argument numbers start at 1. This can be replaced with a < which specifies that the argument from the previous placeholder should be used.\nflags - Optional. A sequence of any of the following characters:\n- - Makes the output left-justified by adding any padding spaces to the right instead of to the left.\n# - Shows an alternate representation of the formatted data depending on the conversion.\n+ - Causes positive numbers to always be prefixed with \"+\".\n- (A space character) This prefixes a space to positive numbers, primarily so that the digits can be lined up with the digits of negative numbers.\n0 - Pads numbers with zeroes on the left.\n, - Groups digits (for example by thousands) and puts separators between the groups. This is affected by the locale.\n( - Encloses negative numbers in parentheses.\n- - Makes the output left-justified by adding any padding spaces to the right instead of to the left.\n# - Shows an alternate representation of the formatted data depending on the conversion.\n+ - Causes positive numbers to always be prefixed with \"+\".\n- (A space character) This prefixes a space to positive numbers, primarily so that the digits can be lined up with the digits of negative numbers.\n0 - Pads numbers with zeroes on the left.\n, - Groups digits (for example by thousands) and puts separators between the groups. This is affected by the locale.\n( - Encloses negative numbers in parentheses.\nwidth - Optional. A whole number specifying the minimum number of characters that the output should occupy. If necessary spaces are added to the right to reach this number, or to the left if the - flag is used.\n.precision Optional. A . followed by a whole number indicating how many decimal digits to show in the formatted data.\nconversion - Required. A character which indicates how an argument's data should be represented. If the character is uppercase the data will be formatted in uppercase where possible. The list of possible characters is shown in the table below.\nList of conversions\nNote: For any data other than positive integers this does not represent its real value.\nThe following characters can be used for date and time formatting:\nH - 24-hour format of an hour (00 to 23)\nI - 12-hour format of an hour (01 to 12)\nk - 24-hour format of an hour (0 to 23)\nl (lowercase 'L') - 12-hour format of an hour (1 to 12)\nM - Minutes with leading zeros (00 to 59)\nS - Seconds with leading zeros (00 to 59) (The value 60 may occur for leap seconds)\nL - Milliseconds with leading zeroes (000 to 999)\nN - Nanoseconds with leading zeroes (000000000 to 999999999)\np - \"am\", \"pm\", \"AM\" or \"PM\" to indicate morning or afternoon\nz - Difference to Greenwich time (Example: -0800)\nZ - Timezone abbreviations (Examples: EST, MDT)\ns - The seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\nQ - The milliseconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\nB - A full textual representation of a month (January through December)\nb or h - A short textual representation of a month (three letters)\nA - A full textual representation of a day (Example: Monday)\na - A short textual representation of a day (Example: Mon)\nC - The first two digits of the year (For 1970, \"19\" would be shown)\nY - A four digit representation of a year\ny - A two digit representation of a year\nj - The day of the year with leading zeroes (001 to 366)\nm - A numeric representation of a month (01 to 12)\nd - The day of the month (01 to 31)\ne - The day of the month without leading zeros (1 to 31)\nR - The time in 24-hour format (Example: 21:30)\nT - The time in 24-hour format with seconds (Example: 21:30:02)\nr - The time in 12-hour format with seconds (Example: 09:30:02 PM) (\"AM\" and \"PM\" are always uppercase)\nD - Date representation as month/day/year (Example: 12/17/23)\nF - Date representation as year-month-day (Example: 2023-12-17)\nc - Full date and time (Example: Thu Mar 28 10:51:00 EDT 2024)\nSyntax\nOne of the following:\nParameter Values\nTechnical Details\nMore Examples\nExample\nA placeholder which uses all of the components:\nThis is how each part of the placeholder %2$,3.2f works:\n2$ indicates that the value of the second argument is used\n, indicates that digits should be grouped (usually by thousands)\n3 indicates that the representation of the data should be at least 3 characters long\n.2 indicates that there should be two digits after the decimal point\nf indicates that the data is being represented as a floating point number\nTry it Yourself »\nExample\nUse arguments in a different order:\nTry it Yourself »\nExample\nFormat a floating point number:\nTry it Yourself »\nExample\nFormat a date from a Unix timestamp:\nTry it Yourself »\nExample\nRepresent characters from their unicode code points:\nTry it Yourself »",
      "examples": [
        "String myStr = \"Hello %s! One kilobyte is %,d bytes.\"; String result = String.format(myStr, \"World\", 1024); System.out.println(result);",
        "String result = String.format(\"%2$,3.2f %1$s\", \"meters\", 1260.5052); System.out.println(result);",
        "String result = String.format(\"%3$c %2$c %1$c\", 'a', 'b', 'c'); System.out.println(result);",
        "double myNumber = 123456.78; String result; // Default result = String.format(\"%f\", myNumber); System.out.println(result); // Two decimal digits result = String.format(\"%.2f\", myNumber); System.out.println(result); // No decimal digits result = String.format(\"%.0f\", myNumber); System.out.println(result); // No decimal digits but keep the decimal point result = String.format(\"%#.0f\", myNumber); System.out.println(result); // Group digits result = String.format(\"%,.2f\", myNumber); System.out.println(result); // Scientific notation with two digits of precision result = String.format(\"%.2e\", myNumber); System.out.println(result);",
        "long date = 1711638903488L; // Unix timestamp (number of milliseconds since January 1, 1970) String result // Time result = String.format(\"%tl:%<tM %<tp\", date); System.out.println(result); // Month and day result = String.format(\"%tB %<te\", date); System.out.println(result); // Full date representation result = String.format(\"%tc\", date); System.out.println(result);",
        "String result; // Represent characters from their unicode code points result = String.format(\"%c%c%c%c%c\", 72, 101, 108, 108, 111); System.out.println(result); // Force unicode characters to uppercase result = String.format(\"%C%C%C%C%C\", 72, 101, 108, 108, 111); System.out.println(result);",
        "public static String format(Locale locale, String format, Object... args)",
        "public static String format(String format, Object... args)",
        "format()",
        "Locale.getDefault()",
        "%[arg$][flags][width][.precision]conversion",
        "arg$",
        "<",
        "flags",
        "-",
        "#",
        "+",
        "0",
        ",",
        "(",
        "width",
        ".precision",
        ".",
        "conversion",
        "%",
        "n",
        "b",
        "B",
        "h",
        "H",
        "s",
        "S",
        "c",
        "C",
        "d",
        "o",
        "x",
        "X",
        "e",
        "E",
        "f",
        "g",
        "G",
        "a",
        "A",
        "t",
        "T",
        "String",
        "IllegalFormatException",
        "%2$,3.2f",
        "2$",
        "3",
        ".2"
      ]
    },
    {
      "title": "Java String getBytes() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nConvert a string into a byte array:\nTry it Yourself »\nDefinition and Usage\nThe getBytes() method converts a string into an array of bytes.\nThe encoding of the bytes depends on the charset argument.\nIf the charset argument is not provided then the bytes will be encoded using the system's default character set.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details",
      "examples": [
        "String myStr = \"Hello\"; byte[] result = myStr.getBytes(); System.out.println(result[0]);",
        "public byte[] getBytes(Charset charset)",
        "public byte[] getBytes()",
        "getBytes()",
        "Charset",
        "byte"
      ]
    },
    {
      "title": "Java String getChars() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nCopy part of a string into a char array:\nTry it Yourself »\nDefinition and Usage\nThe getChars() method copies characters from a string to a char array.\nSyntax\nParameter Values\nTechnical Details\nIf start or position are negative\nIf end is greater than the length of the string\nIf start is greater than end\nIf the copied characters cannot fit in the destination array",
      "examples": [
        "char[] myArray = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}; System.out.println(myArray); String myStr = \"Hello, World!\"; myStr.getChars(7, 12, myArray, 4); System.out.println(myArray);",
        "public void getChars(int start, int end, char[] destination, int position)",
        "char",
        "getChars()",
        "IndexOutOfBoundsException"
      ]
    },
    {
      "title": "Java String hashCode() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nReturn the hash code of a string:\nTry it Yourself »\nDefinition and Usage\nThe hashCode() method returns the hash code of a string.\nThe hash code for a String object is computed like this:\nwhere s[i] is the ith character of the string, n is the length of the string, and ^ indicates exponentiation.\nSyntax\nParameter Values\nNone.\nTechnical Details",
      "examples": [
        "String myStr = \"Hello\"; System.out.println(myStr.hashCode());",
        "s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]",
        "public int hashCode()",
        "hashCode()",
        "int"
      ]
    },
    {
      "title": "Java String indexOf() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nSearch a string for the first occurrence of \"planet\":\nTry it Yourself »\nDefinition and Usage\nThe indexOf() method returns the position of the first occurrence of specified character(s) in a string.\nTip: Use the lastIndexOf method to return the position of the last occurrence of specified character(s) in a string.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details\nMore Examples\nExample\nFind the first occurrence of the letter \"e\" in a string, starting the search at position 5:\nTry it Yourself »",
      "examples": [
        "String myStr = \"Hello planet earth, you are a great planet.\"; System.out.println(myStr.indexOf(\"planet\"));",
        "public class Main { public static void main(String[] args) { String myStr = \"Hello planet earth, you are a great planet.\"; System.out.println(myStr.indexOf(\"e\", 5)); } }",
        "public int indexOf(String str)",
        "public int indexOf(String str, int fromIndex)",
        "public int indexOf(int char)",
        "public int indexOf(int char, int fromIndex)",
        "indexOf()",
        "String",
        "int"
      ]
    },
    {
      "title": "Java String isEmpty() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nFind out if a string is empty or not:\nTry it Yourself »\nDefinition and Usage\nThe isEmpty() method checks whether a string is empty or not.\nThis method returns true if the string is empty (length() is 0), and false if not.\nSyntax\nParameters\nNone.\nTechnical Details\ntrue - The string is empty (length() is 0)\nfalse - The string is not empty",
      "examples": [
        "String myStr1 = \"Hello\"; String myStr2 = \"\"; System.out.println(myStr1.isEmpty()); System.out.println(myStr2.isEmpty());",
        "public boolean isEmpty()",
        "isEmpty()",
        "boolean",
        "true",
        "false"
      ]
    },
    {
      "title": "Java String join() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nJoin strings with a space between them:\nTry it Yourself »\nDefinition and Usage\nThe join() method joins one or more strings with a specified separator.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details",
      "examples": [
        "String fruits = String.join(\" \", \"Orange\", \"Apple\", \"Mango\"); System.out.println(fruits);",
        "public String join(CharSequence separator, CharSequence... elements)",
        "public String join(CharSequence separator, Iterable elements)",
        "join()",
        "String"
      ]
    },
    {
      "title": "Java String lastIndexOf() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nSearch a string for the last occurrence of \"planet\":\nTry it Yourself »\nDefinition and Usage\nThe lastIndexOf() method returns the position of the last occurrence of specified character(s) in a string.\nTip: Use the indexOf method to return the position of the first occurrence of specified character(s) in a string.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details\nMore Examples\nExample\nFind the last occurrence of \"e\" in a string, starting the search at position 5:\nTry it Yourself »",
      "examples": [
        "String myStr = \"Hello planet earth, you are a great planet.\"; System.out.println(myStr.lastIndexOf(\"planet\"));",
        "public class Main { public static void main(String[] args) { String myStr = \"Hello planet earth, you are a great planet.\"; System.out.println(myStr.lastIndexOf(\"e\", 5)); } }",
        "public int lastIndexOf(String str)",
        "public int lastIndexOf(String str, int fromIndex)",
        "public int lastIndexOf(int char)",
        "public int lastIndexOf(int char, int fromIndex)",
        "lastIndexOf()",
        "String",
        "int"
      ]
    },
    {
      "title": "Java String length() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nReturn the number of characters in a string:\nTry it Yourself »\nDefinition and Usage\nThe length() method returns the length of a specified string.\nNote: The length of an empty string is 0.\nSyntax\nParameters\nNone.\nTechnical Details",
      "examples": [
        "String txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; System.out.println(txt.length());",
        "public int length()",
        "length()",
        "int"
      ]
    },
    {
      "title": "Java String matches() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nCheck whether a string matches the regular expression:\nTry it Yourself »\nDefinition and Usage\nThe matches() method searches a string for a match against a regular expression, and returns the matches.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "String regex = \"cat|dog|fish\"; System.out.println(\"cat\".matches(regex)); System.out.println(\"dog\".matches(regex)); System.out.println(\"catfish\".matches(regex)); System.out.println(\"doggy bag\".matches(regex));",
        "public String matches(String regex)",
        "matches()",
        "boolean",
        "true",
        "false"
      ]
    },
    {
      "title": "Java String offsetByCodePoints() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nGet an index from a string which is offset from another index by a number of code points:\nTry it Yourself »\nDefinition and Usage\nThe offsetByCodePoints() method returns an index in a string which is offset from another index by a specified number of code points.\nNote: A code point may be formed by more than one character. These code points will offset the index by more than 1.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "String myStr = \"Hello, World!\"; int result = myStr.offsetByCodePoints(3, 2); System.out.println(result);",
        "public int offsetByCodePoints(int index, int codePointOffset)",
        "offsetByCodePoints()",
        "int",
        "IndexOutOfBoundsException"
      ]
    },
    {
      "title": "Java String regionMatches() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nTest if two string regions are equal:\nTry it Yourself »\nDefinition and Usage\nThe regionMatches() method compares regions in two different strings to check if they are equal.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details",
      "examples": [
        "String myStr1 = \"Hello, World!\"; String myStr2 = \"New World\"; System.out.println(myStr1.regionMatches(7, myStr2, 4, 5)); System.out.println(myStr1.regionMatches(0, myStr2, 0, 5));",
        "public boolean regionMatches(boolean ignoreCase, int offset, String other, int otherOffset, int length)",
        "public boolean regionMatches(int offset, String other, int otherOffset, int length)",
        "regionMatches()",
        "true",
        "false"
      ]
    },
    {
      "title": "Java String replace() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nReturn a new string where all \"l\" characters are replaced with \"p\" characters:\nTry it Yourself »\nDefinition and Usage\nThe replace() method searches a string for a specified character, and returns a new string where the specified character(s) are replaced.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "String myStr = \"Hello\"; System.out.println(myStr.replace('l', 'p'));",
        "public String replace(char searchChar, char newChar)",
        "replace()",
        "char",
        "String"
      ]
    },
    {
      "title": "Java String replaceAll() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nReplace every match of a regular expression with a substring:\nTry it Yourself »\nDefinition and Usage\nThe replaceAll() method replaces the first match of a regular expression in a string with a new substring.\nReplacement strings may contain a backreference in the form $n where n is the index of a group in the pattern. In the returned string, instances of $n will be replaced with the substring that was matched by the group or, if $0 is used, by the whole expression. See \"More Examples\" below for an example of using a backreference.\nTip: See the Java RegEx tutorial to learn about regular expressions.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nUse a backreference to wrap numbers in parentheses:\nTry it Yourself »",
      "examples": [
        "String myStr = \"I love cats. Cats are very easy to love. Cats are very popular.\"; String regex = \"(?i)cat\"; System.out.println(myStr.replaceAll(regex, \"dog\"));",
        "String myStr = \"Quest complete! Earned 30 gold and 500 experience.\"; String regex = \"[0-9]+\"; System.out.println(myStr.replaceAll(regex, \"($0)\"));",
        "public String replaceAll(String regex, String replacement)",
        "replaceAll()",
        "PatternSyntaxException"
      ]
    },
    {
      "title": "Java String replaceFirst() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nReplace the first match of a regular expression with a different substring:\nTry it Yourself »\nDefinition and Usage\nThe replaceFirst() method replaces the first match of a regular expression in a string with a new substring.\nReplacement strings may contain a backreference in the form $n where n is the index of a group in the pattern. In the returned string, instances of $n will be replaced with the substring that was matched by the group or, if $0 is used, by the whole expression. See \"More Examples\" below for an example of using a backreference.\nTip: See the Java RegEx tutorial to learn about regular expressions.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nUse a backreference to wrap the first number in parentheses:\nTry it Yourself »",
      "examples": [
        "String myStr = \"This is W3Schools\"; String regex = \"is\"; System.out.println(myStr.replaceFirst(regex, \"at\"));",
        "String myStr = \"Quest complete! Earned 30 gold and 500 experience.\"; String regex = \"[0-9]+\"; System.out.println(myStr.replaceFirst(regex, \"($0)\"));",
        "public String replaceFirst(String regex, String replacement)",
        "replaceFirst()",
        "PatternSyntaxException"
      ]
    },
    {
      "title": "Java String split() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nSplit a string into an array of strings:\nTry it Yourself »\nDefinition and Usage\nThe split() method splits a string into an array of substrings using a regular expression as the separator.\nIf a limit is specified, the returned array will not be longer than the limit. The last element of the array will contain the remainder of the string, which may still have separators in it if the limit was reached.\nTip: See the Java RegEx tutorial to learn about regular expressions.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details",
      "examples": [
        "String myStr = \"Split a string by spaces, and also punctuation.\"; String regex = \"[,\\\\.\\\\s]\"; String[] myArray = myStr.split(regex); for (String s : myArray) { System.out.println(s); }",
        "public String[] split(String regex, int limit)",
        "public String[] split(String regex)",
        "split()",
        "String",
        "PatternSyntaxException"
      ]
    },
    {
      "title": "Java String startsWith() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nFind out if the string starts with the specified characters:\nTry it Yourself »\nDefinition and Usage\nThe startsWith() method checks whether a string starts with the specified character(s).\nTip: Use the endsWith() method to check whether a string ends with the specified character(s).\nSyntax\nParameter Values\nTechnical Details\ntrue - if the string starts with the specified character(s)\nfalse - if the string does not start with the specified character(s)",
      "examples": [
        "String myStr = \"Hello\"; System.out.println(myStr.startsWith(\"Hel\")); // true System.out.println(myStr.startsWith(\"llo\")); // false System.out.println(myStr.startsWith(\"o\")); // false",
        "public boolean startsWith(String chars)",
        "startsWith()",
        "String",
        "boolean",
        "true",
        "false"
      ]
    },
    {
      "title": "Java String subSequence() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nReturn a sequence of characters from a string:\nTry it Yourself »\nDefinition and Usage\nThe subSequence() method returns a subsequence from the string as a CharSequence object.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "String myStr = \"Hello, World!\"; System.out.println(myStr.subSequence(7, 12));",
        "public CharSequence subSequence(int start, int end)",
        "subSequence()",
        "CharSequence",
        "IndexOutOfBoundsException"
      ]
    },
    {
      "title": "Java String substring() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nReturn a substring from a string:\nTry it Yourself »\nDefinition and Usage\nThe substring() method returns a substring from the string.\nIf the end argument is not specified then the substring will end at the end of the string.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details",
      "examples": [
        "String myStr = \"Hello, World!\"; System.out.println(myStr.substring(7, 12));",
        "public String substring(int start, int end)",
        "public String substring(int start)",
        "substring()",
        "String",
        "IndexOutOfBoundsException"
      ]
    },
    {
      "title": "Java String toCharArray() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nConvert a string to a char array:\nTry it Yourself »\nDefinition and Usage\nThe toCharArray() method returns a new char array representing the contents of the string.\nSyntax\nTechnical Details",
      "examples": [
        "String myStr = \"Hello\"; char[] myArray = myStr.toCharArray(); System.out.println(myArray[0]);",
        "public char[] toCharArray()",
        "char",
        "toCharArray()"
      ]
    },
    {
      "title": "Java String toLowerCase() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nConvert a string to upper case and lower case letters:\nTry it Yourself »\nDefinition and Usage\nThe toLowerCase() method converts a string to lower case letters.\nNote: The toUpperCase() method converts a string to upper case letters.\nSyntax\nParameters\nNone.\nTechnical Details",
      "examples": [
        "String txt = \"Hello World\"; System.out.println(txt.toUpperCase()); System.out.println(txt.toLowerCase());",
        "public String toLowerCase()",
        "toLowerCase()",
        "String"
      ]
    },
    {
      "title": "Java String toString() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nReturn a string's value:\nTry it Yourself »\nDefinition and Usage\nThe toString() method returns the string itself.\nThis method may seem redundant, but its purpose is to allow code that is treating the string as a more generalized object to know its string value without casting it to String type.\nSyntax\nTechnical Details",
      "examples": [
        "String myStr = \"Hello, World!\"; System.out.println(myStr.toString());",
        "public String toString()",
        "toString()",
        "String"
      ]
    },
    {
      "title": "Java String toUpperCase() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nConvert a string to upper case and lower case letters:\nTry it Yourself »\nDefinition and Usage\nThe toUpperCase() method converts a string to upper case letters.\nNote: The toLowerCase() method converts a string to lower case letters.\nSyntax\nParameters\nNone.\nTechnical Details",
      "examples": [
        "String txt = \"Hello World\"; System.out.println(txt.toUpperCase()); System.out.println(txt.toLowerCase());",
        "public String toUpperCase()",
        "toUpperCase()",
        "String"
      ]
    },
    {
      "title": "Java String trim() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nRemove whitespace from both sides of a string:\nTry it Yourself »\nDefinition and Usage\nThe trim() method removes whitespace from both ends of a string.\nNote: This method does not change the original string.\nSyntax\nParameters\nNone.\nTechnical Details",
      "examples": [
        "String myStr = \" Hello World! \"; System.out.println(myStr); System.out.println(myStr.trim());",
        "public String trim()",
        "trim()",
        "String"
      ]
    },
    {
      "title": "Java String valueOf() Method",
      "summary": "❮ String Methods\nExampleGet your own Java Server\nReturn a string representation of different data types:\nTry it Yourself »\nDefinition and Usage\nThe valueOf() method returns the string representation of the specified value.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details",
      "examples": [
        "char[] myArray = {'a', 'b', 'c'}; System.out.println(String.valueOf(myArray)); System.out.println(String.valueOf('A')); System.out.println(String.valueOf(true)); System.out.println(String.valueOf(4.5f)); System.out.println(String.valueOf(5.2)); System.out.println(String.valueOf(12)); System.out.println(String.valueOf(1400L));",
        "public static String valueOf(boolean data)",
        "public static String valueOf(char data)",
        "public static String valueOf(char[] data)",
        "public static String valueOf(char[] data, int start, int length)",
        "public static String valueOf(double data)",
        "public static String valueOf(float data)",
        "public static String valueOf(int data)",
        "public static String valueOf(long data)",
        "public static String valueOf(Object data)",
        "valueOf()",
        "char",
        "String",
        "IndexOutOfBoundsException"
      ]
    },
    {
      "title": "Java Math Methods",
      "summary": "The Java Math class has many methods that allows you to perform mathematical tasks on numbers.\nAll Math Methods\nA list of all Math methods can be found in the table below:\nNote: All Math methods are static.\nRelated Pages\nJava Math Tutorial",
      "examples": [
        "Math",
        "static"
      ]
    },
    {
      "title": "Java Math abs() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nReturn the absolute (positive) value of different numbers:\nTry it Yourself »\nDefinition and Usage\nThe abs() method returns the absolute (positive) value of a number.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.abs(-4.7)); System.out.println(Math.abs(4.7)); System.out.println(Math.abs(3));",
        "public static double abs(double number)",
        "public static float abs(float number)",
        "public static int abs(int number)",
        "public static long abs(long number)",
        "abs()",
        "double",
        "float",
        "int",
        "long"
      ]
    },
    {
      "title": "Java Math acos() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nReturn the arc cosine of different numbers:\nTry it Yourself »\nDefinition and Usage\nThe acos() method returns the arc cosine value of a number.\nTip: acos(-1) returns the value of PI.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.acos(0.64)); System.out.println(Math.acos(-0.4)); System.out.println(Math.acos(0)); System.out.println(Math.acos(1)); System.out.println(Math.acos(-1)); System.out.println(Math.acos(2));",
        "public static double abs(double number)",
        "acos()",
        "double"
      ]
    },
    {
      "title": "Java Math addExact() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nAdd integers:\nDefinition and Usage\nThe addExact() method adds two integers and throws an exception if the addition causes an overflow. This prevents incorrect results that can occur from adding really large numbers.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.addExact(12, 16)); System.out.println(Math.addExact(10000, 24060));",
        "public static int addExact(int x, int y)",
        "public static long addExact(long x, long y)",
        "addExact()",
        "int",
        "long",
        "ArithmeticException"
      ]
    },
    {
      "title": "Java Math asin() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nReturn the arc sine of different numbers:\nTry it Yourself »\nDefinition and Usage\nThe asin() method returns the arc sine of a number in radians.\nTip: asin(1) returns the value of PI/2.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.asin(0.64)); System.out.println(Math.asin(-0.4)); System.out.println(Math.asin(0)); System.out.println(Math.asin(1)); System.out.println(Math.asin(-1)); System.out.println(Math.asin(2));",
        "public static double asin(double number)",
        "asin()",
        "double"
      ]
    },
    {
      "title": "Java Math atan() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nReturn the arc tangent of different numbers:\nTry it Yourself »\nDefinition and Usage\nThe atan() method returns the arc tangent of a number in radians.\nTip: The atan() method only returns angles between -PI/2 and PI/2. The atan2() method can return any angle.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.atan(0.5)); System.out.println(Math.atan(-0.5)); System.out.println(Math.atan(5)); System.out.println(Math.atan(-5)); System.out.println(Math.atan(100)); System.out.println(Math.atan(-100));",
        "public static double atan(double number)",
        "atan()",
        "double"
      ]
    },
    {
      "title": "Java Math atan2() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nReturn the angle in radians of the polar coordinates given rectangular coordinates:\nTry it Yourself »\nDefinition and Usage\nThe atan2() method returns the angle theta in radians from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta).\nThis is the same as calling atan(y/x) except that it takes into account negative values of x so that it can return angles outside of the range -PI/2 to PI/2.\nNote: In the atan2() method the y coordinate goes first, then the x coordinate. This is because it is doing the division y / x.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.atan2(0.5, 0.5)); System.out.println(Math.atan2(-0.5, -0.5)); System.out.println(Math.atan2(5, 5)); System.out.println(Math.atan2(10, 20)); System.out.println(Math.atan2(-5, -5)); System.out.println(Math.atan2(-10, 10));",
        "public static double atan2(double y, double x)",
        "atan2()",
        "atan(y/x)",
        "double"
      ]
    },
    {
      "title": "Java Math cbrt() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nReturn the cube root of different numbers:\nTry it Yourself »\nDefinition and Usage\nThe cbrt() method returns the cube root of a number.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.cbrt(0)); System.out.println(Math.cbrt(1)); System.out.println(Math.cbrt(27)); System.out.println(Math.cbrt(0.64)); System.out.println(Math.cbrt(-27));",
        "public static double cbrt(double number)",
        "cbrt()",
        "double"
      ]
    },
    {
      "title": "Java Math ceil() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nRound numbers up to the nearest integer:\nTry it Yourself »\nDefinition and Usage\nThe ceil() method rounds a number UP to the nearest integer.\nTip: To round a number DOWN to the nearest integer, look at the floor() method.\nTip: To round a number to the nearest integer in either direction, look at the round() method.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.ceil(0.60)); System.out.println(Math.ceil(0.40)); System.out.println(Math.ceil(5)); System.out.println(Math.ceil(5.1)); System.out.println(Math.ceil(-5.1)); System.out.println(Math.ceil(-5.9));",
        "public static double ceil(double number)",
        "ceil()",
        "double"
      ]
    },
    {
      "title": "Java Math copySign() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nReturn the value of a number with the sign of another:\nTry it Yourself »\nDefinition and Usage\nThe copySign() method returns the value of the first number with the sign of the second number.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.copySign(-4.7, 3)); System.out.println(Math.copySign(4.7, -2.5)); System.out.println(Math.copySign(3, 4)); System.out.println(Math.copySign(-2.5, -4.7));",
        "public static double copySign(double value, double sign)",
        "public static float copySign(float value, float sign)",
        "copySign()",
        "double",
        "float"
      ]
    },
    {
      "title": "Java Math cos() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nReturn the cosine of different angles:\nTry it Yourself »\nDefinition and Usage\nThe cos() method returns the cosine of an angle.\nNote: Angles are measured in radians.\nTip: You can use the constant Math.PI to make fractions of PI for angles.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.cos(3)); System.out.println(Math.cos(-3)); System.out.println(Math.cos(0)); System.out.println(Math.cos(Math.PI)); System.out.println(Math.cos(Math.PI/2));",
        "public static double cos(double angle)",
        "cos()",
        "double"
      ]
    },
    {
      "title": "Java Math cosh() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nReturn the hyperbolic cosine of different numbers:\nTry it Yourself »\nDefinition and Usage\nThe cosh() method returns the hyperbolic cosine of a number.\nThe hyperbolic cosine is equivalent to (Math.exp(number) + Math.exp(-number)) / 2.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.cosh(3)); System.out.println(Math.cosh(-3)); System.out.println(Math.cosh(0)); System.out.println(Math.cosh(1));",
        "public static double cosh(double number)",
        "cosh()",
        "(Math.exp(number) + Math.exp(-number)) / 2",
        "double"
      ]
    },
    {
      "title": "Java Math decrementExact() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nDecrement different numbers:\nDefinition and Usage\nThe decrementExact() method returns 1 less than a specified integer and throws an exception if an overflow occurs. This prevents incorrect results that can occur from the overflow.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.decrementExact(12002)); System.out.println(Math.decrementExact(18)); System.out.println(Math.decrementExact(32)); System.out.println(Math.decrementExact(947));",
        "public static int decrementExact(int x)",
        "public static long decrementExact(long x)",
        "decrementExact()",
        "int",
        "long",
        "ArithmeticException"
      ]
    },
    {
      "title": "Java Math exp() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nReturn e raised to the power of different numbers:\nTry it Yourself »\nDefinition and Usage\nThe exp() method returns e raised to the power of a number (ex).\ne is the base of the natural system of logarithms (approximately 2.718282). In Java, the value of e is available as the constant Math.E.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.exp(0)); System.out.println(Math.exp(1)); System.out.println(Math.exp(10)); System.out.println(Math.exp(4.8)); System.out.println(Math.exp(Math.E));",
        "public static double exp(double number)",
        "exp()",
        "double"
      ]
    },
    {
      "title": "Java Math expm1() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nReturn ex - 1 for different values of x:\nTry it Yourself »\nDefinition and Usage\nThe expm1() method returns the solution to ex - 1 for any number x.\ne is the base of the natural system of logarithms (approximately 2.718282). In Java, the value of e is available as the constant Math.E.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.expm1(0)); System.out.println(Math.expm1(1)); System.out.println(Math.expm1(10)); System.out.println(Math.expm1(4.8)); System.out.println(Math.expm1(Math.E));",
        "public static double expm1(double number)",
        "expm1()",
        "double"
      ]
    },
    {
      "title": "Java Math floor() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nRound numbers down to the nearest integer:\nTry it Yourself »\nDefinition and Usage\nThe floor() method rounds a number DOWN to the nearest integer.\nTip: To round a number UP to the nearest integer, look at the ceil() method.\nTip: To round a number to the nearest integer in either direction, look at the round() method.\nNote: For positive numbers the floor() method just removes the decimal part, but for negative numbers the integer part of the number will be changed if the number has a decimal part. If you only want to remove the decimal part, you can type cast the number as an integer.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.floor(0.60)); System.out.println(Math.floor(0.40)); System.out.println(Math.floor(5)); System.out.println(Math.floor(5.1)); System.out.println(Math.floor(-5.1)); System.out.println(Math.floor(-5.9));",
        "public static double floor(double number)",
        "floor()",
        "double"
      ]
    },
    {
      "title": "Java Math floorDiv() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nPerform integer divisions:\nDefinition and Usage\nThe floorDiv() method returns the division between two integers rounded down. This is different from an ordinary integer division in that negative results are rounded down away from zero instead of truncated towards it.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.floorDiv(10, 5)); System.out.println(Math.floorDiv(10, 4)); System.out.println(Math.floorDiv(-10, 4)); System.out.println(Math.floorDiv(-10, 5));",
        "public static int floorDiv(int dividend, int divisor)",
        "public static long floorDiv(long dividend, long divisor)",
        "floorDiv()",
        "int",
        "long",
        "ArithmeticException"
      ]
    },
    {
      "title": "Java Math floorMod() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nReturn the remainders of rounded-down divisions:\nDefinition and Usage\nThe floorMod() method returns the remainder of a division between two integers where the result of the division was rounded down.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.floorMod(10, 4)); System.out.println(Math.floorMod(-10, 4)); System.out.println(Math.floorMod(10, 3)); System.out.println(Math.floorMod(-10, 3));",
        "public static int floorMod(int dividend, int divisor)",
        "public static long floorMod(long dividend, long divisor)",
        "floorMod()",
        "dividend - Math.floorDiv(dividend, divisor) * divisor",
        "int",
        "long",
        "ArithmeticException"
      ]
    },
    {
      "title": "Java Math getExponent() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nGet the exponent of different floating point numbers:\nTry it Yourself »\nDefinition and Usage\nThe getExponent() method returns the unbiased exponent of Java's internal representation of a floating point number.\nJava represents every floating point number internally in the form m·2x. The getExponent() method returns the value of x for any floating point number. The term unbiased refers to the fact that the exponent can only be represented internally as a positive number, so there is a positive bias to the exponent. When you subtract the bias from the exponent you get the unbiased (true) value of the exponent.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.getExponent(1)); System.out.println(Math.getExponent(2)); System.out.println(Math.getExponent(-8)); System.out.println(Math.getExponent(10)); System.out.println(Math.getExponent(0.5)); System.out.println(Math.getExponent(-0.33));",
        "public static int getExponent(double number)",
        "public static int getExponent(float number)",
        "getExponent()",
        "int"
      ]
    },
    {
      "title": "Java Math hypot() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nGet the distance of 2D points (x, y) from the origin (0, 0):\nTry it Yourself »\nDefinition and Usage\nThe hypot() method returns the length of the hypotenuse of a right angle triangle, which is equivalent to the distance between a 2D point (x, y) and the origin (0, 0).\nThis method returns a value equal to Math.sqrt(x * x + y * y) but it is optimized to prevent overflows and underflows caused during intermediate operations such as addition and multiplication.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.hypot(3, 4)); System.out.println(Math.hypot(1, 1)); System.out.println(Math.hypot(1, 10));",
        "public static double hypot(double x, double y)",
        "hypot()",
        "Math.sqrt(x * x + y * y)",
        "double"
      ]
    },
    {
      "title": "Java Math IEEEremainder() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nCalculate the IEEE 754 remainder of different pairs of numbers:\nTry it Yourself »\nDefinition and Usage\nThe IEEEremainder() method computes the remainder operation on two numbers as prescribed by the IEEE 754 standard.\nThe return value of this method for two numbers a and b is equal to a - (b * Math.rint(a/b)).\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.IEEEremainder(11, 3)); System.out.println(Math.IEEEremainder(16, 4)); System.out.println(Math.IEEEremainder(31, 2.5));",
        "public static double IEEEremainder(double dividend, double divisor)",
        "IEEEremainder()",
        "a - (b * Math.rint(a/b))",
        "double"
      ]
    },
    {
      "title": "Java Math incrementExact() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nIncrement different numbers:\nDefinition and Usage\nThe incrementExact() method returns 1 more than a specified integer and throws an exception if an overflow occurs. This prevents incorrect results that can occur from the overflow.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.incrementExact(12002)); System.out.println(Math.incrementExact(18)); System.out.println(Math.incrementExact(32)); System.out.println(Math.incrementExact(947));",
        "public static int incrementExact(int x)",
        "public static long incrementExact(long x)",
        "incrementExact()",
        "int",
        "long",
        "ArithmeticException"
      ]
    },
    {
      "title": "Java Math log() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nReturn the natural logarithm of different numbers:\nTry it Yourself »\nDefinition and Usage\nThe log() method returns the natural logarithm of a number.\nThe natural logarithm is the logarithm with base e. The value of e is approximately 2.718282 and it is available as the constant Math.E in Java.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.log(6)); System.out.println(Math.log(Math.E)); System.out.println(Math.log(2)); System.out.println(Math.log(1)); System.out.println(Math.log(0)); System.out.println(Math.log(-1));",
        "public static double log(double number)",
        "log()",
        "Math.E",
        "double"
      ]
    },
    {
      "title": "Java Math log10() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nReturn the base 10 logarithm for different numbers:\nTry it Yourself »\nDefinition and Usage\nThe log10() method returns the base 10 logarithm of a number.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.log10(120)); System.out.println(Math.log10(10)); System.out.println(Math.log10(3.1623)); System.out.println(Math.log10(1)); System.out.println(Math.log10(0)); System.out.println(Math.log10(-1));",
        "public static double log10(double number)",
        "log10()",
        "double"
      ]
    },
    {
      "title": "Java Math log1p() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nReturn the natural logarithm of 1 + x for different values of x:\nTry it Yourself »\nDefinition and Usage\nThe log1p() method returns the natural logarithm of 1 + x for any number x.\nThe natural logarithm is the logarithm with base e. The value of e is approximately 2.718282 and it is available as the constant Math.E in Java.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.log1p(6)); System.out.println(Math.log1p(Math.E)); System.out.println(Math.log1p(2)); System.out.println(Math.log1p(1)); System.out.println(Math.log1p(0)); System.out.println(Math.log1p(-1));",
        "public static double log1p(double number)",
        "log1p()",
        "Math.E",
        "double"
      ]
    },
    {
      "title": "Java Math max() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nGet the highest value from different pairs of numbers:\nTry it Yourself »\nDefinition and Usage\nThe max() method returns the number with the highest value from a pair of numbers.\nTip: Use the min() method to return the number with the lowest value.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.max(2.0, 0.25)); System.out.println(Math.max(31.2f, 18.0f)); System.out.println(Math.max(14, 22)); System.out.println(Math.max(96L, 2048L));",
        "public static double max(double x, double y)",
        "public static float max(float x, float y)",
        "public static int max(int x, int y)",
        "public static long max(long x, long y)",
        "max()",
        "min()",
        "double",
        "float",
        "int",
        "long"
      ]
    },
    {
      "title": "Java Math min() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nGet the lowest value from different pairs of numbers:\nTry it Yourself »\nDefinition and Usage\nThe min() method returns the number with the lowest value from a pair of numbers.\nTip: Use the max() method to return the number with the highest value.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.min(2.0, 0.25)); System.out.println(Math.min(31.2f, 18.0f)); System.out.println(Math.min(14, 22)); System.out.println(Math.min(96L, 2048L));",
        "public static double min(double x, double y)",
        "public static float min(float x, float y)",
        "public static int min(int x, int y)",
        "public static long min(long x, long y)",
        "min()",
        "max()",
        "double",
        "float",
        "int",
        "long"
      ]
    },
    {
      "title": "Java Math multiplyExact() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nMultiply integers using multiplyExact():\nDefinition and Usage\nThe multiplyExact() method multiplies two integers and throws an exception if the result causes an overflow. This prevents incorrect results that can occur from multiplying really large numbers.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.multiplyExact(96000, 1200)); System.out.println(Math.multiplyExact(-460, 95));",
        "public static int multiplyExact(int x, int y)",
        "public static long multiplyExact(long x, long y)",
        "multiplyExact()",
        "int",
        "long",
        "ArithmeticException"
      ]
    },
    {
      "title": "Java Math negateExact() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nChange the sign of different numbers:\nDefinition and Usage\nThe negateExact() method returns an integer with equal value and opposite sign to another integer and throws an exception if an overflow occurs. This prevents incorrect results that can occur from the overflow.\nAn overflow occurs when the integer is equal to Integer.MIN_VALUE or Long.MIN_VALUE, the largest negative integer, because it does not have a positive equivalent.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.negateExact(15)); System.out.println(Math.negateExact(-32)); System.out.println(Math.negateExact(7)); System.out.println(Math.negateExact(-25));",
        "public static int negateExact(int x)",
        "public static long negateExact(long x)",
        "negateExact()",
        "Integer.MIN_VALUE",
        "Long.MIN_VALUE",
        "int",
        "long",
        "ArithmeticException"
      ]
    },
    {
      "title": "Java Math nextAfter() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nFind the next floating point number for different numbers in different directions:\nTry it Yourself »\nDefinition and Usage\nThe nextAfter() method returns the floating point number adjacent to a number x in the direction of a number y.\nIf y is greater than x then it looks for the lowest possible floating point number that is greater than x. If y is less than x then it looks for the highest possible floating point number that is less than x. If y is equal to x then this method returns x.\nThe return value for double type arguments will be closer to x than the return value for float type arguments.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.nextAfter(1, 2)); System.out.println(Math.nextAfter(1, 0)); System.out.println(Math.nextAfter(0.5f, 1.0f)); System.out.println(Math.nextAfter(0.5f, 0.0f));",
        "public static double nextAfter(double x, double y)",
        "public static float nextAfter(float x, double y)",
        "nextAfter()",
        "double",
        "float"
      ]
    },
    {
      "title": "Java Math nextDown() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nFind the next floating point number below different numbers:\nTry it Yourself »\nDefinition and Usage\nThe nextDown() method returns the floating point number adjacent to a number in the negative direction, which is the highest possible floating point number that is less than the starting number.\nThe return value for double type arguments will be closer to the starting number than the return value for float type arguments.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.nextDown(1.0f)); System.out.println(Math.nextDown(1.0)); System.out.println(Math.nextDown(0.5f)); System.out.println(Math.nextDown(0.5)); System.out.println(Math.nextDown(Math.PI)); System.out.println(Math.nextDown(3.1415927f));",
        "public static double nextDown(double start)",
        "public static float nextDown(float start)",
        "nextDown()",
        "double",
        "float"
      ]
    },
    {
      "title": "Java Math nextUp() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nFind the next floating point number above different numbers:\nTry it Yourself »\nDefinition and Usage\nThe nextUp() method returns the floating point number adjacent to a number in the positive direction, which is the lowest possible floating point number that is greater than the starting number.\nThe return value for double type arguments will be closer to the starting number than the return value for float type arguments.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.nextUp(1.0f)); System.out.println(Math.nextUp(1.0)); System.out.println(Math.nextUp(0.5f)); System.out.println(Math.nextUp(0.5)); System.out.println(Math.nextUp(Math.PI)); System.out.println(Math.nextUp(3.1415927f));",
        "public static double nextUp(double start)",
        "public static float nextUp(float start)",
        "nextUp()",
        "double",
        "float"
      ]
    },
    {
      "title": "Java Math pow() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nRaise different numbers to different powers:\nTry it Yourself »\nDefinition and Usage\nThe pow() method raises a number to the power of another number.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.pow(2, 8)); System.out.println(Math.pow(3, 4)); System.out.println(Math.pow(9, 0.5)); System.out.println(Math.pow(8, -1)); System.out.println(Math.pow(10, -2));",
        "public static double pow(double base, double exponent)",
        "pow()",
        "double"
      ]
    },
    {
      "title": "Java Math random() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nGenerate a random number:\nTry it Yourself »\nDefinition and Usage\nThe random() method returns a random number between 0 and 1.\nThis method never returns exactly 1, but it can return 0.\nSyntax\nTechnical Details",
      "examples": [
        "System.out.println(Math.random());",
        "public static double random()",
        "random()",
        "double"
      ]
    },
    {
      "title": "Java Math rint() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nRound numbers to the nearest integer:\nTry it Yourself »\nDefinition and Usage\nThe rint() method rounds a number to the nearest integer. If there are two integers that are equally close to the number then the even integer will be returned.\nNote: This method is very similar to round(). The main differences between rint() and round() are:\nround() returns long or int data types while rint() returns a double.\nWhen the decimal part of the number is exactly 0.5, rint() returns the nearest even integer while round() returns the highest of the two nearest integers\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.rint(0.5)); System.out.println(Math.rint(1.5)); System.out.println(Math.rint(5)); System.out.println(Math.rint(5.1)); System.out.println(Math.rint(-5.1)); System.out.println(Math.rint(-5.9));",
        "public static double rint(double number)",
        "rint()",
        "round()",
        "long",
        "int",
        "double"
      ]
    },
    {
      "title": "Java Math round() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nRound numbers to the nearest integer:\nTry it Yourself »\nDefinition and Usage\nThe round() method rounds a number to the nearest integer.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.round(0.60)); System.out.println(Math.round(0.40)); System.out.println(Math.round(5)); System.out.println(Math.round(5.1)); System.out.println(Math.round(-5.1)); System.out.println(Math.round(-5.9));",
        "public static long round(double number)",
        "public static int round(float number)",
        "round()",
        "long",
        "int"
      ]
    },
    {
      "title": "Java Math scalb() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nReturn numbers multiplied by powers of 2:\nDefinition and Usage\nThe scalb() method returns the result of the formula x·2y for a floating point number x and an integer y.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.scalb(1.5, 4)); System.out.println(Math.scalb(1.0, 5)); System.out.println(Math.scalb(1.2, 0)); System.out.println(Math.scalb(1.85, 10));",
        "public static double scalb(double x, int y)",
        "public static float scalb(float x, int y)",
        "scalb()",
        "double",
        "float"
      ]
    },
    {
      "title": "Java Math signum() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nReturn the sign of different numbers:\nTry it Yourself »\nDefinition and Usage\nThe signum() method returns the sign of a number. A number's sign tells whether it is positive or negative. This method returns 1 for positive numbers, -1 for negative numbers and 0 for the number 0.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.signum(12)); System.out.println(Math.signum(0.5)); System.out.println(Math.signum(0)); System.out.println(Math.signum(-0.25)); System.out.println(Math.signum(-6));",
        "public static double signum(double number)",
        "public static float signum(float number)",
        "signum()",
        "double",
        "float"
      ]
    },
    {
      "title": "Java Math sin() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nReturn the sine of different angles:\nTry it Yourself »\nDefinition and Usage\nThe sin() method returns the sine of an angle.\nNote: Angles are measured in radians.\nTip: You can use the constant Math.PI to make fractions of PI for angles.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.sin(3)); System.out.println(Math.sin(-3)); System.out.println(Math.sin(0)); System.out.println(Math.sin(Math.PI)); System.out.println(Math.sin(Math.PI/2));",
        "public static double sin(double angle)",
        "sin()",
        "double"
      ]
    },
    {
      "title": "Java Math sinh() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nReturn the hyperbolic sine of different numbers:\nTry it Yourself »\nDefinition and Usage\nThe sinh() method returns the hyperbolic sine of a number.\nThe hyperbolic sine is equivalent to (Math.exp(number) - Math.exp(-number)) / 2.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.sinh(3)); System.out.println(Math.sinh(-3)); System.out.println(Math.sinh(0)); System.out.println(Math.sinh(1));",
        "public static double sinh(double number)",
        "sinh()",
        "(Math.exp(number) - Math.exp(-number)) / 2",
        "double"
      ]
    },
    {
      "title": "Java Math sqrt() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nReturn the square root of different numbers:\nTry it Yourself »\nDefinition and Usage\nThe sqrt() method returns the square root of a number.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.sqrt(0)); System.out.println(Math.sqrt(1)); System.out.println(Math.sqrt(9)); System.out.println(Math.sqrt(0.64)); System.out.println(Math.sqrt(-9));",
        "public static double sqrt(double number)",
        "sqrt()",
        "double"
      ]
    },
    {
      "title": "Java Math subtractExact() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nSubtract integers using subtractExact():\nDefinition and Usage\nThe subtractExact() method subtracts two integers and throws an exception if the subtraction causes an overflow. This prevents incorrect results that can occur from subtracting really large negative numbers.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.subtractExact(12, 16)); System.out.println(Math.subtractExact(24060, 10000));",
        "public static int subtractExact(int x, int y)",
        "public static long subtractExact(long x, long y)",
        "subtractExact()",
        "int",
        "long",
        "ArithmeticException"
      ]
    },
    {
      "title": "Java Math tan() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nReturn the tangent of different angles:\nTry it Yourself »\nDefinition and Usage\nThe tan() method returns the tangent of an angle.\nNote: Angles are measured in radians.\nTip: You can use the constant Math.PI to make fractions of PI for angles.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.tan(0.5)); System.out.println(Math.tan(-0.5)); System.out.println(Math.tan(1)); System.out.println(Math.tan(-3)); System.out.println(Math.tan(Math.PI/4));",
        "public static double tan(double angle)",
        "tan()",
        "double"
      ]
    },
    {
      "title": "Java Math tanh() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nReturn the hyperbolic tangent of different numbers:\nTry it Yourself »\nDefinition and Usage\nThe tanh() method returns the hyperbolic tangent of a number.\nThe hyperbolic tangent is equivalent to Math.sinh(number) / Math.cosh(number).\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.tanh(3)); System.out.println(Math.tanh(-3)); System.out.println(Math.tanh(0)); System.out.println(Math.tanh(1));",
        "public static double tanh(double number)",
        "tanh()",
        "Math.sinh(number) / Math.cosh(number)",
        "double"
      ]
    },
    {
      "title": "Java Math toDegrees() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nConvert radians to degrees for different angles:\nTry it Yourself »\nDefinition and Usage\nThe toDegrees() method converts an angle from radians to degrees.\nTip: To convert from degrees to radians, look at the toRadians() method.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.toDegrees(1)); System.out.println(Math.toDegrees(Math.PI)); System.out.println(Math.toDegrees(Math.PI / 4)); System.out.println(Math.toDegrees(-0.5236)); System.out.println(Math.toDegrees(6));",
        "public static double toDegrees(double angle)",
        "toDegrees()",
        "double"
      ]
    },
    {
      "title": "Java Math toIntExact() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nConvert long values to int:\nDefinition and Usage\nThe toIntExact() method Converts a long value to an int and throws an exception if the conversion results in an overflow. This prevents incorrect results that can occur from the overflow.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.toIntExact(1500000L)); System.out.println(Math.toIntExact(-32L)); System.out.println(Math.toIntExact(-86345L)); System.out.println(Math.toIntExact(25L));",
        "public static int toIntExact(long x)",
        "long",
        "int",
        "toIntExact()",
        "ArithmeticException"
      ]
    },
    {
      "title": "Java Math toRadians() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nConvert degrees to radians for different angles:\nTry it Yourself »\nDefinition and Usage\nThe toRadians() method converts an angle from degrees to radians.\nTip: To convert from radians to degrees, look at the toDegrees() method.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.toRadians(57)); System.out.println(Math.toRadians(180)); System.out.println(Math.toRadians(45)); System.out.println(Math.toRadians(-30)); System.out.println(Math.toRadians(340));",
        "public static double toRadians(double angle)",
        "toRadians()",
        "double"
      ]
    },
    {
      "title": "Java Math ulp() Method",
      "summary": "❮ Math Methods\nExampleGet your own Java Server\nFind the unit of least precision for different numbers:\nTry it Yourself »\nDefinition and Usage\nThe ulp() method returns the unit of least precision of a number.\nThe unit of least precision is the smallest step you can take up or down from a number. For example, the ulp for 50000000.0f is 4.0, so the next number above it than can be represented with a float data type is 50000004.0f.\nNote: The double data type has a lot more precision than the float data type, so the ulp is smaller.\nNote: Larger numbers have less precision than smaller numbers, that means the ulp is larger.\nNote: The sign of a number does not affect the ulp.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(Math.ulp(1.0)); System.out.println(Math.ulp(1.0f)); System.out.println(Math.ulp(5000000.0)); System.out.println(Math.ulp(5000000.0f)); System.out.println(Math.ulp(50000000.0)); System.out.println(Math.ulp(50000000.0f));",
        "public static double ulp(double number)",
        "public static float ulp(float number)",
        "ulp()",
        "50000000.0f",
        "float",
        "50000004.0f",
        "double"
      ]
    },
    {
      "title": "Java Output Methods",
      "summary": "Output Methods\nThe System.out stream, short for \"output\", is used together with different methods to output values or print text to the console:",
      "examples": [
        "System.out"
      ]
    },
    {
      "title": "Java Output print() Method",
      "summary": "❮ Output Methods\nExampleGet your own Java Server\nPrint some text to the console:\nTry it Yourself »\nDefinition and Usage\nThe print() method prints text or values the console.\nNote: The print() method does not insert a new line at the end of the output. However, the println() method does.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.print(\"Hello World! \"); System.out.print(\"I will print on the same line.\");",
        "System.out.print(argument);",
        "print()",
        "println()"
      ]
    },
    {
      "title": "Java Output printf() Method",
      "summary": "❮ Output Methods\nExampleGet your own Java Server\nPrint some formatted text to the console.\nThe %s character is a placeholder for the string \"World\":\nTry it Yourself »\nNote: You will find more \"Try it Yourself\" examples at the bottom of this page.\nDefinition and Usage\nThe printf() method outputs a formatted string.\nData from the additional arguments is formatted and written into placeholders in the formatted string, which are marked by a % symbol. The way in which arguments are formatted depends on the sequence of characters that follows the % symbol.\nPlaceholders\nThe placeholders have the form %[arg$][flags][width][.precision]conversion. The components in [square brackets] are optional.\nAn explanation of each of the components:\narg$ - Optional. A number followed by a $ sign which indicates which of the additional arguments to use, argument numbers start at 1. This can be replaced with a < which specifies that the argument from the previous placeholder should be used.\nflags - Optional. A sequence of any of the following characters:\n- - Makes the output left-justified by adding any padding spaces to the right instead of to the left.\n+ - Causes positive numbers to always be prefixed with \"+\".\n- (A space character) This prefixes a space to positive numbers, primarily so that the digits can be lined up with the digits of negative numbers.\n0 - Pads numbers with zeroes on the left.\n, - Groups digits (for example by thousands) and puts separators between the groups.\n- - Makes the output left-justified by adding any padding spaces to the right instead of to the left.\n+ - Causes positive numbers to always be prefixed with \"+\".\n- (A space character) This prefixes a space to positive numbers, primarily so that the digits can be lined up with the digits of negative numbers.\n0 - Pads numbers with zeroes on the left.\n, - Groups digits (for example by thousands) and puts separators between the groups.\nwidth - Optional. A whole number specifying the minimum number of characters that the output should occupy. If necessary, spaces are added to the left to reach this number, or to the right if the - flag is used.\n.precision Optional. A . followed by a whole number indicating how many decimal digits to show in the formatted data.\nconversion - Required. A character which indicates how an argument's data should be represented. If the character is uppercase the data will be formatted in uppercase where possible. The list of possible characters is shown in the table below.\nList of conversions\nNote: For any data other than positive integers this does not represent its real value.\nThe following characters can be used for date and time formatting:\nH - 24-hour format of an hour (00 to 23)\nI - 12-hour format of an hour (01 to 12)\nk - 24-hour format of an hour (0 to 23)\nl (lowercase 'L') - 12-hour format of an hour (1 to 12)\nM - Minutes with leading zeros (00 to 59)\nS - Seconds with leading zeros (00 to 59) (The value 60 may occur for leap seconds)\nL - Milliseconds with leading zeroes (000 to 999)\nN - Nanoseconds with leading zeroes (000000000 to 999999999)\np - \"am\", \"pm\", \"AM\" or \"PM\" to indicate morning or afternoon\nz - Difference to Greenwich time (Example: -0800)\nZ - Timezone abbreviations (Examples: EST, MDT)\ns - The seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\nQ - The milliseconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\nB - A full textual representation of a month (January through December)\nb or h - A short textual representation of a month (three letters)\nA - A full textual representation of a day (Example: Monday)\na - A short textual representation of a day (Example: Mon)\nC - The first two digits of the year (For 1970, \"19\" would be shown)\nY - A four digit representation of a year\ny - A two digit representation of a year\nj - The day of the year with leading zeroes (001 to 366)\nm - A numeric representation of a month (01 to 12)\nd - The day of the month (01 to 31)\ne - The day of the month without leading zeros (1 to 31)\nR - The time in 24-hour format (Example: 21:30)\nT - The time in 24-hour format with seconds (Example: 21:30:02)\nr - The time in 12-hour format with seconds (Example: 09:30:02 PM) (\"AM\" and \"PM\" are always uppercase)\nD - Date representation as month/day/year (Example: 12/17/23)\nF - Date representation as year-month-day (Example: 2023-12-17)\nc - Full date and time (Example: Thu Mar 28 10:51:00 EDT 2024)\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nPrint a formatted text containing a string and an integer:\nTry it Yourself »\nExample\nFormat a floating point number in different ways:\nTry it Yourself »\nExample\nA placeholder which uses all of the components:\nThis is how each part of the placeholder %2$,3.2f works:\n2$ indicates that the value of the second argument is used\n, indicates that digits should be grouped (usually by thousands)\n3 indicates that the representation of the data should be at least 3 characters long\n.2 indicates that there should be two digits after the decimal point\nf indicates that the data is being represented as a floating point number\nTry it Yourself »\nExample\nUse arguments in a different order:\nTry it Yourself »\nExample\nFormat a date from a Unix timestamp:\nTry it Yourself »\nExample\nRepresent characters from their unicode code points:\nTry it Yourself »",
      "examples": [
        "System.out.printf(\"Hello %s!\", \"World\");",
        "System.out.printf(\"Hello %s! One kilobyte is %,d bytes.\", \"World\", 1024);",
        "// Default System.out.printf(\"%f%n\", 123456.78); // Two decimal digits System.out.printf(\"%.2f%n\", 123456.78); // No decimal digits System.out.printf(\"%.0f%n\", 123456.78); // No decimal digits but keep the decimal point System.out.printf(\"%#.0f%n\", 123456.78); // Group digits System.out.printf(\"%,.2f%n\", 123456.78); // Scientific notation with two digits of precision System.out.printf(\"%.2e\", 123456.78);",
        "System.out.printf(\"%2$,3.2f %1$s\", \"meters\", 1260.5052);",
        "System.out.printf(\"%3$c %2$c %1$c\", 'a', 'b', 'c');",
        "long date = 1711638903488L; // Unix timestamp (number of milliseconds since January 1, 1970) // Time System.out.printf(\"%tl:%<tM %<tp%n\", date); // Month and day System.out.printf(\"%tB %<te%n\", date); // Full date representation System.out.printf(\"%tc%n\", date);",
        "// Represent characters from their unicode code points System.out.printf(\"%c%c%c%c%c%n\", 72, 101, 108, 108, 111); // Force unicode characters to uppercase System.out.printf(\"%C%C%C%C%C\", 72, 101, 108, 108, 111);",
        "System.out.printf(locale, formatString, args)",
        "%s",
        "printf()",
        "%",
        "%[arg$][flags][width][.precision]conversion",
        "arg$",
        "<",
        "flags",
        "-",
        "+",
        "0",
        ",",
        "width",
        ".precision",
        ".",
        "conversion",
        "n",
        "b",
        "B",
        "c",
        "C",
        "s",
        "S",
        "d",
        "h",
        "H",
        "o",
        "x",
        "X",
        "e",
        "E",
        "f",
        "g",
        "G",
        "a",
        "A",
        "t",
        "T",
        "PrintStream",
        "IllegalFormatException",
        "%2$,3.2f",
        "2$",
        "3",
        ".2"
      ]
    },
    {
      "title": "Java Output println() Method",
      "summary": "❮ Output Methods\nExampleGet your own Java Server\nPrint some text to the console, followed by a new line:\nTry it Yourself »\nDefinition and Usage\nThe println() method prints text or values to the console, followed by a new line.\nThis method is often preferred over the print() method, as the new line makes the output of code easier to read.\nSyntax\nParameter Values\nTechnical Details",
      "examples": [
        "System.out.println(\"Hello World!\"); System.out.println(\"I will print a new line.\");",
        "System.out.println(argument);",
        "println()",
        "print()"
      ]
    },
    {
      "title": "Java Arrays Class",
      "summary": "The Java Arrays class (found in java.util), has methods that allow you to manipulate arrays.\nArrays Methods\nA list of popular methods of the Arrays Class can be found in the table below:\nProperties\nThe length property is a built-in Java property, and does not belong to the Arrays class.\nRelated Pages\nJava Arrays Tutorial",
      "examples": [
        "Arrays",
        "java.util",
        "length"
      ]
    },
    {
      "title": "Java Arrays.compare() Method",
      "summary": "❮ Arrays Methods\nExampleGet your own Java Server\nCompare two arrays:\nTry it Yourself »\nDefinition and Usage\nThe compare() method compares two arrays lexicographically.\nSyntax\nParameter Values\nTechnical Details\nRelated Pages\nJava Arrays Tutorial",
      "examples": [
        "String[] cars = {\"Volvo\", \"BMW\", \"Tesla\"}; String[] cars2 = {\"Volvo\", \"BMW\", \"Tesla\"}; System.out.println(Arrays.compare(cars, cars2));",
        "Arrays.compare(array1, array2)",
        "compare()",
        "0"
      ]
    },
    {
      "title": "Java Arrays.equals() Method",
      "summary": "❮ Arrays Methods\nExampleGet your own Java Server\nFind out if two arrays are equal:\nTry it Yourself »\nDefinition and Usage\nThe equals() method checks whether two arrays are equal.\nNote: Two arrays are consided equal if they share the same elements in the same order.\nSyntax\nParameter Values\nTechnical Details\nRelated Pages\nJava Arrays Tutorial",
      "examples": [
        "String[] cars = {\"Volvo\", \"BMW\", \"Tesla\"}; String[] cars2 = {\"Volvo\", \"BMW\", \"Tesla\"}; System.out.println(Arrays.equals(cars, cars2));",
        "Arrays.compare(array1, array2)",
        "equals()",
        "true",
        "false"
      ]
    },
    {
      "title": "Java Arrays.sort() Method",
      "summary": "❮ Arrays Methods\nExampleGet your own Java Server\nSort an array of strings alphabetically:\nTry it Yourself »\nDefinition and Usage\nThe sort() method sorts an array in ascending order.\nThis method sorts arrays of strings alphabetically, and arrays of integers numerically.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nSort an integer array numerically:\nTry it Yourself »\nExample\nSort an integer array numerically, but only sort from index 1 to 3:\nTry it Yourself »\nRelated Pages\nJava Arrays Tutorial",
      "examples": [
        "String[] cars = {\"Volvo\", \"BMW\", \"Tesla\", \"Ford\", \"Fiat\", \"Mazda\", \"Audi\"}; Arrays.sort(cars);",
        "int[] myNum = {50, 10, 25, 1, 17, 99, 33}; Arrays.sort(myNum);",
        "int[] myNum = {50, 10, 25, 1, 17, 99, 33}; // This will only sort the integers 10, 25, 1 and 17 from the myNum array Arrays.sort(myNum, 1, 4);",
        "Arrays.sort(array)",
        "Arrays.sort(array, start, end)",
        "sort()",
        "java.util"
      ]
    },
    {
      "title": "Java Arrays.fill() Method",
      "summary": "❮ Arrays Methods\nExampleGet your own Java Server\nFill all the elements in an array with a \"Kiwi\" value:\nTry it Yourself »\nDefinition and Usage\nThe fill() method fills an array with a specified value.\nNote: The value must be of the same data type as the array.\nTip: Start and end position can be specified. If not, all elements will be filled.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nFill the last two elements:\nTry it Yourself »\nRelated Pages\nJava Arrays Tutorial",
      "examples": [
        "String[] fruits = {\"Banana\", \"Orange\", \"Apple\", \"Mango\"}; Arrays.fill(fruits, \"Kiwi\");",
        "String[] fruits = {\"Banana\", \"Orange\", \"Apple\", \"Mango\"}; Arrays.fill(fruits, 2, 4, \"Kiwi\");",
        "Arrays.fill(array, value)",
        "Arrays.fill(array, start, end, value)",
        "fill()",
        "java.util"
      ]
    },
    {
      "title": "Java Array length Property",
      "summary": "❮ Arrays Methods\nExampleGet your own Java Server\nFind out how many elements an array has:\nTry it Yourself »\nDefinition and Usage\nThe length property returns the length of an array.\nThis is a built-in Java property, and does not belong to the Java Arrays Class.\nNote: The length property must not be mistaken with the length() method that is used for Strings.\nSyntax\nRelated Pages\nJava Arrays Tutorial",
      "examples": [
        "String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; System.out.println(cars.length);",
        "array.length",
        "length",
        "length()"
      ]
    },
    {
      "title": "Java ArrayList Methods",
      "summary": "All ArrayList Methods\nA list of all ArrayList methods can be found in the table below.\nSome methods use the type of the ArrayList's items as a parameter or return value. This type will be referred to as T in the table.\nRelated Pages\nJava Arrays Tutorial\nJava ArrayList Tutorial",
      "examples": [
        "ArrayList",
        "Iterator",
        "ListIterator",
        "Spliterator"
      ]
    },
    {
      "title": "Java ArrayList add() Method",
      "summary": "❮ ArrayList Methods\nExampleGet your own Java Server\nAdd an item to a list:\nTry it Yourself »\nDefinition and Usage\nThe add() method adds an item to the list.\nIf an index is provided then the new item will be placed at the specified index, pushing all of the following elements in the list ahead by one.\nIf an index is not provided then the new item will be placed at the end of the list.\nSyntax\nOne of the following:\nT refers to the data type of items in the list.\nParameter Values\nTechnical Details\nMore Examples\nExample\nAdd an item at a specified position in the list:\nTry it Yourself »\nRelated Pages\nJava Arrays Tutorial\nJava ArrayList Tutorial",
      "examples": [
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars); } }",
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.add(2, \"Toyota\"); System.out.println(cars); } }",
        "public boolean add(T item)",
        "public void add(int index, T item)",
        "add()",
        "T",
        "true",
        "false",
        "IndexOutOfBoundsException"
      ]
    },
    {
      "title": "Java ArrayList add() Method",
      "summary": "❮ ArrayList Methods\nExampleGet your own Java Server\nAdd items from one list into another:\nTry it Yourself »\nDefinition and Usage\nThe addAll() method adds all of the items from a collection to the list.\nIf an index is provided then the new items will be placed at the specified index, pushing all of the following elements in the list ahead.\nIf an index is not provided then the new items will be placed at the end of the list.\nSyntax\nOne of the following:\nT refers to the data type of items in the list.\nParameter Values\nTechnical Details\nMore Examples\nExample\nAdd items at a specified position in the list:\nTry it Yourself »\nRelated Pages\nJava Arrays Tutorial\nJava ArrayList Tutorial",
      "examples": [
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); ArrayList<String> brands = new ArrayList<String>(); brands.add(\"Microsoft\"); brands.add(\"W3Schools\"); brands.add(\"Apple\"); brands.addAll(cars); System.out.println(brands); } }",
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); ArrayList<String> brands = new ArrayList<String>(); brands.add(\"Microsoft\"); brands.add(\"W3Schools\"); brands.add(\"Apple\"); brands.addAll(1, cars); System.out.println(brands); } }",
        "public boolean addAll(Collection<T> items)",
        "public boolean addAll(int index, Collection<T> items)",
        "addAll()",
        "T",
        "true",
        "false",
        "IndexOutOfBoundsException",
        "NullPointerException"
      ]
    },
    {
      "title": "Java ArrayList clear() Method",
      "summary": "❮ ArrayList Methods\nExampleGet your own Java Server\nRemove all items from a list:\nTry it Yourself »\nDefinition and Usage\nThe clear() removes all items from the list.\nSyntax\nRelated Pages\nJava Arrays Tutorial\nJava ArrayList Tutorial",
      "examples": [
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.clear(); System.out.println(cars); } }",
        "public void clear()",
        "clear()"
      ]
    },
    {
      "title": "Java ArrayList clone() Method",
      "summary": "❮ ArrayList Methods\nExampleGet your own Java Server\nCreate a copy of a list:\nTry it Yourself »\nDefinition and Usage\nThe clone() method returns a copy of the ArrayList as an Object.\nThis creates a \"shallow\" copy, which means that copies of objects in the list are not created, instead the list has references to the same objects that are in the original list.\nNote: Since the return type is Object, it must be type casted in order to use it as an ArrayList as shown in the example above.\nSyntax\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava ArrayList Tutorial",
      "examples": [
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); ArrayList cars2 = (ArrayList)cars.clone(); cars2.set(0, \"Toyota\"); System.out.println(cars); System.out.println(cars2); } }",
        "public Object clone()",
        "clone()",
        "ArrayList",
        "Object"
      ]
    },
    {
      "title": "Java ArrayList contains() Method",
      "summary": "❮ ArrayList Methods\nExampleGet your own Java Server\nCheck if an item exists in a list:\nTry it Yourself »\nDefinition and Usage\nThe contains() method returns true if an item exists in a list and false otherwise.\nSyntax\nParameter Values\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava ArrayList Tutorial",
      "examples": [
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.contains(\"BMW\")); System.out.println(cars.contains(\"Toyota\")); } }",
        "public boolean contains(Object item)",
        "contains()",
        "true",
        "false"
      ]
    },
    {
      "title": "Java ArrayList ensureCapacity() Method",
      "summary": "❮ ArrayList Methods\nExampleGet your own Java Server\nIncrease the capacity of a list to 15 items:\nTry it Yourself »\nDefinition and Usage\nThe ensureCapacity() method increases the capacity of a list to a specified amount, if necessary.\nThis method does not have a visible effect but it can make code more efficient.\nWhen methods such as add() and addAll() are called, if the capacity of a list is not large enough then some extra work is done to add enough space for the new items. It takes a bit of time to do this, so having this happen with every add() call is not ideal.\nIf you know approximately how many items you are going to add, the ensureCapacity() method allows you to increase the capacity of the list just once for multiple add() calls.\nSyntax\nParameter Values\nRelated Pages\nJava Arrays Tutorial\nJava ArrayList Tutorial",
      "examples": [
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<Integer>(); list.ensureCapacity(15); for (int i = 1; i <= 15; i++) { list.add(i); } System.out.println(list); } }",
        "public void add(int capacity)",
        "ensureCapacity()",
        "add()",
        "addAll()"
      ]
    },
    {
      "title": "Java ArrayList forEach() Method",
      "summary": "❮ ArrayList Methods\nExampleGet your own Java Server\nUse a lambda expression in the ArrayList's forEach() method to print every item in the list:\nTry it Yourself »\nDefinition and Usage\nThe forEach() method performs an action on every item in a list. The action can be defined by a lambda expression that is compatible with the accept() method of Java's Consumer interface.\nTo learn about lambda expressions, see our Java Lambda Expression tutorial.\nSyntax\nParameter Values\nRelated Pages\nJava Arrays Tutorial\nJava ArrayList Tutorial\nJava Lambda Expressions Tutorial",
      "examples": [
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<Integer> numbers = new ArrayList<Integer>(); numbers.add(5); numbers.add(9); numbers.add(8); numbers.add(1); numbers.forEach( (n) -> { System.out.println(n); } ); } }",
        "public void forEach(Consumer action)",
        "ArrayList",
        "forEach()",
        "accept()",
        "Consumer"
      ]
    },
    {
      "title": "Java ArrayList get() Method",
      "summary": "❮ ArrayList Methods\nExampleGet your own Java Server\nOutput the value of an item in a list:\nTry it Yourself »\nDefinition and Usage\nThe get() method returns the item at a specified position in the list.\nSyntax\nT refers to the data type of items in the list.\nParameter Values\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava ArrayList Tutorial",
      "examples": [
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.get(0)); } }",
        "public T get(int index)",
        "get()",
        "T",
        "IndexOutOfBoundsException"
      ]
    },
    {
      "title": "Java ArrayList indexOf() Method",
      "summary": "❮ ArrayList Methods\nExampleGet your own Java Server\nFind the position of an item in a list:\nTry it Yourself »\nDefinition and Usage\nThe indexOf() method returns the position of the first occurrence of a value in the list. If the item is not found in the list then it returns -1.\nSyntax\nParameter Values\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava ArrayList Tutorial",
      "examples": [
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.indexOf(\"Ford\")); } }",
        "public int indexOf(Object item)",
        "indexOf()"
      ]
    },
    {
      "title": "Java ArrayList isEmpty() Method",
      "summary": "❮ ArrayList Methods\nExampleGet your own Java Server\nCheck if a list is empty:\nTry it Yourself »\nDefinition and Usage\nThe isEmpty() method returns true if a list has no items and false otherwise.\nSyntax\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava ArrayList Tutorial",
      "examples": [
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); System.out.println(cars.isEmpty()); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.isEmpty()); } }",
        "public boolean isEmpty()",
        "isEmpty()",
        "true",
        "false"
      ]
    },
    {
      "title": "Java ArrayList iterator() Method",
      "summary": "❮ ArrayList Methods\nExampleGet your own Java Server\nUse an iterator to loop through a list:\nTry it Yourself »\nDefinition and Usage\nThe iterator() method returns an Iterator for the list.\nTo learn how to use iterators, see our Java Iterator tutorial.\nSyntax\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava ArrayList Tutorial\nJava Iterator Tutorial",
      "examples": [
        "import java.util.ArrayList; import java.util.Iterator; public class Main { public static void main(String[] args) { // Make a collection ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Get the iterator Iterator<String> it = cars.iterator(); // Loop through a collection while(it.hasNext()) { System.out.println(it.next()); } } }",
        "public Iterator iterator()",
        "iterator()",
        "Iterator"
      ]
    },
    {
      "title": "Java ArrayList lastIndexOf() Method",
      "summary": "❮ ArrayList Methods\nExampleGet your own Java Server\nFind the first and last position of an item in a list:\nTry it Yourself »\nDefinition and Usage\nThe lastIndexOf() method returns the position of the last occurrence of a value in the list. If the item is not found in the list then it returns -1.\nSyntax\nParameter Values\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava ArrayList Tutorial",
      "examples": [
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"Ford\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.indexOf(\"Ford\")); System.out.println(cars.lastIndexOf(\"Ford\")); } }",
        "public int lastIndexOf(Object item)",
        "lastIndexOf()"
      ]
    },
    {
      "title": "Java ArrayList listIterator() Method",
      "summary": "❮ ArrayList Methods\nExampleGet your own Java Server\nUse a ListIterator to loop forward and backward through a list:\nTry it Yourself »\nDefinition and Usage\nThe listIterator() method returns a ListIterator for the list.\nTo learn how to use iterators, see our Java Iterator tutorial.\nThe ListIterator differs from an Iterator in that it can also traverse the list backwards.\nSyntax\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava ArrayList Tutorial\nJava Iterator Tutorial",
      "examples": [
        "import java.util.ArrayList; import java.util.ListIterator; public class Main { public static void main(String[] args) { // Make a collection ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Get the iterator ListIterator<String> it = cars.listIterator(); // Loop through the list while(it.hasNext()) { System.out.println(it.next()); } System.out.println(\"---\"); // Loop backwards through the list while(it.hasPrevious()) { System.out.println(it.previous()); } } }",
        "public ListIterator listIterator()",
        "ListIterator",
        "listIterator()",
        "Iterator"
      ]
    },
    {
      "title": "Java ArrayList remove() Method",
      "summary": "❮ ArrayList Methods\nExampleGet your own Java Server\nRemove items from a list:\nTry it Yourself »\nDefinition and Usage\nThe remove() method removes an item from the list, either by position or by value. If a position is specified then this method returns the removed item. If a value is specified then it returns true if the value was found and false otherwise.\nIf a value is specified and multiple elements in the list have the same value then only the first one is deleted.\nIf the list contains integers and you want to delete an integer based on its value you will need to pass an Integer object. See More Examples below for an example.\nSyntax\nOne of the following:\nT refers to the data type of items in the list.\nParameter Values\nTechnical Details\nMore Examples\nExample\nRemove an integer from the list by position and by value:\nTry it Yourself »\nRelated Pages\nJava Arrays Tutorial\nJava ArrayList Tutorial",
      "examples": [
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.remove(0); System.out.println(cars); } }",
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<Integer>(); list.add(5); list.add(8); list.add(9); list.add(1); list.remove(Integer.valueOf(1)); // Remove by object list.remove(1); // Remove by index System.out.println(list); } }",
        "public T remove(int index)",
        "public boolean remove(Object item)",
        "remove()",
        "true",
        "false",
        "Integer",
        "T",
        "IndexOutOfBoundsException",
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<Integer>(); list.add(5); list.add(8); list.add(9); list.add(1); list.remove(Integer.valueOf(1)); // Remove by object list.remove(1); // Remove by index System.out.println(list);"
      ]
    },
    {
      "title": "Java ArrayList removeAll() Method",
      "summary": "❮ ArrayList Methods\nExampleGet your own Java Server\nRemove all items from a list:\nTry it Yourself »\nDefinition and Usage\nThe removeAll() method removes all items from a list which belong to a specified collection.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nRemove multiple items from a list:\nTry it Yourself »\nRelated Pages\nJava Arrays Tutorial\nJava ArrayList Tutorial",
      "examples": [
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.add(\"Toyota\"); cars.removeAll(cars); System.out.println(cars); } }",
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.add(\"Toyota\"); ArrayList<String> remove = new ArrayList<String>(); remove.add(\"Volvo\"); remove.add(\"Ford\"); remove.add(\"Mazda\"); cars.removeAll(remove); System.out.println(cars); } }",
        "public boolean removeAll(Collection items)",
        "removeAll()",
        "true",
        "false",
        "NullPointerException"
      ]
    },
    {
      "title": "Java ArrayList removeIf() Method",
      "summary": "❮ ArrayList Methods\nExampleGet your own Java Server\nRemove all even numbers from a list:\nTry it Yourself »\nDefinition and Usage\nThe removeIf() method removes all elements from this list for which a condition is satisfied. The condition can be defined by the return value of a lambda expression that is compatible with the test() method of Java's Predicate interface.\nTo learn about lambda expressions, see our Java Lambda Expression tutorial.\nSyntax\nParameter Values\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava ArrayList Tutorial",
      "examples": [
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<Integer> numbers = new ArrayList<Integer>(); numbers.add(5); numbers.add(9); numbers.add(8); numbers.add(6); numbers.add(1); numbers.removeIf( n -> n % 2 == 0 ); System.out.println(numbers); } }",
        "public boolean removeIf(Predicate condition)",
        "removeIf()",
        "test()",
        "Predicate",
        "true",
        "false"
      ]
    },
    {
      "title": "Java ArrayList replaceAll() Method",
      "summary": "❮ ArrayList Methods\nExampleGet your own Java Server\nAdd 1 to every number in a list:\nTry it Yourself »\nDefinition and Usage\nThe replaceAll() method replaces every item in a list with the result of performing an operation on the item. The operation can be defined by a lambda expression that is compatible with Java's UnaryOperator interface.\nTo learn about lambda expressions, see our Java Lambda Expression tutorial.\nSyntax\nParameter Values\nRelated Pages\nJava Arrays Tutorial\nJava ArrayList Tutorial\nJava Lambda Expression Tutorial",
      "examples": [
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<Integer> numbers = new ArrayList<Integer>(); numbers.add(5); numbers.add(9); numbers.add(8); numbers.add(6); numbers.add(1); numbers.replaceAll( n -> n + 1 ); System.out.println(numbers); } }",
        "public void replaceAll(UnaryOperator operator)",
        "replaceAll()",
        "UnaryOperator"
      ]
    },
    {
      "title": "Java ArrayList retainAll() Method",
      "summary": "❮ ArrayList Methods\nExampleGet your own Java Server\nRemove items from a list which do not belong to a specified collection:\nTry it Yourself »\nDefinition and Usage\nThe retainAll() method removes all items from a list which do not belong to a specified collection.\nSyntax\nParameter Values\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava ArrayList Tutorial",
      "examples": [
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.add(\"Toyota\"); ArrayList<String> valid = new ArrayList<String>(); valid.add(\"Volvo\"); valid.add(\"Ford\"); valid.add(\"Mazda\"); cars.retainAll(valid); System.out.println(cars); } }",
        "public boolean retainAll(Collection items)",
        "retainAll()",
        "true",
        "false",
        "NullPointerException"
      ]
    },
    {
      "title": "Java ArrayList set() Method",
      "summary": "❮ ArrayList Methods\nExampleGet your own Java Server\nReplace an item in a list:\nTry it Yourself »\nDefinition and Usage\nThe set() method replaces an item at a specified position in the list and returns the item that was previously at that position.\nSyntax\nT refers to the data type of items in the list.\nParameter Values\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava ArrayList Tutorial",
      "examples": [
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.set(0, \"Opel\"); System.out.println(cars); } }",
        "public T set(int index, T item)",
        "set()",
        "T",
        "IndexOutOfBoundsException"
      ]
    },
    {
      "title": "Java ArrayList size() Method",
      "summary": "❮ ArrayList Methods\nExampleGet your own Java Server\nFind out the size of a list:\nTry it Yourself »\nDefinition and Usage\nThe size() method indicates how many elements are in the list.\nSyntax\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava ArrayList Tutorial",
      "examples": [
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.size()); } }",
        "public int size()",
        "size()"
      ]
    },
    {
      "title": "Java ArrayList sort() Method",
      "summary": "❮ ArrayList Methods\nExampleGet your own Java Server\nSort a list in alphabetical order:\nTry it Yourself »\nDefinition and Usage\nThe sort() method sorts items in the list. A Comparator can be used to compare pairs of elements. The comparator can be defined by a lambda expression which is compatible with the compare() method of Java's Comparator interface.\nIf null is passed into the method then items will be sorted naturally based on their data type (e.g. alphabetically for strings, numerically for numbers). Non-primitive types must implement Java's Comparable interface in order to be sorted without a comparator.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nUse a lambda expression to sort a list in reverse alphabetical order:\nTry it Yourself »\nRelated Pages\nJava Arrays Tutorial\nJava ArrayList Tutorial",
      "examples": [
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.sort(null); System.out.println(cars); } }",
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.sort( (a, b) -> { return -1 * a.compareTo(b); } ); System.out.println(cars); } }",
        "public void sort(Comparator compare)",
        "sort()",
        "Comparator",
        "compare()",
        "null",
        "Comparable"
      ]
    },
    {
      "title": "Java ArrayList spliterator() Method",
      "summary": "❮ ArrayList Methods\nExampleGet your own Java Server\nUse a Spliterator to loop through items in a list:\nTry it Yourself »\nNote: The syntax while( it1.tryAdvance( (n) -> { System.out.println(n); } ) ); is equivalent to:\nDefinition and Usage\nThe spliterator() method returns a Spliterator for the list.\nA spliterator is a special type of iterator. To learn how to use iterators, see our Java Iterator tutorial.\nThe Spliterator is considerably different from an ordinary iterator. The purpose of a spliterator is to separate a collection into smaller pieces so that each piece can be processed by a separate thread. The Spliterator interface has two important methods:\ntrySplit() - Returns a new spliterator which can iterate through (usually and approximately) half of the elements that the original spliterator has access to, while the original spliterator can iterate through the remaining half.\ntryAdvance(Consumer action) - Moves to the next item that is available to the spliterator and tries to perform an action on it. If there is no next item then it returns false. The action can be defined by a lambda expression.\nSyntax\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava ArrayList Tutorial\nJava Iterator Tutorial",
      "examples": [
        "import java.util.ArrayList; import java.util.Spliterator; public class Main { public static void main(String[] args) { // Make a collection ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Get the spliterator and split it Spliterator<String> it1 = cars.spliterator(); Spliterator<String> it2 = it1.trySplit(); // Loop through the first spliterator System.out.println(\"First spliterator\"); while( it1.tryAdvance( (n) -> { System.out.println(n); } ) ); // Loop through the second spliterator System.out.println(\"\\nSecond spliterator\"); while( it2.tryAdvance( (n) -> { System.out.println(n); } ) ); } }",
        "boolean x = it1.tryAdvance( (n) -> { System.out.println(n); }); while(x) { x = it1.tryAdvance( (n) -> { System.out.println(n); }); }",
        "public Spliterator spliterator()",
        "Spliterator",
        "while( it1.tryAdvance( (n) -> { System.out.println(n); } ) );",
        "spliterator()",
        "trySplit()",
        "tryAdvance(Consumer action)",
        "false"
      ]
    },
    {
      "title": "Java ArrayList subList() Method",
      "summary": "❮ ArrayList Methods\nExampleGet your own Java Server\nGet a sublist from a list:\nTry it Yourself »\nDefinition and Usage\nThe subList() method returns a new list (referred to as a sublist) which contains the items of the list between two indices.\nNote: The item at the last index is not included in the sublist.\nNote: The sublist is a view of the original list, which means that changing the sublist also changes the original list.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nA list can be changed by changing a sublist:\nTry it Yourself »\nRelated Pages\nJava Arrays Tutorial\nJava ArrayList Tutorial",
      "examples": [
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println( cars.subList(1, 3) ); } }",
        "import java.util.ArrayList; import java.util.List; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); List<String> sublist = cars.subList(1, 3); sublist.set(0, \"Toyota\"); System.out.println(cars); } }",
        "public List sublist(int start, int end)",
        "subList()",
        "List",
        "IndexOutOfBoundsException",
        "IllegalArgumentException"
      ]
    },
    {
      "title": "Java ArrayList toArray() Method",
      "summary": "❮ ArrayList Methods\nExampleGet your own Java Server\nGet an array from an ArrayList:\nTry it Yourself »\nDefinition and Usage\nThe toArray() method returns an array containing all of the items in the list.\nIf no argument is passed then the type of the returned array will be Object. If an array is passed as an argument then this method will return an array with the same data type.\nIf the array in the argument is large enough to contain all of the list items then this method will return the argument itself after writing the list items into it.\nSyntax\nOne of the following:\nT refers to the data type of items in the list.\nParameter Values\nTechnical Details\nMore Examples\nExample\nSpecify the return type of toArray():\nTry it Yourself »\nRelated Pages\nJava Arrays Tutorial\nJava ArrayList Tutorial",
      "examples": [
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList\ncars = new ArrayList\n(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); Object[] carsArray = cars.toArray(); for(Object item : carsArray) { System.out.println(item); } } }",
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); String[] carsArray = new String[4]; carsArray = cars.toArray(carsArray); for(String item : carsArray) { System.out.println(item); } } }",
        "public Object[] toArray()",
        "public T[] toArray(T[] array)",
        "ArrayList",
        "toArray()",
        "Object",
        "T",
        "ArrayStoreException",
        "NullPointerException",
        "null"
      ]
    },
    {
      "title": "Java ArrayList trimToSize() Method",
      "summary": "❮ ArrayList Methods\nExampleGet your own Java Server\nReduce the capacity of a list to exactly the size of the list:\nTry it Yourself »\nDefinition and Usage\nThe trimToSize() method reduces the capacity of a list to fit exactly the number of items that the list contains.\nThis method does not have a visible effect but it can can be used to reduce the memory usage of the list.\nWhen an ArrayList is created, capacity for 10 items is reserved unless another number is specified in the constructor. Even if the list does not have 10 items, this space is still reserved. Removing items from a list may leave the space for those items reserved. When you are not using of the capacity of an ArrayList then there is some wasted memory which can accumulate if your program makes use of many ArrayLists. You can use the trimToSize() method to recover the unused memory.\nSyntax\nRelated Pages\nJava Arrays Tutorial\nJava ArrayList Tutorial",
      "examples": [
        "import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.trimToSize(); System.out.println(cars); } }",
        "public void trimToSize()",
        "trimToSize()",
        "ArrayList"
      ]
    },
    {
      "title": "Java LinkedList Methods",
      "summary": "All LinkedList Methods\nA list of all LinkedList methods can be found in the table below.\nSome methods use the type of the LinkedList's items as a parameter or return value. This type will be referred to as T in the table.\nRelated Pages\nJava Arrays Tutorial\nJava LinkedList Tutorial\nJava ArrayList Tutorial",
      "examples": [
        "LinkedList",
        "getFirst()",
        "Iterator",
        "ListIterator",
        "peek()",
        "poll()",
        "removeFirst()",
        "addFirst()",
        "Spliterator"
      ]
    },
    {
      "title": "Java LinkedList add() Method",
      "summary": "❮ LinkedList Methods\nExampleGet your own Java Server\nAdd an item to a list:\nTry it Yourself »\nDefinition and Usage\nThe add() method adds an item to the list.\nIf an index is provided then the new item will be placed at the specified index, pushing all of the following elements in the list ahead by one.\nIf an index is not provided then the new item will be placed at the end of the list.\nSyntax\nOne of the following:\nT refers to the data type of items in the list.\nParameter Values\nTechnical Details\nMore Examples\nExample\nAdd an item at a specified position in the list:\nTry it Yourself »\nRelated Pages\nJava Arrays Tutorial\nJava LinkedList Tutorial",
      "examples": [
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars); } }",
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.add(2, \"Toyota\"); System.out.println(cars); } }",
        "public boolean add(T item)",
        "public void add(int index, T item)",
        "add()",
        "T",
        "true",
        "false",
        "IndexOutOfBoundsException"
      ]
    },
    {
      "title": "Java LinkedList add() Method",
      "summary": "❮ LinkedList Methods\nExampleGet your own Java Server\nAdd items from one list into another:\nTry it Yourself »\nDefinition and Usage\nThe addAll() method adds all of the items from a collection to the list.\nIf an index is provided then the new items will be placed at the specified index, pushing all of the following elements in the list ahead.\nIf an index is not provided then the new items will be placed at the end of the list.\nSyntax\nOne of the following:\nT refers to the data type of items in the list.\nParameter Values\nTechnical Details\nMore Examples\nExample\nAdd items at a specified position in the list:\nTry it Yourself »\nRelated Pages\nJava Arrays Tutorial\nJava LinkedList Tutorial",
      "examples": [
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); LinkedList<String> brands = new LinkedList<String>(); brands.add(\"Microsoft\"); brands.add(\"W3Schools\"); brands.add(\"Apple\"); brands.addAll(cars); System.out.println(brands); } }",
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); LinkedList<String> brands = new LinkedList<String>(); brands.add(\"Microsoft\"); brands.add(\"W3Schools\"); brands.add(\"Apple\"); brands.addAll(1, cars); System.out.println(brands); } }",
        "public boolean addAll(Collection<T> items)",
        "public boolean addAll(int index, Collection<T> items)",
        "addAll()",
        "T",
        "true",
        "false",
        "IndexOutOfBoundsException",
        "NullPointerException"
      ]
    },
    {
      "title": "Java LinkedList clear() Method",
      "summary": "❮ LinkedList Methods\nExampleGet your own Java Server\nRemove all items from a list:\nTry it Yourself »\nDefinition and Usage\nThe clear() removes all items from the list.\nSyntax\nRelated Pages\nJava Arrays Tutorial\nJava LinkedList Tutorial",
      "examples": [
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.clear(); System.out.println(cars); } }",
        "public void clear()",
        "clear()"
      ]
    },
    {
      "title": "Java LinkedList clone() Method",
      "summary": "❮ LinkedList Methods\nExampleGet your own Java Server\nCreate a copy of a list:\nTry it Yourself »\nDefinition and Usage\nThe clone() method returns a copy of the LinkedList as an Object.\nThis creates a \"shallow\" copy, which means that copies of objects in the list are not created, instead the list has references to the same objects that are in the original list.\nNote: Since the return type is Object, it must be type casted in order to use it as an LinkedList as shown in the example above.\nSyntax\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava LinkedList Tutorial",
      "examples": [
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); LinkedList cars2 = (LinkedList)cars.clone(); cars2.set(0, \"Toyota\"); System.out.println(cars); System.out.println(cars2); } }",
        "public Object clone()",
        "clone()",
        "LinkedList",
        "Object"
      ]
    },
    {
      "title": "Java LinkedList contains() Method",
      "summary": "❮ LinkedList Methods\nExampleGet your own Java Server\nCheck if an item exists in a list:\nTry it Yourself »\nDefinition and Usage\nThe contains() method returns true if an item exists in a list and false otherwise.\nSyntax\nParameter Values\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava LinkedList Tutorial",
      "examples": [
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.contains(\"BMW\")); System.out.println(cars.contains(\"Toyota\")); } }",
        "public boolean contains(Object item)",
        "contains()",
        "true",
        "false"
      ]
    },
    {
      "title": "Java LinkedList forEach() Method",
      "summary": "❮ LinkedList Methods\nExampleGet your own Java Server\nUse a lambda expression in the LinkedList's forEach() method to print every item in the list:\nTry it Yourself »\nDefinition and Usage\nThe forEach() method performs an action on every item in a list. The action can be defined by a lambda expression that is compatible with the accept() method of Java's Consumer interface.\nTo learn about lambda expressions, see our Java Lambda Expression tutorial.\nSyntax\nParameter Values\nRelated Pages\nJava Arrays Tutorial\nJava LinkedList Tutorial\nJava Lambda Expressions Tutorial",
      "examples": [
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<Integer> numbers = new LinkedList<Integer>(); numbers.add(5); numbers.add(9); numbers.add(8); numbers.add(1); numbers.forEach( (n) -> { System.out.println(n); } ); } }",
        "public void forEach(Consumer action)",
        "LinkedList",
        "forEach()",
        "accept()",
        "Consumer"
      ]
    },
    {
      "title": "Java LinkedList get() Method",
      "summary": "❮ LinkedList Methods\nExampleGet your own Java Server\nOutput the value of an item in a list:\nTry it Yourself »\nDefinition and Usage\nThe get() method returns the item at a specified position in the list.\nSyntax\nT refers to the data type of items in the list.\nParameter Values\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava LinkedList Tutorial",
      "examples": [
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.get(0)); } }",
        "public T get(int index)",
        "get()",
        "T",
        "IndexOutOfBoundsException"
      ]
    },
    {
      "title": "Java LinkedList getFirst() Method",
      "summary": "❮ LinkedList Methods\nExampleGet your own Java Server\nGet the first item in the list:\nTry it Yourself »\nDefinition and Usage\nThe getFirst() method returns the first item in a list.\nTip: Use the getLast() method to get the last item in a list.\nSyntax\nT refers to the data type of items in the list.\nParameters\nNone.\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava LinkedList Tutorial",
      "examples": [
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Use getFirst() to get the first item in the list System.out.println(cars.getFirst()); } }",
        "public T getFirst()",
        "getFirst()",
        "getLast()",
        "T",
        "NoSuchElementException"
      ]
    },
    {
      "title": "Java LinkedList getLast() Method",
      "summary": "❮ LinkedList Methods\nExampleGet your own Java Server\nGet the last item in the list:\nTry it Yourself »\nDefinition and Usage\nThe getLast() method returns the last item in a list.\nTip: Use the getFirst() method to get the first item in a list.\nSyntax\nT refers to the data type of items in the list.\nParameters\nNone.\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava LinkedList Tutorial",
      "examples": [
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Use getLast() to get the last item in the list System.out.println(cars.getLast()); } }",
        "public T getLast()",
        "getLast()",
        "getFirst()",
        "T",
        "NoSuchElementException"
      ]
    },
    {
      "title": "Java LinkedList indexOf() Method",
      "summary": "❮ LinkedList Methods\nExampleGet your own Java Server\nFind the position of an item in a list:\nTry it Yourself »\nDefinition and Usage\nThe indexOf() method returns the position of the first occurrence of a value in the list. If the item is not found in the list then it returns -1.\nSyntax\nParameter Values\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava LinkedList Tutorial",
      "examples": [
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.indexOf(\"Ford\")); } }",
        "public int indexOf(Object item)",
        "indexOf()"
      ]
    },
    {
      "title": "Java LinkedList isEmpty() Method",
      "summary": "❮ LinkedList Methods\nExampleGet your own Java Server\nCheck if a list is empty:\nTry it Yourself »\nDefinition and Usage\nThe isEmpty() method returns true if a list has no items and false otherwise.\nSyntax\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava LinkedList Tutorial",
      "examples": [
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); System.out.println(cars.isEmpty()); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.isEmpty()); } }",
        "public boolean isEmpty()",
        "isEmpty()",
        "true",
        "false"
      ]
    },
    {
      "title": "Java LinkedList iterator() Method",
      "summary": "❮ LinkedList Methods\nExampleGet your own Java Server\nUse an iterator to loop through a list:\nTry it Yourself »\nDefinition and Usage\nThe iterator() method returns an Iterator for the list.\nTo learn how to use iterators, see our Java Iterator tutorial.\nSyntax\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava LinkedList Tutorial\nJava Iterator Tutorial",
      "examples": [
        "import java.util.LinkedList; import java.util.Iterator; public class Main { public static void main(String[] args) { // Make a collection LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Get the iterator Iterator<String> it = cars.iterator(); // Loop through a collection while(it.hasNext()) { System.out.println(it.next()); } } }",
        "public Iterator iterator()",
        "iterator()",
        "Iterator"
      ]
    },
    {
      "title": "Java LinkedList lastIndexOf() Method",
      "summary": "❮ LinkedList Methods\nExampleGet your own Java Server\nFind the first and last position of an item in a list:\nTry it Yourself »\nDefinition and Usage\nThe lastIndexOf() method returns the position of the last occurrence of a value in the list. If the item is not found in the list then it returns -1.\nSyntax\nParameter Values\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava LinkedList Tutorial",
      "examples": [
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"Ford\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.indexOf(\"Ford\")); System.out.println(cars.lastIndexOf(\"Ford\")); } }",
        "public int lastIndexOf(Object item)",
        "lastIndexOf()"
      ]
    },
    {
      "title": "Java LinkedList listIterator() Method",
      "summary": "❮ LinkedList Methods\nExampleGet your own Java Server\nUse a ListIterator to loop forward and backward through a list:\nTry it Yourself »\nDefinition and Usage\nThe listIterator() method returns a ListIterator for the list.\nTo learn how to use iterators, see our Java Iterator tutorial.\nThe ListIterator differs from an Iterator in that it can also traverse the list backwards.\nSyntax\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava LinkedList Tutorial\nJava Iterator Tutorial",
      "examples": [
        "import java.util.LinkedList; import java.util.ListIterator; public class Main { public static void main(String[] args) { // Make a collection LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Get the iterator ListIterator<String> it = cars.listIterator(); // Loop through the list while(it.hasNext()) { System.out.println(it.next()); } System.out.println(\"---\"); // Loop backwards through the list while(it.hasPrevious()) { System.out.println(it.previous()); } } }",
        "public ListIterator listIterator()",
        "ListIterator",
        "listIterator()",
        "Iterator"
      ]
    },
    {
      "title": "Java LinkedList remove() Method",
      "summary": "❮ LinkedList Methods\nExampleGet your own Java Server\nRemove items from a list:\nTry it Yourself »\nDefinition and Usage\nThe remove() method removes an item from the list, either by position or by value. If a position is specified then this method returns the removed item. If a value is specified then it returns true if the value was found and false otherwise.\nIf a value is specified and multiple elements in the list have the same value then only the first one is deleted.\nIf the list contains integers and you want to delete an integer based on its value you will need to pass an Integer object. See More Examples below for an example.\nSyntax\nOne of the following:\nT refers to the data type of items in the list.\nParameter Values\nTechnical Details\nMore Examples\nExample\nRemove an integer from the list by position and by value:\nTry it Yourself »\nRelated Pages\nJava Arrays Tutorial\nJava LinkedList Tutorial",
      "examples": [
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.remove(0); System.out.println(cars); } }",
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<Integer> list = new LinkedList<Integer>(); list.add(5); list.add(8); list.add(9); list.add(1); list.remove(Integer.valueOf(1)); // Remove by object list.remove(1); // Remove by index System.out.println(list); } }",
        "public T remove(int index)",
        "public boolean remove(Object item)",
        "remove()",
        "true",
        "false",
        "Integer",
        "T",
        "IndexOutOfBoundsException",
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<Integer> list = new LinkedList<Integer>(); list.add(5); list.add(8); list.add(9); list.add(1); list.remove(Integer.valueOf(1)); // Remove by object list.remove(1); // Remove by index System.out.println(list);"
      ]
    },
    {
      "title": "Java LinkedList removeAll() Method",
      "summary": "❮ LinkedList Methods\nExampleGet your own Java Server\nRemove all items from a list:\nTry it Yourself »\nDefinition and Usage\nThe removeAll() method removes all items from a list which belong to a specified collection.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nRemove multiple items from a list:\nTry it Yourself »\nRelated Pages\nJava Arrays Tutorial\nJava LinkedList Tutorial",
      "examples": [
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.add(\"Toyota\"); cars.removeAll(cars); System.out.println(cars); } }",
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.add(\"Toyota\"); LinkedList<String> remove = new LinkedList<String>(); remove.add(\"Volvo\"); remove.add(\"Ford\"); remove.add(\"Mazda\"); cars.removeAll(remove); System.out.println(cars); } }",
        "public boolean removeAll(Collection items)",
        "removeAll()",
        "true",
        "false",
        "NullPointerException"
      ]
    },
    {
      "title": "Java LinkedList removeFirst() Method",
      "summary": "❮ LinkedList Methods\nExampleGet your own Java Server\nRemove the first item in the list:\nTry it Yourself »\nDefinition and Usage\nThe removeFirst() method removes the first item in a list.\nTip: Use the removeLast() method to remove the last item in a list.\nSyntax\nT refers to the data type of items in the list.\nParameters\nNone.\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava LinkedList Tutorial",
      "examples": [
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Use removeFirst() remove the first item from the list cars.removeFirst(); System.out.println(cars); } }",
        "public T removeFirst()",
        "removeFirst()",
        "removeLast()",
        "T",
        "NoSuchElementException"
      ]
    },
    {
      "title": "Java LinkedList removeIf() Method",
      "summary": "❮ LinkedList Methods\nExampleGet your own Java Server\nRemove all even numbers from a list:\nTry it Yourself »\nDefinition and Usage\nThe removeIf() method removes all elements from this list for which a condition is satisfied. The condition can be defined by the return value of a lambda expression that is compatible with the test() method of Java's Predicate interface.\nTo learn about lambda expressions, see our Java Lambda Expression tutorial.\nSyntax\nParameter Values\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava LinkedList Tutorial",
      "examples": [
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<Integer> numbers = new LinkedList<Integer>(); numbers.add(5); numbers.add(9); numbers.add(8); numbers.add(6); numbers.add(1); numbers.removeIf( n -> n % 2 == 0 ); System.out.println(numbers); } }",
        "public boolean removeIf(Predicate condition)",
        "removeIf()",
        "test()",
        "Predicate",
        "true",
        "false"
      ]
    },
    {
      "title": "Java LinkedList removeLast() Method",
      "summary": "❮ LinkedList Methods\nExampleGet your own Java Server\nRemove the last item in the list:\nTry it Yourself »\nDefinition and Usage\nThe removeLast() method removes the last item in a list.\nTip: Use the removeFirst() method to remove the first item in a list.\nSyntax\nT refers to the data type of items in the list.\nParameters\nNone.\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava LinkedList Tutorial",
      "examples": [
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Use removeLast() to remove the last item from the list cars.removeLast(); System.out.println(cars); } }",
        "public T removeLast()",
        "removeLast()",
        "removeFirst()",
        "T",
        "NoSuchElementException"
      ]
    },
    {
      "title": "Java LinkedList replaceAll() Method",
      "summary": "❮ LinkedList Methods\nExampleGet your own Java Server\nAdd 1 to every number in a list:\nTry it Yourself »\nDefinition and Usage\nThe replaceAll() method replaces every item in a list with the result of performing an operation on the item. The operation can be defined by a lambda expression that is compatible with Java's UnaryOperator interface.\nTo learn about lambda expressions, see our Java Lambda Expression tutorial.\nSyntax\nParameter Values\nRelated Pages\nJava Arrays Tutorial\nJava LinkedList Tutorial\nJava Lambda Expression Tutorial",
      "examples": [
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<Integer> numbers = new LinkedList<Integer>(); numbers.add(5); numbers.add(9); numbers.add(8); numbers.add(6); numbers.add(1); numbers.replaceAll( n -> n + 1 ); System.out.println(numbers); } }",
        "public void replaceAll(UnaryOperator operator)",
        "replaceAll()",
        "UnaryOperator"
      ]
    },
    {
      "title": "Java LinkedList retainAll() Method",
      "summary": "❮ LinkedList Methods\nExampleGet your own Java Server\nRemove items from a list which do not belong to a specified collection:\nTry it Yourself »\nDefinition and Usage\nThe retainAll() method removes all items from a list which do not belong to a specified collection.\nSyntax\nParameter Values\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava LinkedList Tutorial",
      "examples": [
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.add(\"Toyota\"); LinkedList<String> valid = new LinkedList<String>(); valid.add(\"Volvo\"); valid.add(\"Ford\"); valid.add(\"Mazda\"); cars.retainAll(valid); System.out.println(cars); } }",
        "public boolean retainAll(Collection items)",
        "retainAll()",
        "true",
        "false",
        "NullPointerException"
      ]
    },
    {
      "title": "Java LinkedList set() Method",
      "summary": "❮ LinkedList Methods\nExampleGet your own Java Server\nReplace an item in a list:\nTry it Yourself »\nDefinition and Usage\nThe set() method replaces an item at a specified position in the list and returns the item that was previously at that position.\nSyntax\nT refers to the data type of items in the list.\nParameter Values\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava LinkedList Tutorial",
      "examples": [
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.set(0, \"Opel\"); System.out.println(cars); } }",
        "public T set(int index, T item)",
        "set()",
        "T",
        "IndexOutOfBoundsException"
      ]
    },
    {
      "title": "Java LinkedList size() Method",
      "summary": "❮ LinkedList Methods\nExampleGet your own Java Server\nFind out the size of a list:\nTry it Yourself »\nDefinition and Usage\nThe size() method indicates how many elements are in the list.\nSyntax\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava LinkedList Tutorial",
      "examples": [
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars.size()); } }",
        "public int size()",
        "size()"
      ]
    },
    {
      "title": "Java LinkedList sort() Method",
      "summary": "❮ LinkedList Methods\nExampleGet your own Java Server\nSort a list in alphabetical order:\nTry it Yourself »\nDefinition and Usage\nThe sort() method sorts items in the list. A Comparator can be used to compare pairs of elements. The comparator can be defined by a lambda expression which is compatible with the compare() method of Java's Comparator interface.\nIf null is passed into the method then items will be sorted naturally based on their data type (e.g. alphabetically for strings, numerically for numbers). Non-primitive types must implement Java's Comparable interface in order to be sorted without a comparator.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nUse a lambda expression to sort a list in reverse alphabetical order:\nTry it Yourself »\nRelated Pages\nJava Arrays Tutorial\nJava LinkedList Tutorial",
      "examples": [
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.sort(null); System.out.println(cars); } }",
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); cars.sort( (a, b) -> { return -1 * a.compareTo(b); } ); System.out.println(cars); } }",
        "public void sort(Comparator compare)",
        "sort()",
        "Comparator",
        "compare()",
        "null",
        "Comparable"
      ]
    },
    {
      "title": "Java LinkedList spliterator() Method",
      "summary": "❮ LinkedList Methods\nExampleGet your own Java Server\nUse a Spliterator to loop through items in a list:\nTry it Yourself »\nNote: The syntax while( it1.tryAdvance( (n) -> { System.out.println(n); } ) ); is equivalent to:\nDefinition and Usage\nThe spliterator() method returns a Spliterator for the list.\nA spliterator is a special type of iterator. To learn how to use iterators, see our Java Iterator tutorial.\nThe Spliterator is considerably different from an ordinary iterator. The purpose of a spliterator is to separate a collection into smaller pieces so that each piece can be processed by a separate thread. The Spliterator interface has two important methods:\ntrySplit() - Returns a new spliterator which can iterate through (usually and approximately) half of the elements that the original spliterator has access to, while the original spliterator can iterate through the remaining half.\ntryAdvance(Consumer action) - Moves to the next item that is available to the spliterator and tries to perform an action on it. If there is no next item then it returns false. The action can be defined by a lambda expression.\nSyntax\nTechnical Details\nRelated Pages\nJava Arrays Tutorial\nJava LinkedList Tutorial\nJava Iterator Tutorial",
      "examples": [
        "import java.util.LinkedList; import java.util.Spliterator; public class Main { public static void main(String[] args) { // Make a collection LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); // Get the spliterator and split it Spliterator<String> it1 = cars.spliterator(); Spliterator<String> it2 = it1.trySplit(); // Loop through the first spliterator System.out.println(\"First spliterator\"); while( it1.tryAdvance( (n) -> { System.out.println(n); } ) ); // Loop through the second spliterator System.out.println(\"\\nSecond spliterator\"); while( it2.tryAdvance( (n) -> { System.out.println(n); } ) ); } }",
        "boolean x = it1.tryAdvance( (n) -> { System.out.println(n); }); while(x) { x = it1.tryAdvance( (n) -> { System.out.println(n); }); }",
        "public Spliterator spliterator()",
        "Spliterator",
        "while( it1.tryAdvance( (n) -> { System.out.println(n); } ) );",
        "spliterator()",
        "trySplit()",
        "tryAdvance(Consumer action)",
        "false"
      ]
    },
    {
      "title": "Java LinkedList subList() Method",
      "summary": "❮ LinkedList Methods\nExampleGet your own Java Server\nGet a sublist from a list:\nTry it Yourself »\nDefinition and Usage\nThe subList() method returns a new list (referred to as a sublist) which contains the items of the list between two indices.\nNote: The item at the last index is not included in the sublist.\nNote: The sublist is a view of the original list, which means that changing the sublist also changes the original list.\nSyntax\nParameter Values\nTechnical Details\nMore Examples\nExample\nA list can be changed by changing a sublist:\nTry it Yourself »\nRelated Pages\nJava Arrays Tutorial\nJava LinkedList Tutorial",
      "examples": [
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println( cars.subList(1, 3) ); } }",
        "import java.util.LinkedList; import java.util.List; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); List<String> sublist = cars.subList(1, 3); sublist.set(0, \"Toyota\"); System.out.println(cars); } }",
        "public List sublist(int start, int end)",
        "subList()",
        "List",
        "IndexOutOfBoundsException",
        "IllegalArgumentException"
      ]
    },
    {
      "title": "Java LinkedList toArray() Method",
      "summary": "❮ LinkedList Methods\nExampleGet your own Java Server\nGet an array from an LinkedList:\nTry it Yourself »\nDefinition and Usage\nThe toArray() method returns an array containing all of the items in the list.\nIf no argument is passed then the type of the returned array will be Object. If an array is passed as an argument then this method will return an array with the same data type.\nIf the array in the argument is large enough to contain all of the list items then this method will return the argument itself after writing the list items into it.\nSyntax\nOne of the following:\nT refers to the data type of items in the list.\nParameter Values\nTechnical Details\nMore Examples\nExample\nSpecify the return type of toArray():\nTry it Yourself »\nRelated Pages\nJava Arrays Tutorial\nJava LinkedList Tutorial",
      "examples": [
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList\ncars = new LinkedList\n(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); Object[] carsArray = cars.toArray(); for(Object item : carsArray) { System.out.println(item); } } }",
        "import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList<String> cars = new LinkedList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); String[] carsArray = new String[4]; carsArray = cars.toArray(carsArray); for(String item : carsArray) { System.out.println(item); } } }",
        "public Object[] toArray()",
        "public T[] toArray(T[] array)",
        "LinkedList",
        "toArray()",
        "Object",
        "T",
        "ArrayStoreException",
        "NullPointerException",
        "null"
      ]
    },
    {
      "title": "Java HashMap Methods",
      "summary": "All HashMap Methods\nA list of all HashMap methods can be found in the table below.\nSome methods use the type of the HashMap's entries as a parameter or return value. The type of the key will be referred to as K and the type of the value will be referred to as V in the table.\nRelated Pages\nJava HashMap Tutorial",
      "examples": [
        "HashMap"
      ]
    },
    {
      "title": "Java HashMap clear() Method",
      "summary": "❮ HashMap Methods\nExampleGet your own Java Server\nRemove all items from a map:\nTry it Yourself »\nDefinition and Usage\nThe clear() method removes all entries from the map.\nSyntax\nRelated Pages\nJava HashMap Tutorial",
      "examples": [
        "import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); capitalCities.clear(); System.out.println(capitalCities); } }",
        "public void clear()",
        "clear()"
      ]
    },
    {
      "title": "Java HashMap clone() Method",
      "summary": "❮ HashMap Methods\nExampleGet your own Java Server\nCreate a copy of a map and change it:\nTry it Yourself »\nDefinition and Usage\nThe clone() method returns a copy of the map as an Object.\nThis creates a \"shallow\" copy, which means that copies of objects in the map are not created, instead the map has references to the same objects that are in the original map.\nNote: Since the return type is Object, it must be type casted in order to use it as a HashMap as shown in the example above.\nSyntax\nTechnical Details\nRelated Pages\nJava HashMap Tutorial",
      "examples": [
        "import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); HashMap copy = (HashMap)capitalCities.clone(); copy.remove(\"England\"); System.out.println(capitalCities); System.out.println(copy); } }",
        "public Object clone()",
        "clone()",
        "Object",
        "HashMap"
      ]
    },
    {
      "title": "Java HashMap compute() Method",
      "summary": "❮ HashMap Methods\nExampleGet your own Java Server\nCompute a new value for an entry in a map:\nTry it Yourself »\nDefinition and Usage\nThe compute() method changes the value of an entry or creates a new value if the entry does not exist.\nThe new value is computed using a function, which can be defined by a lambda expression that is compatible with the apply() method of Java's BiFunction interface.\nTo learn about lambda expressions, see our Java Lambda Expression tutorial.\nSyntax\nK refers to the data type of the keys of the map.\nParameter Values\nTechnical Details\nRelated Pages\nJava HashMap Tutorial",
      "examples": [
        "import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); capitalCities.compute(\"England\", (k, v) -> v + \"(\" + k + \")\"); System.out.println(capitalCities); } }",
        "public void compute(K key, BiFunction function)",
        "compute()",
        "apply()",
        "BiFunction",
        "K"
      ]
    },
    {
      "title": "Java HashMap computeIfAbsent() Method",
      "summary": "❮ HashMap Methods\nExampleGet your own Java Server\nCompute a value for a new entry in a map:\nTry it Yourself »\nDefinition and Usage\nThe computeIfAbsent() method calculates a value for a new entry based on its key. If an entry with the specified key already exists and its value is not null then the map is not changed.\nThe value is computed using a function, which can be defined by a lambda expression that is compatible with the apply() method of Java's Function interface.\nTo learn about lambda expressions, see our Java Lambda Expression tutorial.\nSyntax\nK refers to the data type of the keys of the map.\nParameter Values\nTechnical Details\nRelated Pages\nJava HashMap Tutorial",
      "examples": [
        "import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); capitalCities.computeIfAbsent(\"Canada\", (k) -> \"Toronto (\" + k + \")\"); System.out.println(capitalCities); } }",
        "public void computeIfAbsent(K key, Function function)",
        "computeIfAbsent()",
        "null",
        "apply()",
        "Function",
        "K"
      ]
    },
    {
      "title": "Java HashMap computeIfPresent() Method",
      "summary": "❮ HashMap Methods\nExampleGet your own Java Server\nCompute a new value for an entry in a map:\nTry it Yourself »\nDefinition and Usage\nThe computeIfPresent() method calculates a value for an entry based on its key. If an entry with the specified key does not exist or its value is null then the map is not changed.\nThe value is computed using a function, which can be defined by a lambda expression that is compatible with the apply() method of Java's BiFunction interface.\nTo learn about lambda expressions, see our Java Lambda Expression tutorial.\nSyntax\nK refers to the data type of the keys of the map.\nParameter Values\nTechnical Details\nRelated Pages\nJava HashMap Tutorial",
      "examples": [
        "import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); capitalCities.computeIfPresent(\"England\", (k, v) -> v + \"(\" + k + \")\"); System.out.println(capitalCities); } }",
        "public void computeIfPresent(K key, BiFunction function)",
        "computeIfPresent()",
        "null",
        "apply()",
        "BiFunction",
        "K",
        "Function"
      ]
    },
    {
      "title": "Java HashMap containsKey() Method",
      "summary": "❮ HashMap Methods\nExampleGet your own Java Server\nCheck if a key exists in a map:\nTry it Yourself »\nDefinition and Usage\nThe containsKey() method returns true if an entry with the specified key exists in the map and false otherwise.\nSyntax\nParameter Values\nTechnical Details\nRelated Pages\nJava HashMap Tutorial",
      "examples": [
        "import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities.containsKey(\"England\")); System.out.println(capitalCities.containsKey(\"Canada\")); } }",
        "public boolean containsKey(Object key)",
        "containsKey()",
        "true",
        "false"
      ]
    },
    {
      "title": "Java HashMap containsValue() Method",
      "summary": "❮ HashMap Methods\nExampleGet your own Java Server\nCheck if a value exists in a map:\nTry it Yourself »\nDefinition and Usage\nThe containsValue() method returns true if an entry with the specified value exists in the map and false otherwise.\nSyntax\nParameter Values\nTechnical Details\nRelated Pages\nJava HashMap Tutorial",
      "examples": [
        "import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities.containsValue(\"London\")); System.out.println(capitalCities.containsValue(\"Ottawa\")); } }",
        "public boolean containsValue(Object value)",
        "containsValue()",
        "true",
        "false"
      ]
    },
    {
      "title": "Java HashMap entrySet() Method",
      "summary": "❮ HashMap Methods\nExampleGet your own Java Server\nReturn all the entries in a map:\nTry it Yourself »\nDefinition and Usage\nThe entrySet() method returns a set containing all of the entries in the map.\nTo learn about sets, see our Java HashSet tutorial.\nNote: The returned set is a view of the map, which means that changing the set also changes the map.\nSyntax\nK and V refer to the data types of the keys and values of the map.\nTechnical Details\nRelated Pages\nJava HashMap Tutorial\nJava HashSet Tutorial",
      "examples": [
        "import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities.entrySet()); } }",
        "public Set< Map.Entry<K,V> > entrySet()",
        "entrySet()",
        "K",
        "V"
      ]
    },
    {
      "title": "Java HashMap forEach() Method",
      "summary": "❮ HashMap Methods\nExampleGet your own Java Server\nUse the forEach() method to print every entry in the map:\nTry it Yourself »\nDefinition and Usage\nThe forEach() method performs an action on every entry in the map. The action can be defined by a lambda expression that is compatible with the accept() method of Java's BiConsumer interface.\nTo learn about lambda expressions, see our Java Lambda Expression tutorial.\nSyntax\nParameter Values\nRelated Pages\nJava HashMap Tutorial",
      "examples": [
        "import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); capitalCities.forEach( (k, v) -> { System.out.println(k + \" -> \" + v); } ); } }",
        "public void forEach(BiConsumer action)",
        "forEach()",
        "accept()",
        "BiConsumer"
      ]
    },
    {
      "title": "Java HashMap get() Method",
      "summary": "❮ HashMap Methods\nExampleGet your own Java Server\nGet the value of an entry in a map:\nTry it Yourself »\nDefinition and Usage\nThe get() method returns the value of the entry in the map which has a specified key.\nSyntax\nV refers to the data type of the values of the map.\nParameter Values\nTechnical Details\nRelated Pages\nJava HashMap Tutorial",
      "examples": [
        "import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities.get(\"England\")); } }",
        "public V get(Object key)",
        "get()",
        "V"
      ]
    },
    {
      "title": "Java HashMap getOrDefault() Method",
      "summary": "❮ HashMap Methods\nExampleGet your own Java Server\nOutput the value of an entry in a map, or \"Unknown\" if it does not exist:\nTry it Yourself »\nDefinition and Usage\nThe getOrDefault() method returns the value of the entry in the map which has a specified key. If the entry does not exist then the value of the second parameter is returned.\nSyntax\nV refers to the data type of the values of the map.\nParameter Values\nTechnical Details\nRelated Pages\nJava HashMap Tutorial",
      "examples": [
        "import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities.getOrDefault(\"England\", \"Unknown\")); System.out.println(capitalCities.getOrDefault(\"Canada\", \"Unknown\")); } }",
        "public V get(Object key, V def)",
        "getOrDefault()",
        "V"
      ]
    },
    {
      "title": "Java HashMap isEmpty() Method",
      "summary": "❮ HashMap Methods\nExampleGet your own Java Server\nCheck if a map is empty:\nTry it Yourself »\nDefinition and Usage\nThe isEmpty() method returns true if the map has no entries and false otherwise.\nSyntax\nTechnical Details\nRelated Pages\nJava HashMap Tutorial",
      "examples": [
        "import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); System.out.println(capitalCities.isEmpty()); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities.isEmpty()); } }",
        "public boolean isEmpty()",
        "isEmpty()",
        "true",
        "false"
      ]
    },
    {
      "title": "Java HashMap keySet() Method",
      "summary": "❮ HashMap Methods\nExampleGet your own Java Server\nReturn all the keys in a map:\nTry it Yourself »\nDefinition and Usage\nThe keySet() method returns a set containing all of the keys in the map.\nTo learn about sets, see our Java HashSet tutorial.\nNote: The returned set is a view of the map, which means that changing the set also changes the map.\nSyntax\nK refers to the data type of the keys of the map.\nTechnical Details\nRelated Pages\nJava HashMap Tutorial\nJava HashSet Tutorial",
      "examples": [
        "import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities.keySet()); } }",
        "public Set<K> keySet()",
        "keySet()",
        "K"
      ]
    },
    {
      "title": "Java HashMap merge() Method",
      "summary": "❮ HashMap Methods\nExampleGet your own Java Server\nCompute a new value for an entry in a map:\nTry it Yourself »\nDefinition and Usage\nThe merge() method creates an entry with a specified key and value or, if an entry with the specified key already exists, calculates a new value for the entry.\nThe new value is computed using a function, which can be defined by a lambda expression that is compatible with the apply() method of Java's BiFunction interface.\nTo learn about lambda expressions, see our Java Lambda Expression tutorial.\nSyntax\nK and V refer to the data types of the keys and values of the map.\nParameter Values\nTechnical Details\nRelated Pages\nJava HashMap Tutorial",
      "examples": [
        "import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); capitalCities.merge(\"Canada\", \"Ottawa\", (a, b) -> a + \" -> \" + b); capitalCities.merge(\"England\", \"London\", (a, b) -> a + \" -> \" + b); capitalCities.merge(\"Germany\", \"Berlin\", (a, b) -> a + \" -> \" + b); System.out.println(capitalCities); } }",
        "public V merge(K key, V value, BiFunction function)",
        "merge()",
        "apply()",
        "BiFunction",
        "K",
        "V"
      ]
    },
    {
      "title": "Java HashMap put() Method",
      "summary": "❮ HashMap Methods\nExampleGet your own Java Server\nAdd entries into a map:\nTry it Yourself »\nDefinition and Usage\nThe put() method writes an entry into the map. If an entry with the same key already exists then the value of that entry will be changed.\nSyntax\nK and V refer to the data types of the keys and values of the map.\nParameter Values\nTechnical Details\nRelated Pages\nJava HashMap Tutorial",
      "examples": [
        "import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities); } }",
        "public V put(K key, V value)",
        "put()",
        "K",
        "V",
        "null"
      ]
    },
    {
      "title": "Java HashMap putAll() Method",
      "summary": "❮ HashMap Methods\nExampleGet your own Java Server\nCopy entries from one map into another:\nTry it Yourself »\nDefinition and Usage\nThe putAll() method writes all of the entries from another map into the map. If entries exist with the same keys then the values of these entries will be changed.\nSyntax\nOne of the following:\nK and V refer to the data types of the keys and values of the map.\nParameter Values\nTechnical Details\nRelated Pages\nJava HashMap Tutorial",
      "examples": [
        "import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); HashMap<String, String> moreCities = new HashMap<String, String>(); moreCities.put(\"Canada\", \"Ottawa\"); moreCities.put(\"Japan\", \"Tokyo\"); capitalCities.putAll(moreCities); System.out.println(capitalCities); } }",
        "public void putAll(Map\nmap)",
        "putAll()",
        "K",
        "V",
        "NullPointerException",
        "null"
      ]
    },
    {
      "title": "Java HashMap putIfAbsent() Method",
      "summary": "❮ HashMap Methods\nExampleGet your own Java Server\nAdd entries into a map:\nTry it Yourself »\nDefinition and Usage\nThe putIfAbsent() method writes an entry into the map. If an entry with the same key already exists and its value is not null then the map is not changed.\nSyntax\nK and V refer to the data types of the keys and values of the map.\nParameter Values\nTechnical Details\nRelated Pages\nJava HashMap Tutorial",
      "examples": [
        "import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); // Add new entries only if they don't exist capitalCities.putIfAbsent(\"Canada\", \"Ottawa\"); capitalCities.putIfAbsent(\"England\", \"Cambridge\"); System.out.println(capitalCities); } }",
        "public V putIfAbsent(K key, V value)",
        "putIfAbsent()",
        "null",
        "K",
        "V"
      ]
    },
    {
      "title": "Java HashMap remove() Method",
      "summary": "❮ HashMap Methods\nExampleGet your own Java Server\nRemove entries from a map:\nTry it Yourself »\nDefinition and Usage\nThe remove() method removes an entry with a specified key from the map. If a value is provided then the entry will only be removed if its value matches the specified value.\nSyntax\nOne of the following:\nV refers to the data type of the values in the map.\nParameter Values\nTechnical Details\nRelated Pages\nJava HashMap Tutorial",
      "examples": [
        "import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); capitalCities.remove(\"USA\"); capitalCities.remove(\"Germany\", \"Berlin\"); capitalCities.remove(\"England\", \"Cambridge\"); System.out.println(capitalCities); } }",
        "public V remove(Object key)",
        "public boolean remove(Object key, Object value)",
        "remove()",
        "V",
        "true",
        "false",
        "null"
      ]
    },
    {
      "title": "Java HashMap replace() Method",
      "summary": "❮ HashMap Methods\nExampleGet your own Java Server\nReplace the values of entries in a map:\nTry it Yourself »\nDefinition and Usage\nThe replace() method writes a new value to an existing entry in the map. The entry can be specified by its key, or by both its key and value.\nSyntax\nOne of the following:\nK and V refer to the data types of the keys and values of the map.\nParameter Values\nTechnical Details\nRelated Pages\nJava HashMap Tutorial",
      "examples": [
        "import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"Cambridge\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); capitalCities.replace(\"England\", \"London\"); capitalCities.replace(\"Canada\", \"Ottawa\"); capitalCities.replace(\"USA\", \"New York\", \"Washington DC\"); System.out.println(capitalCities); } }",
        "public V replace(K key, V newValue)",
        "public boolean replace(K key, V oldValue, V newValue)",
        "replace()",
        "K",
        "V",
        "true",
        "false",
        "null"
      ]
    },
    {
      "title": "Java HashMap replaceAll() Method",
      "summary": "❮ HashMap Methods\nExampleGet your own Java Server\nUpdate the value of every entry in a map:\nTry it Yourself »\nDefinition and Usage\nThe replaceAll() method replaces the value of every entry in the map with the result of an operation using the entry's key and value. The operation can be defined by a lambda expression that is compatible with the apply() method of Java's BiFunction interface.\nTo learn about lambda expressions, see our Java Lambda Expression tutorial.\nSyntax\nParameter Values\nRelated Pages\nJava HashMap Tutorial",
      "examples": [
        "import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); capitalCities.replaceAll((k, v) -> \"The capital of \" + k + \" is \" + v); System.out.println(capitalCities); } }",
        "public void replaceAll(BiFunction operator)",
        "replaceAll()",
        "apply()",
        "BiFunction"
      ]
    },
    {
      "title": "Java HashMap size() Method",
      "summary": "❮ HashMap Methods\nExampleGet your own Java Server\nGet the size of a map:\nTry it Yourself »\nDefinition and Usage\nThe size() method returns the number of entries in a map.\nSyntax\nTechnical Details\nRelated Pages\nJava HashMap Tutorial",
      "examples": [
        "import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities.size()); } }",
        "public int size()",
        "size()"
      ]
    },
    {
      "title": "Java HashMap values() Method",
      "summary": "❮ HashMap Methods\nExampleGet your own Java Server\nReturn all the values in a map:\nTry it Yourself »\nDefinition and Usage\nThe values() method returns a collection containing all of the values in the map.\nNote: The returned collection is a view of the map, which means that changing the collection also changes the map.\nSyntax\nV refers to the data type of the values of the map.\nTechnical Details\nRelated Pages\nJava HashMap Tutorial",
      "examples": [
        "import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap<String, String> capitalCities = new HashMap<String, String>(); capitalCities.put(\"England\", \"London\"); capitalCities.put(\"Germany\", \"Berlin\"); capitalCities.put(\"Norway\", \"Oslo\"); capitalCities.put(\"USA\", \"Washington DC\"); System.out.println(capitalCities.values()); } }",
        "public Collection<V> values()",
        "values()",
        "V"
      ]
    },
    {
      "title": "Java Scanner Methods",
      "summary": "Scanner Methods\nThe Scanner class can be used to obtain data from the keyboard, files and strings.\nA list of useful Scanner methods can be found in the table below.\nRelated Pages\nJava User Input Tutorial\nJava Read Files Tutorial",
      "examples": [
        "Scanner",
        "byte",
        "int",
        "long",
        "short",
        "double",
        "float"
      ]
    },
    {
      "title": "Java Scanner close() Method",
      "summary": "❮ Scanner Methods\nExampleGet your own Java Server\nUse the close() method when finished reading from a file:\nDefinition and Usage\nThe close() method closes the file or input stream that the scanner was reading. After calling the close() method, the current Scanner object can no longer be used.\nNote: Closing a scanner that was created with System.in will close the System.in stream itself, making it unusable. It is best to only used the close() method with files.\nSyntax\nRelated Pages\nJava Tutorial: Create and Write Files.\n❮ Scanner Methods",
      "examples": [
        "import java.io.File; // Import the File class import java.io.FileNotFoundException; // Import this class to handle errors import java.util.Scanner; // Import the Scanner class to read text files public class ReadFile { public static void main(String[] args) { try { File myObj = new File(\"filename.txt\"); Scanner myReader = new Scanner(myObj); while (myReader.hasNextLine()) { String data = myReader.nextLine(); System.out.println(data); } myReader.close(); } catch (FileNotFoundException e) { System.out.println(\"An error occurred.\"); e.printStackTrace(); } } }",
        "public void close()",
        "close()",
        "System.in"
      ]
    },
    {
      "title": "Java Scanner delimiter() Method",
      "summary": "❮ Scanner Methods\nExampleGet your own Java Server\nShow the delimiter that is currently being used by the scanner:\nDefinition and Usage\nThe delimiter() method returns a Pattern object describing the sequence of characters which separates tokens in the data being scanned. The default delimiter is a sequence of whitespace characters, but it can be changed with the useDelimiter() method.\nLearn more about the Pattern object in our Java RegEx tutorial.\nWhat is a token?\nA token is a sequence of characters separated from other tokens by delimiters.\nSyntax\nTechnical Details\n❮ Scanner Methods",
      "examples": [
        "// Create a scanner object Scanner myObj = new Scanner(\"A string to scan\"); // Find the delimiter System.out.println(myObj.delimiter()); // Close the scanner myObj.close();",
        "public Pattern delimiter()",
        "delimiter()",
        "Pattern",
        "useDelimiter()"
      ]
    },
    {
      "title": "Java Scanner findInLine() Method",
      "summary": "❮ Scanner Methods\nExampleGet your own Java Server\nFind an email address in a line of text:\nDefinition and Usage\nThe findInLine() method searches up to the next line break in the scanner for the first match of a regular expression provided by a Pattern object or a string. If a match is not found then it returns null.\nIf a match is found the scanner advances to the first character following the match.\nLearn more about the regular expressions in our Java RegEx tutorial.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details\n❮ Scanner Methods",
      "examples": [
        "// Create a scanner object Scanner myObj = new Scanner(\"Please send an email to info@example.com for more details.\"); // Get the email address with a pattern String email = myObj.findInLine(\"[a-zA-Z]+@[a-zA-Z]+.[a-zA-Z]{2,}\"); // Show the email if found if (email != null) { System.out.println(email); } else { System.out.println(\"No email found\"); } // Close the scanner myObj.close();",
        "public String findInLine(Pattern pattern)",
        "public String findInLine(String pattern)",
        "findInLine()",
        "Pattern",
        "null",
        "String",
        "IllegalStateException"
      ]
    },
    {
      "title": "Java Scanner findWithinHorizon() Method",
      "summary": "❮ Scanner Methods\nExampleGet your own Java Server\nFind an email address in a line of text:\nDefinition and Usage\nThe findWithinHorizon() method searches through a specified number of characters for the first match of a regular expression provided by a Pattern object or a string. If a match is not found then it returns null.\nThe number of characters to search is specified by the horizon parameter, if it is set to zero then it continues searching without limit.\nIf a match is found the scanner advances to the first character following the match.\nLearn more about the regular expressions in our Java RegEx tutorial.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details\n❮ Scanner Methods",
      "examples": [
        "// Create a scanner object Scanner myObj = new Scanner(\"Please send an email to info@example.com for more details.\"); // Get the email address with a pattern String email = myObj.findWithinHorizon(\"[a-zA-Z]+@[a-zA-Z]+.[a-zA-Z]{2,}\", 0); // Show the email if found if (email != null) { System.out.println(email); } else { System.out.println(\"No email found\"); }",
        "public String findWithinHorizon(Pattern pattern, int horizon)",
        "public String findWithinHorizon(String pattern, int horizon)",
        "findWithinHorizon()",
        "Pattern",
        "null",
        "String",
        "IllegalStateException",
        "IllegalArgumentException"
      ]
    },
    {
      "title": "Java Scanner hasNext() Method",
      "summary": "❮ Scanner Methods\nExampleGet your own Java Server\nUse hasNext() to read every token in a string:\nDefinition and Usage\nThe hasNext() method returns true if there is another token available in the scanner.\nIf the pattern parameter is used, then it only returns true if the next token matches the regular expression specified by the parameter.\nLearn more about the regular expressions in our Java RegEx tutorial.\nWhat is a token?\nA token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details\n❮ Scanner Methods",
      "examples": [
        "// Create a scanner object Scanner myObj = new Scanner(\"A string to scan\"); // Read every token while(myObj.hasNext()) { System.out.println(myObj.next()); }",
        "public boolean hasNext()",
        "public boolean hasNext(Pattern pattern)",
        "public boolean hasNext(String pattern)",
        "hasNext()",
        "useDelimiter()",
        "boolean",
        "IllegalStateException"
      ]
    },
    {
      "title": "Java Scanner hasNextBoolean() Method",
      "summary": "❮ Scanner Methods\nExampleGet your own Java Server\nPrint the first boolean value that is found:\nDefinition and Usage\nThe hasNextBoolean() method returns true if the next token represents a boolean value. A token represents a boolean value if its value matches one of the strings \"true\" or \"false\". The match is case-insensitive, which means that values like \"True\" and \"FALSE\" also represent a boolean value.\nWhat is a token?\nA token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method.\nSyntax\nTechnical Details\n❮ Scanner Methods",
      "examples": [
        "// Create a scanner object Scanner myObj = new Scanner(\"The value is false\"); // Skip tokens until a boolean is found while (myObj.hasNext() && !myObj.hasNextBoolean()) { myObj.next(); } // If there is a boolean then print it if (myObj.hasNextBoolean()) { System.out.print(\"The boolean value is \"); System.out.println(myObj.nextBoolean()); } else { System.out.println(\"No boolean found\"); }",
        "public boolean hasNextBoolean()",
        "hasNextBoolean()",
        "useDelimiter()",
        "boolean",
        "IllegalStateException"
      ]
    },
    {
      "title": "Java Scanner hasNextByte() Method",
      "summary": "❮ Scanner Methods\nExampleGet your own Java Server\nPrint the value of every byte in the string:\nDefinition and Usage\nThe hasNextByte() method returns true if the next token represents a number that can be stored by the byte data type, which is any whole number between -128 and 127.\nIf the radix parameter is used, then it interprets numbers using the radix. For example, a radix of 16 would interpret numbers as hexadecimal (digits 0 to 9 and A to F). If the radix parameter is not used then it interprets numbers using the scanner's radix, which is 10 by default but it can be changed with the useRadix() method.\nWhat is a token?\nA token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details\n❮ Scanner Methods",
      "examples": [
        "// Create a scanner object Scanner myObj = new Scanner(\"A byte is a number between -128 and 127\"); // Print the value of every byte in the scanner while(myObj.hasNext()) { if(myObj.hasNextByte()) { System.out.println(myObj.nextByte()); } else { myObj.next(); } }",
        "public boolean hasNextByte()",
        "public boolean hasNextByte(int radix)",
        "hasNextByte()",
        "byte",
        "useRadix()",
        "useDelimiter()",
        "boolean",
        "IllegalStateException"
      ]
    },
    {
      "title": "Java Scanner hasNextDouble() Method",
      "summary": "❮ Scanner Methods\nExampleGet your own Java Server\nPrint the value of every floating point number in the string:\nDefinition and Usage\nThe hasNextDouble() method returns true if the next token represents a valid number.\nThe scanner is able to interpret digit groupings, such as using a comma for separating groups of 3 digits. The format of the groupings and the character used as a decimal point depend on the locale settings of the scanner, which can be changed with the useLocale() method.\nWhat is a token?\nA token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method.\nSyntax\nTechnical Details\n❮ Scanner Methods",
      "examples": [
        "// Create a scanner object Scanner myObj = new Scanner(\"The probability is 45.6 percent\"); // Print the value of every floating point number in the scanner while (myObj.hasNext()) { if (myObj.hasNextDouble()) { System.out.println(myObj.nextDouble()); } else { myObj.next(); } }",
        "public boolean hasNextDouble()",
        "hasNextDouble()",
        "useLocale()",
        "useDelimiter()",
        "boolean",
        "IllegalStateException"
      ]
    },
    {
      "title": "Java Scanner hasNextFloat() Method",
      "summary": "❮ Scanner Methods\nExampleGet your own Java Server\nPrint the value of every floating point number in the string:\nDefinition and Usage\nThe hasNextFloat() method returns true if the next token represents a valid number.\nThe scanner is able to interpret digit groupings, such as using a comma for separating groups of 3 digits. The format of the groupings and the character used as a decimal point depend on the locale settings of the scanner, which can be changed with the useLocale() method.\nWhat is a token?\nA token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method.\nSyntax\nTechnical Details\n❮ Scanner Methods",
      "examples": [
        "// Create a scanner object Scanner myObj = new Scanner(\"The probability is 45.6 percent\"); // Print the value of every floating point number in the scanner while (myObj.hasNext()) { if (myObj.hasNextFloat()) { System.out.println(myObj.nextFloat()); } else { myObj.next(); } }",
        "public boolean hasNextFloat()",
        "hasNextFloat()",
        "useLocale()",
        "useDelimiter()",
        "boolean",
        "IllegalStateException"
      ]
    },
    {
      "title": "Java Scanner hasNextInt() Method",
      "summary": "❮ Scanner Methods\nExampleGet your own Java Server\nPrint the value of every integer in the string:\nDefinition and Usage\nThe hasNextInt() method returns true if the next token represents a number that can be stored by the int data type, which is any whole number between -2,147,483,648 and 2,147,483,647.\nThe scanner is able to interpret digit groupings, such as using a comma for separating groups of 3 digits. The format of the groupings depends on the locale settings of the scanner, which can be changed with the useLocale() method.\nIf the radix parameter is used, then it interprets numbers using the radix. For example, a radix of 16 would interpret numbers as hexadecimal (digits 0 to 9 and A to F). If the radix parameter is not used then it interprets numbers using the scanner's radix, which is 10 by default but it can be changed with the useRadix() method.\nWhat is a token?\nA token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details\n❮ Scanner Methods",
      "examples": [
        "// Create a scanner object Scanner myObj = new Scanner(\"An int is a number between -2,147,483,648 and 2,147,483,647\"); // Print the value of every int in the scanner while (myObj.hasNext()) { if (myObj.hasNextInt()) { System.out.println(myObj.nextInt()); } else { myObj.next(); } }",
        "public boolean hasNextInt()",
        "public boolean hasNextInt(int radix)",
        "hasNextInt()",
        "int",
        "useLocale()",
        "useRadix()",
        "useDelimiter()",
        "boolean",
        "IllegalStateException"
      ]
    },
    {
      "title": "Java Scanner hasNextLine() Method",
      "summary": "❮ Scanner Methods\nExampleGet your own Java Server\nOutput the contents a file line by line:\nDefinition and Usage\nThe hasNextLine() method returns true if there is another line of text available in the scanner. A line of text is a sequence of one or more characters followed by either a new line character or the end of the scanner's content.\nSyntax\nTechnical Details\n❮ Scanner Methods",
      "examples": [
        "import java.io.File; // Import the File class import java.io.FileNotFoundException; // Import this class to handle errors import java.util.Scanner; // Import the Scanner class to read text files public class ReadFile { public static void main(String[] args) { try { File myObj = new File(\"filename.txt\"); Scanner myReader = new Scanner(myObj); while (myReader.hasNextLine()) { String data = myReader.nextLine(); System.out.println(data); } myReader.close(); } catch (FileNotFoundException e) { System.out.println(\"An error occurred.\"); e.printStackTrace(); } } }",
        "public boolean hasNextLine()",
        "hasNextLine()",
        "boolean",
        "IllegalStateException"
      ]
    },
    {
      "title": "Java Scanner hasNextLong() Method",
      "summary": "❮ Scanner Methods\nExampleGet your own Java Server\nPrint the value of every long integer in the string:\nDefinition and Usage\nThe hasNextLong() method returns true if the next token represents a number that can be stored by the long data type, which is any whole number between -9,223,372,036,854,775,808 and 9,223,372,036,854,775,807.\nThe scanner is able to interpret digit groupings, such as using a comma for separating groups of 3 digits. The format of the groupings depends on the locale settings of the scanner, which can be changed with the useLocale() method.\nIf the radix parameter is used, then it interprets numbers using the radix. For example, a radix of 16 would interpret numbers as hexadecimal (digits 0 to 9 and A to F). If the radix parameter is not used then it interprets numbers using the scanner's radix, which is 10 by default but it can be changed with the useRadix() method.\nWhat is a token?\nA token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details\n❮ Scanner Methods",
      "examples": [
        "// Create a scanner object Scanner myObj = new Scanner(\"A long is a number between -9,223,372,036,854,775,808 and 9,223,372,036,854,775,807\"); // Print the value of every long in the scanner while (myObj.hasNext()) { if (myObj.hasNextLong()) { System.out.println(myObj.nextLong()); } else { myObj.next(); } }",
        "public boolean hasNextLong()",
        "public boolean hasNextLong(int radix)",
        "hasNextLong()",
        "long",
        "useLocale()",
        "useRadix()",
        "useDelimiter()",
        "boolean",
        "IllegalStateException"
      ]
    },
    {
      "title": "Java Scanner hasNextShort() Method",
      "summary": "❮ Scanner Methods\nExampleGet your own Java Server\nPrint the value of every short integer in the string:\nDefinition and Usage\nThe hasNextShort() method returns true if the next token represents a number that can be stored by the short data type, which is any whole number between -32,768 and 32,767.\nThe scanner is able to interpret digit groupings, such as using a comma for separating groups of 3 digits. The format of the groupings depends on the locale settings of the scanner, which can be changed with the useLocale() method.\nIf the radix parameter is used, then it interprets numbers using the radix. For example, a radix of 16 would interpret numbers as hexadecimal (digits 0 to 9 and A to F). If the radix parameter is not used then it interprets numbers using the scanner's radix, which is 10 by default but it can be changed with the useRadix() method.\nWhat is a token?\nA token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details\n❮ Scanner Methods",
      "examples": [
        "// Create a scanner object Scanner myObj = new Scanner(\"An short is a number between -32,768 and 32,767\"); // Print the value of every short in the scanner while (myObj.hasNext()) { if (myObj.hasNextShort()) { System.out.println(myObj.nextShort()); } else { myObj.next(); } }",
        "public boolean hasNextShort()",
        "public boolean hasNextShort(int radix)",
        "hasNextShort()",
        "short",
        "useLocale()",
        "useRadix()",
        "useDelimiter()",
        "boolean",
        "IllegalStateException"
      ]
    },
    {
      "title": "Java Scanner locale() Method",
      "summary": "❮ Scanner Methods\nExample Get your own Java Server\nShow the locale that is currently being used by the scanner:\nDefinition and Usage\nThe locale() method returns a Locale object describing the locale used when interpreting numbers. The locale specifies formatting such as which character is used as a decimal point and how digits in large numbers are grouped.\nSyntax\nTechnical Details\n❮ Scanner Methods",
      "examples": [
        "// Create a scanner object Scanner myObj = new Scanner(\"A string to scan\"); // Find the locale System.out.println(myObj.locale());",
        "public Locale locale()",
        "locale()",
        "Locale"
      ]
    },
    {
      "title": "Java Scanner next() Method",
      "summary": "❮ Scanner Methods\nExampleGet your own Java Server\nDisplay the next token from the scanner:\nDefinition and Usage\nThe next() method returns a string containing the next token in the scanner.\nIf the pattern parameter is used, then it will throw an exception when the token does not match the regular expression specified by the parameter.\nLearn more about the regular expressions in our Java RegEx tutorial.\nWhat is a token?\nA token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details\n❮ Scanner Methods",
      "examples": [
        "// Create a scanner object Scanner myObj = new Scanner(\"A string to scan\"); // Output the next token System.out.println(myObj.next());",
        "public String next()",
        "public String next(Pattern pattern)",
        "public String next(String pattern)",
        "next()",
        "useDelimiter()",
        "String",
        "InputMismatchException",
        "NoSuchElementException",
        "IllegalStateException"
      ]
    },
    {
      "title": "Java Scanner nextBoolean() Method",
      "summary": "❮ Scanner Methods\nExampleGet your own Java Server\nPrint the first boolean value that is found:\nDefinition and Usage\nThe nextBoolean() method returns the boolean value that the next token represents. A token represents a boolean value if its value matches one of the strings \"true\" or \"false\". The match is case-insensitive, which means that values like \"True\" and \"FALSE\" also represent a boolean value.\nWhat is a token?\nA token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method.\nSyntax\nTechnical Details\n❮ Scanner Methods",
      "examples": [
        "// Create a scanner object Scanner myObj = new Scanner(\"The value is false\"); // Skip tokens until a boolean is found while (myObj.hasNext() && !myObj.hasNextBoolean()) { myObj.next(); } // If there is a boolean then print it if (myObj.hasNextBoolean()) { System.out.print(\"The boolean value is \"); System.out.println(myObj.nextBoolean()); } else { System.out.println(\"No boolean found\"); }",
        "public boolean nextBoolean()",
        "nextBoolean()",
        "useDelimiter()",
        "boolean",
        "InputMismatchException",
        "NoSuchElementException",
        "IllegalStateException"
      ]
    },
    {
      "title": "Java Scanner nextByte() Method",
      "summary": "❮ Scanner Methods\nExampleGet your own Java Server\nPrint the value of every byte in the string:\nDefinition and Usage\nThe nextByte() method returns the byte value of the number that the next token represents. The token must represent a whole number between -128 and 127.\nIf the radix parameter is used, then it interprets numbers using the radix. For example, a radix of 16 would interpret numbers as hexadecimal (digits 0 to 9 and A to F). If the radix parameter is not used then it interprets numbers using the scanner's radix, which is 10 by default but it can be changed with the useRadix() method.\nWhat is a token?\nA token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details\n❮ Scanner Methods",
      "examples": [
        "// Create a scanner object Scanner myObj = new Scanner(\"A byte is a number between -128 and 127\"); // Print the value of every byte in the scanner while (myObj.hasNext()) { if (myObj.hasNextByte()) { System.out.println(myObj.nextByte()); } else { myObj.next(); } }",
        "public boolean nextByte()",
        "public boolean nextByte(int radix)",
        "nextByte()",
        "byte",
        "useRadix()",
        "useDelimiter()",
        "InputMismatchException",
        "NoSuchElementException",
        "IllegalStateException"
      ]
    },
    {
      "title": "Java Scanner nextDouble() Method",
      "summary": "❮ Scanner Methods\nExampleGet your own Java Server\nPrint the value of every floating point number in the string:\nDefinition and Usage\nThe nextDouble() method returns a double value containing the number represented by the next token.\nThe scanner is able to interpret digit groupings, such as using a comma for separating groups of 3 digits. The format of the groupings and the character used as a decimal point depend on the locale settings of the scanner, which can be changed with the useLocale() method.\nWhat is a token?\nA token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method.\nSyntax\nTechnical Details\n❮ Scanner Methods",
      "examples": [
        "// Create a scanner object Scanner myObj = new Scanner(\"The probability is 45.6 percent\"); // Print the value of every floating point number in the scanner while (myObj.hasNext()) { if (myObj.hasNextDouble()) { System.out.println(myObj.nextDouble()); } else { myObj.next(); } }",
        "public double nextDouble()",
        "nextDouble()",
        "double",
        "useLocale()",
        "useDelimiter()",
        "InputMismatchException",
        "NoSuchElementException",
        "IllegalStateException"
      ]
    },
    {
      "title": "Java Scanner nextFloat() Method",
      "summary": "❮ Scanner Methods\nExampleGet your own Java Server\nPrint the value of every floating point number in the string:\nDefinition and Usage\nThe nextFloat() method returns a float value containing the number represented by the next token.\nThe scanner is able to interpret digit groupings, such as using a comma for separating groups of 3 digits. The format of the groupings and the character used as a decimal point depend on the locale settings of the scanner, which can be changed with the useLocale() method.\nWhat is a token?\nA token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method.\nSyntax\nTechnical Details\n❮ Scanner Methods",
      "examples": [
        "// Create a scanner object Scanner myObj = new Scanner(\"The probability is 45.6 percent\"); // Print the value of every floating point number in the scanner while (myObj.hasNext()) { if (myObj.hasNextFloat()) { System.out.println(myObj.nextFloat()); } else { myObj.next(); } }",
        "public float nextFloat()",
        "nextFloat()",
        "float",
        "useLocale()",
        "useDelimiter()",
        "InputMismatchException",
        "NoSuchElementException",
        "IllegalStateException"
      ]
    },
    {
      "title": "Java Scanner nextInt() Method",
      "summary": "❮ Scanner Methods\nExampleGet your own Java Server\nPrint the value of every integer in the string:\nDefinition and Usage\nThe nextInt() method returns the int value of the number that the next token represents. The token must represent a whole number between -2,147,483,648 and 2,147,483,647.\nThe scanner is able to interpret digit groupings, such as using a comma for separating groups of 3 digits. The format of the groupings depends on the locale settings of the scanner, which can be changed with the useLocale() method.\nIf the radix parameter is used, then it interprets numbers using the radix. For example, a radix of 16 would interpret numbers as hexadecimal (digits 0 to 9 and A to F). If the radix parameter is not used then it interprets numbers using the scanner's radix, which is 10 by default but it can be changed with the useRadix() method.\nWhat is a token?\nA token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details\n❮ Scanner Methods",
      "examples": [
        "// Create a scanner object Scanner myObj = new Scanner(\"An int is a number between -2,147,483,648 and 2,147,483,647\"); // Print the value of every int in the scanner while(myObj.hasNext()) { if(myObj.hasNextInt()) { System.out.println(myObj.nextInt()); } else { myObj.next(); } }",
        "public int nextInt()",
        "public int nextInt(int radix)",
        "nextInt()",
        "int",
        "useLocale()",
        "useRadix()",
        "useDelimiter()",
        "InputMismatchException",
        "NoSuchElementException",
        "IllegalStateException"
      ]
    },
    {
      "title": "Java Scanner nextLine() Method",
      "summary": "❮ Scanner Methods\nExampleGet your own Java Server\nOutput the contents a file line by line:\nDefinition and Usage\nThe nextLine() method returns a string containing all of the characters up to the next new line character in the scanner, or up to the end of the scanner if there are no more new line characters.\nSyntax\nTechnical Details\n❮ Scanner Methods",
      "examples": [
        "import java.io.File; // Import the File class import java.io.FileNotFoundException; // Import this class to handle errors import java.util.Scanner; // Import the Scanner class to read text files public class ReadFile { public static void main(String[] args) { try { File myObj = new File(\"filename.txt\"); Scanner myReader = new Scanner(myObj); while (myReader.hasNextLine()) { String data = myReader.nextLine(); System.out.println(data); } myReader.close(); } catch (FileNotFoundException e) { System.out.println(\"An error occurred.\"); e.printStackTrace(); } } }",
        "public String nextLine()",
        "nextLine()",
        "String",
        "NoSuchElementException",
        "IllegalStateException"
      ]
    },
    {
      "title": "Java Scanner nextLong() Method",
      "summary": "❮ Scanner Methods\nExampleGet your own Java Server\nPrint the value of every long integer in the string:\nDefinition and Usage\nThe nextLong() method returns the long value of the number that the next token represents. The token must represent a whole number between -9,223,372,036,854,775,808 and 9,223,372,036,854,775,807.\nThe scanner is able to interpret digit groupings, such as using a comma for separating groups of 3 digits. The format of the groupings depends on the locale settings of the scanner, which can be changed with the useLocale() method.\nIf the radix parameter is used, then it interprets numbers using the radix. For example, a radix of 16 would interpret numbers as hexadecimal (digits 0 to 9 and A to F). If the radix parameter is not used then it interprets numbers using the scanner's radix which is 10 by default, but it can be changed with the useRadix() method.\nWhat is a token?\nA token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details\n❮ Scanner Methods",
      "examples": [
        "// Create a scanner object Scanner myObj = new Scanner(\"A long is a number between -9,223,372,036,854,775,808 and 9,223,372,036,854,775,807\"); // Print the value of every long in the scanner while (myObj.hasNext()) { if (myObj.hasNextLong()) { System.out.println(myObj.nextLong()); } else { myObj.next(); } }",
        "public long nextLong()",
        "public long nextLong(int radix)",
        "nextLong()",
        "long",
        "useLocale()",
        "useRadix()",
        "useDelimiter()",
        "InputMismatchException",
        "NoSuchElementException",
        "IllegalStateException"
      ]
    },
    {
      "title": "Java Scanner nextShort() Method",
      "summary": "❮ Scanner Methods\nExampleGet your own Java Server\nPrint the value of every short integer in the string:\nDefinition and Usage\nThe nextShort() method returns the short value of the number that the next token represents. The token must represent a whole number between -32,768 and 32,767.\nThe scanner is able to interpret digit groupings, such as using a comma for separating groups of 3 digits. The format of the groupings depends on the locale settings of the scanner, which can be changed with the useLocale() method.\nIf the radix parameter is used, then it interprets numbers using the radix. For example, a radix of 16 would interpret numbers as hexadecimal (digits 0 to 9 and A to F). If the radix parameter is not used then it interprets numbers using the scanner's radix which is 10 by default, but it can be changed with the useRadix() method.\nWhat is a token?\nA token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with the useDelimiter() method.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details\n❮ Scanner Methods",
      "examples": [
        "// Create a scanner object Scanner myObj = new Scanner(\"An short is a number between -32,768 and 32,767\"); // Print the value of every short in the scanner while (myObj.hasNext()) { if (myObj.hasNextShort()) { System.out.println(myObj.nextShort()); } else { myObj.next(); } }",
        "public short nextShort()",
        "public short nextShort(int radix)",
        "nextShort()",
        "short",
        "useLocale()",
        "useRadix()",
        "useDelimiter()",
        "InputMismatchException",
        "NoSuchElementException",
        "IllegalStateException"
      ]
    },
    {
      "title": "Java Scanner radix() Method",
      "summary": "❮ Scanner Methods\nExampleGet your own Java Server\nShow the radix that is currently being used by the scanner:\nDefinition and Usage\nThe radix() method returns a number indicating the radix that the scanner uses to interpret whole numbers. The radix specifies how many different symbols can be used to represent each digit in a number. For example, a radix of 16 would allow the symbols 0 to 9 and A to F to be used as digits.\nSyntax\nTechnical Details\n❮ Scanner Methods",
      "examples": [
        "// Create a scanner object Scanner myObj = new Scanner(\"A string to scan\"); // Display the radix (defaults to 10) System.out.println(myObj.radix());",
        "public int radix()",
        "radix()",
        "int"
      ]
    },
    {
      "title": "Java Scanner reset() Method",
      "summary": "❮ Scanner Methods\nExampleGet your own Java Server\nReset changes made to the scanner's configuration:\nDefinition and Usage\nThe reset() method resets all changes to the scanner's configuration. Configuration of the scanner can be changed by the useDelimiter(), useLocale() and useRadix() methods.\nSyntax\nTechnical Details\n❮ Scanner Methods",
      "examples": [
        "// Create a scanner object Scanner myObj = new Scanner(\"A string to scan\"); // Change configuration myObj.useDelimiter(\",\"); myObj.useLocale(new Locale(\"es\")); myObj.useRadix(16); // Reset the configuration myObj.reset(); // Read configuration values System.out.println(myObj.delimiter()); System.out.println(myObj.locale()); System.out.println(myObj.radix());",
        "public Scanner reset()",
        "reset()",
        "useDelimiter()",
        "useLocale()",
        "useRadix()",
        "Scanner",
        "myObj.reset().useDelimiter(\",\");"
      ]
    },
    {
      "title": "Java Scanner useDelimiter() Method",
      "summary": "❮ Scanner Methods\nExample Get your own Java Server\nRead comma separated items:\nDefinition and Usage\nThe useDelimiter() method changes the delimiter used by the scanner. A delimiter is the sequence of characters which separates tokens in the data being scanned. It is described by a regular expression given by a string or a Pattern object.\nLearn more about regular expressions in our Java RegEx tutorial.\nWhat is a token?\nA token is a sequence of characters separated from other tokens by delimiters. The default delimiter is a block of whitespace characters but it can be changed with this method.\nSyntax\nOne of the following:\nParameter Values\nTechnical Details\n❮ Scanner Methods",
      "examples": [
        "// Create a scanner object Scanner myObj = new Scanner(\"Item 1,Item 2,Item 3\"); // Change delimiter myObj.useDelimiter(\",\"); // Read the contents of the scanner while (myObj.hasNext()) { System.out.println(myObj.next()); }",
        "public Scanner useDelimiter(Pattern pattern)",
        "public Scanner useDelimiter(String pattern)",
        "useDelimiter()",
        "Pattern",
        "Scanner",
        "myObj.useDelimiter(\",\").setRadix(16);"
      ]
    },
    {
      "title": "Java Scanner useLocale() Method",
      "summary": "❮ Scanner Methods\nExample Get your own Java Server\nRead numbers from a different locale:\nDefinition and Usage\nThe useLocale() method changes the locale used by the scanner. The locale determines how numbers are interpreted by deciding how digits are grouped, which character serves as a decimal point, etc.\nLocale objects\nThe useLocale() method requires a Locale object as an argument. Locale objects represent a language or country and they are used by a variety of Java classes to handle formatting and interpreting data.\nThe easiest way to get a Locale object is by using one of the objects provided by attributes of the Locale class.\nA list of available language and country attributes is shown below.\nIf the country or language you need is not in the list then you can create a new Locale object using a language code and an optional country code. Most codes are two or three characters long and each code represents a language or a country.\nSyntax\nParameter Values\nTechnical Details\n❮ Scanner Methods",
      "examples": [
        "// Create a scanner object Scanner myObj = new Scanner(\"1.500.000\"); // Change delimiter myObj.useLocale(new Locale(\"es\")); // Read and display the number System.out.println(myObj.nextInt());",
        "myObj.useLocale(Locale.GERMANY));",
        "Locale spanish = new Locale(\"es\"); Locale spain = new Locale(\"es\", \"ES\");",
        "public Scanner useLocale(Locale locale)",
        "useLocale()",
        "Locale",
        "Locale.CANADA",
        "Locale.CANADA_FRENCH",
        "Locale.CHINA",
        "Locale.FRANCE",
        "Locale.GERMANY",
        "Locale.ITALY",
        "Locale.JAPAN",
        "Locale.KOREA",
        "Locale.PRC",
        "Locale.TAIWAN",
        "Locale.UK",
        "Locale.US",
        "Locale.CHINESE",
        "Locale.ENGLISH",
        "Locale.FRENCH",
        "Locale.GERMAN",
        "Locale.ITALIAN",
        "Locale.JAPANESE",
        "Locale.KOREAN",
        "Locale.SIMPLIFIED_CHINESE",
        "Locale.TRADITIONAL_CHINESE",
        "Scanner",
        "myObj.useLocale(Language.GERMAN).useDelimiter(\",\");"
      ]
    },
    {
      "title": "Java Scanner useRadix() Method",
      "summary": "❮ Scanner Methods\nExample Get your own Java Server\nRead a hexadecimal number:\nDefinition and Usage\nThe useRadix() method changes the radix used by the scanner. The radix specifies how many different symbols can be used to represent each digit in a number. For example, a radix of 16 would allow the symbols 0 to 9 and A to F to be used as digits.\nSyntax\nParameter Values\nTechnical Details\n❮ Scanner Methods",
      "examples": [
        "// Create a scanner object Scanner myObj = new Scanner(\"FFAD01\"); // Change radix myObj.useRadix(16); // Read and display the number System.out.println(myObj.nextInt());",
        "public Scanner useRadix(int radix)",
        "useRadix()",
        "int",
        "Scanner",
        "myObj.useRadix(16).useDelimiter(\",\");"
      ]
    },
    {
      "title": "Java File Class Methods",
      "summary": "File Class Methods\nThe File class (from java.io) is used to work with file and directory paths. It lets you create, delete, and get information about files and folders - but it does not read or write the contents.\nRelated Pages\nJava File Handling Tutorial",
      "examples": [
        "File",
        "java.io"
      ]
    },
    {
      "title": "Java FileInputStream Methods",
      "summary": "FileInputStream Methods\nThe FileInputStream class provides methods to read data (as bytes) from a file:\nRelated Pages\nJava I/O Streams Tutorial\nJava FileInputStream Tutorial",
      "examples": [
        "FileInputStream",
        "FileChannel"
      ]
    },
    {
      "title": "Java FileOutputStream Methods",
      "summary": "FileOutputStream Methods\nThe FileOutputStream class provides methods to write data (as bytes) to a file:\nRelated Pages\nJava I/O Streams Tutorial\nJava FileOutputStream Tutorial",
      "examples": [
        "FileOutputStream",
        "FileChannel"
      ]
    },
    {
      "title": "Java BufferedReader Methods",
      "summary": "BufferedReader Methods\nThe BufferedReader class provides methods to read text efficiently:\nRelated Pages\nJava I/O Streams Tutorial\nJava BufferedReader Tutorial",
      "examples": [
        "BufferedReader",
        "mark()",
        "reset()",
        "Stream<String>"
      ]
    },
    {
      "title": "Java BufferedWriter Methods",
      "summary": "BufferedWriter Methods\nThe BufferedWriter class provides methods to write text efficiently:\nRelated Pages\nJava I/O Streams Tutorial\nJava BufferedWriter Tutorial",
      "examples": [
        "BufferedWriter"
      ]
    },
    {
      "title": "Java Iterator Interface",
      "summary": "Iterator Methods\nThe Iterator interface provides methods to access and iterate through collections:\nNote: The next() method uses the type of the iterator's items as its return value. This type is referred to as T in the table.\nRelated Pages\nJava Iterator Tutorial",
      "examples": [
        "Iterator",
        "next()"
      ]
    },
    {
      "title": "Java System Methods",
      "summary": "System Methods\nThe System class contains several useful static methods for input, output, properties, time, and memory management.",
      "examples": [
        "System",
        "\"user.dir\"",
        "Properties",
        "hashCode()",
        "\"\\n\"",
        "\"\\r\\n\"",
        "null",
        "println()"
      ]
    },
    {
      "title": "Java Errors and Exception Types",
      "summary": "Errors and Exception Types\nThe table below shows a list of common Error and Exception types in Java:\nRelated Pages\nJava Errors Tutorial\nJava Exception Handling Tutorial",
      "examples": [
        "Error",
        "Exception",
        "null"
      ]
    },
    {
      "title": "Java Examples",
      "summary": "Java Syntax\nJava Comments\nJava Variables\nJava Data Types\nJava Type Casting\nJava Operators\nJava Strings\nJava Math\nJava Booleans\nREMOVE ADS\nJava If...Else (Conditions)\nJava Switch\nJava Loops\nJava Arrays\nJava Methods\nJava Classes and Objects\nJava Modifiers\nJava Encapsulation\nJava Packages\nJava Inheritance\nJava Inner Classes\nJava Abstraction & Interfaces\nJava Enums\nJava User Input\nJava Dates\nJava ArrayList\nJava HashMap\nJava HashSet\nJava Iterator\nJava Wrapper Classes\nJava Exceptions (Try...Catch)\nJava Regular Expressions\nJava Threads\nJava Files",
      "examples": []
    },
    {
      "title": "Java Online Compiler",
      "summary": "Java Compiler (Editor)\nWith our online Java compiler, you can edit Java code, and view the result in your browser.\nClick on the \"Try it Yourself\" button to see how it works.\nPublish Your Code\nIf you want to create your own Java applications, check out W3Schools Spaces.\nW3Schools Spaces is a website-building tool that enables you to create and share your own website, as well as develop and host Java applications.\nYou can change the website's look and how it works by editing the code right in your web browser.\nIt's easy to use and doesn't require any setup.\nThe code editor is packed with features to help you achieve more:\nTemplates: Start from scratch or use a template\nCloud-based: no installations required. You only need your browser\nTerminal & Log: debug and troubleshoot your code easily\nFile Navigator: switch between files inside the code editor\nAnd much more!\nLearn Faster\nPractice is key to mastering coding, and the best way to put your Java knowledge into practice is by getting practical with code.\nUse W3Schools Spaces to build, test and deploy code.\nThe code editor lets you write and practice different types of computer languages. It includes Java, but you can use it for other languages too.\nNew languages are added all the time:\nIf you don't know Java, we suggest that you read our Java Tutorial from scratch.\nEasy Package Management\nGet an overview of your packages and easily add or delete frameworks and libraries. Then, with just one click, you can make changes to your packages without manual installation.\nBuild Powerful Websites\nYou can also use the code editor in W3School Spaces to build frontend or full-stack websites from scratch.\nOr you can use the 60+ templates available and save time:\nCreate your Spaces account today and explore them all!\nShare Your Website With The World\nHost and publish your websites in no time with W3School Spaces.\nW3Schools subdomain and SSL certificate are included for free with W3School Spaces. An SSL certificate makes your website safe and secure. It also helps people trust your website and makes it easier to find it online.\nWant a custom domain for your website?\nYou can buy a domain or transfer an existing one and connect it to your space.\nHow Does It Work?\nGet started in a few clicks with W3School Spaces.",
      "examples": [
        "public class Main { public static void main(String[] args) { System.out.println(\"Hello World!\"); } }",
        "Hello World!"
      ]
    },
    {
      "title": "Java Exercises",
      "summary": "Exercises\nTest your Java skills with exercises from all categories:\nSyntax\nOutput Text\nOutput Numbers\nComments\nVariables\nPrint Variables\nMultiple Variables\nVariable Names\nData Types\nNumbers\nBoolean Types\nCharacters\nType Casting\nOperators\nStrings\nString Concatenation\nStrings and Numbers\nSpecial Characters\nMath\nBooleans\nIf\nIf Else\nElse If\nShort Hand If Else\nSwitch\nWhile Loops\nDo While Loops\nFor Loops\nNested Loops\nFor-Each Loops\nBreak and Continue\nArrays\nArrays and Loops\nMultidimensional Arrays\nMethods\nMethod Parameters\nReturn Values\nMethod Overloading\nScope\nRecursion\nOOP\nClasses/Objects\nClass Attributes\nClass Methods\nConstructors\nModifiers\nEncapsulation\nPackages\nInheritance\nPolymorphism\nInner Classes\nAbstraction\nInterface\nEnums\nUser Input\nDate\nArrayList\nLinkedList\nList Sorting\nHashMap\nHashSet\nIterator\nWrapper Classes\nExceptions\nRegular Expressions\nThreads\nLambda Expressions\nAdvanced Sorting\nFiles\nCreate and Write to Files\nRead Files\nDelete Files\nLog in to track your progress\nIf you haven't already, sign up to become a W3Schooler, and get points for every exercise you complete.\nAs a logged-in W3Schools user you will have access to many features like having your own web page, track your learning progress, receive personal guided paths, and more.\nThe Exercise\nThe exercises are a mix of \"multiple choice\" and \"fill in the blanks\" questions. There are between 3 and 9 questions in each category. The answer can be found in the corresponding tutorial chapter. If you're stuck, or answer wrong, you can try again or hit the \"Show Answer\" button to see the correct answer.\nKickstart your career\nGet certified by completing the JAVA course",
      "examples": []
    },
    {
      "title": "Java Quiz",
      "summary": "You can test your Java skills with W3Schools' Quiz.\nThe Test\nThe test contains 25 questions and there is no time limit.\nThe test is not official, it's just a nice way to see how much you know, or don't know, about Java.\nCount Your Score\nYou will get 1 point for each correct answer. At the end of the Quiz, your total score will be displayed. Maximum score is 25 points.\nStart the Quiz\nGood luck!\nStart the Java Quiz ❯\nIf you don't know Java, we suggest that you read our Java Tutorial from scratch.\nKickstart your career\nGet certified by completing the JAVA course",
      "examples": []
    },
    {
      "title": "Java Server Create Java Server Powerful Code Editor Practice Makes Perfect kAI",
      "summary": "Coding Skills\nAI Tutor\nProjects\nSecurely\nChoose your Plan\nBy subscribing to a plan you support the W3Schools mission to make\nlearning available to everyone - no matter their background.\n$0 /Forever\nThis is for you that are beginning to explore coding and web development\nTrack your progress\nSet your goals\nBuild and host 1 static website\n100 credits/month\nAccess various AI features like W3Schools kAI coding tutor and interview preparation.\nNo support\n$14.99 /Month\nThis is for you that want to learn and reach your goals faster. Build fullstack projects, ad free experience.\nAd-free experience\nUnlimited challenges\nUnlimited practice tests\nBuild and host 15 static websites\nBuild and host 1 full stack server\nChoose from 75+ templates\n10000 credits/month\nAccess various AI features like W3Schools kAI coding tutor and interview preparation.\nCancel anytime\nFor teachers\nSpend less time on admin tasks while engaging your students. Help them learn, practice and collaborate. All in one place.\nAd-free for focused learning\nDashboard to manage your classroom\nStudy plans for structured learning\nTrack progress with insights\nInteractive code challenges and projects\nAccess to all courses and certification exams\nSpaces for building and publishing projects\n25% OFF\nYou can also buy a domain or connect an existing one.\nSave Time with Templates\nJust landed in Spaces\nLearn to code more effectively\nand intelligently with kAI - AI tutor\nHi! I'm kAI, W3Schools AI Tutor...\nFeel free to ask me any coding-related questions, and I'll do my best to assist you.\nI can help you checking your code for errors, improving your code's structure, explaining coding concepts in a clear and understandable way, and more...\nI can even create complete websites for you based on your input, so what are you waiting for?\nSuper Simple to Share\nIncluded for free in all plans\nWant custom domains?\nHow it works\nCoding Made Easy\nCloud-based\nTerminal & Log\nHow To Libraries\nDatabase\nFile Navigator\nPackage Manager\nAnalytics\nEnvironment Manager\nSave Time & Money.\nAll Your Files in One Place.\nFix Your Code Faster.\nGet Full Data Visibility.\nIncreased Control and Security.\nFind What You Need Quicker.\nGet Traffic Insights.\nGet Inspired\nFrequently Asked Questions\nWith Basic Spaces, you can build frontend websites. Whereas with Fullstack Spaces, you can build frontend and backend websites.\nBasic Spaces include HTML, CSS, and Javascript. Full Stack Spaces include everything in Basic Spaces plus PHP, Python, React.js, Vue.js, Node.js, Handlebars, and Django.\nYour subscription will be automatically renewed every month.\nYour access to all the benefits for the paid period of time will continue. However, the subscription will not be renewed automatically.\nTo subscribe W3Schools accounts for multiple users, you can contact sales@w3schools.com",
      "examples": []
    },
    {
      "title": "Java Syllabus",
      "summary": "Introduction\nThe W3Schools Java Tutorial is comprehensive and beginner-friendly.\nIt will give you a fundamental knowledge of Java.\nIt is designed for beginners and requires no prior experience with programming.\nThe content has been carefully made to be bite-sized, simple, and easy to understand.\nThe content has been proven by millions of users over the years. It is updated and improved frequently.\nThe syllabus outline and its sequence are structured so you can learn Java step by step, from the introduction to creating your first application with Java.\nGet Started With Java »\nLearning Outcomes\nUnderstand Java and set up a development environment.\nLearn the foundations of Java such as Java syntax, variables, data types, and operators.\nUse control structures (If, for, while loops).\nUnderstand and apply object-oriented programming (OOP) concepts: classes, objects, and inheritance.\nCreate and use methods for modular programming.\nHandle exceptions and write error-handling code.\nWork with Java collections like ArrayList and HashMap.\nWrite and run Java programs.\nNote: Are you a teacher teaching Java? W3Schools Academy is a toolbox of features that can help you teach. It offers classroom features such as pre-built study plans, classroom administration and much more. Read more about Academy here.\nWhich Subjects Are Java Relevant For?\nComputer Science:\nJava is used to teach programming concepts, algorithms, and software development.\nMathematics:\nJava can be used for making algorithms and solving math problems.\nInformation Technology (IT):\nJava is relevant for learning about software development, database management, and IT systems.\nEngineering:\nJava is used in projects involving software engineering and building applications.\nPhysics:\nJava can be used to create simulations.\nRobotics and Electronics:\nJava is often used in programming microcontrollers and robotics projects.\nStatistics:\nJava can be used to analyze data and to do statistical calculations.\nGet Started\nActivities\nIn this tutorial we offer different activities for you to learn Java for free:\nLessons\nExercises\nQuizzes\nSign in to Track Progress\nYou can also create a free account to track your progress.\nAs a signed-in user, you get access to features such as:\nLearning paths\nSandbox and lab environments\nAchievements\nAnd much more!\nSign Up - It's free\nOverview of the Modules\nJava HOME\nJava Introduction\nJava Get Started\nJava Syntax\nJava Output\nJava Comments\nJava Variables\nJava Data Types\nJava Type Casting\nJava Operators\nJava Strings\nJava Math\nJava Booleans\nJava If...Else\nJava Switch\nJava While Loop\nJava For Loop\nJava Break and Continue\nJava Arrays\nJava Methods\nJava Method Parameters\nJava Method Overloading\nJava Scope\nJava Recursion\nJava OOP (Object-Oriented Programming)\nJava Classes/Objects\nJava Class Attributes\nJava Class Metods\nJava Constructors\nJava Modifiers\nJava Encapsulation\nJava Packages\nJava Inheritance\nJava Polymorphism\nJava Inner Classes\nJava Abstraction\nJava Interface\nJava Enums\nJava User Input\nJava Date\nJava ArrayList\nJava LinkedList\nJava Link Sorting\nJava HashMap\nJava HashSet\nJava Iterator\nJava Wrapper Classes\nJava Exceptions\nJava Throw\nJava Regular Expressions\nJava Threads\nJava Lambda\nJava Advanced Sorting\nJava File Handling\nJava Create Files\nJava Write to Files\nJava Read Files\nJava Delete Files\nGet Started\nSandbox and Lab Environment\nJava, like any other coding language, is best learned by working hands-on with code.\nEasily try code with our \"Try it Yourself\" editor.\nHere, you can edit Java code and view the result.\nExampleGet your own Java Server\nTry it Yourself »\nIf you want to explore more and host your project, we have a feature called Spaces that allows you to build, test and deploy Java code and other backend languages.\nHere you get a secure sandbox environment called Spaces, where you can practice coding and test projects in real-time.\nSpaces allow you to test, build, and deploy code. This includes a W3Schools subdomain, hosting, and secure SSL certificates.\nSpaces require no installation and run directly in the browser.\nFeatures include:\nCollaboration\nFile navigator\nTerminal & log\nPackage manager\nDatabase\nEnvironment manager\nAnalytics\nCreate a Spaces Account\nJava Certification\nW3Schools offers an end-of-pathway certification program.\nHere you can take exams to get certified.\nThe Java exam is a test that summarizes the W3Schools Java syllabus.\nAfter passing the exam you get the \"Certified Java Developer\" Certification.\nThere are two different types of certifications:\nNon-adaptive\nAdaptive\nThe non-adaptive is pass or no pass.\nThe adaptive certification is adaptive and graded; students will get a grade from intermediate, advanced to professional.\nBuy Certificate »\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach Java?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo »",
      "examples": [
        "public class Main { public static void main(String[] args) { System.out.println(\"Hello World\"); } }"
      ]
    },
    {
      "title": "Java Study Plan",
      "summary": "Introduction\nThe Java study plan helps you teach your students Java step-by-step.\nCreating a study plan for Java is easy.\nYou can use a pre-built study plan or customize it.\nStudents have different skill levels. The study plans can be customized to ensure that everyone is challenged.\nSave time with pre-built teacher materials and study plans. Easily organize your class with a timeline from the introduction of Java to the final exam.\nW3Schools Academy\nThis study plan is a feature of W3Schools Academy.\nW3Schools Academy is a platform that has everything you need to teach coding, all in one place.\nIt offers you as a teacher a toolbox of features that helps you succeed with teaching in your classroom.\nYou need to have an active subscription to access the study plan feature. There are two different subscription tiers:\nEssentials ($1.99 / month per student)\nFull Access ($5.99 / month per student)\nCalculate your price and order here.\nLearn More »\nAcademy also offer other features such as:\nManaging your classroom\nTracking of student progress and reports\nLabs, assignments, and code challenges (prebuilt challenges or create your own ones)\nAuto-grading\nTeaching materials\nCertification exams\nGet a free demo »\nTeacher Materials\nW3Schools has everything you need to teach Java.\nThe Java training materials is available for you to include and use in your study plan:\nW3Schools Java Tutorial\nJava Exercises\nJava Quiz\nJava Challenges (Coding challenges)\nJava Certification Exam (End of Pathway Exam)\nJava Syllabus\nWith the Java Syllabus, your students will start with the basics, like understanding variables, data types, and simple object-oriented programming concepts, and move to more advanced topics, like working with classes, inheritance, and handling exceptions. Each chapter has examples, try-it-yourself sections, exercises, and quizzes to make learning easy, interactive, and fun.\nRead more about Java Syllabus.\nStudy Plan Overview\nThe study plan features are made to help teachers and students. They make learning easy, flexible, and fun. These features work for different types of classes, learning styles and student level.\nLearning Paths\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nYou can add ready-made learning paths.\nThe learning paths are by default ordered by our recommended order.\nYou can change the order.\nYou can add custom activities with text, links, or multi-media files.\nDrag and drop or click to make changes to the path.\nInteractive Content\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTutorials\nTry-its (test code snippets)\nExercises\nQuiz\nChallenges\nLabs\nTimeline and Pace\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nYou can set a timeline of your study plan (e.g., 4-week, 8-week, 12-week, 24-week plans).\nYou can decide the learning pace for your class.\nDifferent study plans can be assigned to different students in the same class.\nThe flexibility can help to make sure that everyone is challenged.\nTrack Student Progress\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nThere are tools to track student progress.\nThe analytic tools include: chapter progress, exercises results, quiz results, exam results, and much more.\nThe challenges can be auto-graded or manually graded. The results are available to you as a teacher.\nEnd of Pathway Exam\nThe Java study plan aligns with the Java Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the Java Tutorial.\nYou get reports of the students' results.\nThe Java study plan aligns with the Java Certification Exam.\nThe exam can be taken at the end of the study plan, at your selected date.\nThe exam summarizes the Java Tutorial.\nYou get reports of the students' results.\nAccessibility\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nStudy plans and learning materials are accessible on desktops, tablets, and smartphones.\nThis ensures students can learn anytime, anywhere.\nLearn More »\nSample Study Plan\nYou choose the timeline and pace of your study plans.\nSchools have different preferences.\nSome would like more intensive pace, e.g. 5 weeks, others 12 or more weeks.\nIt is completely up to you.\nFor example, this is how a 5-week Java study plan could look like:\nWeek 1: Introduction, Output\nWeek 2: Variables, Data Types, Strings\nWeek 3: Opearators & Math, Conditionals, Loops\nWeek 4: Arrays, Methods, Classes\nWeek 5: File Handling, Java Certification Exam\nImage of Sample Java study plan:\nReady to get started?\nStart with Java Study Plans today.\nGet Started »\nAre You a Teacher?\nAre you interested in learning how you can use W3Schools Academy to Teach Java programming?\nWatch a demo of W3Schools Academy. You'll see how it works, and discover how it can make teaching programming easier and more engaging.\nWatch Demo »",
      "examples": []
    },
    {
      "title": "W3Schools Java Certificate",
      "summary": "W3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nW3Schools offers an Online Certification Program.\nThe perfect solution for busy professionals who need to balance work, family, and career building.\nMore than 50 000 certificates already issued!\nGet Your Certificate »\nWho Should Consider Getting Certified?\nAny student or professional within the digital industry.\nCertifications are valuable assets to gain trust and demonstrate knowledge to your clients, current or future employers on a ever increasing competitive market.\nW3Schools is Trusted by Top Companies\nW3Schools has over two decades of experience with teaching coding online.\nOur certificates are recognized and valued by companies looking to employ skilled developers.\nSave Time and Money\nShow the world your coding skills by getting a certification.\nThe prices is a small fraction compared to the price of traditional education.\nDocument and validate your competence by getting certified!\nExam overview\nFee: 95 USD\nAchievable certification levels:\nIntermediate (40%)\nAdvanced (75%)\nProfessional (90%)\nNumber of questions:\nAdaptive, 60 on average\nRequirement to pass:\nMinimum 40% - Intermediate level\nTime limit: 60 minutes\nNumber of attempts to pass: 3\nExam deadline: None\nCertification Expiration: None\nFormat: Online, multiple choice\nRegister now »\nAdvance Faster in Your Career\nGetting a certificate proves your commitment to upgrading your skills.\nThe certificate can be added as credentials to your CV, Resume, LinkedIn profile, and so on.\nIt gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nKnowledge is power, especially in the current job market.\nDocumentation of your skills enables you to advance your career or helps you to start a new one.\nHow Does It Work?\nStudy for free at W3Schools.com\nStudy at your own speed\nTest your skills with W3Schools online quizzes\nApply for your certificate by paying an exam fee\nTake your exam online, at any time, and from any location\nGet Your Certificate and Share It With The World\nExample certificate:\nEach certificate gets a unique link that can be shared with others.\nValidate your certification with the link or QR code.\nCheck how it looks like in this Example.\nShare your certificate on Linked in the Certifications section in just one click!\nDocument Your Skills\nGetting a certificate proves your commitment to upgrade your skills, gives you the credibility needed for more responsibilities, larger projects, and a higher salary.\nGet Your Certificate »\nLooking to add multiple users?\nAre you an educator, manager or business owner looking for courses or certifications?\nWe are working with schools, companies and organizations from all over the world.\nGet courses and/or certifications for your team here.",
      "examples": []
    }
  ],
  "glossary": [
    "abs",
    "abstract",
    "acos",
    "add",
    "addall",
    "addexact",
    "arithmetic operators",
    "arraylist loop",
    "asin",
    "assert",
    "assignment operators",
    "atan",
    "atan2",
    "backend",
    "boolean",
    "booleans",
    "break",
    "byte",
    "case",
    "catch",
    "cbrt",
    "ceil",
    "char",
    "characters",
    "charat",
    "check anagram",
    "class",
    "clear",
    "clone",
    "close",
    "codepointat",
    "codepointbefore",
    "codepointcount",
    "compare",
    "compareto",
    "comparetoignorecase",
    "comparison operators",
    "compute",
    "computeifabsent",
    "computeifpresent",
    "concat",
    "concatenation",
    "constants  final",
    "contains",
    "containskey",
    "containsvalue",
    "contentequals",
    "continue",
    "copysign",
    "copyvalueof",
    "cos",
    "cosh",
    "count words",
    "decrementexact",
    "delimiter",
    "do",
    "double",
    "else",
    "else if",
    "endswith",
    "ensurecapacity",
    "entryset",
    "enum",
    "enum constructor",
    "equals",
    "equalsignorecase",
    "exercises",
    "exp",
    "expm1",
    "exports",
    "extends",
    "fibonacci sequence",
    "fill",
    "final",
    "finally",
    "find duplicates",
    "find gcd",
    "findinline",
    "findwithinhorizon",
    "float",
    "floor",
    "floordiv",
    "floormod",
    "foreach",
    "format",
    "free",
    "get",
    "getbytes",
    "getchars",
    "getexponent",
    "getfirst",
    "getlast",
    "getordefault",
    "hashcode",
    "hashmap loop",
    "hasnext",
    "hasnextboolean",
    "hasnextbyte",
    "hasnextdouble",
    "hasnextfloat",
    "hasnextint",
    "hasnextline",
    "hasnextlong",
    "hasnextshort",
    "hypot",
    "identifiers",
    "ieeeremainder",
    "if",
    "implements",
    "import",
    "incrementexact",
    "indexof",
    "instanceof",
    "int",
    "interface",
    "isempty",
    "iterator",
    "java abstraction",
    "java advanced",
    "java annotations",
    "java anonymous",
    "java arraylist",
    "java arrays",
    "java booleans",
    "java bufferedreader",
    "java bufferedwriter",
    "java classes",
    "java collections",
    "java comments",
    "java compiler",
    "java constructors",
    "java date",
    "java debugging",
    "java encapsulation",
    "java enum",
    "java errors",
    "java exceptions",
    "java exercises",
    "java fileinputstream",
    "java fileoutputstream",
    "java files",
    "java generics",
    "java hashmap",
    "java hashset",
    "java home",
    "java inheritance",
    "java interface",
    "java intro",
    "java iterator",
    "java keywords",
    "java lambda",
    "java linkedhashmap",
    "java linkedhashset",
    "java linkedlist",
    "java list",
    "java map",
    "java math",
    "java methods",
    "java modifiers",
    "java oop",
    "java operators",
    "java output",
    "java polymorphism",
    "java projects",
    "java quiz",
    "java recursion",
    "java reference",
    "java regex",
    "java scope",
    "java server",
    "java set",
    "java strings",
    "java switch",
    "java syllabus",
    "java syntax",
    "java threads",
    "java treemap",
    "java treeset",
    "java variables",
    "javascript",
    "join",
    "keyset",
    "lastindexof",
    "length",
    "listiterator",
    "locale",
    "log",
    "log10",
    "log1p",
    "logical operators",
    "long",
    "matches",
    "max",
    "merge",
    "min",
    "module",
    "multidimensional arrays",
    "multiple variables",
    "multiplyexact",
    "native",
    "negateexact",
    "nested if",
    "nested loops",
    "new",
    "next",
    "nextafter",
    "nextboolean",
    "nextbyte",
    "nextdouble",
    "nextdown",
    "nextfloat",
    "nextint",
    "nextline",
    "nextlong",
    "nextshort",
    "nextup",
    "note",
    "numbers",
    "offsetbycodepoints",
    "operator precedence",
    "package",
    "palindrome check",
    "pow",
    "print",
    "print numbers",
    "print variables",
    "printf",
    "println",
    "private",
    "programs",
    "protected",
    "public",
    "put",
    "putall",
    "putifabsent",
    "radix",
    "random",
    "random number",
    "references",
    "regionmatches",
    "remove",
    "remove duplicates",
    "remove whitespace",
    "removeall",
    "removefirst",
    "removeif",
    "removelast",
    "replace",
    "replaceall",
    "replacefirst",
    "report error",
    "requires",
    "reset",
    "retainall",
    "return",
    "return values",
    "rint",
    "round",
    "scalb",
    "set",
    "short",
    "signum",
    "sin",
    "sinh",
    "size",
    "sort",
    "special characters",
    "split",
    "spliterator",
    "sqrt",
    "square root",
    "startswith",
    "statements",
    "static",
    "sublist",
    "subsequence",
    "substring",
    "subtractexact",
    "super",
    "switch",
    "synchronized",
    "tan",
    "tanh",
    "throw",
    "throws",
    "toarray",
    "tochararray",
    "todegrees",
    "tointexact",
    "tolowercase",
    "toradians",
    "tostring",
    "touppercase",
    "transient",
    "trim",
    "trimtosize",
    "try",
    "ulp",
    "usedelimiter",
    "uselocale",
    "useradix",
    "valueof",
    "values",
    "var",
    "void",
    "volatile",
    "w3schools spaces"
  ],
  "objectives": [
    "View your completed tutorials, exercises, and quizzes",
    "Keep an eye on your progress and daily streaks",
    "Set goals and create learning paths",
    "Create your own personal website"
  ]
}