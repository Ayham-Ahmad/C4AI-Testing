{
  "course_name": "SVG",
  "description": "SVG defines vector-based graphics in XML, which can be directly embedded in HTML pages. SVG graphics are scalable, and do not lose any quality if they are zoomed or resized: The HTML <canvas> element element is used to draw graphics, on the fly, with JavaScript: The graphic above shows four elements: a red rectangle, a gradient rectangle, a multicolor rectangle, and a multicolor text inside a <canvas> element. JavaScript libraries are used for both Artificial Intelligence graphs and other charts: Here is an example of a 3D pie made with Google Chart: Google Maps lets you embed maps in HTML pages. Learn how to make a game with HTML and JavaScript.",
  "course_summary": [
    {
      "title": "SVG Tutorial",
      "summary": "Learn SVG\nSVG stands for Scalable Vector Graphics.\nSVG defines vector-based graphics in XML format.\nSVG graphics are scalable, and do not lose any quality if they are zoomed or resized.\nSVG is supported by all major browsers.\nExamples in Each Chapter\nWith our \"Try it Yourself\" editor, you can edit the SVG, and click on a button to view the result.\nSVG Example\nWhat you should already know\nBefore you continue, you should have a basic understanding of the following:\nHTML\nBasic XML\nIf you want to study these subjects first, find the tutorials on our Home page.\nWhat is SVG?\nSVG stands for Scalable Vector Graphics\nSVG is used to define vector-based graphics for the Web\nSVG defines graphics in XML format\nEach element and attribute in SVG files can be animated\nSVG is a W3C recommendation\nSVG integrates with other standards, such as CSS, DOM, XSL and JavaScript\nREMOVE ADS\nSVG is a W3C Recommendation\nSVG 1.0 became a W3C Recommendation on 4 September 2001.\nSVG 1.1 became a W3C Recommendation on 14 January 2003.\nSVG 1.1 (Second Edition) became a W3C Recommendation on 16 August 2011.\nSVG Advantages\nAdvantages of using SVG over other image formats (like JPEG and GIF) are:\nSVG images can be created and edited with any text editor\nSVG images can be searched, indexed, scripted, and compressed\nSVG images are scalable\nSVG images can be printed with high quality at any resolution\nSVG images are zoomable\nSVG graphics do NOT lose any quality if they are zoomed or resized\nSVG is an open standard\nSVG files are pure XML\nHow does it Work?\nSVG has elements and attributes for rectangles, circles, ellipses, lines, polygons, curves, and more.\nSVG also supports filter and blur effects, gradients, rotations, animations, interactivity with JavaScript, and more.\nA simple SVG document consists of the <svg> root element and several basic shape elements that will build a graphic together.\nCreating SVG Images\nSVG images can be created with any text editor, or with a drawing program, like Inkscape.\nFor you to learn the concept and basics of SVG, this tutorial will just use plain text to teach you SVG.\nThe next page shows how to embed an SVG image directly into an HTML page!",
      "examples": [
        "<html>\n<body>\n\n<h1>My first SVG</h1>\n\n<svg width=\"100\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n<circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"green\" stroke-width=\"4\" fill=\"yellow\" />\n</svg>\n\n</body>\n</html>"
      ]
    },
    {
      "title": "SVG in HTML",
      "summary": "You can embed SVG elements directly into your HTML pages.\nEmbed SVG Directly Into HTML Pages\nHere is an example of a simple SVG graphic:\nand here is the HTML code:\nExample\nSVG Code explanation:\nStart with the <svg> root element\nThe width and height of the SVG image is defined with the width and height attributes\nSince SVG is an XML dialect, always bind the namespace correctly with the xmlns attribute\nThe namespace \"http://www.w3.org/2000/svg\" identifies SVG elements inside an HTML document\nThe <circle> element is used to draw a circle\nThe cx and cy attributes define the x and y coordinates of the center of the circle. If omitted, the circle's center is set to (0, 0)\nThe r attribute defines the radius of the circle\nThe stroke and stroke-width attributes control how the outline of a shape appears. We set the outline of the circle to a 4px green \"border\"\nThe fill attribute refers to the color inside the circle. We set the fill color to yellow\nThe closing </svg> tag closes the SVG image\nNote: Since SVG is written in XML, remember this:\nAll elements must be properly closed\nXML is case-sensitive, so write all SVG elements and attributes in same case. We prefer lower-case\nPlace all attribute values in SVG inside quotes (even if they are numbers)\nREMOVE ADS\nAnother SVG Example\nHere is another example of a simple SVG graphic:\nand here is the HTML code:\nExample\nSVG Code explanation:\nStart with the <svg> root element, define the width and height, and proper namespace\nThe <rect> element is used to draw a rectangle\nThe width and height of the rectangle is set to 100% of the width/height of the <svg> element\nSet the fill color of the rectangle to green\nThe <circle> element is used to draw a circle\nThe cx and cy attributes define the x and y coordinates of the center of the circle\nThe r attribute defines the radius of the circle\nWe set the fill color of the circle to yellow\nThe <text> element is used to draw a text\nThe x and y attributes define the x and y coordinates of the center of the text\nThe font-size attribute defines the font size of the text\nThe text-anchor attribute defines where we want the midpoint (of the text) to be\nThe fill attribute defines the color of the text\nWrite \"SVG\" as the text to show\nClose the SVG image with </svg>",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<body>\n\n<h1>My first SVG</h1>\n\n<svg width=\"100\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n<circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"green\" stroke-width=\"4\" fill=\"yellow\" />\n</svg>\n\n</body>\n</html>",
        "<!DOCTYPE html>\n<html>\n<body>\n\n<svg width=\"150\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"100%\" height=\"100%\" fill=\"green\" />\n<circle cx=\"75\" cy=\"50\" r=\"40\" fill=\"yellow\" />\n<text x=\"75\" y=\"60\" font-size=\"30\" text-anchor=\"middle\" fill=\"red\">SVG</text>\n</svg>\n\n</body>\n</html>",
        "<svg>",
        "width",
        "height",
        "xmlns",
        "<circle>",
        "cx",
        "cy",
        "r",
        "stroke",
        "stroke-width",
        "fill",
        "</svg>",
        "<rect>",
        "<text>",
        "x",
        "y",
        "font-size",
        "text-anchor"
      ]
    },
    {
      "title": "SVG <rect>",
      "summary": "SVG Shapes\nSVG has some predefined shape elements that can be used by developers:\nRectangle <rect>\nCircle <circle>\nEllipse <ellipse>\nLine <line>\nPolyline <polyline>\nPolygon <polygon>\nPath <path>\nThe following chapters will explain each element, starting with the <rect> element.\nSVG Rectangle - <rect>\nThe <rect> element is used to create a rectangle and variations of a rectangle shape.\nThe <rect> element has six basic attributes to position and shape the rectangle:\nAn SVG Rectangle\nThis example creates a rectangle with the six basic attributes and a fill color:\nHere is the SVG code:\nExample\nCode explanation:\nThe width and height attributes of the <rect> element define the height and the width of the rectangle\nThe x and y attributes defines the x- and y-position of the top-left corner of the rectangle (x=\"10\" places the rectangle 10px from the left margin and y=\"10\" places the rectangle 10px from the top margin) in the SVG canvas\nThe rx and ry attributes defines the radius of the corners of the rectangle\nThe fill attribute defines the fill color of the rectangle\nA Rectangle With Border\nLet's look at another example that contains some new attributes:\nHere is the SVG code:\nExample\nCode explanation:\nThe style attribute is used to define CSS properties for the rectangle\nThe CSS fill property defines the fill color of the rectangle\nThe CSS stroke-width property defines the width of the border of the rectangle\nThe CSS stroke property defines the color of the border of the rectangle\nREMOVE ADS\nA Rectangle With Opacity\nLet's look at another example that contains some new attributes:\nHere is the SVG code:\nExample\nCode explanation:\nThe CSS fill-opacity property defines the opacity of the fill color (legal range: 0 to 1)\nThe CSS stroke-opacity property defines the opacity of the stroke color (legal range: 0 to 1)\nAnother Rectangle With Opacity\nDefine the opacity for the whole element:\nHere is the SVG code:\nExample\nCode explanation:\nThe CSS opacity property defines the opacity value for the whole element (legal range: 0 to 1)\nA Rectangle With Rounded Corners\nLast example, create a rectangle with rounded corners:\nHere is the SVG code:\nExample\nCode explanation:\nThe rx and the ry attributes rounds the corners of the rectangle",
      "examples": [
        "<svg width=\"300\" height=\"130\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"200\" height=\"100\" x=\"10\" y=\"10\" rx=\"20\" ry=\"20\" fill=\"blue\" />\n</svg>",
        "<svg width=\"320\" height=\"130\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"300\" height=\"100\" x=\"10\" y=\"10\" style=\"fill:rgb(0,0,255);stroke-width:3;stroke:red\" />\n</svg>",
        "<svg width=\"300\" height=\"170\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"150\" height=\"150\" x=\"10\" y=\"10\"\nstyle=\"fill:blue;stroke:pink;stroke-width:5;fill-opacity:0.1;stroke-opacity:0.9\" />\n</svg>",
        "<svg width=\"300\" height=\"170\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"150\" height=\"150\" x=\"10\" y=\"10\"\nstyle=\"fill:blue;stroke:pink;stroke-width:5;opacity:0.5\" />\n</svg>",
        "<svg width=\"300\" height=\"170\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"150\" height=\"150\" x=\"10\" y=\"10\" rx=\"20\" ry=\"20\"\nstyle=\"fill:red;stroke:black;stroke-width:5;opacity:0.5\" />\n</svg>",
        "<rect>",
        "<circle>",
        "<ellipse>",
        "<line>",
        "<polyline>",
        "<polygon>",
        "<path>",
        "width",
        "height",
        "x",
        "y",
        "rx",
        "ry",
        "fill",
        "style",
        "stroke-width",
        "stroke",
        "fill-opacity",
        "stroke-opacity",
        "opacity"
      ]
    },
    {
      "title": "SVG <circle>",
      "summary": "SVG Circle - <circle>\nThe <circle> element is used to create a circle.\nThe <circle> element has three basic attributes to position and set the size of the circle:\nAn SVG Circle\nThe following example creates a circle:\nHere is the SVG code:\nExample\nCode explanation:\nThe r attribute defines the radius of the circle\nThe cx and cy attributes define the x- and y-axes center of the circle. If they are omitted, the circle's center is set to (0,0)\nThe fill attribute defines the color of the circle\nAn SVG Circle with Border\nThe following example creates a circle with border:\nHere is the SVG code:\nExample\nCode explanation:\nThe stroke attribute defines the color of the border around the circle\nThe stroke-width attribute defines the width of the border around the circle\nAn SVG Circle with Opacity\nThe following example creates a circle with opacity:\nHere is the SVG code:\nExample\nCode explanation:\nThe opacity attribute defines the opacity of the circle",
      "examples": [
        "<svg height=\"100\" width=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n<circle r=\"45\" cx=\"50\" cy=\"50\" fill=\"red\" />\n</svg>",
        "<svg height=\"100\" width=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n<circle r=\"45\" cx=\"50\" cy=\"50\" fill=\"red\" stroke=\"green\" stroke-width=\"3\" />\n</svg>",
        "<svg height=\"100\" width=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n<circle r=\"45\" cx=\"50\" cy=\"50\" fill=\"red\" stroke=\"green\" stroke-width=\"3\" opacity=\"0.5\" />\n</svg>",
        "<circle>",
        "r",
        "cx",
        "cy",
        "fill",
        "stroke",
        "stroke-width",
        "opacity"
      ]
    },
    {
      "title": "SVG <ellipse>",
      "summary": "SVG Ellipse - <ellipse>\nThe <ellipse> element is used to create an ellipse.\nAn ellipse is closely related to a circle. The difference is that an ellipse has an x and a y radius that differs from each other, while a circle has equal x and y radius.\nThe <ellipse> element has four basic attributes to position and set the size of the ellipse:\nAn SVG Ellipse\nThe following example creates an ellipse:\nHere is the SVG code:\nExample\nCode explanation:\nThe rx attribute defines the x (horizontal) radius\nThe ry attribute defines the y (vertical) radius\nThe cx attribute defines the x-axis center of the ellipse\nThe cy attribute defines the y-axis center of the ellipse\nREMOVE ADS\nThree Ellipses\nThe following example creates three ellipses on top of each other:\nHere is the SVG code:\nExample\nTwo Ellipses\nThe following example combines two ellipses (one yellow and one white):\nHere is the SVG code:\nExample",
      "examples": [
        "<svg height=\"140\" width=\"500\" xmlns=\"http://www.w3.org/2000/svg\">\n<ellipse rx=\"100\" ry=\"50\" cx=\"120\" cy=\"80\"\nstyle=\"fill:yellow;stroke:green;stroke-width:3\" />\n</svg>",
        "<svg height=\"150\" width=\"500\" xmlns=\"http://www.w3.org/2000/svg\">\n<ellipse cx=\"240\" cy=\"100\" rx=\"220\" ry=\"30\" fill=\"purple\" />\n<ellipse cx=\"220\" cy=\"70\" rx=\"190\" ry=\"20\" fill=\"lime\" />\n<ellipse cx=\"210\" cy=\"45\" rx=\"170\" ry=\"15\" fill=\"yellow\" />\n</svg>",
        "<svg height=\"100\" width=\"500\" xmlns=\"http://www.w3.org/2000/svg\">\n<ellipse cx=\"240\" cy=\"50\" rx=\"220\" ry=\"30\" fill=\"yellow\" />\n<ellipse cx=\"220\" cy=\"50\" rx=\"190\" ry=\"20\" fill=\"white\" />\n</svg>",
        "<ellipse>",
        "rx",
        "ry",
        "cx",
        "cy"
      ]
    },
    {
      "title": "SVG <line>",
      "summary": "SVG Line - <line>\nThe <line> element is used to create a line.\nThe <line> element creates a line between the start position (x1,y1) and the end position (x2,y2).\nThe <line> element has four basic attributes to position and set the length of the line:\nAn SVG Line\nThe following example creates a line from position (0,0) to (300,200):\nHere is the SVG code:\nExample\nCode explanation:\nThe <x1> and <y1> attributes define the start of the line (0,0)\nThe <x2> and <y2> attributes define the end of the line (300,200)\nREMOVE ADS\nA Horizontal Line\nThe following example creates a thick horizontal line from position (0,10) to (250,10):\nHere is the SVG code:\nExample\nCode explanation:\nThe <x1> and <y1> attributes define the start of the line (0,10)\nThe <x2> and <y2> attributes define the end of the line (250,10)\nA Vertical Line\nThe following example creates a thick vertical line from position (0,0) to (0,200):\nHere is the SVG code:\nExample\nCode explanation:\nThe <x1> and <y1> attributes define the start of the line (0,0)\nThe <x2> and <y2> attributes define the end of the line (0,200)",
      "examples": [
        "<svg height=\"200\" width=\"300\" xmlns=\"http://www.w3.org/2000/svg\">\n<line x1=\"0\" y1=\"0\" x2=\"300\" y2=\"200\" style=\"stroke:red;stroke-width:2\" />\n</svg>",
        "<svg height=\"50\" width=\"300\" xmlns=\"http://www.w3.org/2000/svg\">\n<line x1=\"0\" y1=\"10\" x2=\"250\" y2=\"10\" style=\"stroke:red;stroke-width:12\" />\n</svg>",
        "<svg height=\"210\" width=\"300\" xmlns=\"http://www.w3.org/2000/svg\">\n<line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"200\" style=\"stroke:red;stroke-width:14\" />\n</svg>",
        "<line>",
        "<x1>",
        "<y1>",
        "<x2>",
        "<y2>"
      ]
    },
    {
      "title": "SVG <polygon>",
      "summary": "Polygon comes from Greek. \"Poly\" means \"many\" and \"gon\" means \"angle\".\nSVG Polygon - <polygon>\nThe <polygon> element is used to create a graphic that contains at least three sides.\nPolygons are made of straight lines, and the shape is \"closed\" (it automatically connects the last point with the first).\nThe <polygon> element has one basic attribute that defines the points of the polygon:\nA Polygon With Three Sides\nThe following example creates a polygon with three sides:\nHere is the SVG code:\nExample\nCode explanation:\nThe points attribute defines the x and y coordinates for each corner of the polygon\nA Polygon With Four Sides\nThe following example creates a polygon with four sides:\nHere is the SVG code:\nExample\nREMOVE ADS\nA Polygon With Six Sides\nThe following example creates a polygon with six sides:\nHere is the SVG code:\nExample\nA Polygon Star\nUse the <polygon> element to create a star:\nHere is the SVG code:\nExample\nAnother Polygon Star\nUse the fill-rule attribute to specify the inside part of a shape:\nHere is the SVG code:\nExample\nCode explanation:\nThe fill-rule attribute defines the algorithm to use to specify the inside part of a shape",
      "examples": [
        "<svg height=\"220\" width=\"500\" xmlns=\"http://www.w3.org/2000/svg\">\n<polygon points=\"100,10 150,190 50,190\" style=\"fill:lime;stroke:purple;stroke-width:3\" />\n</svg>",
        "<svg height=\"260\" width=\"500\" xmlns=\"http://www.w3.org/2000/svg\">\n<polygon points=\"220,10 300,210 170,250 123,234\" style=\"fill:lime;stroke:purple;stroke-width:3\" />\n</svg>",
        "<svg height=\"280\" width=\"360\" xmlns=\"http://www.w3.org/2000/svg\">\n<polygon points=\"150,15 258,77 258,202 150,265 42,202 42,77\"\nstyle=\"fill:lime;stroke:purple;stroke-width:3\" />\n</svg>",
        "<svg height=\"210\" width=\"500\" xmlns=\"http://www.w3.org/2000/svg\">\n<polygon points=\"100,10 40,198 190,78 10,78 160,198\"\nstyle=\"fill:lime;stroke:purple;stroke-width:5;\" />\n</svg>",
        "<svg height=\"210\" width=\"500\" xmlns=\"http://www.w3.org/2000/svg\">\n<polygon points=\"100,10 40,198 190,78 10,78 160,198\"\nstyle=\"fill:lime;stroke:purple;stroke-width:5;fill-rule:evenodd;\" />\n</svg>",
        "<polygon>",
        "points",
        "fill-rule"
      ]
    },
    {
      "title": "SVG <polyline>",
      "summary": "SVG Polyline - <polyline>\nThe <polyline> element is used to create any shape that consists of only straight lines (that is connected at several points).\nThe <polyline> element has one basic attribute that defines the points of the polyline:\nA Polyline Example\nThe following example creates a polyline:\nHere is the SVG code:\nExample\nCode explanation:\nThe points attribute defines the list of points (pairs of x and y coordinates) required to draw the polyline\nAnother Polyline Example\nAnother example with only straight lines:\nHere is the SVG code:\nExample",
      "examples": [
        "<svg height=\"210\" width=\"500\" xmlns=\"http://www.w3.org/2000/svg\">\n<polyline points=\"0,0 50,150 100,75 150,50 200,140 250,140\"\nstyle=\"fill:none;stroke:green;stroke-width:3\" />\n</svg>",
        "<svg height=\"180\" width=\"500\" xmlns=\"http://www.w3.org/2000/svg\">\n<polyline points=\"0,40 40,40 40,80 80,80 80,120 120,120 120,160\"\nstyle=\"fill:yellow;stroke:red;stroke-width:4\" />\n</svg>",
        "<polyline>",
        "points"
      ]
    },
    {
      "title": "SVG <path>",
      "summary": "SVG Path - <path>\nThe <path> element is used to define a path.\nPaths are used to create simple or complex shapes combining several straight or curved lines.\nThe <path> element has one basic attribute that defines the points and other commands of how to draw the path:\nThe following commands are available for path data:\nM = moveto (move from one point to another point)\nL = lineto (create a line)\nH = horizontal lineto (create a horizontal line)\nV = vertical lineto (create a vertical line)\nC = curveto (create a curve)\nS = smooth curveto (create a smooth curve)\nQ = quadratic Bézier curve (create a quadratic Bézier curve)\nT = smooth quadratic Bézier curveto (create a smooth quadratic Bézier curve)\nA = elliptical Arc (create a elliptical arc)\nZ = closepath (close the path)\nNote: All of the commands above can also be expressed in lower case. Upper case means absolutely positioned, lower case means relatively positioned.\nA Simple Path\nThe example below defines a path that starts at position 150,5 with a line to position 75,200 then from there, a line to 225,200 and finally closing the path back to 150,5:\nHere is the SVG code:\nExample\nREMOVE ADS\nA Bézier Curve\nBézier curves are used to model smooth curves that can be scaled indefinitely. Generally, the user selects two endpoints and one or two control points. A Bézier curve with one control point is called a quadratic Bézier curve.\nThe following example creates a quadratic Bézier curve, where A and C are the start and end points, B is the control point:\nHere is the SVG code:\nExample\nComplex? YES!!!! Because of the complexity involved in drawing paths it is highly recommended to use an SVG editor to create complex graphics.",
      "examples": [
        "<svg height=\"210\" width=\"400\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M150 5 L75 200 L225 200 Z\"\nstyle=\"fill:none;stroke:green;stroke-width:3\" />\n</svg>",
        "<svg height=\"400\" width=\"450\" xmlns=\"http://www.w3.org/2000/svg\">\n\n<!-- Draw the paths -->\n<path id=\"lineAB\" d=\"M 100 350 l 150 -300\" stroke=\"red\" stroke-width=\"4\"/>\n<path id=\"lineBC\" d=\"M 250 50 l 150 300\" stroke=\"red\" stroke-width=\"4\"/>\n<path id=\"lineMID\" d=\"M 175 200 l 150 0\" stroke=\"green\" stroke-width=\"4\"/>\n<path id=\"lineAC\" d=\"M 100 350 q 150 -300 300 0\" stroke=\"blue\" stroke-width=\"4\" fill=\"none\"/>\n\n<!-- Mark relevant points -->\n<g stroke=\"black\" stroke-width=\"3\" fill=\"black\">\n<circle id=\"pointA\" cx=\"100\" cy=\"350\" r=\"4\" />\n<circle id=\"pointB\" cx=\"250\" cy=\"50\" r=\"4\" />\n<circle id=\"pointC\" cx=\"400\" cy=\"350\" r=\"4\" />\n</g>\n\n<!-- Label the points -->\n<g font-size=\"30\" font-family=\"sans-serif\" fill=\"green\" text-anchor=\"middle\">\n<text x=\"100\" y=\"350\" dx=\"-30\">A</text>\n<text x=\"250\" y=\"50\" dy=\"-10\">B</text>\n<text x=\"400\" y=\"350\" dx=\"30\">C</text>\n</g>\n\n</svg>",
        "<path>"
      ]
    },
    {
      "title": "SVG <text> and <tspan>",
      "summary": "SVG Text - <text>\nThe <text> element is used to define a text.\nThe <text> element has seven basic attributes to position and rotate the text:\nA Simple Text\nWrite a simple text with SVG:\nHere is the SVG code:\nExample\nA Text With no Fill\nA text with no fill and stroke only:\nHere is the SVG code:\nExample\nA Text With Fill and Stroke\nA text with fill and stroke:\nHere is the SVG code:\nExample\nRotate Each Letter of Text\nRotate each letter of the text, by a degree, with the rotate attribute:\nHere is the SVG code:\nExample\nREMOVE ADS\nRotate Whole Text\nRotate the whole text with the transform attribute:\nHere is the SVG code:\nExample\nSVG Text - <tspan>\nThe <tspan> element is used to mark up parts of a text (just like the HTML <span> element).\nThe <tspan> element must be a child of a <text> element or another <tspan> element.\nThe <tspan> element has six basic attributes to position and rotate the text:\nUse of <tspan> Element\nUse of the <tspan> element inside the <text> element:\nHere is the SVG code:\nExample",
      "examples": [
        "<svg height=\"30\" width=\"200\" xmlns=\"http://www.w3.org/2000/svg\">\n<text x=\"5\" y=\"15\" fill=\"red\">I love SVG!</text>\n</svg>",
        "<svg height=\"40\" width=\"200\" xmlns=\"http://www.w3.org/2000/svg\">\n<text x=\"5\" y=\"30\" fill=\"none\" stroke=\"red\" font-size=\"35\">I love SVG!</text>\n</svg>",
        "<svg height=\"40\" width=\"200\" xmlns=\"http://www.w3.org/2000/svg\">\n<text x=\"5\" y=\"30\" fill=\"pink\" stroke=\"blue\" font-size=\"35\">I love SVG!</text>\n</svg>",
        "<svg height=\"40\" width=\"200\">\n<text x=\"5\" y=\"30\" fill=\"red\" font-size=\"35\" rotate=\"30\">I love SVG!</text>\n</svg>",
        "<svg height=\"100\" width=\"200\">\n<text x=\"5\" y=\"30\" fill=\"red\" font-size=\"25\" transform=\"rotate(30 20,40)\">I love SVG!</text>\n</svg>",
        "<svg height=\"40\" width=\"250\" xmlns=\"http://www.w3.org/2000/svg\">\n<text x=\"5\" y=\"30\" fill=\"red\" font-size=\"35\">I Love\n<tspan fill=\"none\" stroke=\"green\">SVG</tspan>!\n</text>\n</svg>",
        "<text>",
        "rotate",
        "transform",
        "<tspan>",
        "<span>"
      ]
    },
    {
      "title": "SVG <textPath>",
      "summary": "SVG Text - <textPath>\nThe <textPath> element is used to render a text along the shape of a path.\nThe <textPath> element has six basic attributes:\nText Along a Path\nUse of the <textPath> element inside a <text> element:\nHere is the SVG code:\nExample\nText Along a Path 2\nHere we use the textLength attribute to define the width of the text to 100% of the path:\nHere is the SVG code:\nExample",
      "examples": [
        "<svg height=\"200\" width=\"350\" xmlns=\"http://www.w3.org/2000/svg\">\n<path id=\"lineAC\" d=\"M 30 180 q 150 -250 300 0\" stroke=\"blue\" stroke-width=\"2\" fill=\"none\"/>\n<text style=\"fill:red;font-size:25px;\">\n<textPath href=\"#lineAC\" startOffset=\"80\">I love SVG! I love SVG!</textPath>\n</text>\n</svg>",
        "<svg height=\"200\" width=\"350\" xmlns=\"http://www.w3.org/2000/svg\">\n<path id=\"lineAC\" d=\"M 30 180 q 150 -250 300 0\" stroke=\"blue\" stroke-width=\"2\" fill=\"none\"/>\n<text style=\"fill:red;font-size:25px;\">\n<textPath href=\"#lineAC\" textLength=\"100%\" startOffset=\"20\">I love SVG! I love SVG!</textPath>\n</text>\n</svg>",
        "<textPath>",
        "<text>",
        "textLength"
      ]
    },
    {
      "title": "SVG Links",
      "summary": "SVG Links - <a>\nThe <a> element is used to create a link.\nThe <a> element can be used with both text and graphics.\nThe <a> element has seven basic attributes:\nText as a Hyperlink\nText as a link (with the <a> element):\nHere is the SVG code:\nExample\nCode explanation:\nThe href attribute defines the URL to go to\nThe target attribute defines where to open the link (here the link will open in a new window/tab)\nGraphic as a Hyperlink\nA circle as a link (with the <a> element):\nHere is the SVG code:\nExample",
      "examples": [
        "<svg height=\"30\" width=\"200\" xmlns=\"http://www.w3.org/2000/svg\">\n<a href=\"https://www.w3schools.com/graphics/\" target=\"_blank\">\n<text x=\"5\" y=\"15\" fill=\"red\">I love SVG!</text>\n</a>\n</svg>",
        "<svg height=\"100\" width=\"200\" xmlns=\"http://www.w3.org/2000/svg\">\n<a href=\"https://www.w3schools.com/graphics/\" target=\"_blank\">\n<circle r=\"45\" cx=\"50\" cy=\"50\" fill=\"red\" />\n</a>\n</svg>",
        "<a>",
        "href",
        "target"
      ]
    },
    {
      "title": "SVG <image>",
      "summary": "SVG Image - <image>\nThe <image> element is used to insert an image in SVG.\nSVG software must support JPEG, PNG, and other SVG files.\nThe <image> element has some basic attributes to position and shape the image:\nInsert an Image\nHere we insert a .jpg image inside SVG:\nHere is the SVG code:\nExample\nCode explanation:\nThe height attribute defines the height of the image\nThe width attribute defines the width of the image\nThe href attribute defines the URL of the image\nAdd Some Graphic\nHere we show the image on top of a blue circle, and add a text under the image:\nHere is the SVG code:\nExample",
      "examples": [
        "<svg height=\"200\" width=\"300\" xmlns=\"http://www.w3.org/2000/svg\">\n<image height=\"200\" width=\"300\" href=\"pulpitrock.jpg\" />\n</svg>",
        "<svg height=\"250\" width=\"300\" xmlns=\"http://www.w3.org/2000/svg\">\n<circle r=\"105\" cx=\"150\" cy=\"120\" fill=\"lightblue\" />\n<image x=\"0\" y=\"60\" width=\"300\" height=\"100\" href=\"pulpitrock.jpg\" />\n<text x=\"84\" y=\"180\" fill=\"black\">Pulpit Rock, Norway</text>\n</svg>",
        "<image>",
        "height",
        "width",
        "href"
      ]
    },
    {
      "title": "SVG <marker>",
      "summary": "SVG Marker - <marker>\nThe <marker> element is used to create a marker for the start, mid, and end of a <line>, <path>, <polyline> or <polygon>.\nAll SVG markers are defined within a <defs> element. The <defs> element is short for \"definitions\", and contains definition of special elements (such as markers).\nThe marker is attached to the shapes using the marker-start, marker-mid, and marker-end attributes.\nThe <marker> element has six basic attributes to position and set the size of the marker:\nA Line with Start and End Marker\nThe following example creates a line with a circular start marker and an arrowhead end marker:\nHere is the SVG code:\nExample\nCode explanation:\nThe <defs> element contains two markers: one #circle marker and one #arrow marker\nThe shape of the marker is defined in the <marker> element\nThe first <marker> element contains a <circle> element that draws a small circle\nThe second <marker> element contains a <path> element that draws a small triangle\nThe <line> element references the two markers with the marker-start attribute and the marker-end attribute\nREMOVE ADS\nAdd a Mid Marker\nThe following example creates a polyline with a start marker, a mid marker and an end marker:\nHere is the SVG code:\nExample\nCode explanation:\nThe <defs> element contains two markers: one #circle marker and one #arrow marker\nThe shape of the marker is defined in the <marker> element\nThe first <marker> element contains a <circle> element that draws a small circle\nThe second <marker> element contains a <path> element that draws a small triangle\nThe <polyline> element references the two markers with the marker-start attribute, the marker-mid attribute and the marker-end attribute\nNotice that the marker-start attribute and the marker-mid attribute points to the same marker (#circle). This way markers can be re-used multiple times",
      "examples": [
        "<svg height=\"250\" width=\"350\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<marker id=\"circle\" markerWidth=\"8\" markerHeight=\"8\" refX=\"5\" refY=\"5\">\n<circle cx=\"5\" cy=\"5\" r=\"3\" fill=\"black\" />\n</marker>\n<marker id=\"arrow\" markerWidth=\"10\" markerHeight=\"10\" refX=\"5\" refY=\"5\" orient=\"auto\">\n<path d=\"M 0 0 L 10 5 L 0 10 z\" fill=\"black\" />\n</marker>\n</defs>\n<line x1=\"10\" y1=\"10\" x2=\"300\" y2=\"200\" stroke=\"red\" stroke-width=\"3\" marker-start=\"url(#circle)\" marker-end=\"url(#arrow)\" />\n</svg>",
        "<svg height=\"250\" width=\"350\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<marker id=\"circle\" markerWidth=\"8\" markerHeight=\"8\" refX=\"5\" refY=\"5\">\n<circle cx=\"5\" cy=\"5\" r=\"2\" fill=\"black\" />\n</marker>\n<marker id=\"arrow\" markerWidth=\"10\" markerHeight=\"10\" refX=\"5\" refY=\"5\" orient=\"auto\">\n<path d=\"M 0 0 L 10 5 L 0 10 z\" fill=\"black\" />\n</marker>\n</defs>\n<polyline points=\"15,40 15,170 200,170\" stroke=\"red\" stroke-width=\"3\" fill=\"none\" marker-start=\"url(#circle)\" marker-mid=\"url(#circle)\" marker-end=\"url(#arrow)\" />\n</svg>",
        "<marker>",
        "<line>",
        "<path>",
        "<polyline>",
        "<polygon>",
        "<defs>",
        "marker-start",
        "marker-mid",
        "marker-end",
        "#circle",
        "#arrow",
        "<circle>"
      ]
    },
    {
      "title": "SVG Fill Attributes",
      "summary": "SVG Fill Attributes\nThe fill attribute sets the color of the inside of an element.\nHere we will look at the three fill attributes:\nfill - sets the color of the inside of an element\nfill-opacity - sets the opacity of the color inside an element\nfill-rule - sets the algorithm used to determine the inside part of the shape\nSVG fill Attribute\nThe fill attribute defines the color of the inside of an element.\nThe fill attribute can be used with the following SVG elements: <circle>, <ellipse>, <path>, <polygon>, <polyline>, <rect>, <text>, <textPath>, <tref> and <tspan>.\nThe value of the fill attribute can be a color name, rgb value or a hex value.\nHere we use the fill attribute for a polygon, rectangle, circle and a text:\nHere is the SVG code:\nExample\nREMOVE ADS\nSVG fill-opacity Attribute\nThe fill-opacity attribute defines the opacity of the fill color.\nThe fill-opacity attribute can be used with the following SVG elements: <circle>, <ellipse>, <path>, <polygon>, <polyline>, <rect>, <text>, <textPath>, <tref> and <tspan>.\nThe value of the fill-opacity attribute goes from 0 to 1 (or 0% to 100%).\nHere we use the fill-opacity attribute for a polygon, rectangle, circle and a text:\nHere is the SVG code:\nExample\nSVG fill-rule Attribute\nThe fill-rule attribute defines the algorithm used to determine the inside part of a shape.\nThe fill-rule attribute can be used with the following SVG elements: <path>, <polygon>, <polyline>, <text>, <textPath>, <tref> and <tspan>.\nThe value of the fill-rule attribute can be \"nonzero\" or \"evenodd\".\nHere we use the fill-rule attribute for a polygon, with value \"evenodd\":\nHere is the SVG code:\nExample\nHere we use the fill-rule attribute for a polygon, with value \"nonzero\":\nHere is the SVG code:\nExample",
      "examples": [
        "<svg width=\"600\" height=\"220\" xmlns=\"http://www.w3.org/2000/svg\">\n<polygon points=\"50,10 0,190 100,190\" fill=\"lime\" />\n<rect width=\"150\" height=\"100\" x=\"120\" y=\"50\" fill=\"blue\" />\n<circle r=\"45\" cx=\"350\" cy=\"100\" fill=\"red\" />\n<text x=\"420\" y=\"100\" fill=\"red\">I love SVG!</text>\n</svg>",
        "<svg width=\"600\" height=\"220\" xmlns=\"http://www.w3.org/2000/svg\">\n<polygon points=\"50,10 0,190 100,190\" fill=\"lime\" fill-opacity=\"0.5\" />\n<rect width=\"150\" height=\"100\" x=\"120\" y=\"50\" fill=\"blue\" fill-opacity=\"50%\" />\n<circle r=\"45\" cx=\"350\" cy=\"100\" fill=\"red\" fill-opacity=\"0.6\" />\n<text x=\"420\" y=\"100\" fill=\"red\" fill-opacity=\"70%\">I love SVG!</text>\n</svg>",
        "<svg height=\"210\" width=\"500\" xmlns=\"http://www.w3.org/2000/svg\">\n<polygon points=\"100,10 40,198 190,78 10,78 160,198\" fill=\"lime\" fill-rule=\"evenodd\" />\n</svg>",
        "fill",
        "fill-opacity",
        "fill-rule",
        "<circle>",
        "<ellipse>",
        "<path>",
        "<polygon>",
        "<polyline>",
        "<rect>",
        "<text>",
        "<textPath>",
        "<tref>",
        "<tspan>"
      ]
    },
    {
      "title": "SVG Stroke Attributes",
      "summary": "SVG Stroke Attributes\nThe stroke attribute sets the color of the line drawn around an element.\nHere we will look at the six stroke attributes:\nstroke - sets the color of the line around an element\nstroke-width - sets the width of the line around an element\nstroke-opacity - sets the opacity of the line around an element\nstroke-linecap - sets the shape of the end-lines for a line or open path\nstroke-dasharray - sets the line to show as a dashed line\nstroke-linejoin - sets the shape of the corners where two lines meet\nSVG stroke Attribute\nThe stroke attribute defines the color of the outline of an element.\nThe stroke attribute can be used with the following SVG elements: <circle>, <ellipse>, <line>, <path>, <polygon>, <polyline>, <rect>, <text>, <textPath>, <tref> and <tspan>.\nThe value of the stroke attribute can be a color name, rgb value or a hex value.\nHere we use the stroke attribute to set the outline color for a polygon, rectangle, circle and a text:\nHere is the SVG code:\nExample\nHere we use the stroke attribute to define the color of three lines:\nHere is the SVG code:\nExample\nSVG stroke-width Attribute\nThe stroke-width attribute defines the width of the stroke.\nThe stroke-width attribute can be used with the following SVG elements: <circle>, <ellipse>, <line>, <path>, <polygon>, <polyline>, <rect>, <text>, <textPath>, <tref> and <tspan>.\nHere we use the stroke-width attribute to set the width of the outline for a polygon, rectangle, circle and a text:\nHere is the SVG code:\nExample\nHere we use the stroke-width attribute to set the width of three lines:\nHere is the SVG code:\nExample\nREMOVE ADS\nSVG stroke-opacity Attribute\nThe stroke-opacity attribute defines the opacity of the stroke.\nThe stroke-opacity attribute can be used with the following SVG elements: <circle>, <ellipse>, <line>, <path>, <polygon>, <polyline>, <rect>, <text>, <textPath>, <tref> and <tspan>.\nThe value of the stroke-opacity attribute goes from 0 to 1 (or 0% to 100%).\nHere we use the stroke-opacity attribute to set the opacity of the outline for a polygon, rectangle, circle and a text:\nHere is the SVG code:\nExample\nHere we use the stroke-opacity attribute to set the opacity of three lines:\nHere is the SVG code:\nExample\nSVG stroke-linecap Attribute\nThe stroke-linecap attribute defines different types of endings for a line or an open path.\nThe stroke-linecap attribute can be used with the following SVG elements: <path>, <polyline>, <line>, <text>, <textPath>, <tref> and <tspan>.\nThe value of the stroke-linecap attribute can be \"butt\", \"round\" or \"square\".\nHere we use the stroke-linecap attribute to set different endings for three lines:\nHere is the SVG code:\nExample\nSVG stroke-dasharray Attribute\nThe stroke-dasharray attribute is used to create dashed lines.\nThe stroke-dasharray attribute can be used with the following SVG elements: <circle>, <ellipse>, <line>, <path>, <polygon>, <polyline>, <rect>, <text>, <textPath>, <tref> and <tspan>.\nThe value of the stroke-dasharray attribute can be \"none\" or a comma or space separated list of lengths/percentages that define the lengths of dashes and gaps.\nHere we use the stroke-dasharray attribute to create different dashed lines:\nHere is the SVG code:\nExample\nHere we use the stroke-dasharray attribute to create different dashed outlines for a polygon, rectangle and a circle:\nHere is the SVG code:\nExample\nSVG stroke-linejoin Attribute\nThe stroke-linejoin attribute defines the shape of the corners where two lines meet.\nThe stroke-linejoin attribute can be used with the following SVG elements: <path>, <polygon>, <polyline>, <rect>, <text>, <textPath>, <tref> and <tspan>.\nThe value of the stroke-linejoin attribute can be \"arcs\", \"bevel\", \"miter\", miter-clip\" or \"round\".\nHere we use the stroke-linejoin attribute to create different corner shapes:\nHere is the SVG code:\nExample",
      "examples": [
        "<svg width=\"600\" height=\"220\" xmlns=\"http://www.w3.org/2000/svg\">\n<polygon points=\"50,10 0,190 100,190\" fill=\"lime\" stroke=\"red\" />\n<rect width=\"150\" height=\"100\" x=\"120\" y=\"50\" fill=\"yellow\" stroke=\"red\" />\n<circle r=\"45\" cx=\"350\" cy=\"100\" fill=\"pink\" stroke=\"blue\" />\n<text x=\"420\" y=\"100\" fill=\"red\" stroke=\"blue\">I love SVG!</text>\n</svg>",
        "<svg height=\"80\" width=\"300\" xmlns=\"http://www.w3.org/2000/svg\">\n<g fill=\"none\">\n<path stroke=\"red\" d=\"M5 20 l215 0\" />\n<path stroke=\"green\" d=\"M5 40 l215 0\" />\n<path stroke=\"blue\" d=\"M5 60 l215 0\" />\n</g>\n</svg>",
        "<svg width=\"600\" height=\"220\" xmlns=\"http://www.w3.org/2000/svg\">\n<polygon points=\"55,10 10,190 110,190\" fill=\"lime\" stroke=\"red\" stroke-width=\"4\" />\n<rect width=\"150\" height=\"100\" x=\"120\" y=\"50\" fill=\"yellow\" stroke=\"red\" stroke-width=\"4\" />\n<circle r=\"45\" cx=\"350\" cy=\"100\" fill=\"pink\" stroke=\"blue\" stroke-width=\"4\" />\n<text x=\"420\" y=\"100\" fill=\"red\" stroke=\"blue\" stroke-width=\"4\">I love SVG!</text>\n</svg>",
        "<svg height=\"80\" width=\"300\" xmlns=\"http://www.w3.org/2000/svg\">\n<g fill=\"none\" stroke=\"red\">\n<path stroke-width=\"2\" d=\"M5 20 l215 0\" />\n<path stroke-width=\"4\" d=\"M5 40 l215 0\" />\n<path stroke-width=\"6\" d=\"M5 60 l215 0\" />\n</g>\n</svg>",
        "<svg width=\"600\" height=\"220\" xmlns=\"http://www.w3.org/2000/svg\">\n<polygon points=\"55,10 10,190 110,190\" fill=\"lime\" stroke=\"red\" stroke-width=\"4\" stroke-opacity=\"0.4\" />\n<rect width=\"150\" height=\"100\" x=\"120\" y=\"50\" fill=\"yellow\" stroke=\"red\" stroke-width=\"4\" stroke-opacity=\"0.4\" />\n<circle r=\"45\" cx=\"350\" cy=\"100\" fill=\"pink\" stroke=\"blue\" stroke-width=\"4\" stroke-opacity=\"0.4\" />\n<text x=\"420\" y=\"100\" fill=\"red\" stroke=\"blue\" stroke-width=\"4\" stroke-opacity=\"0.4\">I love SVG!</text>\n</svg>",
        "<svg height=\"80\" width=\"300\" xmlns=\"http://www.w3.org/2000/svg\">\n<g fill=\"none\" stroke=\"red\">\n<path stroke-width=\"2\" stroke-opacity=\"0.4\" d=\"M5 20 l215 0\" />\n<path stroke-width=\"4\" stroke-opacity=\"0.4\" d=\"M5 40 l215 0\" />\n<path stroke-width=\"6\" stroke-opacity=\"0.4\" d=\"M5 60 l215 0\" />\n</g>\n</svg>",
        "<svg height=\"120\" width=\"300\" xmlns=\"http://www.w3.org/2000/svg\">\n<g fill=\"none\" stroke=\"red\" stroke-width=\"16\">\n<path stroke-linecap=\"butt\" d=\"M10 20 l215 0\" />\n<path stroke-linecap=\"round\" d=\"M10 50 l215 0\" />\n<path stroke-linecap=\"square\" d=\"M10 80 l215 0\" />\n</g>\n</svg>",
        "<svg height=\"100\" width=\"400\" xmlns=\"http://www.w3.org/2000/svg\">\n<g fill=\"none\" stroke=\"red\" stroke-width=\"6\">\n<path stroke-dasharray=\"5,5\" d=\"M5 20 l215 0\" />\n<path stroke-dasharray=\"10,10\" d=\"M5 40 l215 0\" />\n<path stroke-dasharray=\"35,10\" d=\"M5 60 l215 0\" />\n<path stroke-dasharray=\"20,10,5,5,5,10\" d=\"M5 80 l215 0\" />\n</g>\n</svg>",
        "<svg width=\"600\" height=\"220\" xmlns=\"http://www.w3.org/2000/svg\">\n<polygon points=\"55,10 10,190 110,190\" fill=\"lime\" stroke=\"red\" stroke-width=\"4\" stroke-dasharray=\"10,5\" />\n<rect width=\"150\" height=\"100\" x=\"120\" y=\"50\" fill=\"yellow\" stroke=\"red\" stroke-width=\"4\" stroke-dasharray=\"10,5\" />\n<circle r=\"45\" cx=\"350\" cy=\"100\" fill=\"pink\" stroke=\"blue\" stroke-width=\"4\" stroke-dasharray=\"10,5\" />\n</svg>",
        "<svg width=\"600\" height=\"230\" xmlns=\"http://www.w3.org/2000/svg\">\n<polygon points=\"55,25 10,190 110,190\" fill=\"lime\" stroke=\"red\" stroke-width=\"16\" stroke-linejoin=\"round\" />\n<rect width=\"150\" height=\"100\" x=\"140\" y=\"50\" fill=\"yellow\" stroke=\"red\" stroke-width=\"16\" stroke-linejoin=\"round\" />\n</svg>\n\n<svg width=\"600\" height=\"230\" xmlns=\"http://www.w3.org/2000/svg\">\n<polygon points=\"55,25 10,190 110,190\" fill=\"lime\" stroke=\"red\" stroke-width=\"16\" stroke-linejoin=\"miter\" />\n<rect width=\"150\" height=\"100\" x=\"140\" y=\"50\" fill=\"yellow\" stroke=\"red\" stroke-width=\"16\" stroke-linejoin=\"miter\" />\n</svg>\n\n<svg width=\"600\" height=\"230\" xmlns=\"http://www.w3.org/2000/svg\">\n<polygon points=\"55,25 10,190 110,190\" fill=\"lime\" stroke=\"red\" stroke-width=\"16\" stroke-linejoin=\"bevel\" />\n<rect width=\"150\" height=\"100\" x=\"140\" y=\"50\" fill=\"yellow\" stroke=\"red\" stroke-width=\"16\" stroke-linejoin=\"bevel\" />\n</svg>",
        "stroke",
        "stroke-width",
        "stroke-opacity",
        "stroke-linecap",
        "stroke-dasharray",
        "stroke-linejoin",
        "<circle>",
        "<ellipse>",
        "<line>",
        "<path>",
        "<polygon>",
        "<polyline>",
        "<rect>",
        "<text>",
        "<textPath>",
        "<tref>",
        "<tspan>"
      ]
    },
    {
      "title": "SVG Filters Introduction",
      "summary": "SVG Filters\nSVG filters are used to add special effects to SVG graphics.\nAll SVG filters are defined within a <defs> element. The <defs> element is short for \"definitions\", and contains definition of special elements (such as filters).\nThe <filter> element is used to define an SVG filter. The <filter> element has a required id attribute which identifies the filter. The graphic/image then points to the filter to use.\nThen, inside the <filter> element, we put one or more filter effects to use on the graphic (see table below for list of filter effects elements).\nQuick Example\nHere we use the <feGaussianBlur> filter to blur an SVG graphic:\nHere is the SVG code:\nExample\nREMOVE ADS\nSVG Filter Effects Elements\nThe available filters in SVG are:\nTip: You can use multiple filter effects on each SVG element!\nIn the next chapters, we will only demonstrate a touch of the filter effects that are possible - and give you an idea of what can be done with SVG!",
      "examples": [
        "<svg height=\"100\" width=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<filter id=\"f1\" x=\"0\" y=\"0\">\n<feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"15\" />\n</filter>\n</defs>\n<rect width=\"90\" height=\"90\" fill=\"red\" filter=\"url(#f1)\" />\n</svg>",
        "<defs>",
        "<filter>",
        "id",
        "<feGaussianBlur>"
      ]
    },
    {
      "title": "SVG Blur Effects",
      "summary": "SVG <feGaussianBlur>\nThe <feGaussianBlur> filter is used to create blur effects:\nHere is the SVG code:\nExample\nCode explanation:\nThe id attribute of the <filter> element defines a unique name for the filter\nThe blur effect is defined with the <feGaussianBlur> element\nThe in=\"SourceGraphic\" part defines that the effect is created for the entire element\nThe stdDeviation attribute defines the amount of the blur\nThe filter attribute of the <rect> element points the element to the \"f1\" filter\nSVG <feGaussianBlur>\nThe stdDeviation attribute defines the amount of the blur. A higher value results in a more blurry image:\nHere is the SVG code:\nExample",
      "examples": [
        "<svg height=\"100\" width=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<filter id=\"f1\" x=\"0\" y=\"0\" xmlns=\"http://www.w3.org/2000/svg\">\n<feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"15\" />\n</filter>\n</defs>\n<rect width=\"90\" height=\"90\" fill=\"yellow\" filter=\"url(#f1)\" />\n</svg>",
        "<feGaussianBlur>",
        "id",
        "<filter>",
        "in=\"SourceGraphic\"",
        "stdDeviation",
        "filter",
        "<rect>"
      ]
    },
    {
      "title": "SVG Drop Shadow 1",
      "summary": "SVG <feDropShadow>\nThe <feDropShadow> filter is used to create a drop shadow effect on the input graphic:\nHere is the SVG code:\nExample\nCode explanation:\nThe id attribute of the <filter> element defines a unique name for the filter\nThe drop shadow effect is defined with the <feDropShadow> element\nThe dx attribute defines the x offset of the drop shadow\nThe dy attribute defines the y offset of the drop shadow\nThe stdDeviation attribute defines the amount of the blur in the drop shadow\nThe flood-opacity attribute defines the opacity of the drop shadow (from 0 to 1)\nThe filter attribute of the <rect> element points the element to the \"f1\" filter",
      "examples": [
        "<svg height=\"110\" width=\"110\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<filter id=\"f1\">\n<feDropShadow dx=\"12\" dy=\"14\" stdDeviation=\"1\" flood-opacity=\"0.7\"/>\n</filter>\n</defs>\n<rect width=\"90\" height=\"90\" fill=\"yellow\" filter=\"url(#f1)\" />\n</svg>",
        "<feDropShadow>",
        "id",
        "<filter>",
        "dx",
        "dy",
        "stdDeviation",
        "flood-opacity",
        "filter",
        "<rect>"
      ]
    },
    {
      "title": "SVG Drop Shadow 2",
      "summary": "SVG <feOffset>\nThe <feOffset> filter is also used to create a drop shadow effects The idea is to take an SVG graphic, and move it a little bit in the xy plane.\n<feOffset> and <feBlend>\nThe first example offsets a rectangle (with <feOffset>), then blend the original on top of the offset image (with <feBlend>):\nHere is the SVG code:\nExample\nCode explanation:\nThe id attribute of the <filter> element defines a unique name for the filter\nThe offset effect is defined with the <feOffset> element\nThe in=\"SourceGraphic\" defines that the effect is created for the entire element\nThe dx attribute indicates the shift along the x axis\nThe dy attribute indicates the shift along the x axis\nThe <feBlend> element combines two graphics together by a certain blending mode\nThe in2 attribute defines the second image to the blending operation\nThe filter attribute of the <rect> element points the element to the \"f1\" filter\nREMOVE ADS\nBlur Image with <feGaussianBlur>\nNow, the offset image can be blurred (with <feGaussianBlur>):\nHere is the SVG code:\nExample\nCode explanation:\nThe stdDeviation attribute of the <feGaussianBlur> element defines the amount of the blur\nMake the Shadow Black\nNow, make the shadow black:\nHere is the SVG code:\nExample\nCode explanation:\nThe in attribute of the <feOffset> element is changed to \"SourceAlpha\" which uses the Alpha channel for the blur instead of the entire RGBA pixel\nTreat the Shadow as a Color Matrix\nNow, treat the shadow as a color matrix with the <feColorMatrix> element:\nHere is the SVG code:\nExample\nCode explanation:\nThe <feColorMatrix> element is used to change colors based on a transformation matrix\nThe type attribute of the <feColorMatrix> element indicates the type of matrix operation. The keyword matrix indicates that a full 5x4 matrix of values will be defined\nThe value attribute of the <feColorMatrix> element defines the values for the matrix type",
      "examples": [
        "<svg height=\"150\" width=\"150\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<filter id=\"f1\" width=\"120\" height=\"120\">\n<feOffset in=\"SourceGraphic\" dx=\"20\" dy=\"20\" />\n<feBlend in=\"SourceGraphic\" in2=\"offOut\" />\n</filter>\n</defs>\n<rect width=\"90\" height=\"90\" stroke=\"green\" stroke-width=\"3\" fill=\"yellow\" filter=\"url(#f1)\" />\n</svg>",
        "<svg height=\"150\" width=\"150\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<filter id=\"f2\" width=\"120\" height=\"120\">\n<feOffset in=\"SourceGraphic\" dx=\"20\" dy=\"20\" />\n<feGaussianBlur stdDeviation=\"10\" />\n<feBlend in=\"SourceGraphic\" in2=\"blurOut\" />\n</filter>\n</defs>\n<rect width=\"90\" height=\"90\" stroke=\"green\" stroke-width=\"3\"  fill=\"yellow\" filter=\"url(#f2)\" />\n</svg>",
        "<svg height=\"150\" width=\"150\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<filter id=\"f3\" width=\"120\" height=\"120\">\n<feOffset in=\"SourceAlpha\" dx=\"20\" dy=\"20\" />\n<feGaussianBlur stdDeviation=\"10\" />\n<feBlend in=\"SourceGraphic\" in2=\"blurOut\" />\n</filter>\n</defs>\n<rect width=\"90\" height=\"90\" stroke=\"green\" stroke-width=\"3\" fill=\"yellow\" filter=\"url(#f3)\" />\n</svg>",
        "<svg height=\"150\" width=\"150\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<filter id=\"f4\" width=\"120\" height=\"120\">\n<feOffset in=\"SourceGraphic\" dx=\"20\" dy=\"20\" />\n<feColorMatrix type=\"matrix\" values = \"0.2 0 0 0 0 0 0.2 0 0 0 0 0 0.2 0 0 0 0 0 1 0\"/>\n<feGaussianBlur stdDeviation=\"10\" />\n<feBlend in=\"SourceGraphic\" in2=\"blurOut\" />\n</filter>\n</defs>\n<rect width=\"90\" height=\"90\" stroke=\"green\" stroke-width=\"3\" fill=\"yellow\" filter=\"url(#f4)\" />\n</svg>",
        "<feOffset>",
        "<feBlend>",
        "id",
        "<filter>",
        "in=\"SourceGraphic\"",
        "dx",
        "dy",
        "in2",
        "filter",
        "<rect>",
        "<feGaussianBlur>",
        "stdDeviation",
        "in",
        "\"SourceAlpha\"",
        "<feColorMatrix>",
        "type",
        "matrix",
        "value"
      ]
    },
    {
      "title": "SVG Linear Gradients",
      "summary": "SVG Gradients\nA gradient is a smooth transition from one color to another. In addition, several color transitions can be applied to the same element.\nThere are two types of gradients in SVG:\nLinear gradients - defined with <linearGradient>\nRadial gradients - defined with <radialGradient>\nThe gradient definitions are placed within the <defs> or the <svg> element. The <defs> element is short for \"definitions\", and contains definition of special elements (such as gradients).\nEach gradient must have an id attribute which identifies the gradient. The graphic/image then points to the gradient to use.\nSVG Linear Gradient - <linearGradient>\nThe <linearGradient> element is used to define a linear gradient (a linear transition from one color to another, from one direction to another).\nThe <linearGradient> element is often nested within a <defs> element.\nLinear gradients can be defined as horizontal, vertical or angular gradients:\nHorizontal linear gradients (this is default) goes from left to right (where x1 and x2 differ and y1 and y2 are equal)\nVertical linear gradients goes from top to bottom (where x1 and x2 are equal and y1 and y2 differ)\nAngular linear gradients are created when x1 and x2 differ and y1 and y2 differ\nHorizontal Linear Gradient\nAn ellipse with a horizontal linear gradient that goes from yellow to red:\nHere is the SVG code:\nExample\nCode explanation:\nThe id attribute of the <linearGradient> element defines a unique name for the gradient\nThe x1, x2, y1,y2 attributes of the <linearGradient> element define the x and y starting and ending points of the gradient\nThe colors of a gradient are defined with two or more <stop> elements\nThe stop-color attribute in <stop> defines the color of the gradient stop\nThe offset attribute in <stop> defines where the gradient stop is placed\nThe fill attribute of the <ellipse> element points the element to the \"grad1\" gradient\nHorizontal Linear Gradient\nAn ellipse with a horizontal linear gradient that goes from yellow to green to red:\nHere is the SVG code:\nExample\nREMOVE ADS\nVertical Linear Gradient\nAn ellipse with a vertical linear gradient that goes from yellow to red:\nHere is the SVG code:\nExample\nHorizontal Linear Gradient with Text\nAn ellipse with a horizontal linear gradient from yellow to red, and add a text inside the ellipse:\nHere is the SVG code:\nExample\nCode explanation:\nThe <text> element is used to add a text\nAngular Linear Gradient\nAn ellipse with an angular linear gradient that goes from yellow to red:\nHere is the SVG code:\nExample\nSVG <linearGradient> Attributes",
      "examples": [
        "<svg height=\"150\" width=\"400\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<linearGradient id=\"grad1\" x1=\"0%\" x2=\"100%\" y1=\"0%\" y2=\"0%\">\n<stop offset=\"0%\" stop-color=\"yellow\" />\n<stop offset=\"100%\" stop-color=\"red\" />\n</linearGradient>\n</defs>\n<ellipse cx=\"100\" cy=\"70\" rx=\"85\" ry=\"55\" fill=\"url(#grad1)\" />\n</svg>",
        "<svg height=\"150\" width=\"400\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<linearGradient id=\"grad2\" x1=\"0%\" x2=\"100%\" y1=\"0%\" y2=\"0%\">\n<stop offset=\"0%\" stop-color=\"yellow\" />\n<stop offset=\"50%\" stop-color=\"green\" />\n<stop offset=\"100%\" stop-color=\"red\" />\n</linearGradient>\n</defs>\n<ellipse cx=\"100\" cy=\"70\" rx=\"85\" ry=\"55\" fill=\"url(#grad2)\" />\n</svg>",
        "<svg height=\"150\" width=\"400\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<linearGradient id=\"grad4\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n<stop offset=\"0%\" stop-color=\"yellow\" />\n<stop offset=\"100%\" stop-color=\"red\" />\n</linearGradient>\n</defs>\n<ellipse cx=\"100\" cy=\"70\" rx=\"85\" ry=\"55\" fill=\"url(#grad4)\" />\n<text fill=\"#ffffff\" font-size=\"45\" font-family=\"Verdana\" x=\"50\" y=\"86\">SVG</text>\n</svg>",
        "<svg height=\"150\" width=\"400\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<linearGradient id=\"grad5\" x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\">\n<stop offset=\"0%\" stop-color=\"yellow\" />\n<stop offset=\"100%\" stop-color=\"red\" />\n</linearGradient>\n</defs>\n<ellipse cx=\"100\" cy=\"70\" rx=\"85\" ry=\"55\" fill=\"url(#grad5)\" />\n</svg>",
        "<linearGradient>",
        "<radialGradient>",
        "<defs>",
        "<svg>",
        "id",
        "x1",
        "x2",
        "y1",
        "y2",
        "<stop>",
        "stop-color",
        "offset",
        "fill",
        "<ellipse>",
        "<text>"
      ]
    },
    {
      "title": "SVG Radial Gradients",
      "summary": "SVG Radial Gradient - <radialGradient>\nThe <radialGradient> element is used to define a radial gradient (a circular transition from one color to another, from one direction to another).\nThe gradient definitions are placed within the <defs> or the <svg> element. The <defs> element is short for \"definitions\", and contains definition of special elements (such as gradients).\nEach gradient must have an id attribute which identifies the gradient. The graphic/image then points to the gradient to use.\nRadial Gradient 1\nAn ellipse with a radial gradient that goes from red to blue:\nHere is the SVG code:\nExample\nCode explanation:\nThe id attribute of the <radialGradient> element defines a unique name for the gradient\nThe cx and cy attributes define the x and position of the end circle of the radial gradient\nThe fx and fy attributes define the x and position of the start circle of the radial gradient\nThe r attribute define the radius of the end circle of the radial gradient\nThe colors of a gradient are defined with two or more <stop> elements\nThe offset attribute in <stop> defines where the gradient stop is placed\nThe stop-color attribute in <stop> defines the color of the gradient stop\nThe fill attribute of the <ellipse> element points the element to the \"grad1\" gradient\nREMOVE ADS\nRadial Gradient 2\nAn ellipse with a radial gradient that goes from red to green to blue:\nHere is the SVG code:\nExample\nRadial Gradient 3\nAn ellipse with a radial gradient that goes from red to blue (here we have set the x and y position of the end circle to 25%):\nHere is the SVG code:\nExample\nRadial Gradient 4 - spreadMethod=\"reflect\"\nAn ellipse with a radial gradient that goes from red to blue with spreadMethod=\"reflect\":\nHere is the SVG code:\nExample\nRadial Gradient 5 - spreadMethod=\"repeat\"\nAn ellipse with a radial gradient that goes from red to blue with spreadMethod=\"repeat\":\nHere is the SVG code:\nExample\nRadial Gradient 6\nDefine another ellipse with a radial gradient from red to blue:\nHere is the SVG code:\nExample\nCode explanation:\nThe stop-opacity attribute in <stop> defines the opacity of the color of the gradient stop\nSVG <radialGradient> Attributes",
      "examples": [
        "<svg height=\"150\" width=\"400\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<radialGradient id=\"grad1\" cx=\"50%\" cy=\"50%\" r=\"50%\" fx=\"50%\" fy=\"50%\">\n<stop offset=\"0%\" stop-color=\"red\" />\n<stop offset=\"100%\" stop-color=\"blue\" />\n</radialGradient>\n</defs>\n<ellipse cx=\"100\" cy=\"70\" rx=\"85\" ry=\"55\" fill=\"url(#grad1)\" />\n</svg>",
        "<svg height=\"150\" width=\"400\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<radialGradient id=\"grad2\" cx=\"50%\" cy=\"50%\" r=\"50%\" fx=\"50%\" fy=\"50%\">\n<stop offset=\"0%\" stop-color=\"red\" />\n<stop offset=\"50%\" stop-color=\"green\" />\n<stop offset=\"100%\" stop-color=\"blue\" />\n</radialGradient>\n</defs>\n<ellipse cx=\"100\" cy=\"70\" rx=\"85\" ry=\"55\" fill=\"url(#grad2)\" />\n</svg>",
        "<svg height=\"150\" width=\"400\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<radialGradient id=\"grad3\" cx=\"25%\" cy=\"25%\">\n<stop offset=\"0%\" stop-color=\"red\" />\n<stop offset=\"100%\" stop-color=\"blue\" />\n</radialGradient>\n</defs>\n<ellipse cx=\"100\" cy=\"70\" rx=\"85\" ry=\"55\" fill=\"url(#grad3)\" />\n</svg>",
        "<svg height=\"150\" width=\"400\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<radialGradient id=\"grad4\" cx=\"25%\" cy=\"25%\" spreadMethod=\"reflect\">\n<stop offset=\"0%\" stop-color=\"red\" />\n<stop offset=\"100%\" stop-color=\"blue\" />\n</radialGradient>\n</defs>\n<ellipse cx=\"100\" cy=\"70\" rx=\"85\" ry=\"55\" fill=\"url(#grad4)\" />\n</svg>",
        "<svg height=\"150\" width=\"400\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<radialGradient id=\"grad5\" cx=\"25%\" cy=\"25%\" spreadMethod=\"repeat\">\n<stop offset=\"0%\" stop-color=\"red\" />\n<stop offset=\"100%\" stop-color=\"blue\" />\n</radialGradient>\n</defs>\n<ellipse cx=\"100\" cy=\"70\" rx=\"85\" ry=\"55\" fill=\"url(#grad5)\" />\n</svg>",
        "<svg height=\"150\" width=\"400\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<radialGradient id=\"grad6\" cx=\"50%\" cy=\"50%\" r=\"50%\" fx=\"50%\" fy=\"50%\">\n<stop offset=\"0%\" stop-color=\"red\" stop-opacity=\"0\" />\n<stop offset=\"100%\" stop-color=\"blue\" stop-opacity=\"1\" />\n</radialGradient>\n</defs>\n<ellipse cx=\"100\" cy=\"70\" rx=\"85\" ry=\"55\" fill=\"url(#grad6)\" />\n</svg>",
        "<radialGradient>",
        "<defs>",
        "<svg>",
        "id",
        "cx",
        "cy",
        "fx",
        "fy",
        "r",
        "<stop>",
        "offset",
        "stop-color",
        "fill",
        "<ellipse>",
        "spreadMethod=\"reflect\"",
        "spreadMethod=\"repeat\"",
        "stop-opacity"
      ]
    },
    {
      "title": "SVG Patterns",
      "summary": "SVG Patterns - <pattern>\nThe <pattern> element is used to create a graphic that is redrawn at repeated x and y coordinate intervals, to cover an area.\nAll SVG patterns are defined within a <defs> element. The <defs> element is short for \"definitions\", and contains definition of special elements (such as patterns).\nThe <pattern> element has a required id attribute which identifies the pattern. The graphic/image then points to the pattern to use.\nThen, inside the <pattern> element, we put one or more elements that will be used as the fill pattern.\nA Simple Pattern Example\nThe following example creates a rectangle filled with small circles:\nHere is the SVG code:\nExample\nCode explanation:\nThe id attribute of the <pattern> element defines a unique name for the pattern\nThe x and y attributes of the <pattern> element defines how far into the shape the pattern starts\nThe width and height attributes of the <pattern> element defines the width and height of the pattern\nThe <circle> element inside the <pattern> element defines the shape of the fill pattern\nThe fill=\"url(#patt1)\" attribute of the <rect> element points to the \"patt1\" pattern\nThe rectangle will be filled with the pattern\nREMOVE ADS\nA Pattern with Gradient\nThe following example creates a rectangle filled with small light blue rectangles and gradient circles:\nHere is the SVG code:\nExample\nCode explanation:\nThe id attribute of the <pattern> element defines a unique name for the pattern\nThe x and y attributes of the <pattern> element defines how far into the shape the pattern starts\nThe width and height attributes of the <pattern> element defines the width and height of the pattern. We want the pattern to repeat 4 times horizontally and 4 times vertically, so we set the height and width to 0.25 (meaning that the pattern's width and height is 25% of the total box size)\nThe <rect> element inside the <pattern> element defines one shape of the fill pattern (a lightblue 50x50 rectangle)\nThe <circle> element inside the <pattern> element defines another shape of the fill pattern (a gradient circle that goes from white to red)\nThe fill=\"url(#grad1)\" attribute of the <circle> element points to the \"grad1\"gradient\nThe fill=\"url(#patt2)\" attribute of the <rect> element points to the \"patt2\" pattern\nThe rectangle will be filled with the pattern",
      "examples": [
        "<svg width=\"400\" height=\"110\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<pattern id=\"patt1\" x=\"0\" y=\"0\" width=\"20\" height=\"20\" patternUnits=\"userSpaceOnUse\">\n<circle cx=\"10\" cy=\"10\" r=\"10\" fill=\"red\" />\n</pattern>\n</defs>\n\n<rect width=\"200\" height=\"100\" x=\"0\" y=\"0\" stroke=\"black\" fill=\"url(#patt1)\" />\n</svg>",
        "<svg width=\"200\" height=\"200\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<linearGradient id=\"grad1\">\n<stop offset=\"0%\" stop-color=\"white\" />\n<stop offset=\"100%\" stop-color=\"red\" />\n</linearGradient>\n<pattern id=\"patt2\" x=\"0\" y=\"0\" width=\"0.25\" height=\"0.25\">\n<rect x=\"0\" y=\"0\" width=\"50\" height=\"50\" fill=\"lightblue\" />\n<circle cx=\"25\" cy=\"25\" r=\"20\" fill=\"url(#grad1)\" fill-opacity=\"0.8\" />\n</pattern>\n</defs>\n\n<rect width=\"200\" height=\"200\" x=\"0\" y=\"0\" stroke=\"black\" fill=\"url(#patt2)\" />\n</svg>",
        "<pattern>",
        "<defs>",
        "id",
        "x",
        "y",
        "width",
        "height",
        "<circle>",
        "fill=\"url(#patt1)\"",
        "<rect>",
        "fill=\"url(#grad1)\"",
        "fill=\"url(#patt2)\""
      ]
    },
    {
      "title": "SVG Transformations",
      "summary": "SVG Transformations\nSVG elements can be manipulated using transform functions.\nThe transform attribute can be used with any SVG element.\nThe transform attribute defines a list of transform functions that can be applied to an element and the element's children:\ntranslate()\nscale()\nrotate()\nskewX()\nskewY()\nmatrix()\nTranslate() Function\nThe translate() function is used to move an object by x and y.\nAssume one object is placed with x=\"5\" and y=\"5\". Then another object contains transform=\"translate(50 0)\", this means that the other object will be placed at x-position 55 (5 + 50) and at y-position 5 (5 + 0).\nLet's look at some examples:\nIn this example, the red rectangle is translated/moved to the point (55,5) instead of (5,5):\nHere is the SVG code:\nExample\nIn this example, the red rectangle is translated/moved to the point (5,55) instead of (5,5):\nHere is the SVG code:\nExample\nIn this example, the red rectangle is translated/moved to the point (55,55) instead of (5,5):\nHere is the SVG code:\nExample\nREMOVE ADS\nScale() Function\nThe scale() function is used to scale an object by x and y. If y is not provided, it is set to be equal to x.\nThe scale() function is used to change the size of an object. It takes two numbers: the x scale factor and the y scale factor. The x and y scale factors are taken as the ratio of the transformed dimension to the original. For example, 0.5 shrinks the object by 50%.\nIn this example, the red circle is scaled to twice the size with the scale() function:\nHere is the SVG code:\nExample\nIn this example, the red circle is scaled vertically to twice the size with the scale() function:\nHere is the SVG code:\nExample\nIn this example, the red circle is scaled horizontally to twice the size with the scale() function:\nHere is the SVG code:\nExample\nRotate() Function\nThe rotate() function is used to rotate an object by a degree.\nIn this example, the blue rectangle is rotated with 45 degrees:\nHere is the SVG code:\nExample\nSkewX() Function\nThe skewX() function is used to skew an object along the x axis by a degree.\nIn this example, the blue rectangle is skewed along the x axis by 30 degrees:\nHere is the SVG code:\nExample\nSkewY() Function\nThe skewY() function is used to skew an object along the y axis by a degree.\nIn this example, the blue rectangle is skewed along the y axis by 30 degrees:\nHere is the SVG code:\nExample",
      "examples": [
        "<svg width=\"200\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect x=\"5\" y=\"5\" width=\"40\" height=\"40\" fill=\"blue\" />\n<rect x=\"5\" y=\"5\" width=\"40\" height=\"40\" fill=\"red\" transform=\"translate(50 0)\" />\n</svg>",
        "<svg width=\"200\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect x=\"5\" y=\"5\" width=\"40\" height=\"40\" fill=\"blue\" />\n<rect x=\"5\" y=\"5\" width=\"40\" height=\"40\" fill=\"red\" transform=\"translate(50 50)\" />\n</svg>",
        "<svg width=\"200\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n<circle cx=\"25\" cy=\"25\" r=\"20\" fill=\"yellow\" />\n<circle cx=\"50\" cy=\"25\" r=\"20\" fill=\"red\" transform=\"scale(2)\" />\n</svg>",
        "<svg width=\"200\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n<circle cx=\"25\" cy=\"25\" r=\"20\" fill=\"yellow\" />\n<circle cx=\"70\" cy=\"25\" r=\"20\" fill=\"red\" transform=\"scale(1,2)\" />\n</svg>",
        "<svg width=\"200\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect x=\"50\" y=\"5\" width=\"40\" height=\"40\" fill=\"blue\" transform=\"rotate(45)\" />\n</svg>",
        "<svg width=\"200\" height=\"50\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect x=\"5\" y=\"5\" width=\"40\" height=\"40\" fill=\"blue\" transform=\"skewX(30)\" />\n</svg>",
        "transform",
        "translate()",
        "scale()",
        "rotate()",
        "skewX()",
        "skewY()",
        "matrix()",
        "x",
        "y",
        "degree"
      ]
    },
    {
      "title": "SVG Clipping and Masking",
      "summary": "SVG Clipping and Masking\nSVG elements can be clipped and masked.\nThe <clipPath> element is used to clip an SVG element.\nThe <mask> element is used to apply a mask to an SVG element.\nSVG Clipping\nClipping is when you remove a part from an element.\nFor clipping, we use the <clipPath> element.\nEvery path/element inside a <clipPath> element is inspected and evaluated. Then every part of the target that lies OUTSIDE of this area will NOT be rendered. In other words: Anything outside the path is hidden and anything inside is shown!\nThe <clipPath> element is usually placed in a <defs> section.\nLet's look at some examples:\nIn this example, we create a red circle centered at (50,50), with radius 50:\nHere is the SVG code:\nExample\nNow we add a <clipPath> element with a single <rect> element. This <rect> element would cover the UPPER HALF of the circle. The <rect> will NOT be drawn; Instead, its size and position will be used to determine which pixels of the circle that will be shown. Since the rectangle covers only the upper half of the circle, the lower half of the circle will vanish:\nHere is the SVG code:\nExample\nREMOVE ADS\nSVG Masking\nFor masking, we use the <mask> element.\nThe <mask> element is used to apply a mask to an SVG element.\nA mask is referenced with the mask attribute.\nHere is a simple mask example:\nHere is the SVG code:\nExample\nThe example above defines a mask with id=\"mask1\". Inside the <mask> element there is a <rect> element. This <rect> element defines the shape of the mask.\nThe example also defines a <rect> element which uses the mask. The mask is referenced with the mask attribute.\nThe red rectangle should be 100 pixels high, but only the first 50 pixels vertically are visible. This is because the mask rectangle is only 50 pixels high. The rectangle is only visible in the parts covered by the mask rectangle.\nThe last <rect> element is just to show the size of the rectangle without the mask.\nHere is another example that uses a <circle> element to define the shape of the mask:\nHere is the SVG code:\nExample\nFill Color and Opacity\nThe fill color of the elements inside the <mask> element defines the opacity of the fill color of the element that refers to the mask.\nIn the examples above we have only used fill=\"white\". In a mask, white is treated as an area that will be shown, and black is treated as an area to be masked.\nA mask will be more opaque the closer the color is to #ffffff (white) and more transparent the closer the color is to #000000 (black):\nHere is the SVG code:\nExample\nGradients in Masks\nIn this example the mask shape uses a gradient as a fill color:\nHere is the SVG code:\nExample",
      "examples": [
        "<svg width=\"200\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n<circle cx=\"100\" cy=\"100\" r=\"100\" fill=\"red\" />\n</svg>",
        "<svg width=\"200\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<clipPath id=\"cut-bottom\">\n<rect x=\"0\" y=\"0\" width=\"200\" height=\"50\" />\n</clipPath>\n</defs>\n<circle cx=\"100\" cy=\"100\" r=\"100\" fill=\"red\" clip-path=\"url(#cut-bottom)\" />\n</svg>",
        "<svg width=\"200\" height=\"120\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<mask id=\"mask1\">\n<rect x=\"0\" y=\"0\" width=\"100\" height=\"50\" fill=\"white\" />\n</mask>\n</defs>\n<rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" fill=\"red\" mask=\"url(#mask1)\" />\n<rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" fill=\"none\" stroke=\"black\" />\n</svg>",
        "<svg width=\"200\" height=\"120\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<mask id=\"mask2\">\n<circle cx=\"50\" cy=\"50\" r=\"30\" fill=\"white\" />\n</mask>\n</defs>\n<rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" fill=\"red\" mask=\"url(#mask2)\" />\n<rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" stroke=\"black\" fill=\"none\"/>\n</svg>",
        "<svg width=\"200\" height=\"120\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<mask id=\"mask3\">\n<rect x=\"0\" y=\"0\" width=\"100\" height=\"30\" fill=\"#232323\" />\n<rect x=\"0\" y=\"30\" width=\"100\" height=\"40\" fill=\"#454545\" />\n<rect x=\"0\" y=\"70\" width=\"100\" height=\"30\" fill=\"#878787\" />\n</mask>\n</defs>\n<rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" fill=\"red\" mask=\" url(#mask3)\"/>\n</svg>",
        "<svg width=\"200\" height=\"120\" xmlns=\"http://www.w3.org/2000/svg\">\n<defs>\n<linearGradient id=\"gradient1\">\n<stop offset=\"0%\" stop-color=\"#ffffff\" />\n<stop offset=\"100%\" stop-color=\"#000000\" />\n</linearGradient>\n<mask id=\"mask4\">\n<rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" fill=\"url(#gradient1)\" />\n</mask>\n</defs>\n<rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" fill=\"red\" mask=\" url(#mask4)\"/>\n</svg>",
        "<clipPath>",
        "<mask>",
        "<defs>",
        "<rect>",
        "mask",
        "id=\"mask1\"",
        "<circle>"
      ]
    },
    {
      "title": "SVG Animation",
      "summary": "SVG Animation\nSVG elements can be animated.\nIn SVG, we have four animation elements which sets or animates SVG graphics:\n<set>\n<animate>\n<animateTransform>\n<animateMotion>\nSVG <set>\nThe <set> element sets the value of an attribute for a specified duration.\nIn this example, we create a red circle that starts with a radius of 25, then after 3 seconds the radius will be set to 50:\nHere is the SVG code:\nExample\nCode explanation:\nThe attributeName attribute in the <set> element defines which attribute to change\nThe to attribute in the <set> element defines the new value for the attribute\nThe begin attribute in the <set> element defines when the animation should start\nSVG <animate>\nThe <animate> element animates an attribute of an element.\nThe <animate> element should be nested inside the target element.\nIn this example, we create a red circle. We animate the cx attribute from 50 to 90%. This means that the circle will go from left to right:\nHere is the SVG code:\nExample\nCode explanation:\nThe attributeName attribute defines which attribute to animate\nThe begin attribute defines when the animation should start\nThe dur attribute defines the duration of the animation\nThe from attribute defines the starting value\nThe to attribute defines the ending value\nThe repeatCount attribute defines how many times the animation should play\nSVG <animate> with Freeze\nIn this example, we want the red circle to freeze (stop) when it comes to its final position (instead of snapping back to the start position):\nHere is the SVG code:\nExample\nCode explanation:\nThe fill=\"freeze\" attribute defines that the animation should freeze when it comes to its final position\nREMOVE ADS\nSVG <animateTransform>\nThe <animateTransform> element animates the transform attribute on the target element.\nThe <animateTransform> element should be nested inside the target element.\nIn this example, we create a red rectangle that will rotate:\nHere is the SVG code:\nExample\nCode explanation:\nThe attributeName attribute animates the transform attribute of the <rect> element\nThe begin attribute defines when the animation should start\nThe dur attribute defines the duration of the animation\nThe type attribute defines the type of transformation\nThe from attribute defines the starting value\nThe to attribute defines the ending value\nThe repeatCount attribute defines how many times the animation should play\nSVG <animateMotion>\nThe <animateMotion> element sets how an element moves along a motion path.\nThe <animateMotion> element should be nested inside the target element.\nIn this example, we create a rectangle and a text. Both elements have an <animateMotion> element with the same path:\nHere is the SVG code:\nExample\nCode explanation:\nThe path attribute defines the path of the animation\nThe begin attribute defines when the animation should start\nThe dur attribute defines the duration of the animation\nThe repeatCount attribute defines how many times the animation should play",
      "examples": [
        "<svg width=\"200\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n<circle cx=\"50\" cy=\"50\" r=\"25\" style=\"fill:red;\">\n<set attributeName=\"r\" to=\"50\" begin=\"3s\" />\n</svg>",
        "<svg width=\"100%\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n<circle cx=\"50\" cy=\"50\" r=\"50\" style=\"fill:red;\">\n<animate\nattributeName=\"cx\"\nbegin=\"0s\"\ndur=\"8s\"\nfrom=\"50\"\nto=\"90%\"\nrepeatCount=\"indefinite\" />\n</circle>\n</svg>",
        "<svg width=\"100%\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n<circle cx=\"50\" cy=\"50\" r=\"50\" style=\"fill:red;\">\n<animate\nattributeName=\"cx\"\nbegin=\"0s\"\ndur=\"8s\"\nfrom=\"50\"\nto=\"90%\"\nfill=\"freeze\" />\n</circle>\n</svg>",
        "<svg width=\"200\" height=\"180\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect x=\"30\" y=\"30\" height=\"110\" width=\"110\" style=\"stroke:green;fill:red\">\n<animateTransform\nattributeName=\"transform\"\nbegin=\"0s\"\ndur=\"10s\"\ntype=\"rotate\"\nfrom=\"0 85 85\"\nto=\"360 85 85\"\nrepeatCount=\"indefinite\" />\n</rect>\n</svg>",
        "<svg width=\"100%\" height=\"150\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect x=\"45\" y=\"18\" width=\"155\" height=\"45\" style=\"stroke:green;fill:none;\">\n<animateMotion\npath=\"M0,0 q60,100 100,0 q60,-20 100,0\"\nbegin=\"0s\"\ndur=\"10s\"\nrepeatCount=\"indefinite\" />\n</rect>\n<text x=\"50\" y=\"50\" style=\"font-family:Verdana;font-size:32\">It's SVG!\n<animateMotion\npath=\"M0,0 q60,100 100,0 q60,-20 100,0\"\nbegin=\"0s\"\ndur=\"10s\"\nrepeatCount=\"indefinite\" />\n</text>\n</svg>",
        "<set>",
        "<animate>",
        "<animateTransform>",
        "<animateMotion>",
        "attributeName",
        "to",
        "begin",
        "dur",
        "from",
        "repeatCount",
        "fill=\"freeze\"",
        "transform",
        "<rect>",
        "type",
        "path"
      ]
    },
    {
      "title": "SVG Scripting",
      "summary": "SVG + JavaScript\nSVG can be used together with JavaScript to modify and animate SVG elements.\nSVG Simple Script\nIn this example, we create a red circle with a radius of 25. Click the button to change the radius to 50:\nHere is the SVG code:\nExample\nCode explanation:\nAdd an id attribute to the <circle> element\nCreate a script within <script> tags\nGet a reference to the SVG element with the getElementById() function\nChange the r attribute using the setAttribute() function\nAdd an <input type=\"button\"> element to run the JavaScript when clicked\nREMOVE ADS\nSVG Change CSS\nIn this example, we create a red circle. Click the button to change the fill color to green:\nHere is the SVG code:\nExample\nCode explanation:\nAdd an id attribute to the <circle> element\nCreate a script within <script> tags\nGet a reference to the SVG element with the getElementById() function\nSet a new fill color with style.fill\nAdd an <input type=\"button\"> element to run the JavaScript when clicked\nSVG Change Attribute Values and CSS\nIn this example, we create a red circle. Click the button to change the radius, the x position, fill color, and add a stroke color:\nHere is the SVG code:\nExample\nSVG Script for Animation\nIn this example, we create a red circle. Click the two buttons to start and stop the animation:\nHere is the SVG code:\nExample\nCode explanation:\nThe start() and stop() functions start and stop the animation\nThe animation starts by setting up a timer (t) which calls the animate() function every 20 milliseconds with the setInterval() function\nThe animation is stopped by clearing the t timer\nThe animation is performed inside the animate() function\nGet a reference to the <circle> element with the getElementById() function\nGet the value of the cx attribute with the getAttribute() function\nConvert the value of the cx attribute to a number with parseInt(). Then add 2 to the cx value\nTest if the newCX value is larger than 600 (which is the width of the SVG \"window\"), then reset it to 50 (which is the original start position)\nPut the newCX value into the cx attribute of the <circle> element with the setAttribute() function. This moves the circle to the new cx-position",
      "examples": [
        "<svg width=\"200\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n<circle id=\"circle1\" cx=\"50\" cy=\"50\" r=\"25\" style=\"fill:red;\" />\n</svg>\n\n<input type=\"button\" value=\"Change Radius\" onclick=\"changeRadius()\" />\n\n<script>\nfunction changeRadius() {\ndocument.getElementById(\"circle1\").setAttribute(\"r\", \"50\");\n}\n</script>",
        "<svg width=\"200\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n<circle id=\"circle2\" cx=\"50\" cy=\"50\" r=\"25\" style=\"fill:red;\" />\nSorry, your browser does not support inline SVG.\n</svg>\n\n<input type=\"button\" value=\"Change Style\" onclick=\"changeStyle()\" />\n\n<script>\nfunction changeStyle() {\ndocument.getElementById(\"circle2\").style.fill=\"green\";\n}\n</script>",
        "<svg width=\"200\" height=\"120\" xmlns=\"http://www.w3.org/2000/svg\">\n<circle id=\"circle3\" cx=\"50\" cy=\"60\" r=\"25\" style=\"fill:red;\" />\n</svg>\n\n<input type=\"button\" value=\"Change Circle\" onclick=\"changeMe()\" />\n\n<script>\nfunction changeMe() {\nvar c = document.getElementById(\"circle3\");\nc.setAttribute(\"r\", \"50\");\nc.setAttribute(\"cx\", \"150\");\nc.style.fill=\"green\";\nc.style.stroke=\"red\";\n}\n</script>",
        "<svg width=\"600\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n<circle id=\"circle4\" cx=\"50\" cy=\"50\" r=\"50\" style=\"fill:red;\" />\n</svg>\n\n<script>\nvar t = null;\n\nfunction start() {\nif(t == null) {\nt = setInterval(animate, 20);\n}\n}\n\nfunction stop() {\nif(t != null) {\nclearInterval(t);\nt = null;\n}\n}\n\nfunction animate() {\nvar circle = document.getElementById(\"circle4\");\nvar cx = circle.getAttribute(\"cx\");\nvar newCX = 2 + parseInt(cx);\nif(newCX > 600) {\nnewCX = 50;\n}\ncircle.setAttribute(\"cx\", newCX);\n}\n</script>\n\n<br/>\n<input type=\"button\" value=\"Start\" onclick=\"start()\" />\n<input type=\"button\" value=\"Stop\" onclick=\"stop()\" />",
        "id",
        "<circle>",
        "<script>",
        "getElementById()",
        "r",
        "setAttribute()",
        "<input type=\"button\">",
        "style.fill",
        "start()",
        "stop()",
        "animate()",
        "setInterval()",
        "cx",
        "getAttribute()",
        "parseInt()",
        "newCX"
      ]
    },
    {
      "title": "SVG Examples",
      "summary": "Try-it Yourself Examples\nThe examples below embed the SVG code directly into the HTML code.\nSVG is supported in all major browsera.\nSVG Rectangle\nExamples explained\nSVG Circle\nExamples explained\nSVG Ellipse\nExamples explained\nSVG Line\nExamples explained\nSVG Polygon\nExamples explained\nSVG Polyline\nExamples explained\nSVG Path\nExamples explained\nSVG Text\nExamples explained\nSVG textPath\nExamples explained\nREMOVE ADS\nSVG Links\nExamples explained\nSVG Images\nExamples explained\nSVG Markers\nExamples explained\nSVG Fill\nExamples explained\nSVG Stroke\nExamples explained\nSVG Filters Intro\nExamples explained\nSVG Filters Blur Effect\nExamples explained\nSVG Filters Drop Shadow 1\nExamples explained\nSVG Filters Drop Shadow 2\nExamples explained\nSVG Linear Gradients\nExamples explained\nSVG Radial Gradients\nExamples explained\nSVG Patterns\nExamples explained\nSVG Transformations\nExamples explained\nSVG Clipping and Masking\nExamples explained\nSVG Animation\nExamples explained\nSVG Scripting\nExamples explained\nSVG Misc",
      "examples": []
    },
    {
      "title": "SVG Quiz",
      "summary": "You can test your SVG skills with W3Schools' Quiz.\nThe Test\nThe test contains 25 questions and there is no time limit.\nThe test is not official, it's just a nice way to see how much you know, or don't know, about SVG.\nCount Your Score\nYou will get 1 point for each correct answer. At the end of the Quiz, your total score will be displayed. Maximum score is 25 points.\nStart the Quiz\nGood luck!\nStart the SVG Quiz ❯\nIf you don't know SVG, we suggest that you read our SVG Tutorial from scratch.",
      "examples": []
    },
    {
      "title": "SVG Reference",
      "summary": "SVG Elements",
      "examples": []
    },
    {
      "title": "HTML Canvas Tutorial",
      "summary": "Learn Canvas\nThe HTML <canvas> element is used to draw graphics on a web page.\nThe HTML <canvas> element is only a container for graphics. You must use a script to actually draw the graphics.\nCanvas has several methods for drawing paths, boxes, circles, text, and adding images.\nCanvas is supported by all major browsers.\nHTML Canvas Example\nThe graphic above is created with <canvas>. It contains four objects: a red rectangle, a gradient rectangle, a multicolor rectangle, and a multicolor text.\nWhat you should already know\nBefore you continue, you should have a basic understanding of the following:\nHTML\nBasic JavaScript\nIf you want to study these subjects first, find the tutorials on our Home page.\nWhat is HTML Canvas?\nThe HTML <canvas> element is used to draw graphics, on the fly, via scripting (usually JavaScript).\nThe <canvas> element is only a container for graphics. You must use a script to actually draw the graphics.\nCanvas has several methods for drawing paths, boxes, circles, text, and adding images.\nHTML Canvas Can Draw Text\nCanvas can draw colorful text, with or without animation.\nHTML Canvas Can Draw Graphics\nCanvas has great features for graphical data presentation with an imagery of graphs and charts.\nREMOVE ADS\nHTML Canvas Can be Animated\nCanvas objects can move. Everything is possible: from simple bouncing balls to complex animations.\nHTML Canvas Can be Interactive\nCanvas can respond to JavaScript events.\nCanvas can respond to any user action (key clicks, mouse clicks, button clicks, finger movement).\nHTML Canvas Can be Used in Games\nCanvas' methods for animations, offer a lot of possibilities for HTML gaming applications.\nCanvas Example\nIn HTML, a <canvas> element looks like this:\nThe id attribute is required (so it can be referred to by JavaScript).\nThe width and height attribute defines the size of the canvas.\nTip: The default size of the canvas is 300px (width) x 150px (height).\nTip: You can have multiple <canvas> elements on one HTML page.\nBy default, the <canvas> element has no border and no content.\nTo add a border, use a style attribute:\nExample\nThe next chapters show how to draw on the canvas.\nSee Also:\nW3Schools' Full Canvas Reference",
      "examples": [
        "<canvas id=\"myCanvas\" width=\"200\" height=\"100\"></canvas>",
        "<canvas id=\"myCanvas\" width=\"200\" height=\"100\" style=\"border:1px solid #000000;\"></canvas>",
        "<canvas>",
        "id",
        "width",
        "height",
        "style"
      ]
    },
    {
      "title": "HTML Draw on the Canvas",
      "summary": "Draw on the Canvas With JavaScript\nThe drawing on the canvas is done with JavaScript.\nThe canvas is initially blank. To display something, a script is needed to access the rendering context and draw on it.\nThe following example draws a red rectangle on the canvas, from position (0,0) with a width of 150 and a height of 75:\nExample\nStep 1: Find the Canvas Element\nFirst of all, you must find the <canvas> element.\nYou access a <canvas> element with the HTML DOM method getElementById():\nStep 2: Create a Drawing Object\nSecondly, you need a drawing object for the canvas.\nThe getContext() method returns an object with tools (properties and methods) for drawing:\nStep 3: Draw on the Canvas\nFinally, you can draw on the canvas.\nSet the fill-color to red with the fillStyle property:\nThe fillStyle property can be a color, a gradient, or a pattern. The default fillStyle is black.\nThe fillRect(x, y, width, height) method draws the rectangle, filled with the fill style color, on the canvas:\nSee Also:\nW3Schools' Full Canvas Reference",
      "examples": [
        "<canvas id=\"myCanvas\" width=\"200\" height=\"100\" style=\"border:1px solid black;\">\n</canvas>\n\n<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.fillStyle = \"red\";\nctx.fillRect(0, 0, 150, 75);\n</script>",
        "const canvas = document.getElementById(\"myCanvas\");",
        "const ctx = canvas.getContext(\"2d\");",
        "ctx.fillStyle = \"red\";",
        "ctx.fillRect(0, 0, 150, 75);",
        "<canvas>",
        "getElementById()",
        "getContext()",
        "fillStyle",
        "fillRect(x, y, width, height)"
      ]
    },
    {
      "title": "HTML Canvas Coordinates",
      "summary": "Canvas Coordinates\nThe HTML canvas is a two-dimensional grid.\nThe upper-left corner of the canvas has the coordinates (0,0).\nMouse over the rectangle below to see its x and y coordinates:\nDraw a Rectangle\nTo draw a rectangle on the canvas, use the following method:\nfillRect(x, y, width, height) - defines the start-point and the width and height of the rectangle\nExample\nDefine a start-point in position (0,0), and a width and height of 150px and 75px:\nDraw a Line\nTo draw a straight line on a canvas, use the following methods:\nmoveTo(x, y) - defines the starting point of the line\nlineTo(x, y) - defines the ending point of the line\nTo actually draw the line, you must use one of the \"ink\" methods, like stroke().\nExample\nDefine a start-point in position (0,0), and an end-point in position (200,100). Then use the stroke() method to actually draw the line:\nREMOVE ADS\nDraw a Circle\nTo draw a circle on a canvas, use the following methods:\nbeginPath() - begins a path\narc(x, y, r, startangle, endangle) - creates an arc/curve. To create a circle with arc(): Set startangle to 0 and endangle to 2*Math.PI. The x- and y-coordinates define the center of the circle. r defines the radius of the circle\nExample\nDefine a circle with the arc() method. Then use the stroke() method to actually draw the circle:\nSee Also:\nW3Schools' Full Canvas Reference",
      "examples": [
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.fillRect(0, 0, 150, 75);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.moveTo(0, 0);\nctx.lineTo(200, 100);\nctx.stroke();\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.beginPath();\nctx.arc(95, 50, 40, 0, 2 * Math.PI);\nctx.stroke();\n</script>",
        "fillRect(x, y, width, height)",
        "moveTo(x, y)",
        "lineTo(x, y)",
        "stroke()",
        "beginPath()",
        "arc(x, y, r, startangle, endangle)",
        "arc()"
      ]
    },
    {
      "title": "HTML Canvas Lines",
      "summary": "Canvas Line Drawing\nTo draw a line in canvas, we use the following methods:\nExample\nDefine a start-point in position (0,0), and an end-point in position (200,100). Then use stroke() to actually draw the line:\nREMOVE ADS\nThe lineWidth Property\nThe lineWidth property defines the width of the line.\nIt must be set before calling the stroke() method.\nExample\nThe strokeStyle Property\nThe strokeStyle property defines the color of the line.\nIt must be set before calling the stroke() method.\nExample\nThe lineCap Property\nThe lineCap property defines the cap style of the line (\"butt\", \"round\" or \"square\").\nThe default is \"butt\".\nIt must be set before calling the stroke() method.\nExample\nSee Also:\nW3Schools' Full Canvas Reference",
      "examples": [
        "<script>\n// Create a Canvas:\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\n// Define a new path\nctx.beginPath();\n\n// Set a start-point\nctx.moveTo(0, 0);\n\n// Set an end-point\nctx.lineTo(200, 100);\n\n// Stroke it (Do the Drawing)\nctx.stroke();\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.beginPath();\nctx.moveTo(0, 0);\nctx.lineTo(200, 100);\nctx.lineWidth = 10;\nctx.stroke();\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.beginPath();\nctx.moveTo(0, 0);\nctx.lineTo(200, 100);\nctx.lineWidth = 10;\nctx.strokeStyle = \"red\";\nctx.stroke();\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.beginPath();\nctx.moveTo(0,0);\nctx.lineTo(175,75);\nctx.lineWidth = 10;\nctx.lineCap = \"round\";\nctx.stroke();\n</script>",
        "beginPath()",
        "moveTo(x,y)",
        "lineTo(x,y)",
        "stroke()",
        "lineWidth",
        "strokeStyle",
        "lineCap"
      ]
    },
    {
      "title": "HTML Canvas Fill and Stroke",
      "summary": "Canvas Fill and Stroke\nTo define fill-color and outline-color for shapes/objects in canvas, we use the following properties:\nThe fillStyle Property\nThe fillStyle property defines the fill-color of the object.\nThe fillStyle property value can be a color (colorname, RGB, HEX, HSL), a gradient or a pattern.\nExample\nSet the fill-color to \"green\" and draw a filled rectangle with the fillRect() method:\nREMOVE ADS\nThe strokeStyle Property\nThe strokeStyle property defines the color of the outline.\nThe strokeStyle property value can be a color (colorname, RGB, HEX, HSL), a gradient or a pattern.\nExample\nSet the outline-color to \"blue\" and draw an outlined rectangle with the strokeRect() method:\nCombining fillStyle and strokeStyle\nIt is perfectly legal to combine the two rectangles above.\nExample\nfillStyle and strokeStyle with Alpha Channel\nYou can also add an alpha channel to both the fillStyle and the strokeStyle properties to create opacity.\nExample\nSet the opacity to 50% for both the fillStyle and strokeStyle properties:\nSee Also:\nW3Schools' Full Canvas Reference",
      "examples": [
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.fillStyle = \"green\";\nctx.fillRect(10,10, 100,100);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.strokeStyle = \"blue\";\nctx.lineWidth = 5;\nctx.strokeRect(10,10, 100,100);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\n// the filled rectangle\nctx.fillStyle = \"green\";\nctx.fillRect(10,10, 100,100);\n\n// the outline rectangle\nctx.strokeStyle = \"blue\";\nctx.lineWidth = 5;\nctx.strokeRect(10,10, 100,100);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\n// the filled rectangle\nctx.fillStyle = \"rgb(0 255 0 / 50%)\";\nctx.fillRect(10,10, 100,100);\n\n// the outline rectangle\nctx.strokeStyle = \"rgb(0 0 255 / 50%)\";\nctx.lineWidth = 5;\nctx.strokeRect(10,10, 100,100);\n</script>",
        "fillStyle",
        "strokeStyle",
        "fillRect()",
        "strokeRect()"
      ]
    },
    {
      "title": "HTML Canvas Shapes",
      "summary": "Canvas Shapes\nTo draw different shapes that consist of straight lines in canvas, we use the following methods:\nExample\nREMOVE ADS\nMore Examples\nExample\nThe strokeStyle Property\nThe strokeStyle property defines the color of the stroke.\nIt must be set before calling the stroke() method.\nExample\nSee Also:\nW3Schools' Full Canvas Reference",
      "examples": [
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.beginPath();\n\n// Set start-point\nctx.moveTo(20,20);\n\n// Set sub-points\nctx.lineTo(100,20);\nctx.lineTo(175,100);\nctx.lineTo(20,100);\n\n// Set end-point\nctx.lineTo(20,20);\n\n// Stroke it (do the drawing)\nctx.stroke();\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.beginPath();\nctx.moveTo(100,20);\nctx.lineTo(180,100);\nctx.lineTo(20,100);\nctx.lineTo(100,20);\nctx.stroke();\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.beginPath();\n\n// Define a rectangle\nctx.moveTo(20,20);\nctx.lineTo(180,20);\nctx.lineTo(180,100);\nctx.lineTo(20,100);\nctx.lineTo(20,20);\n\n// Define a triangle\nctx.moveTo(100,20);\nctx.lineTo(180,100);\nctx.lineTo(20,100);\nctx.lineTo(100,20);\n\nctx.strokeStyle = \"red\";\nctx.stroke();\n</script>",
        "beginPath()",
        "moveTo(x,y)",
        "lineTo(x,y)",
        "stroke()",
        "strokeStyle"
      ]
    },
    {
      "title": "HTML Canvas Rectangles",
      "summary": "HTML Canvas Rectangles\nThe three most used methods for drawing rectangles in canvas are:\nThe rect() method\nThe fillRect() method\nThe strokeRect() method\nThe rect() Method\nThe rect() method defines a rectangle.\nThe rect() method has the following parameters:\nExample\nUse rect() to define a 150*100 pixels rectangle, starting in position (10,10). Then use stroke() to actually draw the rectangle:\nNotice that the rect() method does not draw the rectangle (it just defines it). So, in addition, you have to use the stroke() method (or the fill() method) to actually draw it.\nThe fillRect() Method\nThe fillRect() method draws a filled rectangle.\nThe fillRect() method has the following parameters:\nThe fill-color is specified with the fillStyle property. If the fillStyle property is not set, the fill-color defaults to black.\nExample\nUse fillRect() to draw a filled 150*100 pixels rectangle, starting in position (10,10):\nExample\nSet the fill-color with the fillStyle property:\nREMOVE ADS\nThe strokeRect() Method\nThe strokeRect() method draws a stroked (outlined) rectangle.\nThe strokeRect() method has the following parameters:\nThe stroke-color is specified with the strokeStyle property. If the strokeStyle property is not set, the stroke-color defaults to black.\nExample\nUse strokeRect() to draw a stroked 150*100 pixels rectangle, starting in position (10,10):\nExample\nSet the color of the outline with the strokeStyle property:\nMore Examples\nExample\nCreate three rectangles with the rect() method:\nExample\nObtain the same result as above, with less code, using the strokeRect() method:\nSee Also:\nW3Schools' Full Canvas Reference",
      "examples": [
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.rect(10,10, 150,100);\nctx.stroke();\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.fillRect(10,10, 150,100);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.fillStyle = \"pink\";\nctx.fillRect(10,10, 150,100);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.strokeRect(10,10, 150,100);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.strokeStyle = \"blue\";\nctx.strokeRect(10,10, 150,100);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\n// Red rectangle\nctx.beginPath();\nctx.lineWidth = \"6\";\nctx.strokeStyle = \"red\";\nctx.rect(5, 5, 290, 140);\nctx.stroke();\n\n// Green rectangle\nctx.beginPath();\nctx.lineWidth = \"4\";\nctx.strokeStyle = \"green\";\nctx.rect(30, 30, 50, 50);\nctx.stroke();\n\n// Blue rectangle\nctx.beginPath();\nctx.lineWidth = \"10\";\nctx.strokeStyle = \"blue\";\nctx.rect(50, 50, 150, 80);\nctx.stroke();\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\n// Red rectangle\nctx.lineWidth = \"6\";\nctx.strokeStyle = \"red\";\nctx.strokeRect(5, 5, 290, 140);\n\n// Green rectangle\nctx.lineWidth = \"4\";\nctx.strokeStyle = \"green\";\nctx.strokeRect(30, 30, 50, 50);\n\n// Blue rectangle\nctx.lineWidth = \"10\";\nctx.strokeStyle = \"blue\";\nctx.strokeRect(50, 50, 150, 80);\n</script>",
        "rect()",
        "fillRect()",
        "strokeRect()",
        "stroke()",
        "fill()",
        "fillStyle",
        "strokeStyle"
      ]
    },
    {
      "title": "HTML Canvas clearRect() Method",
      "summary": "The clearRect() Method\nThe clearRect() method is used to clear a rectangular area of the canvas. The cleared rectangle is transparent.\nThe clearRect() method has the following parameters:\nExample\nUse fillRect() to draw a filled 150*100 pixels rectangle, starting in position (10,10). Then use clearRect() to clear a rectangular area in the canvas:\nREMOVE ADS\nExample\nHere the cleared rectangle goes outside the pink rectangle:\nExample\nHere we use the clearRect() method to clear a rectangular area in a stroked rectangle:\nSee Also:\nW3Schools' Full Canvas Reference",
      "examples": [
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.fillStyle = \"pink\";\nctx.fillRect(10,10, 150,100);\n\nctx.clearRect(60,35, 50,50);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.fillStyle = \"pink\";\nctx.fillRect(10,10, 150,100);\n\nctx.clearRect(60,35, 150,50);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.strokeStyle = \"blue\";\nctx.strokeRect(10,10, 150,100);\n\nctx.clearRect(60,35, 150,50);\n</script>",
        "clearRect()",
        "fillRect()"
      ]
    },
    {
      "title": "HTML Canvas Circles",
      "summary": "The arc() Method\nThe arc() method is used to define a circle.\nThe arc() method has the following parameters:\nDraw a Full Circle\nWe can create a full circle with the arc() method by defining the startAngle as 0 and the endAngle as 2 * PI:\nTo draw a circle on the canvas, use the following methods:\nbeginPath() - Begin a path\narc() - Define a circle\nstroke() - Draw it\nExample\nREMOVE ADS\nDraw a Full Circle with Colors\nAdd a fill-color and a stroke-color to the circle:\nExample\nDraw a Half Circle\nHere we change the endAngle to PI (not 2 * PI):\nExample\nMore About the Angles of an Arc\nThe following image shows some of the angles in an arc:\nExample\nHere we want to draw an arc from start-angle 0 to end-angle 0.5 * PI:\nExample\nHere we do the same, but with the counterclockwise parameter set to true (it then draws the arc counter-clockwise between the start and end angle):\nSee Also:\nW3Schools' Full Canvas Reference",
      "examples": [
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.beginPath();\nctx.arc(95, 50, 40, 0, 2 * Math.PI);\nctx.stroke();\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.beginPath();\nctx.arc(95, 50, 40, 0, 2 * Math.PI);\nctx.fillStyle = \"red\";\nctx.fill();\nctx.lineWidth = 4;\nctx.strokeStyle = \"blue\";\nctx.stroke();\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.beginPath();\nctx.arc(95, 50, 40, 0, Math.PI);\nctx.fillStyle = \"red\";\nctx.fill();\nctx.stroke();\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.beginPath();\nctx.arc(95, 50, 40, 0, 0.5 * Math.PI);\nctx.stroke();\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.beginPath();\nctx.arc(95, 50, 40, 0, 0.5 * Math.PI, true);\nctx.stroke();\n</script>",
        "arc()",
        "beginPath()",
        "stroke()"
      ]
    },
    {
      "title": "HTML Canvas Curves",
      "summary": "HTML Canvas Curves\nThe three most used methods for drawing curves in canvas are:\nThe arc() method (described in Canvas Circles chapter)\nThe quadraticCurveTo() method\nThe bezierCurveTo() method\nThe quadraticCurveTo() Method\nThe quadraticCurveTo() method is used to define a quadratic Bezier curve.\nThe quadraticCurveTo() method has the following parameters:\nThe quadraticCurveTo() method requires two points: One control point and one end point. The starting point is the latest point in the current path, which can be changed using moveTo() before creating the quadratic Bezier curve.\nTo draw the curve on the canvas, use the following methods:\nbeginPath() - Begin a path\nmoveTo() - Define the start position\nquadraticCurveTo() - Define the quadratic Bezier curve\nstroke() - Draw it\nExample\nThis quadratic Bezier curve begins at the point specified by moveTo(): (10, 100). The control point is placed at (250, 170). The curve ends at (230, 20):\nREMOVE ADS\nThe bezierCurveTo() Method\nThe bezierCurveTo() method is used to define a cubic Bezier curve.\nThe bezierCurveTo() method has the following parameters:\nThe bezierCurveTo() method requires three points: Two control points and one end point. The starting point is the latest point in the current path, which can be changed using moveTo() before creating the cubic Bezier curve.\nTo draw the curve on the canvas, use the following methods:\nbeginPath() - Begin a path\nmoveTo() - Define the start position\nbezierCurveTo() - Define the cubic Bezier curve\nstroke() - Draw it\nExample\nThis cubic Bezier curve begins at the point specified by moveTo(): (20, 20). The first control point is placed at (110, 150). The second control point is placed at (180, 10). The curve ends at (210, 140):\nSee Also:\nW3Schools' Full Canvas Reference",
      "examples": [
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.beginPath();\nctx.moveTo(10, 100);\nctx.quadraticCurveTo(250, 170, 230, 20);\nctx.stroke();\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.beginPath();\nctx.moveTo(20, 20);\nctx.bezierCurveTo(110, 150, 180, 10, 210, 140);\nctx.stroke();\n</script>",
        "arc()",
        "quadraticCurveTo()",
        "bezierCurveTo()",
        "moveTo()",
        "beginPath()",
        "stroke()"
      ]
    },
    {
      "title": "HTML Canvas Gradients",
      "summary": "HTML Canvas Gradients\nGradients let you display smooth transitions between two or more specified colors.\nGradients can be used to fill rectangles, circles, lines, text, etc.\nThere are two methods used for creating gradients:\ncreateLinearGradient() - creates a linear gradient\ncreateRadialGradient() - creates a radial/circular gradient\nThe createLinearGradient() Method\nThe createLinearGradient() method is used to define a linear gradient.\nA linear gradient changes color along a linear pattern (horizontally/vertically/diagonally).\nThe createLinearGradient() method has the following parameters:\nThe gradient object requires two or more color stops.\nThe addColorStop() method specifies the color stops, and its position along the gradient. The positions can be anywhere between 0 and 1.\nTo use the gradient, assign it to the fillStyle or strokeStyle property, then draw the shape (rectangle, circle, shape, or text).\nExample\nCreate a linear gradient with two color stops; a light blue color at the starting point of the gradient, and a dark blue color at the ending point. Then, fill the rectangle with the gradient:\nExample\nHere we fill an outlined rectangle with the gradient:\nREMOVE ADS\nExample\nCreate a linear gradient with three color stops, a light blue color at the starting point of the gradient, a purple color at the middle point of the gradient, and a dark blue color at the ending point. Then, fill the rectangle with the gradient:\nVertical Linear Gradient\nA horizontal gradient goes from left to right and is created by varying the parameters on the x-axis (x1 and x2). The examples above are all horizontal linear gradients.\nA vertical gradient goes from top to bottom and is created by varying the parameters on the y-axis (y1 and y2).\nExample\nCreate a vertical linear gradient by varying the parameter values on the y-axis (change y2):\nDiagonal Linear Gradient\nA diagonal gradient is created by varying both the x- and y-axis parameters.\nExample\nCreate a diagonal linear gradient by varying both the x- and y-axis parameters (change x2 and y2):\nFill Circle with Gradient\nExample\nHere we fill a circle with a gradient:\nFill Text with Gradient\nExample\nHere we fill a text with a gradient:\nFill Outlined Text with Gradient\nExample\nHere we fill an outlined text with a gradient:\nSee Also:\nW3Schools' Full Canvas Reference",
      "examples": [
        "<script>\nconst c = document.getElementById(\"myCanvas\");\nconst ctx = c.getContext(\"2d\");\n\n// Create linear gradient\nconst grad=ctx.createLinearGradient(0,0, 280,0);\ngrad.addColorStop(0, \"lightblue\");\ngrad.addColorStop(1, \"darkblue\");\n\n// Fill rectangle with gradient\nctx.fillStyle = grad;\nctx.fillRect(10,10, 280,130);\n</script>",
        "<script>\nconst c = document.getElementById(\"myCanvas\");\nconst ctx = c.getContext(\"2d\");\n\n// Create linear gradient\nconst grad=ctx.createLinearGradient(0,0, 280,0);\ngrad.addColorStop(0, \"lightblue\");\ngrad.addColorStop(1, \"darkblue\");\n\n// Fill outlined rectangle with gradient\nctx.lineWidth = 10;\nctx.strokeStyle = grad;\nctx.strokeRect(10,10,280,130);\n</script>",
        "<script>\nconst c = document.getElementById(\"myCanvas\");\nconst ctx = c.getContext(\"2d\");\n\n// Create linear gradient\nconst grad=ctx.createLinearGradient(0,0, 280,0);\ngrad.addColorStop(0, \"lightblue\");\ngrad.addColorStop(0.5, \"purple\");\ngrad.addColorStop(1, \"darkblue\");\n\n// Fill rectangle with gradient\nctx.fillStyle = grad;\nctx.fillRect(10,10, 280,130);\n</script>",
        "<script>\nconst c = document.getElementById(\"myCanvas\");\nconst ctx = c.getContext(\"2d\");\n\n// Create linear gradient\nconst grad=ctx.createLinearGradient(0,0, 280,130);\ngrad.addColorStop(0, \"lightblue\");\ngrad.addColorStop(1, \"darkblue\");\n\n// Fill rectangle with gradient\nctx.fillStyle = grad;\nctx.fillRect(10,10, 280,130);\n</script>",
        "<script>\nconst c = document.getElementById(\"myCanvas\");\nconst ctx = c.getContext(\"2d\");\n\n// Create linear gradient\nconst grad=ctx.createLinearGradient(0,0,280,0);\ngrad.addColorStop(0, \"lightblue\");\ngrad.addColorStop(1, \"darkblue\");\n\n// Fill circle with gradient\nctx.beginPath();\nctx.arc(145, 75, 65, 0, 2 * Math.PI);\nctx.fillStyle = grad;\nctx.fill();\n</script>",
        "<script>\nconst c = document.getElementById(\"myCanvas\");\nconst ctx = c.getContext(\"2d\");\n\n// Create linear gradient\nconst grad=ctx.createLinearGradient(0,0,280,0);\ngrad.addColorStop(0, \"lightblue\");\ngrad.addColorStop(1, \"darkblue\");\n\n// Fill text with gradient\nctx.font = \"50px Arial\";\nctx.fillStyle = grad;\nctx.fillText(\"Hello World\",10,80);\n</script>",
        "<script>\nconst c = document.getElementById(\"myCanvas\");\nconst ctx = c.getContext(\"2d\");\n\n// Create linear gradient\nconst grad=ctx.createLinearGradient(0,0,280,0);\ngrad.addColorStop(0, \"lightblue\");\ngrad.addColorStop(1, \"darkblue\");\n\n// Fill outlined text with gradient\nctx.font = \"50px Arial\";\nctx.strokeStyle = grad;\nctx.strokeText(\"Hello World\",10,80);\n</script>",
        "createLinearGradient()",
        "createRadialGradient()",
        "addColorStop()",
        "fillStyle",
        "strokeStyle"
      ]
    },
    {
      "title": "HTML Canvas Radial Gradients",
      "summary": "The createRadialGradient() Method\nThe createRadialGradient() method is used to define a radial/circular gradient.\nA radial gradient is defined with two imaginary circles: a start circle and an end circle. The gradient starts with the start circle and moves towards the end circle.\nThe createRadialGradient() method has the following parameters:\nThe gradient object requires two or more color stops.\nThe addColorStop() method specifies the color stops, and its position along the gradient. The positions can be anywhere between 0 and 1.\nTo use the gradient, assign it to the fillStyle or strokeStyle property, then draw the shape (rectangle, circle, shape, or text).\nExample\nCreate a radial/circular gradient with two color stops; a light blue color for the start circle of the gradient, and a dark blue color for the end circle. The center of the start circle is placed in position (150,75), with a radius of 15 px. The center of the end circle is placed in position (150,75), with a radius of 150 px. Then, fill the rectangle with the gradient:\nREMOVE ADS\nExample\nHere we set the radius of the end circle to a smaller number (100), and we see that the radial/circular gradient will be smaller:\nExample\nHere we move the center point of the end circle to get a new look:\nExample\nHere we add one more color-stop to the gradient to get a new look:\nSee Also:\nW3Schools' Full Canvas Reference",
      "examples": [
        "<script>\nconst c = document.getElementById(\"myCanvas\");\nconst ctx = c.getContext(\"2d\");\n\n// Create gradient\nconst grad=ctx.createRadialGradient(150,75,15,150,75,150);\ngrad.addColorStop(0,\"lightblue\");\ngrad.addColorStop(1,\"darkblue\");\n\n// Fill rectangle with gradient\nctx.fillStyle = grad;\nctx.fillRect(10,10,280,130);\n</script>",
        "<script>\nconst c = document.getElementById(\"myCanvas\");\nconst ctx = c.getContext(\"2d\");\n\n// Create gradient\nconst grad=ctx.createRadialGradient(150,75,15,150,75,150);\ngrad.addColorStop(0,\"lightblue\");\ngrad.addColorStop(0.3,\"pink\");\ngrad.addColorStop(1,\"darkblue\");\n\n// Fill rectangle with gradient\nctx.fillStyle = grad;\nctx.fillRect(10,10,280,130);\n</script>",
        "createRadialGradient()",
        "addColorStop()",
        "fillStyle",
        "strokeStyle"
      ]
    },
    {
      "title": "HTML Canvas Text",
      "summary": "HTML Canvas Text\nTo draw text on the canvas, the most important property and methods are:\nfont - defines the font properties for the text\nfillText() - draws \"filled\" text\nstrokeText() - draws \"outlined\" text (no fill)\nThe font Property\nThe font property defines the font to be used and the size of the font.\nThe default value for this property is \"10px sans serif\".\nThe fillText() Method\nThe fillText() method is used to draw \"filled\" text.\nThe fillText() method has the following parameters:\nExample\nSet font to 50px \"Arial\" and write the filled text on the canvas. Start in position (10,80):\nREMOVE ADS\nThe strokeText() Method\nThe strokeText() method is used to draw \"outlined\" text.\nThe strokeText() method has the following parameters:\nExample\nSet font to 50px \"Arial\" and write the outlined text on the canvas. Start in position (10,80):\nExample\nAdd bold and italic to font:\nSee Also:\nW3Schools' Full Canvas Reference",
      "examples": [
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.font = \"50px Arial\";\nctx.fillText(\"Hello World\",10,80);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.font = \"50px Arial\";\nctx.strokeText(\"Hello World\",10,80);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.font = \"bold italic 50px Arial\";\nctx.strokeText(\"Hello World\",10,80);\n</script>",
        "font",
        "fillText()",
        "strokeText()"
      ]
    },
    {
      "title": "HTML Canvas Text Color",
      "summary": "HTML Canvas Text Color\nTo set the color of the text on the canvas, we use two properties:\nfillStyle - defines the fill color for the text\nstrokeStyle - defines the color of the outline text\nThe fillStyle Property\nThe fillStyle property defines the fill color of the text.\nExample\nSet font to 50px \"Arial\". Set fill color to purple. Write the filled text on the canvas. Start in position (10,80):\nREMOVE ADS\nThe strokeStyle Property\nThe strokeStyle property defines the color of the outline of the text.\nExample\nSet font to 50px \"Arial\". Set outline color to purple. Write the outlined text on the canvas. Start in position (10,80):\nFill Text with Gradient\nExample\nHere we fill a text with a gradient:\nFill Outlined Text with Gradient\nExample\nHere we fill an outlined text with a gradient:\nSee Also:\nW3Schools' Full Canvas Reference",
      "examples": [
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.font = \"50px Arial\";\nctx.fillStyle = \"purple\";\nctx.fillText(\"Hello World\",10,80);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.font = \"50px Arial\";\nctx.strokeStyle = \"purple\";\nctx.strokeText(\"Hello World\",10,80);\n</script>",
        "<script>\nconst c = document.getElementById(\"myCanvas\");\nconst ctx = c.getContext(\"2d\");\n\n// Create linear gradient\nconst grad=ctx.createLinearGradient(0,0,280,0);\ngrad.addColorStop(0, \"lightblue\");\ngrad.addColorStop(1, \"darkblue\");\n\n// Fill text with gradient\nctx.font = \"50px Arial\";\nctx.fillStyle = grad;\nctx.fillText(\"Hello World\",10,80);\n</script>",
        "<script>\nconst c = document.getElementById(\"myCanvas\");\nconst ctx = c.getContext(\"2d\");\n\n// Create linear gradient\nconst grad=ctx.createLinearGradient(0,0,280,0);\ngrad.addColorStop(0, \"lightblue\");\ngrad.addColorStop(1, \"darkblue\");\n\n// Fill outlined text with gradient\nctx.font = \"50px Arial\";\nctx.strokeStyle = grad;\nctx.strokeText(\"Hello World\",10,80);\n</script>",
        "fillStyle",
        "strokeStyle"
      ]
    },
    {
      "title": "HTML Canvas Text Alignment",
      "summary": "HTML Canvas Text Alignment\nTo align text in the canvas, we use two properties:\ntextBaseline - defines the baseline (the vertical alignment) of text\ntextAlign - defines the horizontal alignment of text\nThe textBaseline Property\nThe textBaseline property defines the baseline (the vertical alignment) of text.\nThe textBaseline property can have the following values:\n\"top\"\n\"hanging\"\n\"middle\"\n\"alphabetic\" - this is default\n\"ideographic\"\n\"bottom\"\nExample\nDemonstration of the different values for the textBaseline property:\nREMOVE ADS\nThe textAlign Property\nThe textAlign property defines the horizontal alignment of text.\nThe textAlign property can have the following values:\n\"left\"\n\"right\"\n\"center\"\n\"start\" - this is default\n\"end\"\nExample\nDemonstration of the different values for the textAlign property:\nCenter Text\nExample\nCenter text both vertically and horizontally in the canvas:\nSee Also:\nW3Schools' Full Canvas Reference",
      "examples": [
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\n// Create a line\nctx.strokeStyle = \"black\";\nctx.lineWidth = 2;\nctx.beginPath();\nctx.moveTo(0,75);\nctx.lineTo(500,75);\nctx.stroke();\nctx.closePath();\n\nctx.font = \"20px Arial\";\nctx.fillStyle = \"purple\";\n\nctx.textBaseline = \"top\";\nctx.fillText(\"top\", 5, 75);\n\nctx.textBaseline = \"hanging\";\nctx.fillText(\"hanging\", 40, 75);\n\nctx.textBaseline = \"middle\";\nctx.fillText(\"middle\", 120, 75);\n\nctx.textBaseline = \"alphabetic\";\nctx.fillText(\"alphabetic\", 190, 75);\n\nctx.textBaseline = \"ideographic\";\nctx.fillText(\"ideographic\", 295, 75);\n\nctx.textBaseline = \"bottom\";\nctx.fillText(\"bottom\", 410, 75);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\n// Create a line\nctx.strokeStyle = \"black\";\nctx.lineWidth = 2;\nctx.beginPath();\nctx.moveTo(250,0);\nctx.lineTo(250,250);\nctx.stroke();\nctx.closePath();\n\nctx.font = \"20px Arial\";\nctx.fillStyle = \"purple\";\n\nctx.textAlign = \"center\";\nctx.fillText(\"center\", 250, 20);\n\nctx.textAlign = \"start\";\nctx.fillText(\"start\", 250, 50);\n\nctx.textAlign = \"end\";\nctx.fillText(\"end\", 250, 80);\n\nctx.textAlign = \"left\";\nctx.fillText(\"left\", 250, 110);\n\nctx.textAlign = \"right\";\nctx.fillText(\"right\", 250, 135);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.font = \"30px Verdana\";\nctx.fillStyle = \"red\";\nctx.textAlign = \"center\";\nctx.textBaseline = \"middle\";\nctx.fillText(\"Hello World\", canvas.width/2, canvas.height/2);\n</script>",
        "textBaseline",
        "textAlign"
      ]
    },
    {
      "title": "HTML Canvas Shadows",
      "summary": "HTML Canvas Shadows\nTo create shadows in canvas, we use the following four properties:\nshadowColor - defines the color of the shadow\nshadowBlur - defines the blur amount of the shadow\nshadowOffsetX - defines the distance that shadows will be offset horizontally\nshadowOffsetY - defines the distance that shadows will be offset vertically\nThe shadowColor Property\nThe shadowColor property defines the color of the shadow.\nThe default value is fully transparent black.\nExample\nHere we create a filled blue rectangle with a light blue shadow, and a stroked blue rectangle with a light blue shadow:\nExample\nHere we create a filled purple text with a light blue shadow, and a stroked purple text with a light blue shadow:\nREMOVE ADS\nThe shadowBlur Property\nThe shadowBlur property defines the amount of blur applied to the shadow.\nThe default value is 0 (no blur).\nExample\nFilled and stroked rectangles with a shadowBlur property set to 8:\nExample\nFilled and stroked text with a shadowBlur property set to 4:\nThe shadowOffsetX Property\nThe shadowOffsetX property defines the horizontal distance of the shadow from the shape.\nPositive values move the shadow to the right, and negative values moves the shadow to the left.\nThe default value is 0 (no horizontal offset distance).\nExample\nFirst rectangle with shadowOffsetX = 5, second rectangle with shadowOffsetX = 15, third rectangle with shadowOffsetX = -10:\nThe shadowOffsetY Property\nThe shadowOffsetY property defines the vertical distance of the shadow from the shape.\nPositive values move the shadow down, and negative values moves the shadow up.\nThe default value is 0 (no vertical offset distance).\nExample\nFirst rectangle with shadowOffsetY = 5, second rectangle with shadowOffsetY = 15, third rectangle with shadowOffsetY = -10:\nSee Also:\nW3Schools' Full Canvas Reference",
      "examples": [
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\n// Shadow\nctx.shadowColor = \"lightblue\";\nctx.shadowOffsetX = 10;\nctx.shadowOffsetY = 10;\n\n// Filled rectangle\nctx.fillStyle = \"blue\";\nctx.fillRect(20, 20, 100, 100);\n\n// Stroked rectangle\nctx.lineWidth = 4;\nctx.strokeStyle = \"blue\";\nctx.strokeRect(170, 20, 100, 100);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\n// Shadow\nctx.shadowColor = \"lightblue\";\nctx.shadowOffsetX = 5;\nctx.shadowOffsetY = 5;\n\nctx.font = \"50px Arial\";\n\n// Filled text\nctx.fillStyle = \"purple\";\nctx.fillText(\"Hello World\",10,60);\n\n// Stroked text\nctx.strokeStyle = \"purple\";\nctx.strokeText(\"Hello World\",10,120);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\n// Shadow\nctx.shadowColor = \"lightblue\";\nctx.shadowBlur = 8;\nctx.shadowOffsetX = 10;\nctx.shadowOffsetY = 10;\n\n// Filled rectangle\nctx.fillStyle = \"blue\";\nctx.fillRect(20, 20, 100, 100);\n\n// Stroked rectangle\nctx.lineWidth = 4;\nctx.strokeStyle = \"blue\";\nctx.strokeRect(170, 20, 100, 100);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\n// Shadow\nctx.shadowColor = \"lightblue\";\nctx.shadowBlur = 4;\nctx.shadowOffsetX = 5;\nctx.shadowOffsetY = 5;\n\nctx.font = \"50px Arial\";\n\n// Filled text\nctx.fillStyle = \"purple\";\nctx.fillText(\"Hello World\",10,60);\n\n// Stroked text\nctx.strokeStyle = \"purple\";\nctx.strokeText(\"Hello World\",10,120);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\n// Shadowcolor\nctx.shadowColor = \"lightblue\";\n\nctx.fillStyle = \"blue\";\n\n// rectangle 1\nctx.shadowOffsetX = 5;\nctx.fillRect(20, 20, 100, 100);\n\n// rectangle 2\nctx.shadowOffsetX = 15;\nctx.fillRect(170, 20, 100, 100);\n\n// rectangle 3\nctx.shadowOffsetX = -10;\nctx.fillRect(320, 20, 100, 100);\n</script>",
        "shadowColor",
        "shadowBlur",
        "shadowOffsetX",
        "shadowOffsetY",
        "shadowOffsetX = 5",
        "shadowOffsetX = 15",
        "shadowOffsetX = -10",
        "shadowOffsetY = 5",
        "shadowOffsetY = 15",
        "shadowOffsetY = -10"
      ]
    },
    {
      "title": "HTML Canvas Images",
      "summary": "HTML Canvas - Draw Image\nThe drawImage() method draws an image onto the canvas.\nThe drawImage() method can be used with three different syntaxes:\ndrawImage(image, dx, dy)\ndrawImage(image, dx, dy, dwidth, dheight)\ndrawImage(image, sx, sy, swidth, sheight, dx, dy, dwidth, dheight)\nThe examples below explain the three different syntaxes.\ndrawImage(image, dx, dy)\nThe drawImage(image, dx, dy) syntax positions the image on the canvas.\nExample\nDraw image in position (10, 10) on the canvas:\ndrawImage(image, dx, dy, dwidth, dheight)\nThe drawImage(image, dx, dy, dwidth, dheight) syntax positions the image on the canvas, and specifies the width and height of the image on the canvas.\nExample\nDraw image in position (10, 10) on the canvas, with a width and height of 80 pixels:\ndrawImage(image, sx, sy, swidth, sheight, dx, dy, dwidth, dheight)\nThe drawImage(image, sx, sy, swidth, sheight, dx, dy, dwidth, dheight) syntax is used to clip the source image, before it is placed on the canvas.\nExample\nHere we clip the source image from position (90, 130), with a width of 50 and a height of 60, and then position the clipped part on the canvas in position (10, 10), with a width and height of 150 and 160 pixels (so the clipped source image will also be scaled/stretched:\nHere are the parameters of the drawImage() method:\nSee Also:\nW3Schools' Full Canvas Reference",
      "examples": [
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nconst image = document.getElementById(\"scream\");\n\nimage.addEventListener(\"load\", (e) => {\nctx.drawImage(image, 10, 10);\n});\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nconst image = document.getElementById(\"scream\");\n\nimage.addEventListener(\"load\", (e) => {\nctx.drawImage(image, 10, 10, 80, 80);\n});\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nconst image = document.getElementById(\"scream\");\n\nimage.addEventListener(\"load\", (e) => {\nctx.drawImage(image, 90, 130, 50, 60, 10, 10, 150, 160);\n});\n</script>",
        "drawImage()",
        "drawImage(image, dx, dy)",
        "drawImage(image, dx, dy, dwidth, dheight)",
        "drawImage(image, sx, sy, swidth, sheight, dx, dy, dwidth, dheight)"
      ]
    },
    {
      "title": "HTML Canvas Transformations",
      "summary": "HTML Canvas Transformations\nWith transformations we can translate the origin to a different position, rotate and scale it.\nThe six methods for transformations are:\ntranslate() - moves elements on the canvas to a new point in the grid\nrotate() - rotates elements on the canvas clockwise or counter-clockwise\nscale() - scales elements on the canvas up or down\ntransform() - multiplies the current transformation with the arguments described\nresetTransform() - resets the the current transformation to the identity matrix\nsetTransform() - resets the the current transformation to the identity matrix, and then runs a transformation described by the arguments\nThe translate() Method\nThe translate() method is used to move an object/element by x and y.\nThe translate() method has the following parameters:\nAssume one object is placed in position (10,10). Then, we use translate(70,70). The next object is also placed in position (10,10), but this means that the second object will be placed at x-position 80 (70 + 10) and at y-position 80 (70 + 10).\nLet's look at some examples:\nExample\nFirst, draw one rectangle in position (10,10), then set translate() to (70,70) (This will be the new start point). Then draw another rectangle in position (10,10). Notice that the second rectangle now starts in position (80,80):\nExample\nFirst, draw one rectangle in position (10,10), then set translate() to (70,70) (This will be the new start point). Then draw another rectangle in position (10,10). Notice that the second rectangle now starts in position (80,80) (70+10, 70+10). Then set translate() to (80,-65) (This will be the new start point). Then draw a third rectangle in position (10,10). Notice that the third rectangle now starts in position (160,15) (80+80, 80-65). Notice that each time you call translate(), it builds on the previous start point:\nThe rotate() Method\nThe rotate() method rotates a shape by an angle.\nThe rotate() method has the following parameter:\nTip: Angles are in radians, not degrees. Use (Math.PI/180)*degree to convert.\nExample\nRotate the rectangle by 20 degrees:\nExample\nHere we add one more rectangle. Both the rectangles will be rotated by 20 degrees:\nREMOVE ADS\nThe scale() Method\nThe scale() method scales elements on the canvas up or down.\nThe scale() method has the following parameters:\nOne unit on the canvas is one pixel. If we set the scaling factor to 2, one unit becomes two pixels, and shapes will be drawn twice as large. If we set a scaling factor to 0.5, one unit becomes 0.5 pixels, and shapes will be drawn at half size.\nExample\nDraw a rectangle. Scale to 200%, then draw a new rectangle:\nExample\nDraw a rectangle. Scale to 50%, then draw a new rectangle:\nExample\nDraw a rectangle. Scale width to 200% and height to 300%, then draw a new rectangle:\nThe transform() Method\nThe transform() method multiplies the current transformation with the matrix described by the arguments of this method. This lets you scale, rotate, translate (move), and skew the context.\nThe transform() method replaces the transformation matrix, and multiplies it with a matrix described by:\na c e\nb d f\n0 0 1\nThe transform() method has the following parameters:\nExample\nDraw a yellow rectangle, run new transformation matrix with transform(). Draw a red rectangle, run new transformation matrix, then draw a blue rectangle. Notice that each time you call transform(), it builds on the previous transformation matrix:\nThe resetTransform() Method\nThe resetTransform() method resets the current transformation to the identity matrix.\nThis is equal to calling: ctx.setTransform(1,0,0,1,0,0).\nThe setTransform() Method\nThe setTransform() method resets the current transformation to the identity matrix, and then runs a transformation described by the arguments. This lets you scale, rotate, translate (move), and skew the context.\nThe setTransform() method has the following parameters:\nExample\nDraw a yellow rectangle, reset and run new transformation matrix with setTransform(). Draw a red rectangle, reset and run a new transformation matrix, then draw a blue rectangle. Notice that in this example, the red rectangle is not shown because it is under the blue rectangle:\nSee Also:\nW3Schools' Full Canvas Reference",
      "examples": [
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.fillStyle = \"red\";\nctx.fillRect(10, 10, 100, 50);\n\nctx.translate(70, 70);\n\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 50);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.fillStyle = \"red\";\nctx.fillRect(10, 10, 100, 50);\n\nctx.translate(70, 70);\n\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 50);\n\nctx.translate(80, -65);\n\nctx.fillStyle = \"yellow\";\nctx.fillRect(10, 10, 100, 50);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.rotate((Math.PI/180)*20);\n\nctx.fillStyle = \"red\";\nctx.fillRect(50, 10, 100, 50);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.rotate((Math.PI/180)*20);\n\nctx.fillStyle = \"red\";\nctx.fillRect(50, 10, 100, 50);\n\nctx.strokeStyle = \"blue\";\nctx.strokeRect(70, 30, 100, 50);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.strokeRect(5, 5, 25, 25);\n\nctx.scale(2, 2);\n\nctx.strokeStyle = \"blue\";\nctx.strokeRect(5, 5, 25, 25);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.strokeRect(15, 15, 25, 25);\n\nctx.scale(0.5, 0.5);\n\nctx.strokeStyle = \"blue\";\nctx.strokeRect(15, 15, 25, 25);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.fillStyle = \"yellow\";\nctx.fillRect(10, 10, 200, 100)\n\nctx.transform(1, 0.5, -0.5, 1, 30, 10);\n\nctx.fillStyle = \"red\";\nctx.fillRect(10, 10, 200, 100);\n\nctx.transform(1, 0.5, -0.5, 1, 30, 10);\n\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 200, 100);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.fillStyle = \"yellow\";\nctx.fillRect(10, 10, 200, 100)\n\nctx.setTransform(1, 0.5, -0.5, 1, 30, 10);\n\nctx.fillStyle = \"red\";\nctx.fillRect(10, 10, 200, 100);\n\nctx.setTransform(1, 0.5, -0.5, 1, 30, 10);\n\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 200, 100);\n</script>",
        "translate()",
        "rotate()",
        "scale()",
        "transform()",
        "resetTransform()",
        "setTransform()",
        "x",
        "y",
        "(Math.PI/180)*degree",
        "ctx.setTransform(1,0,0,1,0,0)"
      ]
    },
    {
      "title": "HTML Canvas Clipping",
      "summary": "The clip() Method\nThe clip() method turns the current path into the current clipping region.\nWhen a region is clipped, future drawing is only visible inside the clipped region.\nThe clip() method has the following parameters:\nLet's look at some examples:\nExample\nFirst, create a circular clipping region. Then draw two rectangles; only those parts that lies inside the clipping region are visible:\nExample\nFirst, create a triangle-shaped clipping region. Then draw two rectangles; only those parts that lies inside the clipping region are visible:\nExample\nFirst, create a circular clipping region. Then draw an image onto the canvas; again - only those parts that lies inside the clipping region are visible:\nExample\nFirst, we save two rectangles to a Path2D() object, this will be the clipping region. The \"evenodd\" rule creates a hole where the clipping rectangles intersect: If we had used the default \"nonzero\" rule, there would be no hole:\nExample\nSame example as above, but with the \"nonzero\" rule (does not create a hole where the clipping rectangles intersect):\nSee Also:\nW3Schools' Full Canvas Reference",
      "examples": [
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\n// Create a circular clipping region\nctx.beginPath();\nctx.arc(100, 75, 70, 0, Math.PI * 2);\nctx.clip();\n\n// Draw two rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(0, 0, 300, 150);\nctx.fillStyle = \"red\";\nctx.fillRect(0, 0, 90, 90);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\n// Create a triangle-shaped clipping region\nctx.beginPath();\nctx.moveTo(100,20);\nctx.lineTo(180,100);\nctx.lineTo(20,100);\nctx.lineTo(100,20);\nctx.clip();\n\n// Draw two rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(0, 0, 300, 150);\nctx.fillStyle = \"red\";\nctx.fillRect(0, 0, 90, 90);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nconst image = document.getElementById(\"scream\");\n\nimage.addEventListener(\"load\", (e) => {\n// Create a circular clipping region\nctx.beginPath();\nctx.arc(110, 145, 75, 0, Math.PI * 2);\nctx.clip();\n// Draw image onto canvas\nctx.drawImage(image, 0, 0);\n});\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\n// Create clipping path (two rectangles)\nlet r = new Path2D();\nr.rect(80,10, 45,130);\nr.rect(40,50, 120,50);\nctx.clip(r, \"evenodd\");\n\n// Draw a rectangle\nctx.fillStyle = \"red\";\nctx.fillRect(0, 0, 300, 150);\n</script>",
        "clip()"
      ]
    },
    {
      "title": "HTML Canvas Compositing",
      "summary": "The globalCompositeOperation Property\nThe globalCompositeOperation property sets the type of compositing operation to apply when drawing new shapes. In the previous chapters new drawings have been placed on top of each other. We can decide what to do with new shades with the globalCompositeOperation property.\nLet's look at some examples!\nThe \"source-over\" Value\nThe \"source-over\" value is default. It will draw new shapes on top of the existing content.\nExample\nSet globalCompositeOperation property to \"source-over\". Then draw two overlapping rectangles:\nThe \"source-out\" Value\nThe \"source-out\" value will draw new shapes only where it does not overlap the existing content.\nExample\nSet globalCompositeOperation property to \"source-out\". Then draw two overlapping rectangles:\nThe \"destination-over\" Value\nThe \"destination-over\" value will draw new shapes behind the existing content.\nExample\nSet globalCompositeOperation property to \"destination-over\". Then draw two overlapping rectangles:\nREMOVE ADS\nThe \"destination-atop\" Value\nThe \"destination-atop\" value will keep the existing content where it overlaps the new shape. The new shape is drawn behind the existing content.\nExample\nSet globalCompositeOperation property to \"destination-atop\". Then draw two overlapping rectangles:\nThe \"lighter\" Value\nThe \"lighter\" value will result in a brighter color where both shapes overlap.\nExample\nSet globalCompositeOperation property to \"lighter\". Then draw two overlapping rectangles:\nThe \"copy\" Value\nThe \"copy\" value will result in that only the new shape is shown.\nExample\nSet globalCompositeOperation property to \"copy\". Then draw two overlapping rectangles:\nThe \"xor\" Value\nThe \"xor\" value will result in that shapes are transparent where both overlap, and drawn normal everywhere else.\nExample\nSet globalCompositeOperation property to \"xor\". Then draw two overlapping rectangles:\nThe \"multiply\" Value\nThe \"multiply\" value will result in a darker picture. Multiplies the pixels of the top layer with the pixels of the bottom layer.\nExample\nSet globalCompositeOperation property to \"multiply\". Then draw two overlapping rectangles:\nThe \"screen\" Value\nThe \"screen\" value will result in a lighter picture. Invert the pixels, then multiply, and inverted again (opposite of \"multiply\").\nExample\nSet globalCompositeOperation property to \"screen\". Then draw two overlapping rectangles:\nThe \"darken\" Value\nThe \"darken\" value will result in a darker color where both shapes overlap (keeps the darkest pixels of both layers).\nExample\nSet globalCompositeOperation property to \"darken\". Then draw two overlapping rectangles:\nThe \"lighten\" Value\nThe \"lighten\" value will result in a lighter color where both shapes overlap (keeps the lightest pixels of both layers).\nExample\nSet globalCompositeOperation property to \"lighten\". Then draw two overlapping rectangles:\nThe \"hue\" Value\nThe \"hue\" value adopts the hue of the top layer and preserves the luma and chroma of the bottom layer.\nExample\nSet globalCompositeOperation property to \"hue\". Then draw two overlapping rectangles:\nThe \"luminosity\" Value\nThe \"luminosity\" value adopts the luma of the top layer and preserves the hue and chroma of the bottom layer.\nExample\nSet globalCompositeOperation property to \"luminosity\". Then draw two overlapping rectangles:\nThe globalCompositeOperation Property Values\nThe globalCompositeOperation property can have the following values:\nSee Also:\nW3Schools' Full Canvas Reference",
      "examples": [
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.globalCompositeOperation = \"source-over\";\n\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.globalCompositeOperation = \"source-out\";\n\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.globalCompositeOperation = \"destination-over\";\n\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.globalCompositeOperation = \"lighter\";\n\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.globalCompositeOperation = \"copy\";\n\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.globalCompositeOperation = \"xor\";\n\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.globalCompositeOperation = \"multiply\";\n\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>",
        "<script>\nconst canvas = document.getElementById(\"myCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nctx.globalCompositeOperation = \"screen\";\n\n// Draw two overlapping rectangles\nctx.fillStyle = \"blue\";\nctx.fillRect(10, 10, 100, 100);\nctx.fillStyle = \"red\";\nctx.fillRect(40, 40, 100, 100);\n</script>",
        "globalCompositeOperation"
      ]
    },
    {
      "title": "HTML Canvas Examples",
      "summary": "Try-it Yourself Examples\nThe examples below embeds canvas directly into the HTML code.\nHTML Canvas is supported in all major browsers.\nCanvas Intro\nExamples explained\nCanvas Coordinates\nExamples explained\nCanvas Lines\nExamples explained\nCanvas Fill and Stroke\nExamples explained\nREMOVE ADS\nCanvas Shapes\nExamples explained\nCanvas Rectangles\nExamples explained\nCanvas clearRect()\nExamples explained\nCanvas Circles\nExamples explained\nCanvas Curves\nExamples explained\nCanvas Linear Gradients\nExamples explained\nCanvas Radial Gradients\nExamples explained\nCanvas Text\nExamples explained\nCanvas Text Color\nExamples explained\nCanvas Text Alignment\nExamples explained\nCanvas Shadows\nExamples explained\nCanvas Images\nExamples explained\nCanvas Transformations\nExamples explained\nCanvas Clipping\nExamples explained\nCanvas Compositing\nExamples explained",
      "examples": []
    },
    {
      "title": "Canvas Clock",
      "summary": "In these chapters we will build an analog clock using HTML canvas.\nPart I - Create the Canvas\nThe clock needs an HTML container. Create an HTML canvas:\nHTML code:\nREMOVE ADS\nCode Explained\nAdd an HTML <canvas> element to your page:\nCreate a canvas object (const canvas) the HTML canvas element:\nCreate a 2d drawing object (const ctx) for the canvas object:\nCalculate the clock radius, using the height of the canvas:\nNote\nUsing the canvas height to calculate the clock radius, makes the clock work for all canvas sizes.\nRemap the (0,0) position (of the drawing object) to the center of the canvas:\nReduce the clock radius (to 90%) to draw the clock well inside the canvas:\nCreate a function to draw the clock:\nSee Also:\nW3Schools' Full Canvas Reference",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<body>\n\n<canvas id=\"canvas\" width=\"400\" height=\"400\" style=\"background-color:#333\"></canvas>\n\n<script>\nconst canvas = document.getElementById(\"canvas\");\nconst ctx = canvas.getContext(\"2d\");\nlet radius = canvas.height / 2;\nctx.translate(radius, radius);\nradius = radius * 0.90\ndrawClock();\n\nfunction drawClock() {\nctx.arc(0, 0, radius, 0 , 2 * Math.PI);\nctx.fillStyle = \"white\";\nctx.fill();\n}\n</script>\n\n</body>\n</html>",
        "<canvas id=\"canvas\" width=\"400\" height=\"400\" style=\"background-color:#333\"></canvas>",
        "const canvas = document.getElementById(\"canvas\");",
        "const ctx = canvas.getContext(\"2d\");",
        "let radius = canvas.height / 2;",
        "ctx.translate(radius, radius);",
        "radius = radius * 0.90;",
        "function drawClock() {\nctx.arc(0, 0, radius, 0 , 2 * Math.PI);\nctx.fillStyle = \"white\";\nctx.fill();\n}"
      ]
    },
    {
      "title": "Canvas Clock Face",
      "summary": "Part II - Draw a Clock Face\nThe clock needs a clock face. Create a JavaScript function to draw a clock face:\nJavaScript:\nREMOVE ADS\nCode Explained\nCreate a drawFace() function for drawing the clock face:\nDraw the white circle:\nCreate a radial gradient (95% and 105% of original clock radius):\nCreate 3 color stops, corresponding with the inner, middle, and outer edge of the arc:\nThe color stops create a 3D effect.\nDefine the gradient as the stroke style of the drawing object:\nDefine the line width of the drawing object (10% of radius):\nDraw the circle:\nDraw the clock center:\nSee Also:\nW3Schools' Full Canvas Reference",
      "examples": [
        "function drawClock() {\ndrawFace(ctx, radius);\n}\n\nfunction drawFace(ctx, radius) {\nconst grad = ctx.createRadialGradient(0, 0 ,radius * 0.95, 0, 0, radius * 1.05);\ngrad.addColorStop(0, '#333');\ngrad.addColorStop(0.5, 'white');\ngrad.addColorStop(1, '#333');\n\nctx.beginPath();\nctx.arc(0, 0, radius, 0, 2 * Math.PI);\nctx.fillStyle = 'white';\nctx.fill();\n\nctx.strokeStyle = grad;\nctx.lineWidth = radius*0.1;\nctx.stroke();\n\nctx.beginPath();\nctx.arc(0, 0, radius * 0.1, 0, 2 * Math.PI);\nctx.fillStyle = '#333';\nctx.fill();\n}",
        "function drawClock() {\ndrawFace(ctx, radius);\n}\n\nfunction drawFace(ctx, radius) {\n}",
        "ctx.beginPath();\nctx.arc(0, 0, radius, 0, 2 * Math.PI);\nctx.fillStyle = 'white';\nctx.fill();",
        "grad = ctx.createRadialGradient(0, 0, radius * 0.95, 0, 0, radius * 1.05);",
        "grad.addColorStop(0, '#333');\ngrad.addColorStop(0.5, 'white');\ngrad.addColorStop(1, '#333');",
        "ctx.strokeStyle = grad;",
        "ctx.lineWidth = radius * 0.1;",
        "ctx.stroke();",
        "ctx.beginPath();\nctx.arc(0, 0, radius * 0.1, 0, 2 * Math.PI);\nctx.fillStyle = '#333';\nctx.fill();"
      ]
    },
    {
      "title": "Canvas Clock Numbers",
      "summary": "Part III - Draw Clock Numbers\nThe clock needs numbers. Create a JavaScript function to draw clock numbers:\nJavaScript:\nREMOVE ADS\nExample Explained\nSet the font size (of the drawing object) to 15% of the radius:\nSet the text alignment to the middle and the center of the print position:\nCalculate the print position (for 12 numbers) to 85% of the radius, rotated (PI/6) for each number:\nSee Also:\nW3Schools' Full Canvas Reference",
      "examples": [
        "function drawClock() {\ndrawFace(ctx, radius);\ndrawNumbers(ctx, radius);\n}\n\nfunction drawNumbers(ctx, radius) {\nctx.font = radius * 0.15 + \"px arial\";\nctx.textBaseline = \"middle\";\nctx.textAlign = \"center\";\nfor(let num = 1; num < 13; num++){\nlet ang = num * Math.PI / 6;\nctx.rotate(ang);\nctx.translate(0, -radius * 0.85);\nctx.rotate(-ang);\nctx.fillText(num.toString(), 0, 0);\nctx.rotate(ang);\nctx.translate(0, radius * 0.85);\nctx.rotate(-ang);\n}\n}",
        "ctx.font = radius * 0.15 + \"px arial\";",
        "ctx.textBaseline = \"middle\";\nctx.textAlign = \"center\";",
        "for(num = 1; num < 13; num++) {\nang = num * Math.PI / 6;\nctx.rotate(ang);\nctx.translate(0, -radius * 0.85);\nctx.rotate(-ang);\nctx.fillText(num.toString(), 0, 0);\nctx.rotate(ang);\nctx.translate(0, radius * 0.85);\nctx.rotate(-ang);\n}"
      ]
    },
    {
      "title": "Canvas Clock Hands",
      "summary": "Part IV - Draw Clock Hands\nThe clock needs hands. Create a JavaScript function to draw clock hands:\nJavaScript:\nREMOVE ADS\nExample Explained\nCreate a Date object to get hour, minute, second:\nCalculate the angle of the hour hand, and draw it a length (50% of radius), and a width (7% of radius):\nUse the same technique for minutes and seconds.\nThe drawHand() routine does not need an explanation. It just draws a line with a given length and width.\nSee Also:\nW3Schools' Full Canvas Reference",
      "examples": [
        "function drawClock() {\ndrawFace(ctx, radius);\ndrawNumbers(ctx, radius);\ndrawTime(ctx, radius);\n}\n\nfunction drawTime(ctx, radius) {\nconst now = new Date();\nlet hour = now.getHours();\nlet minute = now.getMinutes();\nlet second = now.getSeconds();\n//hour\nhour = hour%12;\nhour = (hour*Math.PI/6)+(minute*Math.PI/(6*60))+(second*Math.PI/(360*60));\ndrawHand(ctx, hour, radius*0.5, radius*0.07);\n//minute\nminute = (minute*Math.PI/30)+(second*Math.PI/(30*60));\ndrawHand(ctx, minute, radius*0.8, radius*0.07);\n// second\nsecond = (second*Math.PI/30);\ndrawHand(ctx, second, radius*0.9, radius*0.02);\n}\n\nfunction drawHand(ctx, pos, length, width) {\nctx.beginPath();\nctx.lineWidth = width;\nctx.lineCap = \"round\";\nctx.moveTo(0,0);\nctx.rotate(pos);\nctx.lineTo(0, -length);\nctx.stroke();\nctx.rotate(-pos);\n}",
        "const now = new Date();\nlet hour = now.getHours();\nlet minute = now.getMinutes();\nlet second = now.getSeconds();",
        "hour = hour%12;\nhour = (hour*Math.PI/6)+(minute*Math.PI/(6*60))+(second*Math.PI/(360*60));\ndrawHand(ctx, hour, radius*0.5, radius*0.07);"
      ]
    },
    {
      "title": "Canvas Clock Start",
      "summary": "In these chapters we build an analog clock using HTML Canvas.\nPart V - Start the Clock\nTo start the clock, call the drawClock function at intervals:\nJavaScript:\nExample Explained\nThe only thing you have to do (to start the clock) is to call the drawClock function at intervals.\nSubstitute:\nWith:\nNote\nIntervals are in milliseconds. drawClock() will be called for each 1000 milliseconds.\nSee Also:\nW3Schools' Full Canvas Reference",
      "examples": [
        "const canvas = document.getElementById(\"canvas\");\nconst ctx = canvas.getContext(\"2d\");\nlet radius = canvas.height / 2;\nctx.translate(radius, radius);\nradius = radius * 0.90\n//drawClock();\nsetInterval(drawClock, 1000);",
        "drawClock();",
        "setInterval(drawClock, 1000);"
      ]
    },
    {
      "title": "JavaScript Graphic Libraries",
      "summary": "Graphic Libraries\nJavaScript libraries to use for both Artificial Intelligence graphs and other charts:\nPlotly.js\nChart.js\nGoogle Chart\nPlotly.js\nPlotly.js is a charting library that comes with over 40 chart types, 3D charts, statistical graphs, and SVG maps.\nLearn More ...\nChart.js\nChart.js comes with many built-in chart types:\nScatter\nLine\nBar\nRadar\nPie and Doughnut\nPolar Area\nBubble\nLearn More ...\nREMOVE ADS\nGoogle Chart\nFrom simple line charts to complex tree maps, Google Chart provides a number of built-in chart types:\nScatter Chart\nLine Chart\nBar / Column Chart\nArea Chart\nPie Chart\nDonut Chart\nOrg Chart\nMap / Geo Chart\nLearn More ...",
      "examples": []
    },
    {
      "title": "HTML Canvas",
      "summary": "HTML Canvas is perfect for Scatter Plots\nHTML Canvas is perfect for Line Graphs\nHTML Canvas is perfect for combining Scatter and Lines\nScatter Plots\nSource Code\nTry it Yourself »\nLine Graphs\nSource Code\nTry it Yourself »\nREMOVE ADS\nCombined\nSource Code\nTry it Yourself »",
      "examples": [
        "const xArray = [50,60,70,80,90,100,110,120,130,140,150];\nconst yArray = [7,8,8,9,9,9,10,11,14,14,15];\n\n// Plot Scatter\nctx.fillStyle = \"red\";\nfor (let i = 0; i < xArray.length-1; i++) {\nlet x = xArray[i]*400/150;\nlet y = yArray[i]*400/15;\nctx.beginPath();\nctx.ellipse(x, y, 2, 3, 0, 0, Math.PI * 2);\nctx.fill();\n}",
        "let xMax = canvas.height;\nlet slope = 1.2;\nlet intercept = 70;\n\n// Plot Scatter\nctx.moveTo(0, intercept);\nctx.lineTo(xMax, f(xMax));\nctx.strokeStyle = \"black\";\nctx.stroke();\n\n// Line Function\nfunction f(x) {\nreturn x * slope + intercept;\n}",
        "let xMax = canvas.height;\nlet yMax = canvas.width;\nlet slope = 1.2;\nlet intercept = 70;\n\nconst xArray = [50,60,70,80,90,100,110,120,130,140,150];\nconst yArray = [7,8,8,9,9,9,10,11,14,14,15];\n\n// Plot Scatter\nctx.fillStyle = \"red\";\nfor (let i = 0; i < xArray.length-1; i++) {\nlet x = xArray[i]*400/150;\nlet y = yArray[i]*400/15;\nctx.beginPath();\nctx.ellipse(x, y, 2, 3, 0, 0, Math.PI * 2);\nctx.fill();\n}\n\n// Plot Line\nctx.moveTo(0, intercept);\nctx.lineTo(xMax, f(xMax));\nctx.strokeStyle = \"black\";\nctx.stroke();\n\n// Line Function\nfunction f(x) {\nreturn x * slope + intercept;\n}"
      ]
    },
    {
      "title": "Plotly.js",
      "summary": "Plotly.js is a charting library that comes with many different chart types:\nHorizontal and Vertical Bar Charts\nPie and Donut Charts\nLine Charts\nScatter and Bubble Plots\nEquation Plots\n3D Charts\nStatistical Graphs\nSVG Maps\nand more ...\nPlotly.js is free and open-source under the MIT license. It costs nothing to install and use. You can view the source, report issues and contribute using Github.\nBar Charts\nSource Code\nTry it Yourself »\nHorizontal Bar Charts\nSource Code\nTry it Yourself »\nPie Charts\nTo display a pie instead of bars, change x and y to labels and values, and change the type to \"pie\":\nTry it Yourself »\nDonut Charts\nTo display a donut instead of a pie, add a hole:\nTry it Yourself »\nPlotting Equations\nSource Code\nTo display scatters instead, change mode to markers:\nScatter Plots\nSource Code\nTry it Yourself »\nLine Graphs\nSource Code\nTry it Yourself »\nREMOVE ADS\nBubble Plots\nBubble Plots are Scatter Plots whose markers have variable color, size, and symbols.\nIt is a type of 3-dimensional chart with only two axes (x and y) where the size of the bubble communicates the third dimention.\nSource Code\nTry it Yourself »\nLinear Graphs\nSource Code\nTry it Yourself »\nMultiple Lines\nSource Code\nTry it Yourself »",
      "examples": [
        "const xArray = [\"Italy\",\"France\",\"Spain\",\"USA\",\"Argentina\"];\nconst yArray = [55, 49, 44, 24, 15];\n\nconst data = [{\nx: xArray,\ny: yArray,\ntype: \"bar\",\norientation:\"v\",\nmarker: {color:\"rgba(0,0,255)\"}\n}];\n\nconst layout = {title:\"World Wide Wine Production\"};\n\nPlotly.newPlot(\"myPlot\", data, layout);",
        "const xArray = [55, 49, 44, 24, 15];\nconst yArray = [\"Italy\",\"France\",\"Spain\",\"USA\",\"Argentina\"];\n\nconst data = [{\nx: xArray,\ny: yArray,\ntype: \"bar\",\norientation: \"h\",\nmarker: {color:\"rgba(255,0,0,0.6)\"}\n}];\n\nconst layout = {title:\"World Wide Wine Production\"};\n\nPlotly.newPlot(\"myPlot\", data, layout);",
        "const data = [{\nlabels: xArray,\nvalues: yArray,\ntype: \"pie\"\n}];",
        "const data = [{\nlabels: xArray,\nvalues: yArray,\nhole: .4,\ntype: \"pie\"\n}];",
        "let exp = \"Math.sin(x)\";\n\n// Generate values\nconst xValues = [];\nconst yValues = [];\nfor (let x = 0; x <= 10; x += 0.1) {\nxValues.push(x);\nyValues.push(eval(exp));\n}\n\n// Display using Plotly\nconst data = [{x:xValues, y:yValues, mode:\"lines\"}];\nconst layout = {title: \"y = \" + exp};\nPlotly.newPlot(\"myPlot\", data, layout);",
        "// Display using Plotly\nconst data = [{x:xValues, y:yValues, mode:\"markers\"}];\nconst layout = {title: \"y = \" + exp};\nPlotly.newPlot(\"myPlot\", data, layout);",
        "const xArray = [50,60,70,80,90,100,110,120,130,140,150];\nconst yArray = [7,8,8,9,9,9,10,11,14,14,15];\n\n// Define Data\nconst data = [{\nx: xArray,\ny: yArray,\nmode:\"markers\",\ntype:\"scatter\"\n}];\n\n// Define Layout\nconst layout = {\nxaxis: {range: [40, 160], title: \"Square Meters\"},\nyaxis: {range: [5, 16], title: \"Price in Millions\"},\ntitle: \"House Prices vs. Size\"\n};\n\nPlotly.newPlot(\"myPlot\", data, layout);",
        "const xArray = [50,60,70,80,90,100,110,120,130,140,150];\nconst yArray = [7,8,8,9,9,9,10,11,14,14,15];\n\n// Define Data\nconst data = [{\nx: xArray,\ny: yArray,\nmode: \"lines\",\ntype: \"scatter\"\n}];\n\n// Define Layout\nconst layout = {\nxaxis: {range: [40, 160], title: \"Square Meters\"},\nyaxis: {range: [5, 16], title: \"Price in Millions\"},\ntitle: \"House Prices vs Size\"\n};\n\n// Display using Plotly\nPlotly.newPlot(\"myPlot\", data, layout);",
        "const xArray = [1,2,3,4];\nconst yArray = [10,20,30,40];\n\nconst trace1 = {\nx: xArray,\ny: yArray,\nmode: 'markers',\nmarker: {\ncolor: ['red', 'green', 'blue', 'orange'],\nsize: [20, 30, 40, 50]\n}\n};\n\nconst data = [trace1];\n\nconst layout = {\ntitle: \"Plotting Bubbles\"\n};\n\nPlotly.newPlot('myPlot', data, layout);",
        "let exp = \"x + 17\";\n\n// Generate values\nconst xValues = [];\nconst yValues = [];\nfor (let x = 0; x <= 10; x += 1) {\nyValues.push(eval(exp));\nxValues.push(x);\n}\n\n// Define Data\nconst data = [{\nx: xValues,\ny: yValues,\nmode: \"lines\"\n}];\n\n// Define Layout\nconst layout = {title: \"y = \" + exp};\n\n// Display using Plotly\nPlotly.newPlot(\"myPlot\", data, layout);",
        "let exp1 = \"x\";\nlet exp2 = \"1.5*x\";\nlet exp3 = \"1.5*x + 7\";\n\n// Generate values\nconst x1Values = [];\nconst x2Values = [];\nconst x3Values = [];\nconst y1Values = [];\nconst y2Values = [];\nconst y3Values = [];\n\nfor (let x = 0; x <= 10; x += 1) {\nx1Values.push(x);\nx2Values.push(x);\nx3Values.push(x);\ny1Values.push(eval(exp1));\ny2Values.push(eval(exp2));\ny3Values.push(eval(exp3));\n}\n\n// Define Data\nconst data = [\n{x: x1Values, y: y1Values, mode:\"lines\"},\n{x: x2Values, y: y2Values, mode:\"lines\"},\n{x: x3Values, y: y3Values, mode:\"lines\"}\n];\n\n// Define Layout\nconst layout = {title: \"[y=\" + exp1 + \"] [y=\" + exp2 + \"] [y=\" + exp3 + \"]\"};\n\n// Display using Plotly\nPlotly.newPlot(\"myPlot\", data, layout);"
      ]
    },
    {
      "title": "Chart.js",
      "summary": "Chart.js is an free JavaScript library for making HTML-based charts. It is one of the simplest visualization libraries for JavaScript, and comes with the many built-in chart types:\nScatter Plot\nLine Chart\nBar Chart\nPie Chart\nDonut Chart\nBubble Chart\nArea Chart\nRadar Chart\nMixed Chart\nHow to Use Chart.js?\n1. Add a link to the providing CDN (Content Delivery Network):\n2. Add a <canvas> to where in the HTML you want to draw the chart:\nThe canvas element must have a unique id.\nBar Charts\nSource Code\nTry it Yourself »\nColor only one bar:\nTry it Yourself »\nSame color all bars:\nTry it Yourself »\nColor Shades:\nTry it Yourself »\nHorizontal Bars\nJust change type from \"bar\" to \"horizontalBar\":\nTry it Yourself »\nPie Charts\nExample\nTry it Yourself »\nDoughnut Charts\nJust change type from \"pie\" to \"doughnut\":\nTry it Yourself »\nScatter Plots\nHouse Prices vs. Size\nSource Code\nTry it Yourself »\nREMOVE ADS\nLine Graphs\nHouse Prices vs. Size\nSource Code\nTry it Yourself »\nIf you set the borderColor to zero, you can scatter plot the line graph:\nTry it Yourself »\nMultiple Lines\nSource Code\nTry it Yourself »\nLinear Graphs\nSource Code\nTry it Yourself »\nFunction Graphs\nSame as Linear Graph. Just change the generateData parameter(s):\nTry it Yourself »",
      "examples": [
        "<script\nsrc=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js\">\n</script>",
        "<canvas id=\"myChart\" style=\"width:100%;max-width:700px\"></canvas>",
        "const myChart = new Chart(\"myChart\", {\ntype: \"bar\",\ndata: {},\noptions: {}\n});",
        "const myChart = new Chart(\"myChart\", {\ntype: \"line\",\ndata: {},\noptions: {}\n});",
        "const xValues = [\"Italy\", \"France\", \"Spain\", \"USA\", \"Argentina\"];\nconst yValues = [55, 49, 44, 24, 15];\nconst barColors = [\"red\", \"green\",\"blue\",\"orange\",\"brown\"];\n\nnew Chart(\"myChart\", {\ntype: \"bar\",\ndata: {\nlabels: xValues,\ndatasets: [{\nbackgroundColor: barColors,\ndata: yValues\n}]\n},\noptions: {...}\n});",
        "const barColors = [\"blue\"];",
        "const barColors =\"red\";",
        "const barColors = [\n\"rgba(0,0,255,1.0)\",\n\"rgba(0,0,255,0.8)\",\n\"rgba(0,0,255,0.6)\",\n\"rgba(0,0,255,0.4)\",\n\"rgba(0,0,255,0.2)\",\n];",
        "type: \"horizontalBar\",",
        "new Chart(\"myChart\", {\ntype: \"pie\",\ndata: {\nlabels: xValues,\ndatasets: [{\nbackgroundColor: barColors,\ndata: yValues\n}]\n},\noptions: {\ntitle: {\ndisplay: true,\ntext: \"World Wide Wine Production\"\n}\n}\n});",
        "type: \"doughnut\";",
        "const xyValues = [\n{x:50, y:7},\n{x:60, y:8},\n{x:70, y:8},\n{x:80, y:9},\n{x:90, y:9},\n{x:100, y:9},\n{x:110, y:10},\n{x:120, y:11},\n{x:130, y:14},\n{x:140, y:14},\n{x:150, y:15}\n];\n\nnew Chart(\"myChart\", {\ntype: \"scatter\",\ndata: {\ndatasets: [{\npointRadius: 4,\npointBackgroundColor: \"rgba(0,0,255,1)\",\ndata: xyValues\n}]\n},\noptions:{...}\n});",
        "const xValues = [50,60,70,80,90,100,110,120,130,140,150];\nconst yValues = [7,8,8,9,9,9,10,11,14,14,15];\n\nnew Chart(\"myChart\", {\ntype: \"line\",\ndata: {\nlabels: xValues,\ndatasets: [{\nbackgroundColor:\"rgba(0,0,255,1.0)\",\nborderColor: \"rgba(0,0,255,0.1)\",\ndata: yValues\n}]\n},\noptions:{...}\n});",
        "borderColor: \"rgba(0,0,0,0)\",",
        "const xValues = [100,200,300,400,500,600,700,800,900,1000];\n\nnew Chart(\"myChart\", {\ntype: \"line\",\ndata: {\nlabels: xValues,\ndatasets: [{\ndata: [860,1140,1060,1060,1070,1110,1330,2210,7830,2478],\nborderColor: \"red\",\nfill: false\n},{\ndata: [1600,1700,1700,1900,2000,2700,4000,5000,6000,7000],\nborderColor: \"green\",\nfill: false\n},{\ndata: [300,700,2000,5000,6000,4000,2000,1000,200,100],\nborderColor: \"blue\",\nfill: false\n}]\n},\noptions: {\nlegend: {display: false}\n}\n});",
        "const xValues = [];\nconst yValues = [];\ngenerateData(\"x * 2 + 7\", 0, 10, 0.5);\n\nnew Chart(\"myChart\", {\ntype: \"line\",\ndata: {\nlabels: xValues,\ndatasets: [{\nfill: false,\npointRadius: 1,\nborderColor: \"rgba(255,0,0,0.5)\",\ndata: yValues\n}]\n},\noptions: {...}\n});\n\nfunction generateData(value, i1, i2, step = 1) {\nfor (let x = i1; x <= i2; x += step) {\nyValues.push(eval(value));\nxValues.push(x);\n}\n}",
        "generateData(\"Math.sin(x)\", 0, 10, 0.5);"
      ]
    },
    {
      "title": "Google Chart",
      "summary": "From simple line charts to complex hierarchical tree maps, the Google Chart gallery provides a large number of ready-to-use chart types:\nScatter Chart\nLine Chart\nBar / Column Chart\nArea Chart\nPie Chart\nDonut Chart\nOrg Chart\nMap / Geo Chart\nHow to Use Google Chart?\n1. Add a <div> element (with a unique id) in the HTML where you want to display the chart:\n2. Add a link to the charts loader:\n3. Load the Graph API, and add the function to run when the API is loaded:\nBar Charts\nSource Code\nTry it Yourself »\nPie Charts\nTo convert a Bar Chart to a Pie chart, just replace:\n\ngoogle.visualization.BarChart\n\nwith:\n\ngoogle.visualization.PieChart\nTry it Yourself »\n3D Pie\nTo display the Pie in 3D, just add is3D: true to the options:\nTry it Yourself »\nLine Graph\nSource Code\nTry it Yourself »\nREMOVE ADS\nScatter Plots\nTo scatter plot the same data, change google.visualization to ScatterChart:\nTry it Yourself »",
      "examples": [
        "<div id=\"myChart\" style=\"max-width:700px; height:400px\"></div>",
        "<script src=\"https://www.gstatic.com/charts/loader.js\"></script>",
        "<script>\ngoogle.charts.load('current',{packages:['corechart']});\ngoogle.charts.setOnLoadCallback(drawChart);\n\n// Your Function\nfunction drawChart() {\n...\n}\n</script>",
        "function drawChart() {\n\n// Set Data\nconst data = google.visualization.arrayToDataTable([\n['Contry', 'Mhl'],\n['Italy', 55],\n['France', 49],\n['Spain', 44],\n['USA', 24],\n['Argentina', 15]\n]);\n\n// Set Options\nconst options = {\ntitle: 'World Wide Wine Production'\n};\n\n// Draw\nconst chart = new google.visualization.BarChart(document.getElementById('myChart'));\nchart.draw(data, options);\n\n}",
        "const chart = new google.visualization.PieChart(document.getElementById('myChart'));",
        "const options = {\ntitle: 'World Wide Wine Production',\nis3D: true\n};",
        "function drawChart() {\n// Set Data\nconst data = google.visualization.arrayToDataTable([\n['Price', 'Size'],\n[50,7],[60,8],[70,8],[80,9],[90,9],[100,9],\n[110,10],[120,11],[130,14],[140,14],[150,15]\n]);\n// Set Options\nconst options = {\ntitle: 'House Prices vs Size',\nhAxis: {title: 'Square Meters'},\nvAxis: {title: 'Price in Millions'},\nlegend: 'none'\n};\n// Draw Chart\nconst chart = new google.visualization.LineChart(document.getElementById('myChart'));\nchart.draw(data, options);\n}",
        "const chart = new google.visualization.ScatterChart(document.getElementById('myChart'));"
      ]
    },
    {
      "title": "D3.js",
      "summary": "D3.js is a JavaScript library for manipulating HTML data.\nD3.js is easy to use.\nHow to Use D3.js?\nTo use D3.js in your web page, add a link to the library:\nThis script selects the body element and appends a paragraph with the text \"Hello World!\":\nTry it Yourself »\nScatter Plot\nExample\nTry it Yourself »",
      "examples": [
        "<script src=\"//d3js.org/d3.v3.min.js\"></script>",
        "d3.select(\"body\").append(\"p\").text(\"Hello World!\");",
        "// Set Dimensions\nconst xSize = 500;\nconst ySize = 500;\nconst margin = 40;\nconst xMax = xSize - margin*2;\nconst yMax = ySize - margin*2;\n\n// Create Random Points\nconst numPoints = 100;\nconst data = [];\nfor (let i = 0; i < numPoints; i++) {\ndata.push([Math.random() * xMax, Math.random() * yMax]);\n}\n\n// Append SVG Object to the Page\nconst svg = d3.select(\"#myPlot\")\n.append(\"svg\")\n.append(\"g\")\n.attr(\"transform\",\"translate(\" + margin + \",\" + margin + \")\");\n\n// X Axis\nconst x = d3.scaleLinear()\n.domain([0, 500])\n.range([0, xMax]);\n\nsvg.append(\"g\")\n.attr(\"transform\", \"translate(0,\" + yMax + \")\")\n.call(d3.axisBottom(x));\n\n// Y Axis\nconst y = d3.scaleLinear()\n.domain([0, 500])\n.range([ yMax, 0]);\n\nsvg.append(\"g\")\n.call(d3.axisLeft(y));\n\n// Dots\nsvg.append('g')\n.selectAll(\"dot\")\n.data(data).enter()\n.append(\"circle\")\n.attr(\"cx\", function (d) { return d[0] } )\n.attr(\"cy\", function (d) { return d[1] } )\n.attr(\"r\", 3)\n.style(\"fill\", \"Red\");"
      ]
    },
    {
      "title": "Google Maps Tutorial",
      "summary": "Google Maps API\nThis tutorial is about the Google Maps API (Application Programming Interface).\nAn API is a set of methods and tools that can be used for building software applications.\nGoogle Maps in HTML\nThis example creates a Google Map in HTML:\nExample",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<body>\n\n<h1>My First Google Map</h1>\n\n<div id=\"googleMap\" style=\"width:100%;height:400px;\"></div>\n\n<script>\nfunction myMap() {\nvar mapProp= {\ncenter:new google.maps.LatLng(51.508742,-0.120850),\nzoom:5,\n};\nvar map = new google.maps.Map(document.getElementById(\"googleMap\"),mapProp);\n}\n</script>\n\n<script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_KEY&callback=myMap\"></script>\n\n</body>\n</html>"
      ]
    },
    {
      "title": "Google Maps Basic",
      "summary": "Create a Basic Google Map\nThis example creates a Google Map centered in London, England:\nExample\nThe rest of this page describes the example above, step by step.\nThe Map Container and Size\nThe map needs an HTML element to hold the map:\nAlso set the size of the map.\nREMOVE ADS\nCreate a Function to Set The Map Properties\nThe mapProp variable defines the properties for the map.\nThe center property specifies where to center the map (using latitude and longitude coordinates).\nThe zoom property specifies the zoom level for the map (try to experiment with the zoom level).\nThe line: var map=new google.maps.Map(document.getElementById(\"googleMap\"), mapProp); creates a new map inside the <div> element with id=\"googleMap\", using the parameters that are passed (mapProp).\nMultiple Maps\nThe example below defines four maps with different map types:\nExample\nFree Google API Key\nGoogle allows a website to call any Google API for free, thousands of times a day.\nGo to https://developers.google.com/maps/documentation/javascript/get-api-key to learn how to get an API key.\nGoogle Maps expects to find the API key in the key parameter when loading an API:",
      "examples": [
        "<!DOCTYPE html>\n<html>\n<body>\n\n<h1>My First Google Map</h1>\n\n<div id=\"googleMap\" style=\"width:100%;height:400px;\"></div>\n\n<script>\nfunction myMap() {\nvar mapProp= {\ncenter:new google.maps.LatLng(51.508742,-0.120850),\nzoom:5,\n};\nvar map = new google.maps.Map(document.getElementById(\"googleMap\"),mapProp);\n}\n</script>\n\n<script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_KEY&callback=myMap\"></script>\n\n</body>\n</html>",
        "<div id=\"googleMap\" style=\"width:100%;height:400px\"></div>",
        "function myMap() {\nvar mapProp = {\ncenter:new google.maps.LatLng(51.508742,-0.120850),\nzoom:5,\n};\nvar map = new google.maps.Map(document.getElementById(\"googleMap\"),mapProp);\n}",
        "var map1 = new google.maps.Map(document.getElementById(\"googleMap1\"), mapOptions1);\nvar map2 = new google.maps.Map(document.getElementById(\"googleMap2\"), mapOptions2);\nvar map3 = new google.maps.Map(document.getElementById(\"googleMap3\"), mapOptions3);\nvar map4 = new google.maps.Map(document.getElementById(\"googleMap4\"), mapOptions4);",
        "<script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_KEY&callback=myMap\"></script>"
      ]
    },
    {
      "title": "Google Maps Overlays",
      "summary": "Google Maps - Overlays\nOverlays are objects on the map that are bound to latitude/longitude coordinates.\nGoogle Maps has several types of overlays:\nMarker - Single locations on a map. Markers can also display custom icon images\nPolyline - Series of straight lines on a map\nPolygon - Series of straight lines on a map, and the shape is \"closed\"\nCircle and Rectangle\nInfo Windows - Displays content within a popup balloon on top of a map\nCustom overlays\nGoogle Maps - Add a Marker\nThe Marker constructor creates a marker. Note that the position property must be set for the marker to display.\nAdd the marker to the map by using the setMap() method:\nExample\nREMOVE ADS\nGoogle Maps - Animate the Marker\nThe example below shows how to animate the marker with the animation property:\nExample\nGoogle Maps - Icon Instead of Marker\nThe example below specifies an image (icon) to use instead of the default marker:\nExample\nGoogle Maps - Polyline\nA Polyline is a line that is drawn through a series of coordinates in an ordered sequence.\nA polyline supports the following properties:\npath - specifies several latitude/longitude coordinates for the line\nstrokeColor - specifies a hexadecimal color for the line (format: \"#FFFFFF\")\nstrokeOpacity - specifies the opacity of the line (a value between 0.0 and 1.0)\nstrokeWeight - specifies the weight of the line's stroke in pixels\neditable - defines whether the line is editable by users (true/false)\nExample\nGoogle Maps - Polygon\nA Polygon is similar to a Polyline in that it consists of a series of coordinates in an ordered sequence. However, polygons are designed to define regions within a closed loop.\nPolygons are made of straight lines, and the shape is \"closed\" (all the lines connect up).\nA polygon supports the following properties:\npath - specifies several LatLng coordinates for the line (first and last coordinate are equal)\nstrokeColor - specifies a hexadecimal color for the line (format: \"#FFFFFF\")\nstrokeOpacity - specifies the opacity of the line (a value between 0.0 and 1.0)\nstrokeWeight - specifies the weight of the line's stroke in pixels\nfillColor - specifies a hexadecimal color for the area within the enclosed region (format: \"#FFFFFF\")\nfillOpacity - specifies the opacity of the fill color (a value between 0.0 and 1.0)\neditable - defines whether the line is editable by users (true/false)\nExample\nGoogle Maps - Circle\nA circle supports the following properties:\ncenter - specifies the google.maps.LatLng of the center of the circle\nradius - specifies the radius of the circle, in meters\nstrokeColor - specifies a hexadecimal color for the line around the circle (format: \"#FFFFFF\")\nstrokeOpacity - specifies the opacity of the stroke color (a value between 0.0 and 1.0)\nstrokeWeight - specifies the weight of the line's stroke in pixels\nfillColor - specifies a hexadecimal color for the area within the circle (format: \"#FFFFFF\")\nfillOpacity - specifies the opacity of the fill color (a value between 0.0 and 1.0)\neditable - defines whether the circle is editable by users (true/false)\nExample\nGoogle Maps - InfoWindow\nShow an InfoWindow with some text content for a marker:\nExample",
      "examples": [
        "var marker = new google.maps.Marker({position: myCenter});\n\nmarker.setMap(map);",
        "var marker = new google.maps.Marker({\nposition:myCenter,\nanimation:google.maps.Animation.BOUNCE\n});\n\nmarker.setMap(map);",
        "var marker = new google.maps.Marker({\nposition:myCenter,\nicon:'pinkball.png'\n});\n\nmarker.setMap(map);",
        "var myTrip = [stavanger,amsterdam,london];\nvar flightPath = new google.maps.Polyline({\npath:myTrip,\nstrokeColor:\"#0000FF\",\nstrokeOpacity:0.8,\nstrokeWeight:2\n});",
        "var myTrip = [stavanger,amsterdam,london,stavanger];\nvar flightPath = new google.maps.Polygon({\npath:myTrip,\nstrokeColor:\"#0000FF\",\nstrokeOpacity:0.8,\nstrokeWeight:2,\nfillColor:\"#0000FF\",\nfillOpacity:0.4\n});",
        "var myCity = new google.maps.Circle({\ncenter:amsterdam,\nradius:20000,\nstrokeColor:\"#0000FF\",\nstrokeOpacity:0.8,\nstrokeWeight:2,\nfillColor:\"#0000FF\",\nfillOpacity:0.4\n});",
        "var infowindow = new google.maps.InfoWindow({\ncontent:\"Hello World!\"\n});\n\ninfowindow.open(map,marker);"
      ]
    },
    {
      "title": "Google Maps Events",
      "summary": "Click The Marker to Zoom\nWe still use the map from the previous page: a map centered on London, England.\nNow we want to zoom when a user is clicking on the marker (We attach an event handler to a marker that zooms the map when clicked).\nHere is the added code:\nExample\nWe register for event notifications using the addListener() event handler. That method takes an object, an event to listen for, and a function to call when the specified event occurs.\nREMOVE ADS\nPan Back to Marker\nHere, we save the zoom changes and pan the map back after 3 seconds:\nExample\nOpen an InfoWindow When Clicking on The Marker\nClick on the marker to show an infowindow with some text:\nExample\nSet Markers and Open InfoWindow for Each Marker\nRun a function when the user clicks on the map.\nThe placeMarker() function places a marker where the user has clicked, and shows an infowindow with the latitudes and longitudes of the marker:\nExample",
      "examples": [
        "// Zoom to 9 when clicking on marker\ngoogle.maps.event.addListener(marker,'click',function() {\nmap.setZoom(9);\nmap.setCenter(marker.getPosition());\n});",
        "google.maps.event.addListener(marker,'click',function() {\nvar pos = map.getZoom();\nmap.setZoom(9);\nmap.setCenter(marker.getPosition());\nwindow.setTimeout(function() {map.setZoom(pos);},3000);\n});",
        "var infowindow = new google.maps.InfoWindow({\ncontent:\"Hello World!\"\n});\n\ngoogle.maps.event.addListener(marker, 'click', function() {\ninfowindow.open(map,marker);\n});",
        "google.maps.event.addListener(map, 'click', function(event) {\nplaceMarker(map, event.latLng);\n});\n\nfunction placeMarker(map, location) {\nvar marker = new google.maps.Marker({\nposition: location,\nmap: map\n});\nvar infowindow = new google.maps.InfoWindow({\ncontent: 'Latitude: ' + location.lat() +\n'<br>Longitude: ' + location.lng()\n});\ninfowindow.open(map,marker);\n}"
      ]
    },
    {
      "title": "Google Maps Controls",
      "summary": "Google Maps - The Default Controls\nWhen showing a standard Google map, it comes with the default control set:\nZoom - displays a slider or \"+/-\" buttons to control the zoom level of the map\nPan - displays a pan control for panning the map\nMapType - lets the user toggle between map types (roadmap and satellite)\nStreet View - displays a Pegman icon which can be dragged to the map to enable Street View\nGoogle Maps - More Controls\nIn addition to the default controls, Google Maps also has:\nScale - displays a map scale element\nRotate - displays a small circular icon which allows you to rotate maps\nOverview Map - displays a thumbnail overview map reflecting the current map viewport within a wider area\nYou can specify which controls to show when creating the map (inside MapOptions) or by calling setOptions() to change the map's options.\nGoogle Maps - Disabling The Default Controls\nYou may instead wish to turn off the default controls.\nTo do so, set the Map's disableDefaultUI property (within the Map options object) to true:\nExample\nREMOVE ADS\nGoogle Maps - Turn On All Controls\nSome controls appear on the map by default; while others will not appear unless you set them.\nAdding or removing controls from the map is specified in the Map options object.\nSet the control to true to make it visible - Set the control to false to hide it.\nThe following example turns \"on\" all controls:\nExample\nGoogle Maps - Modifying Controls\nSeveral of the map controls are configurable.\nThe controls can be modified by specifying control options fields.\nFor example, options for modifying a Zoom control are specified in the zoomControlOptions field. The zoomControlOptions field may contain:\ngoogle.maps.ZoomControlStyle.SMALL - displays a mini-zoom control (only + and - buttons)\ngoogle.maps.ZoomControlStyle.LARGE - displays the standard zoom slider control\ngoogle.maps.ZoomControlStyle.DEFAULT - picks the best zoom control based on device and map size\nExample\nNote: If you modify a control, always enable the control first (set it to true).\nAnother configurable control is the MapType control.\nOptions for modifying a control are specified in the mapTypeControlOptions field. The mapTypeControlOptions field may contain::\ngoogle.maps.MapTypeControlStyle.HORIZONTAL_BAR - display one button for each map type\ngoogle.maps.MapTypeControlStyle.DROPDOWN_MENU - select map type via a dropdown menu\ngoogle.maps.MapTypeControlStyle.DEFAULT - displays the \"default\" behavior (depends on screen size)\nExample\nYou can also position a control, with the ControlPosition property:\nExample",
      "examples": [
        "var mapOptions {disableDefaultUI: true}",
        "var mapOptions {\npanControl: true,\nzoomControl: true,\nmapTypeControl: true,\nscaleControl: true,\nstreetViewControl: true,\noverviewMapControl: true,\nrotateControl: true\n}",
        "zoomControl: true,\nzoomControlOptions: {\nstyle: google.maps.ZoomControlStyle.SMALL\n}",
        "mapTypeControl: true,\nmapTypeControlOptions: {\nstyle: google.maps.MapTypeControlStyle.DROPDOWN_MENU\n}",
        "mapTypeControl: true,\nmapTypeControlOptions: {\nstyle: google.maps.MapTypeControlStyle.DROPDOWN_MENU,\nposition: google.maps.ControlPosition.TOP_CENTER\n}"
      ]
    },
    {
      "title": "Google Maps Types",
      "summary": "Google Maps - Basic Map Types\nThe following map types are supported in Google Maps API:\nROADMAP (normal, default 2D map)\nSATELLITE (photographic map)\nHYBRID (photographic map + roads and city names)\nTERRAIN (map with mountains, rivers, etc.)\nThe map type is specified either within the Map properties object, with the mapTypeId property:\nOr by calling the map's setMapTypeId() method:\nREMOVE ADS\nGoogle Maps - 45° Perspective View\nThe map types SATELLITE and HYBRID support a 45° perspective imagery view for certain locations (only at high zoom levels).\nIf you zoom into a location with 45° imagery view, the map will automatically alter the perspective view. In addition, the map will add:\nA compass wheel around the Pan control, allowing you to rotate the image\nA Rotate control between the Pan and Zoom controls, allowing you to rotate the image 90°\nA toggle control for displaying the 45° perspective view, under the Satellite control/label\nNote: Zooming out from a map with 45° imagery will revert each of these changes, and the original map is displayed.\nThe following example shows a 45° perspective view of Palazzo Ducale in Venice, Italy:\nExample\nGoogle Maps - Disable 45° Perspective View - setTilt(0)\nYou can disable 45° perspective view by calling setTilt(0) on the Map object:\nExample\nTip: To enable 45° perspective view at a later point, call setTilt(45).",
      "examples": [
        "var mapOptions = {\ncenter:new google.maps.LatLng(51.508742,-0.120850),\nzoom:7,\nmapTypeId: google.maps.MapTypeId.HYBRID\n};",
        "map.setMapTypeId(google.maps.MapTypeId.HYBRID);",
        "var mapOptions = {\ncenter:myCenter,\nzoom:18,\nmapTypeId:google.maps.MapTypeId.HYBRID\n};",
        "map.setTilt(0);"
      ]
    },
    {
      "title": "Google Maps Reference",
      "summary": "The Map() Constructor\nExample\nCreate a Google Map:\nDefinition and Usage\nThe Map() constructor creates a new map inside a specified HTML element (typically a <div> element).\nSyntax\nParameter Values\nMethods of Map()\nREMOVE ADS\nProperties of Map()\nEvents of Map()\nOverlays\nEvents\nControls",
      "examples": [
        "var map = new google.maps.Map(mapCanvas, mapOptions);",
        "new google.maps.Map(HTMLElement,MapOptions)"
      ]
    },
    {
      "title": "HTML Game Example",
      "summary": "Learn how to make games, using nothing but HTML and JavaScript.\nPush the buttons to move the red square:\nTry it Yourself Examples\nWith our online editor, you can edit the code, and click on a button to view the result.\nExample",
      "examples": [
        "function startGame() {\nmyGamePiece = new component(30, 30, \"red\", 10, 120);\nmyGamePiece.gravity = 0.05;\nmyScore = new component(\"30px\", \"Consolas\", \"black\", 280, 40, \"text\");\nmyGameArea.start();\n}\n\nvar myGameArea = {\ncanvas : document.createElement(\"canvas\"),\nstart : function() {\nthis.canvas.width = 480;\nthis.canvas.height = 270;\nthis.context = this.canvas.getContext(\"2d\");\ndocument.body.insertBefore(this.canvas, document.body.childNodes[0]);\nthis.frameNo = 0;\n},\nclear : function() {\nthis.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n}\n}"
      ]
    },
    {
      "title": "Game Canvas",
      "summary": "The HTML <canvas> element is displayed as a rectangular object on a web page:\nHTML Canvas\nThe <canvas> element is perfect for making games in HTML.\nThe <canvas> element offers all the functionality you need for making games.\nUse JavaScript to draw, write, insert images, and more, onto the <canvas>.\n.getContext(\"2d\")\nThe <canvas> element has a built-in object, called the getContext(\"2d\") object, with methods and properties for drawing.\nYou can learn more about the <canvas> element, and the getContext(\"2d\") object, in our Canvas Tutorial.\nGet Started\nTo make a game, start by creating a gaming area, and make it ready for drawing:\nExample\nThe object myGameArea will have more properties and methods later in this tutorial.\nThe function startGame() invokes the method start() of the myGameArea object.\nThe start() method creates a <canvas> element and inserts it as the first childnode of the <body> element.",
      "examples": [
        "function startGame() {\nmyGameArea.start();\n}\n\nvar myGameArea = {\ncanvas : document.createElement(\"canvas\"),\nstart : function() {\nthis.canvas.width = 480;\nthis.canvas.height = 270;\nthis.context = this.canvas.getContext(\"2d\");\ndocument.body.insertBefore(this.canvas, document.body.childNodes[0]);\n}\n}",
        "<canvas>",
        "getContext(\"2d\")",
        "myGameArea",
        "startGame()",
        "start()",
        "<body>"
      ]
    },
    {
      "title": "Game Components",
      "summary": "Add a red square onto the game area:\nAdd a Component\nMake a component constructor, which lets you add components onto the gamearea.\nThe object constructor is called component, and we make our first component, called myGamePiece:\nExample\nTry it Yourself »\nThe components have properties and methods to control their appearances and movements.\nREMOVE ADS\nFrames\nTo make the game ready for action, we will update the display 50 times per second, which is much like frames in a movie.\nFirst, create a new function called updateGameArea().\nIn the myGameArea object, add an interval which will run the updateGameArea() function every 20th millisecond (50 times per second). Also add a function called clear(), that clears the entire canvas.\nIn the component constructor, add a function called update(), to handle the drawing of the component.\nThe updateGameArea() function calls the clear() and the update() method.\nThe result is that the component is drawn and cleared 50 times per second:\nExample\nMake it Move\nTo prove that the red square is being drawn 50 times per second, we will change the x position (horizontal) by one pixel every time we update the game area:\nExample\nWhy Clear The Game Area?\nIt might seem unnecessary to clear the game area at every update. However, if we leave out the clear() method, all movements of the component will leave a trail of where it was positioned in the last frame:\nExample\nChange the Size\nYou can control the width and height of the component:\nExample\nCreate a 10x140 pixels rectangle:\nChange the Color\nYou can control the color of the component:\nExample\nYou can also use other colorvalues like hex, rgb, or rgba:\nExample\nChange the Position\nWe use x- and y-coordinates to position components onto the game area.\nThe upper-left corner of the canvas has the coordinates (0,0)\nMouse over the game area below to see its x and y coordinates:\nYou can position the components wherever you like on the game area:\nExample\nMany Components\nYou can put as many components as you like on the game area:\nExample\nMoving Components\nMake all three components move in different directions:\nExample",
      "examples": [
        "var myGamePiece;\n\nfunction startGame() {\nmyGameArea.start();\nmyGamePiece = new component(30, 30, \"red\", 10, 120);\n}\n\nfunction component(width, height, color, x, y) {\nthis.width = width;\nthis.height = height;\nthis.x = x;\nthis.y = y;\nctx = myGameArea.context;\nctx.fillStyle = color;\nctx.fillRect(this.x, this.y, this.width, this.height);\n}",
        "var myGameArea = {\ncanvas : document.createElement(\"canvas\"),\nstart : function() {\nthis.canvas.width = 480;\nthis.canvas.height = 270;\nthis.context = this.canvas.getContext(\"2d\");\ndocument.body.insertBefore(this.canvas, document.body.childNodes[0]);\nthis.interval = setInterval(updateGameArea, 20);\n},\nclear : function() {\nthis.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n}\n}\n\nfunction component(width, height, color, x, y) {\nthis.width = width;\nthis.height = height;\nthis.x = x;\nthis.y = y;\nthis.update = function(){\nctx = myGameArea.context;\nctx.fillStyle = color;\nctx.fillRect(this.x, this.y, this.width, this.height);\n}\n}\n\nfunction updateGameArea() {\nmyGameArea.clear();\nmyGamePiece.update();\n}",
        "function updateGameArea() {\nmyGameArea.clear();\nmyGamePiece.x += 1;\nmyGamePiece.update();\n}",
        "function updateGameArea() {\n// myGameArea.clear();\nmyGamePiece.x += 1;\nmyGamePiece.update();\n}",
        "function startGame() {\nmyGameArea.start();\nmyGamePiece = new component(140, 10, \"red\", 10, 120);\n}",
        "function startGame() {\nmyGameArea.start();\nmyGamePiece = new component(30, 30, \"blue\", 10, 120);\n}",
        "function startGame() {\nmyGameArea.start();\nmyGamePiece = new component(30, 30, \"rgba(0, 0, 255, 0.5)\", 10, 120);\n}",
        "function startGame() {\nmyGameArea.start();\nmyGamePiece = new component(30, 30, \"red\", 2, 2);\n}",
        "var redGamePiece, blueGamePiece, yellowGamePiece;\n\nfunction startGame() {\nredGamePiece = new component(75, 75, \"red\", 10, 10);\nyellowGamePiece = new component(75, 75, \"yellow\", 50, 60);\nblueGamePiece = new component(75, 75, \"blue\", 10, 110);\nmyGameArea.start();\n}\n\nfunction updateGameArea() {\nmyGameArea.clear();\nredGamePiece.update();\nyellowGamePiece.update();\nblueGamePiece.update();\n}",
        "function updateGameArea() {\nmyGameArea.clear();\nredGamePiece.x += 1;\nyellowGamePiece.x += 1;\nyellowGamePiece.y += 1;\nblueGamePiece.x += 1;\nblueGamePiece.y -= 1;\nredGamePiece.update();\nyellowGamePiece.update();\nblueGamePiece.update();\n}",
        "component",
        "myGamePiece",
        "updateGameArea()",
        "myGameArea",
        "clear()",
        "update()"
      ]
    },
    {
      "title": "Game Controllers",
      "summary": "Push the buttons to move the red square:\nGet in Control\nNow we want to control the red square.\nAdd four buttons, up, down, left, and right.\nWrite a function for each button to move the component in the selected direction.\nMake two new properties in the component constructor, and call them speedX and speedY. These properties are being used as speed indicators.\nAdd a function in the component constructor, called newPos(), which uses the speedX and speedY properties to change the component's position.\nThe newpos function is called from the updateGameArea function before drawing the component:\nExample\nREMOVE ADS\nStop Moving\nIf you want, you can make the red square stop when you release a button.\nAdd a function that will set the speed indicators to 0.\nTo deal with both normal screens and touch screens, we will add code for both devices:\nExample\nKeyboard as Controller\nWe can also control the red square by using the arrow keys on the keyboard.\nCreate a method that checks if a key is pressed, and set the key property of the myGameArea object to the key code. When the key is released, set the key property to false:\nExample\nThen we can move the red square if one of the arrow keys are pressed:\nExample\nMultiple Keys Pressed\nWhat if more than one key is pressed at the same time?\nIn the example above, the component can only move horizontally or vertically. Now we want the component to also move diagonally.\nCreate a keys array for the myGameArea object, and insert one element for each key that is pressed, and give it the value true , the value remains true untill the key is no longer pressed, the value becomes false in the keyup event listener function:\nExample\nUsing The Mouse Cursor as a Controller\nIf you want to control the red square by using the mouse cursor, add a method in myGameArea object that updates the x and y coordinates of the mouse cursor:.\nExample\nThen we can move the red square using the mouse cursor:\nExample\nTouch The Screen to Control The Game\nWe can also control the red square on a touch screen.\nAdd a method in the myGameArea object that uses the x and y coordinates of where the screen is touched:\nExample\nThen we can move the red square if the user touches the screen, by using the same code as we did for the mouse cursor:\nExample\nControllers on The Canvas\nWe can also draw our own buttons on the canvas, and use them as controllers:\nExample\nAdd a new function that figures out if a component, in this case a button, is clicked.\nStart by adding event listeners to check if a mouse button is clicked (mousedown and mouseup). To deal with touch screens, also add event listeners to check if the screen is clicked on (touchstart and touchend):\nExample\nNow the myGameArea object has properties that tells us the x- and y-coordinates of a click. We use these properties to check if the click was performed on one of our blue buttons.\nThe new method is called clicked, it is a method of the component constructor, and it checks if the component is being clicked.\nIn the updateGameArea function, we take the neccessarry actions if one of the blue buttons is clicked:\nExample",
      "examples": [
        "<script>\nfunction component(width, height, color, x, y) {\nthis.width = width;\nthis.height = height;\nthis.speedX = 0;\nthis.speedY = 0;\nthis.x = x;\nthis.y = y;\nthis.update = function() {\nctx = myGameArea.context;\nctx.fillStyle = color;\nctx.fillRect(this.x, this.y, this.width, this.height);\n}\nthis.newPos = function() {\nthis.x += this.speedX;\nthis.y += this.speedY;\n}\n}\n\nfunction updateGameArea() {\nmyGameArea.clear();\nmyGamePiece.newPos();\nmyGamePiece.update();\n}\n\nfunction moveup() {\nmyGamePiece.speedY -= 1;\n}\n\nfunction movedown() {\nmyGamePiece.speedY += 1;\n}\n\nfunction moveleft() {\nmyGamePiece.speedX -= 1;\n}\n\nfunction moveright() {\nmyGamePiece.speedX += 1;\n}\n\n</script>\n\n<button onclick=\"moveup()\">UP</button>\n<button onclick=\"movedown()\">DOWN</button>\n<button onclick=\"moveleft()\">LEFT</button>\n<button onclick=\"moveright()\">RIGHT</button>",
        "function stopMove() {\nmyGamePiece.speedX = 0;\nmyGamePiece.speedY = 0;\n}\n\n</script>\n\n<button onmousedown=\"moveup()\" onmouseup=\"stopMove()\" ontouchstart=\"moveup()\">UP</button>\n<button onmousedown=\"movedown()\" onmouseup=\"stopMove()\" ontouchstart=\"movedown()\">DOWN</button>\n<button onmousedown=\"moveleft()\" onmouseup=\"stopMove()\" ontouchstart=\"moveleft()\">LEFT</button>\n<button onmousedown=\"moveright()\" onmouseup=\"stopMove()\" ontouchstart=\"moveright()\">RIGHT</button>",
        "var myGameArea = {\ncanvas : document.createElement(\"canvas\"),\nstart : function() {\nthis.canvas.width = 480;\nthis.canvas.height = 270;\nthis.context = this.canvas.getContext(\"2d\");\ndocument.body.insertBefore(this.canvas, document.body.childNodes[0]);\nthis.interval = setInterval(updateGameArea, 20);\nwindow.addEventListener('keydown', function (e) {\nmyGameArea.key = e.keyCode;\n})\nwindow.addEventListener('keyup', function (e) {\nmyGameArea.key = false;\n})\n},\nclear : function(){\nthis.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n}\n}",
        "function updateGameArea() {\nmyGameArea.clear();\nmyGamePiece.speedX = 0;\nmyGamePiece.speedY = 0;\nif (myGameArea.key && myGameArea.key == 37) {myGamePiece.speedX = -1; }\nif (myGameArea.key && myGameArea.key == 39) {myGamePiece.speedX = 1; }\nif (myGameArea.key && myGameArea.key == 38) {myGamePiece.speedY = -1; }\nif (myGameArea.key && myGameArea.key == 40) {myGamePiece.speedY = 1; }\nmyGamePiece.newPos();\nmyGamePiece.update();\n}",
        "var myGameArea = {\ncanvas : document.createElement(\"canvas\"),\nstart : function() {\nthis.canvas.width = 480;\nthis.canvas.height = 270;\nthis.context = this.canvas.getContext(\"2d\");\ndocument.body.insertBefore(this.canvas, document.body.childNodes[0]);\nthis.interval = setInterval(updateGameArea, 20);\nwindow.addEventListener('keydown', function (e) {\nmyGameArea.keys = (myGameArea.keys || []);\nmyGameArea.keys[e.keyCode] = true;\n})\nwindow.addEventListener('keyup', function (e) {\nmyGameArea.keys[e.keyCode] = false;\n})\n},\nclear : function(){\nthis.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n}\n}\n\nfunction updateGameArea() {\nmyGameArea.clear();\nmyGamePiece.speedX = 0;\nmyGamePiece.speedY = 0;\nif (myGameArea.keys && myGameArea.keys[37]) {myGamePiece.speedX = -1; }\nif (myGameArea.keys && myGameArea.keys[39]) {myGamePiece.speedX = 1; }\nif (myGameArea.keys && myGameArea.keys[38]) {myGamePiece.speedY = -1; }\nif (myGameArea.keys && myGameArea.keys[40]) {myGamePiece.speedY = 1; }\nmyGamePiece.newPos();\nmyGamePiece.update();\n}",
        "var myGameArea = {\ncanvas : document.createElement(\"canvas\"),\nstart : function() {\nthis.canvas.width = 480;\nthis.canvas.height = 270;\nthis.canvas.style.cursor = \"none\"; //hide the original cursor\nthis.context = this.canvas.getContext(\"2d\");\ndocument.body.insertBefore(this.canvas, document.body.childNodes[0]);\nthis.interval = setInterval(updateGameArea, 20);\nwindow.addEventListener('mousemove', function (e) {\nmyGameArea.x = e.pageX;\nmyGameArea.y = e.pageY;\n})\n},\nclear : function(){\nthis.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n}\n}",
        "function updateGameArea() {\nmyGameArea.clear();\nif (myGameArea.x && myGameArea.y) {\nmyGamePiece.x = myGameArea.x;\nmyGamePiece.y = myGameArea.y;\n}\nmyGamePiece.update();\n}",
        "var myGameArea = {\ncanvas : document.createElement(\"canvas\"),\nstart : function() {\nthis.canvas.width = 480;\nthis.canvas.height = 270;\nthis.context = this.canvas.getContext(\"2d\");\ndocument.body.insertBefore(this.canvas, document.body.childNodes[0]);\nthis.interval = setInterval(updateGameArea, 20);\nwindow.addEventListener('touchmove', function (e) {\nmyGameArea.x = e.touches[0].screenX;\nmyGameArea.y = e.touches[0].screenY;\n})\n},\nclear : function(){\nthis.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n}\n}",
        "function startGame() {\nmyGamePiece = new component(30, 30, \"red\", 10, 120);\nmyUpBtn = new component(30, 30, \"blue\", 50, 10);\nmyDownBtn = new component(30, 30, \"blue\", 50, 70);\nmyLeftBtn = new component(30, 30, \"blue\", 20, 40);\nmyRightBtn = new component(30, 30, \"blue\", 80, 40);\nmyGameArea.start();\n}",
        "var myGameArea = {\ncanvas : document.createElement(\"canvas\"),\nstart : function() {\nthis.canvas.width = 480;\nthis.canvas.height = 270;\nthis.context = this.canvas.getContext(\"2d\");\ndocument.body.insertBefore(this.canvas, document.body.childNodes[0]);\nthis.interval = setInterval(updateGameArea, 20);\nwindow.addEventListener('mousedown', function (e) {\nmyGameArea.x = e.pageX;\nmyGameArea.y = e.pageY;\n})\nwindow.addEventListener('mouseup', function (e) {\nmyGameArea.x = false;\nmyGameArea.y = false;\n})\nwindow.addEventListener('touchstart', function (e) {\nmyGameArea.x = e.pageX;\nmyGameArea.y = e.pageY;\n})\nwindow.addEventListener('touchend', function (e) {\nmyGameArea.x = false;\nmyGameArea.y = false;\n})\n},\nclear : function(){\nthis.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n}\n}",
        "function component(width, height, color, x, y) {\nthis.width = width;\nthis.height = height;\nthis.speedX = 0;\nthis.speedY = 0;\nthis.x = x;\nthis.y = y;\nthis.update = function() {\nctx = myGameArea.context;\nctx.fillStyle = color;\nctx.fillRect(this.x, this.y, this.width, this.height);\n}\nthis.clicked = function() {\nvar myleft = this.x;\nvar myright = this.x + (this.width);\nvar mytop = this.y;\nvar mybottom = this.y + (this.height);\nvar clicked = true;\nif ((mybottom < myGameArea.y) || (mytop > myGameArea.y) || (myright < myGameArea.x) || (myleft > myGameArea.x)) {\nclicked = false;\n}\nreturn clicked;\n}\n}\n\nfunction updateGameArea() {\nmyGameArea.clear();\nif (myGameArea.x && myGameArea.y) {\nif (myUpBtn.clicked()) {\nmyGamePiece.y -= 1;\n}\nif (myDownBtn.clicked()) {\nmyGamePiece.y += 1;\n}\nif (myLeftBtn.clicked()) {\nmyGamePiece.x += -1;\n}\nif (myRightBtn.clicked()) {\nmyGamePiece.x += 1;\n}\n}\nmyUpBtn.update();\nmyDownBtn.update();\nmyLeftBtn.update();\nmyRightBtn.update();\nmyGamePiece.update();\n}",
        "component",
        "speedX",
        "speedY",
        "newPos()",
        "key",
        "myGameArea",
        "false",
        "keys",
        "true",
        "mousedown",
        "mouseup",
        "touchstart",
        "touchend",
        "clicked",
        "updateGameArea"
      ]
    },
    {
      "title": "Game Obstacles",
      "summary": "Push the buttons to move the red square:\nAdd Some Obstacles\nNow we want to add some obstacles to our game.\nAdd a new component to the gaming area. Make it green, 10px wide, 200px high, and place it 300px to the right and 120px down.\nAlso update the obstacle component in every frame:\nExample\nREMOVE ADS\nHit The Obstacle = Game Over\nIn the example above, nothing happens when you hit the obstacle. In a game, that is not very satisfying.\nHow do we know if our red square hits the obstacle?\nCreate a new method in the component constructor, that checks if the component crashes with another component. This method should be called every time the frames updates, 50 times per second.\nAlso add a stop() method to the myGameArea object, which clears the 20 milliseconds interval.\nExample\nMoving Obstacle\nThe obstacle is of no danger when it is static, so we want it to move.\nChange the property value of myObstacle.x at every update:\nExample\nMultiple Obstacles\nHow about adding multiple obstacles?\nFor that we need a property for counting frames, and a method for execute something at a given frame rate.\nExample\nThe everyinterval function returns true if the current framenumber corresponds with the given interval.\nTo define multiple obstacles, first declare the obstacle variable as an array.\nSecond, we need to make some changes in the updateGameArea function.\nExample\nIn the updateGameArea function we must loop through every obstacle to see if there is a crash. If there is a crash, the updateGameArea function will stop, and no more drawing is done.\nThe updateGameArea function counts frames and adds an obstacle for every 150th frame.\nObstacles of Random Size\nTo make the game a bit more difficult, and fun, we will send in obstacles of random sizes, so that the red square must move up and down to not crash.\nExample",
      "examples": [
        "var myGamePiece;\nvar myObstacle;\n\nfunction startGame() {\nmyGamePiece = new component(30, 30, \"red\", 10, 120);\nmyObstacle = new component(10, 200, \"green\", 300, 120);\nmyGameArea.start();\n}\n\nfunction updateGameArea() {\nmyGameArea.clear();\nmyObstacle.update();\nmyGamePiece.newPos();\nmyGamePiece.update();\n}",
        "var myGameArea = {\ncanvas : document.createElement(\"canvas\"),\nstart : function() {\nthis.canvas.width = 480;\nthis.canvas.height = 270;\nthis.context = this.canvas.getContext(\"2d\");\ndocument.body.insertBefore(this.canvas, document.body.childNodes[0]);\nthis.interval = setInterval(updateGameArea, 20);\n},\nclear : function() {\nthis.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n},\nstop : function() {\nclearInterval(this.interval);\n}\n}\n\nfunction component(width, height, color, x, y) {\nthis.width = width;\nthis.height = height;\nthis.speedX = 0;\nthis.speedY = 0;\nthis.x = x;\nthis.y = y;\nthis.update = function() {\nctx = myGameArea.context;\nctx.fillStyle = color;\nctx.fillRect(this.x, this.y, this.width, this.height);\n}\nthis.newPos = function() {\nthis.x += this.speedX;\nthis.y += this.speedY;\n}\nthis.crashWith = function(otherobj) {\nvar myleft = this.x;\nvar myright = this.x + (this.width);\nvar mytop = this.y;\nvar mybottom = this.y + (this.height);\nvar otherleft = otherobj.x;\nvar otherright = otherobj.x + (otherobj.width);\nvar othertop = otherobj.y;\nvar otherbottom = otherobj.y + (otherobj.height);\nvar crash = true;\nif ((mybottom < othertop) ||\n(mytop > otherbottom) ||\n(myright < otherleft) ||\n(myleft > otherright)) {\ncrash = false;\n}\nreturn crash;\n}\n}\n\nfunction updateGameArea() {\nif (myGamePiece.crashWith(myObstacle)) {\nmyGameArea.stop();\n} else {\nmyGameArea.clear();\nmyObstacle.update();\nmyGamePiece.newPos();\nmyGamePiece.update();\n}\n}",
        "function updateGameArea() {\nif (myGamePiece.crashWith(myObstacle)) {\nmyGameArea.stop();\n} else {\nmyGameArea.clear();\nmyObstacle.x += -1;\nmyObstacle.update();\nmyGamePiece.newPos();\nmyGamePiece.update();\n}\n}",
        "var myGameArea = {\ncanvas : document.createElement(\"canvas\"),\nstart : function() {\nthis.canvas.width = 480;\nthis.canvas.height = 270;\nthis.context = this.canvas.getContext(\"2d\");\ndocument.body.insertBefore(this.canvas, document.body.childNodes[0]);\nthis.frameNo = 0;\nthis.interval = setInterval(updateGameArea, 20);\n},\nclear : function() {\nthis.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n},\nstop : function() {\nclearInterval(this.interval);\n}\n}\n\nfunction everyinterval(n) {\nif ((myGameArea.frameNo / n) % 1 == 0) {return true;}\nreturn false;\n}",
        "var myGamePiece;\nvar myObstacles = [];\n\nfunction updateGameArea() {\nvar x, y;\nfor (i = 0; i < myObstacles.length; i += 1) {\nif (myGamePiece.crashWith(myObstacles[i])) {\nmyGameArea.stop();\nreturn;\n}\n}\nmyGameArea.clear();\nmyGameArea.frameNo += 1;\nif (myGameArea.frameNo == 1 || everyinterval(150)) {\nx = myGameArea.canvas.width;\ny = myGameArea.canvas.height - 200\nmyObstacles.push(new component(10, 200, \"green\", x, y));\n}\nfor (i = 0; i < myObstacles.length; i += 1) {\nmyObstacles[i].x += -1;\nmyObstacles[i].update();\n}\nmyGamePiece.newPos();\nmyGamePiece.update();\n}",
        "function updateGameArea() {\nvar x, height, gap, minHeight, maxHeight, minGap, maxGap;\nfor (i = 0; i < myObstacles.length; i += 1) {\nif (myGamePiece.crashWith(myObstacles[i])) {\nmyGameArea.stop();\nreturn;\n}\n}\nmyGameArea.clear();\nmyGameArea.frameNo += 1;\nif (myGameArea.frameNo == 1 || everyinterval(150)) {\nx = myGameArea.canvas.width;\nminHeight = 20;\nmaxHeight = 200;\nheight = Math.floor(Math.random()*(maxHeight-minHeight+1)+minHeight);\nminGap = 50;\nmaxGap = 200;\ngap = Math.floor(Math.random()*(maxGap-minGap+1)+minGap);\nmyObstacles.push(new component(10, height, \"green\", x, 0));\nmyObstacles.push(new component(10, x - height - gap, \"green\", x, height + gap));\n}\nfor (i = 0; i < myObstacles.length; i += 1) {\nmyObstacles[i].x += -1;\nmyObstacles[i].update();\n}\nmyGamePiece.newPos();\nmyGamePiece.update();\n}",
        "stop()",
        "myGameArea",
        "myObstacle.x",
        "updateGameArea"
      ]
    },
    {
      "title": "Game Score",
      "summary": "Push the buttons to move the red square:\nCount The Score\nThere are many ways to keep the score in a game, we will show you how to write a score onto the canvas.\nFirst make a score component:\nExample\nThe syntax for writing text on a canvas element is different from drawing a rectangle. Therefore we must call the component constructor using an additional argument, telling the constructor that this component is of type \"text\".\nIn the component constructor we test if the component is of type \"text\", and use the fillText method instead of the fillRect method:\nExample\nREMOVE ADS\nAt last we add some code in the updateGameArea function that writes the score onto the canvas. We use the frameNo property to count the score:\nExample",
      "examples": [
        "var myGamePiece;\nvar myObstacles = [];\nvar myScore;\n\nfunction startGame() {\nmyGamePiece = new component(30, 30, \"red\", 10, 160);\nmyScore = new component(\"30px\", \"Consolas\", \"black\", 280, 40, \"text\");\nmyGameArea.start();\n}",
        "function component(width, height, color, x, y, type) {\nthis.type = type;\nthis.width = width;\nthis.height = height;\nthis.speedX = 0;\nthis.speedY = 0;\nthis.x = x;\nthis.y = y;\nthis.update = function() {\nctx = myGameArea.context;\nif (this.type == \"text\") {\nctx.font = this.width + \" \" + this.height;\nctx.fillStyle = color;\nctx.fillText(this.text, this.x, this.y);\n} else {\nctx.fillStyle = color;\nctx.fillRect(this.x, this.y, this.width, this.height);\n}\n}\n...\n}",
        "function updateGameArea() {\nvar x, height, gap, minHeight, maxHeight, minGap, maxGap;\nfor (i = 0; i < myObstacles.length; i += 1) {\nif (myGamePiece.crashWith(myObstacles[i])) {\nmyGameArea.stop();\nreturn;\n}\n}\nmyGameArea.clear();\nmyGameArea.frameNo += 1;\nif (myGameArea.frameNo == 1 || everyinterval(150)) {\nx = myGameArea.canvas.width;\nminHeight = 20;\nmaxHeight = 200;\nheight = Math.floor(Math.random()*(maxHeight-minHeight+1)+minHeight);\nminGap = 50;\nmaxGap = 200;\ngap = Math.floor(Math.random()*(maxGap-minGap+1)+minGap);\nmyObstacles.push(new component(10, height, \"green\", x, 0));\nmyObstacles.push(new component(10, x - height - gap, \"green\", x, height + gap));\n}\nfor (i = 0; i < myObstacles.length; i += 1) {\nmyObstacles[i].speedX = -1;\nmyObstacles[i].newPos();\nmyObstacles[i].update();\n}\nmyScore.text = \"SCORE: \" + myGameArea.frameNo;\nmyScore.update();\nmyGamePiece.newPos();\nmyGamePiece.update();\n}",
        "fillText",
        "fillRect",
        "frameNo"
      ]
    },
    {
      "title": "Game Images",
      "summary": "Push the buttons to move the smiley:\nHow to Use Images?\nTo add images on a canvas, the getContext(\"2d\") object has built-in image properties and methods.\nIn our game, to create the gamepiece as an image, use the component constructor, but instead of referring to a color, you must refer to the url of the image. And you must tell the constructor that this component is of type \"image\":\nExample\nIn the component constructor we test if the component is of type \"image\", and create an image object by using the built-in \"new Image()\" object constructor. When we are ready to draw the image, we use the drawImage method instead of the fillRect method:\nExample\nREMOVE ADS\nChange Images\nYou can change the image whenever you like by changing the src property of the image object of your component.\nIf you want to change the smiley everytime it moves, change the image source when the user clicks a button, and back to normal when the button is not clicked:\nExample\nBackground Images\nAdd a background image to your game area by adding it as a component, and also update the background in every frame:\nExample\nMoving Background\nChange the background component's speedX property to make the background move:\nExample\nBackground Loop\nTo make the same background loop forever, we must use a specific technique.\nStart by telling the component constructor that this is a background. The component constructor will then add the image twice, placing the second image immediately after the first image.\nIn the newPos() method, check if the x position of the component has reach the end of the image, if it has, set the x position of the component to 0:\nExample",
      "examples": [
        "function startGame() {\nmyGamePiece = new component(30, 30, \"smiley.gif\", 10, 120, \"image\");\nmyGameArea.start();\n}",
        "function component(width, height, color, x, y, type) {\nthis.type = type;\nif (type == \"image\") {\nthis.image = new Image();\nthis.image.src = color;\n}\nthis.width = width;\nthis.height = height;\nthis.speedX = 0;\nthis.speedY = 0;\nthis.x = x;\nthis.y = y;\nthis.update = function() {\nctx = myGameArea.context;\nif (type == \"image\") {\nctx.drawImage(this.image,\nthis.x,\nthis.y,\nthis.width, this.height);\n} else {\nctx.fillStyle = color;\nctx.fillRect(this.x, this.y, this.width, this.height);\n}\n}\n}",
        "function move(dir) {\nmyGamePiece.image.src = \"angry.gif\";\nif (dir == \"up\") {myGamePiece.speedY = -1; }\nif (dir == \"down\") {myGamePiece.speedY = 1; }\nif (dir == \"left\") {myGamePiece.speedX = -1; }\nif (dir == \"right\") {myGamePiece.speedX = 1; }\n}\n\nfunction clearmove() {\nmyGamePiece.image.src = \"smiley.gif\";\nmyGamePiece.speedX = 0;\nmyGamePiece.speedY = 0;\n}",
        "var myGamePiece;\nvar myBackground;\n\nfunction startGame() {\nmyGamePiece = new component(30, 30, \"smiley.gif\", 10, 120, \"image\");\nmyBackground = new component(656, 270, \"citymarket.jpg\", 0, 0, \"image\");\nmyGameArea.start();\n}\n\nfunction updateGameArea() {\nmyGameArea.clear();\nmyBackground.newPos();\nmyBackground.update();\nmyGamePiece.newPos();\nmyGamePiece.update();\n}",
        "function updateGameArea() {\nmyGameArea.clear();\nmyBackground.speedX = -1;\nmyBackground.newPos();\nmyBackground.update();\nmyGamePiece.newPos();\nmyGamePiece.update();\n}",
        "function component(width, height, color, x, y, type) {\nthis.type = type;\nif (type == \"image\" || type == \"background\") {\nthis.image = new Image();\nthis.image.src = color;\n}\nthis.width = width;\nthis.height = height;\nthis.speedX = 0;\nthis.speedY = 0;\nthis.x = x;\nthis.y = y;\nthis.update = function() {\nctx = myGameArea.context;\nif (type == \"image\" || type == \"background\") {\nctx.drawImage(this.image, this.x, this.y, this.width, this.height);\nif (type == \"background\") {\nctx.drawImage(this.image, this.x + this.width, this.y, this.width, this.height);\n}\n} else {\nctx.fillStyle = color;\nctx.fillRect(this.x, this.y, this.width, this.height);\n}\n}\nthis.newPos = function() {\nthis.x += this.speedX;\nthis.y += this.speedY;\nif (this.type == \"background\") {\nif (this.x == -(this.width)) {\nthis.x = 0;\n}\n}\n}\n}",
        "src",
        "image",
        "speedX",
        "newPos()",
        "x"
      ]
    },
    {
      "title": "Game Sound",
      "summary": "Turn up the volume. Do you hear a \"dunk\" when the red square hits an obstacle?\nHow to Add Sounds?\nUse the HTML5 <audio> element to add sound and music to your games.\nIn our examples, we create a new object constructor to handle sound objects:\nExample\nREMOVE ADS\nTo create a new sound object use the sound constructor, and when the red square hits an obstacle, play the sound:\nExample\nBackground Music\nTo add background music to your game, add a new sound object, and start playing when you start the game:\nExample",
      "examples": [
        "function sound(src) {\nthis.sound = document.createElement(\"audio\");\nthis.sound.src = src;\nthis.sound.setAttribute(\"preload\", \"auto\");\nthis.sound.setAttribute(\"controls\", \"none\");\nthis.sound.style.display = \"none\";\ndocument.body.appendChild(this.sound);\nthis.play = function(){\nthis.sound.play();\n}\nthis.stop = function(){\nthis.sound.pause();\n}\n}",
        "var myGamePiece;\nvar myObstacles = [];\nvar mySound;\n\nfunction startGame() {\nmyGamePiece = new component(30, 30, \"red\", 10, 120);\nmySound = new sound(\"bounce.mp3\");\nmyGameArea.start();\n}\n\nfunction updateGameArea() {\nvar x, height, gap, minHeight, maxHeight, minGap, maxGap;\nfor (i = 0; i < myObstacles.length; i += 1) {\nif (myGamePiece.crashWith(myObstacles[i])) {\nmySound.play();\nmyGameArea.stop();\nreturn;\n}\n}\n\n...\n\n}",
        "var myGamePiece;\nvar myObstacles = [];\nvar mySound;\nvar myMusic;\n\nfunction startGame() {\nmyGamePiece = new component(30, 30, \"red\", 10, 120);\nmySound = new sound(\"bounce.mp3\");\nmyMusic = new sound(\"gametheme.mp3\");\nmyMusic.play();\nmyGameArea.start();\n}",
        "sound"
      ]
    },
    {
      "title": "Game Gravity",
      "summary": "Some games have forces that pulls the game component in one direction, like gravity pulls objects to the ground.\nGravity\nTo add this functionality to our component constructor, first add a gravity property, which sets the current gravity. Then add a gravitySpeed property, which increases everytime we update the frame:\nExample\nREMOVE ADS\nHit the Bottom\nTo prevent the red square from falling forever, stop the falling when it hits the bottom of the game area:\nExample\nAccelerate Up\nIn a game, when you have a force that pulls you down, you should have a method to force the component to accelerate up.\nTrigger a function when someone clicks a button, and make the red square fly up in the air:\nExample\nA Game\nMake a game based on what we have learned so far:\nExample",
      "examples": [
        "function component(width, height, color, x, y, type) {\nthis.type = type;\nthis.width = width;\nthis.height = height;\nthis.x = x;\nthis.y = y;\nthis.speedX = 0;\nthis.speedY = 0;\nthis.gravity = 0.05;\nthis.gravitySpeed = 0;\nthis.update = function() {\nctx = myGameArea.context;\nctx.fillStyle = color;\nctx.fillRect(this.x, this.y, this.width, this.height);\n}\nthis.newPos = function() {\nthis.gravitySpeed += this.gravity;\nthis.x += this.speedX;\nthis.y += this.speedY + this.gravitySpeed;\n}\n}",
        "this.newPos = function() {\nthis.gravitySpeed += this.gravity;\nthis.x += this.speedX;\nthis.y += this.speedY + this.gravitySpeed;\nthis.hitBottom();\n}\nthis.hitBottom = function() {\nvar rockbottom = myGameArea.canvas.height - this.height;\nif (this.y > rockbottom) {\nthis.y = rockbottom;\n}\n}",
        "<script>\nfunction accelerate(n) {\nmyGamePiece.gravity = n;\n}\n</script>\n\n<button onmousedown=\"accelerate(-0.2)\" onmouseup=\"accelerate(0.1)\">ACCELERATE</button>",
        "gravity",
        "gravitySpeed"
      ]
    },
    {
      "title": "Game Bouncing",
      "summary": "This red square bounces when it hits the floor:\nBouncing\nAnother functionallity we want to add is the bounce property.\nThe bounce property indicates if the component will bounce back when gravity makes it fall down to the ground.\nThe bounce property value must be a number. 0 is no bounce at all, and 1 will make the component bounce all the way backto where it start falling.\nExample",
      "examples": [
        "function component(width, height, color, x, y, type) {\nthis.type = type;\nthis.width = width;\nthis.height = height;\nthis.x = x;\nthis.y = y;\nthis.speedX = 0;\nthis.speedY = 0;\nthis.gravity = 0.1;\nthis.gravitySpeed = 0;\nthis.bounce = 0.6;\nthis.update = function() {\nctx = myGameArea.context;\nctx.fillStyle = color;\nctx.fillRect(this.x, this.y, this.width, this.height);\n}\nthis.newPos = function() {\nthis.gravitySpeed += this.gravity;\nthis.x += this.speedX;\nthis.y += this.speedY + this.gravitySpeed;\nthis.hitBottom();\n}\nthis.hitBottom = function() {\nvar rockbottom = this.gamearea.canvas.height - this.height;\nif (this.y > rockbottom) {\nthis.y = rockbottom;\nthis.gravitySpeed = -(this.gravitySpeed * this.bounce);\n}\n}\n}",
        "bounce"
      ]
    },
    {
      "title": "Game Rotation",
      "summary": "The red square can rotate:\nRotating Components\nEarlier in this tutorial, the red square was able to move around on the gamearea, but it could not turn or rotate.\nTo rotate components, we have to change the way we draw components.\nThe only rotation method available for the canvas element will rotate the entire canvas:\nEverything else you draw on the canvas will also be rotated, not only the specific component.\nThat is why we have to make some changes in the update() method:\nFirst, we save the current canvas context object:\nctx.save();\nThen we move the entire canvas to the center of the specific component, using the translate method:\nctx.translate(x, y);\nThen we perform the wanted rotation using the rotate() method:\nctx.rotate(angle);\nNow we are ready to draw the component onto the canvas, but now we will draw it with its center position at position 0,0 on the translated (and rotated) canvas:\nctx.fillRect(width / -2, height / -2, width, height);\nWhen we are finished, we must restore the context object back to its saved position, using the restore method:\nctx.restore();\nThe component is the only thing that is rotated:\nREMOVE ADS\nThe Component Constructor\nThe component constructor has a new property called angle, which is radian number that represents the angle of the component.\nThe update method of the component constructor is were we draw the component, and here you can see the changes that will allow the component to rotate:\nExample",
      "examples": [
        "function component(width, height, color, x, y) {\nthis.width = width;\nthis.height = height;\nthis.angle = 0;\nthis.x = x;\nthis.y = y;\nthis.update = function() {\nctx = myGameArea.context;\nctx.save();\nctx.translate(this.x, this.y);\nctx.rotate(this.angle);\nctx.fillStyle = color;\nctx.fillRect(this.width / -2, this.height / -2, this.width, this.height);\nctx.restore();\n}\n}\n\nfunction updateGameArea() {\nmyGameArea.clear();\nmyGamePiece.angle += 1 * Math.PI / 180;\nmyGamePiece.update();\n}",
        "update()",
        "ctx.save();",
        "ctx.translate(x, y);",
        "ctx.rotate(angle);",
        "ctx.fillRect(width / -2, height / -2, width, height);",
        "ctx.restore();",
        "component",
        "angle",
        "update"
      ]
    },
    {
      "title": "Game Movement",
      "summary": "With the new way of drawing components, explained in the Game Rotation chapter, the movements are more flexible.\nHow to Move Objects?\nAdd a speed property to the component constructor, which represents the current speed of the component.\nAlso make some changes in the newPos() method, to calculate the position of the component, based on speed and angle.\nBy default, the components are facing up, and by setting the speed property to 1, the component will start moving forward.\nExample\nREMOVE ADS\nMaking Turns\nWe also want to be able to make left and right turns. Make a new property called moveAngle, which indicates the current moving value, or rotation angle. In the newPos() method calculate the angle based on the moveAngle property:\nExample\nSet the moveangle property to 1, and see what happens:\nUse the Keyboard\nHow does the red square move when using the keyboard? Instead of moving up and down, and from side to side, the red square moves forward when you use the \"up\" arrow, and turns left and right when pressing the left and right arrows.\nExample",
      "examples": [
        "function component(width, height, color, x, y) {\nthis.gamearea = gamearea;\nthis.width = width;\nthis.height = height;\nthis.angle = 0;\nthis.speed = 1;\nthis.x = x;\nthis.y = y;\nthis.update = function() {\nctx = myGameArea.context;\nctx.save();\nctx.translate(this.x, this.y);\nctx.rotate(this.angle);\nctx.fillStyle = color;\nctx.fillRect(this.width / -2, this.height / -2, this.width, this.height);\nctx.restore();\n}\nthis.newPos = function() {\nthis.x += this.speed * Math.sin(this.angle);\nthis.y -= this.speed * Math.cos(this.angle);\n}\n}",
        "function component(width, height, color, x, y) {\nthis.width = width;\nthis.height = height;\nthis.angle = 0;\nthis.moveAngle = 1;\nthis.speed = 1;\nthis.x = x;\nthis.y = y;\nthis.update = function() {\nctx = myGameArea.context;\nctx.save();\nctx.translate(this.x, this.y);\nctx.rotate(this.angle);\nctx.fillStyle = color;\nctx.fillRect(this.width / -2, this.height / -2, this.width, this.height);\nctx.restore();\n}\nthis.newPos = function() {\nthis.angle += this.moveAngle * Math.PI / 180;\nthis.x += this.speed * Math.sin(this.angle);\nthis.y -= this.speed * Math.cos(this.angle);\n}\n}",
        "speed",
        "component",
        "newPos()",
        "angle",
        "moveAngle"
      ]
    }
  ],
  "glossary": [
    "backend",
    "canvas circles",
    "canvas clearrect",
    "canvas clipping",
    "canvas clock",
    "canvas compositing",
    "canvas coordinates",
    "canvas curves",
    "canvas drawing",
    "canvas images",
    "canvas intro",
    "canvas lines",
    "canvas rectangles",
    "canvas shadows",
    "canvas shapes",
    "canvas text",
    "canvas transformations",
    "clock face",
    "clock hands",
    "clock intro",
    "clock numbers",
    "clock start",
    "exercises",
    "free",
    "game bouncing",
    "game canvas",
    "game components",
    "game controllers",
    "game gravity",
    "game images",
    "game intro",
    "game movement",
    "game obstacles",
    "game rotation",
    "game score",
    "game sound",
    "google maps",
    "graphics home",
    "html game",
    "html graphics",
    "javascript",
    "maps basic",
    "maps controls",
    "maps events",
    "maps intro",
    "maps overlays",
    "maps reference",
    "maps types",
    "plot canvas",
    "plot chart.js",
    "plot d3.js",
    "plot google",
    "plot graphics",
    "plot plotly",
    "plotting",
    "programs",
    "report error",
    "svg advantages",
    "svg animation",
    "svg circle",
    "svg ellipse",
    "svg fill",
    "svg image",
    "svg intro",
    "svg line",
    "svg links",
    "svg marker",
    "svg path",
    "svg patterns",
    "svg polygon",
    "svg polyline",
    "svg quiz",
    "svg rectangle",
    "svg reference",
    "svg scripting",
    "svg stroke",
    "svg textpath",
    "svg transformations",
    "w3.css",
    "w3schools spaces"
  ],
  "objectives": [
    "Plotly.js",
    "Chart.js",
    "Google Chart",
    "D3.js"
  ]
}